                      (    supercomm.asm):00001         ********************************************************************
                      (    supercomm.asm):00002         * SuperComm - OS-9 Level Two Communications Program
                      (    supercomm.asm):00003         *
                      (    supercomm.asm):00004         * $Id$
                      (    supercomm.asm):00005         *
                      (    supercomm.asm):00006         * Ed.    Comments                                       Who YY/MM/DD
                      (    supercomm.asm):00007         * ------------------------------------------------------------------
                      (    supercomm.asm):00008         *        Acquired source                                    02/11/20
                      (    supercomm.asm):00009         
                      (    supercomm.asm):00010                  nam   SuperComm
                      (    supercomm.asm):00011                  ttl   OS-9 Level Two Communications Program
                      (    supercomm.asm):00012         
                      (    supercomm.asm):00013                  ifp1
                      (    supercomm.asm):00014                  use   defsfile
     0002             (         defsfile):00001         Level   equ     2
                      (         defsfile):00002                 use     os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (         defsfile):00003                 use     scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (         defsfile):00004                 use     coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0040                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0040                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0040                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         *************************************************
                      (           coco.d):00148         *
                      (           coco.d):00149         * NitrOS-9 Level 1 Section
                      (           coco.d):00150         *
                      (           coco.d):00151         *************************************************
                      (           coco.d):00152         
0004                  (           coco.d):00153         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE      
                      (           coco.d):00156         
                      (           coco.d):00157         *************************************************
                      (           coco.d):00158         *
                      (           coco.d):00159         * NitrOS-9 Level 2 Section
                      (           coco.d):00160         *
                      (           coco.d):00161         *************************************************
                      (           coco.d):00162         
                      (           coco.d):00163         ****************************************
                      (           coco.d):00164         * Dynamic Address Translator Definitions
                      (           coco.d):00165         *
     0008             (           coco.d):00166         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00167         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00168         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00169         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00170         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00171         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00172         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00173         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00174         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00175         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00176         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00177         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00178         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00179         IOBlock        EQU       $3F
     003F             (           coco.d):00180         ROMBlock       EQU       $3F
     007F             (           coco.d):00181         IOAddr         EQU       $7F
     0001             (           coco.d):00182         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00183         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00184         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00185         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00186         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00187         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00188         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00189         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00190         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00191         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00192         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00193         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00194         
                      (           coco.d):00195         ***************************
                      (           coco.d):00196         * Color Computer 3 Specific
                      (           coco.d):00197         *
     0001             (           coco.d):00198         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00199         
                      (           coco.d):00200         ********************
                      (           coco.d):00201         * Hardware addresses
                      (           coco.d):00202         *
     FF00             (           coco.d):00203         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00204         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00205         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00206         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00207         
     0007             (           coco.d):00208         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00209         
                      (           coco.d):00210                        ENDC
                      (           coco.d):00211                        
                      (           coco.d):00212                        ENDC      
                      (           coco.d):00213         
                      (    supercomm.asm):00015                  endc
                      (    supercomm.asm):00016         
     0011             (    supercomm.asm):00017         tylg     set   Prgrm+Objct
     0081             (    supercomm.asm):00018         atrv     set   ReEnt+rev
     0001             (    supercomm.asm):00019         rev      set   $01
     0001             (    supercomm.asm):00020         edition  set   $01 
                      (    supercomm.asm):00021         
0000 87CD3F39000D1181 (    supercomm.asm):00022                  mod   eom,name,tylg,atrv,start,dsize
     2E0A102000
                      (    supercomm.asm):00023         
000D 5375706572436F6D (    supercomm.asm):00024         name     fcs   /SuperComm/
     ED
0016 01               (    supercomm.asm):00025                  fcb   edition
                      (    supercomm.asm):00026         
                      (    supercomm.asm):00027         *************************************************
                      (    supercomm.asm):00028         *
                      (    supercomm.asm):00029         * Supercomm Data Area Layout
                      (    supercomm.asm):00030         *
                      (    supercomm.asm):00031         * Separated from Main source for easier editing
                      (    supercomm.asm):00032         *
                      (    supercomm.asm):00033         
                      (    supercomm.asm):00034                  org   0
0000.                 (    supercomm.asm):00035         Temp     rmb   2            Temp var for whatever
0002.                 (    supercomm.asm):00036         u0000    rmb   2            pointer to parameters from shell
0004.                 (    supercomm.asm):00037         u0002    rmb   2            Ptr to max. address of receive buffer (constant)
0006.                 (    supercomm.asm):00038         u0004    rmb   2            Ptr to start address of receive buffer (constant)
0008.                 (    supercomm.asm):00039         u0006    rmb   2            Ptr to current end of receive buffer
000A.                 (    supercomm.asm):00040         u0C82    rmb   1            Search/Reply string # being processed
000B.                 (    supercomm.asm):00041         u0C88    rmb   1            MSB of size of converted output text buffer
000C.                 (    supercomm.asm):00042         u0C89    rmb   1            LSB of size of converted output text buffer
000D.                 (    supercomm.asm):00043         u0008    rmb   1
000E.                 (    supercomm.asm):00044         u0009    rmb   2
0010.                 (    supercomm.asm):00045         u000B    rmb   1
0011.                 (    supercomm.asm):00046         u000C    rmb   1
0012.                 (    supercomm.asm):00047         u000D    rmb   2
0014.                 (    supercomm.asm):00048         u000F    rmb   2
0016.                 (    supercomm.asm):00049         u0011    rmb   1            Copy of IT.DLO (Delete line 0=BSE, 1=CRLF)
0017.                 (    supercomm.asm):00050         u0012    rmb   1            Copy of IT.EKO (0=echo off, 1=echo on)
0018.                 (    supercomm.asm):00051         u0013    rmb   2            Ptr to device descriptor
001A.                 (    supercomm.asm):00052         u0015    rmb   2            Ptr to start of SuperComm
001C.                 (    supercomm.asm):00053         u0017    rmb   2            Size of SuperComm
001E.                 (    supercomm.asm):00054         u0019    rmb   1            special version flag (adds 'a' to version #)
001F.                 (    supercomm.asm):00055         u001A    rmb   1
0020.                 (    supercomm.asm):00056         u001B    rmb   1
0021.                 (    supercomm.asm):00057         u001C    rmb   1
0022.                 (    supercomm.asm):00058         u001D    rmb   1
0023.                 (    supercomm.asm):00059         u001E    rmb   2
0025.                 (    supercomm.asm):00060         u0020    rmb   1
0026.                 (    supercomm.asm):00061         u0021    rmb   1
0027.                 (    supercomm.asm):00062         u0022    rmb   1
0028.                 (    supercomm.asm):00063         u0023    rmb   1            sending ASCII file xfer flag (1=Send ASCII)
0029.                 (    supercomm.asm):00064         u0024    rmb   1
002A.                 (    supercomm.asm):00065         u0025    rmb   1            Flag that ASCII receive file exists
002B.                 (    supercomm.asm):00066         u0026    rmb   1            ASCII receive buffer open
002C.                 (    supercomm.asm):00067         u0027    rmb   2
002E.                 (    supercomm.asm):00068         u0029    rmb   1
002F.                 (    supercomm.asm):00069         u002A    rmb   1            path # to recieve buffer file
0030.                 (    supercomm.asm):00070         u002B    rmb   1            path # to serial port
0031.                 (    supercomm.asm):00071         u002C    rmb   1            path # to file for ASCII send
0032.                 (    supercomm.asm):00072         u002D    rmb   10           Terminal port to open (up to 10 chars)
003C.                 (    supercomm.asm):00073         u0037    rmb   2
003E.                 (    supercomm.asm):00074         u0039    rmb   3
0041.                 (    supercomm.asm):00075         u003C    rmb   1
0042.                 (    supercomm.asm):00076         u003D    rmb   1            Path # for disk file
0043.                 (    supercomm.asm):00077         u003E    rmb   1            path to status line window
0044.                 (    supercomm.asm):00078         u003F    rmb   1            path to conference window (if enabled)
0045.                 (    supercomm.asm):00079         u0040    rmb   1            conference mode activated flag (1=Conference mode)
0046.                 (    supercomm.asm):00080         u0041    rmb   1            key sense data
0047.                 (    supercomm.asm):00081         u0042    rmb   1            path to download file
0048.                 (    supercomm.asm):00082         u0043    rmb   1
0049.                 (    supercomm.asm):00083         u0044    rmb   1            1 byte bffr for block responses (ACK/NAK,XON/XOFF)
004A.                 (    supercomm.asm):00084         u0045    rmb   1
004B.                 (    supercomm.asm):00085         u0046    rmb   1            flag for YModem batch
004C.                 (    supercomm.asm):00086         u0047    rmb   1 possible remove (not referenced anywhere)
004D.                 (    supercomm.asm):00087         u0048    rmb   1            \  (u0048 is also running checksum byte)
004E.                 (    supercomm.asm):00088         u0049    rmb   1            / running CRC for file Xfers
004F.                 (    supercomm.asm):00089         u004A    rmb   1            last selected xfer protocol (Upload/Send)
0050.                 (    supercomm.asm):00090         u004B    rmb   1            last selected xfer protocol (Download/Receive)
0051.                 (    supercomm.asm):00091         u004C    rmb   1
0052.                 (    supercomm.asm):00092         u004D    rmb   2            used as a byte counter in download
0054.                 (    supercomm.asm):00093         u004F    rmb   1            Internal Error # on xfer
0055.                 (    supercomm.asm):00094         u0050    rmb   2            Ptr to end of X/Ymodem buffer in modem recv bffr
0057.                 (    supercomm.asm):00095         u0052    rmb   1            Current attempt # on CheckSum receive (max=10)
0058.                 (    supercomm.asm):00096         u0053    rmb   2            Current block # (only LSB is used in blck hdrs)
005A.                 (    supercomm.asm):00097         u0055    rmb   2            True block size (includes blk/comp # & crc/chksm)
005C.                 (    supercomm.asm):00098         u0057    rmb   2            # data bytes needed for block (128 or 1024)
005E.                 (    supercomm.asm):00099         u0059    rmb   1            Current attempt # on CRC receive (max=4)
005F.                 (    supercomm.asm):00100         u005A    rmb   1            CRC or Checksum (0=Checksum)
0060.                 (    supercomm.asm):00101         u005B    rmb   4            4 byte longint (for file sizes)
0064.                 (    supercomm.asm):00102         u005F    rmb   1
0065.                 (    supercomm.asm):00103         u0060    rmb   2            Part of timer routine for download timeouts???
0067.                 (    supercomm.asm):00104         u0062    rmb   2
0069.                 (    supercomm.asm):00105         u0064    rmb   1
006A.                 (    supercomm.asm):00106         u0065    rmb   1
006B.                 (    supercomm.asm):00107         u0066    rmb   2            Ptr to next key in Conf mode keyboard buffer
006D.                 (    supercomm.asm):00108         u0068    rmb   1            Counter of # keys in Conf mode keyboard buffer
006E.                 (    supercomm.asm):00109         u0069    rmb   1
006F.                 (    supercomm.asm):00110         u006A    rmb   1
0070.                 (    supercomm.asm):00111         u006B    rmb   1            ZModem flag (hi bit clear=none in progress)
0071.                 (    supercomm.asm):00112         u006C    rmb   2            pointer to ZModem start header
0073.                 (    supercomm.asm):00113         u006E    rmb   1            duplicate of input path for ZModem (for restore)
0074.                 (    supercomm.asm):00114         u006F    rmb   1 possible remove
0075.                 (    supercomm.asm):00115         u0070    rmb   1
0076.                 (    supercomm.asm):00116         u0071    rmb   1
0077.                 (    supercomm.asm):00117         u0072    rmb   1            path to VRN (0=No VRN present)
0078.                 (    supercomm.asm):00118         u0073    rmb   1            Current seconds counter (either VRN or Clock)
0079.                 (    supercomm.asm):00119         u0074    rmb   1            # seconds on last update done (either VRN or Clock
007A.                 (    supercomm.asm):00120         u0075    rmb   1            Timer on/off flag (0=Off)
007B.                 (    supercomm.asm):00121         u0076    rmb   1            child process # (shell, sz & rz etc...)
007C.                 (    supercomm.asm):00122         u0077    rmb   11           time On-Line ASCII text (with CurXY) '00:00:00'
0087.                 (    supercomm.asm):00123         u0082    rmb   1            Width of original screen
0088.                 (    supercomm.asm):00124         u0083    rmb   1            Height of original screen
0089.                 (    supercomm.asm):00125         u0084    rmb   1            Type of original screen (ex. 1=40x24 Hware txt)
008A.                 (    supercomm.asm):00126         u0085    rmb   1            background color for overlay windows
008B.                 (    supercomm.asm):00127         u0086    rmb   1
008C.                 (    supercomm.asm):00128         u0087    rmb   1            FColor of main window
008D.                 (    supercomm.asm):00129         u0088    rmb   1            BColor of main window
008E.                 (    supercomm.asm):00130         u0089    rmb   1            FColor of conference mode window
008F.                 (    supercomm.asm):00131         u008A    rmb   1
0090.                 (    supercomm.asm):00132         u008B    rmb   1
0091.                 (    supercomm.asm):00133         u008C    rmb   1
0092.                 (    supercomm.asm):00134         u008D    rmb   1            Foreground color of original screen
0093.                 (    supercomm.asm):00135         u008E    rmb   1            Background color of original screen
0094.                 (    supercomm.asm):00136         u008F    rmb   1            Border color of original screen
0095.                 (    supercomm.asm):00137         u0090    rmb   1            X size of main window
0096.                 (    supercomm.asm):00138         u0091    rmb   1            Y size of main window
0097.                 (    supercomm.asm):00139         u0092    rmb   1
0098.                 (    supercomm.asm):00140         u0093    rmb   2            Ptr to next filename (from dir read)
009A.                 (    supercomm.asm):00141         u0095    rmb   2
009C.                 (    supercomm.asm):00142         u0097    rmb   2
009E.                 (    supercomm.asm):00143         u0099    rmb   1
009F.                 (    supercomm.asm):00144         u009A    rmb   1
00A0.                 (    supercomm.asm):00145         u009B    rmb   1            filename present for Upload/Download flag
00A1.                 (    supercomm.asm):00146         u009C    rmb   3            FColor codes
00A4.                 (    supercomm.asm):00147         u009F    rmb   32           old filename for downloads
00C4.                 (    supercomm.asm):00148         u00BF    rmb   2
00C6.                 (    supercomm.asm):00149         u00C1    rmb   26
00E0.                 (    supercomm.asm):00150         u00DB    rmb   2
00E2.                 (    supercomm.asm):00151         u00DD    rmb   2
00E4.                 (    supercomm.asm):00152         u00DF    rmb   1            input buffer from modem (192 bytes)
00E5.                 (    supercomm.asm):00153         u00E0    rmb   1
00E6.                 (    supercomm.asm):00154         u00E1    rmb   1
00E7.                 (    supercomm.asm):00155         u00E2    rmb   4
00EB.                 (    supercomm.asm):00156         u00E6    rmb   13
00F8.                 (    supercomm.asm):00157         u00F3    rmb   10
0102.                 (    supercomm.asm):00158         u00FD    rmb   1010
04F4.                 (    supercomm.asm):00159         u04EF    rmb   1
04F5.                 (    supercomm.asm):00160         u04F0    rmb   31
0514.                 (    supercomm.asm):00161         u050F    rmb   255          Conference mode keyboard buffer
0613.                 (    supercomm.asm):00162         u060E    rmb   255          Generic Entry from keyboard buffer
0712.                 (    supercomm.asm):00163         u070D    rmb   1024         output buffer to screen (with conversion)
0B12.                 (    supercomm.asm):00164         u0B0D    rmb   255
0C11.                 (    supercomm.asm):00165         u0C0C    rmb   32           Current SS.Opt settings for local keyboard
0C31.                 (    supercomm.asm):00166         u0C2C    rmb   2
0C33.                 (    supercomm.asm):00167         u0C2E    rmb   34
0C55.                 (    supercomm.asm):00168         u0C50    rmb   16           Palette settings of original screen
0C65.                 (    supercomm.asm):00169         u0C60    rmb   1            Start of buffer for converted ANSI sequences
0C66.                 (    supercomm.asm):00170         u0C61    rmb   1
0C67.                 (    supercomm.asm):00171         u0C62    rmb   30
0C85.                 (    supercomm.asm):00172         u0C80    rmb   2            Ptr to converted ANSI buffer (C60)
0C87.                 (    supercomm.asm):00173         u0C83    rmb   1
0C88.                 (    supercomm.asm):00174         u0C84    rmb   1            Currently selected menu item # in ==> menu
0C89.                 (    supercomm.asm):00175         u0C85    rmb   3
0C8C.                 (    supercomm.asm):00176         u0C8A    rmb   1            Flag: 0=Not processing ANSI <ESC> sequence
0C8D.                 (    supercomm.asm):00177         u0C8B    rmb   1            ??? (Inited to 0 if starting ANSI <ESC> sequence)
0C8E.                 (    supercomm.asm):00178         u0C8C    rmb   1
0C8F.                 (    supercomm.asm):00179         u0C8D    rmb   2            Ptr to ANSI sequence (raw ANSI:u0B0D)
0C91.                 (    supercomm.asm):00180         u0C8F    rmb   2            current overlay window start co-ordinates
0C93.                 (    supercomm.asm):00181         u0C91    rmb   2            current overlay window size
0C95.                 (    supercomm.asm):00182         u0C93    rmb   1 possible remove
0C96.                 (    supercomm.asm):00183         u0C94    rmb   1            current cursor X position
0C97.                 (    supercomm.asm):00184         u0C95    rmb   1            current cursor Y position
0C98.                 (    supercomm.asm):00185         u0C96    rmb   2            current X/Y co-ordinates?
0C9A.                 (    supercomm.asm):00186         u0C98    rmb   1
0C9B.                 (    supercomm.asm):00187         u0C99    rmb   6            Place to hold F$Time packet
0CA1.                 (    supercomm.asm):00188         u0C9F    rmb   1
0CA2.                 (    supercomm.asm):00189         u0CA0    rmb   1            seems to be flag for upload/download (0=Upload)
0CA3.                 (    supercomm.asm):00190         u0CA1    rmb   2
0CA5.                 (    supercomm.asm):00191         u0CA3    rmb   1
0CA6.                 (    supercomm.asm):00192         u0CA4    rmb   1
0CA7.                 (    supercomm.asm):00193         u0CA5    rmb   1            bit 8=Stop bits, bit 6=Word Len, bits 1-3=Baud
0CA8.                 (    supercomm.asm):00194         u0CA6    rmb   1            current terminal type (0=TTY, 1=OS9, 2=ANSI)
0CA9.                 (    supercomm.asm):00195         u0CA7    rmb   1            Current Echo type (0=Off, 1=On)
0CAA.                 (    supercomm.asm):00196         u0CA8    rmb   1
0CAB.                 (    supercomm.asm):00197         u0CA9    rmb   1
0CAC.                 (    supercomm.asm):00198         u0CAA    rmb   1
0CAD.                 (    supercomm.asm):00199         u0CAB    rmb   1            Current hangup method (0=DTR drop, else +++ATH)
0CAE.                 (    supercomm.asm):00200         u0CAC    rmb   1            Current Parity setting
0CAF.                 (    supercomm.asm):00201         u0CAD    rmb   1
0CB0.                 (    supercomm.asm):00202         u0CAE    rmb   1            Auto Zmodem flag (0=Yes)
0CB1.                 (    supercomm.asm):00203         u0CAF    rmb   1            Pause off char. code (for ASCII receive)
0CB2.                 (    supercomm.asm):00204         u0CB0    rmb   1            Pause on char. code (for ASCII receive)
0CB3.                 (    supercomm.asm):00205         u0CB1    rmb   33
0CD4.                 (    supercomm.asm):00206         u0CD2    rmb   32            Current data directory path list
0CF4.                 (    supercomm.asm):00207         u0CF2    rmb   39
0D1B.                 (    supercomm.asm):00208         u0D19    rmb   1
0D1C.                 (    supercomm.asm):00209         u0D1A    rmb   2
0D1E.                 (    supercomm.asm):00210         u0D1C    rmb   128           <ALT>-<1> programmable key buffer
0D9E.                 (    supercomm.asm):00211         u0D9C    rmb   128           <ALT>-<2> programmable key buffer
0E1E.                 (    supercomm.asm):00212         u0E1C    rmb   128           <ALT>-<3> programmable key buffer
0E9E.                 (    supercomm.asm):00213         u0E9C    rmb   128           <ALT>-<4> programmable key buffer
0F1E.                 (    supercomm.asm):00214         u0F1C    rmb   128           <ALT>-<5> programmable key buffer
0F9E.                 (    supercomm.asm):00215         u0F9C    rmb   128           <ALT>-<6> programmable key buffer
101E.                 (    supercomm.asm):00216         u101C    rmb   128           <ALT>-<7> programmable key buffer
109E.                 (    supercomm.asm):00217         u109C    rmb   128           <ALT>-<8> programmable key buffer
111E.                 (    supercomm.asm):00218         u111C    rmb   256           SSn strings (4 of 64 bytes each)
121E.                 (    supercomm.asm):00219         u121C    rmb   256           RSn strings (4 of 64 bytes each)
131E.                 (    supercomm.asm):00220         u131C    rmb   128
139E.                 (    supercomm.asm):00221         u139C    rmb   2             Pointer to RSn string we are working on
13A0.                 (    supercomm.asm):00222         u139E    rmb   1             # download protocols supported
13A1.                 (    supercomm.asm):00223         u139F    rmb   4
13A5.                 (    supercomm.asm):00224         u13A3    rmb   1
13A6.                 (    supercomm.asm):00225         u13A4    rmb   1
13A7.                 (    supercomm.asm):00226         u13A5    rmb   1
13A8.                 (    supercomm.asm):00227         u13A6    rmb   3
                      (    supercomm.asm):00228         * ??? rest big buffer, most used for text, input & output ???
13AB.                 (    supercomm.asm):00229         u13A9    rmb   1            Temp buffer for small text, etc.
13AC.                 (    supercomm.asm):00230         u13AA    rmb   6
13B2.                 (    supercomm.asm):00231         u13B0    rmb   137
143B.                 (    supercomm.asm):00232         u1439    rmb   16
144B.                 (    supercomm.asm):00233         u1449    rmb   112
14BB.                 (    supercomm.asm):00234         u14B9    rmb   512
16BB.                 (    supercomm.asm):00235         u16B9    rmb   $2000-200-.  ASCII recieve buffer (expanded by #xxK modifier)
1F38.                 (    supercomm.asm):00236         u1F38    rmb   200          stack
     2000             (    supercomm.asm):00237         dsize    equ   .
                      (    supercomm.asm):00238         
0017 50726F6772616D20 (    supercomm.asm):00239                  fcc   'Program by Dave Philipsen Copyright (c) 1988, 1989,1992'
     6279204461766520
     5068696C69707365
     6E20436F70797269
     6768742028632920
     313938382C203139
     38392C31393932
004E 2028273932207570 (    supercomm.asm):00240                  fcc   / ('92 updates by Randy K. Wilson)/
     6461746573206279
     2052616E6479204B
     2E2057696C736F6E
     29
                      (    supercomm.asm):00241         
006F 0055             (    supercomm.asm):00242         L006F    fdb   85             # bytes this message (?) ($55)
0071 0C               (    supercomm.asm):00243                  fcb   C$FORM         Clear screen
0072 022321           (    supercomm.asm):00244                  fcb   $02,$23,$21    CurXY @ 3,1
0075 5375706572436F6D (    supercomm.asm):00245                  fcc   'SuperComm   v2.2'
     6D20202076322E32
0085 022423           (    supercomm.asm):00246                  fcb   $02,$24,$23    CurXY @ 4,3
0088 436F707972696768 (    supercomm.asm):00247                  fcc   'Copyright (c)'
     7420286329
0095 022324           (    supercomm.asm):00248                  fcb   $02,$23,$24    CurXY @ 3,4
0098 313938382C203139 (    supercomm.asm):00249                  fcc   '1988, 1989, 1992'
     38392C2031393932
00A8 022626           (    supercomm.asm):00250                  fcb   $02,$26,$26    CurXY @ 6,6
00AB 7772697474656E20 (    supercomm.asm):00251                  fcc   'written by'
     6279
00B5 022427           (    supercomm.asm):00252                  fcb   $02,$24,$27    CurXY @ 4,7
00B8 4461766520506869 (    supercomm.asm):00253                  fcc   'Dave Philipsen'
     6C697073656E
                      (    supercomm.asm):00254         
00C6 0023             (    supercomm.asm):00255         L00C6    fdb   35             # bytes this message ($23)
00C8 0C               (    supercomm.asm):00256                  fcb   C$FORM         Clear screen
00C9 022221           (    supercomm.asm):00257                  fcb   $02,$22,$21    CurXY @ 2,1
00CC 7769746820757064 (    supercomm.asm):00258                  fcc   'with updates by'
     61746573206279
00DB 022222           (    supercomm.asm):00259                  fcb   $02,$22,$22    CurXY @ 2,2
00DE 2052616E64792057 (    supercomm.asm):00260                  fcc   ' Randy Wilson'
     696C736F6E
                      (    supercomm.asm):00261         
00EB 001C             (    supercomm.asm):00262         L00EB    fdb   28             # bytes this message ($1C)
00ED 024020           (    supercomm.asm):00263                  fcb   $02,$40,$20    CurXY @ 32,0
00F0 1B3204           (    supercomm.asm):00264                  fcb   $1B,$32,4      Foreground color= Yellow
00F3 5375706572436F6D (    supercomm.asm):00265                  fcc   'SuperComm v2.2 '
     6D2076322E3220
0102 1B3203           (    supercomm.asm):00266                  fcb   $1B,$32,3      Foreground color= White
0105 025820           (    supercomm.asm):00267                  fcb   $02,$58,$20    CurXY @ 55,0
0108 3D               (    supercomm.asm):00268                  fcc   '='            (for port '=' baudrate)
                      (    supercomm.asm):00269         
0109 01C6             (    supercomm.asm):00270         L0109    fdb   454            # bytes this message ($C6)
010B 202020557365203C (    supercomm.asm):00271                  fcc   '   Use <ALT> key with the following keys:'
     414C543E206B6579
     2077697468207468
     6520666F6C6C6F77
     696E67206B657973
     3A
0134 0D0A0A           (    supercomm.asm):00272                  fcb   C$CR,C$LF,C$LF
0137 2041202D20417574 (    supercomm.asm):00273                  fcc   ' A - Auto Dialer           Q - Quit'
     6F204469616C6572
     2020202020202020
     20202051202D2051
     756974
015A 0D0A             (    supercomm.asm):00274                  fcb   C$CR,C$LF
015C 2042202D20426175 (    supercomm.asm):00275                  fcc   ' B - Baud Rates            R - Reset Palettes'
     6420526174657320
     2020202020202020
     20202052202D2052
     657365742050616C
     6574746573
0189 0D0A             (    supercomm.asm):00276                  fcb   C$CR,C$LF
018B 2043202D20436C65 (    supercomm.asm):00277                  fcc   ' C - Clear Screen          S - OS9 Shell Access'
     6172205363726565
     6E20202020202020
     20202053202D204F
     5339205368656C6C
     20416363657373
01BA 0D0A             (    supercomm.asm):00278                  fcb   C$CR,C$LF
01BC 2044202D20436861 (    supercomm.asm):00279                  fcc   ' D - Change Directory      T - Terminal Type'
     6E67652044697265
     63746F7279202020
     20202054202D2054
     65726D696E616C20
     54797065
01E8 0D0A             (    supercomm.asm):00280                  fcb   C$CR,C$LF
01EA 2048202D2048616E (    supercomm.asm):00281                  fcc   ' H - Hang Up               U - Update SuperComm'
     6720557020202020
     2020202020202020
     20202055202D2055
     7064617465205375
     706572436F6D6D
0219 0D0A             (    supercomm.asm):00282                  fcb   C$CR,C$LF
021B 2049202D2054696D (    supercomm.asm):00283                  fcc   ' I - Timer on/off          Z - Conference Mode'
     6572206F6E2F6F66
     6620202020202020
     2020205A202D2043
     6F6E666572656E63
     65204D6F6465
0249 0D0A             (    supercomm.asm):00284                  fcb   C$CR,C$LF
024B 204D202D204F7065 (    supercomm.asm):00285                  fcc   ' M - Open/Close Buffer   <Up>- Upload file'
     6E2F436C6F736520
     4275666665722020
     203C55703E2D2055
     706C6F6164206669
     6C65
0275 0D0A             (    supercomm.asm):00286                  fcb   C$CR,C$LF
0277 204F202D20436861 (    supercomm.asm):00287                  fcc   ' O - Change Options      <Dn>- Download File'
     6E6765204F707469
     6F6E732020202020
     203C446E3E2D2044
     6F776E6C6F616420
     46696C65
02A3 0A0D0A           (    supercomm.asm):00288                  fcb   C$LF,C$CR,C$LF
02A6 202020202053656C (    supercomm.asm):00289                  fcc   '     Select function or <Space> to continue'
     6563742066756E63
     74696F6E206F7220
     3C53706163653E20
     746F20636F6E7469
     6E7565
                      (    supercomm.asm):00290         
02D1 415448           (    supercomm.asm):00291         L02DC    fcc   'ATH'          Hangup string (does not need '0' on end)
02D4 0D               (    supercomm.asm):00292                  fcb   C$CR
                      (    supercomm.asm):00293         
02D5 5368656C6C       (    supercomm.asm):00294         L02E0    fcc   'Shell'
                      (    supercomm.asm):00295         
02DA 0D               (    supercomm.asm):00296         L02E5    fcb   C$CR
                      (    supercomm.asm):00297         
02DB 727A             (    supercomm.asm):00298         L02E6    fcc   'rz'
02DD 0D               (    supercomm.asm):00299                  fcb   C$CR
                      (    supercomm.asm):00300         
02DE 2D7676202020     (    supercomm.asm):00301         L02E9    fcc   '-vv   '
02E4 0D               (    supercomm.asm):00302                  fcb   C$CR
                      (    supercomm.asm):00303         
02E5 0028             (    supercomm.asm):00304         L02F0    fdb   40             # bytes this message ($28)
02E7 023420           (    supercomm.asm):00305                  fcb   $02,$34,$20    CurXY @ 20,0
02EA 45787465726E616C (    supercomm.asm):00306                  fcc   'External ZModem File Receive'
     205A4D6F64656D20
     46696C6520526563
     65697665
0306 0D0A0A           (    supercomm.asm):00307                  fcb   C$CR,C$LF,C$LF
0309 1B2500034007     (    supercomm.asm):00308                  fcb   $1B,$25,0,3,$40,7  CWArea to 0,3 - 64,10
                      (    supercomm.asm):00309         
030F 2A               (    supercomm.asm):00310         L031A    fcc   '*'            ZModem Xfer signature
0310 18               (    supercomm.asm):00311                  fcb   $18 
0311 4230             (    supercomm.asm):00312                  fcc   'B0'
0313 00               (    supercomm.asm):00313                  fcb   $00            Byte to signify end of Zmodem Xfer signature
                      (    supercomm.asm):00314         
                      (    supercomm.asm):00315         * Window for ZModem Send
0314 0025             (    supercomm.asm):00316         L0322    fdb   37             # bytes this message
0316 023620           (    supercomm.asm):00317                  fcb   $02,$36,$20    CurXY @ 23,1
0319 45787465726E616C (    supercomm.asm):00318                  fcc   'External ZModem File Send'
     205A4D6F64656D20
     46696C652053656E
     64
0332 0D0A0A           (    supercomm.asm):00319                  fcb   C$CR,C$LF,C$LF
0335 1B2500034007     (    supercomm.asm):00320                  fcb   $1B,$25,0,3,$40,7  CWArea to 0,3 - 64,10
                      (    supercomm.asm):00321         
                      (    supercomm.asm):00322         * Hangup message
033B 000F             (    supercomm.asm):00323         L0349    fdb   15             # bytes this message
033D 0D0A             (    supercomm.asm):00324                  fcb   C$CR,C$LF
033F 2048616E67696E67 (    supercomm.asm):00325                  fcc   ' Hanging Up!!'
     2055702121
                      (    supercomm.asm):00326         
                      (    supercomm.asm):00327         * Device to use VRN
034C 2F6E696C         (    supercomm.asm):00328         L0360    fcc   '/nil'
0350 0D               (    supercomm.asm):00329                  fcb   C$CR
0351 00               (    supercomm.asm):00330                  fcb   $00 
                      (    supercomm.asm):00331         
                      (    supercomm.asm):00332         * Default time on-line string
0352 022B20           (    supercomm.asm):00333         L0366    fcb   $02,$2b,$20    CurXY @ 11,0 
0355 30303A30303A3030 (    supercomm.asm):00334                  fcc   '00:00:00'
                      (    supercomm.asm):00335         
                      (    supercomm.asm):00336         * Palette set #1
035D 0020003F10203F3F (    supercomm.asm):00337         L0371    fcb   $00,$20,$00,$3F,$10,$20,$3F,$3F
0365 0020003F10203F3F (    supercomm.asm):00338                  fcb   $00,$20,$00,$3F,$10,$20,$3F,$3F
                      (    supercomm.asm):00339         
                      (    supercomm.asm):00340         * Palette set for ANSI mode
036D 0024123709281F3F (    supercomm.asm):00341         L0381    fcb   $00,$24,$12,$37,$09,$28,$1F,$3F
0375 0024123709281F3F (    supercomm.asm):00342                  fcb   $00,$24,$12,$37,$09,$28,$1F,$3F
                      (    supercomm.asm):00343         
                      (    supercomm.asm):00344         * Palette set for OS-9 mode
037D 3F0900122437281F (    supercomm.asm):00345         L0391    fcb   $3F,$09,$00,$12,$24,$37,$28,$1F 
0385 3F0900122437281F (    supercomm.asm):00346                  fcb   $3F,$09,$00,$12,$24,$37,$28,$1F 
                      (    supercomm.asm):00347         
                      (    supercomm.asm):00348         * Default FColor,BColor,Border settings for ANSI
038D 070000           (    supercomm.asm):00349         L03A1    fcb   $07,$00,$00 
                      (    supercomm.asm):00350         
                      (    supercomm.asm):00351         * Default FColor,BColor,Border settings for OS-9
0390 000202           (    supercomm.asm):00352         L03A4    fcb   $00,$02,$02 
                      (    supercomm.asm):00353         
                      (    supercomm.asm):00354         * Inverse/Underline/Blink OFF & clear screen
0393 0007             (    supercomm.asm):00355         L03A7    fdb   7              # bytes this message
0395 1F211F231F250C   (    supercomm.asm):00356                  fcb   $1F,$21,$1f,$23,$1f,$25,C$FORM
                      (    supercomm.asm):00357         
                      (    supercomm.asm):00358         * Shadowed overlay window (save switch on)
039C 0012             (    supercomm.asm):00359         L03B0    fdb   18             # bytes this message
039E 1B22010000501701 (    supercomm.asm):00360         L03B2    fcb   $1B,$22,1,0,0,80,23,1,1
     01
03A7 1B220102014C1506 (    supercomm.asm):00361                  fcb   $1B,$22,1,2,1,76,21,6,0
     00
                      (    supercomm.asm):00362         
                      (    supercomm.asm):00363         * Shadowed overlay windows remove (restore original screen)
03B0 0004             (    supercomm.asm):00364         L03C4    fdb   4              # bytes this message
03B2 1B231B23         (    supercomm.asm):00365         L03C6    fcb   $1B,$23,$1b,$23  OWEnd, OWEnd 
                      (    supercomm.asm):00366         
                      (    supercomm.asm):00367         * Default settings?
03B6 000E             (    supercomm.asm):00368         L03D6    fdb   14             # bytes this message
03B8 1F21             (    supercomm.asm):00369                  fcb   $1F,$21        Inverse off 
03BA 1F23             (    supercomm.asm):00370                  fcb   $1F,$23        Underline off
03BC 1F25             (    supercomm.asm):00371                  fcb   $1F,$25        Blink off
03BE 1B3207           (    supercomm.asm):00372                  fcb   $1B,$32,7      Foreground color 7
03C1 1B3300           (    supercomm.asm):00373                  fcb   $1B,$33,0      Background color 0
03C4 0521             (    supercomm.asm):00374                  fcb   $05,$21        Cursor ON
                      (    supercomm.asm):00375         
03C6 0000000000000000 (    supercomm.asm):00376         L03E6    fcb   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     0000000000000000
     00000000
03DA 0002             (    supercomm.asm):00377                  fdb   2              # bytes this entry
03DC 1F22             (    supercomm.asm):00378                  fcb   $1F,$22        Underline on
03DE 0000             (    supercomm.asm):00379                  fcb   0,0
03E0 02               (    supercomm.asm):00380                  fcb   2              # bytes this entry 
03E1 1F24             (    supercomm.asm):00381                  fcb   $1F,$24        Blink on 
03E3 00000000000000   (    supercomm.asm):00382                  fcb   0,0,0,0,0,0,0
03EA 02               (    supercomm.asm):00383                  fcb   2              # bytes this entry
03EB 1F20             (    supercomm.asm):00384                  fcb   $1F,$20        Inverse on
03ED 00               (    supercomm.asm):00385                  fcb   $00 
                      (    supercomm.asm):00386         
                      (    supercomm.asm):00387         * Foreground color settings
03EE 0003             (    supercomm.asm):00388         L040E    fdb   3              # bytes this entry
03F0 1B3200           (    supercomm.asm):00389                  fcb   $1B,$32,0      Foreground color 0
03F3 0003             (    supercomm.asm):00390                  fdb   3              # bytes this entry
03F5 1B3201           (    supercomm.asm):00391                  fcb   $1B,$32,1      Foreground color 1 
03F8 0003             (    supercomm.asm):00392                  fdb   3              # bytes this entry
03FA 1B3202           (    supercomm.asm):00393                  fcb   $1B,$32,2      Foreground color 2
03FD 0003             (    supercomm.asm):00394                  fdb   3              # bytes this entry
03FF 1B3203           (    supercomm.asm):00395                  fcb   $1B,$32,3      Foreground color 3
0402 0003             (    supercomm.asm):00396                  fdb   3              # bytes this entry
0404 1B3204           (    supercomm.asm):00397                  fcb   $1B,$32,4      Foreground color 4
0407 0003             (    supercomm.asm):00398                  fdb   3              # bytes this entry
0409 1B3205           (    supercomm.asm):00399                  fcb   $1B,$32,5      Foreground color 5
040C 0003             (    supercomm.asm):00400                  fdb   3              # bytes this entry
040E 1B3206           (    supercomm.asm):00401                  fcb   $1B,$32,6      Foreground color 6
0411 0003             (    supercomm.asm):00402                  fdb   3              # bytes this entry
0413 1B3207           (    supercomm.asm):00403                  fcb   $1B,$32,7      Foreground color 7
                      (    supercomm.asm):00404         
                      (    supercomm.asm):00405         * Background color settings
0416 0003             (    supercomm.asm):00406         L0436    fdb   3              # bytes this entry
0418 1B3300           (    supercomm.asm):00407                  fcb   $1B,$33,0      Background color 0
041B 0003             (    supercomm.asm):00408                  fdb   3              # bytes this entry
041D 1B3301           (    supercomm.asm):00409                  fcb   $1B,$33,1      Background color 1
0420 0003             (    supercomm.asm):00410                  fdb   3              # bytes this entry
0422 1B3302           (    supercomm.asm):00411                  fcb   $1B,$33,2      Background color 2
0425 0003             (    supercomm.asm):00412                  fdb   3              # bytes this entry
0427 1B3303           (    supercomm.asm):00413                  fcb   $1B,$33,3      Background color 3
042A 0003             (    supercomm.asm):00414                  fdb   3              # bytes this entry
042C 1B3304           (    supercomm.asm):00415                  fcb   $1B,$33,4      Background color 4
042F 0003             (    supercomm.asm):00416                  fdb   3              # bytes this entry
0431 1B3305           (    supercomm.asm):00417                  fcb   $1B,$33,5      Background color 5
0434 0003             (    supercomm.asm):00418                  fdb   3              # bytes this entry
0436 1B3306           (    supercomm.asm):00419                  fcb   $1B,$33,6      Background color 6
0439 0003             (    supercomm.asm):00420                  fdb   3              # bytes this entry
043B 1B3307           (    supercomm.asm):00421                  fcb   $1B,$33,7      Background color 7
                      (    supercomm.asm):00422         
                      (    supercomm.asm):00423         * Clear screen code
043E 0001             (    supercomm.asm):00424         L045E    fdb   1              # bytes this entry
0440 0C               (    supercomm.asm):00425                  fcb   C$FORM
                      (    supercomm.asm):00426         
                      (    supercomm.asm):00427         * Erase to end of line
0441 0001             (    supercomm.asm):00428         L0461    fdb   1              # bytes this entry
0443 04               (    supercomm.asm):00429                  fcb   $04 
                      (    supercomm.asm):00430         
                      (    supercomm.asm):00431         * Erase to end of screen
0444 0001             (    supercomm.asm):00432         L0464    fdb   1              # bytes this entry
0446 0B               (    supercomm.asm):00433                  fcb   $0B 
                      (    supercomm.asm):00434         
                      (    supercomm.asm):00435         * Generic window descriptor
0447 2FD7             (    supercomm.asm):00436         L0467    fcs   '/W'
                      (    supercomm.asm):00437         
                      (    supercomm.asm):00438         * DWSet for main window: 80x23 text from 0,1
0449 1B24             (    supercomm.asm):00439         L0469    fcb   $1B,$24        DWEnd
044B 1B20020001501707 (    supercomm.asm):00440                  fcb   $1B,$20,2,0,1,80,23,7,2,2,$1b,$21  DWSet:80x23 text, 1 from top
     02021B21
                      (    supercomm.asm):00441         
                      (    supercomm.asm):00442         * DWSet for status line @ top window: 80x1 with blue background
                      (    supercomm.asm):00443         * Done on Process' current screen (which is set by L0469 above)
0457 1B24             (    supercomm.asm):00444         L0475    fcb   $1B,$24        DWEnd
0459 1B20000000500103 (    supercomm.asm):00445         L0477    fcb   $1B,$20,0,0,0,80,1,3,4   DWSet: 80x1, same scrn, blue bckgrnd
     04
0462 0C               (    supercomm.asm):00446                  fcb   C$FORM         Clear the line
                      (    supercomm.asm):00447         
0463 1B3200           (    supercomm.asm):00448         L0481    fcb   $1B,$32,0      Foreground color=0
0466 1B3300           (    supercomm.asm):00449                  fcb   $1B,$33,0      Background color=0
0469 0C               (    supercomm.asm):00450                  fcb   C$FORM         Clear screen
                      (    supercomm.asm):00451         
046A 0001             (    supercomm.asm):00452                  fdb   1
046C 20               (    supercomm.asm):00453                  fcc   / /
                      (    supercomm.asm):00454         
046D 0002             (    supercomm.asm):00455         L048B    fdb   2 
046F 0521             (    supercomm.asm):00456                  fcb   $05,$21
                      (    supercomm.asm):00457         
0471 0002             (    supercomm.asm):00458         L048F    fdb   2 
0473 0520             (    supercomm.asm):00459                  fcb   $05,$20
                      (    supercomm.asm):00460         
0475 1F20             (    supercomm.asm):00461         L0493    fcb   $1F,$20        Inverse on 
0477 20               (    supercomm.asm):00462                  fcb   $20            Space
0478 1F21             (    supercomm.asm):00463                  fcb   $1F,$21        Inverse off 
047A 08               (    supercomm.asm):00464                  fcb   C$BSP          Backspace
                      (    supercomm.asm):00465         
047B 0016             (    supercomm.asm):00466         L0499    fdb   22             # bytes this message
047D 0D0A             (    supercomm.asm):00467                  fcb   C$CR,C$LF
047F 2041726520796F75 (    supercomm.asm):00468                  fcc   ' Are you sure? (y/N)'
     20737572653F2028
     792F4E29
                      (    supercomm.asm):00469         
0493 0028             (    supercomm.asm):00470         L04B1    fdb   40             # bytes this message
0495 022E23           (    supercomm.asm):00471                  fcb   $02,$2e,$23    CurXY @ 14,3
0498 436F756E742020   (    supercomm.asm):00472                  fcc   'Count  '
049F 022E25           (    supercomm.asm):00473                  fcb   $02,$2e,$25    CurXY @ 14,5
04A2 5365636F6E647320 (    supercomm.asm):00474                  fcc   'Seconds '
04AA 022D27           (    supercomm.asm):00475                  fcb   $02,$2d,$27    CurXY @ 13,7
04AD 3C53706163653E20 (    supercomm.asm):00476                  fcc   '<Space> aborts'
     61626F727473
04BB 0520             (    supercomm.asm):00477                  fcb   $05,$20        Turn off cursor
                      (    supercomm.asm):00478         
04BD 0008             (    supercomm.asm):00479         L04DB    fdb   8              # bytes this message
04BF 4469616C696E6720 (    supercomm.asm):00480                  fcc   'Dialing '
                      (    supercomm.asm):00481         
04C7 0003             (    supercomm.asm):00482         L04E5    fdb   3              # bytes this message
04C9 023723           (    supercomm.asm):00483                  fcb   $02,$37,$23    CurXY @ 23,3
                      (    supercomm.asm):00484         
04CC 0003             (    supercomm.asm):00485         L04EA    fdb   3              # bytes this message
04CE 023725           (    supercomm.asm):00486                  fcb   $02,$37,$25    CurXY @ 23,5
                      (    supercomm.asm):00487         
04D1 0020             (    supercomm.asm):00488         L04EF    fdb   32             # bytes this message
04D3 2020202020586D6F (    supercomm.asm):00489                  fcc   '     Xmodem file transfer system'
     64656D2066696C65
     207472616E736665
     722073797374656D
                      (    supercomm.asm):00490         
04F3 0009             (    supercomm.asm):00491         L0511    fdb   9              # bytes this message
04F5 022020           (    supercomm.asm):00492                  fcb   $02,$20,$20    CurXY @ 0,0
04F8 202020202059     (    supercomm.asm):00493                  fcc   '     Y'
                      (    supercomm.asm):00494         
04FE 0011             (    supercomm.asm):00495         L051C    fdb   17             # bytes this message
0500 022B26           (    supercomm.asm):00496                  fcb   $02,$2b,$26    CurXY @ 11,6
0503 3C427265616B3E20 (    supercomm.asm):00497                  fcc   '<Break> aborts'
     61626F727473
                      (    supercomm.asm):00498         
0511 0011             (    supercomm.asm):00499         L052F    fdb   17             # bytes this message
0513 022A28           (    supercomm.asm):00500                  fcb   $02,$2A,$28    CurXY @ 10,8
0516 3C427265616B3E20 (    supercomm.asm):00501                  fcc   '<Break> aborts'
     61626F727473
                      (    supercomm.asm):00502         
0524 001B             (    supercomm.asm):00503                  fdb   27             # bytes this message
0526 022522           (    supercomm.asm):00504                  fcb   $02,$25,$22    CurXY @ 5,2
0529 4153434949205072 (    supercomm.asm):00505                  fcc   'ASCII Processing? (Y/N) '
     6F63657373696E67
     3F2028592F4E2920
                      (    supercomm.asm):00506         
0541 000A             (    supercomm.asm):00507         L055F    fdb   10             # bytes this message
0543 022124           (    supercomm.asm):00508                  fcb   $02,$21,$24    CurXY @ 1,4
0546 46696C653A20     (    supercomm.asm):00509                  fcc   'File: '
054C 04               (    supercomm.asm):00510                  fcb   $04            Clear to end of line
                      (    supercomm.asm):00511         
054D 000A             (    supercomm.asm):00512         L056B    fdb   10             # bytes this message
054F 022122           (    supercomm.asm):00513                  fcb   $02,$21,$22    CurXY @ 1,2
0552 526563763A20     (    supercomm.asm):00514                  fcc   'Recv: '
0558 04               (    supercomm.asm):00515                  fcb   $04            Clear to end of line
                      (    supercomm.asm):00516         
0559 000A             (    supercomm.asm):00517         L0577    fdb   10             # bytes this message
055B 022123           (    supercomm.asm):00518                  fcb   $02,$21,$23    CurXY @ 1,2
055E 53697A653A20     (    supercomm.asm):00519                  fcc   'Size: '
0564 04               (    supercomm.asm):00520                  fcb   $04            Clear to end of line
                      (    supercomm.asm):00521         
0565 000E             (    supercomm.asm):00522         L0583    fdb   14             # bytes this message
0567 022124           (    supercomm.asm):00523                  fcb   $02,$21,$24    CurXY @ 1,4
056A 04               (    supercomm.asm):00524                  fcb   $04            Clear to end of line
056B 022122           (    supercomm.asm):00525                  fcb   $02,$21,$22    CurXY @ 1,2
056E 53656E643A20     (    supercomm.asm):00526                  fcc   'Send: '
0574 04               (    supercomm.asm):00527                  fcb   $04            Clear to end of line
                      (    supercomm.asm):00528         
0575 0022             (    supercomm.asm):00529         L0593    fdb   34             # bytes this message
0577 022125           (    supercomm.asm):00530                  fcb   $02,$21,$25    CurXY @ 1,5
057A 426C6F636B202320 (    supercomm.asm):00531                  fcc   'Block #                 Error #'
     2020202020202020
     2020202020202020
     4572726F722023
                      (    supercomm.asm):00532         
0599 000E             (    supercomm.asm):00533         L05B7    fdb   14             # bytes this message
059B 022127           (    supercomm.asm):00534                  fcb   $02,$21,$27    CurXY @ 1,7
059E 4C61737420457272 (    supercomm.asm):00535                  fcc   'Last Error:'
     6F723A
                      (    supercomm.asm):00536         
05A9 2020202020202020 (    supercomm.asm):00537         L05C7    fcc   '                    '
     2020202020202020
     20202020
05BD 5472616E73666572 (    supercomm.asm):00538                  fcc   'Transfer Aborted    '
     2041626F72746564
     20202020
05D1 57726F6E6720426C (    supercomm.asm):00539                  fcc   'Wrong Block Number  '
     6F636B204E756D62
     65722020
05E5 426C6F636B204368 (    supercomm.asm):00540                  fcc   'Block Check Failed  '
     65636B204661696C
     65642020
05F9 54696D65204F7574 (    supercomm.asm):00541                  fcc   'Time Out            '
     2020202020202020
     20202020
                      (    supercomm.asm):00542         
060D 0007             (    supercomm.asm):00543         L062B    fdb   7              # bytes this message
060F 022825           (    supercomm.asm):00544                  fcb   $02,$28,$25    CurXY @ 8,5
0612 30303030         (    supercomm.asm):00545                  fcc   '0000'
                      (    supercomm.asm):00546         
0616 0007             (    supercomm.asm):00547         L0634    fdb   7              # bytes this message
0618 024025           (    supercomm.asm):00548                  fcb   $02,$40,$25    CurXY @ 32,5
061B 30303030         (    supercomm.asm):00549                  fcc   '0000'
                      (    supercomm.asm):00550         
                      (    supercomm.asm):00551         * ???? No label was pointing to it, was after baud rate table (L0652)
                      (    supercomm.asm):00552         * NOTE: MAY BE POSSIBLE TO DELETE FOLLOWING 8 BYTES
061F 0006             (    supercomm.asm):00553                  fdb   6              # bytes this message
0621 1B2501020409     (    supercomm.asm):00554                  fcb   $1B,$25,1,2,4,9  CWArea from 1,2 to 5,11
                      (    supercomm.asm):00555         
0627 080808           (    supercomm.asm):00556         L0682    fcb   C$BSP,C$BSP,C$BSP
062A 202020           (    supercomm.asm):00557                  fcc   '   '
                      (    supercomm.asm):00558         
062D 0C               (    supercomm.asm):00559         L0688    fcb   C$FORM         Clear screen
062E 0A0A0A0A0A0A0A0A (    supercomm.asm):00560                  fcb   C$LF,C$LF,C$LF,C$LF,C$LF,C$LF,C$LF,C$LF,C$LF,C$LF
     0A0A
                      (    supercomm.asm):00561         
0638 3D3D3E           (    supercomm.asm):00562         L0693    fcc   '==>'
                      (    supercomm.asm):00563         
063B 0018             (    supercomm.asm):00564         L0696    fdb   24             # bytes this message
063D 0A0D             (    supercomm.asm):00565                  fcb   C$LF,C$CR
063F 205465726D696E61 (    supercomm.asm):00566                  fcc   ' Terminal Type :      '
     6C2054797065203A
     202020202020
                      (    supercomm.asm):00567         
0655 4F53392020       (    supercomm.asm):00568         L06B0    fcc   'OS9  '
065A 4153434949       (    supercomm.asm):00569                  fcc   'ASCII'
065F 414E534920       (    supercomm.asm):00570                  fcc   'ANSI '
                      (    supercomm.asm):00571         
0664 023021           (    supercomm.asm):00572         L06BF    fcb   $02,$30,$21    CurXY @ 16,1
0667 4153434949       (    supercomm.asm):00573                  fcc   'ASCII'
                      (    supercomm.asm):00574         
066C 0008             (    supercomm.asm):00575         L06C7    fdb   8              # bytes this message
066E 023021           (    supercomm.asm):00576                  fcb   $02,$30,$21    CurXY @ 16,1
0671 2020202020       (    supercomm.asm):00577                  fcc   '     '
                      (    supercomm.asm):00578         
                      (    supercomm.asm):00579         * Keywords in ADF (Autodial) files
0676 4144D3           (    supercomm.asm):00580         L06D1    fcs   'ADS'
0679 4250D3           (    supercomm.asm):00581                  fcs   'BPS'
067C 4543C8           (    supercomm.asm):00582                  fcs   'ECH'
067F 4845CB           (    supercomm.asm):00583                  fcs   'HEK'
0682 5452CD           (    supercomm.asm):00584                  fcs   'TRM'
0685 4C4EC6           (    supercomm.asm):00585                  fcs   'LNF'
0688 584FCE           (    supercomm.asm):00586                  fcs   'XON'
068B 584FC6           (    supercomm.asm):00587                  fcs   'XOF'
068E 5254D2           (    supercomm.asm):00588                  fcs   'RTR'
0691 5250D3           (    supercomm.asm):00589                  fcs   'RPS'
0694 5041D2           (    supercomm.asm):00590                  fcs   'PAR'
0697 434CCB           (    supercomm.asm):00591                  fcs   'CLK'
069A 5752C4           (    supercomm.asm):00592                  fcs   'WRD'
069D 5354D0           (    supercomm.asm):00593                  fcs   'STP'
06A0 4B4DB1           (    supercomm.asm):00594                  fcs   'KM1'
06A3 4B4DB2           (    supercomm.asm):00595                  fcs   'KM2'
06A6 4B4DB3           (    supercomm.asm):00596                  fcs   'KM3'
06A9 4B4DB4           (    supercomm.asm):00597                  fcs   'KM4'
06AC 4B4DB5           (    supercomm.asm):00598                  fcs   'KM5'
06AF 4B4DB6           (    supercomm.asm):00599                  fcs   'KM6'
06B2 4B4DB7           (    supercomm.asm):00600                  fcs   'KM7'
06B5 4B4DB8           (    supercomm.asm):00601                  fcs   'KM8'
06B8 434ED3           (    supercomm.asm):00602                  fcs   'CNS'
06BB 5353B1           (    supercomm.asm):00603                  fcs   'SS1'
06BE 5353B2           (    supercomm.asm):00604                  fcs   'SS2'
06C1 5353B3           (    supercomm.asm):00605                  fcs   'SS3'
06C4 5353B4           (    supercomm.asm):00606                  fcs   'SS4'
06C7 5253B1           (    supercomm.asm):00607                  fcs   'RS1'
06CA 5253B2           (    supercomm.asm):00608                  fcs   'RS2'
06CD 5253B3           (    supercomm.asm):00609                  fcs   'RS3'
06D0 5253B4           (    supercomm.asm):00610                  fcs   'RS4'
06D3 524CC6           (    supercomm.asm):00611                  fcs   'RLF'
06D6 544CC6           (    supercomm.asm):00612                  fcs   'TLF'
                      (    supercomm.asm):00613         
                      (    supercomm.asm):00614         * Receive protocol menu
06D9 006F             (    supercomm.asm):00615         L0734    fdb   111            # bytes this message
06DB 205375706572436F (    supercomm.asm):00616                  fcc   ' SuperComm File Receive'
     6D6D2046696C6520
     52656365697665
06F2 0D0A0A           (    supercomm.asm):00617                  fcb   C$CR,C$LF,C$LF
06F5 2020202020415343 (    supercomm.asm):00618                  fcc   '     ASCII Receive'
     4949205265636569
     7665
0707 0D0A             (    supercomm.asm):00619                  fcb   C$CR,C$LF
0709 2020202020584D6F (    supercomm.asm):00620                  fcc   '     XModem (and X-1k)'
     64656D2028616E64
     20582D316B29
071F 0D0A             (    supercomm.asm):00621                  fcb   C$CR,C$LF
0721 2020202020594D6F (    supercomm.asm):00622                  fcc   '     YModem Batch'
     64656D2042617463
     68
0732 0D0A             (    supercomm.asm):00623                  fcb   C$CR,C$LF
0734 20202020205A4D6F (    supercomm.asm):00624                  fcc   '     ZModem (external)'
     64656D2028657874
     65726E616C29
                      (    supercomm.asm):00625         
                      (    supercomm.asm):00626         * File send menu
074A 007B             (    supercomm.asm):00627         L07A5    fdb   123            # bytes this message
074C 2020205375706572 (    supercomm.asm):00628                  fcc   '   SuperComm File Send'
     436F6D6D2046696C
     652053656E64
0762 0D0A0A           (    supercomm.asm):00629                  fcb   C$CR,C$LF,C$LF
0765 2020202020415343 (    supercomm.asm):00630                  fcc   '     ASCII Send'
     49492053656E64
0774 0D0A             (    supercomm.asm):00631                  fcb   C$CR,C$LF
0776 2020202020584D6F (    supercomm.asm):00632                  fcc   '     XModem (and CRC)'
     64656D2028616E64
     2043524329
078B 0D0A             (    supercomm.asm):00633                  fcb   C$CR,C$LF
078D 2020202020586D6F (    supercomm.asm):00634                  fcc   '     Xmodem 1K'
     64656D20314B
079B 0D0A             (    supercomm.asm):00635                  fcb   C$CR,C$LF
079D 2020202020594D6F (    supercomm.asm):00636                  fcc   '     YModem Batch'
     64656D2042617463
     68
07AE 0D0A             (    supercomm.asm):00637                  fcb   C$CR,C$LF
07B0 20202020205A4D6F (    supercomm.asm):00638                  fcc   '     ZModem (external)'
     64656D2028657874
     65726E616C29
                      (    supercomm.asm):00639         
                      (    supercomm.asm):00640         * Options menu
07C6 0093             (    supercomm.asm):00641         L0821    fdb   147            # bytes this message
07C8 2020537570657243 (    supercomm.asm):00642                  fcc   '  SuperComm Options'
     6F6D6D204F707469
     6F6E73
07DB 1B2505020E0C     (    supercomm.asm):00643                  fcb   $1B,$25,5,2,14,12  CWArea from 5,2 to 19,14
07E1 4563686F         (    supercomm.asm):00644                  fcc   'Echo'
07E5 0D0A             (    supercomm.asm):00645                  fcb   C$CR,C$LF
07E7 4C2D466565647320 (    supercomm.asm):00646                  fcc   'L-Feeds Rx'
     5278
07F1 0D0A             (    supercomm.asm):00647                  fcb   C$CR,C$LF
07F3 4C2D466565647320 (    supercomm.asm):00648                  fcc   'L-Feeds Tx'
     5478
07FD 0D0A             (    supercomm.asm):00649                  fcb   C$CR,C$LF
07FF 436C69636B       (    supercomm.asm):00650                  fcc   'Click'
0804 0D0A             (    supercomm.asm):00651                  fcb   C$CR,C$LF
0806 576F7264204C656E (    supercomm.asm):00652                  fcc   'Word Length'
     677468
0811 0D0A             (    supercomm.asm):00653                  fcb   C$CR,C$LF
0813 506172697479     (    supercomm.asm):00654                  fcc   'Parity'
0819 0D0A             (    supercomm.asm):00655                  fcb   C$CR,C$LF
081B 53746F7020426974 (    supercomm.asm):00656                  fcc   'Stop Bits'
     73
0824 0D0A             (    supercomm.asm):00657                  fcb   C$CR,C$LF
0826 4563686F2028686F (    supercomm.asm):00658                  fcc   'Echo (host)'
     737429
0831 0D0A             (    supercomm.asm):00659                  fcb   C$CR,C$LF
0833 48616E67205570   (    supercomm.asm):00660                  fcc   'Hang Up'
083A 0D0A             (    supercomm.asm):00661                  fcb   C$CR,C$LF
083C 4175746F205A6D6F (    supercomm.asm):00662                  fcc   'Auto Zmodem'
     64656D
0847 0D0A             (    supercomm.asm):00663                  fcb   C$CR,C$LF
0849 4175746F20417363 (    supercomm.asm):00664                  fcc   'Auto Ascii'
     6969
0853 0D0A             (    supercomm.asm):00665                  fcb   C$CR,C$LF
0855 1B250000160E     (    supercomm.asm):00666                  fcb   $1B,$25,0,0,22,14 CWArea from 0,0 to 22,14
                      (    supercomm.asm):00667         
                      (    supercomm.asm):00668         * Re-saving Supercomm message
085B 0017             (    supercomm.asm):00669         L08B6    fdb   23             # bytes this message
085D 0D0A             (    supercomm.asm):00670                  fcb   C$CR,C$LF
085F 20536176696E6720 (    supercomm.asm):00671                  fcc   ' Saving  SuperComm...'
     205375706572436F
     6D6D2E2E2E
                      (    supercomm.asm):00672         
0874 0017             (    supercomm.asm):00673         L08CF    fdb   23             # bytes this message
0876 0C               (    supercomm.asm):00674                  fcb   C$FORM         Clear screen
0877 022920           (    supercomm.asm):00675                  fcb   $02,$29,$20    CurXY @ 9,0
087A 46696C6520436170 (    supercomm.asm):00676                  fcc   'File Capture System'
     7475726520537973
     74656D
                      (    supercomm.asm):00677         
088D 0026             (    supercomm.asm):00678         L08E8    fdb   38             # bytes this message
088F 22               (    supercomm.asm):00679                  fcc   '"'
0890 022124           (    supercomm.asm):00680                  fcb   $02,$21,$24    CurXY @ 1,4
0893 697320616C726561 (    supercomm.asm):00681                  fcc   'is already open.  Close it? (Y/n) '
     6479206F70656E2E
     2020436C6F736520
     69743F2028592F6E
     2920
                      (    supercomm.asm):00682         
08B5 0013             (    supercomm.asm):00683         L0910    fdb   19             # bytes this message
08B7 022B22           (    supercomm.asm):00684                  fcb   $02,$2b,$22    CurXY @ 11,2
08BA 03               (    supercomm.asm):00685                  fcb   $03            Erase current line
08BB 53656E6420415343 (    supercomm.asm):00686                  fcc   'Send ASCII file'
     49492066696C65
                      (    supercomm.asm):00687         
08CA 0004             (    supercomm.asm):00688         L0925    fdb   4              # bytes this message
08CC 022122           (    supercomm.asm):00689                  fcb   $02,$21,$22    CurXY @ 1,2
08CF 22               (    supercomm.asm):00690                  fcc   '"'
                      (    supercomm.asm):00691         
08D0 0033             (    supercomm.asm):00692         L092B    fdb   51             # bytes this message
08D2 022920           (    supercomm.asm):00693                  fcb   $02,$29,$20    CurXY @ 9,0
08D5 46696C6520616C72 (    supercomm.asm):00694                  fcc   'File already exists!'
     6561647920657869
     73747321
08E9 022622           (    supercomm.asm):00695                  fcb   $02,$26,$22    CurXY @ 6,2
08EC 3C413E7070656E64 (    supercomm.asm):00696                  fcc   '<A>ppend or <O>verwrite? '
     206F72203C4F3E76
     657277726974653F
     20
                      (    supercomm.asm):00697         
                      (    supercomm.asm):00698         * Buffer open indicator
0905 000B             (    supercomm.asm):00699         L0960    fdb   11             # bytes this message
0907 026E20           (    supercomm.asm):00700                  fcb   $02,$6e,$20    CurXY @ 78,0
090A 1F24             (    supercomm.asm):00701                  fcb   $1F,$24        Blinking on
090C 1B3203           (    supercomm.asm):00702                  fcb   $1B,$32,3      Foreground color=3
090F 42               (    supercomm.asm):00703                  fcc   'B'
0910 1F25             (    supercomm.asm):00704                  fcb   $1F,$25        Blinking off
                      (    supercomm.asm):00705         
                      (    supercomm.asm):00706         * Buffer closed indicator
0912 000A             (    supercomm.asm):00707         L096D    fdb   10             # bytes this message
0914 026E20           (    supercomm.asm):00708                  fcb   $02,$6e,$20    CurXY @ 78,0
0917 1B3200           (    supercomm.asm):00709                  fcb   $1B,$32,0      Foreground color=0
091A 42               (    supercomm.asm):00710                  fcc   'B'
091B 1B3203           (    supercomm.asm):00711                  fcb   $1B,$32,3      Foreground color=3
                      (    supercomm.asm):00712         
091E 0004             (    supercomm.asm):00713         L0979    fdb   4              # bytes this message
0920 445452           (    supercomm.asm):00714                  fcc   'DTR'
0923 04               (    supercomm.asm):00715                  fcb   $04            Clear to end of line
                      (    supercomm.asm):00716         
0924 0004             (    supercomm.asm):00717         L0985    fdb   4              # bytes this message
0926 4F6666           (    supercomm.asm):00718                  fcc   'Off'
0929 04               (    supercomm.asm):00719                  fcb   $04            Clear to end of line
                      (    supercomm.asm):00720         
092A 0003             (    supercomm.asm):00721         L098B    fdb   3              # bytes this message
092C 4F6E             (    supercomm.asm):00722                  fcc   'On'
092E 04               (    supercomm.asm):00723                  fcb   $04            Clear to end of line
                      (    supercomm.asm):00724         
092F 20               (    supercomm.asm):00725         L0990    fcc   ' '
0930 4D61726B         (    supercomm.asm):00726         L0991    fcc   'Mark'
0934 5370616365       (    supercomm.asm):00727         L0995    fcc   'Space'
0939 20               (    supercomm.asm):00728         L099A    fcc   ' '
093A 4576656E         (    supercomm.asm):00729         L099B    fcc   'Even'
093E 20               (    supercomm.asm):00730         L099F    fcc   ' '
093F 4F646420         (    supercomm.asm):00731         L09A0    fcc   'Odd '
0943 20               (    supercomm.asm):00732         L09A4    fcc   ' '
0944 4E6F6E65         (    supercomm.asm):00733         L09A5    fcc   'None'
                      (    supercomm.asm):00734         
0948 0036             (    supercomm.asm):00735         L09A9    fdb   54             # bytes this message
094A 022820           (    supercomm.asm):00736                  fcb   $02,$28,$20    CurXY @ 8,0
094D 4368616E67652044 (    supercomm.asm):00737                  fcc   'Change Data Directory'
     6174612044697265
     63746F7279
0962 022925           (    supercomm.asm):00738                  fcb   $02,$29,$25    CurXY @ 9,5
0965 287573652066756C (    supercomm.asm):00739                  fcc   '(use full pathname)'
     6C20706174686E61
     6D6529
0978 022124           (    supercomm.asm):00740                  fcb   $02,$21,$24    CurXY @ 1,4
097B 506174683A       (    supercomm.asm):00741                  fcc   'Path:'
                      (    supercomm.asm):00742         
0980 022020           (    supercomm.asm):00743         L09E1    fcb   $02,$20,$20
0983 20202020         (    supercomm.asm):00744                  fcc   /    /
                      (    supercomm.asm):00745         
0987 022020           (    supercomm.asm):00746         L09E8    fcb   $02,$20,$20    CurXY @ 0,0
098A 436F6E66         (    supercomm.asm):00747                  fcc   'Conf'
                      (    supercomm.asm):00748         
098E 1B2500015002     (    supercomm.asm):00749         L09EF    fcb   $1B,$25,0,1,80,2   CWArea to 0,1 to 80,3
                      (    supercomm.asm):00750         
                      (    supercomm.asm):00751         * Table for converting long Integers (used for file size printing)
                      (    supercomm.asm):00752         * Will handle sizes up to 9,999,999 bytes
0994 000F4240         (    supercomm.asm):00753         L09F5    fdb   $000F,$4240    1,000,000
0998 000186A0         (    supercomm.asm):00754                  fdb   $0001,$86A0    100,000
099C 00002710         (    supercomm.asm):00755                  fdb   $0000,$2710    10,000
09A0 000003E8         (    supercomm.asm):00756                  fdb   $0000,$03E8    1,000
09A4 00000064         (    supercomm.asm):00757                  fdb   $0000,$0064    100
09A8 0000000A         (    supercomm.asm):00758                  fdb   $0000,$000A    10
09AC 00000001         (    supercomm.asm):00759                  fdb   $0000,$0001    1
09B0 00000001         (    supercomm.asm):00760                  fdb   $0000,$0001    0
                      (    supercomm.asm):00761         
09B4 0E               (    supercomm.asm):00762         L0A15    fcb   $0E 
                      (    supercomm.asm):00763         
                      (    supercomm.asm):00764         * Acceptable entries on help screen
09B5 4142434448494D4F (    supercomm.asm):00765         L0A16    fcc   'ABCDHIMOQRSTUZ'
     51525354555A
                      (    supercomm.asm):00766         
                      (    supercomm.asm):00767         * Default option switches
09C3 04               (    supercomm.asm):00768         L0A24    fcb   $04          default word length, stop bits & baud rate
09C4 02               (    supercomm.asm):00769                  fcb   $02
09C5 00               (    supercomm.asm):00770                  fcb   $00          echo
09C6 00               (    supercomm.asm):00771                  fcb   $00          linefeeds Rx
09C7 00               (    supercomm.asm):00772                  fcb   $00          linefeeds Tx
09C8 00               (    supercomm.asm):00773                  fcb   $00          key click
09C9 00               (    supercomm.asm):00774                  fcb   $00          hangup method
09CA 00               (    supercomm.asm):00775                  fcb   $00          parity
09CB 00               (    supercomm.asm):00776                  fcb   $00          auto ASCII (0=Off)
09CC 00               (    supercomm.asm):00777                  fcb   $00          auto ZModem (0=On)
09CD 11               (    supercomm.asm):00778                  fcb   $11          default XON value
09CE 13               (    supercomm.asm):00779                  fcb   $13          default XOFF value
09CF 00               (    supercomm.asm):00780                  fcb   $00          echo (host)
                      (    supercomm.asm):00781         
09D0 2F64642F7379732F (    supercomm.asm):00782         L0A31    fcs   '/dd/sys/dial'
     646961EC
09DC 2020202020202020 (    supercomm.asm):00783                  fcc   '                    '
     2020202020202020
     20202020
                      (    supercomm.asm):00784         
09F0 2F6464           (    supercomm.asm):00785         L0A51    fcc   '/dd'
09F3 0D               (    supercomm.asm):00786                  fcb   C$CR
09F4 2020202020202020 (    supercomm.asm):00787                  fcc   '                            '
     2020202020202020
     2020202020202020
     20202020
                      (    supercomm.asm):00788         
                      (    supercomm.asm):00789         ****************************
                      (    supercomm.asm):00790         * Main Entry point
                      (    supercomm.asm):00791         * Note: Eventually change to use Ext. addressing
0A10 9F02             (    supercomm.asm):00792         start    stx   <u0000       Save Param area ptr
0A12 3088C0           (    supercomm.asm):00793                  leax  -$40,x       End of rec. bffr is 64 bytes from end of data mem
0A15 9F04             (    supercomm.asm):00794                  stx   <u0002       Save end of receive buffer ptr
0A17 327F             (    supercomm.asm):00795                  leas  -1,s         Reserve 1 byte on stack
0A19 8E16BB           (    supercomm.asm):00796                  ldx   #u16B9       Point to start of receive buffer
0A1C 9F06             (    supercomm.asm):00797                  stx   <u0004       Save start of receive buffer ptr (constant)
0A1E 9F08             (    supercomm.asm):00798                  stx   <u0006       Save current end of receive buffer ptr
0A20 301F             (    supercomm.asm):00799                  leax  -1,x         Move ptr 1 back
0A22 9F10             (    supercomm.asm):00800                  stx   <u000B       Save it
0A24 8E14BB           (    supercomm.asm):00801                  ldx   #u14B9       Point to ???
0A27 9F12             (    supercomm.asm):00802                  stx   <u000D       Save that ptr twice
0A29 9F14             (    supercomm.asm):00803                  stx   <u000F
0A2B CC0000           (    supercomm.asm):00804                  ldd   #$0000       Clear out something to 0
0A2E DD0E             (    supercomm.asm):00805                  std   <u0009
0A30 8E001E           (    supercomm.asm):00806                  ldx   #u0019       Point X to $19 in data area
                      (    supercomm.asm):00807         * Clear out all memory from $19 to end of Data mem-64
0A33 A780             (    supercomm.asm):00808         L0A96    sta   ,x+          Clear byte out
0A35 9C04             (    supercomm.asm):00809                  cmpx  <u0002       Done all data mem yet?
0A37 25FA             (    supercomm.asm):00810                  blo   L0A96        No, keep going until done
0A39 9E02             (    supercomm.asm):00811                  ldx   <u0000       Get param area ptr back
0A3B 8620             (    supercomm.asm):00812                  lda   #C$SPAC      Get char for space
0A3D A71F             (    supercomm.asm):00813                  sta   -1,x         Save as char before param area
                      (    supercomm.asm):00814         
                      (    supercomm.asm):00815         * Parse parameters for device name
0A3F A680             (    supercomm.asm):00816         L0AA2    lda   ,x+          Get param char
0A41 810D             (    supercomm.asm):00817                  cmpa  #C$CR        End of params?
0A43 2714             (    supercomm.asm):00818                  beq   L0AB6        Yes, skip ahead
0A45 812F             (    supercomm.asm):00819                  cmpa  #'/          Start of device name?
0A47 26F6             (    supercomm.asm):00820                  bne   L0AA2        No, eat char & continue
0A49 A61E             (    supercomm.asm):00821                  lda   -2,x         Get char before the '/'
0A4B 8120             (    supercomm.asm):00822                  cmpa  #C$SPAC      Was it a space?
0A4D 26F0             (    supercomm.asm):00823                  bne   L0AA2        No, eat '/' and continue parsing
0A4F 301F             (    supercomm.asm):00824                  leax  -1,x         It was, bump ptr back to '/'
0A51 2009             (    supercomm.asm):00825                  bra   L0ABA        Skip ahead
                      (    supercomm.asm):00826         
                      (    supercomm.asm):00827         * Default modem port
0A53 2F7432           (    supercomm.asm):00828         L035A    fcc   '/t2'
0A56 0D               (    supercomm.asm):00829                  fcb   C$CR
0A57 0000             (    supercomm.asm):00830                  fcb   $00,$00
                      (    supercomm.asm):00831         *
0A59 308CF7           (    supercomm.asm):00832         L0AB6    leax  <L035A,pc    Point to '/t2'
0A5C 108E0032         (    supercomm.asm):00833         L0ABA    ldy   #u002D       Point to spot in data mem
0A60 C60A             (    supercomm.asm):00834                  ldb   #10          Max # bytes to copy
0A62 A680             (    supercomm.asm):00835         L0ABF    lda   ,x+          Get char from device to use as modem port
0A64 810D             (    supercomm.asm):00836                  cmpa  #C$CR        Hit end yet?
0A66 2705             (    supercomm.asm):00837                  beq   L0ACA        Yes, skip ahead
0A68 A7A0             (    supercomm.asm):00838                  sta   ,y+          Save char
0A6A 5A               (    supercomm.asm):00839                  decb               Past max count yet?
0A6B 26F5             (    supercomm.asm):00840                  bne   L0ABF        No, keep copying
0A6D A7A0             (    supercomm.asm):00841         L0ACA    sta   ,y+          Save CR too
0A6F 17071B           (    supercomm.asm):00842                  lbsr  L12F5        Go save original screen attributes
0A72 1025042B         (    supercomm.asm):00843                  lbcs  L0F15        If not window-capable, exit with error
0A76 170DA9           (    supercomm.asm):00844                  lbsr  L1A8A        set main window to full size possible
0A79 10250424         (    supercomm.asm):00845                  lbcs  L0F15        If error, exit with it
0A7D 8601             (    supercomm.asm):00846                  lda   #$01
0A7F 976A             (    supercomm.asm):00847                  sta   <u0065
0A81 8E0003           (    supercomm.asm):00848                  ldx   #$0003       sleep to allow window to init.
0A84 103F0A           (    supercomm.asm):00849                  os9   F$Sleep  
0A87 CC0192           (    supercomm.asm):00850                  ldd   #1*256+SS.Montr  Get monitor type
0A8A 103F8D           (    supercomm.asm):00851                  os9   I$GetStt 
0A8D 252D             (    supercomm.asm):00852                  bcs   L0B1D        Error, exit
0A8F 1F10             (    supercomm.asm):00853                  tfr   x,d          Move to splittable register
0A91 F70C88           (    supercomm.asm):00854                  stb   >u0C84       save monitor type
0A94 BA0C88           (    supercomm.asm):00855                  ora   >u0C84       ??? OR with 0?
0A97 976A             (    supercomm.asm):00856                  sta   <u0065       save monitor type
0A99 308DFF26         (    supercomm.asm):00857                  leax  L0A24,pc     point to default option table & directorys
0A9D 108E0CA7         (    supercomm.asm):00858                  ldy   #u0CA5
0AA1 C64D             (    supercomm.asm):00859                  ldb   #$4D         get size of data
0AA3 171E3E           (    supercomm.asm):00860                  lbsr  L2D1E        move it
0AA6 8601             (    supercomm.asm):00861                  lda   #READ.
0AA8 308DFF44         (    supercomm.asm):00862                  leax  L0A51,pc     point to default directory name
0AAC 103F86           (    supercomm.asm):00863                  os9   I$ChgDir 
0AAF 308DF89F         (    supercomm.asm):00864                  leax  L0366,pc     point to default time on-line
0AB3 108E007C         (    supercomm.asm):00865                  ldy   #u0077
0AB7 C60B             (    supercomm.asm):00866                  ldb   #$0B         get size of data
0AB9 171E28           (    supercomm.asm):00867                  lbsr  L2D1E        move it
0ABC 170E95           (    supercomm.asm):00868         L0B1D    lbsr  L1BDF        set palettes based on monitor type
0ABF 170EFA           (    supercomm.asm):00869                  lbsr  L1C57
0AC2 170E79           (    supercomm.asm):00870                  lbsr  L1BC7        initialize batch file xfer names?
0AC5 308D03DB         (    supercomm.asm):00871                  leax  L0F18,pc     point to intercept trap
0AC9 103F09           (    supercomm.asm):00872                  os9   F$Icpt   
                      (    supercomm.asm):00873         * Get special version flag from system direct page (offset $7C)
                      (    supercomm.asm):00874         * all this byte does in this source is add a 'a' to the version # on the
                      (    supercomm.asm):00875         * status line
0ACC 8E00E4           (    supercomm.asm):00876                  ldx   #u00DF       point to a DAT buffer
0ACF CC0000           (    supercomm.asm):00877                  ldd   #$0000       get DAT image
0AD2 ED84             (    supercomm.asm):00878                  std   ,x           store it
0AD4 ED02             (    supercomm.asm):00879                  std   2,x
0AD6 ED04             (    supercomm.asm):00880                  std   4,x
0AD8 E706             (    supercomm.asm):00881                  stb   6,x
0ADA 1F10             (    supercomm.asm):00882                  tfr   x,d
0ADC 8E007C           (    supercomm.asm):00883                  ldx   #$7C         get offset into System DP (no idea what it is)
0ADF 108E0001         (    supercomm.asm):00884                  ldy   #1           get # bytes
0AE3 CE001E           (    supercomm.asm):00885                  ldu   #u0019       point to location to copy
0AE6 103F1B           (    supercomm.asm):00886                  os9   F$CpyMem     get the byte
                      (    supercomm.asm):00887         * Setup VRN
0AE9 308DF85F         (    supercomm.asm):00888                  leax  L0360,pc     point to VRN pathname
0AED 8603             (    supercomm.asm):00889                  lda   #UPDAT.
0AEF 103F84           (    supercomm.asm):00890                  os9   I$Open   
0AF2 252B             (    supercomm.asm):00891                  bcs   L0B92        If VRN not around, skip ahead
0AF4 9777             (    supercomm.asm):00892                  sta   <u0072       save path # to VRN
0AF6 C681             (    supercomm.asm):00893                  ldb   #$81         get code to setup VIRQ timer
0AF8 108E0001         (    supercomm.asm):00894                  ldy   #1           get enable flag
0AFC 8E003C           (    supercomm.asm):00895                  ldx   #60          get timer count
0AFF 103F8E           (    supercomm.asm):00896                  os9   I$SetStt     start timer
0B02 2514             (    supercomm.asm):00897                  bcs   L0B89
0B04 9677             (    supercomm.asm):00898                  lda   <u0072       get VRN path again
0B06 C680             (    supercomm.asm):00899                  ldb   #$80         get code to clear & report VIRQ calls
0B08 103F8D           (    supercomm.asm):00900                  os9   I$GetStt     get VIRQ counts & reset
0B0B 250B             (    supercomm.asm):00901                  bcs   L0B89
0B0D 8C0800           (    supercomm.asm):00902                  cmpx  #$0800
0B10 2406             (    supercomm.asm):00903                  bhs   L0B89
0B12 108C0800         (    supercomm.asm):00904                  cmpy  #$0800
0B16 2507             (    supercomm.asm):00905                  blo   L0B92
0B18 9677             (    supercomm.asm):00906         L0B89    lda   <u0072       get path to VRN again
0B1A 103F8F           (    supercomm.asm):00907                  os9   I$Close      close it
0B1D 0F77             (    supercomm.asm):00908                  clr   <u0072       clear path # to VRN
                      (    supercomm.asm):00909         * No VRN available comes here
0B1F 8E0514           (    supercomm.asm):00910         L0B92    ldx   #u050F       Point to ???
0B22 9F6B             (    supercomm.asm):00911                  stx   <u0066       Save ptr
0B24 CC0100           (    supercomm.asm):00912                  ldd   #$0100       ??? Init some values
0B27 FD0D1B           (    supercomm.asm):00913                  std   >u0D19
0B2A CC1B32           (    supercomm.asm):00914                  ldd   #$1B32       Foreground color prefix
0B2D DDA1             (    supercomm.asm):00915                  std   <u009C       Save it
                      (    supercomm.asm):00916         * Print title screens
0B2F 308DF90B         (    supercomm.asm):00917                  leax  L045E,pc     point to CLS
0B33 170D56           (    supercomm.asm):00918                  lbsr  L1B03        do it
0B36 308DF937         (    supercomm.asm):00919                  leax  L048F,pc     point to CuOff
0B3A 170D4F           (    supercomm.asm):00920                  lbsr  L1B03        do it
0B3D CC1A04           (    supercomm.asm):00921                  ldd   #$1A04       get overlay start coords
0B40 FD0C91           (    supercomm.asm):00922                  std   >u0C8F
0B43 CC1609           (    supercomm.asm):00923                  ldd   #$1609       get overlay size
0B46 FD0C93           (    supercomm.asm):00924                  std   >u0C91
0B49 170E98           (    supercomm.asm):00925                  lbsr  L1C81        place overlay window on screen
0B4C 308DF51F         (    supercomm.asm):00926                  leax  L006F,pc     point to title #1
0B50 170D39           (    supercomm.asm):00927                  lbsr  L1B03        print it
0B53 170D1F           (    supercomm.asm):00928                  lbsr  L1AE8        init small window on top line
0B56 8E001C           (    supercomm.asm):00929                  ldx   #$001C       get sleep time
0B59 17037D           (    supercomm.asm):00930                  lbsr  L0F56        sleep for title pause
0B5C CC3210           (    supercomm.asm):00931                  ldd   #$3210       get overlay start co-ordinates
0B5F FD0C91           (    supercomm.asm):00932                  std   >u0C8F
0B62 CC1304           (    supercomm.asm):00933                  ldd   #$1304       get overlay size
0B65 FD0C93           (    supercomm.asm):00934                  std   >u0C91
0B68 170E79           (    supercomm.asm):00935                  lbsr  L1C81        place overlay on screen
0B6B 308DF557         (    supercomm.asm):00936                  leax  L00C6,pc     point to title #2
0B6F 170D1A           (    supercomm.asm):00937                  lbsr  L1B03        print it
0B72 172A73           (    supercomm.asm):00938                  lbsr  L3BBC        copy current seconds
0B75 CC0001           (    supercomm.asm):00939         L0BF7    ldd   #SS.Ready    Get code to check data ready on Std In
0B78 103F8D           (    supercomm.asm):00940                  os9   I$GetStt     any data from keyboard?
0B7B 2409             (    supercomm.asm):00941                  bcc   L0C08        yes, skip ahead
0B7D 172A83           (    supercomm.asm):00942                  lbsr  L3BDA        check timeout
0B80 810A             (    supercomm.asm):00943                  cmpa  #$0A         did it timeout?
0B82 25F1             (    supercomm.asm):00944                  blo   L0BF7        no, try again
0B84 2003             (    supercomm.asm):00945                  bra   L0C0B
                      (    supercomm.asm):00946         
0B86 171B4D           (    supercomm.asm):00947         L0C08    lbsr  L2AC5        purge the data from keyboard
0B89 170EAB           (    supercomm.asm):00948         L0C0B    lbsr  L1CDE        remove overlay windows
0B8C 170EA8           (    supercomm.asm):00949                  lbsr  L1CDE
0B8F 308DF8DA         (    supercomm.asm):00950                  leax  L048B,pc     point to CurOn
0B93 170CF6           (    supercomm.asm):00951                  lbsr  L1B03        do it
0B96 8603             (    supercomm.asm):00952                  lda   #UPDAT.      get mode for modem path
0B98 8E0032           (    supercomm.asm):00953                  ldx   #u002D       point to modem path
0B9B 103F84           (    supercomm.asm):00954                  os9   I$Open       open it
0B9E 102502FF         (    supercomm.asm):00955                  lbcs  L0F15        If error, exit with it
0BA2 9730             (    supercomm.asm):00956                  sta   <u002B       save path to modem
0BA4 308DF896         (    supercomm.asm):00957                  leax  L045E,pc     point to CLS
0BA8 170CE1           (    supercomm.asm):00958                  lbsr  L1B03        do it
0BAB 17048A           (    supercomm.asm):00959                  lbsr  L117F        get path options from modem
0BAE 171BD1           (    supercomm.asm):00960                  lbsr  L2B86        print status line
0BB1 1731D8           (    supercomm.asm):00961                  lbsr  L4403        scan parameters for '-f=' (capture buffer)
0BB4 CC0103           (    supercomm.asm):00962                  ldd   #$0103       init cursor position
0BB7 FD0C96           (    supercomm.asm):00963                  std   >u0C94
                      (    supercomm.asm):00964         * NOTE: may want to have Supercomm make this an option (self-modify code
                      (    supercomm.asm):00965         * to change LBSR opcode to LBRN or vice versa)
0BBA 171B46           (    supercomm.asm):00966                  lbsr  L2AF5        toggle DTR to hangup modem
0BBD 170610           (    supercomm.asm):00967                  lbsr  L134D        get local keyboard path options
0BC0 170592           (    supercomm.asm):00968                  lbsr  L12B5        set them to what I need
0BC3 4F               (    supercomm.asm):00969                  clra               Std In path
0BC4 308DF747         (    supercomm.asm):00970                  leax  L031A,pc     point to ZModem xfer header
0BC8 9F71             (    supercomm.asm):00971                  stx   <u006C       save pointer to it
0BCA 8E0613           (    supercomm.asm):00972                  ldx   #u060E       Point to buffer for key presses
0BCD 108E0001         (    supercomm.asm):00973                  ldy   #$0001
0BD1 103F89           (    supercomm.asm):00974                  os9   I$Read   
0BD4 1607A9           (    supercomm.asm):00975                  lbra  L157B        enter main loop (without read from keyboard)
                      (    supercomm.asm):00976         
                      (    supercomm.asm):00977         * Check if data waiting for keyboard
0BD7 CC0001           (    supercomm.asm):00978         L13C2    ldd   #SS.Ready    Check if data ready on keyboard (Std In)
0BDA 103F8D           (    supercomm.asm):00979                  os9   I$GetStt 
0BDD 39               (    supercomm.asm):00980                  rts   
                      (    supercomm.asm):00981         
                      (    supercomm.asm):00982         * Main processing loop
0BDE 9630             (    supercomm.asm):00983         L0C5E    lda   <u002B       Get path to modem
0BE0 C601             (    supercomm.asm):00984                  ldb   #SS.Ready    Check for data ready
0BE2 103F8D           (    supercomm.asm):00985                  os9   I$GetStt     Any data ready?
0BE5 2419             (    supercomm.asm):00986                  bcc   L0FB8        yes, go process
0BE7 0D28             (    supercomm.asm):00987                  tst   <u0023       sending ASCII file?
0BE9 10263244         (    supercomm.asm):00988                  lbne  L44B6        yes, read & write next line
0BED 8E0003           (    supercomm.asm):00989                  ldx   #3           get # ticks to wait
0BF0 1702E6           (    supercomm.asm):00990                  lbsr  L0F56        go wait
0BF3 8DE2             (    supercomm.asm):00991         L0C72    bsr   L13C2        any data from keyboard?
0BF5 25E7             (    supercomm.asm):00992                  bcs   L0C5E        no, try modem again
                      (    supercomm.asm):00993         * Keyboard data ready
0BF7 0D45             (    supercomm.asm):00994                  tst   <u0040       conference mode?
0BF9 102617AA         (    supercomm.asm):00995                  lbne  L273D        yes, go read data from keyboard
0BFD 160775           (    supercomm.asm):00996                  lbra  L156E        go read & process keyboard data
                      (    supercomm.asm):00997         
                      (    supercomm.asm):00998         * Process modem data - only comes here if at least 1 char available
                      (    supercomm.asm):00999         * Entry: B=Number of characters available on serial port
                      (    supercomm.asm):01000         * Modified 94/03/27 for 256 byte buffer
0C00 4F               (    supercomm.asm):01001         L0FB8    clra               clear MSB of length
0C01 1F02             (    supercomm.asm):01002                  tfr   d,y          move length to Y
0C03 9630             (    supercomm.asm):01003                  lda   <u002B       get path to modem
0C05 8E00E4           (    supercomm.asm):01004                  ldx   #u00DF       point to buffer
0C08 103F89           (    supercomm.asm):01005                  os9   I$Read       get the data
0C0B 2542             (    supercomm.asm):01006                  bcs   L1023        error, skip ahead
0C0D 109F0B           (    supercomm.asm):01007                  sty   <u0C88       save # bytes read
0C10 2732             (    supercomm.asm):01008         L0FD2    beq   L1017        If no data, skip ahead
0C12 B60CB0           (    supercomm.asm):01009                  lda   >u0CAE       Is Auto-Zmodem enabled?
0C15 2603             (    supercomm.asm):01010                  bne   L0FE1        no, check continue
0C17 170316           (    supercomm.asm):01011                  lbsr  L1062        Check for an Auto-ZModem header
0C1A 960A             (    supercomm.asm):01012         L0FE1    lda   <u0C82       Get which search/reply string we are doing
0C1C 270C             (    supercomm.asm):01013                  beq   L0FF4        None, skip checking search/reply strings
0C1E 8105             (    supercomm.asm):01014                  cmpa  #$05         Have we finished the 4 max. allowed?
0C20 2605             (    supercomm.asm):01015                  bne   L0FF1        No, go check for this one
0C22 4F               (    supercomm.asm):01016                  clra               Done all of them, clear it out to skip thru faster
0C23 970A             (    supercomm.asm):01017                  sta   <u0C82
0C25 2003             (    supercomm.asm):01018                  bra   L0FF4        Skip checking auto-logon sequences
                      (    supercomm.asm):01019         
0C27 1715DB           (    supercomm.asm):01020         L0FF1    lbsr  L254A        Go check for auto-logon sequences
0C2A 8D3A             (    supercomm.asm):01021         L0FF4    bsr   L1040        convert & move data to output buffer
0C2C 8601             (    supercomm.asm):01022                  lda   #1           get path to window
0C2E 8E0712           (    supercomm.asm):01023                  ldx   #u070D       point to parsed data
0C31 109E0B           (    supercomm.asm):01024                  ldy   <u0C88       get amount of data
0C34 270E             (    supercomm.asm):01025                  beq   L1017        none, skip ahead
0C36 103F8A           (    supercomm.asm):01026                  os9   I$Write      print data on screen
0C39 0D2A             (    supercomm.asm):01027                  tst   <u0025       Is there an ASCII receive buffer file going?
0C3B 2707             (    supercomm.asm):01028                  beq   L1017        No, skip ahead
0C3D 0D2B             (    supercomm.asm):01029                  tst   <u0026       Is the buffer OPEN?
0C3F 2703             (    supercomm.asm):01030                  beq   L1017        No, skip ahead
0C41 1730E6           (    supercomm.asm):01031                  lbsr  L4394        Go handle receive buffer
0C44 173271           (    supercomm.asm):01032         L1017    lbsr  L453B        Go handle screen buffer
0C47 7D0C87           (    supercomm.asm):01033                  tst   >u0C83
0C4A 2703             (    supercomm.asm):01034                  beq   L1023
0C4C 17160C           (    supercomm.asm):01035                  lbsr  L25B1
0C4F 0D70             (    supercomm.asm):01036         L1023    tst   <u006B       Zmodem flag?
0C51 2A0C             (    supercomm.asm):01037                  bpl   L1036        No zmodem, skip ahead
0C53 0F70             (    supercomm.asm):01038                  clr   <u006B       Clear it out
0C55 7D0CA2           (    supercomm.asm):01039                  tst   >u0CA0       Sending or receiving?
0C58 102709C8         (    supercomm.asm):01040                  lbeq  L1859        Sending; do ZModem file send
0C5C 160912           (    supercomm.asm):01041                  lbra  L1793        Do Zmodem file receive
                      (    supercomm.asm):01042         
0C5F 0D28             (    supercomm.asm):01043         L1036    tst   <u0023       Are we sending an ASCII file?
0C61 2790             (    supercomm.asm):01044                  beq   L0C72        No, go check the keyboard
0C63 16FF78           (    supercomm.asm):01045                  lbra  L0C5E        go back to main loop
                      (    supercomm.asm):01046         
                      (    supercomm.asm):01047         * Convert modem text to TTY/ANSI/OS9 codes
0C66 8E00E4           (    supercomm.asm):01048         L1040    ldx   #u00DF       Point to modem buffer
0C69 108E0712         (    supercomm.asm):01049                  ldy   #u070D       Point to screen output buffer
0C6D D60C             (    supercomm.asm):01050                  ldb   <u0C89       Get # bytes waiting in modem buffer
0C6F B60CA8           (    supercomm.asm):01051                  lda   >u0CA6       get terminal type
0C72 10271C6E         (    supercomm.asm):01052                  lbeq  L2D1E        TTY, copy buffer with no editing & exit
0C76 4A               (    supercomm.asm):01053                  deca               OS9?
0C77 2703             (    supercomm.asm):01054                  beq   L0C8D        Yes, go do
0C79 4A               (    supercomm.asm):01055                  deca               ANSI?
0C7A 274F             (    supercomm.asm):01056                  beq   L0CF6        Yes, go (illegal values fall thru to OS9:was TTY)
                      (    supercomm.asm):01057         
                      (    supercomm.asm):01058         * Loop to Convert OS9 codes to output buffer
                      (    supercomm.asm):01059         * NOTE: ORIGINALLY STRIPPED HI-BIT OFF OF CHARS (anda #$7f) & also had code
                      (    supercomm.asm):01060         *   after the strip to cmpa #$7f/BHI L0CA2, which would eat the char. Taken
                      (    supercomm.asm):01061         * out to allow foreign & extra chars through. May want to add parser later
                      (    supercomm.asm):01062         * to eat '.' illegal chars, but leave foreign symbols alone.
0C7C A680             (    supercomm.asm):01063         L0C8D    lda   ,x+          get a byte
0C7E 8120             (    supercomm.asm):01064                  cmpa  #C$SPAC      control chars?
0C80 2509             (    supercomm.asm):01065                  blo   L0CA2        yes, skip ahead
0C82 1705A5           (    supercomm.asm):01066                  lbsr  L13CF        update internal cursor position
0C85 A7A0             (    supercomm.asm):01067         L0C9C    sta   ,y+          save to output buffer
0C87 5A               (    supercomm.asm):01068         L0C9E    decb               done all data?
0C88 26F2             (    supercomm.asm):01069                  bne   L0C8D        no, keep going
0C8A 39               (    supercomm.asm):01070                  rts                return
                      (    supercomm.asm):01071         
                      (    supercomm.asm):01072         * Parse control codes
0C8B 8108             (    supercomm.asm):01073         L0CA2    cmpa  #C$BSP       backspace?
0C8D 2605             (    supercomm.asm):01074                  bne   L0CAB        no, check CR
0C8F 1705AF           (    supercomm.asm):01075                  lbsr  L13EC
0C92 20F1             (    supercomm.asm):01076                  bra   L0C9C        go save char in output buffer & continue
                      (    supercomm.asm):01077         
0C94 810D             (    supercomm.asm):01078         L0CAB    cmpa  #C$CR        carriage return?
0C96 2613             (    supercomm.asm):01079                  bne   L0CC5        no, check CLS
0C98 1705BB           (    supercomm.asm):01080                  lbsr  L1405        u0C94=1
0C9B 7D0CAA           (    supercomm.asm):01081                  tst   >u0CA8       Auto line feed on?
0C9E 27E5             (    supercomm.asm):01082                  beq   L0C9C        No, go save char in output buffer
                      (    supercomm.asm):01083         * NOTE: CHANGE 140E TO ONLY PSHS A, ONLY LDA u0C95,u ETC.
0CA0 1705BA           (    supercomm.asm):01084                  lbsr  L140E        Go bump Y coord down by 1 for auto-lf on CR
0CA3 0C0C             (    supercomm.asm):01085                  inc   <u0C89       Increase size of converted buffer by 1
0CA5 A7A0             (    supercomm.asm):01086                  sta   ,y+          Save CR in output buffer
0CA7 860A             (    supercomm.asm):01087                  lda   #C$LF        Get Line feed
0CA9 20DA             (    supercomm.asm):01088                  bra   L0C9C        Go add that to buffer too
                      (    supercomm.asm):01089         
0CAB 810C             (    supercomm.asm):01090         L0CC5    cmpa  #C$FORM      CLS?
0CAD 2605             (    supercomm.asm):01091                  bne   L0CCE        no, check bell
0CAF 1705BB           (    supercomm.asm):01092                  lbsr  L1422        u0C94 = $0101
0CB2 20D1             (    supercomm.asm):01093                  bra   L0C9C        Go save CLS code in output buffer
                      (    supercomm.asm):01094         
0CB4 8107             (    supercomm.asm):01095         L0CCE    cmpa  #C$BELL      bell?
0CB6 27CD             (    supercomm.asm):01096                  beq   L0C9C        Yes, go save in output buffer
0CB8 810A             (    supercomm.asm):01097                  cmpa  #C$LF        linefeed?
0CBA 2605             (    supercomm.asm):01098                  bne   L0CDB        No, check Up one line
0CBC 17059E           (    supercomm.asm):01099                  lbsr  L140E        Go bump Y coord down by 1
0CBF 20C4             (    supercomm.asm):01100                  bra   L0C9C        Save LF in output buffer
                      (    supercomm.asm):01101         
0CC1 8109             (    supercomm.asm):01102         L0CDB    cmpa  #$09         Up one line code?
0CC3 2602             (    supercomm.asm):01103                  bne   L0CE4        No, check next
                      (    supercomm.asm):01104         * NOTE: USELESS LBSR...PERHAPS LEFT IN FOR AN OPTION TO HAVE CHR$(9) BE EITHER
                      (    supercomm.asm):01105         * UP 1 LINE (FOR OS9) OR TAB CHAR??? IF REMOVING, SHOULD ALSO REMOVE RTS @
                      (    supercomm.asm):01106         * 1BDE
                      (    supercomm.asm):01107         *         lbsr  L1BDE        Spot reserved for TAB handler
0CC5 20C0             (    supercomm.asm):01108                  bra   L0C9E        Eat the char & continue
                      (    supercomm.asm):01109         * All other <CTRL> chars& chars >128, don't save in buffer?
0CC7 0A0C             (    supercomm.asm):01110         L0CE4    dec   <u0C89       Shrink size of converted buffer by 1
0CC9 20BC             (    supercomm.asm):01111                  bra   L0C9E        Eat char & continue
                      (    supercomm.asm):01112         
0CCB B60C8C           (    supercomm.asm):01113         L0CF6    lda   >u0C8A       Are we processing an <ESC> sequence?
0CCE 10260080         (    supercomm.asm):01114                  lbne  L0D9F        yes, go to ANSI processor
0CD2 A680             (    supercomm.asm):01115                  lda   ,x+          get data
0CD4 8120             (    supercomm.asm):01116                  cmpa  #C$SPAC      printable?
0CD6 250F             (    supercomm.asm):01117                  blo   L0D13        no, check control codes
0CD8 8180             (    supercomm.asm):01118                  cmpa  #$80         Hi bit char?
0CDA 2502             (    supercomm.asm):01119                  blo   L0D0A        No, save it in out buffer
0CDC 862A             (    supercomm.asm):01120                  lda   #'*          Yes, replace with '*'
0CDE 170549           (    supercomm.asm):01121         L0D0A    lbsr  L13CF        update internal cursor position
0CE1 A7A0             (    supercomm.asm):01122         L0D0D    sta   ,y+          Save char in buffer
0CE3 5A               (    supercomm.asm):01123         L0D0F    decb  
0CE4 26E5             (    supercomm.asm):01124                  bne   L0CF6
0CE6 39               (    supercomm.asm):01125                  rts   
                      (    supercomm.asm):01126         
0CE7 8108             (    supercomm.asm):01127         L0D13    cmpa  #C$BSP       is it backspace?
0CE9 2718             (    supercomm.asm):01128                  beq   L0D31        yes, go process
0CEB 810D             (    supercomm.asm):01129                  cmpa  #C$CR        is it carriage return?
0CED 2724             (    supercomm.asm):01130                  beq   L0D42        yes, go process
0CEF 810A             (    supercomm.asm):01131                  cmpa  #C$LF        is it line feed?
0CF1 2733             (    supercomm.asm):01132                  beq   L0D58        yes, go process
0CF3 810C             (    supercomm.asm):01133                  cmpa  #C$FORM      Clear screen?
0CF5 2734             (    supercomm.asm):01134                  beq   L0D5D        Yes, go process
0CF7 8107             (    supercomm.asm):01135                  cmpa  #C$BELL      <CTRL>-<G> Bell?
0CF9 27E3             (    supercomm.asm):01136                  beq   L0D0A        Yes, go process
0CFB 811B             (    supercomm.asm):01137                  cmpa  #C$EOF       <ESC>?
0CFD 2731             (    supercomm.asm):01138                  beq   L0D62        Yes, ANSI code coming...go set up
0CFF 0A0C             (    supercomm.asm):01139         L0D2B    dec   <u0C89       decrement # chars in converted output buffer
0D01 20E0             (    supercomm.asm):01140                  bra   L0D0F        Eat the char & continue processing
                      (    supercomm.asm):01141         
                      (    supercomm.asm):01142         * Process backspace - ANSI (OS9, if it backspaces off left side, will go up
                      (    supercomm.asm):01143         *   1 line & set the cursor to the right side. ANSI will stop at the left side
0D03 3402             (    supercomm.asm):01144         L0D31    pshs  a            Save char
0D05 B60C96           (    supercomm.asm):01145                  lda   >u0C94       get cursor X position
0D08 8101             (    supercomm.asm):01146                  cmpa  #$01         Already at far left side?
0D0A 3502             (    supercomm.asm):01147                  puls  a            Restore char
0D0C 27F1             (    supercomm.asm):01148                  beq   L0D2B        Already @ left side, eat char & continue
0D0E 7A0C96           (    supercomm.asm):01149                  dec   >u0C94       Bump X cursor coord left by 1
0D11 20CE             (    supercomm.asm):01150                  bra   L0D0D        continue processing
                      (    supercomm.asm):01151         
                      (    supercomm.asm):01152         * Process carriage return
0D13 170540           (    supercomm.asm):01153         L0D42    lbsr  L1405        Reset X coord to 1
0D16 7D0CAA           (    supercomm.asm):01154                  tst   >u0CA8       Auto LF on?
0D19 27C6             (    supercomm.asm):01155                  beq   L0D0D        No, go save CR
0D1B 17053F           (    supercomm.asm):01156                  lbsr  L140E        Yes, bump up Y coord by 1
0D1E 0C0C             (    supercomm.asm):01157                  inc   <u0C89       Bump up size of converted output buffer by 1
0D20 A7A0             (    supercomm.asm):01158                  sta   ,y+          Save CR char in output buffer
0D22 860A             (    supercomm.asm):01159                  lda   #C$LF        Also add an LF
0D24 20BB             (    supercomm.asm):01160                  bra   L0D0D
                      (    supercomm.asm):01161         
                      (    supercomm.asm):01162         * Process line feed
0D26 170534           (    supercomm.asm):01163         L0D58    lbsr  L140E        Bump Y coord up by 1
0D29 20B6             (    supercomm.asm):01164                  bra   L0D0D        Go save LF in converted output buffer
                      (    supercomm.asm):01165         
                      (    supercomm.asm):01166         * Process CLS
0D2B 17053F           (    supercomm.asm):01167         L0D5D    lbsr  L1422        Set X&Y coords to 1,1
0D2E 20B1             (    supercomm.asm):01168                  bra   L0D0D        Save char in converted output buffer
                      (    supercomm.asm):01169         
                      (    supercomm.asm):01170         * Process <ESC>
0D30 7C0C8C           (    supercomm.asm):01171         L0D62    inc   >u0C8A       flag <ESC> received
0D33 7F0C8D           (    supercomm.asm):01172                  clr   >u0C8B
0D36 86FF             (    supercomm.asm):01173                  lda   #$FF         ??? Init ANSI convert buffer to empty
0D38 3410             (    supercomm.asm):01174                  pshs  x            Save converted output buffer ptr
0D3A 8E0C65           (    supercomm.asm):01175                  ldx   #u0C60       ??? Point to ANSI convert buffer?
0D3D BF0C85           (    supercomm.asm):01176                  stx   >u0C80       Save ptr
0D40 6F84             (    supercomm.asm):01177                  clr   ,x           Clear our 2 of ANSI convert bytes
0D42 6F01             (    supercomm.asm):01178                  clr   1,x
0D44 A702             (    supercomm.asm):01179                  sta   2,x          Flag end of ANSI convert buffer
0D46 8E0B12           (    supercomm.asm):01180                  ldx   #u0B0D       Point to start of ANSI seq. bffr (no ESC)
0D49 BF0C8F           (    supercomm.asm):01181                  stx   >u0C8D       Save ptr to it
0D4C 0A0C             (    supercomm.asm):01182                  dec   <u0C89       Dec # chars in converted output buffer
0D4E 3510             (    supercomm.asm):01183                  puls  x            Restore converted output ptr
0D50 2091             (    supercomm.asm):01184                  bra   L0D0F        Eat the ESC for now & continue
                      (    supercomm.asm):01185         
                      (    supercomm.asm):01186         * Parse ANSI escape sequence
                      (    supercomm.asm):01187         * Entry: X=Modem buffer ptr, Y=Converted output buffer ptr, B=# bytes to do
0D52 FE0C8F           (    supercomm.asm):01188         L0D9F    ldu   >u0C8D       get ANSI sequence buffer ptr
0D55 A680             (    supercomm.asm):01189                  lda   ,x+          get character
0D57 A7C0             (    supercomm.asm):01190                  sta   ,u+          save it into ANSI sequence buffer
0D59 FF0C8F           (    supercomm.asm):01191                  stu   >u0C8D       save updated ANSI sequence buffer ptr
0D5C 815B             (    supercomm.asm):01192                  cmpa  #'[          the start char?
0D5E 2704             (    supercomm.asm):01193                  beq   L0DB9        yes, continue
0D60 8140             (    supercomm.asm):01194                  cmpa  #'@          printable char?
0D62 2205             (    supercomm.asm):01195                  bhi   L0DC0        yes, check for finish
0D64 0A0C             (    supercomm.asm):01196         L0DB9    dec   <u0C89       decrement converted output buffer count
0D66 16FF7A           (    supercomm.asm):01197                  lbra  L0D0F        continue
                      (    supercomm.asm):01198         
                      (    supercomm.asm):01199         * Start ANSI sequence found (<ESC>-[)
0D69 7F0C8C           (    supercomm.asm):01200         L0DC0    clr   >u0C8A       Clear out ANSI sequence found flag???
0D6C B70C8E           (    supercomm.asm):01201                  sta   >u0C8C       Save char
0D6F 0A0C             (    supercomm.asm):01202                  dec   <u0C89       Dec converted output buffer count
0D71 3424             (    supercomm.asm):01203                  pshs  y,b          Preserve converted output bffr ptr&# chars left
0D73 10BE0C85         (    supercomm.asm):01204                  ldy   >u0C80       Get ptr to converted ANSI buffer
0D77 86FF             (    supercomm.asm):01205                  lda   #$FF         Flag as unused for now
0D79 A7A4             (    supercomm.asm):01206                  sta   ,y
0D7B 108E0C65         (    supercomm.asm):01207                  ldy   #u0C60       Point to converted ANSI buffer
0D7F 10BF0C85         (    supercomm.asm):01208                  sty   >u0C80
0D83 108E0B13         (    supercomm.asm):01209                  ldy   #u0B0D+1     Point to Start of ANSI sequence buffer (no ESC)+1
0D87 10BF0C8F         (    supercomm.asm):01210                  sty   >u0C8D       Save ptr
0D8B A6A0             (    supercomm.asm):01211         L0DEE    lda   ,y+          Get char
0D8D 8140             (    supercomm.asm):01212                  cmpa  #$40         '@'
0D8F 223F             (    supercomm.asm):01213                  bhi   L0E3B        Letter or higher, go do
0D91 813A             (    supercomm.asm):01214                  cmpa  #$3A         ':'
0D93 2504             (    supercomm.asm):01215                  blo   L0DFC        Possible ASCII numeric, skip ahead
0D95 C6FE             (    supercomm.asm):01216                  ldb   #$FE
0D97 201A             (    supercomm.asm):01217                  bra   L0E19
                      (    supercomm.asm):01218         
0D99 8030             (    supercomm.asm):01219         L0DFC    suba  #$30         Drop possible numeric down to binary equivalent
0D9B B70C88           (    supercomm.asm):01220                  sta   >u0C84       Save it
0D9E A6A0             (    supercomm.asm):01221                  lda   ,y+          Get next char
0DA0 8139             (    supercomm.asm):01222                  cmpa  #'9          above numeric?
0DA2 2225             (    supercomm.asm):01223                  bhi   L0E33        Yes, skip ahead
0DA4 8030             (    supercomm.asm):01224                  suba  #$30         Bump down to binary version
0DA6 B70C89           (    supercomm.asm):01225                  sta   >u0C85       Save it
0DA9 B60C88           (    supercomm.asm):01226                  lda   >u0C84       Get 1st one again (10's digit)
0DAC C60A             (    supercomm.asm):01227                  ldb   #10          Multiply by 10
0DAE 3D               (    supercomm.asm):01228                  mul   
0DAF EB3F             (    supercomm.asm):01229                  addb  -1,y         Add in one's digit
0DB1 C030             (    supercomm.asm):01230                  subb  #$30
0DB3 3410             (    supercomm.asm):01231         L0E19    pshs  x
0DB5 BE0C85           (    supercomm.asm):01232                  ldx   >u0C80
0DB8 E780             (    supercomm.asm):01233                  stb   ,x+
0DBA C6FF             (    supercomm.asm):01234                  ldb   #$FF
0DBC E784             (    supercomm.asm):01235                  stb   ,x
0DBE E701             (    supercomm.asm):01236                  stb   1,x
0DC0 E702             (    supercomm.asm):01237                  stb   2,x
0DC2 BF0C85           (    supercomm.asm):01238                  stx   >u0C80
0DC5 3510             (    supercomm.asm):01239                  puls  x
0DC7 20C2             (    supercomm.asm):01240                  bra   L0DEE
                      (    supercomm.asm):01241         
0DC9 313F             (    supercomm.asm):01242         L0E33    leay  -1,y
0DCB F60C88           (    supercomm.asm):01243                  ldb   >u0C84
0DCE 20E3             (    supercomm.asm):01244                  bra   L0E19
                      (    supercomm.asm):01245         
0DD0 3524             (    supercomm.asm):01246         L0E3B    puls  y,b
0DD2 B60C8E           (    supercomm.asm):01247                  lda   >u0C8C
0DD5 816D             (    supercomm.asm):01248                  cmpa  #$6D           m
0DD7 273F             (    supercomm.asm):01249                  beq   L0E84
0DD9 814A             (    supercomm.asm):01250                  cmpa  #$4A           J
0DDB 102701BF         (    supercomm.asm):01251                  lbeq  L10E2
0DDF 8166             (    supercomm.asm):01252                  cmpa  #$66           f
0DE1 102704BC         (    supercomm.asm):01253                  lbeq  L1467
0DE5 8148             (    supercomm.asm):01254                  cmpa  #$48           H
0DE7 102704B6         (    supercomm.asm):01255                  lbeq  L1467
0DEB 8143             (    supercomm.asm):01256                  cmpa  #$43           C
0DED 102704EE         (    supercomm.asm):01257                  lbeq  L14B0
0DF1 8144             (    supercomm.asm):01258                  cmpa  #$44           D
0DF3 1027051C         (    supercomm.asm):01259                  lbeq  L14F4
0DF7 8141             (    supercomm.asm):01260                  cmpa  #$41           A
0DF9 10270538         (    supercomm.asm):01261                  lbeq  L151D
0DFD 8142             (    supercomm.asm):01262                  cmpa  #$42           B
0DFF 10270554         (    supercomm.asm):01263                  lbeq  L1546
0E03 8173             (    supercomm.asm):01264                  cmpa  #$73           s
0E05 1027046E         (    supercomm.asm):01265                  lbeq  L1433
0E09 8175             (    supercomm.asm):01266                  cmpa  #$75           u
0E0B 10270475         (    supercomm.asm):01267                  lbeq  L1442
0E0F 814B             (    supercomm.asm):01268                  cmpa  #$4B           K
0E11 102701A8         (    supercomm.asm):01269                  lbeq  L1102
0E15 16FECB           (    supercomm.asm):01270                  lbra  L0D0F
                      (    supercomm.asm):01271         
0E18 3416             (    supercomm.asm):01272         L0E84    pshs  x,d
0E1A 8E0C65           (    supercomm.asm):01273                  ldx   #u0C60
0E1D A680             (    supercomm.asm):01274         L0E8A    lda   ,x+
0E1F 81FF             (    supercomm.asm):01275                  cmpa  #$FF
0E21 2715             (    supercomm.asm):01276                  beq   L0EA6
0E23 4D               (    supercomm.asm):01277                  tsta
0E24 2747             (    supercomm.asm):01278                  beq   L0EDD
0E26 8101             (    supercomm.asm):01279                  cmpa  #$01
0E28 27F3             (    supercomm.asm):01280                  beq   L0E8A
0E2A 8108             (    supercomm.asm):01281                  cmpa  #$08
0E2C 250F             (    supercomm.asm):01282                  blo   L0EAB
0E2E 8126             (    supercomm.asm):01283                  cmpa  #$26
0E30 2513             (    supercomm.asm):01284                  blo   L0EB3
0E32 8130             (    supercomm.asm):01285                  cmpa  #$30
0E34 2523             (    supercomm.asm):01286                  blo   L0EC8
0E36 20E5             (    supercomm.asm):01287                  bra   L0E8A
                      (    supercomm.asm):01288         
0E38 3516             (    supercomm.asm):01289         L0EA6    puls  x,d
0E3A 16FEA6           (    supercomm.asm):01290                  lbra  L0D0F
                      (    supercomm.asm):01291         
0E3D 3410             (    supercomm.asm):01292         L0EAB    pshs  x
0E3F 308DF583         (    supercomm.asm):01293                  leax  >L03E6,pc
0E43 202E             (    supercomm.asm):01294                  bra   L0EE3
                      (    supercomm.asm):01295         
0E45 D66A             (    supercomm.asm):01296         L0EB3    ldb   <u0065
0E47 C102             (    supercomm.asm):01297                  cmpb  #$02
0E49 27D2             (    supercomm.asm):01298                  beq   L0E8A
0E4B 811E             (    supercomm.asm):01299                  cmpa  #$1E
0E4D 25CE             (    supercomm.asm):01300                  blo   L0E8A
0E4F 801E             (    supercomm.asm):01301                  suba  #$1E
0E51 3410             (    supercomm.asm):01302                  pshs  x
0E53 308DF597         (    supercomm.asm):01303                  leax  >L040E,pc
0E57 201A             (    supercomm.asm):01304                  bra   L0EE3
                      (    supercomm.asm):01305         
0E59 D66A             (    supercomm.asm):01306         L0EC8    ldb   <u0065
0E5B C102             (    supercomm.asm):01307                  cmpb  #$02
0E5D 27BE             (    supercomm.asm):01308                  beq   L0E8A
0E5F 8128             (    supercomm.asm):01309                  cmpa  #$28
0E61 25BA             (    supercomm.asm):01310                  blo   L0E8A
0E63 8028             (    supercomm.asm):01311                  suba  #$28
0E65 3410             (    supercomm.asm):01312                  pshs  x
0E67 308DF5AB         (    supercomm.asm):01313                  leax  >L0436,pc
0E6B 2006             (    supercomm.asm):01314                  bra   L0EE3
                      (    supercomm.asm):01315         
0E6D 3410             (    supercomm.asm):01316         L0EDD    pshs  x
0E6F 308DF543         (    supercomm.asm):01317                  leax  >L03D6,pc
0E73 C605             (    supercomm.asm):01318         L0EE3    ldb   #5
0E75 3D               (    supercomm.asm):01319                  mul   
0E76 3085             (    supercomm.asm):01320                  leax  b,x
0E78 170115           (    supercomm.asm):01321                  lbsr  L10D2
0E7B 3510             (    supercomm.asm):01322                  puls  x
0E7D 209E             (    supercomm.asm):01323                  bra   L0E8A
                      (    supercomm.asm):01324         
0E7F 9643             (    supercomm.asm):01325         L0EEF    lda   <u003E         Get path # to status window
0E81 103F8F           (    supercomm.asm):01326                  os9   I$Close        Close it
0E84 170349           (    supercomm.asm):01327                  lbsr  L134D
0E87 170353           (    supercomm.asm):01328                  lbsr  L135C
0E8A 170396           (    supercomm.asm):01329                  lbsr  L13BA
0E8D 9677             (    supercomm.asm):01330                  lda   <u0072         Get path # to VRN
0E8F 2703             (    supercomm.asm):01331                  beq   L0F06          None, skip ahead
0E91 103F8F           (    supercomm.asm):01332                  os9   I$Close        Close it
0E94 0D2A             (    supercomm.asm):01333         L0F06    tst   <u0025
0E96 2708             (    supercomm.asm):01334                  beq   L0F14
0E98 172EBF           (    supercomm.asm):01335                  lbsr  L43CA
0E9B 962F             (    supercomm.asm):01336                  lda   <u002A
0E9D 103F8F           (    supercomm.asm):01337                  os9   I$Close  
0EA0 5F               (    supercomm.asm):01338         L0F14    clrb  
0EA1 103F06           (    supercomm.asm):01339         L0F15    os9   F$Exit   
0EA4 C180             (    supercomm.asm):01340         L0F18    cmpb  #$80
0EA6 2602             (    supercomm.asm):01341                  bne   L0F1F
0EA8 0C78             (    supercomm.asm):01342                  inc   <u0073
0EAA 3B               (    supercomm.asm):01343         L0F1F    rti   
                      (    supercomm.asm):01344         
                      (    supercomm.asm):01345         * Update on-screen timer
0EAB 3432             (    supercomm.asm):01346         L0F20    pshs  y,x,a
0EAD 8E00A1           (    supercomm.asm):01347                  ldx   #u009C         Point to FColor buffer
0EB0 968D             (    supercomm.asm):01348                  lda   <u0088         Get bckgrnd color of main window
0EB2 A702             (    supercomm.asm):01349                  sta   $02,x          Save as color to use
0EB4 9643             (    supercomm.asm):01350                  lda   <u003E         Get path # to status line window
0EB6 108E0003         (    supercomm.asm):01351                  ldy   #$0003
0EBA 103F8A           (    supercomm.asm):01352                  os9   I$Write        Set foreground color
0EBD 8E007C           (    supercomm.asm):01353                  ldx   #u0077         Send out current Timer string
0EC0 108E000B         (    supercomm.asm):01354                  ldy   #$000B
0EC4 103F8A           (    supercomm.asm):01355                  os9   I$Write  
0EC7 8E00A1           (    supercomm.asm):01356                  ldx   #u009C         Point to Fcolor buffer
0ECA 968C             (    supercomm.asm):01357                  lda   <u0087         Get foreground color
0ECC A702             (    supercomm.asm):01358                  sta   $02,x          Save it
0ECE 9643             (    supercomm.asm):01359                  lda   <u003E         Get path to status window
0ED0 108E0003         (    supercomm.asm):01360                  ldy   #$0003         Change color on status window back to normal
0ED4 103F8A           (    supercomm.asm):01361                  os9   I$Write  
0ED7 35B2             (    supercomm.asm):01362                  puls  pc,y,x,a
                      (    supercomm.asm):01363         
                      (    supercomm.asm):01364         * Entry: X=# ticks to sleep
0ED9 0D7A             (    supercomm.asm):01365         L0F56    tst   <u0075         Is the timer function on?
0EDB 2711             (    supercomm.asm):01366                  beq   L0F6F          No, go to sleep
0EDD 3402             (    supercomm.asm):01367                  pshs  a              Preserve # seconds
0EDF 9679             (    supercomm.asm):01368                  lda   <u0074         Yes, get current # seconds
0EE1 9178             (    supercomm.asm):01369         L0F60    cmpa  <u0073         Different than last recorded # seconds?
0EE3 2707             (    supercomm.asm):01370                  beq   L0F6D          No, go to sleep
0EE5 8D10             (    supercomm.asm):01371                  bsr   L0F78          Yes, go update timer on status bar
0EE7 4C               (    supercomm.asm):01372                  inca                 Bump # seconds up
0EE8 9779             (    supercomm.asm):01373                  sta   <u0074         Save # seconds
0EEA 20F5             (    supercomm.asm):01374                  bra   L0F60          Check if it is different than last recorded?
                      (    supercomm.asm):01375         
0EEC 3502             (    supercomm.asm):01376         L0F6D    puls  a              Restore # seconds
0EEE 103F0A           (    supercomm.asm):01377         L0F6F    os9   F$Sleep        Sleep for requested # ticks
0EF1 8C0000           (    supercomm.asm):01378                  cmpx  #$0000         Sleep for full requested period?
0EF4 26E3             (    supercomm.asm):01379                  bne   L0F56          No, go update timer functions & sleep some more
0EF6 39               (    supercomm.asm):01380                  rts                  Yes, return
                      (    supercomm.asm):01381         
0EF7 3436             (    supercomm.asm):01382         L0F78    pshs  y,x,d          Preserve regs
0EF9 8E007C           (    supercomm.asm):01383                  ldx   #u0077         Point to ASCII on-screen timer packet
0EFC C60A             (    supercomm.asm):01384                  ldb   #10            Point to end of packet (1's of seconds field)
0EFE 8D14             (    supercomm.asm):01385         L0F7F    bsr   L0F8C          Do 1 char at a time
0F00 4D               (    supercomm.asm):01386                  tsta                 Do we need the next field updated too?
0F01 2A06             (    supercomm.asm):01387                  bpl   L0FAC          No, go update it on screen & return
0F03 5A               (    supercomm.asm):01388                  decb                 Bump timer packet ptr down to previous field
0F04 5A               (    supercomm.asm):01389                  decb  
0F05 C104             (    supercomm.asm):01390                  cmpb  #$04           Hit beginning (finished hours)?
0F07 24F5             (    supercomm.asm):01391                  bhs   L0F7F          No, go update next field
0F09 9643             (    supercomm.asm):01392         L0FAC    lda   <u003E         Get path to status window
0F0B 108E000B         (    supercomm.asm):01393                  ldy   #$000B         Get size of time string
0F0F 103F8A           (    supercomm.asm):01394                  os9   I$Write        Write it out
0F12 35B6             (    supercomm.asm):01395                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):01396         
                      (    supercomm.asm):01397         * Update 1's field
0F14 A685             (    supercomm.asm):01398         L0F8C    lda   b,x            Get byte from timer
0F16 8139             (    supercomm.asm):01399                  cmpa  #'9            9?
0F18 2704             (    supercomm.asm):01400                  beq   L0F96          Yes, skip ahead
0F1A 4C               (    supercomm.asm):01401         L0F90    inca                 No, increment it to next one
0F1B A785             (    supercomm.asm):01402                  sta   b,x            Save result & return
0F1D 39               (    supercomm.asm):01403                  rts   
                      (    supercomm.asm):01404         
                      (    supercomm.asm):01405         * Update 10's field
0F1E 8630             (    supercomm.asm):01406         L0F96    lda   #'0            Wrap it back to a 0
0F20 A785             (    supercomm.asm):01407                  sta   b,x            Save 0
0F22 5A               (    supercomm.asm):01408                  decb                 Bump ptr to 10's field in ASCII time packet
0F23 A685             (    supercomm.asm):01409                  lda   b,x            Get char
0F25 8135             (    supercomm.asm):01410                  cmpa  #'5            5?
0F27 26F1             (    supercomm.asm):01411                  bne   L0F90          No, safe to increment & exit
0F29 8630             (    supercomm.asm):01412         L0FA5    lda   #'0            Wrap it back to 0
0F2B A785             (    supercomm.asm):01413                  sta   b,x            Save it
0F2D 86FF             (    supercomm.asm):01414                  lda   #$FF           Flag to say we need next field (minutes/hours)
0F2F 39               (    supercomm.asm):01415                  rts                    updated & return
                      (    supercomm.asm):01416         
0F30 3436             (    supercomm.asm):01417         L1062    pshs  y,x,d          Preserve regs
0F32 D60C             (    supercomm.asm):01418                  ldb   <u0C89         Get LSB of size of converted text buffer
0F34 109E71           (    supercomm.asm):01419                  ldy   <u006C         Get ptr to Zmodem start header
0F37 8E00E4           (    supercomm.asm):01420                  ldx   #u00DF         Get ptr to modem buffer
0F3A 5D               (    supercomm.asm):01421         L1070    tstb  
0F3B 272F             (    supercomm.asm):01422                  beq   L10A8
0F3D 0D70             (    supercomm.asm):01423                  tst   <u006B
0F3F 270C             (    supercomm.asm):01424                  beq   L1084
0F41 A684             (    supercomm.asm):01425                  lda   ,x
0F43 8130             (    supercomm.asm):01426                  cmpa  #$30
0F45 273B             (    supercomm.asm):01427                  beq   L10C1
0F47 8131             (    supercomm.asm):01428                  cmpa  #$31
0F49 273C             (    supercomm.asm):01429                  beq   L10C7
0F4B 200B             (    supercomm.asm):01430                  bra   L1090
                      (    supercomm.asm):01431         
0F4D A680             (    supercomm.asm):01432         L1084    lda   ,x+
0F4F 847F             (    supercomm.asm):01433                  anda  #$7F
0F51 5A               (    supercomm.asm):01434                  decb  
0F52 0F76             (    supercomm.asm):01435                  clr   <u0071
0F54 A1A4             (    supercomm.asm):01436         L108C    cmpa  ,y
0F56 2716             (    supercomm.asm):01437                  beq   L10AA
0F58 318DF3B3         (    supercomm.asm):01438         L1090    leay  >L031A,pc
0F5C 109F71           (    supercomm.asm):01439                  sty   <u006C
0F5F 0D76             (    supercomm.asm):01440                  tst   <u0071
0F61 2604             (    supercomm.asm):01441                  bne   L10A2
0F63 0C76             (    supercomm.asm):01442                  inc   <u0071
0F65 20ED             (    supercomm.asm):01443                  bra   L108C
                      (    supercomm.asm):01444         
0F67 0F76             (    supercomm.asm):01445         L10A2    clr   <u0071
0F69 5D               (    supercomm.asm):01446                  tstb  
0F6A 26E1             (    supercomm.asm):01447                  bne   L1084
0F6C 35B6             (    supercomm.asm):01448         L10A8    puls  pc,y,x,d
                      (    supercomm.asm):01449         
0F6E 3121             (    supercomm.asm):01450         L10AA    leay  1,y
0F70 109F71           (    supercomm.asm):01451                  sty   <u006C
0F73 6DA4             (    supercomm.asm):01452                  tst   ,y
0F75 26F0             (    supercomm.asm):01453                  bne   L10A2
0F77 0C70             (    supercomm.asm):01454                  inc   <u006B
0F79 318DF392         (    supercomm.asm):01455                  leay  >L031A,pc
0F7D 109F71           (    supercomm.asm):01456                  sty   <u006C
0F80 20B8             (    supercomm.asm):01457                  bra   L1070
                      (    supercomm.asm):01458         
0F82 7C0CA2           (    supercomm.asm):01459         L10C1    inc   >u0CA0
0F85 2003             (    supercomm.asm):01460                  bra   L10CB
                      (    supercomm.asm):01461         
0F87 7F0CA2           (    supercomm.asm):01462         L10C7    clr   >u0CA0
0F8A 86FF             (    supercomm.asm):01463         L10CB    lda   #$FF
0F8C 9770             (    supercomm.asm):01464                  sta   <u006B
0F8E 20DC             (    supercomm.asm):01465                  bra   L10A8
                      (    supercomm.asm):01466         
0F90 E601             (    supercomm.asm):01467         L10D2    ldb   1,x
0F92 3002             (    supercomm.asm):01468                  leax  2,x
0F94 A680             (    supercomm.asm):01469         L10D6    lda   ,x+
0F96 A7A0             (    supercomm.asm):01470                  sta   ,y+
0F98 0C0C             (    supercomm.asm):01471                  inc   <u0C89
0F9A 5A               (    supercomm.asm):01472                  decb  
0F9B 26F7             (    supercomm.asm):01473                  bne   L10D6
0F9D 39               (    supercomm.asm):01474                  rts   
                      (    supercomm.asm):01475         
0F9E 3416             (    supercomm.asm):01476         L10E2    pshs  x,d
0FA0 8E0C65           (    supercomm.asm):01477                  ldx   #u0C60
0FA3 A684             (    supercomm.asm):01478                  lda   ,x
0FA5 8102             (    supercomm.asm):01479                  cmpa  #$02
0FA7 2709             (    supercomm.asm):01480                  beq   L10F7
0FA9 308DF497         (    supercomm.asm):01481                  leax  >L0464,pc
0FAD 8DE1             (    supercomm.asm):01482                  bsr   L10D2
0FAF 16FE86           (    supercomm.asm):01483         L10F4    lbra  L0EA6
                      (    supercomm.asm):01484         
0FB2 308DF488         (    supercomm.asm):01485         L10F7    leax  >L045E,pc
0FB6 8DD8             (    supercomm.asm):01486                  bsr   L10D2
0FB8 1702B2           (    supercomm.asm):01487                  lbsr  L1422
0FBB 20F2             (    supercomm.asm):01488                  bra   L10F4
                      (    supercomm.asm):01489         
0FBD 3416             (    supercomm.asm):01490         L1102    pshs  x,d
0FBF 308DF47E         (    supercomm.asm):01491                  leax  >L0461,pc
0FC3 8DCB             (    supercomm.asm):01492                  bsr   L10D2
0FC5 16FE70           (    supercomm.asm):01493                  lbra  L0EA6
                      (    supercomm.asm):01494         
                      (    supercomm.asm):01495         * Print help screen
                      (    supercomm.asm):01496         * Entry: None
0FC8 CC1A01           (    supercomm.asm):01497         L110D    ldd   #$1A01       get overlay start co-ordinates
0FCB FD0C91           (    supercomm.asm):01498                  std   >u0C8F
0FCE CC340D           (    supercomm.asm):01499                  ldd   #$340D       get overlay size
0FD1 FD0C93           (    supercomm.asm):01500                  std   >u0C91
0FD4 170A0D           (    supercomm.asm):01501                  lbsr  L1C81        place overlay
0FD7 308DF12E         (    supercomm.asm):01502                  leax  L0109,pc     point to help screen text
0FDB 1708AE           (    supercomm.asm):01503                  lbsr  L1B03        print it
0FDE 308DF48F         (    supercomm.asm):01504                  leax  L048F,pc     turn off cursor
0FE2 1708A7           (    supercomm.asm):01505                  lbsr  L1B03
0FE5 1716EE           (    supercomm.asm):01506         L112C    lbsr  L2AC5        wait for a keypress
0FE8 8120             (    supercomm.asm):01507                  cmpa  #$20         was it space?
0FEA 2738             (    supercomm.asm):01508                  beq   L116B        yes, clean up & return
0FEC 8105             (    supercomm.asm):01509                  cmpa  #$05
0FEE 2734             (    supercomm.asm):01510                  beq   L116B        yes, clean up & return
0FF0 810C             (    supercomm.asm):01511                  cmpa  #$0C
0FF2 2604             (    supercomm.asm):01512                  bne   L113F
0FF4 8B80             (    supercomm.asm):01513         L113B    adda  #$80
0FF6 2017             (    supercomm.asm):01514                  bra   L1156
                      (    supercomm.asm):01515         
0FF8 810A             (    supercomm.asm):01516         L113F    cmpa  #$0A
0FFA 27F8             (    supercomm.asm):01517                  beq   L113B
0FFC E68DF9B4         (    supercomm.asm):01518                  ldb   L0A15,pc     get # commands possible
1000 308DF9B1         (    supercomm.asm):01519                  leax  L0A16,pc     point to command table
1004 A180             (    supercomm.asm):01520         L114B    cmpa  ,x+          find it?
1006 2705             (    supercomm.asm):01521                  beq   L1154        yes, go parse it
1008 5A               (    supercomm.asm):01522                  decb               done?
1009 26F9             (    supercomm.asm):01523                  bne   L114B        no, keep looking
100B 20D8             (    supercomm.asm):01524                  bra   L112C        not legal, go wait for new keypress
                      (    supercomm.asm):01525         
100D 8BA0             (    supercomm.asm):01526         L1154    adda  #$A0
100F 3402             (    supercomm.asm):01527         L1156    pshs  a
1011 308DF39B         (    supercomm.asm):01528                  leax  L03C4,pc     get rid of overlay
1015 170874           (    supercomm.asm):01529                  lbsr  L1B03
1018 308DF451         (    supercomm.asm):01530                  leax  L048B,pc     turn cursor on
101C 17086D           (    supercomm.asm):01531                  lbsr  L1B03
101F 3502             (    supercomm.asm):01532                  puls  a            restore command
1021 160373           (    supercomm.asm):01533                  lbra  L1597        go parse command
                      (    supercomm.asm):01534         
1024 308DF388         (    supercomm.asm):01535         L116B    leax  L03C4,pc     get rid of overlays
1028 170861           (    supercomm.asm):01536                  lbsr  L1B03
102B 1708FA           (    supercomm.asm):01537                  lbsr  L1BAD        purge all remaining keyboard data
102E 308DF43B         (    supercomm.asm):01538                  leax  L048B,pc     turn cursor on
1032 170857           (    supercomm.asm):01539                  lbsr  L1B03
1035 16FBA6           (    supercomm.asm):01540                  lbra  L0C5E        return to main loop
                      (    supercomm.asm):01541         
                      (    supercomm.asm):01542         * Get modem path options
1038 3416             (    supercomm.asm):01543         L117F    pshs  x,d            Preserve regs used
103A 9630             (    supercomm.asm):01544                  lda   <u002B         Get path # to modem
103C 5F               (    supercomm.asm):01545                  clrb                 SS.Opt call
103D 8E0C33           (    supercomm.asm):01546                  ldx   #u0C2E         Point to buffer to hold Option section
1040 103F8D           (    supercomm.asm):01547                  os9   I$GetStt       Get modem path options
1043 3596             (    supercomm.asm):01548                  puls  pc,x,d         Restore regs & return
                      (    supercomm.asm):01549         
                      (    supercomm.asm):01550         * Update status line (baud, word length, etc...)
                      (    supercomm.asm):01551         * Entry: None
1045 3436             (    supercomm.asm):01552         L118F    pshs  d,x,y
1047 8E0C33           (    supercomm.asm):01553                  ldx   #u0C2E         point to
104A F60CA7           (    supercomm.asm):01554                  ldb   >u0CA5         get baud
104D E78815           (    supercomm.asm):01555                  stb   PD.BAU-PD.OPT,x
1050 E68814           (    supercomm.asm):01556                  ldb   PD.PAR-PD.OPT,x
1053 C40F             (    supercomm.asm):01557                  andb  #$0F
1055 FA0CAE           (    supercomm.asm):01558                  orb   >u0CAC
1058 E78814           (    supercomm.asm):01559                  stb   PD.PAR-PD.OPT,x
105B F60CB1           (    supercomm.asm):01560                  ldb   >u0CAF
105E E78818           (    supercomm.asm):01561                  stb   PD.XON-PD.OPT,x
1061 F60CB2           (    supercomm.asm):01562                  ldb   >u0CB0
1064 E78819           (    supercomm.asm):01563                  stb   PD.XOFF-PD.OPT,x
1067 F60CB3           (    supercomm.asm):01564                  ldb   >u0CB1
106A E704             (    supercomm.asm):01565                  stb   PD.EKO-PD.OPT,x
106C F60CAB           (    supercomm.asm):01566                  ldb   >u0CA9
106F E705             (    supercomm.asm):01567                  stb   PD.ALF-PD.OPT,x
1071 6F07             (    supercomm.asm):01568                  clr   PD.PAU-PD.OPT,x
1073 3009             (    supercomm.asm):01569                  leax  PD.BSP-PD.OPT,x
1075 CC000A           (    supercomm.asm):01570                  ldd   #$000a       Clear 10 bytes from BSP to BSE
1078 A780             (    supercomm.asm):01571         L11C8    sta   ,x+
107A 5A               (    supercomm.asm):01572                  decb  
107B 26FB             (    supercomm.asm):01573                  bne   L11C8
107D 9630             (    supercomm.asm):01574                  lda   <u002B       get path to modem
107F 8103             (    supercomm.asm):01575                  cmpa  #$03         is it legal?
1081 102300CE         (    supercomm.asm):01576                  lbls  L12B3        no, return
1085 8E0C33           (    supercomm.asm):01577                  ldx   #u0C2E       point to option buffer
1088 C600             (    supercomm.asm):01578                  ldb   #SS.Opt      set 'em
108A 103F8E           (    supercomm.asm):01579                  os9   I$SetStt 
108D 8E009A           (    supercomm.asm):01580                  ldx   #u0095       point to
1090 CC025A           (    supercomm.asm):01581                  ldd   #$025A       get CurXY codes
1093 ED84             (    supercomm.asm):01582                  std   ,x           save 'em
1095 C620             (    supercomm.asm):01583                  ldb   #$20         get Y co-ordinate
1097 E702             (    supercomm.asm):01584                  stb   2,x          save it
1099 108E0003         (    supercomm.asm):01585                  ldy   #3           get length
109D 9643             (    supercomm.asm):01586                  lda   <u003E       get path to status window
109F 103F8A           (    supercomm.asm):01587                  os9   I$Write      position cursor for baud rate text
10A2 B60CA7           (    supercomm.asm):01588                  lda   >u0CA5       get baud rate
10A5 8407             (    supercomm.asm):01589                  anda  #$07         keep only baud bits
10A7 C605             (    supercomm.asm):01590                  ldb   #5           get length of baud text entrys
10A9 3D               (    supercomm.asm):01591                  mul                calculate offset
10AA 308D09F7         (    supercomm.asm):01592                  leax  L0652,pc     point to baud rate text table
10AE 3085             (    supercomm.asm):01593                  leax  b,x          point to baud rate
10B0 108E0005         (    supercomm.asm):01594                  ldy   #5           get length
10B4 9643             (    supercomm.asm):01595                  lda   <u003E       get path to status line
10B6 103F8A           (    supercomm.asm):01596                  os9   I$Write      print current baud
10B9 C661             (    supercomm.asm):01597                  ldb   #$61         move X cursor position for word length
10BB 8E009A           (    supercomm.asm):01598                  ldx   #u0095
10BE E701             (    supercomm.asm):01599                  stb   1,x
10C0 9643             (    supercomm.asm):01600                  lda   <u003E
10C2 108E0003         (    supercomm.asm):01601                  ldy   #$0003
10C6 103F8A           (    supercomm.asm):01602                  os9   I$Write  
10C9 F60CA7           (    supercomm.asm):01603                  ldb   >u0CA5
10CC C520             (    supercomm.asm):01604                  bitb  #$20
10CE 2604             (    supercomm.asm):01605                  bne   L122D
10D0 C638             (    supercomm.asm):01606                  ldb   #'8
10D2 2002             (    supercomm.asm):01607                  bra   L122F
                      (    supercomm.asm):01608         
10D4 C637             (    supercomm.asm):01609         L122D    ldb   #'7
10D6 8E0049           (    supercomm.asm):01610         L122F    ldx   #u0044
10D9 E784             (    supercomm.asm):01611                  stb   ,x
10DB 108E0001         (    supercomm.asm):01612                  ldy   #1
10DF 103F8A           (    supercomm.asm):01613                  os9   I$Write  
10E2 C663             (    supercomm.asm):01614                  ldb   #$63
10E4 8E009A           (    supercomm.asm):01615                  ldx   #u0095
10E7 E701             (    supercomm.asm):01616                  stb   1,x
10E9 108E0003         (    supercomm.asm):01617                  ldy   #3
10ED 9643             (    supercomm.asm):01618                  lda   <u003E
10EF 103F8A           (    supercomm.asm):01619                  os9   I$Write  
10F2 B60CAE           (    supercomm.asm):01620                  lda   >u0CAC
10F5 84E0             (    supercomm.asm):01621                  anda  #$E0
10F7 81A0             (    supercomm.asm):01622                  cmpa  #$A0
10F9 2606             (    supercomm.asm):01623                  bne   L125D
10FB 308DF831         (    supercomm.asm):01624                  leax  L0991,pc     point to 'Mark'
10FF 2022             (    supercomm.asm):01625                  bra   L127F        go print it
                      (    supercomm.asm):01626         
1101 81E0             (    supercomm.asm):01627         L125D    cmpa  #$E0
1103 2606             (    supercomm.asm):01628                  bne   L1267
1105 308DF82B         (    supercomm.asm):01629                  leax  L0995,pc     point to 'Space'
1109 2018             (    supercomm.asm):01630                  bra   L127F        go print it
                      (    supercomm.asm):01631         
110B 8160             (    supercomm.asm):01632         L1267    cmpa  #$60
110D 2606             (    supercomm.asm):01633                  bne   L1271
110F 308DF827         (    supercomm.asm):01634                  leax  L099B,pc     point to 'Even'
1113 200E             (    supercomm.asm):01635                  bra   L127F        go print it
1115 8120             (    supercomm.asm):01636         L1271    cmpa  #$20
1117 2606             (    supercomm.asm):01637                  bne   L127B
1119 308DF822         (    supercomm.asm):01638                  leax  L09A0,pc     point to 'Odd'
111D 2004             (    supercomm.asm):01639                  bra   L127F        go print it
                      (    supercomm.asm):01640         
111F 308DF821         (    supercomm.asm):01641         L127B    leax  L09A5,pc     point to 'None'
1123 9643             (    supercomm.asm):01642         L127F    lda   <u003E       get path to status line
1125 108E0001         (    supercomm.asm):01643                  ldy   #1
1129 103F8A           (    supercomm.asm):01644                  os9   I$Write  
112C C665             (    supercomm.asm):01645                  ldb   #$65
112E 8E009A           (    supercomm.asm):01646                  ldx   #u0095
1131 E701             (    supercomm.asm):01647                  stb   1,x
1133 9643             (    supercomm.asm):01648                  lda   <u003E
1135 108E0003         (    supercomm.asm):01649                  ldy   #3
1139 103F8A           (    supercomm.asm):01650                  os9   I$Write  
113C F60CA7           (    supercomm.asm):01651                  ldb   >u0CA5
113F 2A04             (    supercomm.asm):01652                  bpl   L12A5
1141 C632             (    supercomm.asm):01653                  ldb   #'2
1143 2002             (    supercomm.asm):01654                  bra   L12A7
                      (    supercomm.asm):01655         
1145 C631             (    supercomm.asm):01656         L12A5    ldb   #'1
1147 8E0049           (    supercomm.asm):01657         L12A7    ldx   #u0044
114A E784             (    supercomm.asm):01658                  stb   ,x
114C 108E0001         (    supercomm.asm):01659                  ldy   #1
1150 103F8A           (    supercomm.asm):01660                  os9   I$Write  
1153 35B6             (    supercomm.asm):01661         L12B3    puls  d,x,y,pc
                      (    supercomm.asm):01662         
                      (    supercomm.asm):01663         * Setup path options for local keyboard to communicate with modems
                      (    supercomm.asm):01664         * Entry: None
1155 3436             (    supercomm.asm):01665         L12B5    pshs  d,x,y
1157 8E13AB           (    supercomm.asm):01666                  ldx   #u13A9       point to a buffer
115A 108E0C11         (    supercomm.asm):01667                  ldy   #u0C0C       point to original path options
115E C620             (    supercomm.asm):01668                  ldb   #$20         get size
1160 171789           (    supercomm.asm):01669                  lbsr  L2D26        move it
1163 8E13AB           (    supercomm.asm):01670                  ldx   #u13A9       point to the buffer
1166 6F04             (    supercomm.asm):01671                  clr   PD.EKO-PD.OPT,x turn off echo
1168 B60CAA           (    supercomm.asm):01672                  lda   >u0CA8
116B A705             (    supercomm.asm):01673                  sta   PD.ALF-PD.OPT,x save linefeed stat
116D 6F07             (    supercomm.asm):01674                  clr   PD.PAU-PD.OPT,x turn off pause
116F B613A5           (    supercomm.asm):01675                  lda   >u13A3
1172 A70C             (    supercomm.asm):01676                  sta   PD.EOF-PD.OPT,x save EOF char
1174 B613A8           (    supercomm.asm):01677                  lda   >u13A6
1177 A70F             (    supercomm.asm):01678                  sta   PD.PSC-PD.OPT,x save pause char
1179 B613A6           (    supercomm.asm):01679                  lda   >u13A4
117C A78810           (    supercomm.asm):01680                  sta   PD.INT-PD.OPT,x save interupt char
117F B613A7           (    supercomm.asm):01681                  lda   >u13A5
1182 A78811           (    supercomm.asm):01682                  sta   PD.QUT-PD.OPT,x save quit char
1185 CC0100           (    supercomm.asm):01683                  ldd   #1*256+SS.Opt   Set the options
1188 103F8E           (    supercomm.asm):01684                  os9   I$SetStt 
118B 35B6             (    supercomm.asm):01685                  puls  d,x,y,pc
                      (    supercomm.asm):01686         
                      (    supercomm.asm):01687         * Get current window settings
                      (    supercomm.asm):01688         *
                      (    supercomm.asm):01689         * Entry: None
118D 3416             (    supercomm.asm):01690         L12F5    pshs  d,x          Preserve regs
118F CC0000           (    supercomm.asm):01691                  ldd   #SS.Opt      Get option section path dsc. for Std In
1192 8E0C11           (    supercomm.asm):01692                  ldx   #u0C0C       Buffer to hold option packet
1195 103F8D           (    supercomm.asm):01693                  os9   I$GetStt     Get current option settings
1198 A68814           (    supercomm.asm):01694                  lda   PD.PAR-PD.OPT,x Get current parity (window type)
119B 2A2E             (    supercomm.asm):01695                  bpl   L1348        If not a window, exit with error
119D CC0196           (    supercomm.asm):01696                  ldd   #1*256+SS.FBRgs  Get fore/background/border regs from Std Out
11A0 103F8D           (    supercomm.asm):01697                  os9   I$GetStt 
11A3 DD92             (    supercomm.asm):01698                  std   <u008D       Save fore/background colors
11A5 1F10             (    supercomm.asm):01699                  tfr   x,d          Move border to splittable register
11A7 D794             (    supercomm.asm):01700                  stb   <u008F       Save border color
11A9 8E0C55           (    supercomm.asm):01701                  ldx   #u0C50
11AC CC0191           (    supercomm.asm):01702                  ldd   #1*256+SS.Palet  Get current palette settings from Std Out
11AF 103F8D           (    supercomm.asm):01703                  os9   I$GetStt     Get current palette settings
11B2 CC0126           (    supercomm.asm):01704                  ldd   #1*256+SS.ScSiz  Get screen size from Std Out
11B5 103F8D           (    supercomm.asm):01705                  os9   I$GetStt     Get current screen size
11B8 1F10             (    supercomm.asm):01706                  tfr   x,d          Move width to splittable register
11BA D787             (    supercomm.asm):01707                  stb   <u0082       Save screen width
11BC 1F20             (    supercomm.asm):01708                  tfr   y,d          Move height to splittable register
11BE D788             (    supercomm.asm):01709                  stb   <u0083       Save screen height
11C0 CC0193           (    supercomm.asm):01710                  ldd   #1*256+SS.ScTyp  Get screen type from Std Out
11C3 103F8D           (    supercomm.asm):01711                  os9   I$GetStt 
11C6 9789             (    supercomm.asm):01712                  sta   <u0084       Save it
11C8 5F               (    supercomm.asm):01713                  clrb               No error & exit
11C9 3596             (    supercomm.asm):01714         L1346    puls  pc,x,d
                      (    supercomm.asm):01715         
11CB 53               (    supercomm.asm):01716         L1348    comb               Exit with Illegal Window Type error
11CC C6B7             (    supercomm.asm):01717                  ldb   #$B7
11CE 20F9             (    supercomm.asm):01718                  bra   L1346
                      (    supercomm.asm):01719         
                      (    supercomm.asm):01720         * Set local path options
                      (    supercomm.asm):01721         *
                      (    supercomm.asm):01722         * Entry: None
11D0 3416             (    supercomm.asm):01723         L134D    pshs  d,x          Preserve regs
11D2 CC0000           (    supercomm.asm):01724                  ldd   #SS.Opt      Set option section from Std In path
11D5 8E0C11           (    supercomm.asm):01725                  ldx   #u0C0C       Point to buffer holding new settings
11D8 103F8E           (    supercomm.asm):01726                  os9   I$SetStt     Set them
11DB 3596             (    supercomm.asm):01727                  puls  d,x,pc       Restore regs & return
                      (    supercomm.asm):01728         
11DD 3436             (    supercomm.asm):01729         L135C    pshs  y,x,d
11DF 318DF266         (    supercomm.asm):01730                  leay  >L0469,pc    Point to main window DWEnd/DWSet
11E3 C610             (    supercomm.asm):01731                  ldb   #16          Copy 16 bytes (?)
11E5 8E13AB           (    supercomm.asm):01732                  ldx   #u13A9
11E8 171701           (    supercomm.asm):01733                  lbsr  L2D26
11EB 8E13AB           (    supercomm.asm):01734                  ldx   #u13A9
11EE 9689             (    supercomm.asm):01735                  lda   <u0084
11F0 A704             (    supercomm.asm):01736                  sta   4,x
11F2 4F               (    supercomm.asm):01737                  clra  
11F3 A706             (    supercomm.asm):01738                  sta   6,x
11F5 DC87             (    supercomm.asm):01739                  ldd   <u0082
11F7 ED07             (    supercomm.asm):01740                  std   7,x
11F9 DC92             (    supercomm.asm):01741                  ldd   <u008D
11FB ED09             (    supercomm.asm):01742                  std   9,x
11FD 9694             (    supercomm.asm):01743                  lda   <u008F
11FF A70B             (    supercomm.asm):01744                  sta   11,x
1201 108E000C         (    supercomm.asm):01745                  ldy   #12          # bytes to write
1205 8601             (    supercomm.asm):01746                  lda   #$01         Write it out
1207 103F8A           (    supercomm.asm):01747                  os9   I$Write  
120A 8E0C55           (    supercomm.asm):01748                  ldx   #u0C50
120D CC0191           (    supercomm.asm):01749                  ldd   #1*256+SS.Palet  Set palettes back to normal
1210 103F8E           (    supercomm.asm):01750                  os9   I$SetStt 
1213 CC1B21           (    supercomm.asm):01751                  ldd   #$1B21
1216 ED84             (    supercomm.asm):01752                  std   ,x
1218 8601             (    supercomm.asm):01753                  lda   #$01
121A 108E0002         (    supercomm.asm):01754                  ldy   #$0002
121E 103F8A           (    supercomm.asm):01755                  os9   I$Write  
1221 35B6             (    supercomm.asm):01756                  puls  pc,y,x,d
                      (    supercomm.asm):01757         
1223 308DF16C         (    supercomm.asm):01758         L13BA    leax  >L03A7,pc    Inverse,Underline,Blink OFF/CLS
1227 160662           (    supercomm.asm):01759                  lbra  L1B03        Will RTS from there
                      (    supercomm.asm):01760         
                      (    supercomm.asm):01761         * Add 1 to current cursor position (next line if needed)
122A 3406             (    supercomm.asm):01762         L13CF    pshs  d
122C FC0C96           (    supercomm.asm):01763                  ldd   >u0C94       get current position
122F 4C               (    supercomm.asm):01764                  inca               add 1 to X
1230 9195             (    supercomm.asm):01765                  cmpa  <u0090       past max?
1232 2308             (    supercomm.asm):01766                  bls   L13E6        no, save & return
1234 8601             (    supercomm.asm):01767                  lda   #1           reset it
1236 5C               (    supercomm.asm):01768                  incb               add 1 to Y
1237 D196             (    supercomm.asm):01769                  cmpb  <u0091       past max?
1239 2301             (    supercomm.asm):01770                  bls   L13E6        no, save & return
123B 5A               (    supercomm.asm):01771                  decb               bump it back
123C FD0C96           (    supercomm.asm):01772         L13E6    std   >u0C94       save new position
123F 3586             (    supercomm.asm):01773                  puls  d,pc         restore & return
                      (    supercomm.asm):01774         
                      (    supercomm.asm):01775         * Subtract 1 from current cursor position
1241 3406             (    supercomm.asm):01776         L13EC    pshs  d
1243 FC0C96           (    supercomm.asm):01777                  ldd   >u0C94       get current cursor position
1246 4A               (    supercomm.asm):01778                  deca               subtract 1 from X
1247 2608             (    supercomm.asm):01779                  bne   L13FF        minimum?
1249 9695             (    supercomm.asm):01780                  lda   <u0090       yes, reset to end (will be on previous line)
124B 5A               (    supercomm.asm):01781                  decb               take 1 off Y
124C 2603             (    supercomm.asm):01782                  bne   L13FF        minimum?
124E CC0101           (    supercomm.asm):01783                  ldd   #$0101       yes, reset
1251 FD0C96           (    supercomm.asm):01784         L13FF    std   >u0C94       save new position
1254 3586             (    supercomm.asm):01785                  puls  d,pc         restore & return
                      (    supercomm.asm):01786         
1256 7F0C96           (    supercomm.asm):01787         L1405    clr   >u0C94       reset X position
1259 7C0C96           (    supercomm.asm):01788                  inc   >u0C94       add 1
125C 39               (    supercomm.asm):01789                  rts   
                      (    supercomm.asm):01790         
                      (    supercomm.asm):01791         * Bump Y coord to next line down
125D 3402             (    supercomm.asm):01792         L140E    pshs  a            Preserve reg we use
125F B60C97           (    supercomm.asm):01793                  lda   >u0C95       Get current Y coord
1262 4C               (    supercomm.asm):01794                  inca               Bump up
1263 9196             (    supercomm.asm):01795                  cmpa  <u0091       We past biggest Y coord allowable?
1265 2301             (    supercomm.asm):01796                  bls   L141C        No, save new one
1267 4A               (    supercomm.asm):01797                  deca               Yes, bump it back a line
1268 B70C97           (    supercomm.asm):01798         L141C    sta   >u0C95       Save new Y coord
126B 3582             (    supercomm.asm):01799                  puls  pc,a         Restore & return
                      (    supercomm.asm):01800         
126D 3406             (    supercomm.asm):01801         L1422    pshs  d            Preserve regs
126F CC0101           (    supercomm.asm):01802                  ldd   #$0101       Upper left corner of screen
1272 FD0C96           (    supercomm.asm):01803                  std   >u0C94       Save coords
1275 3586             (    supercomm.asm):01804                  puls  pc,d         Restore D & return   
                      (    supercomm.asm):01805         
1277 3406             (    supercomm.asm):01806         L1433    pshs  d
1279 FC0C96           (    supercomm.asm):01807                  ldd   >u0C94
127C FD0C98           (    supercomm.asm):01808                  std   >u0C96
127F 3506             (    supercomm.asm):01809                  puls  d
1281 16FA5F           (    supercomm.asm):01810                  lbra  L0D0F
                      (    supercomm.asm):01811         
1284 3406             (    supercomm.asm):01812         L1442    pshs  d
1286 8602             (    supercomm.asm):01813                  lda   #$02
1288 A7A0             (    supercomm.asm):01814                  sta   ,y+
128A FC0C98           (    supercomm.asm):01815                  ldd   >u0C96
128D FD0C96           (    supercomm.asm):01816                  std   >u0C94
1290 8B1F             (    supercomm.asm):01817                  adda  #$1F         Bump X&Y coords to base $20
1292 CB1F             (    supercomm.asm):01818                  addb  #$1F
1294 EDA1             (    supercomm.asm):01819                  std   ,y++
1296 D60C             (    supercomm.asm):01820                  ldb   <u0C89
1298 CB03             (    supercomm.asm):01821                  addb  #$03
129A D70C             (    supercomm.asm):01822                  stb   <u0C89
129C 3506             (    supercomm.asm):01823                  puls  d
129E 16FA42           (    supercomm.asm):01824                  lbra  L0D0F
                      (    supercomm.asm):01825         
12A1 3416             (    supercomm.asm):01826         L1467    pshs  x,d
12A3 8E0C65           (    supercomm.asm):01827                  ldx   #u0C60
12A6 8602             (    supercomm.asm):01828                  lda   #$02
12A8 A7A0             (    supercomm.asm):01829                  sta   ,y+
12AA A601             (    supercomm.asm):01830                  lda   1,x
12AC 270C             (    supercomm.asm):01831                  beq   L1483
12AE 81FE             (    supercomm.asm):01832                  cmpa  #$FE
12B0 2604             (    supercomm.asm):01833                  bne   L147D
12B2 A602             (    supercomm.asm):01834                  lda   2,x
12B4 2704             (    supercomm.asm):01835                  beq   L1483
12B6 9195             (    supercomm.asm):01836         L147D    cmpa  <u0090
12B8 2302             (    supercomm.asm):01837                  bls   L1485
12BA 8601             (    supercomm.asm):01838         L1483    lda   #$01
12BC B70C96           (    supercomm.asm):01839         L1485    sta   >u0C94
12BF 8B1F             (    supercomm.asm):01840                  adda  #$1F
12C1 A7A0             (    supercomm.asm):01841                  sta   ,y+
12C3 A684             (    supercomm.asm):01842                  lda   ,x
12C5 2704             (    supercomm.asm):01843                  beq   L1497
12C7 9196             (    supercomm.asm):01844                  cmpa  <u0091
12C9 2302             (    supercomm.asm):01845                  bls   L1499
12CB 8601             (    supercomm.asm):01846         L1497    lda   #$01
12CD B70C97           (    supercomm.asm):01847         L1499    sta   >u0C95
12D0 8B1F             (    supercomm.asm):01848                  adda  #$1F
12D2 A7A0             (    supercomm.asm):01849                  sta   ,y+
12D4 D60C             (    supercomm.asm):01850                  ldb   <u0C89
12D6 CB03             (    supercomm.asm):01851                  addb  #$03
12D8 D70C             (    supercomm.asm):01852                  stb   <u0C89
12DA 3516             (    supercomm.asm):01853                  puls  x,d
12DC 16FA04           (    supercomm.asm):01854                  lbra  L0D0F
                      (    supercomm.asm):01855         
12DF 3416             (    supercomm.asm):01856         L14B0    pshs  x,d
12E1 8E0C65           (    supercomm.asm):01857                  ldx   #u0C60
12E4 A684             (    supercomm.asm):01858                  lda   ,x
12E6 9195             (    supercomm.asm):01859                  cmpa  <u0090
12E8 2403             (    supercomm.asm):01860                  bhs   L14C1
12EA 4D               (    supercomm.asm):01861                  tsta
12EB 2602             (    supercomm.asm):01862                  bne   L14C3
12ED 8601             (    supercomm.asm):01863         L14C1    lda   #$01
12EF BB0C96           (    supercomm.asm):01864         L14C3    adda  >u0C94
12F2 9195             (    supercomm.asm):01865                  cmpa  <u0090
12F4 2302             (    supercomm.asm):01866                  bls   L14D1
12F6 9695             (    supercomm.asm):01867                  lda   <u0090
12F8 B70C96           (    supercomm.asm):01868         L14D1    sta   >u0C94
12FB C602             (    supercomm.asm):01869         L14D5    ldb   #$02
12FD E7A0             (    supercomm.asm):01870                  stb   ,y+
12FF FC0C96           (    supercomm.asm):01871                  ldd   >u0C94
1302 8B1F             (    supercomm.asm):01872                  adda  #$1F           Bump up since base=$20 (both coords)
1304 CB1F             (    supercomm.asm):01873                  addb  #$1F
1306 EDA1             (    supercomm.asm):01874                  std   ,y++           Save new coords
1308 D60C             (    supercomm.asm):01875                  ldb   <u0C89
130A CB03             (    supercomm.asm):01876                  addb  #$03
130C D70C             (    supercomm.asm):01877                  stb   <u0C89
130E 3516             (    supercomm.asm):01878                  puls  x,d
1310 16F9D0           (    supercomm.asm):01879                  lbra  L0D0F
                      (    supercomm.asm):01880         
1313 3416             (    supercomm.asm):01881         L14F4    pshs  x,d
1315 8E0C65           (    supercomm.asm):01882                  ldx   #u0C60
1318 A684             (    supercomm.asm):01883                  lda   ,x
131A 9195             (    supercomm.asm):01884                  cmpa  <u0090
131C 2403             (    supercomm.asm):01885                  bhs   L1505
131E 4D               (    supercomm.asm):01886                  tsta  
131F 2602             (    supercomm.asm):01887                  bne   L1507
1321 8601             (    supercomm.asm):01888         L1505    lda   #$01
1323 B70C88           (    supercomm.asm):01889         L1507    sta   >u0C84
1326 B60C96           (    supercomm.asm):01890                  lda   >u0C94
1329 B00C88           (    supercomm.asm):01891                  suba  >u0C84
132C 2E02             (    supercomm.asm):01892                  bgt   L1517
132E 8601             (    supercomm.asm):01893                  lda   #$01
1330 B70C96           (    supercomm.asm):01894         L1517    sta   >u0C94
1333 20C6             (    supercomm.asm):01895                  bra   L14D5
                      (    supercomm.asm):01896         
1335 3416             (    supercomm.asm):01897         L151D    pshs  x,d
1337 8E0C65           (    supercomm.asm):01898                  ldx   #u0C60
133A A684             (    supercomm.asm):01899                  lda   ,x
133C 9196             (    supercomm.asm):01900                  cmpa  <u0091         Fit within Y size of main window?
133E 2403             (    supercomm.asm):01901                  bhs   L152E
1340 4D               (    supercomm.asm):01902                  tsta  
1341 2602             (    supercomm.asm):01903                  bne   L1530
1343 8601             (    supercomm.asm):01904         L152E    lda   #$01
1345 B70C88           (    supercomm.asm):01905         L1530    sta   >u0C84
1348 B60C97           (    supercomm.asm):01906                  lda   >u0C95
134B B00C88           (    supercomm.asm):01907                  suba  >u0C84
134E 2E02             (    supercomm.asm):01908                  bgt   L1540
1350 8601             (    supercomm.asm):01909                  lda   #$01
1352 B70C97           (    supercomm.asm):01910         L1540    sta   >u0C95
1355 20A4             (    supercomm.asm):01911                  bra   L14D5
                      (    supercomm.asm):01912         
1357 3416             (    supercomm.asm):01913         L1546    pshs  x,d
1359 8E0C65           (    supercomm.asm):01914                  ldx   #u0C60
135C A684             (    supercomm.asm):01915                  lda   ,x
135E 9196             (    supercomm.asm):01916                  cmpa  <u0091         Y coord past size of window?
1360 2403             (    supercomm.asm):01917                  bhs   L1557          Yes, force it to 1
1362 4D               (    supercomm.asm):01918                  tsta                 Is it 0?
1363 2602             (    supercomm.asm):01919                  bne   L1559          No, legit, skip ahead
1365 8601             (    supercomm.asm):01920         L1557    lda   #$01           Force size to 1
1367 BB0C97           (    supercomm.asm):01921         L1559    adda  >u0C95
136A 9196             (    supercomm.asm):01922                  cmpa  <u0091
136C 2302             (    supercomm.asm):01923                  bls   L1567
136E 9696             (    supercomm.asm):01924                  lda   <u0091
1370 B70C97           (    supercomm.asm):01925         L1567    sta   >u0C95
1373 2086             (    supercomm.asm):01926                  bra   L14D5
                      (    supercomm.asm):01927         
1375 4F               (    supercomm.asm):01928         L156E    clra                 Std In
1376 108E0001         (    supercomm.asm):01929                  ldy   #$0001
137A 8E0613           (    supercomm.asm):01930                  ldx   #u060E
137D 103F89           (    supercomm.asm):01931                  os9   I$Read   
                      (    supercomm.asm):01932         * NOTE: SHOULD BE ABLE TO CHANGE SOME OF THE LDB <U0041/ANDB TO KEEP B
                      (    supercomm.asm):01933         * AND USE BITB INSTEAD
1380 CC0027           (    supercomm.asm):01934         L157B    ldd   #SS.KySns      Get key sense data from Std In
1383 103F8D           (    supercomm.asm):01935                  os9   I$GetStt 
1386 9746             (    supercomm.asm):01936                  sta   <u0041         save key sense data
1388 B60613           (    supercomm.asm):01937                  lda   >u060E
138B 7F0613           (    supercomm.asm):01938                  clr   >u060E
138E F60CA8           (    supercomm.asm):01939                  ldb   >u0CA6
1391 C102             (    supercomm.asm):01940                  cmpb  #2
1393 10270B81         (    supercomm.asm):01941                  lbeq  L21F0
                      (    supercomm.asm):01942         * Check special command keys
1397 811A             (    supercomm.asm):01943         L1597    cmpa  #$1A         download a file? (PgDn)
1399 2609             (    supercomm.asm):01944                  bne   L15A5        no, check upload
139B D646             (    supercomm.asm):01945                  ldb   <u0041       get key sense info
139D C410             (    supercomm.asm):01946                  andb  #DOWNBIT     is it down arrow?
139F 2703             (    supercomm.asm):01947                  beq   L15A5        no, skip ahead
13A1 161CD1           (    supercomm.asm):01948                  lbra  L3580        process download
                      (    supercomm.asm):01949         
13A4 811C             (    supercomm.asm):01950         L15A5    cmpa  #$1C         upload a file? (PgUp)
13A6 2609             (    supercomm.asm):01951                  bne   L15B3        no, check quit
13A8 D646             (    supercomm.asm):01952                  ldb   <u0041       get key sense info
13AA C408             (    supercomm.asm):01953                  andb  #UPBIT       is it up arrow?
13AC 2703             (    supercomm.asm):01954                  beq   L15B3        no, skip ahead
13AE 161D1B           (    supercomm.asm):01955                  lbra  L35DF        process upload
                      (    supercomm.asm):01956         
13B1 81F1             (    supercomm.asm):01957         L15B3    cmpa  #$F1         quit supercomm? (ALT-Q)
13B3 102704DE         (    supercomm.asm):01958                  lbeq  L1B0C        yes,
13B7 81E8             (    supercomm.asm):01959                  cmpa  #$E8         hangup modem? (ALT-H)
13B9 1027036F         (    supercomm.asm):01960                  lbeq  L1983        yes,
13BD 81AF             (    supercomm.asm):01961                  cmpa  #$AF         help? (ALT-?)
13BF 1027FC05         (    supercomm.asm):01962                  lbeq  L110D
13C3 81E1             (    supercomm.asm):01963                  cmpa  #$E1         autodial? (ALT-A)
13C5 102716A1         (    supercomm.asm):01964                  lbeq  L2EBF
13C9 81E2             (    supercomm.asm):01965                  cmpa  #$E2         baud rate change? (ALT-B)
13CB 2603             (    supercomm.asm):01966                  bne   L15D2
13CD 1706FD           (    supercomm.asm):01967                  lbsr  L1D2F
13D0 81E9             (    supercomm.asm):01968         L15D2    cmpa  #$E9         online timer toggle? (ALT-I)
13D2 2603             (    supercomm.asm):01969                  bne   L15D9
13D4 160168           (    supercomm.asm):01970                  lbra  L175C
                      (    supercomm.asm):01971         
13D7 81F4             (    supercomm.asm):01972         L15D9    cmpa  #$F4         change terminal type? (ALT-T)
13D9 2603             (    supercomm.asm):01973                  bne   L15E0
13DB 1707ED           (    supercomm.asm):01974                  lbsr  L1E50
13DE 81F5             (    supercomm.asm):01975         L15E0    cmpa  #$F5         update supercomm? (ALT-U)
13E0 2603             (    supercomm.asm):01976                  bne   L15E7
13E2 17164B           (    supercomm.asm):01977                  lbsr  L2E83
13E5 81E3             (    supercomm.asm):01978         L15E7    cmpa  #$E3         clear screen? (ALT-C)
13E7 2603             (    supercomm.asm):01979                  bne   L15EE
13E9 170860           (    supercomm.asm):01980                  lbsr  L1EDC
13EC 8185             (    supercomm.asm):01981         L15EE    cmpa  #$85         transmit break?
13EE 2603             (    supercomm.asm):01982                  bne   L15F5
13F0 170678           (    supercomm.asm):01983                  lbsr  L1D14
13F3 8118             (    supercomm.asm):01984         L15F5    cmpa  #$18         cntrl-X
13F5 2604             (    supercomm.asm):01985                  bne   L15FD        no,
13F7 867F             (    supercomm.asm):01986                  lda   #$7F         convert it to underscore (DELETE line on IBM's)
13F9 205A             (    supercomm.asm):01987                  bra   L1659
                      (    supercomm.asm):01988         
13FB 81F2             (    supercomm.asm):01989         L15FD    cmpa  #$F2         reset palettes?
13FD 102700BA         (    supercomm.asm):01990                  lbeq  L16CB
1401 81F3             (    supercomm.asm):01991                  cmpa  #$F3         shell access?
1403 102700C5         (    supercomm.asm):01992                  lbeq  L16DC
1407 818A             (    supercomm.asm):01993                  cmpa  #$8A         download #2? (ALT-DWN)
1409 10271C68         (    supercomm.asm):01994                  lbeq  L3580
140D 818C             (    supercomm.asm):01995                  cmpa  #$8C         upload #2? (ALT-UP)
140F 10271CB9         (    supercomm.asm):01996                  lbeq  L35DF
1413 81EF             (    supercomm.asm):01997                  cmpa  #$EF         change options? (ALT-O)
1415 2603             (    supercomm.asm):01998                  bne   L161C
1417 17086D           (    supercomm.asm):01999                  lbsr  L1F1D
141A 81ED             (    supercomm.asm):02000         L161C    cmpa  #$ED         open/close buffer? (ALT-M)
141C 2603             (    supercomm.asm):02001                  bne   L1623
141E 170C37           (    supercomm.asm):02002                  lbsr  L2364
1421 81E4             (    supercomm.asm):02003         L1623    cmpa  #$E4         change directory? (ALT-D)
1423 2603             (    supercomm.asm):02004                  bne   L162A
1425 170B89           (    supercomm.asm):02005                  lbsr  L22B1
1428 81FA             (    supercomm.asm):02006         L162A    cmpa  #$FA         conference mode? (ALT-Z)
142A 2603             (    supercomm.asm):02007                  bne   L1631
142C 170E93           (    supercomm.asm):02008                  lbsr  L2610
142F D646             (    supercomm.asm):02009         L1631    ldb   <u0041       get key sense data
1431 C404             (    supercomm.asm):02010                  andb  #ALTERBIT    is the ALT key down?
1433 270E             (    supercomm.asm):02011                  beq   L1646        no, skip ahead
1435 81B1             (    supercomm.asm):02012                  cmpa  #$B1
1437 251C             (    supercomm.asm):02013                  blo   L1659
1439 81B8             (    supercomm.asm):02014                  cmpa  #$B8
143B 2218             (    supercomm.asm):02015                  bhi   L1659
143D 17037F           (    supercomm.asm):02016                  lbsr  L1A21
1440 16F79B           (    supercomm.asm):02017                  lbra  L0C5E
                      (    supercomm.asm):02018         
1443 81B1             (    supercomm.asm):02019         L1646    cmpa  #$B1         is it F1?
1445 1027FB7F         (    supercomm.asm):02020                  lbeq  L110D        yes, print help screen
1449 8118             (    supercomm.asm):02021                  cmpa  #$18
144B 2608             (    supercomm.asm):02022                  bne   L1659
144D D646             (    supercomm.asm):02023                  ldb   <u0041
144F C420             (    supercomm.asm):02024                  andb  #LEFTBIT
1451 2702             (    supercomm.asm):02025                  beq   L1659
1453 867F             (    supercomm.asm):02026                  lda   #$7F         convert it to underscore (DELETE line on IBM's)
1455 81AF             (    supercomm.asm):02027         L1659    cmpa  #$AF
1457 225F             (    supercomm.asm):02028                  bhi   L16C8
1459 B704F4           (    supercomm.asm):02029                  sta   >u04EF
145C 7D0CAC           (    supercomm.asm):02030                  tst   >u0CAA       key click on?
145F 270D             (    supercomm.asm):02031                  beq   L1675        no, skip ahead
1461 CC0198           (    supercomm.asm):02032                  ldd   #1*256+SS.Tone  Tone to Std Out
1464 8E2801           (    supercomm.asm):02033                  ldx   #$2801
1467 108E0900         (    supercomm.asm):02034                  ldy   #$0900
146B 103F8E           (    supercomm.asm):02035                  os9   I$SetStt 
146E 108E0001         (    supercomm.asm):02036         L1675    ldy   #$0001
1472 8E04F4           (    supercomm.asm):02037                  ldx   #u04EF
1475 A684             (    supercomm.asm):02038                  lda   ,x
1477 810D             (    supercomm.asm):02039                  cmpa  #C$CR
1479 260B             (    supercomm.asm):02040                  bne   L168F
147B 7D0CAB           (    supercomm.asm):02041                  tst   >u0CA9
147E 2706             (    supercomm.asm):02042                  beq   L168F
1480 860A             (    supercomm.asm):02043                  lda   #$0A
1482 A701             (    supercomm.asm):02044                  sta   1,x
1484 3121             (    supercomm.asm):02045                  leay  1,y
1486 9630             (    supercomm.asm):02046         L168F    lda   <u002B         Get path to modem
1488 103F8A           (    supercomm.asm):02047                  os9   I$Write  
148B 7D04F4           (    supercomm.asm):02048                  tst   >u04EF
148E 2B28             (    supercomm.asm):02049                  bmi   L16C8
1490 B60CA9           (    supercomm.asm):02050                  lda   >u0CA7
1493 2723             (    supercomm.asm):02051                  beq   L16C8
1495 7D0CAA           (    supercomm.asm):02052                  tst   >u0CA8
1498 2712             (    supercomm.asm):02053                  beq   L16BB
149A B604F4           (    supercomm.asm):02054                  lda   >u04EF
149D 810D             (    supercomm.asm):02055                  cmpa  #C$CR
149F 260B             (    supercomm.asm):02056                  bne   L16BB
14A1 860A             (    supercomm.asm):02057                  lda   #$0A
14A3 B704F5           (    supercomm.asm):02058                  sta   >u04F0
14A6 108E0002         (    supercomm.asm):02059                  ldy   #$0002
14AA 2004             (    supercomm.asm):02060                  bra   L16BF
                      (    supercomm.asm):02061         
14AC 108E0001         (    supercomm.asm):02062         L16BB    ldy   #$0001
14B0 8E04F4           (    supercomm.asm):02063         L16BF    ldx   #u04EF
14B3 8601             (    supercomm.asm):02064                  lda   #$01
14B5 103F8A           (    supercomm.asm):02065                  os9   I$Write  
14B8 16F723           (    supercomm.asm):02066         L16C8    lbra  L0C5E
                      (    supercomm.asm):02067         
                      (    supercomm.asm):02068         * Reset palettes (ALT-R)
                      (    supercomm.asm):02069         * Entry: None
14BB 3432             (    supercomm.asm):02070         L16CB    pshs  a,x,y        preserve regs
14BD 308DEEF5         (    supercomm.asm):02071                  leax  L03D6,pc     reset window codes
14C1 1703C8           (    supercomm.asm):02072                  lbsr  L1B03
14C4 1704F5           (    supercomm.asm):02073                  lbsr  L1C57        set palettes per terminal type
14C7 3532             (    supercomm.asm):02074                  puls  a,x,y        restore regs
14C9 16F712           (    supercomm.asm):02075                  lbra  L0C5E        go back to main loop
                      (    supercomm.asm):02076         
                      (    supercomm.asm):02077         * Shell Access (ALT-S)
14CC 3440             (    supercomm.asm):02078         L16DC    pshs  u            preserve data area pointer
14CE 17FCFF           (    supercomm.asm):02079                  lbsr  L134D        reset path options
14D1 C613             (    supercomm.asm):02080                  ldb   #$13
14D3 318DEEC7         (    supercomm.asm):02081                  leay  L03B2,pc     point to overlay for shell
14D7 8E13AB           (    supercomm.asm):02082                  ldx   #u13A9       point to buffer
14DA 17140F           (    supercomm.asm):02083                  lbsr  L2D26        move 'em
14DD 8E13AB           (    supercomm.asm):02084                  ldx   #u13A9       point to buffer
14E0 9695             (    supercomm.asm):02085                  lda   <u0090       get window X size
14E2 A705             (    supercomm.asm):02086                  sta   5,x          save it
14E4 9696             (    supercomm.asm):02087                  lda   <u0091       get Y size
14E6 0D45             (    supercomm.asm):02088                  tst   <u0040       conference mode on?
14E8 2702             (    supercomm.asm):02089                  beq   L1703        no, skip ahead
14EA 8003             (    supercomm.asm):02090                  suba  #$03         take off size of conference window
14EC A706             (    supercomm.asm):02091         L1703    sta   6,x          save Y size
14EE 968E             (    supercomm.asm):02092                  lda   <u0089       get FColor
14F0 D68D             (    supercomm.asm):02093                  ldb   <u0088       get BColor
14F2 ED07             (    supercomm.asm):02094                  std   7,x          save 'em
14F4 8601             (    supercomm.asm):02095                  lda   #1           place overlay
14F6 108E0009         (    supercomm.asm):02096                  ldy   #9
14FA 103F8A           (    supercomm.asm):02097                  os9   I$Write  
14FD 338DEDD9         (    supercomm.asm):02098                  leau  L02E5,pc     point to parameters
1501 308DEDD0         (    supercomm.asm):02099                  leax  L02E0,pc     point to 'shell'
1505 CC1100           (    supercomm.asm):02100                  ldd   #$1100       Type/Language & default data size
1508 103F03           (    supercomm.asm):02101                  os9   F$Fork       execute a shell
150B 3540             (    supercomm.asm):02102                  puls  u            restore data mem pointer
150D 2511             (    supercomm.asm):02103                  bcs   L173D        error, skip ahead
150F 977B             (    supercomm.asm):02104                  sta   <u0076       save process #
1511 8E0001           (    supercomm.asm):02105         L172D    ldx   #1           get # ticks
1514 17F9C2           (    supercomm.asm):02106                  lbsr  L0F56        sleep
1517 103F04           (    supercomm.asm):02107                  os9   F$Wait       wait for shell to die
151A 2504             (    supercomm.asm):02108                  bcs   L173D        error, skip ahead
151C 917B             (    supercomm.asm):02109                  cmpa  <u0076       was it my shell?
151E 26F1             (    supercomm.asm):02110                  bne   L172D        no, go back & wait
1520 8601             (    supercomm.asm):02111         L173D    lda   #1           get path
1522 308DEE8C         (    supercomm.asm):02112                  leax  L03C6,pc     point to overlay end codes
1526 108E0002         (    supercomm.asm):02113                  ldy   #2           get length
152A 103F8A           (    supercomm.asm):02114                  os9   I$Write      get rid of overlay
152D 17FC25           (    supercomm.asm):02115                  lbsr  L12B5        set path options back to me
1530 16F6AB           (    supercomm.asm):02116                  lbra  L0C5E        go back to main loop
                      (    supercomm.asm):02117         
1533 A680             (    supercomm.asm):02118         L1750    lda   ,x+          Keep copying until <SPACE> or size B is reached
1535 A7A0             (    supercomm.asm):02119                  sta   ,y+
1537 8120             (    supercomm.asm):02120                  cmpa  #C$SPAC
1539 2703             (    supercomm.asm):02121                  beq   L175B
153B 5A               (    supercomm.asm):02122                  decb  
153C 26F5             (    supercomm.asm):02123                  bne   L1750
153E 39               (    supercomm.asm):02124         L175B    rts   
                      (    supercomm.asm):02125         
                      (    supercomm.asm):02126         * Toggle On-Line timer (ALT-I)
153F 0D77             (    supercomm.asm):02127         L175C    tst   <u0072       VRN present?
1541 2709             (    supercomm.asm):02128                  beq   L176C        no, return to main loop
1543 967A             (    supercomm.asm):02129                  lda   <u0075       currently active?
1545 2708             (    supercomm.asm):02130                  beq   L176F        no, turn it on
1547 0F7A             (    supercomm.asm):02131                  clr   <u0075       turn it off
1549 17F95F           (    supercomm.asm):02132                  lbsr  L0F20        print time
154C 16F68F           (    supercomm.asm):02133         L176C    lbra  L0C5E        return to main loop
                      (    supercomm.asm):02134         
154F 0C7A             (    supercomm.asm):02135         L176F    inc   <u0075       flag timer on
1551 308DEDFD         (    supercomm.asm):02136                  leax  L0366,pc     point to ASCII string '00:00:00'
1555 108E007C         (    supercomm.asm):02137                  ldy   #u0077       point to buffer
1559 C60B             (    supercomm.asm):02138                  ldb   #$0B         get length
155B 171386           (    supercomm.asm):02139                  lbsr  L2D1E        move it
155E 8E007C           (    supercomm.asm):02140                  ldx   #u0077       point to buffer
1561 108E000B         (    supercomm.asm):02141                  ldy   #$000B       get length
1565 9643             (    supercomm.asm):02142                  lda   <u003E       get path to stat window
1567 103F8A           (    supercomm.asm):02143                  os9   I$Write      print the time
156A 9678             (    supercomm.asm):02144                  lda   <u0073       get current second from VRN
156C 9779             (    supercomm.asm):02145                  sta   <u0074       save it into timer flag
156E 16F66D           (    supercomm.asm):02146                  lbra  L0C5E        return to main loop
                      (    supercomm.asm):02147         
                      (    supercomm.asm):02148         * External Zmodem file receive
1571 CC0802           (    supercomm.asm):02149         L1793    ldd   #$0802       get overlay start co-ordinates
1574 FD0C91           (    supercomm.asm):02150                  std   >u0C8F
1577 CC400A           (    supercomm.asm):02151                  ldd   #$400A       get overlay size
157A FD0C93           (    supercomm.asm):02152                  std   >u0C91
157D 170464           (    supercomm.asm):02153                  lbsr  L1C81        place overlay
1580 308DED61         (    supercomm.asm):02154                  leax  >L02F0,pc    point to 'Zmodem file receive...'
1584 170305           (    supercomm.asm):02155                  lbsr  L1B03        print it
1587 308DEEE6         (    supercomm.asm):02156                  leax  >L048F,pc    turn off cursor
158B 1702FE           (    supercomm.asm):02157                  lbsr  L1B03
158E 8E13AB           (    supercomm.asm):02158                  ldx   #u13A9        point to a buffer
1591 CC0100           (    supercomm.asm):02159                  ldd   #1*256+SS.Opt   Get path options for Std Out
1594 103F8D           (    supercomm.asm):02160                  os9   I$GetStt 
1597 8E13AB           (    supercomm.asm):02161                  ldx   #u13A9
159A CC0100           (    supercomm.asm):02162                  ldd   #$0100       SS.Opt for Std Out & settings below
159D A705             (    supercomm.asm):02163                  sta   $05,x
159F E707             (    supercomm.asm):02164                  stb   $07,x
15A1 103F8E           (    supercomm.asm):02165                  os9   I$SetStt     Set them
15A4 4F               (    supercomm.asm):02166                  clra               Duplicate window path
15A5 103F82           (    supercomm.asm):02167                  os9   I$Dup    
15A8 9773             (    supercomm.asm):02168                  sta   <u006E
15AA 4F               (    supercomm.asm):02169                  clra               Close Std In path
15AB 103F8F           (    supercomm.asm):02170                  os9   I$Close  
15AE 9630             (    supercomm.asm):02171                  lda   <u002B       get path to modem
15B0 103F82           (    supercomm.asm):02172                  os9   I$Dup    
15B3 338DED27         (    supercomm.asm):02173                  leau  >L02E9,pc    point to parameters for RZ
15B7 308DED20         (    supercomm.asm):02174                  leax  >L02E6,pc    point to RZ
15BB 108E000A         (    supercomm.asm):02175                  ldy   #$000A       get size of parameters
15BF CC1100           (    supercomm.asm):02176                  ldd   #$1100       Type/Lang & default mem size
15C2 103F03           (    supercomm.asm):02177                  os9   F$Fork       Call RZ
15C5 CE0000           (    supercomm.asm):02178                  ldu   #$0000
15C8 3401             (    supercomm.asm):02179                  pshs  cc
15CA 977B             (    supercomm.asm):02180                  sta   <u0076       save process #
15CC 4F               (    supercomm.asm):02181                  clra               Restore Std In window path
15CD 103F8F           (    supercomm.asm):02182                  os9   I$Close  
15D0 9673             (    supercomm.asm):02183                  lda   <u006E
15D2 103F82           (    supercomm.asm):02184                  os9   I$Dup    
15D5 9673             (    supercomm.asm):02185                  lda   <u006E       get duplicate path
15D7 103F8F           (    supercomm.asm):02186                  os9   I$Close      close it
15DA 3501             (    supercomm.asm):02187                  puls  cc
15DC 2533             (    supercomm.asm):02188                  bcs   L1846
15DE 8E0001           (    supercomm.asm):02189         L180E    ldx   #$0001
15E1 17F8F5           (    supercomm.asm):02190                  lbsr  L0F56
15E4 CC0001           (    supercomm.asm):02191                  ldd   #$0001       SS.Ready from Std In
15E7 103F8D           (    supercomm.asm):02192                  os9   I$GetStt 
15EA 2516             (    supercomm.asm):02193                  bcs   L1836        No data ready, skip ahead
15EC 4F               (    supercomm.asm):02194                  clra  
15ED 5D               (    supercomm.asm):02195                  tstb               0 bytes ready?
15EE 2712             (    supercomm.asm):02196                  beq   L1836        Yes, skip ahead
15F0 1F02             (    supercomm.asm):02197                  tfr   d,y          Transfer # bytes waiting to Y
15F2 8E13AB           (    supercomm.asm):02198                  ldx   #u13A9       Point to buffer
15F5 103F89           (    supercomm.asm):02199                  os9   I$Read       Get that many bytes 
15F8 B613AB           (    supercomm.asm):02200                  lda   >u13A9
15FB 8105             (    supercomm.asm):02201                  cmpa  #$05
15FD 2603             (    supercomm.asm):02202                  bne   L1836
15FF 170123           (    supercomm.asm):02203                  lbsr  L197B
1602 103F04           (    supercomm.asm):02204         L1836    os9   F$Wait   
1605 250A             (    supercomm.asm):02205                  bcs   L1846
1607 917B             (    supercomm.asm):02206                  cmpa  <u0076
1609 26D3             (    supercomm.asm):02207                  bne   L180E
160B 5D               (    supercomm.asm):02208                  tstb  
160C 2703             (    supercomm.asm):02209                  beq   L1846
160E 1710C5           (    supercomm.asm):02210                  lbsr  L2AC5
1611 170423           (    supercomm.asm):02211         L1846    lbsr  L1CDE
1614 308DEE55         (    supercomm.asm):02212                  leax  >L048B,pc
1618 170271           (    supercomm.asm):02213                  lbsr  L1B03
161B 17FB37           (    supercomm.asm):02214                  lbsr  L12B5
161E 170307           (    supercomm.asm):02215                  lbsr  L1BAD
1621 16F5BA           (    supercomm.asm):02216                  lbra  L0C5E
                      (    supercomm.asm):02217         
                      (    supercomm.asm):02218         * Send file via ZModem
1624 CC0802           (    supercomm.asm):02219         L1859    ldd   #$0802       get overlay start co-ordinates
1627 FD0C91           (    supercomm.asm):02220                  std   >u0C8F       save 'em
162A CC400A           (    supercomm.asm):02221                  ldd   #$400A       get overlay size
162D FD0C93           (    supercomm.asm):02222                  std   >u0C91       save 'em
1630 1703B1           (    supercomm.asm):02223                  lbsr  L1C81        place overlay
1633 308DECDD         (    supercomm.asm):02224                  leax  L0322,pc     point to 'External ZModem file send'
1637 170252           (    supercomm.asm):02225                  lbsr  L1B03        print it
163A 108E0712         (    supercomm.asm):02226                  ldy   #u070D       point to parameter buffer
163E 109F4D           (    supercomm.asm):02227                  sty   <u0048       save pointer to it
1641 CC2D76           (    supercomm.asm):02228                  ldd   #'-*256+'v   Place -v in param buffer
1644 EDA1             (    supercomm.asm):02229                  std   ,y++
1646 CC7620           (    supercomm.asm):02230                  ldd   #'v*256+C$SPAC  Place 'v ' in param buffer
1649 EDA1             (    supercomm.asm):02231                  std   ,y++
164B 308DEEF2         (    supercomm.asm):02232         L1887    leax  L055F,pc     point to 'File:'
164F 3420             (    supercomm.asm):02233                  pshs  y
1651 170238           (    supercomm.asm):02234                  lbsr  L1B03        print it
1654 3520             (    supercomm.asm):02235                  puls  y
1656 C620             (    supercomm.asm):02236                  ldb   #C$SPAC
1658 17028A           (    supercomm.asm):02237                  lbsr  L1B61
165B 0D26             (    supercomm.asm):02238                  tst   <u0021
165D 102600B1         (    supercomm.asm):02239                  lbne  L1968
1661 8E0613           (    supercomm.asm):02240                  ldx   #u060E
1664 D622             (    supercomm.asm):02241                  ldb   <u001D
1666 C101             (    supercomm.asm):02242                  cmpb  #$01
1668 2710             (    supercomm.asm):02243                  beq   L18B6
166A A680             (    supercomm.asm):02244         L18A9    lda   ,x+
166C A7A0             (    supercomm.asm):02245                  sta   ,y+
166E 5A               (    supercomm.asm):02246                  decb  
166F 26F9             (    supercomm.asm):02247                  bne   L18A9
1671 8620             (    supercomm.asm):02248                  lda   #C$SPAC
1673 A73F             (    supercomm.asm):02249                  sta   -1,y
1675 20D4             (    supercomm.asm):02250                  bra   L1887
                      (    supercomm.asm):02251         
                      (    supercomm.asm):02252         * Filename to call ZModem send
1677 737A             (    supercomm.asm):02253         L031F    fcc   'sz'
1679 0D               (    supercomm.asm):02254                  fcb   C$CR
                      (    supercomm.asm):02255         
167A 860D             (    supercomm.asm):02256         L18B6    lda   #C$CR          Append CR
167C A7A0             (    supercomm.asm):02257                  sta   ,y+
167E 1F20             (    supercomm.asm):02258                  tfr   y,d
1680 934D             (    supercomm.asm):02259                  subd  <u0048
1682 DD4D             (    supercomm.asm):02260                  std   <u0048
1684 10830007         (    supercomm.asm):02261                  cmpd  #$0007
1688 10250086         (    supercomm.asm):02262                  lbcs  L1968
168C 1705BD           (    supercomm.asm):02263                  lbsr  L1EDC
168F 308DEDDE         (    supercomm.asm):02264                  leax  L048F,pc     point to CurOff codes
1693 1701F6           (    supercomm.asm):02265                  lbsr  L1B03
1696 8E13AB           (    supercomm.asm):02266                  ldx   #u13A9       Point to buffer to hold Options
1699 CC0100           (    supercomm.asm):02267                  ldd   #$0100       Get Options from Std Out path
169C 103F8D           (    supercomm.asm):02268                  os9   I$GetStt 
169F CC0100           (    supercomm.asm):02269                  ldd   #$0100       SS.Opt from Std Out
16A2 8E13AB           (    supercomm.asm):02270                  ldx   #u13A9       Point to buffer again
16A5 A705             (    supercomm.asm):02271                  sta   $05,x        Auto line feed ON
16A7 E707             (    supercomm.asm):02272                  stb   $07,x        Pause OFF
16A9 103F8E           (    supercomm.asm):02273                  os9   I$SetStt     Set new options
16AC 4F               (    supercomm.asm):02274                  clra               Dupe Std In path
16AD 103F82           (    supercomm.asm):02275                  os9   I$Dup    
16B0 9773             (    supercomm.asm):02276                  sta   <u006E
16B2 4F               (    supercomm.asm):02277                  clra               Close Std In path
16B3 103F8F           (    supercomm.asm):02278                  os9   I$Close  
16B6 9630             (    supercomm.asm):02279                  lda   <u002B
16B8 103F82           (    supercomm.asm):02280                  os9   I$Dup    
16BB 109E4D           (    supercomm.asm):02281                  ldy   <u0048
16BE CE0712           (    supercomm.asm):02282                  ldu   #u070D
16C1 308CB3           (    supercomm.asm):02283                  leax  <L031F,pc    point to 'sz'
16C4 CC1100           (    supercomm.asm):02284                  ldd   #$1100       Type/Lang & default mem size
16C7 103F03           (    supercomm.asm):02285                  os9   F$Fork       Fork SZ
16CA 3401             (    supercomm.asm):02286                  pshs  cc
16CC 977B             (    supercomm.asm):02287                  sta   <u0076
16CE 4F               (    supercomm.asm):02288                  clra               Close Std In
16CF 103F8F           (    supercomm.asm):02289                  os9   I$Close  
16D2 9673             (    supercomm.asm):02290                  lda   <u006E
16D4 103F82           (    supercomm.asm):02291                  os9   I$Dup    
16D7 9673             (    supercomm.asm):02292                  lda   <u006E
16D9 103F8F           (    supercomm.asm):02293                  os9   I$Close  
16DC 3501             (    supercomm.asm):02294                  puls  cc
16DE 2532             (    supercomm.asm):02295                  bcs   L1968
16E0 8E0001           (    supercomm.asm):02296         L1930    ldx   #$0001
16E3 17F7F3           (    supercomm.asm):02297                  lbsr  L0F56
16E6 CC0001           (    supercomm.asm):02298                  ldd   #SS.Ready      Data ready on Std In?
16E9 103F8D           (    supercomm.asm):02299                  os9   I$GetStt 
16EC 2515             (    supercomm.asm):02300                  bcs   L1958
16EE 4F               (    supercomm.asm):02301                  clra  
16EF 5D               (    supercomm.asm):02302                  tstb                 0 bytes?
16F0 2711             (    supercomm.asm):02303                  beq   L1958
16F2 1F02             (    supercomm.asm):02304                  tfr   d,y            Move # bytes ready to Y
16F4 8E13AB           (    supercomm.asm):02305                  ldx   #u13A9         Point to buffer to hold them
16F7 103F89           (    supercomm.asm):02306                  os9   I$Read         Read them in  
16FA B613AB           (    supercomm.asm):02307                  lda   >u13A9
16FD 8105             (    supercomm.asm):02308                  cmpa  #$05
16FF 2602             (    supercomm.asm):02309                  bne   L1958
1701 8D22             (    supercomm.asm):02310                  bsr   L197B
1703 103F04           (    supercomm.asm):02311         L1958    os9   F$Wait   
1706 250A             (    supercomm.asm):02312                  bcs   L1968
1708 917B             (    supercomm.asm):02313                  cmpa  <u0076
170A 26D4             (    supercomm.asm):02314                  bne   L1930
170C 5D               (    supercomm.asm):02315                  tstb  
170D 2703             (    supercomm.asm):02316                  beq   L1968
170F 170FC4           (    supercomm.asm):02317                  lbsr  L2AC5
1712 170322           (    supercomm.asm):02318         L1968    lbsr  L1CDE
1715 17FA3D           (    supercomm.asm):02319                  lbsr  L12B5
1718 308DED51         (    supercomm.asm):02320                  leax  L048B,pc
171C 17016D           (    supercomm.asm):02321                  lbsr  L1B03
171F 170206           (    supercomm.asm):02322                  lbsr  L1BAD
1722 16F4B9           (    supercomm.asm):02323                  lbra  L0C5E
                      (    supercomm.asm):02324         * Kill SZ process
1725 967B             (    supercomm.asm):02325         L197B    lda   <u0076       get it's process #
1727 5F               (    supercomm.asm):02326                  clrb               get kill signal
1728 103F08           (    supercomm.asm):02327                  os9   F$Send       send it
172B 39               (    supercomm.asm):02328                  rts                return
                      (    supercomm.asm):02329         
                      (    supercomm.asm):02330         * Hangup modem (ALT-H)
172C 0D77             (    supercomm.asm):02331         L1983    tst   <u0072       VRN present?
172E 2705             (    supercomm.asm):02332                  beq   L198E        no, skip ahead
1730 0F7A             (    supercomm.asm):02333                  clr   <u0075       Flag that timer will be off
1732 17F776           (    supercomm.asm):02334                  lbsr  L0F20
1735 CC2105           (    supercomm.asm):02335         L198E    ldd   #$2105
1738 FD0C91           (    supercomm.asm):02336                  std   >u0C8F
173B CC0E03           (    supercomm.asm):02337                  ldd   #$0E03
173E FD0C93           (    supercomm.asm):02338                  std   >u0C91
1741 1702A0           (    supercomm.asm):02339                  lbsr  L1C81
1744 308DED29         (    supercomm.asm):02340                  leax  >L048F,pc
1748 170141           (    supercomm.asm):02341                  lbsr  L1B03
174B 308DEBEC         (    supercomm.asm):02342                  leax  >L0349,pc
174F 17013A           (    supercomm.asm):02343                  lbsr  L1B03
1752 7D0CAD           (    supercomm.asm):02344                  tst   >u0CAB
1755 262B             (    supercomm.asm):02345                  bne   L19E2
1757 0D1F             (    supercomm.asm):02346                  tst   <u001A
1759 270F             (    supercomm.asm):02347                  beq   L19C8
175B 9630             (    supercomm.asm):02348                  lda   <u002B
175D C62B             (    supercomm.asm):02349                  ldb   #SS.HngUp
175F 103F8E           (    supercomm.asm):02350                  os9   I$SetStt     Hang up the phone
1762 8E003C           (    supercomm.asm):02351                  ldx   #$003C
1765 17F771           (    supercomm.asm):02352                  lbsr  L0F56
1768 2041             (    supercomm.asm):02353                  bra   L1A0C
                      (    supercomm.asm):02354         
                      (    supercomm.asm):02355         * Hangup modem by '+++' 'ATH'
176A 9E16             (    supercomm.asm):02356         L19C8    ldx   <u0011
176C E602             (    supercomm.asm):02357                  ldb   2,x
176E C4FE             (    supercomm.asm):02358                  andb  #$FE
1770 E702             (    supercomm.asm):02359                  stb   2,x
1772 8E003C           (    supercomm.asm):02360                  ldx   #$003C
1775 17F761           (    supercomm.asm):02361                  lbsr  L0F56
1778 9E16             (    supercomm.asm):02362                  ldx   <u0011
177A E602             (    supercomm.asm):02363                  ldb   2,x
177C CA01             (    supercomm.asm):02364                  orb   #$01
177E E702             (    supercomm.asm):02365                  stb   2,x
1780 2029             (    supercomm.asm):02366                  bra   L1A0C
                      (    supercomm.asm):02367         
1782 9630             (    supercomm.asm):02368         L19E2    lda   <u002B
1784 C603             (    supercomm.asm):02369                  ldb   #$03
1786 308D070F         (    supercomm.asm):02370         L19E7    leax  >L0981,pc    point to '+++'
178A 108E0001         (    supercomm.asm):02371                  ldy   #$0001
178E 103F8A           (    supercomm.asm):02372                  os9   I$Write  
1791 8E000C           (    supercomm.asm):02373                  ldx   #$000C
1794 17F742           (    supercomm.asm):02374                  lbsr  L0F56
1797 5A               (    supercomm.asm):02375                  decb  
1798 26EC             (    supercomm.asm):02376                  bne   L19E7
179A 8E0080           (    supercomm.asm):02377                  ldx   #$0080
179D 17F739           (    supercomm.asm):02378                  lbsr  L0F56
17A0 308DEB2D         (    supercomm.asm):02379                  leax  >L02DC,pc    point to 'ATH'
17A4 108E0004         (    supercomm.asm):02380                  ldy   #$0004
17A8 103F8A           (    supercomm.asm):02381                  os9   I$Write  
17AB 170289           (    supercomm.asm):02382         L1A0C    lbsr  L1CDE
17AE 308DECBB         (    supercomm.asm):02383                  leax  >L048B,pc
17B2 1700D7           (    supercomm.asm):02384                  lbsr  L1B03
17B5 16F426           (    supercomm.asm):02385                  lbra  L0C5E
                      (    supercomm.asm):02386         
17B8 3436             (    supercomm.asm):02387         L1A19    pshs  y,x,d
17BA 8E131E           (    supercomm.asm):02388                  ldx   #u131C
17BD 200C             (    supercomm.asm):02389                  bra   L1A2E
                      (    supercomm.asm):02390         
17BF 3436             (    supercomm.asm):02391         L1A21    pshs  y,x,d
17C1 80B1             (    supercomm.asm):02392                  suba  #$B1
17C3 C680             (    supercomm.asm):02393                  ldb   #$80
17C5 3D               (    supercomm.asm):02394                  mul   
17C6 8E0D1E           (    supercomm.asm):02395                  ldx   #u0D1C
17C9 308B             (    supercomm.asm):02396                  leax  d,x
17CB 3410             (    supercomm.asm):02397         L1A2E    pshs  x
17CD 5F               (    supercomm.asm):02398                  clrb  
17CE A680             (    supercomm.asm):02399         L1A31    lda   ,x+
17D0 5C               (    supercomm.asm):02400                  incb  
17D1 C180             (    supercomm.asm):02401                  cmpb  #$80           Hi bit set char?
17D3 2204             (    supercomm.asm):02402                  bhi   L1A3C          Yes, skip ahead
17D5 810D             (    supercomm.asm):02403                  cmpa  #C$CR          Carriage return?
17D7 26F5             (    supercomm.asm):02404                  bne   L1A31
17D9 5A               (    supercomm.asm):02405         L1A3C    decb  
17DA 4F               (    supercomm.asm):02406                  clra  
17DB 3510             (    supercomm.asm):02407                  puls  x
17DD 5D               (    supercomm.asm):02408                  tstb  
17DE 270C             (    supercomm.asm):02409                  beq   L1A4F
17E0 A680             (    supercomm.asm):02410         L1A43    lda   ,x+
17E2 5A               (    supercomm.asm):02411                  decb  
17E3 815C             (    supercomm.asm):02412                  cmpa  #'\
17E5 2713             (    supercomm.asm):02413                  beq   L1A5D
17E7 8D2A             (    supercomm.asm):02414                  bsr   L1A76
17E9 5D               (    supercomm.asm):02415         L1A4C    tstb  
17EA 26F4             (    supercomm.asm):02416                  bne   L1A43
17EC 35B6             (    supercomm.asm):02417         L1A4F    puls  pc,y,x,d
                      (    supercomm.asm):02418         
17EE 3410             (    supercomm.asm):02419         L1A51    pshs  x
17F0 8E001E           (    supercomm.asm):02420                  ldx   #$001E
17F3 17F6E3           (    supercomm.asm):02421                  lbsr  L0F56
17F6 3510             (    supercomm.asm):02422                  puls  x
17F8 20EF             (    supercomm.asm):02423                  bra   L1A4C
                      (    supercomm.asm):02424         
17FA A680             (    supercomm.asm):02425         L1A5D    lda   ,x+
17FC 5A               (    supercomm.asm):02426                  decb  
17FD 815E             (    supercomm.asm):02427                  cmpa  #'^
17FF 270E             (    supercomm.asm):02428                  beq   L1A72
1801 812A             (    supercomm.asm):02429                  cmpa  #'*
1803 27E9             (    supercomm.asm):02430                  beq   L1A51
1805 815C             (    supercomm.asm):02431                  cmpa  #'\
1807 2702             (    supercomm.asm):02432                  beq   L1A6E
1809 8040             (    supercomm.asm):02433                  suba  #$40
180B 8D06             (    supercomm.asm):02434         L1A6E    bsr   L1A76
180D 20DA             (    supercomm.asm):02435                  bra   L1A4C
                      (    supercomm.asm):02436         
180F 861B             (    supercomm.asm):02437         L1A72    lda   #$1B           <ESC>?
1811 20F8             (    supercomm.asm):02438                  bra   L1A6E
                      (    supercomm.asm):02439         
                      (    supercomm.asm):02440         * Write char in A to modem
1813 3432             (    supercomm.asm):02441         L1A76    pshs  y,x,a          Preserve regs
1815 30E4             (    supercomm.asm):02442                  leax  ,s             Point X to char to write
1817 108E0001         (    supercomm.asm):02443                  ldy   #$0001         Write char out to modem
181B 9630             (    supercomm.asm):02444                  lda   <u002B
181D 103F8A           (    supercomm.asm):02445                  os9   I$Write  
1820 35B2             (    supercomm.asm):02446                  puls  pc,y,x,a       Restore & return
                      (    supercomm.asm):02447         
                      (    supercomm.asm):02448         * Setup device windows
                      (    supercomm.asm):02449         * Entry: None
1822 3432             (    supercomm.asm):02450         L1A8A    pshs  a,x,y        preserve
1824 318DEC21         (    supercomm.asm):02451                  leay  L0469,pc     point to DWEnd,DWSet/Select for main window
1828 8E13AB           (    supercomm.asm):02452                  ldx   #u13A9       point to a buffer
182B C60E             (    supercomm.asm):02453                  ldb   #14          get length of data
182D 1710BC           (    supercomm.asm):02454                  lbsr  L2D26        move it
1830 8E13AB           (    supercomm.asm):02455                  ldx   #u13A9       Point to buffer again
1833 861C             (    supercomm.asm):02456                  lda   #28          Maximum height we will try (for 28 line GRFDRV)
1835 B70C88           (    supercomm.asm):02457                  sta   >u0C84       Save copy
1838 A708             (    supercomm.asm):02458                  sta   8,x          Save in DWSet command
183A 9796             (    supercomm.asm):02459                  sta   <u0091       Save as Y size of window (in case it works)
183C 108E000E         (    supercomm.asm):02460                  ldy   #14          Size of all 3 commands
1840 8601             (    supercomm.asm):02461                  lda   #1           Std Out
1842 103F8A           (    supercomm.asm):02462                  os9   I$Write      Try it
1845 2504             (    supercomm.asm):02463                  bcs   Nope         No, try 27 down to 10   
1847 A607             (    supercomm.asm):02464                  lda   7,x          Get width that worked
1849 2019             (    supercomm.asm):02465                  bra   Worked       Save it & return
184B 8E13AD           (    supercomm.asm):02466         Nope     ldx   #u13A9+2     point to data again (skipping DWEnd)
184E 861B             (    supercomm.asm):02467                  lda   #27          Get screen height we will start trying on
1850 B70C88           (    supercomm.asm):02468         L1AB5    sta   >u0C84       Save copy
1853 A706             (    supercomm.asm):02469                  sta   6,x          save it into DWSet
1855 9796             (    supercomm.asm):02470                  sta   <u0091       Save as Y size of window
1857 108E000A         (    supercomm.asm):02471                  ldy   #10          Size of DWSet command
185B 8601             (    supercomm.asm):02472                  lda   #1
185D 103F8A           (    supercomm.asm):02473                  os9   I$Write      try to setup window
1860 2506             (    supercomm.asm):02474                  bcs   L1AD8        didn't work, skip ahead
1862 A605             (    supercomm.asm):02475                  lda   5,x          get width
1864 9795             (    supercomm.asm):02476         Worked   sta   <u0090       Save it as main window width
1866 35B2             (    supercomm.asm):02477         L1AD6    puls  a,x,y,pc     restore & return
                      (    supercomm.asm):02478         
1868 B60C88           (    supercomm.asm):02479         L1AD8    lda   >u0C84       get current height
186B 4A               (    supercomm.asm):02480                  deca               subtract 1
186C 810A             (    supercomm.asm):02481                  cmpa  #10          do we have any room?
186E 22E0             (    supercomm.asm):02482                  bhi   L1AB5        yes, try again
1870 53               (    supercomm.asm):02483                  comb               set carry
1871 C6C3             (    supercomm.asm):02484                  ldb   #E$IWDef     Illegal Window Definition error
1873 20F1             (    supercomm.asm):02485                  bra   L1AD6        return with error
                      (    supercomm.asm):02486         
1875 308DEBCE         (    supercomm.asm):02487         L1AE8    leax  L0467,pc     Point to '/w'
1879 8602             (    supercomm.asm):02488                  lda   #WRITE.
187B 103F84           (    supercomm.asm):02489                  os9   I$Open       Open path to new window  
187E 9743             (    supercomm.asm):02490                  sta   <u003E       Save it
1880 308DEBD5         (    supercomm.asm):02491                  leax  >L0477,pc    Point to DWSet for status line window
1884 108E000A         (    supercomm.asm):02492                  ldy   #$000A
1888 103F8A           (    supercomm.asm):02493                  os9   I$Write  
188B 39               (    supercomm.asm):02494                  rts   
                      (    supercomm.asm):02495         
                      (    supercomm.asm):02496         * Generic WRITE routine
188C 8601             (    supercomm.asm):02497         L1B03    lda   #$01         Std out path
188E 10AE81           (    supercomm.asm):02498         L1B05    ldy   ,x++         Get length to write
1891 103F8A           (    supercomm.asm):02499                  os9   I$Write      Write it out
1894 39               (    supercomm.asm):02500                  rts   
                      (    supercomm.asm):02501         
                      (    supercomm.asm):02502         * NOTE: SHOULD MOVE THESE ROUTINES?
1895 8D0F             (    supercomm.asm):02503         L1B0C    bsr   L1B1D
1897 8179             (    supercomm.asm):02504                  cmpa  #'y
1899 1027F5E2         (    supercomm.asm):02505                  lbeq  L0EEF
189D 8159             (    supercomm.asm):02506                  cmpa  #'Y
189F 1027F5DC         (    supercomm.asm):02507                  lbeq  L0EEF
18A3 16F338           (    supercomm.asm):02508                  lbra  L0C5E
                      (    supercomm.asm):02509         
18A6 3420             (    supercomm.asm):02510         L1B1D    pshs  y
18A8 CC1D04           (    supercomm.asm):02511                  ldd   #$1D04
18AB FD0C91           (    supercomm.asm):02512                  std   >u0C8F
18AE CC1603           (    supercomm.asm):02513                  ldd   #$1603
18B1 FD0C93           (    supercomm.asm):02514                  std   >u0C91
18B4 17012D           (    supercomm.asm):02515                  lbsr  L1C81
18B7 308DEBC0         (    supercomm.asm):02516                  leax  >L0499,pc
18BB 8DCF             (    supercomm.asm):02517                  bsr   L1B03
18BD 308DEBB0         (    supercomm.asm):02518                  leax  >L048F,pc
18C1 8DC9             (    supercomm.asm):02519                  bsr   L1B03
18C3 170E08           (    supercomm.asm):02520                  lbsr  L2ABC
18C6 3402             (    supercomm.asm):02521                  pshs  a
18C8 308DEBA1         (    supercomm.asm):02522                  leax  >L048B,pc
18CC 8DBE             (    supercomm.asm):02523                  bsr   L1B03
18CE 170166           (    supercomm.asm):02524                  lbsr  L1CDE
18D1 35A2             (    supercomm.asm):02525                  puls  pc,y,a
                      (    supercomm.asm):02526         
18D3 3414             (    supercomm.asm):02527         L1B4E    pshs  x,b
18D5 8E0C9B           (    supercomm.asm):02528                  ldx   #u0C99
18D8 103F15           (    supercomm.asm):02529                  os9   F$Time   
18DB A605             (    supercomm.asm):02530                  lda   $05,x          Get seconds
18DD 8E0002           (    supercomm.asm):02531                  ldx   #$0002         Sleep for 2 tics
18E0 103F0A           (    supercomm.asm):02532                  os9   F$Sleep  
18E3 3594             (    supercomm.asm):02533                  puls  pc,x,b
                      (    supercomm.asm):02534         
                      (    supercomm.asm):02535         * Get input string locally
                      (    supercomm.asm):02536         * Entry: B=Count?
18E5 3436             (    supercomm.asm):02537         L1B61    pshs  d,x,y
18E7 0F21             (    supercomm.asm):02538                  clr   <u001C
18E9 0F22             (    supercomm.asm):02539                  clr   <u001D       clear input data count
18EB 0F26             (    supercomm.asm):02540                  clr   <u0021       break flag?
18ED 8E0613           (    supercomm.asm):02541                  ldx   #u060E
18F0 170DDB           (    supercomm.asm):02542         L1B70    lbsr  L2ABC
18F3 812D             (    supercomm.asm):02543                  cmpa  #'-          is it printable?
18F5 230D             (    supercomm.asm):02544                  bls   L1B85        no, check control chars.
18F7 5D               (    supercomm.asm):02545                  tstb
18F8 27F6             (    supercomm.asm):02546                  beq   L1B70        
18FA A780             (    supercomm.asm):02547                  sta   ,x+          save data to buffer
18FC 5A               (    supercomm.asm):02548                  decb               decrement count
18FD 0C22             (    supercomm.asm):02549                  inc   <u001D       add 1 to data length
18FF 170376           (    supercomm.asm):02550                  lbsr  L1F0B        go print it
1902 20EC             (    supercomm.asm):02551                  bra   L1B70        go try again
                      (    supercomm.asm):02552         
1904 8108             (    supercomm.asm):02553         L1B85    cmpa  #C$BSP       was it backspace?
1906 260E             (    supercomm.asm):02554                  bne   L1B99        no,
1908 0D22             (    supercomm.asm):02555                  tst   <u001D       any data?
190A 27E4             (    supercomm.asm):02556                  beq   L1B70        no, try again
190C 5C               (    supercomm.asm):02557                  incb  
190D 0A22             (    supercomm.asm):02558                  dec   <u001D       decrement count
190F 301F             (    supercomm.asm):02559                  leax  -1,x         backup
1911 170364           (    supercomm.asm):02560                  lbsr  L1F0B        print it
1914 20DA             (    supercomm.asm):02561                  bra   L1B70        go try again
                      (    supercomm.asm):02562         
1916 8105             (    supercomm.asm):02563         L1B99    cmpa  #C$QUIT      break?
1918 2604             (    supercomm.asm):02564                  bne   L1BA2        no, check CR
191A 0C26             (    supercomm.asm):02565                  inc   <u0021       flag break
191C 35B6             (    supercomm.asm):02566                  puls  d,x,y,pc     Restore & return
                      (    supercomm.asm):02567         
191E 810D             (    supercomm.asm):02568         L1BA2    cmpa  #C$CR        carriage return?
1920 26CE             (    supercomm.asm):02569                  bne   L1B70        no, try again
1922 A784             (    supercomm.asm):02570                  sta   ,x           save it
1924 0C22             (    supercomm.asm):02571                  inc   <u001D       add 1 to count
1926 35B6             (    supercomm.asm):02572                  puls  d,x,y,pc     restore & return
                      (    supercomm.asm):02573         
1928 CC0001           (    supercomm.asm):02574         L1BAD    ldd   #SS.Ready    Std In - Check for data ready
192B 103F8D           (    supercomm.asm):02575                  os9   I$GetStt 
192E 2401             (    supercomm.asm):02576                  bcc   L1BB7        May have some, skip ahead
1930 39               (    supercomm.asm):02577                  rts                Otherwise, return
                      (    supercomm.asm):02578         
1931 5D               (    supercomm.asm):02579         L1BB7    tstb               0 bytes?
1932 2709             (    supercomm.asm):02580                  beq   L1BC6        Yes, skip ahead
1934 4F               (    supercomm.asm):02581                  clra               Clear high byte of size & Std In
1935 1F02             (    supercomm.asm):02582                  tfr   d,y          Move to Y for Read call
1937 8E13AB           (    supercomm.asm):02583                  ldx   #u13A9       Place to hold waiting data
193A 103F89           (    supercomm.asm):02584                  os9   I$Read   
193D 39               (    supercomm.asm):02585         L1BC6    rts   
                      (    supercomm.asm):02586         
                      (    supercomm.asm):02587         * <ALT>-<1-8> function key init routine
193E 3416             (    supercomm.asm):02588         L1BC7    pshs  x,d
1940 C608             (    supercomm.asm):02589                  ldb   #$08         # function keys to init
1942 8E0D1E           (    supercomm.asm):02590                  ldx   #u0D1C       Point to start of <ALT>-<1> key buffer
1945 860D             (    supercomm.asm):02591                  lda   #C$CR
1947 A784             (    supercomm.asm):02592         L1BD1    sta   ,x           Save 2 CR's as default for each key
1949 A701             (    supercomm.asm):02593                  sta   1,x
194B 30890080         (    supercomm.asm):02594                  leax  >$0080,x     Move to next key
194F 5A               (    supercomm.asm):02595                  decb               Do until all function keys initialized
1950 26F5             (    supercomm.asm):02596                  bne   L1BD1
1952 3596             (    supercomm.asm):02597                  puls  pc,x,d
                      (    supercomm.asm):02598         
                      (    supercomm.asm):02599         * TAB HANDLER GOES HERE (CHR$(9))
                      (    supercomm.asm):02600         * L1BDE    rts   
                      (    supercomm.asm):02601         
1954 966A             (    supercomm.asm):02602         L1BDF    lda   <u0065         Get monitor type (0=Comp, 1=RGB, 2=Mono)
1956 8102             (    supercomm.asm):02603                  cmpa  #2
1958 2606             (    supercomm.asm):02604                  bne   L1BEC          If comp or RGB, skip ahead
195A 318DE9FF         (    supercomm.asm):02605                  leay  >L0371,pc      Point to a set of palettes for monochrome
195E 2023             (    supercomm.asm):02606                  bra   L1C16
                      (    supercomm.asm):02607         
                      (    supercomm.asm):02608         * Monitor type is color (comp or RGB)
1960 7D0CA8           (    supercomm.asm):02609         L1BEC    tst   >u0CA6         Check current terminal type
1963 261A             (    supercomm.asm):02610                  bne   L1C12          If Not TTY, skip ahead
                      (    supercomm.asm):02611         * TTY: Color
1965 318DEA14         (    supercomm.asm):02612                  leay  >L0391,pc      Point to OS9 terminal type palette defaults
1969 CC0601           (    supercomm.asm):02613                  ldd   #$0601         Reset some stored colors
196C DD8A             (    supercomm.asm):02614                  std   <u0085
196E CC0002           (    supercomm.asm):02615                  ldd   #$0002
1971 DD8C             (    supercomm.asm):02616                  std   <u0087
1973 CC0704           (    supercomm.asm):02617                  ldd   #$0704
1976 DD8E             (    supercomm.asm):02618                  std   <u0089
1978 CC0305           (    supercomm.asm):02619                  ldd   #$0305
197B DD90             (    supercomm.asm):02620                  std   <u008B
197D 2018             (    supercomm.asm):02621                  bra   L1C30
                      (    supercomm.asm):02622         
                      (    supercomm.asm):02623         * OS9 or ANSI
197F 318DE9EA         (    supercomm.asm):02624         L1C12    leay  >L0381,pc      Point to ANSI terminal type palette defaults
1983 CC0504           (    supercomm.asm):02625         L1C16    ldd   #$0504
1986 DD8A             (    supercomm.asm):02626                  std   <u0085
1988 CC0700           (    supercomm.asm):02627                  ldd   #$0700
198B DD8C             (    supercomm.asm):02628                  std   <u0087
198D CC0601           (    supercomm.asm):02629                  ldd   #$0601
1990 DD8E             (    supercomm.asm):02630                  std   <u0089
1992 CC0203           (    supercomm.asm):02631                  ldd   #$0203
1995 DD90             (    supercomm.asm):02632                  std   <u008B
1997 8E13AB           (    supercomm.asm):02633         L1C30    ldx   #u13A9         Point to temp buffer
199A CC1B31           (    supercomm.asm):02634                  ldd   #$1B31         Set palette command
199D ED84             (    supercomm.asm):02635                  std   ,x
199F 4F               (    supercomm.asm):02636                  clra                 Start with palette 0
19A0 E6A6             (    supercomm.asm):02637         L1C3A    ldb   a,y
19A2 3422             (    supercomm.asm):02638                  pshs  y,a
19A4 ED02             (    supercomm.asm):02639                  std   $02,x
19A6 108E0004         (    supercomm.asm):02640                  ldy   #$0004
19AA 8601             (    supercomm.asm):02641                  lda   #$01
19AC 103F8A           (    supercomm.asm):02642                  os9   I$Write  
19AF 3522             (    supercomm.asm):02643                  puls  y,a
19B1 4C               (    supercomm.asm):02644                  inca  
19B2 8110             (    supercomm.asm):02645                  cmpa  #$10
19B4 25EA             (    supercomm.asm):02646                  blo   L1C3A
19B6 170E45           (    supercomm.asm):02647                  lbsr  L2C18
19B9 160DC6           (    supercomm.asm):02648                  lbra  L2B86
                      (    supercomm.asm):02649         
19BC 3412             (    supercomm.asm):02650         L1C57    pshs  x,a
19BE 966A             (    supercomm.asm):02651                  lda   <u0065
19C0 8102             (    supercomm.asm):02652                  cmpa  #$02
19C2 270B             (    supercomm.asm):02653                  beq   L1C6C
19C4 7D0CA8           (    supercomm.asm):02654                  tst   >u0CA6
19C7 2606             (    supercomm.asm):02655                  bne   L1C6C
19C9 308DE9C3         (    supercomm.asm):02656                  leax  >L03A4,pc
19CD 2004             (    supercomm.asm):02657                  bra   L1C70
                      (    supercomm.asm):02658         
19CF 308DE9BA         (    supercomm.asm):02659         L1C6C    leax  >L03A1,pc
19D3 A684             (    supercomm.asm):02660         L1C70    lda   ,x
19D5 170668           (    supercomm.asm):02661                  lbsr  L2347
19D8 A601             (    supercomm.asm):02662                  lda   $01,x
19DA 170657           (    supercomm.asm):02663                  lbsr  L233B
19DD A602             (    supercomm.asm):02664                  lda   $02,x
19DF 170658           (    supercomm.asm):02665                  lbsr  L2341
19E2 3592             (    supercomm.asm):02666                  puls  pc,x,a
                      (    supercomm.asm):02667         
                      (    supercomm.asm):02668         * Generic shadowed overlay window set routine
                      (    supercomm.asm):02669         * Uses 9 byte buffer from u13A9 to hold OWSet command
                      (    supercomm.asm):02670         * u0C8F : Start X,Y coords
                      (    supercomm.asm):02671         * u0C91 : X,Y width
19E4 3436             (    supercomm.asm):02672         L1C81    pshs  y,x,d          Preserve regs
19E6 8E13AB           (    supercomm.asm):02673                  ldx   #u13A9         Point to buffer
19E9 CC1B22           (    supercomm.asm):02674                  ldd   #$1B22         OWSet prefix (Draw shadow part of overlay)
19EC ED84             (    supercomm.asm):02675                  std   ,x
19EE 8601             (    supercomm.asm):02676                  lda   #$01           Save switch on
19F0 A702             (    supercomm.asm):02677                  sta   2,x
19F2 FC0C91           (    supercomm.asm):02678                  ldd   >u0C8F         Get start coords
19F5 8B01             (    supercomm.asm):02679                  adda  #$01           Bump up by 1
19F7 CB01             (    supercomm.asm):02680                  addb  #$01
19F9 ED03             (    supercomm.asm):02681                  std   3,x            Save in string
19FB FC0C93           (    supercomm.asm):02682                  ldd   >u0C91         Get width & height
19FE ED05             (    supercomm.asm):02683                  std   5,x            Save in string
1A00 F6008A           (    supercomm.asm):02684                  ldb   >u0085         Get bckground color
1A03 4F               (    supercomm.asm):02685                  clra                 Foreground color=0
1A04 ED07             (    supercomm.asm):02686                  std   7,x            Save in string
1A06 8601             (    supercomm.asm):02687                  lda   #$01           Pop overlay window onto screen
1A08 108E0009         (    supercomm.asm):02688                  ldy   #$0009
1A0C 103F8A           (    supercomm.asm):02689                  os9   I$Write  
1A0F CC1B22           (    supercomm.asm):02690                  ldd   #$1B22         Now, draw main overlay window
1A12 ED84             (    supercomm.asm):02691                  std   ,x
1A14 8601             (    supercomm.asm):02692                  lda   #$01
1A16 A702             (    supercomm.asm):02693                  sta   $02,x
1A18 FC0C91           (    supercomm.asm):02694                  ldd   >u0C8F
1A1B ED03             (    supercomm.asm):02695                  std   3,x
1A1D FC0C93           (    supercomm.asm):02696                  ldd   >u0C91
1A20 ED05             (    supercomm.asm):02697                  std   5,x
1A22 968C             (    supercomm.asm):02698                  lda   <u0087
1A24 D68B             (    supercomm.asm):02699                  ldb   <u0086
1A26 ED07             (    supercomm.asm):02700                  std   7,x
1A28 860C             (    supercomm.asm):02701                  lda   #$0C
1A2A A709             (    supercomm.asm):02702                  sta   $09,x
1A2C 8601             (    supercomm.asm):02703                  lda   #$01
1A2E 108E000A         (    supercomm.asm):02704                  ldy   #$000A
1A32 103F8A           (    supercomm.asm):02705                  os9   I$Write  
1A35 35B6             (    supercomm.asm):02706                  puls  pc,y,x,d
                      (    supercomm.asm):02707         
                      (    supercomm.asm):02708         * Generic shadowed overlay window remove routine
1A37 3436             (    supercomm.asm):02709         L1CDE    pshs  y,x,d          Preserve regs
1A39 8E13AB           (    supercomm.asm):02710                  ldx   #u13A9         Point to buffer
1A3C CC1B23           (    supercomm.asm):02711                  ldd   #$1B23         OWEnd command
1A3F ED84             (    supercomm.asm):02712                  std   ,x
1A41 8601             (    supercomm.asm):02713                  lda   #1             Take off both main & shadow overlays
1A43 108E0002         (    supercomm.asm):02714                  ldy   #$0002
1A47 103F8A           (    supercomm.asm):02715                  os9   I$Write  
1A4A 103F8A           (    supercomm.asm):02716                  os9   I$Write  
1A4D 35B6             (    supercomm.asm):02717                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):02718         
1A4F 3436             (    supercomm.asm):02719         L1CF7    pshs  y,x,d
1A51 8E1003           (    supercomm.asm):02720                  ldx   #$1003
1A54 108E0EA0         (    supercomm.asm):02721                  ldy   #$0EA0
1A58 CC0198           (    supercomm.asm):02722         L1D00    ldd   #1*256+SS.Tone Tone to Std Out
1A5B 103F8E           (    supercomm.asm):02723                  os9   I$SetStt 
1A5E 35B6             (    supercomm.asm):02724                  puls  pc,y,x,d
                      (    supercomm.asm):02725         
1A60 3436             (    supercomm.asm):02726         L1D09    pshs  y,x,d
1A62 8E3F03           (    supercomm.asm):02727                  ldx   #$3F03
1A65 108E0FD1         (    supercomm.asm):02728                  ldy   #$0FD1
1A69 20ED             (    supercomm.asm):02729                  bra   L1D00
                      (    supercomm.asm):02730         
1A6B 3416             (    supercomm.asm):02731         L1D14    pshs  x,d
1A6D C61D             (    supercomm.asm):02732                  ldb   #SS.Break      Send a BREAK signal
1A6F 9630             (    supercomm.asm):02733                  lda   <u002B         Get modem path
1A71 103F8E           (    supercomm.asm):02734                  os9   I$SetStt       Send BREAK to modem
1A74 240C             (    supercomm.asm):02735                  bcc   L1D2D          Did it, return without error
1A76 9E16             (    supercomm.asm):02736                  ldx   <u0011         If modem Driver doesn't support SS.Break call,
1A78 A602             (    supercomm.asm):02737                  lda   2,x              force it on hardware (assumes 6551 card)
1A7A 8A0C             (    supercomm.asm):02738                  ora   #%00001100
1A7C A702             (    supercomm.asm):02739                  sta   2,x
1A7E 94F8             (    supercomm.asm):02740                  anda  <u00F3
1A80 A702             (    supercomm.asm):02741                  sta   2,x
1A82 3596             (    supercomm.asm):02742         L1D2D    puls  pc,x,d
                      (    supercomm.asm):02743         
1A84 0013             (    supercomm.asm):02744         L063D    fdb   19             # bytes this message
1A86 0A0D             (    supercomm.asm):02745                  fcb   C$LF,C$CR
1A88 2042617564205261 (    supercomm.asm):02746                  fcc   ' Baud Rate:      '
     74653A2020202020
     20
                      (    supercomm.asm):02747         
                      (    supercomm.asm):02748         * 12 backspaces
1A99 080808080808     (    supercomm.asm):02749         L03CA    fcb   C$BSP,C$BSP,C$BSP,C$BSP,C$BSP,C$BSP
1A9F 080808080808     (    supercomm.asm):02750                  fcb   C$BSP,C$BSP,C$BSP,C$BSP,C$BSP,C$BSP
                      (    supercomm.asm):02751         
1AA5 3131302020       (    supercomm.asm):02752         L0652    fcc   '110  '
1AAA 3330302020       (    supercomm.asm):02753                  fcc   '300  '
1AAF 3630302020       (    supercomm.asm):02754                  fcc   '600  '
1AB4 3132303020       (    supercomm.asm):02755                  fcc   '1200 '
1AB9 3234303020       (    supercomm.asm):02756                  fcc   '2400 '
1ABE 3438303020       (    supercomm.asm):02757                  fcc   '4800 '
1AC3 3936303020       (    supercomm.asm):02758                  fcc   '9600 '
1AC8 3139323030       (    supercomm.asm):02759                  fcc   '19200'
                      (    supercomm.asm):02760         
                      (    supercomm.asm):02761         * <ALT>-<B> Baud rate
1ACD 3436             (    supercomm.asm):02762         L1D2F    pshs  y,x,d
1ACF 308DE99E         (    supercomm.asm):02763                  leax  >L048F,pc      Cursor OFF
1AD3 17FDB6           (    supercomm.asm):02764                  lbsr  L1B03
1AD6 CC1E03           (    supercomm.asm):02765                  ldd   #$1E03         Set start coords & size of overlay window
1AD9 FD0C91           (    supercomm.asm):02766                  std   >u0C8F
1ADC CC1203           (    supercomm.asm):02767                  ldd   #$1203
1ADF FD0C93           (    supercomm.asm):02768                  std   >u0C91
1AE2 17FEFF           (    supercomm.asm):02769                  lbsr  L1C81          Put shadowed overlay on screen
1AE5 308C9C           (    supercomm.asm):02770                  leax  <L063D,pc      Print 'Baud Rate:'
1AE8 17FDA1           (    supercomm.asm):02771                  lbsr  L1B03
1AEB F60CA7           (    supercomm.asm):02772                  ldb   >u0CA5         Get word len/stop bits/baud rate
1AEE C407             (    supercomm.asm):02773                  andb  #%00000111     Just want baud rate
1AF0 F70C88           (    supercomm.asm):02774         L1D56    stb   >u0C84         Save baud rate
1AF3 308CA3           (    supercomm.asm):02775                  leax  <L03CA,pc      Point to 10 C$BSP's
1AF6 108E0005         (    supercomm.asm):02776                  ldy   #$0005         Send out 5 backspaces???
1AFA 8601             (    supercomm.asm):02777                  lda   #1
1AFC 103F8A           (    supercomm.asm):02778                  os9   I$Write  
1AFF 308CA3           (    supercomm.asm):02779                  leax  <L0652,pc      Point to baud rate table
1B02 8605             (    supercomm.asm):02780                  lda   #$05           Point to current baud rate string
1B04 F60C88           (    supercomm.asm):02781                  ldb   >u0C84
1B07 3D               (    supercomm.asm):02782                  mul   
1B08 308B             (    supercomm.asm):02783                  leax  d,x
1B0A 8601             (    supercomm.asm):02784                  lda   #$01           Write it out
1B0C 108E0005         (    supercomm.asm):02785                  ldy   #$0005
1B10 103F8A           (    supercomm.asm):02786                  os9   I$Write  
1B13 170BB8           (    supercomm.asm):02787         L1D7D    lbsr  L2ABC          ???
1B16 810D             (    supercomm.asm):02788                  cmpa  #C$CR          Carriage return?
1B18 2713             (    supercomm.asm):02789                  beq   L1D9B          Yes, skip ahead
1B1A 8105             (    supercomm.asm):02790                  cmpa  #$05           <CTRL>-<E> (BREAK)?
1B1C 270F             (    supercomm.asm):02791                  beq   L1D9B          Yes, skip ahead
1B1E 8120             (    supercomm.asm):02792                  cmpa  #C$SPAC        <SPACE> (next baud)?
1B20 26F1             (    supercomm.asm):02793                  bne   L1D7D          No, go get another key since current is illegal
1B22 F60C88           (    supercomm.asm):02794                  ldb   >u0C84         Get baud rate
1B25 5C               (    supercomm.asm):02795                  incb                 Bump up to next one
1B26 C108             (    supercomm.asm):02796                  cmpb  #8             Wrap past 19200?
1B28 26C6             (    supercomm.asm):02797                  bne   L1D56          No, go update baud rate on screen
1B2A 5F               (    supercomm.asm):02798                  clrb                 Reset baud to 110
1B2B 20C3             (    supercomm.asm):02799                  bra   L1D56          Go update baud rate on screen
                      (    supercomm.asm):02800         
1B2D F60CA7           (    supercomm.asm):02801         L1D9B    ldb   >u0CA5         Get stop bits/word len/baud rate
1B30 C4F8             (    supercomm.asm):02802                  andb  #%11111000     Mask out the baud rate
1B32 FA0C88           (    supercomm.asm):02803                  orb   >u0C84         Merge new baud rate
1B35 F70CA7           (    supercomm.asm):02804                  stb   >u0CA5         Save as new setting
1B38 17FEFC           (    supercomm.asm):02805                  lbsr  L1CDE          Remove overlay windows
1B3B 17F507           (    supercomm.asm):02806                  lbsr  L118F          Update port settings & status line
1B3E 308DE92B         (    supercomm.asm):02807                  leax  >L048B,pc      Turn cursor ON
1B42 17FD47           (    supercomm.asm):02808                  lbsr  L1B03
1B45 35B6             (    supercomm.asm):02809                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):02810         
                      (    supercomm.asm):02811         * ==> Menu handler
                      (    supercomm.asm):02812         * Entry: B=current menu # (0 base) selected
                      (    supercomm.asm):02813         * u0C84 : current menu # selected
                      (    supercomm.asm):02814         * u139E : Max. # items on menu
1B47 3432             (    supercomm.asm):02815         L1DB8    pshs  y,x,a          Preserve regs
1B49 7F009E           (    supercomm.asm):02816                  clr   >u0099         
1B4C F70C88           (    supercomm.asm):02817                  stb   >u0C84         Save current menu item # selected
1B4F 8E13AB           (    supercomm.asm):02818                  ldx   #u13A9         Point to temp buffer
1B52 CC1B25           (    supercomm.asm):02819                  ldd   #$1B25         CWArea prefix
1B55 ED84             (    supercomm.asm):02820                  std   ,x             Save it
1B57 CC0102           (    supercomm.asm):02821                  ldd   #$0102         Start X,Y = 1,2
1B5A ED02             (    supercomm.asm):02822                  std   2,x
1B5C 8604             (    supercomm.asm):02823                  lda   #$04           Width=4
1B5E F613A0           (    supercomm.asm):02824                  ldb   >u139E         Height=# entries in menu (0 base)
1B61 5C               (    supercomm.asm):02825                  incb                 +1
1B62 ED04             (    supercomm.asm):02826                  std   4,x            Save it
1B64 8601             (    supercomm.asm):02827                  lda   #$01           Change working area of window
1B66 108E0006         (    supercomm.asm):02828                  ldy   #$0006
1B6A 103F8A           (    supercomm.asm):02829                  os9   I$Write  
1B6D F60C88           (    supercomm.asm):02830                  ldb   >u0C84         Get B back
1B70 4F               (    supercomm.asm):02831         L1DE6    clra                 D=B+1
1B71 5C               (    supercomm.asm):02832                  incb  
1B72 1F02             (    supercomm.asm):02833                  tfr   d,y            Move to Y
1B74 308DEAB5         (    supercomm.asm):02834                  leax  >L0688,pc      Clear working area & print Y # line feeds
1B78 4C               (    supercomm.asm):02835                  inca                 A=1 (Std Out)
1B79 103F8A           (    supercomm.asm):02836                  os9   I$Write        
1B7C 308DEAB8         (    supercomm.asm):02837                  leax  >L0693,pc      Point to '==>' cursor
1B80 108E0003         (    supercomm.asm):02838                  ldy   #$0003         Write that out
1B84 103F8A           (    supercomm.asm):02839                  os9   I$Write  
1B87 170B4C           (    supercomm.asm):02840         L1DFE    lbsr  L2AC5          Go get key
1B8A 847F             (    supercomm.asm):02841                  anda  #$7F           Mask out high bit
1B8C 810A             (    supercomm.asm):02842                  cmpa  #C$LF          Down arrow?
1B8E 2717             (    supercomm.asm):02843                  beq   L1E19          Yes, skip ahead
1B90 810C             (    supercomm.asm):02844                  cmpa  #C$FORM        Up arrow?
1B92 2722             (    supercomm.asm):02845                  beq   L1E2B          Yes, skip ahead
1B94 8120             (    supercomm.asm):02846                  cmpa  #C$SPAC        Space bar?
1B96 270A             (    supercomm.asm):02847                  beq   L1E39          Yes, get menu item selected & exit
1B98 8105             (    supercomm.asm):02848                  cmpa  #$05           <CTRL>-<E> or <BREAK>?
1B9A 2726             (    supercomm.asm):02849                  beq   L1E3F
1B9C 810D             (    supercomm.asm):02850                  cmpa  #C$CR          Carriage return?
1B9E 26E7             (    supercomm.asm):02851                  bne   L1DFE          No, other keys illegal: go get another key
1BA0 0C9E             (    supercomm.asm):02852         L1E4A    inc   <u0099         Flag that a change was made?
1BA2 F60C88           (    supercomm.asm):02853         L1E39    ldb   >u0C84         Get menu item # selected
1BA5 35B2             (    supercomm.asm):02854                  puls  pc,y,x,a       Restore regs & return
                      (    supercomm.asm):02855         
                      (    supercomm.asm):02856         * Down arrow in ==> menu
1BA7 F60C88           (    supercomm.asm):02857         L1E19    ldb   >u0C84         Get current menu #
1BAA 5C               (    supercomm.asm):02858                  incb                 Bump up
1BAB F113A0           (    supercomm.asm):02859                  cmpb  >u139E         Past maximum
1BAE 2501             (    supercomm.asm):02860                  blo   L1E25          No, skip ahead
1BB0 5F               (    supercomm.asm):02861                  clrb                 Reset to menu item #0
1BB1 F70C88           (    supercomm.asm):02862         L1E25    stb   >u0C84         Save new menu item selected
1BB4 20BA             (    supercomm.asm):02863                  bra   L1DE6          Update menu arrow & get next key
                      (    supercomm.asm):02864         
                      (    supercomm.asm):02865         * Up arrow in ==> menu
1BB6 F60C88           (    supercomm.asm):02866         L1E2B    ldb   >u0C84         Get current menu #
1BB9 5A               (    supercomm.asm):02867                  decb                 Bump down
1BBA 2AF5             (    supercomm.asm):02868                  bpl   L1E25          If still legit, save it & update menu arrow
1BBC F613A0           (    supercomm.asm):02869                  ldb   >u139E         Get # items in menu
1BBF 5A               (    supercomm.asm):02870                  decb                 Make base 0
1BC0 20EF             (    supercomm.asm):02871                  bra   L1E25          Save & update menu arrow
                      (    supercomm.asm):02872         
                      (    supercomm.asm):02873         * <CTRL>-<E> / <BREAK>
1BC2 F613A0           (    supercomm.asm):02874         L1E3F    ldb   >u139E         Get # items in menu
1BC5 5C               (    supercomm.asm):02875                  incb                 +1 (to flag cancel?)
1BC6 F70C88           (    supercomm.asm):02876                  stb   >u0C84         Save as current menu item selected
1BC9 35B2             (    supercomm.asm):02877                  puls  pc,y,x,a       Restore & return
                      (    supercomm.asm):02878         
                      (    supercomm.asm):02879         * Select terminal type (<ALT>-<T>)
1BCB 3436             (    supercomm.asm):02880         L1E50    pshs  y,x,d          Preserve regs
1BCD 308DE8A0         (    supercomm.asm):02881                  leax  >L048F,pc      Cursor OFF
1BD1 17FCB8           (    supercomm.asm):02882                  lbsr  L1B03
1BD4 CC1C03           (    supercomm.asm):02883                  ldd   #$1C03         Set up shadowed overlay window 23x3
1BD7 FD0C91           (    supercomm.asm):02884                  std   >u0C8F
1BDA CC1703           (    supercomm.asm):02885                  ldd   #$1703
1BDD FD0C93           (    supercomm.asm):02886                  std   >u0C91
1BE0 17FE01           (    supercomm.asm):02887                  lbsr  L1C81
1BE3 308DEA54         (    supercomm.asm):02888                  leax  >L0696,pc      'Terminal type'
1BE7 17FCA2           (    supercomm.asm):02889                  lbsr  L1B03
1BEA F60CA8           (    supercomm.asm):02890                  ldb   >u0CA6         Get current terminal type
1BED F70C88           (    supercomm.asm):02891         L1E75    stb   >u0C84         Save as # entries in menu
1BF0 308DFEA5         (    supercomm.asm):02892                  leax  >L03CA,pc      Point to Backspaces
1BF4 8601             (    supercomm.asm):02893                  lda   #$01           Blank out 5 chars
1BF6 108E0005         (    supercomm.asm):02894                  ldy   #$0005
1BFA 103F8A           (    supercomm.asm):02895                  os9   I$Write  
1BFD 308DEA54         (    supercomm.asm):02896                  leax  >L06B0,pc      Point to terminal type table
1C01 8605             (    supercomm.asm):02897                  lda   #$05           Calculate offset to currently selected type
1C03 F60C88           (    supercomm.asm):02898                  ldb   >u0C84
1C06 3D               (    supercomm.asm):02899                  mul   
1C07 308B             (    supercomm.asm):02900                  leax  d,x
1C09 108E0005         (    supercomm.asm):02901                  ldy   #$0005         Print it out
1C0D 8601             (    supercomm.asm):02902                  lda   #$01
1C0F 103F8A           (    supercomm.asm):02903                  os9   I$Write  
1C12 170AB9           (    supercomm.asm):02904         L1E9C    lbsr  L2ABC          Go get keypress
1C15 810D             (    supercomm.asm):02905                  cmpa  #C$CR          Carriage return (keep new setting)?
1C17 2713             (    supercomm.asm):02906                  beq   L1EBA          Yes, go process
1C19 8105             (    supercomm.asm):02907                  cmpa  #$05           <CTRL>-<E> or <BREAK>?
1C1B 270F             (    supercomm.asm):02908                  beq   L1EBA          Yes, go process
1C1D 8120             (    supercomm.asm):02909                  cmpa  #C$SPAC        <SPACE> (change setting)?
1C1F 26F1             (    supercomm.asm):02910                  bne   L1E9C          No, illegal key, try again
1C21 F60C88           (    supercomm.asm):02911                  ldb   >u0C84         Get terminal type
1C24 5C               (    supercomm.asm):02912                  incb                 Bump up to next one
1C25 C103             (    supercomm.asm):02913                  cmpb  #3             Past maximum?
1C27 26C4             (    supercomm.asm):02914                  bne   L1E75          No, go print new selection & back to menu handler
1C29 5F               (    supercomm.asm):02915                  clrb                 Reset to 1st & back to menu handler
1C2A 20C1             (    supercomm.asm):02916                  bra   L1E75
                      (    supercomm.asm):02917         
1C2C F60C88           (    supercomm.asm):02918         L1EBA    ldb   >u0C84         Get selected terminal type
1C2F F70CA8           (    supercomm.asm):02919                  stb   >u0CA6         Save as new terminal type
1C32 17FD1F           (    supercomm.asm):02920                  lbsr  L1BDF          Go reset palettes for new terminal type
1C35 17FDFF           (    supercomm.asm):02921                  lbsr  L1CDE          Remove overlay windows
1C38 17FD81           (    supercomm.asm):02922                  lbsr  L1C57          Go set fore/back/border colors
1C3B 8D0F             (    supercomm.asm):02923                  bsr   L1EDC          Go clear the screen
1C3D 0D45             (    supercomm.asm):02924                  tst   <u0040         Is conference mode active?
1C3F 2702             (    supercomm.asm):02925                  beq   L1ED3          No, skip ahead
1C41 8D11             (    supercomm.asm):02926                  bsr   L1EE5          Yes, reset up conference mode window
1C43 308DE826         (    supercomm.asm):02927         L1ED3    leax  >L048B,pc      Cursor ON
1C47 17FC42           (    supercomm.asm):02928                  lbsr  L1B03
1C4A 35B6             (    supercomm.asm):02929                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):02930         
                      (    supercomm.asm):02931         * Clear screen
1C4C 3402             (    supercomm.asm):02932         L1EDC    pshs  a              Preserve A
1C4E 860C             (    supercomm.asm):02933                  lda   #C$FORM        Clear screen code
1C50 8D26             (    supercomm.asm):02934                  bsr   L1F0B          Write it out
1C52 3582             (    supercomm.asm):02935                  puls  pc,a           Restore & return
                      (    supercomm.asm):02936         
                      (    supercomm.asm):02937         * Setup conference mode again
1C54 3436             (    supercomm.asm):02938         L1EE5    pshs  y,x,d          Preserve regs
1C56 8E13AB           (    supercomm.asm):02939                  ldx   #u13A9         Point to buffer
1C59 CC1B25           (    supercomm.asm):02940                  ldd   #$1B25         CWArea prefix
1C5C ED84             (    supercomm.asm):02941                  std   ,x
1C5E CC0000           (    supercomm.asm):02942                  ldd   #$0000         Start @ 0,0
1C61 ED02             (    supercomm.asm):02943                  std   2,x
1C63 CC5003           (    supercomm.asm):02944                  ldd   #$5003         80x3 size
1C66 ED04             (    supercomm.asm):02945                  std   4,x
1C68 8601             (    supercomm.asm):02946                  lda   #1             Home Cursor
1C6A A706             (    supercomm.asm):02947                  sta   6,x
1C6C 108E0007         (    supercomm.asm):02948                  ldy   #$0007         Send CWArea/Home cursor to conference window
1C70 9644             (    supercomm.asm):02949                  lda   <u003F
1C72 103F8A           (    supercomm.asm):02950                  os9   I$Write  
1C75 16069D           (    supercomm.asm):02951                  lbra  L268D          Go print '---'... line etc. for conference mode
                      (    supercomm.asm):02952         
                      (    supercomm.asm):02953         * Print char in A to Std Out
1C78 3436             (    supercomm.asm):02954         L1F0B    pshs  y,x,d          Preserve regs & char to print
1C7A 30E4             (    supercomm.asm):02955                  leax  ,s             Point to char
1C7C 108E0001         (    supercomm.asm):02956                  ldy   #$0001         Write it out
1C80 8601             (    supercomm.asm):02957                  lda   #$01
1C82 103F8A           (    supercomm.asm):02958                  os9   I$Write  
1C85 35B6             (    supercomm.asm):02959                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):02960         
                      (    supercomm.asm):02961         * <ALT>-<O> Options menu
1C87 3436             (    supercomm.asm):02962         L1F1D    pshs  y,x,d          Preserve regs
1C89 308DE7E4         (    supercomm.asm):02963                  leax  L048F,pc       Cursor OFF
1C8D 17FBFC           (    supercomm.asm):02964                  lbsr  L1B03
1C90 CC1F03           (    supercomm.asm):02965                  ldd   #$1F03         Do shadowed overlay of 31x3
1C93 FD0C91           (    supercomm.asm):02966                  std   >u0C8F
1C96 CC160E           (    supercomm.asm):02967                  ldd   #$160E
1C99 FD0C93           (    supercomm.asm):02968                  std   >u0C91
1C9C 17FD45           (    supercomm.asm):02969                  lbsr  L1C81
1C9F 308DEB23         (    supercomm.asm):02970                  leax  L0821,pc       Print out Options menu
1CA3 17FBE6           (    supercomm.asm):02971                  lbsr  L1B03
1CA6 170170           (    supercomm.asm):02972                  lbsr  L20DB          Print Echo status
1CA9 170196           (    supercomm.asm):02973                  lbsr  L2108          Print Rx LF status
1CAC 1701A0           (    supercomm.asm):02974                  lbsr  L2118          Print Tx LF status
1CAF 170183           (    supercomm.asm):02975                  lbsr  L20F8          Print Key click status
1CB2 170249           (    supercomm.asm):02976                  lbsr  L21D5          Print Word Length setting
1CB5 1701EA           (    supercomm.asm):02977                  lbsr  L2174          Print Parity setting
1CB8 17022B           (    supercomm.asm):02978                  lbsr  L21B9          Print Stop bits setting
1CBB 17019E           (    supercomm.asm):02979                  lbsr  L2128          Print Host Echo setting
1CBE 1701A8           (    supercomm.asm):02980                  lbsr  L2138          Print Hangup type setting
1CC1 1701B2           (    supercomm.asm):02981                  lbsr  L2148          Print Auto-Zmodem setting
1CC4 1701BD           (    supercomm.asm):02982                  lbsr  L2158          Print Auto-ASCII setting
1CC7 860B             (    supercomm.asm):02983                  lda   #$0B           Get # items on menu
1CC9 B713A0           (    supercomm.asm):02984                  sta   >u139E         Save for ==> menu handler
1CCC 5F               (    supercomm.asm):02985                  clrb                 Default to menu item #0
1CCD 17FE77           (    supercomm.asm):02986         L1F66    lbsr  L1DB8          Go get menu selection
1CD0 8E13AB           (    supercomm.asm):02987                  ldx   #u13A9
1CD3 CC1B25           (    supercomm.asm):02988                  ldd   #$1B25         CWArea
1CD6 ED84             (    supercomm.asm):02989                  std   ,x
1CD8 CC0000           (    supercomm.asm):02990                  ldd   #$0000         from 0,0
1CDB ED02             (    supercomm.asm):02991                  std   2,x
1CDD CC160E           (    supercomm.asm):02992                  ldd   #$160E         to 22,14 (on overlay window)
1CE0 ED04             (    supercomm.asm):02993                  std   4,x
1CE2 108E0006         (    supercomm.asm):02994                  ldy   #$0006
1CE6 8601             (    supercomm.asm):02995                  lda   #$01
1CE8 103F8A           (    supercomm.asm):02996                  os9   I$Write  
1CEB 0D9E             (    supercomm.asm):02997                  tst   <u0099         Any entry change?
1CED 1026011C         (    supercomm.asm):02998                  lbne  L20CF          No, remove Options menu & return
1CF1 F60C88           (    supercomm.asm):02999                  ldb   >u0C84         Get menu item # that was changed
1CF4 C10A             (    supercomm.asm):03000                  cmpb  #$0A           Was it <CTRL>-<E>/BREAK (1 higher than max)?
1CF6 10220113         (    supercomm.asm):03001                  lbhi  L20CF          Yes, remove Options menu & return
1CFA 5D               (    supercomm.asm):03002                  tstb                 Was it Echo status?
1CFB 260D             (    supercomm.asm):03003                  bne   L1FAB          No, try next
1CFD B60CA9           (    supercomm.asm):03004                  lda   >u0CA7         Get echo type
1D00 2605             (    supercomm.asm):03005                  bne   L1FA7          If 1, change to 0
1D02 7C0CA9           (    supercomm.asm):03006                  inc   >u0CA7         If 0, change to 1
1D05 2003             (    supercomm.asm):03007                  bra   L1FAB
                      (    supercomm.asm):03008         
1D07 7F0CA9           (    supercomm.asm):03009         L1FA7    clr   >u0CA7
1D0A 17010C           (    supercomm.asm):03010         L1FAB    lbsr  L20DB          Print setting (0=Off, 1=On)
1D0D C103             (    supercomm.asm):03011                  cmpb  #$03
1D0F 260D             (    supercomm.asm):03012                  bne   L1FC2
1D11 B60CAC           (    supercomm.asm):03013                  lda   >u0CAA
1D14 2605             (    supercomm.asm):03014                  bne   L1FBE
1D16 7C0CAC           (    supercomm.asm):03015                  inc   >u0CAA
1D19 2003             (    supercomm.asm):03016                  bra   L1FC2
                      (    supercomm.asm):03017         
1D1B 7F0CAC           (    supercomm.asm):03018         L1FBE    clr   >u0CAA
1D1E 170114           (    supercomm.asm):03019         L1FC2    lbsr  L20F8
1D21 C107             (    supercomm.asm):03020                  cmpb  #$07
1D23 260D             (    supercomm.asm):03021                  bne   L1FD9
1D25 B60CB3           (    supercomm.asm):03022                  lda   >u0CB1
1D28 2605             (    supercomm.asm):03023                  bne   L1FD5
1D2A 7C0CB3           (    supercomm.asm):03024                  inc   >u0CB1
1D2D 2003             (    supercomm.asm):03025                  bra   L1FD9
                      (    supercomm.asm):03026         
1D2F 7F0CB3           (    supercomm.asm):03027         L1FD5    clr   >u0CB1
1D32 170127           (    supercomm.asm):03028         L1FD9    lbsr  L2128
1D35 17F30D           (    supercomm.asm):03029                  lbsr  L118F
1D38 C105             (    supercomm.asm):03030                  cmpb  #$05
1D3A 2623             (    supercomm.asm):03031                  bne   L200C
1D3C B60CAE           (    supercomm.asm):03032                  lda   >u0CAC
1D3F 84E0             (    supercomm.asm):03033                  anda  #$E0
1D41 4D               (    supercomm.asm):03034                  tsta
1D42 2720             (    supercomm.asm):03035                  beq   L2011
1D44 81E0             (    supercomm.asm):03036                  cmpa  #$E0
1D46 2720             (    supercomm.asm):03037                  beq   L2015
1D48 8B40             (    supercomm.asm):03038                  adda  #$40
1D4A 3404             (    supercomm.asm):03039         L1FF3    pshs  b
1D4C F60CAE           (    supercomm.asm):03040                  ldb   >u0CAC
1D4F C41F             (    supercomm.asm):03041                  andb  #$1F
1D51 F70CAE           (    supercomm.asm):03042                  stb   >u0CAC
1D54 3504             (    supercomm.asm):03043                  puls  b
1D56 BA0CAE           (    supercomm.asm):03044                  ora   >u0CAC
1D59 B70CAE           (    supercomm.asm):03045                  sta   >u0CAC
1D5C 17F2E6           (    supercomm.asm):03046                  lbsr  L118F
1D5F 170140           (    supercomm.asm):03047         L200C    lbsr  L2174
1D62 2007             (    supercomm.asm):03048                  bra   L2018
                      (    supercomm.asm):03049         
1D64 8B20             (    supercomm.asm):03050         L2011    adda  #$20
1D66 20E2             (    supercomm.asm):03051                  bra   L1FF3
                      (    supercomm.asm):03052         
1D68 4F               (    supercomm.asm):03053         L2015    clra  
1D69 20DF             (    supercomm.asm):03054                  bra   L1FF3
                      (    supercomm.asm):03055         
1D6B C106             (    supercomm.asm):03056         L2018    cmpb  #$06
1D6D 2614             (    supercomm.asm):03057                  bne   L2032
1D6F B60CA7           (    supercomm.asm):03058                  lda   >u0CA5
1D72 2A04             (    supercomm.asm):03059                  bpl   L2026
1D74 847F             (    supercomm.asm):03060                  anda  #$7F
1D76 2002             (    supercomm.asm):03061                  bra   L2028
                      (    supercomm.asm):03062         
1D78 8A80             (    supercomm.asm):03063         L2026    ora   #$80
1D7A B70CA7           (    supercomm.asm):03064         L2028    sta   >u0CA5
1D7D 17F2C5           (    supercomm.asm):03065                  lbsr  L118F
1D80 170163           (    supercomm.asm):03066                  lbsr  L21B9
1D83 C104             (    supercomm.asm):03067         L2032    cmpb  #$04
1D85 2616             (    supercomm.asm):03068                  bne   L204E
1D87 B60CA7           (    supercomm.asm):03069                  lda   >u0CA5
1D8A 8520             (    supercomm.asm):03070                  bita  #$20
1D8C 2704             (    supercomm.asm):03071                  beq   L2042
1D8E 84DF             (    supercomm.asm):03072                  anda  #$DF
1D90 2002             (    supercomm.asm):03073                  bra   L2044
                      (    supercomm.asm):03074         
1D92 8A20             (    supercomm.asm):03075         L2042    ora   #$20
1D94 B70CA7           (    supercomm.asm):03076         L2044    sta   >u0CA5
1D97 17F2AB           (    supercomm.asm):03077                  lbsr  L118F
1D9A 170161           (    supercomm.asm):03078                  lbsr  L21D5
1D9D C101             (    supercomm.asm):03079         L204E    cmpb  #$01
1D9F 260D             (    supercomm.asm):03080                  bne   L2062
1DA1 B60CAA           (    supercomm.asm):03081                  lda   >u0CA8
1DA4 2605             (    supercomm.asm):03082                  bne   L205E
1DA6 7C0CAA           (    supercomm.asm):03083                  inc   >u0CA8
1DA9 2003             (    supercomm.asm):03084                  bra   L2062
                      (    supercomm.asm):03085         
1DAB 7F0CAA           (    supercomm.asm):03086         L205E    clr   >u0CA8
1DAE 170091           (    supercomm.asm):03087         L2062    lbsr  L2108
1DB1 C102             (    supercomm.asm):03088                  cmpb  #$02
1DB3 2610             (    supercomm.asm):03089                  bne   L207C
1DB5 B60CAB           (    supercomm.asm):03090                  lda   >u0CA9
1DB8 2605             (    supercomm.asm):03091                  bne   L2075
1DBA 7C0CAB           (    supercomm.asm):03092                  inc   >u0CA9
1DBD 2006             (    supercomm.asm):03093                  bra   L207C
                      (    supercomm.asm):03094         
1DBF 7F0CAB           (    supercomm.asm):03095         L2075    clr   >u0CA9
1DC2 17F280           (    supercomm.asm):03096                  lbsr  L118F
1DC5 170087           (    supercomm.asm):03097         L207C    lbsr  L2118
1DC8 C108             (    supercomm.asm):03098                  cmpb  #$08
1DCA 260D             (    supercomm.asm):03099                  bne   L2093
1DCC 7D0CAD           (    supercomm.asm):03100                  tst   >u0CAB
1DCF 2605             (    supercomm.asm):03101                  bne   L208F
1DD1 7C0CAD           (    supercomm.asm):03102                  inc   >u0CAB
1DD4 2003             (    supercomm.asm):03103                  bra   L2093
                      (    supercomm.asm):03104         
1DD6 7F0CAD           (    supercomm.asm):03105         L208F    clr   >u0CAB
1DD9 1700A8           (    supercomm.asm):03106         L2093    lbsr  L2158
1DDC C109             (    supercomm.asm):03107                  cmpb  #$09
1DDE 260D             (    supercomm.asm):03108                  bne   L20AA
1DE0 7D0CB0           (    supercomm.asm):03109                  tst   >u0CAE
1DE3 2605             (    supercomm.asm):03110                  bne   L20A6
1DE5 7C0CB0           (    supercomm.asm):03111                  inc   >u0CAE
1DE8 2003             (    supercomm.asm):03112                  bra   L20AA
                      (    supercomm.asm):03113         
1DEA 7F0CB0           (    supercomm.asm):03114         L20A6    clr   >u0CAE
1DED 170086           (    supercomm.asm):03115         L20AA    lbsr  L2148
1DF0 C10A             (    supercomm.asm):03116                  cmpb  #$0A
1DF2 260D             (    supercomm.asm):03117                  bne   L20C1
1DF4 7D0CAF           (    supercomm.asm):03118                  tst   >u0CAD
1DF7 2605             (    supercomm.asm):03119                  bne   L20BD
1DF9 7C0CAF           (    supercomm.asm):03120                  inc   >u0CAD
1DFC 2003             (    supercomm.asm):03121                  bra   L20C1
                      (    supercomm.asm):03122         
1DFE 7F0CAF           (    supercomm.asm):03123         L20BD    clr   >u0CAD
1E01 8D66             (    supercomm.asm):03124         L20C1    bsr   L2138
1E03 C10A             (    supercomm.asm):03125                  cmpb  #$0A
1E05 2206             (    supercomm.asm):03126                  bhi   L20CF
1E07 F60C88           (    supercomm.asm):03127                  ldb   >u0C84
1E0A 16FEC0           (    supercomm.asm):03128                  lbra  L1F66
                      (    supercomm.asm):03129         
1E0D 17FC27           (    supercomm.asm):03130         L20CF    lbsr  L1CDE          Turn off overlay windows
1E10 308DE659         (    supercomm.asm):03131                  leax  >L048B,pc      Point to Cursor On
1E14 17FA75           (    supercomm.asm):03132                  lbsr  L1B03          Print it
1E17 35B6             (    supercomm.asm):03133                  puls  pc,y,x,d       Restore regs & return
                      (    supercomm.asm):03134         
1E19 3416             (    supercomm.asm):03135         L20DB    pshs  x,d
1E1B CC1102           (    supercomm.asm):03136                  ldd   #$1102
1E1E 170177           (    supercomm.asm):03137                  lbsr  L2294
1E21 B60CA9           (    supercomm.asm):03138                  lda   >u0CA7
1E24 2609             (    supercomm.asm):03139         L20E7    bne   L20F2
1E26 308DEAFA         (    supercomm.asm):03140         L20E9    leax  >L0985,pc      Point to word 'Off'
1E2A 17FA5F           (    supercomm.asm):03141         L20ED    lbsr  L1B03          Print it
1E2D 3596             (    supercomm.asm):03142                  puls  pc,x,d
                      (    supercomm.asm):03143         
1E2F 308DEAF7         (    supercomm.asm):03144         L20F2    leax  >L098B,pc      Point to word 'On'
1E33 20F5             (    supercomm.asm):03145                  bra   L20ED
                      (    supercomm.asm):03146         
1E35 3416             (    supercomm.asm):03147         L20F8    pshs  x,d
1E37 CC1105           (    supercomm.asm):03148                  ldd   #$1105
1E3A 17015B           (    supercomm.asm):03149                  lbsr  L2294
1E3D B60CAC           (    supercomm.asm):03150                  lda   >u0CAA
1E40 20E2             (    supercomm.asm):03151                  bra   L20E7          Go print 'on' or 'off'
                      (    supercomm.asm):03152         
1E42 3416             (    supercomm.asm):03153         L2108    pshs  x,d
1E44 CC1103           (    supercomm.asm):03154                  ldd   #$1103
1E47 17014E           (    supercomm.asm):03155                  lbsr  L2294
1E4A B60CAA           (    supercomm.asm):03156                  lda   >u0CA8
1E4D 20D5             (    supercomm.asm):03157                  bra   L20E7          Go print 'on' or 'off'
                      (    supercomm.asm):03158         
1E4F 3416             (    supercomm.asm):03159         L2118    pshs  x,d
1E51 CC1104           (    supercomm.asm):03160                  ldd   #$1104
1E54 170141           (    supercomm.asm):03161                  lbsr  L2294
1E57 B60CAB           (    supercomm.asm):03162                  lda   >u0CA9
1E5A 20C8             (    supercomm.asm):03163                  bra   L20E7          Go print 'on' or 'off'
                      (    supercomm.asm):03164         
1E5C 3416             (    supercomm.asm):03165         L2128    pshs  x,d
1E5E CC1109           (    supercomm.asm):03166                  ldd   #$1109
1E61 170134           (    supercomm.asm):03167                  lbsr  L2294
1E64 B60CB3           (    supercomm.asm):03168                  lda   >u0CB1
1E67 20BB             (    supercomm.asm):03169                  bra   L20E7          Go print 'on' or 'off'
                      (    supercomm.asm):03170         
1E69 3416             (    supercomm.asm):03171         L2138    pshs  x,d
1E6B CC110C           (    supercomm.asm):03172                  ldd   #$110C
1E6E 170127           (    supercomm.asm):03173                  lbsr  L2294
1E71 B60CAF           (    supercomm.asm):03174                  lda   >u0CAD
1E74 20AE             (    supercomm.asm):03175                  bra   L20E7          Go print 'on' or 'off'
                      (    supercomm.asm):03176         
1E76 3416             (    supercomm.asm):03177         L2148    pshs  x,d            Preserve regs
1E78 CC110B           (    supercomm.asm):03178                  ldd   #$110B         CurXY to 17,11 in options window
1E7B 17011A           (    supercomm.asm):03179                  lbsr  L2294
1E7E B60CB0           (    supercomm.asm):03180                  lda   >u0CAE         Get Auto-ZModem flag (0=yes)
1E81 4A               (    supercomm.asm):03181                  deca                 Adjust flag so routine works
1E82 20A0             (    supercomm.asm):03182                  bra   L20E7          Go print 'on' or 'off'
                      (    supercomm.asm):03183                  
1E84 3416             (    supercomm.asm):03184         L2158    pshs  x,d
1E86 CC110A           (    supercomm.asm):03185                  ldd   #$110A
1E89 17010C           (    supercomm.asm):03186                  lbsr  L2294
1E8C B60CAD           (    supercomm.asm):03187                  lda   >u0CAB         Get current hangup method
1E8F 260C             (    supercomm.asm):03188                  bne   L216D          <>0 is +++
1E91 308DEA89         (    supercomm.asm):03189                  leax  >L0979,pc      Point to 'dtr'
1E95 2093             (    supercomm.asm):03190                  bra   L20ED
                      (    supercomm.asm):03191         
1E97 0004             (    supercomm.asm):03192         L097F    fdb   4              # bytes this message
1E99 2B2B2B           (    supercomm.asm):03193         L0981    fcc   '+++'
1E9C 04               (    supercomm.asm):03194                  fcb   4              (Clear to EOL)
                      (    supercomm.asm):03195                  
1E9D 308CF7           (    supercomm.asm):03196         L216D    leax  <L097F,pc      Point to '+++'
1EA0 2088             (    supercomm.asm):03197                  bra   L20ED
                      (    supercomm.asm):03198         
1EA2 3436             (    supercomm.asm):03199         L2174    pshs  y,x,d
1EA4 CC1007           (    supercomm.asm):03200                  ldd   #$1007
1EA7 1700EE           (    supercomm.asm):03201                  lbsr  L2294
1EAA B60CAE           (    supercomm.asm):03202                  lda   >u0CAC
1EAD 84E0             (    supercomm.asm):03203                  anda  #$E0
1EAF 81A0             (    supercomm.asm):03204                  cmpa  #$A0
1EB1 2606             (    supercomm.asm):03205                  bne   L218C
1EB3 308DEA78         (    supercomm.asm):03206                  leax  >L0990,pc      Point to 'Mark'
1EB7 2022             (    supercomm.asm):03207                  bra   L21AE
                      (    supercomm.asm):03208         
1EB9 81E0             (    supercomm.asm):03209         L218C    cmpa  #$E0
1EBB 2606             (    supercomm.asm):03210                  bne   L2196
1EBD 308DEA73         (    supercomm.asm):03211                  leax  >L0995,pc      Point to 'Space'
1EC1 2018             (    supercomm.asm):03212                  bra   L21AE
                      (    supercomm.asm):03213         
1EC3 8160             (    supercomm.asm):03214         L2196    cmpa  #$60
1EC5 2606             (    supercomm.asm):03215                  bne   L21A0
1EC7 308DEA6E         (    supercomm.asm):03216                  leax  >L099A,pc      Point to 'Even'
1ECB 200E             (    supercomm.asm):03217                  bra   L21AE
                      (    supercomm.asm):03218         
1ECD 8120             (    supercomm.asm):03219         L21A0    cmpa  #$20
1ECF 2606             (    supercomm.asm):03220                  bne   L21AA
1ED1 308DEA69         (    supercomm.asm):03221                  leax  >L099F,pc      Point to 'Odd'
1ED5 2004             (    supercomm.asm):03222                  bra   L21AE
                      (    supercomm.asm):03223         
1ED7 308DEA68         (    supercomm.asm):03224         L21AA    leax  >L09A4,pc      Point to 'None'
1EDB 8601             (    supercomm.asm):03225         L21AE    lda   #$01           Std Out
1EDD 108E0005         (    supercomm.asm):03226                  ldy   #$0005         Size of parity string
1EE1 103F8A           (    supercomm.asm):03227                  os9   I$Write        Print it out
1EE4 35B6             (    supercomm.asm):03228                  puls  pc,y,x,d
                      (    supercomm.asm):03229         
                      (    supercomm.asm):03230         * Print current Stop bits setting
1EE6 3416             (    supercomm.asm):03231         L21B9    pshs  x,d
1EE8 CC1208           (    supercomm.asm):03232                  ldd   #$1208         Go position cursor @ 18,8
1EEB 1700AA           (    supercomm.asm):03233                  lbsr  L2294
1EEE B60CA7           (    supercomm.asm):03234                  lda   >u0CA5         Get # stop bits (hi bit)
1EF1 2A04             (    supercomm.asm):03235                  bpl   L21CE
1EF3 8632             (    supercomm.asm):03236                  lda   #'2
1EF5 2002             (    supercomm.asm):03237                  bra   L21D0
                      (    supercomm.asm):03238         
1EF7 8631             (    supercomm.asm):03239         L21CE    lda   #'1
1EF9 17FD7C           (    supercomm.asm):03240         L21D0    lbsr  L1F0B
1EFC 3596             (    supercomm.asm):03241                  puls  pc,x,d
                      (    supercomm.asm):03242         
                      (    supercomm.asm):03243         * Print current Word Length setting
1EFE 3416             (    supercomm.asm):03244         L21D5    pshs  x,d
1F00 CC1206           (    supercomm.asm):03245                  ldd   #$1206         Position cursor @ 18,6
1F03 170092           (    supercomm.asm):03246                  lbsr  L2294
1F06 B60CA7           (    supercomm.asm):03247                  lda   >u0CA5         Get word length
1F09 8520             (    supercomm.asm):03248                  bita  #$20
1F0B 2604             (    supercomm.asm):03249                  bne   L21E9
1F0D 8638             (    supercomm.asm):03250                  lda   #'8
1F0F 2002             (    supercomm.asm):03251                  bra   L21EB
                      (    supercomm.asm):03252         
1F11 8637             (    supercomm.asm):03253         L21E9    lda   #'7
1F13 17FD62           (    supercomm.asm):03254         L21EB    lbsr  L1F0B
1F16 3596             (    supercomm.asm):03255                  puls  pc,x,d
                      (    supercomm.asm):03256         
1F18 818C             (    supercomm.asm):03257         L21F0    cmpa  #$8C           <ALT>-<up arrow>?
1F1A 2605             (    supercomm.asm):03258                  bne   L21F8
1F1C CC4109           (    supercomm.asm):03259                  ldd   #'A*256+9      ANSI/OS9 cursor up codes
1F1F 2047             (    supercomm.asm):03260                  bra   L2239
                      (    supercomm.asm):03261         
1F21 818A             (    supercomm.asm):03262         L21F8    cmpa  #$8A           <ALT>-<down arrow>?
1F23 2605             (    supercomm.asm):03263                  bne   L2200
1F25 CC420A           (    supercomm.asm):03264                  ldd   #'B*256+$A     ANSI/OS9 cursor down codes
1F28 203E             (    supercomm.asm):03265                  bra   L2239
                      (    supercomm.asm):03266         
1F2A 8188             (    supercomm.asm):03267         L2200    cmpa  #$88           <ALT>-<left arrow>?
1F2C 2605             (    supercomm.asm):03268                  bne   L2208
1F2E CC4408           (    supercomm.asm):03269                  ldd   #'D*256+8      ANSI/OS9 cursor left code
1F31 2035             (    supercomm.asm):03270                  bra   L2239
                      (    supercomm.asm):03271         
1F33 8189             (    supercomm.asm):03272         L2208    cmpa  #$89           <ALT>-<right arrow>?
1F35 2605             (    supercomm.asm):03273                  bne   L2210
1F37 CC4306           (    supercomm.asm):03274                  ldd   #'C*256+6      ANSI/OS9 cursor right code
1F3A 202C             (    supercomm.asm):03275                  bra   L2239
                      (    supercomm.asm):03276         
1F3C D646             (    supercomm.asm):03277         L2210    ldb   <u0041         Get last key sense byte
1F3E C578             (    supercomm.asm):03278                  bitb  #%01111000     Any of the arrows?
1F40 1027F453         (    supercomm.asm):03279                  lbeq  L1597          No, go check special SuperComm keys
1F44 8113             (    supercomm.asm):03280                  cmpa  #$13           <CTRL>-<up>?
1F46 2605             (    supercomm.asm):03281                  bne   L2221          No, skip ahead
1F48 CC4801           (    supercomm.asm):03282                  ldd   #'H*256+1      ANSI/OS9 Home cursor codes
1F4B 201B             (    supercomm.asm):03283                  bra   L2239
                      (    supercomm.asm):03284         
1F4D 8112             (    supercomm.asm):03285         L2221    cmpa  #$12           <CTRL>-<down>?
1F4F 2605             (    supercomm.asm):03286                  bne   L2229
1F51 CC4B00           (    supercomm.asm):03287                  ldd   #'K*256        ANSI end (screen or line?) / No OS9
1F54 2012             (    supercomm.asm):03288                  bra   L2239
                      (    supercomm.asm):03289         
1F56 8110             (    supercomm.asm):03290         L2229    cmpa  #$10           <CTRL>-<left>?
1F58 2605             (    supercomm.asm):03291                  bne   L2231
1F5A CC5000           (    supercomm.asm):03292                  ldd   #'P*256        ANSI delete char / No OS9
1F5D 2009             (    supercomm.asm):03293                  bra   L2239
                      (    supercomm.asm):03294         
1F5F 8111             (    supercomm.asm):03295         L2231    cmpa  #$11           <CTRL>-<right>?
1F61 1026F432         (    supercomm.asm):03296                  lbne  L1597          No, go check for SuperComm special keys
1F65 CC4000           (    supercomm.asm):03297                  ldd   #'@*256        ANSI insert char / No OS9
1F68 8E04F4           (    supercomm.asm):03298         L2239    ldx   #u04EF         Point to buffer for 3 byte ANSI sequence
1F6B A702             (    supercomm.asm):03299                  sta   2,x            Save as ANSI post byte
1F6D 3404             (    supercomm.asm):03300                  pshs  b              Save OS9 code until ANSI sequence sent
1F6F CC1B5B           (    supercomm.asm):03301                  ldd   #$1B5B         ANSI prefix: <ESC>[
1F72 ED84             (    supercomm.asm):03302                  std   ,x
1F74 9630             (    supercomm.asm):03303                  lda   <u002B         Get path to modem
1F76 108E0003         (    supercomm.asm):03304                  ldy   #$0003
1F7A 103F8A           (    supercomm.asm):03305                  os9   I$Write        Send out the ANSI sequence
1F7D 7D0CA9           (    supercomm.asm):03306                  tst   >u0CA7         ??? Check if we have to do local cursor change
1F80 1027EC5A         (    supercomm.asm):03307                  lbeq  L0C5E          No, go back to main processing loop
1F84 E6E0             (    supercomm.asm):03308                  ldb   ,s+            Get OS9 code back
1F86 1027EC54         (    supercomm.asm):03309                  lbeq  L0C5E          None, return to main processing loop
1F8A E784             (    supercomm.asm):03310                  stb   ,x             Save it in buffer
1F8C 8601             (    supercomm.asm):03311                  lda   #1             Std Out (screen)
1F8E 108E0001         (    supercomm.asm):03312                  ldy   #$0001
1F92 103F8A           (    supercomm.asm):03313                  os9   I$Write        Write out OS9 code
1F95 16EC46           (    supercomm.asm):03314                  lbra  L0C5E          Return to main processing loop
                      (    supercomm.asm):03315         
                      (    supercomm.asm):03316         * Position cursor at A,B
1F98 3436             (    supercomm.asm):03317         L2294    pshs  y,x,d          Preserve regs
1F9A 8E009A           (    supercomm.asm):03318                  ldx   #u0095         Point to buffer area
1F9D 8B20             (    supercomm.asm):03319                  adda  #$20           Bump cursor pos. to OS9 equivalent (+$20)
1F9F CB20             (    supercomm.asm):03320                  addb  #$20
1FA1 ED01             (    supercomm.asm):03321                  std   $01,x          Save OS9 coords
1FA3 8602             (    supercomm.asm):03322                  lda   #$02           CurXY prefix
1FA5 A784             (    supercomm.asm):03323                  sta   ,x             Save that too
1FA7 4A               (    supercomm.asm):03324                  deca                 A=1 (Std Out)
1FA8 108E0003         (    supercomm.asm):03325                  ldy   #$0003         Size of CurXY command
1FAC 103F8A           (    supercomm.asm):03326                  os9   I$Write        Position cursor
1FAF 35B6             (    supercomm.asm):03327                  puls  pc,y,x,d       Restore regs & return
                      (    supercomm.asm):03328         
                      (    supercomm.asm):03329         * Change Data Directory command
1FB1 3436             (    supercomm.asm):03330         L22B1    pshs  y,x,d
1FB3 CC1504           (    supercomm.asm):03331                  ldd   #$1504         Place overlay window from 21,4 to 58,11
1FB6 FD0C91           (    supercomm.asm):03332                  std   >u0C8F
1FB9 CC2507           (    supercomm.asm):03333                  ldd   #$2507
1FBC FD0C93           (    supercomm.asm):03334                  std   >u0C91
1FBF 17FA22           (    supercomm.asm):03335                  lbsr  L1C81
1FC2 308DE538         (    supercomm.asm):03336                  leax  >L051C,pc      Point to 'break aborts'
1FC6 17F8C3           (    supercomm.asm):03337                  lbsr  L1B03
1FC9 CC0102           (    supercomm.asm):03338                  ldd   #$0102         Position cursor @ 1,2
1FCC 8DCA             (    supercomm.asm):03339                  bsr   L2294
1FCE 8601             (    supercomm.asm):03340                  lda   #$01
1FD0 8E0CD4           (    supercomm.asm):03341                  ldx   #u0CD2         Point to current data dir
1FD3 108E0020         (    supercomm.asm):03342                  ldy   #$0020
1FD7 103F8C           (    supercomm.asm):03343                  os9   I$WritLn 
1FDA C61F             (    supercomm.asm):03344                  ldb   #$1F
1FDC 308DE968         (    supercomm.asm):03345                  leax  >L09A9,pc      Point to 'change data dir' message
1FE0 17F8A9           (    supercomm.asm):03346                  lbsr  L1B03
1FE3 17F8FF           (    supercomm.asm):03347                  lbsr  L1B61
1FE6 0D26             (    supercomm.asm):03348                  tst   <u0021
1FE8 261D             (    supercomm.asm):03349                  bne   L230E
1FEA B60613           (    supercomm.asm):03350                  lda   >u060E         Get first char that user typed in
1FED 810D             (    supercomm.asm):03351                  cmpa  #C$CR          If just CR, skip ahead
1FEF 2716             (    supercomm.asm):03352                  beq   L230E
1FF1 8601             (    supercomm.asm):03353                  lda   #READ.         ChgDir in read mode
1FF3 8E0613           (    supercomm.asm):03354                  ldx   #u060E         Point to user-typed directory path
1FF6 103F86           (    supercomm.asm):03355                  os9   I$ChgDir       Change to it
1FF9 2511             (    supercomm.asm):03356                  bcs   L2313          Error, skip ahead
1FFB 8E0613           (    supercomm.asm):03357                  ldx   #u060E         Did it, copy user path list to default path list
1FFE 108E0CD4         (    supercomm.asm):03358                  ldy   #u0CD2
2002 C620             (    supercomm.asm):03359                  ldb   #$20
2004 1708DD           (    supercomm.asm):03360                  lbsr  L2D1E          Copy data
2007 17FA2D           (    supercomm.asm):03361         L230E    lbsr  L1CDE          Overlay Window end
200A 35B6             (    supercomm.asm):03362                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):03363         
                      (    supercomm.asm):03364         * Print error message to user
200C 8607             (    supercomm.asm):03365         L2313    lda   #C$BELL        Beep at user
200E 17FC67           (    supercomm.asm):03366                  lbsr  L1F0B
2011 3404             (    supercomm.asm):03367                  pshs  b
2013 CC0D02           (    supercomm.asm):03368                  ldd   #$0D02         CurXY @ 13,2
2016 17FF7F           (    supercomm.asm):03369                  lbsr  L2294
2019 308DE454         (    supercomm.asm):03370                  leax  >L048F,pc      Cursor OFF
201D 17F86C           (    supercomm.asm):03371                  lbsr  L1B03
2020 3504             (    supercomm.asm):03372                  puls  b
2022 103F0F           (    supercomm.asm):03373                  os9   F$PErr         Print error message
2025 8E003C           (    supercomm.asm):03374                  ldx   #60
2028 17EEAE           (    supercomm.asm):03375                  lbsr  L0F56          ??? (something with Timer)
202B 308DE43E         (    supercomm.asm):03376                  leax  >L048B,pc      Cursor ON
202F 17F85A           (    supercomm.asm):03377                  lbsr  L1B03
2032 20D3             (    supercomm.asm):03378                  bra   L230E          Overlay window end & return
                      (    supercomm.asm):03379         
                      (    supercomm.asm):03380         * Change background color to A
2034 3436             (    supercomm.asm):03381         L233B    pshs  y,x,d          Preserve regs
2036 C633             (    supercomm.asm):03382                  ldb   #$33           Background color code
2038 200A             (    supercomm.asm):03383                  bra   L234B
                      (    supercomm.asm):03384         
                      (    supercomm.asm):03385         * Change border color to A
203A 3436             (    supercomm.asm):03386         L2341    pshs  y,x,d          Preserve regs
203C C634             (    supercomm.asm):03387                  ldb   #$34           Border color code
203E 2004             (    supercomm.asm):03388                  bra   L234B
                      (    supercomm.asm):03389         
                      (    supercomm.asm):03390         * Change foreground color to A
2040 3436             (    supercomm.asm):03391         L2347    pshs  y,x,d          Preserve regs
2042 C632             (    supercomm.asm):03392                  ldb   #$32           Foreground color code
2044 8E13AB           (    supercomm.asm):03393         L234B    ldx   #u13A9         Point to temp buffer
2047 A702             (    supercomm.asm):03394                  sta   2,x            Save palette #
2049 861B             (    supercomm.asm):03395                  lda   #$1B           OS9 window code prefix
204B ED84             (    supercomm.asm):03396                  std   ,x             Save it
204D 8601             (    supercomm.asm):03397                  lda   #1             Std Out
204F 108E0003         (    supercomm.asm):03398                  ldy   #$0003         Change appropriate color, restore regs & return
2053 103F8A           (    supercomm.asm):03399                  os9   I$Write  
2056 35B6             (    supercomm.asm):03400                  puls  pc,y,x,d
                      (    supercomm.asm):03401         
2058 0D2B             (    supercomm.asm):03402         L2364    tst   <u0026         ASCII receive buffer open?
205A 2704             (    supercomm.asm):03403                  beq   L2372          No, go check if a receive file exists
205C 0F2B             (    supercomm.asm):03404                  clr   <u0026         Yes, set receive buffer to CLOSED state
205E 2007             (    supercomm.asm):03405                  bra   L237E          Will return from there
                      (    supercomm.asm):03406         
2060 0D2A             (    supercomm.asm):03407         L2372    tst   <u0025         ASCII receive file exist?
2062 2601             (    supercomm.asm):03408                  bne   L2376          Yes, go flag buffer as open
2064 39               (    supercomm.asm):03409                  rts
                      (    supercomm.asm):03410         
2065 0C2B             (    supercomm.asm):03411         L2376    inc   <u0026         Set ASCII receive buffer to OPEN state
                      (    supercomm.asm):03412         * Change buffer indicator on status line to OFF
2067 3436             (    supercomm.asm):03413         L237E    pshs  y,x,d          Preserve regs
2069 0D2B             (    supercomm.asm):03414                  tst   <u0026         Get ASCII buffer open/closed flag
206B 261E             (    supercomm.asm):03415                  bne   L23AA          Open, skip ahead
206D 318DE8A1         (    supercomm.asm):03416                  leay  >L096D,pc      Point to buffer close string (for status line)
2071 8E13AB           (    supercomm.asm):03417                  ldx   #u13A9
2074 C60C             (    supercomm.asm):03418                  ldb   #12            Copy it
2076 170873           (    supercomm.asm):03419                  lbsr  L2D26
2079 8E13AB           (    supercomm.asm):03420                  ldx   #u13A9         Get ptr back
207C 968D             (    supercomm.asm):03421                  lda   <u0088         Get bckground color of main window
207E A707             (    supercomm.asm):03422                  sta   $07,x          Save new color in string
2080 968C             (    supercomm.asm):03423                  lda   <u0087         Get foreground color of main window
2082 A70B             (    supercomm.asm):03424                  sta   $0B,x          Save new color in string
2084 9643             (    supercomm.asm):03425                  lda   <u003E         Get path to status line window
2086 17F805           (    supercomm.asm):03426                  lbsr  L1B05
2089 35B6             (    supercomm.asm):03427         L23A8    puls  pc,y,x,d
                      (    supercomm.asm):03428         
                      (    supercomm.asm):03429         * Change buffer indicator on status line to ON
208B 318DE876         (    supercomm.asm):03430         L23AA    leay  >L0960,pc      Point to buffer on string (for status line)
208F 8E13AB           (    supercomm.asm):03431                  ldx   #u13A9
2092 C60D             (    supercomm.asm):03432                  ldb   #13
2094 170855           (    supercomm.asm):03433                  lbsr  L2D26
2097 8E13AB           (    supercomm.asm):03434                  ldx   #u13A9
209A 968C             (    supercomm.asm):03435                  lda   <u0087
209C A709             (    supercomm.asm):03436                  sta   $09,x
209E 9643             (    supercomm.asm):03437                  lda   <u003E
20A0 17F7EB           (    supercomm.asm):03438                  lbsr  L1B05
20A3 9604             (    supercomm.asm):03439                  lda   <u0002
20A5 9008             (    supercomm.asm):03440                  suba  <u0006
20A7 171DD4           (    supercomm.asm):03441                  lbsr  L44FF
20AA 35B6             (    supercomm.asm):03442                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):03443         
                      (    supercomm.asm):03444         * Position cursor @ X coord on line 1 to center text @ [u0093] within 40 chars
20AC 3436             (    supercomm.asm):03445         L23D0    pshs  y,x,d          Preserve regs
20AE 9E98             (    supercomm.asm):03446                  ldx   <u0093         Get ptr to ???
20B0 5F               (    supercomm.asm):03447                  clrb                 Clear counter
                      (    supercomm.asm):03448         * Count # chars (max 30) until high bit set or '.' found
20B1 A680             (    supercomm.asm):03449         L23D7    lda   ,x+            Get char
20B3 5C               (    supercomm.asm):03450                  incb                 Inc counter
20B4 C11E             (    supercomm.asm):03451                  cmpb  #30            Up to 30 char max?
20B6 2207             (    supercomm.asm):03452                  bhi   L23E5          Yes, skip ahead
20B8 4D               (    supercomm.asm):03453                  tsta                 Does the char have the high bit set?
20B9 2B04             (    supercomm.asm):03454                  bmi   L23E5          Yes, skip ahead
20BB 812E             (    supercomm.asm):03455                  cmpa  #'.            Is it a period?
20BD 26F2             (    supercomm.asm):03456                  bne   L23D7          No, get next char
20BF CB08             (    supercomm.asm):03457         L23E5    addb  #8             Add 8 to total # chars (8 spaces assumed)
20C1 8E13AB           (    supercomm.asm):03458                  ldx   #u13A9         Point to temp buffer
20C4 3404             (    supercomm.asm):03459                  pshs  b              Preserve count
20C6 8628             (    supercomm.asm):03460                  lda   #40            Centering within 40 chars
20C8 A0E0             (    supercomm.asm):03461                  suba  ,s+            A=40-B (size)
20CA 44               (    supercomm.asm):03462                  lsra                 Divide by 2 (calculate # chars in to center?)
20CB 8B21             (    supercomm.asm):03463                  adda  #$21           Add to base for Cursor coords+1
20CD A701             (    supercomm.asm):03464                  sta   1,x            Save coord
20CF CC0221           (    supercomm.asm):03465                  ldd   #$0221         CurXY prefix & Y coord=1
20D2 E702             (    supercomm.asm):03466                  stb   2,x            Save Y coord
20D4 A784             (    supercomm.asm):03467                  sta   ,x             Save CurXY prefix
20D6 108E0003         (    supercomm.asm):03468                  ldy   #$0003         Move cursor to X
20DA 8601             (    supercomm.asm):03469                  lda   #1             Std Out
20DC 103F8A           (    supercomm.asm):03470                  os9   I$Write        Position cursor & return
20DF 35B6             (    supercomm.asm):03471                  puls  pc,y,x,d
                      (    supercomm.asm):03472         
20E1 3436             (    supercomm.asm):03473         L2408    pshs  y,x,d          Preserve regs
20E3 DC58             (    supercomm.asm):03474                  ldd   <u0053         Get ptr
20E5 2752             (    supercomm.asm):03475                  beq   L246F          None, skip ahead
                      (    supercomm.asm):03476         
20E7 8E00E7           (    supercomm.asm):03477         L2411    ldx   #u00E2         Point to buffer
20EA 109E5C           (    supercomm.asm):03478                  ldy   <u0057         Get # bytes to read
20ED 9647             (    supercomm.asm):03479                  lda   <u0042         Get path to download file
20EF 103F89           (    supercomm.asm):03480                  os9   I$Read         Go read from file   
20F2 2407             (    supercomm.asm):03481                  bcc   L242A          No error on read, continue
20F4 CC0000           (    supercomm.asm):03482                  ldd   #$0000
20F7 0C64             (    supercomm.asm):03483                  inc   <u005F
20F9 2007             (    supercomm.asm):03484                  bra   L2432
                      (    supercomm.asm):03485         
20FB 109C5C           (    supercomm.asm):03486         L242A    cmpy  <u0057
20FE 2717             (    supercomm.asm):03487                  beq   L2449
2100 1F20             (    supercomm.asm):03488         L2430    tfr   y,d            Copy # bytes read to D
2102 8E00E7           (    supercomm.asm):03489         L2432    ldx   #u00E2         Point to 3 bytes into modem buffer
2105 308B             (    supercomm.asm):03490                  leax  d,x            Offset into it
2107 3406             (    supercomm.asm):03491                  pshs  d              Preserve offset
2109 DC5C             (    supercomm.asm):03492                  ldd   <u0057         Get # bytes read
210B A3E1             (    supercomm.asm):03493                  subd  ,s++           Subtract ???
210D 1F02             (    supercomm.asm):03494                  tfr   d,y            Move result to Y
210F 861A             (    supercomm.asm):03495                  lda   #$1A           <CTRL>-<Z> for X/Ymodem padding to even block
2111 A780             (    supercomm.asm):03496         L2443    sta   ,x+
2113 313F             (    supercomm.asm):03497                  leay  -1,y
2115 26FA             (    supercomm.asm):03498                  bne   L2443
                      (    supercomm.asm):03499         
2117 8E00E4           (    supercomm.asm):03500         L2449    ldx   #u00DF         Point to modem buffer
211A DC58             (    supercomm.asm):03501                  ldd   <u0053
211C E701             (    supercomm.asm):03502                  stb   1,x
211E 53               (    supercomm.asm):03503                  comb  
211F E702             (    supercomm.asm):03504                  stb   2,x
2121 DC58             (    supercomm.asm):03505                  ldd   <u0053
2123 2708             (    supercomm.asm):03506                  beq   L2463
2125 DC5C             (    supercomm.asm):03507                  ldd   <u0057
2127 10830080         (    supercomm.asm):03508                  cmpd  #$0080
212B 2606             (    supercomm.asm):03509                  bne   L2469
212D 8601             (    supercomm.asm):03510         L2463    lda   #$01
212F A784             (    supercomm.asm):03511                  sta   ,x
2131 2004             (    supercomm.asm):03512                  bra   L246D
                      (    supercomm.asm):03513         
2133 8602             (    supercomm.asm):03514         L2469    lda   #$02
2135 A784             (    supercomm.asm):03515                  sta   ,x
2137 35B6             (    supercomm.asm):03516         L246D    puls  pc,y,x,d
                      (    supercomm.asm):03517         
2139 0D6E             (    supercomm.asm):03518         L246F    tst   <u0069
213B 270D             (    supercomm.asm):03519                  beq   L2481
213D 8E00E7           (    supercomm.asm):03520                  ldx   #u00E2
2140 CC0080           (    supercomm.asm):03521                  ldd   #$0080
2143 A780             (    supercomm.asm):03522         L247A    sta   ,x+
2145 5A               (    supercomm.asm):03523                  decb  
2146 26FB             (    supercomm.asm):03524                  bne   L247A
2148 20CD             (    supercomm.asm):03525                  bra   L2449
                      (    supercomm.asm):03526         
214A 8E00E7           (    supercomm.asm):03527         L2481    ldx   #u00E2
214D 108E00A4         (    supercomm.asm):03528                  ldy   #u009F
2151 C620             (    supercomm.asm):03529                  ldb   #32            32 chars max
2153 A6A0             (    supercomm.asm):03530         L248B    lda   ,y+
2155 2709             (    supercomm.asm):03531                  beq   L2498          If NUL, skip ahead
2157 810D             (    supercomm.asm):03532                  cmpa  #C$CR          If CR, skip ahead
2159 2705             (    supercomm.asm):03533                  beq   L2498
215B A780             (    supercomm.asm):03534                  sta   ,x+
215D 5A               (    supercomm.asm):03535                  decb  
215E 26F3             (    supercomm.asm):03536                  bne   L248B
2160 6F80             (    supercomm.asm):03537         L2498    clr   ,x+
2162 1706F1           (    supercomm.asm):03538                  lbsr  L2C72
2165 20B0             (    supercomm.asm):03539                  bra   L2449
                      (    supercomm.asm):03540         
2167 3436             (    supercomm.asm):03541         L249F    pshs  y,x,d
2169 0F4D             (    supercomm.asm):03542                  clr   <u0048
216B 0F4E             (    supercomm.asm):03543                  clr   <u0049
216D 8E00E7           (    supercomm.asm):03544                  ldx   #u00E2
2170 DC5C             (    supercomm.asm):03545                  ldd   <u0057
2172 318B             (    supercomm.asm):03546                  leay  d,x
2174 109F55           (    supercomm.asm):03547                  sty   <u0050
2177 0D5F             (    supercomm.asm):03548                  tst   <u005A
2179 260B             (    supercomm.asm):03549                  bne   L24C5
217B 1716D9           (    supercomm.asm):03550                  lbsr  L3E3D
217E 308B             (    supercomm.asm):03551                  leax  d,x
2180 964D             (    supercomm.asm):03552                  lda   <u0048
2182 A784             (    supercomm.asm):03553                  sta   ,x
2184 35B6             (    supercomm.asm):03554         L24C3    puls  pc,y,x,d
                      (    supercomm.asm):03555         
2186 1714AA           (    supercomm.asm):03556         L24C5    lbsr  L3E0F
2189 308B             (    supercomm.asm):03557                  leax  d,x
218B DC4D             (    supercomm.asm):03558                  ldd   <u0048
218D ED84             (    supercomm.asm):03559                  std   ,x
218F 20F3             (    supercomm.asm):03560                  bra   L24C3
                      (    supercomm.asm):03561         
                      (    supercomm.asm):03562         * Clear out 512 bytes @ u111C - Clears out Search (SSn) and Reply (RSn)
                      (    supercomm.asm):03563         * strings
2191 3432             (    supercomm.asm):03564         L24D1    pshs  y,x,a          Preserve regs
2193 108E111E         (    supercomm.asm):03565                  ldy   #u111C         Point to 512 byte buffer to clear
2197 8E0000           (    supercomm.asm):03566                  ldx   #$0000         double clear word
219A 4F               (    supercomm.asm):03567                  clra                 Double count=256
219B AFA1             (    supercomm.asm):03568         L24DB    stx   ,y++           Clear 2 bytes
219D 4A               (    supercomm.asm):03569                  deca                 Done all 256 double bytes?
219E 26FB             (    supercomm.asm):03570                  bne   L24DB          No, continue clearing
21A0 35B2             (    supercomm.asm):03571                  puls  pc,y,x,a       Restore & return
                      (    supercomm.asm):03572         
                      (    supercomm.asm):03573         * Search (SSn) string parse
21A2 A61E             (    supercomm.asm):03574         L24E3    lda   -2,x
21A4 8031             (    supercomm.asm):03575                  suba  #$31           Convert ASCII numeral (1 based) to bin (0 base)
21A6 8103             (    supercomm.asm):03576                  cmpa  #3             Within range of 0-3?
21A8 2253             (    supercomm.asm):03577                  bhi   L2541          No, exit
21AA C640             (    supercomm.asm):03578                  ldb   #$40           Size of each entry=64 bytes
21AC 3D               (    supercomm.asm):03579                  mul                  Point to appropriate entry
21AD 108E121E         (    supercomm.asm):03580                  ldy   #u121C         Point to main buffer
21B1 31AB             (    supercomm.asm):03581                  leay  d,y            Point to entry within buffer
21B3 C640             (    supercomm.asm):03582                  ldb   #$40           Max size to copy
21B5 A680             (    supercomm.asm):03583         L24F6    lda   ,x+            Get char
21B7 5A               (    supercomm.asm):03584                  decb                 drop count
21B8 2708             (    supercomm.asm):03585                  beq   ForceCR        If done max count, force CR on end
21BA 810D             (    supercomm.asm):03586                  cmpa  #C$CR          Is it a CR?
21BC 2706             (    supercomm.asm):03587                  beq   L2504          Yes, save it and stop
21BE A7A0             (    supercomm.asm):03588                  sta   ,y+            Save char
21C0 20F3             (    supercomm.asm):03589                  bra   L24F6          Keep copying
                      (    supercomm.asm):03590         
21C2 860D             (    supercomm.asm):03591         ForceCR  lda   #C$CR          Done, force last char to CR
21C4 A7A4             (    supercomm.asm):03592         L2504    sta   ,y             Save last char
21C6 35B6             (    supercomm.asm):03593                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):03594         
                      (    supercomm.asm):03595         * Send string parse (SSn) - does CTRL (\) conversions
21C8 A61E             (    supercomm.asm):03596         L2508    lda   -$02,x
21CA 8031             (    supercomm.asm):03597                  suba  #$31
21CC 8103             (    supercomm.asm):03598                  cmpa  #$03
21CE 222D             (    supercomm.asm):03599                  bhi   L2541
21D0 C640             (    supercomm.asm):03600                  ldb   #$40
21D2 3D               (    supercomm.asm):03601                  mul   
21D3 108E111E         (    supercomm.asm):03602                  ldy   #u111C         Point to send string buffer
21D7 31AB             (    supercomm.asm):03603                  leay  d,y
21D9 8601             (    supercomm.asm):03604                  lda   #$01
21DB 970A             (    supercomm.asm):03605                  sta   <u0C82
21DD 3410             (    supercomm.asm):03606                  pshs  x
21DF 8E111E           (    supercomm.asm):03607                  ldx   #u111C
21E2 BF139E           (    supercomm.asm):03608                  stx   >u139C
21E5 3510             (    supercomm.asm):03609                  puls  x
21E7 C640             (    supercomm.asm):03610                  ldb   #$40           Get max size of Send string
21E9 A680             (    supercomm.asm):03611         L252D    lda   ,x+            Copy until CR or 64 chars is hit
21EB 810D             (    supercomm.asm):03612                  cmpa  #C$CR
21ED 270B             (    supercomm.asm):03613                  beq   L253E
21EF 815C             (    supercomm.asm):03614                  cmpa  #'\            Control code?
21F1 270C             (    supercomm.asm):03615                  beq   L2544          Yes, process for that
21F3 A7A0             (    supercomm.asm):03616         L2537    sta   ,y+
21F5 5A               (    supercomm.asm):03617                  decb  
21F6 26F1             (    supercomm.asm):03618                  bne   L252D
21F8 35B6             (    supercomm.asm):03619                  puls  pc,y,x,d
21FA 5F               (    supercomm.asm):03620         L253E    clrb  
21FB E7A4             (    supercomm.asm):03621                  stb   ,y
21FD 35B6             (    supercomm.asm):03622         L2541    puls  pc,y,x,d
                      (    supercomm.asm):03623         
21FF A680             (    supercomm.asm):03624         L2544    lda   ,x+            Get code
2201 8040             (    supercomm.asm):03625                  suba  #$40           Knock down to <CTRL> equivalent
2203 20EE             (    supercomm.asm):03626                  bra   L2537          Save & continue
                      (    supercomm.asm):03627         
                      (    supercomm.asm):03628         * Entry: X=Ptr to converted text buffer?
2205 3436             (    supercomm.asm):03629         L254A    pshs  y,x,d          Preserve regs
2207 D60C             (    supercomm.asm):03630                  ldb   <u0C89         Get size of converted text buffer
2209 10BE139E         (    supercomm.asm):03631                  ldy   >u139C         Get ptr to ???
220D A680             (    supercomm.asm):03632         L2555    lda   ,x+            Get char
220F 847F             (    supercomm.asm):03633                  anda  #$7F           Strip high bit
2211 5A               (    supercomm.asm):03634                  decb                 Drop count in buffer
2212 0F76             (    supercomm.asm):03635                  clr   <u0071         Clear flag
2214 A1A4             (    supercomm.asm):03636         L255D    cmpa  ,y             Same as first char in search string buffer?
2216 2723             (    supercomm.asm):03637                  beq   L258A          Yes, skip ahead
2218 960A             (    supercomm.asm):03638                  lda   <u0C82         Get reply string #
221A 4A               (    supercomm.asm):03639                  deca                 bump to 0 base (0-3)
221B 3404             (    supercomm.asm):03640                  pshs  b
221D C640             (    supercomm.asm):03641                  ldb   #$40           Size of search strings
221F 3D               (    supercomm.asm):03642                  mul   
2220 108E111E         (    supercomm.asm):03643                  ldy   #u111C         Point to search strings
2224 31AB             (    supercomm.asm):03644                  leay  d,y            Point to one we want
2226 10BF139E         (    supercomm.asm):03645                  sty   >u139C         Save ptr
222A 3504             (    supercomm.asm):03646                  puls  b              Restore count
222C 0D76             (    supercomm.asm):03647                  tst   <u0071
222E 2604             (    supercomm.asm):03648                  bne   L2582
2230 0C76             (    supercomm.asm):03649                  inc   <u0071
2232 20E0             (    supercomm.asm):03650                  bra   L255D
                      (    supercomm.asm):03651         
2234 0F76             (    supercomm.asm):03652         L2582    clr   <u0071
2236 5D               (    supercomm.asm):03653                  tstb  
2237 26D4             (    supercomm.asm):03654                  bne   L2555
2239 35B6             (    supercomm.asm):03655                  puls  pc,y,x,d
                      (    supercomm.asm):03656         
223B 3121             (    supercomm.asm):03657         L258A    leay  1,y
223D 10BF139E         (    supercomm.asm):03658                  sty   >u139C
2241 6DA4             (    supercomm.asm):03659                  tst   ,y
2243 26EF             (    supercomm.asm):03660                  bne   L2582
2245 960A             (    supercomm.asm):03661                  lda   <u0C82         Get SSn # (0-3)
2247 0C0A             (    supercomm.asm):03662                  inc   <u0C82         Inc copy of it
2249 7C0C87           (    supercomm.asm):03663                  inc   >u0C83
224C C640             (    supercomm.asm):03664                  ldb   #$40
224E 3D               (    supercomm.asm):03665                  mul   
224F 108E111E         (    supercomm.asm):03666                  ldy   #u111C         Point to search strings buffer
2253 31AB             (    supercomm.asm):03667                  leay  d,y            Point to entry within buffer
2255 10BF139E         (    supercomm.asm):03668                  sty   >u139C         Save new SSn string ptr to check
2259 35B6             (    supercomm.asm):03669                  puls  pc,y,x,d
                      (    supercomm.asm):03670         
                      (    supercomm.asm):03671         * Deal with RSn buffer strings
225B 3436             (    supercomm.asm):03672         L25B1    pshs  y,x,d
225D 7F0C87           (    supercomm.asm):03673                  clr   >u0C83
2260 960A             (    supercomm.asm):03674                  lda   <u0C82
2262 8002             (    supercomm.asm):03675                  suba  #$02
2264 C640             (    supercomm.asm):03676                  ldb   #$40
2266 3D               (    supercomm.asm):03677                  mul   
2267 8E121E           (    supercomm.asm):03678                  ldx   #u121C         Point to RSn reply string buffer
226A 308B             (    supercomm.asm):03679                  leax  d,x            Point to entry within buffer
226C 3410             (    supercomm.asm):03680                  pshs  x              Preserve ptr
226E 5F               (    supercomm.asm):03681                  clrb  
                      (    supercomm.asm):03682         * Calc size of reply string
226F A680             (    supercomm.asm):03683         L25C9    lda   ,x+            Get char from buffer
2271 5C               (    supercomm.asm):03684                  incb  
2272 C140             (    supercomm.asm):03685                  cmpb  #$40           Done whole buffer?
2274 2204             (    supercomm.asm):03686                  bhi   L25D4          Yes, skip ahead
2276 810D             (    supercomm.asm):03687                  cmpa  #C$CR          Done to end of string?
2278 26F5             (    supercomm.asm):03688                  bne   L25C9          No, keep looking
227A 5A               (    supercomm.asm):03689         L25D4    decb                 Adjust size back down
227B 3510             (    supercomm.asm):03690                  puls  x              Get ptr to beginning of string again
227D 5D               (    supercomm.asm):03691                  tstb                 Was there anything in the string?
227E 270D             (    supercomm.asm):03692                  beq   L25E8          No, exit
                      (    supercomm.asm):03693         * This write/convert loop could be optomized
2280 A680             (    supercomm.asm):03694         L25DB    lda   ,x+            Yes, get char
2282 5A               (    supercomm.asm):03695                  decb                 Dec counter
2283 815C             (    supercomm.asm):03696                  cmpa  #'\            Special char?
2285 2714             (    supercomm.asm):03697                  beq   L25F6          Yes, go process
2287 17F589           (    supercomm.asm):03698                  lbsr  L1A76          No, write char to modem
228A 5D               (    supercomm.asm):03699         L25E5    tstb                 Done whole string?
228B 26F3             (    supercomm.asm):03700                  bne   L25DB          No, continue until done
228D 35B6             (    supercomm.asm):03701         L25E8    puls  pc,y,x,d
                      (    supercomm.asm):03702         
228F 3410             (    supercomm.asm):03703         L25EA    pshs  x              Preserve X
2291 8E001E           (    supercomm.asm):03704                  ldx   #30            Sleep for 30 ticks (1/2 sec)
2294 17EC42           (    supercomm.asm):03705                  lbsr  L0F56          Go sleep (and update timer if needed)
2297 3510             (    supercomm.asm):03706                  puls  x              Restore X
2299 20EF             (    supercomm.asm):03707                  bra   L25E5
                      (    supercomm.asm):03708         
                      (    supercomm.asm):03709         * \ (control letter) processor for RSn strings?
229B A680             (    supercomm.asm):03710         L25F6    lda   ,x+            Get byte from reply string
229D 5A               (    supercomm.asm):03711                  decb                 Drop count
229E 815E             (    supercomm.asm):03712                  cmpa  #'^            Caret (ESC)?
22A0 270F             (    supercomm.asm):03713                  beq   L260C          Yes, send <ESC>
22A2 812A             (    supercomm.asm):03714                  cmpa  #'*            1/2 second pause?
22A4 27E9             (    supercomm.asm):03715                  beq   L25EA          Yes, go do
22A6 815C             (    supercomm.asm):03716                  cmpa  #'\            Double '\\'?
22A8 2702             (    supercomm.asm):03717                  beq   L2607          Yes, go send '\'
22AA 8040             (    supercomm.asm):03718                  suba  #$40           Any others drop by $40 (ctrl chars)
22AC 17F564           (    supercomm.asm):03719         L2607    lbsr  L1A76          Send to modem
22AF 20D9             (    supercomm.asm):03720                  bra   L25E5          Continue until RSn string is done
                      (    supercomm.asm):03721         
22B1 861B             (    supercomm.asm):03722         L260C    lda   #C$EOF         Send escape code
22B3 20F7             (    supercomm.asm):03723                  bra   L2607
                      (    supercomm.asm):03724         
                      (    supercomm.asm):03725         * Copy main DWSet sequence into buffer
22B5 308DE190         (    supercomm.asm):03726         L2620    leax  >L0469,pc      Point to main DWSet
22B9 108E13AB         (    supercomm.asm):03727                  ldy   #u13A9         Point to buffer
22BD C60C             (    supercomm.asm):03728                  ldb   #$0C           12 bytes to copy
22BF 160622           (    supercomm.asm):03729                  lbra  L2D1E          Go copy them & return from there
                      (    supercomm.asm):03730         
                      (    supercomm.asm):03731         * <ALT>-<Z> conference mode toggle
22C2 3436             (    supercomm.asm):03732         L2610    pshs  y,x,d          Preserve regs
22C4 0D45             (    supercomm.asm):03733         L2612    tst   <u0040         Conference mode on?
22C6 1026009F         (    supercomm.asm):03734                  lbne  L26EE          Yes, go shut it off
22CA 0C45             (    supercomm.asm):03735                  inc   <u0040         Set it to on
22CC 8DE7             (    supercomm.asm):03736                  bsr   L2620          Go set up buffer for DWSet
                      (    supercomm.asm):03737         * First, redo main window to leave 3 lines at bottom
22CE 8E13AB           (    supercomm.asm):03738         L262E    ldx   #u13A9         Point X to DWSet buffer
22D1 DC95             (    supercomm.asm):03739                  ldd   <u0090         Get X&Y sizes of main window
22D3 C003             (    supercomm.asm):03740                  subb  #$03           Bump Y down by 3 (allow room for conference)
22D5 ED07             (    supercomm.asm):03741                  std   7,x            Save as new sizes in DWSet string
22D7 86FF             (    supercomm.asm):03742                  lda   #$FF           Set to current displayed screen
22D9 A704             (    supercomm.asm):03743                  sta   4,x
22DB DC8C             (    supercomm.asm):03744                  ldd   <u0087         Get fore/background colors of window
22DD ED09             (    supercomm.asm):03745                  std   9,x            Save them
22DF 8601             (    supercomm.asm):03746                  lda   #$01           Redo main window to smaller size
22E1 108E000B         (    supercomm.asm):03747                  ldy   #$000B
22E5 103F8A           (    supercomm.asm):03748                  os9   I$Write  
22E8 8602             (    supercomm.asm):03749                  lda   #WRITE.        Now, open path to /W (next avail. window)
22EA 308DE159         (    supercomm.asm):03750                  leax  >L0467,pc
22EE 103F84           (    supercomm.asm):03751                  os9   I$Open
22F1 25D1             (    supercomm.asm):03752                  bcs   L2612          Error, shut conference mode off & exit
22F3 9744             (    supercomm.asm):03753                  sta   <u003F         Save path to conference mode window
22F5 8E13AD           (    supercomm.asm):03754                  ldx   #u13A9+2       Point to buffer+2 (past DWEnd)
22F8 6F02             (    supercomm.asm):03755                  clr   2,x            Set to process' current screen
22FA 9696             (    supercomm.asm):03756                  lda   <u0091         Get Y size of main window
22FC 8002             (    supercomm.asm):03757                  suba  #2             Bump down by 2 (3 since base 0)
22FE A704             (    supercomm.asm):03758                  sta   4,x            Start Y coord @ end of screen -2
2300 8603             (    supercomm.asm):03759                  lda   #3             Y size=3
2302 A706             (    supercomm.asm):03760                  sta   6,x
2304 968E             (    supercomm.asm):03761                  lda   <u0089         Get ??? color
2306 A707             (    supercomm.asm):03762                  sta   7,x            Save as foreground color for conference mode
2308 968D             (    supercomm.asm):03763                  lda   <u0088         Get main window background color
230A A708             (    supercomm.asm):03764                  sta   8,x            Save as background color for confence window
230C 9644             (    supercomm.asm):03765                  lda   <u003F         Get path to conference window
230E 108E0009         (    supercomm.asm):03766                  ldy   #$0009         Create the conference mode window
2312 103F8A           (    supercomm.asm):03767                  os9   I$Write  
2315 968C             (    supercomm.asm):03768         L268D    lda   <u0087         Get FColor of main window
2317 8E00A1           (    supercomm.asm):03769                  ldx   #u009C         Point to Fcolor string
231A A702             (    supercomm.asm):03770                  sta   2,x            Save color
231C 108E0003         (    supercomm.asm):03771                  ldy   #$0003         Set foreground color for conference window
2320 9644             (    supercomm.asm):03772                  lda   <u003F
2322 103F8A           (    supercomm.asm):03773                  os9   I$Write  
2325 8E13AB           (    supercomm.asm):03774                  ldx   #u13A9
2328 CC2D50           (    supercomm.asm):03775                  ldd   #'-*256+80     Put 80 '-' in buffer
232B A780             (    supercomm.asm):03776         L26A9    sta   ,x+
232D 5A               (    supercomm.asm):03777                  decb  
232E 26FB             (    supercomm.asm):03778                  bne   L26A9
2330 8E13AB           (    supercomm.asm):03779                  ldx   #u13A9
2333 9644             (    supercomm.asm):03780                  lda   <u003F
2335 108E0050         (    supercomm.asm):03781                  ldy   #80
2339 103F8A           (    supercomm.asm):03782                  os9   I$Write        Write out conference mode line
233C 8E00A1           (    supercomm.asm):03783                  ldx   #u009C         Point to FColor string
233F 968E             (    supercomm.asm):03784                  lda   <u0089         Get ?? color
2341 A702             (    supercomm.asm):03785                  sta   2,x            Set Fcolor of conference window
2343 108E0003         (    supercomm.asm):03786                  ldy   #$0003
2347 9644             (    supercomm.asm):03787                  lda   <u003F
2349 103F8A           (    supercomm.asm):03788                  os9   I$Write  
234C 308DE63E         (    supercomm.asm):03789                  leax  >L09EF,pc      Change working area to use only 2 lines
2350 108E0006         (    supercomm.asm):03790                  ldy   #$0006         (to keep '---'... line on screen)
2354 103F8A           (    supercomm.asm):03791                  os9   I$Write  
2357 17013C           (    supercomm.asm):03792                  lbsr  L284E          Do Inv On/Space/Inv Off/Bsp (WHY???)
235A 308DE629         (    supercomm.asm):03793                  leax  >L09E8,pc      Point to 'Conf'
235E 9643             (    supercomm.asm):03794                  lda   <u003E         Send to Status window
2360 108E0007         (    supercomm.asm):03795                  ldy   #$0007
2364 103F8A           (    supercomm.asm):03796                  os9   I$Write  
2367 35B6             (    supercomm.asm):03797         L26EC    puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):03798         
                      (    supercomm.asm):03799         * Shut Conference mode off
2369 0F45             (    supercomm.asm):03800         L26EE    clr   <u0040         Flag conference mode off
236B 308DE0E8         (    supercomm.asm):03801                  leax  >L0475,pc      DWEnd the conference window
236F 9644             (    supercomm.asm):03802                  lda   <u003F
2371 108E0002         (    supercomm.asm):03803                  ldy   #$0002
2375 103F8A           (    supercomm.asm):03804                  os9   I$Write  
2378 9644             (    supercomm.asm):03805                  lda   <u003F         Close path to conference window
237A 103F8F           (    supercomm.asm):03806                  os9   I$Close  
237D 17FF35           (    supercomm.asm):03807                  lbsr  L2620          Copy DWEnd/DWSet for main window string
2380 8E13AB           (    supercomm.asm):03808                  ldx   #u13A9         Point to it
2383 DC95             (    supercomm.asm):03809                  ldd   <u0090         Get X/Y size of main window
2385 ED07             (    supercomm.asm):03810                  std   7,x            Save in string
2387 86FF             (    supercomm.asm):03811                  lda   #$FF           Current displayed screen
2389 A704             (    supercomm.asm):03812                  sta   4,x
238B DC8C             (    supercomm.asm):03813                  ldd   <u0087         Fore/Background colors of main window
238D ED09             (    supercomm.asm):03814                  std   9,x
238F 8601             (    supercomm.asm):03815                  lda   #$01           Std Out
2391 108E000B         (    supercomm.asm):03816                  ldy   #$000B
2395 103F8A           (    supercomm.asm):03817                  os9   I$Write        Change main window back to it's normal size
2398 308DE5E4         (    supercomm.asm):03818                  leax  >L09E1,pc      CurXY @ 0,0 & print 4 spaces
239C 9643             (    supercomm.asm):03819                  lda   <u003E         Send that to the Status window (erase 'Conf')
239E 108E0007         (    supercomm.asm):03820                  ldy   #$0007
23A2 103F8A           (    supercomm.asm):03821                  os9   I$Write  
23A5 35B6             (    supercomm.asm):03822                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):03823         
                      (    supercomm.asm):03824         * Keyboard read called from conference mode
23A7 4F               (    supercomm.asm):03825         L273D    clra                 Std In
23A8 108E0001         (    supercomm.asm):03826                  ldy   #$0001
23AC 8E0613           (    supercomm.asm):03827                  ldx   #u060E
23AF 103F89           (    supercomm.asm):03828                  os9   I$Read         Read 1 byte
23B2 9E6B             (    supercomm.asm):03829                  ldx   <u0066         Get ptr to current char in Conf. kybrd buffer
23B4 B60613           (    supercomm.asm):03830                  lda   >u060E         Get key read
23B7 818C             (    supercomm.asm):03831                  cmpa  #$8C           Higher than <ALT>-<Up Arrow> ?
23B9 1022EFC3         (    supercomm.asm):03832                  lbhi  L157B          Yes, go check for special (keysense) keys
23BD 817F             (    supercomm.asm):03833                  cmpa  #$7F           Alt Arrows, etc. ($80-$8c)?
23BF 1022E81B         (    supercomm.asm):03834                  lbhi  L0C5E          Yes, return to main loop
23C3 8118             (    supercomm.asm):03835                  cmpa  #$18           <CTRL>-<X> (SHIFT-BSP)?
23C5 2604             (    supercomm.asm):03836                  bne   L2765          No, check next
23C7 867F             (    supercomm.asm):03837                  lda   #$7F           Yes, replace with real DEL/RUBOUT key
23C9 2038             (    supercomm.asm):03838                  bra   L27A1          Go save in buffer @ X
                      (    supercomm.asm):03839         
23CB 811A             (    supercomm.asm):03840         L2765    cmpa  #$1A           <CTRL>-<Z>/<SHIFT>-<DOWN>?
23CD 1027EFAF         (    supercomm.asm):03841                  lbeq  L157B          Yes, go check key-sense bytes
23D1 811C             (    supercomm.asm):03842                  cmpa  #$1C           <SHIFT>-<UP>?
23D3 1027EFA9         (    supercomm.asm):03843                  lbeq  L157B          Yes, go check keysense bytes
23D7 810A             (    supercomm.asm):03844                  cmpa  #$0A           <DOWN> / LF?
23D9 1027E801         (    supercomm.asm):03845                  lbeq  L0C5E          Yes, return to main loop
23DD 810C             (    supercomm.asm):03846                  cmpa  #$0C           <UP> / Clear screen?
23DF 1027E7FB         (    supercomm.asm):03847                  lbeq  L0C5E          Yes, return to main loop
23E3 8109             (    supercomm.asm):03848                  cmpa  #$09           <RIGHT> / Up 1 line?
23E5 1027E7F5         (    supercomm.asm):03849                  lbeq  L0C5E          Yes, return to main loop
23E9 8108             (    supercomm.asm):03850                  cmpa  #$08           <LEFT> / BSP?
23EB 260C             (    supercomm.asm):03851                  bne   L2796          No, skip ahead
                      (    supercomm.asm):03852         * Backspace
23ED D66D             (    supercomm.asm):03853                  ldb   <u0068         Get # keys in Conf. keyboard buffer
23EF 2721             (    supercomm.asm):03854                  beq   L27B2          If none, skip ahead
23F1 301F             (    supercomm.asm):03855                  leax  -1,x           Bump ptr to current char in kybrd buffer back
23F3 9F6B             (    supercomm.asm):03856                  stx   <u0066         Save new ptr
23F5 0A6D             (    supercomm.asm):03857                  dec   <u0068         Dec # keys in Conf. keyboard buffer
23F7 2014             (    supercomm.asm):03858                  bra   L27AD          CHECK:REDUNDANT TO CHECK FOR CR THEN BSP AGAIN
                      (    supercomm.asm):03859         
23F9 D66D             (    supercomm.asm):03860         L2796    ldb   <u0068         Get # keys in conference buffer
23FB C1FD             (    supercomm.asm):03861                  cmpb  #253           Within max. range?
23FD 2504             (    supercomm.asm):03862                  blo   L27A1          Yes, go save it in buffer
23FF 810D             (    supercomm.asm):03863                  cmpa  #C$CR          About to overflow, was key CR?
2401 260F             (    supercomm.asm):03864                  bne   L27B2          No, beep so user knows we're full
2403 A780             (    supercomm.asm):03865         L27A1    sta   ,x+            Save keypress in conference mode kybrd buffer
2405 9F6B             (    supercomm.asm):03866                  stx   <u0066         Save new current char ptr for buffer
2407 0C6D             (    supercomm.asm):03867                  inc   <u0068         Bump up count of # keys in conf. mode kybrd buff.
2409 810D             (    supercomm.asm):03868                  cmpa  #C$CR          Was char a CR?
240B 2718             (    supercomm.asm):03869                  beq   L27C6          Yes, skip ahead
240D 8D45             (    supercomm.asm):03870         L27AD    bsr   L27FD          NO, CHECK FOR CR & BSP AGAIN ?!?
240F 16E7CC           (    supercomm.asm):03871                  lbra  L0C5E          Go back to main loop
                      (    supercomm.asm):03872         
                      (    supercomm.asm):03873         * Conference mode keyboard buffer overflow
2412 8607             (    supercomm.asm):03874         L27B2    lda   #$07           <CTRL>-<G> beep
2414 8E13AB           (    supercomm.asm):03875                  ldx   #u13A9         Write it out
2417 A784             (    supercomm.asm):03876                  sta   ,x
2419 8601             (    supercomm.asm):03877                  lda   #$01
241B 108E0001         (    supercomm.asm):03878                  ldy   #$0001
241F 103F8A           (    supercomm.asm):03879                  os9   I$Write  
2422 16E7B9           (    supercomm.asm):03880                  lbra  L0C5E          Go back to main loop
                      (    supercomm.asm):03881         
2425 860A             (    supercomm.asm):03882         L27C6    lda   #C$LF          Append LF
2427 A780             (    supercomm.asm):03883                  sta   ,x+
2429 D66D             (    supercomm.asm):03884                  ldb   <u0068         Get # keys in buffer
242B 7D0CAB           (    supercomm.asm):03885                  tst   >u0CA9
242E 2701             (    supercomm.asm):03886                  beq   L27D4
2430 5C               (    supercomm.asm):03887                  incb                 Bump up count by 1
2431 4F               (    supercomm.asm):03888         L27D4    clra  
2432 1F02             (    supercomm.asm):03889                  tfr   d,y            Move count to Y
2434 9630             (    supercomm.asm):03890                  lda   <u002B         Get path to modem
2436 8E0514           (    supercomm.asm):03891                  ldx   #u050F         Point to buffer
2439 103F8A           (    supercomm.asm):03892                  os9   I$Write        Send to modem
243C 0F6D             (    supercomm.asm):03893                  clr   <u0068         Set # keys in conf. kybrd buffer to 0
243E 8E0514           (    supercomm.asm):03894                  ldx   #u050F         Point to conf buffer again
2441 9F6B             (    supercomm.asm):03895                  stx   <u0066         Save as current char ptr for conf buffer
2443 860D             (    supercomm.asm):03896                  lda   #C$CR          Stick CR in start of normal keyboard buffer
2445 B70613           (    supercomm.asm):03897                  sta   >u060E
2448 8D0A             (    supercomm.asm):03898                  bsr   L27FD          Process CR
244A 860A             (    supercomm.asm):03899                  lda   #C$LF          Stick LF in start of normal keyboard buffer
244C B70613           (    supercomm.asm):03900                  sta   >u060E
244F 8D03             (    supercomm.asm):03901                  bsr   L27FD          Process LF
2451 16E78A           (    supercomm.asm):03902                  lbra  L0C5E          Return to main loop
                      (    supercomm.asm):03903         
2454 B60613           (    supercomm.asm):03904         L27FD    lda   >u060E         Get last key read
2457 810D             (    supercomm.asm):03905                  cmpa  #C$CR          CR (send line)?
2459 2612             (    supercomm.asm):03906                  bne   L281C          No, skip ahead
245B CC200D           (    supercomm.asm):03907                  ldd   #$200D         Space & CR
245E 8E13AB           (    supercomm.asm):03908                  ldx   #u13A9         Save in temp buffer
2461 ED84             (    supercomm.asm):03909                  std   ,x
2463 9644             (    supercomm.asm):03910                  lda   <u003F         Get path to conference window
2465 108E0002         (    supercomm.asm):03911                  ldy   #$0002         Write out space & CR
2469 103F8A           (    supercomm.asm):03912                  os9   I$Write  
246C 39               (    supercomm.asm):03913                  rts                  return
                      (    supercomm.asm):03914         
246D 8108             (    supercomm.asm):03915         L281C    cmpa  #C$BSP         Was key backspace?
246F 2611             (    supercomm.asm):03916                  bne   L2835          No, go print key to conf. window
2471 CC2008           (    supercomm.asm):03917                  ldd   #$2008         Space & Backspace
2474 8E13AB           (    supercomm.asm):03918                  ldx   #u13A9
2477 ED84             (    supercomm.asm):03919                  std   ,x
2479 9644             (    supercomm.asm):03920                  lda   <u003F         Send to conf. window
247B 108E0002         (    supercomm.asm):03921                  ldy   #$0002
247F 103F8A           (    supercomm.asm):03922                  os9   I$Write  
2482 8E0613           (    supercomm.asm):03923         L2835    ldx   #u060E         Send key pressed to conf. window
2485 108E0001         (    supercomm.asm):03924                  ldy   #$0001
2489 9644             (    supercomm.asm):03925                  lda   <u003F
248B 103F8A           (    supercomm.asm):03926                  os9   I$Write  
248E B60613           (    supercomm.asm):03927                  lda   >u060E         Get key pressed
2491 810D             (    supercomm.asm):03928                  cmpa  #C$CR          Is it CR?
2493 2601             (    supercomm.asm):03929                  bne   L284E          Yes, skip ahead
2495 39               (    supercomm.asm):03930                  rts                  Otherwise return
                      (    supercomm.asm):03931         
2496 9644             (    supercomm.asm):03932         L284E    lda   <u003F         Send Inv On/Space/Inv Off/Bsp to conf. window
2498 308DDFD9         (    supercomm.asm):03933                  leax  >L0493,pc
249C 108E0006         (    supercomm.asm):03934                  ldy   #$0006
24A0 103F8A           (    supercomm.asm):03935                  os9   I$Write  
24A3 39               (    supercomm.asm):03936                  rts   
                      (    supercomm.asm):03937         
                      (    supercomm.asm):03938         * Filename parse for Batch Receive???
                      (    supercomm.asm):03939         * YModem Batch (WXModem) header as follows:
                      (    supercomm.asm):03940         *   Block # (1 byte)
                      (    supercomm.asm):03941         *   Compliment of block # (1 byte)
                      (    supercomm.asm):03942         * Some sort of filename parse: allows upper/lower case, numbers
                      (    supercomm.asm):03943         * Unknown chars are forced to be Underscores (_)
24A4 3436             (    supercomm.asm):03944         L2860    pshs  y,x,d          Preserve regs
24A6 8E00E7           (    supercomm.asm):03945                  ldx   #u00DF+3       Point 3 bytes into input buffer from modem
24A9 3410             (    supercomm.asm):03946                  pshs  x              Save ptr to start of list
24AB A680             (    supercomm.asm):03947         L2868    lda   ,x+            Hunt for 1st 0 byte @ u00E2
24AD 26FC             (    supercomm.asm):03948                  bne   L2868
24AF 301F             (    supercomm.asm):03949                  leax  -1,x
24B1 3410             (    supercomm.asm):03950                  pshs  x              Save ptr to 1st 0 byte
24B3 0F9F             (    supercomm.asm):03951                  clr   <u009A         Clear flag?
                      (    supercomm.asm):03952         * Found 1st NUL in modem buffer past u00DF+3, now parse it
24B5 A682             (    supercomm.asm):03953         L2874    lda   ,-x            Now, go backwards getting chars as we go
24B7 AC62             (    supercomm.asm):03954                  cmpx  2,s            At beginning again?
24B9 252E             (    supercomm.asm):03955                  blo   L28AA          Yes, skip ahead
24BB 8141             (    supercomm.asm):03956                  cmpa  #'A            Check if alphabetic char (case ignored)
24BD 2510             (    supercomm.asm):03957                  blo   L2890          Below alphabetic, go try #'s, etc.
24BF 815A             (    supercomm.asm):03958                  cmpa  #'Z
24C1 23F2             (    supercomm.asm):03959                  bls   L2874          If A-Z, its fine
24C3 8161             (    supercomm.asm):03960                  cmpa  #'a            If [\]^_'  then check if \ to /, else _
24C5 251E             (    supercomm.asm):03961                  blo   L28A6          S/B L28A6 & BELOW SHOULD BE L28A0
24C7 817A             (    supercomm.asm):03962                  cmpa  #'z
24C9 2214             (    supercomm.asm):03963                  bhi   L28A0          If {|}~ or $7F, force to underscore
24CB 979F             (    supercomm.asm):03964                  sta   <u009A         Save char if lowercase
24CD 20E6             (    supercomm.asm):03965                  bra   L2874          Keep going
                      (    supercomm.asm):03966         
                      (    supercomm.asm):03967         * Char below 'A'
24CF 8139             (    supercomm.asm):03968         L2890    cmpa  #'9
24D1 220C             (    supercomm.asm):03969                  bhi   L28A0          If :;<=>?@ then change to underscore _
24D3 8130             (    supercomm.asm):03970                  cmpa  #'0
24D5 24DE             (    supercomm.asm):03971                  bhs   L2874          If 0-9, its fine
24D7 812E             (    supercomm.asm):03972                  cmpa  #'.            If period, it's fine
24D9 27DA             (    supercomm.asm):03973                  beq   L2874
24DB 812F             (    supercomm.asm):03974                  cmpa  #'/            Path separator?
24DD 270A             (    supercomm.asm):03975                  beq   L28AA          Special check
24DF 865F             (    supercomm.asm):03976         L28A0    lda   #'_            Force to be underscore
24E1 A784             (    supercomm.asm):03977                  sta   ,x             Replace original char in buffer
24E3 20D0             (    supercomm.asm):03978                  bra   L2874          Continue checking
                      (    supercomm.asm):03979         
                      (    supercomm.asm):03980         * USELESS, CAN ONLY GET CALLED IF CHAR IS CHR$($7B-$7F), AND BACKSLASH IS $5C
                      (    supercomm.asm):03981         * COULD BE USED TO CHANGE PATH SEPARATORS (EX. MS-DOS) TO NORMAL ONES
24E5 815C             (    supercomm.asm):03982         L28A6    cmpa  #'\            Backslash?
24E7 26F6             (    supercomm.asm):03983                  bne   L28A0          No, force to underscore
                      (    supercomm.asm):03984         * Backslash handler
24E9 3001             (    supercomm.asm):03985         L28AA    leax  1,x            Point to char again
24EB A684             (    supercomm.asm):03986                  lda   ,x             Get it
24ED 2712             (    supercomm.asm):03987                  beq   L28C2          If NUL skip ahead
24EF 810D             (    supercomm.asm):03988                  cmpa  #C$CR          End of line?
24F1 270E             (    supercomm.asm):03989                  beq   L28C2          Yes skip ahead
24F3 8141             (    supercomm.asm):03990                  cmpa  #'A            Char below alpha?
24F5 2504             (    supercomm.asm):03991                  blo   L28BC          Yes, skip ahead
24F7 815F             (    supercomm.asm):03992                  cmpa  #'_            Underscore?
24F9 2606             (    supercomm.asm):03993                  bne   L28C2          No, skip ahead
                      (    supercomm.asm):03994         * Underscore or below A go here - these get replace by 'x'
24FB 301F             (    supercomm.asm):03995         L28BC    leax  -1,x           Bump ptr back
24FD 8678             (    supercomm.asm):03996                  lda   #'x            Force char to be 'x'
24FF A784             (    supercomm.asm):03997                  sta   ,x
2501 AF62             (    supercomm.asm):03998         L28C2    stx   2,s            Save ptr as beginning ptr
2503 0D9F             (    supercomm.asm):03999                  tst   <u009A         Did we have lowercase char?
2505 2614             (    supercomm.asm):04000                  bne   L28DE          Yes, skip ahead
2507 A680             (    supercomm.asm):04001         L28CA    lda   ,x+            No, get char
2509 ACE4             (    supercomm.asm):04002                  cmpx  ,s             Are we within buffer @ u00E1?
250B 220E             (    supercomm.asm):04003                  bhi   L28DE          Yes, skip ahead
250D 8141             (    supercomm.asm):04004                  cmpa  #'A            Uppercase char?
250F 25F6             (    supercomm.asm):04005                  blo   L28CA          No, keep going forward
2511 815A             (    supercomm.asm):04006                  cmpa  #'Z
2513 22F2             (    supercomm.asm):04007                  bhi   L28CA
2515 8A20             (    supercomm.asm):04008                  ora   #$20           Uppercase, force to lowercase
2517 A71F             (    supercomm.asm):04009                  sta   -1,x
2519 20EC             (    supercomm.asm):04010                  bra   L28CA
                      (    supercomm.asm):04011         
251B 108E00A4         (    supercomm.asm):04012         L28DE    ldy   #u009F
251F AE62             (    supercomm.asm):04013                  ldx   2,s
2521 ECE1             (    supercomm.asm):04014                  ldd   ,s++
2523 A3E1             (    supercomm.asm):04015                  subd  ,s++
2525 C11D             (    supercomm.asm):04016                  cmpb  #29            Small enough to be filename?
2527 2302             (    supercomm.asm):04017                  bls   L28EE
2529 C61D             (    supercomm.asm):04018                  ldb   #29
252B 1703B6           (    supercomm.asm):04019         L28EE    lbsr  L2D1E
252E 860D             (    supercomm.asm):04020                  lda   #C$CR
2530 A7A4             (    supercomm.asm):04021                  sta   ,y
2532 3001             (    supercomm.asm):04022                  leax  1,x
2534 8D66             (    supercomm.asm):04023                  bsr   L2968
2536 308DE013         (    supercomm.asm):04024                  leax  >L056B,pc      Print 'Recv:'
253A 17F34F           (    supercomm.asm):04025                  lbsr  L1B03
253D 8E00A4           (    supercomm.asm):04026                  ldx   #u009F
2540 A684             (    supercomm.asm):04027                  lda   ,x
2542 272B             (    supercomm.asm):04028                  beq   L2938
2544 810D             (    supercomm.asm):04029                  cmpa  #C$CR
2546 2727             (    supercomm.asm):04030                  beq   L2938
2548 8601             (    supercomm.asm):04031                  lda   #$01           Std Out
254A 108E0020         (    supercomm.asm):04032                  ldy   #$0020
254E 103F8C           (    supercomm.asm):04033                  os9   I$WritLn 
2551 308DDF1C         (    supercomm.asm):04034                  leax  >L048F,pc      Cursor OFF
2555 17F334           (    supercomm.asm):04035                  lbsr  L1B03
2558 DC62             (    supercomm.asm):04036                  ldd   <u005B+2       Get LSW of file size
255A 261D             (    supercomm.asm):04037                  bne   L2944          There is one, skip ahead
255C DC60             (    supercomm.asm):04038                  ldd   <u005B         Get MSW of file size
255E 2619             (    supercomm.asm):04039                  bne   L2944
2560 8E00A4           (    supercomm.asm):04040         L2926    ldx   #u009F
2563 CC0203           (    supercomm.asm):04041                  ldd   #WRITE.*256+UPDAT. Write mode, Read & Write attributes
2566 103F83           (    supercomm.asm):04042                  os9   I$Create 
2569 2504             (    supercomm.asm):04043                  bcs   L2938
256B 9747             (    supercomm.asm):04044                  sta   <u0042         Save path # to download file
256D 35B6             (    supercomm.asm):04045                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):04046         
256F 86FF             (    supercomm.asm):04047         L2938    lda   #$FF
2571 9747             (    supercomm.asm):04048                  sta   <u0042         Set download path # to invalid
2573 860A             (    supercomm.asm):04049                  lda   #$0A
2575 9757             (    supercomm.asm):04050                  sta   <u0052
2577 35B6             (    supercomm.asm):04051                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):04052         
                      (    supercomm.asm):04053         * Have file size, print it
2579 308DDFDC         (    supercomm.asm):04054         L2944    leax  >L0577,pc      Print 'Size:'
257D 17F30C           (    supercomm.asm):04055                  lbsr  L1B03
2580 8E13AC           (    supercomm.asm):04056                  ldx   #u13AA
2583 108E0007         (    supercomm.asm):04057                  ldy   #$0007
2587 A684             (    supercomm.asm):04058         L2953    lda   ,x
2589 8130             (    supercomm.asm):04059                  cmpa  #'0
258B 2608             (    supercomm.asm):04060                  bne   L2961
258D 3001             (    supercomm.asm):04061                  leax  1,x
258F 313F             (    supercomm.asm):04062                  leay  -1,y
2591 27CD             (    supercomm.asm):04063                  beq   L2926          Go create the download file
2593 20F2             (    supercomm.asm):04064                  bra   L2953
                      (    supercomm.asm):04065         
2595 8601             (    supercomm.asm):04066         L2961    lda   #$01           Write to Std Out
2597 103F8A           (    supercomm.asm):04067                  os9   I$Write  
259A 20C4             (    supercomm.asm):04068                  bra   L2926
                      (    supercomm.asm):04069         
259C 3436             (    supercomm.asm):04070         L2968    pshs  y,x,d
259E CC0000           (    supercomm.asm):04071                  ldd   #$0000         Init file size to 0 bytes
25A1 DD60             (    supercomm.asm):04072                  std   <u005B
25A3 DD62             (    supercomm.asm):04073                  std   <u005B+2
25A5 C608             (    supercomm.asm):04074                  ldb   #$08           Max count=8 chars
25A7 A680             (    supercomm.asm):04075         L2975    lda   ,x+            Get char
25A9 2709             (    supercomm.asm):04076                  beq   L2983          If NUL, skip ahead
25AB 8120             (    supercomm.asm):04077                  cmpa  #C$SPAC        Space?
25AD 2705             (    supercomm.asm):04078                  beq   L2983          Yes, skip ahead
25AF 5A               (    supercomm.asm):04079                  decb                 Dec count
25B0 26F5             (    supercomm.asm):04080                  bne   L2975          Keep going until all 8 done
25B2 35B6             (    supercomm.asm):04081                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):04082         
25B4 108E13B2         (    supercomm.asm):04083         L2983    ldy   #u13B0
25B8 301F             (    supercomm.asm):04084                  leax  -1,x           Point back to space or NUL
25BA C608             (    supercomm.asm):04085                  ldb   #$08           Max distance backwards
25BC A682             (    supercomm.asm):04086         L298B    lda   ,-x
25BE 2707             (    supercomm.asm):04087                  beq   L2996
25C0 A7A2             (    supercomm.asm):04088                  sta   ,-y
25C2 5A               (    supercomm.asm):04089                  decb  
25C3 C101             (    supercomm.asm):04090                  cmpb  #1
25C5 26F5             (    supercomm.asm):04091                  bne   L298B
25C7 8630             (    supercomm.asm):04092         L2996    lda   #'0
25C9 A7A2             (    supercomm.asm):04093         L2998    sta   ,-y
25CB 5A               (    supercomm.asm):04094                  decb  
25CC C101             (    supercomm.asm):04095                  cmpb  #1
25CE 26F9             (    supercomm.asm):04096                  bne   L2998
25D0 108E13AB         (    supercomm.asm):04097                  ldy   #u13A9
25D4 308DE3BC         (    supercomm.asm):04098                  leax  >L09F5,pc      Point to table for decimal conversion
25D8 5F               (    supercomm.asm):04099                  clrb                 Start at highest level (1,000,000)
                      (    supercomm.asm):04100         * B=Current position to convert (0=1,000,000  1=100,000 etc.)
                      (    supercomm.asm):04101         * X=Ptr to 4 byte integer conversion table
                      (    supercomm.asm):04102         * Y=
25D9 3414             (    supercomm.asm):04103         L29A8    pshs  b,x            Preserve digit field # & table ptr
25DB 8604             (    supercomm.asm):04104                  lda   #$04           4 bytes / entry (for Long Ints)
25DD 3D               (    supercomm.asm):04105                  mul   
25DE 308B             (    supercomm.asm):04106                  leax  d,x            Point to proper entry
25E0 E6E4             (    supercomm.asm):04107                  ldb   ,s             Get which digit we are on
25E2 A6A5             (    supercomm.asm):04108                  lda   b,y
25E4 8030             (    supercomm.asm):04109                  suba  #'0
25E6 1F89             (    supercomm.asm):04110                  tfr   a,b
25E8 271B             (    supercomm.asm):04111                  beq   L29E9
25EA A603             (    supercomm.asm):04112         L29C2    lda   3,x            Add 4 byte table to 4 byte longint variable
25EC 9B63             (    supercomm.asm):04113                  adda  <u005B+3
25EE 9763             (    supercomm.asm):04114                  sta   <u005B+3
25F0 A602             (    supercomm.asm):04115                  lda   2,x
25F2 9962             (    supercomm.asm):04116                  adca  <u005B+2
25F4 9762             (    supercomm.asm):04117                  sta   <u005B+2
25F6 A601             (    supercomm.asm):04118                  lda   1,x
25F8 9961             (    supercomm.asm):04119                  adca  <u005B+1
25FA 9761             (    supercomm.asm):04120                  sta   <u005B+1
25FC A684             (    supercomm.asm):04121                  lda   ,x
25FE 9960             (    supercomm.asm):04122                  adca  <u005B
2600 9760             (    supercomm.asm):04123                  sta   <u005B
2602 5A               (    supercomm.asm):04124                  decb  
2603 26E5             (    supercomm.asm):04125                  bne   L29C2
2605 3514             (    supercomm.asm):04126         L29E9    puls  b,x
2607 5C               (    supercomm.asm):04127                  incb                 Next level lower
2608 C108             (    supercomm.asm):04128                  cmpb  #8             Done all of them?
260A 26CD             (    supercomm.asm):04129                  bne   L29A8          No, keep converting
260C 35B6             (    supercomm.asm):04130                  puls  pc,y,x,d
                      (    supercomm.asm):04131         
                      (    supercomm.asm):04132         * Check if <CTRL>-<E> / <BREAK> was pressed by user
                      (    supercomm.asm):04133         * Entry: None
                      (    supercomm.asm):04134         * Exit:  Carry clear if no <BREAK> in keyboard buffer
                      (    supercomm.asm):04135         *        Carry set if one was pressed
                      (    supercomm.asm):04136         *        All regs preserved
260E 3436             (    supercomm.asm):04137         L29EB    pshs  y,x,d          Preserve regs
2610 17E5C4           (    supercomm.asm):04138                  lbsr  L13C2          Go check if any data waiting in keyboard buffer
2613 251A             (    supercomm.asm):04139                  bcs   L2A0F          No, skip ahead
2615 4F               (    supercomm.asm):04140                  clra                 Yes, put # bytes waiting into Y
2616 1F02             (    supercomm.asm):04141                  tfr   d,y
2618 8E0613           (    supercomm.asm):04142                  ldx   #u060E         Point to keyboard buffer
261B 4F               (    supercomm.asm):04143                  clra                 Std In
261C 103F89           (    supercomm.asm):04144                  os9   I$Read         Go read it in
261F 250E             (    supercomm.asm):04145                  bcs   L2A0F          Error, skip ahead
2621 1F20             (    supercomm.asm):04146                  tfr   y,d
2623 8E0613           (    supercomm.asm):04147                  ldx   #u060E         Point to beginning of buffer again
2626 A680             (    supercomm.asm):04148         L2A06    lda   ,x+            Get keypress
2628 8105             (    supercomm.asm):04149                  cmpa  #$05           <CTRL>-<E> / <BREAK>?
262A 2706             (    supercomm.asm):04150                  beq   L2A12          Yes, exit with carry set
262C 5A               (    supercomm.asm):04151                  decb                 Check whole keyboard buffer for it
262D 26F7             (    supercomm.asm):04152                  bne   L2A06
262F 5F               (    supercomm.asm):04153         L2A0F    clrb                 No break key, exit with carry clear
2630 35B6             (    supercomm.asm):04154                  puls  pc,y,x,d
                      (    supercomm.asm):04155         
2632 53               (    supercomm.asm):04156         L2A12    comb                 <BREAK> key found, exit with carry set
2633 35B6             (    supercomm.asm):04157                  puls  pc,y,x,d
                      (    supercomm.asm):04158         
2635 3434             (    supercomm.asm):04159         L2A15    pshs  y,x,b          Preserve regs
2637 170FAE           (    supercomm.asm):04160                  lbsr  L3BBC          Go update seconds (via VRN if present else CLOCK)
263A 8DD2             (    supercomm.asm):04161         L2A1A    bsr   L29EB          Check if <BREAK> was pressed by user
263C 2511             (    supercomm.asm):04162                  bcs   L2A4C          Yes, restore regs & return
263E 9630             (    supercomm.asm):04163                  lda   <u002B         Get path to modem
2640 C601             (    supercomm.asm):04164                  ldb   #SS.Ready      Check if any data ready
2642 103F8D           (    supercomm.asm):04165                  os9   I$GetStt 
                      (    supercomm.asm):04166         * NOTE: MAY WANT TO CHANGE L2A31 BELOW TO DO LDA <u002B,u FIRST SO BCC HERE
                      (    supercomm.asm):04167         *   CAN SKIP IT & GO STRAIGHT TO LDY
2645 240A             (    supercomm.asm):04168                  bcc   L2A31          Maybe, go check it out
2647 170FB9           (    supercomm.asm):04169                  lbsr  L3BDA          No data on modem, go update on-screen timer
264A 813B             (    supercomm.asm):04170                  cmpa  #';            Key pressed a Semi-colon or lower?
264C 25EC             (    supercomm.asm):04171                  blo   L2A1A          Yes, eat it & try again
264E 53               (    supercomm.asm):04172                  comb                 Set carry to indicate key-press?
264F 35B4             (    supercomm.asm):04173         L2A4C    puls  pc,y,x,b       Restore & return
                      (    supercomm.asm):04174         
2651 108E0001         (    supercomm.asm):04175         L2A31    ldy   #$0001         Get 1 byte from modem
2655 9630             (    supercomm.asm):04176                  lda   <u002B         Go get path to modem
2657 8E04F4           (    supercomm.asm):04177                  ldx   #u04EF
265A 103F89           (    supercomm.asm):04178                  os9   I$Read         Read 1 byte from modem
265D 2509             (    supercomm.asm):04179                  bcs   L2A4F          If error, make char=NUL
265F B604F4           (    supercomm.asm):04180                  lda   >u04EF         Get key pressed
2662 7F04F4           (    supercomm.asm):04181                  clr   >u04EF         Clear out the buffer
2665 5F               (    supercomm.asm):04182         L2A49    clrb                 No error & return with char in A
2666 35B4             (    supercomm.asm):04183                  puls  pc,y,x,b       Restore & return
                      (    supercomm.asm):04184         
2668 4F               (    supercomm.asm):04185         L2A4F    clra                 Clear char to NUL?
2669 20FA             (    supercomm.asm):04186                  bra   L2A49          Exit with carry clear?
                      (    supercomm.asm):04187         
266B 3436             (    supercomm.asm):04188         L2A52    pshs  y,x,d          Preserve regs
266D 308DDDFC         (    supercomm.asm):04189                  leax  >L048B,pc      Turn cursor ON
2671 17F218           (    supercomm.asm):04190                  lbsr  L1B03
2674 5F               (    supercomm.asm):04191                  clrb                 1st 32 bytes of screen
2675 8E0712           (    supercomm.asm):04192                  ldx   #u070D         Point to screen output buffer
2678 3414             (    supercomm.asm):04193         L2A60    pshs  x,b            Preserve
267A 8D1B             (    supercomm.asm):04194                  bsr   L2A81          Print 'File:' & filename
267C 3514             (    supercomm.asm):04195                  puls  x,b            Restore ptrs
267E B60613           (    supercomm.asm):04196                  lda   >u060E         Get 1st char of filename
2681 810D             (    supercomm.asm):04197                  cmpa  #C$CR          Was it CR?
2683 2709             (    supercomm.asm):04198                  beq   L2A78          Yes, go turn cursor back on
2685 0D26             (    supercomm.asm):04199                  tst   <u0021
2687 2605             (    supercomm.asm):04200                  bne   L2A78
2689 5C               (    supercomm.asm):04201                  incb                 Inc which filename counter???
268A C120             (    supercomm.asm):04202                  cmpb  #$20           32 allowed???
268C 26EA             (    supercomm.asm):04203                  bne   L2A60
268E 308DDDDF         (    supercomm.asm):04204         L2A78    leax  >L048F,pc      Turn cursor ON & return
2692 17F1F7           (    supercomm.asm):04205                  lbsr  L1B03
2695 35B6             (    supercomm.asm):04206                  puls  pc,y,x,d
                      (    supercomm.asm):04207         
                      (    supercomm.asm):04208         * Entry: X=Ptr to screen output buffer
                      (    supercomm.asm):04209         * B=???
2697 8620             (    supercomm.asm):04210         L2A81    lda   #$20         Each B represents 32 bytes
2699 3D               (    supercomm.asm):04211                  mul   
269A 308B             (    supercomm.asm):04212                  leax  d,x          Point that far into screen buffer
269C 3410             (    supercomm.asm):04213                  pshs  x            Preserve it
269E 308DDE9F         (    supercomm.asm):04214                  leax  L055F,pc     point to 'File:'
26A2 17F1E7           (    supercomm.asm):04215                  lbsr  L1B03        print it
26A5 C61E             (    supercomm.asm):04216                  ldb   #30
26A7 17F23B           (    supercomm.asm):04217                  lbsr  L1B61        Get input string locally (?)
26AA 3510             (    supercomm.asm):04218                  puls  x            Restore pointer
26AC 108E0613         (    supercomm.asm):04219                  ldy   #u060E       Point to where filename is
26B0 C620             (    supercomm.asm):04220                  ldb   #32          get length
26B2 160237           (    supercomm.asm):04221                  lbra  L2D26        Copy 32 bytes from Y to X (filename into scrn bffr)
                      (    supercomm.asm):04222         
26B5 3436             (    supercomm.asm):04223         L2AA0    pshs  y,x,d
26B7 D66F             (    supercomm.asm):04224                  ldb   <u006A
26B9 8620             (    supercomm.asm):04225                  lda   #$20
26BB 3D               (    supercomm.asm):04226                  mul   
26BC 8E0712           (    supercomm.asm):04227                  ldx   #u070D       Point to output screen buffer
26BF 308B             (    supercomm.asm):04228                  leax  d,x
26C1 108E00A4         (    supercomm.asm):04229                  ldy   #u009F       Point to old filename for downloads
26C5 C620             (    supercomm.asm):04230                  ldb   #$20
26C7 17021A           (    supercomm.asm):04231                  lbsr  L2D1E
26CA 0C6F             (    supercomm.asm):04232                  inc   <u006A
26CC 35B6             (    supercomm.asm):04233                  puls  pc,y,x,d
                      (    supercomm.asm):04234         
26CE 3434             (    supercomm.asm):04235         L2ABC    pshs  y,x,b
26D0 8601             (    supercomm.asm):04236                  lda   #$01
26D2 972E             (    supercomm.asm):04237                  sta   <u0029
26D4 2004             (    supercomm.asm):04238                  bra   L2ACA
                      (    supercomm.asm):04239         
                      (    supercomm.asm):04240         * Check if key waiting
26D6 3434             (    supercomm.asm):04241         L2AC5    pshs  y,x,b
26D8 0F2E             (    supercomm.asm):04242                  clr   <u0029
26DA 17E4FA           (    supercomm.asm):04243         L2ACA    lbsr  L13C2          Any data ready in keyboard buffer?
26DD 2408             (    supercomm.asm):04244                  bcc   L2AD7          Yes, skip ahead
26DF 8E0003           (    supercomm.asm):04245                  ldx   #$0003
26E2 17E7F4           (    supercomm.asm):04246                  lbsr  L0F56          Check for timer update
26E5 20F3             (    supercomm.asm):04247                  bra   L2ACA          Loop
                      (    supercomm.asm):04248         
                      (    supercomm.asm):04249         * If key waiting, get & convert to uppercase
26E7 5D               (    supercomm.asm):04250         L2AD7    tstb                 Any chars waiting in keyboard buffer?
26E8 27F0             (    supercomm.asm):04251                  beq   L2ACA          No, go back to loop
26EA 8E0020           (    supercomm.asm):04252                  ldx   #u001B         Point to buffer to hold keypress
26ED 108E0001         (    supercomm.asm):04253                  ldy   #$0001
26F1 4F               (    supercomm.asm):04254                  clra                 Std In
26F2 103F89           (    supercomm.asm):04255                  os9   I$Read         Read the key
26F5 A684             (    supercomm.asm):04256                  lda   ,x
26F7 0D2E             (    supercomm.asm):04257                  tst   <u0029
26F9 2606             (    supercomm.asm):04258                  bne   L2AF3
26FB 8160             (    supercomm.asm):04259                  cmpa  #$60           Under apostrophe?
26FD 2502             (    supercomm.asm):04260                  blo   L2AF3          Yes, leave alone (upper case)
26FF 8020             (    supercomm.asm):04261                  suba  #$20           Convert lower to upper case
2701 35B4             (    supercomm.asm):04262         L2AF3    puls  pc,y,x,b       Restore & return
                      (    supercomm.asm):04263         
                      (    supercomm.asm):04264         * Hangup the modem from Driver call
2703 0F1F             (    supercomm.asm):04265         L2AF5    clr   <u001A         Clear 1 byte buffer
2705 9630             (    supercomm.asm):04266                  lda   <u002B         Get path to modem
2707 C62B             (    supercomm.asm):04267                  ldb   #SS.HngUp      Hangup the modem
2709 103F8E           (    supercomm.asm):04268                  os9   I$SetStt 
270C 2503             (    supercomm.asm):04269                  bcs   L2B07          If error, skip ahead
270E 0C1F             (    supercomm.asm):04270                  inc   <u001A         ??? Set flag
2710 39               (    supercomm.asm):04271                  rts
                      (    supercomm.asm):04272         * No SS.HngUp call (probably ACIAPAK) - manually diddle with 6551 hardware
2711 8E0C33           (    supercomm.asm):04273         L2B07    ldx   #u0C2E         point to path option packet from modem
2714 EC881B           (    supercomm.asm):04274                  ldd   $1B,x          get device table address
2717 C30004           (    supercomm.asm):04275                  addd  #V$DESC        point to descriptor address
271A DD18             (    supercomm.asm):04276                  std   <u0013         save pointer
271C 8601             (    supercomm.asm):04277                  lda   #$01           get system process descriptor
271E 8E0712           (    supercomm.asm):04278                  ldx   #u070D         Point to buffer to hold process dsc.
2721 103F18           (    supercomm.asm):04279                  os9   F$GPrDsc 
2724 308840           (    supercomm.asm):04280                  leax  P$DATImg,x     point to DAT image
2727 BF0C88           (    supercomm.asm):04281                  stx   >u0C84         Save ptr
272A 1F10             (    supercomm.asm):04282                  tfr   x,d            Move to D
272C 9E18             (    supercomm.asm):04283                  ldx   <u0013         get descriptor address
272E 108E0002         (    supercomm.asm):04284                  ldy   #$0002         get # bytes needed
2732 CE13AB           (    supercomm.asm):04285                  ldu   #u13A9         Point to buffer
2735 103F1B           (    supercomm.asm):04286                  os9   F$CpyMem       get actual address of descriptor
2738 BE13AB           (    supercomm.asm):04287                  ldx   >u13A9         get the descriptor address
273B 308815           (    supercomm.asm):04288                  leax  IT.DLO,x       Point to Delete line offset
273E FC0C88           (    supercomm.asm):04289                  ldd   >u0C84         Get ptr to DAT image
2741 108E0002         (    supercomm.asm):04290                  ldy   #$0002         Get DELETE line & echo settings
2745 CE0016           (    supercomm.asm):04291                  ldu   #u0011         Where to put copies of them
2748 103F1B           (    supercomm.asm):04292                  os9   F$CpyMem 
                      (    supercomm.asm):04293         * NOTE: Should be able to remove this LDU entirely
274B CE0000           (    supercomm.asm):04294                  ldu   #$0000         Reset U to normal
274E 39               (    supercomm.asm):04295                  rts   
                      (    supercomm.asm):04296         
274F 3436             (    supercomm.asm):04297         L2B50    pshs  y,x,d        Preserve regs
2751 8E13AB           (    supercomm.asm):04298                  ldx   #u13A9       Point to temp buffer
2754 CC0253           (    supercomm.asm):04299                  ldd   #$0253       CurXY to 51,1
2757 ED84             (    supercomm.asm):04300                  std   ,x
2759 8620             (    supercomm.asm):04301                  lda   #$20
275B A702             (    supercomm.asm):04302                  sta   $02,x
275D 108E0003         (    supercomm.asm):04303                  ldy   #$0003
2761 9643             (    supercomm.asm):04304                  lda   <u003E       Position cursor in status window
2763 103F8A           (    supercomm.asm):04305                  os9   I$Write  
2766 8E0032           (    supercomm.asm):04306                  ldx   #u002D       Point to name of terminal port
2769 5F               (    supercomm.asm):04307                  clrb  
276A A680             (    supercomm.asm):04308         L2B6D    lda   ,x+          Print name (up to 1st 5 chars) of port in status
276C 5C               (    supercomm.asm):04309                  incb                 window
276D 8121             (    supercomm.asm):04310                  cmpa  #$21
276F 2504             (    supercomm.asm):04311                  blo   L2B78
2771 C105             (    supercomm.asm):04312                  cmpb  #$05
2773 25F5             (    supercomm.asm):04313                  blo   L2B6D
2775 8E0032           (    supercomm.asm):04314         L2B78    ldx   #u002D
2778 4F               (    supercomm.asm):04315                  clra  
2779 1F02             (    supercomm.asm):04316                  tfr   d,y
277B 9643             (    supercomm.asm):04317                  lda   <u003E
277D 103F8A           (    supercomm.asm):04318                  os9   I$Write  
2780 35B6             (    supercomm.asm):04319                  puls  pc,y,x,d
                      (    supercomm.asm):04320         
2782 318DDCDD         (    supercomm.asm):04321         L2B86    leay  >L0481,pc      Foreground/background color sets & clear scrn
2786 8E13AB           (    supercomm.asm):04322                  ldx   #u13A9         Buffer to hold
2789 3410             (    supercomm.asm):04323                  pshs  x
278B C607             (    supercomm.asm):04324                  ldb   #$07           Copy all 3 commands into buffer
278D 17015C           (    supercomm.asm):04325                  lbsr  L2D26
2790 3510             (    supercomm.asm):04326                  puls  x
2792 968B             (    supercomm.asm):04327                  lda   <u0086         Get ??? color
2794 A705             (    supercomm.asm):04328                  sta   $05,x          Save as background color
2796 968C             (    supercomm.asm):04329                  lda   <u0087         Get Fcolor of main window
2798 A702             (    supercomm.asm):04330                  sta   $02,x          Save as foreground color
279A 9643             (    supercomm.asm):04331                  lda   <u003E         Clear out status window with these colors
279C 108E0007         (    supercomm.asm):04332                  ldy   #$0007
27A0 103F8A           (    supercomm.asm):04333                  os9   I$Write  
27A3 0D45             (    supercomm.asm):04334                  tst   <u0040         Is conference mode on?
27A5 270D             (    supercomm.asm):04335                  beq   L2BC0          No, skip ahead
27A7 9643             (    supercomm.asm):04336                  lda   <u003E         Print 'Conf' in status window
27A9 308DE1DA         (    supercomm.asm):04337                  leax  >L09E8,pc
27AD 108E0007         (    supercomm.asm):04338                  ldy   #$0007
27B1 103F8A           (    supercomm.asm):04339                  os9   I$Write  
27B4 318DD933         (    supercomm.asm):04340         L2BC0    leay  >L00EB,pc      Copy 'Supercomm' header into buffer
27B8 8E13AB           (    supercomm.asm):04341                  ldx   #u13A9
27BB C61E             (    supercomm.asm):04342                  ldb   #$1E
27BD 17012C           (    supercomm.asm):04343                  lbsr  L2D26
27C0 8E13AB           (    supercomm.asm):04344                  ldx   #u13A9         Modify colors
27C3 9691             (    supercomm.asm):04345                  lda   <u008C
27C5 A707             (    supercomm.asm):04346                  sta   $07,x
27C7 968C             (    supercomm.asm):04347                  lda   <u0087         Get Fcolor 
27C9 A78819           (    supercomm.asm):04348                  sta   <$19,x
27CC 0D1E             (    supercomm.asm):04349                  tst   <u0019         Special version flag set?
27CE 2705             (    supercomm.asm):04350                  beq   L2BE8          No, skip ahead
27D0 8661             (    supercomm.asm):04351                  lda   #$61           Yes, add 'a' to name
27D2 A78816           (    supercomm.asm):04352                  sta   <$16,x
27D5 9643             (    supercomm.asm):04353         L2BE8    lda   <u003E         Print status window so far
27D7 17F0B4           (    supercomm.asm):04354                  lbsr  L1B05
27DA 17FF72           (    supercomm.asm):04355                  lbsr  L2B50          Print port name in status window
27DD 17F887           (    supercomm.asm):04356                  lbsr  L237E          Set/Print Capture buffer open status to OFF
27E0 0D30             (    supercomm.asm):04357                  tst   <u002B         Do we have path to serial port?
27E2 2703             (    supercomm.asm):04358                  beq   L2BFC          No, skip ahead
27E4 17E85E           (    supercomm.asm):04359                  lbsr  L118F          Yes, update baud rate/word len, parity, stp bits
27E7 9677             (    supercomm.asm):04360         L2BFC    lda   <u0072         VRN on?
27E9 2712             (    supercomm.asm):04361                  beq   L2C13          No, skip exit
27EB 0D7A             (    supercomm.asm):04362                  tst   <u0075         Timer on?
27ED 1027E6BA         (    supercomm.asm):04363                  lbeq  L0F20          No, send out black timer string
27F1 8E007C           (    supercomm.asm):04364                  ldx   #u0077         Point to timer string buffer
27F4 108E000B         (    supercomm.asm):04365                  ldy   #$000B         Send to status window with active colors
27F8 9643             (    supercomm.asm):04366                  lda   <u003E
27FA 103F8A           (    supercomm.asm):04367                  os9   I$Write  
27FD 39               (    supercomm.asm):04368         L2C13    rts
                      (    supercomm.asm):04369         
27FE 0D45             (    supercomm.asm):04370         L2C18    tst   <u0040         Conference mode on?
2800 274A             (    supercomm.asm):04371                  beq   L2C71          No, exit
2802 308DE188         (    supercomm.asm):04372                  leax  >L09EF,pc      Point to CWArea 0,1 to 80,3 string
2806 108E13AB         (    supercomm.asm):04373                  ldy   #u13A9         Point to buffer
280A C606             (    supercomm.asm):04374                  ldb   #$06
280C 1700D5           (    supercomm.asm):04375                  lbsr  L2D1E          Copy it
280F 8E13AB           (    supercomm.asm):04376                  ldx   #u13A9         Point to buffer again
2812 4F               (    supercomm.asm):04377                  clra  
2813 A703             (    supercomm.asm):04378                  sta   3,x            Change so CWArea 0,0 to 80,2
2815 8603             (    supercomm.asm):04379                  lda   #3
2817 A705             (    supercomm.asm):04380                  sta   5,x
2819 108E0006         (    supercomm.asm):04381                  ldy   #$0006
281D 9644             (    supercomm.asm):04382                  lda   <u003F         Send to conference window
281F 103F8A           (    supercomm.asm):04383                  os9   I$Write  
2822 318DDC3D         (    supercomm.asm):04384                  leay  >L0481,pc      Clear out the conference window
2826 8E13AB           (    supercomm.asm):04385                  ldx   #u13A9
2829 3410             (    supercomm.asm):04386                  pshs  x
282B C607             (    supercomm.asm):04387                  ldb   #$07
282D 1700BC           (    supercomm.asm):04388                  lbsr  L2D26
2830 3510             (    supercomm.asm):04389                  puls  x
2832 DC8D             (    supercomm.asm):04390                  ldd   <u0088         Get Bcolor of main window/Fcolor of conf. window
2834 A705             (    supercomm.asm):04391                  sta   $05,x          Save them
2836 E702             (    supercomm.asm):04392                  stb   $02,x
2838 9644             (    supercomm.asm):04393                  lda   <u003F         Send to conference window
283A 108E0007         (    supercomm.asm):04394                  ldy   #$0007
283E 103F8A           (    supercomm.asm):04395                  os9   I$Write  
2841 308DE149         (    supercomm.asm):04396                  leax  >L09EF,pc      Point to CWArea again (from 0,1 to 80,3)
2845 108E0006         (    supercomm.asm):04397                  ldy   #$0006         Change to new working area
2849 103F8A           (    supercomm.asm):04398                  os9   I$Write  
284C 39               (    supercomm.asm):04399         L2C71    rts   
                      (    supercomm.asm):04400         
                      (    supercomm.asm):04401         * Error with size of file, so set internal vars to indicate size=0 bytes
284D CC0000           (    supercomm.asm):04402         L2C8D    ldd   #$0000         Save size as 0 bytes
2850 DD60             (    supercomm.asm):04403                  std   <u005B
2852 DD62             (    supercomm.asm):04404                  std   <u005B+2
2854 35B6             (    supercomm.asm):04405                  puls  pc,y,x,d       Restore regs & return
                      (    supercomm.asm):04406         
                      (    supercomm.asm):04407         * NOTE: WHEN ALL U REFERENCES GONE, CAN ELIMINATE PSHS/PULS U
2856 3436             (    supercomm.asm):04408         L2C72    pshs  y,x,d          Preserve regs
2858 9647             (    supercomm.asm):04409                  lda   <u0042         Get path to download file
285A C602             (    supercomm.asm):04410                  ldb   #SS.Size       Get size of file
285C 103F8D           (    supercomm.asm):04411                  os9   I$GetStt 
285F 1F32             (    supercomm.asm):04412                  tfr   u,y            Move LSW of size to Y
2861 25EA             (    supercomm.asm):04413                  bcs   L2C8D          Error getting size, set to 0
2863 9F60             (    supercomm.asm):04414                  stx   <u005B         Save 4 byte size
2865 109F62           (    supercomm.asm):04415                  sty   <u005B+2
2868 AE62             (    supercomm.asm):04416         L2C98    ldx   2,s            Get original X back
286A 318DE126         (    supercomm.asm):04417                  leay  >L09F5,pc      Point to decimal conversion table
286E 3410             (    supercomm.asm):04418                  pshs  x              Preserve ptr to buffer for ASCII #
2870 CC3007           (    supercomm.asm):04419                  ldd   #$3007         Fill buffer with 7 '0's
2873 A780             (    supercomm.asm):04420         L2CA4    sta   ,x+
2875 5A               (    supercomm.asm):04421                  decb  
2876 26FB             (    supercomm.asm):04422                  bne   L2CA4
2878 3510             (    supercomm.asm):04423                  puls  x              Point to beginnning again
287A 5F               (    supercomm.asm):04424                  clrb                 Digit 0 (1,000,000) is where we start
287B 3436             (    supercomm.asm):04425         L2CAC    pshs  y,x,d          Preserve regs again
287D 8D2B             (    supercomm.asm):04426                  bsr   L2CDB          Convert the digit
287F 3536             (    supercomm.asm):04427                  puls  y,x,d          Restore regs
2881 5C               (    supercomm.asm):04428                  incb                 Point to next ASCII converted digit
2882 C108             (    supercomm.asm):04429                  cmpb  #8             Done all of them?
2884 26F5             (    supercomm.asm):04430                  bne   L2CAC          No, continue
2886 3410             (    supercomm.asm):04431                  pshs  x              Save ptr to ASCII string
2888 308DDCCD         (    supercomm.asm):04432                  leax  >L0577,pc      Print 'Size:'
288C 17EFFD           (    supercomm.asm):04433                  lbsr  L1B03
288F 3510             (    supercomm.asm):04434                  puls  x              Get ptr to ASCII string
2891 108E0007         (    supercomm.asm):04435                  ldy   #$0007         Size of #
2895 A684             (    supercomm.asm):04436         L2CC6    lda   ,x             Get char
2897 8130             (    supercomm.asm):04437                  cmpa  #'0            Is it a 0?
2899 2608             (    supercomm.asm):04438                  bne   L2CD4          No, can print rest of string
289B 3001             (    supercomm.asm):04439                  leax  1,x            Point to next char in ASCII string
289D 313F             (    supercomm.asm):04440                  leay  -1,y           Bump # bytes to print down
289F 26F4             (    supercomm.asm):04441                  bne   L2CC6          Still some left, see if they are 0's
28A1 35B6             (    supercomm.asm):04442                  puls  pc,y,x,d       If 0, just exit
                      (    supercomm.asm):04443         
28A3 8601             (    supercomm.asm):04444         L2CD4    lda   #$01           Write the size to Std Out
28A5 103F8A           (    supercomm.asm):04445                  os9   I$Write  
28A8 35B6             (    supercomm.asm):04446                  puls  pc,y,x,d
                      (    supercomm.asm):04447         
                      (    supercomm.asm):04448         * Entry: Y=Ptr to decimal conversion table
                      (    supercomm.asm):04449         *        X=Ptr to 7 byte buffer for ASCII # (up to 9,999,999)
                      (    supercomm.asm):04450         *        B=which ASCII # (0-6) (from million to 1) we are currently doing
                      (    supercomm.asm):04451         * Does one digit, adjusting file size in mem down with repeated subtracts
28AA 3085             (    supercomm.asm):04452         L2CDB    leax  b,x            Point to appropriate table entry in ASC # bffr
28AC 4F               (    supercomm.asm):04453                  clra                 Calculate which 4 byte longint to try in table
28AD 58               (    supercomm.asm):04454                  lslb
28AE 49               (    supercomm.asm):04455                  rola
28AF 58               (    supercomm.asm):04456                  lslb
28B0 49               (    supercomm.asm):04457                  rola
28B1 31AB             (    supercomm.asm):04458                  leay  d,y            Point to it
28B3 ECA4             (    supercomm.asm):04459         L2CE2    ldd   ,y             Get MSW of table entry
28B5 109360           (    supercomm.asm):04460                  cmpd  <u005B         Is it higher than MSW of file size?
28B8 2231             (    supercomm.asm):04461                  bhi   L2D1D          Yes, skip ahead
28BA 2507             (    supercomm.asm):04462                  blo   L2CF4          If lower, skip ahead
28BC EC22             (    supercomm.asm):04463                  ldd   2,y            Get LSW of table entry
28BE 109362           (    supercomm.asm):04464                  cmpd  <u005B+2       Is it higher than LSW of file size?
28C1 2228             (    supercomm.asm):04465                  bhi   L2D1D          No, skip ahead
28C3 DC60             (    supercomm.asm):04466         L2CF4    ldd   <u005B         Get MSW of file size
28C5 2604             (    supercomm.asm):04467                  bne   L2CFE          If file >64K, skip ahead
28C7 DC62             (    supercomm.asm):04468                  ldd   <u005B+2       <64K, get size
28C9 2720             (    supercomm.asm):04469                  beq   L2D1D          If 0, return
28CB 6C84             (    supercomm.asm):04470         L2CFE    inc   ,x             Inc. ASCII #
28CD DC62             (    supercomm.asm):04471                  ldd   <u005B+2       Get LSW of file size
28CF A322             (    supercomm.asm):04472                  subd  2,y            Subtract LSW of table entry
28D1 DD62             (    supercomm.asm):04473                  std   <u005B+2       Save result
28D3 2407             (    supercomm.asm):04474                  bhs   L2D13          Didn't wrap, continue
28D5 DC60             (    supercomm.asm):04475                  ldd   <u005B         Get MSW of file size
28D7 830001           (    supercomm.asm):04476                  subd  #$0001         Bump down by 1
28DA DD60             (    supercomm.asm):04477                  std   <u005B         Save result
28DC DC60             (    supercomm.asm):04478         L2D13    ldd   <u005B         Get MSW of file size
28DE A3A4             (    supercomm.asm):04479                  subd  ,y             Subtract MSW of table entry
28E0 DD60             (    supercomm.asm):04480                  std   <u005B         Save it
28E2 20CF             (    supercomm.asm):04481                  bra   L2CE2          Continue through until this digit is done
                      (    supercomm.asm):04482         
                      (    supercomm.asm):04483         
                      (    supercomm.asm):04484         * Move data from X to Y
                      (    supercomm.asm):04485         * Entry: B=Count
                      (    supercomm.asm):04486         *        X=Pointer to source
                      (    supercomm.asm):04487         *        Y=Pointer to destination
28E4 A680             (    supercomm.asm):04488         L2D1E    lda   ,x+
28E6 A7A0             (    supercomm.asm):04489                  sta   ,y+
28E8 5A               (    supercomm.asm):04490                  decb  
28E9 26F9             (    supercomm.asm):04491                  bne   L2D1E
28EB 39               (    supercomm.asm):04492         L2D1D    rts   
                      (    supercomm.asm):04493         
                      (    supercomm.asm):04494         * Move data from Y to X
                      (    supercomm.asm):04495         * Entry: B=Count
                      (    supercomm.asm):04496         *        X=Pointer to destination
                      (    supercomm.asm):04497         *        Y=Pointer to source
28EC A6A0             (    supercomm.asm):04498         L2D26    lda   ,y+
28EE A780             (    supercomm.asm):04499                  sta   ,x+
28F0 5A               (    supercomm.asm):04500                  decb  
28F1 26F9             (    supercomm.asm):04501                  bne   L2D26
28F3 39               (    supercomm.asm):04502                  rts   
                      (    supercomm.asm):04503         
28F4 3412             (    supercomm.asm):04504         L2D2E    pshs  x,a
28F6 0D1F             (    supercomm.asm):04505                  tst   <u001A
28F8 270B             (    supercomm.asm):04506                  beq   L2D41
28FA 9630             (    supercomm.asm):04507                  lda   <u002B         Get path to modem
28FC C628             (    supercomm.asm):04508                  ldb   #SS.ComSt      Get current parity & baud rate
28FE 103F8D           (    supercomm.asm):04509                  os9   I$GetStt 
2901 1F98             (    supercomm.asm):04510                  tfr   b,a            Move possible error code to A
2903 2004             (    supercomm.asm):04511                  bra   L2D46
                      (    supercomm.asm):04512         
2905 9E16             (    supercomm.asm):04513         L2D41    ldx   <u0011         Get ???
2907 A601             (    supercomm.asm):04514                  lda   1,x
2909 8420             (    supercomm.asm):04515         L2D46    anda  #$20
290B 2703             (    supercomm.asm):04516                  beq   L2D4D
290D 5F               (    supercomm.asm):04517                  clrb  
290E 3592             (    supercomm.asm):04518         L2D4B    puls  pc,x,a
                      (    supercomm.asm):04519         
2910 53               (    supercomm.asm):04520         L2D4D    comb  
2911 3592             (    supercomm.asm):04521                  puls  pc,x,a
                      (    supercomm.asm):04522         
2913 3416             (    supercomm.asm):04523         L2D50    pshs  x,d            Preserve regs
2915 8E0003           (    supercomm.asm):04524                  ldx   #$0003         Sleep 3 ticks (or until signal)
2918 103F0A           (    supercomm.asm):04525                  os9   F$Sleep  
291B C601             (    supercomm.asm):04526                  ldb   #SS.Ready      Any data ready on modem?
291D 9630             (    supercomm.asm):04527                  lda   <u002B         Get path # to modem
291F 103F8D           (    supercomm.asm):04528                  os9   I$GetStt 
2922 2519             (    supercomm.asm):04529                  bcs   L2D7E          No, exit
2924 8E0015           (    supercomm.asm):04530                  ldx   #$0015         Go sleep for up to 21 ticks
2927 17E5AF           (    supercomm.asm):04531                  lbsr  L0F56
                      (    supercomm.asm):04532         * NOTE: IT DOESN'T CHECK IF THERE ACTUALLY IS DATA THERE THIS TIME
292A 9630             (    supercomm.asm):04533                  lda   <u002B         Any data ready on modem this time?
292C C601             (    supercomm.asm):04534                  ldb   #SS.Ready
292E 103F8D           (    supercomm.asm):04535                  os9   I$GetStt 
2931 4F               (    supercomm.asm):04536                  clra  
2932 1F02             (    supercomm.asm):04537                  tfr   d,y            # bytes ready into Y
2934 8E13AB           (    supercomm.asm):04538                  ldx   #u13A9         Buffer to put modem data in
                      (    supercomm.asm):04539         * NOTE: SHOULD BE ABLE TO REMOVE MOST OF THESE DOUBLE LDA'S OF PATH #
2937 9630             (    supercomm.asm):04540                  lda   <u002B         Get path # to modem again
2939 103F89           (    supercomm.asm):04541                  os9   I$Read         Read from modem
293C 5F               (    supercomm.asm):04542                  clrb  
293D 3596             (    supercomm.asm):04543         L2D7E    puls  pc,x,d         Restore & return
                      (    supercomm.asm):04544         
                      (    supercomm.asm):04545         * Entry: B=Count
                      (    supercomm.asm):04546         *        X=Ptr
293F A680             (    supercomm.asm):04547         L2D82    lda   ,x+            Get byte
2941 5A               (    supercomm.asm):04548                  decb                 Done all bytes?
2942 2604             (    supercomm.asm):04549                  bne   L2D8B          No, skip ahead
2944 C601             (    supercomm.asm):04550                  ldb   #$01
2946 2039             (    supercomm.asm):04551                  bra   L2DC7
                      (    supercomm.asm):04552         
2948 8130             (    supercomm.asm):04553         L2D8B    cmpa  #'0            If not a number, eat char & try next
294A 25F3             (    supercomm.asm):04554                  blo   L2D82
294C 8139             (    supercomm.asm):04555                  cmpa  #'9
294E 22EF             (    supercomm.asm):04556                  bhi   L2D82
2950 1F12             (    supercomm.asm):04557                  tfr   x,y            Found numeric digit, move ptr to it to Y
2952 313F             (    supercomm.asm):04558                  leay  -1,y           Bump back by 1
2954 A680             (    supercomm.asm):04559         L2D97    lda   ,x+            Now, search for next non-digit from here
2956 8130             (    supercomm.asm):04560                  cmpa  #'0
2958 2504             (    supercomm.asm):04561                  blo   L2DA3
295A 8139             (    supercomm.asm):04562                  cmpa  #'9
295C 23F6             (    supercomm.asm):04563                  bls   L2D97
                      (    supercomm.asm):04564         
295E 301F             (    supercomm.asm):04565         L2DA3    leax  -1,x           Bump ptr back to 1st non-digit past digit
2960 CC2020           (    supercomm.asm):04566                  ldd   #$2020         Store 2 spaces here
2963 ED84             (    supercomm.asm):04567                  std   ,x
2965 86A0             (    supercomm.asm):04568                  lda   #$A0           ???
2967 A724             (    supercomm.asm):04569                  sta   4,y
2969 308DF138         (    supercomm.asm):04570                  leax  >L0652,pc      Point to baud rate table
296D 5F               (    supercomm.asm):04571                  clrb  
                      (    supercomm.asm):04572         * NOTE: ELIMINATE F$CMPNAM WITH LOCAL VERSION!!!
296E 3434             (    supercomm.asm):04573         L2DB3    pshs  y,x,b          Preserve regs
2970 C605             (    supercomm.asm):04574                  ldb   #$05           Size to compare
2972 103F11           (    supercomm.asm):04575                  os9   F$CmpNam       Check if they match
2975 3534             (    supercomm.asm):04576                  puls  y,x,b          Restore regs
2977 2408             (    supercomm.asm):04577                  bcc   L2DC7          They match, skip ahead
2979 3005             (    supercomm.asm):04578                  leax  5,x            Point to next baud rate to check
297B 5C               (    supercomm.asm):04579                  incb                 Inc baud rate counter
297C C108             (    supercomm.asm):04580                  cmpb  #8             Done all 8 possible baud rates
297E 26EE             (    supercomm.asm):04581                  bne   L2DB3          No, try next
2980 39               (    supercomm.asm):04582                  rts                  Yes, return
                      (    supercomm.asm):04583         
                      (    supercomm.asm):04584         * Found baud rate match
2981 B60CA7           (    supercomm.asm):04585         L2DC7    lda   >u0CA5         Get baud/stop bits/word len
2984 84F8             (    supercomm.asm):04586                  anda  #%11111000     Keep all but baud
2986 B70CA7           (    supercomm.asm):04587                  sta   >u0CA5         Save result
2989 FA0CA7           (    supercomm.asm):04588                  orb   >u0CA5         Merge in baud rate
298C F70CA7           (    supercomm.asm):04589                  stb   >u0CA5         Save with new baud rate
298F 16E6B3           (    supercomm.asm):04590                  lbra  L118F          Go update the status line & return
                      (    supercomm.asm):04591         
                      (    supercomm.asm):04592         * NOTE FIX CMPNAM BELOW TO NOT USE SYSTEM CALL!!!
2992 3436             (    supercomm.asm):04593         L2DDD    pshs  y,x,d          Preserve regs
2994 17FF7C           (    supercomm.asm):04594                  lbsr  L2D50          Check for data ready on modem
2997 251D             (    supercomm.asm):04595                  bcs   L2E1B          Nope, Exit with carry set
2999 109F0B           (    supercomm.asm):04596                  sty   <u0C88         Save # bytes waiting (into size of conv. txt bfr)
299C 8E13AB           (    supercomm.asm):04597                  ldx   #u13A9         Point to temp buffer
299F D60C             (    supercomm.asm):04598                  ldb   <u0C89         Get LSB of modem buffer size
29A1 C007             (    supercomm.asm):04599                  subb  #7             Bump down by 7 (to fit word 'CONNECT')
29A3 3414             (    supercomm.asm):04600         L2DF3    pshs  x,b            Preserve regs
29A5 318C20           (    supercomm.asm):04601                  leay  <L02D1,pc      Point to 'CONNECT'
29A8 C607             (    supercomm.asm):04602                  ldb   #$07           Check if connect string found
29AA 103F11           (    supercomm.asm):04603                  os9   F$CmpNam 
29AD 3514             (    supercomm.asm):04604                  puls  x,b            Restore regs
29AF 2408             (    supercomm.asm):04605                  bcc   L2E09          Found, skip ahead
29B1 3001             (    supercomm.asm):04606                  leax  1,x            Bump source ptr up by 1
29B3 5A               (    supercomm.asm):04607                  decb                 Dec # bytes left in read buffer to check
29B4 26ED             (    supercomm.asm):04608                  bne   L2DF3          Keep checking whole buffer
29B6 53               (    supercomm.asm):04609         L2E1B    comb                 Not found, exit with carry set
29B7 35B6             (    supercomm.asm):04610                  puls  pc,y,x,d
                      (    supercomm.asm):04611         
29B9 D60C             (    supercomm.asm):04612         L2E09    ldb   <u0C89         Get LSB of buffer size
29BB 8E13AB           (    supercomm.asm):04613                  ldx   #u13A9         Point to temp buffer
29BE 108E00E4         (    supercomm.asm):04614                  ldy   #u00DF         Point to modem buffer
29C2 17FF1F           (    supercomm.asm):04615                  lbsr  L2D1E          Copy temp buffer to modem buffer
29C5 5F               (    supercomm.asm):04616                  clrb                 No error & exit
29C6 35B6             (    supercomm.asm):04617         L2E19    puls  pc,y,x,d
                      (    supercomm.asm):04618         
29C8 434F4E4E4543D4   (    supercomm.asm):04619         L02D1    fcs   'CONNECT'
                      (    supercomm.asm):04620         
29CF 425553D9         (    supercomm.asm):04621         L02D8    fcs   'BUSY'
                      (    supercomm.asm):04622         
                      (    supercomm.asm):04623         * NOTE FIX CMPNAM BELOW TO NOT USE SYSTEM CALL!!!
29D3 3436             (    supercomm.asm):04624         L2E1E    pshs  y,x,d          Preserve regs
29D5 8E13AB           (    supercomm.asm):04625                  ldx   #u13A9         Point to temp buffer
29D8 C60E             (    supercomm.asm):04626                  ldb   #$0E           (Only checks 1st 14 bytes)
29DA 3414             (    supercomm.asm):04627         L2E26    pshs  x,b
29DC 318CF0           (    supercomm.asm):04628                  leay  <L02D8,pc      Point to 'BUSY'
29DF C604             (    supercomm.asm):04629                  ldb   #$04
29E1 103F11           (    supercomm.asm):04630                  os9   F$CmpNam       See if we found it
29E4 3514             (    supercomm.asm):04631                  puls  x,b
29E6 2405             (    supercomm.asm):04632                  bcc   L2E3C          Yes, skip ahead
29E8 3001             (    supercomm.asm):04633                  leax  1,x            Go forward through buffer looking for 'BUSY'
29EA 5A               (    supercomm.asm):04634                  decb                 Keep checking until done
29EB 26ED             (    supercomm.asm):04635                  bne   L2E26
29ED 35B6             (    supercomm.asm):04636         L2E3C    puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):04637         
                      (    supercomm.asm):04638         * Re-Calculate module CRC and re-save module
29EF 3476             (    supercomm.asm):04639         L2E3E    pshs  d,x,y,u      preserve regs
29F1 308DD60B         (    supercomm.asm):04640                  leax  name-$d,pc   point to start of module
29F5 10AE02           (    supercomm.asm):04641                  ldy   M$Size,x     get module size
29F8 9F1A             (    supercomm.asm):04642                  stx   <u0015       save pointer to start of module
29FA 313D             (    supercomm.asm):04643                  leay  -3,y         take off size of CRC
29FC 109F1C           (    supercomm.asm):04644                  sty   <u0017       save module size
29FF 1F13             (    supercomm.asm):04645                  tfr   x,u          calculate CRC
2A01 1F20             (    supercomm.asm):04646                  tfr   y,d
2A03 33CB             (    supercomm.asm):04647                  leau  d,u
2A05 CCFFFF           (    supercomm.asm):04648                  ldd   #$FFFF
2A08 EDC4             (    supercomm.asm):04649                  std   ,u
2A0A A742             (    supercomm.asm):04650                  sta   2,u
2A0C 103F17           (    supercomm.asm):04651                  os9   F$CRC    
2A0F 63C4             (    supercomm.asm):04652                  com   ,u
2A11 6341             (    supercomm.asm):04653                  com   1,u
2A13 6342             (    supercomm.asm):04654                  com   2,u
2A15 3576             (    supercomm.asm):04655                  puls  d,x,y,u      restore regs
2A17 8607             (    supercomm.asm):04656                  lda   #EXEC.+UPDAT. open supercomm in current execution DIR
2A19 308DD5F0         (    supercomm.asm):04657                  leax  name,pc      point to module name
2A1D 103F84           (    supercomm.asm):04658                  os9   I$Open       open it
2A20 250D             (    supercomm.asm):04659                  bcs   L2E82        error, return
2A22 9E1A             (    supercomm.asm):04660                  ldx   <u0015       get pointer to module header
2A24 109E1C           (    supercomm.asm):04661                  ldy   <u0017       get module size
2A27 3123             (    supercomm.asm):04662                  leay  3,y          add CRC
2A29 103F8A           (    supercomm.asm):04663                  os9   I$Write      write it
2A2C 103F8F           (    supercomm.asm):04664                  os9   I$Close      close file
2A2F 39               (    supercomm.asm):04665         L2E82    rts                return
                      (    supercomm.asm):04666         
2A30 3436             (    supercomm.asm):04667         L2E83    pshs  y,x,d          Preserve regs
2A32 308DDF8D         (    supercomm.asm):04668                  leax  >L0A24,pc      Point to default option settings
2A36 108E0CA7         (    supercomm.asm):04669                  ldy   #u0CA5         Point to current option settings
2A3A C64D             (    supercomm.asm):04670                  ldb   #$4D           Copy current options, dial directory &
2A3C 17FEAD           (    supercomm.asm):04671                  lbsr  L2D26           Default dir into code (for init)
2A3F CC1603           (    supercomm.asm):04672                  ldd   #$1603         Set overlay window size to 22x3
2A42 FD0C93           (    supercomm.asm):04673                  std   >u0C91         Save
2A45 CC1D04           (    supercomm.asm):04674                  ldd   #$1D04         Start coords @ 29,4
2A48 FD0C91           (    supercomm.asm):04675                  std   >u0C8F
2A4B 17EF96           (    supercomm.asm):04676                  lbsr  L1C81          Pop up the overlay window
2A4E 308DDA1F         (    supercomm.asm):04677                  leax  >L048F,pc      Cursor OFF
2A52 17EE37           (    supercomm.asm):04678                  lbsr  L1B03
2A55 308DDE02         (    supercomm.asm):04679                  leax  >L08B6,pc      Print 'Saving SuperComm'
2A59 17EE30           (    supercomm.asm):04680                  lbsr  L1B03
2A5C 8D91             (    supercomm.asm):04681                  bsr   L2E3E          Re-Calc CRC for supercomm & save it
2A5E 308DDA0B         (    supercomm.asm):04682                  leax  >L048B,pc      Turn Cursor ON
2A62 17EE27           (    supercomm.asm):04683                  lbsr  L1B03
2A65 17EFCF           (    supercomm.asm):04684                  lbsr  L1CDE          Remove overlay windows
2A68 35B6             (    supercomm.asm):04685                  puls  pc,y,x,d       Restore regs & return
                      (    supercomm.asm):04686         
2A6A 3436             (    supercomm.asm):04687         L2EBF    pshs  y,x,d
2A6C 0D77             (    supercomm.asm):04688                  tst   <u0072         Is there a path to VRN?
2A6E 2712             (    supercomm.asm):04689                  beq   L2ED8          No, skip ahead
2A70 0F7A             (    supercomm.asm):04690                  clr   <u0075         Force timer to OFF
2A72 308DD8DC         (    supercomm.asm):04691                  leax  >L0366,pc      Point to default timer string
2A76 108E007C         (    supercomm.asm):04692                  ldy   #u0077         Point to buffer for ASCII timer string
2A7A C60B             (    supercomm.asm):04693                  ldb   #$0B           Copy default into current
2A7C 17FE65           (    supercomm.asm):04694                  lbsr  L2D1E
2A7F 17E429           (    supercomm.asm):04695                  lbsr  L0F20          Update the timer on-screen
2A82 1712D5           (    supercomm.asm):04696         L2ED8    lbsr  L43CA          ??? Do something with receive buffer?
2A85 0D45             (    supercomm.asm):04697                  tst   <u0040         Conference mode on?
2A87 2703             (    supercomm.asm):04698                  beq   L2EE3          No, skip ahead
2A89 17F836           (    supercomm.asm):04699                  lbsr  L2610          Yes, draw it on screen
2A8C CC0000           (    supercomm.asm):04700         L2EE3    ldd   #$0000
2A8F DD0E             (    supercomm.asm):04701                  std   <u0009
2A91 8E16BB           (    supercomm.asm):04702                  ldx   #u16B9         Point to start of ASCII receive buffer
2A94 9F98             (    supercomm.asm):04703                  stx   <u0093         Save ptr
2A96 0F69             (    supercomm.asm):04704                  clr   <u0064         ???
2A98 17F1B1           (    supercomm.asm):04705                  lbsr  L1EDC          Clear the screen
2A9B CC0503           (    supercomm.asm):04706                  ldd   #$0503         Overlay window from 5,3 to 73,19
2A9E FD0C91           (    supercomm.asm):04707                  std   >u0C8F
2AA1 CC4411           (    supercomm.asm):04708                  ldd   #$4411
2AA4 FD0C93           (    supercomm.asm):04709                  std   >u0C91
2AA7 17EF3A           (    supercomm.asm):04710                  lbsr  L1C81          Go put it on screen
2AAA 8681             (    supercomm.asm):04711                  lda   #$81
2AAC 308DDF20         (    supercomm.asm):04712                  leax  >L0A31,pc      point to path to dial directory
2AB0 103F84           (    supercomm.asm):04713                  os9   I$Open   
2AB3 2577             (    supercomm.asm):04714                  bcs   L2F9A
2AB5 9742             (    supercomm.asm):04715                  sta   <u003D         Save path # to dialing directory name
                      (    supercomm.asm):04716         * NOTE: CAN REMOVE PSHS/PULS U LATER
2AB7 3440             (    supercomm.asm):04717                  pshs  u
2AB9 8E0000           (    supercomm.asm):04718                  ldx   #$0000         skip past '.' & '..'
2ABC CE0040           (    supercomm.asm):04719                  ldu   #$0040
2ABF 103F88           (    supercomm.asm):04720                  os9   I$Seek   
2AC2 3540             (    supercomm.asm):04721                  puls  u
2AC4 2566             (    supercomm.asm):04722                  bcs   L2F9A
2AC6 9642             (    supercomm.asm):04723         L2F26    lda   <u003D         Get path # to directory
2AC8 108E0020         (    supercomm.asm):04724                  ldy   #$0020         Size of 1 dir entry
2ACC 8E13AB           (    supercomm.asm):04725                  ldx   #u13A9         Point to temp buffer
2ACF 103F89           (    supercomm.asm):04726                  os9   I$Read         Read filename   
2AD2 2406             (    supercomm.asm):04727                  bcc   L2F3C          Got filename, skip ahead
2AD4 C1D3             (    supercomm.asm):04728                  cmpb  #E$EOF         End of directory?
2AD6 2654             (    supercomm.asm):04729                  bne   L2F9A          No, exit with error
2AD8 200D             (    supercomm.asm):04730                  bra   L2F4C          Skip ahead
                      (    supercomm.asm):04731         
2ADA 17019D           (    supercomm.asm):04732         L2F3C    lbsr  L3118          Go check filename
2ADD 2502             (    supercomm.asm):04733                  bcs   L2F43
2ADF 8D56             (    supercomm.asm):04734                  bsr   L2FA5
2AE1 9669             (    supercomm.asm):04735         L2F43    lda   <u0064
2AE3 811D             (    supercomm.asm):04736                  cmpa  #$1D
2AE5 23DF             (    supercomm.asm):04737                  bls   L2F26
2AE7 9669             (    supercomm.asm):04738         L2F4C    lda   <u0064
2AE9 B70C9A           (    supercomm.asm):04739                  sta   >u0C98
2AEC 9642             (    supercomm.asm):04740                  lda   <u003D         Close path to dir
2AEE 103F8F           (    supercomm.asm):04741                  os9   I$Close  
2AF1 1700C9           (    supercomm.asm):04742                  lbsr  L3038
2AF4 0D97             (    supercomm.asm):04743                  tst   <u0092
2AF6 2716             (    supercomm.asm):04744                  beq   L2F79
2AF8 17EE43           (    supercomm.asm):04745                  lbsr  L1BC7
2AFB CC0000           (    supercomm.asm):04746                  ldd   #$0000
2AFE FD131E           (    supercomm.asm):04747                  std   >u131C
2B01 17F148           (    supercomm.asm):04748                  lbsr  L1EDC
2B04 308DD969         (    supercomm.asm):04749                  leax  >L048F,pc
2B08 17ED81           (    supercomm.asm):04750                  lbsr  L1B03
2B0B 17019C           (    supercomm.asm):04751                  lbsr  L314B
2B0E 17EF26           (    supercomm.asm):04752         L2F79    lbsr  L1CDE
2B11 17EE40           (    supercomm.asm):04753                  lbsr  L1BDF
2B14 17EEA5           (    supercomm.asm):04754                  lbsr  L1C57
2B17 17F132           (    supercomm.asm):04755                  lbsr  L1EDC
2B1A 308DD94F         (    supercomm.asm):04756                  leax  >L048B,pc
2B1E 17ED6B           (    supercomm.asm):04757                  lbsr  L1B03
2B21 3536             (    supercomm.asm):04758                  puls  y,x,d          Restore regs
2B23 8E00E4           (    supercomm.asm):04759                  ldx   #u00DF         Get ptr to modem buffer
2B26 109E0B           (    supercomm.asm):04760                  ldy   <u0C88         Get # bytes read on modem
2B29 16E0E4           (    supercomm.asm):04761                  lbra  L0FD2          Go process
                      (    supercomm.asm):04762         
2B2C 103F0F           (    supercomm.asm):04763         L2F9A    os9   F$PErr         Print error
2B2F 8E0078           (    supercomm.asm):04764                  ldx   #$0078         Sleep for up to $78 ticks???
2B32 17E3A4           (    supercomm.asm):04765                  lbsr  L0F56
2B35 20D7             (    supercomm.asm):04766                  bra   L2F79
                      (    supercomm.asm):04767         
2B37 3436             (    supercomm.asm):04768         L2FA5    pshs  y,x,d          Preserve regs
2B39 8E13AB           (    supercomm.asm):04769                  ldx   #u13A9         Point to filename buffer
2B3C 109E98           (    supercomm.asm):04770                  ldy   <u0093
2B3F C61E             (    supercomm.asm):04771                  ldb   #$1E
2B41 A680             (    supercomm.asm):04772         L2FB2    lda   ,x+            Get char from filename buffer
2B43 5A               (    supercomm.asm):04773                  decb                 Dec count
2B44 4D               (    supercomm.asm):04774                  tsta                 Hi bit set (end of filename)?
2B45 2A0B             (    supercomm.asm):04775                  bpl   L2FC3          No, copy char & keep going
2B47 8080             (    supercomm.asm):04776                  suba  #$80           Bump down to normal char
2B49 A7A0             (    supercomm.asm):04777                  sta   ,y+            Save normal version
2B4B CC0A0D           (    supercomm.asm):04778                  ldd   #$0A0D         Add LF & CR
2B4E EDA4             (    supercomm.asm):04779                  std   ,y
2B50 2005             (    supercomm.asm):04780                  bra   L2FC8
                      (    supercomm.asm):04781         
2B52 A7A0             (    supercomm.asm):04782         L2FC3    sta   ,y+            Save char
2B54 5D               (    supercomm.asm):04783                  tstb                 Done maximum chars yet?
2B55 26EA             (    supercomm.asm):04784                  bne   L2FB2          No, continue copying/checking
                      (    supercomm.asm):04785         
2B57 0C69             (    supercomm.asm):04786         L2FC8    inc   <u0064
2B59 8D3A             (    supercomm.asm):04787                  bsr   L300E
2B5B 8D0B             (    supercomm.asm):04788                  bsr   L2FDE
2B5D 109E98           (    supercomm.asm):04789                  ldy   <u0093
2B60 31A820           (    supercomm.asm):04790                  leay  <$20,y
2B63 109F98           (    supercomm.asm):04791                  sty   <u0093
2B66 35B6             (    supercomm.asm):04792                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):04793         
2B68 3436             (    supercomm.asm):04794         L2FDE    pshs  y,x,d          Preserve regs
2B6A 9E98             (    supercomm.asm):04795                  ldx   <u0093         ???
2B6C 108E13AB         (    supercomm.asm):04796                  ldy   #u13A9         Point to temp buffer
2B70 C61E             (    supercomm.asm):04797                  ldb   #$1E
2B72 A680             (    supercomm.asm):04798         L2FEA    lda   ,x+
2B74 5A               (    supercomm.asm):04799                  decb  
2B75 815F             (    supercomm.asm):04800                  cmpa  #'_
2B77 2602             (    supercomm.asm):04801                  bne   L2FF3
2B79 8620             (    supercomm.asm):04802                  lda   #C$SPAC
2B7B 812E             (    supercomm.asm):04803         L2FF3    cmpa  #'.
2B7D 2603             (    supercomm.asm):04804                  bne   L2FFA
2B7F 860D             (    supercomm.asm):04805                  lda   #C$CR
2B81 5F               (    supercomm.asm):04806                  clrb  
2B82 A7A0             (    supercomm.asm):04807         L2FFA    sta   ,y+
2B84 5D               (    supercomm.asm):04808                  tstb  
2B85 26EB             (    supercomm.asm):04809                  bne   L2FEA
2B87 8601             (    supercomm.asm):04810                  lda   #$01
2B89 108E001E         (    supercomm.asm):04811                  ldy   #$001E
2B8D 8E13AB           (    supercomm.asm):04812                  ldx   #u13A9
2B90 103F8C           (    supercomm.asm):04813                  os9   I$WritLn 
2B93 35B6             (    supercomm.asm):04814                  puls  pc,y,x,d
                      (    supercomm.asm):04815         
2B95 3436             (    supercomm.asm):04816         L300E    pshs  y,x,d
2B97 8E13AB           (    supercomm.asm):04817                  ldx   #u13A9
2B9A D669             (    supercomm.asm):04818                  ldb   <u0064
2B9C C10F             (    supercomm.asm):04819                  cmpb  #$0F
2B9E 2204             (    supercomm.asm):04820                  bhi   L301F
2BA0 8624             (    supercomm.asm):04821                  lda   #$24
2BA2 2004             (    supercomm.asm):04822                  bra   L3023
2BA4 8645             (    supercomm.asm):04823         L301F    lda   #$45
2BA6 C00F             (    supercomm.asm):04824                  subb  #$0F
2BA8 A701             (    supercomm.asm):04825         L3023    sta   $01,x
2BAA 8602             (    supercomm.asm):04826                  lda   #$02
2BAC A784             (    supercomm.asm):04827                  sta   ,x
2BAE CB20             (    supercomm.asm):04828                  addb  #$20
2BB0 E702             (    supercomm.asm):04829                  stb   $02,x
2BB2 108E0003         (    supercomm.asm):04830                  ldy   #$0003
2BB6 8601             (    supercomm.asm):04831                  lda   #$01
2BB8 103F8A           (    supercomm.asm):04832                  os9   I$Write  
2BBB 35B6             (    supercomm.asm):04833                  puls  pc,y,x,d
                      (    supercomm.asm):04834         
2BBD 3436             (    supercomm.asm):04835         L3038    pshs  y,x,d          Preserve regs
2BBF 308DD8AE         (    supercomm.asm):04836                  leax  >L048F,pc      Cursor OFF
2BC3 17ECC6           (    supercomm.asm):04837                  lbsr  L1B03
2BC6 8601             (    supercomm.asm):04838                  lda   #$01
2BC8 9797             (    supercomm.asm):04839                  sta   <u0092
2BCA 8E13AB           (    supercomm.asm):04840         L3047    ldx   #u13A9
2BCD B10C9A           (    supercomm.asm):04841                  cmpa  >u0C98
2BD0 2305             (    supercomm.asm):04842                  bls   L3059
2BD2 B60C9A           (    supercomm.asm):04843                  lda   >u0C98
2BD5 9797             (    supercomm.asm):04844                  sta   <u0092
2BD7 810F             (    supercomm.asm):04845         L3059    cmpa  #$0F
2BD9 2204             (    supercomm.asm):04846                  bhi   L3061
2BDB 8B20             (    supercomm.asm):04847                  adda  #$20
2BDD 2002             (    supercomm.asm):04848                  bra   L3063
                      (    supercomm.asm):04849         
2BDF 8B11             (    supercomm.asm):04850         L3061    adda  #$11
2BE1 A702             (    supercomm.asm):04851         L3063    sta   $02,x
2BE3 9697             (    supercomm.asm):04852                  lda   <u0092
2BE5 810F             (    supercomm.asm):04853                  cmpa  #$0F
2BE7 2204             (    supercomm.asm):04854                  bhi   L3071
2BE9 8621             (    supercomm.asm):04855                  lda   #$21
2BEB 2002             (    supercomm.asm):04856                  bra   L3073
                      (    supercomm.asm):04857         
2BED 8642             (    supercomm.asm):04858         L3071    lda   #$42
2BEF A701             (    supercomm.asm):04859         L3073    sta   1,x
2BF1 8602             (    supercomm.asm):04860                  lda   #$02
2BF3 A784             (    supercomm.asm):04861                  sta   ,x
2BF5 8D72             (    supercomm.asm):04862                  bsr   L3107           Go blank out previous '==>'
2BF7 8601             (    supercomm.asm):04863                  lda   #$01
2BF9 108E0003         (    supercomm.asm):04864                  ldy   #$0003
2BFD 103F8A           (    supercomm.asm):04865                  os9   I$Write  
2C00 308DDA34         (    supercomm.asm):04866                  leax  >L0693,pc       Print  '==>'
2C04 108E0003         (    supercomm.asm):04867                  ldy   #$0003
2C08 103F8A           (    supercomm.asm):04868                  os9   I$Write  
2C0B 17FAC8           (    supercomm.asm):04869         L3090    lbsr  L2AC5
2C0E 8108             (    supercomm.asm):04870                  cmpa  #$08
2C10 2610             (    supercomm.asm):04871                  bne   L30A7
2C12 9697             (    supercomm.asm):04872         L3097    lda   <u0092
2C14 810F             (    supercomm.asm):04873                  cmpa  #$0F
2C16 2206             (    supercomm.asm):04874                  bhi   L30A3
2C18 8B0F             (    supercomm.asm):04875                  adda  #$0F
2C1A 9797             (    supercomm.asm):04876         L3100    sta   <u0092
2C1C 20AC             (    supercomm.asm):04877                  bra   L3047
                      (    supercomm.asm):04878         
2C1E 800F             (    supercomm.asm):04879         L30A3    suba  #$0F
2C20 20F8             (    supercomm.asm):04880                  bra   L3100
                      (    supercomm.asm):04881         
2C22 8109             (    supercomm.asm):04882         L30A7    cmpa  #$09
2C24 27EC             (    supercomm.asm):04883                  beq   L3097
2C26 810C             (    supercomm.asm):04884         L30AD    cmpa  #$0C
2C28 2613             (    supercomm.asm):04885                  bne   L30CB
2C2A 9697             (    supercomm.asm):04886                  lda   <u0092
2C2C 8101             (    supercomm.asm):04887                  cmpa  #$01
2C2E 2706             (    supercomm.asm):04888                  beq   L30C1
2C30 8001             (    supercomm.asm):04889                  suba  #$01
2C32 9797             (    supercomm.asm):04890                  sta   <u0092
2C34 20E4             (    supercomm.asm):04891                  bra   L3100
                      (    supercomm.asm):04892         
2C36 B60C9A           (    supercomm.asm):04893         L30C1    lda   >u0C98
2C39 9797             (    supercomm.asm):04894                  sta   <u0092
2C3B 20DD             (    supercomm.asm):04895                  bra   L3100
                      (    supercomm.asm):04896         
2C3D 810A             (    supercomm.asm):04897         L30CB    cmpa  #$0A
2C3F 2613             (    supercomm.asm):04898                  bne   L30E9
2C41 9697             (    supercomm.asm):04899                  lda   <u0092
2C43 B10C9A           (    supercomm.asm):04900                  cmpa  >u0C98
2C46 2706             (    supercomm.asm):04901                  beq   L30E1
2C48 8B01             (    supercomm.asm):04902                  adda  #$01
2C4A 9797             (    supercomm.asm):04903                  sta   <u0092
2C4C 20CC             (    supercomm.asm):04904                  bra   L3100
                      (    supercomm.asm):04905         
2C4E 8601             (    supercomm.asm):04906         L30E1    lda   #$01
2C50 9797             (    supercomm.asm):04907                  sta   <u0092
2C52 20C6             (    supercomm.asm):04908                  bra   L3100
                      (    supercomm.asm):04909         
2C54 810D             (    supercomm.asm):04910         L30E9    cmpa  #$0D
2C56 2609             (    supercomm.asm):04911                  bne   L30F6
2C58 308DD811         (    supercomm.asm):04912         L30ED    leax  >L048B,pc
2C5C 17EC2D           (    supercomm.asm):04913                  lbsr  L1B03
2C5F 35B6             (    supercomm.asm):04914                  puls  pc,y,x,d
                      (    supercomm.asm):04915         
2C61 8105             (    supercomm.asm):04916         L30F6    cmpa  #$05
2C63 26A6             (    supercomm.asm):04917                  bne   L3090
2C65 0F97             (    supercomm.asm):04918                  clr   <u0092
2C67 20EF             (    supercomm.asm):04919                  bra   L30ED
                      (    supercomm.asm):04920         
2C69 3432             (    supercomm.asm):04921         L3107    pshs  y,x,a          Clear out '==>' from previous menu selection
2C6B 8601             (    supercomm.asm):04922                  lda   #$01
2C6D 308DD9B6         (    supercomm.asm):04923                  leax  >L0682,pc      Write out 3 BSP/SPC's to Std Out
2C71 108E0006         (    supercomm.asm):04924                  ldy   #$0006
2C75 103F8A           (    supercomm.asm):04925                  os9   I$Write  
2C78 35B2             (    supercomm.asm):04926                  puls  pc,y,x,a
                      (    supercomm.asm):04927         
2C7A 3436             (    supercomm.asm):04928         L3118    pshs  y,x,d
2C7C 8E13AB           (    supercomm.asm):04929                  ldx   #u13A9
2C7F A684             (    supercomm.asm):04930                  lda   ,x
2C81 270C             (    supercomm.asm):04931                  beq   L3148
2C83 C61B             (    supercomm.asm):04932                  ldb   #$1B
2C85 A680             (    supercomm.asm):04933         L3124    lda   ,x+
2C87 5A               (    supercomm.asm):04934                  decb  
2C88 812E             (    supercomm.asm):04935                  cmpa  #'.
2C8A 2706             (    supercomm.asm):04936                  beq   L3130
2C8C 5D               (    supercomm.asm):04937         L312B    tstb  
2C8D 26F6             (    supercomm.asm):04938                  bne   L3124
2C8F 53               (    supercomm.asm):04939         L3148    comb  
2C90 35B6             (    supercomm.asm):04940                  puls  pc,y,x,d
                      (    supercomm.asm):04941         
2C92 A680             (    supercomm.asm):04942         L3130    lda   ,x+
2C94 5A               (    supercomm.asm):04943                  decb  
2C95 8161             (    supercomm.asm):04944                  cmpa  #'a
2C97 26F3             (    supercomm.asm):04945                  bne   L312B
2C99 A680             (    supercomm.asm):04946                  lda   ,x+
2C9B 5A               (    supercomm.asm):04947                  decb  
2C9C 8164             (    supercomm.asm):04948                  cmpa  #'d
2C9E 26EC             (    supercomm.asm):04949                  bne   L312B
2CA0 A680             (    supercomm.asm):04950                  lda   ,x+
2CA2 5A               (    supercomm.asm):04951                  decb  
2CA3 81E6             (    supercomm.asm):04952                  cmpa  #$E6
2CA5 26E5             (    supercomm.asm):04953                  bne   L312B
2CA7 5F               (    supercomm.asm):04954                  clrb  
2CA8 35B6             (    supercomm.asm):04955         L3146    puls  pc,y,x,d
                      (    supercomm.asm):04956         
2CAA 3436             (    supercomm.asm):04957         L314B    pshs  y,x,d
2CAC 9697             (    supercomm.asm):04958                  lda   <u0092
2CAE 4A               (    supercomm.asm):04959                  deca  
2CAF C620             (    supercomm.asm):04960                  ldb   #$20           32 bytes/entry
2CB1 3D               (    supercomm.asm):04961                  mul   
2CB2 8E16BB           (    supercomm.asm):04962                  ldx   #u16B9         Point to ASCII receive buffer
2CB5 308B             (    supercomm.asm):04963                  leax  d,x            Point to proper entry
2CB7 9F98             (    supercomm.asm):04964                  stx   <u0093         Save ptr
2CB9 8E13AB           (    supercomm.asm):04965                  ldx   #u13A9
2CBC 318DDD10         (    supercomm.asm):04966                  leay  >L0A31,pc      Point to '/dd/sys/dial'
2CC0 A6A0             (    supercomm.asm):04967         L3169    lda   ,y+            Copy path to buffer
2CC2 2B04             (    supercomm.asm):04968                  bmi   L3171          Do until high bit set (terminates string)
2CC4 A780             (    supercomm.asm):04969                  sta   ,x+
2CC6 20F8             (    supercomm.asm):04970                  bra   L3169
                      (    supercomm.asm):04971         
2CC8 8080             (    supercomm.asm):04972         L3171    suba  #$80           Bump down to normal char
2CCA C62F             (    supercomm.asm):04973                  ldb   #'/            Append slash to allow for filename
2CCC ED81             (    supercomm.asm):04974                  std   ,x++           Save in buffer
2CCE 1F12             (    supercomm.asm):04975                  tfr   x,y
2CD0 9E98             (    supercomm.asm):04976                  ldx   <u0093         Get ptr back
2CD2 C620             (    supercomm.asm):04977                  ldb   #$20           Up to 32 bytes max
2CD4 A680             (    supercomm.asm):04978         L317D    lda   ,x+
2CD6 A7A0             (    supercomm.asm):04979                  sta   ,y+
2CD8 2B03             (    supercomm.asm):04980                  bmi   L318A          If hi bit, that was last one
2CDA 5A               (    supercomm.asm):04981                  decb                 Hit max size yet?
2CDB 26F7             (    supercomm.asm):04982                  bne   L317D          No, continue moving
                      (    supercomm.asm):04983         
2CDD 8E13AB           (    supercomm.asm):04984         L318A    ldx   #u13A9         Point to name of file to open
2CE0 8601             (    supercomm.asm):04985                  lda   #READ.
2CE2 103F84           (    supercomm.asm):04986                  os9   I$Open         Open it
2CE5 2530             (    supercomm.asm):04987                  bcs   L31CF          Couldn't, print error message & exit
2CE7 9742             (    supercomm.asm):04988                  sta   <u003D         Save path to .ADF file
2CE9 17F4A5           (    supercomm.asm):04989                  lbsr  L24D1          Go clear out Search & Reply strings
2CEC 8601             (    supercomm.asm):04990                  lda   #$01
2CEE B70D1B           (    supercomm.asm):04991                  sta   >u0D19
2CF1 861E             (    supercomm.asm):04992                  lda   #$1E
2CF3 B70D1C           (    supercomm.asm):04993                  sta   >u0D1A
2CF6 9642             (    supercomm.asm):04994         L31A7    lda   <u003D         Get path to ADF file again
2CF8 8E13AB           (    supercomm.asm):04995                  ldx   #u13A9         Point to buffer
2CFB 108E0050         (    supercomm.asm):04996                  ldy   #$0050         Get up to an 80 char line
2CFF 103F8B           (    supercomm.asm):04997                  os9   I$ReadLn 
2D02 240F             (    supercomm.asm):04998                  bcc   L31BD          Got it, go parse (?)
2D04 C1D3             (    supercomm.asm):04999                  cmpb  #E$EOF         End of file error?
2D06 260F             (    supercomm.asm):05000                  bne   L31CF          No, print error & exit
2D08 9642             (    supercomm.asm):05001         L31C1    lda   <u003D         EOF, get path
2D0A 103F8F           (    supercomm.asm):05002                  os9   I$Close        Close the file
2D0D 17E335           (    supercomm.asm):05003                  lbsr  L118F          Go update the status line
2D10 1601EA           (    supercomm.asm):05004                  lbra  L33E0
                      (    supercomm.asm):05005         
2D13 8D07             (    supercomm.asm):05006         L31BD    bsr   L31D4
2D15 20DF             (    supercomm.asm):05007                  bra   L31A7
                      (    supercomm.asm):05008         
2D17 103F0F           (    supercomm.asm):05009         L31CF    os9   F$PErr         Print error, & exit
2D1A 35B6             (    supercomm.asm):05010         L31CD    puls  pc,y,x,d
                      (    supercomm.asm):05011         
                      (    supercomm.asm):05012         * Parse a line from ADF file
2D1C 3436             (    supercomm.asm):05013         L31D4    pshs  y,x,d          Preserve regs
2D1E 4F               (    supercomm.asm):05014                  clra                 Current keyword being checked=0
2D1F 318DD953         (    supercomm.asm):05015                  leay  >L06D1,pc      Point to keyword list
2D23 8E13AB           (    supercomm.asm):05016         L31DB    ldx   #u13A9         Point to buffer
2D26 C603             (    supercomm.asm):05017                  ldb   #$03           Size of keyword=3
2D28 4C               (    supercomm.asm):05018                  inca                 On keyword 1
2D29 103F11           (    supercomm.asm):05019                  os9   F$CmpNam 
2D2C 3123             (    supercomm.asm):05020                  leay  3,y            Point to next keyword
2D2E 2404             (    supercomm.asm):05021                  bcc   L31ED          Found match, skip ahead
2D30 8120             (    supercomm.asm):05022                  cmpa  #32            Done all 32 keywords?
2D32 25EF             (    supercomm.asm):05023                  blo   L31DB          No, keep checking
2D34 811F             (    supercomm.asm):05024         L31ED    cmpa  #31            Is it 32?
2D36 227E             (    supercomm.asm):05025                  bhi   L326F          Yes, exit
2D38 3003             (    supercomm.asm):05026                  leax  3,x            Point past keyword
2D3A E680             (    supercomm.asm):05027                  ldb   ,x+            Get next char
2D3C C13D             (    supercomm.asm):05028                  cmpb  #'=            Is it an '='?
2D3E 2676             (    supercomm.asm):05029                  bne   L326F          No, exit
                      (    supercomm.asm):05030         * Change to use DECA instead of repeated CMPA's
2D40 8101             (    supercomm.asm):05031                  cmpa  #$01           ADS (Auto Dial String)?
2D42 2774             (    supercomm.asm):05032                  beq   L3271
2D44 8102             (    supercomm.asm):05033                  cmpa  #$02           BPS (Bits per second (Baud))?
2D46 10270085         (    supercomm.asm):05034                  lbeq  L328A
2D4A 8103             (    supercomm.asm):05035                  cmpa  #$03           ECH (Keyboard echo)?
2D4C 10270094         (    supercomm.asm):05036                  lbeq  L32A3
2D50 8104             (    supercomm.asm):05037                  cmpa  #$04           HEK (Host Echo)?
2D52 1027009B         (    supercomm.asm):05038                  lbeq  L32B1
2D56 8105             (    supercomm.asm):05039                  cmpa  #$05           TRM (Terminal Type)
2D58 102700A2         (    supercomm.asm):05040                  lbeq  L32BF
2D5C 8106             (    supercomm.asm):05041                  cmpa  #$06           LNF (Line Feeds on in & outgoing text)
2D5E 102700AA         (    supercomm.asm):05042                  lbeq  L32CE
2D62 8107             (    supercomm.asm):05043                  cmpa  #$07           XON (XON char)
2D64 102700B4         (    supercomm.asm):05044                  lbeq  L32E0
2D68 8108             (    supercomm.asm):05045                  cmpa  #$08           XOF (XOFF char)
2D6A 102700B6         (    supercomm.asm):05046                  lbeq  L32E9
2D6E 8109             (    supercomm.asm):05047                  cmpa  #$09           RTR (# of retries)
2D70 102700B8         (    supercomm.asm):05048                  lbeq  L32F3
2D74 810A             (    supercomm.asm):05049                  cmpa  #$0A           RPS (Time each entry lasts)
2D76 102700BA         (    supercomm.asm):05050                  lbeq  L32FD
2D7A 810B             (    supercomm.asm):05051                  cmpa  #$0B           PAR (Parity)
2D7C 102700BC         (    supercomm.asm):05052                  lbeq  L3307
2D80 810C             (    supercomm.asm):05053                  cmpa  #$0C           CLK (Keyclick)
2D82 102700BE         (    supercomm.asm):05054                  lbeq  L3311
2D86 810D             (    supercomm.asm):05055                  cmpa  #$0D           WRD (Word Length)
2D88 102700C5         (    supercomm.asm):05056                  lbeq  L3320
2D8C 810E             (    supercomm.asm):05057                  cmpa  #$0E           STP (Stop bits)
2D8E 102700D1         (    supercomm.asm):05058                  lbeq  L3338
2D92 8116             (    supercomm.asm):05059                  cmpa  #$16           KM1-8 (Keyboard macros)
2D94 102300E6         (    supercomm.asm):05060                  lbls  L3358          Go handle all of them
2D98 8117             (    supercomm.asm):05061                  cmpa  #$17           CNS (String to send on Connect)
2D9A 10270105         (    supercomm.asm):05062                  lbeq  L337E
2D9E 811B             (    supercomm.asm):05063                  cmpa  #$1B           SS1-4 (Search string for auto-login)
2DA0 1023F424         (    supercomm.asm):05064                  lbls  L2508          Go handle them
2DA4 811F             (    supercomm.asm):05065                  cmpa  #$1F           RS1-4 (Reply strings for SSn's)
2DA6 1023F3F8         (    supercomm.asm):05066                  lbls  L24E3
2DAA 8120             (    supercomm.asm):05067                  cmpa  #$20           RLF (Line feeds added to received text)
2DAC 10270106         (    supercomm.asm):05068                  lbeq  L3392
2DB0 8121             (    supercomm.asm):05069                  cmpa  #$21           TLF (Line feeds added to xmitted text)
2DB2 1027010C         (    supercomm.asm):05070                  lbeq  L33A1
2DB6 35B6             (    supercomm.asm):05071         L326F    puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):05072         
2DB8 108E0CF4         (    supercomm.asm):05073         L3271    ldy   #u0CF2
2DBC C620             (    supercomm.asm):05074                  ldb   #$20           Max size=32 bytes
2DBE A680             (    supercomm.asm):05075         L3277    lda   ,x+            Get char
2DC0 A7A0             (    supercomm.asm):05076                  sta   ,y+            Copy it
2DC2 810D             (    supercomm.asm):05077                  cmpa  #C$CR          End of line?
2DC4 2705             (    supercomm.asm):05078                  beq   L3284          Yes, skip ahead
2DC6 5A               (    supercomm.asm):05079                  decb                 Hit max size?
2DC7 26F5             (    supercomm.asm):05080                  bne   L3277          No, keep copying
2DC9 35B6             (    supercomm.asm):05081                  puls  pc,y,x,d       Restore & return
                      (    supercomm.asm):05082         
2DCB 6FA0             (    supercomm.asm):05083         L3284    clr   ,y+            Append NUL
2DCD 35B6             (    supercomm.asm):05084                  puls   pc,y,x,d      Restore & return
                      (    supercomm.asm):05085                  
2DCF 1700FC           (    supercomm.asm):05086         L328A    lbsr  L33B0
2DD2 C407             (    supercomm.asm):05087                  andb  #%00000111     Just keep baud rate
2DD4 B60CA7           (    supercomm.asm):05088                  lda   >u0CA5         Get baud/word len/stop bits
2DD7 84F8             (    supercomm.asm):05089                  anda  #%11111000     Keep all but baud
2DD9 B70CA7           (    supercomm.asm):05090                  sta   >u0CA5         Save it
2DDC FA0CA7           (    supercomm.asm):05091                  orb   >u0CA5         Merge with B
2DDF F70CA7           (    supercomm.asm):05092                  stb   >u0CA5         Save new baud rate
2DE2 35B6             (    supercomm.asm):05093                  puls   pc,y,x,d
                      (    supercomm.asm):05094         
2DE4 1700E7           (    supercomm.asm):05095         L32A3    lbsr  L33B0
2DE7 5D               (    supercomm.asm):05096                  tstb  
2DE8 2702             (    supercomm.asm):05097                  beq   L32AB
2DEA C601             (    supercomm.asm):05098                  ldb   #$01
2DEC F70CA9           (    supercomm.asm):05099         L32AB    stb   >u0CA7         Save echo type
2DEF 35B6             (    supercomm.asm):05100                  puls   pc,y,x,d
                      (    supercomm.asm):05101         
2DF1 1700DA           (    supercomm.asm):05102         L32B1    lbsr  L33B0
2DF4 5D               (    supercomm.asm):05103                  tstb  
2DF5 2702             (    supercomm.asm):05104                  beq   L32B9
2DF7 C601             (    supercomm.asm):05105                  ldb   #$01
2DF9 F70CB3           (    supercomm.asm):05106         L32B9    stb   >u0CB1
2DFC 35B6             (    supercomm.asm):05107                  puls   pc,y,x,d
                      (    supercomm.asm):05108         
2DFE 1700CD           (    supercomm.asm):05109         L32BF    lbsr  L33B0
2E01 C103             (    supercomm.asm):05110                  cmpb  #$03
2E03 2502             (    supercomm.asm):05111                  blo   L32C8
2E05 C602             (    supercomm.asm):05112                  ldb   #$02
2E07 F70CA8           (    supercomm.asm):05113         L32C8    stb   >u0CA6
2E0A 35B6             (    supercomm.asm):05114                  puls   pc,y,x,d
                      (    supercomm.asm):05115         
2E0C 1700BF           (    supercomm.asm):05116         L32CE    lbsr  L33B0
2E0F 5D               (    supercomm.asm):05117                  tstb  
2E10 2702             (    supercomm.asm):05118                  beq   L32D6
2E12 C601             (    supercomm.asm):05119                  ldb   #$01
2E14 F70CAA           (    supercomm.asm):05120         L32D6    stb   >u0CA8
2E17 F70CAB           (    supercomm.asm):05121                  stb   >u0CA9
2E1A 35B6             (    supercomm.asm):05122                  puls   pc,y,x,d
                      (    supercomm.asm):05123         
2E1C 1700AF           (    supercomm.asm):05124         L32E0    lbsr  L33B0
2E1F F70CB1           (    supercomm.asm):05125                  stb   >u0CAF         Pause off character code
2E22 35B6             (    supercomm.asm):05126                  puls   pc,y,x,d
                      (    supercomm.asm):05127         
2E24 1700A7           (    supercomm.asm):05128         L32E9    lbsr  L33B0
2E27 F70CB2           (    supercomm.asm):05129                  stb   >u0CB0         Pause on character code
2E2A 35B6             (    supercomm.asm):05130                  puls   pc,y,x,d
                      (    supercomm.asm):05131         
2E2C 17009F           (    supercomm.asm):05132         L32F3    lbsr  L33B0
2E2F F70D1B           (    supercomm.asm):05133                  stb   >u0D19
2E32 35B6             (    supercomm.asm):05134                  puls   pc,y,x,d
                      (    supercomm.asm):05135         
2E34 170097           (    supercomm.asm):05136         L32FD    lbsr  L33B0
2E37 F70D1C           (    supercomm.asm):05137                  stb   >u0D1A
2E3A 35B6             (    supercomm.asm):05138                  puls   pc,y,x,d
                      (    supercomm.asm):05139         
2E3C 17008F           (    supercomm.asm):05140         L3307    lbsr  L33B0
2E3F F70CAE           (    supercomm.asm):05141                  stb   >u0CAC         Save parity
2E42 35B6             (    supercomm.asm):05142                  puls   pc,y,x,d
                      (    supercomm.asm):05143         
2E44 170087           (    supercomm.asm):05144         L3311    lbsr  L33B0
2E47 5D               (    supercomm.asm):05145                  tstb  
2E48 2702             (    supercomm.asm):05146                  beq   L3319
2E4A C601             (    supercomm.asm):05147                  ldb   #$01
2E4C F70CAC           (    supercomm.asm):05148         L3319    stb   >u0CAA
2E4F 35B6             (    supercomm.asm):05149                  puls   pc,y,x,d
                      (    supercomm.asm):05150         
2E51 8D7B             (    supercomm.asm):05151         L3320    bsr   L33B0
2E53 B60CA7           (    supercomm.asm):05152                  lda   >u0CA5
2E56 844F             (    supercomm.asm):05153                  anda  #%01001111     Keep baud rate
2E58 B70CA7           (    supercomm.asm):05154                  sta   >u0CA5         Save it
2E5B FA0CA7           (    supercomm.asm):05155                  orb   >u0CA5         Mask in Word Len/Stop bits
2E5E F70CA7           (    supercomm.asm):05156                  stb   >u0CA5         Save new result
2E61 35B6             (    supercomm.asm):05157                  puls   pc,y,x,d
                      (    supercomm.asm):05158         
2E63 8D69             (    supercomm.asm):05159         L3338    bsr   L33B0
2E65 5D               (    supercomm.asm):05160                  tstb  
2E66 2706             (    supercomm.asm):05161                  beq   L3344
2E68 C180             (    supercomm.asm):05162                  cmpb  #$80
2E6A 2702             (    supercomm.asm):05163                  beq   L3344
2E6C 35B6             (    supercomm.asm):05164                  puls  pc,y,x,d
                      (    supercomm.asm):05165         
2E6E B60CA7           (    supercomm.asm):05166         L3344    lda   >u0CA5
2E71 847F             (    supercomm.asm):05167                  anda  #%01111111     Keep all but Stop bits
2E73 B70CA7           (    supercomm.asm):05168                  sta   >u0CA5
2E76 FA0CA7           (    supercomm.asm):05169                  orb   >u0CA5         Merge in stop bit setting
2E79 F70CA7           (    supercomm.asm):05170                  stb   >u0CA5
2E7C 35B6             (    supercomm.asm):05171                  puls  pc,y,x,d
                      (    supercomm.asm):05172         
2E7E A61E             (    supercomm.asm):05173         L3358    lda   -2,x           Get macro #
2E80 8031             (    supercomm.asm):05174                  suba  #$31           Convert ASCII 1-8 to binary 0-7
2E82 8107             (    supercomm.asm):05175                  cmpa  #7             Make sure only 0-7
2E84 221B             (    supercomm.asm):05176                  bhi   L337B          Not, exit
2E86 C680             (    supercomm.asm):05177                  ldb   #$80           128 bytes reserved per key
2E88 3D               (    supercomm.asm):05178                  mul   
2E89 108E0D1E         (    supercomm.asm):05179                  ldy   #u0D1C         Point to start of programmable keys buffer
2E8D 31AB             (    supercomm.asm):05180                  leay  d,y            Point to appropriate key in table
2E8F C680             (    supercomm.asm):05181                  ldb   #$80           Max size allowed=128 bytes
2E91 A680             (    supercomm.asm):05182         L336B    lda   ,x+            Get char
2E93 810D             (    supercomm.asm):05183                  cmpa  #C$CR          Hit end of line?
2E95 2707             (    supercomm.asm):05184                  beq   L3378          Yes, flag end with NUL & exit
2E97 A7A0             (    supercomm.asm):05185                  sta   ,y+            Save char
2E99 5A               (    supercomm.asm):05186                  decb                 Past max size?
2E9A 26F5             (    supercomm.asm):05187                  bne   L336B          No, keep copying
2E9C 35B6             (    supercomm.asm):05188                  puls   pc,y,x,d
                      (    supercomm.asm):05189         
2E9E 5F               (    supercomm.asm):05190         L3378    clrb                 Append NUL byte
2E9F EDA4             (    supercomm.asm):05191                  std   ,y             Save CR & NUL
2EA1 35B6             (    supercomm.asm):05192         L337B    puls   pc,y,x,d      Return
                      (    supercomm.asm):05193         
2EA3 108E131E         (    supercomm.asm):05194         L337E    ldy   #u131C
2EA7 C680             (    supercomm.asm):05195                  ldb   #$80
2EA9 A680             (    supercomm.asm):05196         L3384    lda   ,x+
2EAB 810D             (    supercomm.asm):05197                  cmpa  #C$CR          Hit end?
2EAD 27EF             (    supercomm.asm):05198                  beq   L3378          Yes, append NUL & exit
2EAF A7A0             (    supercomm.asm):05199                  sta   ,y+
2EB1 5A               (    supercomm.asm):05200                  decb  
2EB2 26F5             (    supercomm.asm):05201                  bne   L3384
2EB4 35B6             (    supercomm.asm):05202                  puls   pc,y,x,d
                      (    supercomm.asm):05203         
2EB6 8D16             (    supercomm.asm):05204         L3392    bsr   L33B0
2EB8 5D               (    supercomm.asm):05205                  tstb  
2EB9 2702             (    supercomm.asm):05206                  beq   L339A
2EBB C601             (    supercomm.asm):05207                  ldb   #$01
2EBD F70CAB           (    supercomm.asm):05208         L339A    stb   >u0CA9
2EC0 35B6             (    supercomm.asm):05209                  puls   pc,y,x,d
                      (    supercomm.asm):05210         
2EC2 8D0A             (    supercomm.asm):05211         L33A1    bsr   L33B0
2EC4 5D               (    supercomm.asm):05212                  tstb  
2EC5 2702             (    supercomm.asm):05213                  beq   L33A9
2EC7 C601             (    supercomm.asm):05214                  ldb   #$01
2EC9 F70CAA           (    supercomm.asm):05215         L33A9    stb   >u0CA8
2ECC 35B6             (    supercomm.asm):05216                  puls   pc,y,x,d
                      (    supercomm.asm):05217         
2ECE A601             (    supercomm.asm):05218         L33B0    lda   1,x
2ED0 8121             (    supercomm.asm):05219                  cmpa  #$21
2ED2 251C             (    supercomm.asm):05220                  blo   L33D2          Space or control char, skip ahead
2ED4 A684             (    supercomm.asm):05221                  lda   ,x
2ED6 8030             (    supercomm.asm):05222                  suba  #$30           Convert to Binary #
2ED8 810A             (    supercomm.asm):05223                  cmpa  #10            Possibly legit digit?
2EDA 2502             (    supercomm.asm):05224                  blo   L33C0
2EDC 8007             (    supercomm.asm):05225                  suba  #$07
2EDE C610             (    supercomm.asm):05226         L33C0    ldb   #$10
2EE0 3D               (    supercomm.asm):05227                  mul   
2EE1 A601             (    supercomm.asm):05228                  lda   1,x
2EE3 8030             (    supercomm.asm):05229                  suba  #$30           Convert to Binary #
2EE5 810A             (    supercomm.asm):05230                  cmpa  #10            Possibly legit digit
2EE7 2502             (    supercomm.asm):05231                  blo   L33CD          Decimal digit, skip ahead
2EE9 8007             (    supercomm.asm):05232                  suba  #$07
2EEB A701             (    supercomm.asm):05233         L33CD    sta   1,x
2EED EB01             (    supercomm.asm):05234                  addb  1,x
2EEF 39               (    supercomm.asm):05235                  rts   
                      (    supercomm.asm):05236         
2EF0 A684             (    supercomm.asm):05237         L33D2    lda   ,x
2EF2 8030             (    supercomm.asm):05238                  suba  #$30
2EF4 810A             (    supercomm.asm):05239                  cmpa  #10
2EF6 2502             (    supercomm.asm):05240                  blo   L33DC
2EF8 8007             (    supercomm.asm):05241                  suba  #$07
2EFA 1F89             (    supercomm.asm):05242         L33DC    tfr   a,b
2EFC 39               (    supercomm.asm):05243                  rts
                      (    supercomm.asm):05244         
2EFD 7D0D1B           (    supercomm.asm):05245         L33E0    tst   >u0D19
2F00 2606             (    supercomm.asm):05246                  bne   L33ED
2F02 7F131E           (    supercomm.asm):05247                  clr   >u131C
2F05 160125           (    supercomm.asm):05248                  lbra  L3533
                      (    supercomm.asm):05249         
2F08 17EB2C           (    supercomm.asm):05250         L33ED    lbsr  L1CDE
2F0B CC1403           (    supercomm.asm):05251                  ldd   #$1403
2F0E FD0C91           (    supercomm.asm):05252                  std   >u0C8F
2F11 CC2808           (    supercomm.asm):05253                  ldd   #$2808
2F14 FD0C93           (    supercomm.asm):05254                  std   >u0C91
2F17 17EACA           (    supercomm.asm):05255                  lbsr  L1C81
2F1A 308DD575         (    supercomm.asm):05256                  leax  >L04B1,pc      Print to 'Count', 'Seconds', etc.
2F1E 17E96B           (    supercomm.asm):05257                  lbsr  L1B03
2F21 17F188           (    supercomm.asm):05258                  lbsr  L23D0          Center text
2F24 308DD595         (    supercomm.asm):05259                  leax  >L04DB,pc      Print 'Dialing'
2F28 17E961           (    supercomm.asm):05260                  lbsr  L1B03
2F2B 17FC3A           (    supercomm.asm):05261                  lbsr  L2FDE
2F2E 308DD595         (    supercomm.asm):05262                  leax  >L04E5,pc      CurXY @ 23,3
2F32 17E957           (    supercomm.asm):05263                  lbsr  L1B03
2F35 C601             (    supercomm.asm):05264                  ldb   #$01
2F37 F713A1           (    supercomm.asm):05265                  stb   >u139F
2F3A 170105           (    supercomm.asm):05266                  lbsr  L354B
2F3D 8E0CF4           (    supercomm.asm):05267                  ldx   #u0CF2
2F40 5F               (    supercomm.asm):05268                  clrb  
2F41 A680             (    supercomm.asm):05269         L342A    lda   ,x+
2F43 5C               (    supercomm.asm):05270                  incb  
2F44 C120             (    supercomm.asm):05271                  cmpb  #$20
2F46 2203             (    supercomm.asm):05272                  bhi   L3434
2F48 4D               (    supercomm.asm):05273                  tsta  
2F49 26F6             (    supercomm.asm):05274                  bne   L342A
2F4B 5A               (    supercomm.asm):05275         L3434    decb  
2F4C 2606             (    supercomm.asm):05276                  bne   L343E
2F4E 7F131E           (    supercomm.asm):05277                  clr   >u131C
2F51 1600D9           (    supercomm.asm):05278                  lbra  L3533
                      (    supercomm.asm):05279         
2F54 4F               (    supercomm.asm):05280         L343E    clra  
2F55 1F02             (    supercomm.asm):05281                  tfr   d,y
2F57 10BF0CA3         (    supercomm.asm):05282                  sty   >u0CA1
2F5B 308DD372         (    supercomm.asm):05283         L3446    leax  >L02DC,pc      Write out 'ATH <CR>' to modem
2F5F 108E0004         (    supercomm.asm):05284                  ldy   #$0004
2F63 9630             (    supercomm.asm):05285                  lda   <u002B
2F65 103F8A           (    supercomm.asm):05286                  os9   I$Write  
2F68 8E005A           (    supercomm.asm):05287                  ldx   #$005A
2F6B 17DF6B           (    supercomm.asm):05288                  lbsr  L0F56
2F6E 9630             (    supercomm.asm):05289                  lda   <u002B         Check if data waiting at modem
2F70 C601             (    supercomm.asm):05290                  ldb   #SS.Ready
2F72 103F8D           (    supercomm.asm):05291                  os9   I$GetStt 
2F75 2409             (    supercomm.asm):05292                  bcc   L346E
2F77 17F97A           (    supercomm.asm):05293                  lbsr  L2D2E
2F7A 2504             (    supercomm.asm):05294                  bcs   L346E
2F7C 0F27             (    supercomm.asm):05295                  clr   <u0022
2F7E 2004             (    supercomm.asm):05296                  bra   L3473
                      (    supercomm.asm):05297         
2F80 8601             (    supercomm.asm):05298         L346E    lda   #$01
2F82 9727             (    supercomm.asm):05299                  sta   <u0022
2F84 17F98C           (    supercomm.asm):05300         L3473    lbsr  L2D50
2F87 10BE0CA3         (    supercomm.asm):05301                  ldy   >u0CA1
2F8B 8E0CF4           (    supercomm.asm):05302                  ldx   #u0CF2
2F8E 9630             (    supercomm.asm):05303                  lda   <u002B
2F90 103F8A           (    supercomm.asm):05304                  os9   I$Write  
2F93 17F97D           (    supercomm.asm):05305                  lbsr  L2D50
2F96 C6FF             (    supercomm.asm):05306                  ldb   #$FF
2F98 F70CA6           (    supercomm.asm):05307                  stb   >u0CA4
2F9B 17E935           (    supercomm.asm):05308         L348E    lbsr  L1B4E
2F9E B70CA5           (    supercomm.asm):05309                  sta   >u0CA3
2FA1 0D27             (    supercomm.asm):05310         L3495    tst   <u0022
2FA3 270C             (    supercomm.asm):05311                  beq   L34A6
2FA5 17F9EA           (    supercomm.asm):05312                  lbsr  L2DDD
2FA8 245E             (    supercomm.asm):05313                  bcc   L3509
2FAA 17FA26           (    supercomm.asm):05314                  lbsr  L2E1E
2FAD 2507             (    supercomm.asm):05315                  bcs   L34AB
2FAF 2030             (    supercomm.asm):05316                  bra   L34DC
                      (    supercomm.asm):05317         
2FB1 17F940           (    supercomm.asm):05318         L34A6    lbsr  L2D2E
2FB4 2552             (    supercomm.asm):05319                  bcs   L3509
2FB6 CC0027           (    supercomm.asm):05320         L34AB    ldd   #SS.KySns      Get keysense byte from StdIn
2FB9 103F8D           (    supercomm.asm):05321                  os9   I$GetStt 
2FBC 8180             (    supercomm.asm):05322                  cmpa  #$80
2FBE 2605             (    supercomm.asm):05323                  bne   L34BC
2FC0 7F131E           (    supercomm.asm):05324                  clr   >u131C
2FC3 2068             (    supercomm.asm):05325                  bra   L3533
                      (    supercomm.asm):05326         
2FC5 17E90B           (    supercomm.asm):05327         L34BC    lbsr  L1B4E
2FC8 B10CA5           (    supercomm.asm):05328                  cmpa  >u0CA3
2FCB 27D4             (    supercomm.asm):05329                  beq   L3495
2FCD 7C0CA6           (    supercomm.asm):05330                  inc   >u0CA4
2FD0 308DD4F8         (    supercomm.asm):05331                  leax  >L04EA,pc
2FD4 17E8B5           (    supercomm.asm):05332                  lbsr  L1B03
2FD7 F60CA6           (    supercomm.asm):05333                  ldb   >u0CA4
2FDA 8D66             (    supercomm.asm):05334                  bsr   L354B
2FDC F10D1C           (    supercomm.asm):05335                  cmpb  >u0D1A
2FDF 25BA             (    supercomm.asm):05336                  blo   L348E
2FE1 7C13A1           (    supercomm.asm):05337         L34DC    inc   >u139F
2FE4 308DD4DF         (    supercomm.asm):05338                  leax  >L04E5,pc
2FE8 17E8A1           (    supercomm.asm):05339                  lbsr  L1B03
2FEB F613A1           (    supercomm.asm):05340                  ldb   >u139F
2FEE 8D52             (    supercomm.asm):05341                  bsr   L354B
2FF0 F60D1B           (    supercomm.asm):05342                  ldb   >u0D19
2FF3 C1FF             (    supercomm.asm):05343                  cmpb  #$FF
2FF5 1027FF62         (    supercomm.asm):05344                  lbeq  L3446
2FF9 F613A1           (    supercomm.asm):05345                  ldb   >u139F
2FFC F10D1B           (    supercomm.asm):05346                  cmpb  >u0D19
2FFF 1025FF58         (    supercomm.asm):05347                  lblo  L3446
3003 7F131E           (    supercomm.asm):05348                  clr   >u131C
3006 2025             (    supercomm.asm):05349                  bra   L3533
                      (    supercomm.asm):05350         
3008 CC0198           (    supercomm.asm):05351         L3509    ldd   #1*256+SS.Tone    Send Tone to Std Out
300B 8E3F06           (    supercomm.asm):05352                  ldx   #$3F06
300E 108E0D00         (    supercomm.asm):05353                  ldy   #$0D00
3012 103F8E           (    supercomm.asm):05354                  os9   I$SetStt 
3015 108E0E00         (    supercomm.asm):05355                  ldy   #$0E00
3019 103F8E           (    supercomm.asm):05356                  os9   I$SetStt          Send another one (higher frequency)
301C 108E0F00         (    supercomm.asm):05357                  ldy   #$0F00
3020 103F8E           (    supercomm.asm):05358                  os9   I$SetStt          Send another one (still higher frequency)
3023 0D77             (    supercomm.asm):05359                  tst   <u0072
3025 2706             (    supercomm.asm):05360                  beq   L3533
3027 0C7A             (    supercomm.asm):05361                  inc   <u0075
3029 9678             (    supercomm.asm):05362                  lda   <u0073
302B 9779             (    supercomm.asm):05363                  sta   <u0074
302D 17E8F8           (    supercomm.asm):05364         L3533    lbsr  L1BAD
3030 9642             (    supercomm.asm):05365                  lda   <u003D            Close disk file
3032 103F8F           (    supercomm.asm):05366                  os9   I$Close  
3035 7D131E           (    supercomm.asm):05367                  tst   >u131C
3038 2703             (    supercomm.asm):05368                  beq   L3545
303A 17E77B           (    supercomm.asm):05369                  lbsr  L1A19
303D 17E115           (    supercomm.asm):05370         L3545    lbsr  L12B5
3040 35B6             (    supercomm.asm):05371                  puls  pc,y,x,d
                      (    supercomm.asm):05372         
3042 3416             (    supercomm.asm):05373         L354B    pshs  x,d
3044 8E13AB           (    supercomm.asm):05374                  ldx   #u13A9
3047 4F               (    supercomm.asm):05375                  clra  
3048 C164             (    supercomm.asm):05376         L3552    cmpb  #$64
304A 2505             (    supercomm.asm):05377                  blo   L355B
304C C064             (    supercomm.asm):05378                  subb  #$64
304E 4C               (    supercomm.asm):05379                  inca  
304F 20F7             (    supercomm.asm):05380                  bra   L3552
                      (    supercomm.asm):05381         
3051 8B30             (    supercomm.asm):05382         L355B    adda  #$30
3053 A780             (    supercomm.asm):05383                  sta   ,x+
3055 4F               (    supercomm.asm):05384                  clra  
3056 C10A             (    supercomm.asm):05385         L3560    cmpb  #10
3058 2505             (    supercomm.asm):05386                  blo   L3569
305A C00A             (    supercomm.asm):05387                  subb  #$0A
305C 4C               (    supercomm.asm):05388                  inca  
305D 20F7             (    supercomm.asm):05389                  bra   L3560
                      (    supercomm.asm):05390         
305F 8B30             (    supercomm.asm):05391         L3569    adda  #$30
3061 A780             (    supercomm.asm):05392                  sta   ,x+
3063 CB30             (    supercomm.asm):05393                  addb  #$30
3065 E780             (    supercomm.asm):05394                  stb   ,x+
3067 8E13AB           (    supercomm.asm):05395                  ldx   #u13A9
306A 108E0003         (    supercomm.asm):05396                  ldy   #$0003
306E 8601             (    supercomm.asm):05397                  lda   #$01           Write 3 bytes to Std Out
3070 103F8A           (    supercomm.asm):05398                  os9   I$Write  
3073 3596             (    supercomm.asm):05399                  puls  pc,x,d
                      (    supercomm.asm):05400         
                      (    supercomm.asm):05401         * Download a file processing (PgDn from command state)
3075 308DD3F8         (    supercomm.asm):05402         L3580    leax  >L048F,pc    turn off cursor
3079 7C0CA2           (    supercomm.asm):05403                  inc   >u0CA0
307C 17E80D           (    supercomm.asm):05404                  lbsr  L1B03
307F CC1C05           (    supercomm.asm):05405                  ldd   #$1C05       get start co-ordinates of overlay
3082 FD0C91           (    supercomm.asm):05406                  std   >u0C8F
3085 CC1907           (    supercomm.asm):05407                  ldd   #$1907       get size of overlay
3088 FD0C93           (    supercomm.asm):05408                  std   >u0C91
308B 17E956           (    supercomm.asm):05409                  lbsr  L1C81        place overlay
308E 308DD647         (    supercomm.asm):05410                  leax  >L0734,pc    print available protocols
3092 17E7F7           (    supercomm.asm):05411                  lbsr  L1B03
3095 8604             (    supercomm.asm):05412                  lda   #$04         get max # protocols
3097 B713A0           (    supercomm.asm):05413                  sta   >u139E       save it
309A D650             (    supercomm.asm):05414                  ldb   <u004B       get last selected protocol
309C 17EAA8           (    supercomm.asm):05415                  lbsr  L1DB8        let user choose new protocol
309F 17E995           (    supercomm.asm):05416                  lbsr  L1CDE        get rid of overlay window
30A2 308DD3C7         (    supercomm.asm):05417                  leax  >L048B,pc    turn cursor back on
30A6 17E7E3           (    supercomm.asm):05418                  lbsr  L1B03
30A9 0F4B             (    supercomm.asm):05419                  clr   <u0046       clear ymodem batch flag
30AB F60C88           (    supercomm.asm):05420                  ldb   >u0C84       get selected type
30AE 2717             (    supercomm.asm):05421                  beq   L35D6        ASCII, skip ahead
30B0 C103             (    supercomm.asm):05422                  cmpb  #$03         within max?
30B2 1022DB28         (    supercomm.asm):05423                  lbhi  L0C5E        no, go back to main loop
30B6 D750             (    supercomm.asm):05424                  stb   <u004B       update last selected protocol
30B8 C102             (    supercomm.asm):05425                  cmpb  #$02         ZModem?
30BA 1022E4B3         (    supercomm.asm):05426                  lbhi  L1793        yes, do it
30BE 2502             (    supercomm.asm):05427                  blo   L3648        X/Ymodem, go do it
30C0 0C4B             (    supercomm.asm):05428                  inc   <u0046       flag Ymodem batch
                      (    supercomm.asm):05429         * X/Ymodem (batch) file receive
30C2 3436             (    supercomm.asm):05430         L3648    pshs  d,x,y        Store regs
30C4 1600F1           (    supercomm.asm):05431                  lbra  L36F4        Go do X/Ymodem (w or w/o batch)
                      (    supercomm.asm):05432         
30C7 D750             (    supercomm.asm):05433         L35D6    stb   <u004B       update last selected protocol
30C9 160B1F           (    supercomm.asm):05434                  lbra  L4233        go do ASCII Xfer
                      (    supercomm.asm):05435         
                      (    supercomm.asm):05436         * Upload a file (PdUp in main command state)
30CC 308DD3A1         (    supercomm.asm):05437         L35DF    leax  >L048F,pc    point to CurOff
30D0 7F0CA2           (    supercomm.asm):05438                  clr   >u0CA0
30D3 17E7B6           (    supercomm.asm):05439                  lbsr  L1B03        turn cursor off
30D6 CC1C05           (    supercomm.asm):05440                  ldd   #$1C05
30D9 FD0C91           (    supercomm.asm):05441                  std   >u0C8F
30DC CC1908           (    supercomm.asm):05442                  ldd   #$1908
30DF FD0C93           (    supercomm.asm):05443                  std   >u0C91
30E2 17E8FF           (    supercomm.asm):05444                  lbsr  L1C81
30E5 308DD661         (    supercomm.asm):05445                  leax  >L07A5,pc      Point to file send menu
30E9 17E7A0           (    supercomm.asm):05446                  lbsr  L1B03          Print it
30EC 8605             (    supercomm.asm):05447                  lda   #$05
30EE B713A0           (    supercomm.asm):05448                  sta   >u139E
30F1 D64F             (    supercomm.asm):05449                  ldb   <u004A
30F3 17EA51           (    supercomm.asm):05450                  lbsr  L1DB8
30F6 17E93E           (    supercomm.asm):05451                  lbsr  L1CDE
30F9 308DD370         (    supercomm.asm):05452                  leax  >L048B,pc      Cursor On
30FD 17E78C           (    supercomm.asm):05453                  lbsr  L1B03
3100 0F4B             (    supercomm.asm):05454                  clr   <u0046
3102 0F4A             (    supercomm.asm):05455                  clr   <u0045
3104 F60C88           (    supercomm.asm):05456                  ldb   >u0C84
3107 271A             (    supercomm.asm):05457                  beq   L363F
3109 C104             (    supercomm.asm):05458                  cmpb  #$04
310B 1022DACF         (    supercomm.asm):05459                  lbhi  L0C5E
310F D74F             (    supercomm.asm):05460                  stb   <u004A
3111 C102             (    supercomm.asm):05461                  cmpb  #$02
3113 25AD             (    supercomm.asm):05462                  blo   L3648
3115 0C4A             (    supercomm.asm):05463                  inc   <u0045
3117 C103             (    supercomm.asm):05464                  cmpb  #$03
3119 25A7             (    supercomm.asm):05465                  blo   L3648
311B 1022E505         (    supercomm.asm):05466                  lbhi  L1859
311F 0C4B             (    supercomm.asm):05467                  inc   <u0046
3121 209F             (    supercomm.asm):05468                  bra   L3648
                      (    supercomm.asm):05469         
3123 D74F             (    supercomm.asm):05470         L363F    stb   <u004A
3125 160AC3           (    supercomm.asm):05471                  lbra  L4233
                      (    supercomm.asm):05472         
                      (    supercomm.asm):05473         * Setup Serial path options & data for file Xfer's
3128 CCFF00           (    supercomm.asm):05474         L364D    ldd   #$FF00
312B 9747             (    supercomm.asm):05475                  sta   <u0042
312D D76E             (    supercomm.asm):05476                  stb   <u0069
312F D764             (    supercomm.asm):05477                  stb   <u005F
3131 D751             (    supercomm.asm):05478                  stb   <u004C
3133 D76F             (    supercomm.asm):05479                  stb   <u006A
3135 D767             (    supercomm.asm):05480                  stb   <u0062
3137 D757             (    supercomm.asm):05481                  stb   <u0052
3139 D7A0             (    supercomm.asm):05482                  stb   <u009B
313B 8E13AB           (    supercomm.asm):05483                  ldx   #u13A9
313E 9630             (    supercomm.asm):05484                  lda   <u002B       get path to modem
3140 C600             (    supercomm.asm):05485                  ldb   #SS.Opt      Get path options
3142 3406             (    supercomm.asm):05486                  pshs  d
3144 103F8D           (    supercomm.asm):05487                  os9   I$GetStt     get current settings
3147 8E13AB           (    supercomm.asm):05488                  ldx   #u13A9       point to buffer
314A A68815           (    supercomm.asm):05489                  lda   PD.BAU-PD.OPT,x
314D 840F             (    supercomm.asm):05490                  anda  #$0F
314F A78815           (    supercomm.asm):05491                  sta   PD.BAU-PD.OPT,x
3152 A68814           (    supercomm.asm):05492                  lda   PD.PAR-PD.OPT,x
3155 8403             (    supercomm.asm):05493                  anda  #$03
3157 A78814           (    supercomm.asm):05494                  sta   PD.PAR-PD.OPT,x
315A 4F               (    supercomm.asm):05495                  clra  
315B 5F               (    supercomm.asm):05496                  clrb  
315C ED8818           (    supercomm.asm):05497                  std   PD.XON-PD.OPT,x
315F ED04             (    supercomm.asm):05498                  std   PD.EKO-PD.OPT,x
3161 3506             (    supercomm.asm):05499                  puls  d            restore path & option
3163 103F8E           (    supercomm.asm):05500                  os9   I$SetStt     set new path options
3166 B60CB2           (    supercomm.asm):05501                  lda   >u0CB0
3169 F60CB1           (    supercomm.asm):05502                  ldb   >u0CAF
316C 3406             (    supercomm.asm):05503                  pshs  d
316E 4F               (    supercomm.asm):05504                  clra  
316F B70CB1           (    supercomm.asm):05505                  sta   >u0CAF
3172 B70CB2           (    supercomm.asm):05506                  sta   >u0CB0
3175 170BE2           (    supercomm.asm):05507                  lbsr  L43CA
3178 3506             (    supercomm.asm):05508                  puls  d
317A B70CB2           (    supercomm.asm):05509                  sta   >u0CB0
317D F70CB1           (    supercomm.asm):05510                  stb   >u0CAF
3180 CC0000           (    supercomm.asm):05511                  ldd   #0
3183 DD0E             (    supercomm.asm):05512                  std   <u0009
3185 CC1504           (    supercomm.asm):05513                  ldd   #$1504       get start co-ordinates of xfer overlay
3188 FD0C91           (    supercomm.asm):05514                  std   >u0C8F
318B CC2509           (    supercomm.asm):05515                  ldd   #$2509       get size
318E FD0C93           (    supercomm.asm):05516                  std   >u0C91
3191 16E850           (    supercomm.asm):05517                  lbra  L1C81        place xfer overlay window
                      (    supercomm.asm):05518         
3194 3436             (    supercomm.asm):05519         L36CD    pshs  y,x,d
3196 17044F           (    supercomm.asm):05520         L36CF    lbsr  L3BBC
3199 9630             (    supercomm.asm):05521         L36D2    lda   <u002B       Check if data ready on modem
319B C601             (    supercomm.asm):05522                  ldb   #SS.Ready
319D 103F8D           (    supercomm.asm):05523                  os9   I$GetStt 
31A0 2409             (    supercomm.asm):05524                  bcc   L36E5        Maybe, go check it out
31A2 17045E           (    supercomm.asm):05525                  lbsr  L3BDA
31A5 8102             (    supercomm.asm):05526                  cmpa  #$02
31A7 25F0             (    supercomm.asm):05527                  blo   L36D2
31A9 35B6             (    supercomm.asm):05528                  puls  pc,y,x,d
                      (    supercomm.asm):05529         
31AB 4F               (    supercomm.asm):05530         L36E5    clra  
31AC 1F02             (    supercomm.asm):05531                  tfr   d,y          # bytes received to Y
31AE 9630             (    supercomm.asm):05532                  lda   <u002B       Get path to modem
31B0 8E13AB           (    supercomm.asm):05533                  ldx   #u13A9       Point to modem receive buffer
31B3 103F89           (    supercomm.asm):05534                  os9   I$Read       Read in the data
31B6 20DE             (    supercomm.asm):05535                  bra   L36CF
                      (    supercomm.asm):05536         
                      (    supercomm.asm):05537         * X/Ymodem (batch) file receive
31B8 17FF6D           (    supercomm.asm):05538         L36F4    lbsr  L364D        setup path options to modem for download
31BB 308DD312         (    supercomm.asm):05539                  leax  >L04EF,pc    point to 'Xmodem file Xfer...'
31BF 17E6CA           (    supercomm.asm):05540                  lbsr  L1B03        print it
31C2 0D4B             (    supercomm.asm):05541                  tst   <u0046       ymodem batch?
31C4 2707             (    supercomm.asm):05542                  beq   L370A        no, skip ahead
31C6 308DD329         (    supercomm.asm):05543                  leax  >L0511,pc    point to 'Y'
31CA 17E6BF           (    supercomm.asm):05544                  lbsr  L1B03        print it
31CD 308DD340         (    supercomm.asm):05545         L370A    leax  >L052F,pc    point to '<Break> aborts'
31D1 17E6B8           (    supercomm.asm):05546                  lbsr  L1B03        print it
31D4 0D4B             (    supercomm.asm):05547                  tst   <u0046       ymodem batch?
31D6 2709             (    supercomm.asm):05548                  beq   L371F        no, skip ahead
31D8 308DD295         (    supercomm.asm):05549                  leax  >L048F,pc    turn cursor off
31DC 17E6AD           (    supercomm.asm):05550                  lbsr  L1B03
31DF 2046             (    supercomm.asm):05551                  bra   L376A        skip to
                      (    supercomm.asm):05552         
                      (    supercomm.asm):05553         * Get filename for X/Ymodem receive
31E1 308DD35C         (    supercomm.asm):05554         L371F    leax  L055F,pc     point to 'File:'
31E5 17E6A4           (    supercomm.asm):05555                  lbsr  L1B03        print it
31E8 170CEC           (    supercomm.asm):05556                  lbsr  L455D        scan for old filename
31EB 0DA0             (    supercomm.asm):05557                  tst   <u009B       filename already present?
31ED 2712             (    supercomm.asm):05558                  beq   L3742        no, skip ahead
31EF 8E00A4           (    supercomm.asm):05559                  ldx   #u009F       point to name
31F2 108E0020         (    supercomm.asm):05560                  ldy   #$0020       get length
31F6 8601             (    supercomm.asm):05561                  lda   #$01         print it
31F8 103F8C           (    supercomm.asm):05562                  os9   I$WritLn 
31FB CC0704           (    supercomm.asm):05563                  ldd   #$0704       position cursor back to start of input prompt
31FE 17ED97           (    supercomm.asm):05564                  lbsr  L2294
3201 C61E             (    supercomm.asm):05565         L3742    ldb   #$1E         get max length of name
3203 17E6DF           (    supercomm.asm):05566                  lbsr  L1B61        get it from user
3206 0D26             (    supercomm.asm):05567                  tst   <u0021
3208 102601C6         (    supercomm.asm):05568                  lbne  L3954
320C 308DD22E         (    supercomm.asm):05569                  leax  L045E,pc     clear the screen
3210 17E679           (    supercomm.asm):05570                  lbsr  L1B03
3213 308DD2BA         (    supercomm.asm):05571                  leax  L04EF,pc     point to 'Xmodem file transer system'
3217 17E672           (    supercomm.asm):05572                  lbsr  L1B03        print it
321A 0D4B             (    supercomm.asm):05573                  tst   <u0046       ymodem batch?
321C 2710             (    supercomm.asm):05574                  beq   L3772        no, skip ahead
321E 308DD2D1         (    supercomm.asm):05575                  leax  L0511,pc     point to 'Y'
3222 17E667           (    supercomm.asm):05576                  lbsr  L1B03        print it
3225 2007             (    supercomm.asm):05577                  bra   L3772        skip ahead
                      (    supercomm.asm):05578         
3227 7D0CA2           (    supercomm.asm):05579         L376A    tst   >u0CA0       Up/Download?
322A 102706D8         (    supercomm.asm):05580                  lbeq  L3F08
                      (    supercomm.asm):05581         * NOTE: SHOULD CHANGE TO USE BILL'S SS.FILL CALL TO ALLOW EDITING OF 'GUESSED'
                      (    supercomm.asm):05582         *  FILENAME
322E 108E0613         (    supercomm.asm):05583         L3772    ldy   #u060E       point to user entered filename
3232 8E00A4           (    supercomm.asm):05584                  ldx   #u009F       point to old filename buffer
3235 A6A4             (    supercomm.asm):05585                  lda   ,y           get the first character
3237 810D             (    supercomm.asm):05586                  cmpa  #C$CR        user just hit enter?
3239 2608             (    supercomm.asm):05587                  bne   L378A        no, skip ahead
323B 0DA0             (    supercomm.asm):05588                  tst   <u009B       was there a old filename?
323D 10270191         (    supercomm.asm):05589                  lbeq  L3954        no, skip ahead
3241 2005             (    supercomm.asm):05590                  bra   L378F
                      (    supercomm.asm):05591         
3243 C620             (    supercomm.asm):05592         L378A    ldb   #$20         get length of name
3245 17F6A4           (    supercomm.asm):05593                  lbsr  L2D26        move it to old filename buffer
3248 7D0CA2           (    supercomm.asm):05594         L378F    tst   >u0CA0       Upload?
324B 102706B7         (    supercomm.asm):05595                  lbeq  L3F08        Yes, go do
324F 0D4B             (    supercomm.asm):05596                  tst   <u0046       Download; Batch?
3251 262A             (    supercomm.asm):05597                  bne   L37C9        yes, have to get filename from sender
3253 308DD2F6         (    supercomm.asm):05598                  leax  L056B,pc     point to 'Recv:'
3257 17E632           (    supercomm.asm):05599                  lbsr  L1B03        print it
325A 8601             (    supercomm.asm):05600                  lda   #$01         print the filename
325C 8E00A4           (    supercomm.asm):05601                  ldx   #u009F
325F 108E0020         (    supercomm.asm):05602                  ldy   #$0020
3263 103F8C           (    supercomm.asm):05603                  os9   I$WritLn 
3266 308DD207         (    supercomm.asm):05604                  leax  L048F,pc     turn off cursor
326A 17E61F           (    supercomm.asm):05605                  lbsr  L1B03
326D 8602             (    supercomm.asm):05606                  lda   #WRITE.      get file mode
326F C603             (    supercomm.asm):05607                  ldb   #$03         get attributes
3271 8E00A4           (    supercomm.asm):05608                  ldx   #u009F       Point to filename
3274 103F83           (    supercomm.asm):05609                  os9   I$Create     create file
3277 10250164         (    supercomm.asm):05610                  lbcs  L3965
327B 9747             (    supercomm.asm):05611                  sta   <u0042       save path #
327D DC06             (    supercomm.asm):05612         L37C9    ldd   <u0004       Get Start address of receive buffer
327F DD08             (    supercomm.asm):05613                  std   <u0006       Make it ptr to end of receive buffer too
3281 308DD2F0         (    supercomm.asm):05614                  leax  L0593,pc     point to 'Block # ... Error #'
3285 17E604           (    supercomm.asm):05615                  lbsr  L1B03        print it
3288 308DD30D         (    supercomm.asm):05616                  leax  L05B7,pc     point to 'Last Error:'
328C 17E5FD           (    supercomm.asm):05617                  lbsr  L1B03        print it
328F 308DD27E         (    supercomm.asm):05618                  leax  L052F,pc     point to '<Break> aborts'
3293 17E5F6           (    supercomm.asm):05619                  lbsr  L1B03        print it
3296 1705F8           (    supercomm.asm):05620                  lbsr  L3E83        print '0000' for
3299 17060C           (    supercomm.asm):05621                  lbsr  L3E9B        print '0000' for
329C 0D4B             (    supercomm.asm):05622                  tst   <u0046       Batch?
329E 270B             (    supercomm.asm):05623                  beq   L37F8        no, skip ahead
32A0 1705EE           (    supercomm.asm):05624         L37ED    lbsr  L3E83        print '0000' for
32A3 170602           (    supercomm.asm):05625                  lbsr  L3E9B        print '0000' for
32A6 CC0000           (    supercomm.asm):05626                  ldd   #$0000       Set current block # to 0 (for batch name block)
32A9 2006             (    supercomm.asm):05627                  bra   L37FE        skip ahead
                      (    supercomm.asm):05628         
                      (    supercomm.asm):05629         * Main X/Ymodem transfer loop
32AB 17062E           (    supercomm.asm):05630         L37F8    lbsr  L3EDD        print ???
32AE CC0001           (    supercomm.asm):05631                  ldd   #1           Set current block # to 1
32B1 DD58             (    supercomm.asm):05632         L37FE    std   <u0053       Save current block #
32B3 308DD3B5         (    supercomm.asm):05633                  leax  L06C7,pc     CurXY @ 16,1 & print 5 spaces
32B7 17E5D2           (    supercomm.asm):05634                  lbsr  L1B03        print it
32BA CC0D07           (    supercomm.asm):05635                  ldd   #$0D07       get cursor coords for error messages
32BD 17ECD8           (    supercomm.asm):05636                  lbsr  L2294        move there
32C0 308DD2E5         (    supercomm.asm):05637                  leax  L05C7,pc     Point to table of error messages for download
32C4 8601             (    supercomm.asm):05638                  lda   #$01         To Std Out
32C6 108E0014         (    supercomm.asm):05639                  ldy   #$0014       All error messages are 20 bytes (default=20 spaces
32CA 103F8A           (    supercomm.asm):05640                  os9   I$Write  
32CD 0C5F             (    supercomm.asm):05641                  inc   <u005A
32CF C604             (    supercomm.asm):05642                  ldb   #$04         get # attempts for CRC mode
32D1 D75E             (    supercomm.asm):05643                  stb   <u0059       save it as a counter
                      (    supercomm.asm):05644         * Try 4 attempts to recieve using CRC
32D3 1705AF           (    supercomm.asm):05645         L3823    lbsr  L3E73        send 'C' to host
32D6 0A5E             (    supercomm.asm):05646                  dec   <u0059       decrement attempt count
32D8 17030D           (    supercomm.asm):05647                  lbsr  L3BBC        update timeout time
32DB 9630             (    supercomm.asm):05648         L382C    lda   <u002B       get path to modem
32DD C601             (    supercomm.asm):05649                  ldb   #SS.Ready
32DF 103F8D           (    supercomm.asm):05650                  os9   I$GetStt     any data?
32E2 2460             (    supercomm.asm):05651                  bcc   L38A3        yes, skip ahead
32E4 17F327           (    supercomm.asm):05652                  lbsr  L29EB        No, go check if user hit <BREAK> to abort
32E7 10250121         (    supercomm.asm):05653                  lbcs  L3992        Yes, abort transfer
32EB 170315           (    supercomm.asm):05654                  lbsr  L3BDA        get # seconds
32EE 8103             (    supercomm.asm):05655                  cmpa  #$03         timeout?
32F0 25E9             (    supercomm.asm):05656                  blo   L382C        no, try again
32F2 0D5E             (    supercomm.asm):05657                  tst   <u0059       any attempts left?
32F4 26DD             (    supercomm.asm):05658                  bne   L3823        yes, try again
32F6 0F5F             (    supercomm.asm):05659                  clr   <u005A       ???
32F8 170592           (    supercomm.asm):05660         L384C    lbsr  L3E7F        Send NAK code to modem
32FB 1702EA           (    supercomm.asm):05661                  lbsr  L3BBC        Update timer stuff
                      (    supercomm.asm):05662         * Try 10 attempts to initiate CheckSum
32FE 9630             (    supercomm.asm):05663         L3852    lda   <u002B       get path to modem
3300 C601             (    supercomm.asm):05664                  ldb   #SS.Ready
3302 103F8D           (    supercomm.asm):05665                  os9   I$GetStt     Any data waiting?
3305 243D             (    supercomm.asm):05666                  bcc   L38A3        Yes, skip ahead
3307 17F304           (    supercomm.asm):05667                  lbsr  L29EB        No, go check if user hit <BREAK> to abort
330A 102500FE         (    supercomm.asm):05668                  lbcs  L3992        Yes, go abort transfer
330E 1702F2           (    supercomm.asm):05669                  lbsr  L3BDA        get # seconds waiting
3311 810A             (    supercomm.asm):05670                  cmpa  #10          timeout?
3313 25E9             (    supercomm.asm):05671                  blo   L3852        no, try again
3315 0C57             (    supercomm.asm):05672                  inc   <u0052       Inc # attempts at checksum
3317 1705B6           (    supercomm.asm):05673                  lbsr  L3EC5        ??? Update some counter
331A 17E732           (    supercomm.asm):05674                  lbsr  L1CF7        ??? (resets default colors to terminal type)
331D 9657             (    supercomm.asm):05675                  lda   <u0052       Get current # attempts @ checksum
331F 810A             (    supercomm.asm):05676                  cmpa  #10          Done 10 of them?
3321 25D5             (    supercomm.asm):05677                  blo   L384C        No, keep trying
3323 1600E6           (    supercomm.asm):05678                  lbra  L3992        Yes, abort transfer
                      (    supercomm.asm):05679         
3326 DC58             (    supercomm.asm):05680         L387D    ldd   <u0053       Get current block # of xfer
3328 2608             (    supercomm.asm):05681                  bne   L388E        There is one, skip ahead
332A 170544           (    supercomm.asm):05682                  lbsr  L3E7B        Send ACK to modem
332D 170555           (    supercomm.asm):05683                  lbsr  L3E73        Send 'C' (for CRC mode) to modem
3330 2003             (    supercomm.asm):05684                  bra   L3891
                      (    supercomm.asm):05685         
3332 17053C           (    supercomm.asm):05686         L388E    lbsr  L3E7B        Send ACK to modem
3335 DC58             (    supercomm.asm):05687         L3891    ldd   <u0053       Bump block # up 1
3337 C30001           (    supercomm.asm):05688                  addd  #$0001
333A DD58             (    supercomm.asm):05689                  std   <u0053
333C 17059D           (    supercomm.asm):05690                  lbsr  L3EDD        Update block # on screen
333F 0F57             (    supercomm.asm):05691                  clr   <u0052       Clear Checksum attempt count
3341 17057B           (    supercomm.asm):05692                  lbsr  L3EB3        Print '0000' (for block #'s?)
                      (    supercomm.asm):05693         
                      (    supercomm.asm):05694         * Data waiting on modem comes here
3344 17F2C7           (    supercomm.asm):05695         L38A3    lbsr  L29EB        check for keyboard data
3347 102500C1         (    supercomm.asm):05696                  lbcs  L3992        got something, abort xfer
334B 0FE7             (    supercomm.asm):05697                  clr   <u00E2       Clear 4th byte of modem buffer
334D 17010D           (    supercomm.asm):05698                  lbsr  L39F1        Go do the download (?)
3350 3401             (    supercomm.asm):05699                  pshs  cc           Save error status
3352 DC58             (    supercomm.asm):05700                  ldd   <u0053       Get current block #
3354 2614             (    supercomm.asm):05701                  bne   L38C7        Not header block, skip ahead
3356 0DE7             (    supercomm.asm):05702                  tst   <u00E2       Check 4th byte in buffer
3358 2605             (    supercomm.asm):05703                  bne   L38CD
335A 3501             (    supercomm.asm):05704                  puls  cc           Restore error from download
335C 1600AD           (    supercomm.asm):05705                  lbra  L3992        Abort xfer
                      (    supercomm.asm):05706         
335F 3501             (    supercomm.asm):05707         L38CD    puls  cc           Restore error from download
3361 24C3             (    supercomm.asm):05708                  bcc   L387D        None, go send ACK/'C' to modem
3363 860D             (    supercomm.asm):05709                  lda   #C$CR        Error, reset previous dload filename to CR
3365 97A4             (    supercomm.asm):05710                  sta   <u009F
3367 1600A2           (    supercomm.asm):05711                  lbra  L3992        Abort xfer
                      (    supercomm.asm):05712         
336A 3501             (    supercomm.asm):05713         L38C7    puls  cc
336C 250F             (    supercomm.asm):05714                  bcs   L38EC
336E 0D64             (    supercomm.asm):05715         L38DA    tst   <u005F
3370 261B             (    supercomm.asm):05716                  bne   L38FD
3372 0D67             (    supercomm.asm):05717                  tst   <u0062
3374 27B0             (    supercomm.asm):05718                  beq   L387D
3376 0F67             (    supercomm.asm):05719                  clr   <u0062
3378 1704F6           (    supercomm.asm):05720                  lbsr  L3E7B
337B 20C7             (    supercomm.asm):05721                  bra   L38A3          Go check keyboard/modem again
                      (    supercomm.asm):05722         
337D 9657             (    supercomm.asm):05723         L38EC    lda   <u0052         Get current # attempts @ checksum
337F 8109             (    supercomm.asm):05724                  cmpa  #$09           Already have more than 9?
3381 10220087         (    supercomm.asm):05725                  lbhi  L3992          Too many errors, abort xfer
3385 17FE0C           (    supercomm.asm):05726                  lbsr  L36CD
3388 170502           (    supercomm.asm):05727                  lbsr  L3E7F          Send NAK to modem
338B 20B7             (    supercomm.asm):05728                  bra   L38A3
                      (    supercomm.asm):05729         
                      (    supercomm.asm):05730         * Current file xfer is done
338D 0D4B             (    supercomm.asm):05731         L38FD    tst   <u0046         Batch mode on?
338F 2731             (    supercomm.asm):05732                  beq   L3941          No, skip ahead
                      (    supercomm.asm):05733         * Batch mode xfer done
3391 1704F9           (    supercomm.asm):05734                  lbsr  L3E7F          Send NAK to modem
3394 1700C6           (    supercomm.asm):05735                  lbsr  L39F1          Go read block (for filename)
3397 0F64             (    supercomm.asm):05736                  clr   <u005F
3399 0D51             (    supercomm.asm):05737                  tst   <u004C
339B 2616             (    supercomm.asm):05738                  bne   L392D
339D DC60             (    supercomm.asm):05739                  ldd   <u005B         Get MSW of file size
339F 2604             (    supercomm.asm):05740                  bne   L391C          Definately not 0 length, go resize
33A1 DC62             (    supercomm.asm):05741                  ldd   <u005B+2       Get LSW of file size
33A3 270E             (    supercomm.asm):05742                  beq   L392D          0 byte file, don't pre-extend
33A5 9647             (    supercomm.asm):05743         L391C    lda   <u0042         Get path to download file
33A7 C602             (    supercomm.asm):05744                  ldb   #SS.Size       Re-size file to exact size from Batch header
33A9 9E60             (    supercomm.asm):05745                  ldx   <u005B
33AB 109E62           (    supercomm.asm):05746                  ldy   <u005B+2
33AE 1F23             (    supercomm.asm):05747                  tfr   y,u
33B0 103F8E           (    supercomm.asm):05748                  os9   I$SetStt 
33B3 9647             (    supercomm.asm):05749         L392D    lda   <u0042         Close the download file (???)
33B5 103F8F           (    supercomm.asm):05750                  os9   I$Close  
33B8 860D             (    supercomm.asm):05751                  lda   #C$CR          Reset old filename to CR
33BA 97A4             (    supercomm.asm):05752                  sta   <u009F
33BC 1704B2           (    supercomm.asm):05753                  lbsr  L3E7B          Send ACK to modem
33BF 16FEDE           (    supercomm.asm):05754                  lbra  L37ED          Reprint Block & Error #'s to '0000'
                      (    supercomm.asm):05755         
                      (    supercomm.asm):05756         * Non-batch mode goes here
33C2 0F64             (    supercomm.asm):05757         L3941    clr   <u005F
33C4 1704AA           (    supercomm.asm):05758                  lbsr  L3E7B          Send ACK to modem
33C7 7F0CA2           (    supercomm.asm):05759         L3947    clr   >u0CA0         ??? Set xmit/recv flag to xmit???
33CA 17E693           (    supercomm.asm):05760                  lbsr  L1D09          Go sound a tone
33CD 9647             (    supercomm.asm):05761                  lda   <u0042         Get path to dload file
33CF 103F8F           (    supercomm.asm):05762                  os9   I$Close        Close it
33D2 17DC70           (    supercomm.asm):05763         L3954    lbsr  L118F          Go update the status line
33D5 17E65F           (    supercomm.asm):05764                  lbsr  L1CDE          Remove overlay windows
33D8 0F4B             (    supercomm.asm):05765                  clr   <u0046         Clear Batch mode flag
33DA 3536             (    supercomm.asm):05766                  puls  y,x,d          Restore regs
33DC 16D7FF           (    supercomm.asm):05767                  lbra  L0C5E          Go back to main (no file xfer) loop
                      (    supercomm.asm):05768         
33DF 8607             (    supercomm.asm):05769         L3965    lda   #$07
33E1 17E894           (    supercomm.asm):05770                  lbsr  L1F0B
33E4 3404             (    supercomm.asm):05771                  pshs  b
33E6 CC0D02           (    supercomm.asm):05772                  ldd   #$0D02
33E9 17EBAC           (    supercomm.asm):05773                  lbsr  L2294
33EC 8603             (    supercomm.asm):05774                  lda   #$03
33EE 17E887           (    supercomm.asm):05775                  lbsr  L1F0B
33F1 308DD07C         (    supercomm.asm):05776                  leax  >L048F,pc      Cursor OFF
33F5 17E494           (    supercomm.asm):05777                  lbsr  L1B03
33F8 3504             (    supercomm.asm):05778                  puls  b
33FA 103F0F           (    supercomm.asm):05779                  os9   F$PErr         Print Error
33FD 8E003C           (    supercomm.asm):05780                  ldx   #$003C
3400 17DAD6           (    supercomm.asm):05781                  lbsr  L0F56
3403 308DD066         (    supercomm.asm):05782                  leax  >L048B,pc      Cursor ON
3407 17E482           (    supercomm.asm):05783                  lbsr  L1B03
340A 20C6             (    supercomm.asm):05784                  bra   L3954          Go remove windows & exit xfer
                      (    supercomm.asm):05785         
                      (    supercomm.asm):05786         * Cancel file receive (comes here if key pressed)
340C 96A4             (    supercomm.asm):05787         L3992    lda   <u009F       get first char of filename
340E 810D             (    supercomm.asm):05788                  cmpa  #C$CR        anything?
3410 270E             (    supercomm.asm):05789                  beq   L39AA        no, skip delete
3412 9647             (    supercomm.asm):05790                  lda   <u0042       get path to file
3414 103F8F           (    supercomm.asm):05791                  os9   I$Close      close it
                      (    supercomm.asm):05792         * NOTE: MAY WANT TO ADD USER OPTION TO KEEP WHATEVER WAS RECEIVED IN ABORTED
                      (    supercomm.asm):05793         * XFER
3417 8E00A4           (    supercomm.asm):05794                  ldx   #u009F       point to filename
341A 103F87           (    supercomm.asm):05795                  os9   I$Delete     delete it
341D 17FD74           (    supercomm.asm):05796                  lbsr  L36CD        purge any remaining data from modem
                      (    supercomm.asm):05797         * Cancel file transfer
3420 8E13AB           (    supercomm.asm):05798         L39AA    ldx   #u13A9       point to temp buffer
3423 CC1804           (    supercomm.asm):05799                  ldd   #$1804       CANcel code- 4 times
3426 A780             (    supercomm.asm):05800         L39B2    sta   ,x+          place in buffer
3428 5A               (    supercomm.asm):05801                  decb               done?
3429 26FB             (    supercomm.asm):05802                  bne   L39B2        no keep going
342B CC0304           (    supercomm.asm):05803                  ldd   #$0304       Also add 4 <CTRL>-<C>'s
342E A780             (    supercomm.asm):05804         L39BB    sta   ,x+          place in buffer
3430 5A               (    supercomm.asm):05805                  decb               done?
3431 26FB             (    supercomm.asm):05806                  bne   L39BB        no, keep going
3433 9630             (    supercomm.asm):05807                  lda   <u002B       get path to modem
3435 108E0008         (    supercomm.asm):05808                  ldy   #8           get # chars
3439 8E13AB           (    supercomm.asm):05809                  ldx   #u13A9       point to CAN string
343C 103F8A           (    supercomm.asm):05810                  os9   I$Write      send it to host
343F 2086             (    supercomm.asm):05811                  bra   L3947        Go close down xfer cleanly
                      (    supercomm.asm):05812         
3441 8604             (    supercomm.asm):05813         L39D1    lda   #$04         Error # 4 (Time Out)
3443 9754             (    supercomm.asm):05814                  sta   <u004F
3445 16016B           (    supercomm.asm):05815                  lbra  L3B83
                      (    supercomm.asm):05816         
3448 8603             (    supercomm.asm):05817         L39D9    lda   #$03         Error # 3 (Block check failed)
344A 9754             (    supercomm.asm):05818                  sta   <u004F
344C 160164           (    supercomm.asm):05819                  lbra  L3B83
                      (    supercomm.asm):05820         
344F 8602             (    supercomm.asm):05821         L39E1    lda   #$02         Error # 2 (Wrong Block #)
3451 9754             (    supercomm.asm):05822                  sta   <u004F
3453 16015D           (    supercomm.asm):05823                  lbra  L3B83
                      (    supercomm.asm):05824         
3456 8601             (    supercomm.asm):05825         L39E9    lda   #$01         Error # 1 (Transfer aborted)
3458 9754             (    supercomm.asm):05826                  sta   <u004F
345A 160156           (    supercomm.asm):05827                  lbra  L3B83
                      (    supercomm.asm):05828         
                      (    supercomm.asm):05829         * Read a block??
345D 3430             (    supercomm.asm):05830         L39F1    pshs  y,x          Preserve regs
345F CC0000           (    supercomm.asm):05831                  ldd   #$0000
3462 DD52             (    supercomm.asm):05832                  std   <u004D       Clear byte counter for dload
3464 DD4D             (    supercomm.asm):05833                  std   <u0048       reset running CRC
3466 9767             (    supercomm.asm):05834                  sta   <u0062
3468 9754             (    supercomm.asm):05835                  sta   <u004F       Reset error # for xfer
346A 9764             (    supercomm.asm):05836                  sta   <u005F
346C 170179           (    supercomm.asm):05837                  lbsr  L3BBC        ??? Something with timer (timeout check?)
346F 8E00E4           (    supercomm.asm):05838         L3A08    ldx   #u00DF       point to modem receive buffer
3472 17018E           (    supercomm.asm):05839         L3A0C    lbsr  L3BDA        update timeout time
3475 810A             (    supercomm.asm):05840                  cmpa  #10          timeout?
3477 22C8             (    supercomm.asm):05841                  bhi   L39D1        yes, skip ahead
3479 9630             (    supercomm.asm):05842                  lda   <u002B       get path to modem
347B C601             (    supercomm.asm):05843                  ldb   #SS.Ready    any data?
347D 103F8D           (    supercomm.asm):05844                  os9   I$GetStt 
3480 25F0             (    supercomm.asm):05845                  bcs   L3A0C        no, wait for it
3482 108E0001         (    supercomm.asm):05846                  ldy   #1           get # bytes needed
                      (    supercomm.asm):05847         * NOTE: Attempted to eliminate lda <u002B (redundant from GetStt above)
3486 103F89           (    supercomm.asm):05848                  os9   I$Read       read the block header byte
3489 25E7             (    supercomm.asm):05849                  bcs   L3A0C        error, try again
348B 1F20             (    supercomm.asm):05850                  tfr   y,d          move # bytes to D
348D DD52             (    supercomm.asm):05851                  std   <u004D       save it
348F 3A               (    supercomm.asm):05852                  abx                add LSB of it to buffer pointer
3490 96E4             (    supercomm.asm):05853                  lda   <u00DF       get the header byte
                      (    supercomm.asm):05854         * NOTE: Change to use DECA to speed up X&Ymodem header checks?
3492 8102             (    supercomm.asm):05855                  cmpa  #$02         ymodem header?
3494 271D             (    supercomm.asm):05856                  beq   L3A57        yes, get block size
3496 8101             (    supercomm.asm):05857                  cmpa  #$01         xmodem header?
3498 2714             (    supercomm.asm):05858                  beq   L3A52        yes, get block size
349A 8104             (    supercomm.asm):05859                  cmpa  #$04         batch file header?
349C 1027013A         (    supercomm.asm):05860                  lbeq  L3BAC        yes, increment file count & process
34A0 8118             (    supercomm.asm):05861                  cmpa  #$18         CAN?
34A2 1027013B         (    supercomm.asm):05862                  lbeq  L3BB4        yes, cancel xfer
34A6 8103             (    supercomm.asm):05863                  cmpa  #$03         OS-9 CAN?
34A8 10270135         (    supercomm.asm):05864                  lbeq  L3BB4        yes, cancel xfer
34AC 20C1             (    supercomm.asm):05865                  bra   L3A08        garbage data, try again
                      (    supercomm.asm):05866         
                      (    supercomm.asm):05867         * Get XModem data block size
34AE CC0080           (    supercomm.asm):05868         L3A52    ldd   #$0080       128 bytes per block (Xmodem)
34B1 2003             (    supercomm.asm):05869                  bra   L3A5A
                      (    supercomm.asm):05870         
                      (    supercomm.asm):05871         * Get YModem data block size
34B3 CC0400           (    supercomm.asm):05872         L3A57    ldd   #$0400       1024 bytes per block (Ymodem)
34B6 DD5C             (    supercomm.asm):05873         L3A5A    std   <u0057       save block size
34B8 108E00E7         (    supercomm.asm):05874                  ldy   #u00E2       Get ptr to where data block will be (past header)
34BC 31AB             (    supercomm.asm):05875                  leay  d,y          Calculate end of block ptr
34BE 109F55           (    supercomm.asm):05876                  sty   <u0050       Save it
34C1 CA04             (    supercomm.asm):05877                  orb   #$04         add 4 to block size for header & checksum
34C3 0D5F             (    supercomm.asm):05878                  tst   <u005A       CRC mode active?
34C5 2702             (    supercomm.asm):05879                  beq   L3A70        No, we have block size
34C7 CA01             (    supercomm.asm):05880                  orb   #$01         add 1 to block size (for 2nd CRC byte)
34C9 DD5A             (    supercomm.asm):05881         L3A70    std   <u0055       save true block size
34CB 17011A           (    supercomm.asm):05882                  lbsr  L3BBC        update timeout time
34CE 2009             (    supercomm.asm):05883                  bra   L3A81        Start getting blocks?
                      (    supercomm.asm):05884         
34D0 170130           (    supercomm.asm):05885         L3A78    lbsr  L3BDA        Go update X/YModem timer
34D3 8102             (    supercomm.asm):05886                  cmpa  #2           Too long?
34D5 1022FF68         (    supercomm.asm):05887                  lbhi  L39D1        Yes, TimeOut Error
34D9 9630             (    supercomm.asm):05888         L3A81    lda   <u002B       Any data ready on modem?
34DB C601             (    supercomm.asm):05889                  ldb   #SS.Ready
34DD 103F8D           (    supercomm.asm):05890                  os9   I$GetStt 
34E0 25EE             (    supercomm.asm):05891                  bcs   L3A78        No, do again
34E2 C102             (    supercomm.asm):05892                  cmpb  #$02         At least 2 chars?
34E4 25EA             (    supercomm.asm):05893                  blo   L3A78        No, too small to bother, do again
34E6 108E0002         (    supercomm.asm):05894                  ldy   #$0002       Read 2 chars from modem
34EA 103F89           (    supercomm.asm):05895                  os9   I$Read       Read in 2 chars
34ED 1F20             (    supercomm.asm):05896                  tfr   y,d          Move size read to D
34EF 3A               (    supercomm.asm):05897                  abx                Bump buffer ptr up past new data
34F0 D352             (    supercomm.asm):05898                  addd  <u004D       Add to total # bytes gotten for this block
34F2 DD52             (    supercomm.asm):05899                  std   <u004D       Save updated counter
34F4 DC58             (    supercomm.asm):05900                  ldd   <u0053       Get current block #
34F6 D1E5             (    supercomm.asm):05901                  cmpb  <u00DF+1     Compare with block # for X/Ymodem block
34F8 2608             (    supercomm.asm):05902                  bne   L3AB6        Error, skip ahead
34FA 53               (    supercomm.asm):05903         L3AAC    comb               Compliment block #
34FB D1E6             (    supercomm.asm):05904                  cmpb  <u00DF+2     Match compliment in block header?
34FD 270E             (    supercomm.asm):05905                  beq   L3AC2        Yes, header info is fine, skip ahead
34FF 16FF4D           (    supercomm.asm):05906                  lbra  L39E1        Wrong Block # error
                      (    supercomm.asm):05907         
                      (    supercomm.asm):05908         * Block # error
3502 5A               (    supercomm.asm):05909         L3AB6    decb               Bump current block # down to previous one
3503 D1E5             (    supercomm.asm):05910                  cmpb  <u00DF+1     Is that the one in the block header?
3505 1026FF46         (    supercomm.asm):05911                  lbne  L39E1        No, wrong block # error
3509 0C67             (    supercomm.asm):05912                  inc   <u0062       ???
350B 20ED             (    supercomm.asm):05913                  bra   L3AAC        Check compliment of block # too
                      (    supercomm.asm):05914         
                      (    supercomm.asm):05915         * Block # & it's compliment match in X/YModem block
350D 1700D8           (    supercomm.asm):05916         L3AC2    lbsr  L3BBC        Do timing update
3510 1700F0           (    supercomm.asm):05917         L3AC5    lbsr  L3BDA        Do timing sleep
                      (    supercomm.asm):05918         * MAY WANT TO INCREASE THIS
3513 8102             (    supercomm.asm):05919                  cmpa  #2           2 second difference?
3515 1022FF28         (    supercomm.asm):05920                  lbhi  L39D1        If more than 2 second wait, timeout error
3519 9630             (    supercomm.asm):05921         L3ACE    lda   <u002B       Any data ready on modem?
351B C601             (    supercomm.asm):05922                  ldb   #SS.Ready
351D 103F8D           (    supercomm.asm):05923                  os9   I$GetStt 
3520 25EE             (    supercomm.asm):05924                  bcs   L3AC5        No, do again
3522 4F               (    supercomm.asm):05925                  clra  
3523 1F02             (    supercomm.asm):05926                  tfr   d,y          # bytes received into Y
3525 9630             (    supercomm.asm):05927                  lda   <u002B       Read in data from modem
3527 103F89           (    supercomm.asm):05928                  os9   I$Read   
352A 25E4             (    supercomm.asm):05929                  bcs   L3AC5        Error reading, try again
352C 1F20             (    supercomm.asm):05930                  tfr   y,d          # bytes read to D
352E 1700B7           (    supercomm.asm):05931                  lbsr  L3BBC        Do timing update
3531 0D5F             (    supercomm.asm):05932                  tst   <u005A       CRC mode?
3533 2605             (    supercomm.asm):05933                  bne   L3AF2        Yes, go update CRC
3535 17031F           (    supercomm.asm):05934                  lbsr  L3E3D        Go update checksum
3538 2003             (    supercomm.asm):05935                  bra   L3AF5
                      (    supercomm.asm):05936         
353A 1700F6           (    supercomm.asm):05937         L3AF2    lbsr  L3E0F        update CRC
353D 3A               (    supercomm.asm):05938         L3AF5    abx                Add # bytes read to read ptr
353E D352             (    supercomm.asm):05939                  addd  <u004D       Add # bytes in this I$Read to total #bytes so far
3540 DD52             (    supercomm.asm):05940                  std   <u004D         for this block
3542 10935A           (    supercomm.asm):05941                  cmpd  <u0055       Got all the data we need for this block?
3545 25D2             (    supercomm.asm):05942                  blo   L3ACE        No, keep reading data
3547 9E55             (    supercomm.asm):05943                  ldx   <u0050
3549 DC4D             (    supercomm.asm):05944                  ldd   <u0048
354B 0D5F             (    supercomm.asm):05945                  tst   <u005A
354D 2708             (    supercomm.asm):05946                  beq   L3B16
354F 10A384           (    supercomm.asm):05947                  cmpd  ,x
3552 2707             (    supercomm.asm):05948         L3B10    beq   L3B1A
3554 16FEF1           (    supercomm.asm):05949                  lbra  L39D9
                      (    supercomm.asm):05950         
3557 A184             (    supercomm.asm):05951         L3B16    cmpa  ,x
3559 20F7             (    supercomm.asm):05952                  bra   L3B10
                      (    supercomm.asm):05953         
355B 0D67             (    supercomm.asm):05954         L3B1A    tst   <u0062
355D 2651             (    supercomm.asm):05955                  bne   L3B7F
355F DC58             (    supercomm.asm):05956                  ldd   <u0053
3561 2607             (    supercomm.asm):05957                  bne   L3B2F
3563 17EF3E           (    supercomm.asm):05958                  lbsr  L2860
3566 254B             (    supercomm.asm):05959                  bcs   L3B83
3568 35B0             (    supercomm.asm):05960                  puls  pc,y,x
                      (    supercomm.asm):05961         
356A 8E00E7           (    supercomm.asm):05962         L3B2F    ldx   #u00E2
356D 10830001         (    supercomm.asm):05963                  cmpd  #$0001
3571 2638             (    supercomm.asm):05964                  bne   L3B79
3573 DC5C             (    supercomm.asm):05965                  ldd   <u0057
3575 170649           (    supercomm.asm):05966                  lbsr  L4206
3578 0D51             (    supercomm.asm):05967                  tst   <u004C
357A 272F             (    supercomm.asm):05968                  beq   L3B79
357C 3432             (    supercomm.asm):05969                  pshs  y,x,a
357E 8E00A1           (    supercomm.asm):05970                  ldx   #u009C
3581 968E             (    supercomm.asm):05971                  lda   <u0089
3583 A702             (    supercomm.asm):05972                  sta   2,x
3585 108E0003         (    supercomm.asm):05973                  ldy   #$0003
3589 8601             (    supercomm.asm):05974                  lda   #$01
358B 103F8A           (    supercomm.asm):05975                  os9   I$Write  
358E 308DD0D2         (    supercomm.asm):05976                  leax  >L06BF,pc      Print 'ASCII'
3592 108E0008         (    supercomm.asm):05977                  ldy   #$0008
3596 103F8A           (    supercomm.asm):05978                  os9   I$Write  
3599 968C             (    supercomm.asm):05979                  lda   <u0087
359B 8E00A1           (    supercomm.asm):05980                  ldx   #u009C
359E A702             (    supercomm.asm):05981                  sta   $02,x
35A0 108E0003         (    supercomm.asm):05982                  ldy   #$0003
35A4 8601             (    supercomm.asm):05983                  lda   #$01
35A6 103F8A           (    supercomm.asm):05984                  os9   I$Write  
35A9 3532             (    supercomm.asm):05985                  puls  y,x,a
35AB DC5C             (    supercomm.asm):05986         L3B79    ldd   <u0057
35AD 17059E           (    supercomm.asm):05987                  lbsr  L4191
35B0 5F               (    supercomm.asm):05988         L3B7F    clrb  
35B1 35B0             (    supercomm.asm):05989         L3B80    puls  pc,y,x
                      (    supercomm.asm):05990         
35B3 0C57             (    supercomm.asm):05991         L3B83    inc   <u0052
35B5 170318           (    supercomm.asm):05992                  lbsr  L3EC5
35B8 17E494           (    supercomm.asm):05993                  lbsr  L1CF7
35BB CC0D07           (    supercomm.asm):05994                  ldd   #$0D07
35BE 17E9D7           (    supercomm.asm):05995                  lbsr  L2294
35C1 C614             (    supercomm.asm):05996                  ldb   #$14           Size of each error message
35C3 9654             (    supercomm.asm):05997                  lda   <u004F         Get error #
35C5 2710             (    supercomm.asm):05998                  beq   L3BA9          0=none?
35C7 3D               (    supercomm.asm):05999                  mul                  Calculate offset to proper error
35C8 308DCFDD         (    supercomm.asm):06000                  leax  >L05C7,pc      Point to Download error list
35CC 308B             (    supercomm.asm):06001                  leax  d,x            Point to specific error we want
35CE 8601             (    supercomm.asm):06002                  lda   #$01           Print it to the user
35D0 108E0014         (    supercomm.asm):06003                  ldy   #$0014
35D4 103F8A           (    supercomm.asm):06004                  os9   I$Write  
35D7 53               (    supercomm.asm):06005         L3BA9    comb  
35D8 35B0             (    supercomm.asm):06006                  puls  pc,y,x
                      (    supercomm.asm):06007         
35DA 0C64             (    supercomm.asm):06008         L3BAC    inc   <u005F
35DC 1705C9           (    supercomm.asm):06009                  lbsr  L41EC
35DF 35B0             (    supercomm.asm):06010                  puls  pc,y,x
                      (    supercomm.asm):06011         
35E1 860A             (    supercomm.asm):06012         L3BB4    lda   #$0A
35E3 9757             (    supercomm.asm):06013                  sta   <u0052
35E5 16FE6E           (    supercomm.asm):06014                  lbra  L39E9
                      (    supercomm.asm):06015         
35E8 0D77             (    supercomm.asm):06016         L3BBC    tst   <u0072         Is VRN running?
35EA 2709             (    supercomm.asm):06017                  beq   L3BCC          No, use F$Time call
35EC 3406             (    supercomm.asm):06018                  pshs  d              Preserve reg used
35EE 4F               (    supercomm.asm):06019                  clra  
35EF D678             (    supercomm.asm):06020                  ldb   <u0073         Get # seconds from VRN timer
35F1 DD65             (    supercomm.asm):06021                  std   <u0060         Save it
35F3 3586             (    supercomm.asm):06022                  puls  pc,d           Restore D & return
                      (    supercomm.asm):06023         
35F5 3416             (    supercomm.asm):06024         L3BCC    pshs  x,d            Preserve regs
35F7 8E0C9B           (    supercomm.asm):06025                  ldx   #u0C99         Point to place to hold time packet
35FA 103F15           (    supercomm.asm):06026                  os9   F$Time         Get current time   
35FD A605             (    supercomm.asm):06027                  lda   5,x            Get seconds
35FF 9765             (    supercomm.asm):06028                  sta   <u0060         Save it
3601 3596             (    supercomm.asm):06029                  puls  pc,x,d         Restore regs & return
                      (    supercomm.asm):06030         
3603 3414             (    supercomm.asm):06031         L3BDA    pshs  x,b            Preserve regs
3605 0D77             (    supercomm.asm):06032                  tst   <u0072         Is VRN present?
3607 2710             (    supercomm.asm):06033                  beq   L3BF3          No, use Clock
3609 8601             (    supercomm.asm):06034                  lda   #$01
360B D678             (    supercomm.asm):06035                  ldb   <u0073         Get VRN seconds counter
360D 9365             (    supercomm.asm):06036                  subd  <u0060         Subtract last # seconds from VRN
360F 1F98             (    supercomm.asm):06037                  tfr   b,a            A=# seconds between the 2
3611 8E0001           (    supercomm.asm):06038                  ldx   #$0001         1 tick to sleep
3614 17D8C2           (    supercomm.asm):06039                  lbsr  L0F56          Go check for/update onscreen timer & sleep 1 tick
3617 3594             (    supercomm.asm):06040                  puls  pc,x,b         Restore regs & return
                      (    supercomm.asm):06041         
3619 8E0C9B           (    supercomm.asm):06042         L3BF3    ldx   #u0C99         Point to buffer for time packet
361C 103F15           (    supercomm.asm):06043                  os9   F$Time         Get current system time
361F A605             (    supercomm.asm):06044                  lda   5,x            Get # seconds
3621 8E0001           (    supercomm.asm):06045                  ldx   #$0001         Sleep for 1 tick
3624 103F0A           (    supercomm.asm):06046                  os9   F$Sleep  
3627 8B3C             (    supercomm.asm):06047                  adda  #60            Add 60 to seconds
3629 9065             (    supercomm.asm):06048                  suba  <u0060         Subtract # seconds from last check
362B 813C             (    supercomm.asm):06049                  cmpa  #60            Hit 60 yet?
362D 2502             (    supercomm.asm):06050                  blo   L3C0D          No, restore regs & exit
362F 803C             (    supercomm.asm):06051                  suba  #60            Yes, bump back down to real seconds
3631 3594             (    supercomm.asm):06052         L3C0D    puls  pc,x,b         Restore regs & return
                      (    supercomm.asm):06053         
                      (    supercomm.asm):06054         * Update running 16 bit CRC
                      (    supercomm.asm):06055         * Entry: D=# bytes in block?
                      (    supercomm.asm):06056         *        X=Ptr to current position in read buffer?
3633 3416             (    supercomm.asm):06057         L3E0F    pshs  d,x            Preserve regs
3635 338B             (    supercomm.asm):06058                  leau  d,x            Point U to where end of block would be
3637 DF00             (    supercomm.asm):06059                  stu   <Temp          Save in temp var
3639 9C55             (    supercomm.asm):06060                  cmpx  <u0050         We hit end of read buffer?
363B 2418             (    supercomm.asm):06061                  bhs   L3E39          Yes, exit
363D 338C17           (    supercomm.asm):06062                  leau  <L3C0F,pc      Point to CRC table
3640 D64D             (    supercomm.asm):06063         L3E24    ldb   <u0048         Get 1st byte of current 16 bit CRC
3642 4F               (    supercomm.asm):06064                  clra                 Preload A for 16 bit #
3643 E880             (    supercomm.asm):06065                  eorb  ,x+            EOR with byte from buffer
3645 58               (    supercomm.asm):06066                  lslb                 Calculate offset to get CRC word from
3646 49               (    supercomm.asm):06067                  rola  
3647 ECCB             (    supercomm.asm):06068                  ldd   d,u            Get CRC word
3649 984E             (    supercomm.asm):06069                  eora  <u0049         Update CRC
364B DD4D             (    supercomm.asm):06070                  std   <u0048
364D 9C55             (    supercomm.asm):06071                  cmpx  <u0050         Hit end of read buffer yet?          
364F 2704             (    supercomm.asm):06072                  beq   L3E39          Yes, exit
3651 9C00             (    supercomm.asm):06073                  cmpx  <Temp          Hit end of block yet?
3653 25EB             (    supercomm.asm):06074                  blo   L3E24          No, continue calculating CRC with next byte
3655 3596             (    supercomm.asm):06075         L3E39    puls  d,x,pc         Restore regs & return
                      (    supercomm.asm):06076         
                      (    supercomm.asm):06077         * 16 bit CRC table
3657 0000102120423063 (    supercomm.asm):06078         L3C0F    fdb    $0000,$1021,$2042,$3063,$4084,$50A5,$60C6,$70E7
     408450A560C670E7
3667 81089129A14AB16B (    supercomm.asm):06079                  fdb    $8108,$9129,$A14A,$B16B,$C18C,$D1AD,$E1CE,$F1EF
     C18CD1ADE1CEF1EF
3677 1231021032732252 (    supercomm.asm):06080                  fdb    $1231,$0210,$3273,$2252,$52B5,$4294,$72F7,$62D6
     52B5429472F762D6
3687 93398318B37BA35A (    supercomm.asm):06081                  fdb    $9339,$8318,$B37B,$A35A,$D3BD,$C39C,$F3FF,$E3DE
     D3BDC39CF3FFE3DE
3697 2462344304201401 (    supercomm.asm):06082                  fdb    $2462,$3443,$0420,$1401,$64E6,$74C7,$44A4,$5485
     64E674C744A45485
36A7 A56AB54B85289509 (    supercomm.asm):06083                  fdb    $A56A,$B54B,$8528,$9509,$E5EE,$F5CF,$C5AC,$D58D
     E5EEF5CFC5ACD58D
36B7 3653267216110630 (    supercomm.asm):06084                  fdb    $3653,$2672,$1611,$0630,$76D7,$66F6,$5695,$46B4
     76D766F6569546B4
36C7 B75BA77A97198738 (    supercomm.asm):06085                  fdb    $B75B,$A77A,$9719,$8738,$F7DF,$E7FE,$D79D,$C7BC
     F7DFE7FED79DC7BC
36D7 48C458E5688678A7 (    supercomm.asm):06086                  fdb    $48C4,$58E5,$6886,$78A7,$0840,$1861,$2802,$3823
     0840186128023823
36E7 C9CCD9EDE98EF9AF (    supercomm.asm):06087                  fdb    $C9CC,$D9ED,$E98E,$F9AF,$8948,$9969,$A90A,$B92B
     89489969A90AB92B
36F7 5AF54AD47AB76A96 (    supercomm.asm):06088                  fdb    $5AF5,$4AD4,$7AB7,$6A96,$1A71,$0A50,$3A33,$2A12
     1A710A503A332A12
3707 DBFDCBDCFBBFEB9E (    supercomm.asm):06089                  fdb    $DBFD,$CBDC,$FBBF,$EB9E,$9B79,$8B58,$BB3B,$AB1A
     9B798B58BB3BAB1A
3717 6CA67C874CE45CC5 (    supercomm.asm):06090                  fdb    $6CA6,$7C87,$4CE4,$5CC5,$2C22,$3C03,$0C60,$1C41
     2C223C030C601C41
3727 EDAEFD8FCDECDDCD (    supercomm.asm):06091                  fdb    $EDAE,$FD8F,$CDEC,$DDCD,$AD2A,$BD0B,$8D68,$9D49
     AD2ABD0B8D689D49
3737 7E976EB65ED54EF4 (    supercomm.asm):06092                  fdb    $7E97,$6EB6,$5ED5,$4EF4,$3E13,$2E32,$1E51,$0E70
     3E132E321E510E70
3747 FF9FEFBEDFDDCFFC (    supercomm.asm):06093                  fdb    $FF9F,$EFBE,$DFDD,$CFFC,$BF1B,$AF3A,$9F59,$8F78
     BF1BAF3A9F598F78
3757 918881A9B1CAA1EB (    supercomm.asm):06094                  fdb    $9188,$81A9,$B1CA,$A1EB,$D10C,$C12D,$F14E,$E16F
     D10CC12DF14EE16F
3767 108000A130C220E3 (    supercomm.asm):06095                  fdb    $1080,$00A1,$30C2,$20E3,$5004,$4025,$7046,$6067
     5004402570466067
3777 83B99398A3FBB3DA (    supercomm.asm):06096                  fdb    $83B9,$9398,$A3FB,$B3DA,$C33D,$D31C,$E37F,$F35E
     C33DD31CE37FF35E
3787 02B1129022F332D2 (    supercomm.asm):06097                  fdb    $02B1,$1290,$22F3,$32D2,$4235,$5214,$6277,$7256
     4235521462777256
3797 B5EAA5CB95A88589 (    supercomm.asm):06098                  fdb    $B5EA,$A5CB,$95A8,$8589,$F56E,$E54F,$D52C,$C50D
     F56EE54FD52CC50D
37A7 34E224C314A00481 (    supercomm.asm):06099                  fdb    $34E2,$24C3,$14A0,$0481,$7466,$6447,$5424,$4405
     7466644754244405
37B7 A7DBB7FA879997B8 (    supercomm.asm):06100                  fdb    $A7DB,$B7FA,$8799,$97B8,$E75F,$F77E,$C71D,$D73C
     E75FF77EC71DD73C
37C7 26D336F2069116B0 (    supercomm.asm):06101                  fdb    $26D3,$36F2,$0691,$16B0,$6657,$7676,$4615,$5634
     6657767646155634
37D7 D94CC96DF90EE92F (    supercomm.asm):06102                  fdb    $D94C,$C96D,$F90E,$E92F,$99C8,$89E9,$B98A,$A9AB
     99C889E9B98AA9AB
37E7 5844486578066827 (    supercomm.asm):06103                  fdb    $5844,$4865,$7806,$6827,$18C0,$08E1,$3882,$28A3
     18C008E1388228A3
37F7 CB7DDB5CEB3FFB1E (    supercomm.asm):06104                  fdb    $CB7D,$DB5C,$EB3F,$FB1E,$8BF9,$9BD8,$ABBB,$BB9A
     8BF99BD8ABBBBB9A
3807 4A755A546A377A16 (    supercomm.asm):06105                  fdb    $4A75,$5A54,$6A37,$7A16,$0AF1,$1AD0,$2AB3,$3A92
     0AF11AD02AB33A92
3817 FD2EED0FDD6CCD4D (    supercomm.asm):06106                  fdb    $FD2E,$ED0F,$DD6C,$CD4D,$BDAA,$AD8B,$9DE8,$8DC9
     BDAAAD8B9DE88DC9
3827 7C266C075C644C45 (    supercomm.asm):06107                  fdb    $7C26,$6C07,$5C64,$4C45,$3CA2,$2C83,$1CE0,$0CC1
     3CA22C831CE00CC1
3837 EF1FFF3ECF5DDF7C (    supercomm.asm):06108                  fdb    $EF1F,$FF3E,$CF5D,$DF7C,$AF9B,$BFBA,$8FD9,$9FF8
     AF9BBFBA8FD99FF8
3847 6E177E364E555E74 (    supercomm.asm):06109                  fdb    $6E17,$7E36,$4E55,$5E74,$2E93,$3EB2,$0ED1,$1EF0
     2E933EB20ED11EF0
                      (    supercomm.asm):06110         
                      (    supercomm.asm):06111         * Calculate Checksum?
                      (    supercomm.asm):06112         * Entry: D=# bytes in block?
                      (    supercomm.asm):06113         *        X=Ptr to current position in read buffer?
                      (    supercomm.asm):06114         *        Y=
3857 3416             (    supercomm.asm):06115         L3E3D    pshs  x,d            Preserve regs
3859 338B             (    supercomm.asm):06116                  leau  d,x            Point U to where end of block would be
385B DF00             (    supercomm.asm):06117                  stu   <Temp          Save in temp var
385D 9C55             (    supercomm.asm):06118                  cmpx  <u0050         Hit end of read buffer?
385F 270C             (    supercomm.asm):06119                  beq   L3E56          Yes, exit
3861 964D             (    supercomm.asm):06120                  lda   <u0048         Get current Checksum
3863 AB80             (    supercomm.asm):06121         L3E4B    adda  ,x+            Add next byte
3865 9C55             (    supercomm.asm):06122                  cmpx  <u0050         Hit end of buffer?
3867 2704             (    supercomm.asm):06123                  beq   L3E56          Yes, exit
3869 9C00             (    supercomm.asm):06124                  cmpx  <Temp          Hit end of block?
386B 25F6             (    supercomm.asm):06125                  blo   L3E4B          No, keep calculating Checksum
386D 974D             (    supercomm.asm):06126         L3E56    sta   <u0048         Save new checksum
386F 3596             (    supercomm.asm):06127                  puls  pc,x,d         Restore & return
                      (    supercomm.asm):06128         
                      (    supercomm.asm):06129         * Send ACK code for properly received packet
3871 8606             (    supercomm.asm):06130         L3E7B    lda   #$06         get ACK code
                      (    supercomm.asm):06131         
                      (    supercomm.asm):06132         * Send single byte to modem
                      (    supercomm.asm):06133         * Entry: A=Character to send
3873 9749             (    supercomm.asm):06134         L3E6E    sta   <u0044       Save code to write
                      (    supercomm.asm):06135         
                      (    supercomm.asm):06136         * Send block response code (ex. ACK)
3875 3432             (    supercomm.asm):06137         L3E5D    pshs  a,x,y        preserve regs
3877 8E0049           (    supercomm.asm):06138                  ldx   #u0044       point to 1 byte buffer for block responses
387A 9630             (    supercomm.asm):06139                  lda   <u002B       get path to modem
387C 108E0001         (    supercomm.asm):06140                  ldy   #1           get length
3880 103F8A           (    supercomm.asm):06141                  os9   I$Write      send it
3883 35B2             (    supercomm.asm):06142                  puls  a,x,y,pc     restore & return
                      (    supercomm.asm):06143         
3885 8643             (    supercomm.asm):06144         L3E73    lda   #'C          get code for CRC mode
3887 20EA             (    supercomm.asm):06145                  bra   L3E6E        send it to host
                      (    supercomm.asm):06146         
3889 8604             (    supercomm.asm):06147         L3E77    lda   #$04         get end of transmission code
388B 20E6             (    supercomm.asm):06148                  bra   L3E6E        send it to modem
                      (    supercomm.asm):06149         
388D 8615             (    supercomm.asm):06150         L3E7F    lda   #$15         get NAK code
388F 20E2             (    supercomm.asm):06151                  bra   L3E6E        send it to modem
                      (    supercomm.asm):06152         
3891 3436             (    supercomm.asm):06153         L3E83    pshs  d,x,y
3893 308DCD76         (    supercomm.asm):06154                  leax  >L062B,pc    Point to '0000' packet # text with CurXY @ 8,5
3897 108E144B         (    supercomm.asm):06155                  ldy   #u1449
389B C609             (    supercomm.asm):06156                  ldb   #$09
389D 17F044           (    supercomm.asm):06157                  lbsr  L2D1E
38A0 8E144B           (    supercomm.asm):06158                  ldx   #u1449
38A3 17DFE6           (    supercomm.asm):06159                  lbsr  L1B03
38A6 35B6             (    supercomm.asm):06160                  puls  d,x,y,pc
                      (    supercomm.asm):06161         
38A8 3436             (    supercomm.asm):06162         L3E9B    pshs  y,x,d
38AA 308DCD68         (    supercomm.asm):06163                  leax  >L0634,pc    Point to '0000' packet # text with CurXY @ 32,5
38AE 108E143B         (    supercomm.asm):06164                  ldy   #u1439
38B2 C609             (    supercomm.asm):06165                  ldb   #$09
38B4 17F02D           (    supercomm.asm):06166                  lbsr  L2D1E
38B7 8E143B           (    supercomm.asm):06167                  ldx   #u1439
38BA 17DFCF           (    supercomm.asm):06168                  lbsr  L1B03
38BD 35B6             (    supercomm.asm):06169                  puls  pc,y,x,d
                      (    supercomm.asm):06170         
38BF 3436             (    supercomm.asm):06171         L3EB3    pshs  y,x,d
38C1 8E143B           (    supercomm.asm):06172                  ldx   #u1439
38C4 CC3030           (    supercomm.asm):06173                  ldd   #$3030       '00'
38C7 ED05             (    supercomm.asm):06174                  std   $05,x
38C9 ED07             (    supercomm.asm):06175                  std   $07,x
38CB 17DFBE           (    supercomm.asm):06176                  lbsr  L1B03
38CE 35B6             (    supercomm.asm):06177                  puls  pc,y,x,d
                      (    supercomm.asm):06178         
38D0 3432             (    supercomm.asm):06179         L3EC5    pshs  y,x,a
38D2 8E143B           (    supercomm.asm):06180                  ldx   #u1439
38D5 8D11             (    supercomm.asm):06181                  bsr   L3EEA
38D7 17DFB2           (    supercomm.asm):06182                  lbsr  L1B03
38DA 35B2             (    supercomm.asm):06183                  puls  pc,y,x,a
                      (    supercomm.asm):06184         
                      (    supercomm.asm):06185         * ??? NEVER CALLED?
                      (    supercomm.asm):06186         *         pshs  y,x,a
                      (    supercomm.asm):06187         *         leax  >u1449,u
                      (    supercomm.asm):06188         *         lbsr  L1B03
                      (    supercomm.asm):06189         *         puls  pc,y,x,a
                      (    supercomm.asm):06190         
38DC 3432             (    supercomm.asm):06191         L3EDD    pshs  y,x,a
38DE 8E144B           (    supercomm.asm):06192                  ldx   #u1449
38E1 8D05             (    supercomm.asm):06193                  bsr   L3EEA
38E3 17DFA6           (    supercomm.asm):06194                  lbsr  L1B03
38E6 35B2             (    supercomm.asm):06195                  puls  pc,y,x,a
                      (    supercomm.asm):06196         
38E8 3404             (    supercomm.asm):06197         L3EEA    pshs  b
38EA C608             (    supercomm.asm):06198                  ldb   #$08
38EC 8D09             (    supercomm.asm):06199         L3EEE    bsr   L3EF9
38EE 8130             (    supercomm.asm):06200                  cmpa  #$30
38F0 2603             (    supercomm.asm):06201                  bne   L3EF7
38F2 5A               (    supercomm.asm):06202                  decb  
38F3 24F7             (    supercomm.asm):06203                  bcc   L3EEE
38F5 3584             (    supercomm.asm):06204         L3EF7    puls  pc,b
                      (    supercomm.asm):06205         
38F7 A685             (    supercomm.asm):06206         L3EF9    lda   b,x
38F9 4C               (    supercomm.asm):06207                  inca  
38FA 8139             (    supercomm.asm):06208                  cmpa  #$39         Higher than ASCII '9'?
38FC 2203             (    supercomm.asm):06209                  bhi   L3F03
38FE A785             (    supercomm.asm):06210                  sta   b,x
3900 39               (    supercomm.asm):06211                  rts   
                      (    supercomm.asm):06212         
3901 8630             (    supercomm.asm):06213         L3F03    lda   #$30         Force to ASCII '0'
3903 A785             (    supercomm.asm):06214                  sta   b,x
3905 39               (    supercomm.asm):06215                  rts   
                      (    supercomm.asm):06216         
3906 0D4B             (    supercomm.asm):06217         L3F08    tst   <u0046       Check for YModem batch?
3908 270C             (    supercomm.asm):06218                  beq   L3F1A
390A 17ED5E           (    supercomm.asm):06219                  lbsr  L2A52
390D 0D26             (    supercomm.asm):06220                  tst   <u0021
390F 1026FABF         (    supercomm.asm):06221                  lbne  L3954
3913 17ED9F           (    supercomm.asm):06222         L3F17    lbsr  L2AA0
3916 308DCC4B         (    supercomm.asm):06223         L3F1A    leax  >L0583,pc
391A 17DF6F           (    supercomm.asm):06224                  lbsr  L1B03
391D 8E00A4           (    supercomm.asm):06225                  ldx   #u009F
3920 8601             (    supercomm.asm):06226                  lda   #$01
3922 108E0020         (    supercomm.asm):06227                  ldy   #$0020
3926 103F8C           (    supercomm.asm):06228                  os9   I$WritLn 
3929 308DCB44         (    supercomm.asm):06229                  leax  >L048F,pc      Cursor OFF
392D 17DF5C           (    supercomm.asm):06230                  lbsr  L1B03
3930 308DCD38         (    supercomm.asm):06231                  leax  >L06C7,pc
3934 17DF55           (    supercomm.asm):06232                  lbsr  L1B03
3937 8601             (    supercomm.asm):06233                  lda   #$01
3939 8E00A4           (    supercomm.asm):06234                  ldx   #u009F
393C 103F84           (    supercomm.asm):06235                  os9   I$Open   
393F 240A             (    supercomm.asm):06236                  bcc   L3F53
3941 0D4B             (    supercomm.asm):06237         L3F47    tst   <u0046
3943 1027FA8B         (    supercomm.asm):06238                  lbeq  L3954
3947 0C6E             (    supercomm.asm):06239                  inc   <u0069
3949 201B             (    supercomm.asm):06240                  bra   L3F71
                      (    supercomm.asm):06241         
394B 9747             (    supercomm.asm):06242         L3F53    sta   <u0042         Save path # to download file
394D 8E00E4           (    supercomm.asm):06243                  ldx   #u00DF         Read 127 bytes into buffer
3950 108E007F         (    supercomm.asm):06244                  ldy   #$007F
3954 103F89           (    supercomm.asm):06245                  os9   I$Read   
3957 25E8             (    supercomm.asm):06246                  bcs   L3F47          Error, deal with it
3959 1F20             (    supercomm.asm):06247                  tfr   y,d
395B 170263           (    supercomm.asm):06248                  lbsr  L4206
395E 9647             (    supercomm.asm):06249                  lda   <u0042         Get path # to download file
3960 8E0000           (    supercomm.asm):06250                  ldx   #$0000
3963 103F88           (    supercomm.asm):06251                  os9   I$Seek   
3966 308DCC0B         (    supercomm.asm):06252         L3F71    leax  >L0593,pc
396A 17DF1F           (    supercomm.asm):06253                  lbsr  L1B03
396D 308DCBA0         (    supercomm.asm):06254                  leax  >L052F,pc
3971 17DF18           (    supercomm.asm):06255                  lbsr  L1B03
3974 17FF1A           (    supercomm.asm):06256                  lbsr  L3E83
3977 17FF2E           (    supercomm.asm):06257                  lbsr  L3E9B
397A 0D51             (    supercomm.asm):06258                  tst   <u004C
397C 2729             (    supercomm.asm):06259                  beq   L3FB9
397E 8E00A1           (    supercomm.asm):06260                  ldx   #u009C
3981 968E             (    supercomm.asm):06261                  lda   <u0089
3983 A702             (    supercomm.asm):06262                  sta   $02,x
3985 108E0003         (    supercomm.asm):06263                  ldy   #$0003
3989 8601             (    supercomm.asm):06264                  lda   #$01
398B 103F8A           (    supercomm.asm):06265                  os9   I$Write  
398E 308DCCD2         (    supercomm.asm):06266                  leax  >L06BF,pc
3992 108E0008         (    supercomm.asm):06267                  ldy   #$0008
3996 103F8A           (    supercomm.asm):06268                  os9   I$Write  
3999 8E00A1           (    supercomm.asm):06269                  ldx   #u009C
399C D68C             (    supercomm.asm):06270                  ldb   <u0087
399E E702             (    supercomm.asm):06271                  stb   $02,x
39A0 108E0003         (    supercomm.asm):06272                  ldy   #$0003
39A4 103F8A           (    supercomm.asm):06273                  os9   I$Write  
39A7 0F5F             (    supercomm.asm):06274         L3FB9    clr   <u005A         Clear block check type to Checksum
39A9 CC0080           (    supercomm.asm):06275                  ldd   #$0080         128 bytes per block
39AC DD5C             (    supercomm.asm):06276                  std   <u0057         Save X/YModem block size
39AE C30004           (    supercomm.asm):06277                  addd  #$0004         Add 4 bytes for header/trailer bytes
39B1 DD5A             (    supercomm.asm):06278                  std   <u0055         Save 'real' block size
39B3 0D4B             (    supercomm.asm):06279                  tst   <u0046         Batch mode?
39B5 102600FC         (    supercomm.asm):06280                  lbne  L40EA          Yes, skip ahead
39B9 8E13AB           (    supercomm.asm):06281                  ldx   #u13A9
39BC 17EE97           (    supercomm.asm):06282                  lbsr  L2C72
39BF 0D4A             (    supercomm.asm):06283                  tst   <u0045
39C1 270A             (    supercomm.asm):06284                  beq   L3FE7
39C3 CC0400           (    supercomm.asm):06285                  ldd   #$0400         Set block size to 1024
39C6 DD5C             (    supercomm.asm):06286                  std   <u0057
39C8 C30004           (    supercomm.asm):06287                  addd  #$0004         Add 4 for header/trailer bytes
39CB DD5A             (    supercomm.asm):06288                  std   <u0055
39CD CC0001           (    supercomm.asm):06289         L3FE7    ldd   #$0001         Set current block # to 1
39D0 DD58             (    supercomm.asm):06290                  std   <u0053
39D2 17FF07           (    supercomm.asm):06291                  lbsr  L3EDD
39D5 17FEE7           (    supercomm.asm):06292                  lbsr  L3EB3
39D8 17F7B9           (    supercomm.asm):06293                  lbsr  L36CD
39DB 17E703           (    supercomm.asm):06294                  lbsr  L2408
39DE 0D4B             (    supercomm.asm):06295                  tst   <u0046         Batch mode?
39E0 2708             (    supercomm.asm):06296                  beq   L4007          No, skip ahead
39E2 DC58             (    supercomm.asm):06297                  ldd   <u0053         Get block #
39E4 10830001         (    supercomm.asm):06298                  cmpd  #$0001         Block #1 (info block)?
39E8 2710             (    supercomm.asm):06299                  beq   L4017          Yes, skip ahead
39EA 17EC48           (    supercomm.asm):06300         L4007    lbsr  L2A15
39ED 1025FA2F         (    supercomm.asm):06301                  lbcs  L39AA
39F1 8143             (    supercomm.asm):06302                  cmpa  #$43
39F3 2705             (    supercomm.asm):06303                  beq   L4017
39F5 17E76F           (    supercomm.asm):06304                  lbsr  L249F
39F8 2017             (    supercomm.asm):06305                  bra   L4031
                      (    supercomm.asm):06306         
39FA 8601             (    supercomm.asm):06307         L4017    lda   #$01           Set to CRC checking
39FC 975F             (    supercomm.asm):06308                  sta   <u005A
39FE 17E766           (    supercomm.asm):06309                  lbsr  L249F
3A01 DC5C             (    supercomm.asm):06310                  ldd   <u0057         Get block size
3A03 C30005           (    supercomm.asm):06311                  addd  #$0005         Add 5 for header/trailer (CRC)
3A06 DD5A             (    supercomm.asm):06312                  std   <u0055         Save as 'real' block size
3A08 2017             (    supercomm.asm):06313                  bra   L4041
                      (    supercomm.asm):06314         
3A0A 17EC28           (    supercomm.asm):06315         L402A    lbsr  L2A15
3A0D 1025FA0F         (    supercomm.asm):06316                  lbcs  L39AA
3A11 8115             (    supercomm.asm):06317         L4031    cmpa  #$15           NAK (bad block)?
3A13 270C             (    supercomm.asm):06318                  beq   L4041          Yes, bump up retry ctr & see if time to quit
3A15 8106             (    supercomm.asm):06319                  cmpa  #$06           ACK (good block)?
3A17 2731             (    supercomm.asm):06320                  beq   L4070          Yes, skip ahead
3A19 8118             (    supercomm.asm):06321                  cmpa  #$18           <CTRL>-<X> to abort Xfer?
3A1B 1027FA01         (    supercomm.asm):06322                  lbeq  L39AA          Yes, go abort
3A1F 20C9             (    supercomm.asm):06323                  bra   L4007
                      (    supercomm.asm):06324         
                      (    supercomm.asm):06325         * Send X/Ymodem block & retry counter routine
3A21 0C57             (    supercomm.asm):06326         L4041    inc   <u0052         Bump up # attempts @ checksum
3A23 9657             (    supercomm.asm):06327                  lda   <u0052         Get it
3A25 8109             (    supercomm.asm):06328                  cmpa  #$09           Past 10?
3A27 1022F9F5         (    supercomm.asm):06329                  lbhi  L39AA          Yes, forget it
3A2B 8101             (    supercomm.asm):06330                  cmpa  #$01           1st try?
3A2D 2608             (    supercomm.asm):06331                  bne   L405A          No, skip ahead
3A2F DC58             (    supercomm.asm):06332                  ldd   <u0053         Get current block #
3A31 10830001         (    supercomm.asm):06333                  cmpd  #$0001         First block?
3A35 2706             (    supercomm.asm):06334                  beq   L4060          Yes, skip ahead
3A37 17FE96           (    supercomm.asm):06335         L405A    lbsr  L3EC5          ??? Update retry count
3A3A 17E012           (    supercomm.asm):06336                  lbsr  L1CF7          Send out a tone
3A3D 109E5A           (    supercomm.asm):06337         L4060    ldy   <u0055         Get true block size
3A40 9630             (    supercomm.asm):06338                  lda   <u002B         Get path to modem
3A42 8E00E4           (    supercomm.asm):06339                  ldx   #u00DF         Get ptr to modem buffer
3A45 103F8A           (    supercomm.asm):06340                  os9   I$Write        Send out the block
3A48 20C0             (    supercomm.asm):06341                  bra   L402A
                      (    supercomm.asm):06342         
                      (    supercomm.asm):06343         * Good block sent goes here
3A4A 0F57             (    supercomm.asm):06344         L4070    clr   <u0052         Clear out retry attempts to 0
3A4C 17FE70           (    supercomm.asm):06345                  lbsr  L3EB3          Go update block # on screen
3A4F 0D64             (    supercomm.asm):06346                  tst   <u005F
3A51 2639             (    supercomm.asm):06347                  bne   L40BE
3A53 DC58             (    supercomm.asm):06348                  ldd   <u0053         Get current block #
3A55 C30001           (    supercomm.asm):06349                  addd  #$0001         Add 1 to it
3A58 DD58             (    supercomm.asm):06350                  std   <u0053         Save mew block #
3A5A 0D4A             (    supercomm.asm):06351                  tst   <u0045
3A5C 2713             (    supercomm.asm):06352                  beq   L409F
3A5E CC0400           (    supercomm.asm):06353                  ldd   #$0400         Set block size to 1024
3A61 DD5C             (    supercomm.asm):06354                  std   <u0057
                      (    supercomm.asm):06355         * SHOULD BE ABLE TO CHANGE TO ADD #4, THEN DO CHECK AND ADD 1 MORE IF CRC
3A63 0D5F             (    supercomm.asm):06356                  tst   <u005A         CRC?
3A65 2705             (    supercomm.asm):06357                  beq   L4099          No, skip ahead
3A67 C30005           (    supercomm.asm):06358                  addd  #$0005         'Real' block size is 1029
3A6A 2003             (    supercomm.asm):06359                  bra   L409C
                      (    supercomm.asm):06360         
3A6C C30004           (    supercomm.asm):06361         L4099    addd  #$0004         'Real' block size is 1028 for checksum
3A6F DD5A             (    supercomm.asm):06362         L409C    std   <u0055          Save real block size
3A71 17FE68           (    supercomm.asm):06363         L409F    lbsr  L3EDD
3A74 17E66A           (    supercomm.asm):06364                  lbsr  L2408
3A77 0D64             (    supercomm.asm):06365                  tst   <u005F
3A79 2611             (    supercomm.asm):06366                  bne   L40BE
3A7B 17E6E9           (    supercomm.asm):06367                  lbsr  L249F
3A7E 9630             (    supercomm.asm):06368                  lda   <u002B          Get path # to modem
3A80 8E00E4           (    supercomm.asm):06369                  ldx   #u00DF          Point to xmit buffer
3A83 109E5A           (    supercomm.asm):06370                  ldy   <u0055          Get size of buffer          
3A86 103F8A           (    supercomm.asm):06371                  os9   I$Write         Send next block to modem
3A89 16FF7E           (    supercomm.asm):06372                  lbra  L402A
                      (    supercomm.asm):06373         
3A8C 9647             (    supercomm.asm):06374         L40BE    lda   <u0042          Get path # to upload file
3A8E 103F8F           (    supercomm.asm):06375                  os9   I$Close         Close it
3A91 0F64             (    supercomm.asm):06376                  clr   <u005F
3A93 0D4B             (    supercomm.asm):06377                  tst   <u0046          Batch xfer?
3A95 270D             (    supercomm.asm):06378                  beq   L40D8           No, we're done
3A97 17FDEF           (    supercomm.asm):06379                  lbsr  L3E77
3A9A 17EB98           (    supercomm.asm):06380                  lbsr  L2A15
3A9D 1025F97F         (    supercomm.asm):06381                  lbcs  L39AA
3AA1 16FE6F           (    supercomm.asm):06382                  lbra  L3F17
                      (    supercomm.asm):06383         
3AA4 17FDE2           (    supercomm.asm):06384         L40D8    lbsr  L3E77
3AA7 17EB8B           (    supercomm.asm):06385                  lbsr  L2A15
3AAA 1025F972         (    supercomm.asm):06386                  lbcs  L39AA
3AAE 8106             (    supercomm.asm):06387                  cmpa  #$06
3AB0 26F2             (    supercomm.asm):06388                  bne   L40D8
3AB2 16F912           (    supercomm.asm):06389                  lbra  L3947
                      (    supercomm.asm):06390         
3AB5 17EB7D           (    supercomm.asm):06391         L40EA    lbsr  L2A15
3AB8 1025F964         (    supercomm.asm):06392                  lbcs  L39AA
3ABC 8143             (    supercomm.asm):06393                  cmpa  #'C            CRC mode requested?
3ABE 26F5             (    supercomm.asm):06394                  bne   L40EA          No, go back
3AC0 0C5F             (    supercomm.asm):06395                  inc   <u005A         Set mode to CRC
3AC2 DC5C             (    supercomm.asm):06396                  ldd   <u0057         Get block size
3AC4 C30005           (    supercomm.asm):06397                  addd  #$0005         'Real' block size
3AC7 DD5A             (    supercomm.asm):06398                  std   <u0055         Save 'Raw' block size
3AC9 CC0000           (    supercomm.asm):06399                  ldd   #$0000         Set current block # to 0
3ACC DD58             (    supercomm.asm):06400                  std   <u0053
3ACE 17E610           (    supercomm.asm):06401                  lbsr  L2408
3AD1 17E693           (    supercomm.asm):06402                  lbsr  L249F
3AD4 8E00E4           (    supercomm.asm):06403                  ldx   #u00DF
3AD7 108E13AB         (    supercomm.asm):06404                  ldy   #u13A9
3ADB C686             (    supercomm.asm):06405                  ldb   #$86
3ADD 17EE04           (    supercomm.asm):06406                  lbsr  L2D1E
3AE0 0D6E             (    supercomm.asm):06407                  tst   <u0069
3AE2 2610             (    supercomm.asm):06408                  bne   L412F
3AE4 CC0001           (    supercomm.asm):06409                  ldd   #$0001         Set block # to 1
3AE7 DD58             (    supercomm.asm):06410                  std   <u0053
3AE9 CC0400           (    supercomm.asm):06411                  ldd   #$0400         Set block size to 1024
3AEC DD5C             (    supercomm.asm):06412                  std   <u0057
3AEE 17E5F0           (    supercomm.asm):06413                  lbsr  L2408
3AF1 17E673           (    supercomm.asm):06414                  lbsr  L249F
3AF4 9630             (    supercomm.asm):06415         L412F    lda   <u002B         Get path # to modem
3AF6 8E13AB           (    supercomm.asm):06416                  ldx   #u13A9
3AF9 109E5A           (    supercomm.asm):06417                  ldy   <u0055         Get 'raw' block size
3AFC 103F8A           (    supercomm.asm):06418                  os9   I$Write  
3AFF 17EB33           (    supercomm.asm):06419         L413D    lbsr  L2A15
3B02 1025F91A         (    supercomm.asm):06420                  lbcs  L39AA
3B06 8106             (    supercomm.asm):06421                  cmpa  #$06
3B08 2716             (    supercomm.asm):06422                  beq   L415C
3B0A 8115             (    supercomm.asm):06423                  cmpa  #$15
3B0C 26F1             (    supercomm.asm):06424                  bne   L413D
3B0E 0C57             (    supercomm.asm):06425                  inc   <u0052         Update retry counter
3B10 9657             (    supercomm.asm):06426                  lda   <u0052
3B12 8109             (    supercomm.asm):06427                  cmpa  #$09
3B14 1022F908         (    supercomm.asm):06428                  lbhi  L39AA
3B18 17FDB5           (    supercomm.asm):06429                  lbsr  L3EC5
3B1B 17DF31           (    supercomm.asm):06430                  lbsr  L1CF7
3B1E 20D4             (    supercomm.asm):06431                  bra   L412F
                      (    supercomm.asm):06432         
3B20 0D6E             (    supercomm.asm):06433         L415C    tst   <u0069
3B22 1026F8AC         (    supercomm.asm):06434                  lbne  L3954
3B26 CC0001           (    supercomm.asm):06435                  ldd   #$0001         Set block # to 1
3B29 DD58             (    supercomm.asm):06436                  std   <u0053
3B2B 17FDAE           (    supercomm.asm):06437                  lbsr  L3EDD
3B2E DC5C             (    supercomm.asm):06438                  ldd   <u0057         Get block size
3B30 C30005           (    supercomm.asm):06439                  addd  #$0005         New size for CRC header/trailer
3B33 DD5A             (    supercomm.asm):06440                  std   <u0055         Save 'raw' block size
3B35 17EAFD           (    supercomm.asm):06441                  lbsr  L2A15
3B38 1025F8E4         (    supercomm.asm):06442                  lbcs  L39AA
3B3C 8143             (    supercomm.asm):06443                  cmpa  #'C            CRC mode requested?
3B3E 26E0             (    supercomm.asm):06444                  bne   L415C
3B40 9630             (    supercomm.asm):06445                  lda   <u002B         Get path to modem
3B42 8E00E4           (    supercomm.asm):06446                  ldx   #u00DF
3B45 109E5A           (    supercomm.asm):06447                  ldy   <u0055         Get raw block size
3B48 103F8A           (    supercomm.asm):06448                  os9   I$Write        Send to modem
3B4B 16FEBC           (    supercomm.asm):06449                  lbra  L402A
                      (    supercomm.asm):06450         
3B4E 3426             (    supercomm.asm):06451         L4191    pshs  y,d
3B50 DC04             (    supercomm.asm):06452                  ldd   <u0002         Get ptr to max address of receive buffer allowed
3B52 A3E4             (    supercomm.asm):06453                  subd  ,s
3B54 109308           (    supercomm.asm):06454                  cmpd  <u0006         Compare with end of current receive buffer
3B57 2402             (    supercomm.asm):06455                  bhs   L419E
3B59 8D4D             (    supercomm.asm):06456                  bsr   L41EC
3B5B 109E08           (    supercomm.asm):06457         L419E    ldy   <u0006
3B5E 0D51             (    supercomm.asm):06458                  tst   <u004C
3B60 2616             (    supercomm.asm):06459                  bne   L41BC
3B62 EC81             (    supercomm.asm):06460         L41A6    ldd   ,x++
3B64 EDA1             (    supercomm.asm):06461                  std   ,y++
3B66 ECE4             (    supercomm.asm):06462                  ldd   ,s
3B68 830002           (    supercomm.asm):06463                  subd  #$0002
3B6B EDE4             (    supercomm.asm):06464                  std   ,s
3B6D 22F3             (    supercomm.asm):06465                  bhi   L41A6
3B6F 2702             (    supercomm.asm):06466                  beq   L41B7
3B71 313F             (    supercomm.asm):06467                  leay  -1,y
3B73 109F08           (    supercomm.asm):06468         L41B7    sty   <u0006
3B76 35A6             (    supercomm.asm):06469                  puls  pc,y,d
                      (    supercomm.asm):06470         
3B78 EC81             (    supercomm.asm):06471         L41BC    ldd   ,x++
3B7A 811F             (    supercomm.asm):06472                  cmpa  #$1F
3B7C 2208             (    supercomm.asm):06473                  bhi   L41CA
3B7E 810A             (    supercomm.asm):06474                  cmpa  #$0A
3B80 2706             (    supercomm.asm):06475                  beq   L41CC
3B82 811A             (    supercomm.asm):06476                  cmpa  #$1A
3B84 2702             (    supercomm.asm):06477                  beq   L41CC
3B86 A7A0             (    supercomm.asm):06478         L41CA    sta   ,y+
3B88 C11F             (    supercomm.asm):06479         L41CC    cmpb  #$1F
3B8A 2208             (    supercomm.asm):06480                  bhi   L41D8
3B8C C10A             (    supercomm.asm):06481                  cmpb  #$0A
3B8E 2706             (    supercomm.asm):06482                  beq   L41DA
3B90 C11A             (    supercomm.asm):06483                  cmpb  #$1A
3B92 2702             (    supercomm.asm):06484                  beq   L41DA
3B94 E7A0             (    supercomm.asm):06485         L41D8    stb   ,y+
3B96 ECE4             (    supercomm.asm):06486         L41DA    ldd   ,s
3B98 830002           (    supercomm.asm):06487                  subd  #$0002
3B9B EDE4             (    supercomm.asm):06488                  std   ,s
3B9D 22D9             (    supercomm.asm):06489                  bhi   L41BC
3B9F 2702             (    supercomm.asm):06490                  beq   L41E7
3BA1 313F             (    supercomm.asm):06491                  leay  -1,y
3BA3 109F08           (    supercomm.asm):06492         L41E7    sty   <u0006
3BA6 35A6             (    supercomm.asm):06493                  puls  pc,y,d
                      (    supercomm.asm):06494         
3BA8 3410             (    supercomm.asm):06495         L41EC    pshs  x
3BAA 9E06             (    supercomm.asm):06496                  ldx   <u0004         Get ptr to start address of receive buffer
3BAC DC08             (    supercomm.asm):06497                  ldd   <u0006         Get ptr to current end of receive buffer
3BAE 9306             (    supercomm.asm):06498                  subd  <u0004         Calculate current size of receive buffer
3BB0 1F02             (    supercomm.asm):06499                  tfr   d,y            Keep copy in Y
3BB2 9647             (    supercomm.asm):06500                  lda   <u0042         Get path to download file
3BB4 81FF             (    supercomm.asm):06501                  cmpa  #$FF           If none, skip ahead
3BB6 2703             (    supercomm.asm):06502                  beq   L4200
3BB8 103F8A           (    supercomm.asm):06503                  os9   I$Write        Otherwise, write buffer to disk
3BBB DC06             (    supercomm.asm):06504         L4200    ldd   <u0004         Reset end of current buffer ptr to beginning
3BBD DD08             (    supercomm.asm):06505                  std   <u0006
3BBF 3590             (    supercomm.asm):06506                  puls  pc,x
                      (    supercomm.asm):06507         
3BC1 3416             (    supercomm.asm):06508         L4206    pshs  x,d
3BC3 7D0CAF           (    supercomm.asm):06509                  tst   >u0CAD
3BC6 271F             (    supercomm.asm):06510                  beq   L422E
3BC8 0C51             (    supercomm.asm):06511                  inc   <u004C
3BCA C47F             (    supercomm.asm):06512                  andb  #$7F
3BCC A680             (    supercomm.asm):06513         L4213    lda   ,x+
3BCE 2B17             (    supercomm.asm):06514                  bmi   L422E
3BD0 2710             (    supercomm.asm):06515                  beq   L4229
3BD2 811F             (    supercomm.asm):06516                  cmpa  #$1F
3BD4 220C             (    supercomm.asm):06517                  bhi   L4229
3BD6 810D             (    supercomm.asm):06518                  cmpa  #$0D
3BD8 2708             (    supercomm.asm):06519                  beq   L4229
3BDA 810A             (    supercomm.asm):06520                  cmpa  #$0A
3BDC 2704             (    supercomm.asm):06521                  beq   L4229
3BDE 8109             (    supercomm.asm):06522                  cmpa  #$09
3BE0 2605             (    supercomm.asm):06523                  bne   L422E
3BE2 5A               (    supercomm.asm):06524         L4229    decb  
3BE3 26E7             (    supercomm.asm):06525                  bne   L4213
3BE5 3596             (    supercomm.asm):06526                  puls  pc,x,d
                      (    supercomm.asm):06527         
3BE7 0F51             (    supercomm.asm):06528         L422E    clr   <u004C
3BE9 3596             (    supercomm.asm):06529                  puls  pc,x,d
                      (    supercomm.asm):06530         
                      (    supercomm.asm):06531         * ASCII file download
3BEB CC1504           (    supercomm.asm):06532         L4233    ldd   #$1504
3BEE FD0C91           (    supercomm.asm):06533                  std   >u0C8F
3BF1 CC2507           (    supercomm.asm):06534                  ldd   #$2507
3BF4 FD0C93           (    supercomm.asm):06535                  std   >u0C91
3BF7 17DDEA           (    supercomm.asm):06536                  lbsr  L1C81
3BFA 308DC873         (    supercomm.asm):06537                  leax  >L048F,pc      Cursor OFF
3BFE 17DC8B           (    supercomm.asm):06538                  lbsr  L1B03
3C01 7D0CA2           (    supercomm.asm):06539                  tst   >u0CA0
3C04 102701C8         (    supercomm.asm):06540                  lbeq  L444C
3C08 308DCC68         (    supercomm.asm):06541                  leax  >L08CF,pc      'File Capture System'
3C0C 17DC7D           (    supercomm.asm):06542                  lbsr  L1B03
3C0F 308DC8EB         (    supercomm.asm):06543                  leax  >L051C,pc      'Break aborts'
3C13 17DC76           (    supercomm.asm):06544                  lbsr  L1B03
3C16 308DC853         (    supercomm.asm):06545                  leax  >L048B,pc      Cursor ON
3C1A 17DC6F           (    supercomm.asm):06546                  lbsr  L1B03
3C1D 0D2A             (    supercomm.asm):06547                  tst   <u0025         Does an ASCII receive file exist?
3C1F 2748             (    supercomm.asm):06548                  beq   L42BE          No, continue
3C21 308DCCA5         (    supercomm.asm):06549                  leax  >L0925,pc      Print a double quote
3C25 17DC64           (    supercomm.asm):06550                  lbsr  L1B03
3C28 8E00C4           (    supercomm.asm):06551                  ldx   #u00BF
3C2B 8601             (    supercomm.asm):06552                  lda   #$01
3C2D 109E23           (    supercomm.asm):06553                  ldy   <u001E
3C30 313F             (    supercomm.asm):06554                  leay  -1,y
3C32 103F8A           (    supercomm.asm):06555                  os9   I$Write        Write filename
3C35 308DCC54         (    supercomm.asm):06556                  leax  >L08E8,pc      'is already open'
3C39 17DC50           (    supercomm.asm):06557                  lbsr  L1B03
                      (    supercomm.asm):06558         * Loop for response to file already open
3C3C 17EA97           (    supercomm.asm):06559         L428A    lbsr  L2AC5
3C3F 8159             (    supercomm.asm):06560                  cmpa  #'Y
3C41 2710             (    supercomm.asm):06561                  beq   L42A3
3C43 814E             (    supercomm.asm):06562                  cmpa  #'N
3C45 10270087         (    supercomm.asm):06563                  lbeq  L4332
3C49 8105             (    supercomm.asm):06564                  cmpa  #$05            <CTRL>-<E>?
3C4B 10270081         (    supercomm.asm):06565                  lbeq  L4332
3C4F 810D             (    supercomm.asm):06566                  cmpa  #C$CR
3C51 26E9             (    supercomm.asm):06567                  bne   L428A           Illegal responses; ignore & try again
                      (    supercomm.asm):06568         
3C53 170104           (    supercomm.asm):06569         L42A3    lbsr  L43CA
3C56 170209           (    supercomm.asm):06570                  lbsr  L44E1
3C59 962F             (    supercomm.asm):06571                  lda   <u002A          Get path to file
3C5B 103F8F           (    supercomm.asm):06572                  os9   I$Close         Close it 
3C5E 2578             (    supercomm.asm):06573                  bcs   L433B
3C60 0F2A             (    supercomm.asm):06574                  clr   <u0025          Clear flag that a receive file is open
3C62 0F2B             (    supercomm.asm):06575                  clr   <u0026          Clear flag that receive buffer is open
3C64 17E400           (    supercomm.asm):06576                  lbsr  L237E
3C67 2067             (    supercomm.asm):06577                  bra   L4332
                      (    supercomm.asm):06578         
3C69 0D25             (    supercomm.asm):06579         L42BE    tst   <u0020
3C6B 2620             (    supercomm.asm):06580                  bne   L42E7
3C6D 308DC8D0         (    supercomm.asm):06581                  leax  >L055F,pc      'File:'
3C71 17DC18           (    supercomm.asm):06582                  lbsr  L1B03
3C74 C61E             (    supercomm.asm):06583                  ldb   #$1E           Max file size allowed?
3C76 17DC6C           (    supercomm.asm):06584                  lbsr  L1B61          Go get filename from user
3C79 0D26             (    supercomm.asm):06585                  tst   <u0021
3C7B 2653             (    supercomm.asm):06586                  bne   L4332
3C7D DC21             (    supercomm.asm):06587                  ldd   <u001C
3C7F DD23             (    supercomm.asm):06588                  std   <u001E
3C81 8E0613           (    supercomm.asm):06589                  ldx   #u060E
3C84 108E00C4         (    supercomm.asm):06590                  ldy   #u00BF
3C88 C620             (    supercomm.asm):06591                  ldb   #$20
3C8A 17EC57           (    supercomm.asm):06592                  lbsr  L2D1E
3C8D 8E00C4           (    supercomm.asm):06593         L42E7    ldx   #u00BF
3C90 A684             (    supercomm.asm):06594                  lda   ,x
3C92 810D             (    supercomm.asm):06595                  cmpa  #$0D           Carriage return?
3C94 273A             (    supercomm.asm):06596                  beq   L4332
3C96 CC0203           (    supercomm.asm):06597                  ldd   #WRITE.*256+UPDAT.  Access mode=Write, attributes=Read & Write
3C99 103F83           (    supercomm.asm):06598                  os9   I$Create       Create the file
3C9C 241C             (    supercomm.asm):06599                  bcc   L4318
3C9E C1DA             (    supercomm.asm):06600                  cmpb  #E$CEF         File aready exists error?
3CA0 2636             (    supercomm.asm):06601                  bne   L433B
3CA2 308DCC2A         (    supercomm.asm):06602                  leax  >L092B,pc      Append or overwrite message
3CA6 17DBE3           (    supercomm.asm):06603                  lbsr  L1B03
3CA9 17EA2A           (    supercomm.asm):06604         L4305    lbsr  L2AC5
3CAC 8141             (    supercomm.asm):06605                  cmpa  #'A            Append?
3CAE 2750             (    supercomm.asm):06606                  beq   L4363
3CB0 814F             (    supercomm.asm):06607                  cmpa  #'O            Overwrite?
3CB2 276D             (    supercomm.asm):06608                  beq   L438A
3CB4 810D             (    supercomm.asm):06609                  cmpa  #C$CR          CR?
3CB6 2718             (    supercomm.asm):06610                  beq   L4332
3CB8 20EF             (    supercomm.asm):06611                  bra   L4305
                      (    supercomm.asm):06612         
3CBA 972F             (    supercomm.asm):06613         L4318    sta   <u002A         Save path # to receive file
3CBC 0C2A             (    supercomm.asm):06614         L431B    inc   <u0025         Flag that receive file exists
3CBE 0D29             (    supercomm.asm):06615                  tst   <u0024
3CC0 260E             (    supercomm.asm):06616                  bne   L4332
3CC2 0C2B             (    supercomm.asm):06617                  inc   <u0026         Flag that receive buffer is open
3CC4 17E3A0           (    supercomm.asm):06618                  lbsr  L237E
3CC7 9604             (    supercomm.asm):06619                  lda   <u0002         Get MSB of max address for receive buffer
3CC9 9008             (    supercomm.asm):06620                  suba  <u0006         Calc size to end of buffer (in 256 byte blocks)
3CCB 970D             (    supercomm.asm):06621                  sta   <u0008         Save it
3CCD 1701AE           (    supercomm.asm):06622                  lbsr  L44FF
3CD0 0F29             (    supercomm.asm):06623         L4332    clr   <u0024
3CD2 17DD62           (    supercomm.asm):06624                  lbsr  L1CDE
3CD5 16CF06           (    supercomm.asm):06625                  lbra  L0C5E
                      (    supercomm.asm):06626         
3CD8 8607             (    supercomm.asm):06627         L433B    lda   #$07
3CDA 17DF9B           (    supercomm.asm):06628                  lbsr  L1F0B
3CDD 3404             (    supercomm.asm):06629                  pshs  b
3CDF CC0D02           (    supercomm.asm):06630                  ldd   #$0D02
3CE2 17E2B3           (    supercomm.asm):06631                  lbsr  L2294
3CE5 308DC788         (    supercomm.asm):06632                  leax  >L048F,pc      Cursor OFF
3CE9 17DBA0           (    supercomm.asm):06633                  lbsr  L1B03
3CEC 3504             (    supercomm.asm):06634                  puls  b
3CEE 103F0F           (    supercomm.asm):06635                  os9   F$PErr         Print error message
3CF1 8E003C           (    supercomm.asm):06636                  ldx   #$003C
3CF4 17D1E2           (    supercomm.asm):06637                  lbsr  L0F56
3CF7 308DC772         (    supercomm.asm):06638                  leax  >L048B,pc      Cursor ON
3CFB 17DB8E           (    supercomm.asm):06639                  lbsr  L1B03
3CFE 20D0             (    supercomm.asm):06640                  bra   L4332
                      (    supercomm.asm):06641         
3D00 8E00C4           (    supercomm.asm):06642         L4363    ldx   #u00BF
3D03 8603             (    supercomm.asm):06643                  lda   #UPDAT.
3D05 103F84           (    supercomm.asm):06644                  os9   I$Open   
3D08 240B             (    supercomm.asm):06645                  bcc   L4379
3D0A 103F0F           (    supercomm.asm):06646                  os9   F$PErr   
3D0D 8E003C           (    supercomm.asm):06647                  ldx   #$003C
3D10 17D1C6           (    supercomm.asm):06648                  lbsr  L0F56
3D13 20C3             (    supercomm.asm):06649                  bra   L433B
                      (    supercomm.asm):06650         
3D15 972F             (    supercomm.asm):06651         L4379    sta   <u002A         Save path # to receive file
                      (    supercomm.asm):06652         * NOTE: TOOK OUT PSHS U
3D17 C602             (    supercomm.asm):06653                  ldb   #SS.Size       Get size of file to append to
3D19 103F8D           (    supercomm.asm):06654                  os9   I$GetStt 
3D1C 103F88           (    supercomm.asm):06655                  os9   I$Seek         Seek to end of file 
                      (    supercomm.asm):06656         * NOTE: TOOK OUT PULS U
3D1F 209B             (    supercomm.asm):06657                  bra   L431B
                      (    supercomm.asm):06658         
3D21 8E00C4           (    supercomm.asm):06659         L438A    ldx   #u00BF         Delete file (to overwrite)
3D24 103F87           (    supercomm.asm):06660                  os9   I$Delete 
3D27 16FF63           (    supercomm.asm):06661                  lbra  L42E7
                      (    supercomm.asm):06662         
3D2A 3436             (    supercomm.asm):06663         L4394    pshs  y,x,d
3D2C 8E0712           (    supercomm.asm):06664                  ldx   #u070D
3D2F D60C             (    supercomm.asm):06665                  ldb   <u0C89         Get LSB of size converted output text buffer
3D31 109E08           (    supercomm.asm):06666                  ldy   <u0006         Get ptr to end of current receive buffer
3D34 A680             (    supercomm.asm):06667         L43A4    lda   ,x+
3D36 810A             (    supercomm.asm):06668                  cmpa  #$0A
3D38 2705             (    supercomm.asm):06669                  beq   L43AF
3D3A A7A0             (    supercomm.asm):06670                  sta   ,y+
3D3C 109F08           (    supercomm.asm):06671                  sty   <u0006
3D3F 5A               (    supercomm.asm):06672         L43AF    decb  
3D40 109C04           (    supercomm.asm):06673                  cmpy  <u0002
3D43 2505             (    supercomm.asm):06674                  bcs   L43BA
3D45 8D13             (    supercomm.asm):06675                  bsr   L43CA
3D47 109E08           (    supercomm.asm):06676                  ldy   <u0006
3D4A 5D               (    supercomm.asm):06677         L43BA    tstb  
3D4B 26E7             (    supercomm.asm):06678                  bne   L43A4
3D4D 9604             (    supercomm.asm):06679                  lda   <u0002
3D4F 9008             (    supercomm.asm):06680                  suba  <u0006
3D51 910D             (    supercomm.asm):06681                  cmpa  <u0008
3D53 2703             (    supercomm.asm):06682                  beq   L43C8
3D55 170126           (    supercomm.asm):06683                  lbsr  L44FF
3D58 35B6             (    supercomm.asm):06684         L43C8    puls  pc,y,x,d
                      (    supercomm.asm):06685         
3D5A 3436             (    supercomm.asm):06686         L43CA    pshs  y,x,d
3D5C DC08             (    supercomm.asm):06687                  ldd   <u0006
3D5E DD0E             (    supercomm.asm):06688                  std   <u0009
3D60 0D2A             (    supercomm.asm):06689                  tst   <u0025
3D62 2722             (    supercomm.asm):06690                  beq   L43FD
3D64 B60CB2           (    supercomm.asm):06691                  lda   >u0CB0         Get pause on char
3D67 2705             (    supercomm.asm):06692                  beq   L43E1          None, wing it & hope we don't overflow
3D69 9749             (    supercomm.asm):06693                  sta   <u0044         Save it & send to modem
3D6B 17FB07           (    supercomm.asm):06694                  lbsr  L3E5D
3D6E DC08             (    supercomm.asm):06695         L43E1    ldd   <u0006
3D70 9306             (    supercomm.asm):06696                  subd  <u0004
3D72 1F02             (    supercomm.asm):06697                  tfr   d,y
3D74 8E16BB           (    supercomm.asm):06698                  ldx   #u16B9
3D77 962F             (    supercomm.asm):06699                  lda   <u002A         Get path # to receive buffer file
3D79 103F8A           (    supercomm.asm):06700                  os9   I$Write        Save
3D7C B60CB1           (    supercomm.asm):06701                  lda   >u0CAF         Get pause off char
3D7F 2705             (    supercomm.asm):06702                  beq   L43FD          None, skip ahead
3D81 9749             (    supercomm.asm):06703                  sta   <u0044         Save & send to host
3D83 17FAEF           (    supercomm.asm):06704                  lbsr  L3E5D
3D86 DC06             (    supercomm.asm):06705         L43FD    ldd   <u0004         Reset end of receive buffer ptr to start
3D88 DD08             (    supercomm.asm):06706                  std   <u0006
3D8A 35B6             (    supercomm.asm):06707                  puls  pc,y,x,d
                      (    supercomm.asm):06708         
                      (    supercomm.asm):06709         * Parameter parsing?
3D8C 3436             (    supercomm.asm):06710         L4403    pshs  y,x,d
3D8E 0F29             (    supercomm.asm):06711                  clr   <u0024
3D90 AEC4             (    supercomm.asm):06712                  ldx   ,u
3D92 A680             (    supercomm.asm):06713         L440A    lda   ,x+
3D94 810D             (    supercomm.asm):06714                  cmpa  #C$CR
3D96 2734             (    supercomm.asm):06715                  beq   L4447
3D98 8166             (    supercomm.asm):06716                  cmpa  #'f
3D9A 2704             (    supercomm.asm):06717                  beq   L4418
3D9C 8146             (    supercomm.asm):06718                  cmpa  #'F
3D9E 26F2             (    supercomm.asm):06719                  bne   L440A
3DA0 A61E             (    supercomm.asm):06720         L4418    lda   -$02,x
3DA2 8120             (    supercomm.asm):06721                  cmpa  #C$SPAC
3DA4 2706             (    supercomm.asm):06722                  beq   L4425
3DA6 812D             (    supercomm.asm):06723                  cmpa  #'-
3DA8 26E8             (    supercomm.asm):06724                  bne   L440A
3DAA 0C29             (    supercomm.asm):06725                  inc   <u0024
3DAC A680             (    supercomm.asm):06726         L4425    lda   ,x+
3DAE 813D             (    supercomm.asm):06727                  cmpa  #'=
3DB0 26E0             (    supercomm.asm):06728                  bne   L440A
3DB2 108E00C4         (    supercomm.asm):06729                  ldy   #u00BF
3DB6 5F               (    supercomm.asm):06730                  clrb  
3DB7 A680             (    supercomm.asm):06731         L4430    lda   ,x+
3DB9 A7A0             (    supercomm.asm):06732                  sta   ,y+
3DBB 5C               (    supercomm.asm):06733                  incb  
3DBC 810D             (    supercomm.asm):06734                  cmpa  #C$CR
3DBE 2704             (    supercomm.asm):06735                  beq   L443D
3DC0 C120             (    supercomm.asm):06736                  cmpb  #C$SPAC
3DC2 25F3             (    supercomm.asm):06737                  blo   L4430
3DC4 4F               (    supercomm.asm):06738         L443D    clra  
3DC5 DD23             (    supercomm.asm):06739                  std   <u001E
3DC7 0C25             (    supercomm.asm):06740                  inc   <u0020
3DC9 17FE1F           (    supercomm.asm):06741                  lbsr  L4233
3DCC 0F25             (    supercomm.asm):06742         L4447    clr   <u0020
3DCE 35B6             (    supercomm.asm):06743                  puls  pc,y,x,d
                      (    supercomm.asm):06744         
3DD0 308DCAE1         (    supercomm.asm):06745         L444C    leax  >L0910,pc      'Send ASCII file'
3DD4 17DAB5           (    supercomm.asm):06746                  lbsr  L1B03
3DD7 308DC692         (    supercomm.asm):06747                  leax  >L048B,pc      Cursor ON
3DDB 17DAAE           (    supercomm.asm):06748                  lbsr  L1B03
3DDE 308DC75F         (    supercomm.asm):06749                  leax  >L055F,pc      'File:'
3DE2 17DAA7           (    supercomm.asm):06750                  lbsr  L1B03
3DE5 C61E             (    supercomm.asm):06751                  ldb   #$1E
3DE7 17DAFB           (    supercomm.asm):06752                  lbsr  L1B61
3DEA 0D26             (    supercomm.asm):06753                  tst   <u0021
3DEC 2660             (    supercomm.asm):06754                  bne   L44CF
3DEE 8E0613           (    supercomm.asm):06755                  ldx   #u060E
3DF1 108E13AB         (    supercomm.asm):06756                  ldy   #u13A9
3DF5 C620             (    supercomm.asm):06757                  ldb   #$20
3DF7 17EAEA           (    supercomm.asm):06758                  lbsr  L2D1E
3DFA 8E13AB           (    supercomm.asm):06759                  ldx   #u13A9
3DFD A684             (    supercomm.asm):06760                  lda   ,x
3DFF 810D             (    supercomm.asm):06761                  cmpa  #C$CR
3E01 274B             (    supercomm.asm):06762                  beq   L44CF
3E03 8601             (    supercomm.asm):06763                  lda   #READ.
3E05 103F84           (    supercomm.asm):06764                  os9   I$Open   
3E08 2544             (    supercomm.asm):06765                  bcs   L44CF
3E0A 9731             (    supercomm.asm):06766                  sta   <u002C         Save path # to file xmit in ASCII
3E0C 8601             (    supercomm.asm):06767                  lda   #$01
3E0E 9728             (    supercomm.asm):06768                  sta   <u0023
3E10 17DC24           (    supercomm.asm):06769                  lbsr  L1CDE
3E13 9631             (    supercomm.asm):06770         L4494    lda   <u002C         Get path # to send file
3E15 8E13AB           (    supercomm.asm):06771                  ldx   #u13A9         Point to send buffer
3E18 108E00FF         (    supercomm.asm):06772                  ldy   #255           Max 255 bytes/read
3E1C 103F8B           (    supercomm.asm):06773                  os9   I$ReadLn       Get block from file
3E1F 2523             (    supercomm.asm):06774                  bcs   L44C3
3E21 9630             (    supercomm.asm):06775                  lda   <u002B         Get path # to modem
3E23 8E13AB           (    supercomm.asm):06776                  ldx   #u13A9         Send data to modem
3E26 103F8C           (    supercomm.asm):06777                  os9   I$WritLn 
3E29 17CDAB           (    supercomm.asm):06778                  lbsr  L13C2
3E2C 2426             (    supercomm.asm):06779                  bcc   L44D4
3E2E 16CDAD           (    supercomm.asm):06780                  lbra  L0C5E
                      (    supercomm.asm):06781         
3E31 8E0004           (    supercomm.asm):06782         L44B6    ldx   #$0004
3E34 17D0A2           (    supercomm.asm):06783                  lbsr  L0F56
3E37 9630             (    supercomm.asm):06784                  lda   <u002B         Get path to modem
3E39 C601             (    supercomm.asm):06785                  ldb   #SS.Ready
3E3B 103F8D           (    supercomm.asm):06786                  os9   I$GetStt       Any data ready on the modem?
3E3E 1024CD9C         (    supercomm.asm):06787                  lbcc  L0C5E          Possibly, return to main read loop
3E42 20CF             (    supercomm.asm):06788                  bra   L4494          No, go get more data from disk file
                      (    supercomm.asm):06789         
3E44 9631             (    supercomm.asm):06790         L44C3    lda   <u002C         Close send file
3E46 103F8F           (    supercomm.asm):06791                  os9   I$Close  
3E49 0F28             (    supercomm.asm):06792                  clr   <u0023         Clear 'Sending ASCII file' flag
3E4B 16CD90           (    supercomm.asm):06793                  lbra  L0C5E
                      (    supercomm.asm):06794         
3E4E 17DBE6           (    supercomm.asm):06795         L44CF    lbsr  L1CDE
3E51 16CD8A           (    supercomm.asm):06796                  lbra  L0C5E
                      (    supercomm.asm):06797         
3E54 17E87F           (    supercomm.asm):06798         L44D4    lbsr  L2AC5
3E57 8103             (    supercomm.asm):06799                  cmpa  #$03
3E59 27E9             (    supercomm.asm):06800                  beq   L44C3
3E5B 8105             (    supercomm.asm):06801                  cmpa  #$05
3E5D 27E5             (    supercomm.asm):06802                  beq   L44C3
3E5F 16CD7C           (    supercomm.asm):06803                  lbra  L0C5E
                      (    supercomm.asm):06804         
3E62 3436             (    supercomm.asm):06805         L44E1    pshs  y,x,d
3E64 8E13AB           (    supercomm.asm):06806                  ldx   #u13A9
3E67 CC026A           (    supercomm.asm):06807                  ldd   #$026A         CurXY @ 74,0
3E6A ED84             (    supercomm.asm):06808                  std   ,x
3E6C CC2020           (    supercomm.asm):06809                  ldd   #$2020         +3 spaces
3E6F ED02             (    supercomm.asm):06810                  std   $02,x
3E71 ED04             (    supercomm.asm):06811                  std   $04,x
3E73 9643             (    supercomm.asm):06812                  lda   <u003E         Get path # to status window
3E75 108E0006         (    supercomm.asm):06813                  ldy   #$0006
3E79 103F8A           (    supercomm.asm):06814                  os9   I$Write  
3E7C 35B6             (    supercomm.asm):06815                  puls  pc,y,x,d
                      (    supercomm.asm):06816         
3E7E 3436             (    supercomm.asm):06817         L44FF    pshs  y,x,d
3E80 970D             (    supercomm.asm):06818                  sta   <u0008
3E82 44               (    supercomm.asm):06819                  lsra  
3E83 44               (    supercomm.asm):06820                  lsra  
3E84 4C               (    supercomm.asm):06821                  inca  
3E85 8E13AB           (    supercomm.asm):06822                  ldx   #u13A9
3E88 5F               (    supercomm.asm):06823                  clrb  
3E89 810A             (    supercomm.asm):06824         L450B    cmpa  #10
3E8B 2505             (    supercomm.asm):06825                  blo   L4514
3E8D 800A             (    supercomm.asm):06826                  suba  #$0A
3E8F 5C               (    supercomm.asm):06827                  incb  
3E90 20F7             (    supercomm.asm):06828                  bra   L450B
                      (    supercomm.asm):06829         
3E92 CB30             (    supercomm.asm):06830         L4514    addb  #$30           Convert to ASCII numeric
3E94 8B30             (    supercomm.asm):06831                  adda  #$30
3E96 C130             (    supercomm.asm):06832                  cmpb  #$30
3E98 2602             (    supercomm.asm):06833                  bne   L451E
3E9A C620             (    supercomm.asm):06834                  ldb   #C$SPAC
3E9C E703             (    supercomm.asm):06835         L451E    stb   $03,x
3E9E A704             (    supercomm.asm):06836                  sta   $04,x
3EA0 CC026A           (    supercomm.asm):06837                  ldd   #$026A         CurXY @ 74,0
3EA3 ED84             (    supercomm.asm):06838                  std   ,x
3EA5 8620             (    supercomm.asm):06839                  lda   #$20
3EA7 A702             (    supercomm.asm):06840                  sta   $02,x
3EA9 864B             (    supercomm.asm):06841                  lda   #$4B
3EAB A705             (    supercomm.asm):06842                  sta   $05,x
3EAD 9643             (    supercomm.asm):06843                  lda   <u003E
3EAF 108E0006         (    supercomm.asm):06844                  ldy   #$0006
3EB3 103F8A           (    supercomm.asm):06845                  os9   I$Write  
3EB6 35B6             (    supercomm.asm):06846                  puls  pc,y,x,d
                      (    supercomm.asm):06847         
3EB8 3436             (    supercomm.asm):06848         L453B    pshs  y,x,d
3EBA 8E0712           (    supercomm.asm):06849                  ldx   #u070D
3EBD D60C             (    supercomm.asm):06850                  ldb   <u0C89       Get # bytes in modem buffer
3EBF 109E14           (    supercomm.asm):06851                  ldy   <u000F
3EC2 A680             (    supercomm.asm):06852         L4548    lda   ,x+
3EC4 A7A0             (    supercomm.asm):06853                  sta   ,y+
3EC6 5A               (    supercomm.asm):06854                  decb  
3EC7 109C10           (    supercomm.asm):06855                  cmpy  <u000B
3ECA 2503             (    supercomm.asm):06856                  blo   L4555
3ECC 109E12           (    supercomm.asm):06857                  ldy   <u000D
3ECF 5D               (    supercomm.asm):06858         L4555    tstb  
3ED0 26F0             (    supercomm.asm):06859                  bne   L4548
3ED2 109F14           (    supercomm.asm):06860                  sty   <u000F
3ED5 35B6             (    supercomm.asm):06861                  puls  pc,y,x,d
                      (    supercomm.asm):06862         
                      (    supercomm.asm):06863         * Scan filename memory for filename (used by file xfer's)
3ED7 3436             (    supercomm.asm):06864         L455D    pshs  d,x,y
3ED9 9E14             (    supercomm.asm):06865                  ldx   <u000F       get pointer to ???
3EDB A682             (    supercomm.asm):06866         L4561    lda   ,-x          get a byte
3EDD 812E             (    supercomm.asm):06867                  cmpa  #$2E         period?
3EDF 270E             (    supercomm.asm):06868                  beq   L4577        yes, skip ahead
3EE1 9C12             (    supercomm.asm):06869         L4567    cmpx  <u000D       end of buffer?
3EE3 2602             (    supercomm.asm):06870                  bne   L456D        no, check
3EE5 9E10             (    supercomm.asm):06871                  ldx   <u000B
3EE7 9C14             (    supercomm.asm):06872         L456D    cmpx  <u000F
3EE9 26F0             (    supercomm.asm):06873                  bne   L4561
3EEB 0FA0             (    supercomm.asm):06874                  clr   <u009B       Clear filename present flag
3EED 35B6             (    supercomm.asm):06875                  puls  d,x,y,pc
                      (    supercomm.asm):06876         *
3EEF A601             (    supercomm.asm):06877         L4577    lda   1,x          get character again
3EF1 812E             (    supercomm.asm):06878                  cmpa  #'.
3EF3 25EC             (    supercomm.asm):06879                  blo   L4567
3EF5 A61F             (    supercomm.asm):06880                  lda   -1,x
3EF7 812E             (    supercomm.asm):06881                  cmpa  #'.
3EF9 25E6             (    supercomm.asm):06882                  blo   L4567
3EFB A682             (    supercomm.asm):06883         L4583    lda   ,-x
3EFD 8130             (    supercomm.asm):06884                  cmpa  #'0
3EFF 2506             (    supercomm.asm):06885                  blo   L458F
3F01 9C14             (    supercomm.asm):06886                  cmpx  <u000F
3F03 27E2             (    supercomm.asm):06887                  beq   L456D
3F05 20F4             (    supercomm.asm):06888                  bra   L4583
                      (    supercomm.asm):06889         
3F07 A601             (    supercomm.asm):06890         L458F    lda   1,x
3F09 8141             (    supercomm.asm):06891                  cmpa  #'A
3F0B 25DA             (    supercomm.asm):06892                  blo   L456D
3F0D C61F             (    supercomm.asm):06893                  ldb   #$1F
3F0F 3001             (    supercomm.asm):06894                  leax  1,x
3F11 108E00A4         (    supercomm.asm):06895                  ldy   #u009F
3F15 A680             (    supercomm.asm):06896         L459D    lda   ,x+
3F17 812E             (    supercomm.asm):06897         L459F    cmpa  #'.
3F19 250D             (    supercomm.asm):06898                  blo   L45B8
3F1B A7A0             (    supercomm.asm):06899                  sta   ,y+
3F1D 5A               (    supercomm.asm):06900                  decb  
3F1E 2708             (    supercomm.asm):06901                  beq   L45B8
3F20 9C10             (    supercomm.asm):06902                  cmpx  <u000B
3F22 270C             (    supercomm.asm):06903                  beq   L45B2
3F24 9C14             (    supercomm.asm):06904                  cmpx  <u000F       ??? Hit end of name buffer?
3F26 26ED             (    supercomm.asm):06905                  bne   L459D        No, keep going
                      (    supercomm.asm):06906         
3F28 860D             (    supercomm.asm):06907         L45B8    lda   #C$CR        Change to CR
3F2A A7A4             (    supercomm.asm):06908                  sta   ,y
3F2C 0CA0             (    supercomm.asm):06909                  inc   <u009B       Inc size of filename counter
3F2E 35B6             (    supercomm.asm):06910                  puls  d,x,y,pc     Restore & return
                      (    supercomm.asm):06911         
3F30 A684             (    supercomm.asm):06912         L45B2    lda   ,x
3F32 9E12             (    supercomm.asm):06913                  ldx   <u000D
3F34 20E1             (    supercomm.asm):06914                  bra   L459F
                      (    supercomm.asm):06915         
3F36 44756D           (    supercomm.asm):06916                  emod
     3F39             (    supercomm.asm):06917         eom      equ   *
                      (    supercomm.asm):06918                  end
