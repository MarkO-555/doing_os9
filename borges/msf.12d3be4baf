                      (          msf.asm):00001         *********************************************************************
                      (          msf.asm):00002         * MSF (msf.v2.3.a)
                      (          msf.asm):00003         *
                      (          msf.asm):00004         * copyright 1988 by
                      (          msf.asm):00005         *           Clearbrook Software Group Inc.
                      (          msf.asm):00006         *           Box 8000-499
                      (          msf.asm):00007         *           Abbotsford, B.C.
                      (          msf.asm):00008         *           CANADA  V2S 6H1
                      (          msf.asm):00009         *           (604)853-9118
                      (          msf.asm):00010         *
                      (          msf.asm):00011         * author: Paul Kehler
                      (          msf.asm):00012         *
                      (          msf.asm):00013         * MSF source and object code and any product derived from the
                      (          msf.asm):00014         *  MSF source code is a copyrighted product of Clearbrook
                      (          msf.asm):00015         *  Software Group Inc. It may be used by a licensed user on one 
                      (          msf.asm):00016         *  computer system and may not be sold or given away except as
                      (          msf.asm):00017         *  authorized by Clearbrook Software Group Inc.
                      (          msf.asm):00018         *
                      (          msf.asm):00019         * Oct 15, 1988 - added check for busy before FAT checked
                      (          msf.asm):00020         *
                      (          msf.asm):00021         * MSDOS file manager for OS9 Level 2 with SDisk3 disk driver
                      (          msf.asm):00022         *********************************************************************
                      (          msf.asm):00023         
                      (          msf.asm):00024                    ifp1
                      (          msf.asm):00025                    use   defsfile
     0002             (         defsfile):00001         Level set 2
                      (         defsfile):00002         
                      (         defsfile):00003          use os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
     0003             (            os9.d):01040         R$E            EQU       3                   E Accumulator
     0004             (            os9.d):01041         R$F            EQU       4                   F Accumulator
     0003             (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
     0001             (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
     0005             (            os9.d):01044         R$DP           EQU       5                   Direct Page register
     0006             (            os9.d):01045         R$X            EQU       6                   X Index register
     0008             (            os9.d):01046         R$Y            EQU       8                   Y Index register
     000A             (            os9.d):01047         R$U            EQU       10                  User Stack register
     000C             (            os9.d):01048         R$PC           EQU       12                  Program Counter register
     000E             (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
0005                  (            os9.d):01051         R$DP           EQU       3                   Direct Page register
0005                  (            os9.d):01052         R$X            EQU       4                   X Index register
0005                  (            os9.d):01053         R$Y            EQU       6                   Y Index register
0005                  (            os9.d):01054         R$U            EQU       8                   User Stack register
0005                  (            os9.d):01055         R$PC           EQU       10                  Program Counter register
0005                  (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (         defsfile):00004          use rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (         defsfile):00005          use coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         *************************************************
                      (           coco.d):00148         *
                      (           coco.d):00149         * NitrOS-9 Level 1 Section
                      (           coco.d):00150         *
                      (           coco.d):00151         *************************************************
                      (           coco.d):00152         
0004                  (           coco.d):00153         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE      
                      (           coco.d):00156         
                      (           coco.d):00157         *************************************************
                      (           coco.d):00158         *
                      (           coco.d):00159         * NitrOS-9 Level 2 Section
                      (           coco.d):00160         *
                      (           coco.d):00161         *************************************************
                      (           coco.d):00162         
                      (           coco.d):00163         ****************************************
                      (           coco.d):00164         * Dynamic Address Translator Definitions
                      (           coco.d):00165         *
     0008             (           coco.d):00166         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00167         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00168         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00169         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00170         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00171         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00172         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00173         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00174         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00175         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00176         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00177         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00178         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00179         IOBlock        EQU       $3F
     003F             (           coco.d):00180         ROMBlock       EQU       $3F
     007F             (           coco.d):00181         IOAddr         EQU       $7F
     0001             (           coco.d):00182         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00183         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00184         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00185         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00186         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00187         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00188         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00189         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00190         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00191         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00192         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00193         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00194         
                      (           coco.d):00195         ***************************
                      (           coco.d):00196         * Color Computer 3 Specific
                      (           coco.d):00197         *
     0001             (           coco.d):00198         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00199         
                      (           coco.d):00200         ********************
                      (           coco.d):00201         * Hardware addresses
                      (           coco.d):00202         *
     FF00             (           coco.d):00203         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00204         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00205         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00206         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00207         
     0007             (           coco.d):00208         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00209         
                      (           coco.d):00210                        ENDC
                      (           coco.d):00211                        
                      (           coco.d):00212                        ENDC      
                      (           coco.d):00213         
                      (         defsfile):00006          use msfdefs
                      (          msfdefs):00001         *********************************************************************
                      (          msfdefs):00002         * Defs for the MSDos file manager
                      (          msfdefs):00003         
                      (          msfdefs):00004         * system direct page for MSF file manager
                      (          msfdefs):00005         
     007C             (          msfdefs):00006         D.MSF equ $7c pointer to linked list of MSF paths
                      (          msfdefs):00007         
                      (          msfdefs):00008         * path table (static storage) offsets
                      (          msfdefs):00009         
                      (          msfdefs):00010         *** rev 2.2
     001F             (          msfdefs):00011         V.DNS equ $1F disk density 8=Hi-density, 4=96tpi, 0=48tpi
     0020             (          msfdefs):00012         V.BPB equ $20 pointer to disk information (64 bytes)
                      (          msfdefs):00013         ***
                      (          msfdefs):00014         
     0022             (          msfdefs):00015         V.FLG equ $22 FAT must be read if NE
     0023             (          msfdefs):00016         V.CNT equ $23 number of paths open to this device
     0024             (          msfdefs):00017         V.FAT equ $24 point to FAT (in reserved section of device table)
                      (          msfdefs):00018         
                      (          msfdefs):00019         *** rev 2.1
     0022             (          msfdefs):00020         V.FS equ V.FLG FAT size/256 (V.FLG no longer used)
                      (          msfdefs):00021         ***
                      (          msfdefs):00022         
     000E             (          msfdefs):00023         DRVBEG2 set $0e offset from beg. of device static storage to 1st drive table
                      (          msfdefs):00024         
     0000             (          msfdefs):00025         modmem equ 0
                      (          msfdefs):00026         
     00D1             (          msfdefs):00027         type set FlMgr+Objct
     0081             (          msfdefs):00028         revs set Reent+1
                      (          msfdefs):00029         
                      (          msfdefs):00030         *SS.DREAD set $80 direct sector read/write
     0084             (          msfdefs):00031         SS.SREAD equ $84 direct sector read/write in system space
                      (          msfdefs):00032         *SS.ATTR  equ $85 get/set file attribute
     0086             (          msfdefs):00033         SS.RENAM equ $86 rename file
     0087             (          msfdefs):00034         SS.ALLOW equ $87 allow writing to disk or directory
                      (          msfdefs):00035         
     00FF             (          msfdefs):00036         E$BadFAT equ 255
                      (          msfdefs):00037         
     000D             (          msfdefs):00038         EOL equ 13
     000D             (          msfdefs):00039         CR equ EOL
     0020             (          msfdefs):00040         SPC equ 32
     0020             (          msfdefs):00041         SP equ SPC
     001A             (          msfdefs):00042         MSDEOF equ $1A end of line character for MSDOS text files
                      (          msfdefs):00043         
                      (          msfdefs):00044         ********************************************************
                      (          msfdefs):00045         * MSDOS directory entry offsets
                      (          msfdefs):00046         *
     0000             (          msfdefs):00047         msd.name equ 0 offset to file name
     0008             (          msfdefs):00048         msd.ext equ 8 offset to file extension
     000B             (          msfdefs):00049         msd.attr equ 11 offset to file attribute
     000C             (          msfdefs):00050         msd.res equ 12 offset to reserved bytes
     0016             (          msfdefs):00051         msd.time equ 22 offset to time
     0018             (          msfdefs):00052         msd.date equ 24 offset to date
     001A             (          msfdefs):00053         msd.strt equ 26 offset to starting cluster number
     001C             (          msfdefs):00054         msd.size equ 28 offset to file size
                      (          msfdefs):00055         
     0020             (          msfdefs):00056         MSDSIZE  equ 32 size of directory entry
     0200             (          msfdefs):00057         SECSIZE  equ 512 size of an MSDOS sector
     0040             (          msfdefs):00058         DIRSIZE  equ 64 size of directory entry in memory
                      (          msfdefs):00059         
                      (          msfdefs):00060         * name is 8 bytes
                      (          msfdefs):00061         * extention is 3 bytes
                      (          msfdefs):00062         * attribute:
     0001             (          msfdefs):00063         attr.RO equ 1 - read only
     0002             (          msfdefs):00064         attr.HD equ 2 - hidden file (excluded from search)
     0004             (          msfdefs):00065         attr.SY equ 4 - system file (excluded from search)
     0008             (          msfdefs):00066         attr.VL equ 8 - volume label
     0010             (          msfdefs):00067         attr.DR equ $10 - subdirectory
     0020             (          msfdefs):00068         attr.AR equ $20 - archive bit (set if file has been written and closed)
                      (          msfdefs):00069         *
                      (          msfdefs):00070         * time:
                      (          msfdefs):00071         *  H  H  H  H  H  M  M  M  M  M  M  S  S  S  S  S
                      (          msfdefs):00072         *  7  6  5  4  3  2  1  0  15 14 13 12 11 10 9  8
                      (          msfdefs):00073         *
                      (          msfdefs):00074         * date:
                      (          msfdefs):00075         *  Y  Y  Y  Y  Y  Y  Y  M  M  M  M  D  D  D  D  D
                      (          msfdefs):00076         *  7  6  5  4  3  2  1  0  15 14 13 12 11 10 9  8
                      (          msfdefs):00077         *
                      (          msfdefs):00078         * starting cluster:
                      (          msfdefs):00079         *  two bytes, LSB first
                      (          msfdefs):00080         *
                      (          msfdefs):00081         * file size:
                      (          msfdefs):00082         *  4 bytes (byte 0, 1, 2, 3)
                      (          msfdefs):00083         ******************************************************
                      (          msfdefs):00084         
                      (          msfdefs):00085         ******************************************************
                      (          msfdefs):00086         * FAT ID byte:
                      (          msfdefs):00087         *  bit 3-7 set
                      (          msfdefs):00088         *  bit 2 - clear if 80 tracks
                      (          msfdefs):00089         *  bit 1 - set if media has 8 sectors/track (1 sector/FAT)
                      (          msfdefs):00090         *  bit 0 - set if media has two heads (112 directory entries)
                      (          msfdefs):00091         
                      (          msfdefs):00092         ******************************************************
                      (          msfdefs):00093         
                      (          msfdefs):00094         ******************************************************
                      (          msfdefs):00095         * File manager path descriptor offsets
                      (          msfdefs):00096         *
                      (          msfdefs):00097          org 0
                      (          msfdefs):00098         
0000                  (          msfdefs):00099         msp.path  rmb 1 equ  PD.PD  path number
0001                  (          msfdefs):00100         msp.mod   rmb 1 equ  PD.MOD file access mode
0002                  (          msfdefs):00101         msp.cnt   rmb 1 equ  PD.CNT dupe path count
0003                  (          msfdefs):00102         msp.dev   rmb 2 equ  PD.DEV address of device table
0005                  (          msfdefs):00103         msp.proc  rmb 1 equ  PD.CPR process ID to which this path belongs
0006                  (          msfdefs):00104         msp.rgs   rmb 2 equ  PD.RGS passed registers
0008                  (          msfdefs):00105         msp.buf   rmb 2 equ  PD.BUF address of buffer
000A                  (          msfdefs):00106         msp.sest  rmb 1 equ  PD.SMF current sector status
000B                  (          msfdefs):00107         msp.pos   rmb 3  current logical file position
000E                  (          msfdefs):00108         msp.lolk  rmb 3  start of lock (logical sector)
0011                  (          msfdefs):00109         msp.lksz  rmb 3  size of lock
0014                  (          msfdefs):00110         msp.dtb   rmb 2  address of drive table
0016                  (          msfdefs):00111         msp.wrt   rmb 1 NE-don't allow writing to path
0017                  (          msfdefs):00112         msp.ncpr  rmb 1 value to store in V.BUSY after using driver
0018                  (          msfdefs):00113         msp.end   rmb 2 number of last logical sector+1 of root or entire disk
                      (          msfdefs):00114         
001A                  (          msfdefs):00115          rmb 6 space left til option table
                      (          msfdefs):00116         
                      (          msfdefs):00117          org $30
                      (          msfdefs):00118         
0030                  (          msfdefs):00119         msp.next  rmb 2  address of next MSDOS path descriptor
0032                  (          msfdefs):00120         msp.prev  rmb 2  address of prev MSDOS path descriptor for SAME file
0034                  (          msfdefs):00121         msp.dir   rmb 2  address of directory entry in memory
0036                  (          msfdefs):00122         msp.dnxt  rmb 2  next path to same file
0038                  (          msfdefs):00123         msp.dprv  rmb 2  previous path to same file
                      (          msfdefs):00124         
003A                  (          msfdefs):00125         msp.cls   rmb 2  current cluster number
003C                  (          msfdefs):00126         msp.sec   rmb 2  current logical sector number
003E                  (          msfdefs):00127         msp.clss  rmb 1  current cluster sector number (0 or 1)
                      (          msfdefs):00128         
                      (          msfdefs):00129         *******************************************************
                      (          msfdefs):00130         * sector status (msp.sest) codes
                      (          msfdefs):00131         
     0001             (          msfdefs):00132         SECGOOD equ 1 sector contains next data to be read
     0002             (          msfdefs):00133         SECREAD equ 2 sector has been completely read
                      (          msfdefs):00134         *             (next sector needs to be read before next READ)
     0004             (          msfdefs):00135         SECUPD  equ 4 sector has been written to
     0008             (          msfdefs):00136         SECBUF  equ 8 sector msp.sec is in the buffer (PD.BUF)
     0010             (          msfdefs):00137         SECEXP  equ $10 sector does not need to be read
                      (          msfdefs):00138         
                      (          msfdefs):00139         *******************************************************
                      (          msfdefs):00140         * memory record for the directory entry
                      (          msfdefs):00141         
                      (          msfdefs):00142         * 1 byte reserved for memory management use
     0001             (          msfdefs):00143         dir.stat  equ  1   status (0=needs update)
     0002             (          msfdefs):00144         dir.chg   equ  2   NE - directory entry needs update
     0003             (          msfdefs):00145         dir.last  equ  3   address of last MSDOS path descriptor for this file
     0005             (          msfdefs):00146         dir.loc   equ  5   logical location of directory entry on disk
     0007             (          msfdefs):00147         dir.pos   equ  7   offset from beginning of sector to directory entry
     0009             (          msfdefs):00148         dir.drv   equ  9   drive number
     000A             (          msfdefs):00149         dir.esec  equ  10  first directory sector with unused entry
     000C             (          msfdefs):00150         dir.eoff  equ  12  offset to first unused entry in above sector
     000E             (          msfdefs):00151         dir.prnt  equ  14  first cluster of parent directory
     0010             (          msfdefs):00152         dir.msd   equ  16  directory entry
                      (          msfdefs):00153         
                      (          msfdefs):00154         ********************************************************
                      (          msfdefs):00155         * type byte bit for MSDOS disk type
                      (          msfdefs):00156         
     0008             (          msfdefs):00157         MSDOS. set %00001000 bit in PD.TYP to indicate MSDOS format
                      (          msfdefs):00158         
                      (          msfdefs):00159         ********************************************************
                      (          msfdefs):00160         * revision 2.2 offsets in the boot sector of an MSDOS disk
                      (          msfdefs):00161         
     0000             (          msfdefs):00162         ID.ver    equ   0  E9xxxx DOS 2, EBxx90 DOS 3
     0003             (          msfdefs):00163         ID.OEM    equ   3  8 byte OEM name
                      (          msfdefs):00164         * these are the important ones
     000B             (          msfdefs):00165         ID.skip   equ   11   number of bytes to skip
                      (          msfdefs):00166         
     0001             (          msfdefs):00167         ID.BPS    equ   1  11  word, bytes/sector
     0003             (          msfdefs):00168         ID.SPA    equ   3  13  byte, sectors/cluster
     0004             (          msfdefs):00169         ID.res    equ   4  14  word, reserved sectors
     0006             (          msfdefs):00170         ID.FATs   equ   6  16  byte, number of FATs
     0007             (          msfdefs):00171         ID.RDE    equ   7  17  word, root directory entries
     0009             (          msfdefs):00172         ID.secs   equ   9  19  word, total number of sectors
     000B             (          msfdefs):00173         ID.ID     equ  11  21  byte, media ID byte
     000C             (          msfdefs):00174         ID.spf    equ  12  22  word, sectors/FAT
     000E             (          msfdefs):00175         ID.spt    equ  14  24  word, sectors/track
     0010             (          msfdefs):00176         ID.hds    equ  16  26  word, number of heads/sides
     0012             (          msfdefs):00177         ID.hidn   equ  18  28  word, number of hidden sectors
                      (          msfdefs):00178         
     0013             (          msfdefs):00179         IDsize    equ  19  number of bytes of disk info
                      (          msfdefs):00180         
     0014             (          msfdefs):00181         ID.clus   equ  20   number of usable clusters
                      (          msf.asm):00026                    endc
                      (          msf.asm):00027         
     00D1             (          msf.asm):00028         type       set   FlMgr+Objct
     0081             (          msf.asm):00029         revs       set   Reent+1
                      (          msf.asm):00030         
     0023             (          msf.asm):00031         edition    set   $23            version 2.3
                      (          msf.asm):00032         
0000 87CD12D3000DD181 (          msf.asm):00033                    mod   modlen,modname,type,revs,modexec,modmem
     2912A90000
                      (          msf.asm):00034         
000D 4D53C6           (          msf.asm):00035         modname    fcs   'MSF'
0010 23               (          msf.asm):00036                    fcb   edition
                      (          msf.asm):00037         
                      (          msf.asm):00038         
                      (          msf.asm):00039         * information determined from the FAT ID byte
                      (          msf.asm):00040         
                      (          msf.asm):00041         *** Revision 2.1 to support 640 and 720k disk
                      (          msf.asm):00042         
                      (          msf.asm):00043         *** Revision 2.2 to support 1.2meg floppies
                      (          msf.asm):00044         * and follow the MSDOS v2+ standard for the
                      (          msf.asm):00045         * information sector and FAT ID byte.
                      (          msf.asm):00046         
                      (          msf.asm):00047         * double sided, 8 sectors/track
0011                  (          msf.asm):00048         doubles8
0011 0002             (          msf.asm):00049                    fcb   $00,$02        512 bytes/sector
0013 02               (          msf.asm):00050                    fcb   $02            sectors/cluster
0014 0100             (          msf.asm):00051                    fcb   $01,$00        reserved sectors
0016 02               (          msf.asm):00052                    fcb   $02            number of FATs
0017 7000             (          msf.asm):00053                    fcb   $70,$00        112 root directory entries
0019 8002             (          msf.asm):00054                    fcb   $80,$02        640 sectors
001B FF               (          msf.asm):00055                    fcb   $FF            ID byte
001C 0100             (          msf.asm):00056                    fcb   $01,$00        1 sector/FAT
001E 0800             (          msf.asm):00057                    fcb   $08,$00        8 sectors/track
0020 0200             (          msf.asm):00058                    fcb   $02,$00        2 heads
0022 0000             (          msf.asm):00059                    fcb   $00,$00        no hidden sectors
                      (          msf.asm):00060         
                      (          msf.asm):00061         * single sided, 8 sectors/track
0024                  (          msf.asm):00062         singles8
0024 0002             (          msf.asm):00063                    fcb   $00,$02        512 bytes/sector
0026 01               (          msf.asm):00064                    fcb   $01            sectors/cluster
0027 0100             (          msf.asm):00065                    fcb   $01,$00        reserved sectors
0029 02               (          msf.asm):00066                    fcb   $02            number of FATs
002A 4000             (          msf.asm):00067                    fcb   $40,$00        64 root directory entries
002C 4001             (          msf.asm):00068                    fcb   $40,$01        320 sectors
002E FE               (          msf.asm):00069                    fcb   $FE            ID byte
002F 0100             (          msf.asm):00070                    fcb   $01,$00        1 sector/FAT
0031 0800             (          msf.asm):00071                    fcb   $08,$00        8 sectors/track
0033 0100             (          msf.asm):00072                    fcb   $01,$00        1 head
0035 0000             (          msf.asm):00073                    fcb   $00,$00        no hidden sectors
                      (          msf.asm):00074         
                      (          msf.asm):00075         * double sided, 9 sectors/track
0037                  (          msf.asm):00076         doubles9
0037 0002             (          msf.asm):00077                    fcb   $00,$02        512 bytes/sector
0039 02               (          msf.asm):00078                    fcb   $02            sectors/cluster
003A 0100             (          msf.asm):00079                    fcb   $01,$00        reserved sectors
003C 02               (          msf.asm):00080                    fcb   $02            number of FATs
003D 7000             (          msf.asm):00081                    fcb   $70,$00        112 root directory entries
003F D002             (          msf.asm):00082                    fcb   $D0,$02        720 sectors
0041 FD               (          msf.asm):00083                    fcb   $FD            ID byte
0042 0200             (          msf.asm):00084                    fcb   $02,$00        2 sector/FAT
0044 0900             (          msf.asm):00085                    fcb   $09,$00        9 sectors/track
0046 0200             (          msf.asm):00086                    fcb   $02,$00        2 heads
0048 0000             (          msf.asm):00087                    fcb   $00,$00        no hidden sectors
                      (          msf.asm):00088         
                      (          msf.asm):00089         * single sided, 9 sectors/track
004A                  (          msf.asm):00090         singles9
004A 0002             (          msf.asm):00091                    fcb   $00,$02        512 bytes/sector
004C 01               (          msf.asm):00092                    fcb   $01            sectors/cluster
004D 0100             (          msf.asm):00093                    fcb   $01,$00        reserved sectors
004F 02               (          msf.asm):00094                    fcb   $02            number of FATs
0050 4000             (          msf.asm):00095                    fcb   $40,$00        64 root directory entries
0052 6801             (          msf.asm):00096                    fcb   $68,$01        360 sectors
0054 FC               (          msf.asm):00097                    fcb   $FC            ID byte
0055 0200             (          msf.asm):00098                    fcb   $02,$00        2 sector/FAT
0057 0900             (          msf.asm):00099                    fcb   $09,$00        9 sectors/track
0059 0100             (          msf.asm):00100                    fcb   $01,$00        1 head
005B 0000             (          msf.asm):00101                    fcb   $00,$00        no hidden sectors
                      (          msf.asm):00102         
                      (          msf.asm):00103         *********************************
                      (          msf.asm):00104         * Subroutine: expchn
                      (          msf.asm):00105         *
                      (          msf.asm):00106         * function - add a cluster to a file chain
                      (          msf.asm):00107         *
                      (          msf.asm):00108         * On entry:
                      (          msf.asm):00109         *  Y points to path descriptor
                      (          msf.asm):00110         *  D is number of last cluster in file
                      (          msf.asm):00111         *
                      (          msf.asm):00112         * On exit:
                      (          msf.asm):00113         *  D is number of added cluster
                      (          msf.asm):00114         *        or
                      (          msf.asm):00115         *  Carry set and error code in B
                      (          msf.asm):00116         
005D AEA814           (          msf.asm):00117         expchn     ldx   msp.dtb,y
0060 AE8824           (          msf.asm):00118                    ldx   V.FAT,x        point to FAT
                      (          msf.asm):00119         
                      (          msf.asm):00120         *********************************
                      (          msf.asm):00121         * Subroutine: expchain
                      (          msf.asm):00122         *
                      (          msf.asm):00123         * function - add a cluster to a file chain
                      (          msf.asm):00124         *
                      (          msf.asm):00125         * On entry:
                      (          msf.asm):00126         *  X points to FAT
                      (          msf.asm):00127         *  D is number of last cluster in file ($FFF if none)
                      (          msf.asm):00128         *
                      (          msf.asm):00129         * On exit:
                      (          msf.asm):00130         *  D is number of added cluster
                      (          msf.asm):00131         *        or
                      (          msf.asm):00132         *  Carry set and error code in B
                      (          msf.asm):00133         
0063 3446             (          msf.asm):00134         expchain   pshs  d,u
0065 170094           (          msf.asm):00135                    lbsr  findhole       find first available sector
0068 2717             (          msf.asm):00136                    beq   expbad         ..media full
006A 1F03             (          msf.asm):00137                    tfr   d,u            save cluster number of hole
006C ECE1             (          msf.asm):00138                    ldd   ,s++           get current last cluster
006E 2708             (          msf.asm):00139                    beq   expch5         ..this is first
0070 10830FF8         (          msf.asm):00140                    cmpd  #$FF8
0074 2402             (          msf.asm):00141                    bhs   expch5
0076 8D30             (          msf.asm):00142                    bsr   updFAT         make it the second last one
0078 1F30             (          msf.asm):00143         expch5     tfr   u,d            get number of hole
007A CE0FFF           (          msf.asm):00144                    ldu   #$FFF
007D 8D29             (          msf.asm):00145                    bsr   updFAT         make it the last cluster in file
007F 35C0             (          msf.asm):00146                    puls  u,pc           return last cluster number in D
                      (          msf.asm):00147         
0081 3264             (          msf.asm):00148         expbad     leas  4,s
0083 53               (          msf.asm):00149                    comb                 set carry
0084 C6F8             (          msf.asm):00150                    ldb   #E$Full
0086 39               (          msf.asm):00151                    rts                  return carry set and media full
                      (          msf.asm):00152         
                      (          msf.asm):00153         
                      (          msf.asm):00154         *******************************************
                      (          msf.asm):00155         * Subroutine: delchain
                      (          msf.asm):00156         *
                      (          msf.asm):00157         * function - delete a file chain from the FAT
                      (          msf.asm):00158         *
                      (          msf.asm):00159         * On entry:
                      (          msf.asm):00160         *  X points to FAT
                      (          msf.asm):00161         *  D is first cluster in file
                      (          msf.asm):00162         *
                      (          msf.asm):00163         * On exit:
                      (          msf.asm):00164         *  D==0 if error
                      (          msf.asm):00165         
0087 3456             (          msf.asm):00166         delchain   pshs  d,x,u
0089 CE0000           (          msf.asm):00167                    ldu   #0
008C 200E             (          msf.asm):00168                    bra   delch2
008E 8D52             (          msf.asm):00169         delch1     bsr   findnext       find the next cluster in the chain
0090 ED62             (          msf.asm):00170                    std   2,s            save it
0092 ECE4             (          msf.asm):00171                    ldd   ,s             get previous cluster number
0094 8D12             (          msf.asm):00172                    bsr   updFAT         mark it as unused
0096 EC62             (          msf.asm):00173                    ldd   2,s            get current cluster
0098 EDE4             (          msf.asm):00174                    std   ,s             make it the previous
009A 2706             (          msf.asm):00175                    beq   delerror       ..bad FAT
009C 10830FF8         (          msf.asm):00176         delch2     cmpd  #$FF8          end of file?
00A0 25EC             (          msf.asm):00177                    blo   delch1         ..no, remove another cluster
00A2 ECE4             (          msf.asm):00178         delerror   ldd   ,s
00A4 3264             (          msf.asm):00179                    leas  4,s
00A6 35C0             (          msf.asm):00180                    puls  u,pc
                      (          msf.asm):00181         
                      (          msf.asm):00182         
                      (          msf.asm):00183         **************************************************
                      (          msf.asm):00184         * Subroutine: updFAT
                      (          msf.asm):00185         *
                      (          msf.asm):00186         * function - update the FAT
                      (          msf.asm):00187         *
                      (          msf.asm):00188         * On entry:
                      (          msf.asm):00189         *  X points to FAT
                      (          msf.asm):00190         *  D cluster to update
                      (          msf.asm):00191         *  U next cluster to cluster D
                      (          msf.asm):00192         *     U==$FFF if D is last cluster in file
                      (          msf.asm):00193         *     U==0 if D is an unused cluster
                      (          msf.asm):00194         *
                      (          msf.asm):00195         * On exit:
                      (          msf.asm):00196         *  all registers unchanged
                      (          msf.asm):00197         
00A8 3456             (          msf.asm):00198         updFAT     pshs  d,x,u
00AA 58               (          msf.asm):00199                    lslb
00AB 49               (          msf.asm):00200                    rola
00AC E3E4             (          msf.asm):00201                    addd  ,s
00AE 44               (          msf.asm):00202                    lsra
00AF 56               (          msf.asm):00203                    rorb                 offset in FAT=cluster# * 1.5
00B0 308B             (          msf.asm):00204                    leax  d,x            point to FAT entry
00B2 EC84             (          msf.asm):00205                    ldd   ,x             get current value in FAT
00B4 2510             (          msf.asm):00206                    bcs   updodd         ..nomalize for odd cluster number
                      (          msf.asm):00207         * 12bit value is put in fat in the following order
                      (          msf.asm):00208         * nibble1, nibble0, neighbour, nibble2
00B6 C4F0             (          msf.asm):00209                    andb  #$F0           keep neighbour nibble
00B8 3404             (          msf.asm):00210                    pshs  b
00BA EC65             (          msf.asm):00211                    ldd   5,s            get new value
00BC 840F             (          msf.asm):00212                    anda  #$F            isolate most significant nibble
00BE AAE0             (          msf.asm):00213                    ora   ,s+            combine with neighbouring nibble
00C0 A701             (          msf.asm):00214                    sta   1,x
00C2 E784             (          msf.asm):00215                    stb   ,x             put in second and third nibbles
00C4 2013             (          msf.asm):00216                    bra   updend
                      (          msf.asm):00217         
00C6 840F             (          msf.asm):00218         updodd     anda  #$F            keep neighbour nibble
00C8 3402             (          msf.asm):00219                    pshs  a
00CA EC65             (          msf.asm):00220                    ldd   5,s            get new value
00CC 44               (          msf.asm):00221                    lsra
00CD 56               (          msf.asm):00222                    rorb
00CE 46               (          msf.asm):00223                    rora
00CF 56               (          msf.asm):00224                    rorb
00D0 46               (          msf.asm):00225                    rora
00D1 56               (          msf.asm):00226                    rorb
00D2 46               (          msf.asm):00227                    rora
00D3 56               (          msf.asm):00228                    rorb
00D4 46               (          msf.asm):00229                    rora                 rearrange the word nibble0, neighbour, nibble2, nibble1
00D5 AAE0             (          msf.asm):00230                    ora   ,s+            combine with neighbour
00D7 ED84             (          msf.asm):00231                    std   ,x             and put it in FAT
00D9 8601             (          msf.asm):00232         updend     lda   #1
00DB AEA834           (          msf.asm):00233                    ldx   msp.dir,y
00DE A701             (          msf.asm):00234                    sta   dir.stat,x     set dir.stat to update FAT
00E0 35D6             (          msf.asm):00235                    puls  d,x,u,pc 
                      (          msf.asm):00236         
                      (          msf.asm):00237         
                      (          msf.asm):00238         ********************************************
                      (          msf.asm):00239         * Subroutine: findnext
                      (          msf.asm):00240         *
                      (          msf.asm):00241         * function - find the next cluster in a chain
                      (          msf.asm):00242         *
                      (          msf.asm):00243         * On entry:
                      (          msf.asm):00244         *  X points to FAT
                      (          msf.asm):00245         *  D current cluster number
                      (          msf.asm):00246         *
                      (          msf.asm):00247         * On exit:
                      (          msf.asm):00248         *  D is next cluster number
                      (          msf.asm):00249         
00E2 3406             (          msf.asm):00250         findnext   pshs  d
00E4 58               (          msf.asm):00251                    lslb
00E5 49               (          msf.asm):00252                    rola
00E6 E3E1             (          msf.asm):00253                    addd  ,s++
00E8 44               (          msf.asm):00254                    lsra
00E9 56               (          msf.asm):00255                    rorb                 offset=cluster*1.5 /carry set if cluster is odd
00EA EC8B             (          msf.asm):00256                    ldd   d,x            get mixed up cluster #
00EC 1E89             (          msf.asm):00257                    exg   a,b
00EE 2503             (          msf.asm):00258                    bcs   oddcl          ..unjumble odd cluster
00F0 840F             (          msf.asm):00259                    anda  #$F            normalize next cluster # for an even cluster
00F2 39               (          msf.asm):00260                    rts
00F3 44               (          msf.asm):00261         oddcl      lsra
00F4 56               (          msf.asm):00262                    rorb
00F5 44               (          msf.asm):00263                    lsra
00F6 56               (          msf.asm):00264                    rorb
00F7 44               (          msf.asm):00265                    lsra
00F8 56               (          msf.asm):00266                    rorb
00F9 44               (          msf.asm):00267                    lsra
00FA 56               (          msf.asm):00268                    rorb
00FB 39               (          msf.asm):00269                    rts
                      (          msf.asm):00270         
                      (          msf.asm):00271         
                      (          msf.asm):00272         **********************************************
                      (          msf.asm):00273         * Subroutine: findhole
                      (          msf.asm):00274         *
                      (          msf.asm):00275         * function - find an unused cluster
                      (          msf.asm):00276         *
                      (          msf.asm):00277         * On entry:
                      (          msf.asm):00278         *  Y points to path descriptor
                      (          msf.asm):00279         *
                      (          msf.asm):00280         * On exit:
                      (          msf.asm):00281         *  D - first unused cluster or 0 if media full
                      (          msf.asm):00282         *  X - points to FAT
                      (          msf.asm):00283         
00FC AEA814           (          msf.asm):00284         findhole   ldx   msp.dtb,y
00FF AE8820           (          msf.asm):00285                    ldx   V.BPB,x        point to disk info
0102 EC8814           (          msf.asm):00286                    ldd   ID.clus,x      get number of clusters
0105 AEA814           (          msf.asm):00287                    ldx   msp.dtb,y
0108 AE8824           (          msf.asm):00288                    ldx   V.FAT,x        point to file allocation table
010B 3406             (          msf.asm):00289         findh02    pshs  d
010D CC0002           (          msf.asm):00290                    ldd   #2             first usable cluster
0110 3406             (          msf.asm):00291                    pshs  d
0112 8DCE             (          msf.asm):00292         findh1     bsr   findnext       get next cluster
0114 ED7E             (          msf.asm):00293                    std   -2,s           is there one?
0116 2710             (          msf.asm):00294                    beq   holefnd        ..no, its unused
0118 ECE4             (          msf.asm):00295                    ldd   ,s
011A C30001           (          msf.asm):00296                    addd  #1
011D EDE4             (          msf.asm):00297                    std   ,s
011F 10A362           (          msf.asm):00298                    cmpd  2,s            end of FAT?
0122 26EE             (          msf.asm):00299                    bne   findh1         ..no, check it out
0124 4F               (          msf.asm):00300                    clra
0125 5F               (          msf.asm):00301                    clrb
0126 EDE4             (          msf.asm):00302                    std   ,s
0128 ECE1             (          msf.asm):00303         holefnd    ldd   ,s++           return cluster # in D
012A 3262             (          msf.asm):00304                    leas  2,s
012C 39               (          msf.asm):00305                    rts
                      (          msf.asm):00306         
                      (          msf.asm):00307         *************************************************
                      (          msf.asm):00308         * Subroutine: rootdat
                      (          msf.asm):00309         *
                      (          msf.asm):00310         * function - return info about size and location
                      (          msf.asm):00311         *  of root directory.
                      (          msf.asm):00312         *
                      (          msf.asm):00313         * On entry:
                      (          msf.asm):00314         *   Y points to path descriptor
                      (          msf.asm):00315         *
                      (          msf.asm):00316         * On exit:
                      (          msf.asm):00317         *  A is cluster size
                      (          msf.asm):00318         *  B is size of directory in sectors
                      (          msf.asm):00319         *  U is location of directory (logical sector)
                      (          msf.asm):00320         
012D 3410             (          msf.asm):00321         rootdat    pshs  x
012F AEA814           (          msf.asm):00322                    ldx   msp.dtb,y
0132 AE8820           (          msf.asm):00323                    ldx   V.BPB,x        point to info
0135 A60C             (          msf.asm):00324                    lda   ID.spf,x       get sectors/fat
0137 E606             (          msf.asm):00325                    ldb   ID.FATs,x      get number of FATs
0139 3D               (          msf.asm):00326                    mul
013A EB04             (          msf.asm):00327                    addb  ID.res,x       add reserved sectors
013C 1F03             (          msf.asm):00328                    tfr   d,u
013E E602             (          msf.asm):00329                    ldb   ID.BPS+1,x     get MSB of sector size
0140 3404             (          msf.asm):00330                    pshs  b
0142 EC07             (          msf.asm):00331                    ldd   ID.RDE,x       get root directory entries
0144 1E89             (          msf.asm):00332                    exg   a,b
0146 44               (          msf.asm):00333                    lsra
0147 56               (          msf.asm):00334                    rorb
0148 44               (          msf.asm):00335                    lsra
0149 56               (          msf.asm):00336                    rorb
014A 44               (          msf.asm):00337         rootd5     lsra
014B 56               (          msf.asm):00338                    rorb
014C 64E4             (          msf.asm):00339                    lsr   ,s
014E 26FA             (          msf.asm):00340                    bne   rootd5         calculate number of directory sectors
0150 3502             (          msf.asm):00341                    puls  a
0152 A603             (          msf.asm):00342                    lda   ID.SPA,x       get sectors/cluster
0154 3590             (          msf.asm):00343                    puls  x,pc
                      (          msf.asm):00344         
                      (          msf.asm):00345         
                      (          msf.asm):00346         *************************************************
                      (          msf.asm):00347         * Subroutine: sepecl
                      (          msf.asm):00348         *
                      (          msf.asm):00349         * function - return sectors per cluster
                      (          msf.asm):00350         *
                      (          msf.asm):00351         * On entry:
                      (          msf.asm):00352         *   Y points to path descriptor
                      (          msf.asm):00353         *
                      (          msf.asm):00354         * On exit:
                      (          msf.asm):00355         *   A - number of sectors per cluster
                      (          msf.asm):00356         *
0156 3410             (          msf.asm):00357         sepecl     pshs  x
0158 AEA814           (          msf.asm):00358                    ldx   msp.dtb,y
015B AE8820           (          msf.asm):00359                    ldx   V.BPB,x        point to disk info
015E A603             (          msf.asm):00360                    lda   ID.SPA,x       get Sectors Per Allocation unit
0160 3590             (          msf.asm):00361                    puls  x,pc
                      (          msf.asm):00362         
                      (          msf.asm):00363         
                      (          msf.asm):00364         *************************************************
                      (          msf.asm):00365         * Subroutine: secsiz
                      (          msf.asm):00366         *
                      (          msf.asm):00367         * function - return sector size
                      (          msf.asm):00368         *
                      (          msf.asm):00369         * On entry:
                      (          msf.asm):00370         *   Y points to path descriptor
                      (          msf.asm):00371         *
                      (          msf.asm):00372         * On exit:
                      (          msf.asm):00373         *   D - sector size
                      (          msf.asm):00374         *
0162 3410             (          msf.asm):00375         secsiz     pshs  x
0164 AEA814           (          msf.asm):00376                    ldx   msp.dtb,y
0167 AE8820           (          msf.asm):00377                    ldx   V.BPB,x        point to disk info
016A EC01             (          msf.asm):00378                    ldd   ID.BPS,x       get Sector size
016C 1E89             (          msf.asm):00379                    exg   a,b            convert to Motorola format
016E 3590             (          msf.asm):00380                    puls  x,pc
                      (          msf.asm):00381         
                      (          msf.asm):00382         
                      (          msf.asm):00383         *************************************************
                      (          msf.asm):00384         * Subroutine: findfile
                      (          msf.asm):00385         *
                      (          msf.asm):00386         * function - find a file in the directory
                      (          msf.asm):00387         *
                      (          msf.asm):00388         * On entry:
                      (          msf.asm):00389         *   Y points to path descriptor
                      (          msf.asm):00390         *
                      (          msf.asm):00391         * On exit:
                      (          msf.asm):00392         *  Carry set if error (error code in B)
                      (          msf.asm):00393         *  X points to directory entry if file found
                      (          msf.asm):00394         
0170 39               (          msf.asm):00395         findf91    rts
                      (          msf.asm):00396         
                      (          msf.asm):00397         * link path into list
0171 AE23             (          msf.asm):00398         findfile   ldx   msp.dev,y
0173 AE02             (          msf.asm):00399                    ldx   V$STAT,x       point to device static storage
0175 E6A821           (          msf.asm):00400                    ldb   PD.DRV,y       get drive number
0178 8626             (          msf.asm):00401                    lda   #DRVMEM
017A 3D               (          msf.asm):00402                    mul
017B 308B             (          msf.asm):00403                    leax  d,x
017D 300E             (          msf.asm):00404                    leax  DRVBEG2,x
017F AFA814           (          msf.asm):00405                    stx   msp.dtb,y      save address of drive table
0182 6C8823           (          msf.asm):00406                    inc   V.CNT,x        path count
0185 DE7C             (          msf.asm):00407         open001    ldu   <D.MSF
0187 2707             (          msf.asm):00408                    beq   open1
0189 10AFC832         (          msf.asm):00409                    sty   msp.prev,u
018D EFA830           (          msf.asm):00410                    stu   msp.next,y
0190 109F7C           (          msf.asm):00411         open1      sty   <D.MSF
0193 1F23             (          msf.asm):00412                    tfr   Y,U
0195 9E88             (          msf.asm):00413                    LDX   <D.PthDBT
0197 103F30           (          msf.asm):00414                    OS9   F$All64        get 64 bytes of storage
019A 25D4             (          msf.asm):00415                    bcs   findf91        ..return error
019C 1E23             (          msf.asm):00416                    exg   Y,U
019E EFA834           (          msf.asm):00417                    stu   msp.dir,y      place to store directory entry
01A1 4F               (          msf.asm):00418                    clra
01A2 5F               (          msf.asm):00419                    clrb
01A3 EDC82A           (          msf.asm):00420                    std   dir.msd+msd.strt,u mark file as root directory
01A6 EDC82E           (          msf.asm):00421                    std   dir.msd+msd.size+2,u
01A9 9E50             (          msf.asm):00422                    ldx   <D.Proc        point to user process
01AB E606             (          msf.asm):00423                    ldb   P$Task,x       get DAT task number
01AD AE26             (          msf.asm):00424                    ldx   PD.RGS,y       point to stacked parameters
01AF AE06             (          msf.asm):00425                    ldx   R$X,x          point to file name
01B1 3434             (          msf.asm):00426                    pshs  b,x,y          save registers
01B3 327C             (          msf.asm):00427                    leas  -4,s           save temporary space
01B5 6F61             (          msf.asm):00428                    clr   1,s            directory mode
01B7 6C61             (          msf.asm):00429                    inc   1,s
01B9 103F49           (          msf.asm):00430                    OS9   F$LDABX        get first character of path list
01BC A7E4             (          msf.asm):00431                    sta   ,s
01BE 812F             (          msf.asm):00432                    cmpa  #'/            complete path list?
01C0 277C             (          msf.asm):00433                    beq   findf1         ..yes
01C2 8140             (          msf.asm):00434                    cmpa  #'@            entire disk?
01C4 102700A8         (          msf.asm):00435                    lbeq  findf201       ..yes
01C8 8D43             (          msf.asm):00436                    bsr   getrdy         get ready to access disk
01CA 10250110         (          msf.asm):00437                    lbcs  findf24
01CE 170121           (          msf.asm):00438                    lbsr  setdir         select current default directory
01D1 10250109         (          msf.asm):00439                    lbcs  findf24        ..return error
01D5 E664             (          msf.asm):00440                    ldb   4,s            recover task number
01D7 A6E4             (          msf.asm):00441                    lda   ,s
01D9 16008A           (          msf.asm):00442                    lbra  findf20
                      (          msf.asm):00443         
                      (          msf.asm):00444         * Read the FAT if required
                      (          msf.asm):00445         * return:
                      (          msf.asm):00446         *   carry set and error in B
                      (          msf.asm):00447         *   NE if buffer already set up
01DC 3450             (          msf.asm):00448         getFAT     pshs  x,u
                      (          msf.asm):00449         *** rev 2.3
01DE EE23             (          msf.asm):00450                    ldu   PD.DEV,y
01E0 EE42             (          msf.asm):00451                    ldu   V$STAT,u       point to static storage
01E2 6D44             (          msf.asm):00452         getFAT0    tst   V.BUSY,u       is driver busy?
01E4 2708             (          msf.asm):00453                    beq   getFAT1        ..no
01E6 8E0001           (          msf.asm):00454                    ldx   #1
01E9 103F0A           (          msf.asm):00455                    OS9   F$SLEEP        sleep until ready
01EC 20F4             (          msf.asm):00456                    bra   getFAT0
01EE                  (          msf.asm):00457         getFAT1
                      (          msf.asm):00458         ***
01EE EEA814           (          msf.asm):00459                    ldu   msp.dtb,y
01F1 5F               (          msf.asm):00460                    clrb                 clear carry
01F2 ECC824           (          msf.asm):00461                    ldd   V.FAT,u        has FAT been read?
01F5 2605             (          msf.asm):00462                    bne   open012        ..yes
01F7 170A6F           (          msf.asm):00463         open01     lbsr  readFAT        read the file allocation table
01FA 250F             (          msf.asm):00464                    bcs   open013
01FC EC28             (          msf.asm):00465         open012    ldd   PD.BUF,y       is buffer already allocated?
01FE 260B             (          msf.asm):00466                    bne   open013        ..yes
0200 17FF5F           (          msf.asm):00467                    lbsr  secsiz         get sector size
0203 103F28           (          msf.asm):00468                    os9   F$SRQMEM       request memory
0206 2503             (          msf.asm):00469                    bcs   open013        ..return error
0208 EF28             (          msf.asm):00470                    stu   PD.BUF,y
020A 5F               (          msf.asm):00471                    clrb
020B 35D0             (          msf.asm):00472         open013    puls  x,u,pc
                      (          msf.asm):00473         
                      (          msf.asm):00474         * read the file allocation table if needed
                      (          msf.asm):00475         *  and setup the root directory
020D 8DCD             (          msf.asm):00476         getrdy     bsr   getFAT
020F 252C             (          msf.asm):00477                    bcs   getrdy9
0211 17FF19           (          msf.asm):00478                    lbsr  rootdat        get root information
0214 170125           (          msf.asm):00479                    lbsr  setsec
0217 EEA834           (          msf.asm):00480                    ldu   msp.dir,y
021A 3410             (          msf.asm):00481                    pshs  x
021C AEA814           (          msf.asm):00482                    ldx   msp.dtb,y
021F AE8820           (          msf.asm):00483                    ldx   V.BPB,x        point to info
0222 EC07             (          msf.asm):00484                    ldd   ID.RDE,x       get root directory entries
0224 3510             (          msf.asm):00485                    puls  x
0226 1E89             (          msf.asm):00486                    exg   a,b
0228 58               (          msf.asm):00487                    lslb
0229 49               (          msf.asm):00488                    rola
022A 58               (          msf.asm):00489                    lslb
022B 49               (          msf.asm):00490                    rola
022C 58               (          msf.asm):00491                    lslb
022D 49               (          msf.asm):00492                    rola                 root directory entries * 16
022E 1E89             (          msf.asm):00493                    exg   a,b
0230 EDC82C           (          msf.asm):00494                    std   dir.msd+msd.size,u set size of root directory (bytes)
0233 C610             (          msf.asm):00495                    ldb   #attr.DR
0235 E7C81B           (          msf.asm):00496                    stb   dir.msd+msd.attr,u set directory attribute
0238 CC0001           (          msf.asm):00497                    ldd   #1
023B ED2C             (          msf.asm):00498                    std   msp.pos+1,y
023D 39               (          msf.asm):00499         getrdy9    rts
                      (          msf.asm):00500         
023E 3420             (          msf.asm):00501         findf1     pshs  y
0240 103F10           (          msf.asm):00502                    OS9   F$PrsNam       skip device name
0243 1F21             (          msf.asm):00503                    tfr   y,x
0245 3520             (          msf.asm):00504                    puls  y
0247 847F             (          msf.asm):00505                    anda  #$7f
0249 812F             (          msf.asm):00506                    cmpa  #'/
024B 270C             (          msf.asm):00507                    beq   findf19
024D 8140             (          msf.asm):00508                    cmpa  #'@            is it entire disk?
024F 271F             (          msf.asm):00509                    beq   findf201       ..yes
0251 8DBA             (          msf.asm):00510                    bsr   getrdy         get ready for directory search
0253 10250087         (          msf.asm):00511                    lbcs  findf24        ..report error
0257 2051             (          msf.asm):00512                    bra   findf23        5 ..end of path list
0259 8DB2             (          msf.asm):00513         findf19    bsr   getrdy         get ready for directory search
025B 1025007F         (          msf.asm):00514                    lbcs  findf24        ..report error
025F E664             (          msf.asm):00515                    ldb   4,s            recover task number
0261 3001             (          msf.asm):00516         findf2     leax  1,x            point to next character
0263 103F49           (          msf.asm):00517                    OS9   F$LDABX        get next character
0266 847F             (          msf.asm):00518         findf20    anda  #$7f           remove terminator bit
0268 812E             (          msf.asm):00519                    cmpa  #'.            subdirectory?
026A 2710             (          msf.asm):00520                    beq   findf21        ..yes
026C 8140             (          msf.asm):00521                    cmpa  #'@            entire disk
026E 2677             (          msf.asm):00522                    bne   findf26        ..no
0270 1700FD           (          msf.asm):00523         findf201   lbsr  setdisk        open entire disk
0273 3001             (          msf.asm):00524                    leax  1,x
0275 6F61             (          msf.asm):00525                    clr   1,s            ..not directory
0277 6CA816           (          msf.asm):00526                    inc   msp.wrt,y      don't allow writing to this file
027A 202E             (          msf.asm):00527                    bra   findf23
027C 3001             (          msf.asm):00528         findf21    leax  1,x
027E 103F49           (          msf.asm):00529                    OS9   F$LDABX        get next char
0281 A7E4             (          msf.asm):00530                    sta   ,s
0283 847F             (          msf.asm):00531                    anda  #$7f
0285 8140             (          msf.asm):00532                    cmpa  #'@            entire disk?
0287 27E7             (          msf.asm):00533                    beq   findf201       ..yes
0289 812E             (          msf.asm):00534                    cmpa  #'.            parent directory?
028B 2609             (          msf.asm):00535                    bne   findf22        ..no
028D 1700F0           (          msf.asm):00536                    lbsr  setparnt
0290 254C             (          msf.asm):00537                    bcs   findf24        ..report error
0292 E664             (          msf.asm):00538                    ldb   4,s            restore task number
0294 20E6             (          msf.asm):00539                    bra   findf21        check for more
0296 6D61             (          msf.asm):00540         findf22    tst   1,s            directory mode?
0298 2704             (          msf.asm):00541                    beq   findf225       ..no
029A 812F             (          msf.asm):00542                    cmpa  #'/            end of name?
029C 27C3             (          msf.asm):00543                    beq   findf2         ..yes check next name in list
029E 6DE4             (          msf.asm):00544         findf225   tst   ,s             is name terminated?
02A0 2B08             (          msf.asm):00545                    bmi   findf23        ..yes
02A2 8120             (          msf.asm):00546                    cmpa  #SP            space?
02A4 2304             (          msf.asm):00547                    bls   findf23        ..yes, or control
02A6 812C             (          msf.asm):00548                    cmpa  #',            comma?
02A8 2638             (          msf.asm):00549                    bne   findf25        ..no
02AA 3420             (          msf.asm):00550         findf23    pshs  y
02AC 103F10           (          msf.asm):00551                    OS9   F$PrsNam       skip trailing spaces and comma
02AF 1F21             (          msf.asm):00552                    tfr   y,x
02B1 3520             (          msf.asm):00553                    puls  y
02B3 EE26             (          msf.asm):00554         findf235   ldu   PD.RGS,y       point to register stack
02B5 AF46             (          msf.asm):00555                    stx   R$X,u          update pointer past path list
02B7 5F               (          msf.asm):00556                    clrb                 clear carry
02B8 E661             (          msf.asm):00557                    ldb   1,s            return NE if pathlist is directory
02BA 2709             (          msf.asm):00558                    beq   findf237       ..not directory
02BC E621             (          msf.asm):00559                    ldb   PD.MOD,Y       get mode
02BE 2A15             (          msf.asm):00560                    bpl   NoPerm         ..no permission to open directory
02C0 6CA816           (          msf.asm):00561         findf236   inc   msp.wrt,y      don't allow writing to file
02C3 2019             (          msf.asm):00562                    bra   Findf24
                      (          msf.asm):00563         
02C5 AEA834           (          msf.asm):00564         findf237   ldx   msp.dir,y
02C8 A6881B           (          msf.asm):00565                    lda   dir.msd+msd.attr,x get file attribute
02CB 8401             (          msf.asm):00566                    anda  #attr.RO       read only?
02CD 270B             (          msf.asm):00567                    beq   findf238       ..no
02CF A621             (          msf.asm):00568                    lda   PD.MOD,Y
02D1 8402             (          msf.asm):00569                    anda  #WRITE.        are we opening for write?
02D3 2705             (          msf.asm):00570                    beq   findf238       ..no, we have permission
02D5 53               (          msf.asm):00571         NoPerm     comb
02D6 C6D6             (          msf.asm):00572                    ldb   #E$FNA         ..no permission
02D8 2004             (          msf.asm):00573                    bra   findf24
02DA A621             (          msf.asm):00574         findf238   lda   PD.MOD,y       directory?
02DC 2BF7             (          msf.asm):00575                    bmi   NoPerm         ..yes, wrong mode
02DE 3267             (          msf.asm):00576         findf24    leas  7,s            fix stack
02E0 35A0             (          msf.asm):00577                    puls  y,pc
                      (          msf.asm):00578         
02E2 53               (          msf.asm):00579         findf25    comb                 set carry
02E3 C6D7             (          msf.asm):00580                    ldb   #E$BPNam       bad path name
02E5 20F7             (          msf.asm):00581                    bra   findf24
                      (          msf.asm):00582         
                      (          msf.asm):00583         * search directory for file name at X
02E7 1700C2           (          msf.asm):00584         findf26    lbsr  findname       look for the name in current directory
02EA EDE4             (          msf.asm):00585                    std   ,s
02EC 25F0             (          msf.asm):00586                    bcs   findf24        ..report error
02EE E664             (          msf.asm):00587                    ldb   4,s            get task number
02F0 20A4             (          msf.asm):00588                    bra   findf22        check next section of path list
                      (          msf.asm):00589         
                      (          msf.asm):00590         * set current directory
02F2 3450             (          msf.asm):00591         setdir     pshs  x,u
02F4 9E50             (          msf.asm):00592                    ldx   <D.Proc        point to user process
02F6 EE8823           (          msf.asm):00593                    ldu   P$DIO+3,x      get default directory location
02F9 A621             (          msf.asm):00594                    lda   PD.MOD,y       get access mode
02FB 8404             (          msf.asm):00595                    anda  #EXEC.         is it execution directory?
02FD 2703             (          msf.asm):00596                    beq   setdir2        ..no
02FF EE8829           (          msf.asm):00597                    ldu   P$DIO+9,x      get default execution directory
0302 1F30             (          msf.asm):00598         setdir2    tfr   u,d
0304 170041           (          msf.asm):00599                    lbsr  setcls         set current directory
0307 AEA834           (          msf.asm):00600                    ldx   msp.dir,y
030A EF0E             (          msf.asm):00601                    stu   dir.prnt,x     save parent start cluster
030C 11830001         (          msf.asm):00602                    cmpu  #1             ROOT or entire disk?
0310 230D             (          msf.asm):00603                    bls   setdir3        ..yes
0312 1708F0           (          msf.asm):00604                    lbsr  readsec        read the sector
0315 2523             (          msf.asm):00605                    bcs   setdir9
0317 4F               (          msf.asm):00606                    clra
0318 5F               (          msf.asm):00607                    clrb
0319 ED2C             (          msf.asm):00608                    std   msp.pos+1,y    point to "." directory entry
031B AE28             (          msf.asm):00609                    ldx   PD.BUF,y       point to parent directory entry
031D 207C             (          msf.asm):00610                    bra   copydir1       copy directory entry to buffer
                      (          msf.asm):00611         
031F CC0001           (          msf.asm):00612         setdir3    ldd   #1
0322 ED2C             (          msf.asm):00613                    std   msp.pos+1,y    make position unique
0324 1F30             (          msf.asm):00614                    tfr   u,d
0326 1E89             (          msf.asm):00615                    exg   a,b
0328 EEA834           (          msf.asm):00616                    ldu   msp.dir,y
032B EDC82A           (          msf.asm):00617                    std   dir.msd+msd.strt,u
032E 2705             (          msf.asm):00618                    beq   setdir4        ..ROOT
0330 CE0000           (          msf.asm):00619                    ldu   #0
0333 2003             (          msf.asm):00620                    bra   setdir7
                      (          msf.asm):00621         *
0335 17FDF5           (          msf.asm):00622         setdir4    lbsr  rootdat
0338 8D02             (          msf.asm):00623         setdir7    bsr   setsec
033A 35D0             (          msf.asm):00624         setdir9    puls  x,u,pc
                      (          msf.asm):00625         
033C 11A3A83C         (          msf.asm):00626         setsec     cmpu  msp.sec,y      same sector?
0340 2705             (          msf.asm):00627                    beq   setsec9
0342 EFA83C           (          msf.asm):00628                    stu   msp.sec,y
0345 6F2A             (          msf.asm):00629                    clr   msp.sest,y     ..sector buffer is not sector U
0347 39               (          msf.asm):00630         setsec9    rts
                      (          msf.asm):00631         
0348 6DA83E           (          msf.asm):00632         setcls     tst   msp.clss,y
034B 2708             (          msf.asm):00633                    beq   setcls0
034D EDA83A           (          msf.asm):00634                    std   msp.cls,y
0350 6FA83E           (          msf.asm):00635         setcls00   clr   msp.clss,y
0353 2009             (          msf.asm):00636                    bra   setcls2
0355 10A3A83A         (          msf.asm):00637         setcls0    cmpd  msp.cls,y      has cluster changed?
0359 27EC             (          msf.asm):00638                    beq   setsec9        ..no
035B EDA83A           (          msf.asm):00639                    std   msp.cls,y
035E 3406             (          msf.asm):00640         setcls2    pshs  d
0360 E62A             (          msf.asm):00641                    ldb   msp.sest,y
0362 C4FE             (          msf.asm):00642                    andb  #^SECGOOD
0364 CA08             (          msf.asm):00643                    orb   #SECBUF
0366 E72A             (          msf.asm):00644                    stb   msp.sest,y     msp.sec is OK but msp.cls is not
0368 3586             (          msf.asm):00645         setcls9    puls  d,pc
                      (          msf.asm):00646         
036A 6DA83E           (          msf.asm):00647         clss0      tst   msp.clss,y
036D 26E1             (          msf.asm):00648                    bne   setcls00
036F 39               (          msf.asm):00649                    rts
                      (          msf.asm):00650         
                      (          msf.asm):00651         * make entry for entire disk
0370 3450             (          msf.asm):00652         setdisk    pshs  x,u
0372 AEA834           (          msf.asm):00653                    ldx   msp.dir,y
                      (          msf.asm):00654         *??????????????????
0375 CC0002           (          msf.asm):00655                    ldd   #2
0378 ED882C           (          msf.asm):00656                    std   dir.msd+msd.size,x
037B CE0001           (          msf.asm):00657                    ldu   #1             .. if start cluster is 1 then entire disk is open
037E 2082             (          msf.asm):00658                    bra   setdir2
                      (          msf.asm):00659         
                      (          msf.asm):00660         * make parent the current directory
0380 3450             (          msf.asm):00661         setparnt   pshs  x,u
0382 5F               (          msf.asm):00662                    clrb                 clear carry
0383 EEA83A           (          msf.asm):00663                    ldu   msp.cls,y      is there a current directory?
0386 27B2             (          msf.asm):00664                    beq   setdir9        ..no, its root
0388 17087A           (          msf.asm):00665                    lbsr  readsec
038B 25AD             (          msf.asm):00666                    bcs   setdir9        ..error
038D EE28             (          msf.asm):00667                    ldu   PD.BUF,y       point to current directory
038F ECC83A           (          msf.asm):00668                    ldd   MSDSIZE+msd.strt,u get parent cluster
0392 1E89             (          msf.asm):00669                    exg   a,b
0394 1F03             (          msf.asm):00670                    tfr   d,u
0396 16FF69           (          msf.asm):00671                    lbra  setdir2
                      (          msf.asm):00672         
0399 3450             (          msf.asm):00673         copydir    pshs  x,u
039B EEA834           (          msf.asm):00674         copydir1   ldu   msp.dir,y      point to directory buffer
039E 33C810           (          msf.asm):00675                    leau  dir.msd,u
03A1 C620             (          msf.asm):00676                    ldb   #MSDSIZE
03A3 A680             (          msf.asm):00677         copydir5   lda   ,x+
03A5 A7C0             (          msf.asm):00678                    sta   ,u+
03A7 5A               (          msf.asm):00679                    decb
03A8 26F9             (          msf.asm):00680                    bne   copydir5
03AA 35D0             (          msf.asm):00681                    puls  x,u,pc
                      (          msf.asm):00682         
                      (          msf.asm):00683         *******************************************************
                      (          msf.asm):00684         * find file with name at X in current directory
                      (          msf.asm):00685         * on entry:
                      (          msf.asm):00686         *        B=DAT task number of file name
                      (          msf.asm):00687         *
                      (          msf.asm):00688         * return A=last character of name
                      (          msf.asm):00689         *        B=mode(NE=directory) or error if carry set
                      (          msf.asm):00690         *        X points to last character
03AC 3476             (          msf.asm):00691         findname   pshs  d,x,y,u
03AE EEA834           (          msf.asm):00692                    ldu   msp.dir,y
03B1 4F               (          msf.asm):00693                    clra
03B2 5F               (          msf.asm):00694                    clrb
03B3 E72B             (          msf.asm):00695                    stb   msp.pos,y
03B5 ED2C             (          msf.asm):00696                    std   msp.pos+1,y    start of directory
03B7 ED4A             (          msf.asm):00697                    std   dir.esec,u
03B9 ED4C             (          msf.asm):00698                    std   dir.eoff,u     ..entry not found
03BB ECA83A           (          msf.asm):00699                    ldd   msp.cls,y      get current cluster number (of subdirectory)
03BE ED4E             (          msf.asm):00700                    std   dir.prnt,u     save it (for use by makdir)
03C0 33C810           (          msf.asm):00701                    leau  dir.msd,u      point to place for file name
03C3 3440             (          msf.asm):00702                    pshs  u
03C5 1F31             (          msf.asm):00703                    tfr   u,x
03C7 17058B           (          msf.asm):00704                    lbsr  clrname        clear the directory entry
03CA AE64             (          msf.asm):00705                    ldx   4,s
03CC E663             (          msf.asm):00706                    ldb   3,s            task number
03CE 1700AA           (          msf.asm):00707                    lbsr  movename
03D1 1027009F         (          msf.asm):00708                    lbeq  findnerr
03D5 A762             (          msf.asm):00709                    sta   2,s            this will be the character returned
03D7 AF64             (          msf.asm):00710                    stx   4,s            return value of X
03D9 3436             (          msf.asm):00711                    pshs  d,x,y
03DB 170726           (          msf.asm):00712                    lbsr  readit         read the first sector in directory
03DE 1025008B         (          msf.asm):00713                    lbcs  findn70        ..error
03E2 17FD7D           (          msf.asm):00714         findn52    lbsr  secsiz         get sector size
03E5 44               (          msf.asm):00715                    lsra
03E6 56               (          msf.asm):00716                    rorb
03E7 44               (          msf.asm):00717                    lsra
03E8 56               (          msf.asm):00718                    rorb
03E9 44               (          msf.asm):00719                    lsra
03EA 56               (          msf.asm):00720                    rorb
03EB 44               (          msf.asm):00721                    lsra
03EC 56               (          msf.asm):00722                    rorb
03ED 44               (          msf.asm):00723                    lsra
03EE 56               (          msf.asm):00724                    rorb                 number of directory entries per sector
03EF E7E4             (          msf.asm):00725                    stb   ,s
03F1 AE28             (          msf.asm):00726                    ldx   PD.BUF,Y       point to directory buffer
03F3 EE66             (          msf.asm):00727         findn55    ldu   6,s            point to file name
03F5 AF64             (          msf.asm):00728                    stx   4,s
03F7 C60B             (          msf.asm):00729                    ldb   #11            number of bytes to compare
                      (          msf.asm):00730         * this section of code is used to save values
                      (          msf.asm):00731         * for the CREATE process
03F9 A684             (          msf.asm):00732                    lda   ,x             get first char of directory entry
03FB 2704             (          msf.asm):00733                    beq   findn57
03FD 81E5             (          msf.asm):00734                    cmpa  #$E5           unused entry?
03FF 2620             (          msf.asm):00735                    bne   findn6         ..no
0401 3402             (          msf.asm):00736         findn57    pshs  a
0403 AEA834           (          msf.asm):00737                    ldx   msp.dir,y
0406 EC0A             (          msf.asm):00738                    ldd   dir.esec,x     unused entry already found?
0408 2611             (          msf.asm):00739                    bne   findn58        ..yes, ignore it
040A ECA83C           (          msf.asm):00740                    ldd   msp.sec,y      get current sector number
040D ED0A             (          msf.asm):00741                    std   dir.esec,x
040F 17FD50           (          msf.asm):00742                    lbsr  secsiz         get sector size
0412 830001           (          msf.asm):00743                    subd  #1
0415 A42C             (          msf.asm):00744                    anda  msp.pos+1,y    get position
0417 E42D             (          msf.asm):00745                    andb  msp.pos+2,y    get offset in sector
0419 ED0C             (          msf.asm):00746                    std   dir.eoff,x
041B A6E0             (          msf.asm):00747         findn58    lda   ,s+
041D 2631             (          msf.asm):00748                    bne   findn7
041F 204A             (          msf.asm):00749                    bra   findnNF        ..file not found
                      (          msf.asm):00750         
0421 A6C0             (          msf.asm):00751         findn6     lda   ,u+
0423 A180             (          msf.asm):00752                    cmpa  ,x+
0425 2629             (          msf.asm):00753                    bne   findn7         ..no match
0427 5A               (          msf.asm):00754                    decb
0428 26F7             (          msf.asm):00755                    bne   findn6         ..compare more
                      (          msf.asm):00756         * match found
042A 17FD35           (          msf.asm):00757                    lbsr  secsiz         get sector size
042D 830001           (          msf.asm):00758                    subd  #1
0430 A42C             (          msf.asm):00759                    anda  msp.pos+1,y    get position
0432 E42D             (          msf.asm):00760                    andb  msp.pos+2,y
0434 ED2C             (          msf.asm):00761                    std   msp.pos+1,y
0436 AE64             (          msf.asm):00762                    ldx   4,s            point to directory entry
0438 17FF5E           (          msf.asm):00763                    lbsr  copydir        copy directory entry
043B A60B             (          msf.asm):00764                    lda   msd.attr,x     get attribute
043D 8410             (          msf.asm):00765                    anda  #attr.DR       is it directory?
043F A769             (          msf.asm):00766                    sta   9,s
0441 2708             (          msf.asm):00767                    beq   findn67        ..no
0443 EC881A           (          msf.asm):00768                    ldd   msd.strt,x
0446 1E89             (          msf.asm):00769                    exg   a,b
0448 17FEFD           (          msf.asm):00770                    lbsr  setcls         set cluster number
044B 3268             (          msf.asm):00771         findn67    leas  8,s            fix stack
044D 5F               (          msf.asm):00772                    clrb                 clear carry
044E 35F6             (          msf.asm):00773                    puls  d,x,y,u,pc
                      (          msf.asm):00774         
0450 EC2C             (          msf.asm):00775         findn7     ldd   msp.pos+1,y
0452 C30020           (          msf.asm):00776                    addd  #MSDSIZE
0455 ED2C             (          msf.asm):00777                    std   msp.pos+1,y    update directory entry position
0457 AE64             (          msf.asm):00778                    ldx   4,s
0459 308820           (          msf.asm):00779                    leax  MSDSIZE,x
045C 6AE4             (          msf.asm):00780                    dec   ,s             end of sector?
045E 2693             (          msf.asm):00781                    bne   findn55        ..no
0460 1706BF           (          msf.asm):00782         findn72    lbsr  readnxt        read the next sector
0463 1024FF7B         (          msf.asm):00783                    lbcc  findn52
0467 C1D3             (          msf.asm):00784                    cmpb  #E$EOF         end of file?
0469 2602             (          msf.asm):00785                    bne   findn70        ..no report error
046B C6D8             (          msf.asm):00786         findnNF    ldb   #E$PNNF        path name not found
046D 43               (          msf.asm):00787         findn70    coma                 set carry
046E A668             (          msf.asm):00788                    lda   8,s            return last character read so CREATE can tell if name terminated OK.
0470 326A             (          msf.asm):00789                    leas  10,s           fix stack
0472 35F0             (          msf.asm):00790                    puls  x,y,u,pc
                      (          msf.asm):00791         
0474 53               (          msf.asm):00792         findnerr   comb
0475 C6D7             (          msf.asm):00793                    ldb   #E$BPNam       bad path name
0477 3264             (          msf.asm):00794                    leas  4,s
0479 35F0             (          msf.asm):00795                    puls  x,y,u,pc
                      (          msf.asm):00796         
                      (          msf.asm):00797         
                      (          msf.asm):00798         *******************************
                      (          msf.asm):00799         * B is DAT task #
                      (          msf.asm):00800         * X points to file name
                      (          msf.asm):00801         * U point to destination
                      (          msf.asm):00802         *
                      (          msf.asm):00803         * On exit:
                      (          msf.asm):00804         *  A is last character of name or first non-name character
                      (          msf.asm):00805         *  B is number of bytes in name
                      (          msf.asm):00806         
047B 3446             (          msf.asm):00807         movename   pshs  d,u
047D 860B             (          msf.asm):00808                    lda   #11
047F A761             (          msf.asm):00809                    sta   1,s
0481 103F49           (          msf.asm):00810         findn2     OS9   F$LDABX        get character
0484 3001             (          msf.asm):00811                    leax  1,x
0486 A7E4             (          msf.asm):00812                    sta   ,s
0488 8D59             (          msf.asm):00813                    bsr   validc         check for valid file character
048A 2728             (          msf.asm):00814                    beq   findn5
048C 812E             (          msf.asm):00815                    cmpa  #'.            start of extension?
048E 2618             (          msf.asm):00816                    bne   findn4         ..no
0490 A661             (          msf.asm):00817                    lda   1,s
0492 810B             (          msf.asm):00818                    cmpa  #11            first character?
0494 271E             (          msf.asm):00819                    beq   findn5         ..yes, illegal
0496 EE62             (          msf.asm):00820                    ldu   2,s
0498 3348             (          msf.asm):00821                    leau  8,u            point to start of extension
049A 8603             (          msf.asm):00822                    lda   #3
049C A761             (          msf.asm):00823                    sta   1,s
049E 8620             (          msf.asm):00824                    lda   #SP
04A0 A7C4             (          msf.asm):00825                    sta   ,u
04A2 A741             (          msf.asm):00826                    sta   1,u
04A4 A742             (          msf.asm):00827                    sta   2,u
04A6 20D9             (          msf.asm):00828                    bra   findn2         get next character
04A8 6D61             (          msf.asm):00829         findn4     tst   1,s
04AA 2704             (          msf.asm):00830                    beq   findn45        ..past end of name
04AC A7C0             (          msf.asm):00831                    sta   ,u+
04AE 6A61             (          msf.asm):00832                    dec   1,s
04B0 A6E4             (          msf.asm):00833         findn45    lda   ,s
04B2 2ACD             (          msf.asm):00834                    bpl   findn2
04B4 301F             (          msf.asm):00835         findn5     leax  -1,x
04B6 3546             (          msf.asm):00836                    puls  d,u
04B8 3416             (          msf.asm):00837                    pshs  d,x
04BA 308C71           (          msf.asm):00838                    leax  <resrvd,pcr    point to reserved names
04BD 5F               (          msf.asm):00839         findn.3    clrb
04BE A680             (          msf.asm):00840         findn.5    lda   ,x+
04C0 2714             (          msf.asm):00841                    beq   findn.9
04C2 847F             (          msf.asm):00842                    anda  #$7F
04C4 A1C5             (          msf.asm):00843                    cmpa  b,u
04C6 2613             (          msf.asm):00844                    bne   findn.7
04C8 5C               (          msf.asm):00845                    incb
04C9 A61F             (          msf.asm):00846                    lda   -1,x           end of name?
04CB 2AF1             (          msf.asm):00847                    bpl   findn.5        ..no, check remainder of name
04CD A6C5             (          msf.asm):00848                    lda   b,u
04CF 8120             (          msf.asm):00849                    cmpa  #SP            end of file name?
04D1 26EA             (          msf.asm):00850                    bne   findn.3        ..no match
04D3 5F               (          msf.asm):00851                    clrb
04D4 3596             (          msf.asm):00852                    puls  d,x,pc         signal error in file name
04D6 3516             (          msf.asm):00853         findn.9    puls  d,x
04D8 C10B             (          msf.asm):00854                    cmpb  #11            no good characters in name?
04DA 39               (          msf.asm):00855                    rts
04DB 301F             (          msf.asm):00856         findn.7    leax  -1,x
04DD A680             (          msf.asm):00857         findn.8    lda   ,x+
04DF 2AFC             (          msf.asm):00858                    bpl   findn.8
04E1 20DA             (          msf.asm):00859                    bra   findn.3
                      (          msf.asm):00860         
04E3 847F             (          msf.asm):00861         validc     anda  #$7f           mask hi bit
04E5 8161             (          msf.asm):00862                    cmpa  #'a
04E7 2506             (          msf.asm):00863                    blo   findn3
04E9 817A             (          msf.asm):00864                    cmpa  #'z
04EB 2202             (          msf.asm):00865                    bhi   findn3
04ED 845F             (          msf.asm):00866                    anda  #$5f
04EF 8121             (          msf.asm):00867         findn3     cmpa  #'!
04F1 2739             (          msf.asm):00868                    beq   findnyes
04F3 8123             (          msf.asm):00869                    cmpa  #'#
04F5 2534             (          msf.asm):00870                    blo   findnno
04F7 8129             (          msf.asm):00871                    cmpa  #')
04F9 2331             (          msf.asm):00872                    bls   findnyes
04FB 8127             (          msf.asm):00873                    cmpa  #''
04FD 272D             (          msf.asm):00874                    beq   findnyes
04FF 812D             (          msf.asm):00875                    cmpa  #'-
0501 2729             (          msf.asm):00876                    beq   findnyes
0503 812E             (          msf.asm):00877                    cmpa  #'.            start of extension?
0505 2725             (          msf.asm):00878                    beq   findnyes
0507 8130             (          msf.asm):00879                    cmpa  #'0
0509 2520             (          msf.asm):00880                    blo   findnno
050B 8139             (          msf.asm):00881                    cmpa  #'9
050D 231D             (          msf.asm):00882                    bls   findnyes
050F 8140             (          msf.asm):00883                    cmpa  #'@
0511 2518             (          msf.asm):00884                    blo   findnno
0513 815A             (          msf.asm):00885                    cmpa  #'Z
0515 2315             (          msf.asm):00886                    bls   findnyes
0517 815E             (          msf.asm):00887                    cmpa  #'^
0519 2510             (          msf.asm):00888                    blo   findnno
051B 8160             (          msf.asm):00889                    cmpa  #'`
051D 230D             (          msf.asm):00890                    bls   findnyes
051F 817B             (          msf.asm):00891                    cmpa  #'{
0521 2709             (          msf.asm):00892                    beq   findnyes
0523 817D             (          msf.asm):00893                    cmpa  #'}
0525 2705             (          msf.asm):00894                    beq   findnyes
0527 817E             (          msf.asm):00895                    cmpa  #'~
0529 2701             (          msf.asm):00896                    beq   findnyes
052B 4F               (          msf.asm):00897         findnno    clra
052C 4D               (          msf.asm):00898         findnyes   tsta
052D 39               (          msf.asm):00899                    rts
                      (          msf.asm):00900         
052E                  (          msf.asm):00901         resrvd
052E 4155D8           (          msf.asm):00902                    fcs   "AUX"
0531 434F4DB1         (          msf.asm):00903                    fcs   "COM1"
0535 434F4DB2         (          msf.asm):00904                    fcs   "COM2"
0539 434FCE           (          msf.asm):00905                    fcs   "CON"
053C 4C5054B1         (          msf.asm):00906                    fcs   "LPT1"
0540 4C5054B2         (          msf.asm):00907                    fcs   "LPT2"
0544 4C5054B3         (          msf.asm):00908                    fcs   "LPT3"
0548 4E55CC           (          msf.asm):00909                    fcs   "NUL"
054B 5052CE           (          msf.asm):00910                    fcs   "PRN"
054E 00               (          msf.asm):00911                    fcb   0
                      (          msf.asm):00912         
                      (          msf.asm):00913         *************************************************
                      (          msf.asm):00914         * Subroutine: DirFull
                      (          msf.asm):00915         *
                      (          msf.asm):00916         * funtion - try to expand the directory
                      (          msf.asm):00917         *
                      (          msf.asm):00918         * On entry:
                      (          msf.asm):00919         *  Y points to path descriptor
                      (          msf.asm):00920         *
                      (          msf.asm):00921         * On exit:
                      (          msf.asm):00922         *  Carry set and error code in B if error
                      (          msf.asm):00923         *  D offset to directory entry in sector buffer
                      (          msf.asm):00924         *  X address of sector buffer
                      (          msf.asm):00925         *  U sector number of sector at X
                      (          msf.asm):00926         
054F ECA83A           (          msf.asm):00927         DirFull    ldd   msp.cls,y      is this root directory?
0552 2604             (          msf.asm):00928                    bne   dirfull1       ..no
0554 53               (          msf.asm):00929         dirfull0   comb                 set carry
0555 C6D9             (          msf.asm):00930                    ldb   #E$SLF         segment (directory) list full
0557 39               (          msf.asm):00931         dirfret    rts                  ..return error
0558 17FB02           (          msf.asm):00932         dirfull1   lbsr  expchn         add cluster to file
055B 25FA             (          msf.asm):00933                    bcs   dirfret        ..error
                      (          msf.asm):00934         * another entry point (MAKDIR)
055D 17FDE8           (          msf.asm):00935         DirFull9   lbsr  setcls         save number of new cluster
0560 1706ED           (          msf.asm):00936                    lbsr  cluslog        convert to logical sector number
0563 1F03             (          msf.asm):00937                    tfr   d,u
0565 3440             (          msf.asm):00938                    pshs  u
0567 AE28             (          msf.asm):00939                    ldx   PD.BUF,y       point to sector buffer
0569 17FBF6           (          msf.asm):00940                    lbsr  secsiz         get sector size
056C 830020           (          msf.asm):00941                    subd  #MSDSIZE
056F 6F8B             (          msf.asm):00942         dirfull2   clr   d,x            clear the first byte of each directory entry
0571 830020           (          msf.asm):00943                    subd  #MSDSIZE
0574 2AF9             (          msf.asm):00944                    bpl   dirfull2
0576 AE28             (          msf.asm):00945                    ldx   PD.BUF,y
0578 17FBDB           (          msf.asm):00946                    lbsr  sepecl         get sectors per cluster
057B 4A               (          msf.asm):00947                    deca                 only one?
057C 270E             (          msf.asm):00948                    beq   dirfull3       ..yes
057E 3402             (          msf.asm):00949         dirf25     pshs  a
0580 3341             (          msf.asm):00950                    leau  1,u
0582 170963           (          msf.asm):00951                    lbsr  dwritel        write second sector of cluster
0585 3502             (          msf.asm):00952                    puls  a
0587 2505             (          msf.asm):00953                    bcs   dirfull4       ..error
0589 4A               (          msf.asm):00954                    deca
058A 26F2             (          msf.asm):00955                    bne   dirf25
058C 4F               (          msf.asm):00956         dirfull3   clra                 return offset to unused directory entry (first)
058D 5F               (          msf.asm):00957                    clrb
058E 35C0             (          msf.asm):00958         dirfull4   puls  u,pc
                      (          msf.asm):00959         
                      (          msf.asm):00960         *************************************************
                      (          msf.asm):00961         * Subroutine: create1
                      (          msf.asm):00962         *
                      (          msf.asm):00963         * funtion - make sure file can be created
                      (          msf.asm):00964         *
                      (          msf.asm):00965         * On entry:
                      (          msf.asm):00966         *  Y points to path descriptor
                      (          msf.asm):00967         *  U points to caller's register stack
                      (          msf.asm):00968         *
                      (          msf.asm):00969         * On exit:
                      (          msf.asm):00970         *  Carry set and error code in B if error
                      (          msf.asm):00971         *  D offset to directory entry in sector buffer
                      (          msf.asm):00972         *  X address of sector buffer
                      (          msf.asm):00973         *  U sector number of sector at X
                      (          msf.asm):00974         
0590 17FBDE           (          msf.asm):00975         create1    lbsr  findfile       find the file
0593 2504             (          msf.asm):00976                    bcs   create2        ..can't OPEN file
0595 C6DA             (          msf.asm):00977         create10   ldb   #E$CEF         ..file already exists
0597 2008             (          msf.asm):00978                    bra   create25       ..report error
0599 C1D8             (          msf.asm):00979         create2    cmpb  #E$PNNF        file not found?
059B 2706             (          msf.asm):00980                    beq   create3        ..yes, create it
059D C1D6             (          msf.asm):00981                    cmpb  #E$FNA
059F 27F4             (          msf.asm):00982                    beq   create10
05A1 43               (          msf.asm):00983         create25   coma                 set carry
05A2 39               (          msf.asm):00984                    rts
05A3 4D               (          msf.asm):00985         create3    tsta                 is file name hi bit terminated?
05A4 2B13             (          msf.asm):00986                    bmi   create5        ..yes
05A6 8120             (          msf.asm):00987                    cmpa  #SP            space or control?
05A8 2306             (          msf.asm):00988                    bls   create4        ..yes
05AA C6D7             (          msf.asm):00989                    ldb   #E$BPNam
05AC 812C             (          msf.asm):00990                    cmpa  #',            comma?
05AE 26F1             (          msf.asm):00991                    bne   create25       ..report bad path name error
05B0 3420             (          msf.asm):00992         create4    pshs  y
05B2 103F10           (          msf.asm):00993                    OS9   F$PrsNam       skip trailing junk
05B5 1F21             (          msf.asm):00994                    tfr   y,x
05B7 3520             (          msf.asm):00995                    puls  y
05B9 EE26             (          msf.asm):00996         create5    ldu   PD.RGS,y       point to stacked registers
05BB AF46             (          msf.asm):00997                    stx   R$X,u          return X pointing past name
05BD AEA834           (          msf.asm):00998                    ldx   msp.dir,y
05C0 4F               (          msf.asm):00999                    clra                 file can be read or written
05C1 E642             (          msf.asm):01000                    ldb   R$B,u          get file permissions
05C3 C512             (          msf.asm):01001                    bitb  #WRITE.+PWRIT. create for write?
05C5 2602             (          msf.asm):01002                    bne   create52       ..yes
05C7 8601             (          msf.asm):01003                    lda   #attr.RO       file is read only
05C9 C580             (          msf.asm):01004         create52   bitb  #DIR.          is is subdirectory
05CB 2702             (          msf.asm):01005                    beq   create53       ..no
05CD 8A10             (          msf.asm):01006                    ora   #attr.DR
05CF A7881B           (          msf.asm):01007         create53   sta   dir.msd+msd.attr,x file access mode
05D2 4F               (          msf.asm):01008                    clra
05D3 5F               (          msf.asm):01009                    clrb
05D4 ED882C           (          msf.asm):01010                    std   dir.msd+msd.size,x
05D7 ED882E           (          msf.asm):01011                    std   dir.msd+msd.size+2,x set file size to 0
                      (          msf.asm):01012         *** I'm not sure if MSDOS does it this way
05DA CCFF0F           (          msf.asm):01013                    ldd   #$FF0F         end of file mark
05DD ED882A           (          msf.asm):01014                    std   dir.msd+msd.strt,x ..no clusters in file yet
                      (          msf.asm):01015         ***
05E0 170973           (          msf.asm):01016                    lbsr  setdate        copy date and time to dir entry
05E3 EEA834           (          msf.asm):01017                    ldu   msp.dir,y
05E6 AE28             (          msf.asm):01018                    ldx   PD.BUF,y
05E8 EC4C             (          msf.asm):01019                    ldd   dir.eoff,u     get offset to entry in sector
05EA ED2C             (          msf.asm):01020                    std   msp.pos+1,y
05EC EE4A             (          msf.asm):01021                    ldu   dir.esec,u     get sector number
05EE 2610             (          msf.asm):01022                    bne   create58       ..there is room in directory
05F0 17FF5C           (          msf.asm):01023                    lbsr  DirFull        .. directory full, expand if possible
05F3 25AC             (          msf.asm):01024                    bcs   create25       ..return error
05F5 3456             (          msf.asm):01025                    pshs  d,x,u          save pointer to directory entry, buffer and sector #
05F7 1F30             (          msf.asm):01026                    tfr   u,d
05F9 EEA834           (          msf.asm):01027                    ldu   msp.dir,y
05FC ED4A             (          msf.asm):01028                    std   dir.esec,u     update directory sector number
05FE 200E             (          msf.asm):01029                    bra   create59
0600 170804           (          msf.asm):01030         create58   lbsr  dreadl         read directory sector
0603 259C             (          msf.asm):01031                    bcs   create25       .. report error
0605 EC2C             (          msf.asm):01032                    ldd   msp.pos+1,y    recover offset
0607 3456             (          msf.asm):01033                    pshs  d,x,u
0609 308B             (          msf.asm):01034                    leax  d,x            point to start of entry
060B EEA834           (          msf.asm):01035                    ldu   msp.dir,y
060E 33C810           (          msf.asm):01036         create59   leau  dir.msd,u      point to directory info
0611 C60C             (          msf.asm):01037                    ldb   #msd.res
0613 6FC5             (          msf.asm):01038         clrres     clr   b,u            clear the reserved bytes in the directory
0615 5C               (          msf.asm):01039                    incb
0616 C116             (          msf.asm):01040                    cmpb  #msd.time
0618 25F9             (          msf.asm):01041                    blo   clrres
061A C61C             (          msf.asm):01042                    ldb   #msd.size
061C 6FC5             (          msf.asm):01043         clrsize    clr   b,u
061E 5C               (          msf.asm):01044                    incb
061F C120             (          msf.asm):01045                    cmpb  #MSDSIZE
0621 25F9             (          msf.asm):01046                    blo   clrsize
0623 A6C0             (          msf.asm):01047         create6    lda   ,u+
0625 A780             (          msf.asm):01048                    sta   ,x+            copy entry into sector
0627 5A               (          msf.asm):01049                    decb
0628 26F9             (          msf.asm):01050                    bne   create6
062A 35D6             (          msf.asm):01051                    puls  d,x,u,pc
                      (          msf.asm):01052         
                      (          msf.asm):01053         
                      (          msf.asm):01054         *************************************************
                      (          msf.asm):01055         * Subroutine: create
                      (          msf.asm):01056         *
                      (          msf.asm):01057         * funtion - create file (initialize path descriptor)
                      (          msf.asm):01058         *
                      (          msf.asm):01059         * On entry:
                      (          msf.asm):01060         *  Y points to path descriptor
                      (          msf.asm):01061         *  U points to caller's register stack
                      (          msf.asm):01062         *
                      (          msf.asm):01063         * On exit:
                      (          msf.asm):01064         *  Carry set and error code in B if error
                      (          msf.asm):01065         
062C 3450             (          msf.asm):01066         create     pshs  x,u
062E A642             (          msf.asm):01067                    lda   R$B,u
0630 847F             (          msf.asm):01068                    anda  #^DIR.         can't create a directory
0632 A742             (          msf.asm):01069                    sta   R$B,u
                      (          msf.asm):01070         *** rev 2.3
                      (          msf.asm):01071         * lda PD.CPR,y
                      (          msf.asm):01072         * sta msp.ncpr,y
                      (          msf.asm):01073         ***
0634 17FF59           (          msf.asm):01074                    lbsr  create1
0637 250D             (          msf.asm):01075                    bcs   open10         ..return error
                      (          msf.asm):01076         *** rev 2.3
                      (          msf.asm):01077         * clr msp.ncpr,y ..so driver will be freed after write
                      (          msf.asm):01078         ***
0639 1708AC           (          msf.asm):01079                    lbsr  dwritel        update the directory
063C 170232           (          msf.asm):01080                    lbsr  lockeof        get control of end of file lock
063F 2005             (          msf.asm):01081                    bra   open10
                      (          msf.asm):01082         
                      (          msf.asm):01083         
                      (          msf.asm):01084         *************************************************
                      (          msf.asm):01085         * Subroutine: open
                      (          msf.asm):01086         *
                      (          msf.asm):01087         * funtion - open file (initialize path descriptor)
                      (          msf.asm):01088         *
                      (          msf.asm):01089         * On entry:
                      (          msf.asm):01090         *  Y points to path descriptor
                      (          msf.asm):01091         *  U points to caller's register stack
                      (          msf.asm):01092         *
                      (          msf.asm):01093         * On exit:
                      (          msf.asm):01094         *  Carry set and error code in B if error
                      (          msf.asm):01095         
0641 3450             (          msf.asm):01096         open       pshs  x,u
0643 17FB2B           (          msf.asm):01097                    lbsr  findfile       try to find the file
0646 2572             (          msf.asm):01098         open10     bcs   openerr
                      (          msf.asm):01099         * check if file is already open
0648 1F21             (          msf.asm):01100                    tfr   y,x
064A AE8830           (          msf.asm):01101         open11     ldx   msp.next,x
064D 2731             (          msf.asm):01102                    beq   open2          ..end of files reached with no match
064F EC8836           (          msf.asm):01103                    ldd   msp.dnxt,x     is it last path to file
0652 26F6             (          msf.asm):01104                    bne   open11         ..no, check next one
0654 EE8834           (          msf.asm):01105                    ldu   msp.dir,x      point to directory info
0657 E6A821           (          msf.asm):01106                    ldb   PD.DRV,y
065A E109             (          msf.asm):01107                    cmpb  dir.drv,x      is it on same drive?
065C 26EC             (          msf.asm):01108                    bne   open11         ..no
065E ECA83C           (          msf.asm):01109                    ldd   msp.sec,y
0661 10A345           (          msf.asm):01110                    cmpd  dir.loc,u      same sector?
0664 26E4             (          msf.asm):01111                    bne   open11         ..no
0666 EC2C             (          msf.asm):01112                    ldd   msp.pos+1,y
0668 10A347           (          msf.asm):01113                    cmpd  dir.pos,u      same entry?
066B 26DD             (          msf.asm):01114                    bne   open11         ..no
                      (          msf.asm):01115         * path to same file has been found
066D A621             (          msf.asm):01116                    lda   PD.MOD,y       get access mode
066F 8540             (          msf.asm):01117                    bita  #SHARE.        non-sharable?
0671 2644             (          msf.asm):01118                    bne   FileBusy       ..yes, busy
0673 A6B834           (          msf.asm):01119                    lda   [msp.dir,y]    get block number
0676 9E88             (          msf.asm):01120                    ldx   <D.PthDBT
0678 103F31           (          msf.asm):01121                    os9   F$Ret64        return the directory entry to the system
067B EFA834           (          msf.asm):01122                    stu   msp.dir,y      point to matching entry
067E 2011             (          msf.asm):01123                    bra   open6
0680 EEA834           (          msf.asm):01124         open2      ldu   msp.dir,y      point to directory info
0683 E6A821           (          msf.asm):01125                    ldb   PD.DRV,y       get drive number
0686 E749             (          msf.asm):01126                    stb   dir.drv,u
0688 ECA83C           (          msf.asm):01127                    ldd   msp.sec,y
068B ED45             (          msf.asm):01128                    std   dir.loc,u      save sector number containing directory
068D EC2C             (          msf.asm):01129                    ldd   msp.pos+1,y    get current position
068F ED47             (          msf.asm):01130                    std   dir.pos,u
0691 AE43             (          msf.asm):01131         open6      ldx   dir.last,u     point to previous path to same file
0693 2707             (          msf.asm):01132                    beq   open7          ..only one path to this file
0695 10AF8838         (          msf.asm):01133                    sty   msp.dprv,x
0699 AFA836           (          msf.asm):01134                    stx   msp.dnxt,y
069C 10AF43           (          msf.asm):01135         open7      sty   dir.last,u     point to last path open to this file
069F ECC82A           (          msf.asm):01136                    ldd   dir.msd+msd.strt,u get starting cluster #
06A2 1E89             (          msf.asm):01137                    exg   a,b
06A4 17FCA1           (          msf.asm):01138                    lbsr  setcls         set cluster number
06A7 4F               (          msf.asm):01139                    clra
06A8 5F               (          msf.asm):01140                    clrb
06A9 ED2B             (          msf.asm):01141                    std   msp.pos,y      we are at beginning of file
06AB E72D             (          msf.asm):01142                    stb   msp.pos+2,y
06AD EDA811           (          msf.asm):01143                    std   msp.lksz,y     no part of file is locked
06B0 E7A812           (          msf.asm):01144                    stb   msp.lksz+1,y
06B3 6F2A             (          msf.asm):01145                    clr   msp.sest,y     sector buffer is invalid (and clear carry)
06B5 35D0             (          msf.asm):01146                    puls  x,u,pc 
                      (          msf.asm):01147         
06B7 53               (          msf.asm):01148         FileBusy   comb
06B8 C6FD             (          msf.asm):01149                    ldb   #E$Share       non-sharable file is busy
06BA 3550             (          msf.asm):01150         openerr    puls  x,u
06BC 16034B           (          msf.asm):01151                    lbra  closef         go return buffers etc.
                      (          msf.asm):01152         
                      (          msf.asm):01153         
                      (          msf.asm):01154         *************************************************
                      (          msf.asm):01155         * Subroutine: chkeof
                      (          msf.asm):01156         *
                      (          msf.asm):01157         * function - make sure read will not go past end of file
                      (          msf.asm):01158         *
                      (          msf.asm):01159         * On entry:
                      (          msf.asm):01160         *  Y points to path descriptor
                      (          msf.asm):01161         *  U points to stacked registers
                      (          msf.asm):01162         *
                      (          msf.asm):01163         * On exit:
                      (          msf.asm):01164         *  D number of bytes to read
                      (          msf.asm):01165         *  Carry set and error in B if error
                      (          msf.asm):01166         
06BF EC48             (          msf.asm):01167         chkeof     ldd   R$Y,u          get number of bytes wanted
06C1 3456             (          msf.asm):01168                    pshs  d,x,u
                      (          msf.asm):01169         * if read length is greater than what is left in file
                      (          msf.asm):01170         *  then make length the remaining size of file
06C3 EEA834           (          msf.asm):01171                    ldu   msp.dir,y      point to directory entry info
06C6 ECC82C           (          msf.asm):01172                    ldd   dir.msd+msd.size,u get least significant part of file size
06C9 1E89             (          msf.asm):01173                    exg   a,b            convert to Motorola format
06CB A32C             (          msf.asm):01174                    subd  msp.pos+1,y
06CD 3406             (          msf.asm):01175                    pshs  d
06CF E6C81B           (          msf.asm):01176                    ldb   dir.msd+msd.attr,u get file attribute
06D2 C410             (          msf.asm):01177                    andb  #attr.DR       is it subdirectory?
06D4 2618             (          msf.asm):01178                    bne   read08         ..yes
06D6 ECC82E           (          msf.asm):01179                    ldd   dir.msd+msd.size+2,u get most significant word of file size
06D9 8200             (          msf.asm):01180                    sbca  #0
06DB 2514             (          msf.asm):01181                    bcs   readerr        ..read past end of file
06DD A02B             (          msf.asm):01182                    suba  msp.pos,y
06DF 2510             (          msf.asm):01183                    bcs   readerr        ..read past end of file
06E1 260B             (          msf.asm):01184                    bne   read08         ..more than 2^16 bytes left in file
06E3 ECE4             (          msf.asm):01185                    ldd   ,s
06E5 270A             (          msf.asm):01186                    beq   readerr        ..its end of file
06E7 10A362           (          msf.asm):01187                    cmpd  2,s            will we read past end of file?
06EA 2402             (          msf.asm):01188                    bhs   read08         ..no
06EC ED62             (          msf.asm):01189                    std   2,s            ..yes, don't read past end of file
                      (          msf.asm):01190         *
06EE                  (          msf.asm):01191         read08
                      (          msf.asm):01192         ***
                      (          msf.asm):01193         * lbsr readit make sure the buffer is good
                      (          msf.asm):01194         * bcc reader2
                      (          msf.asm):01195         * bra reader1
                      (          msf.asm):01196         ***
06EE 5F               (          msf.asm):01197                    clrb
06EF 2005             (          msf.asm):01198                    bra   reader2
                      (          msf.asm):01199         *
06F1 C6D3             (          msf.asm):01200         readerr    ldb   #E$EOF
06F3 E763             (          msf.asm):01201         reader1    stb   3,s
06F5 53               (          msf.asm):01202                    comb
06F6 3262             (          msf.asm):01203         reader2    leas  2,s
06F8 35D6             (          msf.asm):01204                    puls  d,x,u,pc
                      (          msf.asm):01205         
                      (          msf.asm):01206         
                      (          msf.asm):01207         *************************************************
                      (          msf.asm):01208         * Subroutine: read
                      (          msf.asm):01209         *
                      (          msf.asm):01210         * function - read data from the open file
                      (          msf.asm):01211         *
                      (          msf.asm):01212         * On entry:
                      (          msf.asm):01213         *  Y point to path descriptor
                      (          msf.asm):01214         *  U point to stacked registers X=address to read to
                      (          msf.asm):01215         *                               Y=number of bytes
                      (          msf.asm):01216         *
                      (          msf.asm):01217         * On exit:
                      (          msf.asm):01218         *  stacked register Y is number of bytes read
                      (          msf.asm):01219         *  Carry set and error in B if error
                      (          msf.asm):01220         
06FA 4F               (          msf.asm):01221         read       clra
06FB 200A             (          msf.asm):01222                    bra   read0
                      (          msf.asm):01223         *
06FD EDA811           (          msf.asm):01224         read98     std   msp.lksz,y
0700 E7A813           (          msf.asm):01225                    stb   msp.lksz+2,y
0703 3582             (          msf.asm):01226         read99     puls  a,pc           return with error
                      (          msf.asm):01227         
                      (          msf.asm):01228         
                      (          msf.asm):01229         *************************************************
                      (          msf.asm):01230         * Subroutine: readln
                      (          msf.asm):01231         *
                      (          msf.asm):01232         * function - read a line from the open file
                      (          msf.asm):01233         *
                      (          msf.asm):01234         * On entry:
                      (          msf.asm):01235         *  Y point to path descriptor
                      (          msf.asm):01236         *  U points to stacked registers X=address to read to
                      (          msf.asm):01237         *                                Y=number of bytes
                      (          msf.asm):01238         *
                      (          msf.asm):01239         * On exit:
                      (          msf.asm):01240         *  stacked register Y = number of bytes read
                      (          msf.asm):01241         *  Carry set and error in B if error
                      (          msf.asm):01242         
0705 860D             (          msf.asm):01243         readln     lda   #EOL
0707 3402             (          msf.asm):01244         read0      pshs  a
0709 EC48             (          msf.asm):01245         read01     ldd   R$Y,u
070B 27F0             (          msf.asm):01246                    beq   read98
070D 8DB0             (          msf.asm):01247                    bsr   chkeof
070F 25F2             (          msf.asm):01248                    bcs   read99
                      (          msf.asm):01249         ***
                      (          msf.asm):01250         * bsr chklck check for record lock
                      (          msf.asm):01251         * bcs read99 report error
                      (          msf.asm):01252         * beq read01 ..yes, try again
                      (          msf.asm):01253         ***
0711 AE46             (          msf.asm):01254                    ldx   R$X,u          get destination address
0713 3416             (          msf.asm):01255                    pshs  d,x
0715 4F               (          msf.asm):01256                    clra
0716 5F               (          msf.asm):01257                    clrb
0717 3416             (          msf.asm):01258                    pshs  d,x
0719 9E50             (          msf.asm):01259                    ldx   <D.Proc
071B E606             (          msf.asm):01260                    ldb   P$Task,x       get task number
071D 3404             (          msf.asm):01261                    pshs  b
071F 17FABA           (          msf.asm):01262                    lbsr  getFAT         read the FAT and set up sector buffer if needed
0722 1025008A         (          msf.asm):01263                    lbcs  read9          ..error
0726 EE28             (          msf.asm):01264         readln0    ldu   PD.BUF,y       point to buffer
0728 17FA37           (          msf.asm):01265                    lbsr  secsiz         get sector size
072B 30CB             (          msf.asm):01266                    leax  d,u            point to end of buffer
072D 830001           (          msf.asm):01267                    subd  #1
0730 A42C             (          msf.asm):01268                    anda  msp.pos+1,y    get position
0732 E42D             (          msf.asm):01269                    andb  msp.pos+2,y
0734 33CB             (          msf.asm):01270                    leau  d,u            point to start of data
0736 AF63             (          msf.asm):01271                    stx   3,s
0738 AE67             (          msf.asm):01272                    ldx   7,s
073A EC61             (          msf.asm):01273         readln1    ldd   1,s
073C 10A365           (          msf.asm):01274                    cmpd  5,s
073F 273B             (          msf.asm):01275                    beq   read2
0741 C30001           (          msf.asm):01276                    addd  #1             incriment byte count
0744 ED61             (          msf.asm):01277                    std   1,s
0746 E62A             (          msf.asm):01278                    ldb   msp.sest,y
0748 C501             (          msf.asm):01279                    bitb  #SECGOOD       is current sector good?
074A 2605             (          msf.asm):01280                    bne   readln12       ..yes
074C 1703B5           (          msf.asm):01281                    lbsr  readit         ..no, read the correct one
074F 255F             (          msf.asm):01282                    bcs   read9
0751 E6E4             (          msf.asm):01283         readln12   ldb   ,s
0753 A6C0             (          msf.asm):01284                    lda   ,u+            get a byte
0755 103F4A           (          msf.asm):01285                    OS9   F$STABX
0758 3001             (          msf.asm):01286                    leax  1,x
075A 11A363           (          msf.asm):01287                    cmpu  3,s            was last byte read the last in the sector?
075D 260A             (          msf.asm):01288                    bne   read25         ..no
075F EE28             (          msf.asm):01289                    ldu   PD.BUF,y
0761 C602             (          msf.asm):01290                    ldb   #SECREAD
0763 EA2A             (          msf.asm):01291                    orb   msp.sest,y
0765 C4FE             (          msf.asm):01292                    andb  #^SECGOOD
0767 E72A             (          msf.asm):01293                    stb   msp.sest,y     ..yes, sector is now completely read
0769 6D69             (          msf.asm):01294         read25     tst   9,s            EOL char?
076B 27CD             (          msf.asm):01295                    beq   readln1        ..no
076D A169             (          msf.asm):01296                    cmpa  9,s            is it end of line?
076F 270B             (          msf.asm):01297                    beq   read2          ..yes
0771 811A             (          msf.asm):01298                    cmpa  #MSDEOF        end of text file?
0773 26C5             (          msf.asm):01299                    bne   readln1        ..no
0775 EC61             (          msf.asm):01300         read15     ldd   1,s
0777 830001           (          msf.asm):01301                    subd  #1
077A ED61             (          msf.asm):01302                    std   1,s
077C E621             (          msf.asm):01303         read2      ldb   PD.MOD,y       get file access mode
077E C512             (          msf.asm):01304                    bitb  #WRITE.+PWRIT. is file open for write?
0780 2716             (          msf.asm):01305                    beq   read26         ..no, don't lock the record
0782 EC2B             (          msf.asm):01306                    ldd   msp.pos,y
0784 ED2E             (          msf.asm):01307                    std   msp.lolk,y
0786 E62D             (          msf.asm):01308                    ldb   msp.pos+2,y
0788 E7A810           (          msf.asm):01309                    stb   msp.lolk+2,y   update start of file lock
078B EE26             (          msf.asm):01310                    ldu   PD.RGS,y
078D EC48             (          msf.asm):01311                    ldd   R$Y,u
078F 6FA811           (          msf.asm):01312                    clr   msp.lksz,y
0792 EDA812           (          msf.asm):01313                    std   msp.lksz+1,y   update the lock size
0795 1700EF           (          msf.asm):01314                    lbsr  unlock         unlock waiting procs
0798 EC61             (          msf.asm):01315         read26     ldd   1,s
079A E32C             (          msf.asm):01316                    addd  msp.pos+1,y
079C ED2C             (          msf.asm):01317                    std   msp.pos+1,y
079E 8600             (          msf.asm):01318                    lda   #0
07A0 A92B             (          msf.asm):01319                    adca  msp.pos,y
07A2 A72B             (          msf.asm):01320                    sta   msp.pos,y      update file position
07A4 5F               (          msf.asm):01321                    clrb                 clear carry
07A5 EC61             (          msf.asm):01322                    ldd   1,s            get byte read count
07A7 EE26             (          msf.asm):01323                    ldu   PD.RGS,y
07A9 ED48             (          msf.asm):01324                    std   R$Y,u
07AB 2603             (          msf.asm):01325                    bne   read9
07AD 53               (          msf.asm):01326                    comb
07AE C6D3             (          msf.asm):01327                    ldb   #E$EOF         return end of file error
07B0 326A             (          msf.asm):01328         read9      leas  10,s
07B2 39               (          msf.asm):01329                    rts                  return with carry set and error in B
                      (          msf.asm):01330         *
                      (          msf.asm):01331         
                      (          msf.asm):01332                    ifeq  1
                      (          msf.asm):01333         
                      (          msf.asm):01334         *************************************************
                      (          msf.asm):01335         * Subroutine: chklck
                      (          msf.asm):01336         *
                      (          msf.asm):01337         * function - check if current position is locked
                      (          msf.asm):01338         *  if it is, sleep until it is free
                      (          msf.asm):01339         *  return error if deadlock or signal
                      (          msf.asm):01340         *
                      (          msf.asm):01341         * On entry:
                      (          msf.asm):01342         *  D is current offset (plus 1) from msp.pos,y
                      (          msf.asm):01343         *  Y points to path descriptor
                      (          msf.asm):01344         *
                      (          msf.asm):01345         * On exit:
                      (          msf.asm):01346         *  Carry set and error in B if error
                      (          msf.asm):01347         
07B3                  (          msf.asm):01348         chklck     pshs  x,y,u
                      (          msf.asm):01349                    ldu   msp.dir,y
07B3                  (          msf.asm):01350         chklck0    ldx   dir.last,u     point to last path to this file
07B3                  (          msf.asm):01351         chklck1    cmpx  2,s            is it current path?
                      (          msf.asm):01352                    beq   chklck8        ..yes, ignore it
                      (          msf.asm):01353                    ldd   msp.lksz,x
                      (          msf.asm):01354                    bne   chklck2
                      (          msf.asm):01355                    tst   msp.lksz+2,x
                      (          msf.asm):01356                    beq   chklck8        ..path has no lock
07B3                  (          msf.asm):01357         chklck2
                      (          msf.asm):01358         * check if path is locked
                      (          msf.asm):01359         
                      (          msf.asm):01360         * b?? chklck8 ..no
                      (          msf.asm):01361         * check if deadlock
                      (          msf.asm):01362                    lda   msp.LID,x      get lock process waiting ID
                      (          msf.asm):01363                    cmpa  msp.ID,y       is it waiting for current process?
                      (          msf.asm):01364                    bne   chklck5        ..no
                      (          msf.asm):01365                    ldb   #E$DeadLk      ..yes, report deadlock
                      (          msf.asm):01366                    bra   chklck7
                      (          msf.asm):01367         * make sure driver is not reserved
07B3                  (          msf.asm):01368         chklck5    lbsr  reldrvr
                      (          msf.asm):01369         * sleep
                      (          msf.asm):01370                    lda   msp.ID,x       get ID of process we are waiting for
                      (          msf.asm):01371                    sta   msp.LID,y
                      (          msf.asm):01372                    lda   msp.ID,y
                      (          msf.asm):01373                    sta   msp.WID,y      mark path as waiting
                      (          msf.asm):01374                    ldx   #0
                      (          msf.asm):01375                    OS9   F$SLEEP        sleep until signalled
                      (          msf.asm):01376                    pshs  b,cc
                      (          msf.asm):01377         * remove path from locked list
                      (          msf.asm):01378                    clr   msp.WID,y      mark path as not waiting
                      (          msf.asm):01379                    clr   msp.LID,y
                      (          msf.asm):01380                    puls  b,cc
                      (          msf.asm):01381                    bcs   chklck9        ..return error
                      (          msf.asm):01382                    ldx   <D.Proc
                      (          msf.asm):01383                    ldb   P$Signal,x     was process signalled?
                      (          msf.asm):01384                    beq   chklck0        ..no, check for other locks
07B3                  (          msf.asm):01385         chklck7    coma                 return signal which was received
                      (          msf.asm):01386                    puls  x,y,u,pc
                      (          msf.asm):01387         
07B3                  (          msf.asm):01388         chklck8    ldx   msp.dprv,x     point to previous file
                      (          msf.asm):01389                    bne   chklck1
                      (          msf.asm):01390                    clrb
07B3                  (          msf.asm):01391         chklck9    puls  x,y,u,pc
                      (          msf.asm):01392         
                      (          msf.asm):01393                    endc
                      (          msf.asm):01394         
                      (          msf.asm):01395         
                      (          msf.asm):01396         *************************************************
                      (          msf.asm):01397         * Subroutine: write
                      (          msf.asm):01398         *
                      (          msf.asm):01399         * function - write data to the current position of the file
                      (          msf.asm):01400         *
                      (          msf.asm):01401         * On entry:
                      (          msf.asm):01402         *  Y points to path descriptor
                      (          msf.asm):01403         *  X point to data to write
                      (          msf.asm):01404         *  D is the number of bytes to write
                      (          msf.asm):01405         *
                      (          msf.asm):01406         * On exit:
                      (          msf.asm):01407         *  D is number of bytes written
                      (          msf.asm):01408         *  Carry set and error in B if error
                      (          msf.asm):01409         
07B3 4F               (          msf.asm):01410         write      clra                 ..no end of line character
07B4 2002             (          msf.asm):01411                    bra   write0
                      (          msf.asm):01412         
                      (          msf.asm):01413         
                      (          msf.asm):01414         *************************************************
                      (          msf.asm):01415         * Subroutine: writeln
                      (          msf.asm):01416         *
                      (          msf.asm):01417         * function - write data up to count or first EOL
                      (          msf.asm):01418         *  to the current position of the file
                      (          msf.asm):01419         *
                      (          msf.asm):01420         * On entry:
                      (          msf.asm):01421         *  Y points to path descriptor
                      (          msf.asm):01422         *  U points to stacked register X=address of data
                      (          msf.asm):01423         *                               Y=number of bytes
                      (          msf.asm):01424         *
                      (          msf.asm):01425         * On exit:
                      (          msf.asm):01426         *  stacked register Y is number of bytes written
                      (          msf.asm):01427         *  Carry set and error in B if error
                      (          msf.asm):01428         
07B6 860D             (          msf.asm):01429         writeln    lda   #EOL
07B8 E6A816           (          msf.asm):01430         write0     ldb   msp.wrt,y      can we write?
07BB 2704             (          msf.asm):01431                    beq   writln00       ..yes
07BD 53               (          msf.asm):01432         FNA        comb
07BE C6D6             (          msf.asm):01433                    ldb   #E$FNA         file is not accessible
07C0 39               (          msf.asm):01434                    rts
07C1 3402             (          msf.asm):01435         writln00   pshs  a              save EOL character
07C3 AE46             (          msf.asm):01436                    ldx   R$X,u          point to data
07C5 EC48             (          msf.asm):01437                    ldd   R$Y,u          get size of data
07C7 1027FF32         (          msf.asm):01438                    lbeq  read98
07CB 3456             (          msf.asm):01439                    pshs  d,x,u
07CD EE28             (          msf.asm):01440                    ldu   PD.BUF,y       point to buffer
07CF 17F990           (          msf.asm):01441                    lbsr  secsiz         get sector size
07D2 30CB             (          msf.asm):01442                    leax  d,u            point to end of buffer
07D4 830001           (          msf.asm):01443                    subd  #1
07D7 A42C             (          msf.asm):01444                    anda  msp.pos+1,y    get position
07D9 E42D             (          msf.asm):01445                    andb  msp.pos+2,y
07DB 33CB             (          msf.asm):01446                    leau  d,u            point to start of data
07DD 4F               (          msf.asm):01447                    clra
07DE 5F               (          msf.asm):01448                    clrb
07DF 3416             (          msf.asm):01449                    pshs  d,x
07E1 9E50             (          msf.asm):01450                    ldx   <D.Proc
07E3 E606             (          msf.asm):01451                    ldb   P$Task,x       get task number
07E5 3404             (          msf.asm):01452                    pshs  b
                      (          msf.asm):01453         ***
                      (          msf.asm):01454         * bsr chklck check if record is locked
                      (          msf.asm):01455         * bcs write9
                      (          msf.asm):01456         ***
07E7 AE67             (          msf.asm):01457                    ldx   7,s
07E9 EC61             (          msf.asm):01458         writln1    ldd   1,s
07EB 10A365           (          msf.asm):01459                    cmpd  5,s
07EE 2730             (          msf.asm):01460                    beq   write2
07F0 C30001           (          msf.asm):01461                    addd  #1             incriment byte count
07F3 ED61             (          msf.asm):01462                    std   1,s
07F5 E62A             (          msf.asm):01463                    ldb   msp.sest,y
07F7 C501             (          msf.asm):01464                    bitb  #SECGOOD
07F9 2607             (          msf.asm):01465                    bne   write12        ..yes
07FB 17008A           (          msf.asm):01466                    lbsr  seekwr         get ready to write
07FE 1025006C         (          msf.asm):01467                    lbcs  write9
0802 E6E4             (          msf.asm):01468         write12    ldb   ,s             get task number
0804 103F49           (          msf.asm):01469                    OS9   F$LDABX        get byte
0807 3001             (          msf.asm):01470                    leax  1,x
0809 A7C0             (          msf.asm):01471                    sta   ,u+
080B C605             (          msf.asm):01472                    ldb   #SECUPD+SECGOOD sector is valid and needs update
080D 11A363           (          msf.asm):01473                    cmpu  3,s            is it end of sector?
0810 2604             (          msf.asm):01474                    bne   writln15
0812 EE28             (          msf.asm):01475                    ldu   PD.BUF,y
0814 C606             (          msf.asm):01476                    ldb   #SECUPD+SECREAD sector needs update and next one
0816 E72A             (          msf.asm):01477         writln15   stb   msp.sest,y     set sector status
0818 6D6B             (          msf.asm):01478                    tst   11,s           EOL char?
081A 27CD             (          msf.asm):01479                    beq   writln1        ..no
081C A16B             (          msf.asm):01480                    cmpa  11,s           end of line?
081E 26C9             (          msf.asm):01481                    bne   writln1        ..no
0820 4F               (          msf.asm):01482         write2     clra
0821 5F               (          msf.asm):01483                    clrb
0822 E7A811           (          msf.asm):01484                    stb   msp.lksz,y
0825 EDA812           (          msf.asm):01485                    std   msp.lksz+1,y   no part of file is locked after write
0828 EC61             (          msf.asm):01486                    ldd   1,s
082A E32C             (          msf.asm):01487                    addd  msp.pos+1,y
082C ED2C             (          msf.asm):01488                    std   msp.pos+1,y
082E 8600             (          msf.asm):01489                    lda   #0
0830 A92B             (          msf.asm):01490                    adca  msp.pos,y
0832 A72B             (          msf.asm):01491                    sta   msp.pos,y      update file position
                      (          msf.asm):01492         * update file size if position is greater than current size
0834 AEA834           (          msf.asm):01493         write3     ldx   msp.dir,y
0837 A602             (          msf.asm):01494                    lda   dir.chg,x
0839 8A20             (          msf.asm):01495                    ora   #attr.AR       set archive bit
083B A702             (          msf.asm):01496                    sta   dir.chg,x
083D E6881B           (          msf.asm):01497                    ldb   dir.msd+msd.attr,x get attribute
0840 C510             (          msf.asm):01498                    bitb  #attr.DR       sub-directory?
0842 2613             (          msf.asm):01499                    bne   write35        ..yes, don't update size
0844 EC882E           (          msf.asm):01500                    ldd   dir.msd+msd.size+2,x get most significant file size
0847 A12B             (          msf.asm):01501                    cmpa  msp.pos,y
0849 250C             (          msf.asm):01502                    blo   write35        ..position is past end of file
084B 2218             (          msf.asm):01503                    bhi   write36        ..position is not past end of file
084D EC882C           (          msf.asm):01504                    ldd   dir.msd+msd.size,x get least sig file size
0850 1E89             (          msf.asm):01505                    exg   a,b
0852 10A32C           (          msf.asm):01506                    cmpd  msp.pos+1,y
0855 240E             (          msf.asm):01507                    bhs   write36        ..position is not past end of file
0857 EC2C             (          msf.asm):01508         write35    ldd   msp.pos+1,y
0859 1E89             (          msf.asm):01509                    exg   a,b            to INTEL format
085B ED882C           (          msf.asm):01510                    std   dir.msd+msd.size,x update least sig size
085E A62B             (          msf.asm):01511                    lda   msp.pos,y
0860 A7882E           (          msf.asm):01512                    sta   dir.msd+msd.size+2,x update most sig size
0863 8D0C             (          msf.asm):01513                    bsr   lockeof
0865 8D20             (          msf.asm):01514         write36    bsr   unlock         unlock path waiting for this one
0867 5F               (          msf.asm):01515                    clrb                 clear carry
0868 EC61             (          msf.asm):01516                    ldd   1,s            get byte read count
086A EE26             (          msf.asm):01517                    ldu   PD.RGS,y       point to registers
086C ED48             (          msf.asm):01518                    std   R$Y,u          return number of bytes written
086E 326C             (          msf.asm):01519         write9     leas  12,s
0870 39               (          msf.asm):01520                    rts                  return with carry set and error in B
                      (          msf.asm):01521         
0871 3405             (          msf.asm):01522         lockeof    pshs  b,cc
0873 EC2B             (          msf.asm):01523                    ldd   msp.pos,y
0875 ED2E             (          msf.asm):01524                    std   msp.lolk,y
0877 A62D             (          msf.asm):01525                    lda   msp.pos+2,y
0879 A7A810           (          msf.asm):01526                    sta   msp.lolk+2,y
087C 4F               (          msf.asm):01527                    clra
087D 5F               (          msf.asm):01528                    clrb
087E EDA811           (          msf.asm):01529                    std   msp.lksz,y
0881 4C               (          msf.asm):01530                    inca
0882 A7A813           (          msf.asm):01531                    sta   msp.lksz+2,y
0885 3585             (          msf.asm):01532                    puls  b,cc,pc
                      (          msf.asm):01533         
                      (          msf.asm):01534         * unlock any waiting path(s)
0887                  (          msf.asm):01535         unlock
                      (          msf.asm):01536         
                      (          msf.asm):01537                    ifeq  1
                      (          msf.asm):01538         
                      (          msf.asm):01539                    ldx   msp.dir,y      point to path which is waiting for this one
                      (          msf.asm):01540                    ldx   dir.last,x
0887                  (          msf.asm):01541         unlock2    lda   msp.WID,x      get waiting process ID
                      (          msf.asm):01542                    beq   unlock3        ..none
                      (          msf.asm):01543                    ldb   #S$Wake
                      (          msf.asm):01544                    OS9   F$SEND         wake up the waiting process
0887                  (          msf.asm):01545         unlock3    ldx   msp.dprv,x
                      (          msf.asm):01546                    bne   unlock2
                      (          msf.asm):01547         
                      (          msf.asm):01548                    endc
                      (          msf.asm):01549         
0887 39               (          msf.asm):01550                    rts
                      (          msf.asm):01551         
                      (          msf.asm):01552         *******************************************************
                      (          msf.asm):01553         * Subroutine: seekwr
                      (          msf.asm):01554         *
                      (          msf.asm):01555         * function - get ready to write to the current position
                      (          msf.asm):01556         *
                      (          msf.asm):01557         * On entry:
                      (          msf.asm):01558         *  Y points to path descriptor
                      (          msf.asm):01559         *
                      (          msf.asm):01560         * On exit:
                      (          msf.asm):01561         *  Carry set and error in B if error
                      (          msf.asm):01562         
0888 3456             (          msf.asm):01563         seekwr     pshs  d,x,u
088A E62A             (          msf.asm):01564                    ldb   msp.sest,y     get buffer status
088C C504             (          msf.asm):01565                    bitb  #SECUPD        does sector need updating?
088E 2707             (          msf.asm):01566                    beq   seekwr2        ..no
0890 17038E           (          msf.asm):01567                    lbsr  writsec        update the sector
0893 251A             (          msf.asm):01568                    bcs   seekwr99
0895 E62A             (          msf.asm):01569                    ldb   msp.sest,y
0897 C502             (          msf.asm):01570         seekwr2    bitb  #SECREAD       is next sector the one we want?
0899 2604             (          msf.asm):01571                    bne   seekwr3        ..yes
089B 8D16             (          msf.asm):01572                    bsr   expand
089D 2002             (          msf.asm):01573                    bra   seekwr4
089F 8D4E             (          msf.asm):01574         seekwr3    bsr   expnxt         get number of next sector in the file
08A1 250C             (          msf.asm):01575         seekwr4    bcs   seekwr99
08A3 17035F           (          msf.asm):01576         seekwr8    lbsr  readsec
08A6 2507             (          msf.asm):01577                    bcs   seekwr99
08A8 C601             (          msf.asm):01578                    ldb   #SECGOOD
08AA E72A             (          msf.asm):01579                    stb   msp.sest,y
08AC 5F               (          msf.asm):01580         seekwr9    clrb                 clear carry
08AD 35D6             (          msf.asm):01581                    puls  d,x,u,pc
08AF E761             (          msf.asm):01582         seekwr99   stb   1,s
08B1 35D6             (          msf.asm):01583                    puls  d,x,u,pc
                      (          msf.asm):01584         
                      (          msf.asm):01585         
                      (          msf.asm):01586         *******************************************************
                      (          msf.asm):01587         * Subroutine: expand
                      (          msf.asm):01588         *
                      (          msf.asm):01589         * function - seek to the current file position
                      (          msf.asm):01590         *  and expand file if needed
                      (          msf.asm):01591         *
                      (          msf.asm):01592         * On entry:
                      (          msf.asm):01593         *  Y point to path descriptor
                      (          msf.asm):01594         *
                      (          msf.asm):01595         * On exit:
                      (          msf.asm):01596         *  Carry set and error in B if error
                      (          msf.asm):01597         
08B3 EC2B             (          msf.asm):01598         expand     ldd   msp.pos,y
                      (          msf.asm):01599         *
                      (          msf.asm):01600         * On entry:
                      (          msf.asm):01601         *  D is position/256 to expand to
                      (          msf.asm):01602         *
08B5 3446             (          msf.asm):01603         expand0    pshs  d,u
08B7 EEA834           (          msf.asm):01604                    ldu   msp.dir,y      point to directory entry
08BA ECC82A           (          msf.asm):01605                    ldd   dir.msd+msd.strt,u get number of first cluster
08BD 1E89             (          msf.asm):01606                    exg   a,b            convert to Motorola format
08BF 17FA86           (          msf.asm):01607                    lbsr  setcls         set cluster number
08C2 10830FF8         (          msf.asm):01608                    cmpd  #$0FF8
08C6 2509             (          msf.asm):01609                    blo   expand3        ..not first cluster
08C8 8D21             (          msf.asm):01610                    bsr   expnxt0        add cluster if file is empty
08CA 251B             (          msf.asm):01611                    bcs   expand9
08CC 1E89             (          msf.asm):01612                    exg   a,b
08CE EDC82A           (          msf.asm):01613                    std   dir.msd+msd.strt,u ..first cluster
08D1 17F88E           (          msf.asm):01614         expand3    lbsr  secsiz         get sector size
08D4 1E89             (          msf.asm):01615                    exg   a,b
08D6 3406             (          msf.asm):01616                    pshs  d
08D8 EC62             (          msf.asm):01617                    ldd   2,s            get 256 byte sector count
                      (          msf.asm):01618         *!!!!!!!!!!!!!!!!!!!!!!!!!!!!
08DA A3E1             (          msf.asm):01619                    subd  ,s++           subtract pages/sector
08DC 2508             (          msf.asm):01620                    blo   expand4        ..position found
08DE EDE4             (          msf.asm):01621                    std   ,s
08E0 8D0D             (          msf.asm):01622                    bsr   expnxt         find next sector (add one if needed)
08E2 2503             (          msf.asm):01623                    bcs   expand9
08E4 20EB             (          msf.asm):01624                    bra   expand3
                      (          msf.asm):01625         
08E6 5F               (          msf.asm):01626         expand4    clrb
08E7 3262             (          msf.asm):01627         expand9    leas  2,s
08E9 35C0             (          msf.asm):01628                    puls  u,pc
                      (          msf.asm):01629         
08EB 3450             (          msf.asm):01630         expnxt0    pshs  x,u            expand from beginning of file
08ED 2005             (          msf.asm):01631                    bra   expnxt00
                      (          msf.asm):01632         
08EF 3450             (          msf.asm):01633         expnxt     pshs  x,u            seek or expand to next sector
08F1 1702DF           (          msf.asm):01634                    lbsr  seeknxt
08F4 10830FF8         (          msf.asm):01635         expnxt00   cmpd  #$FF8
08F8 2515             (          msf.asm):01636                    blo   expnxt1
08FA ECA83A           (          msf.asm):01637                    ldd   msp.cls,y      last cluster in file
08FD 17F75D           (          msf.asm):01638                    lbsr  expchn         add next used cluster to chain
0900 2512             (          msf.asm):01639                    bcs   expnxt2
0902 3406             (          msf.asm):01640                    pshs  d
0904 E62A             (          msf.asm):01641                    ldb   msp.sest,y
                      (          msf.asm):01642         
0906 CA10             (          msf.asm):01643                    orb   #SECEXP        sector is expanded, don't read it
0908 E72A             (          msf.asm):01644                    stb   msp.sest,y
090A 3506             (          msf.asm):01645                    puls  d
090C 17FA5B           (          msf.asm):01646                    lbsr  clss0          first sector in cluster
090F 17FA43           (          msf.asm):01647         expnxt1    lbsr  setcls0        set cluster number
0912 1CFE             (          msf.asm):01648                    andcc #$fe           clear carry
0914 35D0             (          msf.asm):01649         expnxt2    puls  x,u,pc
                      (          msf.asm):01650         
                      (          msf.asm):01651         
                      (          msf.asm):01652         *******************************************************
                      (          msf.asm):01653         * Subroutine: seek
                      (          msf.asm):01654         *
                      (          msf.asm):01655         * function - seek to a new position in the file
                      (          msf.asm):01656         *
                      (          msf.asm):01657         * On entry:
                      (          msf.asm):01658         *  Y points to path descriptor
                      (          msf.asm):01659         *  U points to stacked registers
                      (          msf.asm):01660         *
                      (          msf.asm):01661         * On exit:
                      (          msf.asm):01662         *  Carry set and error in B if error
                      (          msf.asm):01663         
0916 17F849           (          msf.asm):01664         seek       lbsr  secsiz         get sector size
0919 C30001           (          msf.asm):01665                    addd  #1
091C 1F89             (          msf.asm):01666                    tfr   a,b
091E E44A             (          msf.asm):01667                    andb  R$U,u
0920 3404             (          msf.asm):01668                    pshs  b
0922 A42C             (          msf.asm):01669                    anda  msp.pos+1,y
0924 A1E0             (          msf.asm):01670                    cmpa  ,s+            is seek within current sector?
0926 260E             (          msf.asm):01671                    bne   seek2          ..no, position is in different sector
0928 EC46             (          msf.asm):01672                    ldd   R$X,u          MSW
092A E12B             (          msf.asm):01673                    cmpb  msp.pos,y
092C 2608             (          msf.asm):01674                    bne   seek2          ..position is in different sector
092E E72B             (          msf.asm):01675         seek1      stb   msp.pos,y
0930 EC4A             (          msf.asm):01676                    ldd   R$U,u
0932 ED2C             (          msf.asm):01677                    std   msp.pos+1,y    update position in current sector
0934 5F               (          msf.asm):01678                    clrb                 ..no error
0935 39               (          msf.asm):01679         seek9      rts
                      (          msf.asm):01680         
0936 E62A             (          msf.asm):01681         seek2      ldb   msp.sest,y
0938 C404             (          msf.asm):01682                    andb  #SECUPD        does sector need updating?
093A 2707             (          msf.asm):01683                    beq   seek3          ..no
093C 1702E2           (          msf.asm):01684                    lbsr  writsec        write the current sector
093F 25F4             (          msf.asm):01685                    bcs   seek9
0941 E62A             (          msf.asm):01686                    ldb   msp.sest,y
0943 C4F8             (          msf.asm):01687         seek3      andb  #^(SECREAD!SECGOOD!SECUPD) sector is no longer valid
0945 E72A             (          msf.asm):01688                    stb   msp.sest,y
0947 EC46             (          msf.asm):01689                    ldd   R$X,u
0949 20E3             (          msf.asm):01690                    bra   seek1
                      (          msf.asm):01691         
                      (          msf.asm):01692         * Clear directory entry at X
                      (          msf.asm):01693         
094B 8D08             (          msf.asm):01694         clrentry   bsr   clrname
094D 6F80             (          msf.asm):01695         makd4      clr   ,x+            clear the rest of the entry
094F 5C               (          msf.asm):01696                    incb
0950 C120             (          msf.asm):01697                    cmpb  #MSDSIZE
0952 25F9             (          msf.asm):01698                    blo   makd4
0954 39               (          msf.asm):01699                    rts
                      (          msf.asm):01700         
0955 5F               (          msf.asm):01701         clrname    clrb
0956 8620             (          msf.asm):01702                    lda   #SP
0958 A780             (          msf.asm):01703         makd3      sta   ,x+            write spaces for file name
095A 5C               (          msf.asm):01704                    incb
095B C10B             (          msf.asm):01705                    cmpb  #11
095D 25F9             (          msf.asm):01706                    blo   makd3
095F 39               (          msf.asm):01707                    rts
                      (          msf.asm):01708         
                      (          msf.asm):01709         
                      (          msf.asm):01710         *******************************************************
                      (          msf.asm):01711         * Subroutine: makdir
                      (          msf.asm):01712         *
                      (          msf.asm):01713         * function - make a new directory
                      (          msf.asm):01714         *
                      (          msf.asm):01715         * On entry:
                      (          msf.asm):01716         *  Y points to path descriptor
                      (          msf.asm):01717         *  U points to caller's register stack
                      (          msf.asm):01718         *
                      (          msf.asm):01719         * On exit:
                      (          msf.asm):01720         *  Carry set and error in B if error
                      (          msf.asm):01721         
0960                  (          msf.asm):01722         makdir
                      (          msf.asm):01723         *** rev 2.3
                      (          msf.asm):01724         * lda PD.CPR,y
                      (          msf.asm):01725         * sta msp.ncpr,y ..so disk driver won't be released
                      (          msf.asm):01726         ***
0960 A642             (          msf.asm):01727                    lda   R$B,u          get access mode
0962 8A82             (          msf.asm):01728                    ora   #DIR.+WRITE.   set the directory bit
0964 84DB             (          msf.asm):01729                    anda  #^(EXEC.+PEXEC.)
0966 A742             (          msf.asm):01730                    sta   R$B,u
0968 A721             (          msf.asm):01731                    sta   PD.MOD,y
096A 17FC23           (          msf.asm):01732                    lbsr  create1        create a new file
096D 10250099         (          msf.asm):01733                    lbcs  closef         close file and report error
0971 3450             (          msf.asm):01734                    pshs  x,u            save offset, buffer address and sector #
0973 308B             (          msf.asm):01735                    leax  d,x            point to directory entry
0975 3410             (          msf.asm):01736                    pshs  x
0977 4F               (          msf.asm):01737                    clra
0978 5F               (          msf.asm):01738                    clrb                 no clusters in file yet
0979 17F6E1           (          msf.asm):01739                    lbsr  expchn         add next unused cluster to chain
097C 3510             (          msf.asm):01740                    puls  x
097E 255E             (          msf.asm):01741                    bcs   closem         close file and report error
0980 17F9C5           (          msf.asm):01742                    lbsr  setcls         save cluster number
0983 1E89             (          msf.asm):01743                    exg   a,b            convert to INTEL
0985 ED881A           (          msf.asm):01744                    std   msd.strt,x     put starting cluster of new directory
0988 3550             (          msf.asm):01745                    puls  x,u            get address and number of sector
098A 17055B           (          msf.asm):01746                    lbsr  dwritel        update the directory
098D 257B             (          msf.asm):01747                    bcs   closef         ..error
098F ECA83A           (          msf.asm):01748                    ldd   msp.cls,y      get cluster number of new directory
0992 17FBC8           (          msf.asm):01749                    lbsr  DirFull9       ..clear directory entries
0995 2573             (          msf.asm):01750                    bcs   closef         ..error
0997 3450             (          msf.asm):01751                    pshs  x,u
0999 8DB0             (          msf.asm):01752                    bsr   clrentry
099B 8DAE             (          msf.asm):01753                    bsr   clrentry
099D AE28             (          msf.asm):01754                    ldx   PD.BUF,y
099F EEA834           (          msf.asm):01755                    ldu   msp.dir,y
09A2 8610             (          msf.asm):01756                    lda   #attr.DR       subdirectories
09A4 A70B             (          msf.asm):01757                    sta   msd.attr,x
09A6 A7882B           (          msf.asm):01758                    sta   MSDSIZE+msd.attr,x
09A9 ECC826           (          msf.asm):01759                    ldd   dir.msd+msd.time,u get time
09AC ED8816           (          msf.asm):01760                    std   msd.time,x
09AF ED8836           (          msf.asm):01761                    std   MSDSIZE+msd.time,x
09B2 ECC828           (          msf.asm):01762                    ldd   dir.msd+msd.date,u get date
09B5 ED8818           (          msf.asm):01763                    std   msd.date,x
09B8 ED8838           (          msf.asm):01764                    std   MSDSIZE+msd.date,x
09BB ECA83A           (          msf.asm):01765                    ldd   msp.cls,y      get starting cluster number
09BE 1E89             (          msf.asm):01766                    exg   a,b
09C0 ED881A           (          msf.asm):01767                    std   msd.strt,x
09C3 EC4E             (          msf.asm):01768                    ldd   dir.prnt,u     get parent directory start cluster
09C5 1E89             (          msf.asm):01769                    exg   a,b
09C7 ED883A           (          msf.asm):01770                    std   MSDSIZE+msd.strt,x
09CA CC2E2E           (          msf.asm):01771                    ldd   #"..
09CD E784             (          msf.asm):01772                    stb   msd.name,x
09CF ED8820           (          msf.asm):01773                    std   MSDSIZE+msd.name,x
09D2 3550             (          msf.asm):01774                    puls  x,u
09D4 170511           (          msf.asm):01775                    lbsr  dwritel        write the new subdirectory
09D7 2531             (          msf.asm):01776                    bcs   closef
09D9 1704EA           (          msf.asm):01777                    lbsr  writFAT        update the file allocation table
09DC 202C             (          msf.asm):01778                    bra   closef
09DE 3550             (          msf.asm):01779         closem     puls  x,u
09E0 2028             (          msf.asm):01780                    bra   closef
                      (          msf.asm):01781         
                      (          msf.asm):01782         *******************************************************
                      (          msf.asm):01783         * Subroutine: close
                      (          msf.asm):01784         *
                      (          msf.asm):01785         * function - close the current path
                      (          msf.asm):01786         *
                      (          msf.asm):01787         * On entry:
                      (          msf.asm):01788         *  Y points to path descriptor
                      (          msf.asm):01789         *
                      (          msf.asm):01790         * On exit:
                      (          msf.asm):01791         *  Carry set and error in B if error
                      (          msf.asm):01792         
09E2 4F               (          msf.asm):01793         close      clra                 clear carry
09E3 6D22             (          msf.asm):01794                    tst   msp.cnt,y      any duped paths?
09E5 10260091         (          msf.asm):01795                    lbne  close5         ..yes, don't deallocate
09E9 E621             (          msf.asm):01796                    ldb   PD.MOD,y       get access mode
09EB C502             (          msf.asm):01797                    bitb  #WRITE.        open for write?
09ED 2719             (          msf.asm):01798                    beq   close10        ..no
09EF E62A             (          msf.asm):01799                    ldb   msp.sest,y     get sector status
09F1 C504             (          msf.asm):01800                    bitb  #SECUPD        does sector need update?
09F3 2705             (          msf.asm):01801                    beq   close1         ..no
09F5 170229           (          msf.asm):01802                    lbsr  writsec        write sector
09F8 2510             (          msf.asm):01803                    bcs   closef
09FA AEA834           (          msf.asm):01804         close1     ldx   msp.dir,y      point to directory info
09FD E601             (          msf.asm):01805                    ldb   dir.stat,x     update FAT?
09FF 2707             (          msf.asm):01806                    beq   close10        ..no
0A01 6F01             (          msf.asm):01807                    clr   dir.stat,x
0A03 1704C0           (          msf.asm):01808                    lbsr  writFAT        update the FAT
0A06 2502             (          msf.asm):01809                    bcs   closef
0A08 8D71             (          msf.asm):01810         close10    bsr   writdir        update the directory entry
0A0A 3405             (          msf.asm):01811         closef     pshs  cc,b           save condition codes and B in case of error
0A0C EE28             (          msf.asm):01812                    ldu   PD.BUF,y       point to sector buffer
0A0E 2706             (          msf.asm):01813                    beq   close3         ..no buffer
0A10 17F74F           (          msf.asm):01814                    lbsr  secsiz         get sector size
0A13 103F29           (          msf.asm):01815                    os9   F$SRTMem       return system memory
0A16 AEA832           (          msf.asm):01816         close3     ldx   msp.prev,y     point to previous MSF path descriptor
0A19 EEA830           (          msf.asm):01817                    ldu   msp.next,y
0A1C 2709             (          msf.asm):01818                    beq   close35
0A1E AFC832           (          msf.asm):01819                    stx   msp.prev,u
0A21 260C             (          msf.asm):01820                    bne   close38
0A23 1F31             (          msf.asm):01821                    tfr   u,x
0A25 2004             (          msf.asm):01822                    bra   close37
0A27 AF7E             (          msf.asm):01823         close35    stx   -2,s
0A29 2604             (          msf.asm):01824                    bne   close38
0A2B 9F7C             (          msf.asm):01825         close37    stx   <D.MSF
0A2D 2003             (          msf.asm):01826                    bra   close4
0A2F EF8830           (          msf.asm):01827         close38    stu   msp.next,x
0A32 AEA838           (          msf.asm):01828         close4     ldx   msp.dprv,y     point to previous desc for same file
0A35 EEA836           (          msf.asm):01829                    ldu   msp.dnxt,y     point to next desc for same file
0A38 2703             (          msf.asm):01830                    beq   close45
0A3A AFC838           (          msf.asm):01831                    stx   msp.dprv,u
0A3D AF7E             (          msf.asm):01832         close45    stx   -2,s
0A3F 2609             (          msf.asm):01833                    bne   close48
0A41 AEA834           (          msf.asm):01834                    ldx   msp.dir,y
0A44 EF03             (          msf.asm):01835                    stu   dir.last,x
0A46 2707             (          msf.asm):01836                    beq   close47        .. no one is using directory entry
0A48 200C             (          msf.asm):01837                    bra   close49
0A4A EF8836           (          msf.asm):01838         close48    stu   msp.dnxt,x
0A4D 2007             (          msf.asm):01839                    bra   close49
0A4F A684             (          msf.asm):01840         close47    lda   ,x             get block number
0A51 9E88             (          msf.asm):01841                    ldx   <D.PthDBT
0A53 103F31           (          msf.asm):01842                    os9   F$Ret64        return the directory entry to the system
0A56 AEA814           (          msf.asm):01843         close49    ldx   msp.dtb,y      point to device table
0A59 6A8823           (          msf.asm):01844                    dec   V.CNT,x
                      (          msf.asm):01845         *** mod so it works with VAR
0A5C 2618             (          msf.asm):01846                    bne   close50
0A5E EE8824           (          msf.asm):01847                    ldu   V.FAT,x
0A61 2713             (          msf.asm):01848                    beq   close50        ..FAT hadn't been read
0A63 4F               (          msf.asm):01849                    clra
0A64 5F               (          msf.asm):01850                    clrb
0A65 ED8824           (          msf.asm):01851                    std   V.FAT,x
0A68 A68822           (          msf.asm):01852                    lda   V.FS,x         get FAT size (in pages)
0A6B 103F29           (          msf.asm):01853                    os9   F$SRTMem       return system memory
0A6E A69820           (          msf.asm):01854                    lda   [V.BPB,x]      get page number
0A71 9E88             (          msf.asm):01855                    ldx   <D.PthDBT
0A73 103F31           (          msf.asm):01856                    OS9   F$Ret64
0A76 8D02             (          msf.asm):01857         close50    bsr   close5         release the driver for other use
0A78 3585             (          msf.asm):01858                    puls  cc,b,pc        return with error or not
                      (          msf.asm):01859         
0A7A                  (          msf.asm):01860         close5
                      (          msf.asm):01861         *** rev 2.3
                      (          msf.asm):01862         * clr msp.ncpr,y
                      (          msf.asm):01863         * lbra reldrvr release the driver for other use
                      (          msf.asm):01864         ***
0A7A 39               (          msf.asm):01865                    rts
                      (          msf.asm):01866         
0A7B AEA834           (          msf.asm):01867         writdir    ldx   msp.dir,y
0A7E E602             (          msf.asm):01868                    ldb   dir.chg,x      has directory entry changed?
0A80 2742             (          msf.asm):01869                    beq   writdir9       ..no
0A82 A625             (          msf.asm):01870         writdir0   lda   PD.CPR,y
0A84 A7A817           (          msf.asm):01871                    sta   msp.ncpr,y     so driver will remain locked
0A87 6F02             (          msf.asm):01872                    clr   dir.chg,x
0A89 C420             (          msf.asm):01873                    andb  #attr.AR       has file been updated?
0A8B 2709             (          msf.asm):01874                    beq   writdir1       ..no
0A8D EA881B           (          msf.asm):01875                    orb   dir.msd+msd.attr,x set ARchive bit
0A90 E7881B           (          msf.asm):01876                    stb   dir.msd+msd.attr,x
0A93 1704C0           (          msf.asm):01877                    lbsr  setdate
0A96 EC882A           (          msf.asm):01878         writdir1   ldd   dir.msd+msd.strt,x
0A99 1E89             (          msf.asm):01879                    exg   a,b
0A9B 10830001         (          msf.asm):01880                    cmpd  #1
0A9F 2327             (          msf.asm):01881                    bls   permiss
0AA1 EE05             (          msf.asm):01882                    ldu   dir.loc,x      get directory sector #
0AA3 AE28             (          msf.asm):01883                    ldx   PD.BUF,y       point to buffer
0AA5 17035F           (          msf.asm):01884                    lbsr  dreadl         read the sector
0AA8 251A             (          msf.asm):01885                    bcs   writdir9       ..error
0AAA 3450             (          msf.asm):01886                    pshs  x,u
0AAC EEA834           (          msf.asm):01887                    ldu   msp.dir,y
0AAF EC47             (          msf.asm):01888                    ldd   dir.pos,u      get offset to entry
0AB1 33C810           (          msf.asm):01889                    leau  dir.msd,u      skip file name
0AB4 308B             (          msf.asm):01890                    leax  d,x
0AB6 C620             (          msf.asm):01891                    ldb   #MSDSIZE       number of bytes to copy
0AB8 A6C0             (          msf.asm):01892         writdir2   lda   ,u+
0ABA A780             (          msf.asm):01893                    sta   ,x+
0ABC 5A               (          msf.asm):01894                    decb
0ABD 26F9             (          msf.asm):01895                    bne   writdir2
0ABF 3550             (          msf.asm):01896                    puls  x,u
0AC1 170424           (          msf.asm):01897                    lbsr  dwritel        write the updated sector
0AC4 3405             (          msf.asm):01898         writdir9   pshs  cc,b
0AC6 20AE             (          msf.asm):01899                    bra   close50
                      (          msf.asm):01900         
0AC8 53               (          msf.asm):01901         permiss    comb
0AC9 C6CB             (          msf.asm):01902                    ldb   #E$BMode
0ACB 39               (          msf.asm):01903                    rts
                      (          msf.asm):01904         
                      (          msf.asm):01905         *******************************************************
                      (          msf.asm):01906         * Subroutine: chgdir
                      (          msf.asm):01907         *
                      (          msf.asm):01908         * function - change the current execution or data directory
                      (          msf.asm):01909         *
                      (          msf.asm):01910         * On entry:
                      (          msf.asm):01911         *  Y points to path descriptor
                      (          msf.asm):01912         *
                      (          msf.asm):01913         * On exit:
                      (          msf.asm):01914         *  Carry set and error in B if error
                      (          msf.asm):01915         
0ACC E621             (          msf.asm):01916         chgdir     ldb   PD.MOD,y       get access mode
0ACE CA80             (          msf.asm):01917                    orb   #DIR.          make sure we find a directory
0AD0 E721             (          msf.asm):01918                    stb   PD.MOD,y
0AD2 6A22             (          msf.asm):01919                    dec   PD.CNT,y       so file will close properly
0AD4 17F69A           (          msf.asm):01920                    lbsr  findfile       open the directory
0AD7 1025FF2F         (          msf.asm):01921                    lbcs  closef         close the file
0ADB 9E50             (          msf.asm):01922                    ldx   <D.Proc        point to the user process descriptor
0ADD EEA834           (          msf.asm):01923                    ldu   msp.dir,y
0AE0 ECC82A           (          msf.asm):01924                    ldd   dir.msd+msd.strt,u get starting cluster number
0AE3 1E89             (          msf.asm):01925                    exg   a,b            convert to motorola
0AE5 1F03             (          msf.asm):01926                    tfr   d,u
0AE7 A6A821           (          msf.asm):01927                    lda   PD.DRV,y       get drive number
0AEA E621             (          msf.asm):01928                    ldb   PD.MOD,y       get access mode
0AEC C503             (          msf.asm):01929                    bitb  #READ.+WRITE.  read or write?
0AEE 2706             (          msf.asm):01930                    beq   chgdir2        ..no
0AF0 A78822           (          msf.asm):01931                    sta   P$DIO+2,x
0AF3 EF8823           (          msf.asm):01932                    stu   P$DIO+3,x
0AF6 C504             (          msf.asm):01933         chgdir2    bitb  #EXEC.         execution dir?
0AF8 2706             (          msf.asm):01934                    beq   chgdir4        ..no
0AFA A78828           (          msf.asm):01935                    sta   P$DIO+8,x
0AFD EF8829           (          msf.asm):01936                    stu   P$DIO+9,x
0B00 5F               (          msf.asm):01937         chgdir4    clrb
0B01 16FF06           (          msf.asm):01938                    lbra  closef         go close the file
                      (          msf.asm):01939         
                      (          msf.asm):01940         
                      (          msf.asm):01941         *******************************************************
                      (          msf.asm):01942         * Subroutine: readit
                      (          msf.asm):01943         *
                      (          msf.asm):01944         * function read the current sector if it is valid
                      (          msf.asm):01945         *
                      (          msf.asm):01946         * On entry:
                      (          msf.asm):01947         *  Y points to path descriptor
                      (          msf.asm):01948         *
                      (          msf.asm):01949         * On exit:
                      (          msf.asm):01950         *  Carry set and error in B if error
                      (          msf.asm):01951         
0B04 5F               (          msf.asm):01952         readit     clrb                 clear carry
0B05 3450             (          msf.asm):01953                    pshs  x,u
0B07 E62A             (          msf.asm):01954                    ldb   msp.sest,y     get sector status
0B09 C501             (          msf.asm):01955                    bitb  #SECGOOD       is current sector OK?
0B0B 262C             (          msf.asm):01956                    bne   readit9        ..yes
0B0D C504             (          msf.asm):01957                    bitb  #SECUPD        does sector need updating?
0B0F 2707             (          msf.asm):01958                    beq   readit1        ..no
0B11 17010D           (          msf.asm):01959                    lbsr  writsec        write the current sector
0B14 2523             (          msf.asm):01960                    bcs   readit9
0B16 E62A             (          msf.asm):01961                    ldb   msp.sest,y
0B18 C502             (          msf.asm):01962         readit1    bitb  #SECREAD       read next sector?
0B1A 2608             (          msf.asm):01963                    bne   readnxt1       ..yes
0B1C 8D22             (          msf.asm):01964                    bsr   seekit         find cluster number of sector
0B1E 2519             (          msf.asm):01965                    bcs   readit9
0B20 200E             (          msf.asm):01966                    bra   readnxt2
                      (          msf.asm):01967         
                      (          msf.asm):01968         * read the next sector in a file
0B22 3450             (          msf.asm):01969         readnxt    pshs  x,u            read the next sector in the file
0B24 1700AC           (          msf.asm):01970         readnxt1   lbsr  seeknxt        seek to the next sector
0B27 10830FF8         (          msf.asm):01971                    cmpd  #$FF8          last cluster?
0B2B 240E             (          msf.asm):01972                    bhs   readit99
0B2D 17F825           (          msf.asm):01973                    lbsr  setcls0        set current cluster number
0B30 1700D2           (          msf.asm):01974         readnxt2   lbsr  readsec        read the current sector
0B33 2504             (          msf.asm):01975                    bcs   readit9
0B35 C601             (          msf.asm):01976                    ldb   #SECGOOD
0B37 E72A             (          msf.asm):01977                    stb   msp.sest,y
0B39 35D0             (          msf.asm):01978         readit9    puls  x,u,pc
                      (          msf.asm):01979         
0B3B 43               (          msf.asm):01980         readit99   coma                 set carry
0B3C C6D3             (          msf.asm):01981                    ldb   #E$EOF
0B3E 35D0             (          msf.asm):01982                    puls  x,u,pc
                      (          msf.asm):01983         
                      (          msf.asm):01984         
                      (          msf.asm):01985         *******************************************************
                      (          msf.asm):01986         * Subroutine: seekit
                      (          msf.asm):01987         *
                      (          msf.asm):01988         * function - seek to the current file position
                      (          msf.asm):01989         *
                      (          msf.asm):01990         * On entry:
                      (          msf.asm):01991         *  Y points to path descriptor
                      (          msf.asm):01992         *
                      (          msf.asm):01993         * On exit:
                      (          msf.asm):01994         *  Carry set and error in B if error
                      (          msf.asm):01995         
0B40 3450             (          msf.asm):01996         seekit     pshs  x,u
0B42 ECA83A           (          msf.asm):01997                    ldd   msp.cls,y
0B45 270E             (          msf.asm):01998                    beq   seekit01       ..root directory
0B47 10830001         (          msf.asm):01999                    cmpd  #1
0B4B 263F             (          msf.asm):02000                    bne   seekit03       ..not entire disk
0B4D 170293           (          msf.asm):02001                    lbsr  disksize
0B50 CE0000           (          msf.asm):02002         seekit00   ldu   #0
0B53 2018             (          msf.asm):02003                    bra   seekit02
0B55 17F5D5           (          msf.asm):02004         seekit01   lbsr  rootdat
0B58 AEA814           (          msf.asm):02005                    ldx   msp.dtb,y
0B5B AE8820           (          msf.asm):02006                    ldx   V.BPB,x
0B5E A602             (          msf.asm):02007                    lda   ID.BPS+1,x     get MSB of sector size
0B60 44               (          msf.asm):02008         skit012    lsra
0B61 2703             (          msf.asm):02009                    beq   skit015
0B63 58               (          msf.asm):02010                    lslb
0B64 20FA             (          msf.asm):02011                    bra   skit012
0B66 4F               (          msf.asm):02012         skit015    clra
0B67 AEA834           (          msf.asm):02013                    ldx   msp.dir,y
0B6A ED882C           (          msf.asm):02014                    std   dir.msd+msd.size,x
0B6D 17F7CC           (          msf.asm):02015         seekit02   lbsr  setsec         currect sector is start of root or disk
0B70 AEA834           (          msf.asm):02016                    ldx   msp.dir,y
0B73 17F5EC           (          msf.asm):02017                    lbsr  secsiz         get sector size
0B76 3402             (          msf.asm):02018                    pshs  a
0B78 EC882D           (          msf.asm):02019                    ldd   dir.msd+msd.size+1,x get file size
0B7B 1E89             (          msf.asm):02020                    exg   a,b
0B7D 64E4             (          msf.asm):02021         skit02     lsr   ,s
0B7F 2704             (          msf.asm):02022                    beq   skit025        ..done
0B81 44               (          msf.asm):02023                    lsra
0B82 56               (          msf.asm):02024                    rorb                 divide number of 256 byte sector to get actual sectors
0B83 20F8             (          msf.asm):02025                    bra   skit02
0B85 3261             (          msf.asm):02026         skit025    leas  1,s
0B87 33CB             (          msf.asm):02027                    leau  d,u            first sector past last one
0B89 EFA818           (          msf.asm):02028                    stu   msp.end,y
0B8C 17F7DB           (          msf.asm):02029         seekit03   lbsr  clss0          first sector in cluster
0B8F EEA834           (          msf.asm):02030                    ldu   msp.dir,y      point to directory entry
0B92 ECC82A           (          msf.asm):02031                    ldd   dir.msd+msd.strt,u get number of first cluster
0B95 1E89             (          msf.asm):02032                    exg   a,b            convert to Motorola format
0B97 AE2B             (          msf.asm):02033                    ldx   msp.pos,y      get position to seek to
0B99 10830FF8         (          msf.asm):02034         seekit1    cmpd  #$FF8          end of chain?
0B9D 249C             (          msf.asm):02035                    bhs   readit99       ..yes
0B9F 17F7B3           (          msf.asm):02036                    lbsr  setcls0        set current cluster number
0BA2 17F5BD           (          msf.asm):02037                    lbsr  secsiz         get sector size
0BA5 1E89             (          msf.asm):02038                    exg   a,b
0BA7 3406             (          msf.asm):02039                    pshs  d
0BA9 1F10             (          msf.asm):02040                    tfr   x,d
0BAB A3E1             (          msf.asm):02041                    subd  ,s++           subtract pages/sector
0BAD 2508             (          msf.asm):02042                    bcs   seekit4
0BAF 3406             (          msf.asm):02043                    pshs  d
0BB1 8D20             (          msf.asm):02044                    bsr   seeknxt        seek to the next sector
0BB3 3510             (          msf.asm):02045                    puls  x
0BB5 20E2             (          msf.asm):02046                    bra   seekit1
0BB7 5F               (          msf.asm):02047         seekit4    clrb
0BB8 35D0             (          msf.asm):02048         seekit5    puls  x,u,pc         .. position has been found
                      (          msf.asm):02049         
0BBA 3440             (          msf.asm):02050         seekroot   pshs  u
0BBC EEA83C           (          msf.asm):02051                    ldu   msp.sec,y      get current sector number
0BBF 3341             (          msf.asm):02052                    leau  1,u
0BC1 11A3A818         (          msf.asm):02053                    cmpu  msp.end,y      end of directory or disk?
0BC5 2408             (          msf.asm):02054                    bhs   seekrt9        ..yes
0BC7 17F772           (          msf.asm):02055                    lbsr  setsec
0BCA ECA83A           (          msf.asm):02056                    ldd   msp.cls,y
0BCD 35C0             (          msf.asm):02057                    puls  u,pc
0BCF 86FF             (          msf.asm):02058         seekrt9    lda   #$FF           return EOF indicator
0BD1 35C0             (          msf.asm):02059                    puls  u,pc
                      (          msf.asm):02060         
0BD3 ECA83A           (          msf.asm):02061         seeknxt    ldd   msp.cls,y      root directory?
0BD6 10830001         (          msf.asm):02062                    cmpd  #1             or entire disk?
0BDA 23DE             (          msf.asm):02063                    bls   seekroot       ..yes
0BDC AEA814           (          msf.asm):02064                    ldx   msp.dtb,y      point to drive info table
0BDF 17F574           (          msf.asm):02065                    lbsr  sepecl         get sectors per cluster
0BE2 4A               (          msf.asm):02066                    deca
0BE3 A1A83E           (          msf.asm):02067                    cmpa  msp.clss,y     last sector in cluster?
0BE6 260D             (          msf.asm):02068                    bne   seeknxt8       ..no
0BE8 ECA83A           (          msf.asm):02069         seeknxt7   ldd   msp.cls,y      get current cluster number
0BEB AE8824           (          msf.asm):02070                    ldx   V.FAT,x        point to FAT
0BEE 17F4F1           (          msf.asm):02071                    lbsr  findnext       find next cluster in chain
0BF1 17F776           (          msf.asm):02072                    lbsr  clss0          ..it's the first sector in the cluster
0BF4 39               (          msf.asm):02073         seeknxt9   rts
                      (          msf.asm):02074         
0BF5 6CA83E           (          msf.asm):02075         seeknxt8   inc   msp.clss,y     point to next sector in cluster
0BF8 E62A             (          msf.asm):02076                    ldb   msp.sest,y
0BFA C4FE             (          msf.asm):02077                    andb  #^SECGOOD
0BFC CA08             (          msf.asm):02078                    orb   #SECBUF
0BFE E72A             (          msf.asm):02079                    stb   msp.sest,y
0C00 5F               (          msf.asm):02080                    clrb
0C01 ECA83A           (          msf.asm):02081                    ldd   msp.cls,y
0C04 39               (          msf.asm):02082                    rts
                      (          msf.asm):02083         
                      (          msf.asm):02084         
                      (          msf.asm):02085         *******************************************************
                      (          msf.asm):02086         * Subroutine: readsec
                      (          msf.asm):02087         *
                      (          msf.asm):02088         * function - read the current sector
                      (          msf.asm):02089         *
                      (          msf.asm):02090         * On entry:
                      (          msf.asm):02091         *  Y points to path descriptor
                      (          msf.asm):02092         *
                      (          msf.asm):02093         * On exit:
                      (          msf.asm):02094         *  Carry set and error in B if error
                      (          msf.asm):02095         
0C05 3450             (          msf.asm):02096         readsec    pshs  x,u
0C07 EEA83C           (          msf.asm):02097                    ldu   msp.sec,y      root directory?
0C0A ECA83A           (          msf.asm):02098                    ldd   msp.cls,y      get cluster number
0C0D 10830001         (          msf.asm):02099                    cmpd  #1             ROOT or entire disk?
0C11 2309             (          msf.asm):02100                    bls   readsec2       ..yes
0C13 8D3B             (          msf.asm):02101                    bsr   cluslog        convert cluster number to logical sector #
0C15 EBA83E           (          msf.asm):02102                    addb  msp.clss,y     add cluster sector #
0C18 8900             (          msf.asm):02103                    adca  #0
0C1A 1F03             (          msf.asm):02104                    tfr   d,u
0C1C 1701E8           (          msf.asm):02105         readsec2   lbsr  dreadl
0C1F 35D0             (          msf.asm):02106                    puls  x,u,pc
                      (          msf.asm):02107         
                      (          msf.asm):02108         
                      (          msf.asm):02109         *******************************************************
                      (          msf.asm):02110         * Subroutine: writsec
                      (          msf.asm):02111         *
                      (          msf.asm):02112         * function - write the current sector
                      (          msf.asm):02113         *
                      (          msf.asm):02114         * On entry:
                      (          msf.asm):02115         *  Y points to path descriptor
                      (          msf.asm):02116         *
                      (          msf.asm):02117         * On exit:
                      (          msf.asm):02118         *  Carry set and error in B if error
                      (          msf.asm):02119         
0C21 3450             (          msf.asm):02120         writsec    pshs  x,u
0C23 EEA83C           (          msf.asm):02121                    ldu   msp.sec,y
0C26 ECA83A           (          msf.asm):02122                    ldd   msp.cls,y      get cluster number
0C29 10830001         (          msf.asm):02123                    cmpd  #1             ROOT or entire disk
0C2D 2309             (          msf.asm):02124                    bls   writsec2       ..yes
0C2F 8D1F             (          msf.asm):02125                    bsr   cluslog        convert cluster number to logical sector #
0C31 EBA83E           (          msf.asm):02126                    addb  msp.clss,y     add cluster sector #
0C34 8900             (          msf.asm):02127                    adca  #0
0C36 1F03             (          msf.asm):02128                    tfr   d,u
0C38 AE28             (          msf.asm):02129         writsec2   ldx   PD.BUF,y       point to sector buffer
0C3A 1702AB           (          msf.asm):02130                    lbsr  dwritel
0C3D 250F             (          msf.asm):02131                    bcs   writsec9
0C3F E62A             (          msf.asm):02132                    ldb   msp.sest,y     get sector status
0C41 C4FB             (          msf.asm):02133                    andb  #^SECUPD
0C43 E72A             (          msf.asm):02134                    stb   msp.sest,y
0C45 AEA834           (          msf.asm):02135                    ldx   msp.dir,y      point to directory info
0C48 E602             (          msf.asm):02136                    ldb   dir.chg,x      get directory change flag
0C4A CA20             (          msf.asm):02137                    orb   #attr.AR       set the archive bit
0C4C E702             (          msf.asm):02138                    stb   dir.chg,x
0C4E 35D0             (          msf.asm):02139         writsec9   puls  x,u,pc
                      (          msf.asm):02140         
                      (          msf.asm):02141         
                      (          msf.asm):02142         *************************************************
                      (          msf.asm):02143         * Subroutine: cluslog
                      (          msf.asm):02144         *
                      (          msf.asm):02145         * function - convert cluster # to logical sector #
                      (          msf.asm):02146         *
                      (          msf.asm):02147         * On entry:
                      (          msf.asm):02148         *  D is cluster #
                      (          msf.asm):02149         *  Y points to path descriptor
                      (          msf.asm):02150         *
                      (          msf.asm):02151         * On exit:
                      (          msf.asm):02152         *  D is logical sector #
                      (          msf.asm):02153         
0C50 830002           (          msf.asm):02154         cluslog    subd  #2
0C53 3456             (          msf.asm):02155                    pshs  d,x,u
0C55 17F4D5           (          msf.asm):02156                    lbsr  rootdat        get root info
0C58 44               (          msf.asm):02157         cluslog1   lsra                 cluster done?
0C59 2706             (          msf.asm):02158                    beq   cluslog5       ..no
0C5B 6861             (          msf.asm):02159                    lsl   1,s
0C5D 69E4             (          msf.asm):02160                    rol   ,s             multiply by 2
0C5F 20F7             (          msf.asm):02161                    bra   cluslog1
0C61 3440             (          msf.asm):02162         cluslog5   pshs  u              starting sector of directory
0C63 E3E1             (          msf.asm):02163                    addd  ,s++           directory size + starting sector
0C65 E3E1             (          msf.asm):02164                    addd  ,s++           + data offset
0C67 35D0             (          msf.asm):02165                    puls  x,u,pc
                      (          msf.asm):02166         
                      (          msf.asm):02167         
                      (          msf.asm):02168         *************************************************
                      (          msf.asm):02169         * Subroutine: readFAT
                      (          msf.asm):02170         *
                      (          msf.asm):02171         * function - read the File Allocation Table
                      (          msf.asm):02172         *
                      (          msf.asm):02173         * On entry:
                      (          msf.asm):02174         *  Y points to path descriptor
                      (          msf.asm):02175         *
                      (          msf.asm):02176         * On exit:
                      (          msf.asm):02177         *  X points to FAT
                      (          msf.asm):02178         *  Carry set if error (error code in B)
                      (          msf.asm):02179         
0C69 E6A824           (          msf.asm):02180         readFAT    ldb   PD.DNS,y       get density
0C6C 58               (          msf.asm):02181                    lslb
0C6D C40A             (          msf.asm):02182                    andb  #%00001010     get hi and double density bits
0C6F CA40             (          msf.asm):02183                    orb   #%01000000     1024 byte sector size
0C71 AEA814           (          msf.asm):02184                    ldx   msp.dtb,y
0C74 E7881F           (          msf.asm):02185                    stb   V.dns,x        save density info
0C77 3450             (          msf.asm):02186                    pshs  x,u
0C79 CC0400           (          msf.asm):02187                    ldd   #1024          allow for up to 1k sector size
0C7C A78822           (          msf.asm):02188                    sta   V.FS,x         current FAT size (it may change yet)
0C7F 103F28           (          msf.asm):02189                    OS9   F$SRQMEM
0C82 1025014F         (          msf.asm):02190                    lbcs  readFAT9
0C86 EF8824           (          msf.asm):02191                    stu   V.FAT,x        save pointer to FAT
0C89 1F31             (          msf.asm):02192                    tfr   u,x
0C8B CE0001           (          msf.asm):02193                    ldu   #1             boot sector
0C8E 5F               (          msf.asm):02194                    clrb                 side 0
0C8F 1701CE           (          msf.asm):02195                    lbsr  dread          read the boot sector
0C92 1025012F         (          msf.asm):02196                    lbcs  readFAT8
0C96 E684             (          msf.asm):02197                    ldb   ,x             get version byte
0C98 1F13             (          msf.asm):02198                    tfr   x,u
0C9A AEA814           (          msf.asm):02199                    ldx   msp.dtb,y
0C9D A6881F           (          msf.asm):02200                    lda   V.dns,x
0CA0 304B             (          msf.asm):02201                    leax  ID.skip,u      point to disk information
0CA2 C1E9             (          msf.asm):02202                    cmpb  #$E9           version 2?
0CA4 2731             (          msf.asm):02203                    beq   maketabl       ..yes
0CA6 C1EB             (          msf.asm):02204                    cmpb  #$EB           version 3?
0CA8 272D             (          msf.asm):02205                    beq   maketabl       ..yes
0CAA 8508             (          msf.asm):02206                    bita  #%00001000     is it hi density?
0CAC 2629             (          msf.asm):02207                    bne   maketabl       ..yes, sector 0 must be good (FM R60)
0CAE AEA814           (          msf.asm):02208                    ldx   msp.dtb,y
0CB1 C622             (          msf.asm):02209                    ldb   #%00100010
0CB3 E7881F           (          msf.asm):02210                    stb   V.dns,x        set up for double density 512 byte sectors
0CB6 1F31             (          msf.asm):02211                    tfr   u,x
0CB8 CE0002           (          msf.asm):02212                    ldu   #$0002         track 0 sector 2 first sector of FAT
0CBB 5F               (          msf.asm):02213                    clrb                 side 0
0CBC 1701A1           (          msf.asm):02214                    lbsr  dread          read the first sector of FAT
0CBF 10250102         (          msf.asm):02215                    lbcs  readFAT8
0CC3 E684             (          msf.asm):02216                    ldb   ,x             get format type
0CC5 C1FC             (          msf.asm):02217                    cmpb  #$FC           is it valid byte?
0CC7 102500F7         (          msf.asm):02218                    lblo  readFAT5       ..no
0CCB 308DF342         (          msf.asm):02219                    leax  doubles8,pcr
0CCF 5C               (          msf.asm):02220         nxttbl     incb
0CD0 2705             (          msf.asm):02221                    beq   maketabl       ..yes, table found
0CD2 308813           (          msf.asm):02222                    leax  IDsize,x       point to next table
0CD5 20F8             (          msf.asm):02223                    bra   nxttbl
0CD7 1F13             (          msf.asm):02224         maketabl   tfr   x,u
0CD9 3420             (          msf.asm):02225                    pshs  y
0CDB 9E88             (          msf.asm):02226                    ldx   <D.PthDBT
0CDD 103F30           (          msf.asm):02227                    os9   F$ALL64        allocate 64 bytes
0CE0 1F21             (          msf.asm):02228                    tfr   y,x            point x to buffer
0CE2 3520             (          msf.asm):02229                    puls  y
0CE4 102500DA         (          msf.asm):02230                    lbcs  readFAT5       ..no memory
0CE8 3440             (          msf.asm):02231                    pshs  u
0CEA EEA814           (          msf.asm):02232                    ldu   msp.dtb,y
0CED AFC820           (          msf.asm):02233                    stx   V.BPB,u        save pointer to disk info
0CF0 3540             (          msf.asm):02234                    puls  u
0CF2 3410             (          msf.asm):02235                    pshs  x
0CF4 3001             (          msf.asm):02236                    leax  1,x
0CF6 8613             (          msf.asm):02237                    lda   #IDsize        get size of info table
0CF8 E6C0             (          msf.asm):02238         maketlp    ldb   ,u+
0CFA E780             (          msf.asm):02239                    stb   ,x+
0CFC 4A               (          msf.asm):02240                    deca
0CFD 26F9             (          msf.asm):02241                    bne   maketlp        copy the disk info to safe place
0CFF 3510             (          msf.asm):02242                    puls  x              point to info
                      (          msf.asm):02243         *** calculate usable clusters
0D01 E603             (          msf.asm):02244                    ldb   ID.SPA,x       cluster size
0D03 3404             (          msf.asm):02245                    pshs  b
0D05 EC04             (          msf.asm):02246                    ldd   ID.res,x
0D07 1E89             (          msf.asm):02247                    exg   a,b
0D09 3406             (          msf.asm):02248                    pshs  d
0D0B A60C             (          msf.asm):02249                    lda   ID.spf,x
0D0D E606             (          msf.asm):02250                    ldb   ID.FATs,x
0D0F 3D               (          msf.asm):02251                    mul
0D10 3406             (          msf.asm):02252                    pshs  d
0D12 EC07             (          msf.asm):02253                    ldd   ID.RDE,x
0D14 1E89             (          msf.asm):02254                    exg   a,b
0D16 44               (          msf.asm):02255                    lsra
0D17 56               (          msf.asm):02256                    rorb
0D18 44               (          msf.asm):02257                    lsra
0D19 56               (          msf.asm):02258                    rorb
0D1A 44               (          msf.asm):02259                    lsra
0D1B 56               (          msf.asm):02260                    rorb
0D1C 44               (          msf.asm):02261                    lsra
0D1D 56               (          msf.asm):02262                    rorb                 divide directory entries by 16 to get sectors
0D1E 3406             (          msf.asm):02263                    pshs  d
0D20 EC09             (          msf.asm):02264                    ldd   ID.secs,x      get total sectors
0D22 1E89             (          msf.asm):02265                    exg   a,b
0D24 A3E1             (          msf.asm):02266                    subd  ,s++
0D26 A3E1             (          msf.asm):02267                    subd  ,s++
0D28 A3E1             (          msf.asm):02268                    subd  ,s++           usable sectors
0D2A 64E4             (          msf.asm):02269         divsec     lsr   ,s             end of cluster?
0D2C 2704             (          msf.asm):02270                    beq   divdone
0D2E 44               (          msf.asm):02271                    lsra
0D2F 56               (          msf.asm):02272                    rorb
0D30 20F8             (          msf.asm):02273                    bra   divsec
0D32 C30002           (          msf.asm):02274         divdone    addd  #2
0D35 ED8814           (          msf.asm):02275                    std   ID.clus,x      save usable cluster count
0D38 3504             (          msf.asm):02276                    puls  b
                      (          msf.asm):02277         *** calculate track density
0D3A C628             (          msf.asm):02278                    ldb   #40
0D3C 3404             (          msf.asm):02279                    pshs  b
0D3E A60E             (          msf.asm):02280                    lda   ID.spt,x       get sectors/track
0D40 E68810           (          msf.asm):02281                    ldb   ID.hds,x       get heads
0D43 3D               (          msf.asm):02282                    mul
0D44 3406             (          msf.asm):02283                    pshs  d              sectors/cylinder
0D46 EC09             (          msf.asm):02284                    ldd   ID.secs,x      total sectors
0D48 1E89             (          msf.asm):02285                    exg   a,b
0D4A A3E4             (          msf.asm):02286         calctrks   subd  ,s
0D4C 2F08             (          msf.asm):02287                    ble   calctrk1
0D4E 6A62             (          msf.asm):02288                    dec   2,s
0D50 26F8             (          msf.asm):02289                    bne   calctrks
0D52 C604             (          msf.asm):02290                    ldb   #4
0D54 2001             (          msf.asm):02291                    bra   calctrk2
0D56 5F               (          msf.asm):02292         calctrk1   clrb
0D57 3263             (          msf.asm):02293         calctrk2   leas  3,s
0D59 A602             (          msf.asm):02294                    lda   ID.BPS+1,x
0D5B 10270063         (          msf.asm):02295                    lbeq  readFAT5       ..sector size not supported
0D5F 48               (          msf.asm):02296                    lsla
0D60 48               (          msf.asm):02297                    lsla
0D61 48               (          msf.asm):02298                    lsla
0D62 48               (          msf.asm):02299                    lsla
0D63 3402             (          msf.asm):02300                    pshs  a
0D65 A60C             (          msf.asm):02301                    lda   ID.spf,x       get sectors per FAT
0D67 AE61             (          msf.asm):02302                    ldx   1,s
0D69 EA881F           (          msf.asm):02303                    orb   V.dns,x
0D6C C40F             (          msf.asm):02304                    andb  #$f            mask out density info
0D6E EAE0             (          msf.asm):02305                    orb   ,s+
0D70 E7881F           (          msf.asm):02306                    stb   V.dns,x        update density
0D73 EE8824           (          msf.asm):02307                    ldu   V.FAT,x        get FAT address
0D76 3402             (          msf.asm):02308                    pshs  a              save FAT sector count
0D78 CC0400           (          msf.asm):02309                    ldd   #1024          buffer size
0D7B 103F29           (          msf.asm):02310                    OS9   F$SRTMem       return the memory
0D7E 4F               (          msf.asm):02311                    clra
0D7F 5F               (          msf.asm):02312                    clrb
0D80 ED8824           (          msf.asm):02313                    std   V.FAT,x
0D83 17F3DC           (          msf.asm):02314                    lbsr  secsiz         get sector size
0D86 1F89             (          msf.asm):02315                    tfr   a,b
0D88 A6E4             (          msf.asm):02316                    lda   ,s             get FAT sector count
0D8A 54               (          msf.asm):02317         calct2     lsrb
0D8B 2703             (          msf.asm):02318                    beq   calct3
0D8D 48               (          msf.asm):02319                    lsla                 convert sectors to pages
0D8E 20FA             (          msf.asm):02320                    bra   calct2
0D90 A78822           (          msf.asm):02321         calct3     sta   V.FS,x         save FAT size (in pages)
0D93 103F28           (          msf.asm):02322                    OS9   F$SRQMem
0D96 3502             (          msf.asm):02323                    puls  a              recover sector count
0D98 253B             (          msf.asm):02324                    bcs   readFAT9       ..report error
0D9A EF8824           (          msf.asm):02325                    stu   V.FAT,x
0D9D 1F31             (          msf.asm):02326         onesec     tfr   u,x
0D9F CE0002           (          msf.asm):02327                    ldu   #$0002         first sector of FAT
0DA2 3402             (          msf.asm):02328         RFloop     pshs  a
0DA4 5F               (          msf.asm):02329                    clrb                 side 0
0DA5 1700B8           (          msf.asm):02330                    lbsr  dread
0DA8 3502             (          msf.asm):02331                    puls  a
0DAA 2519             (          msf.asm):02332                    bcs   readFAT8       ..report error
0DAC 3402             (          msf.asm):02333                    pshs  a
0DAE 17F3B1           (          msf.asm):02334                    lbsr  secsiz         get sector size
0DB1 308B             (          msf.asm):02335                    leax  d,x
0DB3 3502             (          msf.asm):02336                    puls  a
0DB5 3341             (          msf.asm):02337                    leau  1,u            track 0 sector 3
0DB7 4A               (          msf.asm):02338                    deca
0DB8 26E8             (          msf.asm):02339                    bne   RFloop         ..more
0DBA 3510             (          msf.asm):02340                    puls  x
0DBC AE8824           (          msf.asm):02341                    ldx   V.FAT,x
0DBF 5F               (          msf.asm):02342                    clrb                 clear carry
0DC0 35C0             (          msf.asm):02343                    puls  u,pc
                      (          msf.asm):02344         
0DC2 53               (          msf.asm):02345         readFAT5   comb
0DC3 C6F9             (          msf.asm):02346                    ldb   #E$BTyp        wrong media
0DC5 AEE4             (          msf.asm):02347         readFAT8   ldx   ,s
0DC7 3405             (          msf.asm):02348                    pshs  b,cc
0DC9 EE8824           (          msf.asm):02349                    ldu   V.FAT,x        get FAT address
0DCC A68822           (          msf.asm):02350                    lda   V.FS,x         get FAT size
0DCF 5F               (          msf.asm):02351                    clrb
0DD0 103F29           (          msf.asm):02352                    OS9   F$SRTMem       return the memory
0DD3 3505             (          msf.asm):02353                    puls  b,cc
0DD5 AEE4             (          msf.asm):02354         readFAT9   ldx   ,s
0DD7 3405             (          msf.asm):02355                    pshs  b,cc
0DD9 A69820           (          msf.asm):02356                    lda   [V.BPB,x]      get info buffer page number
0DDC 9E88             (          msf.asm):02357                    ldx   <D.PthDBT
0DDE 103F31           (          msf.asm):02358                    OS9   F$Ret64
0DE1 35D5             (          msf.asm):02359                    puls  cc,b,x,u,pc
                      (          msf.asm):02360         
                      (          msf.asm):02361         
                      (          msf.asm):02362         *******************************************
                      (          msf.asm):02363         * set the disk size
0DE3 3410             (          msf.asm):02364         disksize   pshs  x
0DE5 AEA814           (          msf.asm):02365                    ldx   msp.dtb,y
0DE8 AE8820           (          msf.asm):02366                    ldx   V.BPB,x        point to disk info
0DEB E602             (          msf.asm):02367                    ldb   ID.BPS+1,x     get pages/sector
0DED 3404             (          msf.asm):02368                    pshs  b
0DEF EC09             (          msf.asm):02369                    ldd   ID.secs,x      get total number of sectors on disk
0DF1 64E4             (          msf.asm):02370         disksiz3   lsr   ,s
0DF3 2704             (          msf.asm):02371                    beq   disksiz5       ..done
0DF5 48               (          msf.asm):02372                    lsla
0DF6 59               (          msf.asm):02373                    rolb
0DF7 20F8             (          msf.asm):02374                    bra   disksiz3
0DF9 AEA834           (          msf.asm):02375         disksiz5   ldx   msp.dir,y
0DFC ED882D           (          msf.asm):02376                    std   dir.msd+msd.size+1,x save disk size
0DFF 6F882C           (          msf.asm):02377                    clr   dir.msd+msd.size,x
0E02 6F882F           (          msf.asm):02378                    clr   dir.msd+msd.size+3,x
0E05 3592             (          msf.asm):02379                    puls  a,x,pc
                      (          msf.asm):02380         
                      (          msf.asm):02381         
                      (          msf.asm):02382         *******************************************
                      (          msf.asm):02383         * Subroutine: dreadl
                      (          msf.asm):02384         *
                      (          msf.asm):02385         * function read logical sector
                      (          msf.asm):02386         *
                      (          msf.asm):02387         * On entry:
                      (          msf.asm):02388         *  U is logical sector number
                      (          msf.asm):02389         *  Y points to path descriptor
                      (          msf.asm):02390         *
                      (          msf.asm):02391         * On exit:
                      (          msf.asm):02392         *  D is garbage
                      (          msf.asm):02393         *  data read to PD.BUF
                      (          msf.asm):02394         *  Carry set and error in B if error
                      (          msf.asm):02395         
0E07 3450             (          msf.asm):02396         dreadl     pshs  u,x
                      (          msf.asm):02397         * lbsr getFAT read the FAT and set up sector buffer if needed
                      (          msf.asm):02398         * bcs dreadl9 ..error
                      (          msf.asm):02399         * bne dreadl2 buffer was already set
                      (          msf.asm):02400         * bsr disksize this must be the first read of entire disk (@)
0E09 E62A             (          msf.asm):02401         dreadl2    ldb   msp.sest,y     is sector valid?
0E0B 273B             (          msf.asm):02402                    beq   dreadl5        ..no
0E0D C510             (          msf.asm):02403                    bitb  #SECEXP
0E0F 264A             (          msf.asm):02404                    bne   dreadl8        ..yes, don't read sector
0E11 11A3A83C         (          msf.asm):02405                    cmpu  msp.sec,y      is it current sector?
0E15 2742             (          msf.asm):02406                    beq   dreadl9        ..yes, return
0E17 9E7C             (          msf.asm):02407                    ldx   <D.MSF         follow file chain to see if other path has this sector
0E19 E6A821           (          msf.asm):02408                    ldb   PD.DRV,y
0E1C 6D0A             (          msf.asm):02409         dreadl3    tst   msp.sest,x     is sector valid?
0E1E 2723             (          msf.asm):02410                    beq   dreadl4        ..no
0E20 E18821           (          msf.asm):02411                    cmpb  PD.DRV,x
0E23 261E             (          msf.asm):02412                    bne   dreadl4        ..no
0E25 11A3883C         (          msf.asm):02413                    cmpu  msp.sec,x      same sector?
0E29 2618             (          msf.asm):02414                    bne   dreadl4        ..no
0E2B EFA83C           (          msf.asm):02415                    stu   msp.sec,y
0E2E 17F331           (          msf.asm):02416                    lbsr  secsiz         get sector size
0E31 EE08             (          msf.asm):02417                    ldu   PD.BUF,x
0E33 33CB             (          msf.asm):02418                    leau  d,u
0E35 AE28             (          msf.asm):02419                    ldx   PD.BUF,y
0E37 308B             (          msf.asm):02420                    leax  d,x
0E39 ECC3             (          msf.asm):02421         dreadl35   ldd   ,--u
0E3B ED83             (          msf.asm):02422                    std   ,--x
0E3D AC28             (          msf.asm):02423                    cmpx  PD.BUF,y
0E3F 26F8             (          msf.asm):02424                    bne   dreadl35
0E41 2016             (          msf.asm):02425                    bra   dreadl9
0E43 AE8830           (          msf.asm):02426         dreadl4    ldx   msp.next,x     point to next path
0E46 26D4             (          msf.asm):02427                    bne   dreadl3
0E48 EFA83C           (          msf.asm):02428         dreadl5    stu   msp.sec,y
0E4B 6F2A             (          msf.asm):02429                    clr   msp.sest,y
0E4D AE28             (          msf.asm):02430                    ldx   PD.BUF,y
0E4F 8D3F             (          msf.asm):02431                    bsr   logphys        convert logical sector number to track/sector/side
0E51 8D0D             (          msf.asm):02432                    bsr   dread          read the sector
0E53 2504             (          msf.asm):02433                    bcs   dreadl9
0E55 C608             (          msf.asm):02434         dread7     ldb   #SECBUF        mark sector as valid
0E57 E72A             (          msf.asm):02435                    stb   msp.sest,y     indicate the buffer contains sector msp.sec
0E59 35D0             (          msf.asm):02436         dreadl9    puls  x,u,pc
0E5B EFA83C           (          msf.asm):02437         dreadl8    stu   msp.sec,y
0E5E 20F5             (          msf.asm):02438                    bra   dread7
                      (          msf.asm):02439         
                      (          msf.asm):02440         *******************************************
                      (          msf.asm):02441         * Subroutine: dread
                      (          msf.asm):02442         *
                      (          msf.asm):02443         * Function - Read an MSDOS sector
                      (          msf.asm):02444         *
                      (          msf.asm):02445         * On entry:
                      (          msf.asm):02446         *  X points to buffer
                      (          msf.asm):02447         *  U MSB track #, LSB sector #
                      (          msf.asm):02448         *  B - bit 0 set = side 1
                      (          msf.asm):02449         *  Y points to path descriptor
                      (          msf.asm):02450         *
                      (          msf.asm):02451         * On exit:
                      (          msf.asm):02452         *  Carry Set and error in B if error
                      (          msf.asm):02453         
0E60 3410             (          msf.asm):02454         dread      pshs  x
0E62 3420             (          msf.asm):02455                    pshs  y
0E64 10AEA814         (          msf.asm):02456                    ldy   msp.dtb,y
0E68 EAA81F           (          msf.asm):02457                    orb   V.dns,y        mask in track density (bit2 set=96tpi)
0E6B 10AEE4           (          msf.asm):02458                    ldy   ,s             recover y
0E6E 10AE26           (          msf.asm):02459                    ldy   PD.RGS,y
0E71 3420             (          msf.asm):02460                    pshs  y
0E73 4F               (          msf.asm):02461                    clra
0E74 1F02             (          msf.asm):02462                    tfr   d,y
0E76 C684             (          msf.asm):02463                    ldb   #SS.SREAD
                      (          msf.asm):02464                ifeq   H6309-1
0E78 34F8             (          msf.asm):02465                    pshs  pc,u,y,x,dp
0E7A 1038             (          msf.asm):02466                    pshsw
0E7C 3407             (          msf.asm):02467                    pshs  d,cc
                      (          msf.asm):02468                else
                      (          msf.asm):02469                    pshs  pc,u,y,x,dp,d,cc push all parameters
                      (          msf.asm):02470                endc
0E7E 10AEE812         (          msf.asm):02471                    ldy   R$Size+4,s           point to path descriptor
0E82 10EF26           (          msf.asm):02472                    sts   PD.RGS,y       save pointer to register params
0E85 170273           (          msf.asm):02473                    lbsr  getstat0
0E88 326E             (          msf.asm):02474                    leas  R$Size,s
0E8A 3530             (          msf.asm):02475                    puls  x,y
0E8C AF26             (          msf.asm):02476                    stx   PD.RGS,y
0E8E 3590             (          msf.asm):02477                    puls  x,pc
                      (          msf.asm):02478         
                      (          msf.asm):02479         
                      (          msf.asm):02480         *******************************************
                      (          msf.asm):02481         * Subroutine: logphys
                      (          msf.asm):02482         *
                      (          msf.asm):02483         * function - convert logical sector number to
                      (          msf.asm):02484         *  track/sector/side
                      (          msf.asm):02485         *
                      (          msf.asm):02486         * On entry:
                      (          msf.asm):02487         *  U is logical sector number
                      (          msf.asm):02488         *  Y points to path descriptor
                      (          msf.asm):02489         *
                      (          msf.asm):02490         * On exit:
                      (          msf.asm):02491         *  B is side (0 or 1)
                      (          msf.asm):02492         *  U is track and sector number
                      (          msf.asm):02493         
0E90 3430             (          msf.asm):02494         logphys    pshs  x,y
0E92 10AEA814         (          msf.asm):02495                    ldy   msp.dtb,y
0E96 10AEA820         (          msf.asm):02496                    ldy   V.BPB,y        point to disk info
0E9A EC2E             (          msf.asm):02497                    ldd   ID.spt,y       get sectors/track
0E9C 1E89             (          msf.asm):02498                    exg   a,b
0E9E 3406             (          msf.asm):02499         logph0     pshs  d              save sectors/track
0EA0 8E0000           (          msf.asm):02500                    ldx   #0             start on track 0
0EA3 1F30             (          msf.asm):02501                    tfr   u,d
0EA5 A3E4             (          msf.asm):02502         logph1     subd  ,s
0EA7 2504             (          msf.asm):02503                    bcs   logph5         ..track found
0EA9 3001             (          msf.asm):02504                    leax  1,x
0EAB 20F8             (          msf.asm):02505                    bra   logph1
0EAD E3E1             (          msf.asm):02506         logph5     addd  ,s++
0EAF 5C               (          msf.asm):02507                    incb                 sector number to read
0EB0 3404             (          msf.asm):02508                    pshs  b
0EB2 1F10             (          msf.asm):02509                    tfr   x,d
0EB4 1F98             (          msf.asm):02510                    tfr   b,a
0EB6 E6A810           (          msf.asm):02511                    ldb   ID.hds,y       get number of heads/sides
0EB9 5A               (          msf.asm):02512                    decb                 double sided?
0EBA 2704             (          msf.asm):02513                    beq   logph6         ..no
0EBC 44               (          msf.asm):02514                    lsra                 divide tracks by 2
0EBD C600             (          msf.asm):02515                    ldb   #0
0EBF 59               (          msf.asm):02516                    rolb
0EC0 3402             (          msf.asm):02517         logph6     pshs  a              track number
0EC2 3540             (          msf.asm):02518                    puls  u              MSB=track, LSB=sector
0EC4 35B0             (          msf.asm):02519                    puls  x,y,pc
                      (          msf.asm):02520         
                      (          msf.asm):02521         
                      (          msf.asm):02522         *************************************************
                      (          msf.asm):02523         * Subroutine: writFAT
                      (          msf.asm):02524         *
                      (          msf.asm):02525         * function - write the File Allocation Table
                      (          msf.asm):02526         *
                      (          msf.asm):02527         * On entry:
                      (          msf.asm):02528         *  Y points to path descriptor
                      (          msf.asm):02529         *
                      (          msf.asm):02530         * On exit:
                      (          msf.asm):02531         *  X points to FAT
                      (          msf.asm):02532         *  Carry set if error (error code in B)
                      (          msf.asm):02533         
0EC6 AEA814           (          msf.asm):02534         writFAT    ldx   msp.dtb,y
0EC9 A68822           (          msf.asm):02535                    lda   V.FS,x         get FAT size (in pages)
0ECC 44               (          msf.asm):02536                    lsra                 convert to sectors
0ECD AE8824           (          msf.asm):02537                    ldx   V.FAT,x        point to FAT
0ED0 3452             (          msf.asm):02538                    pshs  a,x,u
0ED2 CE0002           (          msf.asm):02539                    ldu   #$0002         track 0 sector 2
0ED5 5F               (          msf.asm):02540         WFloop     clrb                 side 0
0ED6 8D2B             (          msf.asm):02541                    bsr   dwrite
0ED8 250C             (          msf.asm):02542                    bcs   writFAT9
0EDA 17F285           (          msf.asm):02543                    lbsr  secsiz         get sector size
0EDD 308B             (          msf.asm):02544                    leax  d,x
0EDF 3341             (          msf.asm):02545                    leau  1,u            next sector
0EE1 6AE4             (          msf.asm):02546                    dec   ,s
0EE3 26F0             (          msf.asm):02547                    bne   WFloop
0EE5 5F               (          msf.asm):02548                    clrb
0EE6 35D2             (          msf.asm):02549         writFAT9   puls  a,x,u,pc
                      (          msf.asm):02550         
                      (          msf.asm):02551         
                      (          msf.asm):02552         *******************************************
                      (          msf.asm):02553         * Subroutine: dwritel
                      (          msf.asm):02554         *
                      (          msf.asm):02555         * function - write logical sector
                      (          msf.asm):02556         *
                      (          msf.asm):02557         * On entry:
                      (          msf.asm):02558         *  X points to buffer (512 bytes)
                      (          msf.asm):02559         *  U is logical sector number
                      (          msf.asm):02560         *  Y points to path descriptor
                      (          msf.asm):02561         *
                      (          msf.asm):02562         * On exit:
                      (          msf.asm):02563         *  D is garbage
                      (          msf.asm):02564         *  data written from X
                      (          msf.asm):02565         *  Carry set and error in B if error
                      (          msf.asm):02566         
0EE8 3440             (          msf.asm):02567         dwritel    pshs  u
0EEA EFA83C           (          msf.asm):02568                    stu   msp.sec,y
0EED 8DA1             (          msf.asm):02569                    bsr   logphys        convert logical sector number to track/sector/side
0EEF AE28             (          msf.asm):02570                    ldx   PD.BUF,y
0EF1 A62A             (          msf.asm):02571                    lda   msp.sest,y
0EF3 3402             (          msf.asm):02572                    pshs  a
0EF5 6F2A             (          msf.asm):02573                    clr   msp.sest,y
0EF7 8D0A             (          msf.asm):02574                    bsr   dwrite         write the sector
0EF9 3502             (          msf.asm):02575                    puls  a
0EFB 2502             (          msf.asm):02576                    bcs   dwritel9
0EFD 84EB             (          msf.asm):02577                    anda  #^(SECUPD+SECEXP) ..sector doesn't need update anymore
0EFF A72A             (          msf.asm):02578         dwritel9   sta   msp.sest,y
0F01 35C0             (          msf.asm):02579                    puls  u,pc
                      (          msf.asm):02580         
                      (          msf.asm):02581         
                      (          msf.asm):02582         *******************************************
                      (          msf.asm):02583         * Subroutine: dwrite
                      (          msf.asm):02584         *
                      (          msf.asm):02585         * Function - Write an MSDOS sector
                      (          msf.asm):02586         *
                      (          msf.asm):02587         * On entry:
                      (          msf.asm):02588         *  X points to buffer
                      (          msf.asm):02589         *  U MSB track #, LSB sector #
                      (          msf.asm):02590         *  B - bit 0 set - side 1
                      (          msf.asm):02591         *  Y points to path descriptor
                      (          msf.asm):02592         *
                      (          msf.asm):02593         * On exit:
                      (          msf.asm):02594         *  Carry Set and error in B if error
                      (          msf.asm):02595         
0F03 3410             (          msf.asm):02596         dwrite     pshs  x
0F05 3420             (          msf.asm):02597                    pshs  y
0F07 10AEA814         (          msf.asm):02598                    ldy   msp.dtb,y
0F0B EAA81F           (          msf.asm):02599                    orb   V.dns,y        set bit 2 if 96tpi
0F0E 10AEE4           (          msf.asm):02600                    ldy   ,s             recover y
0F11 10AE26           (          msf.asm):02601                    ldy   PD.RGS,y
0F14 3420             (          msf.asm):02602                    pshs  y
0F16 4F               (          msf.asm):02603                    clra
0F17 1F02             (          msf.asm):02604                    tfr   d,y
0F19 C684             (          msf.asm):02605                    ldb   #SS.SREAD
                      (          msf.asm):02606                ifeq   H6309-1
0F1B 34F8             (          msf.asm):02607                    pshs  pc,u,y,x,dp
0F1D 1038             (          msf.asm):02608                    pshsw
0F1F 3407             (          msf.asm):02609                    pshs  d,cc
                      (          msf.asm):02610                else
                      (          msf.asm):02611                    pshs  pc,u,y,x,dp,d,cc push all parameters
                      (          msf.asm):02612                endc
0F21 10AEE812         (          msf.asm):02613                    ldy   R$Size+4,s           point to path descriptor
0F25 10EF26           (          msf.asm):02614                    sts   PD.RGS,y       save pointer to register params
0F28 170379           (          msf.asm):02615                    lbsr  putstat0       call the driver
0F2B 326E             (          msf.asm):02616                    leas  R$Size,s
0F2D 3530             (          msf.asm):02617                    puls  x,y
0F2F AF26             (          msf.asm):02618                    stx   PD.RGS,y
0F31 3590             (          msf.asm):02619                    puls  x,pc
                      (          msf.asm):02620         
                      (          msf.asm):02621         ********************************************
                      (          msf.asm):02622         * Subroutine: newdate
                      (          msf.asm):02623         *
                      (          msf.asm):02624         * function - place the date in the FD in
                      (          msf.asm):02625         *  the files directory entry
                      (          msf.asm):02626         *
                      (          msf.asm):02627         * On entry:
                      (          msf.asm):02628         *  X points to directory entry
                      (          msf.asm):02629         *  U points to stacked registers (X point to FD)
                      (          msf.asm):02630         *
                      (          msf.asm):02631         * On exit:
                      (          msf.asm):02632         *  date and time placed in entry
                      (          msf.asm):02633         
0F33 3416             (          msf.asm):02634         newdate    pshs  d,x
0F35 327A             (          msf.asm):02635                    leas  -6,s
0F37 9E50             (          msf.asm):02636                    ldx   <D.Proc
0F39 E606             (          msf.asm):02637                    ldb   P$Task,x
0F3B AE46             (          msf.asm):02638                    ldx   R$X,u
0F3D 3003             (          msf.asm):02639                    leax  FD.DAT,x       point to new date
0F3F 8605             (          msf.asm):02640                    lda   #5             size of date info
0F41 3442             (          msf.asm):02641                    pshs  a,u
0F43 3363             (          msf.asm):02642                    leau  3,s
0F45 103F49           (          msf.asm):02643         newdate1   OS9   F$LDABX
0F48 3001             (          msf.asm):02644                    leax  1,x
0F4A A7C0             (          msf.asm):02645                    sta   ,u+
0F4C 6AE4             (          msf.asm):02646                    dec   ,s
0F4E 26F5             (          msf.asm):02647                    bne   newdate1
0F50 6FC4             (          msf.asm):02648                    clr   ,u             ..no seconds info available
0F52 3542             (          msf.asm):02649                    puls  a,u
0F54 2017             (          msf.asm):02650                    bra   setdate0
                      (          msf.asm):02651         
                      (          msf.asm):02652         
                      (          msf.asm):02653         ********************************************
                      (          msf.asm):02654         * Subroutine: setdate
                      (          msf.asm):02655         *
                      (          msf.asm):02656         * function - place the current date and time in
                      (          msf.asm):02657         *  the files directory entry
                      (          msf.asm):02658         *
                      (          msf.asm):02659         * On entry:
                      (          msf.asm):02660         *  X points to directory entry
                      (          msf.asm):02661         *
                      (          msf.asm):02662         * On exit:
                      (          msf.asm):02663         *  date and time placed in entry
                      (          msf.asm):02664         
0F56 3416             (          msf.asm):02665         setdate    pshs  d,x
0F58 327A             (          msf.asm):02666                    leas  -6,s           reserve space for time
0F5A 1F41             (          msf.asm):02667                    tfr   s,x
0F5C DC50             (          msf.asm):02668                    ldd   <D.Proc        user process
0F5E 3406             (          msf.asm):02669                    pshs  d
0F60 DC4A             (          msf.asm):02670                    ldd   <D.SysPrc      system process
0F62 DD50             (          msf.asm):02671                    std   <D.Proc
0F64 103F15           (          msf.asm):02672                    os9   F$TIME
0F67 3510             (          msf.asm):02673                    puls  x
0F69 9F50             (          msf.asm):02674                    stx   <D.Proc        fix user process
0F6B 2551             (          msf.asm):02675                    bcs   setdate9       ..time not set
0F6D AE68             (          msf.asm):02676         setdate0   ldx   8,s            point to time in directory
0F6F 4F               (          msf.asm):02677                    clra
0F70 5F               (          msf.asm):02678                    clrb
0F71 ED8826           (          msf.asm):02679                    std   dir.msd+msd.time,x
0F74 EC64             (          msf.asm):02680                    ldd   4,s            get minutes and seconds
0F76 54               (          msf.asm):02681                    lsrb
0F77 C41F             (          msf.asm):02682                    andb  #%00011111
0F79 3404             (          msf.asm):02683                    pshs  b
0F7B 48               (          msf.asm):02684                    asla
0F7C 48               (          msf.asm):02685                    asla
0F7D 48               (          msf.asm):02686                    asla
0F7E 48               (          msf.asm):02687                    asla
0F7F 48               (          msf.asm):02688                    asla
0F80 AAE0             (          msf.asm):02689                    ora   ,s+            combine with part of minutes
0F82 A78826           (          msf.asm):02690                    sta   dir.msd+msd.time,x
0F85 EC63             (          msf.asm):02691                    ldd   3,s            get hours and minutes
0F87 54               (          msf.asm):02692                    lsrb
0F88 54               (          msf.asm):02693                    lsrb
0F89 54               (          msf.asm):02694                    lsrb
0F8A C407             (          msf.asm):02695                    andb  #%00000111
0F8C 3404             (          msf.asm):02696                    pshs  b
0F8E 48               (          msf.asm):02697                    lsla
0F8F 48               (          msf.asm):02698                    lsla
0F90 48               (          msf.asm):02699                    lsla
0F91 AAE0             (          msf.asm):02700                    ora   ,s+
0F93 A78827           (          msf.asm):02701                    sta   dir.msd+msd.time+1,x
0F96 4F               (          msf.asm):02702                    clra
0F97 5F               (          msf.asm):02703                    clrb
0F98 ED8828           (          msf.asm):02704                    std   dir.msd+msd.date,x
0F9B EC61             (          msf.asm):02705                    ldd   1,s            get month and day
0F9D C41F             (          msf.asm):02706                    andb  #$1f
0F9F 3404             (          msf.asm):02707                    pshs  b
0FA1 48               (          msf.asm):02708                    lsla
0FA2 48               (          msf.asm):02709                    lsla
0FA3 48               (          msf.asm):02710                    lsla
0FA4 48               (          msf.asm):02711                    lsla
0FA5 48               (          msf.asm):02712                    lsla
0FA6 AAE0             (          msf.asm):02713                    ora   ,s+
0FA8 A78828           (          msf.asm):02714                    sta   dir.msd+msd.date,x
0FAB ECE4             (          msf.asm):02715                    ldd   ,s             get year and month
0FAD 54               (          msf.asm):02716                    lsrb
0FAE 54               (          msf.asm):02717                    lsrb
0FAF 54               (          msf.asm):02718                    lsrb
0FB0 C401             (          msf.asm):02719                    andb  #1
0FB2 8050             (          msf.asm):02720                    suba  #80            MSDOS is base 1980 not 1900
0FB4 2508             (          msf.asm):02721                    bcs   setdate9       ..number too low
0FB6 3404             (          msf.asm):02722                    pshs  b
0FB8 48               (          msf.asm):02723                    lsla
0FB9 AAE0             (          msf.asm):02724                    ora   ,s+
0FBB A78829           (          msf.asm):02725                    sta   dir.msd+msd.date+1,x
0FBE 3266             (          msf.asm):02726         setdate9   leas  6,s            fix stack
0FC0 3596             (          msf.asm):02727                    puls  d,x,pc
                      (          msf.asm):02728         
                      (          msf.asm):02729         
                      (          msf.asm):02730         *******************************************************
                      (          msf.asm):02731         * Subroutine: delete
                      (          msf.asm):02732         *
                      (          msf.asm):02733         * function - delete a file
                      (          msf.asm):02734         *
                      (          msf.asm):02735         * On entry:
                      (          msf.asm):02736         *  Y points to path descriptor
                      (          msf.asm):02737         *  U points to stacked registers
                      (          msf.asm):02738         *
                      (          msf.asm):02739         * On exit:
                      (          msf.asm):02740         *  Carry set and error in B if error
                      (          msf.asm):02741         
0FC2                  (          msf.asm):02742         delete
                      (          msf.asm):02743         *** rev 2.3
                      (          msf.asm):02744         * lda PD.CPR,y
                      (          msf.asm):02745         * sta msp.ncpr,y to lock out other processes
                      (          msf.asm):02746         ***
0FC2 A621             (          msf.asm):02747                    lda   PD.MOD,y       get access mode
0FC4 8A42             (          msf.asm):02748                    ora   #SHARE.+WRITE.
0FC6 A721             (          msf.asm):02749                    sta   PD.MOD,y       make sure no one else is using file
0FC8 6A22             (          msf.asm):02750                    dec   PD.CNT,y       ..so file will close completely
0FCA 17F674           (          msf.asm):02751                    lbsr  open           open file
0FCD 2528             (          msf.asm):02752                    bcs   derror
0FCF AEA834           (          msf.asm):02753                    ldx   msp.dir,y
0FD2 C6E5             (          msf.asm):02754                    ldb   #$E5           deleted entry mark
0FD4 E78810           (          msf.asm):02755                    stb   dir.msd+msd.name,x
0FD7 86DF             (          msf.asm):02756                    lda   #^attr.AR      set all but the archive bit so entry (not date) will be updated
0FD9 A702             (          msf.asm):02757                    sta   dir.chg,x
0FDB EC882A           (          msf.asm):02758                    ldd   dir.msd+msd.strt,x get starting cluster #
0FDE 1E89             (          msf.asm):02759                    exg   a,b            to MOTOROLA
0FE0 10830001         (          msf.asm):02760                    cmpd  #1             is it ROOT or entire disk?
0FE4 2312             (          msf.asm):02761                    bls   CantDel        ..no permission
0FE6 AEA814           (          msf.asm):02762                    ldx   msp.dtb,y
0FE9 AE8824           (          msf.asm):02763                    ldx   V.FAT,x        point to file allocation table
0FEC 17F098           (          msf.asm):02764                    lbsr  delchain       delete the cluster chain for this file
0FEF 1026F9EF         (          msf.asm):02765                    lbne  close          close the file
0FF3 C6D5             (          msf.asm):02766         damaged    ldb   #E$NES         ..return non-existent segment (structure damaged)
0FF5 2003             (          msf.asm):02767                    bra   delerr
0FF7 39               (          msf.asm):02768         derror     rts
                      (          msf.asm):02769         
0FF8 C6D6             (          msf.asm):02770         CantDel    ldb   #E$FNA         file not accessible
0FFA 43               (          msf.asm):02771         delerr     coma                 set carry
0FFB 16FA0C           (          msf.asm):02772                    lbra  closef
                      (          msf.asm):02773         
                      (          msf.asm):02774         * return carry set if position is at end of file
0FFE AEA834           (          msf.asm):02775         iseof      ldx   msp.dir,y
1001 E6881B           (          msf.asm):02776                    ldb   dir.msd+msd.attr,x get file attribute
1004 C510             (          msf.asm):02777                    bitb  #attr.DR       is it subdirectory?
1006 2613             (          msf.asm):02778                    bne   isnteof        ..yes
1008 EC882E           (          msf.asm):02779                    ldd   dir.msd+msd.size+2,x get MSW of file size
100B A12B             (          msf.asm):02780                    cmpa  msp.pos,y
100D 250E             (          msf.asm):02781                    blo   itiseof        ..its past end of file
100F 220A             (          msf.asm):02782                    bhi   isnteof        ..its not end of file
1011 EC882C           (          msf.asm):02783                    ldd   dir.msd+msd.size,x get LSW of file size
1014 1E89             (          msf.asm):02784                    exg   a,b            convert to MOTOROLA
1016 10A32C           (          msf.asm):02785                    cmpd  msp.pos+1,y
1019 2302             (          msf.asm):02786                    bls   itiseof        ..its at or past end of file
101B 5F               (          msf.asm):02787         isnteof    clrb
101C 39               (          msf.asm):02788                    rts
101D 53               (          msf.asm):02789         itiseof    comb
101E 39               (          msf.asm):02790                    rts                  .. return carry set if end of file
                      (          msf.asm):02791         
                      (          msf.asm):02792         
                      (          msf.asm):02793         *****************************************************
                      (          msf.asm):02794         * getstat - get file options
                      (          msf.asm):02795         *
                      (          msf.asm):02796         * On entry:
                      (          msf.asm):02797         *  Y points to path descriptor
                      (          msf.asm):02798         *  U points to stacked registers
                      (          msf.asm):02799         *
                      (          msf.asm):02800         * On exit:
                      (          msf.asm):02801         *  Carry set and error in B if error
                      (          msf.asm):02802         *  Some stacked registers changed depending on status code
                      (          msf.asm):02803         
101F E642             (          msf.asm):02804         getstat    ldb   R$B,u          get status code
1021 C100             (          msf.asm):02805                    cmpb  #SS.Opt
1023 2706             (          msf.asm):02806                    beq   greturn        ..return nothing
1025 C101             (          msf.asm):02807                    cmpb  #SS.Ready
1027 2603             (          msf.asm):02808                    bne   getst2         ..no
1029 6F42             (          msf.asm):02809         noteof     clr   R$B,u          ..return ready
102B 39               (          msf.asm):02810         greturn    rts
                      (          msf.asm):02811         
102C C106             (          msf.asm):02812         getst2     cmpb  #SS.EOF
102E 2608             (          msf.asm):02813                    bne   getst3
1030 8DCC             (          msf.asm):02814                    bsr   iseof          is it end of file?
1032 24F5             (          msf.asm):02815                    bcc   noteof         ..no
1034 53               (          msf.asm):02816                    comb
1035 C6D3             (          msf.asm):02817                    ldb   #E$EOF         return end of file error
1037 39               (          msf.asm):02818                    rts
                      (          msf.asm):02819         
1038 C102             (          msf.asm):02820         getst3     cmpb  #SS.Size       get file size
103A 2612             (          msf.asm):02821                    bne   getst4         ..no
103C AEA834           (          msf.asm):02822                    ldx   msp.dir,y
103F EC882C           (          msf.asm):02823                    ldd   dir.msd+msd.size,x get LSW
1042 1E89             (          msf.asm):02824                    exg   a,b
1044 ED4A             (          msf.asm):02825                    std   R$U,u          LSW returned in U
1046 EC882E           (          msf.asm):02826                    ldd   dir.msd+msd.size+2,x
1049 1E89             (          msf.asm):02827                    exg   a,b
104B ED46             (          msf.asm):02828                    std   R$X,u          MSW returned in X
104D 39               (          msf.asm):02829                    rts
                      (          msf.asm):02830         
104E C105             (          msf.asm):02831         getst4     cmpb  #SS.Pos        get file position
1050 260A             (          msf.asm):02832                    bne   getst5         ..no
1052 EC2C             (          msf.asm):02833                    ldd   msp.pos+1,y    get LSW
1054 ED4A             (          msf.asm):02834                    std   R$U,u
1056 E62B             (          msf.asm):02835                    ldb   msp.pos,y      get MSW
1058 4F               (          msf.asm):02836                    clra
1059 ED46             (          msf.asm):02837                    std   R$X,u
105B 39               (          msf.asm):02838                    rts
                      (          msf.asm):02839         
105C C10F             (          msf.asm):02840         getst5     cmpb  #SS.FD         get FD sector?
105E 1026008C         (          msf.asm):02841                    lbne  getst6         ..no
1062 3270             (          msf.asm):02842                    leas  -16,s          leave room for first part of FD sector
1064 AEA834           (          msf.asm):02843                    ldx   msp.dir,y
1067 E6881B           (          msf.asm):02844                    ldb   dir.msd+msd.attr,x get file attribute
106A 8603             (          msf.asm):02845                    lda   #READ.+WRITE.
106C C501             (          msf.asm):02846                    bitb  #attr.RO       read only?
106E 2702             (          msf.asm):02847                    beq   getst51        ..no
1070 8601             (          msf.asm):02848                    lda   #READ.
1072 C510             (          msf.asm):02849         getst51    bitb  #attr.DR       directory?
1074 2702             (          msf.asm):02850                    beq   getst52        ..no
1076 8A80             (          msf.asm):02851                    ora   #DIR.
1078 A7E4             (          msf.asm):02852         getst52    sta   ,s             place attribute in FD buffer
107A 4F               (          msf.asm):02853                    clra
107B 5F               (          msf.asm):02854                    clrb
107C ED61             (          msf.asm):02855                    std   1,s            owner is user 0
107E A768             (          msf.asm):02856                    sta   8,s            link count is 0
1080 EC882C           (          msf.asm):02857                    ldd   dir.msd+msd.size,x get LS file size
1083 1E89             (          msf.asm):02858                    exg   a,b
1085 ED6B             (          msf.asm):02859                    std   11,s
1087 EC882E           (          msf.asm):02860                    ldd   dir.msd+msd.size+2,x get MS file size
108A 1E89             (          msf.asm):02861                    exg   a,b
108C ED69             (          msf.asm):02862                    std   9,s
108E EC8826           (          msf.asm):02863                    ldd   dir.msd+msd.time,x get time
1091 48               (          msf.asm):02864                    lsla
1092 59               (          msf.asm):02865                    rolb
1093 48               (          msf.asm):02866                    lsla
1094 59               (          msf.asm):02867                    rolb
1095 48               (          msf.asm):02868                    lsla
1096 59               (          msf.asm):02869                    rolb
1097 C43F             (          msf.asm):02870                    andb  #%00111111
1099 E767             (          msf.asm):02871                    stb   7,s
109B E68827           (          msf.asm):02872                    ldb   dir.msd+msd.time+1,x get hour
109E 54               (          msf.asm):02873                    lsrb
109F 54               (          msf.asm):02874                    lsrb
10A0 54               (          msf.asm):02875                    lsrb
10A1 E766             (          msf.asm):02876                    stb   6,s
10A3 EC8828           (          msf.asm):02877                    ldd   dir.msd+msd.date,x get date
10A6 841F             (          msf.asm):02878                    anda  #%00011111
10A8 A765             (          msf.asm):02879                    sta   5,s            day
10AA A76F             (          msf.asm):02880                    sta   15,s
10AC EC8828           (          msf.asm):02881                    ldd   dir.msd+msd.date,x
10AF 54               (          msf.asm):02882                    lsrb
10B0 46               (          msf.asm):02883                    rora
10B1 44               (          msf.asm):02884                    lsra
10B2 44               (          msf.asm):02885                    lsra
10B3 44               (          msf.asm):02886                    lsra
10B4 44               (          msf.asm):02887                    lsra
10B5 A764             (          msf.asm):02888                    sta   4,s
10B7 A76E             (          msf.asm):02889                    sta   14,s           month
10B9 A68829           (          msf.asm):02890                    lda   dir.msd+msd.date+1,x get year
10BC 44               (          msf.asm):02891                    lsra
10BD 8B50             (          msf.asm):02892                    adda  #80
10BF A763             (          msf.asm):02893                    sta   3,s
10C1 A76D             (          msf.asm):02894                    sta   13,s           year
10C3 9E50             (          msf.asm):02895                    ldx   <D.Proc
10C5 E606             (          msf.asm):02896                    ldb   P$Task,x       get DAT task number
10C7 10AE48           (          msf.asm):02897                    ldy   R$Y,u          get byte count
10CA 271E             (          msf.asm):02898                    beq   getst58
10CC AE46             (          msf.asm):02899                    ldx   R$X,u          point to FD
10CE 33E810           (          msf.asm):02900                    leau  16,s
10D1 3440             (          msf.asm):02901                    pshs  u
10D3 3362             (          msf.asm):02902                    leau  2,s
10D5 A6C0             (          msf.asm):02903         getst55    lda   ,u+
10D7 103F4A           (          msf.asm):02904         getst56    OS9   F$STABX
10DA 3001             (          msf.asm):02905                    leax  1,x
10DC 313F             (          msf.asm):02906                    leay  -1,y
10DE 2708             (          msf.asm):02907                    beq   getst57
10E0 11A3E4           (          msf.asm):02908                    cmpu  ,s             into segment list?
10E3 25F0             (          msf.asm):02909                    blo   getst55        ..no
10E5 4F               (          msf.asm):02910                    clra
10E6 20EF             (          msf.asm):02911                    bra   getst56
10E8 3262             (          msf.asm):02912         getst57    leas  2,s            fix stack
10EA 32E810           (          msf.asm):02913         getst58    leas  16,s
10ED 39               (          msf.asm):02914                    rts
                      (          msf.asm):02915         
10EE C11C             (          msf.asm):02916         getst6     cmpb  #SS.ATTR       get file attribute?
10F0 2609             (          msf.asm):02917                    bne   getst7         ..no
10F2 AEA834           (          msf.asm):02918                    ldx   msp.dir,y
10F5 E6881B           (          msf.asm):02919                    ldb   dir.msd+msd.attr,x get file attribute
10F8 E747             (          msf.asm):02920                    stb   R$X+1,u        return attribute in LS byte of X
10FA 39               (          msf.asm):02921                    rts
                      (          msf.asm):02922         
10FB                  (          msf.asm):02923         getst7
10FB 8609             (          msf.asm):02924         getstat0   lda   #D$GSTA
                      (          msf.asm):02925         
                      (          msf.asm):02926         
                      (          msf.asm):02927         ***********************************************************
                      (          msf.asm):02928         * CallDrvr - call a device driver subroutine
                      (          msf.asm):02929         *
                      (          msf.asm):02930         * On entry:
                      (          msf.asm):02931         *  Y points to path descriptor
                      (          msf.asm):02932         *  A is offset in subroutine dispatch table
                      (          msf.asm):02933         *
                      (          msf.asm):02934         * On exit:
                      (          msf.asm):02935         *  carry set and error in B if error
                      (          msf.asm):02936         
10FD 3476             (          msf.asm):02937         CallDrvr   pshs  d,x,y,u
10FF EE23             (          msf.asm):02938                    ldu   PD.DEV,y       point to device table
1101 EE42             (          msf.asm):02939                    ldu   V$STAT,u       point to static storage
1103 2003             (          msf.asm):02940                    bra   CallDr1
1105 103F2B           (          msf.asm):02941         CallDr0    OS9   F$IOQu
1108 A644             (          msf.asm):02942         CallDr1    lda   V.Busy,u       is device busy?
                      (          msf.asm):02943         *** rev 2.3
                      (          msf.asm):02944         * beq CallDr2
                      (          msf.asm):02945         * cmpa PD.CPR,y
                      (          msf.asm):02946         ***
110A 26F9             (          msf.asm):02947                    bne   CallDr0        ..yes, wait
110C A625             (          msf.asm):02948         CallDr2    lda   PD.CPR,y
110E A744             (          msf.asm):02949                    sta   V.Busy,u       current process is using device
1110 ECE4             (          msf.asm):02950                    ldd   ,s
1112 AE62             (          msf.asm):02951                    ldx   2,s
1114 8D0B             (          msf.asm):02952                    bsr   CallDr3        call driver subroutine
1116 10AE64           (          msf.asm):02953                    ldy   4,s
1119 8D18             (          msf.asm):02954                    bsr   reldrvr        release driver for other's use
111B 2402             (          msf.asm):02955                    bcc   CallDr9
111D E761             (          msf.asm):02956                    stb   1,s
111F 35F6             (          msf.asm):02957         CallDr9    puls  d,x,y,u,pc
                      (          msf.asm):02958         
1121 3496             (          msf.asm):02959         CallDr3    pshs  d,x,pc
1123 AE23             (          msf.asm):02960                    ldx   PD.DEV,y
1125 EC84             (          msf.asm):02961                    ldd   V$DRIV,x       point to driver module
1127 AE84             (          msf.asm):02962                    ldx   V$DRIV,x
1129 E309             (          msf.asm):02963                    addd  M$Exec,x       get execution offset
112B EBE4             (          msf.asm):02964                    addb  ,s             add execution offset
112D 8900             (          msf.asm):02965                    adca  #0
112F ED64             (          msf.asm):02966                    std   4,s
1131 3596             (          msf.asm):02967                    puls  d,x,pc         go do driver subroutine
                      (          msf.asm):02968         
                      (          msf.asm):02969         * release the driver software for use by another process
                      (          msf.asm):02970         * Condition Codes not affected
1133 3443             (          msf.asm):02971         reldrvr    pshs  a,cc,u
1135 EE23             (          msf.asm):02972                    ldu   PD.DEV,y       point to device table
1137 EE42             (          msf.asm):02973                    ldu   V$STAT,u       point to static storage
                      (          msf.asm):02974         *** rev 2.3
                      (          msf.asm):02975         * lda PD.CPR,y
                      (          msf.asm):02976         * cmpa V.Busy,u
                      (          msf.asm):02977         * bne reldrvr9 ..this process doesn't control driver
                      (          msf.asm):02978         * lda msp.ncpr,y
                      (          msf.asm):02979         * sta V.Busy,u device is no longer busy (maybe)
                      (          msf.asm):02980         ***
1139 6F44             (          msf.asm):02981                    clr   V.Busy,u
                      (          msf.asm):02982         ***
113B 35C3             (          msf.asm):02983         reldrvr9   puls  a,cc,u,pc
                      (          msf.asm):02984         
                      (          msf.asm):02985         
                      (          msf.asm):02986         *****************************************************
                      (          msf.asm):02987         * putstat - set file options
                      (          msf.asm):02988         *
                      (          msf.asm):02989         * On entry:
                      (          msf.asm):02990         *  Y points to path descriptor
                      (          msf.asm):02991         *  U points to stacked registers
                      (          msf.asm):02992         *
                      (          msf.asm):02993         * On exit:
                      (          msf.asm):02994         *  Carry set and error in B if error
                      (          msf.asm):02995         *  Some stacked registers changed depending on status code
                      (          msf.asm):02996         
113D E642             (          msf.asm):02997         putstat    ldb   R$B,u          get status code
113F C100             (          msf.asm):02998                    cmpb  #SS.Opt
1141 2601             (          msf.asm):02999                    bne   putst2
1143 39               (          msf.asm):03000                    rts
                      (          msf.asm):03001         
1144 C102             (          msf.asm):03002         putst2     cmpb  #SS.Size       set file size?
1146 266B             (          msf.asm):03003                    bne   putst3
1148 EC46             (          msf.asm):03004                    ldd   R$X,u          get MSW of new size
114A 2626             (          msf.asm):03005                    bne   putst22
114C EC4A             (          msf.asm):03006                    ldd   R$U,u          get LSW of new size
114E 2622             (          msf.asm):03007                    bne   putst22
1150 AEA834           (          msf.asm):03008                    ldx   msp.dir,y
1153 EC882A           (          msf.asm):03009                    ldd   dir.msd+msd.strt,x get starting cluster
1156 1E89             (          msf.asm):03010                    exg   a,b
1158 10830FF8         (          msf.asm):03011                    cmpd  #$FF8          last cluster in file?
115C 2713             (          msf.asm):03012                    beq   putst21        ..yes, file is right size
115E AEA814           (          msf.asm):03013                    ldx   msp.dtb,y
1161 AE8824           (          msf.asm):03014                    ldx   V.FAT,x        point to FAT
1164 17EF20           (          msf.asm):03015                    lbsr  delchain       delete the file cluster chain
1167 AEA834           (          msf.asm):03016                    ldx   msp.dir,y
116A CCFF0F           (          msf.asm):03017                    ldd   #$FF0F
116D ED882A           (          msf.asm):03018                    std   dir.msd+msd.strt,x set starting cluster number
1170 5F               (          msf.asm):03019                    clrb
1171 39               (          msf.asm):03020         putst21    rts
1172 EC4A             (          msf.asm):03021         putst22    ldd   R$U,u          get LSW of new size
1174 830001           (          msf.asm):03022                    subd  #1             convert to base 0
1177 1F89             (          msf.asm):03023                    tfr   a,b
1179 A647             (          msf.asm):03024                    lda   R$X+1,u        get third byte of new size
117B 8200             (          msf.asm):03025                    sbca  #0
117D 17F735           (          msf.asm):03026                    lbsr  expand0        and expand file
1180 25EF             (          msf.asm):03027                    bcs   putst21
1182 ECA83A           (          msf.asm):03028                    ldd   msp.cls,y      get last cluster number
1185 AEA814           (          msf.asm):03029                    ldx   msp.dtb,y
1188 AE8824           (          msf.asm):03030                    ldx   V.FAT,x        point to FAT
118B 17EF54           (          msf.asm):03031                    lbsr  findnext
118E 10830FF8         (          msf.asm):03032                    cmpd  #$0FF8         last cluster?
1192 240C             (          msf.asm):03033                    bhs   putst24        ..yes
1194 17EEF0           (          msf.asm):03034                    lbsr  delchain       delete remainder of chain
1197 ECA83A           (          msf.asm):03035                    ldd   msp.cls,y
119A CE0FFF           (          msf.asm):03036                    ldu   #$FFF
119D 17EF08           (          msf.asm):03037                    lbsr  updFAT         mark last cluster in file
11A0 EE26             (          msf.asm):03038         putst24    ldu   msp.rgs,y      point to stacked params
11A2 AEA834           (          msf.asm):03039                    ldx   msp.dir,y
11A5 EC4A             (          msf.asm):03040                    ldd   R$U,u          get LSW
11A7 1E89             (          msf.asm):03041                    exg   a,b
11A9 ED882C           (          msf.asm):03042                    std   dir.msd+msd.size,x
11AC EC46             (          msf.asm):03043                    ldd   R$X,u          get MSW
11AE E7882E           (          msf.asm):03044                    stb   dir.msd+msd.size+2,x set new file size
11B1 5F               (          msf.asm):03045                    clrb
11B2 39               (          msf.asm):03046                    rts
                      (          msf.asm):03047         
11B3 C10F             (          msf.asm):03048         putst3     cmpb  #SS.FD         update file descriptor?
11B5 2608             (          msf.asm):03049                    bne   putst4
11B7 AEA834           (          msf.asm):03050                    ldx   msp.dir,y      point to directory entry
11BA 17FD76           (          msf.asm):03051                    lbsr  newdate        get the new date
11BD 207D             (          msf.asm):03052                    bra   putst65        update the directory entry
                      (          msf.asm):03053         
11BF C111             (          msf.asm):03054         putst4     cmpb  #SS.Lock       lock/release record?
11C1 2601             (          msf.asm):03055                    bne   putst5         ..no
11C3 39               (          msf.asm):03056                    rts
                      (          msf.asm):03057         
11C4 C110             (          msf.asm):03058         putst5     cmpb  #SS.Ticks      set lockout duration?
11C6 2601             (          msf.asm):03059                    bne   putst6         ..no
11C8 39               (          msf.asm):03060         putst55    rts
                      (          msf.asm):03061         
11C9 C11C             (          msf.asm):03062         putst6     cmpb  #SS.ATTR       set file attribute?
11CB 2677             (          msf.asm):03063                    bne   putst7         ..no
11CD AEA834           (          msf.asm):03064                    ldx   msp.dir,y
11D0 E647             (          msf.asm):03065                    ldb   R$X+1,u        return attribute in LS byte of X
11D2 1F98             (          msf.asm):03066                    tfr   b,a
11D4 E8881B           (          msf.asm):03067                    eorb  dir.msd+msd.attr,x
11D7 C410             (          msf.asm):03068                    andb  #attr.DR       has directory changed
11D9 275C             (          msf.asm):03069                    beq   putst64        ..no
11DB E6881B           (          msf.asm):03070                    ldb   dir.msd+msd.attr,x
11DE C510             (          msf.asm):03071                    bitb  #attr.DR       are we removing directory attribute?
11E0 2753             (          msf.asm):03072                    beq   putst63        ..no
                      (          msf.asm):03073         * make sure this is only path to file
11E2 ECA836           (          msf.asm):03074                    ldd   msp.dnxt,y
11E5 10A3A838         (          msf.asm):03075                    cmpd  msp.dprv,y
11E9 2704             (          msf.asm):03076                    beq   putst600       ..this is the only path to the directory
11EB 53               (          msf.asm):03077                    comb
11EC C6FD             (          msf.asm):03078                    ldb   #E$Share       report error, can't change to regular file
11EE 39               (          msf.asm):03079                    rts                  because another process has directory open
                      (          msf.asm):03080         * make sure directory is empty
                      (          msf.asm):03081         * read the first sector
11EF AE2B             (          msf.asm):03082         putst600   ldx   msp.pos,y
11F1 4F               (          msf.asm):03083                    clra
11F2 5F               (          msf.asm):03084                    clrb
11F3 ED2B             (          msf.asm):03085                    std   msp.pos,y
11F5 17F90C           (          msf.asm):03086                    lbsr  readit
11F8 AF2B             (          msf.asm):03087                    stx   msp.pos,y
11FA 2026             (          msf.asm):03088                    bra   putst620
11FC 17F001           (          msf.asm):03089         putst60    lbsr  secsize        get sector size
11FF 44               (          msf.asm):03090                    lsra
1200 56               (          msf.asm):03091                    rorb
1201 44               (          msf.asm):03092                    lsra
1202 56               (          msf.asm):03093                    rorb
1203 44               (          msf.asm):03094                    lsra
1204 56               (          msf.asm):03095                    rorb
1205 44               (          msf.asm):03096                    lsra
1206 56               (          msf.asm):03097                    rorb
1207 44               (          msf.asm):03098                    lsra
1208 56               (          msf.asm):03099                    rorb                 sector size / 32 = directory entries/sector
1209 AE28             (          msf.asm):03100                    ldx   PD.BUF,y       point to data buffer
120B A684             (          msf.asm):03101         putst61    lda   ,x
120D 271F             (          msf.asm):03102                    beq   putst630
120F 812E             (          msf.asm):03103                    cmpa  #'.            . or .. entry?
1211 2706             (          msf.asm):03104                    beq   putst610       ..yes, skip it
1213 81E5             (          msf.asm):03105                    cmpa  #$E5           deleted?
1215 1026F8AF         (          msf.asm):03106                    lbne  permiss        ..no permission, directory not empty
1219 308820           (          msf.asm):03107         putst610   leax  MSDSIZE,x      point to next entry
121C 5A               (          msf.asm):03108                    decb
121D 26EC             (          msf.asm):03109                    bne   putst61        ..next sector
121F 17F900           (          msf.asm):03110         putst62    lbsr  readnxt
1222 8600             (          msf.asm):03111         putst620   lda   #0
1224 A72A             (          msf.asm):03112                    sta   msp.sest,y
1226 24D4             (          msf.asm):03113                    bcc   putst60
1228 C1D3             (          msf.asm):03114                    cmpb  #E$EOF
122A 2702             (          msf.asm):03115                    beq   putst630       ..yes, directory is empty
122C 43               (          msf.asm):03116                    coma                 set carry
122D 39               (          msf.asm):03117                    rts
122E A647             (          msf.asm):03118         putst630   lda   R$X+1,u
1230 AEA834           (          msf.asm):03119                    ldx   msp.dir,y
1233 2002             (          msf.asm):03120                    bra   putst64
1235 84EF             (          msf.asm):03121         putst63    anda  #^attr.DR      make sure directory bit is clear
1237 843F             (          msf.asm):03122         putst64    anda  #attr.DR+attr.AR+attr.VL+attr.SY+attr.HD+attr.RO
1239 A7881B           (          msf.asm):03123                    sta   dir.msd+msd.attr,x set file attribute
123C E602             (          msf.asm):03124         putst65    ldb   dir.chg,x
123E CADF             (          msf.asm):03125                    orb   #^attr.AR      directory entry is changed
1240 17F83F           (          msf.asm):03126                    lbsr  writdir0       update the directory
1243 39               (          msf.asm):03127         putst69    rts
                      (          msf.asm):03128         
1244 C186             (          msf.asm):03129         putst7     cmpb  #SS.RENAM      rename file?
1246 2654             (          msf.asm):03130                    bne   putst8         ..no
1248 C60B             (          msf.asm):03131                    ldb   #11
124A 8620             (          msf.asm):03132         putst71    lda   #SP
124C 3402             (          msf.asm):03133                    pshs  a
124E 5A               (          msf.asm):03134                    decb
124F 26F9             (          msf.asm):03135                    bne   putst71
1251 9E50             (          msf.asm):03136                    ldx   <D.Proc
1253 E606             (          msf.asm):03137                    ldb   P$Task,x       DAT task number
1255 AE46             (          msf.asm):03138                    ldx   R$X,u          point to new name
1257 1F43             (          msf.asm):03139                    tfr   s,u            point to place for converted name
1259 17F21F           (          msf.asm):03140                    lbsr  movename
125C 270B             (          msf.asm):03141                    beq   putst79        ..bad name
125E 4D               (          msf.asm):03142                    tsta
125F 2B0E             (          msf.asm):03143                    bmi   putst72
1261 8120             (          msf.asm):03144                    cmpa  #SP            space terminated?
1263 230A             (          msf.asm):03145                    bls   putst72        ..yes
1265 812C             (          msf.asm):03146                    cmpa  #',            comma terminated?
1267 2706             (          msf.asm):03147                    beq   putst72
1269 326B             (          msf.asm):03148         putst79    leas  11,s
126B 53               (          msf.asm):03149                    comb
126C C6D7             (          msf.asm):03150                    ldb   #E$BPNam       ..bad name
126E 39               (          msf.asm):03151                    rts
                      (          msf.asm):03152         
126F 3420             (          msf.asm):03153         putst72    pshs  y
1271 103F10           (          msf.asm):03154                    os9   F$PrsNam       skip trailing spaces
1274 1F21             (          msf.asm):03155                    tfr   y,x
1276 3520             (          msf.asm):03156                    puls  y
1278 EE26             (          msf.asm):03157                    ldu   PD.RGS,y
127A AF46             (          msf.asm):03158                    stx   R$X,u
127C AEA834           (          msf.asm):03159                    ldx   msp.dir,y
127F 308810           (          msf.asm):03160                    leax  dir.msd,x
1282 E60B             (          msf.asm):03161                    ldb   msd.attr,x     get file attribute
1284 C510             (          msf.asm):03162                    bitb  #attr.DR       subdirectory?
1286 2706             (          msf.asm):03163                    beq   putst73        ..no
1288 E668             (          msf.asm):03164                    ldb   8,s            is there a file extension?
128A C120             (          msf.asm):03165                    cmpb  #SP
128C 26DB             (          msf.asm):03166                    bne   putst79        ..yes, error
128E C60B             (          msf.asm):03167         putst73    ldb   #11
1290 3502             (          msf.asm):03168         putst74    puls  a
1292 A780             (          msf.asm):03169                    sta   ,x+
1294 5A               (          msf.asm):03170                    decb
1295 26F9             (          msf.asm):03171                    bne   putst74        copy new directory name
1297 AEA834           (          msf.asm):03172                    ldx   msp.dir,y
129A 20A0             (          msf.asm):03173                    bra   putst65        and update directory entry
                      (          msf.asm):03174         
129C C187             (          msf.asm):03175         putst8     cmpb  #SS.ALLOW      allow writes to directories and entire disk?
129E 2604             (          msf.asm):03176                    bne   putst9         ..no
12A0 6FA816           (          msf.asm):03177                    clr   msp.wrt,y      allow writes
12A3 39               (          msf.asm):03178                    rts
                      (          msf.asm):03179         
12A4                  (          msf.asm):03180         putst9
                      (          msf.asm):03181         
12A4 860C             (          msf.asm):03182         putstat0   lda   #D$PSTA
12A6 16FE54           (          msf.asm):03183                    lbra  CallDrvr       call driver putstat routine
                      (          msf.asm):03184         
                      (          msf.asm):03185         
                      (          msf.asm):03186         *******************************************************
                      (          msf.asm):03187         * Subroutine dispatch table
                      (          msf.asm):03188         
12A9                  (          msf.asm):03189         modexec
12A9 16F380           (          msf.asm):03190                    lbra  create
12AC 16F392           (          msf.asm):03191                    lbra  open
12AF 16F6AE           (          msf.asm):03192                    lbra  makdir
12B2 16F817           (          msf.asm):03193                    lbra  chgdir
12B5 16FD0A           (          msf.asm):03194                    lbra  delete
12B8 16F65B           (          msf.asm):03195                    lbra  seek
12BB 16F43C           (          msf.asm):03196                    lbra  read
12BE 16F4F2           (          msf.asm):03197                    lbra  write
12C1 16F441           (          msf.asm):03198                    lbra  readln
12C4 16F4EF           (          msf.asm):03199                    lbra  writeln
12C7 16FD55           (          msf.asm):03200                    lbra  getstat
12CA 16FE70           (          msf.asm):03201                    lbra  putstat
12CD 16F712           (          msf.asm):03202                    lbra  close
                      (          msf.asm):03203         
12D0 BE4BAF           (          msf.asm):03204                    emod
     12D3             (          msf.asm):03205         modlen     equ   *
                      (          msf.asm):03206                    end
