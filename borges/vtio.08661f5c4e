                      (/home/strick/6809):00001         ********************************************************************
                      (/home/strick/6809):00002         * VTIO - NitrOS-9 Level 1 Video Terminal I/O driver
                      (/home/strick/6809):00003         *
                      (/home/strick/6809):00004         * $Id$
                      (/home/strick/6809):00005         *
                      (/home/strick/6809):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/6809):00007         * Comment
                      (/home/strick/6809):00008         * ------------------------------------------------------------------
                      (/home/strick/6809):00009         *  12      ????/??/??  ???
                      (/home/strick/6809):00010         * From Tandy OS-9 Level One VR 02.00.00.
                      (/home/strick/6809):00011         *
                      (/home/strick/6809):00012         *  12r1    2003/09/11  Rodney V. Hamilton
                      (/home/strick/6809):00013         * Modified key table to include $7F, $1D, $1E and $1F codes.
                      (/home/strick/6809):00014         *
                      (/home/strick/6809):00015         *          2004/11/28  P.Harvey-Smith
                      (/home/strick/6809):00016         * Added code to remap Dragon keyboard inputs to CoCo format.
                      (/home/strick/6809):00017         *
                      (/home/strick/6809):00018         *          2004/12/02  P.Harvey-Smith
                      (/home/strick/6809):00019         * Changed the way that the entry points for the co?? drivers are
                      (/home/strick/6809):00020         * called, so that we can have up to 7 different drivers.
                      (/home/strick/6809):00021         * Integrated changes needed for the co51 driver from Dragon Data
                      (/home/strick/6809):00022         * OS-9.
                      (/home/strick/6809):00023         *
                      (/home/strick/6809):00024         *          2005/04/24  P.Harvey-Smith
                      (/home/strick/6809):00025         * Added cursor flash call to AltIRQ routine, this decrements a
                      (/home/strick/6809):00026         * counter and when zero calls the routine contained in V.Flash
                      (/home/strick/6809):00027         * ccio initialises this to point to an rts, the individual COxx 
                      (/home/strick/6809):00028         * routine can over-ride this in it's init, this should point to
                      (/home/strick/6809):00029         * a routine to flash the cursor which should end in an rts.
                      (/home/strick/6809):00030         *
                      (/home/strick/6809):00031         *   1      2005/11/26  Boisy G. Pitre
                      (/home/strick/6809):00032         * Renamed to VTIO.
                      (/home/strick/6809):00033                                  
                      (/home/strick/6809):00034                  nam   VTIO      
                      (/home/strick/6809):00035                  ttl   OS-9 Level One V2 CoCo I/O driver
                      (/home/strick/6809):00036                                  
                      (/home/strick/6809):00037                  ifp1            
                      (/home/strick/6809):00038                  use   defsfile  
                      (         defsfile):00001                  use   ../defsfile
     0001             (      ../defsfile):00001         Level    equ   1
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0018                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
0018                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
0018                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
0018                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
0018                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
0018                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
                      (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0018                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0018                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
0018                  (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0024                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0024                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0034                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0034                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0034                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0034                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0034                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
0034                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
0034                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
0034                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
0034                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
0034                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
0034                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0034                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0034                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0034                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0034                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0034                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0034                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0034                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0034                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0034                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0034                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
0034                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
0034                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
0034                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
0034                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
0034                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
0034                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0034                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0034                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0034                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0034                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0034                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0034                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0034                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0034                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
0070                  (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0080                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0080                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
                      (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
00B1                  (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
00B1                  (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
00B1                  (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
00B1                  (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
00B1                  (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
00B1                  (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
00B1                  (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
00B1                  (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
00B1                  (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
00B1                  (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
00B1                  (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
00B1                  (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
00B1                  (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
00B1                  (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
00B1                  (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
00B1                  (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
00B1                  (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0024                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0026                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
002A                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
002C                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
002E                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0030                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0032                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0034                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0036                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0038                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
003A                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
003C                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
003E                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0040                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0042                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0044                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0046                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0048                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0049                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
004B                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
004D                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
004F                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0051                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
     0053             (            os9.d):00456         D.Time         EQU       .                   Time
0053                  (            os9.d):00457         D.Year         RMB       1                   $53
0054                  (            os9.d):00458         D.Month        RMB       1                   $54
0055                  (            os9.d):00459         D.Day          RMB       1                   $55
0056                  (            os9.d):00460         D.Hour         RMB       1                   $56
0057                  (            os9.d):00461         D.Min          RMB       1                   $57
0058                  (            os9.d):00462         D.Sec          RMB       1                   $58
0059                  (            os9.d):00463         D.Tick         RMB       1                   $59
005A                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
005B                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
005C                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
005E                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0060                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0062                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0064                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0066                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0068                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
006A                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
006B                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
006D                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
006F                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0071                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0081                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0083                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0084                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0086                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0088                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0089                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
008A                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0100                  (            os9.d):00494         D.XSWI3        RMB       3
0103                  (            os9.d):00495         D.XSWI2        RMB       3
0106                  (            os9.d):00496         D.XSWI         RMB       3
0109                  (            os9.d):00497         D.XNMI         RMB       3
010C                  (            os9.d):00498         D.XIRQ         RMB       3
010F                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
     0020             (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
     0002             (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
     006E             (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0112                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0112                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0112                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0112                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
0112                  (            os9.d):00513         D.Time         EQU       .                   System Time
0112                  (            os9.d):00514         D.Year         RMB       1
0112                  (            os9.d):00515         D.Month        RMB       1
0112                  (            os9.d):00516         D.Day          RMB       1
0112                  (            os9.d):00517         D.Hour         RMB       1
0112                  (            os9.d):00518         D.Min          RMB       1
0112                  (            os9.d):00519         D.Sec          RMB       1
0112                  (            os9.d):00520         D.Tick         RMB       1
0112                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0112                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0112                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0112                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0112                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0112                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0112                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0112                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0112                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
0112                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
0112                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
0112                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
0112                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
0112                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
0112                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0112                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0112                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0112                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
0112                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
0112                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
0112                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0112                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0112                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0112                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0112                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0112                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
0112                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
0112                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
0112                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0112                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
0112                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0112                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
0112                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0112                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0112                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
                      (            os9.d):00569                        RMB       4                   reserved
0112                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
0112                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0112                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0112                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0112                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0112                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0112                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0112                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0112                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0112                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0112                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0112                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
0112                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
0112                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
0112                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
0112                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
0112                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
0112                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
0112                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
0112                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
0112                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
0112                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
0112                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
0112                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
0112                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
0112                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
0112                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
0112                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
0112                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
0112                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
0112                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
0112                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
0112                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
0112                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
0112                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
0112                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
0112                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
0112                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
0112                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
0112                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
0112                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
0112                  (            os9.d):00619         D.Clock        RMB       2
0112                  (            os9.d):00620         D.XSWI3        RMB       2
0112                  (            os9.d):00621         D.XSWI2        RMB       2
0112                  (            os9.d):00622         D.XFIRQ        RMB       2
0112                  (            os9.d):00623         D.XIRQ         RMB       2
0112                  (            os9.d):00624         D.XSWI         RMB       2
0112                  (            os9.d):00625         D.XNMI         RMB       2
0112                  (            os9.d):00626         D.ErrRst       RMB       2
0112                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
0112                  (            os9.d):00628         D.SWI3         RMB       2
0112                  (            os9.d):00629         D.SWI2         RMB       2
0112                  (            os9.d):00630         D.FIRQ         RMB       2
0112                  (            os9.d):00631         D.IRQ          RMB       2
0112                  (            os9.d):00632         D.SWI          RMB       2
0112                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
0112                  (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
0112                  (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
0112                  (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
0112                  (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
0112                  (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0000                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0000                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0002                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0004             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0025                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0025                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0025                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
     000C             (            os9.d):00820         DefIOSiz       EQU       12
     0010             (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
0000                  (            os9.d):00824         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
0007                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
0008                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
0009                  (            os9.d):00832         P$User         RMB       2                   User Index $09
000B                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
000C                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
000D                  (            os9.d):00835         P$State        RMB       1                   Status $0D
000E                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
0010                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
0011                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
0012                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
0014                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
0016                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
0018                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
001A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
0026                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
0036                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
0037                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
0039                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
003B                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
003F                  (            os9.d):00849                        RMB       $40-.               unused
     0040             (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
     0080             (            os9.d):00855         SysState       EQU       %10000000
     0040             (            os9.d):00856         TimSleep       EQU       %01000000
     0020             (            os9.d):00857         TimOut         EQU       %00100000
     0010             (            os9.d):00858         ImgChg         EQU       %00010000
     0002             (            os9.d):00859         Condem         EQU       %00000010
     0001             (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
0040                  (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
0040                  (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
0040                  (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0040                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0040                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0040                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0040                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0040                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0040                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0040                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0040                  (            os9.d):00877         P$User         RMB       2                   User Index
0040                  (            os9.d):00878         P$Prior        RMB       1                   Priority
0040                  (            os9.d):00879         P$Age          RMB       1                   Age
0040                  (            os9.d):00880         P$State        RMB       1                   Status
0040                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
0040                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0040                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0040                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0040                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0040                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0040                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0040                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
0040                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
0040                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
0040                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
                      (            os9.d):00892                        RMB       $20-.               unused
0040                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0040                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0040                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
0040                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
0040                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
0040                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
0040                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
0040                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
0040                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
0040                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
0040                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
0040                  (            os9.d):00905         P$Alarm        RMB       6
                      (            os9.d):00906                        RMB       $200-.              Local stack
0040                  (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
0040                  (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
0040                  (            os9.d):00913         SysState       EQU       %10000000
0040                  (            os9.d):00914         TimSleep       EQU       %01000000
0040                  (            os9.d):00915         TimOut         EQU       %00100000
0040                  (            os9.d):00916         ImgChg         EQU       %00010000
0040                  (            os9.d):00917         Suspend        EQU       %00001000
0040                  (            os9.d):00918         Condem         EQU       %00000010
0040                  (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
0009                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     0009             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     0009             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
                      (            os9.d):01251         *           IFNE coco1_yak
                      (            os9.d):01252         *Bt.Start       EQU       $A000               Start loading modules lower than ordinary coco1.
                      (            os9.d):01253         *           ELSE
     EE00             (            os9.d):01254         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01255         *           ENDC
                      (            os9.d):01256         
                      (            os9.d):01257         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01258                        IFNE      DRAGON
00FF                  (            os9.d):01259         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01260                        ELSE      
     1080             (            os9.d):01261         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01262                        ENDC      
                      (            os9.d):01263         
                      (            os9.d):01264                        ELSE      
                      (            os9.d):01265         
                      (            os9.d):01266         ******************************************
                      (            os9.d):01267         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01268         *
                      (            os9.d):01269         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01270         * system.
                      (            os9.d):01271         *
00FF                  (            os9.d):01272         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
00FF                  (            os9.d):01273         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
00FF                  (            os9.d):01274         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
00FF                  (            os9.d):01275         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01276         
                      (            os9.d):01277                        ENDC      
                      (            os9.d):01278         
                      (            os9.d):01279         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01280         * after the blockmap.
                      (            os9.d):01281         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01282         
                      (            os9.d):01283                        IFNE      DRAGON
00FF                  (            os9.d):01284         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01285         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01286                        ELSE      
     0022             (            os9.d):01287         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01288         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01289                        ENDC      
                      (            os9.d):01290         
                      (            os9.d):01291         
                      (            os9.d):01292                        IFGT      Level-2
                      (            os9.d):01293         ***************************
                      (            os9.d):01294         * Level 3 Defs
                      (            os9.d):01295         *
                      (            os9.d):01296         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01297         *
00FF                  (            os9.d):01298         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01299         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01300         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01301         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01302         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01303         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01304                        ENDC      
                      (            os9.d):01305         
                      (            os9.d):01306                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002F                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
002F                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
002F                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
002F                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
002F                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
002F                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
002F                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0040                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0040                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0040                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0040                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0040                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0040                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
0040                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0040                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0040                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0040                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0040                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0040                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0040                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0040                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
                      (            rbf.d):00239                        RMB       32-.                Reserved
0040                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
0040                  (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
0040                  (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
0040                  (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
0040                  (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
     0001             (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
0026                  (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
     0001             (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
0026                  (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         *************************************************
                      (           coco.d):00148         *
                      (           coco.d):00149         * NitrOS-9 Level 1 Section
                      (           coco.d):00150         *
                      (           coco.d):00151         *************************************************
                      (           coco.d):00152         
     00FF             (           coco.d):00153         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE      
                      (           coco.d):00156         
                      (           coco.d):00157         *************************************************
                      (           coco.d):00158         *
                      (           coco.d):00159         * NitrOS-9 Level 2 Section
                      (           coco.d):00160         *
                      (           coco.d):00161         *************************************************
                      (           coco.d):00162         
                      (           coco.d):00163         ****************************************
                      (           coco.d):00164         * Dynamic Address Translator Definitions
                      (           coco.d):00165         *
0004                  (           coco.d):00166         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
0004                  (           coco.d):00167         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
0004                  (           coco.d):00168         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
0004                  (           coco.d):00169         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
0004                  (           coco.d):00170         DAT.Task       EQU       $FF91               Task Register address
0004                  (           coco.d):00171         DAT.TkCt       EQU       32                  Number of DAT Tasks
0004                  (           coco.d):00172         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
0004                  (           coco.d):00173         DAT.Free       EQU       $333E               Free Block Number
0004                  (           coco.d):00174         DAT.BlMx       EQU       $3F                 Maximum Block number
0004                  (           coco.d):00175         DAT.BMSz       EQU       $40                 Memory Block Map size
0004                  (           coco.d):00176         DAT.WrPr       EQU       0                   no write protect
0004                  (           coco.d):00177         DAT.WrEn       EQU       0                   no write enable
0004                  (           coco.d):00178         SysTask        EQU       0                   Coco System Task number
0004                  (           coco.d):00179         IOBlock        EQU       $3F
0004                  (           coco.d):00180         ROMBlock       EQU       $3F
0004                  (           coco.d):00181         IOAddr         EQU       $7F
0004                  (           coco.d):00182         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
0004                  (           coco.d):00183         RAMCount       EQU       1                   initial blocks of RAM
0004                  (           coco.d):00184         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
0004                  (           coco.d):00185         BlockTyp       EQU       1                   chk only first bytes of RAM block
0004                  (           coco.d):00186         ByteType       EQU       2                   chk entire block of RAM
0004                  (           coco.d):00187         Limited        EQU       1                   chk only upper memory for ROM modules
0004                  (           coco.d):00188         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00189         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00190         *       always start with $87CD in first two bytes of block
0004                  (           coco.d):00191         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
0004                  (           coco.d):00192         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
0004                  (           coco.d):00193         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00194         
                      (           coco.d):00195         ***************************
                      (           coco.d):00196         * Color Computer 3 Specific
                      (           coco.d):00197         *
0004                  (           coco.d):00198         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00199         
                      (           coco.d):00200         ********************
                      (           coco.d):00201         * Hardware addresses
                      (           coco.d):00202         *
0004                  (           coco.d):00203         GIMERegs       EQU       $FF00               Base address of GIME registers
0004                  (           coco.d):00204         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
0004                  (           coco.d):00205         BordReg        EQU       $FF9A               Border color register
0004                  (           coco.d):00206         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00207         
0004                  (           coco.d):00208         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00209         
                      (           coco.d):00210                        ENDC
                      (           coco.d):00211                        
                      (           coco.d):00212                        ENDC      
                      (           coco.d):00213         
                      (/home/strick/6809):00039         ;         use   scfdefs   
                      (/home/strick/6809):00040                  use   cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
     0001             (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
001D                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
001F                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0021                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0022                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0023                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0024                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0025                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0026                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0028                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0029                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
002A                  (       cocovtio.d):00043                        RMB       1
002B                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
002C                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
002D                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
002E                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
002F                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0030                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0031                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0032                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0033                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0035                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0037                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
003B                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
003D                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
003F                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0040                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0041                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   ??
0042                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0044                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0045                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0046                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0047                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0048                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF)
0049                  (       cocovtio.d):00066         V.MCol         RMB       1                   color? (C003,8001)
004A                  (       cocovtio.d):00067         V.4A           RMB       1
004B                  (       cocovtio.d):00068         V.PMask        RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
004C                  (       cocovtio.d):00069         V.4C           RMB       1
004D                  (       cocovtio.d):00070         V.4D           RMB       1
004E                  (       cocovtio.d):00071         V.4E           RMB       1
004F                  (       cocovtio.d):00072         V.4F           RMB       1
0050                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0051                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0052                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0053                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0054                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0055                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0056                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0057                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0058                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0059                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
005A                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
005B                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
005D                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
005F                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0060                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0061                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0062                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0063                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0064                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0065                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0066                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0067                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0068                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0069                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
006A                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
006B                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
006C                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
006D                  (       cocovtio.d):00102         V.Spcl         RMB       1
006E                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
006F                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0070                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0071                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0072                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0074                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0076                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0078                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
                      (       cocovtio.d):00111         
007A                  (       cocovtio.d):00112         V.Flash        RMB       2                   Cursor flash routine address.
007C                  (       cocovtio.d):00113         v.FlashCount   RMB       1                   Cursor flash count
007D                  (       cocovtio.d):00114         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00115         
                      (       cocovtio.d):00116         * CoHR vars
                      (       cocovtio.d):00117         
007E                  (       cocovtio.d):00118         V.51ScrnA      RMB       2                   * Screen address.
0080                  (       cocovtio.d):00119         V.51XPos       RMB       1                   * X co-ordinate
0081                  (       cocovtio.d):00120         V.51YPos       RMB       1                   * Y co-ordinate
0082                  (       cocovtio.d):00121         V.51EscSeq     RMB       1                   * In escape sequence
0083                  (       cocovtio.d):00122         V.51ReverseFlag RMB       1                   * Reverse video flag
0084                  (       cocovtio.d):00123         V.51UnderlineFlag RMB       1                   * Underline flag
0085                  (       cocovtio.d):00124         V.51CtrlDispatch RMB       2                   * Ctrl char dispatch address, currently processing
0087                  (       cocovtio.d):00125         V.51BytePixOffset RMB       1                   * byte offset in screen line, of character X position        
0088                  (       cocovtio.d):00126         V.51OldCursorPosX RMB       1                   * Position of old cursor before update        
0089                  (       cocovtio.d):00127         V.51OldCursorPosY RMB       1
008A                  (       cocovtio.d):00128         V.51CursorChanged RMB       1                   * Has cursor position changed ? 1=yes,0=no
008B                  (       cocovtio.d):00129         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
008C                  (       cocovtio.d):00130         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
008D                  (       cocovtio.d):00131         V.51ScreenMask1 RMB       1                   * screen masks for drawing characters on screen         
008E                  (       cocovtio.d):00132         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00133         * End of CoHR vars
                      (       cocovtio.d):00134         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00135         **** code can clobber variables defined after these !                ****
008F                  (       cocovtio.d):00136         V.IBufH        RMB       1                   input buffer head
0090                  (       cocovtio.d):00137         V.IBufT        RMB       1                   input buffer tail
0091                  (       cocovtio.d):00138         V.InBuf        RMB       1                   input buffer ptr
0092                  (       cocovtio.d):00139         V.51End        RMB       1
0093                  (       cocovtio.d):00140                        RMB       250-.
     00FA             (       cocovtio.d):00141         V.Last         EQU       .
                      (       cocovtio.d):00142         
                      (       cocovtio.d):00143         
                      (       cocovtio.d):00144         * Unknown for now
                      (       cocovtio.d):00145         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00146         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00147         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00148         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00149         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00150         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00151         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00152         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00153         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00154         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00155         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00156         
                      (       cocovtio.d):00157         *
                      (       cocovtio.d):00158         * Defs for V.COLoad flags.
                      (       cocovtio.d):00159         * 
                      (       cocovtio.d):00160         
     0002             (       cocovtio.d):00161         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
     0004             (       cocovtio.d):00162         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
     0008             (       cocovtio.d):00163         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
                      (       cocovtio.d):00164         
                      (       cocovtio.d):00165         *
                      (       cocovtio.d):00166         * Defs for cursor flash counter
                      (       cocovtio.d):00167         *
                      (       cocovtio.d):00168         
     0019             (       cocovtio.d):00169         CFlash50hz     EQU       25                  * 50Hz flash counter
     001E             (       cocovtio.d):00170         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00171         
                      (       cocovtio.d):00172                        ELSE
                      (       cocovtio.d):00173                        
                      (       cocovtio.d):00174         ********************************************************************
                      (       cocovtio.d):00175         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * $Id$
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00180         * Comment
                      (       cocovtio.d):00181         * ------------------------------------------------------------------
                      (       cocovtio.d):00182         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00183         * Started from systype
                      (       cocovtio.d):00184         
                      (       cocovtio.d):00185                        NAM       VTIODefs
                      (       cocovtio.d):00186                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         
                      (       cocovtio.d):00188         ****************
                      (       cocovtio.d):00189         * Window Devices
                      (       cocovtio.d):00190         *
                      (       cocovtio.d):00191                        ORG       $FF9F
00FA                  (       cocovtio.d):00192         A.W            RMB       1                   $FF9F Generic Window Descriptor
00FA                  (       cocovtio.d):00193         A.TermW        RMB       1                   $FFA0 Windowing Term
00FA                  (       cocovtio.d):00194         A.W1           RMB       1                   $FFA1
00FA                  (       cocovtio.d):00195         A.W2           RMB       1                   $FFA2
00FA                  (       cocovtio.d):00196         A.W3           RMB       1                   $FFA3
00FA                  (       cocovtio.d):00197         A.W4           RMB       1                   $FFA4
00FA                  (       cocovtio.d):00198         A.W5           RMB       1                   $FFA5
00FA                  (       cocovtio.d):00199         A.W6           RMB       1                   $FFA6
00FA                  (       cocovtio.d):00200         A.W7           RMB       1                   $FFA7
00FA                  (       cocovtio.d):00201         A.W8           RMB       1                   $FFA8
00FA                  (       cocovtio.d):00202         A.W9           RMB       1                   $FFA9
00FA                  (       cocovtio.d):00203         A.W10          RMB       1                   $FFAA
00FA                  (       cocovtio.d):00204         A.W11          RMB       1                   $FFAB
00FA                  (       cocovtio.d):00205         A.W12          RMB       1                   $FFAC
00FA                  (       cocovtio.d):00206         A.W13          RMB       1                   $FFAD
00FA                  (       cocovtio.d):00207         A.W14          RMB       1                   $FFAE
00FA                  (       cocovtio.d):00208         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00209         
                      (       cocovtio.d):00210         **********************************
                      (       cocovtio.d):00211         * Pointer Device Packet Definition
                      (       cocovtio.d):00212         *
                      (       cocovtio.d):00213                        ORG       0
00FA                  (       cocovtio.d):00214         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
00FA                  (       cocovtio.d):00215         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
00FA                  (       cocovtio.d):00216         Pt.ToTm        RMB       1                   Time out Initial value
                      (       cocovtio.d):00217                        RMB       2                   reserved
00FA                  (       cocovtio.d):00218         Pt.TTTo        RMB       1                   Time Till Timeout
00FA                  (       cocovtio.d):00219         Pt.TSSt        RMB       2                   Time Since Start Counter
00FA                  (       cocovtio.d):00220         Pt.CBSA        RMB       1                   Current Button State Button A
00FA                  (       cocovtio.d):00221         Pt.CBSB        RMB       1                   Current Button State Button B
00FA                  (       cocovtio.d):00222         Pt.CCtA        RMB       1                   Click Count Button A
00FA                  (       cocovtio.d):00223         Pt.CCtB        RMB       1                   Click Count Button B
00FA                  (       cocovtio.d):00224         Pt.TTSA        RMB       1                   Time This State Counter Button A
00FA                  (       cocovtio.d):00225         Pt.TTSB        RMB       1                   Time This State Counter Button B
00FA                  (       cocovtio.d):00226         Pt.TLSA        RMB       1                   Time Last State Counter Button A
00FA                  (       cocovtio.d):00227         Pt.TLSB        RMB       1                   Time Last State Counter Button B
                      (       cocovtio.d):00228                        RMB       2                   Reserved
00FA                  (       cocovtio.d):00229         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
00FA                  (       cocovtio.d):00230         Pt.BDY         RMB       2                   Button down Y value
00FA                  (       cocovtio.d):00231         Pt.Stat        RMB       1                   Window Pointer type location
00FA                  (       cocovtio.d):00232         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
00FA                  (       cocovtio.d):00233         Pt.AcX         RMB       2                   Actual X Value
00FA                  (       cocovtio.d):00234         Pt.AcY         RMB       2                   Actual Y Value
00FA                  (       cocovtio.d):00235         Pt.WRX         RMB       2                   Window Relative X
00FA                  (       cocovtio.d):00236         Pt.WRY         RMB       2                   Window Relative Y
00FA                  (       cocovtio.d):00237         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00238         
                      (       cocovtio.d):00239         **************************
                      (       cocovtio.d):00240         * window regions for mouse
                      (       cocovtio.d):00241         *
00FA                  (       cocovtio.d):00242         WR.Cntnt       EQU       0                   content region
00FA                  (       cocovtio.d):00243         WR.Cntrl       EQU       1                   control region
00FA                  (       cocovtio.d):00244         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00245         
                      (       cocovtio.d):00246         *************************************
                      (       cocovtio.d):00247         * Standard system get/put buffer defs
                      (       cocovtio.d):00248         *
                      (       cocovtio.d):00249         *
                      (       cocovtio.d):00250         * system group numbers
                      (       cocovtio.d):00251         *
                      (       cocovtio.d):00252                        ORG       200
00FA                  (       cocovtio.d):00253         Grp.Fnt        RMB       1                   font group
00FA                  (       cocovtio.d):00254         Grp.Clip       RMB       1                   clipboard group
00FA                  (       cocovtio.d):00255         Grp.Ptr        RMB       1                   pointer group
00FA                  (       cocovtio.d):00256         Grp.Pat2       RMB       1                   pattern group 2 color
00FA                  (       cocovtio.d):00257         Grp.Pat4       RMB       1                   pattern group 4 color
00FA                  (       cocovtio.d):00258         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         * font buffer numbers
                      (       cocovtio.d):00261         *
                      (       cocovtio.d):00262                        ORG       1
00FA                  (       cocovtio.d):00263         Fnt.S8x8       RMB       1                   standard 8x8 font
00FA                  (       cocovtio.d):00264         Fnt.S6x8       RMB       1                   standard 6x8 font
00FA                  (       cocovtio.d):00265         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00266         *
                      (       cocovtio.d):00267         * pattern buffer numbers
                      (       cocovtio.d):00268         *
                      (       cocovtio.d):00269                        ORG       1
00FA                  (       cocovtio.d):00270         Pat.Dot        RMB       1
00FA                  (       cocovtio.d):00271         Pat.Vrt        RMB       1
00FA                  (       cocovtio.d):00272         Pat.Hrz        RMB       1
00FA                  (       cocovtio.d):00273         Pat.XHtc       RMB       1
00FA                  (       cocovtio.d):00274         Pat.LSnt       RMB       1
00FA                  (       cocovtio.d):00275         Pat.RSnt       RMB       1
00FA                  (       cocovtio.d):00276         Pat.SDot       RMB       1
00FA                  (       cocovtio.d):00277         Pat.BDot       RMB       1
                      (       cocovtio.d):00278         *
                      (       cocovtio.d):00279         * pointer buffer numbers
                      (       cocovtio.d):00280         *
                      (       cocovtio.d):00281                        ORG       1
00FA                  (       cocovtio.d):00282         Ptr.Arr        RMB       1                   Arrow pointer
00FA                  (       cocovtio.d):00283         Ptr.Pen        RMB       1                   Pencil pointer
00FA                  (       cocovtio.d):00284         Ptr.LCH        RMB       1                   Large cross hair pointer
00FA                  (       cocovtio.d):00285         Ptr.Slp        RMB       1                   Wait timer pointer
00FA                  (       cocovtio.d):00286         Ptr.Ill        RMB       1                   Illegal action pointer
00FA                  (       cocovtio.d):00287         Ptr.Txt        RMB       1                   Text pointer
00FA                  (       cocovtio.d):00288         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00289         
                      (       cocovtio.d):00290         **********************
                      (       cocovtio.d):00291         * KeyDrv Entry Points
                      (       cocovtio.d):00292                        ORG       0
00FA                  (       cocovtio.d):00293         K$Init         RMB       3                   joystick initialization
00FA                  (       cocovtio.d):00294         K$Term         RMB       3                   joystick termination
00FA                  (       cocovtio.d):00295         K$FnKey        RMB       3                   get function key states
00FA                  (       cocovtio.d):00296         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00297         
                      (       cocovtio.d):00298         **********************
                      (       cocovtio.d):00299         * JoyDrv Entry Points
                      (       cocovtio.d):00300                        ORG       0
00FA                  (       cocovtio.d):00301         J$Init         RMB       3                   joystick initialization
00FA                  (       cocovtio.d):00302         J$Term         RMB       3                   joystick termination
00FA                  (       cocovtio.d):00303         J$MsBtn        RMB       3                   get mouse button states
00FA                  (       cocovtio.d):00304         J$MsXY         RMB       3                   get mouse X/Y coordinates
00FA                  (       cocovtio.d):00305         J$JyBtn        RMB       3                   get joystick button states
00FA                  (       cocovtio.d):00306         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00307         
                      (       cocovtio.d):00308         **********************
                      (       cocovtio.d):00309         * SndDrv Entry Points
                      (       cocovtio.d):00310                        ORG       0
00FA                  (       cocovtio.d):00311         S$Init         RMB       3                   joystick initialization
00FA                  (       cocovtio.d):00312         S$GetStt       RMB       3                   joystick termination
00FA                  (       cocovtio.d):00313         S$SetStt       RMB       3                   joystick termination
00FA                  (       cocovtio.d):00314         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00315         
                      (       cocovtio.d):00316         ********************************
                      (       cocovtio.d):00317         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00318         *
                      (       cocovtio.d):00319         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00320         * for use in the high level windowing package.
                      (       cocovtio.d):00321         *
00FA                  (       cocovtio.d):00322         NUMMENS        EQU       10                  maximum number of menus on menu bar
00FA                  (       cocovtio.d):00323         NUMITMS        EQU       20                  maximum number of items in a menu
00FA                  (       cocovtio.d):00324         MXTTLEN        EQU       15                  max chars for menu and item names
00FA                  (       cocovtio.d):00325         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00326         *
                      (       cocovtio.d):00327         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00328         * one required for each item within the menu
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330                        ORG       0
00FA                  (       cocovtio.d):00331         MI.TTL         RMB       MXTTLEN             item name
00FA                  (       cocovtio.d):00332         MI.ENBL        RMB       1                   enable flag
00FA                  (       cocovtio.d):00333         MI.RES         RMB       5                   reserved bytes
00FA                  (       cocovtio.d):00334         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00335         *
                      (       cocovtio.d):00336         * Menu Descriptor :
                      (       cocovtio.d):00337         * one for each menu on the manu bar
                      (       cocovtio.d):00338         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00339         *
                      (       cocovtio.d):00340                        ORG       0
00FA                  (       cocovtio.d):00341         MN.TTL         RMB       MXTTLEN             menu title
00FA                  (       cocovtio.d):00342         MN.ID          RMB       1                   menu id number (1-255)
00FA                  (       cocovtio.d):00343         MN.XSIZ        RMB       1                   horiz. size of desired pull down
00FA                  (       cocovtio.d):00344         MN.NITS        RMB       1                   number of items in menu
00FA                  (       cocovtio.d):00345         MN.ENBL        RMB       1                   enable flag
00FA                  (       cocovtio.d):00346         MN.RES         RMB       2                   reserved bytes
00FA                  (       cocovtio.d):00347         MN.ITEMS       RMB       2                   pointer to array of menu items
00FA                  (       cocovtio.d):00348         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00349         *
                      (       cocovtio.d):00350         * Window Descriptor:
                      (       cocovtio.d):00351         * one required for each application in a framed window
                      (       cocovtio.d):00352         *
                      (       cocovtio.d):00353                        ORG       0
00FA                  (       cocovtio.d):00354         WN.TTL         RMB       20                  title of window for title bar
00FA                  (       cocovtio.d):00355         WN.NMNS        RMB       1                   number of menus in menu bar
00FA                  (       cocovtio.d):00356         WN.XMIN        RMB       1                   minimal horiz. size for application to run
00FA                  (       cocovtio.d):00357         WN.YMIN        RMB       1                   minimal vert. size for application to run
00FA                  (       cocovtio.d):00358         WN.SYNC        RMB       2                   synch bytes ($C0C0)
00FA                  (       cocovtio.d):00359         WN.RES         RMB       7                   reserved bytes
00FA                  (       cocovtio.d):00360         WN.BAR         RMB       2                   pointer to arry of menu descriptors
00FA                  (       cocovtio.d):00361         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00362         
                      (       cocovtio.d):00363         *************************
                      (       cocovtio.d):00364         * Window Type Definitions
                      (       cocovtio.d):00365         *
                      (       cocovtio.d):00366         * To be used in setting up the border of the window in
                      (       cocovtio.d):00367         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00368         *
                      (       cocovtio.d):00369                        ORG       0
00FA                  (       cocovtio.d):00370         WT.NBox        RMB       1                   No Box
00FA                  (       cocovtio.d):00371         WT.FWin        RMB       1                   Framed Window
00FA                  (       cocovtio.d):00372         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
00FA                  (       cocovtio.d):00373         WT.SBox        RMB       1                   Shadowed Box
00FA                  (       cocovtio.d):00374         WT.DBox        RMB       1                   Double Box
00FA                  (       cocovtio.d):00375         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00376         
                      (       cocovtio.d):00377         *************************************
                      (       cocovtio.d):00378         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       1
00FA                  (       cocovtio.d):00381         MId.Mov        RMB       1                   move box
00FA                  (       cocovtio.d):00382         MId.Cls        RMB       1                   close box
00FA                  (       cocovtio.d):00383         MId.Grw        RMB       1                   grow box
00FA                  (       cocovtio.d):00384         MId.SUp        RMB       1                   scroll up
00FA                  (       cocovtio.d):00385         MId.SDn        RMB       1                   scroll down
00FA                  (       cocovtio.d):00386         MId.SRt        RMB       1                   scroll right
00FA                  (       cocovtio.d):00387         MId.SLt        RMB       1                   scroll left
00FA                  (       cocovtio.d):00388         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00389                        ORG       20
00FA                  (       cocovtio.d):00390         MId.Tdy        RMB       1                   Tandy menu
00FA                  (       cocovtio.d):00391         MId.Fil        RMB       1                   Files Menu
00FA                  (       cocovtio.d):00392         MId.Edt        RMB       1                   Edit Menu
00FA                  (       cocovtio.d):00393         MId.Sty        RMB       1                   Styles menu
00FA                  (       cocovtio.d):00394         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00395         
                      (       cocovtio.d):00396         
                      (       cocovtio.d):00397         ******************************************************************************
                      (       cocovtio.d):00398         ******************************************************************************
                      (       cocovtio.d):00399         **                                                                          **
                      (       cocovtio.d):00400         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00401         **                                                                          **
                      (       cocovtio.d):00402         ******************************************************************************
                      (       cocovtio.d):00403         ******************************************************************************
                      (       cocovtio.d):00404         **                                                                          **
                      (       cocovtio.d):00405         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00406         **                                                                          **
                      (       cocovtio.d):00407         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00408         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00409         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00410         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00411         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00412         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00413         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00414         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00415         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00416         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00417         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00418         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00419         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (       cocovtio.d):00420         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00421         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00422         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00423         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00424         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00425         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00426         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00427         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00428         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00429         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00430         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00431         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00432         **                                                                          **
                      (       cocovtio.d):00433         ******************************************************************************
                      (       cocovtio.d):00434         ******************************************************************************
                      (       cocovtio.d):00435         
                      (       cocovtio.d):00436         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
00FA                  (       cocovtio.d):00437         MaxLines       EQU       25                  Max. Y coord text value
00FA                  (       cocovtio.d):00438         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00439         
00FA                  (       cocovtio.d):00440         COMP           EQU       0                   composite monitor
00FA                  (       cocovtio.d):00441         RGB            EQU       1                   RGB Analog monitor 
00FA                  (       cocovtio.d):00442         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00443         
00FA                  (       cocovtio.d):00444         Monitor        SET       RGB
                      (       cocovtio.d):00445         
                      (       cocovtio.d):00446         * Global definitions
00FA                  (       cocovtio.d):00447         KeyMse         EQU       %00000001           keyboard mouse enabled
00FA                  (       cocovtio.d):00448         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
00FA                  (       cocovtio.d):00449         CapsLck        EQU       %00000100           Capslock enabled
00FA                  (       cocovtio.d):00450         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00451                        IFEQ      MaxLines-25
00FA                  (       cocovtio.d):00452         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00453                        ELSE      
00FA                  (       cocovtio.d):00454         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00455                        ENDC      
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         *****************************************************************************
                      (       cocovtio.d):00458         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00459         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00460         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00461         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00462         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00463         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00464         *
                      (       cocovtio.d):00465         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00466         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00467                        ORG       V.SCF
00FA                  (       cocovtio.d):00468         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
00FA                  (       cocovtio.d):00469         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
00FA                  (       cocovtio.d):00470         V.DevPar       RMB       2                   high bit=window device                       $1F
00FA                  (       cocovtio.d):00471         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
00FA                  (       cocovtio.d):00472         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
00FA                  (       cocovtio.d):00473         V.ScrChg       RMB       1                   screen change flag                           $23
00FA                  (       cocovtio.d):00474         V.SSigID       RMB       1                   data ready process ID                        $24
00FA                  (       cocovtio.d):00475         V.SSigSg       RMB       1                   data ready signal code                       $25
00FA                  (       cocovtio.d):00476         V.MSigID       RMB       1                   mouse signal process ID                      $26
00FA                  (       cocovtio.d):00477         V.MSigSg       RMB       1                   mouse signal signal code                     $27
00FA                  (       cocovtio.d):00478         V.MSmpl        RMB       1                   mouse sample rate                            $28
00FA                  (       cocovtio.d):00479         V.MTime        RMB       1                   mouse timeout value                          $29
                      (       cocovtio.d):00480                        RMB       1                   unused                                       $2A
00FA                  (       cocovtio.d):00481         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
00FA                  (       cocovtio.d):00482         V.ParmCnt      RMB       1                   parameter count                              $2C
00FA                  (       cocovtio.d):00483         V.ParmVct      RMB       2                   parameter vector                             $2D
00FA                  (       cocovtio.d):00484         V.PrmStrt      RMB       2                   pointer to params start                      $2F
00FA                  (       cocovtio.d):00485         V.NxtPrm       RMB       2                   pointer to next param storage                $31
00FA                  (       cocovtio.d):00486         V.EndPtr       RMB       1                   last character read offset                   $33
00FA                  (       cocovtio.d):00487         V.InpPtr       RMB       1                   next character read offset                   $34
00FA                  (       cocovtio.d):00488         V.WinNum       RMB       1                   window table entry #                         $35
00FA                  (       cocovtio.d):00489         V.DWNum        RMB       1                   dwnum from descriptor                        $36
00FA                  (       cocovtio.d):00490         V.CallCde      RMB       1                   internal comod call code #                   $37
00FA                  (       cocovtio.d):00491         CC3Parm        RMB       128-.               global parameter area
00FA                  (       cocovtio.d):00492         ReadBuf        RMB       256-.               read input buffer (keyboard)
00FA                  (       cocovtio.d):00493         CC3DSiz        EQU       .
                      (       cocovtio.d):00494         
                      (       cocovtio.d):00495         *****************************************************************************
                      (       cocovtio.d):00496         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00497         * This area sits in system block 0 from $1000 to $10ff
00FA                  (       cocovtio.d):00498         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00499                        ORG       0
00FA                  (       cocovtio.d):00500         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
00FA                  (       cocovtio.d):00501         G.CntTik       RMB       1                   Current tick count for cursor updates
00FA                  (       cocovtio.d):00502         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
00FA                  (       cocovtio.d):00503         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00504         *g0003    rmb   2          NEW: UNUSED
00FA                  (       cocovtio.d):00505         g0005          RMB       2                   Temp save in Windint RG
00FA                  (       cocovtio.d):00506         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
00FA                  (       cocovtio.d):00507         G.MonTyp       RMB       1                   monitor type
00FA                  (       cocovtio.d):00508         g000A          EQU       .                   Old label for compatibility
00FA                  (       cocovtio.d):00509         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00510         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00511         *                           0=We are not on our device
                      (       cocovtio.d):00512         *                           1=We are the current device
                      (       cocovtio.d):00513         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00514         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00515         *                           If not current device, they don't.)
00FA                  (       cocovtio.d):00516         G.WinType      RMB       1                   current device's V.TYPE
00FA                  (       cocovtio.d):00517         G.CurDvM       RMB       2                   current device memory pointer for co-module use
00FA                  (       cocovtio.d):00518         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
00FA                  (       cocovtio.d):00519         G.AlPckt       RMB       6                   F$Alarm time packet
00FA                  (       cocovtio.d):00520         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
00FA                  (       cocovtio.d):00521         G.AlSig        RMB       1                   F$Alarm signal code ($16)
00FA                  (       cocovtio.d):00522         G.BelVec       RMB       2                   BELL routine vector
00FA                  (       cocovtio.d):00523         G.DefPal       RMB       2                   pointer to default palette data in global mem
00FA                  (       cocovtio.d):00524         G.TnCnt        RMB       1                   SS.Tone duration counter
00FA                  (       cocovtio.d):00525         G.BelTnF       RMB       1                   BELL tone flag
00FA                  (       cocovtio.d):00526         g001D          RMB       3
00FA                  (       cocovtio.d):00527         G.CurDev       RMB       2                   current device's static memory pointer ($20)
00FA                  (       cocovtio.d):00528         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
00FA                  (       cocovtio.d):00529         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00530         *                           00000010 : VDGInt found
                      (       cocovtio.d):00531         *                           10000000 : GrfDrv found
00FA                  (       cocovtio.d):00532         g0025          RMB       1
00FA                  (       cocovtio.d):00533         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00534         *         IFEQ  TC9-true
                      (       cocovtio.d):00535         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00536         *         ELSE  
00FA                  (       cocovtio.d):00537         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00538         *         ENDC  
00FA                  (       cocovtio.d):00539         G.LKeyCd       RMB       1                   last keyboard code
00FA                  (       cocovtio.d):00540         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00541         * A secondary 3 key table (same format as g002D below)
00FA                  (       cocovtio.d):00542         G.2Key1        RMB       1                   $2A
00FA                  (       cocovtio.d):00543         G.2Key2        RMB       1                   $2B
00FA                  (       cocovtio.d):00544         G.2Key3        RMB       1
                      (       cocovtio.d):00545         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00546         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00547         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00548         * KeyFlag below.
00FA                  (       cocovtio.d):00549         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
00FA                  (       cocovtio.d):00550         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
00FA                  (       cocovtio.d):00551         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
00FA                  (       cocovtio.d):00552         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
00FA                  (       cocovtio.d):00553         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
00FA                  (       cocovtio.d):00554         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00555         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00556         *                           %00111000-Row # (Input, 0-6)
00FA                  (       cocovtio.d):00557         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
00FA                  (       cocovtio.d):00558         G.KySns        RMB       1                   key sense byte
00FA                  (       cocovtio.d):00559         G.KySame       RMB       1                   same key flag
00FA                  (       cocovtio.d):00560         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
                      (       cocovtio.d):00561                        RMB       1
00FA                  (       cocovtio.d):00562         g0038          RMB       1                   grfdrv initialized flag
                      (       cocovtio.d):00563                        RMB       2
00FA                  (       cocovtio.d):00564         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
00FA                  (       cocovtio.d):00565         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
00FA                  (       cocovtio.d):00566         g005C          RMB       2                   Temp for relative mouse X coord calculation
00FA                  (       cocovtio.d):00567         g005E          RMB       2                   Temp for relative mouse Y coord calculation
00FA                  (       cocovtio.d):00568         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
00FA                  (       cocovtio.d):00569         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
00FA                  (       cocovtio.d):00570         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00571         *         IFEQ  TC9-true
                      (       cocovtio.d):00572         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00573         *         ELSE  
00FA                  (       cocovtio.d):00574         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00575         *         ENDC  
00FA                  (       cocovtio.d):00576         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
00FA                  (       cocovtio.d):00577         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
00FA                  (       cocovtio.d):00578         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
00FA                  (       cocovtio.d):00579         G.MseMv        RMB       1                   mouse moved flag ($67)
00FA                  (       cocovtio.d):00580         G.CoTble       RMB       6                   co-module table ($68)
00FA                  (       cocovtio.d):00581         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
00FA                  (       cocovtio.d):00582         g0070          RMB       1                   # bytes to move in 1 block (1-72)
00FA                  (       cocovtio.d):00583         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
00FA                  (       cocovtio.d):00584         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
00FA                  (       cocovtio.d):00585         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00FA                  (       cocovtio.d):00586         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00FA                  (       cocovtio.d):00587         g00B9          RMB       2                   Current window table ptr for WindInt
00FA                  (       cocovtio.d):00588         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00FA                  (       cocovtio.d):00589         g00BD          RMB       1                   Current screen type for work window table
00FA                  (       cocovtio.d):00590         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00FA                  (       cocovtio.d):00591         g00BF          RMB       1                   Flag for keypress while processing menu select
00FA                  (       cocovtio.d):00592         g00C0          RMB       2                   Ptr to current path descriptor
00FA                  (       cocovtio.d):00593         G.WindBk       RMB       2                   shift-clear routine vector
00FA                  (       cocovtio.d):00594         G.MsInit       RMB       2                   set mouse routine vector
00FA                  (       cocovtio.d):00595         G.MsSig        RMB       1                   mouse signal flag
00FA                  (       cocovtio.d):00596         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00FA                  (       cocovtio.d):00597         g00D7          RMB       9
00FA                  (       cocovtio.d):00598         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00FA                  (       cocovtio.d):00599         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00FA                  (       cocovtio.d):00600         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00FA                  (       cocovtio.d):00601         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00FA                  (       cocovtio.d):00602         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00FA                  (       cocovtio.d):00603         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00604         
                      (       cocovtio.d):00605         *****************************************************************************
                      (       cocovtio.d):00606         * GrfDrv global memory data definitions
                      (       cocovtio.d):00607         * This area sits in system block 0 from $1100 to $119E
00FA                  (       cocovtio.d):00608         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00609                        ORG       0
00FA                  (       cocovtio.d):00610         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
00FA                  (       cocovtio.d):00611         gr0001         RMB       1                   Pixel mask for last byte of a GP line
00FA                  (       cocovtio.d):00612         gr0002         RMB       2                   Ptr to table of bit masks for colors
00FA                  (       cocovtio.d):00613         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
00FA                  (       cocovtio.d):00614         gr0005         RMB       1                   # pixels per byte in GP Buffer
00FA                  (       cocovtio.d):00615         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
00FA                  (       cocovtio.d):00616         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
00FA                  (       cocovtio.d):00617         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
00FA                  (       cocovtio.d):00618         gr0009         RMB       1                   # bytes for width of overlay window
00FA                  (       cocovtio.d):00619         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00620         *                             overlay width has been copied
00FA                  (       cocovtio.d):00621         gr000B         RMB       1
00FA                  (       cocovtio.d):00622         gr000C         RMB       2                   Cursor address for proportional spacing?
00FA                  (       cocovtio.d):00623         gr000E         RMB       1
00FA                  (       cocovtio.d):00624         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
00FA                  (       cocovtio.d):00625         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
00FA                  (       cocovtio.d):00626         gr0012         RMB       6
00FA                  (       cocovtio.d):00627         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
00FA                  (       cocovtio.d):00628         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
00FA                  (       cocovtio.d):00629         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
00FA                  (       cocovtio.d):00630         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
00FA                  (       cocovtio.d):00631         gr0020         RMB       2                   Arc 'clip line' X01
00FA                  (       cocovtio.d):00632         gr0022         RMB       2                   Arc 'clip line' Y01
00FA                  (       cocovtio.d):00633         gr0024         RMB       2                   Arc 'clip line' X02
00FA                  (       cocovtio.d):00634         gr0026         RMB       2                   Arc 'clip line' Y02
00FA                  (       cocovtio.d):00635         gr0028         RMB       1                   full-byte background color to FFILL on mask
00FA                  (       cocovtio.d):00636         gr0029         RMB       1                   pixels per byte: set up by FFILL
00FA                  (       cocovtio.d):00637         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
00FA                  (       cocovtio.d):00638         gr002B         RMB       1                   current Y-direction to travel in FFILL
00FA                  (       cocovtio.d):00639         gr002C         RMB       2
00FA                  (       cocovtio.d):00640         gr002E         RMB       2                   current window table entry
00FA                  (       cocovtio.d):00641         gr0030         RMB       2                   current screen table ptr
00FA                  (       cocovtio.d):00642         gr0032         RMB       1                   Last block # we used for buffers
00FA                  (       cocovtio.d):00643         gr0033         RMB       2                   Last offset we used for buffers
00FA                  (       cocovtio.d):00644         gr0035         RMB       1                   group
00FA                  (       cocovtio.d):00645         gr0036         RMB       2                   offset
00FA                  (       cocovtio.d):00646         gr0038         RMB       1                   group returned (new)
00FA                  (       cocovtio.d):00647         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
00FA                  (       cocovtio.d):00648         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
00FA                  (       cocovtio.d):00649         gr003B         RMB       2                   end of vars ptr?
00FA                  (       cocovtio.d):00650         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
00FA                  (       cocovtio.d):00651         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
00FA                  (       cocovtio.d):00652         gr0041         RMB       2                   Screen address for start of current gfx cursor
00FA                  (       cocovtio.d):00653         gr0043         RMB       1                   Pixel mask for start of gfx cursor
00FA                  (       cocovtio.d):00654         gr0044         RMB       1                   Block # Graphics cursor is in
00FA                  (       cocovtio.d):00655         gr0045         RMB       2                   Offset in block Graphics cursor is in
00FA                  (       cocovtio.d):00656         gr0047         RMB       2                   'Working' X coordinate
00FA                  (       cocovtio.d):00657         gr0049         RMB       2                   'Working' Y coordinate
00FA                  (       cocovtio.d):00658         gr004B         RMB       2                   current X
00FA                  (       cocovtio.d):00659         gr004D         RMB       2                   current Y
00FA                  (       cocovtio.d):00660         gr004F         RMB       2                   X Size (in bytes)
00FA                  (       cocovtio.d):00661         gr0051         RMB       2                   Y Size (in bytes)
00FA                  (       cocovtio.d):00662         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
00FA                  (       cocovtio.d):00663         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
00FA                  (       cocovtio.d):00664         gr0057         RMB       1                   group
00FA                  (       cocovtio.d):00665         gr0058         RMB       1                   buffer #
00FA                  (       cocovtio.d):00666         gr0059         RMB       1                   save switch for overlay
00FA                  (       cocovtio.d):00667         gr005A         RMB       1                   PRN
00FA                  (       cocovtio.d):00668         gr005B         RMB       2                   X coordinate of Graphics cursor
00FA                  (       cocovtio.d):00669         gr005D         RMB       2                   Y coordinate of Graphics cursor
00FA                  (       cocovtio.d):00670         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
00FA                  (       cocovtio.d):00671         Gr.STYMk       RMB       1                   STY marker
00FA                  (       cocovtio.d):00672         gr0061         RMB       1                   foreground RGB data
00FA                  (       cocovtio.d):00673         gr0062         RMB       1                   background RGB data
00FA                  (       cocovtio.d):00674         gr0063         RMB       1                   bytes/row (on current screen...not window)
00FA                  (       cocovtio.d):00675         gr0064         RMB       2                   PSet vector
00FA                  (       cocovtio.d):00676         gr0066         RMB       2                   pset offset
00FA                  (       cocovtio.d):00677         gr0068         RMB       2                   LSet vector
00FA                  (       cocovtio.d):00678         gr006A         RMB       2                   max X co-ordinate
00FA                  (       cocovtio.d):00679         gr006C         RMB       2                   max Y co-ordinate
00FA                  (       cocovtio.d):00680         gr006E         RMB       2                   X pixel count
00FA                  (       cocovtio.d):00681         gr0070         RMB       2                   Y pixel count
00FA                  (       cocovtio.d):00682         gr0072         RMB       2                   Screen address of pixel we are doing
00FA                  (       cocovtio.d):00683         gr0074         RMB       1                   Pixel mask for pixel we are doing
00FA                  (       cocovtio.d):00684         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
00FA                  (       cocovtio.d):00685         gr0077         RMB       2                   Vector for right direction FFill
00FA                  (       cocovtio.d):00686         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
00FA                  (       cocovtio.d):00687         gr007A         RMB       2                   Vector for left direction FFill
00FA                  (       cocovtio.d):00688         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
00FA                  (       cocovtio.d):00689         gr007D         RMB       1                   buffer block #
00FA                  (       cocovtio.d):00690         gr007E         RMB       2                   buffer offset #
00FA                  (       cocovtio.d):00691         gr0080         RMB       2                   Buffer length (in bytes)
00FA                  (       cocovtio.d):00692         gr0082         RMB       3                   3 byte extended screen address
00FA                  (       cocovtio.d):00693         gr0085         RMB       2                   temp
00FA                  (       cocovtio.d):00694         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
00FA                  (       cocovtio.d):00695         gr0097         RMB       1                   temp
00FA                  (       cocovtio.d):00696         gr0098         RMB       1                   temp
                      (       cocovtio.d):00697         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
00FA                  (       cocovtio.d):00698         gr0099         RMB       2                   temp
                      (       cocovtio.d):00699         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
00FA                  (       cocovtio.d):00700         gr009B         RMB       1                   counter temp
00FA                  (       cocovtio.d):00701         gr009C         RMB       1
00FA                  (       cocovtio.d):00702         gr009D         RMB       2                   offset to buffer in block
00FA                  (       cocovtio.d):00703         gr009F         RMB       1
00FA                  (       cocovtio.d):00704         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00FA                  (       cocovtio.d):00705         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00706         * In ARC A1-A2 is the vector to the proper clipping routine
00FA                  (       cocovtio.d):00707         gr00A3         RMB       2                   Vector for shifting GP buffers
00FA                  (       cocovtio.d):00708         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00FA                  (       cocovtio.d):00709         gr00A7         RMB       2
00FA                  (       cocovtio.d):00710         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00FA                  (       cocovtio.d):00711         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00FA                  (       cocovtio.d):00712         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00FA                  (       cocovtio.d):00713         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00FA                  (       cocovtio.d):00714         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00FA                  (       cocovtio.d):00715         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00716         *gr00B3   rmb    256-.       ??? UNUSED
00FA                  (       cocovtio.d):00717         gr00B3         RMB       1                   temp veriable grfdrv
00FA                  (       cocovtio.d):00718         gr00B4         RMB       1                   temp veriable grfdrv
00FA                  (       cocovtio.d):00719         gr00B5         RMB       1                   regW for grfdrv
00FA                  (       cocovtio.d):00720         gr00B6         RMB       1
00FA                  (       cocovtio.d):00721         gr00B7         RMB       2
00FA                  (       cocovtio.d):00722         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00FA                  (       cocovtio.d):00723         gr00BB         RMB       2                   previously used in grfdrv at $B4
00FA                  (       cocovtio.d):00724         gr00BD         RMB       2                   previously used in grfdrv at $B6
00FA                  (       cocovtio.d):00725         gr00BF         RMB       256-.
                      (       cocovtio.d):00726         * GPLoad buffer - $1200 in system block 0
00FA                  (       cocovtio.d):00727         GPBuf          RMB       72                  common move buffer for gpload/get/put
00FA                  (       cocovtio.d):00728         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00729         
                      (       cocovtio.d):00730         *****************************************************************************
                      (       cocovtio.d):00731         * Window table entry structure
                      (       cocovtio.d):00732         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00733         * including any overlay windows.
00FA                  (       cocovtio.d):00734         MaxWind        EQU       32                  maximum allowable window tables
00FA                  (       cocovtio.d):00735         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00736                        ORG       -$10
00FA                  (       cocovtio.d):00737         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
00FA                  (       cocovtio.d):00738         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
00FA                  (       cocovtio.d):00739         Wt.LStrt       RMB       2                   screen logical start address                -$0D
00FA                  (       cocovtio.d):00740         Wt.CPX         RMB       1                   current X coord. start                      -$0B
00FA                  (       cocovtio.d):00741         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
00FA                  (       cocovtio.d):00742         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
00FA                  (       cocovtio.d):00743         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
00FA                  (       cocovtio.d):00744         Wt.SXFct       RMB       1                   X scaling factor                            -$07
00FA                  (       cocovtio.d):00745         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
00FA                  (       cocovtio.d):00746         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
00FA                  (       cocovtio.d):00747         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
00FA                  (       cocovtio.d):00748         Wt.CurX        RMB       2                   X coord of cursor                           -$02
00FA                  (       cocovtio.d):00749         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
00FA                  (       cocovtio.d):00750         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
00FA                  (       cocovtio.d):00751         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
00FA                  (       cocovtio.d):00752         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
00FA                  (       cocovtio.d):00753         Wt.Fore        RMB       1                   foreground palette #                         $06
00FA                  (       cocovtio.d):00754         Wt.Back        RMB       1                   background palette #                         $07
00FA                  (       cocovtio.d):00755         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
00FA                  (       cocovtio.d):00756         Wt.BSW         RMB       1                   character BSW switches                       $09
00FA                  (       cocovtio.d):00757         Wt.LSet        RMB       1                   LSet type                                    $0A
00FA                  (       cocovtio.d):00758         Wt.FBlk        RMB       1                   Font memory block #                          $0B
00FA                  (       cocovtio.d):00759         Wt.FOff        RMB       2                   Font offset in block                         $0C
00FA                  (       cocovtio.d):00760         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
00FA                  (       cocovtio.d):00761         Wt.POff        RMB       2                   PSet offset in block                         $0F
00FA                  (       cocovtio.d):00762         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
00FA                  (       cocovtio.d):00763         Wt.OOff        RMB       2                   Overlay offset in block                      $12
00FA                  (       cocovtio.d):00764         Wt.LVec        RMB       2                   LSet vector                                  $14
00FA                  (       cocovtio.d):00765         Wt.PVec        RMB       2                   PSet vector                                  $16
00FA                  (       cocovtio.d):00766         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
00FA                  (       cocovtio.d):00767         Wt.GOff        RMB       2                   GCursor offset in block                      $19
00FA                  (       cocovtio.d):00768         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
00FA                  (       cocovtio.d):00769         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
00FA                  (       cocovtio.d):00770         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
00FA                  (       cocovtio.d):00771         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
00FA                  (       cocovtio.d):00772         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
00FA                  (       cocovtio.d):00773         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00774         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00775         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00776         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00777         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00778         *       sizes for control+content regions
00FA                  (       cocovtio.d):00779         Wt.DfCPX       RMB       1                   default X cord. start                        $26
00FA                  (       cocovtio.d):00780         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
00FA                  (       cocovtio.d):00781         Wt.DfSZX       RMB       1                   default X size                               $28
00FA                  (       cocovtio.d):00782         Wt.DfSZY       RMB       1                   default Y size                               $29
00FA                  (       cocovtio.d):00783         Wt.Res         RMB       6                   unused                                   $2A-$2F
00FA                  (       cocovtio.d):00784         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00785         
                      (       cocovtio.d):00786         *****************************************************************************
                      (       cocovtio.d):00787         * Screen table entrys
                      (       cocovtio.d):00788         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00789         
00FA                  (       cocovtio.d):00790         STblMax        EQU       16                  Maximum number of screen tables
00FA                  (       cocovtio.d):00791         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00792                        ORG       0
00FA                  (       cocovtio.d):00793         St.Sty         RMB       1                   Screen type                         $00
00FA                  (       cocovtio.d):00794         St.SBlk        RMB       1                   Ram block start #                   $01
00FA                  (       cocovtio.d):00795         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
00FA                  (       cocovtio.d):00796         St.BRow        RMB       1                   Bytes per row                       $04
00FA                  (       cocovtio.d):00797         St.Brdr        RMB       1                   Border palette register #           $05
00FA                  (       cocovtio.d):00798         St.Fore        RMB       1                   Foreground palette register #       $06
00FA                  (       cocovtio.d):00799         St.Back        RMB       1                   Background palette register #       $07
00FA                  (       cocovtio.d):00800         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
00FA                  (       cocovtio.d):00801         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00802         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00803         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00804         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00805         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
00FA                  (       cocovtio.d):00806         St.Pals        RMB       16                  Palette register contents           $10
00FA                  (       cocovtio.d):00807         St.Siz         EQU       .
                      (       cocovtio.d):00808         
                      (       cocovtio.d):00809         *****************************************************************************
                      (       cocovtio.d):00810         * Graphics buffer tables
                      (       cocovtio.d):00811         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00812         * data.
                      (       cocovtio.d):00813                        ORG       0
00FA                  (       cocovtio.d):00814         Grf.Bck        RMB       1                   back block link #                   $00
00FA                  (       cocovtio.d):00815         Grf.Off        RMB       2                   back block header offset            $01
00FA                  (       cocovtio.d):00816         Grf.Grp        RMB       1                   group #                             $03
00FA                  (       cocovtio.d):00817         Grf.Buff       RMB       1                   buffer #                            $04
00FA                  (       cocovtio.d):00818         Grf.BSz        RMB       2                   buffer size (not including header)  $05
00FA                  (       cocovtio.d):00819         Grf.XSz        RMB       2                   X size (in pixels)                  $07
00FA                  (       cocovtio.d):00820         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
00FA                  (       cocovtio.d):00821         Grf.XBSz       RMB       1                   X size in bytes                     $0B
00FA                  (       cocovtio.d):00822         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
00FA                  (       cocovtio.d):00823         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
00FA                  (       cocovtio.d):00824         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
00FA                  (       cocovtio.d):00825         Grf.NBlk       RMB       1                   number blocks used                  $0F
00FA                  (       cocovtio.d):00826         Grf.Pal        RMB       16                  Copy of palette registers?          $10
00FA                  (       cocovtio.d):00827         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00828         
                      (       cocovtio.d):00829         *****************************************************************************
                      (       cocovtio.d):00830         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00831         * $1075-$0176
                      (       cocovtio.d):00832         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00833                        ORG       0
00FA                  (       cocovtio.d):00834         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
00FA                  (       cocovtio.d):00835         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
00FA                  (       cocovtio.d):00836         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
00FA                  (       cocovtio.d):00837         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
00FA                  (       cocovtio.d):00838         Gt.FClr        RMB       1                   Foreground color                               $07
00FA                  (       cocovtio.d):00839         Gt.BClr        RMB       1                   Background color                               $08
00FA                  (       cocovtio.d):00840         Gt.FMsk        RMB       1                   Foreground mask                                $09
00FA                  (       cocovtio.d):00841         Gt.BMsk        RMB       1                   Background mask                                $0A
00FA                  (       cocovtio.d):00842         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
00FA                  (       cocovtio.d):00843         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
00FA                  (       cocovtio.d):00844         Gt.Proc        RMB       1                   Process # of window creator                    $0E
00FA                  (       cocovtio.d):00845         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
00FA                  (       cocovtio.d):00846         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
00FA                  (       cocovtio.d):00847         GTabSz         EQU       .
                      (       cocovtio.d):00848         
                      (       cocovtio.d):00849         *****************************************************************************
                      (       cocovtio.d):00850         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00851         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00852         * WindInt.
                      (       cocovtio.d):00853         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00854         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00855         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00856                        ORG       $0240
                      (       cocovtio.d):00857                        RMB       WN.SIZ              copy of last accessed window descriptor
                      (       cocovtio.d):00858                        RMB       MN.SIZ              copy of last accessed menu descriptor
                      (       cocovtio.d):00859                        RMB       MI.SIZ              copy of last accessed item descriptor
                      (       cocovtio.d):00860                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00861         
                      (       cocovtio.d):00862         *****************************************************************************
                      (       cocovtio.d):00863         * WindInt menu handling table entry definition
                      (       cocovtio.d):00864                        ORG       0
00FA                  (       cocovtio.d):00865         MnuXNum        RMB       1                   menu #
00FA                  (       cocovtio.d):00866         MnuXStrt       RMB       1                   X start text co-ordinate
00FA                  (       cocovtio.d):00867         MnuXEnd        RMB       1                   X end text co-ordinate
                      (       cocovtio.d):00868                        RMB       1                   unused?
00FA                  (       cocovtio.d):00869         MnuHSiz        EQU       .
                      (       cocovtio.d):00870         
                      (       cocovtio.d):00871         *****************************************************************************
                      (       cocovtio.d):00872         * Character binary switches
00FA                  (       cocovtio.d):00873         TChr           EQU       %10000000           transparent characters
00FA                  (       cocovtio.d):00874         Under          EQU       %01000000           underline characters
00FA                  (       cocovtio.d):00875         Bold           EQU       %00100000           bold characters
00FA                  (       cocovtio.d):00876         Prop           EQU       %00010000           proportional spacing of characters
00FA                  (       cocovtio.d):00877         Scale          EQU       %00001000           automatic window scaling
00FA                  (       cocovtio.d):00878         Invers         EQU       %00000100           inverse characters
00FA                  (       cocovtio.d):00879         NoCurs         EQU       %00000010           no cursor display
00FA                  (       cocovtio.d):00880         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
00FA                  (       cocovtio.d):00884         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00885         *         equ   1          640x200x2
                      (       cocovtio.d):00886         *         equ   2          320x200x4
                      (       cocovtio.d):00887         *         equ   3          640x200x4
                      (       cocovtio.d):00888         *         equ   4          320x200x16
                      (       cocovtio.d):00889         *         equ   $85        80 column text
                      (       cocovtio.d):00890         *         equ   $86        40 column text
                      (       cocovtio.d):00891         
                      (       cocovtio.d):00892         *************************************
                      (       cocovtio.d):00893         * Window default palette color codes
                      (       cocovtio.d):00894         *
                      (       cocovtio.d):00895                        ORG       0
00FA                  (       cocovtio.d):00896         White.         RMB       1
00FA                  (       cocovtio.d):00897         Blue.          RMB       1
00FA                  (       cocovtio.d):00898         Black.         RMB       1
00FA                  (       cocovtio.d):00899         Green.         RMB       1
00FA                  (       cocovtio.d):00900         Red.           RMB       1
00FA                  (       cocovtio.d):00901         Yellow.        RMB       1
00FA                  (       cocovtio.d):00902         Magenta.       RMB       1
00FA                  (       cocovtio.d):00903         Cyan.          RMB       1
                      (       cocovtio.d):00904         
                      (       cocovtio.d):00905                        ENDC      
                      (       cocovtio.d):00906                        ENDC      
                      (/home/strick/6809):00041                  endc            
                      (/home/strick/6809):00042                                  
     00E1             (/home/strick/6809):00043         tylg     set   Drivr+Objct
     0080             (/home/strick/6809):00044         atrv     set   ReEnt+rev 
     0000             (/home/strick/6809):00045         rev      set   $00
     0001             (/home/strick/6809):00046         edition  set   1
                      (/home/strick/6809):00047                                  
0000 87CD0866000EE180 (/home/strick/6809):00048                  mod   eom,name,tylg,atrv,start,size
     B4001300FA
                      (/home/strick/6809):00049                                  
     00FA             (/home/strick/6809):00050         size     equ   V.Last    
                      (/home/strick/6809):00051                                  
000D 07               (/home/strick/6809):00052                  fcb   UPDAT.+EXEC.
                      (/home/strick/6809):00053                                  
000E 565449CF         (/home/strick/6809):00054         name     fcs   /VTIO/    
0012 01               (/home/strick/6809):00055                  fcb   edition   
                      (/home/strick/6809):00056                                  
0013 16000F           (/home/strick/6809):00057         start    lbra  Init      
0016 160058           (/home/strick/6809):00058                  lbra  Read      
0019 160374           (/home/strick/6809):00059                  lbra  Write     
001C 16043D           (/home/strick/6809):00060                  lbra  GetStat   
001F 160551           (/home/strick/6809):00061                  lbra  SetStat   
0022 160040           (/home/strick/6809):00062                  lbra  Term      
                      (/home/strick/6809):00063                                  
                      (/home/strick/6809):00064         * Init
                      (/home/strick/6809):00065         *
                      (/home/strick/6809):00066         * Entry:
                      (/home/strick/6809):00067         *    Y  = address of device descriptor
                      (/home/strick/6809):00068         *    U  = address of device memory area
                      (/home/strick/6809):00069         *
                      (/home/strick/6809):00070         * Exit:
                      (/home/strick/6809):00071         *    CC = carry set on error
                      (/home/strick/6809):00072         *    B  = error code
                      (/home/strick/6809):00073         *
0025                  (/home/strick/6809):00074         Init                     
                      (/home/strick/6809):00075         * MESS Debug lines for Phill
                      (/home/strick/6809):00076         *        pshs   y
                      (/home/strick/6809):00077         *       ldy     #$aa55
                      (/home/strick/6809):00078         *       ldy     #V.5136
                      (/home/strick/6809):00079         *       ldy     #V.51End
                      (/home/strick/6809):00080         *       puls    y
                      (/home/strick/6809):00081                                  
0025 FF006D           (/home/strick/6809):00082                  stu   >D.KbdSta  store devmem ptr
0028 4F               (/home/strick/6809):00083                  clra             clear A
0029 30C81D           (/home/strick/6809):00084                  leax  <V.SCF,u   point to memory after V.SCF
                      (/home/strick/6809):00085         ;         ldb   #$5D            get counter
002C C675             (/home/strick/6809):00086                  ldb   #V.51End-V.SCF
002E A780             (/home/strick/6809):00087         L002E    sta   ,x+        clear mem
0030 5A               (/home/strick/6809):00088                  decb             decrement counter
0031 26FB             (/home/strick/6809):00089                  bne   L002E      continue if more
                      (/home/strick/6809):00090                                  
0033 308D082B         (/home/strick/6809):00091                  leax  FlashCursor,pcr * Point to dummy cursor flash
0037 AFC87A           (/home/strick/6809):00092                  stx   V.Flash,u  * Setup cursor flash
                      (/home/strick/6809):00093                                  
003A 43               (/home/strick/6809):00094                  coma             A = $FF
003B 53               (/home/strick/6809):00095                  comb             B = $FF
                      (/home/strick/6809):00096                  IFEQ  coco2b+deluxe-1
                      (/home/strick/6809):00097                  clr   <V.Caps,u 
                      (/home/strick/6809):00098                  ELSE
003C E7C850           (/home/strick/6809):00099                  stb   <V.Caps,u 
                      (/home/strick/6809):00100                  ENDC
003F EDC85F           (/home/strick/6809):00101                  std   <V.LKeyCd,u
0042 EDC861           (/home/strick/6809):00102                  std   <V.2Key2,u
0045 863C             (/home/strick/6809):00103                  lda   #60       
0047 A7C851           (/home/strick/6809):00104                  sta   <V.ClkCnt,u
004A 308D0061         (/home/strick/6809):00105                  leax  >AltIRQ,pcr get IRQ routine ptr
004E BF006B           (/home/strick/6809):00106                  stx   >D.AltIRQ  store in AltIRQ
0051 308D03A6         (/home/strick/6809):00107                  leax  >SetDsply,pcr get display vector
0055 AFC85B           (/home/strick/6809):00108                  stx   <V.DspVct,u store in vector address
0058 308D04EB         (/home/strick/6809):00109                  leax  >XY2Addr,pcr get address of XY2Addr
005C AFC85D           (/home/strick/6809):00110                  stx   <V.CnvVct,u
005F ECA826           (/home/strick/6809):00111                  ldd   <IT.PAR,y  get parity and baud
0062 1605A1           (/home/strick/6809):00112                  lbra  SetupTerm  process them
                      (/home/strick/6809):00113                                  
                      (/home/strick/6809):00114         * Term
                      (/home/strick/6809):00115         *
                      (/home/strick/6809):00116         * Entry:
                      (/home/strick/6809):00117         *    U  = address of device memory area
                      (/home/strick/6809):00118         *
                      (/home/strick/6809):00119         * Exit:
                      (/home/strick/6809):00120         *    CC = carry set on error
                      (/home/strick/6809):00121         *    B  = error code
                      (/home/strick/6809):00122         *
0065 3401             (/home/strick/6809):00123         Term     pshs  cc        
0067 1A10             (/home/strick/6809):00124                  orcc  #IRQMask   mask interrupts
0069 BE0081           (/home/strick/6809):00125                  ldx   >D.Clock   get clock vector
006C BF006B           (/home/strick/6809):00126                  stx   >D.AltIRQ  and put back in AltIRQ
006F 3581             (/home/strick/6809):00127                  puls  pc,cc     
                      (/home/strick/6809):00128                                  
                      (/home/strick/6809):00129         * Read
                      (/home/strick/6809):00130         *
                      (/home/strick/6809):00131         * Entry:
                      (/home/strick/6809):00132         *    Y  = address of path descriptor
                      (/home/strick/6809):00133         *    U  = address of device memory area
                      (/home/strick/6809):00134         *
                      (/home/strick/6809):00135         * Exit:
                      (/home/strick/6809):00136         *    A  = character read
                      (/home/strick/6809):00137         *    CC = carry set on error
                      (/home/strick/6809):00138         *    B  = error code
                      (/home/strick/6809):00139         *
0071                  (/home/strick/6809):00140         Read                     
                      (/home/strick/6809):00141         *       pshs    y
                      (/home/strick/6809):00142         *       ldy     #$aa57
                      (/home/strick/6809):00143         *       puls    y
                      (/home/strick/6809):00144                                  
0071 30C90091         (/home/strick/6809):00145                  leax  V.InBuf,u  point X to input buffer
0075 E6C90090         (/home/strick/6809):00146                  ldb   V.IBufT,u  get tail pointer
0079 1A10             (/home/strick/6809):00147                  orcc  #IRQMask   mask IRQ
007B E1C9008F         (/home/strick/6809):00148                  cmpb  V.IBufH,u  same as head pointer
007F 270C             (/home/strick/6809):00149                  beq   Put2Bed    if so, buffer is empty, branch to sleep
0081 3A               (/home/strick/6809):00150                  abx              X now points to curr char
0082 A684             (/home/strick/6809):00151                  lda   ,x         get char
0084 8D22             (/home/strick/6809):00152                  bsr   L009D      check for tail wrap
0086 E7C90090         (/home/strick/6809):00153                  stb   V.IBufT,u  store updated tail
008A 1CEE             (/home/strick/6809):00154                  andcc  #^(IRQMask+Carry) unmask IRQ
008C 39               (/home/strick/6809):00155                  rts             
                      (/home/strick/6809):00156                                  
008D A644             (/home/strick/6809):00157         Put2Bed  lda   V.BUSY,u   get calling process ID
008F A745             (/home/strick/6809):00158                  sta   V.WAKE,u   store in V.WAKE
0091 1CEF             (/home/strick/6809):00159                  andcc  #^IRQMask  clear interrupts
0093 8E0000           (/home/strick/6809):00160                  ldx   #$0000    
0096 103F0A           (/home/strick/6809):00161                  os9   F$Sleep    sleep forever
0099 6F45             (/home/strick/6809):00162                  clr   V.WAKE,u   clear wake
009B 9E4B             (/home/strick/6809):00163                  ldx   <D.Proc    get pointer to current proc desc
009D E68836           (/home/strick/6809):00164                  ldb   <P$Signal,x get signal recvd
00A0 27CF             (/home/strick/6809):00165                  beq   Read       branch if no signal
00A2 C104             (/home/strick/6809):00166                  cmpb  #S$Window  window signal?
00A4 24CB             (/home/strick/6809):00167                  bcc   Read       branch if so
00A6 43               (/home/strick/6809):00168                  coma            
00A7 39               (/home/strick/6809):00169                  rts             
                      (/home/strick/6809):00170         * Check if we need to wrap around tail pointer to zero
00A8 5C               (/home/strick/6809):00171         L009D    incb             increment pointer
00A9 C17F             (/home/strick/6809):00172                  cmpb  #$7F       at end?
00AB 2301             (/home/strick/6809):00173                  bls   L00A3      branch if not
00AD 5F               (/home/strick/6809):00174                  clrb             else clear pointer (wrap to head)
00AE 39               (/home/strick/6809):00175         L00A3    rts             
                      (/home/strick/6809):00176                                  
                      (/home/strick/6809):00177         *
                      (/home/strick/6809):00178         * IRQ routine for keyboard
                      (/home/strick/6809):00179         *
00AF                  (/home/strick/6809):00180         AltIRQ                   
                      (/home/strick/6809):00181         *        pshs   y
                      (/home/strick/6809):00182         *       ldy     #$aa58
                      (/home/strick/6809):00183         *       puls    y
                      (/home/strick/6809):00184                                  
                      (/home/strick/6809):00185                                  
00AF FE006D           (/home/strick/6809):00186                  ldu   >D.KbdSta  get keyboard static
00B2 E6C832           (/home/strick/6809):00187                  ldb   <V.CFlg1,u graphics screen currently being displayed?
00B5 270B             (/home/strick/6809):00188                  beq   L00B7      branch if not
00B7 E6C82F           (/home/strick/6809):00189                  ldb   <V.Alpha,u alpha mode?
00BA 2706             (/home/strick/6809):00190                  beq   L00B7      branch if so
00BC A6C830           (/home/strick/6809):00191                  lda   <V.PIA1,u 
00BF 170339           (/home/strick/6809):00192                  lbsr  SetDsply   set up display
00C2 8EFF00           (/home/strick/6809):00193         L00B7    ldx   #PIA0Base  point to PIA base
00C5 4F               (/home/strick/6809):00194                  clra            
00C6 5F               (/home/strick/6809):00195                  clrb            
00C7 EDC86A           (/home/strick/6809):00196                  std   <V.KySns,u clear keysense byte
00CA 8D36             (/home/strick/6809):00197                  bsr   L00E8      get bits
00CC 2609             (/home/strick/6809):00198                  bne   L00CC     
00CE 6F02             (/home/strick/6809):00199                  clr   $02,x      clear PIA0Base+2
00D0 A684             (/home/strick/6809):00200                  lda   ,x         get byte from PIA
00D2 43               (/home/strick/6809):00201                  coma             complement
00D3 847F             (/home/strick/6809):00202                  anda  #$7F       strip off hi bit
00D5 2634             (/home/strick/6809):00203                  bne   L00F1      branch if any bit set
00D7 4F               (/home/strick/6809):00204         L00CC    clra            
00D8 5F               (/home/strick/6809):00205                  clrb            
00D9 EDC86E           (/home/strick/6809):00206                  std   <V.KTblLC,u clear
00DC 43               (/home/strick/6809):00207                  coma             A = $FF
00DD 6DC86D           (/home/strick/6809):00208                  tst   <V.Spcl,u  special key?
00E0 2603             (/home/strick/6809):00209                  bne   l@         branch if so
00E2 A7C85F           (/home/strick/6809):00210                  sta   <V.LKeyCd,u
00E5 E7C86D           (/home/strick/6809):00211         l@       stb   <V.Spcl,u  clear for next time
00E8 53               (/home/strick/6809):00212                  comb            
00E9 A7C860           (/home/strick/6809):00213                  sta   <V.2Key1,u
00EC EDC861           (/home/strick/6809):00214                  std   <V.2Key2,u
                      (/home/strick/6809):00215                                  
00EF                  (/home/strick/6809):00216         CheckFlash                 
00EF 6AC87C           (/home/strick/6809):00217                  dec   V.FlashCount,u Get flash counter
00F2 2702             (/home/strick/6809):00218                  beq   FlashTime  count zero, flash cursor
00F4 2008             (/home/strick/6809):00219                  bra   AltIRQEnd  Otherwise just call clock module
                      (/home/strick/6809):00220                                  
00F6                  (/home/strick/6809):00221         FlashTime                 
00F6 ADD87A           (/home/strick/6809):00222                  jsr   [V.Flash,u] Call flash routine
00F9 8619             (/home/strick/6809):00223                  lda   #CFlash50hz Re-init count
00FB A7C87C           (/home/strick/6809):00224                  sta   V.FlashCount,u
                      (/home/strick/6809):00225                                  
00FE                  (/home/strick/6809):00226         AltIRQEnd                 
00FE 6E9F0081         (/home/strick/6809):00227                  jmp   [>D.Clock] jump into clock module
                      (/home/strick/6809):00228                                  
0102 53               (/home/strick/6809):00229         L00E8    comb            
0103 E702             (/home/strick/6809):00230                  stb   $02,x      strobe one column
0105 E684             (/home/strick/6809):00231                  ldb   ,x         read PIA #0 row states
0107 53               (/home/strick/6809):00232                  comb             invert bits so 1=key pressed
0108 C403             (/home/strick/6809):00233                  andb  #$03       mask out all but lower 2 bits
010A 39               (/home/strick/6809):00234                  rts             
                      (/home/strick/6809):00235                                  
010B                  (/home/strick/6809):00236         L00F1                    
010B 8D6D             (/home/strick/6809):00237                  bsr   L015C     
010D 2BC8             (/home/strick/6809):00238                  bmi   L00CC     
010F 5F               (/home/strick/6809):00239                  clrb            
0110 8DF0             (/home/strick/6809):00240                  bsr   L00E8     
0112 26C3             (/home/strick/6809):00241                  bne   L00CC     
0114 A1C86F           (/home/strick/6809):00242                  cmpa  <V.6F,u   
0117 260F             (/home/strick/6809):00243                  bne   L010E     
0119 E6C851           (/home/strick/6809):00244                  ldb   <V.ClkCnt,u
011C 2706             (/home/strick/6809):00245                  beq   L010A     
011E 5A               (/home/strick/6809):00246                  decb            
011F E7C851           (/home/strick/6809):00247         L0105    stb   <V.ClkCnt,u
                      (/home/strick/6809):00248         *         bra   AltIRQEnd
0122 20CB             (/home/strick/6809):00249                  bra   CheckFlash
0124 C605             (/home/strick/6809):00250         L010A    ldb   #$05      
0126 200C             (/home/strick/6809):00251                  bra   L011A     
0128 A7C86F           (/home/strick/6809):00252         L010E    sta   <V.6F,u   
012B C605             (/home/strick/6809):00253                  ldb   #$05      
012D 6DC86B           (/home/strick/6809):00254                  tst   <V.KySame,u
0130 26ED             (/home/strick/6809):00255                  bne   L0105     
0132 C63C             (/home/strick/6809):00256                  ldb   #60       
0134 E7C851           (/home/strick/6809):00257         L011A    stb   <V.ClkCnt,u
0137 E6C9008F         (/home/strick/6809):00258                  ldb   V.IBufH,u  get head pointer in B
013B 30C90091         (/home/strick/6809):00259                  leax  V.InBuf,u  point X to input buffer
013F 3A               (/home/strick/6809):00260                  abx              X now holds address of head
0140 17FF65           (/home/strick/6809):00261                  lbsr  L009D      check for tail wrap
0143 E1C90090         (/home/strick/6809):00262                  cmpb  V.IBufT,u  B at tail?
0147 2704             (/home/strick/6809):00263                  beq   L012F      branch if so
0149 E7C9008F         (/home/strick/6809):00264                  stb   V.IBufH,u 
014D A784             (/home/strick/6809):00265         L012F    sta   ,x         store our char at ,X
014F 271C             (/home/strick/6809):00266                  beq   WakeIt     if nul, do wake-up
0151 A14D             (/home/strick/6809):00267                  cmpa  V.PCHR,u   pause character?
0153 2608             (/home/strick/6809):00268                  bne   L013F      branch if not
0155 AE49             (/home/strick/6809):00269                  ldx   V.DEV2,u   else get dev2 statics
0157 2714             (/home/strick/6809):00270                  beq   WakeIt     branch if none
0159 A708             (/home/strick/6809):00271                  sta   V.PAUS,x   else set pause request
015B 2010             (/home/strick/6809):00272                  bra   WakeIt    
015D C603             (/home/strick/6809):00273         L013F    ldb   #S$Intrpt  get interrupt signal
015F A14B             (/home/strick/6809):00274                  cmpa  V.INTR,u   our char same as intr?
0161 2706             (/home/strick/6809):00275                  beq   L014B      branch if same
0163 C602             (/home/strick/6809):00276                  ldb   #S$Abort   get abort signal
0165 A14C             (/home/strick/6809):00277                  cmpa  V.QUIT,u   our char same as QUIT?
0167 2604             (/home/strick/6809):00278                  bne   WakeIt     branch if not
0169 A643             (/home/strick/6809):00279         L014B    lda   V.LPRC,u   get ID of last process to get this device
016B 2004             (/home/strick/6809):00280                  bra   L0153      go for it
016D C601             (/home/strick/6809):00281         WakeIt   ldb   #S$Wake    get wake signal
016F A645             (/home/strick/6809):00282                  lda   V.WAKE,u   get process to wake
0171 2703             (/home/strick/6809):00283         L0153    beq   L0158      branch if none
0173 103F08           (/home/strick/6809):00284                  os9   F$Send     else send wakeup signal
0176 6F45             (/home/strick/6809):00285         L0158    clr   V.WAKE,u   clear process to wake flag
0178 2084             (/home/strick/6809):00286                  bra   AltIRQEnd  and move along
                      (/home/strick/6809):00287                                  
017A 4F               (/home/strick/6809):00288         L015C    clra            
017B 5F               (/home/strick/6809):00289                  clrb            
017C EDC866           (/home/strick/6809):00290                  std   <V.ShftDn,u SHIFT/CTRL flag; 0=NO $FF=YES
017F EDC868           (/home/strick/6809):00291                  std   <V.KeyFlg,u
                      (/home/strick/6809):00292         * %00000111-Column # (Output, 0-7)
                      (/home/strick/6809):00293         * %00111000-Row # (Input, 0-6)
0182 43               (/home/strick/6809):00294                  coma            
0183 53               (/home/strick/6809):00295                  comb            
0184 EDC863           (/home/strick/6809):00296                  std   <V.Key1,u  key 1&2 flags $FF=none
0187 A7C865           (/home/strick/6809):00297                  sta   <V.Key3,u  key 3     "
018A 4A               (/home/strick/6809):00298                  deca             lda #%11111110
018B A702             (/home/strick/6809):00299                  sta   $02,x      write column strobe
018D A684             (/home/strick/6809):00300         L016F    lda   ,x         read row from PIA0Base
                      (/home/strick/6809):00301                                  
                      (/home/strick/6809):00302                  ifne  (tano+d64+dalpha)
                      (/home/strick/6809):00303                  lbsr  DragonToCoCo ; Translate Dragon keyboard layout to CoCo
                      (/home/strick/6809):00304                  endc            
                      (/home/strick/6809):00305                                  
018F 43               (/home/strick/6809):00306                  coma             invert so 1=key pressed
0190 847F             (/home/strick/6809):00307                  anda  #$7F       keep only keys, bit 0=off 1=on
0192 270D             (/home/strick/6809):00308                  beq   L0183      no keys pressed, try next column
0194 C6FF             (/home/strick/6809):00309                  ldb   #$FF       preset counter to -1
0196 5C               (/home/strick/6809):00310         L0178    incb            
0197 44               (/home/strick/6809):00311                  lsra             bit test regA
0198 2403             (/home/strick/6809):00312                  bcc   L017F      no key, brach
019A 1700A2           (/home/strick/6809):00313                  lbsr  L0221      convert column/row to matrix value and store
019D C106             (/home/strick/6809):00314         L017F    cmpb  #$06       max counter
019F 25F5             (/home/strick/6809):00315                  bcs   L0178      loop if more bits to test
01A1 6CC868           (/home/strick/6809):00316         L0183    inc   <V.KeyFlg,u counter; used here for column
01A4 1A01             (/home/strick/6809):00317                  orcc  #Carry     bit marker; disable strobe
01A6 6902             (/home/strick/6809):00318                  rol   $02,x      shift to next column
01A8 25E3             (/home/strick/6809):00319                  bcs   L016F      not finished with columns so loop
01AA 1700FA           (/home/strick/6809):00320                  lbsr  L0289      simultaneous check; recover key matrix value
01AD 2B79             (/home/strick/6809):00321                  bmi   L020A      invalid so go
01AF A1C85F           (/home/strick/6809):00322                  cmpa  <V.LKeyCd,u last keyboard code
01B2 2603             (/home/strick/6809):00323                  bne   L0199     
01B4 6CC86B           (/home/strick/6809):00324                  inc   <V.KySame,u same key flag ?counter?
01B7 A7C85F           (/home/strick/6809):00325         L0199    sta   <V.LKeyCd,u setup for last key pressed
01BA 271B             (/home/strick/6809):00326                  beq   L01B9      if @ key, use lookup table
01BC 801A             (/home/strick/6809):00327                  suba  #$1A       the key value (matrix) of Z
01BE 2217             (/home/strick/6809):00328                  bhi   L01B9      not a letter, so go
01C0 8B1A             (/home/strick/6809):00329                  adda  #$1A       restore regA
01C2 E6C867           (/home/strick/6809):00330                  ldb   <V.CtrlDn,u CTRL flag
01C5 2640             (/home/strick/6809):00331                  bne   L01E9      CTRL is down so go
01C7 8B40             (/home/strick/6809):00332                  adda  #$40       convert to ASCII value; all caps
01C9 E6C866           (/home/strick/6809):00333                  ldb   <V.ShftDn,u shift key flag
01CC E8C850           (/home/strick/6809):00334                  eorb  <V.Caps,u  get current device static memory pointer
01CF C401             (/home/strick/6809):00335                  andb  #$01       tet caps flag
01D1 2634             (/home/strick/6809):00336                  bne   L01E9      not shifted so go
01D3 8B20             (/home/strick/6809):00337                  adda  #$20       convert to ASCII lowercase
01D5 2030             (/home/strick/6809):00338                  bra   L01E9     
                      (/home/strick/6809):00339         * Not a letter key, use the special keycode lookup table
                      (/home/strick/6809):00340         * Entry: A = table idnex (matrix scancode-26)
01D7 C603             (/home/strick/6809):00341         L01B9    ldb   #$03       three entries per key (normal, SHIFT, CTRL)
01D9 3D               (/home/strick/6809):00342                  mul              convert index to table offset
01DA A6C866           (/home/strick/6809):00343                  lda   <V.ShftDn,u shift key flag
01DD 2703             (/home/strick/6809):00344                  beq   L01C4      not shifted so go
01DF 5C               (/home/strick/6809):00345                  incb             else adjust offset for SHIFTed entry
01E0 2007             (/home/strick/6809):00346                  bra   L01CB      and do it
01E2 A6C867           (/home/strick/6809):00347         L01C4    lda   <V.CtrlDn,u CTRL flag?
01E5 2702             (/home/strick/6809):00348                  beq   L01CB      adjust offset for CTRL key
01E7 CB02             (/home/strick/6809):00349                  addb  #$02      
01E9 A6C86C           (/home/strick/6809):00350         L01CB    lda   <V.KySnsF,u key sense flag?
01EC 2704             (/home/strick/6809):00351                  beq   L01D4      not set, so go
01EE C111             (/home/strick/6809):00352                  cmpb  #$11       spacebar?
01F0 2F34             (/home/strick/6809):00353                  ble   L0208      must be an arrow so go
01F2 C14C             (/home/strick/6809):00354         L01D4    cmpb  #$4C       ALT key? (SHOULD BE $4C???)
01F4 2D05             (/home/strick/6809):00355                  blt   L01DD      not ALT, CTRL, F1, F2 or SHIFT so go
01F6 6CC869           (/home/strick/6809):00356                  inc   <V.AltDwn,u flag special keys (ALT, CTRL)
01F9 C006             (/home/strick/6809):00357                  subb  #$06       adjust offset to skip them
01FB 3410             (/home/strick/6809):00358         L01DD    pshs  x          save X
                      (/home/strick/6809):00359                                  
01FD 308D013E         (/home/strick/6809):00360                  leax  >KeyTbl,pcr point to keyboard table
0201 A685             (/home/strick/6809):00361                  lda   b,x       
0203 3510             (/home/strick/6809):00362                  puls  x         
0205 2B14             (/home/strick/6809):00363                  bmi   L01FD      if A = $81 - $84, special key
                      (/home/strick/6809):00364         * several entries to this routine from any key press; A is already ASCII
0207 E6C869           (/home/strick/6809):00365         L01E9    ldb   <V.AltDwn,u was ALT flagged?
020A 270C             (/home/strick/6809):00366                  beq   L01FA      no, so go
020C 813F             (/home/strick/6809):00367                  cmpa  #$3F       ?
020E 2306             (/home/strick/6809):00368                  bls   L01F8      # or code
0210 815B             (/home/strick/6809):00369                  cmpa  #$5B       [
0212 2402             (/home/strick/6809):00370                  bcc   L01F8      capital letter so go
0214 8A20             (/home/strick/6809):00371                  ora   #$20       convert to lower case
0216 8A80             (/home/strick/6809):00372         L01F8    ora   #$80       set for ALT characters
0218 1CF7             (/home/strick/6809):00373         L01FA    andcc  #^Negative not negative
021A 39               (/home/strick/6809):00374                  rts             
                      (/home/strick/6809):00375         * Flag that special key was hit
021B 6CC86D           (/home/strick/6809):00376         L01FD    inc   <V.Spcl,u 
021E E6C86B           (/home/strick/6809):00377                  ldb   <V.KySame,u
0221 2603             (/home/strick/6809):00378                  bne   L0208     
0223 63C850           (/home/strick/6809):00379                  com   <V.Caps,u 
0226 1A08             (/home/strick/6809):00380         L0208    orcc  #Negative  set negative
0228 39               (/home/strick/6809):00381         L020A    rts             
                      (/home/strick/6809):00382                                  
                      (/home/strick/6809):00383         * Calculate arrow keys for key sense byte
0229 3406             (/home/strick/6809):00384         L020B    pshs  b,a        convert column into power of 2
022B 5F               (/home/strick/6809):00385                  clrb            
022C 1A01             (/home/strick/6809):00386                  orcc  #Carry    
022E 4C               (/home/strick/6809):00387                  inca            
022F 59               (/home/strick/6809):00388         L0211    rolb            
0230 4A               (/home/strick/6809):00389                  deca            
0231 26FC             (/home/strick/6809):00390                  bne   L0211     
0233 2002             (/home/strick/6809):00391                  bra   L0219     
0235 3406             (/home/strick/6809):00392         L0217    pshs  b,a       
0237 EAC86A           (/home/strick/6809):00393         L0219    orb   <V.KySns,u previous value of column
023A E7C86A           (/home/strick/6809):00394                  stb   <V.KySns,u
023D 3586             (/home/strick/6809):00395                  puls  pc,b,a    
                      (/home/strick/6809):00396         * Check special keys (SHIFT, CTRL, ALT)
023F 3406             (/home/strick/6809):00397         L0221    pshs  b,a       
0241 C103             (/home/strick/6809):00398                  cmpb  #$03       is it row 3?
0243 2609             (/home/strick/6809):00399                  bne   L0230     
0245 A6C868           (/home/strick/6809):00400                  lda   <V.KeyFlg,u get column #
0248 8103             (/home/strick/6809):00401                  cmpa  #$03       is it column 3?; ie up arrow
024A 2D02             (/home/strick/6809):00402                  blt   L0230      if lt it must be a letter
024C 8DDB             (/home/strick/6809):00403                  bsr   L020B      its a non letter so bsr
024E 58               (/home/strick/6809):00404         L0230    lslb             B*8 8 keys per row
024F 58               (/home/strick/6809):00405                  lslb            
0250 58               (/home/strick/6809):00406                  lslb            
0251 EBC868           (/home/strick/6809):00407                  addb  <V.KeyFlg,u add in the column #
0254 2725             (/home/strick/6809):00408                  beq   L025D     
0256 C133             (/home/strick/6809):00409                  cmpb  #$33       ALT
0258 2607             (/home/strick/6809):00410                  bne   L0243     
025A 6CC869           (/home/strick/6809):00411                  inc   <V.AltDwn,u ALT down flag
025D C604             (/home/strick/6809):00412                  ldb   #$04      
025F 20D6             (/home/strick/6809):00413                  bra   L0219     
0261 C131             (/home/strick/6809):00414         L0243    cmpb  #$31       CLEAR?
0263 2704             (/home/strick/6809):00415                  beq   L024B     
0265 C134             (/home/strick/6809):00416                  cmpb  #$34       CTRL?
0267 2607             (/home/strick/6809):00417                  bne   L0252     
0269 6CC867           (/home/strick/6809):00418         L024B    inc   <V.CtrlDn,u CTRL down flag
026C C602             (/home/strick/6809):00419                  ldb   #$02      
026E 20C7             (/home/strick/6809):00420                  bra   L0219     
0270 C137             (/home/strick/6809):00421         L0252    cmpb  #$37       SHIFT key
0272 260C             (/home/strick/6809):00422                  bne   L0262     
0274 63C866           (/home/strick/6809):00423                  com   <V.ShftDn,u SHIFT down flag
0277 C601             (/home/strick/6809):00424                  ldb   #$01      
0279 20BC             (/home/strick/6809):00425                  bra   L0219     
027B C604             (/home/strick/6809):00426         L025D    ldb   #$04      
027D 8DB6             (/home/strick/6809):00427                  bsr   L0217     
027F 5F               (/home/strick/6809):00428                  clrb            
                      (/home/strick/6809):00429         * Check how many key (1-3) are currently being pressed
0280 3410             (/home/strick/6809):00430         L0262    pshs  x         
0282 30C863           (/home/strick/6809):00431                  leax  <V.Key1,u  1st key table
0285 8D04             (/home/strick/6809):00432                  bsr   L026D     
0287 3510             (/home/strick/6809):00433                  puls  x         
0289 3586             (/home/strick/6809):00434                  puls  pc,b,a    
028B 3402             (/home/strick/6809):00435         L026D    pshs  a         
028D A684             (/home/strick/6809):00436                  lda   ,x        
028F 2A06             (/home/strick/6809):00437                  bpl   L0279     
0291 E784             (/home/strick/6809):00438                  stb   ,x        
0293 C601             (/home/strick/6809):00439                  ldb   #$01      
0295 3582             (/home/strick/6809):00440                  puls  pc,a      
0297 A601             (/home/strick/6809):00441         L0279    lda   $01,x     
0299 2A06             (/home/strick/6809):00442                  bpl   L0283     
029B E701             (/home/strick/6809):00443                  stb   $01,x     
029D C602             (/home/strick/6809):00444                  ldb   #$02      
029F 3582             (/home/strick/6809):00445                  puls  pc,a      
02A1 E702             (/home/strick/6809):00446         L0283    stb   $02,x     
02A3 C603             (/home/strick/6809):00447                  ldb   #$03      
02A5 3582             (/home/strick/6809):00448                  puls  pc,a      
                      (/home/strick/6809):00449         * simultaneous key test
02A7 3434             (/home/strick/6809):00450         L0289    pshs  y,x,b     
02A9 8D61             (/home/strick/6809):00451                  bsr   L02EE     
02AB E6C86E           (/home/strick/6809):00452                  ldb   <V.KTblLC,u key table entry #
02AE 2733             (/home/strick/6809):00453                  beq   L02C5     
02B0 30C860           (/home/strick/6809):00454                  leax  <V.2Key1,u point to 2nd key table
02B3 3404             (/home/strick/6809):00455                  pshs  b         
02B5 31C863           (/home/strick/6809):00456         L0297    leay  <V.Key1,u  1st key table
02B8 C603             (/home/strick/6809):00457                  ldb   #$03      
02BA A684             (/home/strick/6809):00458                  lda   ,x         get key #1
02BC 2B16             (/home/strick/6809):00459                  bmi   L02B6      go if invalid? (no key)
02BE A1A4             (/home/strick/6809):00460         L02A0    cmpa  ,y         is it a match?
02C0 2606             (/home/strick/6809):00461                  bne   L02AA      go if not a matched key
02C2 6FA4             (/home/strick/6809):00462                  clr   ,y        
02C4 63A4             (/home/strick/6809):00463                  com   ,y         set value to $FF
02C6 200C             (/home/strick/6809):00464                  bra   L02B6     
02C8 3121             (/home/strick/6809):00465         L02AA    leay  $01,y     
02CA 5A               (/home/strick/6809):00466                  decb            
02CB 26F1             (/home/strick/6809):00467                  bne   L02A0     
02CD 86FF             (/home/strick/6809):00468                  lda   #$FF      
02CF A784             (/home/strick/6809):00469                  sta   ,x        
02D1 6AC86E           (/home/strick/6809):00470                  dec   <V.KTblLC,u key table entry #
02D4 3001             (/home/strick/6809):00471         L02B6    leax  $01,x     
02D6 6AE4             (/home/strick/6809):00472                  dec   ,s         column counter
02D8 26DB             (/home/strick/6809):00473                  bne   L0297     
02DA 3261             (/home/strick/6809):00474                  leas  $01,s     
02DC E6C86E           (/home/strick/6809):00475                  ldb   <V.KTblLC,u key table entry (can test for 3 simul keys)
02DF 2702             (/home/strick/6809):00476                  beq   L02C5     
02E1 8D44             (/home/strick/6809):00477                  bsr   L0309     
02E3 30C863           (/home/strick/6809):00478         L02C5    leax  <V.Key1,u  1st key table
02E6 8603             (/home/strick/6809):00479                  lda   #$03      
02E8 E680             (/home/strick/6809):00480         L02CA    ldb   ,x+       
02EA 2A10             (/home/strick/6809):00481                  bpl   L02DE     
02EC 4A               (/home/strick/6809):00482                  deca            
02ED 26F9             (/home/strick/6809):00483                  bne   L02CA     
02EF E6C86E           (/home/strick/6809):00484                  ldb   <V.KTblLC,u key table entry (can test for 3 simul keys)
02F2 2714             (/home/strick/6809):00485                  beq   L02EA     
02F4 5A               (/home/strick/6809):00486                  decb            
02F5 30C860           (/home/strick/6809):00487                  leax  <V.2Key1,u 2nd key table
02F8 A685             (/home/strick/6809):00488                  lda   b,x       
02FA 200A             (/home/strick/6809):00489                  bra   L02E8     
02FC 1F98             (/home/strick/6809):00490         L02DE    tfr   b,a       
02FE 30C860           (/home/strick/6809):00491                  leax  <V.2Key1,u 2nd key table
0301 8D88             (/home/strick/6809):00492                  bsr   L026D     
0303 E7C86E           (/home/strick/6809):00493                  stb   <V.KTblLC,u
0306 35B4             (/home/strick/6809):00494         L02E8    puls  pc,y,x,b  
0308 1A08             (/home/strick/6809):00495         L02EA    orcc  #Negative  flag negative
030A 35B4             (/home/strick/6809):00496                  puls  pc,y,x,b  
                      (/home/strick/6809):00497                                  
030C ECC866           (/home/strick/6809):00498         L02EE    ldd   <V.ShftDn,u
030F 260E             (/home/strick/6809):00499                  bne   L0301     
0311 8603             (/home/strick/6809):00500                  lda   #$03      
0313 30C863           (/home/strick/6809):00501                  leax  <V.Key1,u 
0316 E684             (/home/strick/6809):00502         L02F8    ldb   ,x        
0318 2706             (/home/strick/6809):00503                  beq   L0302     
031A 3001             (/home/strick/6809):00504                  leax  $01,x     
031C 4A               (/home/strick/6809):00505                  deca            
031D 26F7             (/home/strick/6809):00506                  bne   L02F8     
031F 39               (/home/strick/6809):00507         L0301    rts             
0320 53               (/home/strick/6809):00508         L0302    comb            
0321 E784             (/home/strick/6809):00509                  stb   ,x        
0323 6CC869           (/home/strick/6809):00510                  inc   <V.AltDwn,u
0326 39               (/home/strick/6809):00511                  rts             
                      (/home/strick/6809):00512                                  
                      (/home/strick/6809):00513         * Sort 3 byte packet @ G.2Key1 according to sign of each byte
                      (/home/strick/6809):00514         * so that positive #'s are at beginning & negative #'s at end
0327 30C860           (/home/strick/6809):00515         L0309    leax  <V.2Key1,u 2nd key table
032A 8D06             (/home/strick/6809):00516                  bsr   L0314      sort bytes 1 & 2
032C 3001             (/home/strick/6809):00517                  leax  $01,x     
032E 8D02             (/home/strick/6809):00518                  bsr   L0314      sort bytes 2 & 3
0330 301F             (/home/strick/6809):00519                  leax  -$01,x     sort 1 & 2 again (fall thru for third pass)
0332 A684             (/home/strick/6809):00520         L0314    lda   ,x         get current byte
0334 2A08             (/home/strick/6809):00521                  bpl   L0320      positive - no swap
0336 E601             (/home/strick/6809):00522                  ldb   $01,x      get next byte
0338 2B04             (/home/strick/6809):00523                  bmi   L0320      negative - no swap
033A A701             (/home/strick/6809):00524                  sta   $01,x      swap the bytes
033C E784             (/home/strick/6809):00525                  stb   ,x        
033E 39               (/home/strick/6809):00526         L0320    rts             
                      (/home/strick/6809):00527                                  
                      (/home/strick/6809):00528         ;
                      (/home/strick/6809):00529         ; Convert Dragon Keyboard mapping to CoCo.
                      (/home/strick/6809):00530         ;
                      (/home/strick/6809):00531         ; Entry a=Dragon formatted keyboard input from PIA
                      (/home/strick/6809):00532         ; Exit  a=CoCo formatted keyboard input from PIA
                      (/home/strick/6809):00533         ;
                      (/home/strick/6809):00534                                  
                      (/home/strick/6809):00535                  ifne  (tano+d64+dalpha)
033F                  (/home/strick/6809):00536         DragonToCoCo                 
                      (/home/strick/6809):00537                  pshs  b         
                      (/home/strick/6809):00538                  sta   ,-s        ; Save on stack
                      (/home/strick/6809):00539                  tfr   a,b        ; Take a copy of keycode
                      (/home/strick/6809):00540                  anda  #%01000000 ; Top row same on both machines
                      (/home/strick/6809):00541                  andb  #%00000011 ; shift bottom 2 rows up 4 places 
                      (/home/strick/6809):00542                  lslb            
                      (/home/strick/6809):00543                  lslb            
                      (/home/strick/6809):00544                  lslb            
                      (/home/strick/6809):00545                  lslb            
                      (/home/strick/6809):00546                  pshs  b         
                      (/home/strick/6809):00547                  ora   ,s+        ; recombine rows
                      (/home/strick/6809):00548                  puls  b         
                      (/home/strick/6809):00549                  andb  #%00111100 ; Shift middle 4 rows down 2 places
                      (/home/strick/6809):00550                  lsrb            
                      (/home/strick/6809):00551                  lsrb            
                      (/home/strick/6809):00552                  pshs  b         
                      (/home/strick/6809):00553                  ora   ,s+        ; recombine rows      
                      (/home/strick/6809):00554                  puls  b         
                      (/home/strick/6809):00555                  rts             
                      (/home/strick/6809):00556                                  
                      (/home/strick/6809):00557                  endc            
                      (/home/strick/6809):00558                                  
                      (/home/strick/6809):00559         * Key Table
                      (/home/strick/6809):00560         * 1st column = key (no modifier)
                      (/home/strick/6809):00561         * 2nd column = SHIFT+key
                      (/home/strick/6809):00562         * 3rd column = CTRL+key 
033F 004060           (/home/strick/6809):00563         KeyTbl   fcb   $00,$40,$60 ALT @ `
0342 0C1C13           (/home/strick/6809):00564                  fcb   $0c,$1c,$13 UP
0345 0A1A12           (/home/strick/6809):00565                  fcb   $0a,$1a,$12 DOWN
0348 081810           (/home/strick/6809):00566                  fcb   $08,$18,$10 LEFT
034B 091911           (/home/strick/6809):00567                  fcb   $09,$19,$11 RIGHT
034E 202020           (/home/strick/6809):00568                  fcb   $20,$20,$20 SPACEBAR
0351 303081           (/home/strick/6809):00569                  fcb   $30,$30,$81 0 0 capslock
0354 31217C           (/home/strick/6809):00570                  fcb   $31,$21,$7c 1 ! |
0357 322200           (/home/strick/6809):00571                  fcb   $32,$22,$00 2 " null
035A 33237E           (/home/strick/6809):00572                  fcb   $33,$23,$7e 3 # ~
035D 34241D           (/home/strick/6809):00573                  fcb   $34,$24,$1d 4 $ RS  (was null)
0360 35251E           (/home/strick/6809):00574                  fcb   $35,$25,$1e 5 % GS  (was null)
0363 36261F           (/home/strick/6809):00575                  fcb   $36,$26,$1f 6 & US  (was null)
0366 37275E           (/home/strick/6809):00576                  fcb   $37,$27,$5e 7 ' ^
0369 38285B           (/home/strick/6809):00577                  fcb   $38,$28,$5b 8 ( [
036C 39295D           (/home/strick/6809):00578                  fcb   $39,$29,$5d 9 ) ]
036F 3A2A00           (/home/strick/6809):00579                  fcb   $3a,$2a,$00 : * null
0372 3B2B7F           (/home/strick/6809):00580                  fcb   $3b,$2b,$7f ; + del (was null)
0375 2C3C7B           (/home/strick/6809):00581                  fcb   $2c,$3c,$7b , < {
0378 2D3D5F           (/home/strick/6809):00582                  fcb   $2d,$3d,$5f - = _
037B 2E3E7D           (/home/strick/6809):00583                  fcb   $2e,$3e,$7d . > }
037E 2F3F5C           (/home/strick/6809):00584                  fcb   $2f,$3f,$5c / ? \
0381 0D0D0D           (/home/strick/6809):00585                  fcb   $0d,$0d,$0d ENTER key
0384 000000           (/home/strick/6809):00586                  fcb   $00,$00,$00 CLEAR key
0387 05031B           (/home/strick/6809):00587                  fcb   $05,$03,$1b BREAK key
038A 313335           (/home/strick/6809):00588                  fcb   $31,$33,$35 F1 key
038D 323436           (/home/strick/6809):00589                  fcb   $32,$34,$36 F2 key
                      (/home/strick/6809):00590                                  
                      (/home/strick/6809):00591                                  
                      (/home/strick/6809):00592         * Write
                      (/home/strick/6809):00593         *
                      (/home/strick/6809):00594         * Entry:
                      (/home/strick/6809):00595         *    A  = character to write
                      (/home/strick/6809):00596         *    Y  = address of path descriptor
                      (/home/strick/6809):00597         *    U  = address of device memory area
                      (/home/strick/6809):00598         *
                      (/home/strick/6809):00599         * Exit:
                      (/home/strick/6809):00600         *    CC = carry set on error
                      (/home/strick/6809):00601         *    B  = error code
                      (/home/strick/6809):00602         *
0390 E6C825           (/home/strick/6809):00603         Write    ldb   <V.NGChr,u are we in the process of getting parameters?
0393 263D             (/home/strick/6809):00604                  bne   PrmHandl   yes, go process
0395 A7C852           (/home/strick/6809):00605                  sta   <V.WrChr,u save character to write
0398 E6C90082         (/home/strick/6809):00606                  ldb   V.51EscSeq,u     * in Escape sequence?
039C 2618             (/home/strick/6809):00607                  bne   GoCo             * yes, send to COHR
039E 8120             (/home/strick/6809):00608                  cmpa  #C$SPAC    space or higher?
03A0 2414             (/home/strick/6809):00609                  bcc   GoCo       yes, normal write
03A2 811B             (/home/strick/6809):00610                  cmpa  #$1B             * COHR Escape Code?
03A4 2710             (/home/strick/6809):00611                  beq   GoCo
03A6 811E             (/home/strick/6809):00612                  cmpa  #$1E       escape sequence $1E or $1F?
03A8 243D             (/home/strick/6809):00613                  bcc   Escape     yes, go process
03AA 810F             (/home/strick/6809):00614                  cmpa  #$0F       GFX codes?
03AC 102402E4         (/home/strick/6809):00615                  lbcc  GfxDispatch branch if so
03B0 8107             (/home/strick/6809):00616                  cmpa  #C$BELL    bell?
03B2 10270469         (/home/strick/6809):00617                  lbeq  Ding       if so, ring bell
                      (/home/strick/6809):00618         * Here we call the CO-module to write the character
03B6 A6C853           (/home/strick/6809):00619         GoCo     lda   <V.CurCo,u get CoVDG/CoWP flag
03B9 C603             (/home/strick/6809):00620         CoWrite  ldb   #$03       we want to write
                      (/home/strick/6809):00621                                  
03BB 30C872           (/home/strick/6809):00622         CallCO   leax  <V.GrfDrvE,u get base pointer to CO-entries
03BE 3402             (/home/strick/6809):00623                  pshs  a         
03C0 1702B4           (/home/strick/6809):00624                  lbsr  GetModOffset ; Get offset
03C3 AE86             (/home/strick/6809):00625                  ldx   a,x        get pointer to CoVDG/CoWP
03C5 3502             (/home/strick/6809):00626                  puls  a         
03C7 2705             (/home/strick/6809):00627                  beq   NoIOMod    branch if no module
03C9 A6C852           (/home/strick/6809):00628                  lda   <V.WrChr,u get character to write
03CC 6E85             (/home/strick/6809):00629         L039D    jmp   b,x        call i/o subroutine
03CE 53               (/home/strick/6809):00630         NoIOMod  comb            
03CF C6DD             (/home/strick/6809):00631                  ldb   #E$MNF    
03D1 39               (/home/strick/6809):00632                  rts             
                      (/home/strick/6809):00633                                  
                      (/home/strick/6809):00634         * Parameter handler
03D2 C102             (/home/strick/6809):00635         PrmHandl cmpb  #$02       two parameters left?
03D4 2709             (/home/strick/6809):00636                  beq   L03B0      branch if so
03D6 A7C829           (/home/strick/6809):00637                  sta   <V.NChr2,u else store in V.NChr2
03D9 6FC825           (/home/strick/6809):00638                  clr   <V.NGChr,u clear parameter counter
03DC 6ED826           (/home/strick/6809):00639                  jmp   [<V.RTAdd,u] jump to return address
03DF A7C828           (/home/strick/6809):00640         L03B0    sta   <V.NChar,u store in V.NChar
03E2 6AC825           (/home/strick/6809):00641                  dec   <V.NGChr,u decrement parameter counter
03E5 5F               (/home/strick/6809):00642                  clrb            
03E6 39               (/home/strick/6809):00643                  rts             
                      (/home/strick/6809):00644                                  
03E7 270B             (/home/strick/6809):00645         Escape   beq   L03C5      if $1E, we conveniently ignore it
03E9 308C0A           (/home/strick/6809):00646                  leax  <COEscape,pcr else it's $1F... set up to get next char
03EC C601             (/home/strick/6809):00647         L03BD    ldb   #$01      
03EE AFC826           (/home/strick/6809):00648         L03BF    stx   <V.RTAdd,u
03F1 E7C825           (/home/strick/6809):00649                  stb   <V.NGChr,u
03F4 5F               (/home/strick/6809):00650         L03C5    clrb            
03F5 39               (/home/strick/6809):00651                  rts             
                      (/home/strick/6809):00652                                  
03F6 C603             (/home/strick/6809):00653         COEscape ldb   #$03       write offset into CO-module
03F8 16019C           (/home/strick/6809):00654                  lbra  JmpCO     
                      (/home/strick/6809):00655                                  
                      (/home/strick/6809):00656         * Show VDG or Graphics screen
                      (/home/strick/6809):00657         * Entry: B = 0 for VDG, 1 for Graphics
03FB 3412             (/home/strick/6809):00658         SetDsply pshs  x,a       
03FD E7C82F           (/home/strick/6809):00659                  stb   <V.Alpha,u save passed flag in B
0400 B6FF22           (/home/strick/6809):00660                  lda   >PIA1Base+2
0403 8407             (/home/strick/6809):00661                  anda  #$07       mask out all but lower 3 bits
0405 AAE0             (/home/strick/6809):00662                  ora   ,s+        OR in passed A
0407 5D               (/home/strick/6809):00663                  tstb             display graphics?
0408 2603             (/home/strick/6809):00664                  bne   L03DE      branch if so
040A AAC871           (/home/strick/6809):00665                  ora   <V.CFlag,u
040D B7FF22           (/home/strick/6809):00666         L03DE    sta   >PIA1Base+2
0410 A7C830           (/home/strick/6809):00667                  sta   <V.PIA1,u 
0413 5D               (/home/strick/6809):00668                  tstb             display graphics?
0414 260E             (/home/strick/6809):00669                  bne   DoGfx      branch if so
                      (/home/strick/6809):00670         * Set up VDG screen for text
0416                  (/home/strick/6809):00671         DoVDG                    
0416 F7FFC0           (/home/strick/6809):00672                  stb   >$FFC0    
0419 F7FFC2           (/home/strick/6809):00673                  stb   >$FFC2    
041C F7FFC4           (/home/strick/6809):00674                  stb   >$FFC4    
041F A6C81D           (/home/strick/6809):00675                  lda   <V.ScrnA,u get pointer to alpha screen
0422 200C             (/home/strick/6809):00676                  bra   L0401     
                      (/home/strick/6809):00677                                  
                      (/home/strick/6809):00678         * Set up VDG screen for graphics
0424 F7FFC0           (/home/strick/6809):00679         DoGfx    stb   >$FFC0    
0427 F7FFC3           (/home/strick/6809):00680                  stb   >$FFC3    
042A F7FFC5           (/home/strick/6809):00681                  stb   >$FFC5    
042D A6C833           (/home/strick/6809):00682                  lda   <V.SBAdd,u get pointer to graphics screen
                      (/home/strick/6809):00683                                  
0430 C607             (/home/strick/6809):00684         L0401    ldb   #$07      
0432 8EFFC6           (/home/strick/6809):00685                  ldx   #$FFC6    
0435 44               (/home/strick/6809):00686                  lsra            
0436 44               (/home/strick/6809):00687         L0407    lsra            
0437 2506             (/home/strick/6809):00688                  bcs   L0410     
0439 A780             (/home/strick/6809):00689                  sta   ,x+       
043B 3001             (/home/strick/6809):00690                  leax  $01,x     
043D 2004             (/home/strick/6809):00691                  bra   L0414     
043F 3001             (/home/strick/6809):00692         L0410    leax  $01,x     
0441 A780             (/home/strick/6809):00693                  sta   ,x+       
0443 5A               (/home/strick/6809):00694         L0414    decb            
0444 26F0             (/home/strick/6809):00695                  bne   L0407     
0446 5F               (/home/strick/6809):00696                  clrb            
0447 3590             (/home/strick/6809):00697                  puls  pc,x      
                      (/home/strick/6809):00698                                  
0449 4772664472F6     (/home/strick/6809):00699         GrfDrv   fcs   /GrfDrv/    
044F 436F5644C7       (/home/strick/6809):00700         CoVDG    fcs   /CoVDG/    
0454 436F57D0         (/home/strick/6809):00701         CoWP     fcs   /CoWP/    
0458 436F48D2         (/home/strick/6809):00702         CoHR     fcs   /CoHR/    
                      (/home/strick/6809):00703                                  
                      (/home/strick/6809):00704         * GetStat
                      (/home/strick/6809):00705         *
                      (/home/strick/6809):00706         * Entry:
                      (/home/strick/6809):00707         *    A  = function code
                      (/home/strick/6809):00708         *    Y  = address of path descriptor
                      (/home/strick/6809):00709         *    U  = address of device memory area
                      (/home/strick/6809):00710         *
                      (/home/strick/6809):00711         * Exit:
                      (/home/strick/6809):00712         *    CC = carry set on error
                      (/home/strick/6809):00713         *    B  = error code
                      (/home/strick/6809):00714         *
045C A7C852           (/home/strick/6809):00715         GetStat  sta   <V.WrChr,u save off stat code
045F 8101             (/home/strick/6809):00716                  cmpa  #SS.Ready  ready call?
0461 260E             (/home/strick/6809):00717                  bne   L0439      branch if not
0463 A6C90090         (/home/strick/6809):00718                  lda   V.IBufT,u  get buff tail ptr
0467 A0C9008F         (/home/strick/6809):00719                  suba  V.IBufH,u  num of chars ready in A
046B 1027024A         (/home/strick/6809):00720                  lbeq  NotReady   branch if empty
046F 5F               (/home/strick/6809):00721         SSEOF    clrb            
0470 39               (/home/strick/6809):00722                  rts             
0471 8106             (/home/strick/6809):00723         L0439    cmpa  #SS.EOF    EOF?
0473 27FA             (/home/strick/6809):00724                  beq   SSEOF      branch if so
0475 AE26             (/home/strick/6809):00725                  ldx   PD.RGS,y   get caller's regs
0477 8113             (/home/strick/6809):00726                  cmpa  #SS.Joy    joystick?
0479 2727             (/home/strick/6809):00727                  beq   SSJOY      branch if so
047B 8126             (/home/strick/6809):00728                  cmpa  #SS.ScSiz  screen size?
047D 2716             (/home/strick/6809):00729                  beq   SSSCSIZ    branch if so
047F 8127             (/home/strick/6809):00730                  cmpa  #SS.KySns  keyboard sense?
0481 270B             (/home/strick/6809):00731                  beq   SSKYSNS    branch if so
0483 8112             (/home/strick/6809):00732                  cmpa  #SS.DStat  display status?
0485 10270088         (/home/strick/6809):00733                  lbeq  SSDSTAT    branch if so
0489 C606             (/home/strick/6809):00734                  ldb   #$06       getstat entry into CO-module
048B 160109           (/home/strick/6809):00735                  lbra  JmpCO     
                      (/home/strick/6809):00736                                  
                      (/home/strick/6809):00737         * Return key sense information
048E E6C86A           (/home/strick/6809):00738         SSKYSNS  ldb   <V.KySns,u get key sense info
0491 E701             (/home/strick/6809):00739                  stb   R$A,x      put in caller's A
0493 5F               (/home/strick/6809):00740                  clrb            
0494 39               (/home/strick/6809):00741                  rts             
                      (/home/strick/6809):00742                                  
                      (/home/strick/6809):00743         * Return screen size
0495 4F               (/home/strick/6809):00744         SSSCSIZ  clra             clear upper 8 bits of D
0496 E6C82D           (/home/strick/6809):00745                  ldb   <V.Col,u   get column count
0499 ED04             (/home/strick/6809):00746                  std   R$X,x      save in X
049B E6C82E           (/home/strick/6809):00747                  ldb   <V.Row,u   get row count
049E ED06             (/home/strick/6809):00748                  std   R$Y,x      save in Y
04A0 5F               (/home/strick/6809):00749                  clrb             no error
04A1 39               (/home/strick/6809):00750                  rts             
                      (/home/strick/6809):00751                                  
                      (/home/strick/6809):00752         * Get joytsick values
04A2 3421             (/home/strick/6809):00753         SSJOY    pshs  y,cc      
04A4 1A10             (/home/strick/6809):00754                  orcc  #IRQMask   mask interrupts
04A6 86FF             (/home/strick/6809):00755                  lda   #$FF      
04A8 B7FF02           (/home/strick/6809):00756                  sta   >PIA0Base+2
04AB F6FF00           (/home/strick/6809):00757                  ldb   >PIA0Base 
04AE 10AE04           (/home/strick/6809):00758                  ldy   R$X,x      get joystick number to poll
04B1 2606             (/home/strick/6809):00759                  bne   L0481     
04B3 C401             (/home/strick/6809):00760                  andb  #$01      
04B5 2606             (/home/strick/6809):00761                  bne   L0485     
04B7 2005             (/home/strick/6809):00762                  bra   L0486     
04B9 C402             (/home/strick/6809):00763         L0481    andb  #$02      
04BB 2701             (/home/strick/6809):00764                  beq   L0486     
04BD 4F               (/home/strick/6809):00765         L0485    clra            
04BE A701             (/home/strick/6809):00766         L0486    sta   R$A,x     
04C0 B6FF03           (/home/strick/6809):00767                  lda   >PIA0Base+3
04C3 8A08             (/home/strick/6809):00768                  ora   #$08      
04C5 10AE04           (/home/strick/6809):00769                  ldy   R$X,x     
04C8 2602             (/home/strick/6809):00770                  bne   L0494     
04CA 84F7             (/home/strick/6809):00771                  anda  #$F7      
04CC B7FF03           (/home/strick/6809):00772         L0494    sta   >PIA0Base+3
04CF B6FF01           (/home/strick/6809):00773                  lda   >PIA0Base+1
04D2 84F7             (/home/strick/6809):00774                  anda  #$F7      
04D4 8D15             (/home/strick/6809):00775                  bsr   L04B3     
04D6 ED04             (/home/strick/6809):00776                  std   R$X,x     
04D8 B6FF01           (/home/strick/6809):00777                  lda   >PIA0Base+1
04DB 8A08             (/home/strick/6809):00778                  ora   #$08      
04DD 8D0C             (/home/strick/6809):00779                  bsr   L04B3     
04DF 3406             (/home/strick/6809):00780                  pshs  b,a       
04E1 CC003F           (/home/strick/6809):00781                  ldd   #63       
04E4 A3E1             (/home/strick/6809):00782                  subd  ,s++      
04E6 ED06             (/home/strick/6809):00783                  std   R$Y,x     
04E8 5F               (/home/strick/6809):00784                  clrb            
04E9 35A1             (/home/strick/6809):00785                  puls  pc,y,cc   
                      (/home/strick/6809):00786                                  
04EB B7FF01           (/home/strick/6809):00787         L04B3    sta   >PIA0Base+1
04EE 867F             (/home/strick/6809):00788                  lda   #$7F      
04F0 C640             (/home/strick/6809):00789                  ldb   #$40      
04F2 200B             (/home/strick/6809):00790                  bra   L04C7     
04F4 54               (/home/strick/6809):00791         L04BC    lsrb            
04F5 C101             (/home/strick/6809):00792                  cmpb  #$01      
04F7 2206             (/home/strick/6809):00793                  bhi   L04C7     
04F9 44               (/home/strick/6809):00794                  lsra            
04FA 44               (/home/strick/6809):00795                  lsra            
04FB 1F89             (/home/strick/6809):00796                  tfr   a,b       
04FD 4F               (/home/strick/6809):00797                  clra            
04FE 39               (/home/strick/6809):00798                  rts             
04FF 3404             (/home/strick/6809):00799         L04C7    pshs  b         
0501 B7FF20           (/home/strick/6809):00800                  sta   >PIA1Base 
0504 7DFF00           (/home/strick/6809):00801                  tst   >PIA0Base 
0507 2A04             (/home/strick/6809):00802                  bpl   L04D5     
0509 ABE0             (/home/strick/6809):00803                  adda  ,s+       
050B 20E7             (/home/strick/6809):00804                  bra   L04BC     
050D A0E0             (/home/strick/6809):00805         L04D5    suba  ,s+       
050F 20E3             (/home/strick/6809):00806                  bra   L04BC     
                      (/home/strick/6809):00807                                  
                      (/home/strick/6809):00808         * Return display status
                      (/home/strick/6809):00809         * Entry: A = path
                      (/home/strick/6809):00810         * Exit: A = color code of pixel at cursor address
                      (/home/strick/6809):00811         *       X = address of graphics display memory
                      (/home/strick/6809):00812         *       Y = graphics cursor address; X = MSB, Y = LSB
0511 1701A0           (/home/strick/6809):00813         SSDSTAT  lbsr  GfxActv    gfx screen allocated?
0514 2530             (/home/strick/6809):00814                  bcs   L050E      branch if not
0516 ECC845           (/home/strick/6809):00815                  ldd   <V.GCrsX,u else get X/Y gfx cursor position
0519 8D2C             (/home/strick/6809):00816                  bsr   XY2Addr   
051B 1F89             (/home/strick/6809):00817                  tfr   a,b       
051D E484             (/home/strick/6809):00818                  andb  ,x        
051F 8501             (/home/strick/6809):00819         L04E7    bita  #$01      
0521 260B             (/home/strick/6809):00820                  bne   L04F6     
0523 44               (/home/strick/6809):00821                  lsra             divide D by 2
0524 54               (/home/strick/6809):00822                  lsrb            
0525 6DC824           (/home/strick/6809):00823                  tst   <V.Mode,u  which mode?
0528 2BF5             (/home/strick/6809):00824                  bmi   L04E7      branch if 256x192
052A 44               (/home/strick/6809):00825                  lsra             else divide D by 2 again
052B 54               (/home/strick/6809):00826                  lsrb            
052C 20F1             (/home/strick/6809):00827                  bra   L04E7     
052E 3404             (/home/strick/6809):00828         L04F6    pshs  b         
0530 E6C84B           (/home/strick/6809):00829                  ldb   <V.PMask,u get pixel color mask in B
0533 C4FC             (/home/strick/6809):00830                  andb  #$FC      
0535 EAE0             (/home/strick/6809):00831                  orb   ,s+       
0537 AE26             (/home/strick/6809):00832                  ldx   PD.RGS,y   get caller's regs
0539 E701             (/home/strick/6809):00833                  stb   R$A,x      place pixel color in A
053B ECC845           (/home/strick/6809):00834                  ldd   <V.GCrsX,u
053E ED06             (/home/strick/6809):00835                  std   R$Y,x      cursor X/Y pos in Y,
0540 ECC833           (/home/strick/6809):00836                  ldd   <V.SBAdd,u
0543 ED04             (/home/strick/6809):00837                  std   R$X,x      and screen addr in X
0545 5F               (/home/strick/6809):00838                  clrb            
0546 39               (/home/strick/6809):00839         L050E    rts             
                      (/home/strick/6809):00840                                  
                      (/home/strick/6809):00841         * Entry: A = X coor, B = Y coor
0547 3426             (/home/strick/6809):00842         XY2Addr  pshs  y,b,a      save off regs
0549 E6C824           (/home/strick/6809):00843                  ldb   <V.Mode,u  get video mode
054C 2A01             (/home/strick/6809):00844                  bpl   L0517      branch if 128x192 (divide A by 4)
054E 44               (/home/strick/6809):00845                  lsra             else divide by 8
054F 44               (/home/strick/6809):00846         L0517    lsra            
0550 44               (/home/strick/6809):00847                  lsra            
0551 3402             (/home/strick/6809):00848                  pshs  a          save on stack
0553 C6BF             (/home/strick/6809):00849                  ldb   #191       get max Y
0555 E062             (/home/strick/6809):00850                  subb  $02,s      sutract from Y on stack
0557 8620             (/home/strick/6809):00851                  lda   #32        byte sper line
0559 3D               (/home/strick/6809):00852                  mul             
055A EBE0             (/home/strick/6809):00853                  addb  ,s+        add offset on stack
055C 8900             (/home/strick/6809):00854                  adca  #$00      
055E 10AEC833         (/home/strick/6809):00855                  ldy   <V.SBAdd,u get base address
0562 31AB             (/home/strick/6809):00856                  leay  d,y        move D bytes into address
0564 A6E4             (/home/strick/6809):00857                  lda   ,s         pick up original X coor
0566 10AFE4           (/home/strick/6809):00858                  sty   ,s         put offset addr on stack
0569 A4C844           (/home/strick/6809):00859                  anda  <V.PixBt,u
056C AEC842           (/home/strick/6809):00860                  ldx   <V.MTabl,u
056F A686             (/home/strick/6809):00861                  lda   a,x       
0571 35B0             (/home/strick/6809):00862                  puls  pc,y,x     X = offset address, Y = base
                      (/home/strick/6809):00863                                  
                      (/home/strick/6809):00864         * SetStat
                      (/home/strick/6809):00865         *
                      (/home/strick/6809):00866         * Entry:
                      (/home/strick/6809):00867         *    A  = function code
                      (/home/strick/6809):00868         *    Y  = address of path descriptor
                      (/home/strick/6809):00869         *    U  = address of device memory area
                      (/home/strick/6809):00870         *
                      (/home/strick/6809):00871         * Exit:
                      (/home/strick/6809):00872         *    CC = carry set on error
                      (/home/strick/6809):00873         *    B  = error code
                      (/home/strick/6809):00874         *
0573 A7C852           (/home/strick/6809):00875         SetStat  sta   <V.WrChr,u save function code
0576 AE26             (/home/strick/6809):00876                  ldx   PD.RGS,y   get caller's regs
0578 8128             (/home/strick/6809):00877                  cmpa  #SS.ComSt 
057A 10270086         (/home/strick/6809):00878                  lbeq  SSCOMST   
057E 8180             (/home/strick/6809):00879                  cmpa  #SS.AAGBf 
0580 272C             (/home/strick/6809):00880                  beq   SSAAGBF   
0582 8181             (/home/strick/6809):00881                  cmpa  #SS.SLGBf 
0584 2755             (/home/strick/6809):00882                  beq   SSSLGBF   
0586 8127             (/home/strick/6809):00883                  cmpa  #SS.KySns 
0588 260B             (/home/strick/6809):00884                  bne   CoGetStt  
058A EC04             (/home/strick/6809):00885                  ldd   R$X,x      get caller's key sense set data
058C 2702             (/home/strick/6809):00886                  beq   L0558      branch if zero
058E C6FF             (/home/strick/6809):00887                  ldb   #$FF       else set all bits
0590 E7C86C           (/home/strick/6809):00888         L0558    stb   <V.KySnsF,u store value in KySnsFlag
0593 5F               (/home/strick/6809):00889         L055B    clrb            
0594 39               (/home/strick/6809):00890         L055C    rts             
                      (/home/strick/6809):00891                                  
0595 C609             (/home/strick/6809):00892         CoGetStt ldb   #$09       CO-module setstat
0597 3404             (/home/strick/6809):00893         JmpCO    pshs  b         
0599 A6C853           (/home/strick/6809):00894                  lda   <V.CurCo,u get CO-module in use
059C 17FE1C           (/home/strick/6809):00895                  lbsr  CallCO    
059F 3502             (/home/strick/6809):00896                  puls  a         
05A1 24F0             (/home/strick/6809):00897                  bcc   L055B     
05A3 6DC872           (/home/strick/6809):00898                  tst   <V.GrfDrvE,u GrfDrv linked?
05A6 27EC             (/home/strick/6809):00899                  beq   L055C     
05A8 1F89             (/home/strick/6809):00900                  tfr   a,b       
05AA 4F               (/home/strick/6809):00901                  clra             GrfDrv address offset in statics
05AB 16FE0D           (/home/strick/6809):00902                  lbra  CallCO     call it
                      (/home/strick/6809):00903                                  
                      (/home/strick/6809):00904         * Reserve an additional graphics buffer (up to 2)
05AE E6C831           (/home/strick/6809):00905         SSAAGBF  ldb   <V.Rdy,u   was initial buffer allocated with $0F?
05B1 10270104         (/home/strick/6809):00906                  lbeq  NotReady   branch if not
05B5 3404             (/home/strick/6809):00907                  pshs  b          save buffer number
05B7 31C837           (/home/strick/6809):00908                  leay  <V.AGBuf,u point to additional graphics buffers
05BA ECA4             (/home/strick/6809):00909                  ldd   ,y         first entry empty?
05BC 2708             (/home/strick/6809):00910                  beq   L058E      branch if so
05BE 3122             (/home/strick/6809):00911                  leay  $02,y      else move to next entry
05C0 6CE4             (/home/strick/6809):00912                  inc   ,s         increment B on stack
05C2 ECA4             (/home/strick/6809):00913                  ldd   ,y         second entry empty?
05C4 2610             (/home/strick/6809):00914                  bne   L059E      if not, no room for more... error out
05C6 170115           (/home/strick/6809):00915         L058E    lbsr  GetMem     allocate graphics buffer memory
05C9 250E             (/home/strick/6809):00916                  bcs   L05A1      branch if error
05CB EDA4             (/home/strick/6809):00917                  std   ,y         save new buffer pointer at ,Y
05CD ED04             (/home/strick/6809):00918                  std   R$X,x      and in caller's X
05CF 3504             (/home/strick/6809):00919                  puls  b          get buffer number off stack
05D1 4F               (/home/strick/6809):00920                  clra             clear hi byte of D
05D2 ED06             (/home/strick/6809):00921                  std   R$Y,x      and put in caller's Y (buffer number)
05D4 5F               (/home/strick/6809):00922                  clrb             call is ok
05D5 39               (/home/strick/6809):00923                  rts              and return
05D6 C6CB             (/home/strick/6809):00924         L059E    ldb   #E$BMode  
05D8 43               (/home/strick/6809):00925                  coma            
05D9 3582             (/home/strick/6809):00926         L05A1    puls  pc,a      
                      (/home/strick/6809):00927                                  
                      (/home/strick/6809):00928         * Select a graphics buffer
05DB E6C831           (/home/strick/6809):00929         SSSLGBF  ldb   <V.Rdy,u   was initial buffer allocated with $0F?
05DE 102700D7         (/home/strick/6809):00930                  lbeq  NotReady   branch if not
05E2 EC06             (/home/strick/6809):00931                  ldd   R$Y,x      else get buffer number from caller
05E4 10830002         (/home/strick/6809):00932                  cmpd  #$0002     compare against high
05E8 2216             (/home/strick/6809):00933                  bhi   BadMode    branch if error
05EA 31C835           (/home/strick/6809):00934                  leay  <V.GBuff,u point to base graphics buffer address
05ED 58               (/home/strick/6809):00935                  lslb             multiply by 2
05EE ECA5             (/home/strick/6809):00936                  ldd   b,y        get pointer
05F0 270E             (/home/strick/6809):00937                  beq   BadMode    branch if error
05F2 EDC833           (/home/strick/6809):00938                  std   <V.SBAdd,u else save in current
05F5 EC04             (/home/strick/6809):00939                  ldd   R$X,x      get select flag
05F7 2702             (/home/strick/6809):00940                  beq   L05C3      if zero, do nothing
05F9 C601             (/home/strick/6809):00941                  ldb   #$01       else set display flag
05FB E7C832           (/home/strick/6809):00942         L05C3    stb   <V.CFlg1,u save display flag
05FE 5F               (/home/strick/6809):00943                  clrb            
05FF 39               (/home/strick/6809):00944                  rts             
0600 53               (/home/strick/6809):00945         BadMode  comb            
0601 C6CB             (/home/strick/6809):00946                  ldb   #E$BMode  
0603 39               (/home/strick/6809):00947                  rts             
                      (/home/strick/6809):00948                                  
0604 EC06             (/home/strick/6809):00949         SSCOMST  ldd   R$Y,x      Get caller's Y
0606                  (/home/strick/6809):00950         SetupTerm                 
0606 8502             (/home/strick/6809):00951                  bita  #ModCoVDG   CoWP?
0608 2717             (/home/strick/6809):00952                  beq   GoCoWP     branch if so
060A C610             (/home/strick/6809):00953                  ldb   #$10       assume true lower case TRUE
060C 8501             (/home/strick/6809):00954                  bita  #$01       true lowercase bit set?
060E 2601             (/home/strick/6809):00955                  bne   GoCoVDG     branch if so
0610 5F               (/home/strick/6809):00956                  clrb             true lower case FALSE
                      (/home/strick/6809):00957                                  
0611 E7C871           (/home/strick/6809):00958         GoCoVDG  stb   <V.CFlag,u save flag for later
0614 8602             (/home/strick/6809):00959                  lda   #ModCoVDG   CoVDG is loaded bit
0616 8E2010           (/home/strick/6809):00960                  ldx   #$2010     32x16
0619 3472             (/home/strick/6809):00961                  pshs  u,y,x,a   
061B 308DFE30         (/home/strick/6809):00962                  leax  >CoVDG,pcr 
061F 200F             (/home/strick/6809):00963                  bra   SetupCoModule
                      (/home/strick/6809):00964                                  
0621 8504             (/home/strick/6809):00965         GoCoWP   bita  #ModCoWP   ; CoWP needed ?
0623 2718             (/home/strick/6809):00966                  beq   GoCoHR    
0625 8604             (/home/strick/6809):00967                  lda   #ModCoWP   'CoWP is loaded' bit
0627 8E5018           (/home/strick/6809):00968                  ldx   #$5018     80x24
062A 3472             (/home/strick/6809):00969                  pshs  u,y,x,a   
062C 308DFE24         (/home/strick/6809):00970                  leax  >CoWP,pcr 
                      (/home/strick/6809):00971                                  
0630                  (/home/strick/6809):00972         SetupCoModule                 
0630 8D16             (/home/strick/6809):00973                  bsr   LoadCoModule load CO-module if not already loaded
0632 3572             (/home/strick/6809):00974                  puls  u,y,x,a   
0634 2506             (/home/strick/6809):00975                  bcs   L0600     
0636 AFC82D           (/home/strick/6809):00976                  stx   <V.Col,u   save screen size
0639 A7C853           (/home/strick/6809):00977                  sta   <V.CurCo,u current module in use? ($02=CoVDG, $04=C080)
063C 39               (/home/strick/6809):00978         L0600    rts             
                      (/home/strick/6809):00979                                  
063D 8E3318           (/home/strick/6809):00980         GOCoHR   ldx   #$3318     51x24
0640 3472             (/home/strick/6809):00981                  pshs  u,y,x,a   
0642 308DFE12         (/home/strick/6809):00982                  leax  >CoHR,pcr 
0646 20E8             (/home/strick/6809):00983                  bra   SetupCoModule
                      (/home/strick/6809):00984                                  
0648                  (/home/strick/6809):00985         LoadCoModule                 
0648 A5C870           (/home/strick/6809):00986                  bita  <V.COLoad,u module loaded?
064B 2702             (/home/strick/6809):00987                  beq   L0608      branch if not
064D 5F               (/home/strick/6809):00988         L0606    clrb             else clear carry
064E 39               (/home/strick/6809):00989                  rts              and return
                      (/home/strick/6809):00990                                  
064F 3432             (/home/strick/6809):00991         L0608    pshs  y,x,a     
0651 170033           (/home/strick/6809):00992                  lbsr  LinkSub   
0654 2410             (/home/strick/6809):00993                  bcc   L061F      branch if link was successful
0656 AE61             (/home/strick/6809):00994                  ldx   $01,s      get pointer to name on stack
0658 3440             (/home/strick/6809):00995                  pshs  u         
065A 103F01           (/home/strick/6809):00996                  os9   F$Load     try to load subroutine I/O module
065D 3540             (/home/strick/6809):00997                  puls  u         
065F 2405             (/home/strick/6809):00998                  bcc   L061F     
0661 3532             (/home/strick/6809):00999                  puls  y,x,a     
0663 16FD68           (/home/strick/6809):01000                  lbra  NoIOMod   
0666 30C872           (/home/strick/6809):01001         L061F    leax  <V.GrfDrvE,u get base pointer to CO-entries
0669 A6E4             (/home/strick/6809):01002                  lda   ,s        
066B 8D0A             (/home/strick/6809):01003                  bsr   GetModOffset ; Get offset in table
066D 10AF86           (/home/strick/6809):01004                  sty   a,x        ; Save address
                      (/home/strick/6809):01005                                  
0670 3532             (/home/strick/6809):01006                  puls  y,x,a     
0672 C600             (/home/strick/6809):01007                  ldb   #$00       CO-module init offset
0674 16FD44           (/home/strick/6809):01008                  lbra  CallCO     call it
                      (/home/strick/6809):01009                                  
                      (/home/strick/6809):01010         ;
                      (/home/strick/6809):01011         ; Get module offset from V.GrfDrvE into A reg.
                      (/home/strick/6809):01012         ; I had to do this because the previous system would only work
                      (/home/strick/6809):01013         ; properly for 2 entries !
                      (/home/strick/6809):01014         ;
                      (/home/strick/6809):01015                                  
0677                  (/home/strick/6809):01016         GetModOffset                 
0677 3404             (/home/strick/6809):01017                  pshs  b         
0679 5F               (/home/strick/6809):01018                  clrb             ; Calculate address offset 
067A                  (/home/strick/6809):01019         AddrFind                 
067A 8501             (/home/strick/6809):01020                  bita  #$01       ; Done all shifts ?
067C 2605             (/home/strick/6809):01021                  bne   AddrDone  
067E CB02             (/home/strick/6809):01022                  addb  #$2        ; increment addr offset ptr
0680 44               (/home/strick/6809):01023                  lsra            
0681 20F7             (/home/strick/6809):01024                  bra   AddrFind   ; Test again
0683                  (/home/strick/6809):01025         AddrDone                 
0683 1F98             (/home/strick/6809):01026                  tfr   b,a        ; output in a
0685 3584             (/home/strick/6809):01027                  puls  b,pc      
                      (/home/strick/6809):01028                                  
                      (/home/strick/6809):01029         * Link to subroutine
0687 3440             (/home/strick/6809):01030         LinkSub  pshs  u         
0689 86C1             (/home/strick/6809):01031                  lda   #Systm+Objct
068B 103F00           (/home/strick/6809):01032                  os9   F$Link    
068E 35C0             (/home/strick/6809):01033                  puls  pc,u      
                      (/home/strick/6809):01034                                  
                      (/home/strick/6809):01035         * 128x192 4 color pixel table
0690 0055AAFF         (/home/strick/6809):01036         Mode1Clr fdb   $0055,$aaff
                      (/home/strick/6809):01037                                  
0694                  (/home/strick/6809):01038         GfxDispatch                 
0694 8115             (/home/strick/6809):01039                  cmpa  #$15       GrfDrv-handled code?
0696 2425             (/home/strick/6809):01040                  bcc   GoGrfo     branch if so
0698 810F             (/home/strick/6809):01041                  cmpa  #$0F       display graphics code?
069A 2771             (/home/strick/6809):01042                  beq   Do0F       branch if so
069C 8010             (/home/strick/6809):01043                  suba  #$10      
069E 8D14             (/home/strick/6809):01044                  bsr   GfxActv    check if first gfx screen was alloc'ed
06A0 251A             (/home/strick/6809):01045                  bcs   L0663      if not, return with error
06A2 308C05           (/home/strick/6809):01046                  leax  <gfxtbl,pcr else point to jump table
06A5 48               (/home/strick/6809):01047                  lsla             multiply by two
06A6 EC86             (/home/strick/6809):01048                  ldd   a,x        get address of routine
06A8 6E8B             (/home/strick/6809):01049                  jmp   d,x        jump to it
                      (/home/strick/6809):01050                                  
                      (/home/strick/6809):01051         * Jump table for graphics codes $10-$14
06AA 0140             (/home/strick/6809):01052         gfxtbl   fdb   Do10-gfxtbl $10 - Preset Screen
06AC 00FD             (/home/strick/6809):01053                  fdb   Do11-gfxtbl $11 - Set Color
06AE 0111             (/home/strick/6809):01054                  fdb   Do12-gfxtbl $12 - End Graphics
06B0 0160             (/home/strick/6809):01055                  fdb   Do13-gfxtbl $13 - Erase Graphics
06B2 016F             (/home/strick/6809):01056                  fdb   Do14-gfxtbl $14 - Home Graphics Cursor
                      (/home/strick/6809):01057                                  
06B4 E6C831           (/home/strick/6809):01058         GfxActv  ldb   <V.Rdy,u   gfx screen allocated?
06B7 2694             (/home/strick/6809):01059                  bne   L0606      branch if so
06B9 53               (/home/strick/6809):01060         NotReady comb            
06BA C6F6             (/home/strick/6809):01061                  ldb   #E$NotRdy 
06BC 39               (/home/strick/6809):01062         L0663    rts             
                      (/home/strick/6809):01063                                  
06BD 8DF5             (/home/strick/6809):01064         GoGrfo   bsr   GfxActv   
06BF 25FB             (/home/strick/6809):01065                  bcs   L0663     
06C1 AEC872           (/home/strick/6809):01066                  ldx   <V.GrfDrvE,u get GrfDrv entry point
06C4 2614             (/home/strick/6809):01067                  bne   L0681      branch if not zero
06C6 3422             (/home/strick/6809):01068                  pshs  y,a        else preserve regs
06C8 260E             (/home/strick/6809):01069                  bne   L067F     
06CA 308DFD7B         (/home/strick/6809):01070                  leax  >GrfDrv,pcr  get pointer to name string
06CE 8DB7             (/home/strick/6809):01071                  bsr   LinkSub    link to GrfDrv
06D0 2402             (/home/strick/6809):01072                  bcc   L067B      branch if ok
06D2 35A2             (/home/strick/6809):01073                  puls  pc,y,a     else exit with error
06D4 10AFC872         (/home/strick/6809):01074         L067B    sty   <V.GrfDrvE,u save module entry pointer
06D8 3522             (/home/strick/6809):01075         L067F    puls  y,a        restore regs
06DA 4F               (/home/strick/6809):01076         L0681    clra             A = GrfDrv address offset in statics
06DB 16FCDB           (/home/strick/6809):01077                  lbra  CoWrite   
                      (/home/strick/6809):01078                                  
                      (/home/strick/6809):01079         * Allocate GFX mem -- we must allocate on a 512 byte page boundary
06DE 3440             (/home/strick/6809):01080         GetMem   pshs  u          save static pointer
06E0 CC1900           (/home/strick/6809):01081                  ldd   #6144+256  allocate graphics memory + 1 page
06E3 103F28           (/home/strick/6809):01082                  os9   F$SRqMem   do it
06E6 2402             (/home/strick/6809):01083                  bcc   L0691      branch if ok
06E8 35C0             (/home/strick/6809):01084                  puls  pc,u       else return with error
06EA 1F30             (/home/strick/6809):01085         L0691    tfr   u,d        move mem ptr to D
06EC 3540             (/home/strick/6809):01086                  puls  u          restore statics
06EE 1F89             (/home/strick/6809):01087                  tfr   a,b        move high 8 bits to lower
06F0 8501             (/home/strick/6809):01088                  bita  #$01       odd page?
06F2 2704             (/home/strick/6809):01089                  beq   L069F      branch if not
06F4 8B01             (/home/strick/6809):01090                  adda  #$01      
06F6 2002             (/home/strick/6809):01091                  bra   L06A1     
06F8 CB18             (/home/strick/6809):01092         L069F    addb  #$18      
06FA 3442             (/home/strick/6809):01093         L06A1    pshs  u,a       
06FC 1F98             (/home/strick/6809):01094                  tfr   b,a       
06FE 5F               (/home/strick/6809):01095                  clrb            
06FF 1F03             (/home/strick/6809):01096                  tfr   d,u       
0701 CC0100           (/home/strick/6809):01097                  ldd   #256      
0704 103F29           (/home/strick/6809):01098                  os9   F$SRtMem   return page
0707 3542             (/home/strick/6809):01099                  puls  u,a       
0709 2501             (/home/strick/6809):01100                  bcs   L06B3      branch if error
070B 5F               (/home/strick/6809):01101                  clrb            
070C 39               (/home/strick/6809):01102         L06B3    rts             
                      (/home/strick/6809):01103                                  
                      (/home/strick/6809):01104         * $0F - display graphics
070D 308C05           (/home/strick/6809):01105         Do0F     leax  <DispGfx,pcr
0710 C602             (/home/strick/6809):01106                  ldb   #$02      
0712 16FCD9           (/home/strick/6809):01107                  lbra  L03BF     
                      (/home/strick/6809):01108                                  
0715 E6C831           (/home/strick/6809):01109         DispGfx  ldb   <V.Rdy,u   already allocated initial buffer?
0718 2610             (/home/strick/6809):01110                  bne   L06D1      branch if so
071A 8DC2             (/home/strick/6809):01111                  bsr   GetMem     else get graphics memory
071C 252A             (/home/strick/6809):01112                  bcs   L06EF      branch if error
071E EDC833           (/home/strick/6809):01113                  std   <V.SBAdd,u save memory
0721 EDC835           (/home/strick/6809):01114                  std   <V.GBuff,u and GBuff
0724 6CC831           (/home/strick/6809):01115                  inc   <V.Rdy,u   ok, we're ready
0727 1700E0           (/home/strick/6809):01116                  lbsr  EraseGfx   clear gfx mem
072A A6C829           (/home/strick/6809):01117         L06D1    lda   <V.NChr2,u get character after next
072D A7C84B           (/home/strick/6809):01118                  sta   <V.PMask,u save color set (0-3)
0730 8403             (/home/strick/6809):01119                  anda  #$03       mask out all but lower 2 bits
0732 308DFF5A         (/home/strick/6809):01120                  leax  >Mode1Clr,pcr point to mask byte table
0736 A686             (/home/strick/6809):01121                  lda   a,x        get byte
0738 A7C847           (/home/strick/6809):01122                  sta   <V.Msk1,u  save mask byte here
073B A7C848           (/home/strick/6809):01123                  sta   <V.Msk2,u  and here
073E A6C828           (/home/strick/6809):01124                  lda   <V.NChar,u get next char, mode byte (0-1)
0741 8101             (/home/strick/6809):01125                  cmpa  #$01       compare against max
0743 2304             (/home/strick/6809):01126                  bls   L06F0      branch if valid
0745 53               (/home/strick/6809):01127                  comb            
0746 C6CB             (/home/strick/6809):01128                  ldb   #E$BMode   else invalid mode specified, send error
0748 39               (/home/strick/6809):01129         L06EF    rts             
                      (/home/strick/6809):01130                                  
0749 4D               (/home/strick/6809):01131         L06F0    tsta             test user supplied mode byte
074A 271D             (/home/strick/6809):01132                  beq   L0710      branch if 256x192
074C CCC003           (/home/strick/6809):01133                  ldd   #$C003    
074F EDC849           (/home/strick/6809):01134                  std   <V.MCol,u 
0752 8601             (/home/strick/6809):01135                  lda   #$01      
0754 A7C824           (/home/strick/6809):01136                  sta   <V.Mode,u  128x192 mode
0757 86E0             (/home/strick/6809):01137                  lda   #$E0      
0759 E6C829           (/home/strick/6809):01138                  ldb   <V.NChr2,u
075C C408             (/home/strick/6809):01139                  andb  #$08      
075E 2702             (/home/strick/6809):01140                  beq   L0709     
0760 86F0             (/home/strick/6809):01141                  lda   #$F0      
0762 C603             (/home/strick/6809):01142         L0709    ldb   #$03      
0764 308C34           (/home/strick/6809):01143                  leax  <L0742,pcr
0767 201D             (/home/strick/6809):01144                  bra   L072D     
0769 CC8001           (/home/strick/6809):01145         L0710    ldd   #$8001    
076C EDC849           (/home/strick/6809):01146                  std   <V.MCol,u 
076F 86FF             (/home/strick/6809):01147                  lda   #$FF      
0771 6DC847           (/home/strick/6809):01148                  tst   <V.Msk1,u 
0774 2706             (/home/strick/6809):01149                  beq   L0723     
0776 A7C847           (/home/strick/6809):01150                  sta   <V.Msk1,u 
0779 A7C848           (/home/strick/6809):01151                  sta   <V.Msk2,u 
077C A7C824           (/home/strick/6809):01152         L0723    sta   <V.Mode,u  256x192 mode
077F 86F0             (/home/strick/6809):01153                  lda   #$F0      
0781 C607             (/home/strick/6809):01154                  ldb   #$07      
0783 308C19           (/home/strick/6809):01155                  leax  <L0746,pcr
0786 E7C844           (/home/strick/6809):01156         L072D    stb   <V.PixBt,u
0789 AFC842           (/home/strick/6809):01157                  stx   <V.MTabl,u
078C E6C829           (/home/strick/6809):01158                  ldb   <V.NChr2,u
078F C404             (/home/strick/6809):01159                  andb  #$04      
0791 58               (/home/strick/6809):01160                  lslb            
0792 3404             (/home/strick/6809):01161                  pshs  b         
0794 AAE0             (/home/strick/6809):01162                  ora   ,s+       
0796 C601             (/home/strick/6809):01163                  ldb   #$01      
                      (/home/strick/6809):01164         * Indicate screen is current
0798 16FC60           (/home/strick/6809):01165                  lbra  SetDsply  
                      (/home/strick/6809):01166                                  
079B C0300C03         (/home/strick/6809):01167         L0742    fcb   $c0,$30,$0c,$03
079F 8040201008040201 (/home/strick/6809):01168         L0746    fcb   $80,$40,$20,$10,$08,$04,$02,$01
                      (/home/strick/6809):01169                                  
                      (/home/strick/6809):01170         * $11 - set color
07A7 308C03           (/home/strick/6809):01171         Do11     leax  <SetColor,pcr set up return address
07AA 16FC3F           (/home/strick/6809):01172                  lbra  L03BD     
                      (/home/strick/6809):01173                                  
07AD 6FC828           (/home/strick/6809):01174         SetColor clr   <V.NChar,u get next char
07B0 A6C824           (/home/strick/6809):01175                  lda   <V.Mode,u  which mode?
07B3 2B03             (/home/strick/6809):01176                  bmi   L075F      branch if 256x192
07B5 6CC828           (/home/strick/6809):01177                  inc   <V.NChar,u
07B8 16FF6F           (/home/strick/6809):01178         L075F    lbra  L06D1     
                      (/home/strick/6809):01179                                  
                      (/home/strick/6809):01180         * $12 - end graphics
07BB 30C835           (/home/strick/6809):01181         Do12     leax  <V.GBuff,u point to first buffer
07BE 108E0000         (/home/strick/6809):01182                  ldy   #$0000     Y = 0
07C2 C603             (/home/strick/6809):01183                  ldb   #$03       free 3 gfx screens max
07C4 3444             (/home/strick/6809):01184                  pshs  u,b       
07C6 CC1800           (/home/strick/6809):01185         L076D    ldd   #6144      size of graphics screen
07C9 EE81             (/home/strick/6809):01186                  ldu   ,x++       get address of graphics screen
07CB 2706             (/home/strick/6809):01187                  beq   L077A      branch if zero
07CD 10AF1E           (/home/strick/6809):01188                  sty   -$02,x     else clear entry
07D0 103F29           (/home/strick/6809):01189                  os9   F$SRtMem   and return memory
07D3 6AE4             (/home/strick/6809):01190         L077A    dec   ,s         decrement counter
07D5 2EEF             (/home/strick/6809):01191                  bgt   L076D      keep going if not end
07D7 EE84             (/home/strick/6809):01192                  ldu   ,x         flood fill buffer?
07D9 2706             (/home/strick/6809):01193                  beq   L0788      branch if not allocated
07DB CC0200           (/home/strick/6809):01194                  ldd   #512       else get size
07DE 103F29           (/home/strick/6809):01195                  os9   F$SRtMem   and free memory
07E1 3544             (/home/strick/6809):01196         L0788    puls  u,b        restore regs
07E3 4F               (/home/strick/6809):01197                  clra            
07E4 A7C831           (/home/strick/6809):01198                  sta   <V.Rdy,u   gfx mem no longer alloced
07E7 16FC11           (/home/strick/6809):01199                  lbra  SetDsply  
                      (/home/strick/6809):01200                                  
07EA 308C03           (/home/strick/6809):01201         Do10     leax  <Preset,pcr set up return address
07ED 16FBFC           (/home/strick/6809):01202                  lbra  L03BD     
                      (/home/strick/6809):01203                                  
                      (/home/strick/6809):01204         * NOTE! Shouldn't this be lda <V.NChar,u ??
07F0 A6C829           (/home/strick/6809):01205         Preset   lda   <V.NChr2,u get next char
07F3 6DC824           (/home/strick/6809):01206                  tst   <V.Mode,u  which mode?
07F6 2A08             (/home/strick/6809):01207                  bpl   L07A7      branch if 128x192 4 color
07F8 C6FF             (/home/strick/6809):01208                  ldb   #$FF       assume we will clear with $FF
07FA 8401             (/home/strick/6809):01209                  anda  #$01       mask out all but 1 bit (2 colors)
07FC 270C             (/home/strick/6809):01210                  beq   EraseGfx   erase graphic screen with color $00
07FE 200B             (/home/strick/6809):01211                  bra   L07B2      else erase screen with color $FF
0800 8403             (/home/strick/6809):01212         L07A7    anda  #$03       mask out all but 2 bits (4 colors)
0802 308DFE8A         (/home/strick/6809):01213                  leax  >Mode1Clr,pcr point to color table
0806 E686             (/home/strick/6809):01214                  ldb   a,x        get appropriate byte
0808 2001             (/home/strick/6809):01215                  bra   L07B2      and start the clearing
                      (/home/strick/6809):01216                                  
                      (/home/strick/6809):01217         * Erase graphics screen
080A                  (/home/strick/6809):01218         Do13                     
080A 5F               (/home/strick/6809):01219         EraseGfx clrb             value to clear screen with
080B AEC833           (/home/strick/6809):01220         L07B2    ldx   <V.SBAdd,u
080E 30891801         (/home/strick/6809):01221                  leax  >6144+1,x  point to end of gfx mem + 1
0812 E782             (/home/strick/6809):01222         L07B9    stb   ,-x        clear
0814 ACC833           (/home/strick/6809):01223                  cmpx  <V.SBAdd,u X = to start?
0817 22F9             (/home/strick/6809):01224                  bhi   L07B9      if not, continue
                      (/home/strick/6809):01225         * Home Graphics cursor
0819 4F               (/home/strick/6809):01226         Do14     clra            
081A 5F               (/home/strick/6809):01227                  clrb            
081B EDC845           (/home/strick/6809):01228                  std   <V.GCrsX,u
081E 39               (/home/strick/6809):01229                  rts             
                      (/home/strick/6809):01230                                  
                      (/home/strick/6809):01231         *
                      (/home/strick/6809):01232         * Ding - tickle CoCo's PIA to emit a sound
                      (/home/strick/6809):01233         *
081F 3406             (/home/strick/6809):01234         Ding     pshs  b,a       
0821 B6FF01           (/home/strick/6809):01235                  lda   >PIA0Base+1
0824 F6FF03           (/home/strick/6809):01236                  ldb   >PIA0Base+3
0827 3406             (/home/strick/6809):01237                  pshs  b,a       
0829 84F7             (/home/strick/6809):01238                  anda  #$F7      
082B C4F7             (/home/strick/6809):01239                  andb  #$F7      
082D B7FF01           (/home/strick/6809):01240                  sta   >PIA0Base+1
0830 F7FF03           (/home/strick/6809):01241                  stb   >PIA0Base+3
0833 B6FF23           (/home/strick/6809):01242                  lda   >PIA1Base+3
0836 3402             (/home/strick/6809):01243                  pshs  a         
0838 8A08             (/home/strick/6809):01244                  ora   #$08      
083A B7FF23           (/home/strick/6809):01245                  sta   >PIA1Base+3
083D C60A             (/home/strick/6809):01246                  ldb   #$0A      
083F 86FE             (/home/strick/6809):01247         L07E6    lda   #$FE      
0841 8D16             (/home/strick/6809):01248                  bsr   DingDuration
0843 8602             (/home/strick/6809):01249                  lda   #$02      
0845 8D12             (/home/strick/6809):01250                  bsr   DingDuration
0847 5A               (/home/strick/6809):01251                  decb            
0848 26F5             (/home/strick/6809):01252                  bne   L07E6     
084A 3502             (/home/strick/6809):01253                  puls  a         
084C B7FF23           (/home/strick/6809):01254                  sta   >PIA1Base+3
084F 3506             (/home/strick/6809):01255                  puls  b,a       
0851 B7FF01           (/home/strick/6809):01256                  sta   >PIA0Base+1
0854 F7FF03           (/home/strick/6809):01257                  stb   >PIA0Base+3
0857 3586             (/home/strick/6809):01258                  puls  pc,b,a    
                      (/home/strick/6809):01259                                  
0859                  (/home/strick/6809):01260         DingDuration                 
0859 B7FF20           (/home/strick/6809):01261                  sta   >PIA1Base 
085C 8680             (/home/strick/6809):01262                  lda   #128      
085E 4C               (/home/strick/6809):01263         L0805    inca            
085F 26FD             (/home/strick/6809):01264                  bne   L0805     
0861 39               (/home/strick/6809):01265                  rts             
                      (/home/strick/6809):01266                                  
                      (/home/strick/6809):01267         * Dummy flash cursor routine, can be replaced by COxx module.
                      (/home/strick/6809):01268                                  
0862                  (/home/strick/6809):01269         FlashCursor                 
0862 39               (/home/strick/6809):01270                  rts             
                      (/home/strick/6809):01271                                  
0863 1F5C4E           (/home/strick/6809):01272                  emod            
     0866             (/home/strick/6809):01273         eom      equ   *         
                      (/home/strick/6809):01274                  end             
