                      (  cowin_beta5.asm):00001         *******************************************************************
                      (  cowin_beta5.asm):00002         * CoGrf/CoWin - NitrOS-9 Text/Graphics Window Module
                      (  cowin_beta5.asm):00003         *
                      (  cowin_beta5.asm):00004         * $Id$
                      (  cowin_beta5.asm):00005         *
                      (  cowin_beta5.asm):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (  cowin_beta5.asm):00007         * Comment
                      (  cowin_beta5.asm):00008         * ------------------------------------------------------------------
                      (  cowin_beta5.asm):00009         *  19r0    2003/09/23  Robert Gault
                      (  cowin_beta5.asm):00010         * Many new patches for 6809 code use.
                      (  cowin_beta5.asm):00011         *
                      (  cowin_beta5.asm):00012         *  19r1    2003/11/14  Robert Gault
                      (  cowin_beta5.asm):00013         * Patches to scrollbar windows to recover arrows and markers.
                      (  cowin_beta5.asm):00014         * Includes new stdfonts with graphics added to the end.
                      (  cowin_beta5.asm):00015         *
                      (  cowin_beta5.asm):00016         *  1       2005/11/26  Boisy G. Pitre
                      (  cowin_beta5.asm):00017         * Renamed from WindInt/GrfInt, reset edition.
                      (  cowin_beta5.asm):00018         *
                      (  cowin_beta5.asm):00019         *          2006/01/09  Robert Gault
                      (  cowin_beta5.asm):00020         * Changed Select window routine so that it will work within a script and
                      (  cowin_beta5.asm):00021         * DWSet routine so that it will not require a [CLEAR] if the active window
                      (  cowin_beta5.asm):00022         * is killed with a display 1b 24 and restarted with a display 1b 20; ie
                      (  cowin_beta5.asm):00023         * DWSet. Changes are compatible with MultiVue and all test procedures
                      (  cowin_beta5.asm):00024         * tried. Short Sleep added to stabilize the screen change.
                      (  cowin_beta5.asm):00025         *
                      (  cowin_beta5.asm):00026         *  2       2007/08/22  Boisy G. Pitre
                      (  cowin_beta5.asm):00027         * Fixed crash bug in case where grfdrv wasn't loaded.  See comments at
                      (  cowin_beta5.asm):00028         * Term label.
                      (  cowin_beta5.asm):00029         *  EOU Beta 2
                      (  cowin_beta5.asm):00030         *  3       2018/11/13  Bill Nobel
                      (  cowin_beta5.asm):00031         * Change code (along with Grfdrv) so that loading Grfdrv takes place outside
                      (  cowin_beta5.asm):00032         *   of the 64K System workspace, which allows >8K grfdrv to boot properly on
                      (  cowin_beta5.asm):00033         *   systems with <16k free in the system memory map.
                      (  cowin_beta5.asm):00034         *  EOU Beta 3
                      (  cowin_beta5.asm):00035         *           2018/12/14  Bill Nobel
                      (  cowin_beta5.asm):00036         * Removed Robert Gault's modifications to Select (caused any Select call, even on windows
                      (  cowin_beta5.asm):00037         *  not currently viewed on screen, to take over the screen). 
                      (  cowin_beta5.asm):00038         *  Bill Nobel & Robert Gault confirmed that fixes Select bug.
                      (  cowin_beta5.asm):00039         * EOU Beta 5 - minor optimizations. 6809 DefColr shrunk & sped up.
                      (  cowin_beta5.asm):00040         *           2019/06/24  L. Curtis Boyle
                      (  cowin_beta5.asm):00041         * Various gr00B5 (W copies) stores removed that are never used
                      (  cowin_beta5.asm):00042         * Curtis planning on adding vectors for block copies and block clears (see level 1 CoVDG),
                      (  cowin_beta5.asm):00043         *   16 bit scratch var in static mem (can't use Grfdrv global, since IRQ's can switch between
                      (  cowin_beta5.asm):00044         * CoWin/Grf devices) (to use DP addressing instead of pshs (8 or 16 bit)
                      (  cowin_beta5.asm):00045         *   /puls to speed various routines up a little bit, like font expansion.
                      (  cowin_beta5.asm):00046         *   Eventually, Krn module will get the mini stack blast copy/clear routines
                      (  cowin_beta5.asm):00047         *   and set up the vectors to call them in direct page, so that all of the system process
                      (  cowin_beta5.asm):00048         *   can access them easily. Grfdrv, since it gets it's own 64k map, will have it's own
                      (  cowin_beta5.asm):00049         *   copies and vectors.
                      (  cowin_beta5.asm):00050          
                      (  cowin_beta5.asm):00051                  nam   CoGrf/CoWin
                      (  cowin_beta5.asm):00052                  ttl   NitrOS-9 Window Module
                      (  cowin_beta5.asm):00053         
                      (  cowin_beta5.asm):00054                  ifp1  
                      (  cowin_beta5.asm):00055                    use   /dd/defs/deffile
     0002             ( /dd/defs/deffile):00001         Level    set     2
     0000             ( /dd/defs/deffile):00002         CoGrf    set     0
     0000             ( /dd/defs/deffile):00003         MATCHBOX set     0
                      ( /dd/defs/deffile):00004         *H6309    set     0
     0000             ( /dd/defs/deffile):00005         H6309    set     0
                      ( /dd/defs/deffile):00006                  use   /dd/defs/os9.d
                      (   /dd/defs/os9.d):00001         ********************************************************************
                      (   /dd/defs/os9.d):00002         * os9.d - NitrOS-9 System Definitions
                      (   /dd/defs/os9.d):00003         *
                      (   /dd/defs/os9.d):00004         * $Id$
                      (   /dd/defs/os9.d):00005         *
                      (   /dd/defs/os9.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/os9.d):00007         * Comment
                      (   /dd/defs/os9.d):00008         * ------------------------------------------------------------------
                      (   /dd/defs/os9.d):00009         *          1985/08/29  KMZ
                      (   /dd/defs/os9.d):00010         * Fixed DT.SBF/NFM values to 3/4
                      (   /dd/defs/os9.d):00011         *
                      (   /dd/defs/os9.d):00012         *          1985/09/01  KMZ
                      (   /dd/defs/os9.d):00013         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (   /dd/defs/os9.d):00014         *
                      (   /dd/defs/os9.d):00015         *          1985/09/03  KMZ/Robert F. Doggett
                      (   /dd/defs/os9.d):00016         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (   /dd/defs/os9.d):00017         * 68000 compatability.
                      (   /dd/defs/os9.d):00018         *
                      (   /dd/defs/os9.d):00019         *          1986/04/15  Mark G. Hawkins
                      (   /dd/defs/os9.d):00020         * F$AlHRAM System call added for COCO.
                      (   /dd/defs/os9.d):00021         *
                      (   /dd/defs/os9.d):00022         *          1986/09/08  Mark G. Hawkins
                      (   /dd/defs/os9.d):00023         * F$Alarm for COCO Clock Module.
                      (   /dd/defs/os9.d):00024         *
                      (   /dd/defs/os9.d):00025         *          1986/09/17  Mark G. Hawkins
                      (   /dd/defs/os9.d):00026         * SS.Tone For COCO.
                      (   /dd/defs/os9.d):00027         *
                      (   /dd/defs/os9.d):00028         *          1986/09/23  Mark G. Hawkins
                      (   /dd/defs/os9.d):00029         * Added F$NMLink and F$NMLoad for COCO.
                      (   /dd/defs/os9.d):00030         *
                      (   /dd/defs/os9.d):00031         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00032         * Added Reserved User $70 to $7f in sytem calls.
                      (   /dd/defs/os9.d):00033         *
                      (   /dd/defs/os9.d):00034         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00035         * Created Color Computer 3 Version of OS9Defs.
                      (   /dd/defs/os9.d):00036         *
                      (   /dd/defs/os9.d):00037         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00038         * Consoldated Level 1/Level 2 os9defs.
                      (   /dd/defs/os9.d):00039         *
                      (   /dd/defs/os9.d):00040         *          2002/04/04  Boisy G. Pitre
                      (   /dd/defs/os9.d):00041         * Consoldated Level 2/Level 2 V3 os9defs.
                      (   /dd/defs/os9.d):00042         *
                      (   /dd/defs/os9.d):00043         *          2002/04/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00044         * Added NitrOS-9 definitions.
                      (   /dd/defs/os9.d):00045         *
                      (   /dd/defs/os9.d):00046         *          2003/05/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00047         * Added WD1002 sys vars to Level One section.
                      (   /dd/defs/os9.d):00048         *
                      (   /dd/defs/os9.d):00049         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/os9.d):00050         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (   /dd/defs/os9.d):00051         * changed the sizes from 2 to 3 bytes.
                      (   /dd/defs/os9.d):00052         * DT.NFM is now the same for both Level One and Level Two.
                      (   /dd/defs/os9.d):00053         * Added DT.CDFM type for future CD-ROM file manager
                      (   /dd/defs/os9.d):00054         *
                      (   /dd/defs/os9.d):00055         *          2003/11/05  Robert Gault
                      (   /dd/defs/os9.d):00056         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (   /dd/defs/os9.d):00057         *
                      (   /dd/defs/os9.d):00058         *              2005/11/02  P.Harvey-Smith
                      (   /dd/defs/os9.d):00059         * Added definitions for boot areas on Dragon computers.
                      (   /dd/defs/os9.d):00060         *
                      (   /dd/defs/os9.d):00061         *              2006/03/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00062         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (   /dd/defs/os9.d):00063         *
                      (   /dd/defs/os9.d):00064         * Added I$ModDsc call (modify device descriptor in system memory) BN/LCB
                      (   /dd/defs/os9.d):00065         *          2019/10/30  Bill Nobel, from discussions with L. Curtis Boyle
                      (   /dd/defs/os9.d):00066                        NAM       os9.d
                      (   /dd/defs/os9.d):00067                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (   /dd/defs/os9.d):00068         
                      (   /dd/defs/os9.d):00069         * Common definitions
     0001             (   /dd/defs/os9.d):00070         true           EQU       1                   useful name
     0000             (   /dd/defs/os9.d):00071         false          EQU       0                   useful name
                      (   /dd/defs/os9.d):00072         
                      (   /dd/defs/os9.d):00073                        PAG       
                      (   /dd/defs/os9.d):00074         *****************************************
                      (   /dd/defs/os9.d):00075         * System Service Request Code Definitions
                      (   /dd/defs/os9.d):00076         *
                      (   /dd/defs/os9.d):00077                        ORG       0
0000                  (   /dd/defs/os9.d):00078         F$Link         RMB       1                   Link to Module
0001                  (   /dd/defs/os9.d):00079         F$Load         RMB       1                   Load Module from File
0002                  (   /dd/defs/os9.d):00080         F$UnLink       RMB       1                   Unlink Module
0003                  (   /dd/defs/os9.d):00081         F$Fork         RMB       1                   Start New Process
0004                  (   /dd/defs/os9.d):00082         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (   /dd/defs/os9.d):00083         F$Chain        RMB       1                   Chain Process to New Module
0006                  (   /dd/defs/os9.d):00084         F$Exit         RMB       1                   Terminate Process
0007                  (   /dd/defs/os9.d):00085         F$Mem          RMB       1                   Set Memory Size
0008                  (   /dd/defs/os9.d):00086         F$Send         RMB       1                   Send Signal to Process
0009                  (   /dd/defs/os9.d):00087         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (   /dd/defs/os9.d):00088         F$Sleep        RMB       1                   Suspend Process
000B                  (   /dd/defs/os9.d):00089         F$SSpd         RMB       1                   Suspend Process
000C                  (   /dd/defs/os9.d):00090         F$ID           RMB       1                   Return Process ID
000D                  (   /dd/defs/os9.d):00091         F$SPrior       RMB       1                   Set Process Priority
000E                  (   /dd/defs/os9.d):00092         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (   /dd/defs/os9.d):00093         F$PErr         RMB       1                   Print Error
0010                  (   /dd/defs/os9.d):00094         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (   /dd/defs/os9.d):00095         F$CmpNam       RMB       1                   Compare Two Names
0012                  (   /dd/defs/os9.d):00096         F$SchBit       RMB       1                   Search Bit Map
0013                  (   /dd/defs/os9.d):00097         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (   /dd/defs/os9.d):00098         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (   /dd/defs/os9.d):00099         F$Time         RMB       1                   Get Current Time
0016                  (   /dd/defs/os9.d):00100         F$STime        RMB       1                   Set Current Time
0017                  (   /dd/defs/os9.d):00101         F$CRC          RMB       1                   Generate CRC ($17)
                      (   /dd/defs/os9.d):00102         
                      (   /dd/defs/os9.d):00103         
                      (   /dd/defs/os9.d):00104         * NitrOS-9 Level 2 system calls
0018                  (   /dd/defs/os9.d):00105         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (   /dd/defs/os9.d):00106         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (   /dd/defs/os9.d):00107         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (   /dd/defs/os9.d):00108         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (   /dd/defs/os9.d):00109         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (   /dd/defs/os9.d):00110         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (   /dd/defs/os9.d):00111         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (   /dd/defs/os9.d):00112                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (   /dd/defs/os9.d):00113         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (   /dd/defs/os9.d):00114         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (   /dd/defs/os9.d):00115         
                      (   /dd/defs/os9.d):00116         
                      (   /dd/defs/os9.d):00117         * NitrOS-9 Level 1 system call padding
                      (   /dd/defs/os9.d):00118         
                      (   /dd/defs/os9.d):00119         
0023                  (   /dd/defs/os9.d):00120         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (   /dd/defs/os9.d):00121         
                      (   /dd/defs/os9.d):00122         
                      (   /dd/defs/os9.d):00123                        ORG       $25
0025                  (   /dd/defs/os9.d):00124         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (   /dd/defs/os9.d):00125         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (   /dd/defs/os9.d):00126         
                      (   /dd/defs/os9.d):00127         
                      (   /dd/defs/os9.d):00128                        ORG       $27                 Beginning of System Reserved Calls
                      (   /dd/defs/os9.d):00129         * NitrOS-9 common system calls
0027                  (   /dd/defs/os9.d):00130         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (   /dd/defs/os9.d):00131         F$SRqMem       RMB       1                   System Memory Request
0029                  (   /dd/defs/os9.d):00132         F$SRtMem       RMB       1                   System Memory Return
002A                  (   /dd/defs/os9.d):00133         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (   /dd/defs/os9.d):00134         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (   /dd/defs/os9.d):00135         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (   /dd/defs/os9.d):00136         F$NProc        RMB       1                   Start Next Process
002E                  (   /dd/defs/os9.d):00137         F$VModul       RMB       1                   Validate Module
002F                  (   /dd/defs/os9.d):00138         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (   /dd/defs/os9.d):00139         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (   /dd/defs/os9.d):00140         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (   /dd/defs/os9.d):00141         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (   /dd/defs/os9.d):00142         F$IODel        RMB       1                   Delete I/O Module
                      (   /dd/defs/os9.d):00143         
                      (   /dd/defs/os9.d):00144         
0034                  (   /dd/defs/os9.d):00145         F$SLink        RMB       1                   System Link
0035                  (   /dd/defs/os9.d):00146         F$Boot         RMB       1                   Bootstrap System
0036                  (   /dd/defs/os9.d):00147         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (   /dd/defs/os9.d):00148         F$GProcP       RMB       1                   Get Process ptr
0038                  (   /dd/defs/os9.d):00149         F$Move         RMB       1                   Move Data (low bound first)
0039                  (   /dd/defs/os9.d):00150         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (   /dd/defs/os9.d):00151         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (   /dd/defs/os9.d):00152         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (   /dd/defs/os9.d):00153         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (   /dd/defs/os9.d):00154         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (   /dd/defs/os9.d):00155         F$FreeHB       RMB       1                   Get Free High Block
003F                  (   /dd/defs/os9.d):00156         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (   /dd/defs/os9.d):00157         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (   /dd/defs/os9.d):00158         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (   /dd/defs/os9.d):00159         F$ResTsk       RMB       1                   Reserve Task number
0043                  (   /dd/defs/os9.d):00160         F$RelTsk       RMB       1                   Release Task number
0044                  (   /dd/defs/os9.d):00161         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (   /dd/defs/os9.d):00162         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (   /dd/defs/os9.d):00163         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (   /dd/defs/os9.d):00164         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (   /dd/defs/os9.d):00165         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (   /dd/defs/os9.d):00166         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (   /dd/defs/os9.d):00167         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (   /dd/defs/os9.d):00168         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (   /dd/defs/os9.d):00169         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (   /dd/defs/os9.d):00170         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (   /dd/defs/os9.d):00171         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (   /dd/defs/os9.d):00172         F$MapBlk       RMB       1                   Map Specific Block
0050                  (   /dd/defs/os9.d):00173         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (   /dd/defs/os9.d):00174         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (   /dd/defs/os9.d):00175         F$GCMDir       RMB       1                   Pack module directory
0053                  (   /dd/defs/os9.d):00176         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (   /dd/defs/os9.d):00177         
                      (   /dd/defs/os9.d):00178         * Alan DeKok additions
0054                  (   /dd/defs/os9.d):00179         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (   /dd/defs/os9.d):00180         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (   /dd/defs/os9.d):00181         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (   /dd/defs/os9.d):00182         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (   /dd/defs/os9.d):00183         
                      (   /dd/defs/os9.d):00184         
                      (   /dd/defs/os9.d):00185         *
                      (   /dd/defs/os9.d):00186         * Numbers $70 through $7F are reserved for user definitions
                      (   /dd/defs/os9.d):00187         *
                      (   /dd/defs/os9.d):00188                        ORG       $70
                      (   /dd/defs/os9.d):00189         
                      (   /dd/defs/os9.d):00190         
                      (   /dd/defs/os9.d):00191         
                      (   /dd/defs/os9.d):00192         
0070                  (   /dd/defs/os9.d):00193         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (   /dd/defs/os9.d):00194         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (   /dd/defs/os9.d):00195         
0072                  (   /dd/defs/os9.d):00196                        RMB       $80-.               Reserved for user definitions
                      (   /dd/defs/os9.d):00197         
                      (   /dd/defs/os9.d):00198                        PAG       
                      (   /dd/defs/os9.d):00199         **************************************
                      (   /dd/defs/os9.d):00200         * I/O Service Request Code Definitions
                      (   /dd/defs/os9.d):00201         *
                      (   /dd/defs/os9.d):00202                        ORG       $80
0080                  (   /dd/defs/os9.d):00203         I$Attach       RMB       1                   Attach I/O Device
0081                  (   /dd/defs/os9.d):00204         I$Detach       RMB       1                   Detach I/O Device
0082                  (   /dd/defs/os9.d):00205         I$Dup          RMB       1                   Duplicate Path
0083                  (   /dd/defs/os9.d):00206         I$Create       RMB       1                   Create New File
0084                  (   /dd/defs/os9.d):00207         I$Open         RMB       1                   Open Existing File
0085                  (   /dd/defs/os9.d):00208         I$MakDir       RMB       1                   Make Directory File
0086                  (   /dd/defs/os9.d):00209         I$ChgDir       RMB       1                   Change Default Directory
0087                  (   /dd/defs/os9.d):00210         I$Delete       RMB       1                   Delete File
0088                  (   /dd/defs/os9.d):00211         I$Seek         RMB       1                   Change Current Position
0089                  (   /dd/defs/os9.d):00212         I$Read         RMB       1                   Read Data
008A                  (   /dd/defs/os9.d):00213         I$Write        RMB       1                   Write Data
008B                  (   /dd/defs/os9.d):00214         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (   /dd/defs/os9.d):00215         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (   /dd/defs/os9.d):00216         I$GetStt       RMB       1                   Get Path Status
008E                  (   /dd/defs/os9.d):00217         I$SetStt       RMB       1                   Set Path Status
008F                  (   /dd/defs/os9.d):00218         I$Close        RMB       1                   Close Path
0090                  (   /dd/defs/os9.d):00219         I$DeletX       RMB       1                   Delete from current exec dir
0091                  (   /dd/defs/os9.d):00220         I$ModDsc       RMB       1                   Modify SCF/RBF Descriptor in Memory
                      (   /dd/defs/os9.d):00221         
                      (   /dd/defs/os9.d):00222         *******************
                      (   /dd/defs/os9.d):00223         * File Access Modes
                      (   /dd/defs/os9.d):00224         *
     0001             (   /dd/defs/os9.d):00225         READ.          EQU       %00000001
     0002             (   /dd/defs/os9.d):00226         WRITE.         EQU       %00000010
     0003             (   /dd/defs/os9.d):00227         UPDAT.         EQU       READ.+WRITE.
     0004             (   /dd/defs/os9.d):00228         EXEC.          EQU       %00000100
     0008             (   /dd/defs/os9.d):00229         PREAD.         EQU       %00001000
     0010             (   /dd/defs/os9.d):00230         PWRIT.         EQU       %00010000
     0020             (   /dd/defs/os9.d):00231         PEXEC.         EQU       %00100000
     0040             (   /dd/defs/os9.d):00232         SHARE.         EQU       %01000000
     0080             (   /dd/defs/os9.d):00233         DIR.           EQU       %10000000
     0020             (   /dd/defs/os9.d):00234         ISIZ.          EQU       %00100000
                      (   /dd/defs/os9.d):00235         
                      (   /dd/defs/os9.d):00236         **************
                      (   /dd/defs/os9.d):00237         * Signal Codes
                      (   /dd/defs/os9.d):00238         *
                      (   /dd/defs/os9.d):00239                        ORG       0
0000                  (   /dd/defs/os9.d):00240         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (   /dd/defs/os9.d):00241         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (   /dd/defs/os9.d):00242         S$Abort        RMB       1                   Keyboard Abort
0003                  (   /dd/defs/os9.d):00243         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (   /dd/defs/os9.d):00244         S$Window       RMB       1                   Window Change
     0004             (   /dd/defs/os9.d):00245         S$HUP          EQU       S$Window            Hang Up
0005                  (   /dd/defs/os9.d):00246         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (   /dd/defs/os9.d):00247         
                      (   /dd/defs/os9.d):00248                        PAG       
                      (   /dd/defs/os9.d):00249         **********************************
                      (   /dd/defs/os9.d):00250         * Status Codes for GetStat/GetStat
                      (   /dd/defs/os9.d):00251         *
                      (   /dd/defs/os9.d):00252                        ORG       0
0000                  (   /dd/defs/os9.d):00253         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (   /dd/defs/os9.d):00254         SS.Ready       RMB       1                   Check for Device Ready
0002                  (   /dd/defs/os9.d):00255         SS.Size        RMB       1                   Read/Write File Size
0003                  (   /dd/defs/os9.d):00256         SS.Reset       RMB       1                   Device Restore
0004                  (   /dd/defs/os9.d):00257         SS.WTrk        RMB       1                   Device Write Track
0005                  (   /dd/defs/os9.d):00258         SS.Pos         RMB       1                   Get File Current Position
0006                  (   /dd/defs/os9.d):00259         SS.EOF         RMB       1                   Test for End of File
0007                  (   /dd/defs/os9.d):00260         SS.Link        RMB       1                   Link to Status routines
0008                  (   /dd/defs/os9.d):00261         SS.ULink       RMB       1                   Unlink Status routines
0009                  (   /dd/defs/os9.d):00262         SS.Feed        RMB       1                   Issue form feed
000A                  (   /dd/defs/os9.d):00263         SS.Frz         RMB       1                   Freeze DD. information
000B                  (   /dd/defs/os9.d):00264         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (   /dd/defs/os9.d):00265         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (   /dd/defs/os9.d):00266         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (   /dd/defs/os9.d):00267         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (   /dd/defs/os9.d):00268         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (   /dd/defs/os9.d):00269         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (   /dd/defs/os9.d):00270         SS.Lock        RMB       1                   Lock/Release record
0012                  (   /dd/defs/os9.d):00271         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (   /dd/defs/os9.d):00272         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (   /dd/defs/os9.d):00273         SS.BlkRd       RMB       1                   Block Read
0015                  (   /dd/defs/os9.d):00274         SS.BlkWr       RMB       1                   Block Write
0016                  (   /dd/defs/os9.d):00275         SS.Reten       RMB       1                   Retension cycle
0017                  (   /dd/defs/os9.d):00276         SS.WFM         RMB       1                   Write File Mark
0018                  (   /dd/defs/os9.d):00277         SS.RFM         RMB       1                   Read past File Mark
0019                  (   /dd/defs/os9.d):00278         SS.ELog        RMB       1                   Read Error Log
001A                  (   /dd/defs/os9.d):00279         SS.SSig        RMB       1                   Send signal on data ready
001B                  (   /dd/defs/os9.d):00280         SS.Relea       RMB       1                   Release device
001C                  (   /dd/defs/os9.d):00281         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (   /dd/defs/os9.d):00282         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (   /dd/defs/os9.d):00283         SS.Break       RMB       1                   Send break signal out acia
001E                  (   /dd/defs/os9.d):00284         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (   /dd/defs/os9.d):00285                        RMB       1                   Reserved
     0020             (   /dd/defs/os9.d):00286         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (   /dd/defs/os9.d):00287         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (   /dd/defs/os9.d):00288                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (   /dd/defs/os9.d):00289         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (   /dd/defs/os9.d):00290         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (   /dd/defs/os9.d):00291         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (   /dd/defs/os9.d):00292         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (   /dd/defs/os9.d):00293         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (   /dd/defs/os9.d):00294         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (   /dd/defs/os9.d):00295         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (   /dd/defs/os9.d):00296         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (   /dd/defs/os9.d):00297         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (   /dd/defs/os9.d):00298         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (   /dd/defs/os9.d):00299         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (   /dd/defs/os9.d):00300         
                      (   /dd/defs/os9.d):00301         * System Specific and User defined codes above $80
                      (   /dd/defs/os9.d):00302                        ORG       $80
0080                  (   /dd/defs/os9.d):00303         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (   /dd/defs/os9.d):00304         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (   /dd/defs/os9.d):00305         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (   /dd/defs/os9.d):00306         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (   /dd/defs/os9.d):00307         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (   /dd/defs/os9.d):00308         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (   /dd/defs/os9.d):00309         
                      (   /dd/defs/os9.d):00310         *               IFGT      Level-1
                      (   /dd/defs/os9.d):00311         * Level 2 Windowing
0086                  (   /dd/defs/os9.d):00312         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (   /dd/defs/os9.d):00313         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (   /dd/defs/os9.d):00314         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (   /dd/defs/os9.d):00315         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (   /dd/defs/os9.d):00316         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (   /dd/defs/os9.d):00317         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (   /dd/defs/os9.d):00318         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (   /dd/defs/os9.d):00319         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (   /dd/defs/os9.d):00320         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (   /dd/defs/os9.d):00321         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (   /dd/defs/os9.d):00322                        RMB       1                   Reserved
0091                  (   /dd/defs/os9.d):00323         SS.Palet       RMB       1                   Return palette information
0092                  (   /dd/defs/os9.d):00324         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (   /dd/defs/os9.d):00325         SS.ScTyp       RMB       1                   Get screen type information
0094                  (   /dd/defs/os9.d):00326         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (   /dd/defs/os9.d):00327         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (   /dd/defs/os9.d):00328         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (   /dd/defs/os9.d):00329         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (   /dd/defs/os9.d):00330         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (   /dd/defs/os9.d):00331         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (   /dd/defs/os9.d):00332         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (   /dd/defs/os9.d):00333         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (   /dd/defs/os9.d):00334         
                      (   /dd/defs/os9.d):00335         * sc6551 defined
     0099             (   /dd/defs/os9.d):00336         SS.CDSta       EQU       SS.GIP2
     009A             (   /dd/defs/os9.d):00337         SS.CDSig       EQU       SS.AnPal
     009B             (   /dd/defs/os9.d):00338         SS.CDRel       EQU       SS.FndBf
                      (   /dd/defs/os9.d):00339         * These are wide open in Level 1
                      (   /dd/defs/os9.d):00340         
                      (   /dd/defs/os9.d):00341         * sc6551 defined
                      (   /dd/defs/os9.d):00342         
                      (   /dd/defs/os9.d):00343                        ORG       $A0
                      (   /dd/defs/os9.d):00344         *
                      (   /dd/defs/os9.d):00345         * New Default SCF input buffer Set status call
00A0                  (   /dd/defs/os9.d):00346         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (   /dd/defs/os9.d):00347         SS.Hist        RMB       1                   Enable command-line history easily
                      (   /dd/defs/os9.d):00348         
                      (   /dd/defs/os9.d):00349         
                      (   /dd/defs/os9.d):00350                        ORG       $B0
                      (   /dd/defs/os9.d):00351         *
                      (   /dd/defs/os9.d):00352         * New WDDisk get/set status calls
00B0                  (   /dd/defs/os9.d):00353         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (   /dd/defs/os9.d):00354         
                      (   /dd/defs/os9.d):00355         *
                      (   /dd/defs/os9.d):00356         
                      (   /dd/defs/os9.d):00357         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (   /dd/defs/os9.d):00358         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (   /dd/defs/os9.d):00359         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (   /dd/defs/os9.d):00360         
     0081             (   /dd/defs/os9.d):00361         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (   /dd/defs/os9.d):00362         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (   /dd/defs/os9.d):00363         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (   /dd/defs/os9.d):00364         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (   /dd/defs/os9.d):00365         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (   /dd/defs/os9.d):00366         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (   /dd/defs/os9.d):00367         
                      (   /dd/defs/os9.d):00368         * SDisk 3 Definition Equates
     0080             (   /dd/defs/os9.d):00369         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (   /dd/defs/os9.d):00370         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (   /dd/defs/os9.d):00371         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (   /dd/defs/os9.d):00372         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (   /dd/defs/os9.d):00373         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (   /dd/defs/os9.d):00374         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (   /dd/defs/os9.d):00375         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (   /dd/defs/os9.d):00376         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (   /dd/defs/os9.d):00377         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return ($86)
                      (   /dd/defs/os9.d):00378         
                      (   /dd/defs/os9.d):00379         
                      (   /dd/defs/os9.d):00380                        TTL       Direct Page Definitions
                      (   /dd/defs/os9.d):00381                        PAG       
                      (   /dd/defs/os9.d):00382         
                      (   /dd/defs/os9.d):00383         **********************************
                      (   /dd/defs/os9.d):00384         * Direct Page Variable Definitions
                      (   /dd/defs/os9.d):00385         *
                      (   /dd/defs/os9.d):00386                        ORG       $00
0000                  (   /dd/defs/os9.d):00387         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (   /dd/defs/os9.d):00388         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (   /dd/defs/os9.d):00389         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (   /dd/defs/os9.d):00390                        RMB       5
0009                  (   /dd/defs/os9.d):00391         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (   /dd/defs/os9.d):00392         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (   /dd/defs/os9.d):00393         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (   /dd/defs/os9.d):00394         D.DWStat       RMB       2                   DriveWire statics page
0010                  (   /dd/defs/os9.d):00395         D.DWSrvID      RMB       1                   DriveWire server ID
                      (   /dd/defs/os9.d):00396         
                      (   /dd/defs/os9.d):00397                        ORG       $20
                      (   /dd/defs/os9.d):00398         
                      (   /dd/defs/os9.d):00399         
                      (   /dd/defs/os9.d):00400         * Level 1 DP vars
                      (   /dd/defs/os9.d):00401         
                      (   /dd/defs/os9.d):00402         *D.XSWI3        RMB       3
                      (   /dd/defs/os9.d):00403         *D.XSWI2        RMB       3
                      (   /dd/defs/os9.d):00404         *D.XFIRQ        RMB       3
                      (   /dd/defs/os9.d):00405         *D.XIRQ         RMB       3
                      (   /dd/defs/os9.d):00406         *D.XSWI         RMB       3
                      (   /dd/defs/os9.d):00407         *D.XNMI         RMB       3
                      (   /dd/defs/os9.d):00408         
                      (   /dd/defs/os9.d):00409         
                      (   /dd/defs/os9.d):00410         * Table Sizes
                      (   /dd/defs/os9.d):00411         
                      (   /dd/defs/os9.d):00412         
                      (   /dd/defs/os9.d):00413         * Level 2 DP vars
0020                  (   /dd/defs/os9.d):00414         D.Tasks        RMB       2                   Task User Table
0022                  (   /dd/defs/os9.d):00415         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (   /dd/defs/os9.d):00416         D.Init         RMB       2                   Initialization Module ptr
0026                  (   /dd/defs/os9.d):00417         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (   /dd/defs/os9.d):00418         D.Time         EQU       .                   System Time
0028                  (   /dd/defs/os9.d):00419         D.Year         RMB       1
0029                  (   /dd/defs/os9.d):00420         D.Month        RMB       1
002A                  (   /dd/defs/os9.d):00421         D.Day          RMB       1
002B                  (   /dd/defs/os9.d):00422         D.Hour         RMB       1
002C                  (   /dd/defs/os9.d):00423         D.Min          RMB       1
002D                  (   /dd/defs/os9.d):00424         D.Sec          RMB       1
002E                  (   /dd/defs/os9.d):00425         D.Tick         RMB       1
002F                  (   /dd/defs/os9.d):00426         D.Slice        RMB       1                   current slice remaining
0030                  (   /dd/defs/os9.d):00427         D.TSlice       RMB       1                   Ticks per Slice
0031                  (   /dd/defs/os9.d):00428         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (   /dd/defs/os9.d):00429         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (   /dd/defs/os9.d):00430         D.ErrCod       RMB       1                   Reset Error Code
0034                  (   /dd/defs/os9.d):00431         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (   /dd/defs/os9.d):00432         D.TkCnt        RMB       1                   Tick Counter
0036                  (   /dd/defs/os9.d):00433         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (   /dd/defs/os9.d):00434         D.BtSz         RMB       2                   Size of Boot
                      (   /dd/defs/os9.d):00435         
003A                  (   /dd/defs/os9.d):00436                        RMB       1                   Currently unused in NitrOS-9/6809
                      (   /dd/defs/os9.d):00437         
003B                  (   /dd/defs/os9.d):00438         D.CRC          RMB       1                   CRC checking mode flag
                      (   /dd/defs/os9.d):00439         
003C                  (   /dd/defs/os9.d):00440         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (   /dd/defs/os9.d):00441         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (   /dd/defs/os9.d):00442         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (   /dd/defs/os9.d):00443         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (   /dd/defs/os9.d):00444         
                      (   /dd/defs/os9.d):00445                        ORG       $40
0040                  (   /dd/defs/os9.d):00446         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (   /dd/defs/os9.d):00447         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (   /dd/defs/os9.d):00448         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (   /dd/defs/os9.d):00449         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (   /dd/defs/os9.d):00450         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (   /dd/defs/os9.d):00451         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (   /dd/defs/os9.d):00452         D.Proc         RMB       2                   Current Process ptr
0052                  (   /dd/defs/os9.d):00453         D.AProcQ       RMB       2                   Active Process Queue
0054                  (   /dd/defs/os9.d):00454         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (   /dd/defs/os9.d):00455         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (   /dd/defs/os9.d):00456         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (   /dd/defs/os9.d):00457         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (   /dd/defs/os9.d):00458         D.CldRes       RMB       2                   Cold Restart vector
005E                  (   /dd/defs/os9.d):00459         D.BtBug        RMB       3                   Boot debug information
0061                  (   /dd/defs/os9.d):00460         D.Pipe         RMB       2
                      (   /dd/defs/os9.d):00461         
                      (   /dd/defs/os9.d):00462                        ORG       $6B
006B                  (   /dd/defs/os9.d):00463         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (   /dd/defs/os9.d):00464         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (   /dd/defs/os9.d):00465         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (   /dd/defs/os9.d):00466         
                      (   /dd/defs/os9.d):00467                        ORG       $80
0080                  (   /dd/defs/os9.d):00468         D.DevTbl       RMB       2                   I/O Device Table
0082                  (   /dd/defs/os9.d):00469         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (   /dd/defs/os9.d):00470                        RMB       4                   reserved
0088                  (   /dd/defs/os9.d):00471         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (   /dd/defs/os9.d):00472         D.DMAReq       RMB       1                   DMA Request flag
                      (   /dd/defs/os9.d):00473         
                      (   /dd/defs/os9.d):00474         ********
                      (   /dd/defs/os9.d):00475         * CoCo 3 STUFF COMES NEXT
                      (   /dd/defs/os9.d):00476         * This area is used for the CoCo Hardware Registers
                      (   /dd/defs/os9.d):00477         *
                      (   /dd/defs/os9.d):00478                        ORG       $90
0090                  (   /dd/defs/os9.d):00479         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (   /dd/defs/os9.d):00480         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (   /dd/defs/os9.d):00481         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (   /dd/defs/os9.d):00482         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (   /dd/defs/os9.d):00483         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (   /dd/defs/os9.d):00484         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (   /dd/defs/os9.d):00485         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (   /dd/defs/os9.d):00486         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (   /dd/defs/os9.d):00487         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (   /dd/defs/os9.d):00488         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (   /dd/defs/os9.d):00489         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (   /dd/defs/os9.d):00490         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (   /dd/defs/os9.d):00491         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (   /dd/defs/os9.d):00492         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (   /dd/defs/os9.d):00493         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (   /dd/defs/os9.d):00494         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (   /dd/defs/os9.d):00495         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (   /dd/defs/os9.d):00496         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (   /dd/defs/os9.d):00497         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (   /dd/defs/os9.d):00498         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (   /dd/defs/os9.d):00499         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (   /dd/defs/os9.d):00500         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (   /dd/defs/os9.d):00501         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (   /dd/defs/os9.d):00502         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (   /dd/defs/os9.d):00503         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (   /dd/defs/os9.d):00504         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (   /dd/defs/os9.d):00505         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (   /dd/defs/os9.d):00506         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (   /dd/defs/os9.d):00507         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (   /dd/defs/os9.d):00508         D.Clock2       RMB       2                   CC Clock2 entry address
                      (   /dd/defs/os9.d):00509                        ORG       $C0
00C0                  (   /dd/defs/os9.d):00510         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (   /dd/defs/os9.d):00511         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (   /dd/defs/os9.d):00512         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (   /dd/defs/os9.d):00513         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (   /dd/defs/os9.d):00514         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (   /dd/defs/os9.d):00515         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (   /dd/defs/os9.d):00516         D.SysStk       RMB       2                   System stack
00CE                  (   /dd/defs/os9.d):00517         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (   /dd/defs/os9.d):00518         D.SysTsk       RMB       1                   System Task number
                      (   /dd/defs/os9.d):00519                        ORG       $E0
00E0                  (   /dd/defs/os9.d):00520         D.Clock        RMB       2
00E2                  (   /dd/defs/os9.d):00521         D.XSWI3        RMB       2
00E4                  (   /dd/defs/os9.d):00522         D.XSWI2        RMB       2
00E6                  (   /dd/defs/os9.d):00523         D.XFIRQ        RMB       2
00E8                  (   /dd/defs/os9.d):00524         D.XIRQ         RMB       2
00EA                  (   /dd/defs/os9.d):00525         D.XSWI         RMB       2
00EC                  (   /dd/defs/os9.d):00526         D.XNMI         RMB       2
00EE                  (   /dd/defs/os9.d):00527         D.ErrRst       RMB       2
00F0                  (   /dd/defs/os9.d):00528         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (   /dd/defs/os9.d):00529         D.SWI3         RMB       2
00F4                  (   /dd/defs/os9.d):00530         D.SWI2         RMB       2
00F6                  (   /dd/defs/os9.d):00531         D.FIRQ         RMB       2
00F8                  (   /dd/defs/os9.d):00532         D.IRQ          RMB       2
00FA                  (   /dd/defs/os9.d):00533         D.SWI          RMB       2
00FC                  (   /dd/defs/os9.d):00534         D.NMI          RMB       2
                      (   /dd/defs/os9.d):00535         
                      (   /dd/defs/os9.d):00536         *************************
                      (   /dd/defs/os9.d):00537         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (   /dd/defs/os9.d):00538         * and for bytes in the system memory map at D.SysMem.
                      (   /dd/defs/os9.d):00539         * A value of 0 indicates an unused/unassigned block.
                      (   /dd/defs/os9.d):00540         * In the code, block assignment often involves incrementing a value
                      (   /dd/defs/os9.d):00541         * from 0 to 1 rather than explict use of RAMinUse.
                      (   /dd/defs/os9.d):00542         *
     0080             (   /dd/defs/os9.d):00543         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (   /dd/defs/os9.d):00544         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (   /dd/defs/os9.d):00545         ModBlock       EQU       %00000010           Module in Block
     0001             (   /dd/defs/os9.d):00546         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (   /dd/defs/os9.d):00547         *
                      (   /dd/defs/os9.d):00548         * Service Dispatch Table special entries
                      (   /dd/defs/os9.d):00549         *
     00FE             (   /dd/defs/os9.d):00550         IOEntry        EQU       254
                      (   /dd/defs/os9.d):00551         
                      (   /dd/defs/os9.d):00552         
                      (   /dd/defs/os9.d):00553                        TTL       Structure Formats
                      (   /dd/defs/os9.d):00554                        PAG       
                      (   /dd/defs/os9.d):00555         ************************************
                      (   /dd/defs/os9.d):00556         * Module Directory Entry Definitions
                      (   /dd/defs/os9.d):00557         *
                      (   /dd/defs/os9.d):00558                        ORG       0
0000                  (   /dd/defs/os9.d):00559         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (   /dd/defs/os9.d):00560         MD$MBSiz       RMB       2                   Memory Block size
0004                  (   /dd/defs/os9.d):00561         MD$MPtr        RMB       2                   Module ptr
0006                  (   /dd/defs/os9.d):00562         MD$Link        RMB       2                   Module Link count
     0008             (   /dd/defs/os9.d):00563         MD$ESize       EQU       .                   Module Directory Entry size
                      (   /dd/defs/os9.d):00564         
                      (   /dd/defs/os9.d):00565         ************************************
                      (   /dd/defs/os9.d):00566         * Module Definitions
                      (   /dd/defs/os9.d):00567         *
                      (   /dd/defs/os9.d):00568         * Universal Module Offsets
                      (   /dd/defs/os9.d):00569         *
                      (   /dd/defs/os9.d):00570                        ORG       0
0000                  (   /dd/defs/os9.d):00571         M$ID           RMB       2                   ID Code
0002                  (   /dd/defs/os9.d):00572         M$Size         RMB       2                   Module Size
0004                  (   /dd/defs/os9.d):00573         M$Name         RMB       2                   Module Name
0006                  (   /dd/defs/os9.d):00574         M$Type         RMB       1                   Type / Language
0007                  (   /dd/defs/os9.d):00575         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (   /dd/defs/os9.d):00576         M$Parity       RMB       1                   Header Parity
     0009             (   /dd/defs/os9.d):00577         M$IDSize       EQU       .                   Module ID Size
                      (   /dd/defs/os9.d):00578         *
                      (   /dd/defs/os9.d):00579         * Type-Dependent Module Offsets
                      (   /dd/defs/os9.d):00580         *
                      (   /dd/defs/os9.d):00581         * System, File Manager, Device Driver, Program Module
                      (   /dd/defs/os9.d):00582         *
0009                  (   /dd/defs/os9.d):00583         M$Exec         RMB       2                   Execution Entry Offset
                      (   /dd/defs/os9.d):00584         *
                      (   /dd/defs/os9.d):00585         * Device Driver, Program Module
                      (   /dd/defs/os9.d):00586         *
000B                  (   /dd/defs/os9.d):00587         M$Mem          RMB       2                   Stack Requirement
                      (   /dd/defs/os9.d):00588         *
                      (   /dd/defs/os9.d):00589         * Device Driver, Device Descriptor Module
                      (   /dd/defs/os9.d):00590         *
000D                  (   /dd/defs/os9.d):00591         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (   /dd/defs/os9.d):00592         *
                      (   /dd/defs/os9.d):00593         * Device Descriptor Module
                      (   /dd/defs/os9.d):00594         *
                      (   /dd/defs/os9.d):00595                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00596         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (   /dd/defs/os9.d):00597         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (   /dd/defs/os9.d):00598                        RMB       1                   M$Mode (defined above)
000E                  (   /dd/defs/os9.d):00599         M$Port         RMB       3                   Port Address
0011                  (   /dd/defs/os9.d):00600         M$Opt          RMB       1                   Device Default Options
0012                  (   /dd/defs/os9.d):00601         M$DTyp         RMB       1                   Device Type
     0012             (   /dd/defs/os9.d):00602         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (   /dd/defs/os9.d):00603         *
                      (   /dd/defs/os9.d):00604         * Configuration Module Entry Offsets
                      (   /dd/defs/os9.d):00605         *
                      (   /dd/defs/os9.d):00606                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00607         MaxMem         RMB       3                   Maximum Free Memory
000C                  (   /dd/defs/os9.d):00608         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (   /dd/defs/os9.d):00609         DevCnt         RMB       1                   Entries in Device Table
000E                  (   /dd/defs/os9.d):00610         InitStr        RMB       2                   Initial Module Name
0010                  (   /dd/defs/os9.d):00611         SysStr         RMB       2                   System Device Name
0012                  (   /dd/defs/os9.d):00612         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (   /dd/defs/os9.d):00613         BootStr        RMB       2                   Bootstrap Module name
0016                  (   /dd/defs/os9.d):00614         ProtFlag       RMB       1                   Write protect enable flag
                      (   /dd/defs/os9.d):00615         
0017                  (   /dd/defs/os9.d):00616         OSLevel        RMB       1                   OS level
0018                  (   /dd/defs/os9.d):00617         OSVer          RMB       1                   OS version
0019                  (   /dd/defs/os9.d):00618         OSMajor        RMB       1                   OS major
001A                  (   /dd/defs/os9.d):00619         OSMinor        RMB       1                   OS minor
001B                  (   /dd/defs/os9.d):00620         Feature1       RMB       1                   feature byte 1
001C                  (   /dd/defs/os9.d):00621         Feature2       RMB       1                   feature byte 2
001D                  (   /dd/defs/os9.d):00622         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (   /dd/defs/os9.d):00623         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (   /dd/defs/os9.d):00624                        RMB       4                   reserved for future use
                      (   /dd/defs/os9.d):00625         
                      (   /dd/defs/os9.d):00626         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (   /dd/defs/os9.d):00627         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (   /dd/defs/os9.d):00628         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (   /dd/defs/os9.d):00629         KeyRptS        RMB       1                   Key repeat start constant
0029                  (   /dd/defs/os9.d):00630         KeyRptD        RMB       1                   Key repeat delay constant
                      (   /dd/defs/os9.d):00631         
                      (   /dd/defs/os9.d):00632         * Feature1 byte definitions
     0001             (   /dd/defs/os9.d):00633         CRCOn          EQU       %00000001           CRC checking on
     0000             (   /dd/defs/os9.d):00634         CRCOff         EQU       %00000000           CRC checking off
     0000             (   /dd/defs/os9.d):00635         Proc6809       EQU       %00000000           6809 procesor
     0002             (   /dd/defs/os9.d):00636         Proc6309       EQU       %00000010           6309 procesor
                      (   /dd/defs/os9.d):00637         
                      (   /dd/defs/os9.d):00638                        PAG       
                      (   /dd/defs/os9.d):00639         **************************
                      (   /dd/defs/os9.d):00640         * Module Field Definitions
                      (   /dd/defs/os9.d):00641         *
                      (   /dd/defs/os9.d):00642         * ID Field - First two bytes of a NitrOS-9 module
                      (   /dd/defs/os9.d):00643         *
     0087             (   /dd/defs/os9.d):00644         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (   /dd/defs/os9.d):00645         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (   /dd/defs/os9.d):00646         M$ID12         EQU       M$ID1*256+M$ID2
                      (   /dd/defs/os9.d):00647         
                      (   /dd/defs/os9.d):00648         *
                      (   /dd/defs/os9.d):00649         * Module Type/Language Field Masks
                      (   /dd/defs/os9.d):00650         *
     00F0             (   /dd/defs/os9.d):00651         TypeMask       EQU       %11110000           Type Field
     000F             (   /dd/defs/os9.d):00652         LangMask       EQU       %00001111           Language Field
                      (   /dd/defs/os9.d):00653         
                      (   /dd/defs/os9.d):00654         *
                      (   /dd/defs/os9.d):00655         * Module Type Values
                      (   /dd/defs/os9.d):00656         *
     00F0             (   /dd/defs/os9.d):00657         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (   /dd/defs/os9.d):00658         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (   /dd/defs/os9.d):00659         FlMgr          EQU       $D0                 File Manager
     00C0             (   /dd/defs/os9.d):00660         Systm          EQU       $C0                 System Module
     0050             (   /dd/defs/os9.d):00661         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (   /dd/defs/os9.d):00662         Data           EQU       $40                 Data Module
     0030             (   /dd/defs/os9.d):00663         Multi          EQU       $30                 Multi-Module
     0020             (   /dd/defs/os9.d):00664         Sbrtn          EQU       $20                 Subroutine Module
     0010             (   /dd/defs/os9.d):00665         Prgrm          EQU       $10                 Program Module
                      (   /dd/defs/os9.d):00666         
                      (   /dd/defs/os9.d):00667         *
                      (   /dd/defs/os9.d):00668         * Module Language Values
                      (   /dd/defs/os9.d):00669         *
     0001             (   /dd/defs/os9.d):00670         Objct          EQU       1                   6809 Object Code Module
     0002             (   /dd/defs/os9.d):00671         ICode          EQU       2                   Basic09 I-code
     0003             (   /dd/defs/os9.d):00672         PCode          EQU       3                   Pascal P-code
     0004             (   /dd/defs/os9.d):00673         CCode          EQU       4                   C I-code
     0005             (   /dd/defs/os9.d):00674         CblCode        EQU       5                   Cobol I-code
     0006             (   /dd/defs/os9.d):00675         FrtnCode       EQU       6                   Fortran I-code
     0007             (   /dd/defs/os9.d):00676         Obj6309        EQU       7                   6309 object code
                      (   /dd/defs/os9.d):00677         *
                      (   /dd/defs/os9.d):00678         * Module Attributes / Revision byte
                      (   /dd/defs/os9.d):00679         *
                      (   /dd/defs/os9.d):00680         * Field Masks
                      (   /dd/defs/os9.d):00681         *
     00F0             (   /dd/defs/os9.d):00682         AttrMask       EQU       %11110000           Attributes Field
     000F             (   /dd/defs/os9.d):00683         RevsMask       EQU       %00001111           Revision Level Field
                      (   /dd/defs/os9.d):00684         *
                      (   /dd/defs/os9.d):00685         * Attribute Flags
                      (   /dd/defs/os9.d):00686         *
     0080             (   /dd/defs/os9.d):00687         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (   /dd/defs/os9.d):00688         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (   /dd/defs/os9.d):00689         ModNat         EQU       %00100000           6309 native mode attribute
     0040             (   /dd/defs/os9.d):00690         BufWrits       EQU       ModProt             SCF buffered read supported (Coco only at this point)
     0010             (   /dd/defs/os9.d):00691         BufReads       EQU       %00010000           SCF buffered write supported (Coco only at this point)
                      (   /dd/defs/os9.d):00692         * LCB - propose we add Buffered Read/Buffered Write attribute bits for Coco (in descriptors and
                      (   /dd/defs/os9.d):00693         *   drivers for SCF), with one of them replacing ModProt. SCF would check Read/ReadLn and Write/WritLn
                      (   /dd/defs/os9.d):00694         *   calls, and if both the driver and descriptor have the appropriate bit set, it would do buffered 32
                      (   /dd/defs/os9.d):00695         *   byte (for now) reads/writes like the Grfdrv write call does now, for all bytes that are ASCII >$1F
                      (   /dd/defs/os9.d):00696         *   (ie non-control chars, which need special processing)
                      (   /dd/defs/os9.d):00697         
                      (   /dd/defs/os9.d):00698         
                      (   /dd/defs/os9.d):00699         ********************
                      (   /dd/defs/os9.d):00700         * Device Type Values
                      (   /dd/defs/os9.d):00701         *
                      (   /dd/defs/os9.d):00702         * These values define various classes of devices, which are
                      (   /dd/defs/os9.d):00703         * managed by a file manager module.  The Device Type is embedded
                      (   /dd/defs/os9.d):00704         * in a device's device descriptor.
                      (   /dd/defs/os9.d):00705         *
     0000             (   /dd/defs/os9.d):00706         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (   /dd/defs/os9.d):00707         DT.RBF         EQU       1                   Random Block File Manager
     0002             (   /dd/defs/os9.d):00708         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (   /dd/defs/os9.d):00709         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (   /dd/defs/os9.d):00710         DT.NFM         EQU       4                   Network File Manager
     0005             (   /dd/defs/os9.d):00711         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (   /dd/defs/os9.d):00712         DT.RFM                  EQU             6                                       Remote File Manager
                      (   /dd/defs/os9.d):00713         
                      (   /dd/defs/os9.d):00714         *********************
                      (   /dd/defs/os9.d):00715         * CRC Result Constant
                      (   /dd/defs/os9.d):00716         *
     0080             (   /dd/defs/os9.d):00717         CRCCon1        EQU       $80
     0FE3             (   /dd/defs/os9.d):00718         CRCCon23       EQU       $0FE3
                      (   /dd/defs/os9.d):00719         
                      (   /dd/defs/os9.d):00720                        TTL       Process Information
                      (   /dd/defs/os9.d):00721                        PAG       
                      (   /dd/defs/os9.d):00722         ********************************
                      (   /dd/defs/os9.d):00723         * Process Descriptor Definitions
                      (   /dd/defs/os9.d):00724         *
                      (   /dd/defs/os9.d):00725         
                      (   /dd/defs/os9.d):00726         * Level 1 process descriptor defs
                      (   /dd/defs/os9.d):00727         
                      (   /dd/defs/os9.d):00728         
                      (   /dd/defs/os9.d):00729         *
                      (   /dd/defs/os9.d):00730         * Process State Flags
                      (   /dd/defs/os9.d):00731         *
                      (   /dd/defs/os9.d):00732         
                      (   /dd/defs/os9.d):00733         
                      (   /dd/defs/os9.d):00734         * Level 2 process descriptor defs
     0010             (   /dd/defs/os9.d):00735         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (   /dd/defs/os9.d):00736         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (   /dd/defs/os9.d):00737         NumPaths       EQU       16                  Number of Local Paths
                      (   /dd/defs/os9.d):00738         
                      (   /dd/defs/os9.d):00739                        ORG       0
0000                  (   /dd/defs/os9.d):00740         P$ID           RMB       1                   Process ID
0001                  (   /dd/defs/os9.d):00741         P$PID          RMB       1                   Parent's ID
0002                  (   /dd/defs/os9.d):00742         P$SID          RMB       1                   Sibling's ID
0003                  (   /dd/defs/os9.d):00743         P$CID          RMB       1                   Child's ID
0004                  (   /dd/defs/os9.d):00744         P$SP           RMB       2                   Stack ptr
0006                  (   /dd/defs/os9.d):00745         P$Task         RMB       1                   Task Number
0007                  (   /dd/defs/os9.d):00746         P$PagCnt       RMB       1                   Memory Page Count
0008                  (   /dd/defs/os9.d):00747         P$User         RMB       2                   User Index
000A                  (   /dd/defs/os9.d):00748         P$Prior        RMB       1                   Priority
000B                  (   /dd/defs/os9.d):00749         P$Age          RMB       1                   Age
000C                  (   /dd/defs/os9.d):00750         P$State        RMB       1                   Status
000D                  (   /dd/defs/os9.d):00751         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (   /dd/defs/os9.d):00752         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (   /dd/defs/os9.d):00753         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (   /dd/defs/os9.d):00754         P$PModul       RMB       2                   Primary Module
0013                  (   /dd/defs/os9.d):00755         P$SWI          RMB       2                   SWI Entry Point
0015                  (   /dd/defs/os9.d):00756         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (   /dd/defs/os9.d):00757         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (   /dd/defs/os9.d):00758         P$Signal       RMB       1                   Signal Code
001A                  (   /dd/defs/os9.d):00759         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (   /dd/defs/os9.d):00760         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (   /dd/defs/os9.d):00761         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (   /dd/defs/os9.d):00762                        RMB       $20-.               unused
0020                  (   /dd/defs/os9.d):00763         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (   /dd/defs/os9.d):00764         P$Path         RMB       NumPaths            I/O Path Table
0040                  (   /dd/defs/os9.d):00765         P$DATImg       RMB       64                  DAT Image
0080                  (   /dd/defs/os9.d):00766         P$Links        RMB       32                  Block Link counts
00A0                  (   /dd/defs/os9.d):00767         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (   /dd/defs/os9.d):00768         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (   /dd/defs/os9.d):00769         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (   /dd/defs/os9.d):00770         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (   /dd/defs/os9.d):00771         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (   /dd/defs/os9.d):00772         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (   /dd/defs/os9.d):00773         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (   /dd/defs/os9.d):00774         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (   /dd/defs/os9.d):00775         P$Alarm        RMB       6
00C9                  (   /dd/defs/os9.d):00776                        RMB       $200-.              Local stack
     0200             (   /dd/defs/os9.d):00777         P$Stack        EQU       .                   Top of Stack
     0200             (   /dd/defs/os9.d):00778         P$Size         EQU       .                   Size of Process Descriptor
                      (   /dd/defs/os9.d):00779         
                      (   /dd/defs/os9.d):00780         *
                      (   /dd/defs/os9.d):00781         * Process State Flags
                      (   /dd/defs/os9.d):00782         *
     0080             (   /dd/defs/os9.d):00783         SysState       EQU       %10000000
     0040             (   /dd/defs/os9.d):00784         TimSleep       EQU       %01000000
     0020             (   /dd/defs/os9.d):00785         TimOut         EQU       %00100000
     0010             (   /dd/defs/os9.d):00786         ImgChg         EQU       %00010000
     0008             (   /dd/defs/os9.d):00787         Suspend        EQU       %00001000
     0002             (   /dd/defs/os9.d):00788         Condem         EQU       %00000010
     0001             (   /dd/defs/os9.d):00789         Dead           EQU       %00000001
                      (   /dd/defs/os9.d):00790         
                      (   /dd/defs/os9.d):00791         
                      (   /dd/defs/os9.d):00792                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (   /dd/defs/os9.d):00793                        PAG       
                      (   /dd/defs/os9.d):00794         *************************
                      (   /dd/defs/os9.d):00795         * Path Descriptor Offsets
                      (   /dd/defs/os9.d):00796         *
                      (   /dd/defs/os9.d):00797                        ORG       0
0000                  (   /dd/defs/os9.d):00798         PD.PD          RMB       1                   Path Number
0001                  (   /dd/defs/os9.d):00799         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (   /dd/defs/os9.d):00800         PD.CNT         RMB       1                   Number of Open Images
0003                  (   /dd/defs/os9.d):00801         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (   /dd/defs/os9.d):00802         PD.CPR         RMB       1                   Current Process
0006                  (   /dd/defs/os9.d):00803         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (   /dd/defs/os9.d):00804         PD.BUF         RMB       2                   Buffer Address
000A                  (   /dd/defs/os9.d):00805         PD.FST         RMB       32-.                File Manager's Storage
     0020             (   /dd/defs/os9.d):00806         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (   /dd/defs/os9.d):00807         PD.DTP         RMB       1                   Device Type
0021                  (   /dd/defs/os9.d):00808                        RMB       64-.                Path options
     0040             (   /dd/defs/os9.d):00809         PDSIZE         EQU       .
                      (   /dd/defs/os9.d):00810         
                      (   /dd/defs/os9.d):00811         *
                      (   /dd/defs/os9.d):00812         * Pathlist Special Symbols
                      (   /dd/defs/os9.d):00813         *
     002F             (   /dd/defs/os9.d):00814         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (   /dd/defs/os9.d):00815         PDIR           EQU       '.                  Directory
     0040             (   /dd/defs/os9.d):00816         PENTIR         EQU       '@                  Entire Device
                      (   /dd/defs/os9.d):00817         
                      (   /dd/defs/os9.d):00818                        PAG       
                      (   /dd/defs/os9.d):00819         ****************************
                      (   /dd/defs/os9.d):00820         * File Manager Entry Offsets
                      (   /dd/defs/os9.d):00821         *
                      (   /dd/defs/os9.d):00822                        ORG       0
0000                  (   /dd/defs/os9.d):00823         FMCREA         RMB       3                   Create (Open New) File
0003                  (   /dd/defs/os9.d):00824         FMOPEN         RMB       3                   Open File
0006                  (   /dd/defs/os9.d):00825         FMMDIR         RMB       3                   Make Directory
0009                  (   /dd/defs/os9.d):00826         FMCDIR         RMB       3                   Change Directory
000C                  (   /dd/defs/os9.d):00827         FMDLET         RMB       3                   Delete File
000F                  (   /dd/defs/os9.d):00828         FMSEEK         RMB       3                   Position File
0012                  (   /dd/defs/os9.d):00829         FMREAD         RMB       3                   Read from File
0015                  (   /dd/defs/os9.d):00830         FMWRIT         RMB       3                   Write to File
0018                  (   /dd/defs/os9.d):00831         FMRDLN         RMB       3                   ReadLn
001B                  (   /dd/defs/os9.d):00832         FMWRLN         RMB       3                   WritLn
001E                  (   /dd/defs/os9.d):00833         FMGSTA         RMB       3                   Get File Status
0021                  (   /dd/defs/os9.d):00834         FMSSTA         RMB       3                   Set File Status
0024                  (   /dd/defs/os9.d):00835         FMCLOS         RMB       3                   Close File
                      (   /dd/defs/os9.d):00836         
                      (   /dd/defs/os9.d):00837         *****************************
                      (   /dd/defs/os9.d):00838         * Device Driver Entry Offsets
                      (   /dd/defs/os9.d):00839         *
                      (   /dd/defs/os9.d):00840                        ORG       0
0000                  (   /dd/defs/os9.d):00841         D$INIT         RMB       3                   Device Initialization
0003                  (   /dd/defs/os9.d):00842         D$READ         RMB       3                   Read from Device
0006                  (   /dd/defs/os9.d):00843         D$WRIT         RMB       3                   Write to Device
0009                  (   /dd/defs/os9.d):00844         D$GSTA         RMB       3                   Get Device Status
000C                  (   /dd/defs/os9.d):00845         D$PSTA         RMB       3                   Put Device Status
000F                  (   /dd/defs/os9.d):00846         D$TERM         RMB       3                   Device Termination
                      (   /dd/defs/os9.d):00847         
                      (   /dd/defs/os9.d):00848         *********************
                      (   /dd/defs/os9.d):00849         * Device Table Format
                      (   /dd/defs/os9.d):00850         *
                      (   /dd/defs/os9.d):00851                        ORG       0
0000                  (   /dd/defs/os9.d):00852         V$DRIV         RMB       2                   Device Driver module
0002                  (   /dd/defs/os9.d):00853         V$STAT         RMB       2                   Device Driver Static storage
0004                  (   /dd/defs/os9.d):00854         V$DESC         RMB       2                   Device Descriptor module
0006                  (   /dd/defs/os9.d):00855         V$FMGR         RMB       2                   File Manager module
0008                  (   /dd/defs/os9.d):00856         V$USRS         RMB       1                   use count
0009                  (   /dd/defs/os9.d):00857         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (   /dd/defs/os9.d):00858         V$FMGREX       RMB       2                   File Manager execution address
     000D             (   /dd/defs/os9.d):00859         DEVSIZ         EQU       .
                      (   /dd/defs/os9.d):00860         
                      (   /dd/defs/os9.d):00861         *******************************
                      (   /dd/defs/os9.d):00862         * Device Static Storage Offsets
                      (   /dd/defs/os9.d):00863         *
                      (   /dd/defs/os9.d):00864                        ORG       0
0000                  (   /dd/defs/os9.d):00865         V.PAGE         RMB       1                   Port Extended Address
0001                  (   /dd/defs/os9.d):00866         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (   /dd/defs/os9.d):00867         V.LPRC         RMB       1                   Last Active Process ID
0004                  (   /dd/defs/os9.d):00868         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (   /dd/defs/os9.d):00869         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (   /dd/defs/os9.d):00870         V.USER         EQU       .                   Driver Allocation Origin
                      (   /dd/defs/os9.d):00871         
                      (   /dd/defs/os9.d):00872         ********************************
                      (   /dd/defs/os9.d):00873         * Interrupt Polling Table Format
                      (   /dd/defs/os9.d):00874         *
                      (   /dd/defs/os9.d):00875                        ORG       0
0000                  (   /dd/defs/os9.d):00876         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (   /dd/defs/os9.d):00877         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (   /dd/defs/os9.d):00878         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (   /dd/defs/os9.d):00879         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (   /dd/defs/os9.d):00880         Q$STAT         RMB       2                   Static Storage Address
0008                  (   /dd/defs/os9.d):00881         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
0009                  (   /dd/defs/os9.d):00882         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
     000B             (   /dd/defs/os9.d):00883         POLSIZ         EQU       .
                      (   /dd/defs/os9.d):00884         
                      (   /dd/defs/os9.d):00885         ********************
                      (   /dd/defs/os9.d):00886         * VIRQ packet format
                      (   /dd/defs/os9.d):00887         *
                      (   /dd/defs/os9.d):00888                        ORG       0
0000                  (   /dd/defs/os9.d):00889         Vi.Cnt         RMB       2                   count down counter
0002                  (   /dd/defs/os9.d):00890         Vi.Rst         RMB       2                   reset value for counter
0004                  (   /dd/defs/os9.d):00891         Vi.Stat        RMB       1                   status byte
     0005             (   /dd/defs/os9.d):00892         Vi.PkSz        EQU       .
                      (   /dd/defs/os9.d):00893         
     0001             (   /dd/defs/os9.d):00894         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (   /dd/defs/os9.d):00895         
                      (   /dd/defs/os9.d):00896                        PAG       
                      (   /dd/defs/os9.d):00897         *************************************
                      (   /dd/defs/os9.d):00898         * Machine Characteristics Definitions
                      (   /dd/defs/os9.d):00899         *
     0000             (   /dd/defs/os9.d):00900         R$CC           EQU       0                   Condition Codes register
     0001             (   /dd/defs/os9.d):00901         R$A            EQU       1                   A Accumulator
     0002             (   /dd/defs/os9.d):00902         R$B            EQU       2                   B Accumulator
     0001             (   /dd/defs/os9.d):00903         R$D            EQU       R$A                 Combined A:B Accumulator
                      (   /dd/defs/os9.d):00904                        IFNE      H6309
0005                  (   /dd/defs/os9.d):00905         R$E            EQU       3
0005                  (   /dd/defs/os9.d):00906         R$F            EQU       4
0005                  (   /dd/defs/os9.d):00907         R$W            EQU       R$E
0005                  (   /dd/defs/os9.d):00908         R$Q            EQU       R$A
0005                  (   /dd/defs/os9.d):00909         R$DP           EQU       5
0005                  (   /dd/defs/os9.d):00910         R$X            EQU       6
0005                  (   /dd/defs/os9.d):00911         R$Y            EQU       8
0005                  (   /dd/defs/os9.d):00912         R$U            EQU       10
0005                  (   /dd/defs/os9.d):00913         R$PC           EQU       12
0005                  (   /dd/defs/os9.d):00914         R$Size         EQU       14
                      (   /dd/defs/os9.d):00915                        ELSE
     0003             (   /dd/defs/os9.d):00916         R$DP           EQU       3                   Direct Page register
     0004             (   /dd/defs/os9.d):00917         R$X            EQU       4                   X Index register
     0006             (   /dd/defs/os9.d):00918         R$Y            EQU       6                   Y Index register
     0008             (   /dd/defs/os9.d):00919         R$U            EQU       8                   User Stack register
     000A             (   /dd/defs/os9.d):00920         R$PC           EQU       10                  Program Counter register
     000C             (   /dd/defs/os9.d):00921         R$Size         EQU       12                  Total register package size
                      (   /dd/defs/os9.d):00922                        ENDC
                      (   /dd/defs/os9.d):00923         
                      (   /dd/defs/os9.d):00924         * MD register masks
                      (   /dd/defs/os9.d):00925         * 6309 definitions
     0080             (   /dd/defs/os9.d):00926         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (   /dd/defs/os9.d):00927         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (   /dd/defs/os9.d):00928         
     0080             (   /dd/defs/os9.d):00929         Entire         EQU       %10000000           Full Register Stack flag
     0040             (   /dd/defs/os9.d):00930         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (   /dd/defs/os9.d):00931         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (   /dd/defs/os9.d):00932         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (   /dd/defs/os9.d):00933         Negative       EQU       %00001000           Negative flag
     0004             (   /dd/defs/os9.d):00934         Zero           EQU       %00000100           Zero flag
     0002             (   /dd/defs/os9.d):00935         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (   /dd/defs/os9.d):00936         Carry          EQU       %00000001           Carry bit
     0050             (   /dd/defs/os9.d):00937         IntMasks       EQU       IRQMask+FIRQMask
     0080             (   /dd/defs/os9.d):00938         Sign           EQU       %10000000           sign bit
                      (   /dd/defs/os9.d):00939         
                      (   /dd/defs/os9.d):00940                        TTL       Error Code Definitions
                      (   /dd/defs/os9.d):00941                        PAG       
                      (   /dd/defs/os9.d):00942         ************************
                      (   /dd/defs/os9.d):00943         * Error Code Definitions
                      (   /dd/defs/os9.d):00944         *
                      (   /dd/defs/os9.d):00945         * Basic09 Error Codes
                      (   /dd/defs/os9.d):00946         *
                      (   /dd/defs/os9.d):00947                        ORG       10
000A                  (   /dd/defs/os9.d):00948         E$UnkSym       RMB       1                   Unknown symbol
000B                  (   /dd/defs/os9.d):00949         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (   /dd/defs/os9.d):00950         E$IllStC       RMB       1                   Illegal statement construction
000D                  (   /dd/defs/os9.d):00951         E$ICOvf        RMB       1                   I-code overflow
000E                  (   /dd/defs/os9.d):00952         E$IChRef       RMB       1                   Illegal channel reference
000F                  (   /dd/defs/os9.d):00953         E$IllMod       RMB       1                   Illegal mode
0010                  (   /dd/defs/os9.d):00954         E$IllNum       RMB       1                   Illegal number
0011                  (   /dd/defs/os9.d):00955         E$IllPrf       RMB       1                   Illegal prefix
0012                  (   /dd/defs/os9.d):00956         E$IllOpd       RMB       1                   Illegal operand
0013                  (   /dd/defs/os9.d):00957         E$IllOpr       RMB       1                   Illegal operator
0014                  (   /dd/defs/os9.d):00958         E$IllRFN       RMB       1                   Illegal record field name
0015                  (   /dd/defs/os9.d):00959         E$IllDim       RMB       1                   Illegal dimension
0016                  (   /dd/defs/os9.d):00960         E$IllLit       RMB       1                   Illegal literal
0017                  (   /dd/defs/os9.d):00961         E$IllRet       RMB       1                   Illegal relational
0018                  (   /dd/defs/os9.d):00962         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (   /dd/defs/os9.d):00963         E$DimLrg       RMB       1                   Dimension too large
001A                  (   /dd/defs/os9.d):00964         E$LinLrg       RMB       1                   Line number too large
001B                  (   /dd/defs/os9.d):00965         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (   /dd/defs/os9.d):00966         E$NoPath       RMB       1                   Missing path number
001D                  (   /dd/defs/os9.d):00967         E$NoComa       RMB       1                   Missing coma
001E                  (   /dd/defs/os9.d):00968         E$NoDim        RMB       1                   Missing dimension
001F                  (   /dd/defs/os9.d):00969         E$NoDO         RMB       1                   Missing DO statement
0020                  (   /dd/defs/os9.d):00970         E$MFull        RMB       1                   Memory full
0021                  (   /dd/defs/os9.d):00971         E$NoGoto       RMB       1                   Missing GOTO
0022                  (   /dd/defs/os9.d):00972         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (   /dd/defs/os9.d):00973         E$NoLRef       RMB       1                   Missing line reference
0024                  (   /dd/defs/os9.d):00974         E$NoOprd       RMB       1                   Missing operand
0025                  (   /dd/defs/os9.d):00975         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (   /dd/defs/os9.d):00976         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (   /dd/defs/os9.d):00977         E$NoTO         RMB       1                   Missing TO statement
0028                  (   /dd/defs/os9.d):00978         E$NoVRef       RMB       1                   Missing variable reference
0029                  (   /dd/defs/os9.d):00979         E$EndQou       RMB       1                   Missing end quote
002A                  (   /dd/defs/os9.d):00980         E$SubLrg       RMB       1                   Too many subscripts
002B                  (   /dd/defs/os9.d):00981         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (   /dd/defs/os9.d):00982         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (   /dd/defs/os9.d):00983         E$DivZer       RMB       1                   Divice by zero
002E                  (   /dd/defs/os9.d):00984         E$TypMis       RMB       1                   Operand type mismatch
002F                  (   /dd/defs/os9.d):00985         E$StrOvf       RMB       1                   String stack overflow
0030                  (   /dd/defs/os9.d):00986         E$NoRout       RMB       1                   Unimplemented routine
0031                  (   /dd/defs/os9.d):00987         E$UndVar       RMB       1                   Undefined variable
0032                  (   /dd/defs/os9.d):00988         E$FltOvf       RMB       1                   Floating Overflow
0033                  (   /dd/defs/os9.d):00989         E$LnComp       RMB       1                   Line with compiler error
0034                  (   /dd/defs/os9.d):00990         E$ValRng       RMB       1                   Value out of range for destination
0035                  (   /dd/defs/os9.d):00991         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (   /dd/defs/os9.d):00992         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (   /dd/defs/os9.d):00993         E$SubRng       RMB       1                   Subscript out of range
0038                  (   /dd/defs/os9.d):00994         E$ParmEr       RMB       1                   Paraemter error
0039                  (   /dd/defs/os9.d):00995         E$SysOvf       RMB       1                   System stack overflow
003A                  (   /dd/defs/os9.d):00996         E$IOMism       RMB       1                   I/O type mismatch
003B                  (   /dd/defs/os9.d):00997         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (   /dd/defs/os9.d):00998         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (   /dd/defs/os9.d):00999         E$IllInp       RMB       1                   Illegal input format
003E                  (   /dd/defs/os9.d):01000         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (   /dd/defs/os9.d):01001         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (   /dd/defs/os9.d):01002         E$IllPNm       RMB       1                   Illegal path number
0041                  (   /dd/defs/os9.d):01003         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (   /dd/defs/os9.d):01004         E$NonRcO       RMB       1                   Non-record type operand
0043                  (   /dd/defs/os9.d):01005         E$IllA         RMB       1                   Illegal argument
0044                  (   /dd/defs/os9.d):01006         E$IllCnt       RMB       1                   Illegal control structure
0045                  (   /dd/defs/os9.d):01007         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (   /dd/defs/os9.d):01008         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (   /dd/defs/os9.d):01009         E$IllExp       RMB       1                   Illegal expression type
0048                  (   /dd/defs/os9.d):01010         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (   /dd/defs/os9.d):01011         E$ArrOvf       RMB       1                   Array size overflow
004A                  (   /dd/defs/os9.d):01012         E$UndLin       RMB       1                   Undefined line number
004B                  (   /dd/defs/os9.d):01013         E$MltLin       RMB       1                   Multiply defined line number
004C                  (   /dd/defs/os9.d):01014         E$MltVar       RMB       1                   Multiply defined variable
004D                  (   /dd/defs/os9.d):01015         E$IllIVr       RMB       1                   Illegal input variable
004E                  (   /dd/defs/os9.d):01016         E$SeekRg       RMB       1                   Seek out of range
004F                  (   /dd/defs/os9.d):01017         E$NoData       RMB       1                   Missing data statement
                      (   /dd/defs/os9.d):01018         
                      (   /dd/defs/os9.d):01019         *
                      (   /dd/defs/os9.d):01020         * System Dependent Error Codes
                      (   /dd/defs/os9.d):01021         *
                      (   /dd/defs/os9.d):01022         
                      (   /dd/defs/os9.d):01023         * Level 2 windowing error codes
                      (   /dd/defs/os9.d):01024                        ORG       183
00B7                  (   /dd/defs/os9.d):01025         E$IWTyp        RMB       1                   Illegal window type
00B8                  (   /dd/defs/os9.d):01026         E$WADef        RMB       1                   Window already defined
00B9                  (   /dd/defs/os9.d):01027         E$NFont        RMB       1                   Font not found
00BA                  (   /dd/defs/os9.d):01028         E$StkOvf       RMB       1                   Stack overflow
00BB                  (   /dd/defs/os9.d):01029         E$IllArg       RMB       1                   Illegal argument
00BC                  (   /dd/defs/os9.d):01030                        RMB       1                   reserved
00BD                  (   /dd/defs/os9.d):01031         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (   /dd/defs/os9.d):01032         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (   /dd/defs/os9.d):01033         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (   /dd/defs/os9.d):01034         E$IllCmd       RMB       1                   Illegal command
00C1                  (   /dd/defs/os9.d):01035         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (   /dd/defs/os9.d):01036         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (   /dd/defs/os9.d):01037         E$IWDef        RMB       1                   Illegal window definition
00C4                  (   /dd/defs/os9.d):01038         E$WUndef       RMB       1                   Window undefined
                      (   /dd/defs/os9.d):01039         
00C5                  (   /dd/defs/os9.d):01040         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (   /dd/defs/os9.d):01041         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (   /dd/defs/os9.d):01042         E$Alias        RMB       1
                      (   /dd/defs/os9.d):01043         
                      (   /dd/defs/os9.d):01044         
                      (   /dd/defs/os9.d):01045         *
                      (   /dd/defs/os9.d):01046         * Standard NitrOS-9 Error Codes
                      (   /dd/defs/os9.d):01047         *
                      (   /dd/defs/os9.d):01048                        ORG       200
00C8                  (   /dd/defs/os9.d):01049         E$PthFul       RMB       1                   Path Table full
00C9                  (   /dd/defs/os9.d):01050         E$BPNum        RMB       1                   Bad Path Number
00CA                  (   /dd/defs/os9.d):01051         E$Poll         RMB       1                   Polling Table Full
00CB                  (   /dd/defs/os9.d):01052         E$BMode        RMB       1                   Bad Mode
00CC                  (   /dd/defs/os9.d):01053         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (   /dd/defs/os9.d):01054         E$BMID         RMB       1                   Bad Module ID
00CE                  (   /dd/defs/os9.d):01055         E$DirFul       RMB       1                   Module Directory Full
00CF                  (   /dd/defs/os9.d):01056         E$MemFul       RMB       1                   Process Memory Full
00D0                  (   /dd/defs/os9.d):01057         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (   /dd/defs/os9.d):01058         E$ModBsy       RMB       1                   Module Busy
00D2                  (   /dd/defs/os9.d):01059         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (   /dd/defs/os9.d):01060         E$EOF          RMB       1                   End of File
00D4                  (   /dd/defs/os9.d):01061                        RMB       1
00D5                  (   /dd/defs/os9.d):01062         E$NES          RMB       1                   Non-Existing Segment
00D6                  (   /dd/defs/os9.d):01063         E$FNA          RMB       1                   File Not Accesible
00D7                  (   /dd/defs/os9.d):01064         E$BPNam        RMB       1                   Bad Path Name
00D8                  (   /dd/defs/os9.d):01065         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (   /dd/defs/os9.d):01066         E$SLF          RMB       1                   Segment List Full
00DA                  (   /dd/defs/os9.d):01067         E$CEF          RMB       1                   Creating Existing File
00DB                  (   /dd/defs/os9.d):01068         E$IBA          RMB       1                   Illegal Block Address
00DC                  (   /dd/defs/os9.d):01069         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (   /dd/defs/os9.d):01070         E$MNF          RMB       1                   Module Not Found
00DE                  (   /dd/defs/os9.d):01071                        RMB       1
00DF                  (   /dd/defs/os9.d):01072         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (   /dd/defs/os9.d):01073         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (   /dd/defs/os9.d):01074         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (   /dd/defs/os9.d):01075                        RMB       1
00E2                  (   /dd/defs/os9.d):01076         E$NoChld       RMB       1                   No Children
00E3                  (   /dd/defs/os9.d):01077         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (   /dd/defs/os9.d):01078         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (   /dd/defs/os9.d):01079         E$PrcFul       RMB       1                   Process Table Full
00E6                  (   /dd/defs/os9.d):01080         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (   /dd/defs/os9.d):01081         E$KwnMod       RMB       1                   Known Module
00E8                  (   /dd/defs/os9.d):01082         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (   /dd/defs/os9.d):01083         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (   /dd/defs/os9.d):01084         E$NEMod        RMB       1                   Non Existing Module
00EB                  (   /dd/defs/os9.d):01085         E$BNam         RMB       1                   Bad Name
00EC                  (   /dd/defs/os9.d):01086         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (   /dd/defs/os9.d):01087         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (   /dd/defs/os9.d):01088         E$DNE          RMB       1                   Directory not empty
00EF                  (   /dd/defs/os9.d):01089         E$NoTask       RMB       1                   No available Task number
                      (   /dd/defs/os9.d):01090                        RMB       $F0-.               reserved
00F0                  (   /dd/defs/os9.d):01091         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (   /dd/defs/os9.d):01092         E$Sect         RMB       1                   Bad Sector number
00F2                  (   /dd/defs/os9.d):01093         E$WP           RMB       1                   Write Protect
00F3                  (   /dd/defs/os9.d):01094         E$CRC          RMB       1                   Bad Check Sum
00F4                  (   /dd/defs/os9.d):01095         E$Read         RMB       1                   Read Error
00F5                  (   /dd/defs/os9.d):01096         E$Write        RMB       1                   Write Error
00F6                  (   /dd/defs/os9.d):01097         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (   /dd/defs/os9.d):01098         E$Seek         RMB       1                   Seek Error
00F8                  (   /dd/defs/os9.d):01099         E$Full         RMB       1                   Media Full
00F9                  (   /dd/defs/os9.d):01100         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (   /dd/defs/os9.d):01101         E$DevBsy       RMB       1                   Device Busy
00FB                  (   /dd/defs/os9.d):01102         E$DIDC         RMB       1                   Disk ID Change
00FC                  (   /dd/defs/os9.d):01103         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (   /dd/defs/os9.d):01104         E$Share        RMB       1                   Non-sharable file busy
00FE                  (   /dd/defs/os9.d):01105         E$DeadLk       RMB       1                   I/O Deadlock error
                      (   /dd/defs/os9.d):01106         
                      (   /dd/defs/os9.d):01107         
                      (   /dd/defs/os9.d):01108         ***************************
                      (   /dd/defs/os9.d):01109         * Level 3 Defs
                      (   /dd/defs/os9.d):01110         *
                      (   /dd/defs/os9.d):01111         * These definitions apply to NitrOS-9 Level 3
                      (   /dd/defs/os9.d):01112         *
                      (   /dd/defs/os9.d):01113         
                      ( /dd/defs/deffile):00007                  use   /dd/defs/rbf.d
                      (   /dd/defs/rbf.d):00001         ********************************************************************
                      (   /dd/defs/rbf.d):00002         * rbf.d - Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00003         *
                      (   /dd/defs/rbf.d):00004         * $Id$
                      (   /dd/defs/rbf.d):00005         *
                      (   /dd/defs/rbf.d):00006         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (   /dd/defs/rbf.d):00007         * that define the logical structure of a disk and allows access to the files
                      (   /dd/defs/rbf.d):00008         * in that structure.
                      (   /dd/defs/rbf.d):00009         *
                      (   /dd/defs/rbf.d):00010         * The data structures in this file give RBF its 'personality' and are used
                      (   /dd/defs/rbf.d):00011         * by RBF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/rbf.d):00012         *
                      (   /dd/defs/rbf.d):00013         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/rbf.d):00014         * Comment
                      (   /dd/defs/rbf.d):00015         * ------------------------------------------------------------------
                      (   /dd/defs/rbf.d):00016         *          1982/07/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00017         * PD.Exten added to path descriptor and PE Entries defined.
                      (   /dd/defs/rbf.d):00018         *
                      (   /dd/defs/rbf.d):00019         *          1982/07/15  Robert F. Doggett
                      (   /dd/defs/rbf.d):00020         * V.FileHd inserted in driver static storage.
                      (   /dd/defs/rbf.d):00021         *
                      (   /dd/defs/rbf.d):00022         *          1982/09/10  WGP
                      (   /dd/defs/rbf.d):00023         * Level One/Level Two condionals added.
                      (   /dd/defs/rbf.d):00024         *
                      (   /dd/defs/rbf.d):00025         *          1982/09/17  WGP
                      (   /dd/defs/rbf.d):00026         *
                      (   /dd/defs/rbf.d):00027         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00028         * PD.SLE renamed to PD.Creat.
                      (   /dd/defs/rbf.d):00029         *
                      (   /dd/defs/rbf.d):00030         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00031         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (   /dd/defs/rbf.d):00032         *
                      (   /dd/defs/rbf.d):00033         *          1982/09/20  Robert F. Doggett
                      (   /dd/defs/rbf.d):00034         * Reserved areas added in static storage.
                      (   /dd/defs/rbf.d):00035         
                      (   /dd/defs/rbf.d):00036         *          1983/06/07  Robert F. Doggett
                      (   /dd/defs/rbf.d):00037         * Added InDriver flag in PD.SMF.
                      (   /dd/defs/rbf.d):00038         *
                      (   /dd/defs/rbf.d):00039         *          1983/06/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00040         * Added PE.Req tmp save for PE.Lock.
                      (   /dd/defs/rbf.d):00041         *
                      (   /dd/defs/rbf.d):00042         *          1983/08/08  Robert F. Doggett
                      (   /dd/defs/rbf.d):00043         * Reserved PD.SToff for Japanese.
                      (   /dd/defs/rbf.d):00044         *
                      (   /dd/defs/rbf.d):00045         *          1983/11/19  Robert F. Doggett
                      (   /dd/defs/rbf.d):00046         * Added V.ResBit in drive tables.
                      (   /dd/defs/rbf.d):00047         *
                      (   /dd/defs/rbf.d):00048         *          1983/12/12  Robert F. Doggett
                      (   /dd/defs/rbf.d):00049         * Added PE.Prior to save process priority.
                      (   /dd/defs/rbf.d):00050         *
                      (   /dd/defs/rbf.d):00051         *          1983/12/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00052         * Added BufBusy bit in state flag (PD.SMF).
                      (   /dd/defs/rbf.d):00053         *
                      (   /dd/defs/rbf.d):00054         *          1984/07/06  Mark G. Hawkins
                      (   /dd/defs/rbf.d):00055         * Added Bit Definitions for DD.FMT.
                      (   /dd/defs/rbf.d):00056         *
                      (   /dd/defs/rbf.d):00057         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/rbf.d):00058         * Updated with Dev Desc Info
                      (   /dd/defs/rbf.d):00059         *
                      (   /dd/defs/rbf.d):00060         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00061         * Updated comments for clarity.
                      (   /dd/defs/rbf.d):00062         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (   /dd/defs/rbf.d):00063         *
                      (   /dd/defs/rbf.d):00064         *          2004/04/14  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00065         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (   /dd/defs/rbf.d):00066         * addendum.  Pointed out by Rodney Hamilton.
                      (   /dd/defs/rbf.d):00067         *
                      (   /dd/defs/rbf.d):00068         *          2005/05/31  P.Harvey-Smith.
                      (   /dd/defs/rbf.d):00069         * Added defines for bit 2 of IT.DNS, which the format command uses to
                      (   /dd/defs/rbf.d):00070         * determine if a drive should have it's track 0 as single or double density
                      (   /dd/defs/rbf.d):00071         *
                      (   /dd/defs/rbf.d):00072         *          2005/11/23  Robert Gault
                      (   /dd/defs/rbf.d):00073         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (   /dd/defs/rbf.d):00074         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (   /dd/defs/rbf.d):00075         *
                      (   /dd/defs/rbf.d):00076         *          2005/12/11  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00077         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (   /dd/defs/rbf.d):00078         
                      (   /dd/defs/rbf.d):00079                        NAM       rbf.d
                      (   /dd/defs/rbf.d):00080                        TTL       Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00081         
                      (   /dd/defs/rbf.d):00082                        PAG
                      (   /dd/defs/rbf.d):00083         *******************************
                      (   /dd/defs/rbf.d):00084         * RBF Device Descriptor Offsets
                      (   /dd/defs/rbf.d):00085         *
                      (   /dd/defs/rbf.d):00086         * These definitions are for RBF device descriptors.
                      (   /dd/defs/rbf.d):00087         
                      (   /dd/defs/rbf.d):00088                        ORG       M$DTyp
0012                  (   /dd/defs/rbf.d):00089                        RMB       1                   Device type (DT.RBF)
0013                  (   /dd/defs/rbf.d):00090         IT.DRV         RMB       1                   Drive number
0014                  (   /dd/defs/rbf.d):00091         IT.STP         RMB       1                   Step rate
0015                  (   /dd/defs/rbf.d):00092         IT.TYP         RMB       1                   Disk device type information
0016                  (   /dd/defs/rbf.d):00093         IT.DNS         RMB       1                   Density capability
0017                  (   /dd/defs/rbf.d):00094         IT.CYL         RMB       2                   Number of cylinders
0019                  (   /dd/defs/rbf.d):00095         IT.SID         RMB       1                   Number of surfaces
001A                  (   /dd/defs/rbf.d):00096         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (   /dd/defs/rbf.d):00097         IT.SCT         RMB       2                   Default sectors/track
001D                  (   /dd/defs/rbf.d):00098         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (   /dd/defs/rbf.d):00099         IT.ILV         RMB       1                   Sector interleave offset
0020                  (   /dd/defs/rbf.d):00100         IT.SAS         RMB       1                   Segment allocation size
                      (   /dd/defs/rbf.d):00101         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (   /dd/defs/rbf.d):00102         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (   /dd/defs/rbf.d):00103         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (   /dd/defs/rbf.d):00104         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (   /dd/defs/rbf.d):00105         * The following fields are not copied to the path descriptor
0025                  (   /dd/defs/rbf.d):00106         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (   /dd/defs/rbf.d):00107         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (   /dd/defs/rbf.d):00108         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (   /dd/defs/rbf.d):00109         * These fields have been added because of SuperDriver.  They probably
                      (   /dd/defs/rbf.d):00110         * can be used in other drivers
                      (   /dd/defs/rbf.d):00111                        ORG       IT.WPC
0025                  (   /dd/defs/rbf.d):00112         IT.SOFF1       RMB       1
0026                  (   /dd/defs/rbf.d):00113         IT.SOFF2       RMB       1
0027                  (   /dd/defs/rbf.d):00114         IT.SOFF3       RMB       1
0028                  (   /dd/defs/rbf.d):00115         IT.LLDRV       RMB       2
002A                  (   /dd/defs/rbf.d):00116         IT.MPI         RMB       1
                      (   /dd/defs/rbf.d):00117         
                      (   /dd/defs/rbf.d):00118         
                      (   /dd/defs/rbf.d):00119         * IT.TYP Definitions
                      (   /dd/defs/rbf.d):00120         *
     0080             (   /dd/defs/rbf.d):00121         TYP.HARD       EQU       %10000000           Hard disk
     0000             (   /dd/defs/rbf.d):00122         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (   /dd/defs/rbf.d):00123         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (   /dd/defs/rbf.d):00124         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (   /dd/defs/rbf.d):00125         
                      (   /dd/defs/rbf.d):00126         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (   /dd/defs/rbf.d):00127         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (   /dd/defs/rbf.d):00128         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (   /dd/defs/rbf.d):00129         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (   /dd/defs/rbf.d):00130         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (   /dd/defs/rbf.d):00131         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (   /dd/defs/rbf.d):00132         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (   /dd/defs/rbf.d):00133         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (   /dd/defs/rbf.d):00134         
                      (   /dd/defs/rbf.d):00135         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00136         TYP.5          EQU       %00000000           5" media
     0001             (   /dd/defs/rbf.d):00137         TYP.3          EQU       %00000001           3.5" media
     0002             (   /dd/defs/rbf.d):00138         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (   /dd/defs/rbf.d):00139         TYP.256        EQU       %00000000           256 byte sector media
     0004             (   /dd/defs/rbf.d):00140         TYP.512        EQU       %00000100           512 byte sector media
     0020             (   /dd/defs/rbf.d):00141         TYP.CCF        EQU       %00100000           CoCo format
     0000             (   /dd/defs/rbf.d):00142         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (   /dd/defs/rbf.d):00143         
                      (   /dd/defs/rbf.d):00144         * IT.DNS Definitions
                      (   /dd/defs/rbf.d):00145         *
                      (   /dd/defs/rbf.d):00146         
                      (   /dd/defs/rbf.d):00147         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (   /dd/defs/rbf.d):00148         
                      (   /dd/defs/rbf.d):00149         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00150         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (   /dd/defs/rbf.d):00151         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (   /dd/defs/rbf.d):00152         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (   /dd/defs/rbf.d):00153         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (   /dd/defs/rbf.d):00154         
                      (   /dd/defs/rbf.d):00155         * Added PHS,2005-05-31, as format seems to use these
     0000             (   /dd/defs/rbf.d):00156         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (   /dd/defs/rbf.d):00157         DNS.MFM0       EQU       %00000100           Double density track 0
                      (   /dd/defs/rbf.d):00158         
                      (   /dd/defs/rbf.d):00159         * Floppy disk step rate definitions
     0000             (   /dd/defs/rbf.d):00160         STP.30ms       EQU       0                   30ms step rate
     0001             (   /dd/defs/rbf.d):00161         STP.20ms       EQU       1                   20ms step rate
     0002             (   /dd/defs/rbf.d):00162         STP.12ms       EQU       2                   12ms step rate
     0003             (   /dd/defs/rbf.d):00163         STP.6ms        EQU       3                   6ms step rate
                      (   /dd/defs/rbf.d):00164         
                      (   /dd/defs/rbf.d):00165                        PAG
                      (   /dd/defs/rbf.d):00166         *************************************
                      (   /dd/defs/rbf.d):00167         * Random Block Path Descriptor Format
                      (   /dd/defs/rbf.d):00168         *
                      (   /dd/defs/rbf.d):00169         * A path descriptor is created for every new path that is open
                      (   /dd/defs/rbf.d):00170         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/rbf.d):00171         * descriptors track state information of a path.
                      (   /dd/defs/rbf.d):00172         *
                      (   /dd/defs/rbf.d):00173                        ORG       PD.FST
000A                  (   /dd/defs/rbf.d):00174         PD.SMF         RMB       1                   State flags
000B                  (   /dd/defs/rbf.d):00175         PD.CP          RMB       4                   Current logical byte position
000F                  (   /dd/defs/rbf.d):00176         PD.SIZ         RMB       4                   File size
0013                  (   /dd/defs/rbf.d):00177         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (   /dd/defs/rbf.d):00178         PD.SBP         RMB       3                   Segment beginning psn
0019                  (   /dd/defs/rbf.d):00179         PD.SSZ         RMB       3                   Segment size
001C                  (   /dd/defs/rbf.d):00180         PD.DSK         RMB       2                   Disk id
001E                  (   /dd/defs/rbf.d):00181         PD.DTB         RMB       2                   Drive table ptr
                      (   /dd/defs/rbf.d):00182                        ORG       PD.OPT
0020                  (   /dd/defs/rbf.d):00183                        RMB       1                   Device type
0021                  (   /dd/defs/rbf.d):00184         PD.DRV         RMB       1                   Drive number
0022                  (   /dd/defs/rbf.d):00185         PD.STP         RMB       1                   Step rate
0023                  (   /dd/defs/rbf.d):00186         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (   /dd/defs/rbf.d):00187         PD.DNS         RMB       1                   Density capability
0025                  (   /dd/defs/rbf.d):00188         PD.CYL         RMB       2                   Number of cylinders
0027                  (   /dd/defs/rbf.d):00189         PD.SID         RMB       1                   Number of surfaces
0028                  (   /dd/defs/rbf.d):00190         PD.VFY         RMB       1                   0=verify disk writes
0029                  (   /dd/defs/rbf.d):00191         PD.SCT         RMB       2                   Default sectors/track
002B                  (   /dd/defs/rbf.d):00192         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (   /dd/defs/rbf.d):00193         PD.ILV         RMB       1                   Sector interleave offset
002E                  (   /dd/defs/rbf.d):00194         PD.SAS         RMB       1                   Segment allocation size
002F                  (   /dd/defs/rbf.d):00195         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (   /dd/defs/rbf.d):00196         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (   /dd/defs/rbf.d):00197         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (   /dd/defs/rbf.d):00198         PD.ATT         RMB       1                   File attributes
0034                  (   /dd/defs/rbf.d):00199         PD.FD          RMB       3                   File descriptor psn
0037                  (   /dd/defs/rbf.d):00200         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (   /dd/defs/rbf.d):00201         PD.DCP         RMB       4                   File directory entry ptr
003E                  (   /dd/defs/rbf.d):00202         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (   /dd/defs/rbf.d):00203         
                      (   /dd/defs/rbf.d):00204         * State Flags
     0001             (   /dd/defs/rbf.d):00205         BUFMOD         EQU       $01                 Buffer modified
     0002             (   /dd/defs/rbf.d):00206         SINBUF         EQU       $02                 Sector in buffer
     0004             (   /dd/defs/rbf.d):00207         FDBUF          EQU       $04                 File descriptor in buffer
                      (   /dd/defs/rbf.d):00208         *EOFSEC equ $08 End of file sector
                      (   /dd/defs/rbf.d):00209         *EOF equ $10 End of file
     0020             (   /dd/defs/rbf.d):00210         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (   /dd/defs/rbf.d):00211         BufBusy        EQU       $40                 Buffer is currently busy
                      (   /dd/defs/rbf.d):00212         
                      (   /dd/defs/rbf.d):00213         ************************************
                      (   /dd/defs/rbf.d):00214         * Random Block Path Extension Format
                      (   /dd/defs/rbf.d):00215         *
                      (   /dd/defs/rbf.d):00216         * RBF paths under Level Two have additional information that
                      (   /dd/defs/rbf.d):00217         * is referenced by the path extension area.
                      (   /dd/defs/rbf.d):00218         *
                      (   /dd/defs/rbf.d):00219                        ORG       0
0000                  (   /dd/defs/rbf.d):00220         PE.PE          RMB       1                   PE path number
0001                  (   /dd/defs/rbf.d):00221         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (   /dd/defs/rbf.d):00222         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (   /dd/defs/rbf.d):00223         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (   /dd/defs/rbf.d):00224         PE.Lock        RMB       1                   Path lockout status
0008                  (   /dd/defs/rbf.d):00225         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (   /dd/defs/rbf.d):00226         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (   /dd/defs/rbf.d):00227         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (   /dd/defs/rbf.d):00228         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (   /dd/defs/rbf.d):00229         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (   /dd/defs/rbf.d):00230         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (   /dd/defs/rbf.d):00231         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (   /dd/defs/rbf.d):00232         PE.SigSg       RMB       1                   Signal code to send
0018                  (   /dd/defs/rbf.d):00233         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (   /dd/defs/rbf.d):00234                        RMB       32-.                Reserved
0020                  (   /dd/defs/rbf.d):00235         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (   /dd/defs/rbf.d):00236         
                      (   /dd/defs/rbf.d):00237         * PE.Lock status codes
     0000             (   /dd/defs/rbf.d):00238         Unlocked       EQU       0                   No portion of file is locked
     0001             (   /dd/defs/rbf.d):00239         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (   /dd/defs/rbf.d):00240         FileLock       EQU       2                   Entire file locked
     0004             (   /dd/defs/rbf.d):00241         EofLock        EQU       4                   End of file is locked
                      (   /dd/defs/rbf.d):00242         
                      (   /dd/defs/rbf.d):00243         
                      (   /dd/defs/rbf.d):00244                        PAG
                      (   /dd/defs/rbf.d):00245         ***********************
                      (   /dd/defs/rbf.d):00246         * LSN0 Disk Data Format
                      (   /dd/defs/rbf.d):00247         *
                      (   /dd/defs/rbf.d):00248         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (   /dd/defs/rbf.d):00249         * and contains information about the device's size and format.
                      (   /dd/defs/rbf.d):00250         *
                      (   /dd/defs/rbf.d):00251                        ORG       0
0000                  (   /dd/defs/rbf.d):00252         DD.TOT         RMB       3                   Total number of sectors
0003                  (   /dd/defs/rbf.d):00253         DD.TKS         RMB       1                   Track size in sectors
0004                  (   /dd/defs/rbf.d):00254         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (   /dd/defs/rbf.d):00255         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (   /dd/defs/rbf.d):00256         DD.DIR         RMB       3                   Address of root directory fd
000B                  (   /dd/defs/rbf.d):00257         DD.OWN         RMB       2                   Owner
000D                  (   /dd/defs/rbf.d):00258         DD.ATT         RMB       1                   Attributes
000E                  (   /dd/defs/rbf.d):00259         DD.DSK         RMB       2                   Disk ID
0010                  (   /dd/defs/rbf.d):00260         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (   /dd/defs/rbf.d):00261         DD.SPT         RMB       2                   Sectors/track
0013                  (   /dd/defs/rbf.d):00262         DD.RES         RMB       2                   Reserved for future use
     0015             (   /dd/defs/rbf.d):00263         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (   /dd/defs/rbf.d):00264         DD.BT          RMB       3                   System bootstrap sector
0018                  (   /dd/defs/rbf.d):00265         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (   /dd/defs/rbf.d):00266         DD.DAT         RMB       5                   Creation date
001F                  (   /dd/defs/rbf.d):00267         DD.NAM         RMB       32                  Volume name
003F                  (   /dd/defs/rbf.d):00268         DD.OPT         RMB       32                  Option area
                      (   /dd/defs/rbf.d):00269         
                      (   /dd/defs/rbf.d):00270         *************************
                      (   /dd/defs/rbf.d):00271         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (   /dd/defs/rbf.d):00272                 ORG $60         More options from device descriptor
0060                  (   /dd/defs/rbf.d):00273         VD.STP      RMB 1   This is for the /sh and /ih virtual disks in HDBDOS
0061                  (   /dd/defs/rbf.d):00274         VD.OFS      RMB 3   This is DT.WPC and DT.OSF combined, might be more
                      (   /dd/defs/rbf.d):00275         
                      (   /dd/defs/rbf.d):00276         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (   /dd/defs/rbf.d):00277         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (   /dd/defs/rbf.d):00278         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (   /dd/defs/rbf.d):00279         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (   /dd/defs/rbf.d):00280         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (   /dd/defs/rbf.d):00281         
                      (   /dd/defs/rbf.d):00282         
                      (   /dd/defs/rbf.d):00283                        PAG
                      (   /dd/defs/rbf.d):00284         ************************
                      (   /dd/defs/rbf.d):00285         * File Descriptor Format
                      (   /dd/defs/rbf.d):00286         *
                      (   /dd/defs/rbf.d):00287         * The file descriptor is a sector that is present for every file
                      (   /dd/defs/rbf.d):00288         * on an RBF device.  It contains attributes, modification dates,
                      (   /dd/defs/rbf.d):00289         * and segment information on a file.
                      (   /dd/defs/rbf.d):00290         *
                      (   /dd/defs/rbf.d):00291                        ORG       0
0000                  (   /dd/defs/rbf.d):00292         FD.ATT         RMB       1                   Attributes
0001                  (   /dd/defs/rbf.d):00293         FD.OWN         RMB       2                   Owner
0003                  (   /dd/defs/rbf.d):00294         FD.DAT         RMB       5                   Date last modified
0008                  (   /dd/defs/rbf.d):00295         FD.LNK         RMB       1                   Link count
0009                  (   /dd/defs/rbf.d):00296         FD.SIZ         RMB       4                   File size
000D                  (   /dd/defs/rbf.d):00297         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (   /dd/defs/rbf.d):00298         FD.SEG         EQU       .                   Beginning of segment list
                      (   /dd/defs/rbf.d):00299         * Segment List Entry Format
                      (   /dd/defs/rbf.d):00300                        ORG       0
0000                  (   /dd/defs/rbf.d):00301         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (   /dd/defs/rbf.d):00302         FDSL.B         RMB       2                   Segment size
     0005             (   /dd/defs/rbf.d):00303         FDSL.S         EQU       .                   Segment list entry size
     00FB             (   /dd/defs/rbf.d):00304         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (   /dd/defs/rbf.d):00305         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (   /dd/defs/rbf.d):00306         MINSEC         SET       16
                      (   /dd/defs/rbf.d):00307         
                      (   /dd/defs/rbf.d):00308         
                      (   /dd/defs/rbf.d):00309                        PAG
                      (   /dd/defs/rbf.d):00310         ************************
                      (   /dd/defs/rbf.d):00311         * Directory Entry Format
                      (   /dd/defs/rbf.d):00312         *
                      (   /dd/defs/rbf.d):00313         * Directory entries are part of a directory and define the name
                      (   /dd/defs/rbf.d):00314         * of the file, as well as a pointer to its file descriptor.
                      (   /dd/defs/rbf.d):00315         *
                      (   /dd/defs/rbf.d):00316                        ORG       0
0000                  (   /dd/defs/rbf.d):00317         DIR.NM         RMB       29                  File name
001D                  (   /dd/defs/rbf.d):00318         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (   /dd/defs/rbf.d):00319         DIR.SZ         EQU       .                   Directory record size
                      (   /dd/defs/rbf.d):00320         
                      (   /dd/defs/rbf.d):00321         
                      (   /dd/defs/rbf.d):00322                        PAG
                      (   /dd/defs/rbf.d):00323         ********************
                      (   /dd/defs/rbf.d):00324         * RBF Static Storage
                      (   /dd/defs/rbf.d):00325         *
                      (   /dd/defs/rbf.d):00326         * Overall Disk Static Storage
                      (   /dd/defs/rbf.d):00327         *
                      (   /dd/defs/rbf.d):00328         * Note:  This does not reserve any memory for drive tables.  Each
                      (   /dd/defs/rbf.d):00329         *        driver is responsible for reserving sufficient memory for
                      (   /dd/defs/rbf.d):00330         *        the appropriate number of tables.
                      (   /dd/defs/rbf.d):00331         *
                      (   /dd/defs/rbf.d):00332                        ORG       V.USER              Reserve required           ($06)
0006                  (   /dd/defs/rbf.d):00333         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (   /dd/defs/rbf.d):00334                        RMB       8                   reserved                   ($08)
     000F             (   /dd/defs/rbf.d):00335         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (   /dd/defs/rbf.d):00336         
                      (   /dd/defs/rbf.d):00337                        PAG
                      (   /dd/defs/rbf.d):00338         ****************
                      (   /dd/defs/rbf.d):00339         * Global Storage For Disk Drive Tables
                      (   /dd/defs/rbf.d):00340         *
                      (   /dd/defs/rbf.d):00341         * Each table contains the first 'DD.SIZ' bytes from
                      (   /dd/defs/rbf.d):00342         * LSN 0, and the current track, stepping rate,
                      (   /dd/defs/rbf.d):00343         * bitmap use flag, and disk type.
                      (   /dd/defs/rbf.d):00344         *
                      (   /dd/defs/rbf.d):00345                        ORG       0
0000                  (   /dd/defs/rbf.d):00346                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (   /dd/defs/rbf.d):00347         V.TRAK         RMB       2                   Current track
0017                  (   /dd/defs/rbf.d):00348         V.BMB          RMB       1                   Bit-map use flag
0018                  (   /dd/defs/rbf.d):00349         V.FileHd       RMB       2                   Open file list for this drive
001A                  (   /dd/defs/rbf.d):00350         V.DiskID       RMB       2                   Disk ID
001C                  (   /dd/defs/rbf.d):00351         V.BMapSz       RMB       1                   Bitmap Size
001D                  (   /dd/defs/rbf.d):00352         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (   /dd/defs/rbf.d):00353         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (   /dd/defs/rbf.d):00354         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (   /dd/defs/rbf.d):00355         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (   /dd/defs/rbf.d):00356         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (   /dd/defs/rbf.d):00357                        RMB       4                   Reserved
     0026             (   /dd/defs/rbf.d):00358         DRVMEM         EQU       .
                      (   /dd/defs/rbf.d):00359         
                      (   /dd/defs/rbf.d):00360         
                      ( /dd/defs/deffile):00008                  use   /dd/defs/scf.d
                      (   /dd/defs/scf.d):00001         ********************************************************************
                      (   /dd/defs/scf.d):00002         * scf.d - Sequential Character File Manager Definitions
                      (   /dd/defs/scf.d):00003         *
                      (   /dd/defs/scf.d):00004         * $Id$
                      (   /dd/defs/scf.d):00005         *
                      (   /dd/defs/scf.d):00006         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (   /dd/defs/scf.d):00007         * that define the logical structure of a serial device.
                      (   /dd/defs/scf.d):00008         *
                      (   /dd/defs/scf.d):00009         * The data structures in this file give SCF its 'personality' and are used
                      (   /dd/defs/scf.d):00010         * by SCF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/scf.d):00011         *
                      (   /dd/defs/scf.d):00012         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/scf.d):00013         * Comment
                      (   /dd/defs/scf.d):00014         * ------------------------------------------------------------------
                      (   /dd/defs/scf.d):00015         *          1984/01/11  YO
                      (   /dd/defs/scf.d):00016         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (   /dd/defs/scf.d):00017         *
                      (   /dd/defs/scf.d):00018         *          1985/04/20  Mark G. Hawkins
                      (   /dd/defs/scf.d):00019         * Added V.PDLHd Path Descriptor List Head.
                      (   /dd/defs/scf.d):00020         *
                      (   /dd/defs/scf.d):00021         *          1985/04/21  Mark G. Hawkins
                      (   /dd/defs/scf.d):00022         * Added PD.PLP and PD.PST for modem handling.
                      (   /dd/defs/scf.d):00023         *
                      (   /dd/defs/scf.d):00024         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/scf.d):00025         * Updated with Dev Desc info.
                      (   /dd/defs/scf.d):00026         *
                      (   /dd/defs/scf.d):00027         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/scf.d):00028         * Consolidated L1/L2 scfdefs.
                      (   /dd/defs/scf.d):00029         *
                      (   /dd/defs/scf.d):00030         *          2003/01/21  Boisy G. Pitre
                      (   /dd/defs/scf.d):00031         * Added symbolics for enhanced SCF line editing.
                      (   /dd/defs/scf.d):00032         *
                      (   /dd/defs/scf.d):00033         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/scf.d):00034         * Updated comments for clarity.
                      (   /dd/defs/scf.d):00035         *
                      (   /dd/defs/scf.d):00036         *          2004/05/17  Boisy G. Pitre
                      (   /dd/defs/scf.d):00037         * Added higher baud rates.
                      (   /dd/defs/scf.d):00038         
                      (   /dd/defs/scf.d):00039                        NAM       scf.d
                      (   /dd/defs/scf.d):00040                        TTL       Sequential File Manager Definitions
                      (   /dd/defs/scf.d):00041         
                      (   /dd/defs/scf.d):00042                        PAG
                      (   /dd/defs/scf.d):00043         *******************************
                      (   /dd/defs/scf.d):00044         * SCF Device Descriptor Offsets
                      (   /dd/defs/scf.d):00045         *
                      (   /dd/defs/scf.d):00046         * These definitions are for SCF device descriptors.
                      (   /dd/defs/scf.d):00047         
                      (   /dd/defs/scf.d):00048                        ORG       M$DTyp
0012                  (   /dd/defs/scf.d):00049         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (   /dd/defs/scf.d):00050         IT.UPC         RMB       1                   Uppercase flag
0014                  (   /dd/defs/scf.d):00051         IT.BSO         RMB       1                   Backspace behavior
0015                  (   /dd/defs/scf.d):00052         IT.DLO         RMB       1                   Delete behavior
0016                  (   /dd/defs/scf.d):00053         IT.EKO         RMB       1                   Echo flag
0017                  (   /dd/defs/scf.d):00054         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (   /dd/defs/scf.d):00055         IT.NUL         RMB       1                   End-of-line null count
0019                  (   /dd/defs/scf.d):00056         IT.PAU         RMB       1                   Page pause flag
001A                  (   /dd/defs/scf.d):00057         IT.PAG         RMB       1                   Number of lines per page
001B                  (   /dd/defs/scf.d):00058         IT.BSP         RMB       1                   Backspace character
001C                  (   /dd/defs/scf.d):00059         IT.DEL         RMB       1                   Delete-line character
001D                  (   /dd/defs/scf.d):00060         IT.EOR         RMB       1                   End-of-record character
001E                  (   /dd/defs/scf.d):00061         IT.EOF         RMB       1                   End-of-file character
001F                  (   /dd/defs/scf.d):00062         IT.RPR         RMB       1                   Reprint-line character
0020                  (   /dd/defs/scf.d):00063         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (   /dd/defs/scf.d):00064         IT.PSC         RMB       1                   Pause character
0022                  (   /dd/defs/scf.d):00065         IT.INT         RMB       1                   Interrupt character
0023                  (   /dd/defs/scf.d):00066         IT.QUT         RMB       1                   Quit character
0024                  (   /dd/defs/scf.d):00067         IT.BSE         RMB       1                   Backspace echo character
0025                  (   /dd/defs/scf.d):00068         IT.OVF         RMB       1                   Bell character
0026                  (   /dd/defs/scf.d):00069         IT.PAR         RMB       1                   Parity
0027                  (   /dd/defs/scf.d):00070         IT.BAU         RMB       1                   Baud rate
0028                  (   /dd/defs/scf.d):00071         IT.D2P         RMB       2                   Attached device name string offset
002A                  (   /dd/defs/scf.d):00072         IT.XON         RMB       1                   X-ON character
002B                  (   /dd/defs/scf.d):00073         IT.XOFF        RMB       1                   X-OFF character
002C                  (   /dd/defs/scf.d):00074         IT.COL         RMB       1                   Number of columns for display
002D                  (   /dd/defs/scf.d):00075         IT.ROW         RMB       1                   Number of rows for display
002E                  (   /dd/defs/scf.d):00076         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (   /dd/defs/scf.d):00077         
                      (   /dd/defs/scf.d):00078         * Window Descriptor Additions
                      (   /dd/defs/scf.d):00079         * For CoCo window, where IT.PAR = $80
                      (   /dd/defs/scf.d):00080                        ORG       IT.ROW+1
002E                  (   /dd/defs/scf.d):00081         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (   /dd/defs/scf.d):00082         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (   /dd/defs/scf.d):00083         IT.STY         RMB       1                   Screen type default
0031                  (   /dd/defs/scf.d):00084         IT.CPX         RMB       1                   Column start default
0032                  (   /dd/defs/scf.d):00085         IT.CPY         RMB       1                   Row start default
0033                  (   /dd/defs/scf.d):00086         IT.FGC         RMB       1                   Foreground color default
0034                  (   /dd/defs/scf.d):00087         IT.BGC         RMB       1                   Background color default
0035                  (   /dd/defs/scf.d):00088         IT.BDC         RMB       1                   Border color default
                      (   /dd/defs/scf.d):00089         
                      (   /dd/defs/scf.d):00090         
                      (   /dd/defs/scf.d):00091                        PAG
                      (   /dd/defs/scf.d):00092         ********************
                      (   /dd/defs/scf.d):00093         * SCF Static Storage
                      (   /dd/defs/scf.d):00094         *
                      (   /dd/defs/scf.d):00095         * SCF devices must reserve this space for SCF
                      (   /dd/defs/scf.d):00096         *
                      (   /dd/defs/scf.d):00097                        ORG       V.USER
0006                  (   /dd/defs/scf.d):00098         V.TYPE         RMB       1                   Device type or parity
0007                  (   /dd/defs/scf.d):00099         V.LINE         RMB       1                   Lines left until end of page
0008                  (   /dd/defs/scf.d):00100         V.PAUS         RMB       1                   Immediate Pause request
0009                  (   /dd/defs/scf.d):00101         V.DEV2         RMB       2                   Attached device's static
000B                  (   /dd/defs/scf.d):00102         V.INTR         RMB       1                   Interrupt char
000C                  (   /dd/defs/scf.d):00103         V.QUIT         RMB       1                   Quit char
000D                  (   /dd/defs/scf.d):00104         V.PCHR         RMB       1                   Pause char
000E                  (   /dd/defs/scf.d):00105         V.ERR          RMB       1                   Accumulated errors
000F                  (   /dd/defs/scf.d):00106         V.XON          RMB       1                   X-On char
0010                  (   /dd/defs/scf.d):00107         V.XOFF         RMB       1                   X-Off char
0011                  (   /dd/defs/scf.d):00108         V.KANJI        RMB       1                   Kanji mode flag
0012                  (   /dd/defs/scf.d):00109         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (   /dd/defs/scf.d):00110         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (   /dd/defs/scf.d):00111         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (   /dd/defs/scf.d):00112         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (   /dd/defs/scf.d):00113         V.SCF          EQU       .                   Total SCF manager static overhead
                      (   /dd/defs/scf.d):00114         
                      (   /dd/defs/scf.d):00115         
                      (   /dd/defs/scf.d):00116                        PAG
                      (   /dd/defs/scf.d):00117         ***********************
                      (   /dd/defs/scf.d):00118         * Character Definitions
                      (   /dd/defs/scf.d):00119         *
     0000             (   /dd/defs/scf.d):00120         C$NULL         SET       0                   Null char
     0001             (   /dd/defs/scf.d):00121         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (   /dd/defs/scf.d):00122         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (   /dd/defs/scf.d):00123         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (   /dd/defs/scf.d):00124         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (   /dd/defs/scf.d):00125         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (   /dd/defs/scf.d):00126         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (   /dd/defs/scf.d):00127         C$RARR         SET       $09                 Right Arrow
     0005             (   /dd/defs/scf.d):00128         C$EL           SET       $05                 Erase Line
     000A             (   /dd/defs/scf.d):00129         C$LF           SET       $0A                 Line feed
     000B             (   /dd/defs/scf.d):00130         C$HOME         SET       $0B                 Home position Code
     0015             (   /dd/defs/scf.d):00131         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (   /dd/defs/scf.d):00132         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (   /dd/defs/scf.d):00133         C$CR           SET       $0D                 Carriage return
     000C             (   /dd/defs/scf.d):00134         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (   /dd/defs/scf.d):00135         C$SI           SET       $0F                 Shift IN Code
     000E             (   /dd/defs/scf.d):00136         C$SO           SET       $0E                 Shift OUT Code
     0010             (   /dd/defs/scf.d):00137         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (   /dd/defs/scf.d):00138         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (   /dd/defs/scf.d):00139         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (   /dd/defs/scf.d):00140         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (   /dd/defs/scf.d):00141         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (   /dd/defs/scf.d):00142         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (   /dd/defs/scf.d):00143         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (   /dd/defs/scf.d):00144         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (   /dd/defs/scf.d):00145         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (   /dd/defs/scf.d):00146         C$RGT          SET       $1C                 Cursor right
     001D             (   /dd/defs/scf.d):00147         C$LFT          SET       $1D                 Cursor left
     001E             (   /dd/defs/scf.d):00148         C$UP           SET       $1E                 Cursor up
     001F             (   /dd/defs/scf.d):00149         C$DWN          SET       $1F                 Cursor down
     0020             (   /dd/defs/scf.d):00150         C$SPAC         SET       $20                 Space
     002E             (   /dd/defs/scf.d):00151         C$PERD         SET       '.
     002C             (   /dd/defs/scf.d):00152         C$COMA         SET       ',
                      (   /dd/defs/scf.d):00153         
                      (   /dd/defs/scf.d):00154         
                      (   /dd/defs/scf.d):00155                        PAG
                      (   /dd/defs/scf.d):00156         *********************************************
                      (   /dd/defs/scf.d):00157         * Sequential Character Path Descriptor Format
                      (   /dd/defs/scf.d):00158         *
                      (   /dd/defs/scf.d):00159         * A path descriptor is created for every new path that is open
                      (   /dd/defs/scf.d):00160         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/scf.d):00161         * descriptors track state information of a path.
                      (   /dd/defs/scf.d):00162         *
                      (   /dd/defs/scf.d):00163                        ORG       PD.FST
000A                  (   /dd/defs/scf.d):00164         PD.DV2         RMB       2                   Output device table pointer
000C                  (   /dd/defs/scf.d):00165         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (   /dd/defs/scf.d):00166         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (   /dd/defs/scf.d):00167         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (   /dd/defs/scf.d):00168         PD.STS         RMB       2                   Status routine module addr
0012                  (   /dd/defs/scf.d):00169         PD.STM         RMB       2                   Reserved for status routine
                      (   /dd/defs/scf.d):00170                        ORG       PD.OPT
0020                  (   /dd/defs/scf.d):00171                        RMB       1                   Device type
0021                  (   /dd/defs/scf.d):00172         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (   /dd/defs/scf.d):00173         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (   /dd/defs/scf.d):00174         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (   /dd/defs/scf.d):00175         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (   /dd/defs/scf.d):00176         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (   /dd/defs/scf.d):00177         PD.NUL         RMB       1                   End of Line null count
0027                  (   /dd/defs/scf.d):00178         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (   /dd/defs/scf.d):00179         PD.PAG         RMB       1                   Lines per page
0029                  (   /dd/defs/scf.d):00180         PD.BSP         RMB       1                   Backspace character
002A                  (   /dd/defs/scf.d):00181         PD.DEL         RMB       1                   Delete Line character
002B                  (   /dd/defs/scf.d):00182         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (   /dd/defs/scf.d):00183         PD.EOF         RMB       1                   End of File character
002D                  (   /dd/defs/scf.d):00184         PD.RPR         RMB       1                   Repront Line character
002E                  (   /dd/defs/scf.d):00185         PD.DUP         RMB       1                   Dup Last Line character
002F                  (   /dd/defs/scf.d):00186         PD.PSC         RMB       1                   Pause character
0030                  (   /dd/defs/scf.d):00187         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (   /dd/defs/scf.d):00188         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (   /dd/defs/scf.d):00189         PD.BSE         RMB       1                   Backspace echo character
0033                  (   /dd/defs/scf.d):00190         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (   /dd/defs/scf.d):00191         PD.PAR         RMB       1                   Parity code
0035                  (   /dd/defs/scf.d):00192         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (   /dd/defs/scf.d):00193         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (   /dd/defs/scf.d):00194         PD.XON         RMB       1                   ACIA X-ON character
0039                  (   /dd/defs/scf.d):00195         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (   /dd/defs/scf.d):00196         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (   /dd/defs/scf.d):00197         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (   /dd/defs/scf.d):00198         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (   /dd/defs/scf.d):00199         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (   /dd/defs/scf.d):00200         PD.PST         RMB       1                   Current path status
                      (   /dd/defs/scf.d):00201         
                      (   /dd/defs/scf.d):00202         
                      (   /dd/defs/scf.d):00203         * PD.PST values Path Descriptor Status byte
                      (   /dd/defs/scf.d):00204         *
     0001             (   /dd/defs/scf.d):00205         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (   /dd/defs/scf.d):00206         
                      (   /dd/defs/scf.d):00207         
                      (   /dd/defs/scf.d):00208         * PD.PAR definitions
                      (   /dd/defs/scf.d):00209         *
                      (   /dd/defs/scf.d):00210         * Parity
     0000             (   /dd/defs/scf.d):00211         PARNONE        EQU       %00000000
     0020             (   /dd/defs/scf.d):00212         PARODD         EQU       %00100000
     0060             (   /dd/defs/scf.d):00213         PAREVEN        EQU       %01100000
     00A0             (   /dd/defs/scf.d):00214         PARMARK        EQU       %10100000
     00E0             (   /dd/defs/scf.d):00215         PARSPACE       EQU       %11100000
     00E0             (   /dd/defs/scf.d):00216         PARMASK        EQU       %11100000
                      (   /dd/defs/scf.d):00217         
                      (   /dd/defs/scf.d):00218         * PD.BAU definitions
                      (   /dd/defs/scf.d):00219         *
                      (   /dd/defs/scf.d):00220         * Baud rate
     0000             (   /dd/defs/scf.d):00221         B110           EQU       %00000000
     0001             (   /dd/defs/scf.d):00222         B300           EQU       %00000001
     0002             (   /dd/defs/scf.d):00223         B600           EQU       %00000010
     0003             (   /dd/defs/scf.d):00224         B1200          EQU       %00000011
     0004             (   /dd/defs/scf.d):00225         B2400          EQU       %00000100
     0005             (   /dd/defs/scf.d):00226         B4800          EQU       %00000101
     0006             (   /dd/defs/scf.d):00227         B9600          EQU       %00000110
     0007             (   /dd/defs/scf.d):00228         B19200         EQU       %00000111
     0008             (   /dd/defs/scf.d):00229         B38400         EQU       %00001000
     0009             (   /dd/defs/scf.d):00230         B57600         EQU       %00001001
     000A             (   /dd/defs/scf.d):00231         B115200        EQU       %00001010
                      (   /dd/defs/scf.d):00232         * Word size
     0000             (   /dd/defs/scf.d):00233         WORD8          EQU       %00000000
     0020             (   /dd/defs/scf.d):00234         WORD7          EQU       %00100000
                      (   /dd/defs/scf.d):00235         * Stop bits
     0000             (   /dd/defs/scf.d):00236         STOP1          EQU       %00000000
     0010             (   /dd/defs/scf.d):00237         STOP2          EQU       %00010000
                      (   /dd/defs/scf.d):00238         
                      ( /dd/defs/deffile):00009                  use   /dd/defs/coco.d
                      (  /dd/defs/coco.d):00001         ********************************************************************
                      (  /dd/defs/coco.d):00002         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (  /dd/defs/coco.d):00003         *
                      (  /dd/defs/coco.d):00004         * $Id$
                      (  /dd/defs/coco.d):00005         *
                      (  /dd/defs/coco.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (  /dd/defs/coco.d):00007         * Comment
                      (  /dd/defs/coco.d):00008         * ------------------------------------------------------------------
                      (  /dd/defs/coco.d):00009         *          1998/10/13  Boisy G. Pitre
                      (  /dd/defs/coco.d):00010         * Added defs by Bruce Isted from his Eliminator archive.
                      (  /dd/defs/coco.d):00011         *
                      (  /dd/defs/coco.d):00012         *          1998/10/31  Boisy G. Pitre
                      (  /dd/defs/coco.d):00013         * Merged cc3global.defs into this file.
                      (  /dd/defs/coco.d):00014         *
                      (  /dd/defs/coco.d):00015         *          2002/04/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00016         * Merged Level One and Level Two sysdefs.
                      (  /dd/defs/coco.d):00017         *
                      (  /dd/defs/coco.d):00018         *          2002/06/22  Boisy G. Pitre
                      (  /dd/defs/coco.d):00019         * Removed PIA.U4 and PIA.U8, improved comments
                      (  /dd/defs/coco.d):00020         *
                      (  /dd/defs/coco.d):00021         *          2003/11/05  Robert Gault
                      (  /dd/defs/coco.d):00022         * Made changes in window globals and grfdrv memory to handle regW
                      (  /dd/defs/coco.d):00023         * in 6809 systems.
                      (  /dd/defs/coco.d):00024         *
                      (  /dd/defs/coco.d):00025         *          2003/11/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00026         * Statics now are prefaced with V. to identify them easier in source.
                      (  /dd/defs/coco.d):00027         *
                      (  /dd/defs/coco.d):00028         *          2004/07/18  Boisy G. Pitre
                      (  /dd/defs/coco.d):00029         * Moved CoCo 3 Window stuff into cc3iodefs
                      (  /dd/defs/coco.d):00030         *
                      (  /dd/defs/coco.d):00031         *          2012/02/24  Boisy G. Pitre
                      (  /dd/defs/coco.d):00032         * Consolidated all CoCo-specific defs files into here.
                      (  /dd/defs/coco.d):00033         
                      (  /dd/defs/coco.d):00034                        NAM       CoCoDefs
                      (  /dd/defs/coco.d):00035                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (  /dd/defs/coco.d):00036         
                      (  /dd/defs/coco.d):00037         
                      (  /dd/defs/coco.d):00038         **********************
                      (  /dd/defs/coco.d):00039         * CPU Type Definitions
                      (  /dd/defs/coco.d):00040         *
     0001             (  /dd/defs/coco.d):00041         Color          SET       1
     0002             (  /dd/defs/coco.d):00042         Color3         SET       2
     0002             (  /dd/defs/coco.d):00043         CPUType        SET       Color3
                      (  /dd/defs/coco.d):00044         
                      (  /dd/defs/coco.d):00045         
                      (  /dd/defs/coco.d):00046         ******************************
                      (  /dd/defs/coco.d):00047         * Clock Speed Type Definitions
                      (  /dd/defs/coco.d):00048         *
     0001             (  /dd/defs/coco.d):00049         OneMHz         EQU       1
     0002             (  /dd/defs/coco.d):00050         TwoMHz         EQU       2
     0002             (  /dd/defs/coco.d):00051         CPUSpeed       SET       TwoMHz
                      (  /dd/defs/coco.d):00052         
                      (  /dd/defs/coco.d):00053         
                      (  /dd/defs/coco.d):00054         **********************************
                      (  /dd/defs/coco.d):00055         * Power Line Frequency Definitions
                      (  /dd/defs/coco.d):00056         *
     0001             (  /dd/defs/coco.d):00057         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (  /dd/defs/coco.d):00058         Hz60           EQU       2                   Assemble clock for 60 hz power
     0002             (  /dd/defs/coco.d):00059         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (  /dd/defs/coco.d):00060         
                      (  /dd/defs/coco.d):00061         
                      (  /dd/defs/coco.d):00062         **********************************
                      (  /dd/defs/coco.d):00063         * Ticks per second
                      (  /dd/defs/coco.d):00064         *
     003C             (  /dd/defs/coco.d):00065         TkPerSec       SET       60
                      (  /dd/defs/coco.d):00066         
                      (  /dd/defs/coco.d):00067         
                      (  /dd/defs/coco.d):00068         ******************
                      (  /dd/defs/coco.d):00069         * ACIA type set up
                      (  /dd/defs/coco.d):00070         *
                      (  /dd/defs/coco.d):00071                        ORG       1
0001                  (  /dd/defs/coco.d):00072         ACIA6850       RMB       1                   MC6850 acia.
0002                  (  /dd/defs/coco.d):00073         ACIA6551       RMB       1                   SY6551 acia.
0003                  (  /dd/defs/coco.d):00074         ACIA2661       RMB       1                   SC2661 acia.
     0002             (  /dd/defs/coco.d):00075         ACIATYPE       SET       ACIA6551
                      (  /dd/defs/coco.d):00076         
                      (  /dd/defs/coco.d):00077         
                      (  /dd/defs/coco.d):00078         ****************************************
                      (  /dd/defs/coco.d):00079         * Special character Bit position equates
                      (  /dd/defs/coco.d):00080         *
     0001             (  /dd/defs/coco.d):00081         SHIFTBIT       EQU       %00000001
     0002             (  /dd/defs/coco.d):00082         CNTRLBIT       EQU       %00000010
     0004             (  /dd/defs/coco.d):00083         ALTERBIT       EQU       %00000100
     0008             (  /dd/defs/coco.d):00084         UPBIT          EQU       %00001000
     0010             (  /dd/defs/coco.d):00085         DOWNBIT        EQU       %00010000
     0020             (  /dd/defs/coco.d):00086         LEFTBIT        EQU       %00100000
     0040             (  /dd/defs/coco.d):00087         RIGHTBIT       EQU       %01000000
     0080             (  /dd/defs/coco.d):00088         SPACEBIT       EQU       %10000000
                      (  /dd/defs/coco.d):00089         
                      (  /dd/defs/coco.d):00090         
                      (  /dd/defs/coco.d):00091         ******************
                      (  /dd/defs/coco.d):00092         * Device addresses for miscellaneous hardware
                      (  /dd/defs/coco.d):00093         *
     FF68             (  /dd/defs/coco.d):00094         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (  /dd/defs/coco.d):00095         A.ModP         SET       $FF6C               ModPak Address
     FF40             (  /dd/defs/coco.d):00096         DPort          SET       $FF40               Disk controller base address
     FF7F             (  /dd/defs/coco.d):00097         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (  /dd/defs/coco.d):00098         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (  /dd/defs/coco.d):00099         PIA0Base       EQU       $FF00
     FF20             (  /dd/defs/coco.d):00100         PIA1Base       EQU       $FF20
                      (  /dd/defs/coco.d):00101         
                      (  /dd/defs/coco.d):00102         
                      (  /dd/defs/coco.d):00103         ******************
                      (  /dd/defs/coco.d):00104         * VDG Devices
                      (  /dd/defs/coco.d):00105         *
     FFC0             (  /dd/defs/coco.d):00106         A.TermV        SET       $FFC0               VDG Term
     FFC1             (  /dd/defs/coco.d):00107         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (  /dd/defs/coco.d):00108         A.V2           SET       $FFC2
     FFC3             (  /dd/defs/coco.d):00109         A.V3           SET       $FFC3
     FFC4             (  /dd/defs/coco.d):00110         A.V4           SET       $FFC4
     FFC5             (  /dd/defs/coco.d):00111         A.V5           SET       $FFC5
     FFC6             (  /dd/defs/coco.d):00112         A.V6           SET       $FFC6
     FFC7             (  /dd/defs/coco.d):00113         A.V7           SET       $FFC7
                      (  /dd/defs/coco.d):00114         
                      (  /dd/defs/coco.d):00115         
                      (  /dd/defs/coco.d):00116         
                      (  /dd/defs/coco.d):00117         ********************************
                      (  /dd/defs/coco.d):00118         * Boot defs for NitrOS-9 Level 1
                      (  /dd/defs/coco.d):00119         *
                      (  /dd/defs/coco.d):00120         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00121         * system.
                      (  /dd/defs/coco.d):00122         *
                      (  /dd/defs/coco.d):00123         
                      (  /dd/defs/coco.d):00124         
                      (  /dd/defs/coco.d):00125         ******************************************
                      (  /dd/defs/coco.d):00126         * Boot defs for NitrOS-9 Level 2 and above
                      (  /dd/defs/coco.d):00127         *
                      (  /dd/defs/coco.d):00128         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00129         * system.
                      (  /dd/defs/coco.d):00130         *
     ED00             (  /dd/defs/coco.d):00131         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (  /dd/defs/coco.d):00132         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (  /dd/defs/coco.d):00133         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (  /dd/defs/coco.d):00134         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (  /dd/defs/coco.d):00135         
                      (  /dd/defs/coco.d):00136         
                      (  /dd/defs/coco.d):00137         * On the CoCo, the boot track is all of track 34
                      (  /dd/defs/coco.d):00138         
     0022             (  /dd/defs/coco.d):00139         Bt.Track       EQU       34                  Boot track
     0000             (  /dd/defs/coco.d):00140         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (  /dd/defs/coco.d):00141         
                      (  /dd/defs/coco.d):00142         
     1080             (  /dd/defs/coco.d):00143         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (  /dd/defs/coco.d):00144         
                      (  /dd/defs/coco.d):00145         
                      (  /dd/defs/coco.d):00146         
                      (  /dd/defs/coco.d):00147         *************************************************
                      (  /dd/defs/coco.d):00148         *
                      (  /dd/defs/coco.d):00149         * NitrOS-9 Level 1 Section
                      (  /dd/defs/coco.d):00150         *
                      (  /dd/defs/coco.d):00151         *************************************************
                      (  /dd/defs/coco.d):00152         
                      (  /dd/defs/coco.d):00153         
                      (  /dd/defs/coco.d):00154         
                      (  /dd/defs/coco.d):00155         *************************************************
                      (  /dd/defs/coco.d):00156         *
                      (  /dd/defs/coco.d):00157         * NitrOS-9 Level 2 Section
                      (  /dd/defs/coco.d):00158         *
                      (  /dd/defs/coco.d):00159         *************************************************
                      (  /dd/defs/coco.d):00160         
                      (  /dd/defs/coco.d):00161         ****************************************
                      (  /dd/defs/coco.d):00162         * Dynamic Address Translator Definitions
                      (  /dd/defs/coco.d):00163         *
     0008             (  /dd/defs/coco.d):00164         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (  /dd/defs/coco.d):00165         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (  /dd/defs/coco.d):00166         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (  /dd/defs/coco.d):00167         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (  /dd/defs/coco.d):00168         DAT.Task       EQU       $FF91               Task Register address
     0020             (  /dd/defs/coco.d):00169         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (  /dd/defs/coco.d):00170         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (  /dd/defs/coco.d):00171         DAT.Free       EQU       $333E               Free Block Number
     003F             (  /dd/defs/coco.d):00172         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (  /dd/defs/coco.d):00173         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (  /dd/defs/coco.d):00174         DAT.WrPr       EQU       0                   no write protect
     0000             (  /dd/defs/coco.d):00175         DAT.WrEn       EQU       0                   no write enable
     0000             (  /dd/defs/coco.d):00176         SysTask        EQU       0                   Coco System Task number
     003F             (  /dd/defs/coco.d):00177         IOBlock        EQU       $3F
     003F             (  /dd/defs/coco.d):00178         ROMBlock       EQU       $3F
     007F             (  /dd/defs/coco.d):00179         IOAddr         EQU       $7F
     0001             (  /dd/defs/coco.d):00180         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (  /dd/defs/coco.d):00181         RAMCount       EQU       1                   initial blocks of RAM
     0005             (  /dd/defs/coco.d):00182         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (  /dd/defs/coco.d):00183         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (  /dd/defs/coco.d):00184         ByteType       EQU       2                   chk entire block of RAM
     0001             (  /dd/defs/coco.d):00185         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (  /dd/defs/coco.d):00186         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (  /dd/defs/coco.d):00187         * NOTE: this check assumes any NotRAM with a module will
                      (  /dd/defs/coco.d):00188         *       always start with $87CD in first two bytes of block
     0001             (  /dd/defs/coco.d):00189         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (  /dd/defs/coco.d):00190         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (  /dd/defs/coco.d):00191         LastRAM        EQU       IOBlock             maximum RAM block number
                      (  /dd/defs/coco.d):00192         
                      (  /dd/defs/coco.d):00193         ***************************
                      (  /dd/defs/coco.d):00194         * Color Computer 3 Specific
                      (  /dd/defs/coco.d):00195         *
     0001             (  /dd/defs/coco.d):00196         MappedIO       EQU       true                (Actually False but it works better this way)
                      (  /dd/defs/coco.d):00197         
                      (  /dd/defs/coco.d):00198         ********************
                      (  /dd/defs/coco.d):00199         * Hardware addresses
                      (  /dd/defs/coco.d):00200         *
     FF00             (  /dd/defs/coco.d):00201         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (  /dd/defs/coco.d):00202         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (  /dd/defs/coco.d):00203         BordReg        EQU       $FF9A               Border color register
     FFB0             (  /dd/defs/coco.d):00204         PalAdr         EQU       $FFB0               Palette registers
                      (  /dd/defs/coco.d):00205         
     0007             (  /dd/defs/coco.d):00206         HW.Page        SET       $07                 Device descriptor hardware page
                      (  /dd/defs/coco.d):00207         
                      (  /dd/defs/coco.d):00208         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (  /dd/defs/coco.d):00209         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (  /dd/defs/coco.d):00210         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (  /dd/defs/coco.d):00211         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (  /dd/defs/coco.d):00212         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (  /dd/defs/coco.d):00213         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (  /dd/defs/coco.d):00214         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (  /dd/defs/coco.d):00215         * it will end up with its own block assigned for CPU address space $E000-
                      (  /dd/defs/coco.d):00216         * $FFFF but the top of the address space is unusable by the user process:
                      (  /dd/defs/coco.d):00217         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (  /dd/defs/coco.d):00218         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (  /dd/defs/coco.d):00219         * For the COCO GIME, it's always $3F.
     003F             (  /dd/defs/coco.d):00220         KrnBlk         SET       $3F
                      (  /dd/defs/coco.d):00221         
                      (  /dd/defs/coco.d):00222         
                      ( /dd/defs/deffile):00010                  use   /dd/defs/cocovtio.d
                      (/dd/defs/cocovtio):00001         ********************************************************************
                      (/dd/defs/cocovtio):00002         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00003         *
                      (/dd/defs/cocovtio):00004         * $Id$
                      (/dd/defs/cocovtio):00005         *
                      (/dd/defs/cocovtio):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocovtio):00007         * Comment
                      (/dd/defs/cocovtio):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocovtio):00009         *          2004/07/18  Boisy G. Pitre
                      (/dd/defs/cocovtio):00010         * Started from systype
                      (/dd/defs/cocovtio):00011         
                      (/dd/defs/cocovtio):00012                        NAM       VTIODefs
                      (/dd/defs/cocovtio):00013                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00014         
                      (/dd/defs/cocovtio):00015         * Max size of Get/Put buffer to copy between user and grfdrv. There is room for up to 128, but
                      (/dd/defs/cocovtio):00016         *   we may use some of that for other things. Leaving at OS-9 Level II default (72) for now.
                      (/dd/defs/cocovtio):00017         * May try increasing to higher (maybe 96?) to see if it makes a noticable difference GPLoading
                      (/dd/defs/cocovtio):00018         * fonts, etc. in EOU bootup.
                      (/dd/defs/cocovtio):00019         
     0048             (/dd/defs/cocovtio):00020         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (/dd/defs/cocovtio):00021         
                      (/dd/defs/cocovtio):00022         ****************
                      (/dd/defs/cocovtio):00023         * Window Devices
                      (/dd/defs/cocovtio):00024         *
                      (/dd/defs/cocovtio):00025                        ORG       $FF9F
FF9F                  (/dd/defs/cocovtio):00026         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (/dd/defs/cocovtio):00027         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (/dd/defs/cocovtio):00028         A.W1           RMB       1                   $FFA1
FFA2                  (/dd/defs/cocovtio):00029         A.W2           RMB       1                   $FFA2
FFA3                  (/dd/defs/cocovtio):00030         A.W3           RMB       1                   $FFA3
FFA4                  (/dd/defs/cocovtio):00031         A.W4           RMB       1                   $FFA4
FFA5                  (/dd/defs/cocovtio):00032         A.W5           RMB       1                   $FFA5
FFA6                  (/dd/defs/cocovtio):00033         A.W6           RMB       1                   $FFA6
FFA7                  (/dd/defs/cocovtio):00034         A.W7           RMB       1                   $FFA7
FFA8                  (/dd/defs/cocovtio):00035         A.W8           RMB       1                   $FFA8
FFA9                  (/dd/defs/cocovtio):00036         A.W9           RMB       1                   $FFA9
FFAA                  (/dd/defs/cocovtio):00037         A.W10          RMB       1                   $FFAA
FFAB                  (/dd/defs/cocovtio):00038         A.W11          RMB       1                   $FFAB
FFAC                  (/dd/defs/cocovtio):00039         A.W12          RMB       1                   $FFAC
FFAD                  (/dd/defs/cocovtio):00040         A.W13          RMB       1                   $FFAD
FFAE                  (/dd/defs/cocovtio):00041         A.W14          RMB       1                   $FFAE
FFAF                  (/dd/defs/cocovtio):00042         A.W15          RMB       1                   $FFAF
                      (/dd/defs/cocovtio):00043         
                      (/dd/defs/cocovtio):00044         **********************************
                      (/dd/defs/cocovtio):00045         * Pointer Device Packet Definition
                      (/dd/defs/cocovtio):00046         *
                      (/dd/defs/cocovtio):00047                        ORG       0
0000                  (/dd/defs/cocovtio):00048         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (/dd/defs/cocovtio):00049         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (/dd/defs/cocovtio):00050         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (/dd/defs/cocovtio):00051                        RMB       2                   reserved
0005                  (/dd/defs/cocovtio):00052         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (/dd/defs/cocovtio):00053         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (/dd/defs/cocovtio):00054         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (/dd/defs/cocovtio):00055         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (/dd/defs/cocovtio):00056         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (/dd/defs/cocovtio):00057         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (/dd/defs/cocovtio):00058         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (/dd/defs/cocovtio):00059         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (/dd/defs/cocovtio):00060         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (/dd/defs/cocovtio):00061         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (/dd/defs/cocovtio):00062                        RMB       2                   Reserved
0012                  (/dd/defs/cocovtio):00063         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (/dd/defs/cocovtio):00064         Pt.BDY         RMB       2                   Button down Y value
0016                  (/dd/defs/cocovtio):00065         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (/dd/defs/cocovtio):00066         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (/dd/defs/cocovtio):00067         Pt.AcX         RMB       2                   Actual X Value
001A                  (/dd/defs/cocovtio):00068         Pt.AcY         RMB       2                   Actual Y Value
001C                  (/dd/defs/cocovtio):00069         Pt.WRX         RMB       2                   Window Relative X
001E                  (/dd/defs/cocovtio):00070         Pt.WRY         RMB       2                   Window Relative Y
     0020             (/dd/defs/cocovtio):00071         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (/dd/defs/cocovtio):00072         
                      (/dd/defs/cocovtio):00073         **************************
                      (/dd/defs/cocovtio):00074         * window regions for mouse
                      (/dd/defs/cocovtio):00075         *
     0000             (/dd/defs/cocovtio):00076         WR.Cntnt       EQU       0                   content region
     0001             (/dd/defs/cocovtio):00077         WR.Cntrl       EQU       1                   control region
     0002             (/dd/defs/cocovtio):00078         WR.OfWin       EQU       2                   off window
                      (/dd/defs/cocovtio):00079         
                      (/dd/defs/cocovtio):00080         *************************************
                      (/dd/defs/cocovtio):00081         * Standard system get/put buffer defs
                      (/dd/defs/cocovtio):00082         *
                      (/dd/defs/cocovtio):00083         *
                      (/dd/defs/cocovtio):00084         * system group numbers
                      (/dd/defs/cocovtio):00085         *
                      (/dd/defs/cocovtio):00086                        ORG       200
00C8                  (/dd/defs/cocovtio):00087         Grp.Fnt        RMB       1                   font group
00C9                  (/dd/defs/cocovtio):00088         Grp.Clip       RMB       1                   clipboard group
00CA                  (/dd/defs/cocovtio):00089         Grp.Ptr        RMB       1                   pointer group
00CB                  (/dd/defs/cocovtio):00090         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (/dd/defs/cocovtio):00091         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (/dd/defs/cocovtio):00092         Grp.Pat6       RMB       1                   pattern group 16 color
                      (/dd/defs/cocovtio):00093         *
                      (/dd/defs/cocovtio):00094         * font buffer numbers
                      (/dd/defs/cocovtio):00095         *
                      (/dd/defs/cocovtio):00096                        ORG       1
0001                  (/dd/defs/cocovtio):00097         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (/dd/defs/cocovtio):00098         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (/dd/defs/cocovtio):00099         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (/dd/defs/cocovtio):00100         *
                      (/dd/defs/cocovtio):00101         * pattern buffer numbers
                      (/dd/defs/cocovtio):00102         *
                      (/dd/defs/cocovtio):00103                        ORG       1
0001                  (/dd/defs/cocovtio):00104         Pat.Dot        RMB       1
0002                  (/dd/defs/cocovtio):00105         Pat.Vrt        RMB       1
0003                  (/dd/defs/cocovtio):00106         Pat.Hrz        RMB       1
0004                  (/dd/defs/cocovtio):00107         Pat.XHtc       RMB       1
0005                  (/dd/defs/cocovtio):00108         Pat.LSnt       RMB       1
0006                  (/dd/defs/cocovtio):00109         Pat.RSnt       RMB       1
0007                  (/dd/defs/cocovtio):00110         Pat.SDot       RMB       1
0008                  (/dd/defs/cocovtio):00111         Pat.BDot       RMB       1
                      (/dd/defs/cocovtio):00112         *
                      (/dd/defs/cocovtio):00113         * pointer buffer numbers
                      (/dd/defs/cocovtio):00114         *
                      (/dd/defs/cocovtio):00115                        ORG       1
0001                  (/dd/defs/cocovtio):00116         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (/dd/defs/cocovtio):00117         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (/dd/defs/cocovtio):00118         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (/dd/defs/cocovtio):00119         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (/dd/defs/cocovtio):00120         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (/dd/defs/cocovtio):00121         Ptr.Txt        RMB       1                   Text pointer
0007                  (/dd/defs/cocovtio):00122         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (/dd/defs/cocovtio):00123         
                      (/dd/defs/cocovtio):00124         **********************
                      (/dd/defs/cocovtio):00125         * KeyDrv Entry Points
                      (/dd/defs/cocovtio):00126                        ORG       0
0000                  (/dd/defs/cocovtio):00127         K$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00128         K$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00129         K$FnKey        RMB       3                   get function key states
0009                  (/dd/defs/cocovtio):00130         K$RdKey        RMB       3                   get key states
                      (/dd/defs/cocovtio):00131         
                      (/dd/defs/cocovtio):00132         **********************
                      (/dd/defs/cocovtio):00133         * JoyDrv Entry Points
                      (/dd/defs/cocovtio):00134                        ORG       0
0000                  (/dd/defs/cocovtio):00135         J$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00136         J$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00137         J$MsBtn        RMB       3                   get mouse button states
0009                  (/dd/defs/cocovtio):00138         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (/dd/defs/cocovtio):00139         J$JyBtn        RMB       3                   get joystick button states
000F                  (/dd/defs/cocovtio):00140         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00141         
                      (/dd/defs/cocovtio):00142         **********************
                      (/dd/defs/cocovtio):00143         * SndDrv Entry Points
                      (/dd/defs/cocovtio):00144                        ORG       0
0000                  (/dd/defs/cocovtio):00145         S$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00146         S$GetStt       RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00147         S$SetStt       RMB       3                   joystick termination
0009                  (/dd/defs/cocovtio):00148         S$Term         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00149         
                      (/dd/defs/cocovtio):00150         ********************************
                      (/dd/defs/cocovtio):00151         * Window/Menu Bar Data Structure
                      (/dd/defs/cocovtio):00152         *
                      (/dd/defs/cocovtio):00153         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (/dd/defs/cocovtio):00154         * for use in the high level windowing package.
                      (/dd/defs/cocovtio):00155         *
     000A             (/dd/defs/cocovtio):00156         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (/dd/defs/cocovtio):00157         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (/dd/defs/cocovtio):00158         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (/dd/defs/cocovtio):00159         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (/dd/defs/cocovtio):00160         *
                      (/dd/defs/cocovtio):00161         * Menu Item Descriptor : (MN.ITEMS)
                      (/dd/defs/cocovtio):00162         * one required for each item within the menu
                      (/dd/defs/cocovtio):00163         *
                      (/dd/defs/cocovtio):00164                        ORG       0
0000                  (/dd/defs/cocovtio):00165         MI.TTL         RMB       MXTTLEN             item name
000F                  (/dd/defs/cocovtio):00166         MI.ENBL        RMB       1                   enable flag
0010                  (/dd/defs/cocovtio):00167         MI.RES         RMB       5                   reserved bytes
     0015             (/dd/defs/cocovtio):00168         MI.SIZ         EQU       .                   size of menu item descriptor
                      (/dd/defs/cocovtio):00169         *
                      (/dd/defs/cocovtio):00170         * Menu Descriptor :
                      (/dd/defs/cocovtio):00171         * one for each menu on the manu bar
                      (/dd/defs/cocovtio):00172         * each is pointed to by MB.MPTR below
                      (/dd/defs/cocovtio):00173         *
                      (/dd/defs/cocovtio):00174                        ORG       0
0000                  (/dd/defs/cocovtio):00175         MN.TTL         RMB       MXTTLEN             menu title
000F                  (/dd/defs/cocovtio):00176         MN.ID          RMB       1                   menu id number (1-255)
0010                  (/dd/defs/cocovtio):00177         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (/dd/defs/cocovtio):00178         MN.NITS        RMB       1                   number of items in menu
0012                  (/dd/defs/cocovtio):00179         MN.ENBL        RMB       1                   enable flag
0013                  (/dd/defs/cocovtio):00180         MN.RES         RMB       2                   reserved bytes
0015                  (/dd/defs/cocovtio):00181         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (/dd/defs/cocovtio):00182         MN.SIZ         EQU       .                   size of menu descriptor
                      (/dd/defs/cocovtio):00183         *
                      (/dd/defs/cocovtio):00184         * Window Descriptor:
                      (/dd/defs/cocovtio):00185         * one required for each application in a framed window
                      (/dd/defs/cocovtio):00186         *
                      (/dd/defs/cocovtio):00187                        ORG       0
0000                  (/dd/defs/cocovtio):00188         WN.TTL         RMB       20                  title of window for title bar
0014                  (/dd/defs/cocovtio):00189         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (/dd/defs/cocovtio):00190         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (/dd/defs/cocovtio):00191         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (/dd/defs/cocovtio):00192         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (/dd/defs/cocovtio):00193         WN.RES         RMB       7                   reserved bytes
0020                  (/dd/defs/cocovtio):00194         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (/dd/defs/cocovtio):00195         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (/dd/defs/cocovtio):00196         
                      (/dd/defs/cocovtio):00197         *************************
                      (/dd/defs/cocovtio):00198         * Window Type Definitions
                      (/dd/defs/cocovtio):00199         *
                      (/dd/defs/cocovtio):00200         * To be used in setting up the border of the window in
                      (/dd/defs/cocovtio):00201         * the SS.WnSel SETSTAT
                      (/dd/defs/cocovtio):00202         *
                      (/dd/defs/cocovtio):00203                        ORG       0
0000                  (/dd/defs/cocovtio):00204         WT.NBox        RMB       1                   No Box
0001                  (/dd/defs/cocovtio):00205         WT.FWin        RMB       1                   Framed Window
0002                  (/dd/defs/cocovtio):00206         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (/dd/defs/cocovtio):00207         WT.SBox        RMB       1                   Shadowed Box
0004                  (/dd/defs/cocovtio):00208         WT.DBox        RMB       1                   Double Box
0005                  (/dd/defs/cocovtio):00209         WT.PBox        RMB       1                   Plain Box
                      (/dd/defs/cocovtio):00210         
                      (/dd/defs/cocovtio):00211         *************************************
                      (/dd/defs/cocovtio):00212         * Pre-Defined Menu IDs for the system
                      (/dd/defs/cocovtio):00213         *
                      (/dd/defs/cocovtio):00214                        ORG       1
0001                  (/dd/defs/cocovtio):00215         MId.Mov        RMB       1                   move box
0002                  (/dd/defs/cocovtio):00216         MId.Cls        RMB       1                   close box
0003                  (/dd/defs/cocovtio):00217         MId.Grw        RMB       1                   grow box
0004                  (/dd/defs/cocovtio):00218         MId.SUp        RMB       1                   scroll up
0005                  (/dd/defs/cocovtio):00219         MId.SDn        RMB       1                   scroll down
0006                  (/dd/defs/cocovtio):00220         MId.SRt        RMB       1                   scroll right
0007                  (/dd/defs/cocovtio):00221         MId.SLt        RMB       1                   scroll left
0008                  (/dd/defs/cocovtio):00222         MId.Chr        RMB       1                   character was depressed
                      (/dd/defs/cocovtio):00223                        ORG       20
0014                  (/dd/defs/cocovtio):00224         MId.Tdy        RMB       1                   Tandy menu
0015                  (/dd/defs/cocovtio):00225         MId.Fil        RMB       1                   Files Menu
0016                  (/dd/defs/cocovtio):00226         MId.Edt        RMB       1                   Edit Menu
0017                  (/dd/defs/cocovtio):00227         MId.Sty        RMB       1                   Styles menu
0018                  (/dd/defs/cocovtio):00228         MId.Fnt        RMB       1                   Font menu
                      (/dd/defs/cocovtio):00229         
                      (/dd/defs/cocovtio):00230         
                      (/dd/defs/cocovtio):00231         ******************************************************************************
                      (/dd/defs/cocovtio):00232         ******************************************************************************
                      (/dd/defs/cocovtio):00233         **                                                                          **
                      (/dd/defs/cocovtio):00234         ** NitrOS-9 Windowing system Global data definitions                        **
                      (/dd/defs/cocovtio):00235         **                                                                          **
                      (/dd/defs/cocovtio):00236         ******************************************************************************
                      (/dd/defs/cocovtio):00237         ******************************************************************************
                      (/dd/defs/cocovtio):00238         **                                                                          **
                      (/dd/defs/cocovtio):00239         ** System memory block 0 layout:                                            **
                      (/dd/defs/cocovtio):00240         **                                                                          **
                      (/dd/defs/cocovtio):00241         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (/dd/defs/cocovtio):00242         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (/dd/defs/cocovtio):00243         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (/dd/defs/cocovtio):00244         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (/dd/defs/cocovtio):00245         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (/dd/defs/cocovtio):00246         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (/dd/defs/cocovtio):00247         ** $0010-$001F : unused (User definable)                                    **
                      (/dd/defs/cocovtio):00248         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (/dd/defs/cocovtio):00249         ** $0100-$011F : Task usage table                                           **
                      (/dd/defs/cocovtio):00250         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (/dd/defs/cocovtio):00251         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (/dd/defs/cocovtio):00252         ** $0300-$03FF : system's system call dispatch table                        **
                      (/dd/defs/cocovtio):00253         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (/dd/defs/cocovtio):00254         ** $0500-$05FF : process descriptor pointer table                           **
                      (/dd/defs/cocovtio):00255         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (/dd/defs/cocovtio):00256         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (/dd/defs/cocovtio):00257         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (/dd/defs/cocovtio):00258         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (/dd/defs/cocovtio):00259         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (/dd/defs/cocovtio):00260         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (/dd/defs/cocovtio):00261         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (/dd/defs/cocovtio):00262         ** $1248-$127F : ????  (unused)                                             **
                      (/dd/defs/cocovtio):00263         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (/dd/defs/cocovtio):00264         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (/dd/defs/cocovtio):00265         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (/dd/defs/cocovtio):00266         **                                                                          **
                      (/dd/defs/cocovtio):00267         ******************************************************************************
                      (/dd/defs/cocovtio):00268         ******************************************************************************
                      (/dd/defs/cocovtio):00269         
                      (/dd/defs/cocovtio):00270         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (/dd/defs/cocovtio):00271         MaxLines       EQU       25                  Max. Y coord text value
     0000             (/dd/defs/cocovtio):00272         Meg            SET       false               "true" if 1 or 2 meg machine
                      (/dd/defs/cocovtio):00273         
     0000             (/dd/defs/cocovtio):00274         COMP           EQU       0                   composite monitor
     0001             (/dd/defs/cocovtio):00275         RGB            EQU       1                   RGB Analog monitor 
     0002             (/dd/defs/cocovtio):00276         MONO           EQU       2                   monochrome monitor
                      (/dd/defs/cocovtio):00277         
     0001             (/dd/defs/cocovtio):00278         Monitor        SET       RGB
                      (/dd/defs/cocovtio):00279         
                      (/dd/defs/cocovtio):00280         * Global definitions
     0001             (/dd/defs/cocovtio):00281         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (/dd/defs/cocovtio):00282         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (/dd/defs/cocovtio):00283         CapsLck        EQU       %00000100           Capslock enabled
     0280             (/dd/defs/cocovtio):00284         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00285                      IFEQ      MaxLines-25
     00C6             (/dd/defs/cocovtio):00286         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00287                      ELSE      
0019                  (/dd/defs/cocovtio):00288         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00289                      ENDC      
                      (/dd/defs/cocovtio):00290         
                      (/dd/defs/cocovtio):00291         *****************************************************************************
                      (/dd/defs/cocovtio):00292         * Static memory area for each window (VTIO/TC9IO)
                      (/dd/defs/cocovtio):00293         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (/dd/defs/cocovtio):00294         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (/dd/defs/cocovtio):00295         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (/dd/defs/cocovtio):00296         * May have to have smaller limit for text to gfx screens, as it will run much
                      (/dd/defs/cocovtio):00297         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (/dd/defs/cocovtio):00298         *
                      (/dd/defs/cocovtio):00299         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (/dd/defs/cocovtio):00300         * V.SCF is to be resolved properly in pass 1!!
                      (/dd/defs/cocovtio):00301                        ORG       V.SCF
001D                  (/dd/defs/cocovtio):00302         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (/dd/defs/cocovtio):00303         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (/dd/defs/cocovtio):00304         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (/dd/defs/cocovtio):00305         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (/dd/defs/cocovtio):00306         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (/dd/defs/cocovtio):00307         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (/dd/defs/cocovtio):00308         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (/dd/defs/cocovtio):00309         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (/dd/defs/cocovtio):00310         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (/dd/defs/cocovtio):00311         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (/dd/defs/cocovtio):00312         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (/dd/defs/cocovtio):00313         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (/dd/defs/cocovtio):00314                        RMB       1                   unused                                       $2A
002B                  (/dd/defs/cocovtio):00315         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (/dd/defs/cocovtio):00316         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (/dd/defs/cocovtio):00317         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (/dd/defs/cocovtio):00318         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (/dd/defs/cocovtio):00319         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (/dd/defs/cocovtio):00320         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (/dd/defs/cocovtio):00321         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (/dd/defs/cocovtio):00322         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (/dd/defs/cocovtio):00323         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (/dd/defs/cocovtio):00324         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (/dd/defs/cocovtio):00325         CC3Parm        RMB       128-.               global parameter area
0080                  (/dd/defs/cocovtio):00326         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (/dd/defs/cocovtio):00327         CC3DSiz        EQU       .
                      (/dd/defs/cocovtio):00328         
                      (/dd/defs/cocovtio):00329         *****************************************************************************
                      (/dd/defs/cocovtio):00330         * GrfInt/WindInt global memory area
                      (/dd/defs/cocovtio):00331         * This area sits in system block 0 from $1000 to $10ff
     1000             (/dd/defs/cocovtio):00332         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (/dd/defs/cocovtio):00333                        ORG       0
0000                  (/dd/defs/cocovtio):00334         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (/dd/defs/cocovtio):00335         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (/dd/defs/cocovtio):00336         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (/dd/defs/cocovtio):00337         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (/dd/defs/cocovtio):00338         *g0003    rmb   2          NEW: UNUSED
0005                  (/dd/defs/cocovtio):00339         g0005          RMB       2                   Temp save in Windint RG
0007                  (/dd/defs/cocovtio):00340         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (/dd/defs/cocovtio):00341         G.MonTyp       RMB       1                   monitor type
     000A             (/dd/defs/cocovtio):00342         g000A          EQU       .                   Old label for compatibility
000A                  (/dd/defs/cocovtio):00343         G.CrDvFl       RMB       1                   Are we current device flag (only set when all
                      (/dd/defs/cocovtio):00344         *                           Parms have been moved to Dev Mem)
                      (/dd/defs/cocovtio):00345         *                           0=We are not on our device
                      (/dd/defs/cocovtio):00346         *                           1=We are the current device
                      (/dd/defs/cocovtio):00347         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (/dd/defs/cocovtio):00348         *                            whether or not to update GIME regs themselves
                      (/dd/defs/cocovtio):00349         *                            If not current device, they don't.)
000B                  (/dd/defs/cocovtio):00350         G.WinType      RMB       1                   current device's V.TYPE
000C                  (/dd/defs/cocovtio):00351         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (/dd/defs/cocovtio):00352         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (/dd/defs/cocovtio):00353         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (/dd/defs/cocovtio):00354         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (/dd/defs/cocovtio):00355         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (/dd/defs/cocovtio):00356         G.BelVec       RMB       2                   BELL routine vector
0019                  (/dd/defs/cocovtio):00357         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (/dd/defs/cocovtio):00358         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (/dd/defs/cocovtio):00359         G.BelTnF       RMB       1                   BELL tone flag
001D                  (/dd/defs/cocovtio):00360         g001D          RMB       3
0020                  (/dd/defs/cocovtio):00361         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (/dd/defs/cocovtio):00362         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (/dd/defs/cocovtio):00363         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (/dd/defs/cocovtio):00364         *                           00000010 : VDGInt found
                      (/dd/defs/cocovtio):00365         *                           10000000 : GrfDrv found
0025                  (/dd/defs/cocovtio):00366         g0025          RMB       1
0026                  (/dd/defs/cocovtio):00367         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (/dd/defs/cocovtio):00368         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00369         *CurLght  rmb   1          current keyboard light settings
                      (/dd/defs/cocovtio):00370         *         ELSE  
0027                  (/dd/defs/cocovtio):00371         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (/dd/defs/cocovtio):00372         *         ENDC  
0028                  (/dd/defs/cocovtio):00373         G.LKeyCd       RMB       1                   last keyboard code
0029                  (/dd/defs/cocovtio):00374         G.KyRept       RMB       1                   key repeat counter
                      (/dd/defs/cocovtio):00375         * A secondary 3 key table (same format as g002D below)
002A                  (/dd/defs/cocovtio):00376         G.2Key1        RMB       1                   $2A
002B                  (/dd/defs/cocovtio):00377         G.2Key2        RMB       1                   $2B
002C                  (/dd/defs/cocovtio):00378         G.2Key3        RMB       1
                      (/dd/defs/cocovtio):00379         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (/dd/defs/cocovtio):00380         * than 3 are hit, the last key is overwritten with the very last key down that
                      (/dd/defs/cocovtio):00381         * was checked. Format for all three is the same as the PIA column/row byte @
                      (/dd/defs/cocovtio):00382         * KeyFlag below.
002D                  (/dd/defs/cocovtio):00383         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (/dd/defs/cocovtio):00384         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (/dd/defs/cocovtio):00385         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (/dd/defs/cocovtio):00386         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (/dd/defs/cocovtio):00387         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (/dd/defs/cocovtio):00388         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (/dd/defs/cocovtio):00389         *                           %00000111-Column # (Output, 0-7)
                      (/dd/defs/cocovtio):00390         *                           %00111000-Row # (Input, 0-6)
0033                  (/dd/defs/cocovtio):00391         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (/dd/defs/cocovtio):00392         G.KySns        RMB       1                   key sense byte
0035                  (/dd/defs/cocovtio):00393         G.KySame       RMB       1                   same key flag
0036                  (/dd/defs/cocovtio):00394         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (/dd/defs/cocovtio):00395                        RMB       1
0038                  (/dd/defs/cocovtio):00396         g0038          RMB       1                   grfdrv initialized flag
0039                  (/dd/defs/cocovtio):00397                        RMB       2
003B                  (/dd/defs/cocovtio):00398         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (/dd/defs/cocovtio):00399         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (/dd/defs/cocovtio):00400         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (/dd/defs/cocovtio):00401         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (/dd/defs/cocovtio):00402         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (/dd/defs/cocovtio):00403         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (/dd/defs/cocovtio):00404         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (/dd/defs/cocovtio):00405         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00406         *KeyParm  rmb   1          keyboard command parameter byte
                      (/dd/defs/cocovtio):00407         *         ELSE  
0063                  (/dd/defs/cocovtio):00408         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (/dd/defs/cocovtio):00409         *         ENDC  
0064                  (/dd/defs/cocovtio):00410         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (/dd/defs/cocovtio):00411         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (/dd/defs/cocovtio):00412         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (/dd/defs/cocovtio):00413         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (/dd/defs/cocovtio):00414         G.CoTble       RMB       6                   co-module table ($68)
006E                  (/dd/defs/cocovtio):00415         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (/dd/defs/cocovtio):00416         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (/dd/defs/cocovtio):00417         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (/dd/defs/cocovtio):00418         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (/dd/defs/cocovtio):00419         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (/dd/defs/cocovtio):00420         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (/dd/defs/cocovtio):00421         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (/dd/defs/cocovtio):00422         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (/dd/defs/cocovtio):00423         g00BD          RMB       1                   Current screen type for work window table
00BE                  (/dd/defs/cocovtio):00424         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (/dd/defs/cocovtio):00425         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (/dd/defs/cocovtio):00426         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (/dd/defs/cocovtio):00427         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (/dd/defs/cocovtio):00428         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (/dd/defs/cocovtio):00429         G.MsSig        RMB       1                   mouse signal flag
00C7                  (/dd/defs/cocovtio):00430         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (/dd/defs/cocovtio):00431         g00D7          RMB       9
00E0                  (/dd/defs/cocovtio):00432         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (/dd/defs/cocovtio):00433         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (/dd/defs/cocovtio):00434         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (/dd/defs/cocovtio):00435         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (/dd/defs/cocovtio):00436         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (/dd/defs/cocovtio):00437         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (/dd/defs/cocovtio):00438         
                      (/dd/defs/cocovtio):00439         *****************************************************************************
                      (/dd/defs/cocovtio):00440         * GrfDrv global memory data definitions
                      (/dd/defs/cocovtio):00441         * This area sits in system block 0 from $1100 to $119E
     1100             (/dd/defs/cocovtio):00442         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (/dd/defs/cocovtio):00443                        ORG       0
0000                  (/dd/defs/cocovtio):00444         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (/dd/defs/cocovtio):00445         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (/dd/defs/cocovtio):00446         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (/dd/defs/cocovtio):00447         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (/dd/defs/cocovtio):00448         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (/dd/defs/cocovtio):00449         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (/dd/defs/cocovtio):00450         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (/dd/defs/cocovtio):00451         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (/dd/defs/cocovtio):00452         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (/dd/defs/cocovtio):00453         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (/dd/defs/cocovtio):00454         *                                              overlay width has been copied
000B                  (/dd/defs/cocovtio):00455         gr000B         RMB       1
000C                  (/dd/defs/cocovtio):00456         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (/dd/defs/cocovtio):00457         gr000E         RMB       1
000F                  (/dd/defs/cocovtio):00458         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (/dd/defs/cocovtio):00459         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (/dd/defs/cocovtio):00460         gr0012         RMB       6
0018                  (/dd/defs/cocovtio):00461         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (/dd/defs/cocovtio):00462         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (/dd/defs/cocovtio):00463         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (/dd/defs/cocovtio):00464         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (/dd/defs/cocovtio):00465         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (/dd/defs/cocovtio):00466         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (/dd/defs/cocovtio):00467         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (/dd/defs/cocovtio):00468         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (/dd/defs/cocovtio):00469         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (/dd/defs/cocovtio):00470         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (/dd/defs/cocovtio):00471         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (/dd/defs/cocovtio):00472         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (/dd/defs/cocovtio):00473         gr002C         RMB       2
002E                  (/dd/defs/cocovtio):00474         gr002E         RMB       2                   current window table entry
0030                  (/dd/defs/cocovtio):00475         gr0030         RMB       2                   current screen table ptr
0032                  (/dd/defs/cocovtio):00476         gr0032         RMB       1                   Last block # we used for buffers
0033                  (/dd/defs/cocovtio):00477         gr0033         RMB       2                   Last offset we used for buffers
0035                  (/dd/defs/cocovtio):00478         gr0035         RMB       1                   group
0036                  (/dd/defs/cocovtio):00479         gr0036         RMB       2                   offset
0038                  (/dd/defs/cocovtio):00480         gr0038         RMB       1                   group returned (new)
0039                  (/dd/defs/cocovtio):00481         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (/dd/defs/cocovtio):00482         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (/dd/defs/cocovtio):00483         gr003B         RMB       2                   end of vars ptr?
003D                  (/dd/defs/cocovtio):00484         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (/dd/defs/cocovtio):00485         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (/dd/defs/cocovtio):00486         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (/dd/defs/cocovtio):00487         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (/dd/defs/cocovtio):00488         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (/dd/defs/cocovtio):00489         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (/dd/defs/cocovtio):00490         gr0047         RMB       2                   'Working' X coordinate
0049                  (/dd/defs/cocovtio):00491         gr0049         RMB       2                   'Working' Y coordinate
004B                  (/dd/defs/cocovtio):00492         gr004B         RMB       2                   current X
004D                  (/dd/defs/cocovtio):00493         gr004D         RMB       2                   current Y
004F                  (/dd/defs/cocovtio):00494         gr004F         RMB       2                   X Size (in bytes)
0051                  (/dd/defs/cocovtio):00495         gr0051         RMB       2                   Y Size (in bytes)
0053                  (/dd/defs/cocovtio):00496         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (/dd/defs/cocovtio):00497         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (/dd/defs/cocovtio):00498         gr0057         RMB       1                   group
0058                  (/dd/defs/cocovtio):00499         gr0058         RMB       1                   buffer #
0059                  (/dd/defs/cocovtio):00500         gr0059         RMB       1                   save switch for overlay
005A                  (/dd/defs/cocovtio):00501         gr005A         RMB       1                   PRN
005B                  (/dd/defs/cocovtio):00502         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (/dd/defs/cocovtio):00503         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (/dd/defs/cocovtio):00504         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (/dd/defs/cocovtio):00505         Gr.STYMk       RMB       1                   STY marker
0061                  (/dd/defs/cocovtio):00506         gr0061         RMB       1                   foreground RGB data
0062                  (/dd/defs/cocovtio):00507         gr0062         RMB       1                   background RGB data
0063                  (/dd/defs/cocovtio):00508         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (/dd/defs/cocovtio):00509         gr0064         RMB       2                   PSet vector
0066                  (/dd/defs/cocovtio):00510         gr0066         RMB       2                   pset offset
0068                  (/dd/defs/cocovtio):00511         gr0068         RMB       2                   LSet vector
006A                  (/dd/defs/cocovtio):00512         gr006A         RMB       2                   max X co-ordinate
006C                  (/dd/defs/cocovtio):00513         gr006C         RMB       2                   max Y co-ordinate
006E                  (/dd/defs/cocovtio):00514         gr006E         RMB       2                   X pixel count
0070                  (/dd/defs/cocovtio):00515         gr0070         RMB       2                   Y pixel count
0072                  (/dd/defs/cocovtio):00516         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (/dd/defs/cocovtio):00517         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (/dd/defs/cocovtio):00518         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (/dd/defs/cocovtio):00519         gr0077         RMB       2                   Vector for right direction FFill
0079                  (/dd/defs/cocovtio):00520         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (/dd/defs/cocovtio):00521         gr007A         RMB       2                   Vector for left direction FFill
007C                  (/dd/defs/cocovtio):00522         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (/dd/defs/cocovtio):00523         gr007D         RMB       1                   buffer block #
007E                  (/dd/defs/cocovtio):00524         gr007E         RMB       2                   buffer offset #
0080                  (/dd/defs/cocovtio):00525         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (/dd/defs/cocovtio):00526         gr0082         RMB       3                   3 byte extended screen address
0085                  (/dd/defs/cocovtio):00527         gr0085         RMB       2                   temp
0087                  (/dd/defs/cocovtio):00528         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (/dd/defs/cocovtio):00529         gr0097         RMB       1                   temp
0098                  (/dd/defs/cocovtio):00530         gr0098         RMB       1                   temp
                      (/dd/defs/cocovtio):00531         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (/dd/defs/cocovtio):00532         gr0099         RMB       2                   temp
                      (/dd/defs/cocovtio):00533         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (/dd/defs/cocovtio):00534         gr009B         RMB       1                   counter temp
009C                  (/dd/defs/cocovtio):00535         gr009C         RMB       1
009D                  (/dd/defs/cocovtio):00536         gr009D         RMB       2                   offset to buffer in block
009F                  (/dd/defs/cocovtio):00537         gr009F         RMB       1
00A0                  (/dd/defs/cocovtio):00538         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (/dd/defs/cocovtio):00539         gr00A1         RMB       2                   vector routine for (changes lots)
                      (/dd/defs/cocovtio):00540         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (/dd/defs/cocovtio):00541         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (/dd/defs/cocovtio):00542         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (/dd/defs/cocovtio):00543         gr00A7         RMB       2
00A9                  (/dd/defs/cocovtio):00544         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (/dd/defs/cocovtio):00545         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (/dd/defs/cocovtio):00546         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (/dd/defs/cocovtio):00547         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (/dd/defs/cocovtio):00548         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (/dd/defs/cocovtio):00549         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (/dd/defs/cocovtio):00550         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (/dd/defs/cocovtio):00551         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (/dd/defs/cocovtio):00552         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (/dd/defs/cocovtio):00553         gr00B5         RMB       1                   regW for grfdrv
00B6                  (/dd/defs/cocovtio):00554         gr00B6         RMB       1
00B7                  (/dd/defs/cocovtio):00555         gr00B7         RMB       2
00B9                  (/dd/defs/cocovtio):00556         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (/dd/defs/cocovtio):00557         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (/dd/defs/cocovtio):00558         gr00BD         RMB       2                   previously used in grfdrv at $B6
                      (/dd/defs/cocovtio):00559         * EOU Beta 2 & up
00BF                  (/dd/defs/cocovtio):00560         grScrtch       RMB       2                   Scratch var for Grfdrv - use DP instead of stack for
                      (/dd/defs/cocovtio):00561         *                                            anything that does immediate calculations
00C1                  (/dd/defs/cocovtio):00562         gr00BF         RMB       256-.               Reserved for future use
                      (/dd/defs/cocovtio):00563         
                      (/dd/defs/cocovtio):00564         * GPLoad buffer - $1200 in system block    . Currently ends at $1247, and $1248-$127f is unused
     1200             (/dd/defs/cocovtio):00565         GPBuf          EQU       $1200               Usefull address (start of GP buffer copy memory)
0100                  (/dd/defs/cocovtio):00566         GPBufSz        RMB       gb0000              common move buffer for gpload/get/put (72 bytes default)
                      (/dd/defs/cocovtio):00567         
                      (/dd/defs/cocovtio):00568         *****************************************************************************
                      (/dd/defs/cocovtio):00569         * Window table entry structure
                      (/dd/defs/cocovtio):00570         * These tables sit in system block 0 and there is 1 for every window init'd
                      (/dd/defs/cocovtio):00571         * including any overlay windows.
     0020             (/dd/defs/cocovtio):00572         MaxWind        EQU       32                  maximum allowable window tables
     1290             (/dd/defs/cocovtio):00573         WinBase        EQU       $1290               base address to start of window tables
                      (/dd/defs/cocovtio):00574                        ORG       -$10
FFF0                  (/dd/defs/cocovtio):00575         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (/dd/defs/cocovtio):00576         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (/dd/defs/cocovtio):00577         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (/dd/defs/cocovtio):00578         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (/dd/defs/cocovtio):00579         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (/dd/defs/cocovtio):00580         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (/dd/defs/cocovtio):00581         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (/dd/defs/cocovtio):00582         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (/dd/defs/cocovtio):00583         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (/dd/defs/cocovtio):00584         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (/dd/defs/cocovtio):00585         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (/dd/defs/cocovtio):00586         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (/dd/defs/cocovtio):00587         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (/dd/defs/cocovtio):00588         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (/dd/defs/cocovtio):00589         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (/dd/defs/cocovtio):00590         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (/dd/defs/cocovtio):00591         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (/dd/defs/cocovtio):00592         Wt.Back        RMB       1                   background palette #                         $07
0008                  (/dd/defs/cocovtio):00593         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (/dd/defs/cocovtio):00594         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (/dd/defs/cocovtio):00595         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (/dd/defs/cocovtio):00596         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (/dd/defs/cocovtio):00597         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (/dd/defs/cocovtio):00598         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (/dd/defs/cocovtio):00599         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (/dd/defs/cocovtio):00600         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (/dd/defs/cocovtio):00601         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (/dd/defs/cocovtio):00602         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (/dd/defs/cocovtio):00603         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (/dd/defs/cocovtio):00604         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (/dd/defs/cocovtio):00605         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (/dd/defs/cocovtio):00606         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (/dd/defs/cocovtio):00607         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24/25,0-191/199)          $1D
001F                  (/dd/defs/cocovtio):00608         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (/dd/defs/cocovtio):00609         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (/dd/defs/cocovtio):00610         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (/dd/defs/cocovtio):00611         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (/dd/defs/cocovtio):00612         * NOTE: The following default settings are what the window was initialized
                      (/dd/defs/cocovtio):00613         *       with, and thus are the MAXIMUM start/size the window can handle
                      (/dd/defs/cocovtio):00614         *       until it is restarted (DWEnd & DWSet)
                      (/dd/defs/cocovtio):00615         *       They also appear to be used in WindInt to determine the coords &
                      (/dd/defs/cocovtio):00616         *       sizes for control+content regions
0026                  (/dd/defs/cocovtio):00617         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (/dd/defs/cocovtio):00618         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (/dd/defs/cocovtio):00619         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (/dd/defs/cocovtio):00620         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (/dd/defs/cocovtio):00621         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (/dd/defs/cocovtio):00622         Wt.Siz         EQU       .+$10
                      (/dd/defs/cocovtio):00623         
                      (/dd/defs/cocovtio):00624         *****************************************************************************
                      (/dd/defs/cocovtio):00625         * Screen table entrys
                      (/dd/defs/cocovtio):00626         * These tables sit in system block 0 base=$1A80
                      (/dd/defs/cocovtio):00627         
     0010             (/dd/defs/cocovtio):00628         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (/dd/defs/cocovtio):00629         STblBse        EQU       $1A80               base address of screen tables
                      (/dd/defs/cocovtio):00630                        ORG       0
0000                  (/dd/defs/cocovtio):00631         St.Sty         RMB       1                   Screen type                         $00
0001                  (/dd/defs/cocovtio):00632         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (/dd/defs/cocovtio):00633         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (/dd/defs/cocovtio):00634         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (/dd/defs/cocovtio):00635         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (/dd/defs/cocovtio):00636         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (/dd/defs/cocovtio):00637         St.Back        RMB       1                   Background palette register #       $07
0008                  (/dd/defs/cocovtio):00638         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (/dd/defs/cocovtio):00639         St.Res         RMB       7                   UNUSED???                           $09
                      (/dd/defs/cocovtio):00640         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (/dd/defs/cocovtio):00641         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (/dd/defs/cocovtio):00642         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (/dd/defs/cocovtio):00643         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
                      (/dd/defs/cocovtio):00644         * Other possibilities: Offset into screen to display (if we enable screens taller than
                      (/dd/defs/cocovtio):00645         *   a single screen), etc.
0010                  (/dd/defs/cocovtio):00646         St.Pals        RMB       16                  Palette register contents           $10
     0020             (/dd/defs/cocovtio):00647         St.Siz         EQU       .
                      (/dd/defs/cocovtio):00648         
                      (/dd/defs/cocovtio):00649         *****************************************************************************
                      (/dd/defs/cocovtio):00650         * Graphics buffer tables
                      (/dd/defs/cocovtio):00651         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (/dd/defs/cocovtio):00652         * data.
                      (/dd/defs/cocovtio):00653                        ORG       0
0000                  (/dd/defs/cocovtio):00654         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (/dd/defs/cocovtio):00655         Grf.Off        RMB       2                   back block header offset            $01
0003                  (/dd/defs/cocovtio):00656         Grf.Grp        RMB       1                   group #                             $03
0004                  (/dd/defs/cocovtio):00657         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (/dd/defs/cocovtio):00658         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (/dd/defs/cocovtio):00659         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (/dd/defs/cocovtio):00660         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (/dd/defs/cocovtio):00661         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (/dd/defs/cocovtio):00662         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (/dd/defs/cocovtio):00663         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (/dd/defs/cocovtio):00664         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (/dd/defs/cocovtio):00665         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (/dd/defs/cocovtio):00666         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (/dd/defs/cocovtio):00667         Grf.Siz        EQU       .                   $20
                      (/dd/defs/cocovtio):00668         
                      (/dd/defs/cocovtio):00669         *****************************************************************************
                      (/dd/defs/cocovtio):00670         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (/dd/defs/cocovtio):00671         * $1075-$0176
                      (/dd/defs/cocovtio):00672         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (/dd/defs/cocovtio):00673                        ORG       0
0000                  (/dd/defs/cocovtio):00674         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (/dd/defs/cocovtio):00675         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (/dd/defs/cocovtio):00676         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (/dd/defs/cocovtio):00677         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (/dd/defs/cocovtio):00678         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (/dd/defs/cocovtio):00679         Gt.BClr        RMB       1                   Background color                               $08
0009                  (/dd/defs/cocovtio):00680         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (/dd/defs/cocovtio):00681         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (/dd/defs/cocovtio):00682         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (/dd/defs/cocovtio):00683         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (/dd/defs/cocovtio):00684         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (/dd/defs/cocovtio):00685         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (/dd/defs/cocovtio):00686         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (/dd/defs/cocovtio):00687         GTabSz         EQU       .
                      (/dd/defs/cocovtio):00688         
                      (/dd/defs/cocovtio):00689         *****************************************************************************
                      (/dd/defs/cocovtio):00690         * This table is located in the graphics table memory and is offset from
                      (/dd/defs/cocovtio):00691         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (/dd/defs/cocovtio):00692         * WindInt.
                      (/dd/defs/cocovtio):00693         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (/dd/defs/cocovtio):00694         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (/dd/defs/cocovtio):00695         *  COMBINATION EVERY TIME
                      (/dd/defs/cocovtio):00696                        ORG       $0240
0240                  (/dd/defs/cocovtio):00697                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (/dd/defs/cocovtio):00698                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (/dd/defs/cocovtio):00699                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (/dd/defs/cocovtio):00700                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (/dd/defs/cocovtio):00701         
                      (/dd/defs/cocovtio):00702         *****************************************************************************
                      (/dd/defs/cocovtio):00703         * WindInt menu handling table entry definition
                      (/dd/defs/cocovtio):00704                        ORG       0
0000                  (/dd/defs/cocovtio):00705         MnuXNum        RMB       1                   menu #
0001                  (/dd/defs/cocovtio):00706         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (/dd/defs/cocovtio):00707         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (/dd/defs/cocovtio):00708                        RMB       1                   unused?
     0004             (/dd/defs/cocovtio):00709         MnuHSiz        EQU       .
                      (/dd/defs/cocovtio):00710         
                      (/dd/defs/cocovtio):00711         *****************************************************************************
                      (/dd/defs/cocovtio):00712         * Character binary switches
     0080             (/dd/defs/cocovtio):00713         Blink          EQU       %10000000           Blink characters (hardware text only)
     0080             (/dd/defs/cocovtio):00714         TChr           EQU       %10000000           transparent characters (both currently)
     0040             (/dd/defs/cocovtio):00715         Under          EQU       %01000000           underline characters (both)
     0020             (/dd/defs/cocovtio):00716         Bold           EQU       %00100000           bold characters (gfx only, maybe txt with color changes?)
     0010             (/dd/defs/cocovtio):00717         Prop           EQU       %00010000           proportional spacing of characters (gfx only)
     0008             (/dd/defs/cocovtio):00718         Scale          EQU       %00001000           automatic window scaling (gfx only)
     0004             (/dd/defs/cocovtio):00719         Invers         EQU       %00000100           inverse characters (both)
     0002             (/dd/defs/cocovtio):00720         NoCurs         EQU       %00000010           no cursor display (both)
     0001             (/dd/defs/cocovtio):00721         Protect        EQU       %00000001           device window protection (both)
                      (/dd/defs/cocovtio):00722         
                      (/dd/defs/cocovtio):00723         *****************************************************************************
                      (/dd/defs/cocovtio):00724         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (/dd/defs/cocovtio):00725         Current        EQU       $ff                 Current screen
                      (/dd/defs/cocovtio):00726         *         equ   1          640x200x2
                      (/dd/defs/cocovtio):00727         *         equ   2          320x200x4
                      (/dd/defs/cocovtio):00728         *         equ   3          640x200x4
                      (/dd/defs/cocovtio):00729         *         equ   4          320x200x16
                      (/dd/defs/cocovtio):00730         *         equ   $85        80 column text
                      (/dd/defs/cocovtio):00731         *         equ   $86        40 column text
                      (/dd/defs/cocovtio):00732         
                      (/dd/defs/cocovtio):00733         *************************************
                      (/dd/defs/cocovtio):00734         * Window default palette color codes
                      (/dd/defs/cocovtio):00735         *
                      (/dd/defs/cocovtio):00736                        ORG       0
0000                  (/dd/defs/cocovtio):00737         White.         RMB       1
0001                  (/dd/defs/cocovtio):00738         Blue.          RMB       1
0002                  (/dd/defs/cocovtio):00739         Black.         RMB       1
0003                  (/dd/defs/cocovtio):00740         Green.         RMB       1
0004                  (/dd/defs/cocovtio):00741         Red.           RMB       1
0005                  (/dd/defs/cocovtio):00742         Yellow.        RMB       1
0006                  (/dd/defs/cocovtio):00743         Magenta.       RMB       1
0007                  (/dd/defs/cocovtio):00744         Cyan.          RMB       1
                      (/dd/defs/cocovtio):00745         
                      ( /dd/defs/deffile):00011                  use   /dd/defs/cocosdc.d
                      (/dd/defs/cocosdc.):00001         ********************************************************************
                      (/dd/defs/cocosdc.):00002         * cocosdc.d - CoCo SDC definitions
                      (/dd/defs/cocosdc.):00003         *
                      (/dd/defs/cocosdc.):00004         * $Id$
                      (/dd/defs/cocosdc.):00005         *
                      (/dd/defs/cocosdc.):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocosdc.):00007         * Comment
                      (/dd/defs/cocosdc.):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocosdc.):00009         *          2014/05/02  Boisy G. Pitre
                      (/dd/defs/cocosdc.):00010         * Created
                      (/dd/defs/cocosdc.):00011         
                      (/dd/defs/cocosdc.):00012         
     FF4A             (/dd/defs/cocosdc.):00013         SDAddr         SET       $FF4A
                      (/dd/defs/cocosdc.):00014         
                      ( /dd/defs/deffile):00012                  use   /dd/defs/vdgdefs
                      ( /dd/defs/vdgdefs):00001                        IFNE      VDGDEFS-1
                      ( /dd/defs/vdgdefs):00002         
     0001             ( /dd/defs/vdgdefs):00003         VDGDEFS        SET       1
                      ( /dd/defs/vdgdefs):00004         
                      ( /dd/defs/vdgdefs):00005         ********************************************************************
                      ( /dd/defs/vdgdefs):00006         * VDGDefs - VDG Interface Definititions
                      ( /dd/defs/vdgdefs):00007         *
                      ( /dd/defs/vdgdefs):00008         * $Id$
                      ( /dd/defs/vdgdefs):00009         *
                      ( /dd/defs/vdgdefs):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      ( /dd/defs/vdgdefs):00011         * Comment
                      ( /dd/defs/vdgdefs):00012         * ------------------------------------------------------------------
                      ( /dd/defs/vdgdefs):00013         *          1991/05/07  Alan DeKok
                      ( /dd/defs/vdgdefs):00014         * Wrote original from VDGInt source.
                      ( /dd/defs/vdgdefs):00015         
                      ( /dd/defs/vdgdefs):00016                        NAM       VDGDefs
                      ( /dd/defs/vdgdefs):00017                        TTL       VDG Interface Definitions
                      ( /dd/defs/vdgdefs):00018         
                      ( /dd/defs/vdgdefs):00019         * Notes:
                      ( /dd/defs/vdgdefs):00020         *
                      ( /dd/defs/vdgdefs):00021         * All offsets from 'U' (address of device memory area)
                      ( /dd/defs/vdgdefs):00022         * (see p. 6-9, technical reference: U=start of driver data memory
                      ( /dd/defs/vdgdefs):00023         * NOTE: There is LOTS of stuff which is only used once, and some which
                      ( /dd/defs/vdgdefs):00024         * is not needed.  Here's a list of the un-needed, and un-used (other than
                      ( /dd/defs/vdgdefs):00025         * once)
                      ( /dd/defs/vdgdefs):00026         *
                      ( /dd/defs/vdgdefs):00027         * It would probably be benificial to patch VDGint to fix these problems,
                      ( /dd/defs/vdgdefs):00028         * unless anyone else has ideas as to why VDGint is doing things this way.
                      ( /dd/defs/vdgdefs):00029         *
                      ( /dd/defs/vdgdefs):00030         * Un-needed
                      ( /dd/defs/vdgdefs):00031         * VD.EPlt1  - (2) set to VD.NChar, and then read only
                      ( /dd/defs/vdgdefs):00032         * VD.EPlt2  - (2) set to same as VD.EPlt1, and then unused
                      ( /dd/defs/vdgdefs):00033         * VD.Chr1   - (1) set to same as VD.CChar, and then unused
                      ( /dd/defs/vdgdefs):00034         * VD.PlFlg  - (1) initialized to $08, and unused
                      ( /dd/defs/vdgdefs):00035         *
                      ( /dd/defs/vdgdefs):00036         * Un-used
                      ( /dd/defs/vdgdefs):00037         *
                      ( /dd/defs/vdgdefs):00038         * $1D       - (1) end of SCF memory requirements
                      ( /dd/defs/vdgdefs):00039         * VD.Strt1  - (2) CLRed, and then read (LDD) - left as $0000
                      ( /dd/defs/vdgdefs):00040         * $24-$2B   - (8)
                      ( /dd/defs/vdgdefs):00041         * $33-$34   - (2)
                      ( /dd/defs/vdgdefs):00042         * $7E-$FF   - (130)
                      ( /dd/defs/vdgdefs):00043         *
                      ( /dd/defs/vdgdefs):00044         * Total of 22 (150 in whole page) bytes unneeded or unused.
                      ( /dd/defs/vdgdefs):00045         
                      ( /dd/defs/vdgdefs):00046                        ORG       $1E
001E                  ( /dd/defs/vdgdefs):00047         VD.Start       RMB       1                   start of VD.XXXX data: number of VDG screens in use
001F                  ( /dd/defs/vdgdefs):00048         VD.Strt1       RMB       2                   (2) and another start
0021                  ( /dd/defs/vdgdefs):00049         VD.Caps        RMB       2                   caps lock info: $00=lower $FF=upper
0023                  ( /dd/defs/vdgdefs):00050         VD.DFlag       RMB       1                   0=current screen is valid, $01-$FF = update video
                      ( /dd/defs/vdgdefs):00051         * $24-$2B unused
0024                  ( /dd/defs/vdgdefs):00052                        RMB       8
002C                  ( /dd/defs/vdgdefs):00053         VD.NGChr       RMB       1                   number of additional characters to get
002D                  ( /dd/defs/vdgdefs):00054         VD.RTAdd       RMB       2                   (2) return address after getting characters
002F                  ( /dd/defs/vdgdefs):00055         VD.EPlt1       RMB       2                   (2) pointer to where to put next character
0031                  ( /dd/defs/vdgdefs):00056         VD.EPlt2       RMB       2                   (2) as above.
                      ( /dd/defs/vdgdefs):00057         * $33-$34 unused
0033                  ( /dd/defs/vdgdefs):00058                        RMB       2
0035                  ( /dd/defs/vdgdefs):00059         VD.CFlag       RMB       1                   true lowercase flag $10=true, $00=false
0036                  ( /dd/defs/vdgdefs):00060         VD.CFlg1       RMB       1                   VDG display code values
0037                  ( /dd/defs/vdgdefs):00061         VD.DGBuf       RMB       1                   number of currently displayed buffer
0038                  ( /dd/defs/vdgdefs):00062         VD.ScrnA       RMB       2                   (2) screen start address in system memory
003A                  ( /dd/defs/vdgdefs):00063         VD.ScrnE       RMB       2                   (2) address of end of screen
003C                  ( /dd/defs/vdgdefs):00064         VD.CrsrA       RMB       1                   (2) cursor address
003D                  ( /dd/defs/vdgdefs):00065         VD.CrsAL       RMB       1                   cursor address low
003E                  ( /dd/defs/vdgdefs):00066         VD.CChar       RMB       1                   value of character under cursor
003F                  ( /dd/defs/vdgdefs):00067         VD.Mode        RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0040                  ( /dd/defs/vdgdefs):00068         VD.Chr1        RMB       1                   same as under cursor character
0041                  ( /dd/defs/vdgdefs):00069         VD.CColr       RMB       1                   cursor color
0042                  ( /dd/defs/vdgdefs):00070         VD.Col         RMB       1                   number of columns for this screen
0043                  ( /dd/defs/vdgdefs):00071         VD.Row         RMB       1                   number of rows
0044                  ( /dd/defs/vdgdefs):00072         VD.TFlg1       RMB       1                   see WRITE ($0E)
0045                  ( /dd/defs/vdgdefs):00073         VD.Alpha       RMB       1                   0 when in alpha mode
0046                  ( /dd/defs/vdgdefs):00074         VD.Rdy         RMB       1                   device ready (see SS.DStat 0=not ready)
0047                  ( /dd/defs/vdgdefs):00075         VD.SBAdd       RMB       2                   (2) address of block screen is in
0049                  ( /dd/defs/vdgdefs):00076         VD.Blk         RMB       1                   Block number of screen
004A                  ( /dd/defs/vdgdefs):00077         VD.GBuff       RMB       1                   allocation for graphics buffers (block#)
004B                  ( /dd/defs/vdgdefs):00078         VD.AGBuf       RMB       2                   (2) additional graphics buffer
004D                  ( /dd/defs/vdgdefs):00079         VD.HiRes       RMB       1                   hi-res screen table (block value)
004E                  ( /dd/defs/vdgdefs):00080         VD.NBlk        RMB       1                   number of blocks in this screen
004F                  ( /dd/defs/vdgdefs):00081         VD.SType       RMB       1                   screen type -4
0050                  ( /dd/defs/vdgdefs):00082         VD.HR2         RMB       3                   (3) for screen number 2
0053                  ( /dd/defs/vdgdefs):00083         VD.HR3         RMB       3                   (3) for screen 3 (same 3 bytes as above)
0056                  ( /dd/defs/vdgdefs):00084         VD.FFMem       RMB       2                   (2) bottom of stack for flood fill
0058                  ( /dd/defs/vdgdefs):00085         VD.FFSPt       RMB       2                   (2) flood fill stack pointer
005A                  ( /dd/defs/vdgdefs):00086         VD.FFSTp       RMB       2                   (2) flood fill stack top pointer
005C                  ( /dd/defs/vdgdefs):00087         VD.FF6         RMB       1                   flood fill flag
005D                  ( /dd/defs/vdgdefs):00088         VD.MTabl       RMB       2                   (2) address of mask table for pixels in byte
005F                  ( /dd/defs/vdgdefs):00089         VD.PixBt       RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0060                  ( /dd/defs/vdgdefs):00090         VD.GCrsX       RMB       1                   graphics cursor X value
0061                  ( /dd/defs/vdgdefs):00091         VD.GCrsY       RMB       1                   graphics cursor Y
0062                  ( /dd/defs/vdgdefs):00092         VD.Msk1        RMB       1                   mask byte 1
0063                  ( /dd/defs/vdgdefs):00093         VD.Msk2        RMB       1                   mask byte 2 (00,55,AA,FF)
0064                  ( /dd/defs/vdgdefs):00094         VD.MCol        RMB       1                   color? (C003,8001)
0065                  ( /dd/defs/vdgdefs):00095         VD.MCol2       RMB       1                   color
0066                  ( /dd/defs/vdgdefs):00096         VD.PMask       RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0067                  ( /dd/defs/vdgdefs):00097         VD.FF1         RMB       1                   data for flood fill
0068                  ( /dd/defs/vdgdefs):00098         VD.FF2         RMB       1                   data for flood fill
0069                  ( /dd/defs/vdgdefs):00099         VD.FFMsk       RMB       1                   flood fill mask
006A                  ( /dd/defs/vdgdefs):00100         VD.FFFlg       RMB       1                   flood fill flag
006B                  ( /dd/defs/vdgdefs):00101         VD.Palet       RMB       16                  (16) current palette values
007B                  ( /dd/defs/vdgdefs):00102         VD.PlFlg       RMB       1                   initialized to $08 by L00DB, and then unused!
007C                  ( /dd/defs/vdgdefs):00103         VD.NChar       RMB       1                   character to process
007D                  ( /dd/defs/vdgdefs):00104         VD.NChr2       RMB       1                   and the next one
                      ( /dd/defs/vdgdefs):00105         
                      ( /dd/defs/vdgdefs):00106         * and RMB until we get 256 bytes reserved
                      ( /dd/defs/vdgdefs):00107         
                      ( /dd/defs/vdgdefs):00108                        ENDC      
                      ( /dd/defs/vdgdefs):00109         
                      (  cowin_beta5.asm):00056                  endc
                      (  cowin_beta5.asm):00057           
     00C1             (  cowin_beta5.asm):00058         tylg     set   Systm+Objct
     0080             (  cowin_beta5.asm):00059         atrv     set   ReEnt+rev
     0000             (  cowin_beta5.asm):00060         rev      set   $00
     0002             (  cowin_beta5.asm):00061         edition  equ   2
                      (  cowin_beta5.asm):00062         
                      (  cowin_beta5.asm):00063         * Color table for 3D look stuff & others
                      (  cowin_beta5.asm):00064         * This should now match VIEW's color table (darkest to lightest for predictable
                      (  cowin_beta5.asm):00065         * brightness). Any color scheme following that rule shouldn't look bad.
                      (  cowin_beta5.asm):00066         * NOTE: CURRENTLY WCOLOR1/2 ARE REVERSED, LABEL WISE. SHOULD FIX THESE AND THE ENTRIES THAT REFER
                      (  cowin_beta5.asm):00067         *  TO THEM SO IT IS MORE CLEAR.
     0000             (  cowin_beta5.asm):00068         WColor0  equ   0          black
     0002             (  cowin_beta5.asm):00069         WColor1  equ   2          dark grey (was lite grey)
     0001             (  cowin_beta5.asm):00070         WColor2  equ   1          light grey (dark grey)
     0003             (  cowin_beta5.asm):00071         WColor3  equ   3          (white)
                      (  cowin_beta5.asm):00072         
0000 87CD1F68000DC180 (  cowin_beta5.asm):00073                  mod   eom,name,tylg,atrv,entry,size
     8E03130000
     0000             (  cowin_beta5.asm):00074         size     equ   .
                      (  cowin_beta5.asm):00075         
     000D             (  cowin_beta5.asm):00076         name     equ   *
                      (  cowin_beta5.asm):00077                IFEQ  CoGrf-1
                      (  cowin_beta5.asm):00078                  fcs   /CoGrf/
                      (  cowin_beta5.asm):00079                ELSE
000D 436F5769EE       (  cowin_beta5.asm):00080                  fcs   /CoWin/
                      (  cowin_beta5.asm):00081                ENDC
0012 02               (  cowin_beta5.asm):00082                  fcb   edition
                      (  cowin_beta5.asm):00083         
                      (  cowin_beta5.asm):00084         ****************************
                      (  cowin_beta5.asm):00085         * Escape code parameter vector table
                      (  cowin_beta5.asm):00086         * Format: Byte 1  : Length of parameters required (in bytes)
                      (  cowin_beta5.asm):00087         *         Byte 2  : Internal function code for GrfDrv
                      (  cowin_beta5.asm):00088         *         Byte 3-4: Vector offset of routine from Byte 1
                      (  cowin_beta5.asm):00089         
0013 0704             (  cowin_beta5.asm):00090         L0027    fcb   7,$04          DWSet
0015 03E2             (  cowin_beta5.asm):00091                  fdb   DWSet-*+2
0017 0010             (  cowin_beta5.asm):00092                  fcb   0,$10          Select
0019 058A             (  cowin_beta5.asm):00093                  fdb   Select-*+2
001B 070A             (  cowin_beta5.asm):00094                  fcb   7,$0A          OWSet
001D 04DE             (  cowin_beta5.asm):00095                  fdb   OWSet-*+2
001F 000C             (  cowin_beta5.asm):00096                  fcb   0,$0C          OWEnd
0021 0536             (  cowin_beta5.asm):00097                  fdb   OWEnd-*+2
0023 0008             (  cowin_beta5.asm):00098                  fcb   0,$08          DWEnd
0025 0480             (  cowin_beta5.asm):00099                  fdb   DWEnd-*+2
0027 040E             (  cowin_beta5.asm):00100                  fcb   4,$0E          CWArea
0029 05D4             (  cowin_beta5.asm):00101                  fdb   CWArea-*+2
002B FF00             (  cowin_beta5.asm):00102                  fcb   $ff,$00        Blank (free for new function)
002D 0000             (  cowin_beta5.asm):00103                  fdb   $0000
002F FF00             (  cowin_beta5.asm):00104                  fcb   $ff,$00        Blank (free for new function)
0031 0000             (  cowin_beta5.asm):00105                  fdb   $0000
0033 FF00             (  cowin_beta5.asm):00106                  fcb   $ff,$00        Blank (free for new function)
0035 0000             (  cowin_beta5.asm):00107                  fdb   $0000
0037 042C             (  cowin_beta5.asm):00108                  fcb   4,$2C          DefGPB
0039 0867             (  cowin_beta5.asm):00109                  fdb   DefGPB-*+2
003B 022E             (  cowin_beta5.asm):00110                  fcb   2,$2E          KillBuf
003D 06CB             (  cowin_beta5.asm):00111                  fdb   KillBuf-*+2
003F 0930             (  cowin_beta5.asm):00112                  fcb   9,$30          GPLoad
0041 08E6             (  cowin_beta5.asm):00113                  fdb   GPLoad-*+2
0043 0A34             (  cowin_beta5.asm):00114                  fcb   10,$34         GetBlk
0045 0890             (  cowin_beta5.asm):00115                  fdb   GetBlk-*+2
0047 0636             (  cowin_beta5.asm):00116                  fcb   6,$36          PutBlk
0049 08A0             (  cowin_beta5.asm):00117                  fdb   PutBlk-*+2
004B 0212             (  cowin_beta5.asm):00118                  fcb   2,$12          PSet
004D 06A8             (  cowin_beta5.asm):00119                  fdb   PSet-*+2
004F 011E             (  cowin_beta5.asm):00120                  fcb   1,$1E          LSet
0051 0644             (  cowin_beta5.asm):00121                  fdb   LSet-*+2
0053 001C             (  cowin_beta5.asm):00122                  fcb   0,$1C          DefPal
0055 0666             (  cowin_beta5.asm):00123                  fdb   DefPal-*+2
0057 0216             (  cowin_beta5.asm):00124                  fcb   2,$16          Palette
0059 0680             (  cowin_beta5.asm):00125                  fdb   Palette-*+2
005B 0120             (  cowin_beta5.asm):00126                  fcb   1,$20          FColor
005D 0652             (  cowin_beta5.asm):00127                  fdb   FColor-*+2
005F 0122             (  cowin_beta5.asm):00128                  fcb   1,$22          BColor
0061 064E             (  cowin_beta5.asm):00129                  fdb   BColor-*+2
0063 0114             (  cowin_beta5.asm):00130                  fcb   1,$14          Border
0065 063C             (  cowin_beta5.asm):00131                  fdb   Border-*+2
0067 0128             (  cowin_beta5.asm):00132                  fcb   1,$28          ScaleSw
0069 1E14             (  cowin_beta5.asm):00133                  fdb   ScaleSw-*+2
006B 0106             (  cowin_beta5.asm):00134                  fcb   1,$06          DWProtSw
006D 1E10             (  cowin_beta5.asm):00135                  fdb   DWProtSw-*+2
006F FF00             (  cowin_beta5.asm):00136                  fcb   $ff,$00        Blank (free for new function)
0071 0000             (  cowin_beta5.asm):00137                  fdb   $0000
0073 FF00             (  cowin_beta5.asm):00138                  fcb   $ff,$00        Blank (free for new function)
0075 0000             (  cowin_beta5.asm):00139                  fdb   $0000
0077 021A             (  cowin_beta5.asm):00140                  fcb   2,$1A          GCSet
0079 05FB             (  cowin_beta5.asm):00141                  fdb   L060C-*+2
007B 0218             (  cowin_beta5.asm):00142                  fcb   2,$18          Font
007D 0678             (  cowin_beta5.asm):00143                  fdb   Font-*+2
007F FF00             (  cowin_beta5.asm):00144                  fcb   $ff,$00        Blank (free for new function)
0081 0000             (  cowin_beta5.asm):00145                  fdb   $0000
0083 0124             (  cowin_beta5.asm):00146                  fcb   1,$24          TCharSw
0085 1DF8             (  cowin_beta5.asm):00147                  fdb   TCharSw-*+2
0087 012A             (  cowin_beta5.asm):00148                  fcb   1,$2A          Bold
0089 1DF4             (  cowin_beta5.asm):00149                  fdb   BoldSw-*+2
008B FF00             (  cowin_beta5.asm):00150                  fcb   $ff,$00        Blank (free for new function)
008D 0000             (  cowin_beta5.asm):00151                  fdb   $0000
008F 0126             (  cowin_beta5.asm):00152                  fcb   1,$26          PropSw
0091 1DEC             (  cowin_beta5.asm):00153                  fdb   PropSw-*+2
0093 0400             (  cowin_beta5.asm):00154                  fcb   4,$00          SetDP
0095 0943             (  cowin_beta5.asm):00155                  fdb   SetDPtr-*+2
0097 0400             (  cowin_beta5.asm):00156                  fcb   4,$00          RSetDPtr
0099 0960             (  cowin_beta5.asm):00157                  fdb   RSetDPtr-*+2
009B 0448             (  cowin_beta5.asm):00158                  fcb   4,$48          Point
009D 0978             (  cowin_beta5.asm):00159                  fdb   Point-*+2
009F 0448             (  cowin_beta5.asm):00160                  fcb   4,$48          RPoint
00A1 0989             (  cowin_beta5.asm):00161                  fdb   RPoint-*+2
00A3 044A             (  cowin_beta5.asm):00162                  fcb   4,$4A          Line
00A5 09A3             (  cowin_beta5.asm):00163                  fdb   Line-*+2
00A7 044A             (  cowin_beta5.asm):00164                  fcb   4,$4A          RLine
00A9 09B9             (  cowin_beta5.asm):00165                  fdb   RLine-*+2
00AB 044A             (  cowin_beta5.asm):00166                  fcb   4,$4A          LineM
00AD 09C7             (  cowin_beta5.asm):00167                  fdb   LineM-*+2
00AF 044A             (  cowin_beta5.asm):00168                  fcb   4,$4A          RLineM
00B1 09E2             (  cowin_beta5.asm):00169                  fdb   RLineM-*+2
00B3 044C             (  cowin_beta5.asm):00170                  fcb   4,$4C          Box
00B5 0993             (  cowin_beta5.asm):00171                  fdb   Box-*+2
00B7 044C             (  cowin_beta5.asm):00172                  fcb   4,$4C          RBox
00B9 09A9             (  cowin_beta5.asm):00173                  fdb   RBox-*+2
00BB 044E             (  cowin_beta5.asm):00174                  fcb   4,$4E          Bar
00BD 098B             (  cowin_beta5.asm):00175                  fdb   Bar-*+2
00BF 044E             (  cowin_beta5.asm):00176                  fcb   4,$4E          RBar
00C1 09A1             (  cowin_beta5.asm):00177                  fdb   RBar-*+2
00C3 FF00             (  cowin_beta5.asm):00178                  fcb   $ff,$00        Blank
00C5 0000             (  cowin_beta5.asm):00179                  fdb   $0000
00C7 FF00             (  cowin_beta5.asm):00180                  fcb   $ff,$00        Blank
00C9 0000             (  cowin_beta5.asm):00181                  fdb   $0000
00CB 0444             (  cowin_beta5.asm):00182                  fcb   4,$44          PutGC
00CD 08F4             (  cowin_beta5.asm):00183                  fdb   PutGC-*+2
00CF 0056             (  cowin_beta5.asm):00184                  fcb   0,$56          FFill
00D1 09DB             (  cowin_beta5.asm):00185                  fdb   FFill-*+2
00D3 0250             (  cowin_beta5.asm):00186                  fcb   2,$50          Circle
00D5 09D7             (  cowin_beta5.asm):00187                  fdb   Circle-*+2
00D7 0452             (  cowin_beta5.asm):00188                  fcb   4,$52          Ellipse
00D9 09D3             (  cowin_beta5.asm):00189                  fdb   Ellipse-*+2
00DB 0C54             (  cowin_beta5.asm):00190                  fcb   12,$54         Arc
00DD 09CF             (  cowin_beta5.asm):00191                  fdb   Arc-*+2
00DF 0250             (  cowin_beta5.asm):00192                  fcb   2,$50          Filled Circle (flag set to differentiate) $53
00E1 09C4             (  cowin_beta5.asm):00193                  fdb   Filled-*+2
00E3 0452             (  cowin_beta5.asm):00194                  fcb   4,$52          Filled Ellipse (flag set to differentiate) $54
00E5 09C0             (  cowin_beta5.asm):00195                  fdb   Filled-*+2
00E7 FF00             (  cowin_beta5.asm):00196                  fcb   $ff,$00        Blank (free for new function)
00E9 0000             (  cowin_beta5.asm):00197                  fdb   $0000
                      (  cowin_beta5.asm):00198         
00EB 2E2E2F434D44532F (  cowin_beta5.asm):00199         L0129    fcc   "../CMDS/"
00F3 6772666472F6     (  cowin_beta5.asm):00200         L0131    fcs   "grfdrv"
                      (  cowin_beta5.asm):00201         
                      (  cowin_beta5.asm):00202         ******************************
                      (  cowin_beta5.asm):00203         *
                      (  cowin_beta5.asm):00204         * Initialization routine
00F9 3460             (  cowin_beta5.asm):00205         Init     pshs  u,y            Preserve regs
00FB FC106E           (  cowin_beta5.asm):00206                  ldd   >WGlobal+G.GrfEnt     Grfdrv there?
00FE 10260114         (  cowin_beta5.asm):00207                  lbne  L01DB          Yes, go on
                      (  cowin_beta5.asm):00208         * Setup window allocation bit map table
                      (  cowin_beta5.asm):00209                IFNE  H6309
                      (  cowin_beta5.asm):00210                  clrd  
                      (  cowin_beta5.asm):00211                  clrw
                      (  cowin_beta5.asm):00212                  stq   >WGlobal+G.WUseTb     Set all 32 windows to be unused
                      (  cowin_beta5.asm):00213                ELSE
0102 4F               (  cowin_beta5.asm):00214                  clra
0103 5F               (  cowin_beta5.asm):00215                  clrb
0104 FD11B5           (  cowin_beta5.asm):00216                  std   >GrfMem+gr00B5
0107 FD1071           (  cowin_beta5.asm):00217                  std   >WGlobal+G.WUseTb
010A FD1073           (  cowin_beta5.asm):00218                  std   >WGlobal+G.WUseTb+2
                      (  cowin_beta5.asm):00219                ENDC
                      (  cowin_beta5.asm):00220         * Get grfdrv setup
010D 308CE3           (  cowin_beta5.asm):00221                  leax  <L0131,pc      Point to grfdrv module name
0110 170122           (  cowin_beta5.asm):00222                  lbsr  L01FB          Does it exist in memory?
0113 2417             (  cowin_beta5.asm):00223                  bcc   L0169          Yes, go on
0115 C1DD             (  cowin_beta5.asm):00224                  cmpb  #E$MNF         Module not found?
0117 2608             (  cowin_beta5.asm):00225                  bne   L0166          No, exit with error
0119 308CCF           (  cowin_beta5.asm):00226         L0159    leax  <L0129,pc      Point to full pathname
011C 170123           (  cowin_beta5.asm):00227                  lbsr  L021F          Load ok?
                      (  cowin_beta5.asm):00228         * Initialize grfdrv
011F 240B             (  cowin_beta5.asm):00229                  bcc   L0169          It's ok, go on
0121 43               (  cowin_beta5.asm):00230         L0166    coma                 Set carry
0122 35E0             (  cowin_beta5.asm):00231         L0167    puls  y,u,pc         Return
                      (  cowin_beta5.asm):00232         
                      (  cowin_beta5.asm):00233         * Default palette color settings
0124 3F090012         (  cowin_beta5.asm):00234         L02F3    fcb   $3f,$09,$00,$12 Colors 0-3 & 8-11 (white,blue,black,green)
0128 24362D1B         (  cowin_beta5.asm):00235         L02F7    fcb   $24,$36,$2d,$1b Colors 4-7 & 12-15 (red, yellow, magenta, cyan)
                      (  cowin_beta5.asm):00236         
                      (  cowin_beta5.asm):00237         * Execute Grfdrv's init routine
                      (  cowin_beta5.asm):00238         * Grfdrv will move itself over to task 1 & setup it's own memory map
012C 8647             (  cowin_beta5.asm):00239         L0169    lda     #'G          debug: signal that we are in GrfDrv Init
012E BD005E           (  cowin_beta5.asm):00240                  jsr     >D.BtBug     ---
                      (  cowin_beta5.asm):00241                IFNE  H6309
                      (  cowin_beta5.asm):00242                  lde   #GrfMem/256    Direct page for GrfDrv
                      (  cowin_beta5.asm):00243                  tfr   e,dp
                      (  cowin_beta5.asm):00244                ELSE
0131 3402             (  cowin_beta5.asm):00245                  pshs  a
0133 8611             (  cowin_beta5.asm):00246                  lda   #GrfMem/256
0135 1F8B             (  cowin_beta5.asm):00247                  tfr   a,dp
0137 3502             (  cowin_beta5.asm):00248                  puls  a
                      (  cowin_beta5.asm):00249                ENDC
0139 CE1100           (  cowin_beta5.asm):00250                  ldu   #GrfMem        Point to GRFDRV global mem
                      (  cowin_beta5.asm):00251         * Code moved from GrfDrv's Init routine.
013C 43               (  cowin_beta5.asm):00252                  coma 
013D B71038           (  cowin_beta5.asm):00253                  sta   >WGlobal+g0038 Put it back
                      (  cowin_beta5.asm):00254         * Initialize window entries
0140 8E1280           (  cowin_beta5.asm):00255                  ldx   #WinBase-$10   Point to start of window tbl entries
                      (  cowin_beta5.asm):00256                IFNE  H6309
                      (  cowin_beta5.asm):00257                  ldq   #$2040FFFF     Max # window/size of each entry/Table init code
0143                  (  cowin_beta5.asm):00258         L0097    stw   ,x             Initialize table pointer
                      (  cowin_beta5.asm):00259                  abx                  Move to next entry
                      (  cowin_beta5.asm):00260                  deca                 Done?
                      (  cowin_beta5.asm):00261                  bne   L0097          No keep going
                      (  cowin_beta5.asm):00262                ELSE
0143 3440             (  cowin_beta5.asm):00263                  pshs  u
0145 CC2040           (  cowin_beta5.asm):00264                  ldd   #$2040
0148 CEFFFF           (  cowin_beta5.asm):00265                  ldu   #$FFFF
014B EF84             (  cowin_beta5.asm):00266         L0097    stu   ,x
014D 3A               (  cowin_beta5.asm):00267                  abx
014E 4A               (  cowin_beta5.asm):00268                  deca
014F 26FA             (  cowin_beta5.asm):00269                  bne   L0097
0151 DFB5             (  cowin_beta5.asm):00270                  stu   <$B5
0153 3540             (  cowin_beta5.asm):00271                  puls  u
                      (  cowin_beta5.asm):00272                ENDC
                      (  cowin_beta5.asm):00273         * Initialize screen tables
0155 8E1A81           (  cowin_beta5.asm):00274                  ldx   #STblBse+1     Point to 2nd byte of scrn tbls - 1st block # used
0158 CC1020           (  cowin_beta5.asm):00275                  ldd   #$1020         smaller than the ldb/lde
                      (  cowin_beta5.asm):00276         * ATD: doing CLR is slightly slower than STA, but this code is executed only
                      (  cowin_beta5.asm):00277         * once, so we optimize for size, not speed
015B 6F84             (  cowin_beta5.asm):00278         L00A9    clr   ,x             Set first block # used (A=0 from L0097 loop)
015D 3A               (  cowin_beta5.asm):00279                  abx                  Move to next entry
015E 4A               (  cowin_beta5.asm):00280                  deca                 Done?
015F 26FA             (  cowin_beta5.asm):00281                  bne   L00A9          No, keep goin
                      (  cowin_beta5.asm):00282         * Initialize DAT image
0161 5F               (  cowin_beta5.asm):00283                  clrb                 Set System bank as first one (a already 0)
0162 DD87             (  cowin_beta5.asm):00284                  std   <$87
                      (  cowin_beta5.asm):00285                IFNE  H6309
                      (  cowin_beta5.asm):00286                  ldq   #$333E333E     Get blank image
                      (  cowin_beta5.asm):00287                  std   <$89           Save it in rest 
                      (  cowin_beta5.asm):00288         * NOTE: IF 16K GRFDRV DONE,CHANGE FOLLOWING LINE TO STD <$8F
                      (  cowin_beta5.asm):00289         * Set entire table as this will be reset below as needed. RG.
                      (  cowin_beta5.asm):00290                  stq   <$8D
                      (  cowin_beta5.asm):00291                  stq   <$91
                      (  cowin_beta5.asm):00292                  std   <$95
                      (  cowin_beta5.asm):00293                ELSE
0164 CC333E           (  cowin_beta5.asm):00294                  ldd   #$333E         Since 6809 version is >8K save some steps
0167 DD89             (  cowin_beta5.asm):00295                  std   <$89
0169 DD8F             (  cowin_beta5.asm):00296                  std   <$8F
016B DD91             (  cowin_beta5.asm):00297                  std   <$91
016D DD93             (  cowin_beta5.asm):00298                  std   <$93
016F DD95             (  cowin_beta5.asm):00299                  std   <$95
                      (  cowin_beta5.asm):00300                ENDC
                      (  cowin_beta5.asm):00301         * New code to find GrfDrv in memory and setup DAT - BN
0171 86C1             (  cowin_beta5.asm):00302                  lda   #Systm+Objct   Get module type
                      (  cowin_beta5.asm):00303                IFNE   H6309
                      (  cowin_beta5.asm):00304                  leax  <L0131,pc      Point to grfdrv name
                      (  cowin_beta5.asm):00305                ELSE
0173 308DFF7C         (  cowin_beta5.asm):00306                  leax  >L0131,pc      Point to grfdrv name
                      (  cowin_beta5.asm):00307                ENDC
0177 10BE004A         (  cowin_beta5.asm):00308                  ldy   >D.SysPrc      Get system process dsc. ptr.
017B 31A840           (  cowin_beta5.asm):00309                  leay  <P$DATImg,y    Point to the DAT image
017E 103F4E           (  cowin_beta5.asm):00310                  os9   F$FModul       Get module directory pointer to grfdrv
                      (  cowin_beta5.asm):00311         * End of new code
0181 259F             (  cowin_beta5.asm):00312                  bcs   L0167
0183 10AEC4           (  cowin_beta5.asm):00313                  ldy   MD$MPDAT,u     get DAT offset
0186 ECA4             (  cowin_beta5.asm):00314                  ldd   ,y
0188 DD8B             (  cowin_beta5.asm):00315                  std   <$8B           save first block
018A EC22             (  cowin_beta5.asm):00316                  ldd   2,y            is it >8K?
018C 2702             (  cowin_beta5.asm):00317                  beq   L0101a
018E DD8D             (  cowin_beta5.asm):00318                  std   <$8D
0190 10BE00A1         (  cowin_beta5.asm):00319         L0101a   ldy   >D.TskIPt      Get task image pointer
0194 8E1187           (  cowin_beta5.asm):00320                  ldx   #GrfMem+gr0087 Point to grfdrv DAT image tbl
0197 AF22             (  cowin_beta5.asm):00321                  stx   2,y            Save it as second task
                      (  cowin_beta5.asm):00322         * ATD: changed from $1C98 for more lee-way on the stack
0199 CC1CB0           (  cowin_beta5.asm):00323                  ldd   #$1CB0         low address for stack: L1DC4, L1DEE
019C DD3B             (  cowin_beta5.asm):00324                  std   <$3B           Save in GRFDRV mem
                      (  cowin_beta5.asm):00325                IFNE  H6309
                      (  cowin_beta5.asm):00326                  clrd                 Get screen table initialization
                      (  cowin_beta5.asm):00327                  clrw                 (CLRQ)
                      (  cowin_beta5.asm):00328                  stq   <$2e           Init current screen table ptr & window entry
                      (  cowin_beta5.asm):00329                  stq   <$3d           Init X/Y coords Gfx cursor was last ON at
                      (  cowin_beta5.asm):00330                ELSE
019E 4F               (  cowin_beta5.asm):00331                  clra
019F 5F               (  cowin_beta5.asm):00332                  clrb
01A0 DD2E             (  cowin_beta5.asm):00333                  std   <$2e
01A2 DD30             (  cowin_beta5.asm):00334                  std   <$30
01A4 DD3D             (  cowin_beta5.asm):00335                  std   <$3d
01A6 DD3F             (  cowin_beta5.asm):00336                  std   <$3f
                      (  cowin_beta5.asm):00337         *         std   <$B5
                      (  cowin_beta5.asm):00338                ENDC
01A8 D732             (  cowin_beta5.asm):00339                  stb   <$32           Clear out block #'s for G/P buffer (Current,
01AA D735             (  cowin_beta5.asm):00340                  stb   <$35            previous)
01AC DD39             (  cowin_beta5.asm):00341                  std   <$39           Text cursor & gfx cursors off
01AE 4F               (  cowin_beta5.asm):00342         L0102    clra
01AF 1F8B             (  cowin_beta5.asm):00343                  tfr   a,dp           Set DP to 0 for Wind/CoGrf, which need it there
01B1 6C47             (  cowin_beta5.asm):00344                  inc   MD$Link+1,u              Increment it's link count
                      (  cowin_beta5.asm):00345         * new code to get GrfDrv exec addr. BN
01B3 CC0000           (  cowin_beta5.asm):00346                  ldd   #0
01B6 8E0009           (  cowin_beta5.asm):00347                  ldx   #M$Exec
01B9 108E118B         (  cowin_beta5.asm):00348                  ldy   #$118B
01BD 103F48           (  cowin_beta5.asm):00349                  os9   F$LDDDXY
01C0 8A40             (  cowin_beta5.asm):00350                  ora   #$40
                      (  cowin_beta5.asm):00351         * end of new code
01C2 FD106E           (  cowin_beta5.asm):00352                  std   >WGlobal+G.GrfEnt     Save it
                      (  cowin_beta5.asm):00353                IFNE  H6309
                      (  cowin_beta5.asm):00354                  oim   #$80,>WGlobal+G.BCFFlg Indicate that Grfdrv has been found?
                      (  cowin_beta5.asm):00355                ELSE
01C5 B61024           (  cowin_beta5.asm):00356                  lda   >WGlobal+G.BCFFlg
01C8 8A80             (  cowin_beta5.asm):00357                  ora   #$80
01CA B71024           (  cowin_beta5.asm):00358                  sta   >WGlobal+G.BCFFlg
                      (  cowin_beta5.asm):00359                ENDC
                      (  cowin_beta5.asm):00360         * Initialize GFX tables.
01CD CC02FF           (  cowin_beta5.asm):00361                  ldd   #$02FF         Get how many bytes we need
01D0 103F28           (  cowin_beta5.asm):00362                  os9   F$SRqMem       Reserve it (note: only $2cf is used so far)
01D3 1025FF4A         (  cowin_beta5.asm):00363                  lbcs   L0166         Can't get memory, exit
01D7 FF1075           (  cowin_beta5.asm):00364                  stu   >WGlobal+G.GfxTbl  Save the pointer to GFX tables (NOT IN GLOBAL!)
                      (  cowin_beta5.asm):00365         * Later, when we make generic fast clear routine vector, have both sets of clears call it
                      (  cowin_beta5.asm):00366         * (both 6809 and 6309) LCB
                      (  cowin_beta5.asm):00367                IFNE  H6309
                      (  cowin_beta5.asm):00368                  tfr   d,w            Move mem size to W
                      (  cowin_beta5.asm):00369                  leay  <Nul0+2,pc     Clear them all to NUL's
                      (  cowin_beta5.asm):00370                  tfm   y,u+
                      (  cowin_beta5.asm):00371                  stw   >WGlobal+G.PrWMPt   initialize previous window table pointer to 0
                      (  cowin_beta5.asm):00372                  ldu   #WGlobal+G.WrkWTb   Point to work window table
01DA                  (  cowin_beta5.asm):00373         Nul0     ldw   #$0040
                      (  cowin_beta5.asm):00374                  tfm   y,u+
                      (  cowin_beta5.asm):00375                ELSE
01DA 6FC0             (  cowin_beta5.asm):00376         ClrLp1   clr   ,u+ 
01DC 830001           (  cowin_beta5.asm):00377                  subd  #$0001
01DF 26F9             (  cowin_beta5.asm):00378                  bne   ClrLp1
01E1 FD1022           (  cowin_beta5.asm):00379                  std   >WGlobal+G.PrWMPt   initialize previous window table pointer to 0
01E4 CE1077           (  cowin_beta5.asm):00380                  ldu   #WGlobal+G.WrkWTb   Point to work window table
01E7 C640             (  cowin_beta5.asm):00381                  ldb   #$0040
01E9 6FC0             (  cowin_beta5.asm):00382         ClrLp2   clr   ,u+
01EB 5A               (  cowin_beta5.asm):00383                  decb
01EC 26FB             (  cowin_beta5.asm):00384                  bne   ClrLp2 
                      (  cowin_beta5.asm):00385                ENDC
                      (  cowin_beta5.asm):00386         * Set default palettes. May be able to use stack blast copy vector here
                      (  cowin_beta5.asm):00387         * (once added). LCB. At the very least, use U as source ptr, and pulu a couple
                      (  cowin_beta5.asm):00388         * of 16 bit registers (d,x) to make it faster/smaller.
01EE 108E10C7         (  cowin_beta5.asm):00389                  ldy   #$10c7         Point to default palette register buffer
01F2 10BF1019         (  cowin_beta5.asm):00390                  sty   >WGlobal+G.DefPal     Save it
                      (  cowin_beta5.asm):00391                IFNE  H6309
                      (  cowin_beta5.asm):00392                  ldq   L02F3,pc       Get 4 of default palettes
                      (  cowin_beta5.asm):00393                  stq   ,y             Save 0-3
                      (  cowin_beta5.asm):00394                  stq   8,y            Save 8-11
                      (  cowin_beta5.asm):00395                  ldq   L02F7,pc       Get other 4 default palettes
                      (  cowin_beta5.asm):00396                  stq   4,y            Save 4-7
                      (  cowin_beta5.asm):00397                  stq   12,y           Save 12-15
                      (  cowin_beta5.asm):00398                ELSE
01F6 EC8DFF30         (  cowin_beta5.asm):00399                  ldd   L02F7+2,pc
01FA ED26             (  cowin_beta5.asm):00400                  std   6,y
01FC ED2E             (  cowin_beta5.asm):00401                  std   14,y
01FE EC8DFF24         (  cowin_beta5.asm):00402                  ldd   L02F3+2,pc
0202 ED22             (  cowin_beta5.asm):00403                  std   2,y
0204 ED2A             (  cowin_beta5.asm):00404                  std   10,y
0206 EC8DFF1A         (  cowin_beta5.asm):00405                  ldd   L02F3,pc
020A EDA4             (  cowin_beta5.asm):00406                  std   ,y
020C ED28             (  cowin_beta5.asm):00407                  std   8,y
020E EC8DFF16         (  cowin_beta5.asm):00408                  ldd   L02F7,pc
0212 ED24             (  cowin_beta5.asm):00409                  std   4,y
0214 ED2C             (  cowin_beta5.asm):00410                  std   12,y
                      (  cowin_beta5.asm):00411                ENDC
0216 EE62             (  cowin_beta5.asm):00412         L01DB    ldu   2,s            Get device static mem
0218 10AEE4           (  cowin_beta5.asm):00413                  ldy   ,s             Get path descriptor pointer
021B 30C838           (  cowin_beta5.asm):00414                  leax  CC3Parm,u      Point to parameters
021E AFC82F           (  cowin_beta5.asm):00415                  stx   V.PrmStrt,u    Save it as param start pointer
0221 AFC831           (  cowin_beta5.asm):00416                  stx   V.NxtPrm,u     Save it as pointer to next param
0224 E6A82E           (  cowin_beta5.asm):00417                  ldb   IT.WND,y       Get window # from device dsc
0227 E7C836           (  cowin_beta5.asm):00418                  stb   V.DWNum,u      Save it as window # in static mem
                      (  cowin_beta5.asm):00419         * If normal window # (0-31), mark as used in window bit table
                      (  cowin_beta5.asm):00420         * If high bit set (like /W's $FF), don't allocate, let SS.Open call use next
                      (  cowin_beta5.asm):00421         *  available one and let it mark which one it found
022A 2B03             (  cowin_beta5.asm):00422                  bmi   L01F4          Skip ahead if /w type (Wildcard)
022C 4F               (  cowin_beta5.asm):00423                  clra                 Clear MSB of window #
022D 8D37             (  cowin_beta5.asm):00424                  bsr   L024A          Allocate window in 32 bit window used table
022F 170606           (  cowin_beta5.asm):00425         L01F4    lbsr  L07B0          Find empty window tbl entry & put in linked list
0232 5F               (  cowin_beta5.asm):00426                  clrb                 No error & return
0233 35E0             (  cowin_beta5.asm):00427                  puls  u,y,pc
                      (  cowin_beta5.asm):00428         
                      (  cowin_beta5.asm):00429         * Link to module
0235 327E             (  cowin_beta5.asm):00430         L01FB    leas  -2,s           Make buffer for current process dsc.
0237 8D19             (  cowin_beta5.asm):00431                  bsr   L0238          Swap to system process
0239 86C1             (  cowin_beta5.asm):00432                  lda   #Systm+Objct   Link module
023B 103F21           (  cowin_beta5.asm):00433                  os9   F$NMLink
023E 8D1E             (  cowin_beta5.asm):00434                  bsr   L0244          Swap back to current process
0240 200D             (  cowin_beta5.asm):00435                  bra   L022C          Return
                      (  cowin_beta5.asm):00436         
                      (  cowin_beta5.asm):00437         * Load a module
0242 327E             (  cowin_beta5.asm):00438         L021F    leas  -2,s           Make a buffer for current process ptr
0244 8D0C             (  cowin_beta5.asm):00439                  bsr   L0238          Switch to system process descriptor
0246 86C1             (  cowin_beta5.asm):00440                  lda   #Systm+Objct   Load module
0248 DE50             (  cowin_beta5.asm):00441                  ldu   <D.Proc
024A 103F22           (  cowin_beta5.asm):00442                  os9   F$NMLoad
024D 8D0F             (  cowin_beta5.asm):00443         L022A    bsr   L0244          Swap back to current process
024F 3262             (  cowin_beta5.asm):00444         L022C    leas  2,s            Purge stack & return
0251 39               (  cowin_beta5.asm):00445                  rts   
                      (  cowin_beta5.asm):00446         
                      (  cowin_beta5.asm):00447         * Switch to system process descriptor
0252 3406             (  cowin_beta5.asm):00448         L0238    pshs  d              Preserve D
0254 DC50             (  cowin_beta5.asm):00449                  ldd   <D.Proc        Get current process dsc. ptr
0256 ED64             (  cowin_beta5.asm):00450                  std   4,s            Preserve on stack
0258 DC4A             (  cowin_beta5.asm):00451                  ldd   <D.SysPrc      Get system process dsc. ptr
025A DD50             (  cowin_beta5.asm):00452                  std   <D.Proc        Make it the current process
025C 3586             (  cowin_beta5.asm):00453                  puls  d,pc           Restore D & return
                      (  cowin_beta5.asm):00454         
                      (  cowin_beta5.asm):00455         * Switch back to current process
025E 3406             (  cowin_beta5.asm):00456         L0244    pshs  d              Preserve D
0260 EC64             (  cowin_beta5.asm):00457                  ldd   4,s            Get current process ptr
0262 DD50             (  cowin_beta5.asm):00458                  std   <D.Proc        Make it the current process
0264 3586             (  cowin_beta5.asm):00459                  puls  d,pc           Restore D & return
                      (  cowin_beta5.asm):00460         
                      (  cowin_beta5.asm):00461         * Allocate a window
                      (  cowin_beta5.asm):00462         * Entry: D=Window # to allocate
0266 3446             (  cowin_beta5.asm):00463         L024A    pshs  d,u            Preserve U
0268 8DE8             (  cowin_beta5.asm):00464                  bsr   L0238          Swap to system process dsc
026A 8D23             (  cowin_beta5.asm):00465                  bsr   L0279          Get pointer to window allocation table
026C 103F13           (  cowin_beta5.asm):00466                  os9   F$AllBit       Allocate it
026F 8DED             (  cowin_beta5.asm):00467         L0255    bsr   L0244          Swap back to current process
0271 3262             (  cowin_beta5.asm):00468                  leas  2,s            Purge stack
0273 35C0             (  cowin_beta5.asm):00469                  puls  u,pc           Restore U & return
                      (  cowin_beta5.asm):00470         
                      (  cowin_beta5.asm):00471         * Search for a free window
                      (  cowin_beta5.asm):00472         * Entry: D=Starting window #
0275 3446             (  cowin_beta5.asm):00473         L025B    pshs  d,u            Preserve U
0277 8DD9             (  cowin_beta5.asm):00474                  bsr   L0238          Swap to system process dsc
0279 8D14             (  cowin_beta5.asm):00475                  bsr   L0279          Get ptr to window map
027B 3304             (  cowin_beta5.asm):00476                  leau  4,x            Point to end of map
027D 103F12           (  cowin_beta5.asm):00477                  os9   F$SchBit       Find it
0280 20ED             (  cowin_beta5.asm):00478                  bra   L0255          Return with it
                      (  cowin_beta5.asm):00479         
                      (  cowin_beta5.asm):00480         * De-Allocate a window
                      (  cowin_beta5.asm):00481         * Entry: D=Window # to delete
0282 2B12             (  cowin_beta5.asm):00482         L026A    bmi   L0282          Illegal window #
0284 3446             (  cowin_beta5.asm):00483                  pshs  d,u            Preserve U
0286 8DCA             (  cowin_beta5.asm):00484                  bsr   L0238          Swap to system process dsc
0288 8D05             (  cowin_beta5.asm):00485                  bsr   L0279          Get ptr to window map
028A 103F14           (  cowin_beta5.asm):00486                  os9   F$DelBit       Delete it & return
028D 20E0             (  cowin_beta5.asm):00487                  bra   L0255
                      (  cowin_beta5.asm):00488         
                      (  cowin_beta5.asm):00489         * Point to window allocation table
028F 8E1071           (  cowin_beta5.asm):00490         L0279    ldx   #WGlobal+G.WUseTb  Point to window bit table
0292 108E0001         (  cowin_beta5.asm):00491                  ldy   #1             Get # windows to allocate/de-allocate
0296 39               (  cowin_beta5.asm):00492         L0282    rts                  Return
                      (  cowin_beta5.asm):00493         
                      (  cowin_beta5.asm):00494         ******************************
                      (  cowin_beta5.asm):00495         * Terminate routine
                      (  cowin_beta5.asm):00496         * Entry: U=Static mem ptr
                      (  cowin_beta5.asm):00497         *        Y=Path dsc. ptr
0297                  (  cowin_beta5.asm):00498         Term
                      (  cowin_beta5.asm):00499         * Next two lines added by Boisy on 08/22/2007
                      (  cowin_beta5.asm):00500         * This test is necessary to prevent a crash in the case that grfdrv cannot be
                      (  cowin_beta5.asm):00501         * loaded.  If grfdrv isn't properly initialized, then the high bit of BCFFlg will
                      (  cowin_beta5.asm):00502         * be clear.  Without this check, the test for Wt.STbl,y to be equal to $FF would fail,
                      (  cowin_beta5.asm):00503         * and a DWEnd would be attempted.  Since grfdrv's init routine sets Wt.STBl,y to $FFFF
                      (  cowin_beta5.asm):00504         * for each window table entry, this wasn't getting done, and the call to DWEnd would
                      (  cowin_beta5.asm):00505         * be vectored to grfdrv, which wasn't to be found!
0297 7D1024           (  cowin_beta5.asm):00506                  tst   WGlobal+G.BCFFlg was Grfdrv found? (hi bit set if so)
029A 2A6F             (  cowin_beta5.asm):00507                  bpl   TermEx         if not, no nothing got initialized, so leave quietly
029C 4F               (  cowin_beta5.asm):00508                  clra                 Get start window # for de-allocate
029D E6C836           (  cowin_beta5.asm):00509                  ldb   V.DWNum,u      Get device window # from static mem
02A0 3460             (  cowin_beta5.asm):00510                  pshs  u,y            Preserve static mem & path dsc. ptrs
02A2 8DDE             (  cowin_beta5.asm):00511                  bsr   L026A          De-allocate it from window map
02A4 17049D           (  cowin_beta5.asm):00512                  lbsr  L06AE          Get window table pointer
02A7 A630             (  cowin_beta5.asm):00513                  lda   Wt.STbl,y      Get MSB of screen table ptr
02A9 81FF             (  cowin_beta5.asm):00514                  cmpa  #$FF           Set?
02AB 2604             (  cowin_beta5.asm):00515                  bne   L0298          Yes, go on
02AD A731             (  cowin_beta5.asm):00516                  sta   Wt.STbl+1,y    Get rid of table ptr
02AF 200D             (  cowin_beta5.asm):00517                  bra   L02A5          Go on
                      (  cowin_beta5.asm):00518         
                      (  cowin_beta5.asm):00519         * Send DWEnd to grfdrv
02B1 10AEE4           (  cowin_beta5.asm):00520         L0298    ldy   ,s             Get path dsc. ptr
02B4 EE62             (  cowin_beta5.asm):00521                  ldu   2,s            Get static mem ptr
02B6 C608             (  cowin_beta5.asm):00522                  ldb   #$08           Get callcode for DWEnd
02B8 E7C837           (  cowin_beta5.asm):00523                  stb   V.CallCde,u    Save it in static mem area
02BB 1701F1           (  cowin_beta5.asm):00524                  lbsr  L0452          Go do it
                      (  cowin_beta5.asm):00525         * Clear out device static memory. 6809 Use Mini stack blast clear vector later
02BE 3560             (  cowin_beta5.asm):00526         L02A5    puls  u,y            Restore static mem & path dsc. ptrs
02C0 30C835           (  cowin_beta5.asm):00527                  leax  V.WinNum,u     Point to window entry #
                      (  cowin_beta5.asm):00528                IFNE  H6309
                      (  cowin_beta5.asm):00529                  leay  <Nul1+2,pc     Point to NUL byte
02C3                  (  cowin_beta5.asm):00530         Nul1     ldw   #CC3DSiz-V.WinNum   Size of block to clear
                      (  cowin_beta5.asm):00531                  tfm   y,x+
                      (  cowin_beta5.asm):00532                ELSE
02C3 CC00CB           (  cowin_beta5.asm):00533                  ldd   #CC3DSiz-V.WinNum
02C6 A780             (  cowin_beta5.asm):00534         Lp4      sta   ,x+
02C8 5A               (  cowin_beta5.asm):00535                  decb
02C9 26FB             (  cowin_beta5.asm):00536                  bne   Lp4
                      (  cowin_beta5.asm):00537                ENDC
02CB 6FC81E           (  cowin_beta5.asm):00538                  clr   V.InfVld,u     Clear 'rest of info valid' flag
                      (  cowin_beta5.asm):00539         * Scan window tables for a valid window
02CE 8E1290           (  cowin_beta5.asm):00540                  ldx   #WinBase       Point to base of window tables
02D1 CC2040           (  cowin_beta5.asm):00541                  ldd   #MaxWind*256+Wt.Siz   # of window tables & Size of each table
     02D4             (  cowin_beta5.asm):00542         L02B9    equ   *
                      (  cowin_beta5.asm):00543                IFNE  H6309
                      (  cowin_beta5.asm):00544                  ldw   Wt.STbl,x      Get screen table ptr
                      (  cowin_beta5.asm):00545                  cmpe  #$FF           MSB indicate unused?
                      (  cowin_beta5.asm):00546                  bne   L02F1          No, exit without error
                      (  cowin_beta5.asm):00547         * Just a guess, but if 2nd byte is $FE with 1st being $FF, could be a flag
                      (  cowin_beta5.asm):00548         *  for that this is a "copy" of a window to do overlapped device windows
                      (  cowin_beta5.asm):00549                  cmpf  #$FF           LSB indicate unused?
                      (  cowin_beta5.asm):00550                  bne   L02F1          No, exit without error 
                      (  cowin_beta5.asm):00551                ELSE
02D4 3406             (  cowin_beta5.asm):00552                  pshs  d
02D6 EC10             (  cowin_beta5.asm):00553                  ldd   Wt.STbl,x
02D8 FD11B5           (  cowin_beta5.asm):00554                  std   >GrfMem+gr00B5
02DB 81FF             (  cowin_beta5.asm):00555                  cmpa  #$FF
02DD 262E             (  cowin_beta5.asm):00556                  bne   L02F1B
02DF C1FF             (  cowin_beta5.asm):00557                  cmpb  #$FF
02E1 262A             (  cowin_beta5.asm):00558                  bne   L02F1B         No, exit without error
02E3 3506             (  cowin_beta5.asm):00559                  puls  d 
                      (  cowin_beta5.asm):00560                ENDC
02E5 3A               (  cowin_beta5.asm):00561                  abx                  Point to next window table
02E6 4A               (  cowin_beta5.asm):00562                  deca                 Decrement counter
02E7 26EB             (  cowin_beta5.asm):00563                  bne   L02B9          Do until all 32 entries are checked
                      (  cowin_beta5.asm):00564         * All windows are unallocated, terminate GRFDRV
02E9 1F12             (  cowin_beta5.asm):00565                  tfr   x,y            Move to proper register again
02EB C602             (  cowin_beta5.asm):00566                  ldb   #$02           get grfdrv terminate code
02ED 17009B           (  cowin_beta5.asm):00567                  lbsr  L0101          go do it
02F0 FC106E           (  cowin_beta5.asm):00568                  ldd   >WGlobal+G.GrfEnt   get grfdrv address
02F3 5F               (  cowin_beta5.asm):00569                  clrb                 Make it even page
02F4 1F03             (  cowin_beta5.asm):00570                  tfr   d,u            Move to proper reg for Unlink
02F6 103F02           (  cowin_beta5.asm):00571                  os9   F$UnLink       Unlink GRFDRV
02F9 2517             (  cowin_beta5.asm):00572                  bcs   L02F2          If error unlinking, exit
                      (  cowin_beta5.asm):00573                IFNE  H6309
                      (  cowin_beta5.asm):00574                  clrd  
                      (  cowin_beta5.asm):00575                ELSE
02FB 4F               (  cowin_beta5.asm):00576                  clra  
02FC 5F               (  cowin_beta5.asm):00577                  clrb  
                      (  cowin_beta5.asm):00578                ENDC
02FD FD106E           (  cowin_beta5.asm):00579                  std   >WGlobal+G.GrfEnt   GRFDRV address to non-existant
0300 FE1075           (  cowin_beta5.asm):00580                  ldu   >WGlobal+G.GfxTbl   Get ptr to gfx tables
0303 CC02FF           (  cowin_beta5.asm):00581                  ldd   #$02FF         Size of graphics tables
0306 103F29           (  cowin_beta5.asm):00582                  os9   F$SRtMem       Return graphics table memory to system
0309 2507             (  cowin_beta5.asm):00583                  bcs   L02F2          If error, exit with it
030B 5F               (  cowin_beta5.asm):00584         TermEx   clrb  
030C 39               (  cowin_beta5.asm):00585                  rts   
                      (  cowin_beta5.asm):00586         
                      (  cowin_beta5.asm):00587                IFEQ  H6309
030D 3506             (  cowin_beta5.asm):00588         L02F1B   puls  d
                      (  cowin_beta5.asm):00589                ENDC
030F 5F               (  cowin_beta5.asm):00590         L02F1    clrb                 No error & return
0310 1F12             (  cowin_beta5.asm):00591                  tfr   x,y            Move to proper register
0312 39               (  cowin_beta5.asm):00592         L02F2    rts   
                      (  cowin_beta5.asm):00593         
                      (  cowin_beta5.asm):00594         ****************************
                      (  cowin_beta5.asm):00595         * Main Entry point from VTIO
                      (  cowin_beta5.asm):00596         * Entry: U=Device memory pointer
                      (  cowin_beta5.asm):00597         *        Y=Path descriptor pointer
                      (  cowin_beta5.asm):00598         
0313 16FDE3           (  cowin_beta5.asm):00599         entry    lbra  Init           Initialization
0316 2011             (  cowin_beta5.asm):00600                  bra   Write          Write
0318 12               (  cowin_beta5.asm):00601                  nop   
0319 16082B           (  cowin_beta5.asm):00602                  lbra  GetStt         Get status
031C 1608EA           (  cowin_beta5.asm):00603                  lbra  SetStt         Set status
031F 16FF75           (  cowin_beta5.asm):00604                  lbra  Term           Terminate
0322 160A25           (  cowin_beta5.asm):00605                  lbra  L0C68          Window special processing
                      (  cowin_beta5.asm):00606         
0325 53               (  cowin_beta5.asm):00607         L0A96    comb                 Set error flag
0326 C6D0             (  cowin_beta5.asm):00608                  ldb   #E$UnkSvc      Unknown service error
0328 39               (  cowin_beta5.asm):00609                  rts   
                      (  cowin_beta5.asm):00610         
                      (  cowin_beta5.asm):00611         ****************************
                      (  cowin_beta5.asm):00612         * Write routine: Optimized for normal text
                      (  cowin_beta5.asm):00613         * Entry: A=Char to write
                      (  cowin_beta5.asm):00614         *        U=Device memory pointer
                      (  cowin_beta5.asm):00615         *        Y=Path descriptor pointer
0329 C63A             (  cowin_beta5.asm):00616         Write    ldb   #$3a           get grfdrv function for Alpha put as default
032B 8120             (  cowin_beta5.asm):00617                  cmpa  #C$SPAC        Space or higher?
032D 2453             (  cowin_beta5.asm):00618                  bhs   L03A1          Yes, do alpha put
032F 811B             (  cowin_beta5.asm):00619                  cmpa  #$1B           Escape code?
0331 263C             (  cowin_beta5.asm):00620                  bne   L0347          No, keep checking
0333 E6D82F           (  cowin_beta5.asm):00621                  ldb   [V.PrmStrt,u]  get first parameter from parameter area
0336 C155             (  cowin_beta5.asm):00622                  cmpb  #$55           Past maximum supported escape code?
0338 22EB             (  cowin_beta5.asm):00623                  bhi   L0A96          Yes, exit with error
033A C020             (  cowin_beta5.asm):00624                  subb  #$20           Adjust it down for table offset
033C 2BE7             (  cowin_beta5.asm):00625                  bmi   L0A96          Below minimum supported code, exit with error
033E 58               (  cowin_beta5.asm):00626                  lslb                 Adjust for 4 bytes/entry
033F 58               (  cowin_beta5.asm):00627                  lslb  
0340 308DFCCF         (  cowin_beta5.asm):00628                  leax  >L0027,pc      Point to ESC code vector table
0344 3A               (  cowin_beta5.asm):00629                  abx                  Point to 4 byte entry
                      (  cowin_beta5.asm):00630                IFNE  H6309
                      (  cowin_beta5.asm):00631                  ldq   ,x             A=# param bytes,B=GRFDRV code,W=vector offset
                      (  cowin_beta5.asm):00632                ELSE
0345 EC02             (  cowin_beta5.asm):00633                  ldd   2,x
0347 FD11B5           (  cowin_beta5.asm):00634                  std   >GrfMem+gr00B5
034A EC84             (  cowin_beta5.asm):00635                  ldd   ,x
                      (  cowin_beta5.asm):00636                ENDC
034C E7C837           (  cowin_beta5.asm):00637                  stb   V.CallCde,u    Save GRFDRV code in Static mem (need for L00F7)
034F 4D               (  cowin_beta5.asm):00638                  tsta                 Any parameter bytes needed?
0350 2712             (  cowin_beta5.asm):00639                  beq   L0339          No, just go do function
0352 2BD1             (  cowin_beta5.asm):00640                  bmi   L0A96          $FF=Empty, exit with error
0354 A7C82C           (  cowin_beta5.asm):00641                  sta   V.ParmCnt,u    Preserve for VTIO to get the rest
     0357             (  cowin_beta5.asm):00642         L032F    equ   *
                      (  cowin_beta5.asm):00643                IFNE  H6309
                      (  cowin_beta5.asm):00644                  addr  w,x            Point to vector
                      (  cowin_beta5.asm):00645                ELSE
                      (  cowin_beta5.asm):00646         * 6809 - might use DP scratch var here instead of pshs/puls b. LCB
0357 3404             (  cowin_beta5.asm):00647                  pshs  b
0359 EC02             (  cowin_beta5.asm):00648                  ldd   2,x
035B 308B             (  cowin_beta5.asm):00649                  leax  d,x
035D 3504             (  cowin_beta5.asm):00650                  puls  b
                      (  cowin_beta5.asm):00651                ENDC
035F AFC82D           (  cowin_beta5.asm):00652                  stx   V.ParmVct,u    Save vector for VTIO to call
0362 4F               (  cowin_beta5.asm):00653                  clra                 No error & return so VTIO can get rest of parms
0363 39               (  cowin_beta5.asm):00654                  rts   
                      (  cowin_beta5.asm):00655         
                      (  cowin_beta5.asm):00656         * No param calls go here
     0364             (  cowin_beta5.asm):00657         L0339    equ   *
                      (  cowin_beta5.asm):00658                IFNE  H6309
                      (  cowin_beta5.asm):00659                  jmp   w,x            Go execute function
                      (  cowin_beta5.asm):00660                ELSE
                      (  cowin_beta5.asm):00661         * 6809 - use DP scratch var here instead of pshs/puls d. LCB
0364 3406             (  cowin_beta5.asm):00662                  pshs  d
0366 FC11B5           (  cowin_beta5.asm):00663                  ldd   >GrfMem+gr00B5
0369 308B             (  cowin_beta5.asm):00664                  leax  d,x
036B 3506             (  cowin_beta5.asm):00665                  puls  d
036D 6E84             (  cowin_beta5.asm):00666                  jmp   ,x 
                      (  cowin_beta5.asm):00667                ENDC
                      (  cowin_beta5.asm):00668         
                      (  cowin_beta5.asm):00669         * Check special display codes
036F 811F             (  cowin_beta5.asm):00670         L0347    cmpa  #$1F           $1F codes?
0371 2774             (  cowin_beta5.asm):00671                  beq   L038D          Yes, go process them
0373 8102             (  cowin_beta5.asm):00672         L034D    cmpa  #$02           Cursor X,Y?
0375 2605             (  cowin_beta5.asm):00673                  bne   L0356          No, check next
0377 308C57           (  cowin_beta5.asm):00674                  leax  <L036E,pc      Point to Cursor X,Y routine
037A 204D             (  cowin_beta5.asm):00675                  bra   L0362          Let VTIO get rest of parms
                      (  cowin_beta5.asm):00676         
037C 8105             (  cowin_beta5.asm):00677         L0356    cmpa  #$05           Cursor On/Off?
037E 276E             (  cowin_beta5.asm):00678                  beq   L0396          Go to cursor on/off routine
0380 C63C             (  cowin_beta5.asm):00679         L039F    ldb   #$3C           Otherwise, GrfDrv function: Control codes
0382 3406             (  cowin_beta5.asm):00680         L03A1    pshs  d              Preserve write char & GrfDrv function code
0384 17038C           (  cowin_beta5.asm):00681                  lbsr  L06A0          Get window table ptr & verify it
0387 253B             (  cowin_beta5.asm):00682                  bcs   UnDef          Couldn't, exit with Window Undefined error
0389 3506             (  cowin_beta5.asm):00683                  puls  d              Get back write char & GrfDrv function code
                      (  cowin_beta5.asm):00684         * Execute GrfDrv
                      (  cowin_beta5.asm):00685         * Entry: @ L0101 : B=Callcode for GRFDRV
                      (  cowin_beta5.asm):00686         * All regs are thrown onto stack for 'fake' RTI done by [D.Flip1] (in vector
                      (  cowin_beta5.asm):00687         * page RAM at the top of OS9p1) after switching to System Task #1 (GRFDRV)
                      (  cowin_beta5.asm):00688         * Added protection for regE; RG 2003/10/15
038B BE106E           (  cowin_beta5.asm):00689         L0101    ldx   >WGlobal+G.GrfEnt   Get GrfDrv entry address
038E 1A80             (  cowin_beta5.asm):00690                  orcc  #Entire        Set up 'pull all regs' for RTI
                      (  cowin_beta5.asm):00691                IFNE  H6309
                      (  cowin_beta5.asm):00692                  pshsw
                      (  cowin_beta5.asm):00693                  tfr   cc,e
                      (  cowin_beta5.asm):00694                  ste   >WGlobal+g0005
                      (  cowin_beta5.asm):00695                  pulsw
                      (  cowin_beta5.asm):00696                ELSE
                      (  cowin_beta5.asm):00697         * 6809 - use DP scratch var here instead of pshs/puls d. LCB
0390 3406             (  cowin_beta5.asm):00698                  pshs  d
0392 FC11B5           (  cowin_beta5.asm):00699                  ldd   >GrfMem+gr00B5
0395 FD11B5           (  cowin_beta5.asm):00700                  std   >GrfMem+gr00B5
0398 1FA8             (  cowin_beta5.asm):00701                  tfr   cc,a
039A B71005           (  cowin_beta5.asm):00702                  sta   >WGlobal+g0005
039D 3506             (  cowin_beta5.asm):00703                  puls  d
                      (  cowin_beta5.asm):00704                ENDC
039F 1A50             (  cowin_beta5.asm):00705                  orcc  #IntMasks      Disable IRQ's
03A1 10FF1007         (  cowin_beta5.asm):00706                  sts   >WGlobal+G.GrfStk   Save stack ptr for GRFDRV
03A5 10DEA7           (  cowin_beta5.asm):00707                  lds   <D.CCStk       Get new stack ptr
                      (  cowin_beta5.asm):00708         * Dump all registers to stack for fake RTI
03A8 34F8             (  cowin_beta5.asm):00709                  pshs  dp,x,y,u,pc    dump all registers to stack for fake RTI
                      (  cowin_beta5.asm):00710                IFNE  H6309
                      (  cowin_beta5.asm):00711                  pshsw                no register to push for 6809
                      (  cowin_beta5.asm):00712                  lde   >WGlobal+g0005   get back regDP 
                      (  cowin_beta5.asm):00713                ENDC
03AA 3407             (  cowin_beta5.asm):00714                  pshs  cc,d
03AC AF6A             (  cowin_beta5.asm):00715                  stx   R$PC,s         Save grfdrv entry address as the PC on stack
                      (  cowin_beta5.asm):00716                IFNE  H6309
                      (  cowin_beta5.asm):00717                  ste   R$CC,s         Save CC bitE into CC on stack
                      (  cowin_beta5.asm):00718                  ste   >WGlobal+G.GfBusy   Flag grfdrv busy
                      (  cowin_beta5.asm):00719                ELSE
03AE B61005           (  cowin_beta5.asm):00720                  lda   >WGlobal+g0005
03B1 A7E4             (  cowin_beta5.asm):00721                  sta   R$CC,s
03B3 B71002           (  cowin_beta5.asm):00722                  sta   >WGlobal+G.GfBusy   Flag grfdrv busy 
03B6 A661             (  cowin_beta5.asm):00723                  lda   R$A,s          may not be needed
                      (  cowin_beta5.asm):00724                ENDC
03B8 6E9F00AB         (  cowin_beta5.asm):00725                  jmp   [>D.Flip1] Flip to GRFDRV and execute it
                      (  cowin_beta5.asm):00726         
                      (  cowin_beta5.asm):00727         * GRFDRV will execute function, then call [D.Flip0] to switch back to here. It
                      (  cowin_beta5.asm):00728         * will use an RTS to return to the code here that called L00F7 or L0101 in the
                      (  cowin_beta5.asm):00729         * first place. Only SP,PC & CC are set up- ALL OTHER REGISTERS MAY BE MODIFIED
                      (  cowin_beta5.asm):00730         
                      (  cowin_beta5.asm):00731         * Entry point for GRFDRV for most GFX commands
03BC BE100C           (  cowin_beta5.asm):00732         L00F7    ldx   >WGlobal+G.CurDvM    Get current device memory ptr
03BF E68837           (  cowin_beta5.asm):00733                  ldb   V.CallCde,x    Get callcode from it
03C2 20C7             (  cowin_beta5.asm):00734                  bra   L0101          Go call GRFDRV
                      (  cowin_beta5.asm):00735         
03C4 3262             (  cowin_beta5.asm):00736         UnDef    leas  2,s            Eat stack
03C6 C6C4             (  cowin_beta5.asm):00737         UnDef2   ldb   #E$WUndef      Undefined Window error
03C8 39               (  cowin_beta5.asm):00738                  rts   
                      (  cowin_beta5.asm):00739         
                      (  cowin_beta5.asm):00740         * Set counts up for CC3/TC9IO to get rest of needed parms
03C9 A7C82C           (  cowin_beta5.asm):00741         L0362    sta   V.ParmCnt,u    Store # bytes to get for params in static mem
03CC AFC82D           (  cowin_beta5.asm):00742                  stx   V.ParmVct,u    Store vector to function in static mem
03CF 4F               (  cowin_beta5.asm):00743                  clra                 No error & return so VTIO can get rest of parms
03D0 39               (  cowin_beta5.asm):00744                  rts   
                      (  cowin_beta5.asm):00745         
                      (  cowin_beta5.asm):00746         * Process CurXY after parms are gotten
                      (  cowin_beta5.asm):00747         * Entry: U=Static mem ptr
03D1 3440             (  cowin_beta5.asm):00748         L036E    pshs  u              Save static mem ptr (in case DWSet modifies U)
03D3 17033D           (  cowin_beta5.asm):00749                  lbsr  L06A0          Get window table ptr
03D6 3540             (  cowin_beta5.asm):00750                  puls  u              Get back static mem ptr
03D8 25EC             (  cowin_beta5.asm):00751                  bcs   UnDef2         Couldn't, exit with Window undefined error
03DA ECD82F           (  cowin_beta5.asm):00752                  ldd   [V.PrmStrt,u]  get the coords requested
03DD B71147           (  cowin_beta5.asm):00753         L0380    sta   >GrfMem+gr0047 Save X coord
03E0 F71149           (  cowin_beta5.asm):00754                  stb   >GrfMem+gr0049 Save Y coord
03E3 C642             (  cowin_beta5.asm):00755                  ldb   #$42           GrfDrv function: Goto X/Y
03E5 20A4             (  cowin_beta5.asm):00756         L038A    bra   L0101          Execute Grfdrv
                      (  cowin_beta5.asm):00757         
                      (  cowin_beta5.asm):00758         * Process $1f display codes
03E7 A6D82F           (  cowin_beta5.asm):00759         L038D    lda   [V.PrmStrt,u]  get type of $1f function
03EA C640             (  cowin_beta5.asm):00760                  ldb   #$40           GrfDrv function: $1F codes
03EC 2094             (  cowin_beta5.asm):00761                  bra   L03A1          Go get window tbl ptr & execute GRFDRV
                      (  cowin_beta5.asm):00762         
                      (  cowin_beta5.asm):00763         * Cursor on/off
03EE A6D82F           (  cowin_beta5.asm):00764         L0396    lda   [V.PrmStrt,u]  get cursor on/off parameter byte
03F1 C63E             (  cowin_beta5.asm):00765                  ldb   #$3E           GrfDrv function: Cursor on/off
03F3 208D             (  cowin_beta5.asm):00766                  bra   L03A1          Go get window tbl ptr & execute GRFDRV
                      (  cowin_beta5.asm):00767         
                      (  cowin_beta5.asm):00768         ******************************
                      (  cowin_beta5.asm):00769         * DWSet entry point
                      (  cowin_beta5.asm):00770         * Entry: U=Device static mem pointer
                      (  cowin_beta5.asm):00771         *        Y=Path descriptor
                      (  cowin_beta5.asm):00772         *        X=Param pointer
03F5 3460             (  cowin_beta5.asm):00773         DWSet    pshs  y,u            preserve static mem & path descriptor pointers
03F7 17034A           (  cowin_beta5.asm):00774                  lbsr  L06AE          get window table pointer for current window
                      (  cowin_beta5.asm):00775         * Window already defined?
03FA A630             (  cowin_beta5.asm):00776                  lda   Wt.STbl,y      Get MSB of screen table ptr
03FC 81FF             (  cowin_beta5.asm):00777                  cmpa  #$FF           Already defined?
03FE 2705             (  cowin_beta5.asm):00778                  beq   L03BF          No, skip ahead
0400 53               (  cowin_beta5.asm):00779                  comb                 Exit with Window Already Defined error
0401 C6B8             (  cowin_beta5.asm):00780                  ldb   #E$WADef       get window already defined error
0403 35E0             (  cowin_beta5.asm):00781                  puls  u,y,pc         Restore regs & return
                      (  cowin_beta5.asm):00782         
                      (  cowin_beta5.asm):00783         * Check screen type
0405 A680             (  cowin_beta5.asm):00784         L03BF    lda   ,x+            Get screen type from parameters
0407 170470           (  cowin_beta5.asm):00785                  lbsr  L07E0          Convert it to internal code
040A 2405             (  cowin_beta5.asm):00786                  bcc   L03CB          it's good, skip ahead
040C 3560             (  cowin_beta5.asm):00787                  puls  u,y            Exit with Illegal Window Definition error
040E 16032F           (  cowin_beta5.asm):00788                  lbra  L0697          return illegal window definition error
                      (  cowin_beta5.asm):00789         
                      (  cowin_beta5.asm):00790         * Legal window type, make sure coords & size are at least reasonable
0411 F71160           (  cowin_beta5.asm):00791         L03CB    stb   >GrfMem+Gr.STYMk   Save screen type in Grfdrv Mem
0414 8D5A             (  cowin_beta5.asm):00792                  bsr   L0413          Move coord's, size & pals. to window table
0416 2404             (  cowin_beta5.asm):00793                  bcc   L03D7          Legal values, skip ahead
0418 C6C3             (  cowin_beta5.asm):00794                  ldb   #E$IWDef       Illegal Window Definition
041A 35E0             (  cowin_beta5.asm):00795                  puls  pc,u,y         restore regs & return with error
                      (  cowin_beta5.asm):00796         
                      (  cowin_beta5.asm):00797         * Coordinates & size are within 0-127, continue
041C C1FF             (  cowin_beta5.asm):00798         L03D7    cmpb  #$FF           is it same screen?
041E 2715             (  cowin_beta5.asm):00799                  beq   L03F2          yes, don't bother getting border color
0420 308C06           (  cowin_beta5.asm):00800                  leax  <L03E5,pc      point to processor for border color
0423 8601             (  cowin_beta5.asm):00801                  lda   #$01           get # bytes to get
0425 3560             (  cowin_beta5.asm):00802                  puls  u,y            purge stack
0427 20A0             (  cowin_beta5.asm):00803                  bra   L0362          let VTIO get it for me
                      (  cowin_beta5.asm):00804         
                      (  cowin_beta5.asm):00805         * If the window was not on the current screen grab the optional border color
0429 3460             (  cowin_beta5.asm):00806         L03E5    pshs  u,y            Preserve static mem & path dsc. ptrs
042B 170316           (  cowin_beta5.asm):00807                  lbsr  L06AE          get window table pointer into Y
042E A684             (  cowin_beta5.asm):00808                  lda   ,x             get border color
0430 B7115A           (  cowin_beta5.asm):00809                  sta   >GrfMem+gr005A save it in grfdrv mem
0433 2007             (  cowin_beta5.asm):00810                  bra   L03F9          continue processing
                      (  cowin_beta5.asm):00811         
                      (  cowin_beta5.asm):00812         * Current displayed screen or current process screen goes here
0435 AEE4             (  cowin_beta5.asm):00813         L03F2    ldx   ,s             get path descriptor pointer
0437 1703AF           (  cowin_beta5.asm):00814                  lbsr  L075C          check validity of screen table
043A 252B             (  cowin_beta5.asm):00815                  bcs   L0408          error, return
                      (  cowin_beta5.asm):00816         * all parameters are moved, let grfdrv do the rest
043C 17FF7D           (  cowin_beta5.asm):00817         L03F9    lbsr  L00F7          let grfdrv take over
043F 2528             (  cowin_beta5.asm):00818                  bcs   L040A          grfdrv error, return
0441 EE62             (  cowin_beta5.asm):00819                  ldu   2,s            get static mem pointer
0443 6CC81E           (  cowin_beta5.asm):00820                  inc   V.InfVld,u     Set flag to indicate rest of static mem valid
                      (  cowin_beta5.asm):00821                IFNE  H6309
                      (  cowin_beta5.asm):00822                  ldw   >WGlobal+G.CurDev   Get current window ptr
                      (  cowin_beta5.asm):00823                ELSE
0446 10BE1020         (  cowin_beta5.asm):00824                  ldy   >WGlobal+G.CurDev
044A 10BF11B5         (  cowin_beta5.asm):00825                  sty   >GrfMem+gr00B5
                      (  cowin_beta5.asm):00826                ENDC
044E 2708             (  cowin_beta5.asm):00827                  beq   Nowin          None, skip ahead
                      (  cowin_beta5.asm):00828                IFNE  H6309
                      (  cowin_beta5.asm):00829                  lda   >V.ULCase,w    Get special keyflags
                      (  cowin_beta5.asm):00830                ELSE
0450 A6A90021         (  cowin_beta5.asm):00831                  lda   >V.ULCase,y
                      (  cowin_beta5.asm):00832                ENDC
0454 A7C90021         (  cowin_beta5.asm):00833                  sta   >V.ULCase,u    Save in new window
0458 10AEE4           (  cowin_beta5.asm):00834         Nowin    ldy   ,s             get path descriptor pointer
045B 8D36             (  cowin_beta5.asm):00835                  bsr   L0436          setup lines per page
045D F61160           (  cowin_beta5.asm):00836                  ldb   >GrfMem+Gr.STYMk   get screen type from Grfdrv Mem
0460 C101             (  cowin_beta5.asm):00837                  cmpb  #1             Is it an overlay?
0462 2303             (  cowin_beta5.asm):00838                  bls   L0408          don't flag screen if overlay
0464 6CC823           (  cowin_beta5.asm):00839                  inc   V.ScrChg,u     Flag that screen has changed for AltIRQ routine
0467 35E0             (  cowin_beta5.asm):00840         L0408    puls  pc,u,y         all done, return
                      (  cowin_beta5.asm):00841         
                      (  cowin_beta5.asm):00842         * DWSet didn't work, flag window table entry as free again
0469 CEFFFF           (  cowin_beta5.asm):00843         L040A    ldu   #$FFFF         get table free value
046C EF30             (  cowin_beta5.asm):00844                  stu   Wt.STbl,y      put it in window table
046E 35E0             (  cowin_beta5.asm):00845                  puls  y,u,pc         restore & return
                      (  cowin_beta5.asm):00846         
                      (  cowin_beta5.asm):00847         * Move co-ordinates/size & fore/back colors into window table
0470 3406             (  cowin_beta5.asm):00848         L0413    pshs  d              Preserve D
0472 8D0C             (  cowin_beta5.asm):00849                  bsr   L0423          Move coordinates & size
0474 2506             (  cowin_beta5.asm):00850                  bcs   L041F          Error in size, return the error
0476 EC81             (  cowin_beta5.asm):00851                  ldd   ,x++           Get foreground/background colors
0478 ED26             (  cowin_beta5.asm):00852                  std   Wt.Fore,y      Put it in window table
047A 3586             (  cowin_beta5.asm):00853         L041D    puls  d,pc           Restore D & return
                      (  cowin_beta5.asm):00854         
047C E761             (  cowin_beta5.asm):00855         L041F    stb   1,s            Save error code into B on stack
047E 3586             (  cowin_beta5.asm):00856                  puls  d,pc           Restore D & return
                      (  cowin_beta5.asm):00857         
                      (  cowin_beta5.asm):00858         * Move start coordinates & size into window table
                      (  cowin_beta5.asm):00859         * Entry: X=Pointer to co-rdinates
                      (  cowin_beta5.asm):00860         *        Y=Window table pointer
0480 EC81             (  cowin_beta5.asm):00861         L0423    ldd   ,x++           Get start coordinates
0482 ED35             (  cowin_beta5.asm):00862                  std   Wt.CPX,y       Save 'em
0484 A680             (  cowin_beta5.asm):00863                  lda   ,x+            Get X size
0486 2F04             (  cowin_beta5.asm):00864                  ble   L042F          Too big or 0, exit with error
0488 E680             (  cowin_beta5.asm):00865                  ldb   ,x+            Get Y size
048A 2E03             (  cowin_beta5.asm):00866                  bgt   L0432          Above 0, go on
048C 1602B1           (  cowin_beta5.asm):00867         L042F    lbra  L0697          Return error
                      (  cowin_beta5.asm):00868         
048F ED37             (  cowin_beta5.asm):00869         L0432    std   Wt.SZX,y       Save size to window table
0491 5F               (  cowin_beta5.asm):00870                  clrb                 Clear error & return
0492 39               (  cowin_beta5.asm):00871                  rts   
                      (  cowin_beta5.asm):00872         
                      (  cowin_beta5.asm):00873         * Setup lines/page variables
                      (  cowin_beta5.asm):00874         * Entry: Y=Path descriptor pointer
                      (  cowin_beta5.asm):00875         *        U=Device static mem pointer for new window
0493 3420             (  cowin_beta5.asm):00876         L0436    pshs  y              L06AE resets y
0495 1702AC           (  cowin_beta5.asm):00877                  lbsr  L06AE          get window table pointer
0498 E638             (  cowin_beta5.asm):00878                  ldb   Wt.SZY,y       Get Y size
049A 3520             (  cowin_beta5.asm):00879                  puls  y              restore reg
049C E747             (  cowin_beta5.asm):00880                  stb   V.LINE,u       save it in static mem for SCF
049E E7A828           (  cowin_beta5.asm):00881                  stb   PD.PAG,y       Save it as the default in path descriptor
04A1 5F               (  cowin_beta5.asm):00882                  clrb                 clear errors
04A2 39               (  cowin_beta5.asm):00883                  rts                  return
                      (  cowin_beta5.asm):00884         
                      (  cowin_beta5.asm):00885         ****************************
                      (  cowin_beta5.asm):00886         * DWEnd entry point
                      (  cowin_beta5.asm):00887         * Entry: U=Static memory pointer
                      (  cowin_beta5.asm):00888         *        Y=Path descriptor pointer
04A3 3440             (  cowin_beta5.asm):00889         DWEnd    pshs  u
04A5 8D08             (  cowin_beta5.asm):00890                  bsr   L0452          process it
04A7 3540             (  cowin_beta5.asm):00891                  puls  u
04A9 2503             (  cowin_beta5.asm):00892                  bcs   L0451          error, return
04AB 6FC81E           (  cowin_beta5.asm):00893                  clr   V.InfVld,u     clear flag - static mem no longer valid & return
04AE 39               (  cowin_beta5.asm):00894         L0451    rts
                      (  cowin_beta5.asm):00895         
                      (  cowin_beta5.asm):00896         * Check for legal screen table (PRESERVES U)
04AF 170292           (  cowin_beta5.asm):00897         L0452    lbsr  L06AE          get pointer to window table into Y
04B2 A630             (  cowin_beta5.asm):00898                  lda   Wt.STbl,y      screen table exist?
04B4 2A04             (  cowin_beta5.asm):00899                  bpl   L0461          screen table exists, skip ahead
04B6 53               (  cowin_beta5.asm):00900                  comb                 set carry for error
04B7 160256           (  cowin_beta5.asm):00901                  lbra  L069D          return undefined window error
                      (  cowin_beta5.asm):00902         
                      (  cowin_beta5.asm):00903         * Window legal, Delete any overlays (PRESERVES U)
04BA A632             (  cowin_beta5.asm):00904         L0461    lda   Wt.BLnk,y      Any overlay windows?
04BC 2B13             (  cowin_beta5.asm):00905                  bmi   L0479          No, skip ahead
04BE 3442             (  cowin_beta5.asm):00906                  pshs  a,u            save parent window # & static mem
04C0 8D7E             (  cowin_beta5.asm):00907                  bsr   L04EA          Do a CWArea to full size
04C2 C60C             (  cowin_beta5.asm):00908                  ldb   #$0C           Grfdrv function: Overlay window end
04C4 17FEC4           (  cowin_beta5.asm):00909                  lbsr  L0101
04C7 3542             (  cowin_beta5.asm):00910                  puls  a,u            restore parent & static mem
04C9 A7C835           (  cowin_beta5.asm):00911                  sta   V.WinNum,u     save parent as current
04CC 170275           (  cowin_beta5.asm):00912                  lbsr  L06AE          get it's window table pointer
04CF 20E9             (  cowin_beta5.asm):00913                  bra   L0461          keep going
                      (  cowin_beta5.asm):00914         
                      (  cowin_beta5.asm):00915         * Change to full window size & clear out the graphics table entry
                      (  cowin_beta5.asm):00916         *   clear out the current window & screen table ptrs
04D1 3440             (  cowin_beta5.asm):00917         L0479    pshs  u              save static mem pointer
04D3 8D6B             (  cowin_beta5.asm):00918                  bsr   L04EA          Do a CWArea to full size
                      (  cowin_beta5.asm):00919         * clear out gfx table entry
04D5 3540             (  cowin_beta5.asm):00920                  puls  u              Restore static mem ptr
04D7 170276           (  cowin_beta5.asm):00921                  lbsr  L06B9          Point to gfx table entry for this window
                      (  cowin_beta5.asm):00922                IFNE  H6309
                      (  cowin_beta5.asm):00923                  leau  <Nul2+2,pc
04DA                  (  cowin_beta5.asm):00924         Nul2     ldw   #$0012
                      (  cowin_beta5.asm):00925                  tfm   u,x+
                      (  cowin_beta5.asm):00926                ELSE
                      (  cowin_beta5.asm):00927         * 6809 - use DP scratch var here instead of pshs/puls b. LCB
                      (  cowin_beta5.asm):00928         * Or, pshs  u, lda #9 / ldu #0 / stu ,x++ / deca / bne / puls u
04DA 3404             (  cowin_beta5.asm):00929                  pshs  b
04DC CC0012           (  cowin_beta5.asm):00930                  ldd   #$0012
04DF A780             (  cowin_beta5.asm):00931         Nul2     sta   ,x+
04E1 5A               (  cowin_beta5.asm):00932                  decb
04E2 26FB             (  cowin_beta5.asm):00933                  bne   Nul2
04E4 3504             (  cowin_beta5.asm):00934                  puls  b
                      (  cowin_beta5.asm):00935                ENDC
04E6 B6100B           (  cowin_beta5.asm):00936                  lda   >WGlobal+G.WinType   is this a window?
04E9 2B0B             (  cowin_beta5.asm):00937                  bmi   L0499      no, return
                      (  cowin_beta5.asm):00938                IFNE  H6309
                      (  cowin_beta5.asm):00939                  clrd  
                      (  cowin_beta5.asm):00940                  stq   >GrfMem+gr002E   clear window & screen table entrys
                      (  cowin_beta5.asm):00941                ELSE
04EB 4F               (  cowin_beta5.asm):00942                  clra
04EC 5F               (  cowin_beta5.asm):00943                  clrb
04ED FD11B5           (  cowin_beta5.asm):00944                  std   >GrfMem+gr00B5 
04F0 FD112E           (  cowin_beta5.asm):00945                  std   >GrfMem+gr002E   clear window & screen table entrys
04F3 FD1130           (  cowin_beta5.asm):00946                  std   >GrfMem+gr002E+2
                      (  cowin_beta5.asm):00947                ENDC
04F6 16FEC3           (  cowin_beta5.asm):00948         L0499    lbra  L00F7          let grfdrv do the rest
                      (  cowin_beta5.asm):00949         
                      (  cowin_beta5.asm):00950         *****************************
                      (  cowin_beta5.asm):00951         * OWSet entry point
                      (  cowin_beta5.asm):00952         * Entry: U=Device static mem pointer
                      (  cowin_beta5.asm):00953         *        Y=Path descriptor pointer
                      (  cowin_beta5.asm):00954         *        X=Parameter pointer
04F9 3460             (  cowin_beta5.asm):00955         OWSet    pshs  y,u            preserve path descriptor & static mem pointers
04FB 170215           (  cowin_beta5.asm):00956                  lbsr  L06A0          verify window table
04FE 3560             (  cowin_beta5.asm):00957                  puls  u,y            restore pointers
0500 1025020C         (  cowin_beta5.asm):00958                  lbcs  L069D          not a legal window, return undefined window error
0504 3460             (  cowin_beta5.asm):00959                  pshs  u,y            preserve path descriptor & static mem pointers
0506 17032F           (  cowin_beta5.asm):00960                  lbsr  L07B0          get a blank window table pointer
0509 2406             (  cowin_beta5.asm):00961                  bcc   L04B6          we found one, skip ahead
050B 35E0             (  cowin_beta5.asm):00962                  puls  u,y,pc         purge stack & return
                      (  cowin_beta5.asm):00963         
050D 3560             (  cowin_beta5.asm):00964         L04B2    puls  u,y
050F 201C             (  cowin_beta5.asm):00965                  bra   L04D5
                      (  cowin_beta5.asm):00966         
                      (  cowin_beta5.asm):00967         * We have a new window table for overlay, so process parameters
0511 A680             (  cowin_beta5.asm):00968         L04B6    lda   ,x+            get save switch from parameters
0513 B71159           (  cowin_beta5.asm):00969                  sta   >GrfMem+gr0059 save it in grfdrv mem
0516 17FF57           (  cowin_beta5.asm):00970                  lbsr  L0413          move rest of parameters to grfdrv mem
0519 25F2             (  cowin_beta5.asm):00971                  bcs   L04B2          error, return
051B 3420             (  cowin_beta5.asm):00972                  pshs  y              preserve window table pointer
051D 17FE9C           (  cowin_beta5.asm):00973                  lbsr  L00F7          let grfdrv create overlay
0520 3520             (  cowin_beta5.asm):00974                  puls  y              restore window table pointer
0522 2505             (  cowin_beta5.asm):00975                  bcs   L04D1          error from grfdrv, return
0524 3560             (  cowin_beta5.asm):00976                  puls  u,y            restore path descriptor & static mem pointers
0526 16FF6A           (  cowin_beta5.asm):00977                  lbra  L0436          setup lines per page & return from there
                      (  cowin_beta5.asm):00978         
0529 3262             (  cowin_beta5.asm):00979         L04D1    leas  2,s            Eat path dsc. ptr
052B 3540             (  cowin_beta5.asm):00980                  puls  u              Get static mem ptr back
                      (  cowin_beta5.asm):00981         * Could not find a window table for overlay, get rid of links & return
052D A632             (  cowin_beta5.asm):00982         L04D5    lda   Wt.BLnk,y      Get back window # link
052F A7C835           (  cowin_beta5.asm):00983                  sta   V.WinNum,u     Store it as current window #
                      (  cowin_beta5.asm):00984                IFNE  H6309
                      (  cowin_beta5.asm):00985                  ldw   #$FFFF         Set screen table ptr to unused
                      (  cowin_beta5.asm):00986                  stw   Wt.STbl,y
                      (  cowin_beta5.asm):00987                ELSE
                      (  cowin_beta5.asm):00988         * 6809 - use DP scratch var here instead of pshs/puls x. LCB
0532 3410             (  cowin_beta5.asm):00989                  pshs  x
0534 8EFFFF           (  cowin_beta5.asm):00990                  ldx   #$FFFF
0537 BF11B5           (  cowin_beta5.asm):00991                  stx   >GrfMem+gr00B5
053A AF30             (  cowin_beta5.asm):00992                  stx   Wt.STbl,y
053C 3510             (  cowin_beta5.asm):00993                  puls  x
                      (  cowin_beta5.asm):00994                ENDC
053E 43               (  cowin_beta5.asm):00995                  coma                 Set carry for error
053F 39               (  cowin_beta5.asm):00996         L04E7    rts   
                      (  cowin_beta5.asm):00997         
                      (  cowin_beta5.asm):00998         * Change window to full size reported in window table
                      (  cowin_beta5.asm):00999         * Relocated lines and removed regW; regE bug; RG
0540 ECA828           (  cowin_beta5.asm):01000         L04EA    ldd   Wt.DfSZX,y     Get default size of window
0543 ED37             (  cowin_beta5.asm):01001                  std   Wt.CPX+2,y           Save current size
0545 FD11B5           (  cowin_beta5.asm):01002                  std   >GrfMem+gr00B5
                      (  cowin_beta5.asm):01003                IFNE  H6309 
                      (  cowin_beta5.asm):01004                  clrd                 set start coords to 0,0
                      (  cowin_beta5.asm):01005                ELSE
0548 4F               (  cowin_beta5.asm):01006                  clra
0549 5F               (  cowin_beta5.asm):01007                  clrb
                      (  cowin_beta5.asm):01008                ENDC
054A ED35             (  cowin_beta5.asm):01009                  std   Wt.CPX,y       Store coords
054C C60E             (  cowin_beta5.asm):01010                  ldb   #$0E           GrfDrv function: CWArea
054E 3420             (  cowin_beta5.asm):01011                  pshs  y              preserve window table ptr
0550 17FE38           (  cowin_beta5.asm):01012                  lbsr  L0101          Send it to GrfDrv
0553 35A0             (  cowin_beta5.asm):01013                  puls  y,pc           Restore reg & return
                      (  cowin_beta5.asm):01014         
                      (  cowin_beta5.asm):01015         ****************************
                      (  cowin_beta5.asm):01016         * OWEnd entry point
                      (  cowin_beta5.asm):01017         * Entry: U=Device static mem pointer
                      (  cowin_beta5.asm):01018         *        Y=Path descriptor pointer
0555 3460             (  cowin_beta5.asm):01019         OWEnd    pshs  u,y            preserve path descriptor & static mem pointers
0557 1701B9           (  cowin_beta5.asm):01020                  lbsr  L06A0          get pointer to window table & verify it
055A 2405             (  cowin_beta5.asm):01021                  bcc   L0508          went ok, skip ahead
055C 3560             (  cowin_beta5.asm):01022                  puls  u,y            Restore regs
055E 1601AF           (  cowin_beta5.asm):01023                  lbra  L069D          Exit with undefined window error
                      (  cowin_beta5.asm):01024         
0561 A632             (  cowin_beta5.asm):01025         L0508    lda   Wt.BLnk,y      is this an overlay?
0563 2A05             (  cowin_beta5.asm):01026                  bpl   L0511          yes, go remove it
0565 3560             (  cowin_beta5.asm):01027                  puls  u,y            purge stack
0567 1601D6           (  cowin_beta5.asm):01028                  lbra  L0697          return with illegal window definition error
                      (  cowin_beta5.asm):01029         
                      (  cowin_beta5.asm):01030         * We are in overlay, remove it
056A EE62             (  cowin_beta5.asm):01031         L0511    ldu   2,s            get static mem pointer
056C 1701E1           (  cowin_beta5.asm):01032                  lbsr  L06B9          get pointer to graphics table for this window
                      (  cowin_beta5.asm):01033                IFNE  H6309
                      (  cowin_beta5.asm):01034                  lde   ,x             get menuing system screen type
                      (  cowin_beta5.asm):01035                ELSE
056F A684             (  cowin_beta5.asm):01036                  lda   ,x
0571 B711B5           (  cowin_beta5.asm):01037                  sta   >GrfMem+gr00B5
                      (  cowin_beta5.asm):01038                ENDC
0574 A632             (  cowin_beta5.asm):01039                  lda   Wt.BLnk,y      get parent window # of this overlay
                      (  cowin_beta5.asm):01040         * We know this is a overlay window, continue
0576 A7C835           (  cowin_beta5.asm):01041                  sta   V.WinNum,u     save new window #
0579 8DC5             (  cowin_beta5.asm):01042                  bsr   L04EA          change to the full size window 
057B C60C             (  cowin_beta5.asm):01043                  ldb   #$0C           get grfdrv function for OWEnd
057D 17FE0B           (  cowin_beta5.asm):01044                  lbsr  L0101          let grfdrv do the rest
0580 2402             (  cowin_beta5.asm):01045                  bcc   L052E          grfdrv went ok, skip ahead
0582 35E0             (  cowin_beta5.asm):01046         L052C    puls  y,u,pc         restore & return
                      (  cowin_beta5.asm):01047         
                      (  cowin_beta5.asm):01048         * Overlay removed, check if we activate menu bar on parent window
0584 3560             (  cowin_beta5.asm):01049         L052E    puls  y,u            Restore static mem & path dsc. ptrs
0586 17FF0A           (  cowin_beta5.asm):01050                  lbsr  L0436          set lines per page in path descriptor
                      (  cowin_beta5.asm):01051              IFNE  CoGrf-1
                      (  cowin_beta5.asm):01052                IFNE  H6309
                      (  cowin_beta5.asm):01053                  tste                         is screen type a regular no box window?
                      (  cowin_beta5.asm):01054                ELSE
0589 7D11B5           (  cowin_beta5.asm):01055                  tst   >GrfMem+gr00B5
                      (  cowin_beta5.asm):01056                ENDC
058C 27B1             (  cowin_beta5.asm):01057                  beq   L04E7          yes, return
                      (  cowin_beta5.asm):01058                IFNE  H6309
                      (  cowin_beta5.asm):01059                  cmpe  #WT.FSWin      do we have a menu bar on window?
                      (  cowin_beta5.asm):01060                ELSE
                      (  cowin_beta5.asm):01061         * Can't use DP trick here - needs flags preserved
058E 3402             (  cowin_beta5.asm):01062                  pshs  a
0590 B611B5           (  cowin_beta5.asm):01063                  lda   >GrfMem+gr00B5
0593 8102             (  cowin_beta5.asm):01064                  cmpa  #WT.FSWin
0595 3502             (  cowin_beta5.asm):01065                  puls  a
                      (  cowin_beta5.asm):01066                ENDC
0597 22A6             (  cowin_beta5.asm):01067                  bhi   L04E7          no, return
0599 B6100A           (  cowin_beta5.asm):01068                  lda   >WGlobal+G.CrDvFl   Are we the current active window?
059C 274B             (  cowin_beta5.asm):01069                  beq   L0591          no, skip updating menu bar
059E 160EDA           (  cowin_beta5.asm):01070                  lbra  L13F5          set menu bar to active state
                      (  cowin_beta5.asm):01071              ELSE
                      (  cowin_beta5.asm):01072                  rts                  If just CoGrf, we didn't need to do any MultiVue checks
                      (  cowin_beta5.asm):01073              ENDC
                      (  cowin_beta5.asm):01074         
                      (  cowin_beta5.asm):01075         ****************************
                      (  cowin_beta5.asm):01076         * Select entry point
                      (  cowin_beta5.asm):01077         * Entry: U=Static memory pointer
                      (  cowin_beta5.asm):01078         *        Y=Path descriptor pointer
05A1 AE26             (  cowin_beta5.asm):01079         Select   ldx   PD.RGS,y       get register stack pointer
05A3 A601             (  cowin_beta5.asm):01080                  lda   R$A,x          get path # to new window
05A5 9E50             (  cowin_beta5.asm):01081                  ldx   <D.Proc        get current process pointer
05A7 A18900AC         (  cowin_beta5.asm):01082                  cmpa  P$SelP,x       Is path requested the same as current process' active path?
05AB 273C             (  cowin_beta5.asm):01083                  beq   L0591          yes, nothing to change so return
05AD E68900AC         (  cowin_beta5.asm):01084                  ldb   P$SelP,x       No, get the current processes' active window path
05B1 A78900AC         (  cowin_beta5.asm):01085                  sta   P$SelP,x       save new path (to window Selected)
05B5 3420             (  cowin_beta5.asm):01086                  pshs  y              save path descriptor pointer
05B7 8D31             (  cowin_beta5.asm):01087                  bsr   L0592          Get the device table ptr for current process 
05B9 AE22             (  cowin_beta5.asm):01088                  ldx   V$STAT,y       Get static mem ptr for current process
05BB BC1020           (  cowin_beta5.asm):01089                  cmpx  >WGlobal+G.CurDev   Same as current device? (same screen (not window))?
05BE 3520             (  cowin_beta5.asm):01090                  puls  y              restore path descriptor pointer
05C0 2626             (  cowin_beta5.asm):01091                  bne   L0590          no match on old device, return (don't update GIME if we aren't on same screen)
05C2 3404             (  cowin_beta5.asm):01092                  pshs  b              Same screen; save current processes' window path block #
05C4 30C4             (  cowin_beta5.asm):01093                  leax  ,u             point X to static mem ptr of window
05C6 17014A           (  cowin_beta5.asm):01094                  lbsr  L06A0          verify window table of new window
05C9 3504             (  cowin_beta5.asm):01095                  puls  b              restore old window path block #
05CB 2409             (  cowin_beta5.asm):01096                  bcc   L0582          window exists, skip ahead
05CD 9E50             (  cowin_beta5.asm):01097                  ldx   <D.Proc        Doesn't exist, get current process pointer back
05CF E78900AC         (  cowin_beta5.asm):01098                  stb   P$SelP,x       save old window path number back
05D3 16013A           (  cowin_beta5.asm):01099                  lbra  L069D          return undefined window error
                      (  cowin_beta5.asm):01100         
                      (  cowin_beta5.asm):01101         * New window exists, update screen to it
05D6 FE1020           (  cowin_beta5.asm):01102         L0582    ldu   >WGlobal+G.CurDev   Get current device mem ptr
05D9 FF1022           (  cowin_beta5.asm):01103                  stu   >WGlobal+G.PrWMPt   Save as previoius device mem ptr
05DC BF1020           (  cowin_beta5.asm):01104                  stx   >WGlobal+G.CurDev   Save new current device mem ptr
05DF 6C8823           (  cowin_beta5.asm):01105                  inc   V.ScrChg,x     Flag screen has changed for AltIRQ routine
                      (  cowin_beta5.asm):01106         * LCB - once we get clock to do such updates properly, we should be able to eliminate
                      (  cowin_beta5.asm):01107         *  this Sleep call. Grfdrv is non-reentrant, so it won't come back in here to change stuff while
                      (  cowin_beta5.asm):01108         *  it is changing, anyways.
                      (  cowin_beta5.asm):01109         
                      (  cowin_beta5.asm):01110         * Give system a chance to stabilize. RG
05E2 8E0002           (  cowin_beta5.asm):01111                  ldx   #2
05E5 103F0A           (  cowin_beta5.asm):01112                  os9   F$Sleep
05E8 5F               (  cowin_beta5.asm):01113         L0590    clrb                 clear errors
05E9 39               (  cowin_beta5.asm):01114         L0591    rts                  return
                      (  cowin_beta5.asm):01115         
                      (  cowin_beta5.asm):01116         * Get ptr to device table
                      (  cowin_beta5.asm):01117         * Entry: X=Pointer to process descriptor
                      (  cowin_beta5.asm):01118         *        B=Path block # to get 
                      (  cowin_beta5.asm):01119         * Exit : Y=Pointer to device table entry
05EA 308830           (  cowin_beta5.asm):01120         L0592    leax  P$Path,x       get pointer to path #'s
                      (  cowin_beta5.asm):01121         * Added next line to protect regB from os9 F$Find64 error report. RG
05ED 3404             (  cowin_beta5.asm):01122                  pshs  b
05EF A685             (  cowin_beta5.asm):01123                  lda   b,x            get path block
05F1 9E88             (  cowin_beta5.asm):01124                  ldx   <D.PthDBT      get pointer to descriptor block table
05F3 103F2F           (  cowin_beta5.asm):01125                  os9   F$Find64       get pointer to path descriptor
05F6 10AE23           (  cowin_beta5.asm):01126                  ldy   PD.DEV,y       get pointer to device table entry
05F9 3584             (  cowin_beta5.asm):01127                  puls  b,pc           return
                      (  cowin_beta5.asm):01128         
                      (  cowin_beta5.asm):01129         ****************************
                      (  cowin_beta5.asm):01130         * CWArea entry point
                      (  cowin_beta5.asm):01131         * Entry: U=Static memory pointer
                      (  cowin_beta5.asm):01132         *        Y=Path descriptor pointer
                      (  cowin_beta5.asm):01133         *        X=Pointer to parameters
05FB 3460             (  cowin_beta5.asm):01134         CWArea   pshs  y,u            Save device mem ptr & path dsc. ptr on stack
05FD 170113           (  cowin_beta5.asm):01135                  lbsr  L06A0          verify window table
                      (  cowin_beta5.asm):01136                IFNE  H6309
                      (  cowin_beta5.asm):01137                  ldq   Wt.CPX,y       get original start & size
                      (  cowin_beta5.asm):01138                  pshsw                preserve them on the stack
                      (  cowin_beta5.asm):01139                ELSE
0600 EC37             (  cowin_beta5.asm):01140                  ldd   Wt.CPX+2,y
0602 FD11B5           (  cowin_beta5.asm):01141                  std   >GrfMem+gr00B5
0605 3406             (  cowin_beta5.asm):01142                  pshs  d
0607 EC35             (  cowin_beta5.asm):01143                  ldd   Wt.CPX,y
                      (  cowin_beta5.asm):01144                ENDC
0609 3406             (  cowin_beta5.asm):01145                  pshs  d
060B 17FE72           (  cowin_beta5.asm):01146                  lbsr  L0423          move coords to window table
060E 2550             (  cowin_beta5.asm):01147                  bcs   L0609          didn't pan out, restore originals & return error
                      (  cowin_beta5.asm):01148         * The rest of this is unique to CoWin.  What it does is calculate the
                      (  cowin_beta5.asm):01149         * maximum allowable window sizes based on the window type defined in the
                      (  cowin_beta5.asm):01150         * menuing system.
                      (  cowin_beta5.asm):01151         * NOTE: MAY BE ABLE TO USE E & F FOR SOME OF THE ,S STUFF
0610 EE66             (  cowin_beta5.asm):01152                  ldu   6,s            get device static memory pointer
0612 17013B           (  cowin_beta5.asm):01153                  lbsr  L06B9          get graphics table entry pointer for this window
                      (  cowin_beta5.asm):01154                IFNE  H6309
                      (  cowin_beta5.asm):01155                  clrd                 set starting X/Y coords to 0
                      (  cowin_beta5.asm):01156                ELSE
0615 4F               (  cowin_beta5.asm):01157                  clra
0616 5F               (  cowin_beta5.asm):01158                  clrb
                      (  cowin_beta5.asm):01159                ENDC
0617 3406             (  cowin_beta5.asm):01160                  pshs  d
0619 ECA828           (  cowin_beta5.asm):01161                  ldd   Wt.DfSZX,y     Get default X/Y sizes from window table
061C 3406             (  cowin_beta5.asm):01162                  pshs  d              Make them the ending X,Y coords
                      (  cowin_beta5.asm):01163                IFNE  CoGrf-1
                      (  cowin_beta5.asm):01164         * Beginning of CoWin only code
061E A684             (  cowin_beta5.asm):01165                  lda   ,x             get graphics table window type
0620 271C             (  cowin_beta5.asm):01166                  beq   L05E3          If normal window, skip all adjustments
0622 4A               (  cowin_beta5.asm):01167                  deca                 Is it a WT.FWin (framed window=1)?
0623 2606             (  cowin_beta5.asm):01168                  bne   L05CB          no, check for scroll bars
0625 6A61             (  cowin_beta5.asm):01169                  dec   1,s            Yes, subtract 1 from Y size
0627 6C63             (  cowin_beta5.asm):01170                  inc   3,s            Add 1 to Y start
0629 2013             (  cowin_beta5.asm):01171                  bra   L05E3
                      (  cowin_beta5.asm):01172         
062B 4A               (  cowin_beta5.asm):01173         L05CB    deca                 Is it a WT.FSWin (scroll barred window=2)?
062C 2604             (  cowin_beta5.asm):01174                  bne   L05D3          No, has to be Shadowed,double or plain, skip ahead
062E 6AE4             (  cowin_beta5.asm):01175                  dec   ,s             decrement X size by 1 for right scroll bar
0630 2006             (  cowin_beta5.asm):01176                  bra   L05DD          skip ahead
                      (  cowin_beta5.asm):01177         
                      (  cowin_beta5.asm):01178         * Shadowed, double & plain go here - 1 char border on all 4 sides
0632 6C62             (  cowin_beta5.asm):01179         L05D3    inc   2,s            add 1 to X start for left border
0634 6AE4             (  cowin_beta5.asm):01180                  dec   ,s             decrement X size by 2 for left & right borders
0636 6AE4             (  cowin_beta5.asm):01181                  dec   ,s
0638 6C63             (  cowin_beta5.asm):01182         L05DD    inc   3,s            add 1 to Y start for menu bar
063A 6A61             (  cowin_beta5.asm):01183                  dec   1,s            decrement Y size by 2 for menu & bottom borders
063C 6A61             (  cowin_beta5.asm):01184                  dec   1,s
                      (  cowin_beta5.asm):01185                  ENDC
                      (  cowin_beta5.asm):01186         
063E EC37             (  cowin_beta5.asm):01187         L05E3    ldd   Wt.SZX,y       get current X/Y sizes
0640 A1E4             (  cowin_beta5.asm):01188                  cmpa  ,s             will X size fit?
0642 221A             (  cowin_beta5.asm):01189                  bhi   L0606          no return error
0644 E161             (  cowin_beta5.asm):01190                  cmpb  1,s            will Y size fit?
0646 2216             (  cowin_beta5.asm):01191                  bhi   L0606          no, return error
0648 EC35             (  cowin_beta5.asm):01192                  ldd   Wt.CPX,y       get current X/Y start
064A A162             (  cowin_beta5.asm):01193                  cmpa  2,s            will X start fit?
064C 2510             (  cowin_beta5.asm):01194                  bcs   L0606          no, return error
064E E163             (  cowin_beta5.asm):01195                  cmpb  3,s            will Y start fit?
0650 250C             (  cowin_beta5.asm):01196                  blo   L0606          no, return error
0652 17FD67           (  cowin_beta5.asm):01197                  lbsr  L00F7          let grfdrv do the rest
0655 2507             (  cowin_beta5.asm):01198                  bcs   L0606          error from grfdrv, return
0657 3268             (  cowin_beta5.asm):01199                  leas  8,s            eat local data
0659 3560             (  cowin_beta5.asm):01200                  puls  y,u            Get back path dsc. ptr & device mem ptr
065B 16FE35           (  cowin_beta5.asm):01201                  lbra  L0436          setup lines per page
                      (  cowin_beta5.asm):01202         
065E 3264             (  cowin_beta5.asm):01203         L0606    leas  4,s            Eat stack buffer & return
     0660             (  cowin_beta5.asm):01204         L0609    equ   *
                      (  cowin_beta5.asm):01205                IFNE  H6309
                      (  cowin_beta5.asm):01206                  puls  d              Restore originals
                      (  cowin_beta5.asm):01207                  pulsw  
                      (  cowin_beta5.asm):01208                  stq   Wt.CPX,y
                      (  cowin_beta5.asm):01209                ELSE
0660 EC62             (  cowin_beta5.asm):01210                  ldd   2,s
0662 ED37             (  cowin_beta5.asm):01211                  std   Wt.CPX+2,y
0664 FD11B5           (  cowin_beta5.asm):01212                  std   >GrfMem+gr00B5
0667 ECE4             (  cowin_beta5.asm):01213                  ldd   ,s
0669 ED35             (  cowin_beta5.asm):01214                  std   Wt.CPX,y
066B 3264             (  cowin_beta5.asm):01215                  leas  4,s            eat the stack
                      (  cowin_beta5.asm):01216                ENDC
066D 53               (  cowin_beta5.asm):01217                  comb                 Illegal coordinates error
066E C6BD             (  cowin_beta5.asm):01218                  ldb   #E$ICoord
0670 35E0             (  cowin_beta5.asm):01219                  puls  y,u,pc
                      (  cowin_beta5.asm):01220         
                      (  cowin_beta5.asm):01221         ****************************
                      (  cowin_beta5.asm):01222         * GCSet entry point
                      (  cowin_beta5.asm):01223         * Entry: U=Static mem pointer
                      (  cowin_beta5.asm):01224         *        Y=path descriptor pointer
                      (  cowin_beta5.asm):01225         *        X=Parameter pointer
0672 3440             (  cowin_beta5.asm):01226         L060C    pshs  u              save static mem pointer
0674 17009C           (  cowin_beta5.asm):01227                  lbsr  L06A0          verify window exists, or create it if it isn't
0677 10250093         (  cowin_beta5.asm):01228                  lbcs  L069B          couldn't create, exit with error
067B EC84             (  cowin_beta5.asm):01229                  ldd   ,x             get group/buffer from parameters
067D FD1157           (  cowin_beta5.asm):01230                  std   >GrfMem+gr0057 Save in Grfdrv mem
0680 17FD39           (  cowin_beta5.asm):01231                  lbsr  L00F7          let grfdrv do the rest
0683 3540             (  cowin_beta5.asm):01232                  puls  u              restore static mem pointer
0685 1700C8           (  cowin_beta5.asm):01233                  lbsr  L06B9          get graphics table pointer
0688 A6A818           (  cowin_beta5.asm):01234                  lda   Wt.GBlk,y      Get graphics cursor memory block #
068B A70B             (  cowin_beta5.asm):01235                  sta   Gt.GBlk,x      save it in graphics table
068D ECA819           (  cowin_beta5.asm):01236                  ldd   Wt.GOff,y      Get graphics cursor offset
0690 ED0C             (  cowin_beta5.asm):01237                  std   Gt.GOff,x      save it in graphics table & return
0692 39               (  cowin_beta5.asm):01238                  rts
                      (  cowin_beta5.asm):01239         
                      (  cowin_beta5.asm):01240         ****************************
                      (  cowin_beta5.asm):01241         * LSet entry point
     0693             (  cowin_beta5.asm):01242         LSet     equ   *
                      (  cowin_beta5.asm):01243                IFNE  H6309
                      (  cowin_beta5.asm):01244                  bsr   L06A0          verify window table
                      (  cowin_beta5.asm):01245                  bcs   L069D          no good, return error 
                      (  cowin_beta5.asm):01246                ELSE
0693 17007D           (  cowin_beta5.asm):01247                  lbsr  L06A0
0696 2578             (  cowin_beta5.asm):01248                  bcs   L069D          no good, return error 
                      (  cowin_beta5.asm):01249                ENDC
0698 A684             (  cowin_beta5.asm):01250                  lda   ,x             Get LSET type from params
069A A72A             (  cowin_beta5.asm):01251                  sta   Wt.LSet,y      store it in window table
069C 16FD1D           (  cowin_beta5.asm):01252                  lbra  L00F7          let grfdrv do the rest
                      (  cowin_beta5.asm):01253         
                      (  cowin_beta5.asm):01254         ****************************
                      (  cowin_beta5.asm):01255         * Border entry point
069F 3440             (  cowin_beta5.asm):01256         Border   pshs  u              preserve static mem
06A1 8D70             (  cowin_beta5.asm):01257                  bsr   L06A0          verify window table
06A3 2569             (  cowin_beta5.asm):01258                  bcs   L069B          not good, return error
06A5 A684             (  cowin_beta5.asm):01259                  lda   ,x             Get border color from parm area
06A7 AE30             (  cowin_beta5.asm):01260                  ldx   Wt.STbl,y      Get screen table ptr
06A9 A705             (  cowin_beta5.asm):01261                  sta   St.Brdr,x      Save as border color in screen tbl
06AB 203A             (  cowin_beta5.asm):01262                  bra   L0669          Flag for GIME update & exit
                      (  cowin_beta5.asm):01263         
                      (  cowin_beta5.asm):01264         ****************************
                      (  cowin_beta5.asm):01265         * FColor/BColor entry point
06AD                  (  cowin_beta5.asm):01266         BColor
06AD 8D64             (  cowin_beta5.asm):01267         FColor   bsr   L06A0          verify window table
06AF 255F             (  cowin_beta5.asm):01268                  bcs   L069D          not good, return error
06B1 A684             (  cowin_beta5.asm):01269                  lda   ,x             Get palette # from param area
06B3 B7115A           (  cowin_beta5.asm):01270                  sta   >GrfMem+gr005A Put in GRFDRV's working palette #
06B6 16FD03           (  cowin_beta5.asm):01271         L064B    lbra  L00F7          Go into GrfDrv
                      (  cowin_beta5.asm):01272         
                      (  cowin_beta5.asm):01273         ****************************
                      (  cowin_beta5.asm):01274         * DefPal entry point
06B9 3440             (  cowin_beta5.asm):01275         DefPal   pshs  u              preserve static mem pointer
06BB 8D56             (  cowin_beta5.asm):01276                  bsr   L06A0          verify window
06BD 254F             (  cowin_beta5.asm):01277                  bcs   L069B          not good, return error
06BF AE30             (  cowin_beta5.asm):01278                  ldx   Wt.STbl,y      Get ptr to screen table
06C1 308810           (  cowin_beta5.asm):01279                  leax  St.Pals,x      Point to palettes in screen table
                      (  cowin_beta5.asm):01280                IFNE  H6309
                      (  cowin_beta5.asm):01281                  ldd   >WGlobal+G.DefPal   Get ptr to system default palettes
                      (  cowin_beta5.asm):01282                  ldw   #16            # palette registers to copy
                      (  cowin_beta5.asm):01283                  tfm   d+,x+          Copy into screen table
                      (  cowin_beta5.asm):01284                ELSE
                      (  cowin_beta5.asm):01285         * 6809 LCB NOTE: Change to use grfdrv copy vector later. Or at least use U to transfer
                      (  cowin_beta5.asm):01286         * 2 bytes at a time. U is restored in L0669, so we can use it freely here
06C4 3420             (  cowin_beta5.asm):01287                  pshs  y
06C6 10BE1019         (  cowin_beta5.asm):01288                  ldy   >WGlobal+G.DefPal   Get ptr to system default palettes
06CA C608             (  cowin_beta5.asm):01289                  ldb   #8             16 bytes to transfer
06CC EEA1             (  cowin_beta5.asm):01290         L064Eb   ldu   ,y++
06CE EF81             (  cowin_beta5.asm):01291                  stu   ,x++
06D0 5A               (  cowin_beta5.asm):01292                  decb
06D1 26F9             (  cowin_beta5.asm):01293                  bne   L064Eb
                      (  cowin_beta5.asm):01294         * Since we are about to exit CoWin anyways, no need to preserve W
                      (  cowin_beta5.asm):01295         *         clra
                      (  cowin_beta5.asm):01296         *         std   >GrfMem+gr00B5
06D3 3520             (  cowin_beta5.asm):01297                  puls  y
                      (  cowin_beta5.asm):01298                ENDC   
06D5 2010             (  cowin_beta5.asm):01299                  bra   L0669          Flag for GIME update & exit
                      (  cowin_beta5.asm):01300         
                      (  cowin_beta5.asm):01301         ****************************
                      (  cowin_beta5.asm):01302         * Palette entry point
06D7 3440             (  cowin_beta5.asm):01303         Palette  pshs  u              preserve static mem pointer
06D9 8D38             (  cowin_beta5.asm):01304                  bsr   L06A0          verify window table
06DB 2531             (  cowin_beta5.asm):01305                  bcs   L069B          not good, return error
06DD EC84             (  cowin_beta5.asm):01306                  ldd   ,x             Get palette # & color
06DF AE30             (  cowin_beta5.asm):01307                  ldx   Wt.STbl,y      Get screen table ptr
06E1 840F             (  cowin_beta5.asm):01308                  anda  #$0f           Only allow palettes 0-15
06E3 8B10             (  cowin_beta5.asm):01309                  adda  #St.Pals       Palette tbl starts @ +$10
06E5 E786             (  cowin_beta5.asm):01310                  stb   a,x            Save in scrn tbl's palette
06E7 5F               (  cowin_beta5.asm):01311         L0669    clrb                 No error
06E8 3540             (  cowin_beta5.asm):01312                  puls  u              restore static mem pointer
06EA B6100A           (  cowin_beta5.asm):01313                  lda   >WGlobal+G.CrDvFl   Are we the current device?
06ED 2703             (  cowin_beta5.asm):01314                  beq   L0673          No, we are done
06EF 6CC823           (  cowin_beta5.asm):01315                  inc   V.ScrChg,u     Yes, flag AltIRQ for screen update & return
06F2 39               (  cowin_beta5.asm):01316         L0673    rts
                      (  cowin_beta5.asm):01317         
                      (  cowin_beta5.asm):01318         ****************************
                      (  cowin_beta5.asm):01319         * PSet/Font entry point
06F3                  (  cowin_beta5.asm):01320         Font
06F3 8D1E             (  cowin_beta5.asm):01321         PSet     bsr   L06A0          verify window table
06F5 2519             (  cowin_beta5.asm):01322                  bcs   L069D          not good, return error
06F7 EC84             (  cowin_beta5.asm):01323                  ldd   ,x             Get group & buffer #'s from parm area
06F9 2705             (  cowin_beta5.asm):01324                  beq   L0682          If caller wants to disable pattern set, skip
06FB 5D               (  cowin_beta5.asm):01325                  tstb                 Is buffer=0?
06FC 102701B3         (  cowin_beta5.asm):01326                  lbeq  L0812          Yes, illegal
0700 FD1157           (  cowin_beta5.asm):01327         L0682    std   >GrfMem+gr0057 Save group & buffer #'s
0703 16FCB6           (  cowin_beta5.asm):01328                  lbra  L00F7          Go to GrfDrv
                      (  cowin_beta5.asm):01329         
                      (  cowin_beta5.asm):01330         ****************************
                      (  cowin_beta5.asm):01331         * KillBuf entry point
0706 8D0B             (  cowin_beta5.asm):01332         KillBuf  bsr   L06A0          verify window table
0708 2506             (  cowin_beta5.asm):01333                  bcs   L069D          not good, return error
070A EC84             (  cowin_beta5.asm):01334                  ldd   ,x             Get buffer & group #
070C 20F2             (  cowin_beta5.asm):01335                  bra   L0682          Save them
                      (  cowin_beta5.asm):01336         
                      (  cowin_beta5.asm):01337         * Return undefined window error
070E 3262             (  cowin_beta5.asm):01338         L069B    leas  2,s            Eat stack
0710 C6C4             (  cowin_beta5.asm):01339         L069D    ldb   #E$WUndef      Window undefined error
0712 39               (  cowin_beta5.asm):01340                  rts   
                      (  cowin_beta5.asm):01341         
                      (  cowin_beta5.asm):01342         * Get window table pointer & verify it
                      (  cowin_beta5.asm):01343         * Entry: X=parm ptr
                      (  cowin_beta5.asm):01344         *        Y=Path dsc. ptr
                      (  cowin_beta5.asm):01345         *        U=Device mem ptr
                      (  cowin_beta5.asm):01346         * Exit: Y=Window tbl ptr
                      (  cowin_beta5.asm):01347         *       X=Parm ptr
0713 E6C835           (  cowin_beta5.asm):01348         L06A0    ldb   V.WinNum,u     Get window # from device mem
0716 8640             (  cowin_beta5.asm):01349                  lda   #Wt.Siz        Size of each entry
0718 3D               (  cowin_beta5.asm):01350                  mul                  Calculate window table offset
0719 C31290           (  cowin_beta5.asm):01351                  addd  #WinBase       Point to specific window table entry
                      (  cowin_beta5.asm):01352                IFNE  H6309
                      (  cowin_beta5.asm):01353                  tfr   d,w            Move to W (has indexing mode)
                      (  cowin_beta5.asm):01354                  lda   Wt.STbl,w      Get MSB of scrn tbl ptr
                      (  cowin_beta5.asm):01355                ELSE
                      (  cowin_beta5.asm):01356         * Can't use DP scratch var since need flags preserved
071C 3420             (  cowin_beta5.asm):01357                  pshs  y
071E 1F02             (  cowin_beta5.asm):01358                  tfr   d,y
0720 FD11B5           (  cowin_beta5.asm):01359                  std   >GrfMem+gr00B5
0723 A630             (  cowin_beta5.asm):01360                  lda   Wt.STbl,y
0725 3520             (  cowin_beta5.asm):01361                  puls  y
                      (  cowin_beta5.asm):01362                ENDC
0727 2E11             (  cowin_beta5.asm):01363                  bgt   VerExit        If $01-$7f, should be ok
0729 81FF             (  cowin_beta5.asm):01364                  cmpa  #$ff           Unused?
072B 2613             (  cowin_beta5.asm):01365                  bne   L0697          No, in range of $80-$FE or $00, illegal
                      (  cowin_beta5.asm):01366                IFNE  H6309
                      (  cowin_beta5.asm):01367                  pshsw                Preserve window tbl ptr
                      (  cowin_beta5.asm):01368                  pshs  x              Preserve param ptr
                      (  cowin_beta5.asm):01369                  tfr   y,x            Move path dsc. ptr to X
                      (  cowin_beta5.asm):01370                  tfr   w,y            Move window tbl ptr to Y
                      (  cowin_beta5.asm):01371                ELSE
072D 3430             (  cowin_beta5.asm):01372                  pshs  x,y
072F BE11B5           (  cowin_beta5.asm):01373                  ldx   >GrfMem+gr00B5
0732 AF62             (  cowin_beta5.asm):01374                  stx   2,s            pshsw
0734 1E21             (  cowin_beta5.asm):01375                  exg   y,x            tfr y,x; tfr w,y
                      (  cowin_beta5.asm):01376                ENDC
0736 8D27             (  cowin_beta5.asm):01377                  bsr   L06DD          Window doesn't exist, see if we can create
0738 35B0             (  cowin_beta5.asm):01378                  puls  x,y,pc         Get parm ptr, window tbl ptr & return
                      (  cowin_beta5.asm):01379         
                      (  cowin_beta5.asm):01380         * X still parm ptr, just move window tbl ptr & return
073A 4F               (  cowin_beta5.asm):01381         VerExit  clra                 No error
                      (  cowin_beta5.asm):01382                IFNE  H6309
                      (  cowin_beta5.asm):01383                  tfr   w,y            Move window tbl ptr to Y
                      (  cowin_beta5.asm):01384                ELSE
073B 10BE11B5         (  cowin_beta5.asm):01385                  ldy   >GrfMem+gr00B5
                      (  cowin_beta5.asm):01386                ENDC
073F 39               (  cowin_beta5.asm):01387                  rts
                      (  cowin_beta5.asm):01388         
                      (  cowin_beta5.asm):01389         * Return illegal window definition error
0740 53               (  cowin_beta5.asm):01390         L0697    comb                 set carry
0741 C6C3             (  cowin_beta5.asm):01391                  ldb   #E$IWDef       Illegal window definition error
0743 39               (  cowin_beta5.asm):01392                  rts
                      (  cowin_beta5.asm):01393         
                      (  cowin_beta5.asm):01394         * Get window table ptr for current window
                      (  cowin_beta5.asm):01395         * Entry: U=Static memory pointer
                      (  cowin_beta5.asm):01396         * Exit : Y=Window tbl ptr
0744 E6C835           (  cowin_beta5.asm):01397         L06AE    ldb   V.WinNum,u     Get window # from device mem
0747 8640             (  cowin_beta5.asm):01398                  lda   #Wt.Siz        Size of each entry
0749 3D               (  cowin_beta5.asm):01399                  mul                  Calculate window table offset
074A C31290           (  cowin_beta5.asm):01400                  addd  #WinBase       Point to specific window tbl entry
074D 1F02             (  cowin_beta5.asm):01401                  tfr   d,y            Put into Y & return
074F 39               (  cowin_beta5.asm):01402                  rts   
                      (  cowin_beta5.asm):01403         
                      (  cowin_beta5.asm):01404         * Get graphics table pointer for current window
                      (  cowin_beta5.asm):01405         * Entry: U=Static memory pointer
0750 3406             (  cowin_beta5.asm):01406         L06B9    pshs  d              Preserve D
0752 A6C835           (  cowin_beta5.asm):01407                  lda   V.WinNum,u     Get window #
0755 C612             (  cowin_beta5.asm):01408                  ldb   #GTabSz        Size of each entry
0757 3D               (  cowin_beta5.asm):01409                  mul                  Calculate offset
0758 BE1075           (  cowin_beta5.asm):01410                  ldx   >WGlobal+G.GfxTbl   Get ptr to GFX tables
                      (  cowin_beta5.asm):01411                IFNE  H6309
                      (  cowin_beta5.asm):01412                  addr  d,x            Point to table entry
                      (  cowin_beta5.asm):01413                ELSE
075B 308B             (  cowin_beta5.asm):01414                  leax  d,x            Point to table entry
                      (  cowin_beta5.asm):01415                ENDC
075D 3586             (  cowin_beta5.asm):01416                  puls  d,pc           Restore D & return
                      (  cowin_beta5.asm):01417         
                      (  cowin_beta5.asm):01418         * Verify window table
                      (  cowin_beta5.asm):01419         * Entry: Y=Window table ptr
                      (  cowin_beta5.asm):01420         * Unused window, check if device dsc. default is valid
075F 3410             (  cowin_beta5.asm):01421         L06DD    pshs  x              Preserve path dsc ptr
0761 AE03             (  cowin_beta5.asm):01422                  ldx   PD.DEV,x       Get device table ptr
0763 3410             (  cowin_beta5.asm):01423                  pshs  x              Preserve it
0765 AE04             (  cowin_beta5.asm):01424                  ldx   V$DESC,x       Get device dsc ptr
0767 E6882F           (  cowin_beta5.asm):01425                  ldb   IT.VAL,x       Window dsc contain a valid type?
076A 2604             (  cowin_beta5.asm):01426                  bne   L06EE          Yes, skip ahead
076C 43               (  cowin_beta5.asm):01427                  coma                 Otherwise, exit with error
076D 3264             (  cowin_beta5.asm):01428         L06EB    leas  4,s            Eat stack & return
076F 39               (  cowin_beta5.asm):01429                  rts   
                      (  cowin_beta5.asm):01430         
                      (  cowin_beta5.asm):01431         * Unused window with valid device dsc type
                      (  cowin_beta5.asm):01432         * X=Ptr to window's device dsc.
0770 A68830           (  cowin_beta5.asm):01433         L06EE    lda   IT.STY,x       Get descriptor's screen type
0773 170104           (  cowin_beta5.asm):01434                  lbsr  L07E0          Go get GrfDrv internal screen type
0776 2404             (  cowin_beta5.asm):01435                  bcc   L06FA          Good window type found, continue
0778 3264             (  cowin_beta5.asm):01436                  leas  4,s            Eat stack & exit with error
077A 20C4             (  cowin_beta5.asm):01437                  bra   L0697
                      (  cowin_beta5.asm):01438         
                      (  cowin_beta5.asm):01439         * Valid screen type
077C F71160           (  cowin_beta5.asm):01440         L06FA    stb   >GrfMem+Gr.STYMk   Preserve GrfDrv window type
077F C1FF             (  cowin_beta5.asm):01441                  cmpb  #$FF           Current screen?
0781 2708             (  cowin_beta5.asm):01442                  beq   L070B          Yes, skip ahead
0783 A68835           (  cowin_beta5.asm):01443                  lda   IT.BDC,x       Get default border color
0786 B7115A           (  cowin_beta5.asm):01444                  sta   >GrfMem+gr005A Put into palette area in grfdrv mem
0789 200A             (  cowin_beta5.asm):01445                  bra   L070F
                      (  cowin_beta5.asm):01446         
                      (  cowin_beta5.asm):01447         * If window is supposed to be on same screen, do this
078B 3410             (  cowin_beta5.asm):01448         L070B    pshs  x              preserve device descriptor pointer
078D AE64             (  cowin_beta5.asm):01449                  ldx   4,s            get path descriptor pointer
078F 8D58             (  cowin_beta5.asm):01450                  bsr   L075C          Set up screen table ptr in window table
0791 3510             (  cowin_beta5.asm):01451                  puls  x              restore device descriptor pointer
0793 25D8             (  cowin_beta5.asm):01452                  bcs   L06EB          If error, eat stack & leave
                      (  cowin_beta5.asm):01453         
0795 EC8831           (  cowin_beta5.asm):01454         L070F    ldd   IT.CPX,x       Get start X coordinate from dsc
                      (  cowin_beta5.asm):01455                IFNE  H6309
                      (  cowin_beta5.asm):01456                  ldw   IT.COL,x
                      (  cowin_beta5.asm):01457                  stq   Wt.CPX,y       Put into window table
                      (  cowin_beta5.asm):01458                ELSE
0798 ED35             (  cowin_beta5.asm):01459                  std   Wt.CPX,y
079A EC882C           (  cowin_beta5.asm):01460                  ldd   IT.COL,x
079D FD11B5           (  cowin_beta5.asm):01461                  std   >GrfMem+gr00B5
07A0 ED37             (  cowin_beta5.asm):01462                  std   Wt.CPX+2,y
                      (  cowin_beta5.asm):01463                ENDC
07A2 EC8833           (  cowin_beta5.asm):01464                  ldd   IT.FGC,x       Get foreground & background default colors
07A5 ED26             (  cowin_beta5.asm):01465                  std   Wt.Fore,y      Save in window table
07A7 C604             (  cowin_beta5.asm):01466                  ldb   #$04           GrfDrv function: DWSet
07A9 17FBDF           (  cowin_beta5.asm):01467                  lbsr  L0101          Go make the window
07AC 3510             (  cowin_beta5.asm):01468                  puls  x              Get device dsc. ptr back
07AE 2408             (  cowin_beta5.asm):01469                  bcc   L0730          no error, skip ahead
07B0 CCFFFF           (  cowin_beta5.asm):01470                  ldd   #$FFFF         Error, Reset window table entry as 'unused'
07B3 ED30             (  cowin_beta5.asm):01471                  std   Wt.STbl,y
07B5 3262             (  cowin_beta5.asm):01472                  leas  2,s            Eat stack & return
07B7 39               (  cowin_beta5.asm):01473         L075B    rts   
                      (  cowin_beta5.asm):01474         
                      (  cowin_beta5.asm):01475         * Last part of DWSet
07B8 AE02             (  cowin_beta5.asm):01476         L0730    ldx   V$STAT,x       Get device's static mem ptr
07BA 6C881E           (  cowin_beta5.asm):01477                  inc   V.InfVld,x     Set flag indicating rest of table is valid
07BD 3384             (  cowin_beta5.asm):01478                  leau  ,x             Point U to static storage
07BF 1F20             (  cowin_beta5.asm):01479                  tfr   y,d            Move window table ptr to D
07C1 3520             (  cowin_beta5.asm):01480                  puls  y              Get path dsc. ptr back into Y
07C3 3406             (  cowin_beta5.asm):01481                  pshs  d              Save window table ptr on stack
07C5 17FCCB           (  cowin_beta5.asm):01482                  lbsr  L0436          Set up some default size values
07C8 3520             (  cowin_beta5.asm):01483                  puls  y              Get window table ptr back
07CA 7D100A           (  cowin_beta5.asm):01484                  tst   >WGlobal+G.CrDvFl Are we current device?
07CD 27E8             (  cowin_beta5.asm):01485                  beq   L075B          No, skip ahead
                      (  cowin_beta5.asm):01486                IFNE  H6309
                      (  cowin_beta5.asm):01487                  ldw   >WGlobal+G.CurDev  Get current device's static mem ptr
                      (  cowin_beta5.asm):01488                  stw   >WGlobal+G.PrWMPt  Move to old device's static mem ptr
                      (  cowin_beta5.asm):01489                  lda   >V.ULCase,w    Get old device's special keyboard flags
                      (  cowin_beta5.asm):01490                ELSE
                      (  cowin_beta5.asm):01491         * 6809 - use DP scratch var here instead of pshs/puls x. LCB
07CF 3410             (  cowin_beta5.asm):01492                  pshs  x
07D1 BE1020           (  cowin_beta5.asm):01493                  ldx   >WGlobal+G.CurDev   Get current device's static mem ptr 
07D4 BF1022           (  cowin_beta5.asm):01494                  stx   >WGlobal+G.PrWMPt   Move to old device's static mem ptr
07D7 BF11B5           (  cowin_beta5.asm):01495                  stx   >GrfMem+gr00B5 
07DA A6890021         (  cowin_beta5.asm):01496                  lda   >V.ULCase,x    Get old device's special keyboard flags
07DE 3510             (  cowin_beta5.asm):01497                  puls  x
                      (  cowin_beta5.asm):01498                ENDC 
07E0 A78821           (  cowin_beta5.asm):01499                  sta   V.ULCase,x   Save in new device (kybrd mouse in Gshell)
07E3 BF1020           (  cowin_beta5.asm):01500                  stx   >WGlobal+G.CurDev     Make it the current device's static mem ptr
07E6 16057B           (  cowin_beta5.asm):01501                  lbra  L0C86      Select the window & do setmouse in VTIO
                      (  cowin_beta5.asm):01502         
                      (  cowin_beta5.asm):01503         * If current screen window, go here
                      (  cowin_beta5.asm):01504         * Entry: A=Screen type from caller
                      (  cowin_beta5.asm):01505         *        B=Internal screen type
                      (  cowin_beta5.asm):01506         *        X=Path descriptor ptr
                      (  cowin_beta5.asm):01507         *        Y=Window table ptr
                      (  cowin_beta5.asm):01508         * Exit: Screen table ptr in window dsc. table is set
07E9 81FF             (  cowin_beta5.asm):01509         L075C    cmpa  #$FF           Current displayed screen?
07EB 260C             (  cowin_beta5.asm):01510                  bne   L076D          No, must be process' current screen
07ED FC1130           (  cowin_beta5.asm):01511                  ldd   >GrfMem+gr0030 Get current screen table ptr
07F0 2604             (  cowin_beta5.asm):01512                  bne   L076A          There is one, continue
07F2 53               (  cowin_beta5.asm):01513                  comb                 Otherwise, window undefined error
07F3 16FF1A           (  cowin_beta5.asm):01514                  lbra  L069D
                      (  cowin_beta5.asm):01515         
07F6 ED30             (  cowin_beta5.asm):01516         L076A    std   Wt.STbl,y      Store screen table ptr in window table & return
07F8 39               (  cowin_beta5.asm):01517                  rts   
                      (  cowin_beta5.asm):01518         
                      (  cowin_beta5.asm):01519         * Verify that current process window is compatible with current window
                      (  cowin_beta5.asm):01520         * Entry: X=Path descriptor pointer
                      (  cowin_beta5.asm):01521         *        Y=Window table pointer of current window
07F9 3430             (  cowin_beta5.asm):01522         L076D    pshs  x,y            Preserve window table ptr & path dsc. ptr
07FB 9E50             (  cowin_beta5.asm):01523                  ldx   <D.Proc        Get current process dsc. ptr
07FD E68900AC         (  cowin_beta5.asm):01524                  ldb   P$SelP,x       Get selected path for current window
0801 17FDE6           (  cowin_beta5.asm):01525                  lbsr  L0592          Get device table ptr for the path (into Y)
0804 AEE4             (  cowin_beta5.asm):01526                  ldx   ,s             Get back path dsc. ptr
0806 AE03             (  cowin_beta5.asm):01527                  ldx   PD.DEV,x       Get device table entry address
0808 EC84             (  cowin_beta5.asm):01528                  ldd   V$DRIV,x       drivers match?
080A 10A3A4           (  cowin_beta5.asm):01529                  cmpd  V$DRIV,y
080D 2624             (  cowin_beta5.asm):01530                  bne   L07AB          No, they aren't compatible, exit with error
080F 10AE22           (  cowin_beta5.asm):01531                  ldy   V$STAT,y       Get device driver static storage ptr
0812 A626             (  cowin_beta5.asm):01532                  lda   V.TYPE,y       Get device type
0814 2A1D             (  cowin_beta5.asm):01533                  bpl   L07AB          not a window, exit with error
0816 A6A81D           (  cowin_beta5.asm):01534                  lda   V.WinType,y    Get type of window flag
0819 2618             (  cowin_beta5.asm):01535                  bne   L07AB          If not a Grf/CoWin window, error
081B A6A81E           (  cowin_beta5.asm):01536                  lda   V.InfVld,y     Get 'device mem info is valid' flag
081E 2713             (  cowin_beta5.asm):01537                  beq   L07AB          If clear, error
0820 33A4             (  cowin_beta5.asm):01538                  leau  ,y             Point U to static mem
0822 17FF1F           (  cowin_beta5.asm):01539                  lbsr  L06AE          Get window table ptr for process window
0825 A630             (  cowin_beta5.asm):01540                  lda   Wt.STbl,y      screen table active?
0827 2B0A             (  cowin_beta5.asm):01541                  bmi   L07AB          no, exit with illegal window def. error
0829 3262             (  cowin_beta5.asm):01542                  leas  2,s            Eat window device dsc. ptr
082B EC30             (  cowin_beta5.asm):01543                  ldd   Wt.STbl,y      Get screen table ptr of process window
082D 3520             (  cowin_beta5.asm):01544                  puls  y              Get window tbl ptr
082F ED30             (  cowin_beta5.asm):01545                  std   Wt.STbl,y      Put into current window's screen tbl ptr
0831 4F               (  cowin_beta5.asm):01546                  clra                 No error & return
0832 39               (  cowin_beta5.asm):01547                  rts
                      (  cowin_beta5.asm):01548         
0833 3530             (  cowin_beta5.asm):01549         L07AB    puls  y,x            Restore regs & illegal window definition error
0835 16FF08           (  cowin_beta5.asm):01550                  lbra  L0697
                      (  cowin_beta5.asm):01551         
                      (  cowin_beta5.asm):01552         * Search for empty window table & setup window links
                      (  cowin_beta5.asm):01553         * Entry: U=Device static mem ptr
                      (  cowin_beta5.asm):01554         * Exit : Y=New window table pointer
0838 3416             (  cowin_beta5.asm):01555         L07B0    pshs  d,x            Save regs used
083A 31C4             (  cowin_beta5.asm):01556                  leay  ,u             Point to device static storage
083C 8E1290           (  cowin_beta5.asm):01557                  ldx   #WinBase       swap it into X for ABX
083F CC0040           (  cowin_beta5.asm):01558                  ldd   #Wt.Siz        A=Start entry #(0), B=Entry size
                      (  cowin_beta5.asm):01559                IFNE  H6309
0842                  (  cowin_beta5.asm):01560         L07B8    ldw   Wt.STbl,x      get screen table pointer
                      (  cowin_beta5.asm):01561                ELSE
                      (  cowin_beta5.asm):01562         * Can't use scratch var since need flags preserved
0842 3420             (  cowin_beta5.asm):01563         L07B8    pshs  y
0844 10AE10           (  cowin_beta5.asm):01564                  ldy   Wt.STbl,x
0847 10BF11B5         (  cowin_beta5.asm):01565                  sty   >GrfMem+gr00B5
084B 3520             (  cowin_beta5.asm):01566                  puls  y
                      (  cowin_beta5.asm):01567                ENDC
084D 2A1A             (  cowin_beta5.asm):01568                  bpl   L07CF          if high bit clear, table used, skip to next
                      (  cowin_beta5.asm):01569                IFNE  H6309
                      (  cowin_beta5.asm):01570                  cmpf  #$FF           if LSB not a $ff, then check next one
                      (  cowin_beta5.asm):01571                ELSE
                      (  cowin_beta5.asm):01572         * Can't use scratch var since need flags preserved
084F 3404             (  cowin_beta5.asm):01573                  pshs  b
0851 F611B6           (  cowin_beta5.asm):01574                  ldb   >GrfMem+gr00B5+1
0854 C1FF             (  cowin_beta5.asm):01575                  cmpb  #$FF
0856 3504             (  cowin_beta5.asm):01576                  puls  b
                      (  cowin_beta5.asm):01577                ENDC
0858 260F             (  cowin_beta5.asm):01578                  bne   L07CF
                      (  cowin_beta5.asm):01579         * Found empty entry, link it in & make current device (static mem) point to
                      (  cowin_beta5.asm):01580         * new table entry
085A E6A835           (  cowin_beta5.asm):01581                  ldb   V.WinNum,y     Get current window table #
085D E712             (  cowin_beta5.asm):01582                  stb   Wt.BLnk,x      Save it as back link #
085F A7A835           (  cowin_beta5.asm):01583                  sta   V.WinNum,y     Save new window table entry #
0862 6A11             (  cowin_beta5.asm):01584                  dec   Wt.STbl+1,x    make LSB of screen table ptr $fe
0864 1F12             (  cowin_beta5.asm):01585                  tfr   x,y            move window table pointer to Y
0866 5F               (  cowin_beta5.asm):01586                  clrb                 Clear carry
0867 3596             (  cowin_beta5.asm):01587                  puls  d,x,pc         Restore & return
                      (  cowin_beta5.asm):01588         
0869 4C               (  cowin_beta5.asm):01589         L07CF    inca                 Move to next table #
086A 8120             (  cowin_beta5.asm):01590                  cmpa  #$20           Past max table #?
086C 2203             (  cowin_beta5.asm):01591                  bhi   L07D9          Yes, exit with error
086E 3A               (  cowin_beta5.asm):01592                  abx                  Nope, point to next one
086F 20D1             (  cowin_beta5.asm):01593                  bra   L07B8          Go try again
                      (  cowin_beta5.asm):01594         
                      (  cowin_beta5.asm):01595         * BUG @ approx L1789, it calls this routine, but does NOT check for a window
                      (  cowin_beta5.asm):01596         * table full error... it just stores Y assuming it worked.
0871 1F12             (  cowin_beta5.asm):01597         L07D9    tfr   x,y            move window table pointer to Y
0873 53               (  cowin_beta5.asm):01598                  comb                 Set carry
0874 C6C1             (  cowin_beta5.asm):01599                  ldb   #E$TblFul      Get table full error code
0876 E761             (  cowin_beta5.asm):01600                  stb   1,s            Save it in B on stack for restore
0878 3596             (  cowin_beta5.asm):01601                  puls  d,x,pc         Restore & return
                      (  cowin_beta5.asm):01602         
                      (  cowin_beta5.asm):01603         * Convert STY mark to internal type
                      (  cowin_beta5.asm):01604         * Entry: A=Requested screen type from parameters
                      (  cowin_beta5.asm):01605         * Exit : B=Internal screen type marker
087A 3422             (  cowin_beta5.asm):01606         L07E0    pshs  a,y            Preserve sty & window entry
087C 4C               (  cowin_beta5.asm):01607                  inca                 Bump up so $FF type is now 0
087D 8109             (  cowin_beta5.asm):01608                  cmpa  #9             Past maximum allowable?
087F 220C             (  cowin_beta5.asm):01609                  bhi   L07F5          Yes, exit with error
0881 318C0C           (  cowin_beta5.asm):01610                  leay  <L07F9,pc      Point to conversion table (base 0)
0884 E6A6             (  cowin_beta5.asm):01611                  ldb   a,y            Get internal code
0886 C1FE             (  cowin_beta5.asm):01612                  cmpb  #$FE           Invalid?
0888 2703             (  cowin_beta5.asm):01613                  beq   L07F5          Yes, exit
088A 4F               (  cowin_beta5.asm):01614                  clra                 Clear carry
088B 35A2             (  cowin_beta5.asm):01615                  puls  a,y,pc         Restore & return
                      (  cowin_beta5.asm):01616         
088D 53               (  cowin_beta5.asm):01617         L07F5    comb                 Set carry
088E 35A2             (  cowin_beta5.asm):01618                  puls  y,a,pc         Restore regs & return
                      (  cowin_beta5.asm):01619         
                      (  cowin_beta5.asm):01620         * Screen type conversion table
0890 FF               (  cowin_beta5.asm):01621         L07F9    fcb   $ff            Current screen, sty=$ff
0891 FF               (  cowin_beta5.asm):01622                  fcb   $ff            Current screen, sty=$00
0892 86               (  cowin_beta5.asm):01623                  fcb   $86            40 column, sty=$01
0893 85               (  cowin_beta5.asm):01624                  fcb   $85            80 column, sty=$02
0894 FE               (  cowin_beta5.asm):01625                  fcb   $fe            Invalid, sty=$03
0895 FE               (  cowin_beta5.asm):01626                  fcb   $fe            Invalid, sty=$04
0896 01               (  cowin_beta5.asm):01627                  fcb   $01            640 2 color, sty=$05
0897 02               (  cowin_beta5.asm):01628                  fcb   $02            320 4 color, sty=$06
0898 03               (  cowin_beta5.asm):01629                  fcb   $03            640 4 color, sty=$07
0899 04               (  cowin_beta5.asm):01630                  fcb   $04            320 16 color, sty=$08
                      (  cowin_beta5.asm):01631         
089A 53               (  cowin_beta5.asm):01632         BadDef   comb  
089B C6BB             (  cowin_beta5.asm):01633                  ldb   #E$IllArg
089D 39               (  cowin_beta5.asm):01634                  rts   
                      (  cowin_beta5.asm):01635         
                      (  cowin_beta5.asm):01636         ****************************
                      (  cowin_beta5.asm):01637         * DefGPB entry point
                      (  cowin_beta5.asm):01638         * Entry: U=Static memory pointer
                      (  cowin_beta5.asm):01639         *        Y=Path descriptor pointer
                      (  cowin_beta5.asm):01640         *        X=Parameter pointer
089E 17FE72           (  cowin_beta5.asm):01641         DefGPB   lbsr  L06A0          verify window table
08A1 1025FE6B         (  cowin_beta5.asm):01642                  lbcs  L069D          not good, return error
                      (  cowin_beta5.asm):01643                IFNE  H6309
                      (  cowin_beta5.asm):01644                  ldq   ,x             D=Group/Buffer W=Length
                      (  cowin_beta5.asm):01645                ELSE
08A5 EC02             (  cowin_beta5.asm):01646                  ldd   2,x
08A7 FD11B5           (  cowin_beta5.asm):01647                  std   >GrfMem+gr00B5
08AA EC84             (  cowin_beta5.asm):01648                  ldd   ,x
                      (  cowin_beta5.asm):01649                ENDC
08AC 4D               (  cowin_beta5.asm):01650                  tsta                 group a zero?
08AD 2704             (  cowin_beta5.asm):01651                  beq   L0812          yes, illegal return error
08AF 81FF             (  cowin_beta5.asm):01652                  cmpa  #$FF           Trying to use overlay group?
08B1 2604             (  cowin_beta5.asm):01653                  bne   L0816          no, go on
                      (  cowin_beta5.asm):01654         * Return bad buffer error
08B3 53               (  cowin_beta5.asm):01655         L0812    comb                 set carry
08B4 C6C2             (  cowin_beta5.asm):01656                  ldb   #E$BadBuf      get error code
08B6 39               (  cowin_beta5.asm):01657                  rts                  return to caller
                      (  cowin_beta5.asm):01658         
                      (  cowin_beta5.asm):01659         * check buffer #
08B7 5D               (  cowin_beta5.asm):01660         L0816    tstb                 buffer a zero?
08B8 27F9             (  cowin_beta5.asm):01661                  beq   L0812          yes, illegal return error
                      (  cowin_beta5.asm):01662                IFNE  H6309
                      (  cowin_beta5.asm):01663                  tstw                 length a zero?
                      (  cowin_beta5.asm):01664                ELSE
                      (  cowin_beta5.asm):01665         * Can't use scratch var since need flags preserved
08BA 3406             (  cowin_beta5.asm):01666                  pshs  d
08BC FC11B5           (  cowin_beta5.asm):01667                  ldd   >GrfMem+gr00B5
08BF 3506             (  cowin_beta5.asm):01668                  puls  d
                      (  cowin_beta5.asm):01669                ENDC
08C1 27D7             (  cowin_beta5.asm):01670                  beq   BadDef         yes, return error
08C3 FD1157           (  cowin_beta5.asm):01671                  std   >GrfMem+gr0057 save group/buffer #'s in global mem
                      (  cowin_beta5.asm):01672                IFNE  H6309
                      (  cowin_beta5.asm):01673                  stw   >GrfMem+gr0080 save length in global mem
                      (  cowin_beta5.asm):01674                ELSE
                      (  cowin_beta5.asm):01675         * 6809 LCB - *Might* be able to use scratch DP var instead of pshs/puls D.
08C6 3406             (  cowin_beta5.asm):01676                  pshs  d
08C8 FC11B5           (  cowin_beta5.asm):01677                  ldd   >GrfMem+gr00B5
08CB FD1180           (  cowin_beta5.asm):01678                  std   >GrfMem+gr0080 save length in global mem
08CE 3506             (  cowin_beta5.asm):01679                  puls  d
                      (  cowin_beta5.asm):01680                ENDC 
08D0 16FAE9           (  cowin_beta5.asm):01681         L0822    lbra  L00F7          let grfdrv do the rest
                      (  cowin_beta5.asm):01682         
                      (  cowin_beta5.asm):01683         ****************************
                      (  cowin_beta5.asm):01684         * GetBlk entry point
                      (  cowin_beta5.asm):01685         * Entry: U=Static memory pointer
                      (  cowin_beta5.asm):01686         *        Y=Path descriptor pointer
                      (  cowin_beta5.asm):01687         *        X=Parameter pointer
08D3 17FE3D           (  cowin_beta5.asm):01688         GetBlk   lbsr  L06A0          verify window table
08D6 1025FE36         (  cowin_beta5.asm):01689                  lbcs  L069D          couldn't get it, return error
08DA 8D19             (  cowin_beta5.asm):01690                  bsr   L0849          check group/buffer #'s & move upper left coords
08DC 25D5             (  cowin_beta5.asm):01691                  bcs   L0812          error, return bad buffer
08DE 8D29             (  cowin_beta5.asm):01692                  bsr   L085C          get X/Y sizes
08E0 1024FAD8         (  cowin_beta5.asm):01693                  lbcc  L00F7          let grfdrv do the rest if no error
08E4 C6BF             (  cowin_beta5.asm):01694         SmlBuf   ldb   #E$BufSiz      get error code & return
08E6 39               (  cowin_beta5.asm):01695                  rts
                      (  cowin_beta5.asm):01696         
                      (  cowin_beta5.asm):01697         ****************************
                      (  cowin_beta5.asm):01698         * PutBlk entry point
08E7 17FE29           (  cowin_beta5.asm):01699         PutBlk   lbsr  L06A0          verify window table
08EA 1025FE22         (  cowin_beta5.asm):01700                  lbcs  L069D          exit if error
08EE 8D05             (  cowin_beta5.asm):01701                  bsr   L0849          get parameters
08F0 25C1             (  cowin_beta5.asm):01702                  bcs   L0812          exit if error
08F2 16FAC7           (  cowin_beta5.asm):01703                  lbra  L00F7          let grfdrv do rest
                      (  cowin_beta5.asm):01704         
                      (  cowin_beta5.asm):01705         * Check passed Group & buffer parameters and move start co-ordinates
08F5 EC81             (  cowin_beta5.asm):01706         L0849    ldd   ,x++           get group/buffer #'s
08F7 4D               (  cowin_beta5.asm):01707                  tsta                 group a zero?
08F8 2729             (  cowin_beta5.asm):01708                  beq   L086E          yes, return error
08FA 81FF             (  cowin_beta5.asm):01709                  cmpa  #$FF           trying to use overlay?
08FC 2725             (  cowin_beta5.asm):01710                  beq   L086E          yes, return error
08FE 5D               (  cowin_beta5.asm):01711                  tstb                 buffer a zero?
08FF 2722             (  cowin_beta5.asm):01712                  beq   L086E          yes, return error
0901 FD1157           (  cowin_beta5.asm):01713                  std   >GrfMem+gr0057 save group/buffer to global memory
0904 1701F9           (  cowin_beta5.asm):01714                  lbsr  L0A32          move start coords
0907 4F               (  cowin_beta5.asm):01715                  clra                 clear error & return
0908 39               (  cowin_beta5.asm):01716                  rts
                      (  cowin_beta5.asm):01717         
                      (  cowin_beta5.asm):01718         * Parse passed X/Y sizes & move if ok
                      (  cowin_beta5.asm):01719         * Entry: X=Parameter pointer
                      (  cowin_beta5.asm):01720         * Exit : X - Incremented by 4
                      (  cowin_beta5.asm):01721                IFNE  H6309
0909                  (  cowin_beta5.asm):01722         L085C    ldq   ,x             D=X Size, W=Y size
                      (  cowin_beta5.asm):01723                  tstd                 X size a zero?
                      (  cowin_beta5.asm):01724                ELSE
0909 EC02             (  cowin_beta5.asm):01725         L085C    ldd   2,x
090B FD11B5           (  cowin_beta5.asm):01726                  std   >GrfMem+gr00B5
090E EC84             (  cowin_beta5.asm):01727                  ldd   ,x
                      (  cowin_beta5.asm):01728                ENDC
0910 2711             (  cowin_beta5.asm):01729                  beq   L086E          yes, return error
                      (  cowin_beta5.asm):01730                IFNE  H6309
                      (  cowin_beta5.asm):01731                  tstw                 Y size a zero?
                      (  cowin_beta5.asm):01732                ELSE
0912 EC02             (  cowin_beta5.asm):01733                  ldd   2,x
                      (  cowin_beta5.asm):01734                ENDC
0914 270D             (  cowin_beta5.asm):01735                  beq   L086E          yes, return error
                      (  cowin_beta5.asm):01736                IFNE  H6309
                      (  cowin_beta5.asm):01737                  stq   >GrfMem+gr004F save sizes into grfdrv mem
                      (  cowin_beta5.asm):01738                ELSE
0916 FD1151           (  cowin_beta5.asm):01739                  std   >GrfMem+gr004F+2   save sizes into grfdrv mem
0919 EC84             (  cowin_beta5.asm):01740                  ldd   ,x
091B FD114F           (  cowin_beta5.asm):01741                  std   >GrfMem+gr004F save sizes into grfdrv mem
                      (  cowin_beta5.asm):01742                ENDC
091E C604             (  cowin_beta5.asm):01743                  ldb   #4             adjust parameter pointer
0920 3A               (  cowin_beta5.asm):01744                  abx   
0921 4F               (  cowin_beta5.asm):01745         L086C    clra                 clear errors & return
0922 39               (  cowin_beta5.asm):01746                  rts
                      (  cowin_beta5.asm):01747         
0923 43               (  cowin_beta5.asm):01748         L086E    coma                 Flag error & return
0924 39               (  cowin_beta5.asm):01749                  rts
                      (  cowin_beta5.asm):01750         
                      (  cowin_beta5.asm):01751         ****************************
                      (  cowin_beta5.asm):01752         * GPLoad entry point
                      (  cowin_beta5.asm):01753         * Entry: U=Static memory pointer
                      (  cowin_beta5.asm):01754         *        Y=Path descriptor pointer
                      (  cowin_beta5.asm):01755         *        X=Parameter pointer
0925 3460             (  cowin_beta5.asm):01756         GPLoad   pshs  u,y            save regs
0927 17FE1A           (  cowin_beta5.asm):01757                  lbsr  L06AE          get window table pointer for this window
092A EC81             (  cowin_beta5.asm):01758                  ldd   ,x++           get group & buffer
092C 4D               (  cowin_beta5.asm):01759                  tsta                 group a zero?
092D 2704             (  cowin_beta5.asm):01760                  beq   L087D          yes, return error
092F 81FF             (  cowin_beta5.asm):01761                  cmpa  #$FF           Overlay window group?
0931 2605             (  cowin_beta5.asm):01762                  bne   L0881          no, so far so good
0933 3560             (  cowin_beta5.asm):01763         L087D    puls  u,y            Yes, not allowed for user group, purge stack
                      (  cowin_beta5.asm):01764                IFNE  H6309
                      (  cowin_beta5.asm):01765                  bra   L0812          return error
                      (  cowin_beta5.asm):01766                ELSE
0935 16FF7B           (  cowin_beta5.asm):01767                  lbra  L0812
                      (  cowin_beta5.asm):01768                ENDC
                      (  cowin_beta5.asm):01769         
                      (  cowin_beta5.asm):01770         * parse buffer & screen type parameters
0938 5D               (  cowin_beta5.asm):01771         L0881    tstb                 buffer a zero?
0939 27F8             (  cowin_beta5.asm):01772                  beq   L087D          yes, return error
093B FD1157           (  cowin_beta5.asm):01773                  std   >GrfMem+gr0057 save it in grfdrv mem.
093E A680             (  cowin_beta5.asm):01774                  lda   ,x+            get screen type
0940 17FF37           (  cowin_beta5.asm):01775                  lbsr  L07E0          convert it to internal screen type
0943 5D               (  cowin_beta5.asm):01776                  tstb                 is it a graphics screen?
0944 2A05             (  cowin_beta5.asm):01777                  bpl   L0894          yes, skip ahead
0946 3560             (  cowin_beta5.asm):01778                  puls  u,y            restore regs
0948 16FDF5           (  cowin_beta5.asm):01779                  lbra  L0697          return illegal window definition error
                      (  cowin_beta5.asm):01780         
                      (  cowin_beta5.asm):01781         * parse X/Y size & buffer size parameters
094B F71160           (  cowin_beta5.asm):01782         L0894    stb   >GrfMem+Gr.STYMk   save screen type
094E 8DB9             (  cowin_beta5.asm):01783                  bsr   L085C          get X/Y sizes
0950 2404             (  cowin_beta5.asm):01784                  bcc   GdSiz          no error, skip ahead
0952 3264             (  cowin_beta5.asm):01785                  leas  4,s            eat stack
0954 208E             (  cowin_beta5.asm):01786                  bra   SmlBuf         return error
                      (  cowin_beta5.asm):01787         
0956 EC81             (  cowin_beta5.asm):01788         GdSiz    ldd   ,x++           get size of buffer
0958 EDA81F           (  cowin_beta5.asm):01789                  std   Wt.BLen,y      save it in window table as a counter
095B 3420             (  cowin_beta5.asm):01790                  pshs  y              preserve global mem & window table pointer
095D 17FA5C           (  cowin_beta5.asm):01791                  lbsr  L00F7          let grfdrv do some work
0960 3520             (  cowin_beta5.asm):01792                  puls  y              restore pointers
0962 251D             (  cowin_beta5.asm):01793                  bcs   L08CA          error from grfdrv, eat stack & return
                      (  cowin_beta5.asm):01794         * get buffer count grfdrv made & start the move process
0964 ECA81F           (  cowin_beta5.asm):01795         L08A8    ldd   Wt.BLen,y      get buffer counter
0967 10830048         (  cowin_beta5.asm):01796                  cmpd  #gb0000        more than 72 bytes (get/put copy buffer size) left?
096B 2217             (  cowin_beta5.asm):01797                  bhi   L08CD          yes, go to multiple block copy routine
                      (  cowin_beta5.asm):01798         * last gpload buffer move
096D F71070           (  cowin_beta5.asm):01799                  stb   >WGlobal+g0070 save LSB of count
0970 1F98             (  cowin_beta5.asm):01800                  tfr   b,a            copy count to A
0972 308C05           (  cowin_beta5.asm):01801                  leax  <L08BE,pc      get vector to buffer move processor
0975 3560             (  cowin_beta5.asm):01802         L08B9    puls  u,y            restore static mem & path descriptor pointers
0977 16FA4F           (  cowin_beta5.asm):01803                  lbra  L0362          save into parameter area of static mem.
                      (  cowin_beta5.asm):01804         
                      (  cowin_beta5.asm):01805         * last buffer move parameter processor
097A 3460             (  cowin_beta5.asm):01806         L08BE    pshs  u,y            preserve static mem & path descriptor pointers
097C 17FDC5           (  cowin_beta5.asm):01807                  lbsr  L06AE          get window table pointer
097F 8D1E             (  cowin_beta5.asm):01808                  bsr   L08EA          Move data to shared buffer & then Grfdrv
0981 3264             (  cowin_beta5.asm):01809         L08CA    leas  4,s            purge stack
0983 39               (  cowin_beta5.asm):01810                  rts                  return
                      (  cowin_beta5.asm):01811         
                      (  cowin_beta5.asm):01812         * multi gpload buffer move
0984 830048           (  cowin_beta5.asm):01813         L08CD    subd  #gb0000        subtract 72 (gp copy buffer size) from count
0987 EDA81F           (  cowin_beta5.asm):01814                  std   Wt.BLen,y      save count
098A 8648             (  cowin_beta5.asm):01815                  lda   #gb0000        72
098C B71070           (  cowin_beta5.asm):01816                  sta   >WGlobal+g0070
098F 308C02           (  cowin_beta5.asm):01817                  leax  <L08DD,pc      get vector
0992 20E1             (  cowin_beta5.asm):01818                  bra   L08B9          save into parameter area of static mem.
                      (  cowin_beta5.asm):01819         
                      (  cowin_beta5.asm):01820         * Place VTIO comes to for next gpload sub-buffer
0994 3460             (  cowin_beta5.asm):01821         L08DD    pshs  u,y            Preserve static & path dsc. ptrs
0996 17FDAB           (  cowin_beta5.asm):01822                  lbsr  L06AE          Get window tbl ptr
0999 8D04             (  cowin_beta5.asm):01823                  bsr   L08EA          Move data to shared buffer & then Grfdrv
099B 24C7             (  cowin_beta5.asm):01824                  bcc   L08A8          Continue moving until whole GPLoad done
099D 20E2             (  cowin_beta5.asm):01825                  bra   L08CA          Error from Grfdrv, exit with it
                      (  cowin_beta5.asm):01826         
                      (  cowin_beta5.asm):01827         * Move buffer to global area for GrfDrv
099F CE1200           (  cowin_beta5.asm):01828         L08EA    ldu   #GPBuf         $1200 Point to global move area
                      (  cowin_beta5.asm):01829                IFNE  H6309
                      (  cowin_beta5.asm):01830                  ldf   >WGlobal+g0070 get byte count
                      (  cowin_beta5.asm):01831                  clre  
                      (  cowin_beta5.asm):01832                  tfm   x+,u+          move it
                      (  cowin_beta5.asm):01833                ELSE
09A2 3402             (  cowin_beta5.asm):01834                  pshs  a
09A4 F61070           (  cowin_beta5.asm):01835                  ldb   >WGlobal+g0070 get byte count
09A7 A680             (  cowin_beta5.asm):01836         L08EAb   lda   ,x+
09A9 A7C0             (  cowin_beta5.asm):01837                  sta   ,u+
09AB 5A               (  cowin_beta5.asm):01838                  decb
09AC 26F9             (  cowin_beta5.asm):01839                  bne   L08EAb
09AE 4F               (  cowin_beta5.asm):01840                  clra
09AF FD11B5           (  cowin_beta5.asm):01841                  std   >GrfMem+gr00B5
09B2 3502             (  cowin_beta5.asm):01842                  puls  a 
                      (  cowin_beta5.asm):01843                ENDC
                      (  cowin_beta5.asm):01844         * Send move buffer to GrfDrv
                      (  cowin_beta5.asm):01845         * Special problem. Seems to pass info via regF.
     09B4             (  cowin_beta5.asm):01846         L08FC    equ   *
                      (  cowin_beta5.asm):01847                IFNE  H6309
                      (  cowin_beta5.asm):01848                  ldf   >WGlobal+g0070 get count
                      (  cowin_beta5.asm):01849                ELSE
09B4 F61070           (  cowin_beta5.asm):01850                  ldb   >WGlobal+g0070
                      (  cowin_beta5.asm):01851         *         stb   >GrfMem+$B6    grfdrv regF
09B7 F711B6           (  cowin_beta5.asm):01852                  stb   >GrfMem+gr00B5+1  cowin regF
                      (  cowin_beta5.asm):01853                ENDC
09BA C632             (  cowin_beta5.asm):01854                  ldb   #$32           get move buffer code
09BC 16F9CC           (  cowin_beta5.asm):01855                  lbra  L0101          send it to grfdrv & return from there
                      (  cowin_beta5.asm):01856         
                      (  cowin_beta5.asm):01857         ****************************
                      (  cowin_beta5.asm):01858         * PutGC entry point
09BF 17FD51           (  cowin_beta5.asm):01859         PutGC    lbsr  L06A0          verify window
09C2 1025FD4A         (  cowin_beta5.asm):01860                  lbcs  L069D
                      (  cowin_beta5.asm):01861                IFNE  H6309
                      (  cowin_beta5.asm):01862                  ldq   ,x             get position requested
                      (  cowin_beta5.asm):01863                  stq   >GrfMem+gr005B save in grfdrv mem
                      (  cowin_beta5.asm):01864                ELSE
09C6 EC02             (  cowin_beta5.asm):01865                  ldd   2,x
09C8 FD115D           (  cowin_beta5.asm):01866                  std   >GrfMem+gr005B+2  save in grfdrv mem
09CB FD11B5           (  cowin_beta5.asm):01867                  std   >GrfMem+gr00B5
09CE EC84             (  cowin_beta5.asm):01868                  ldd   ,x
09D0 FD115B           (  cowin_beta5.asm):01869                  std   >GrfMem+gr005B save in grfdrv mem
                      (  cowin_beta5.asm):01870                ENDC 
09D3 16F9E6           (  cowin_beta5.asm):01871                  lbra  L00F7          go do it
                      (  cowin_beta5.asm):01872         
                      (  cowin_beta5.asm):01873         ****************************
                      (  cowin_beta5.asm):01874         * SetDPtr entry point
09D6 3450             (  cowin_beta5.asm):01875         SetDPtr  pshs  x,u            preserve static mem & param pointers
09D8 17FD38           (  cowin_beta5.asm):01876                  lbsr  L06A0          Verify/Create window
09DB 2405             (  cowin_beta5.asm):01877                  bcc   L092A          Got window, continue
09DD 3550             (  cowin_beta5.asm):01878         L0925    puls  x,u            Restore regs & exit with error
09DF 16FD2E           (  cowin_beta5.asm):01879                  lbra  L069D
                      (  cowin_beta5.asm):01880         
09E2 3420             (  cowin_beta5.asm):01881         L092A    pshs  y              save window table pointer
09E4 8D70             (  cowin_beta5.asm):01882                  bsr   L098D          Get graphics table ptr into y
                      (  cowin_beta5.asm):01883                IFNE  H6309
                      (  cowin_beta5.asm):01884                  ldq   ,x             get co-ordinates from parameters
                      (  cowin_beta5.asm):01885                  stq   Gt.GXCur,y     put co-ordinates into graphics table
                      (  cowin_beta5.asm):01886                ELSE
09E6 EC02             (  cowin_beta5.asm):01887                  ldd   2,x
09E8 ED23             (  cowin_beta5.asm):01888                  std   Gt.GXCur+2,y   put co-ordinates into graphics table
09EA FD11B5           (  cowin_beta5.asm):01889                  std   >GrfMem+gr00B5
09ED EC84             (  cowin_beta5.asm):01890                  ldd   ,x
09EF ED21             (  cowin_beta5.asm):01891                  std   Gt.GXCur,y     put co-ordinates into graphics table
                      (  cowin_beta5.asm):01892                ENDC 
09F1 3520             (  cowin_beta5.asm):01893         L0934    puls  y
09F3 3264             (  cowin_beta5.asm):01894                  leas  4,s
09F5 5F               (  cowin_beta5.asm):01895                  clrb  
09F6 39               (  cowin_beta5.asm):01896                  rts   
                      (  cowin_beta5.asm):01897         
                      (  cowin_beta5.asm):01898         ****************************
                      (  cowin_beta5.asm):01899         * RSetDPtr
09F7 3450             (  cowin_beta5.asm):01900         RSetDPtr pshs  u,x
09F9 17FD17           (  cowin_beta5.asm):01901                  lbsr  L06A0          Verify/create window
09FC 25DF             (  cowin_beta5.asm):01902                  bcs   L0925
09FE 3420             (  cowin_beta5.asm):01903                  pshs  y
0A00 8D54             (  cowin_beta5.asm):01904                  bsr   L098D          Get graphics table ptr into y
                      (  cowin_beta5.asm):01905                IFNE  H6309
                      (  cowin_beta5.asm):01906                  ldq   ,x             Get graphics cursor coords
                      (  cowin_beta5.asm):01907                  addd  Gt.GXCur,y     Add to graphics cursor coords
                      (  cowin_beta5.asm):01908                  addw  Gt.GYCur,y
                      (  cowin_beta5.asm):01909                  stq   Gt.GXCur,y     Save update cursor coords
                      (  cowin_beta5.asm):01910                ELSE
0A02 EC02             (  cowin_beta5.asm):01911                  ldd   2,x
0A04 E323             (  cowin_beta5.asm):01912                  addd  Gt.GYCur,y
0A06 ED23             (  cowin_beta5.asm):01913                  std   Gt.GXCur+2,y
0A08 FD11B5           (  cowin_beta5.asm):01914                  std   >GrfMem+gr00B5 
0A0B EC84             (  cowin_beta5.asm):01915                  ldd   ,x
0A0D E321             (  cowin_beta5.asm):01916                  addd  Gt.GXCur,y
0A0F ED21             (  cowin_beta5.asm):01917                  std   Gt.GXCur,y
                      (  cowin_beta5.asm):01918                ENDC
0A11 20DE             (  cowin_beta5.asm):01919                  bra   L0934
                      (  cowin_beta5.asm):01920         
                      (  cowin_beta5.asm):01921         ****************************
                      (  cowin_beta5.asm):01922         * Point entry point
0A13 3450             (  cowin_beta5.asm):01923         Point    pshs  u,x
0A15 17FCFB           (  cowin_beta5.asm):01924                  lbsr  L06A0
0A18 25C3             (  cowin_beta5.asm):01925                  bcs   L0925
0A1A 3420             (  cowin_beta5.asm):01926                  pshs  y
0A1C 8D38             (  cowin_beta5.asm):01927                  bsr   L098D
0A1E 1700DF           (  cowin_beta5.asm):01928                  lbsr  L0A32
0A21 3520             (  cowin_beta5.asm):01929         L0961    puls  y
0A23 3264             (  cowin_beta5.asm):01930                  leas  4,s
0A25 16F994           (  cowin_beta5.asm):01931                  lbra  L00F7
                      (  cowin_beta5.asm):01932         
                      (  cowin_beta5.asm):01933         ****************************
                      (  cowin_beta5.asm):01934         * RPoint entry point
0A28 3450             (  cowin_beta5.asm):01935         RPoint   pshs  u,x
0A2A 17FCE6           (  cowin_beta5.asm):01936                  lbsr  L06A0
0A2D 25AE             (  cowin_beta5.asm):01937                  bcs   L0925
0A2F 3420             (  cowin_beta5.asm):01938                  pshs  y
0A31 8D23             (  cowin_beta5.asm):01939                  bsr   L098D
                      (  cowin_beta5.asm):01940                IFNE  H6309
                      (  cowin_beta5.asm):01941                  ldq   ,x             Get coord offsets
                      (  cowin_beta5.asm):01942                  addd  Gt.GXCur,y Add to X
                      (  cowin_beta5.asm):01943                  addw  Gt.GYCur,y Add to Y
                      (  cowin_beta5.asm):01944                  stq   >GrfMem+gr0047  Save in GRFDRV mem
                      (  cowin_beta5.asm):01945                ELSE
0A33 EC02             (  cowin_beta5.asm):01946                  ldd   2,x
0A35 E323             (  cowin_beta5.asm):01947                  addd  Gt.GYCur,y
0A37 FD1149           (  cowin_beta5.asm):01948                  std   >GrfMem+gr0047+2
0A3A FD11B5           (  cowin_beta5.asm):01949                  std   >GrfMem+gr00B5
0A3D EC84             (  cowin_beta5.asm):01950                  ldd   ,x
0A3F E321             (  cowin_beta5.asm):01951                  addd  Gt.GXCur,y
0A41 FD1147           (  cowin_beta5.asm):01952                  std   >GrfMem+gr0047
                      (  cowin_beta5.asm):01953                ENDC
0A44 20DB             (  cowin_beta5.asm):01954                  bra   L0961
                      (  cowin_beta5.asm):01955         
                      (  cowin_beta5.asm):01956         ****************************
                      (  cowin_beta5.asm):01957         * Line/Box/Bar entry point
0A46                  (  cowin_beta5.asm):01958         Line
0A46                  (  cowin_beta5.asm):01959         Bar
0A46 3450             (  cowin_beta5.asm):01960         Box      pshs  u,x
0A48 17FCC8           (  cowin_beta5.asm):01961                  lbsr  L06A0
0A4B 2590             (  cowin_beta5.asm):01962                  bcs   L0925
0A4D 3420             (  cowin_beta5.asm):01963         L0984    pshs  y
0A4F 8D05             (  cowin_beta5.asm):01964                  bsr   L098D
0A51 1700BA           (  cowin_beta5.asm):01965                  lbsr  L0A51
0A54 20CB             (  cowin_beta5.asm):01966         L098B    bra   L0961
                      (  cowin_beta5.asm):01967         
                      (  cowin_beta5.asm):01968         * Get graphics table pointer into Y
0A56 EE66             (  cowin_beta5.asm):01969         L098D    ldu   6,s            get static mem pointer
0A58 17FCF5           (  cowin_beta5.asm):01970                  lbsr  L06B9          get graphics table pointer
0A5B 3184             (  cowin_beta5.asm):01971                  leay  ,x             Move it to Y
0A5D AE64             (  cowin_beta5.asm):01972                  ldx   4,s            get parameter pointer
0A5F 39               (  cowin_beta5.asm):01973                  rts                  return
                      (  cowin_beta5.asm):01974         
                      (  cowin_beta5.asm):01975         ****************************
                      (  cowin_beta5.asm):01976         * RLine/RBox/RBar entry point
                      (  cowin_beta5.asm):01977         * Entry: U=Static memory pointer
                      (  cowin_beta5.asm):01978         *        Y=Path descriptor pointer
                      (  cowin_beta5.asm):01979         *        X=Parameter pointer
0A60                  (  cowin_beta5.asm):01980         RLine
0A60                  (  cowin_beta5.asm):01981         RBox
0A60 3450             (  cowin_beta5.asm):01982         RBar     pshs  u,x            save static & parameter pointers
0A62 17FCAE           (  cowin_beta5.asm):01983                  lbsr  L06A0          get window table pointer
                      (  cowin_beta5.asm):01984                IFNE  H6309
                      (  cowin_beta5.asm):01985                  bcs   L0925
                      (  cowin_beta5.asm):01986                ELSE
0A65 1025FF74         (  cowin_beta5.asm):01987                  lbcs  L0925
                      (  cowin_beta5.asm):01988                ENDC
0A69 3420             (  cowin_beta5.asm):01989         L09A3    pshs  y              preserve window table pointer
0A6B 8DE9             (  cowin_beta5.asm):01990                  bsr   L098D          get graphics table pointer
0A6D 1700C0           (  cowin_beta5.asm):01991                  lbsr  L0A5E
0A70 20AF             (  cowin_beta5.asm):01992                  bra   L0961
                      (  cowin_beta5.asm):01993         
                      (  cowin_beta5.asm):01994         ****************************
                      (  cowin_beta5.asm):01995         * LineM entry point
0A72 3450             (  cowin_beta5.asm):01996         LineM    pshs  u,x
0A74 17FC9C           (  cowin_beta5.asm):01997                  lbsr  L06A0
0A77 1025FF62         (  cowin_beta5.asm):01998                  lbcs  L0925
0A7B 3420             (  cowin_beta5.asm):01999                  pshs  y
0A7D 8DD7             (  cowin_beta5.asm):02000                  bsr   L098D
                      (  cowin_beta5.asm):02001                IFNE  H6309
                      (  cowin_beta5.asm):02002                  bsr   L0A51
                      (  cowin_beta5.asm):02003                ELSE
0A7F 17008C           (  cowin_beta5.asm):02004                  lbsr  L0A51
                      (  cowin_beta5.asm):02005                ENDC
                      (  cowin_beta5.asm):02006         
     0A82             (  cowin_beta5.asm):02007         L09BC    equ   *
                      (  cowin_beta5.asm):02008                IFNE  H6309
                      (  cowin_beta5.asm):02009                  ldq   >GrfMem+gr004B
                      (  cowin_beta5.asm):02010                  stq   Gt.GXCur,y
                      (  cowin_beta5.asm):02011                ELSE
0A82 FC114D           (  cowin_beta5.asm):02012                  ldd   >GrfMem+gr004B+2
0A85 ED23             (  cowin_beta5.asm):02013                  std   Gt.GXCur+2,y
0A87 FD11B5           (  cowin_beta5.asm):02014                  std   >GrfMem+gr00B5
0A8A FC114B           (  cowin_beta5.asm):02015                  ldd   >GrfMem+gr004B
0A8D ED21             (  cowin_beta5.asm):02016                  std   Gt.GXCur,y
                      (  cowin_beta5.asm):02017                ENDC
0A8F 2090             (  cowin_beta5.asm):02018                  bra   L0961
                      (  cowin_beta5.asm):02019         
                      (  cowin_beta5.asm):02020         ****************************
                      (  cowin_beta5.asm):02021         * RLineM entry point
0A91 3450             (  cowin_beta5.asm):02022         RLineM   pshs  u,x
0A93 17FC7D           (  cowin_beta5.asm):02023                  lbsr  L06A0
0A96 1025FF43         (  cowin_beta5.asm):02024                  lbcs  L0925
0A9A 3420             (  cowin_beta5.asm):02025                  pshs  y
0A9C 8DB8             (  cowin_beta5.asm):02026                  bsr   L098D
                      (  cowin_beta5.asm):02027                IFNE  H6309
                      (  cowin_beta5.asm):02028                  bsr   L0A5E
                      (  cowin_beta5.asm):02029                ELSE
0A9E 17008F           (  cowin_beta5.asm):02030                  lbsr  L0A5E
                      (  cowin_beta5.asm):02031                ENDC
0AA1 20DF             (  cowin_beta5.asm):02032                  bra   L09BC
                      (  cowin_beta5.asm):02033         
                      (  cowin_beta5.asm):02034         * Filled Circle/Ellipse entry point
0AA3 8601             (  cowin_beta5.asm):02035         Filled   lda   #1             Filled flag
0AA5 B711B2           (  cowin_beta5.asm):02036                  sta   >GrfMem+gr00B2 Save flag
0AA8 2003             (  cowin_beta5.asm):02037                  bra   FlagSet        skip ahead
                      (  cowin_beta5.asm):02038         
                      (  cowin_beta5.asm):02039         * FFill/Circle/Ellipse/Arc entry point
0AAA                  (  cowin_beta5.asm):02040         Circle
0AAA                  (  cowin_beta5.asm):02041         Ellipse
0AAA                  (  cowin_beta5.asm):02042         Arc
0AAA 7F11B2           (  cowin_beta5.asm):02043         FFill    clr   >GrfMem+gr00B2 Clear filled flag
0AAD 3450             (  cowin_beta5.asm):02044         FlagSet  pshs  u,x            Preserve regs
0AAF 17FC61           (  cowin_beta5.asm):02045                  lbsr  L06A0          verify window table
0AB2 1025FF27         (  cowin_beta5.asm):02046                  lbcs  L0925          error, return
0AB6 3420             (  cowin_beta5.asm):02047                  pshs  y              preserve window table pointer
0AB8 EE64             (  cowin_beta5.asm):02048                  ldu   4,s            get device static mem pointer
0ABA E6C837           (  cowin_beta5.asm):02049                  ldb   V.CallCde,u    get grfdrv call #
0ABD 3404             (  cowin_beta5.asm):02050                  pshs  b              save it
0ABF 17FC8E           (  cowin_beta5.asm):02051                  lbsr  L06B9          get graphics table pointer
0AC2 3184             (  cowin_beta5.asm):02052                  leay  ,x             move it to Y
0AC4 AE63             (  cowin_beta5.asm):02053                  ldx   3,s            get parameter pointer
                      (  cowin_beta5.asm):02054                IFNE  H6309
                      (  cowin_beta5.asm):02055                  ldq   Gt.GXCur,y     Get Current graphics cursor coords from graphics table
                      (  cowin_beta5.asm):02056                  stq   >GrfMem+gr0047 Save in GRFDRV mem
                      (  cowin_beta5.asm):02057                ELSE
0AC6 EC23             (  cowin_beta5.asm):02058                  ldd   Gt.GXCur+2,y   Get current graphics cursor Y coord from graphics table
0AC8 FD1149           (  cowin_beta5.asm):02059                  std   >GrfMem+gr0047+2  Save in GRFDRV mem
0ACB EC21             (  cowin_beta5.asm):02060                  ldd   Gt.GXCur,y     Get current graphics cursor X coord from graphics table
0ACD FD1147           (  cowin_beta5.asm):02061                  std   >GrfMem+gr0047 Save in GRFDRV mem
                      (  cowin_beta5.asm):02062                ENDC
0AD0 3504             (  cowin_beta5.asm):02063                  puls  b              restore callcode
0AD2 C156             (  cowin_beta5.asm):02064                  cmpb  #$56           is it flood fill?
0AD4 2727             (  cowin_beta5.asm):02065                  beq   L0A2D          yes, have all needed parms copied; let grfdrv do it
                      (  cowin_beta5.asm):02066                IFNE  H6309
                      (  cowin_beta5.asm):02067                  ldw   ,x++           get X radius from parameters
                      (  cowin_beta5.asm):02068                  stw   >GrfMem+gr0053 save it in grfdrv mem
                      (  cowin_beta5.asm):02069                ELSE
0AD6 10AE81           (  cowin_beta5.asm):02070                  ldy   ,x++           get X radius from parameters
0AD9 10BF1153         (  cowin_beta5.asm):02071                  sty   >GrfMem+gr0053 save it in grfdrv mem
                      (  cowin_beta5.asm):02072                ENDC 
0ADD C150             (  cowin_beta5.asm):02073                  cmpb  #$50           is it circle?
0ADF 271C             (  cowin_beta5.asm):02074                  beq   L0A2D          yes, have all need parms copied; let grfdrv do it
                      (  cowin_beta5.asm):02075                IFNE  H6309
                      (  cowin_beta5.asm):02076                  ldw   ,x++           get Y radius from parameters
                      (  cowin_beta5.asm):02077                  stw   >GrfMem+gr0055 save it in grfdrv mem
                      (  cowin_beta5.asm):02078                ELSE
0AE1 10AE81           (  cowin_beta5.asm):02079                  ldy   ,x++           get Y radius from parameters
0AE4 10BF1155         (  cowin_beta5.asm):02080                  sty   >GrfMem+gr0055 save it in grfdrv mem
                      (  cowin_beta5.asm):02081                ENDC
0AE8 C152             (  cowin_beta5.asm):02082                  cmpb  #$52           is it ellipse?
0AEA 2711             (  cowin_beta5.asm):02083                  beq   L0A2D          yes, have all need parms copied; let grfdrv do it
0AEC 108E1120         (  cowin_beta5.asm):02084                  ldy   #GrfMem+gr0020 Move rest of parameters for ARC
                      (  cowin_beta5.asm):02085                IFNE  H6309
                      (  cowin_beta5.asm):02086                  ldw   #8
                      (  cowin_beta5.asm):02087                  tfm   x+,y+
                      (  cowin_beta5.asm):02088                ELSE
                      (  cowin_beta5.asm):02089         * 6809 LCB - Could eventually call mini stack blast copy routine, but likely slower for that small of
                      (  cowin_beta5.asm):02090         *   a copy - new version should be same size, 50 cycles faster (Arc)
0AF0 3440             (  cowin_beta5.asm):02091                  pshs  u
0AF2 C604             (  cowin_beta5.asm):02092                  ldb   #4
0AF4 EE81             (  cowin_beta5.asm):02093         L0A2Db   ldu   ,x++
0AF6 EFA1             (  cowin_beta5.asm):02094                  stu   ,y++
0AF8 5A               (  cowin_beta5.asm):02095                  decb
0AF9 26F9             (  cowin_beta5.asm):02096                  bne   L0A2Db
0AFB 3540             (  cowin_beta5.asm):02097                  puls  u
                      (  cowin_beta5.asm):02098         
                      (  cowin_beta5.asm):02099         *         pshs  d
                      (  cowin_beta5.asm):02100         *         ldb   #8
                      (  cowin_beta5.asm):02101         *L0A2Db   lda   ,x+
                      (  cowin_beta5.asm):02102         *         sta   ,y+
                      (  cowin_beta5.asm):02103         *         decb
                      (  cowin_beta5.asm):02104         *         bne   L0A2Db
                      (  cowin_beta5.asm):02105         *         puls  d
                      (  cowin_beta5.asm):02106         
                      (  cowin_beta5.asm):02107                ENDC
0AFD 16FF21           (  cowin_beta5.asm):02108         L0A2D    lbra  L0961          let grfdrv do the rest (NOTE: L0961 immediately puls Y, then loads x/b)
                      (  cowin_beta5.asm):02109         
                      (  cowin_beta5.asm):02110         * Move X/Y co-ordinates from parameters into GrfDrv memory
     0B00             (  cowin_beta5.asm):02111         L0A32    equ   *
                      (  cowin_beta5.asm):02112                IFNE  H6309
                      (  cowin_beta5.asm):02113                  ldq   ,x             Get X/Y coords
                      (  cowin_beta5.asm):02114                  stq   >GrfMem+gr0047 Save in GRFDRV mem
                      (  cowin_beta5.asm):02115                ELSE
0B00 EC02             (  cowin_beta5.asm):02116                  ldd   2,x            Get Y coord
0B02 FD1149           (  cowin_beta5.asm):02117                  std   >GrfMem+gr0047+2 Save in GRFDRV mem 
0B05 EC84             (  cowin_beta5.asm):02118                  ldd   ,x             Get X coord
0B07 FD1147           (  cowin_beta5.asm):02119                  std   >GrfMem+gr0047 Save in GRFDRV mem
                      (  cowin_beta5.asm):02120                ENDC
0B0A C604             (  cowin_beta5.asm):02121                  ldb   #4             Bump param ptr up
0B0C 3A               (  cowin_beta5.asm):02122                  abx   
0B0D 39               (  cowin_beta5.asm):02123                  rts   
                      (  cowin_beta5.asm):02124         
                      (  cowin_beta5.asm):02125         * Move current draw pointer co-ordinates from graphics table 
                      (  cowin_beta5.asm):02126         * and destination co-ordinates from parameters into GrfDrv memory
                      (  cowin_beta5.asm):02127         * Entry: X=Parameter pointer
                      (  cowin_beta5.asm):02128         *        Y=Graphics table pointer
                      (  cowin_beta5.asm):02129                IFNE  H6309
0B0E                  (  cowin_beta5.asm):02130         L0A51    ldq   Gt.GXCur,y     Get X/Y graphics cursor coords from graphics table
                      (  cowin_beta5.asm):02131                  stq   >GrfMem+gr0047 Save in GRFDRV mem
                      (  cowin_beta5.asm):02132                  ldq   ,x             Get X/Y coords from params
0B0E                  (  cowin_beta5.asm):02133         L0A59    stq   >GrfMem+gr004B Save in GRFDRV mem
                      (  cowin_beta5.asm):02134                ELSE
0B0E EC21             (  cowin_beta5.asm):02135         L0A51    ldd   Gt.GXCur,y     Get X coord from graphics table
0B10 FD1147           (  cowin_beta5.asm):02136                  std   >GrfMem+gr0047 Save in GRFDRV mem 
0B13 EC23             (  cowin_beta5.asm):02137                  ldd   Gt.GXCur+2,y   Get Y coord from graphics table
0B15 FD1149           (  cowin_beta5.asm):02138                  std   >GrfMem+gr0047+2 Save in GRFDRV mem
0B18 EC02             (  cowin_beta5.asm):02139                  ldd   2,x            Get Y coord from params
                      (  cowin_beta5.asm):02140         * 6809 - should be able to optimize this. check external calls to L0A59 first.
0B1A FD11B5           (  cowin_beta5.asm):02141                  std   >GrfMem+gr00B5 Save in "W" register copy
0B1D EC84             (  cowin_beta5.asm):02142                  ldd   ,x             Get X coord from params
0B1F 3406             (  cowin_beta5.asm):02143         L0A59    pshs  d              Save on stack
0B21 FC11B5           (  cowin_beta5.asm):02144                  ldd   >GrfMem+gr00B5 Get "W" register copy *Y coord)
0B24 FD114D           (  cowin_beta5.asm):02145                  std   >GrfMem+gr004B+2 Save in GRFDRV mem
0B27 3506             (  cowin_beta5.asm):02146                  puls  d              Get X coord from parms back
0B29 FD114B           (  cowin_beta5.asm):02147                  std   >GrfMem+gr004B Save in GRFDRV mem
                      (  cowin_beta5.asm):02148                ENDC
0B2C C604             (  cowin_beta5.asm):02149                  ldb   #4             Bump param ptr past bytes we got
0B2E 3A               (  cowin_beta5.asm):02150                  abx   
0B2F 39               (  cowin_beta5.asm):02151                  rts   
                      (  cowin_beta5.asm):02152         
                      (  cowin_beta5.asm):02153         * Move current draw pointer co-ordinates from graphics table & calculate
                      (  cowin_beta5.asm):02154         * Destination draw pointer from parameters & move into GrfDrv memory
                      (  cowin_beta5.asm):02155         * Entry: X=Parameter pointer
                      (  cowin_beta5.asm):02156         *        Y=Graphics table pointer
                      (  cowin_beta5.asm):02157                IFNE  H6309
0B30                  (  cowin_beta5.asm):02158         L0A5E    ldq   Gt.GXCur,y     Get coords from graphics table
                      (  cowin_beta5.asm):02159                  stq   >GrfMem+gr0047 Save in GRFDRV mem
                      (  cowin_beta5.asm):02160                  ldq   ,x             Get X/Y coords from params
                      (  cowin_beta5.asm):02161                  addd  Gt.GXCur,y     Make relative
                      (  cowin_beta5.asm):02162                  addw  Gt.GYCur,y
                      (  cowin_beta5.asm):02163                ELSE
0B30 EC21             (  cowin_beta5.asm):02164         L0A5E    ldd   Gt.GXCur,y     Get X coord from graphics table 
0B32 FD1147           (  cowin_beta5.asm):02165                  std   >GrfMem+gr0047 Save in GRFDRV mem
0B35 EC23             (  cowin_beta5.asm):02166                  ldd   Gt.GXCur+2,y   Get Y coord from graphics table
0B37 FD1149           (  cowin_beta5.asm):02167                  std   >GrfMem+gr0047+2 Save in GRFDRV mem
0B3A EC02             (  cowin_beta5.asm):02168                  ldd   2,x            Get Y coord from parms
0B3C E323             (  cowin_beta5.asm):02169                  addd  Gt.GYCur,y     Add to current graphics cursor Y coord
0B3E FD11B5           (  cowin_beta5.asm):02170                  std   >GrfMem+gr00B5  Save "W" temp
0B41 EC84             (  cowin_beta5.asm):02171                  ldd   ,x             Get X coord from params
0B43 E321             (  cowin_beta5.asm):02172                  addd  Gt.GXCur,y     Add to current graphics cursor X coord
                      (  cowin_beta5.asm):02173                ENDC
0B45 20D8             (  cowin_beta5.asm):02174                  bra   L0A59          Save & bump param ptr
                      (  cowin_beta5.asm):02175         
                      (  cowin_beta5.asm):02176         ****************************
                      (  cowin_beta5.asm):02177         * Get status entry point
                      (  cowin_beta5.asm):02178         * Entry: A=Function call #
0B47 8126             (  cowin_beta5.asm):02179         GetStt   cmpa  #SS.ScSiz      get screen size?
0B49 2746             (  cowin_beta5.asm):02180                  beq   L0A9A          yes, go process
0B4B 8191             (  cowin_beta5.asm):02181                  cmpa  #SS.Palet      get palettes?
0B4D 274F             (  cowin_beta5.asm):02182                  beq   L0AA7          yes, go process
0B4F 8193             (  cowin_beta5.asm):02183                  cmpa  #SS.ScTyp      get screen type?
0B51 2779             (  cowin_beta5.asm):02184                  beq   L0AD5          yes, go process
0B53 8196             (  cowin_beta5.asm):02185                  cmpa  #SS.FBRgs      get colors?
0B55 10270090         (  cowin_beta5.asm):02186                  lbeq  L0AF4          yes, go process
0B59 8197             (  cowin_beta5.asm):02187                  cmpa  #SS.DfPal      get default colors?
0B5B 275D             (  cowin_beta5.asm):02188                  beq   L0AC3          yes, go process
                      (  cowin_beta5.asm):02189                IFNE  CoGrf-1
0B5D 8187             (  cowin_beta5.asm):02190                  cmpa  #SS.MnSel      menu select?  (CoWin ONLY)
0B5F 10270A34         (  cowin_beta5.asm):02191                  lbeq  L1515          yes, go process
                      (  cowin_beta5.asm):02192                ENDC
0B63 818F             (  cowin_beta5.asm):02193                  cmpa  #SS.ScInf      screen info?
0B65 2703             (  cowin_beta5.asm):02194                  beq   SS.SInf        yes, go process
0B67 16F7BB           (  cowin_beta5.asm):02195                  lbra  L0A96          All others illegal
                      (  cowin_beta5.asm):02196         
                      (  cowin_beta5.asm):02197         * SS.ScInf processor ($8F)
                      (  cowin_beta5.asm):02198         * New call to get info on current screen for use with direct mapped video
                      (  cowin_beta5.asm):02199         *  Programmer can even handle non-full sized window
                      (  cowin_beta5.asm):02200         *  Programmer will still have to get screen type to determine # bytes/line &
                      (  cowin_beta5.asm):02201         *  # of rows
                      (  cowin_beta5.asm):02202         * Returns: X=Offset into first block of screen start
                      (  cowin_beta5.asm):02203         *          A=# 8k blocks required for screen
                      (  cowin_beta5.asm):02204         *          B=Start block #
                      (  cowin_beta5.asm):02205         *          Y=High byte=X start of window
                      (  cowin_beta5.asm):02206         *            Low byte= X size of window
                      (  cowin_beta5.asm):02207         *          U=High byte=Y start of window
                      (  cowin_beta5.asm):02208         *            Low byte= Y size of window
                      (  cowin_beta5.asm):02209         * It should be noted that these are the current working area, not the original
                      (  cowin_beta5.asm):02210         *  window start/sizes
                      (  cowin_beta5.asm):02211         
0B6A 8D56             (  cowin_beta5.asm):02212         SS.SInf  bsr   L0ACB          get register & window table pointers
0B6C EC33             (  cowin_beta5.asm):02213                  ldd   Wt.LStrt,y     get current screen logical start
0B6E 8080             (  cowin_beta5.asm):02214                  suba  #$80           make it a offset into 1st block
0B70 ED04             (  cowin_beta5.asm):02215                  std   R$X,x          save it to caller
                      (  cowin_beta5.asm):02216                IFNE  H6309
                      (  cowin_beta5.asm):02217                  ldq   Wt.CPX,y       Get X&Y coord starts & X/Y sizes
                      (  cowin_beta5.asm):02218                  exg   b,e            Swap so registers easier for programmer
                      (  cowin_beta5.asm):02219                  stq   R$Y,x          Save X values & Y values into callers Y & U
                      (  cowin_beta5.asm):02220                ELSE
0B72 EC35             (  cowin_beta5.asm):02221                  ldd   Wt.CPX,y       Get upper left X/Y coord start for window
0B74 A706             (  cowin_beta5.asm):02222                  sta   R$Y,x          Save X start in high byte of Y
0B76 E708             (  cowin_beta5.asm):02223                  stb   R$U,x          Save Y start in high byte of U
0B78 EC37             (  cowin_beta5.asm):02224                  ldd   Wt.SZX,y       Get X/Y sizes of window
0B7A A707             (  cowin_beta5.asm):02225                  sta   R$Y+1,x        Save X size in low byte of Y
0B7C E709             (  cowin_beta5.asm):02226                  stb   R$U+1,x        Save Y size in low byte of U
                      (  cowin_beta5.asm):02227                ENDC
0B7E ECB8F0           (  cowin_beta5.asm):02228                  ldd   [Wt.STbl,y]    get screen type & start block #
0B81 840F             (  cowin_beta5.asm):02229                  anda  #$0f           make it fit table (could anda #$07, I think, to make it safer)
0B83 338C04           (  cowin_beta5.asm):02230                  leau  <NmBlks-1,pc   point to # blocks needed for screen type (-1 since base 1, not 0)
0B86 A6C6             (  cowin_beta5.asm):02231                  lda   a,u            get # blocks
0B88 ED01             (  cowin_beta5.asm):02232                  std   R$D,x          save it to caller
0B8A 39               (  cowin_beta5.asm):02233                  rts   
                      (  cowin_beta5.asm):02234         
0B8B 020204040101     (  cowin_beta5.asm):02235         NmBlks   fcb   2,2,4,4,1,1
                      (  cowin_beta5.asm):02236         
                      (  cowin_beta5.asm):02237         * SS.ScSiz processing - Current size (with CWArea's in effect), not DWSet size
0B91 8D2F             (  cowin_beta5.asm):02238         L0A9A    bsr   L0ACB          get register stack pointer & window table pointer
0B93 4F               (  cowin_beta5.asm):02239                  clra  
0B94 E637             (  cowin_beta5.asm):02240                  ldb   Wt.SZX,y       get X size
0B96 ED04             (  cowin_beta5.asm):02241                  std   R$X,x          save it to caller
0B98 E638             (  cowin_beta5.asm):02242                  ldb   Wt.SZY,y       get Y size
0B9A ED06             (  cowin_beta5.asm):02243                  std   R$Y,x          save it to caller
0B9C 5F               (  cowin_beta5.asm):02244                  clrb                 No error and return
0B9D 39               (  cowin_beta5.asm):02245                  rts   
                      (  cowin_beta5.asm):02246         
                      (  cowin_beta5.asm):02247         * SS.Palet processing
0B9E 8D22             (  cowin_beta5.asm):02248         L0AA7    bsr   L0ACB          get register stack & window table pointers
0BA0 10AE30           (  cowin_beta5.asm):02249                  ldy   Wt.STbl,y      get screen table pointer
0BA3 31A810           (  cowin_beta5.asm):02250                  leay  St.Pals,y      point to palettes
0BA6 EE04             (  cowin_beta5.asm):02251         L0AAF    ldu   R$X,x          get callers buffer pointer
0BA8 9E50             (  cowin_beta5.asm):02252                  ldx   <D.Proc        get task # of caller
0BAA E606             (  cowin_beta5.asm):02253                  ldb   P$Task,x
0BAC 9E4A             (  cowin_beta5.asm):02254                  ldx   <D.SysPrc      get task # of system
0BAE A606             (  cowin_beta5.asm):02255                  lda   P$Task,x
0BB0 1F21             (  cowin_beta5.asm):02256                  tfr   y,x
0BB2 108E0010         (  cowin_beta5.asm):02257         L0ABB    ldy   #16            get # bytes to move
0BB6 103F38           (  cowin_beta5.asm):02258                  os9   F$Move         move 'em
0BB9 39               (  cowin_beta5.asm):02259                  rts                  return
                      (  cowin_beta5.asm):02260         
                      (  cowin_beta5.asm):02261         * SS.DfPal processing
0BBA AE26             (  cowin_beta5.asm):02262         L0AC3    ldx   PD.RGS,y       get register stack pointer
0BBC 10BE1019         (  cowin_beta5.asm):02263                  ldy   >WGlobal+G.DefPal  get pointer to default palettes
0BC0 20E4             (  cowin_beta5.asm):02264                  bra   L0AAF          go move 'em
                      (  cowin_beta5.asm):02265         
                      (  cowin_beta5.asm):02266         * Get register stack pointer into X, window table pointer into Y & global mem
0BC2 AE26             (  cowin_beta5.asm):02267         L0ACB    ldx   PD.RGS,y       Get ptr to caller's register stack
0BC4 17FB4C           (  cowin_beta5.asm):02268                  lbsr  L06A0          Go find window table entry
0BC7 1025FB43         (  cowin_beta5.asm):02269                  lbcs  L069B          Error, exit
0BCB 39               (  cowin_beta5.asm):02270                  rts                  Return
                      (  cowin_beta5.asm):02271         
                      (  cowin_beta5.asm):02272         * SS.ScTyp processing
0BCC 8DF4             (  cowin_beta5.asm):02273         L0AD5    bsr   L0ACB          get register stack & window table pointers
0BCE E6B8F0           (  cowin_beta5.asm):02274                  ldb   [Wt.STbl,y]    get screen type
0BD1 2B04             (  cowin_beta5.asm):02275                  bmi   L0AE2          text, skip ahead
0BD3 CB04             (  cowin_beta5.asm):02276                  addb  #$04           add 4 to make it a user screen type
0BD5 200A             (  cowin_beta5.asm):02277                  bra   L0AEC          go save it
                      (  cowin_beta5.asm):02278         
0BD7 C186             (  cowin_beta5.asm):02279         L0AE2    cmpb  #$86           40 column text?
0BD9 2604             (  cowin_beta5.asm):02280                  bne   L0AEA          no, skip ahead
0BDB C601             (  cowin_beta5.asm):02281                  ldb   #$01           get screen type for 40 column text
0BDD 2002             (  cowin_beta5.asm):02282                  bra   L0AEC          save it
                      (  cowin_beta5.asm):02283         
0BDF C602             (  cowin_beta5.asm):02284         L0AEA    ldb   #$02           get screen type for 80 column text
0BE1 E701             (  cowin_beta5.asm):02285         L0AEC    stb   R$A,x          save it to caller
0BE3 5F               (  cowin_beta5.asm):02286                  clrb  
0BE4 39               (  cowin_beta5.asm):02287                  rts   
                      (  cowin_beta5.asm):02288         
                      (  cowin_beta5.asm):02289         * Color mask for fore/back palette registers
0BE5 01               (  cowin_beta5.asm):02290         L0AF0    fcb   %00000001      $01 2 color screens
0BE6 03               (  cowin_beta5.asm):02291                  fcb   %00000011      $03 4 color screens
0BE7 0F               (  cowin_beta5.asm):02292                  fcb   %00001111      $0f 16 color screens
0BE8 0F               (  cowin_beta5.asm):02293                  fcb   %00001111      $0f 16 color screens
                      (  cowin_beta5.asm):02294         
                      (  cowin_beta5.asm):02295         * SS.FBRgs processing
0BE9 8DD7             (  cowin_beta5.asm):02296         L0AF4    bsr   L0ACB          get register stack & window table pointers
0BEB 8D08             (  cowin_beta5.asm):02297                  bsr   L0B01          Go get fore/back ground colors
0BED ED01             (  cowin_beta5.asm):02298                  std   R$D,x          Save in caller's D
0BEF E645             (  cowin_beta5.asm):02299                  ldb   St.Brdr,u      Get border register
0BF1 4F               (  cowin_beta5.asm):02300                  clra                 D=border color
0BF2 ED04             (  cowin_beta5.asm):02301                  std   R$X,x          Save in caller's X & return
0BF4 39               (  cowin_beta5.asm):02302                  rts   
                      (  cowin_beta5.asm):02303         
0BF5 E6B8F0           (  cowin_beta5.asm):02304         L0B01    ldb   [Wt.STbl,y]    Get screen type from screen table
0BF8 C407             (  cowin_beta5.asm):02305                  andb  #$07           Mask off text mode, etc.
0BFA 54               (  cowin_beta5.asm):02306                  lsrb                 Divide by 2 (for similiar screens)
0BFB 338CE7           (  cowin_beta5.asm):02307                  leau  <L0AF0,pc      Point to masking table
0BFE E6C5             (  cowin_beta5.asm):02308                  ldb   b,u            Get table entry
0C00 1F98             (  cowin_beta5.asm):02309                  tfr   b,a            Dupe for background color too
                      (  cowin_beta5.asm):02310                IFNE  H6309
                      (  cowin_beta5.asm):02311                  andd  Wt.Fore,y      Mask with fore/bckground colors from window tbl
                      (  cowin_beta5.asm):02312                ELSE
0C02 A426             (  cowin_beta5.asm):02313                  anda  Wt.Fore,y
0C04 E427             (  cowin_beta5.asm):02314                  andb  Wt.Fore+1,y
                      (  cowin_beta5.asm):02315                ENDC
0C06 EE30             (  cowin_beta5.asm):02316                  ldu   Wt.STbl,y      Get screen table ptr for border reg
0C08 39               (  cowin_beta5.asm):02317                  rts   
                      (  cowin_beta5.asm):02318         
                      (  cowin_beta5.asm):02319         ****************************
                      (  cowin_beta5.asm):02320         * Set status entry point
                      (  cowin_beta5.asm):02321         * Entry: U=Static memory pointer
                      (  cowin_beta5.asm):02322         *        Y=Path descriptor pointer
                      (  cowin_beta5.asm):02323         *        A=SetStat call #
0C09 8129             (  cowin_beta5.asm):02324         SetStt   cmpa  #SS.Open       Open window call (for /W)
0C0B 2731             (  cowin_beta5.asm):02325                  beq   L0B4B
0C0D 8184             (  cowin_beta5.asm):02326                  cmpa  #SS.MpGPB      Map Get/Put buffer into callers program space
0C0F 102700A2         (  cowin_beta5.asm):02327                  lbeq  L0BD1
0C13 8197             (  cowin_beta5.asm):02328                  cmpa  #SS.DfPal      Set default palettes
0C15 2715             (  cowin_beta5.asm):02329                  beq   L0B38
                      (  cowin_beta5.asm):02330                IFNE  CoGrf-1
                      (  cowin_beta5.asm):02331         * Remaining SetStat's are CoWin ONLY
0C17 8186             (  cowin_beta5.asm):02332                  cmpa  #SS.WnSet
0C19 102701C7         (  cowin_beta5.asm):02333                  lbeq  L0D23
0C1D 8188             (  cowin_beta5.asm):02334                  cmpa  #SS.SBar
0C1F 10270F0E         (  cowin_beta5.asm):02335                  lbeq  L1AB9
0C23 8195             (  cowin_beta5.asm):02336                  cmpa  #SS.UMBar      Update menu bar
0C25 10270852         (  cowin_beta5.asm):02337                  lbeq  L13F5
                      (  cowin_beta5.asm):02338                ENDC
0C29 16F6F9           (  cowin_beta5.asm):02339                  lbra  L0A96          Unknown SetStat, return with error
                      (  cowin_beta5.asm):02340         
                      (  cowin_beta5.asm):02341         * SS.DfPal entry point
0C2C AE26             (  cowin_beta5.asm):02342         L0B38    ldx   PD.RGS,y       get register stack pointer
0C2E AE04             (  cowin_beta5.asm):02343                  ldx   R$X,x          get pointer to palettes
0C30 DE50             (  cowin_beta5.asm):02344                  ldu   <D.Proc        get task # of caller
0C32 A646             (  cowin_beta5.asm):02345                  lda   P$Task,u
0C34 DE4A             (  cowin_beta5.asm):02346                  ldu   <D.SysPrc      get task # of system
0C36 E646             (  cowin_beta5.asm):02347                  ldb   P$Task,u
0C38 FE1019           (  cowin_beta5.asm):02348                  ldu   >WGlobal+G.DefPal  get pointer to destination of palettes
0C3B 16FF74           (  cowin_beta5.asm):02349                  lbra  L0ABB          move 'em
                      (  cowin_beta5.asm):02350         
                      (  cowin_beta5.asm):02351         * SS.Open processor
                      (  cowin_beta5.asm):02352         * Entry: X=Register stack pointer
                      (  cowin_beta5.asm):02353         *        U=Static memory pointer
                      (  cowin_beta5.asm):02354         *        Y=Path descriptor pointer
0C3E 3460             (  cowin_beta5.asm):02355         L0B4B    pshs  u,y            preserve registers
0C40 AE23             (  cowin_beta5.asm):02356                  ldx   PD.DEV,y       get pointer to device table entry
0C42 AE04             (  cowin_beta5.asm):02357                  ldx   V$DESC,x       get pointer to descriptor
0C44 E6882E           (  cowin_beta5.asm):02358                  ldb   IT.WND,x       get window # from descriptor
0C47 2A69             (  cowin_beta5.asm):02359                  bpl   L0BCD          not a legal window descriptor, return
0C49 3410             (  cowin_beta5.asm):02360                  pshs  x              save device descriptor pointer
     0C4B             (  cowin_beta5.asm):02361         L0B58    equ   *
                      (  cowin_beta5.asm):02362                IFNE  H6309
                      (  cowin_beta5.asm):02363                  clrd                 start window #=0
                      (  cowin_beta5.asm):02364                ELSE
0C4B 4F               (  cowin_beta5.asm):02365                  clra
0C4C 5F               (  cowin_beta5.asm):02366                  clrb
                      (  cowin_beta5.asm):02367                ENDC
0C4D 17F625           (  cowin_beta5.asm):02368                  lbsr  L025B          find a free window in bit map
0C50 2406             (  cowin_beta5.asm):02369                  bcc   L0B65          got one, skip ahead
0C52 3570             (  cowin_beta5.asm):02370                  puls  u,y,x          purge stack
0C54 53               (  cowin_beta5.asm):02371                  comb                 set carry
0C55 C6DD             (  cowin_beta5.asm):02372                  ldb   #E$MNF         get module not found error
0C57 39               (  cowin_beta5.asm):02373                  rts                  return
                      (  cowin_beta5.asm):02374         
                      (  cowin_beta5.asm):02375         * Found a free window
0C58 3404             (  cowin_beta5.asm):02376         L0B65    pshs  b              save window # of free entry
0C5A 17F609           (  cowin_beta5.asm):02377                  lbsr  L024A          allocate the window we found
0C5D 108E1200         (  cowin_beta5.asm):02378                  ldy   #$1200         Point to a buffer area (GPLoad area)
0C61 C677             (  cowin_beta5.asm):02379                  ldb   #'w            get window name prefix
0C63 E7A0             (  cowin_beta5.asm):02380                  stb   ,y+            put it in buffer
0C65 E6E4             (  cowin_beta5.asm):02381                  ldb   ,s             get window # that was free
                      (  cowin_beta5.asm):02382         * Convert window # in B to ASCII equivalent with high bit set
                      (  cowin_beta5.asm):02383                IFNE  H6309
                      (  cowin_beta5.asm):02384                  divd  #10        divide it by 10
                      (  cowin_beta5.asm):02385                ELSE
0C67 86FF             (  cowin_beta5.asm):02386                  lda   #-1
0C69 4C               (  cowin_beta5.asm):02387         L0B87b   inca
0C6A C00A             (  cowin_beta5.asm):02388                  subb  #10
0C6C 24FB             (  cowin_beta5.asm):02389                  bcc   L0B87b
0C6E CB0A             (  cowin_beta5.asm):02390                  addb  #10
0C70 1E89             (  cowin_beta5.asm):02391                  exg   a,b
0C72 5D               (  cowin_beta5.asm):02392                  tstb
                      (  cowin_beta5.asm):02393                ENDC
0C73 2704             (  cowin_beta5.asm):02394                  beq   L0B87          if answer is 0 there is only 1 digit, skip ahead 
0C75 CA30             (  cowin_beta5.asm):02395                  orb   #$30           make first digit ASCII
0C77 E7A0             (  cowin_beta5.asm):02396                  stb   ,y+            put it in buffer
0C79 8AB0             (  cowin_beta5.asm):02397         L0B87    ora   #$B0           make remainder ASCII with high bit set
0C7B A7A0             (  cowin_beta5.asm):02398                  sta   ,y+            put it in buffer
0C7D 327E             (  cowin_beta5.asm):02399         L0B92    leas  -2,s           make a buffer for process decriptor pointer
0C7F 17F5D0           (  cowin_beta5.asm):02400                  lbsr  L0238          switch to system process descriptor
0C82 8E1200           (  cowin_beta5.asm):02401                  ldx   #$1200         Point to calculated dsc. name
0C85 86F1             (  cowin_beta5.asm):02402                  lda   #Devic+Objct   get module type
0C87 103F00           (  cowin_beta5.asm):02403                  os9   F$Link         try & link it
0C8A 17F5D1           (  cowin_beta5.asm):02404                  lbsr  L0244          switch back to current process
0C8D 3262             (  cowin_beta5.asm):02405                  leas  2,s            purge stack
0C8F 2404             (  cowin_beta5.asm):02406                  bcc   L0BAB          it's linked, skip ahead
0C91 3261             (  cowin_beta5.asm):02407         L0BA7    leas  1,s            purge window #
0C93 20B6             (  cowin_beta5.asm):02408                  bra   L0B58          go look for another one
                      (  cowin_beta5.asm):02409         
                      (  cowin_beta5.asm):02410         * Got a device descriptor, put into device table & save window # into static
0C95 A6C826           (  cowin_beta5.asm):02411         L0BAB    lda   IT.PAR,u       valid window?
0C98 2AF7             (  cowin_beta5.asm):02412                  bpl   L0BA7          no, go look for another one
0C9A 10AE63           (  cowin_beta5.asm):02413                  ldy   3,s            get path descriptor pointer
0C9D AE23             (  cowin_beta5.asm):02414                  ldx   PD.DEV,y       get pointer to device table
0C9F EF04             (  cowin_beta5.asm):02415                  stu   V$DESC,x       save pointer to descriptor into it
0CA1 E6E4             (  cowin_beta5.asm):02416                  ldb   ,s             get window #
0CA3 EE65             (  cowin_beta5.asm):02417                  ldu   5,s            get static mem pointer
0CA5 E7C836           (  cowin_beta5.asm):02418                  stb   V.DWNum,u      save window # as active window in static mem
0CA8 EE61             (  cowin_beta5.asm):02419                  ldu   1,s            get pointer to descriptor
0CAA 103F02           (  cowin_beta5.asm):02420                  os9   F$UnLink       unlink it from system map
0CAD EE65             (  cowin_beta5.asm):02421                  ldu   5,s            get static mem pointer
0CAF 3267             (  cowin_beta5.asm):02422                  leas  7,s            purge stack
0CB1 39               (  cowin_beta5.asm):02423                  rts                  Return with or without error
                      (  cowin_beta5.asm):02424         
0CB2 5F               (  cowin_beta5.asm):02425         L0BCD    clrb                 No error
0CB3 35E0             (  cowin_beta5.asm):02426                  puls  u,y,pc         Restore regs & return
                      (  cowin_beta5.asm):02427         
                      (  cowin_beta5.asm):02428         * SS.MpGPB (map get/put buffer)
                      (  cowin_beta5.asm):02429         * Parameters: X=Group/Buffer #'s
                      (  cowin_beta5.asm):02430         *             Y=Map/Un-Map flag, 0=Un-Map, 1+=Map
                      (  cowin_beta5.asm):02431         * Returns   : X=Start address of buffer in 64k user map
                      (  cowin_beta5.asm):02432         *             Y=Length of buffer
                      (  cowin_beta5.asm):02433         * Entry: U=Static memory pointer
                      (  cowin_beta5.asm):02434         *        Y=Path descriptor pointer
0CB5 AE26             (  cowin_beta5.asm):02435         L0BD1    ldx   PD.RGS,y       get register stack pointer
0CB7 3410             (  cowin_beta5.asm):02436                  pshs  x              preserve it
0CB9 17FA57           (  cowin_beta5.asm):02437                  lbsr  L06A0          verify window table
0CBC EC04             (  cowin_beta5.asm):02438                  ldd   R$X,x          get group/buffer #'s
0CBE FD1157           (  cowin_beta5.asm):02439                  std   >GrfMem+gr0057 save it to grfdrv mem
0CC1 C638             (  cowin_beta5.asm):02440                  ldb   #$38           get grfdrv function call to map
0CC3 17F6C5           (  cowin_beta5.asm):02441                  lbsr  L0101          let grfdrv calculate block # & count
0CC6 F61197           (  cowin_beta5.asm):02442                  ldb   >GrfMem+gr0097 get block #
0CC9 B61199           (  cowin_beta5.asm):02443                  lda   >GrfMem+gr0099 get # blocks long
0CCC 3510             (  cowin_beta5.asm):02444                  puls  x              Get register stack ptr back
0CCE 6D07             (  cowin_beta5.asm):02445                  tst   R$Y+1,x        mapping or un-mapping?
0CD0 2728             (  cowin_beta5.asm):02446                  beq   L0C1F          un-map, remove it from process space
                      (  cowin_beta5.asm):02447         * Map the get/put buffer into process space
0CD2 3456             (  cowin_beta5.asm):02448                  pshs  d,x,u          save block #/# of blocks, reg stack & global
0CD4 8D3B             (  cowin_beta5.asm):02449                  bsr   L0C31          Make sure all blocks needed are there
0CD6 241E             (  cowin_beta5.asm):02450                  bcc   L0C1B          Yes, exit
0CD8 4F               (  cowin_beta5.asm):02451                  clra  
0CD9 E661             (  cowin_beta5.asm):02452                  ldb   1,s            get starting block #
0CDB 1F01             (  cowin_beta5.asm):02453                  tfr   d,x
0CDD E6E4             (  cowin_beta5.asm):02454                  ldb   ,s             get # blocks
0CDF 103F4F           (  cowin_beta5.asm):02455                  os9   F$MapBlk       map blocks into process space
0CE2 E761             (  cowin_beta5.asm):02456                  stb   1,s            save error code if any
0CE4 250E             (  cowin_beta5.asm):02457                  bcs   L0C19          return if there was a error
0CE6 1F30             (  cowin_beta5.asm):02458                  tfr   u,d            copy start address to D
0CE8 AE62             (  cowin_beta5.asm):02459                  ldx   2,s            get register stack pointer
0CEA F3119D           (  cowin_beta5.asm):02460                  addd  >GrfMem+gr009D add in offset to buffer
0CED ED04             (  cowin_beta5.asm):02461                  std   R$X,x          save offset into block of buffer
0CEF FC119B           (  cowin_beta5.asm):02462                  ldd   >GrfMem+gr009B get length of buffer
0CF2 ED06             (  cowin_beta5.asm):02463                  std   R$Y,x          save it into callers Y
0CF4 35D6             (  cowin_beta5.asm):02464         L0C19    puls  d,x,u,pc       restore regs & return
                      (  cowin_beta5.asm):02465         
0CF6 3262             (  cowin_beta5.asm):02466         L0C1B    leas  2,s            purge stack
0CF8 35D0             (  cowin_beta5.asm):02467                  puls  pc,u,x
                      (  cowin_beta5.asm):02468         
                      (  cowin_beta5.asm):02469         * Remove get/put buffer from process space
0CFA 3432             (  cowin_beta5.asm):02470         L0C1F    pshs  a,x,y          preserve # blocks, register stack & window table
0CFC 8D13             (  cowin_beta5.asm):02471                  bsr   L0C31          Go verify all blocks are correct & contiguous
0CFE 250F             (  cowin_beta5.asm):02472                  bcs   L0C2E          Nope, exit with error
                      (  cowin_beta5.asm):02473                IFNE  H6309
                      (  cowin_beta5.asm):02474                  lde   ,s             Get counter back
                      (  cowin_beta5.asm):02475                ELSE
0D00 A6E4             (  cowin_beta5.asm):02476                  lda   ,s             Get counter back
0D02 B711B5           (  cowin_beta5.asm):02477                  sta   >GrfMem+gr00B5 Save "E" copy
                      (  cowin_beta5.asm):02478                ENDC
0D05 CC333E           (  cowin_beta5.asm):02479                  ldd   #DAT.Free      Empty DAT marker
0D08 ED81             (  cowin_beta5.asm):02480         L0C28    std   ,x++           Save them in DAT image
                      (  cowin_beta5.asm):02481                IFNE  H6309
                      (  cowin_beta5.asm):02482                  dece                 Keep marking unused blocks until done
                      (  cowin_beta5.asm):02483                ELSE
0D0A 7A11B5           (  cowin_beta5.asm):02484                  dec   >GrfMem+gr00B5
                      (  cowin_beta5.asm):02485                ENDC
0D0D 26F9             (  cowin_beta5.asm):02486                  bne   L0C28
0D0F 35B2             (  cowin_beta5.asm):02487         L0C2E    puls  a,x,y,pc       Restore regs & return
                      (  cowin_beta5.asm):02488         
                      (  cowin_beta5.asm):02489         * Verify blocks in process DAT image
                      (  cowin_beta5.asm):02490         * Entry: A=# blocks in GP buffer
                      (  cowin_beta5.asm):02491         *        B=Start block #
                      (  cowin_beta5.asm):02492         *        X=Caller's register stack ptr
                      (  cowin_beta5.asm):02493         * Exit:  A=block #*16 in DAT image
                      (  cowin_beta5.asm):02494                IFNE  H6309
0D11                  (  cowin_beta5.asm):02495         L0C31    tfr   a,e            copy start block
                      (  cowin_beta5.asm):02496                  ldf   #8             get # DAT slots
                      (  cowin_beta5.asm):02497                ELSE
0D11 3404             (  cowin_beta5.asm):02498         L0C31    pshs  b
0D13 C608             (  cowin_beta5.asm):02499                  ldb   #8             get # of DAT slots
0D15 FD11B5           (  cowin_beta5.asm):02500                  std   >GrfMem+gr00B5 Save # of blocks in GP buffer & # DAT slots
0D18 3504             (  cowin_beta5.asm):02501                  puls  b
                      (  cowin_beta5.asm):02502                ENDC
0D1A 9E50             (  cowin_beta5.asm):02503                  ldx   <D.Proc        get current process pointer
0D1C 308850           (  cowin_beta5.asm):02504                  leax  P$DATImg+16,x  point to end of DAT image
                      (  cowin_beta5.asm):02505                IFNE  H6309
                      (  cowin_beta5.asm):02506                  addr  e,b            Add # blocks to start block #
                      (  cowin_beta5.asm):02507                ELSE
0D1F FB11B5           (  cowin_beta5.asm):02508                  addb  >GrfMem+gr00B5
                      (  cowin_beta5.asm):02509                ENDC
0D22 4F               (  cowin_beta5.asm):02510                  clra                 Clear high byte of D 
0D23 5A               (  cowin_beta5.asm):02511                  decb                 Adjust for zero based
0D24 10A383           (  cowin_beta5.asm):02512         L0C40    cmpd  ,--x           Same block as DAT image?
0D27 2709             (  cowin_beta5.asm):02513                  beq   L0C4B          yes, skip ahead
                      (  cowin_beta5.asm):02514                  IFNE  H6309
                      (  cowin_beta5.asm):02515                  decf                 No, dec block counter
                      (  cowin_beta5.asm):02516                  ELSE
0D29 7A11B6           (  cowin_beta5.asm):02517                  dec   >GrfMem+gr00B5+1
                      (  cowin_beta5.asm):02518                  ENDC
0D2C 26F6             (  cowin_beta5.asm):02519                  bne   L0C40          Do until all 8 blocks are checked
0D2E 53               (  cowin_beta5.asm):02520         L0C62    comb                 Exit with boundary (bad page address) error
0D2F C6D2             (  cowin_beta5.asm):02521                  ldb   #E$BPAddr
0D31 39               (  cowin_beta5.asm):02522                  rts   
                      (  cowin_beta5.asm):02523         
     0D32             (  cowin_beta5.asm):02524         L0C4B    equ   *
                      (  cowin_beta5.asm):02525                IFNE  H6309
                      (  cowin_beta5.asm):02526                  decf                 Dec block # counter
                      (  cowin_beta5.asm):02527                  dece                 Dec # blocks in buffer counter
                      (  cowin_beta5.asm):02528                ELSE
0D32 7A11B6           (  cowin_beta5.asm):02529                  dec   >GrfMem+gr00B5+1
0D35 7A11B5           (  cowin_beta5.asm):02530                  dec   >GrfMem+gr00B5
                      (  cowin_beta5.asm):02531                ENDC
0D38 2707             (  cowin_beta5.asm):02532                  beq   L0C58          Do until GP blocks are checked
0D3A 5A               (  cowin_beta5.asm):02533                  decb                 Dec block #
0D3B E183             (  cowin_beta5.asm):02534                  cmpb  ,--x           Same as previous one in DAT image
0D3D 27F3             (  cowin_beta5.asm):02535                  beq   L0C4B          Yes, keep going
0D3F 20ED             (  cowin_beta5.asm):02536                  bra   L0C62          No, exit with bad page address error
                      (  cowin_beta5.asm):02537         
                      (  cowin_beta5.asm):02538                IFNE  H6309
0D41                  (  cowin_beta5.asm):02539         L0C58    tfr   f,a            Move block # within DAT to proper reg
                      (  cowin_beta5.asm):02540                ELSE
0D41 B611B6           (  cowin_beta5.asm):02541         L0C58    lda   >GrfMem+gr00B5+1  Move block # within DAT to proper reg
                      (  cowin_beta5.asm):02542                ENDC
0D44 48               (  cowin_beta5.asm):02543                  lsla                 Multiply x 16
0D45 48               (  cowin_beta5.asm):02544                  lsla  
0D46 48               (  cowin_beta5.asm):02545                  lsla  
0D47 48               (  cowin_beta5.asm):02546                  lsla  
0D48 5F               (  cowin_beta5.asm):02547                  clrb  
0D49 39               (  cowin_beta5.asm):02548         L0CF1    rts                  return
                      (  cowin_beta5.asm):02549         
                      (  cowin_beta5.asm):02550         ******************************
                      (  cowin_beta5.asm):02551         * Special windowing processor (called from AltIRQ in VTIO)
                      (  cowin_beta5.asm):02552         * Entry: A=$00 - Screen has changed in some way
                      (  cowin_beta5.asm):02553         *          $01 - Update mouse packet window region (Pt.Stat)
                      (  cowin_beta5.asm):02554         *          $02 - Update text & graphics cursor
                      (  cowin_beta5.asm):02555         *          $03 - Update auto follow mouse
0D4A 4D               (  cowin_beta5.asm):02556         L0C68    tsta                 Screen change?
0D4B 2710             (  cowin_beta5.asm):02557                  beq   L0C7F          Yes, go do
0D4D 4A               (  cowin_beta5.asm):02558                  deca                 Update mouse packet?
                      (  cowin_beta5.asm):02559         * TODO: Does update mouse packet go in CoGrf? YES, PRETTY SURE IT DID?
                      (  cowin_beta5.asm):02560                IFNE  CoGrf-1
0D4E 1027109D         (  cowin_beta5.asm):02561                  lbeq  L1CC8          Yes, go do
                      (  cowin_beta5.asm):02562                ENDC
0D52 4A               (  cowin_beta5.asm):02563                  deca                 Update cursors?
0D53 2761             (  cowin_beta5.asm):02564                  beq   L0CE7          Yes, go do
                      (  cowin_beta5.asm):02565         * TODO: Does auto-follow mouse go in CoGrf?
                      (  cowin_beta5.asm):02566                IFNE  CoGrf-1
0D55 4A               (  cowin_beta5.asm):02567                  deca                 Update auto-follow mouse?
0D56 10270E68         (  cowin_beta5.asm):02568                  lbeq  L1B4D          Yes, go do
                      (  cowin_beta5.asm):02569                ENDC
0D5A 16F5C8           (  cowin_beta5.asm):02570                  lbra  L0A96
                      (  cowin_beta5.asm):02571         
                      (  cowin_beta5.asm):02572         * Active window has changed, update everything
0D5D 17F9E4           (  cowin_beta5.asm):02573         L0C7F    lbsr  L06AE          Get window table pointer
0D60 EC30             (  cowin_beta5.asm):02574                  ldd   Wt.STbl,y      Screen table active?
                      (  cowin_beta5.asm):02575         * NOTE: IS THIS THE WHITE SCREEN BUG???
0D62 2BE5             (  cowin_beta5.asm):02576                  bmi   L0CF1          No, return
                      (  cowin_beta5.asm):02577         * Check for de-activation of previous window
0D64 6FE2             (  cowin_beta5.asm):02578         L0C86    clr   ,-s            clear activate/deactivate flag
0D66 BE1022           (  cowin_beta5.asm):02579                  ldx   >WGlobal+G.PrWMPt  get previous window static mem pointer
0D69 BC1020           (  cowin_beta5.asm):02580                  cmpx  >WGlobal+G.CurDev  Same as current device?
0D6C 271D             (  cowin_beta5.asm):02581                  beq   L0CB3          Yes, activate current window
0D6E 6CE4             (  cowin_beta5.asm):02582                  inc   ,s             flag de-activation of last used window
0D70 FE1022           (  cowin_beta5.asm):02583                  ldu   >WGlobal+G.PrWMPt  get previous device static mem pointer
0D73 2716             (  cowin_beta5.asm):02584                  beq   L0CB3          nothing there, skip ahead
0D75 3420             (  cowin_beta5.asm):02585                  pshs  y              preserve new window table pointer
0D77 8D47             (  cowin_beta5.asm):02586                  bsr   L0CF2          any overlay windows or frames?
                      (  cowin_beta5.asm):02587                IFNE  CoGrf-1
0D79 2503             (  cowin_beta5.asm):02588                  bcs   L0CA3          no, skip ahead
0D7B 17036C           (  cowin_beta5.asm):02589                  lbsr  L1034          set menu bar to in-active state
                      (  cowin_beta5.asm):02590                ENDC
0D7E B610BE           (  cowin_beta5.asm):02591         L0CA3    lda   >WGlobal+g00BE get new window table flag
0D81 2B06             (  cowin_beta5.asm):02592                  bmi   L0CB1          not used, skip ahead
0D83 FE1022           (  cowin_beta5.asm):02593                  ldu   >WGlobal+G.PrWMPt  get previous device static mem pointer
0D86 A7C835           (  cowin_beta5.asm):02594                  sta   V.WinNum,u     save window table # into it
0D89 3520             (  cowin_beta5.asm):02595         L0CB1    puls  y              restore window table pointer
                      (  cowin_beta5.asm):02596         * Send select to grfdrv
0D8B C610             (  cowin_beta5.asm):02597         L0CB3    ldb   #$10           Get select callcode
0D8D 17F5FB           (  cowin_beta5.asm):02598                  lbsr  L0101          Send it to grfdrv
0D90 FE1020           (  cowin_beta5.asm):02599                  ldu   >WGlobal+G.CurDev  Get current device static mem pointer
                      (  cowin_beta5.asm):02600         * Check for activation of current window
0D93 6DE4             (  cowin_beta5.asm):02601                  tst   ,s             did we de-activate last used window?
0D95 2719             (  cowin_beta5.asm):02602                  beq   L0CE1          no, skip activate
0D97 3460             (  cowin_beta5.asm):02603                  pshs  y,u            Preserve regs
0D99 8D25             (  cowin_beta5.asm):02604                  bsr   L0CF2          any overlay or framed windows?
                      (  cowin_beta5.asm):02605                IFNE  CoGrf-1
0D9B 2503             (  cowin_beta5.asm):02606                  bcs   L0CCA          no, skip ahead
0D9D 1706CF           (  cowin_beta5.asm):02607                  lbsr  L13E9          set menu bar to active state
                      (  cowin_beta5.asm):02608                ENDC
0DA0 FE1020           (  cowin_beta5.asm):02609         L0CCA    ldu   >WGlobal+G.CurDev  get current device mem pointer
0DA3 FF1022           (  cowin_beta5.asm):02610                  stu   >WGlobal+G.PrWMPt  save it as previous
0DA6 3560             (  cowin_beta5.asm):02611                  puls  u,y            Get Y & static mem ptr back for possible overlay
0DA8 B610BE           (  cowin_beta5.asm):02612                  lda   >WGlobal+g00BE get overlay window #
0DAB 2B03             (  cowin_beta5.asm):02613                  bmi   L0CE1          Wasn't an overlay, skip ahead
0DAD A7C835           (  cowin_beta5.asm):02614                  sta   V.WinNum,u     save it as current
0DB0 3261             (  cowin_beta5.asm):02615         L0CE1    leas  1,s            purge stack
0DB2 6E9F10C4         (  cowin_beta5.asm):02616                  jmp   [>WGlobal+G.MsInit]   initialize mouse & return
                      (  cowin_beta5.asm):02617         
                      (  cowin_beta5.asm):02618         * Update text & mouse cursors
0DB6 17F95A           (  cowin_beta5.asm):02619         L0CE7    lbsr  L06A0          verify window table
0DB9 258E             (  cowin_beta5.asm):02620                  bcs   L0CF1          not good, return error
0DBB C646             (  cowin_beta5.asm):02621         L0CEC    ldb   #$46           get set window code
0DBD 16F5CB           (  cowin_beta5.asm):02622                  lbra  L0101          send it to grfdrv
                      (  cowin_beta5.asm):02623         
                      (  cowin_beta5.asm):02624         * Checks for any overlay windows & framed or scroll barred windows
                      (  cowin_beta5.asm):02625         * Entry: U=Static mem pointer
                      (  cowin_beta5.asm):02626         * Exit : Carry set=No overlay windows & No framed/scroll barred window
                      (  cowin_beta5.asm):02627         *                  $BE in global mem will be $FF
                      (  cowin_beta5.asm):02628         *        Carry clear=There is 2 possibilitys here 1: Framed or scroll barred
                      (  cowin_beta5.asm):02629         *                    window or 2: Overlay window is present, $BE in global
                      (  cowin_beta5.asm):02630         *                    will contain the current window table # & $35 in static
                      (  cowin_beta5.asm):02631         *                    memory of current device will be switched to the
                      (  cowin_beta5.asm):02632         *                    parent window of the overlay
0DC0 86FF             (  cowin_beta5.asm):02633         L0CF2    lda   #$FF           initialize new window table flag
0DC2 B710BE           (  cowin_beta5.asm):02634                  sta   >WGlobal+g00BE
0DC5 17F97C           (  cowin_beta5.asm):02635         L0CFA    lbsr  L06AE          get window table pointer of this window
                      (  cowin_beta5.asm):02636                IFNE  CoGrf-1
0DC8 170138           (  cowin_beta5.asm):02637                  lbsr  L0E34          framed or scroll barred window?
0DCB 2501             (  cowin_beta5.asm):02638                  bcs   L0D06          no, skip ahead
0DCD 39               (  cowin_beta5.asm):02639                  rts   
                      (  cowin_beta5.asm):02640                ENDC
                      (  cowin_beta5.asm):02641         
                      (  cowin_beta5.asm):02642         * No framed or scroll barred window, check for overlay window
0DCE A632             (  cowin_beta5.asm):02643         L0D06    lda   Wt.BLnk,y      is this a overlay window?
0DD0 2B10             (  cowin_beta5.asm):02644                  bmi   L0D20          no, return carry set
0DD2 E6C835           (  cowin_beta5.asm):02645                  ldb   V.WinNum,u     get current window table #
0DD5 7D10BE           (  cowin_beta5.asm):02646                  tst   >WGlobal+g00BE already have one?
0DD8 2A03             (  cowin_beta5.asm):02647                  bpl   L0D1B          yes, skip ahead
0DDA F710BE           (  cowin_beta5.asm):02648                  stb   >WGlobal+g00BE save current window #
0DDD A7C835           (  cowin_beta5.asm):02649         L0D1B    sta   V.WinNum,u     save back link as current window in static mem
0DE0 20E3             (  cowin_beta5.asm):02650                  bra   L0CFA          go check it out
                      (  cowin_beta5.asm):02651         
0DE2 43               (  cowin_beta5.asm):02652         L0D20    coma                 set carry & return
0DE3 39               (  cowin_beta5.asm):02653                  rts   
                      (  cowin_beta5.asm):02654         
                      (  cowin_beta5.asm):02655                IFNE  CoGrf-1
                      (  cowin_beta5.asm):02656         * SS.WnSet SetStt call processor
0DE4 17061A           (  cowin_beta5.asm):02657         L0D23    lbsr  L1358          setup the graphics table entry
0DE7 AE26             (  cowin_beta5.asm):02658                  ldx   PD.RGS,y       get register stack pointer
0DE9 E607             (  cowin_beta5.asm):02659                  ldb   R$Y+1,x        get requested window type
0DEB C105             (  cowin_beta5.asm):02660                  cmpb  #WT.PBox       past maximum?
0DED 1022F94F         (  cowin_beta5.asm):02661                  lbhi  L0697          yes, return error
0DF1 58               (  cowin_beta5.asm):02662                  lslb                 adjust for 2 bytes/entry
0DF2 308C04           (  cowin_beta5.asm):02663                  leax  <L0D3C,pc      point to vector table
0DF5 EC85             (  cowin_beta5.asm):02664                  ldd   b,x            get offset
0DF7 6E8B             (  cowin_beta5.asm):02665                  jmp   d,x            continue from there
                      (  cowin_beta5.asm):02666         
0DF9 01DC             (  cowin_beta5.asm):02667         L0D3C    fdb   L0F9A-L0D3C    No box
0DFB 000C             (  cowin_beta5.asm):02668                  fdb   L0D48-L0D3C    Framed window
0DFD 00BF             (  cowin_beta5.asm):02669                  fdb   L0DE8-L0D3C    Framed scroll barred window
0DFF 013B             (  cowin_beta5.asm):02670                  fdb   L0E68-L0D3C    shadowed window
0E01 019F             (  cowin_beta5.asm):02671                  fdb   L0EFC-L0D3C    double box
0E03 023B             (  cowin_beta5.asm):02672                  fdb   L0FF2-L0D3C    plain box
                      (  cowin_beta5.asm):02673         
                      (  cowin_beta5.asm):02674         * Process framed window setstat
0E05 1700CD           (  cowin_beta5.asm):02675         L0D48    lbsr  L0E04          is this an overlay window?
0E08 2408             (  cowin_beta5.asm):02676                  bcc   L0D55          no, skip ahead
0E0A 7D100A           (  cowin_beta5.asm):02677                  tst   >WGlobal+G.CrDvFl  are we the active device?
0E0D 2703             (  cowin_beta5.asm):02678                  beq   L0D55          No, skip ahead
0E0F 1700D0           (  cowin_beta5.asm):02679                  lbsr  L0E13          de-activate parent window's menu bar
0E12 1703BA           (  cowin_beta5.asm):02680         L0D55    lbsr  L115F          copy window table & check for graphics screen
0E15 8601             (  cowin_beta5.asm):02681                  lda   #WT.FWin       get window type
0E17 8D20             (  cowin_beta5.asm):02682                  bsr   L0D80          get window descriptor & setup graphics table entry
0E19 240C             (  cowin_beta5.asm):02683                  bcc   L0D6A          went ok, skip ahead
                      (  cowin_beta5.asm):02684         * Error, re-draw parent window & return
0E1B 3405             (  cowin_beta5.asm):02685         L0D5E    pshs  cc,b           Preserve error
0E1D 7D100A           (  cowin_beta5.asm):02686                  tst   >WGlobal+G.CrDvFl  Are we active device?
0E20 2703             (  cowin_beta5.asm):02687                  beq   L0D68          No, exit with error
0E22 1700F5           (  cowin_beta5.asm):02688                  lbsr  L0E4B          activate parent window's menu bar
0E25 3585             (  cowin_beta5.asm):02689         L0D68    puls  cc,b,pc        Exit with error
                      (  cowin_beta5.asm):02690         
                      (  cowin_beta5.asm):02691         * Window descriptor is good, print it according to active/in-active
0E27 7D100A           (  cowin_beta5.asm):02692         L0D6A    tst   >WGlobal+G.CrDvFl  are we the active window?
0E2A 2705             (  cowin_beta5.asm):02693                  beq   L0D74          no, skip ahead
0E2C 17064F           (  cowin_beta5.asm):02694                  lbsr  L13FA          print menu in active state
0E2F 2003             (  cowin_beta5.asm):02695                  bra   L0D77          skip ahead
                      (  cowin_beta5.asm):02696         
0E31 1702B9           (  cowin_beta5.asm):02697         L0D74    lbsr  L1037          print menu in in-active state
0E34 2573             (  cowin_beta5.asm):02698         L0D77    bcs   L0D7F          error on printing, return
0E36 16041C           (  cowin_beta5.asm):02699                  lbra  L11F3          change window working size for frame & exit
                      (  cowin_beta5.asm):02700         
                      (  cowin_beta5.asm):02701         * Setup graphics table entry with window type & check sizes
                      (  cowin_beta5.asm):02702         * Entry: A=Window type (Not related to grfdrv, cowin specific)
                      (  cowin_beta5.asm):02703         *        X=Graphics table entry pointer
                      (  cowin_beta5.asm):02704         *        Y=Path descriptor pointer
0E39 32E8DE           (  cowin_beta5.asm):02705         L0D80    leas  -WN.SIZ,s      make a buffer to preserve current window desc.
0E3C A784             (  cowin_beta5.asm):02706                  sta   ,x             save window type
0E3E EE26             (  cowin_beta5.asm):02707                  ldu   PD.RGS,y       get pointer to register stack
0E40 EE44             (  cowin_beta5.asm):02708                  ldu   R$X,u          get pointer to window descriptor
0E42 EF05             (  cowin_beta5.asm):02709                  stu   Gt.DPtr,x      save it in graphics table
                      (  cowin_beta5.asm):02710                IFNE  H6309
                      (  cowin_beta5.asm):02711                  ldw   <D.Proc        get process ID of creator
                      (  cowin_beta5.asm):02712                  lda   P$ID,w
                      (  cowin_beta5.asm):02713                  sta   Gt.Proc,x      save it in graphics table
                      (  cowin_beta5.asm):02714                  ste   Gt.PBlk,x      Save process block # into graphics table
                      (  cowin_beta5.asm):02715                ELSE
0E44 3420             (  cowin_beta5.asm):02716                  pshs  y
0E46 109E50           (  cowin_beta5.asm):02717                  ldy   <D.Proc        get process ID of creator
0E49 10BF11B5         (  cowin_beta5.asm):02718                  sty   >GrfMem+gr00B5 Save "W" copy
0E4D 9650             (  cowin_beta5.asm):02719                  lda   <D.Proc        Get process block #    
0E4F A70F             (  cowin_beta5.asm):02720                  sta   Gt.PBlk,x      ste  - Save process block # into graphics table
0E51 A6A4             (  cowin_beta5.asm):02721                  lda   P$ID,y         Get process ID # of creator
0E53 A70E             (  cowin_beta5.asm):02722                  sta   Gt.Proc,x      Save in graphics table
0E55 3520             (  cowin_beta5.asm):02723                  puls  y
                      (  cowin_beta5.asm):02724                ENDC
0E57 33E4             (  cowin_beta5.asm):02725                  leau  ,s             point to buffer
0E59 3410             (  cowin_beta5.asm):02726                  pshs  x              save graphics table pointer
0E5B BE1075           (  cowin_beta5.asm):02727                  ldx   >WGlobal+G.GfxTbl  get graphics table pointer
0E5E 30890240         (  cowin_beta5.asm):02728                  leax  >$0240,x       point to window descriptor buffer
                      (  cowin_beta5.asm):02729                IFNE  H6309
                      (  cowin_beta5.asm):02730                  ldw   #WN.SIZ        Preserve window descriptor in stack buffer
                      (  cowin_beta5.asm):02731                  tfm   x+,u+
                      (  cowin_beta5.asm):02732                ELSE
                      (  cowin_beta5.asm):02733         * 6809 - eventually use mini stack blast copy (34 byte copy)
0E62 3406             (  cowin_beta5.asm):02734                  pshs  d
0E64 C622             (  cowin_beta5.asm):02735                  ldb   #WN.SIZ        Copy from window descriptor buffer to temp stack copy
0E66 A680             (  cowin_beta5.asm):02736         L0D80b   lda   ,x+
0E68 A7C0             (  cowin_beta5.asm):02737                  sta   ,u+
0E6A 5A               (  cowin_beta5.asm):02738                  decb
0E6B 26F9             (  cowin_beta5.asm):02739                  bne   L0D80b
0E6D FD11B5           (  cowin_beta5.asm):02740                  std   >GrfMem+gr00B5
0E70 3506             (  cowin_beta5.asm):02741                  puls  d
                      (  cowin_beta5.asm):02742                ENDC
0E72 AEE4             (  cowin_beta5.asm):02743                  ldx   ,s             restore graphics table entry pointer
0E74 1705A3           (  cowin_beta5.asm):02744                  lbsr  L1371          get window descriptor from caller
0E77 10BE10BB         (  cowin_beta5.asm):02745                  ldy   >WGlobal+g00BB Get ptr to work window table
0E7B 3384             (  cowin_beta5.asm):02746                  leau  ,x             point to window descriptor
0E7D 3510             (  cowin_beta5.asm):02747                  puls  x              restore graphics table entry pointer
                      (  cowin_beta5.asm):02748         * Check if window will fit
0E7F A637             (  cowin_beta5.asm):02749                  lda   Wt.SZX,y       get current X size from window table
0E81 A1C815           (  cowin_beta5.asm):02750                  cmpa  WN.XMIN,u      will it fit?
0E84 2507             (  cowin_beta5.asm):02751                  blo   L0DC0          no, clear entry & return
0E86 A638             (  cowin_beta5.asm):02752                  lda   Wt.SZY,y       get current Y size from window table
0E88 A1C816           (  cowin_beta5.asm):02753                  cmpa  WN.YMIN,u      will it fit?
0E8B 241D             (  cowin_beta5.asm):02754                  bhs   L0DD6          yes, return
                      (  cowin_beta5.asm):02755         * Window descriptor won't fit on window, restore old & return
0E8D 6F84             (  cowin_beta5.asm):02756         L0DC0    clr   Gt.WTyp,x      clear graphics table entry
0E8F FE1075           (  cowin_beta5.asm):02757                  ldu   >WGlobal+G.GfxTbl   get graphics table pointer
0E92 33C90240         (  cowin_beta5.asm):02758                  leau  >$0240,u       point to working buffer
                      (  cowin_beta5.asm):02759                IFNE  H6309
                      (  cowin_beta5.asm):02760                  ldw   #WN.SIZ        Restore window descriptor from stack copy
                      (  cowin_beta5.asm):02761                  tfm   s+,u+
                      (  cowin_beta5.asm):02762                ELSE
                      (  cowin_beta5.asm):02763         * 6809 - use Mini stack blast copy here, then leas WN.SIZ,s to eat temp stack copy when done
0E96 3402             (  cowin_beta5.asm):02764                  pshs  a              Restore window descriptor from stack copy
0E98 8622             (  cowin_beta5.asm):02765                  lda   #WN.SIZ
0E9A E6E0             (  cowin_beta5.asm):02766         L0DC0b   ldb   ,s+
0E9C E7C0             (  cowin_beta5.asm):02767                  stb   ,u+
0E9E 4A               (  cowin_beta5.asm):02768                  deca
0E9F 26F9             (  cowin_beta5.asm):02769                  bne   L0DC0b
0EA1 B711B5           (  cowin_beta5.asm):02770                  sta   >GrfMem+gr00B5
0EA4 3502             (  cowin_beta5.asm):02771                  puls  a
                      (  cowin_beta5.asm):02772                ENDC
0EA6 53               (  cowin_beta5.asm):02773                  comb                 set carry
0EA7 C6BD             (  cowin_beta5.asm):02774                  ldb   #E$ICoord      get illegal co-ordinates error
0EA9 39               (  cowin_beta5.asm):02775         L0D7F    rts                  return
                      (  cowin_beta5.asm):02776         
                      (  cowin_beta5.asm):02777         * Window table is good, return
0EAA 32E822           (  cowin_beta5.asm):02778         L0DD6    leas  WN.SIZ,s       purge stack
0EAD A684             (  cowin_beta5.asm):02779                  lda   Gt.WTyp,x      get screen type
0EAF 8102             (  cowin_beta5.asm):02780                  cmpa  #WT.FSWin      scroll barred?
0EB1 102701B2         (  cowin_beta5.asm):02781                  lbeq  FSWin          yes, do 3D frame
0EB5 160185           (  cowin_beta5.asm):02782                  lbra  L0FFC          draw 3D frame & return
                      (  cowin_beta5.asm):02783         
                      (  cowin_beta5.asm):02784         * Process a framed scroll barred window
0EB8 8D1B             (  cowin_beta5.asm):02785         L0DE8    bsr   L0E04          is this a overlay window?
0EBA 2407             (  cowin_beta5.asm):02786                  bcc   L0DF3          no, skip ahead
0EBC 7D100A           (  cowin_beta5.asm):02787                  tst   >WGlobal+G.CrDvFl  current device?
0EBF 2702             (  cowin_beta5.asm):02788                  beq   L0DF3          no, skip ahead
0EC1 8D1F             (  cowin_beta5.asm):02789                  bsr   L0E13          de-activate menu bar on parent window
0EC3 170309           (  cowin_beta5.asm):02790         L0DF3    lbsr  L115F          setup window table & check if graphics screen
0EC6 8602             (  cowin_beta5.asm):02791                  lda   #WT.FSWin      get code for scroll barred window
                      (  cowin_beta5.asm):02792                IFNE  H6309
                      (  cowin_beta5.asm):02793                  bsr   L0D80          setup graphics table entry & check window desc.
                      (  cowin_beta5.asm):02794                ELSE
0EC8 17FF6E           (  cowin_beta5.asm):02795                  lbsr  L0D80
                      (  cowin_beta5.asm):02796                ENDC
0ECB 1025FF4C         (  cowin_beta5.asm):02797                  lbcs  L0D5E          error, return
0ECF 170251           (  cowin_beta5.asm):02798                  lbsr  L108C          go draw window
0ED2 16FF52           (  cowin_beta5.asm):02799                  lbra  L0D6A          finish up by drawing menu bar & return
                      (  cowin_beta5.asm):02800         
                      (  cowin_beta5.asm):02801         * Check if this is a overlay window
0ED5 3460             (  cowin_beta5.asm):02802         L0E04    pshs  y,u            preserve regs
0ED7 17F86A           (  cowin_beta5.asm):02803                  lbsr  L06AE          get window table pointer
0EDA 43               (  cowin_beta5.asm):02804                  coma                 set carry
0EDB A632             (  cowin_beta5.asm):02805                  lda   Wt.BLnk,y      any overlays?
0EDD 2A01             (  cowin_beta5.asm):02806                  bpl   L0E10          yes, return carry set
0EDF 4F               (  cowin_beta5.asm):02807                  clra                 clear carry
0EE0 35E0             (  cowin_beta5.asm):02808         L0E10    puls  y,u,pc         return
                      (  cowin_beta5.asm):02809         
                      (  cowin_beta5.asm):02810         * Place parent window in a in-active state if it's a framed or scroll barred
                      (  cowin_beta5.asm):02811         * window.
0EE2 3460             (  cowin_beta5.asm):02812         L0E13    pshs  y,u            preserve registers
0EE4 17F85D           (  cowin_beta5.asm):02813                  lbsr  L06AE          get pointer to window table entry
0EE7 A632             (  cowin_beta5.asm):02814                  lda   Wt.BLnk,y      get overlay window back link
0EE9 EE62             (  cowin_beta5.asm):02815                  ldu   2,s            get static mem pointer
0EEB 10AEE4           (  cowin_beta5.asm):02816                  ldy   ,s             get path descriptor pointer
0EEE E6C835           (  cowin_beta5.asm):02817                  ldb   V.WinNum,u     get current window #
0EF1 3404             (  cowin_beta5.asm):02818                  pshs  b              save it
0EF3 A7C835           (  cowin_beta5.asm):02819                  sta   V.WinNum,u     make overlay back link current
0EF6 8D0B             (  cowin_beta5.asm):02820                  bsr   L0E34          framed or scroll barred?
0EF8 2503             (  cowin_beta5.asm):02821                  bcs   L0E2E          no, skip ahead
0EFA 1701ED           (  cowin_beta5.asm):02822                  lbsr  L1034          set menu bar to inactive state
0EFD 3564             (  cowin_beta5.asm):02823         L0E2E    puls  b,y,u          restore
0EFF E7C835           (  cowin_beta5.asm):02824                  stb   V.WinNum,u     restore active window & return
0F02 39               (  cowin_beta5.asm):02825                  rts
                      (  cowin_beta5.asm):02826         
                      (  cowin_beta5.asm):02827         * Check whether current window has a framed or framed scrolled barred window
                      (  cowin_beta5.asm):02828         * Entry: U=Static mem pointer
                      (  cowin_beta5.asm):02829         * Exit:  CC: Carry set if window is scroll barred or framed
0F03 3412             (  cowin_beta5.asm):02830         L0E34    pshs  a,x            preserve registers
0F05 6D46             (  cowin_beta5.asm):02831                  tst   V.TYPE,u       is this a window?
0F07 2A0E             (  cowin_beta5.asm):02832                  bpl   L0E48          no, return with carry
0F09 17F844           (  cowin_beta5.asm):02833                  lbsr  L06B9          get graphics table pointer
0F0C A684             (  cowin_beta5.asm):02834                  lda   Gt.WTyp,x      get cowin screen type
0F0E 2707             (  cowin_beta5.asm):02835                  beq   L0E48          if no box, return with carry set
0F10 8102             (  cowin_beta5.asm):02836                  cmpa  #WT.FSWin      scroll barred or framed?
0F12 2203             (  cowin_beta5.asm):02837                  bhi   L0E48          no, return carry set
0F14 4F               (  cowin_beta5.asm):02838                  clra                 return with carry clear
0F15 3592             (  cowin_beta5.asm):02839                  puls  a,x,pc
                      (  cowin_beta5.asm):02840         
0F17 43               (  cowin_beta5.asm):02841         L0E48    coma                 return with carry set
0F18 3592             (  cowin_beta5.asm):02842                  puls  a,x,pc
                      (  cowin_beta5.asm):02843         
                      (  cowin_beta5.asm):02844         * Place parent window in a active state if it's a framed or scroll barred
                      (  cowin_beta5.asm):02845         * window.
0F1A FE10B7           (  cowin_beta5.asm):02846         L0E4B    ldu   >WGlobal+g00B7 get static mem pointer
0F1D A632             (  cowin_beta5.asm):02847         L0E51    lda   Wt.BLnk,y      get overlay window link
0F1F E6C835           (  cowin_beta5.asm):02848                  ldb   V.WinNum,u     get current window #
0F22 3444             (  cowin_beta5.asm):02849                  pshs  b,u            save current window # & static mem
0F24 A7C835           (  cowin_beta5.asm):02850                  sta   V.WinNum,u     save back link as current
0F27 8DDA             (  cowin_beta5.asm):02851                  bsr   L0E34          framed or scroll barred?
0F29 2503             (  cowin_beta5.asm):02852                  bcs   L0E62          no, skip ahead
0F2B 17054D           (  cowin_beta5.asm):02853                  lbsr  L13F5          update menu bar
0F2E 3544             (  cowin_beta5.asm):02854         L0E62    puls  b,u            restore static mem & current window #
0F30 E7C835           (  cowin_beta5.asm):02855                  stb   V.WinNum,u     restore static mem to current window & return
0F33 39               (  cowin_beta5.asm):02856                  rts
                      (  cowin_beta5.asm):02857         
                      (  cowin_beta5.asm):02858         * Process a shadowed window. NOTE: The "garbarge" pixels left in the lower left/upper right
                      (  cowin_beta5.asm):02859         *  corners are from clearing the window itself
0F34 1700BA           (  cowin_beta5.asm):02860         L0E68    lbsr  L0FBB          update parent window if any
0F37 170295           (  cowin_beta5.asm):02861                  lbsr  L115F          check for graphic window
0F3A 8603             (  cowin_beta5.asm):02862                  lda   #WT.SBox       save window type in graphics table entry
0F3C A784             (  cowin_beta5.asm):02863                  sta   Gt.WTyp,x
0F3E 10BE10BB         (  cowin_beta5.asm):02864                  ldy   >WGlobal+g00BB Get ptr to work window table
0F42 170453           (  cowin_beta5.asm):02865                  lbsr  L12BE          clear window
0F45 308C14           (  cowin_beta5.asm):02866                  leax  <SBox1,pc      point to draw table for 640 wide screen
                      (  cowin_beta5.asm):02867                IFNE  H6309
                      (  cowin_beta5.asm):02868                  tim   #$01,>WGlobal+g00BD 640 wide screen?
                      (  cowin_beta5.asm):02869                ELSE
0F48 B610BD           (  cowin_beta5.asm):02870                  lda   >WGlobal+g00BD 640 wide screen?
0F4B 8401             (  cowin_beta5.asm):02871                  anda  #$01
                      (  cowin_beta5.asm):02872                ENDC
0F4D 2603             (  cowin_beta5.asm):02873                  bne   L0E91          no, skip ahead
0F4F 308C28           (  cowin_beta5.asm):02874                  leax  <SBox2,pc      point to draw table for 320 wide screen
0F52 8603             (  cowin_beta5.asm):02875         L0E91    lda   #$03           get # entrys in draw table
0F54 17034D           (  cowin_beta5.asm):02876                  lbsr  DrawBar        draw window
0F57 1702FB           (  cowin_beta5.asm):02877                  lbsr  L11F3          change window to working size
0F5A 5F               (  cowin_beta5.asm):02878                  clrb                 clear errors
0F5B 39               (  cowin_beta5.asm):02879                  rts                  return
                      (  cowin_beta5.asm):02880         
                      (  cowin_beta5.asm):02881         * LCB - may want to tweak a tiny bit - I think it is drawing extra pixel on the upper
                      (  cowin_beta5.asm):02882         *   right and lower left corners (instead of leaving background). Will have to fiddle with
                      (  cowin_beta5.asm):02883         *   and see if it looks ok with varied fore/background colors
                      (  cowin_beta5.asm):02884         * Draw table for shadowed window on 640 wide screen
                      (  cowin_beta5.asm):02885         * Draw table for Light Grey Box
0F5C 02               (  cowin_beta5.asm):02886         SBox1    fcb   WColor1        Color 1
0F5D 0000             (  cowin_beta5.asm):02887                  fdb   0              Start X=0
0F5F 0000             (  cowin_beta5.asm):02888                  fdb   0              Start Y=0
0F61 FFFD             (  cowin_beta5.asm):02889                  fdb   -3             End X=Width of window-3
0F63 FFFF             (  cowin_beta5.asm):02890                  fdb   -1             End Y=Height of window-1
0F65 4C               (  cowin_beta5.asm):02891                  fcb   $4c            Box function in GRFDRV
                      (  cowin_beta5.asm):02892         
                      (  cowin_beta5.asm):02893         * Draw table for Dark Grey shadow on right side
0F66 01               (  cowin_beta5.asm):02894                  fcb   WColor2        Color 2
0F67 FFFE             (  cowin_beta5.asm):02895                  fdb   -2             Start X=Width of window-2
0F69 0002             (  cowin_beta5.asm):02896                  fdb   2              Start Y=2
0F6B 8000             (  cowin_beta5.asm):02897                  fdb   $8000          End X=Width of window
0F6D 8000             (  cowin_beta5.asm):02898                  fdb   $8000          End Y=Height of window
0F6F 4E               (  cowin_beta5.asm):02899                  fcb   $4e            Bar function in GRFDRV
                      (  cowin_beta5.asm):02900         
                      (  cowin_beta5.asm):02901         * Draw table for Dark Grey shadow on bottom
0F70 01               (  cowin_beta5.asm):02902                  fcb   WColor2        Color 2
0F71 0002             (  cowin_beta5.asm):02903                  fdb   2              Start X=2
0F73 8000             (  cowin_beta5.asm):02904                  fdb   $8000          Start Y=Height of window
0F75 8000             (  cowin_beta5.asm):02905                  fdb   $8000          End X=Width of window
0F77 8000             (  cowin_beta5.asm):02906                  fdb   $8000          End Y=Height of window
0F79 4A               (  cowin_beta5.asm):02907                  fcb   $4a            Line function in GRFDRV
                      (  cowin_beta5.asm):02908         
                      (  cowin_beta5.asm):02909         * Draw table for shadowed window on 320 wide screen
                      (  cowin_beta5.asm):02910         * Draw table for Light Grey Box
0F7A 02               (  cowin_beta5.asm):02911         SBox2    fcb   WColor1        Color 1
0F7B 0000             (  cowin_beta5.asm):02912                  fdb   0              Start X=0
0F7D 0000             (  cowin_beta5.asm):02913                  fdb   0              Start Y=0
0F7F FFFF             (  cowin_beta5.asm):02914                  fdb   -1             End X=Width of window-1
0F81 FFFF             (  cowin_beta5.asm):02915                  fdb   -1             End Y=Height of window-1
0F83 4C               (  cowin_beta5.asm):02916                  fcb   $4c            Box function in GRFDRV
                      (  cowin_beta5.asm):02917         
                      (  cowin_beta5.asm):02918         * Draw table for Dark Grey shadow on right side
0F84 01               (  cowin_beta5.asm):02919                  fcb   WColor2        Color 2
0F85 8000             (  cowin_beta5.asm):02920                  fdb   $8000          Start X=Width of window
0F87 0002             (  cowin_beta5.asm):02921                  fdb   2              Start Y=2
0F89 8000             (  cowin_beta5.asm):02922                  fdb   $8000          End X=Width of window
0F8B 8000             (  cowin_beta5.asm):02923                  fdb   $8000          End Y=Height of window
0F8D 4A               (  cowin_beta5.asm):02924                  fcb   $4a            Line function in GRFDRV
                      (  cowin_beta5.asm):02925         
                      (  cowin_beta5.asm):02926         * Draw table for Dark Grey shadow on bottom
0F8E 01               (  cowin_beta5.asm):02927                  fcb   WColor2        Color 2
0F8F 0002             (  cowin_beta5.asm):02928                  fdb   2              Start X=2
0F91 8000             (  cowin_beta5.asm):02929                  fdb   $8000          Start Y=Height of window
0F93 8000             (  cowin_beta5.asm):02930                  fdb   $8000          End X=Width of window
0F95 8000             (  cowin_beta5.asm):02931                  fdb   $8000          End Y=Height of window
0F97 4A               (  cowin_beta5.asm):02932                  fcb   $4a            Line function in GRFDRV
                      (  cowin_beta5.asm):02933         
                      (  cowin_beta5.asm):02934         * Process a double box window
0F98 8D57             (  cowin_beta5.asm):02935         L0EFC    bsr   L0FBB          update parent window if we have to
0F9A 170232           (  cowin_beta5.asm):02936                  lbsr  L115F          if this comes back it's a graphic window
0F9D 8604             (  cowin_beta5.asm):02937                  lda   #WT.DBox       get window type
0F9F A784             (  cowin_beta5.asm):02938                  sta   Gt.WTyp,x      save it into graphics table entry
0FA1 10BE10BB         (  cowin_beta5.asm):02939                  ldy   >WGlobal+g00BB Get ptr to work window table
0FA5 1703F0           (  cowin_beta5.asm):02940                  lbsr  L12BE          clear window
0FA8 8D7E             (  cowin_beta5.asm):02941                  bsr   L1257          set text co-ordinates to 0,0
0FAA 308C0A           (  cowin_beta5.asm):02942                  leax  <DBox,pc       point to draw table
0FAD 8603             (  cowin_beta5.asm):02943                  lda   #3             get # entrys
0FAF 1702F2           (  cowin_beta5.asm):02944                  lbsr  DrawBar        go draw it
0FB2 1702A0           (  cowin_beta5.asm):02945                  lbsr  L11F3          setup window working area & return
0FB5 5F               (  cowin_beta5.asm):02946                  clrb  
0FB6 39               (  cowin_beta5.asm):02947                  rts   
                      (  cowin_beta5.asm):02948         
                      (  cowin_beta5.asm):02949         * Draw table for double box window
                      (  cowin_beta5.asm):02950         * Outside Box
0FB7 01               (  cowin_beta5.asm):02951         DBox     fcb   WColor2        Color 2
0FB8 0000             (  cowin_beta5.asm):02952                  fdb   $0000          Start X=0
0FBA 0000             (  cowin_beta5.asm):02953                  fdb   $0000          Start Y=0
0FBC 8000             (  cowin_beta5.asm):02954                  fdb   $8000          End X=Width of window
0FBE 8000             (  cowin_beta5.asm):02955                  fdb   $8000          End Y=Height of window
0FC0 4C               (  cowin_beta5.asm):02956                  fcb   $4c            Box function in GRFDRV
                      (  cowin_beta5.asm):02957         
                      (  cowin_beta5.asm):02958         * Doubled up inside box - next 2
0FC1 01               (  cowin_beta5.asm):02959                  fcb   WColor2        Color 2
0FC2 0002             (  cowin_beta5.asm):02960                  fdb   $0002          Start X=2
0FC4 0002             (  cowin_beta5.asm):02961                  fdb   $0002          Start Y=2
0FC6 FFFE             (  cowin_beta5.asm):02962                  fdb   -2             End X=Width of window-2
0FC8 FFFE             (  cowin_beta5.asm):02963                  fdb   -2             End Y=Height of window-2
0FCA 4C               (  cowin_beta5.asm):02964                  fcb   $4c            Box function
                      (  cowin_beta5.asm):02965         
0FCB 01               (  cowin_beta5.asm):02966                  fcb   WColor2        Color 2
0FCC 0003             (  cowin_beta5.asm):02967                  fdb   $0003          Start X=3
0FCE 0003             (  cowin_beta5.asm):02968                  fdb   $0003          Start Y=3
0FD0 FFFD             (  cowin_beta5.asm):02969                  fdb   -3             End X=Width of window-3
0FD2 FFFD             (  cowin_beta5.asm):02970                  fdb   -3             End Y=Height of window-3
0FD4 4C               (  cowin_beta5.asm):02971                  fcb   $4c            Box function
                      (  cowin_beta5.asm):02972         
                      (  cowin_beta5.asm):02973         * Process a no box window
0FD5 8D1A             (  cowin_beta5.asm):02974         L0F9A    bsr   L0FBB          update parent window if we have to
0FD7 170202           (  cowin_beta5.asm):02975                  lbsr  L116C          copy window table to working buffer
0FDA 4F               (  cowin_beta5.asm):02976                  clra                 Wt.NBox =0
0FDB A784             (  cowin_beta5.asm):02977                  sta   Gt.WTyp,x
0FDD 10BE10B9         (  cowin_beta5.asm):02978                  ldy   >WGlobal+g00B9 get pointer to window table
0FE1 5F               (  cowin_beta5.asm):02979                  clrb                 set start coord
0FE2 ED35             (  cowin_beta5.asm):02980                  std   Wt.CPX,y
0FE4 ECA828           (  cowin_beta5.asm):02981                  ldd   Wt.DfSZX,y     get default size
0FE7 3460             (  cowin_beta5.asm):02982                  pshs  u,y
0FE9 170278           (  cowin_beta5.asm):02983                  lbsr  L1204          set default size
0FEC 3560             (  cowin_beta5.asm):02984                  puls  u,y
0FEE 1603A7           (  cowin_beta5.asm):02985                  lbra  L12BE          clear screen & return from there
                      (  cowin_beta5.asm):02986         
                      (  cowin_beta5.asm):02987         * Check if we have to update a parent window
0FF1 3460             (  cowin_beta5.asm):02988         L0FBB    pshs  y,u            preserve registers
0FF3 17FEDF           (  cowin_beta5.asm):02989                  lbsr  L0E04          we an overlay window?
0FF6 242E             (  cowin_beta5.asm):02990                  bcc   L0FF0          no, return
0FF8 17F755           (  cowin_beta5.asm):02991                  lbsr  L06B9          get graphics table pointer
0FFB A684             (  cowin_beta5.asm):02992                  lda   Gt.WTyp,x      get cowin screen type
0FFD 2727             (  cowin_beta5.asm):02993                  beq   L0FF0          it's a plain window, return
0FFF 8102             (  cowin_beta5.asm):02994                  cmpa  #WT.FSWin      framed or scroll barred window?
1001 2223             (  cowin_beta5.asm):02995                  bhi   L0FF0          no, return
1003 7D100A           (  cowin_beta5.asm):02996                  tst   >WGlobal+G.CrDvFl Are we the current active device?
1006 271E             (  cowin_beta5.asm):02997                  beq   L0FF0          no, return
1008 EE62             (  cowin_beta5.asm):02998                  ldu   2,s            get static memory pointer
100A 17F737           (  cowin_beta5.asm):02999                  lbsr  L06AE          get window table pointer
100D EE62             (  cowin_beta5.asm):03000                  ldu   2,s            get static memory pointer
100F A6C835           (  cowin_beta5.asm):03001                  lda   V.WinNum,u     get window #
1012 3402             (  cowin_beta5.asm):03002                  pshs  a              save it
1014 A632             (  cowin_beta5.asm):03003                  lda   Wt.BLnk,y      get back window link
1016 A7C835           (  cowin_beta5.asm):03004                  sta   V.WinNum,u     save it as current
1019 17FEE7           (  cowin_beta5.asm):03005                  lbsr  L0E34          get framed or scroll barred window flag for this one
101C 3502             (  cowin_beta5.asm):03006                  puls  a              restore window #
101E A7C835           (  cowin_beta5.asm):03007                  sta   V.WinNum,u     save it
1021 2503             (  cowin_beta5.asm):03008                  bcs   L0FF0          if not a framed or scroll barred window, return
1023 17FEF7           (  cowin_beta5.asm):03009                  lbsr  L0E51          place parent window into a active state
1026 35E0             (  cowin_beta5.asm):03010         L0FF0    puls  y,u,pc         restore & return
                      (  cowin_beta5.asm):03011         
                      (  cowin_beta5.asm):03012         * Set current X/Y draw pointer to 0,0
     1028             (  cowin_beta5.asm):03013         L1257    equ   *
                      (  cowin_beta5.asm):03014                IFNE  H6309
                      (  cowin_beta5.asm):03015                  clrd  
                      (  cowin_beta5.asm):03016                  clrw  
                      (  cowin_beta5.asm):03017                  stq   >GrfMem+gr0047 Save X&Y coords
                      (  cowin_beta5.asm):03018                ELSE
1028 4F               (  cowin_beta5.asm):03019                  clra  
1029 5F               (  cowin_beta5.asm):03020                  clrb  
102A FD1147           (  cowin_beta5.asm):03021                  std   >GrfMem+gr0047 Save X&Y coords
102D FD1149           (  cowin_beta5.asm):03022                  std   >GrfMem+gr0047+2
1030 FD11B5           (  cowin_beta5.asm):03023                  std   >GrfMem+gr00B5
                      (  cowin_beta5.asm):03024                ENDC
1033 39               (  cowin_beta5.asm):03025                  rts   
                      (  cowin_beta5.asm):03026         
                      (  cowin_beta5.asm):03027         * Process a plain box window
1034 8DBB             (  cowin_beta5.asm):03028         L0FF2    bsr   L0FBB
1036 170196           (  cowin_beta5.asm):03029                  lbsr  L115F
1039 8605             (  cowin_beta5.asm):03030                  lda   #WT.PBox       Plain box window type
103B A784             (  cowin_beta5.asm):03031                  sta   Gt.WTyp,x
                      (  cowin_beta5.asm):03032         * Draw a frame around full window
103D 10BE10BB         (  cowin_beta5.asm):03033         L0FFC   ldy   >WGlobal+g00BB  Get ptr to work window table
1041 170354           (  cowin_beta5.asm):03034                  lbsr  L12BE          clear window
1044 8DE2             (  cowin_beta5.asm):03035                  bsr   L1257          set text co-ordinates to 0,0
                      (  cowin_beta5.asm):03036                IFNE  H6309
                      (  cowin_beta5.asm):03037                  lde   Wt.Fore,y      get current foreground color mask
                      (  cowin_beta5.asm):03038                ELSE
1046 A626             (  cowin_beta5.asm):03039                  lda   Wt.Fore,y      Get current foreground color mask
1048 B711B5           (  cowin_beta5.asm):03040                  sta   >GrfMem+gr00B5
                      (  cowin_beta5.asm):03041                ENDC
104B 8601             (  cowin_beta5.asm):03042                  lda   #1
104D 1702B0           (  cowin_beta5.asm):03043                  lbsr  GetColr        convert it to mask
1050 A726             (  cowin_beta5.asm):03044                  sta   Wt.Fore,y
1052 17029B           (  cowin_beta5.asm):03045                  lbsr  L1013          calculate X size
1055 FD114B           (  cowin_beta5.asm):03046                  std   >GrfMem+gr004B
1058 170291           (  cowin_beta5.asm):03047                  lbsr  L100F          calculate Y size
105B 170219           (  cowin_beta5.asm):03048                  lbsr  L122B          draw the box
                      (  cowin_beta5.asm):03049                IFNE  H6309
                      (  cowin_beta5.asm):03050                  ste   Wt.Fore,y      Save foreground palette #
                      (  cowin_beta5.asm):03051                  rts
                      (  cowin_beta5.asm):03052         
                      (  cowin_beta5.asm):03053                ELSE
105E 3402             (  cowin_beta5.asm):03054                  pshs  a
1060 B611B5           (  cowin_beta5.asm):03055                  lda   >GrfMem+gr00B5
1063 A726             (  cowin_beta5.asm):03056                  sta   Wt.Fore,y      Save foreground palette #
1065 3582             (  cowin_beta5.asm):03057                  puls  a,pc
                      (  cowin_beta5.asm):03058                ENDC
                      (  cowin_beta5.asm):03059         
                      (  cowin_beta5.asm):03060                IFNE  CoGrf-1
                      (  cowin_beta5.asm):03061         * Draw a 3D frame around window for scroll barred window
1067 10BE10BB         (  cowin_beta5.asm):03062         FSWin    ldy   >WGlobal+g00BB Get ptr to work window table
106B 17032A           (  cowin_beta5.asm):03063                  lbsr  L12BE          clear window
106E 8DB8             (  cowin_beta5.asm):03064                  bsr   L1257          set text co-ordinates to 0,0
1070 3410             (  cowin_beta5.asm):03065                  pshs  x              preserve graphics table pointer
1072 860B             (  cowin_beta5.asm):03066                  lda   #11            get # entries
1074 308C05           (  cowin_beta5.asm):03067                  leax  <FSWinTbl,pc   point to draw table
1077 17022A           (  cowin_beta5.asm):03068                  lbsr  DrawBar
107A 3590             (  cowin_beta5.asm):03069                  puls  x,pc
                      (  cowin_beta5.asm):03070         
                      (  cowin_beta5.asm):03071         * Draw table for 3D Frame around window
107C 02               (  cowin_beta5.asm):03072         FSWinTbl fcb   WColor1        left bar (Color 1)
107D 0000             (  cowin_beta5.asm):03073                  fdb   0              From 0,8 to 7,bottom
107F 0008             (  cowin_beta5.asm):03074                  fdb   8
1081 0007             (  cowin_beta5.asm):03075                  fdb   7
1083 8000             (  cowin_beta5.asm):03076                  fdb   $8000
1085 4E               (  cowin_beta5.asm):03077                  fcb   $4e            Bar command for GRFDRV
                      (  cowin_beta5.asm):03078         
1086 02               (  cowin_beta5.asm):03079                  fcb   WColor1        bottom bar (Color 1)
1087 0008             (  cowin_beta5.asm):03080                  fdb   8              From 8,(bottom-7) to (Right-8),bottom
1089 FFF9             (  cowin_beta5.asm):03081                  fdb   -7
108B FFF8             (  cowin_beta5.asm):03082                  fdb   -8
108D 8000             (  cowin_beta5.asm):03083                  fdb   $8000
108F 4E               (  cowin_beta5.asm):03084                  fcb   $4e
                      (  cowin_beta5.asm):03085         
1090 02               (  cowin_beta5.asm):03086                  fcb   WColor1        right bar
1091 FFF9             (  cowin_beta5.asm):03087                  fdb   -7
1093 0008             (  cowin_beta5.asm):03088                  fdb   8
1095 8000             (  cowin_beta5.asm):03089                  fdb   $8000
1097 8000             (  cowin_beta5.asm):03090                  fdb   $8000
1099 4E               (  cowin_beta5.asm):03091                  fcb   $4e
                      (  cowin_beta5.asm):03092         
109A 03               (  cowin_beta5.asm):03093                  fcb   WColor3        left bar 3D look
109B 0000             (  cowin_beta5.asm):03094                  fdb   0
109D 0008             (  cowin_beta5.asm):03095                  fdb   8
109F 0007             (  cowin_beta5.asm):03096                  fdb   7
10A1 0008             (  cowin_beta5.asm):03097                  fdb   8
10A3 4A               (  cowin_beta5.asm):03098                  fcb   $4a
                      (  cowin_beta5.asm):03099         
10A4 03               (  cowin_beta5.asm):03100                  fcb   WColor3        White - 0,8 to 0,bottom-1
10A5 0000             (  cowin_beta5.asm):03101                  fdb   0
10A7 0008             (  cowin_beta5.asm):03102                  fdb   8
10A9 0000             (  cowin_beta5.asm):03103                  fdb   0
10AB FFFF             (  cowin_beta5.asm):03104                  fdb   -1
10AD 4A               (  cowin_beta5.asm):03105                  fcb   $4a
                      (  cowin_beta5.asm):03106         
10AE 01               (  cowin_beta5.asm):03107                  fcb   WColor2        Light grey - 7,9 to 7,bottom-7
10AF 0007             (  cowin_beta5.asm):03108                  fdb   7
10B1 0009             (  cowin_beta5.asm):03109                  fdb   9
10B3 0007             (  cowin_beta5.asm):03110                  fdb   7
10B5 FFF9             (  cowin_beta5.asm):03111                  fdb   -7
10B7 4A               (  cowin_beta5.asm):03112                  fcb   $4a
                      (  cowin_beta5.asm):03113         
                      (  cowin_beta5.asm):03114         * Bottom bar 3D look
10B8 03               (  cowin_beta5.asm):03115                  fcb   WColor3        White
10B9 0009             (  cowin_beta5.asm):03116                  fdb   9              From 9,(bottom-7) to (right-7),(bottom-7)
10BB FFF9             (  cowin_beta5.asm):03117                  fdb   -7
10BD FFF9             (  cowin_beta5.asm):03118                  fdb   -7
10BF FFF9             (  cowin_beta5.asm):03119                  fdb   -7
10C1 4A               (  cowin_beta5.asm):03120                  fcb   $4a            Line
                      (  cowin_beta5.asm):03121         
10C2 01               (  cowin_beta5.asm):03122                  fcb   WColor2        Light grey
10C3 0001             (  cowin_beta5.asm):03123                  fdb   1              From 1,(bottom-1) to Right,(bottom-1)
10C5 FFFF             (  cowin_beta5.asm):03124                  fdb   -1
10C7 8000             (  cowin_beta5.asm):03125                  fdb   $8000
10C9 FFFF             (  cowin_beta5.asm):03126                  fdb   -1
10CB 4A               (  cowin_beta5.asm):03127                  fcb   $4a            Line
                      (  cowin_beta5.asm):03128         
10CC 03               (  cowin_beta5.asm):03129                  fcb   WColor3        right bar 3D look
10CD FFF9             (  cowin_beta5.asm):03130                  fdb   -7             right-7,8 to right,8
10CF 0008             (  cowin_beta5.asm):03131                  fdb   8
10D1 8000             (  cowin_beta5.asm):03132                  fdb   $8000
10D3 0008             (  cowin_beta5.asm):03133                  fdb   8
10D5 4A               (  cowin_beta5.asm):03134                  fcb   $4a
                      (  cowin_beta5.asm):03135         
10D6 03               (  cowin_beta5.asm):03136                  fcb   WColor3
10D7 FFF9             (  cowin_beta5.asm):03137                  fdb   -7             left+7,9 to left+7,bottom-8
10D9 0009             (  cowin_beta5.asm):03138                  fdb   9
10DB FFF9             (  cowin_beta5.asm):03139                  fdb   -7
10DD FFF8             (  cowin_beta5.asm):03140                  fdb   -8
10DF 4A               (  cowin_beta5.asm):03141                  fcb   $4a
                      (  cowin_beta5.asm):03142         
10E0 01               (  cowin_beta5.asm):03143                  fcb   WColor2
10E1 8000             (  cowin_beta5.asm):03144                  fdb   $8000          left,9 to right,bottom-1
10E3 0009             (  cowin_beta5.asm):03145                  fdb   9
10E5 8000             (  cowin_beta5.asm):03146                  fdb   $8000
10E7 FFFF             (  cowin_beta5.asm):03147                  fdb   -1
10E9 4A               (  cowin_beta5.asm):03148                  fcb   $4a
                      (  cowin_beta5.asm):03149         
                      (  cowin_beta5.asm):03150         * Set Menu bar to in-active state by printing the window title
10EA 1700EF           (  cowin_beta5.asm):03151         L1034    lbsr  L116C          setup work window table
10ED 1701A5           (  cowin_beta5.asm):03152         L1037    lbsr  L1240          draw 3D bar
                      (  cowin_beta5.asm):03153         * Swap foreground/background colors
10F0 EC26             (  cowin_beta5.asm):03154                  ldd   Wt.Fore,y      Get fore/background colors
10F2 A727             (  cowin_beta5.asm):03155                  sta   Wt.Back,y      Swap them
10F4 E726             (  cowin_beta5.asm):03156                  stb   Wt.Fore,y
10F6 1701F7           (  cowin_beta5.asm):03157                  lbsr  L1013          calculate X size in pixels
                      (  cowin_beta5.asm):03158                IFNE  H6309
                      (  cowin_beta5.asm):03159                  decd                 take off 1 of X co-ordinate
                      (  cowin_beta5.asm):03160                ELSE
10F9 830001           (  cowin_beta5.asm):03161                  subd  #$0001
                      (  cowin_beta5.asm):03162                ENDC
10FC 17031B           (  cowin_beta5.asm):03163                  lbsr  L1371          get window descriptor pointer
10FF 2621             (  cowin_beta5.asm):03164                  bne   L107A          Not valid dsc., exit
1101 CC0100           (  cowin_beta5.asm):03165                  ldd   #$0100         Valid, get X/Y text start coord
1104 17024B           (  cowin_beta5.asm):03166                  lbsr  L128E          place in grfdrv mem
                      (  cowin_beta5.asm):03167                IFNE  H6309
                      (  cowin_beta5.asm):03168                  aim   #^TChr,Wt.BSW,y Turn on transparency
                      (  cowin_beta5.asm):03169                  oim   #Prop,Wt.BSW,y Turn on proportional spacing
                      (  cowin_beta5.asm):03170                ELSE
1107 E629             (  cowin_beta5.asm):03171                  ldb   Wt.BSW,y
1109 C47F             (  cowin_beta5.asm):03172                  andb  #^TChr         Turn on transparency
110B CA10             (  cowin_beta5.asm):03173                  orb   #Prop          Turn on proportional spacing
110D E729             (  cowin_beta5.asm):03174                  stb   Wt.BSW,y
                      (  cowin_beta5.asm):03175                ENDC
110F 170253           (  cowin_beta5.asm):03176                  lbsr  L12A2          calculate string length of menu title
1112 C002             (  cowin_beta5.asm):03177                  subb  #$02           subtract 2 to give 1 space on either side
1114 E137             (  cowin_beta5.asm):03178                  cmpb  Wt.SZX,y       bigger than window?
1116 2305             (  cowin_beta5.asm):03179                  bls   L1075          no, skip ahead
1118 E637             (  cowin_beta5.asm):03180                  ldb   Wt.SZX,y       Use X size of window as length
111A 160253           (  cowin_beta5.asm):03181                  lbra  L12AE          Print menu bar title & return from there
                      (  cowin_beta5.asm):03182         
111D CB02             (  cowin_beta5.asm):03183         L1075    addb  #2             get length back
111F 16024E           (  cowin_beta5.asm):03184                  lbra  L12AE          print menu bar title & return from there
                      (  cowin_beta5.asm):03185         
1122 39               (  cowin_beta5.asm):03186         L107A    rts                  return
                      (  cowin_beta5.asm):03187         
                      (  cowin_beta5.asm):03188         * Draw a framed scroll barred window
1123 10BE10BB         (  cowin_beta5.asm):03189         L108C    ldy   >WGlobal+g00BB Get ptr to work window table
                      (  cowin_beta5.asm):03190                IFNE  H6309
                      (  cowin_beta5.asm):03191                  aim   #^TChr,Wt.BSW,y Turn on transparency
                      (  cowin_beta5.asm):03192                ELSE
1127 A629             (  cowin_beta5.asm):03193                  lda   Wt.BSW,y       Turn on transparency 
1129 847F             (  cowin_beta5.asm):03194                  anda  #^TChr
112B A729             (  cowin_beta5.asm):03195                  sta   Wt.BSW,y
                      (  cowin_beta5.asm):03196                ENDC
112D 3410             (  cowin_beta5.asm):03197                  pshs  x              Preserve old X
112F 3276             (  cowin_beta5.asm):03198                  leas  -10,s          Make enough room for BS stack for R$X/Y
1131 30E4             (  cowin_beta5.asm):03199                  leax  ,s             Point X to stack
                      (  cowin_beta5.asm):03200                IFNE  H6309
                      (  cowin_beta5.asm):03201                  clrd                 get text co-ordinates
                      (  cowin_beta5.asm):03202                ELSE
1133 4F               (  cowin_beta5.asm):03203                  clra
1134 5F               (  cowin_beta5.asm):03204                  clrb
                      (  cowin_beta5.asm):03205                ENDC
1135 ED04             (  cowin_beta5.asm):03206                  std   R$X,x
1137 ED06             (  cowin_beta5.asm):03207                  std   R$Y,x
1139 1709FE           (  cowin_beta5.asm):03208                  lbsr  DfltBar        Draw scroll bar markers
113C 8D0C             (  cowin_beta5.asm):03209                  bsr   DrawArr        draw the 4 arrows
113E 8607             (  cowin_beta5.asm):03210                  lda   #7             Draw 3D shading stuff
1140 308C46           (  cowin_beta5.asm):03211                  leax  <ScBar,pc      point to draw table
1143 17015E           (  cowin_beta5.asm):03212                  lbsr  DrawBar
1146 326A             (  cowin_beta5.asm):03213                  leas  10,s           Restore stack to normal
1148 3590             (  cowin_beta5.asm):03214                  puls  x,pc           restore X
                      (  cowin_beta5.asm):03215         
                      (  cowin_beta5.asm):03216         * Draw scroll bar arrows
                      (  cowin_beta5.asm):03217         * Entry: Y=Window table pointer
                      (  cowin_beta5.asm):03218         *        U=Global mem pointer
                      (  cowin_beta5.asm):03219         * Exit : A=$00
                      (  cowin_beta5.asm):03220         *        All other regs. preserved
114A 8604             (  cowin_beta5.asm):03221         DrawArr  lda   #4             Get # arrows
114C 3412             (  cowin_beta5.asm):03222                  pshs  x,a            preserve X & arrow counter
114E 308C20           (  cowin_beta5.asm):03223                  leax  <ScArr,pc      point to table
1151 EC81             (  cowin_beta5.asm):03224         NxtArr   ldd   ,x++           get group/buffer
1153 FD1157           (  cowin_beta5.asm):03225                  std   >GrfMem+gr0057 save it to grfdrv mem
1156 17017B           (  cowin_beta5.asm):03226                  lbsr  CalXCord       calculate X start co-ordinate
1159 FD1147           (  cowin_beta5.asm):03227                  std   >GrfMem+gr0047 save it in grfdrv mem.
115C 170179           (  cowin_beta5.asm):03228                  lbsr  CalYCord       calculate Y start co-ordinate
115F FD1149           (  cowin_beta5.asm):03229                  std   >GrfMem+gr0049 save it in grfdrv mem
1162 C636             (  cowin_beta5.asm):03230                  ldb   #$36           get grfdrv function code for PutBlk
                      (  cowin_beta5.asm):03231         * NOTE: SHOULDN'T NEED U PRESERVED
1164 3470             (  cowin_beta5.asm):03232                  pshs  x,y,u          preserve regs
1166 17F222           (  cowin_beta5.asm):03233                  lbsr  L0101          let grfdrv do the rest
1169 3570             (  cowin_beta5.asm):03234                  puls  x,y,u          restore regs
116B 6AE4             (  cowin_beta5.asm):03235                  dec   ,s             done?
116D 26E2             (  cowin_beta5.asm):03236                  bne   NxtArr         keep going till we're done
116F 3592             (  cowin_beta5.asm):03237                  puls  a,x,pc
                      (  cowin_beta5.asm):03238         
                      (  cowin_beta5.asm):03239         * Draw table for scroll barred window arrows
                      (  cowin_beta5.asm):03240         * This seems a major error in group number. $CE does not exist. RG
                      (  cowin_beta5.asm):03241         * LCB - It did, but wasn't included in the NitrOS9 repository for some reason.
                      (  cowin_beta5.asm):03242         * $CE was reserved for the 4 color/3D look (thus leaving the original 2
                      (  cowin_beta5.asm):03243         * color, 2D ones alone for backwards compatibility with other programs)
                      (  cowin_beta5.asm):03244         * and was included in /dd/sys/stdwnd. It is properly there in the EOU.
1171 CE01             (  cowin_beta5.asm):03245         ScArr    fdb   $ce01          group/buffer for up arrow
1173 FFF9             (  cowin_beta5.asm):03246                  fdb   -7
1175 0008             (  cowin_beta5.asm):03247                  fdb   8
                      (  cowin_beta5.asm):03248         
1177 CE02             (  cowin_beta5.asm):03249                  fdb   $ce02          group/buffer for down arrow
1179 FFF9             (  cowin_beta5.asm):03250                  fdb   -7
117B FFF1             (  cowin_beta5.asm):03251                  fdb   -15
                      (  cowin_beta5.asm):03252         
117D CE03             (  cowin_beta5.asm):03253                  fdb   $ce03          group/buffer for left arrow
117F 0000             (  cowin_beta5.asm):03254                  fdb   0
1181 FFF9             (  cowin_beta5.asm):03255                  fdb   -7
                      (  cowin_beta5.asm):03256         
1183 CE04             (  cowin_beta5.asm):03257                  fdb   $ce04          group/buffer for right arrow
1185 FFF1             (  cowin_beta5.asm):03258                  fdb   -15
1187 FFF9             (  cowin_beta5.asm):03259                  fdb   -7
                      (  cowin_beta5.asm):03260         
                      (  cowin_beta5.asm):03261         * Draw table for for various lines on a scroll barred window
1189 03               (  cowin_beta5.asm):03262         ScBar    fcb   WColor3        white line below up arrow
118A FFF9             (  cowin_beta5.asm):03263                  fdb   -7
118C 0010             (  cowin_beta5.asm):03264                  fdb   16
118E 8000             (  cowin_beta5.asm):03265                  fdb   $8000
1190 0010             (  cowin_beta5.asm):03266                  fdb   16
1192 4A               (  cowin_beta5.asm):03267                  fcb   $4a
                      (  cowin_beta5.asm):03268         
1193 01               (  cowin_beta5.asm):03269                  fcb   WColor2        gray line above down arrow
1194 FFF9             (  cowin_beta5.asm):03270                  fdb   -7
1196 FFF0             (  cowin_beta5.asm):03271                  fdb   -16
1198 8000             (  cowin_beta5.asm):03272                  fdb   $8000
119A FFF0             (  cowin_beta5.asm):03273                  fdb   -16
119C 4A               (  cowin_beta5.asm):03274                  fcb   $4a
                      (  cowin_beta5.asm):03275         
119D 03               (  cowin_beta5.asm):03276                  fcb   WColor3        white line to the right of left arrow
119E 0008             (  cowin_beta5.asm):03277                  fdb   8
11A0 FFF9             (  cowin_beta5.asm):03278                  fdb   -7
11A2 0008             (  cowin_beta5.asm):03279                  fdb   8
11A4 FFFF             (  cowin_beta5.asm):03280                  fdb   -1
11A6 4A               (  cowin_beta5.asm):03281                  fcb   $4a
                      (  cowin_beta5.asm):03282         
11A7 01               (  cowin_beta5.asm):03283                  fcb   WColor2        gray line to the left of right arrow
11A8 FFF0             (  cowin_beta5.asm):03284                  fdb   -16
11AA FFF9             (  cowin_beta5.asm):03285                  fdb   -7
11AC FFF0             (  cowin_beta5.asm):03286                  fdb   -16
11AE FFFF             (  cowin_beta5.asm):03287                  fdb   -1
11B0 4A               (  cowin_beta5.asm):03288                  fcb   $4a
                      (  cowin_beta5.asm):03289         
11B1 01               (  cowin_beta5.asm):03290                  fcb   WColor2        gray line above left arrow
11B2 0000             (  cowin_beta5.asm):03291                  fdb   0
11B4 FFF8             (  cowin_beta5.asm):03292                  fdb   -8
11B6 0007             (  cowin_beta5.asm):03293                  fdb   7
11B8 FFF8             (  cowin_beta5.asm):03294                  fdb   -8
11BA 4A               (  cowin_beta5.asm):03295                  fcb   $4a
                      (  cowin_beta5.asm):03296         
11BB 03               (  cowin_beta5.asm):03297                  fcb   WColor3        white line to the right of right arrow
11BC FFF9             (  cowin_beta5.asm):03298                  fdb   -7
11BE FFF9             (  cowin_beta5.asm):03299                  fdb   -7
11C0 8000             (  cowin_beta5.asm):03300                  fdb   $8000
11C2 FFF9             (  cowin_beta5.asm):03301                  fdb   -7
11C4 4A               (  cowin_beta5.asm):03302                  fcb   $4a
                      (  cowin_beta5.asm):03303         
11C5 03               (  cowin_beta5.asm):03304                  fcb   WColor3        white line below the down arrow
11C6 FFF9             (  cowin_beta5.asm):03305                  fdb   -7
11C8 FFF9             (  cowin_beta5.asm):03306                  fdb   -7
11CA FFF9             (  cowin_beta5.asm):03307                  fdb   -7
11CC FFFF             (  cowin_beta5.asm):03308                  fdb   -1
11CE 4A               (  cowin_beta5.asm):03309                  fcb   $4a
                      (  cowin_beta5.asm):03310         
                      (  cowin_beta5.asm):03311                ENDC
                      (  cowin_beta5.asm):03312         
                      (  cowin_beta5.asm):03313         * Check if window is a graphic window
11CF 8D0B             (  cowin_beta5.asm):03314         L115F    bsr   L116C          copy window table to work table
11D1 B610BD           (  cowin_beta5.asm):03315                  lda   >WGlobal+g00BD Get current screen type
11D4 2A05             (  cowin_beta5.asm):03316                  bpl   L116B          graphics, skip ahead
11D6 3262             (  cowin_beta5.asm):03317                  leas  2,s            purge return address
11D8 53               (  cowin_beta5.asm):03318                  comb                 Exit with Illegal Window type error
11D9 C6B7             (  cowin_beta5.asm):03319                  ldb   #E$IWTyp
11DB 39               (  cowin_beta5.asm):03320         L116B    rts
                      (  cowin_beta5.asm):03321         
                      (  cowin_beta5.asm):03322         * Copy current window table into work table & set all default sizes in work
                      (  cowin_beta5.asm):03323         * table
11DC 3420             (  cowin_beta5.asm):03324         L116C    pshs  y              save path descriptor pointer
11DE FF10B7           (  cowin_beta5.asm):03325                  stu   >WGlobal+g00B7 save device static in global
11E1 10BF10C0         (  cowin_beta5.asm):03326                  sty   >WGlobal+g00C0 save path descriptor in global
11E5 17F52B           (  cowin_beta5.asm):03327                  lbsr  L06A0          verify window table
11E8 10BF10B9         (  cowin_beta5.asm):03328                  sty   >WGlobal+g00B9 save window table pointer
11EC A6B8F0           (  cowin_beta5.asm):03329                  lda   [Wt.STbl,y]    get screen type
11EF B710BD           (  cowin_beta5.asm):03330                  sta   >WGlobal+g00BD save it in global
11F2 FE10B7           (  cowin_beta5.asm):03331                  ldu   >WGlobal+g00B7 get static mem back
11F5 17F558           (  cowin_beta5.asm):03332                  lbsr  L06B9          get graphics table pointer for this window
11F8 108E1087         (  cowin_beta5.asm):03333                  ldy   #WGlobal+G.WrkWTb+$10   Point to work window table
11FC 10BF10BB         (  cowin_beta5.asm):03334                  sty   >WGlobal+g00BB save the pointer to work table
1200 FE10B9           (  cowin_beta5.asm):03335                  ldu   >WGlobal+g00B9 get pointer to current window table
                      (  cowin_beta5.asm):03336                IFNE  H6309
                      (  cowin_beta5.asm):03337                  ldq   Wt.LStDf,u     get default logical start address & start X/Y co-ordinates
                      (  cowin_beta5.asm):03338                  stq   Wt.LStrt,y     save it in window table as current values
                      (  cowin_beta5.asm):03339                ELSE
1203 ECC826           (  cowin_beta5.asm):03340                  ldd   Wt.DfCPX,u     Get default X,Y coord start
1206 ED35             (  cowin_beta5.asm):03341                  std   Wt.CPX,y       Save in work window table as current X,Y coord start
                      (  cowin_beta5.asm):03342         * 6809 - Not needed, since Q was re-used below. Remove line
                      (  cowin_beta5.asm):03343         *         std   >GrfMem+gr00B5 Save "W" copy (may not be needed)
1208 ECC824           (  cowin_beta5.asm):03344                  ldd   Wt.LStDf,u     Get screen logical start adress
120B ED33             (  cowin_beta5.asm):03345                  std   Wt.LStrt,y     Save in work window table
                      (  cowin_beta5.asm):03346                ENDC
120D ECC828           (  cowin_beta5.asm):03347                  ldd   Wt.DfSZX,u     get default X/Y sizes
1210 ED37             (  cowin_beta5.asm):03348                  std   Wt.SZX,y       save as current working area
1212 EC50             (  cowin_beta5.asm):03349                  ldd   Wt.STbl,u      get screen table pointer
1214 ED30             (  cowin_beta5.asm):03350                  std   Wt.STbl,y      save it in new
1216 A652             (  cowin_beta5.asm):03351                  lda   Wt.BLnk,u      get overlay window link
1218 A732             (  cowin_beta5.asm):03352                  sta   Wt.BLnk,y      save it in new
121A EC5B             (  cowin_beta5.asm):03353                  ldd   Wt.Cur,u       get cursor address
121C ED3B             (  cowin_beta5.asm):03354                  std   Wt.Cur,y       save it
121E EC5E             (  cowin_beta5.asm):03355                  ldd   Wt.CurX,u      get X/Y coord of cursor
1220 ED3E             (  cowin_beta5.asm):03356                  std   Wt.CurX,y      save it
                      (  cowin_beta5.asm):03357                IFNE  H6309
                      (  cowin_beta5.asm):03358                  ldq   Wt.XBCnt,u     Get width of window in bytes, bytes wide per text char & bytes/text row
                      (  cowin_beta5.asm):03359                  stq   Wt.XBCnt,y     save it in new window table
                      (  cowin_beta5.asm):03360                ELSE
1222 EC44             (  cowin_beta5.asm):03361                  ldd   Wt.BRow,u      Get # bytes/row
1224 ED24             (  cowin_beta5.asm):03362                  std   Wt.BRow,y      save it
                      (  cowin_beta5.asm):03363         * 6809 - likely not needed, but will need testing
1226 FD11B5           (  cowin_beta5.asm):03364                  std   >GrfMem+gr00B5 Save "W" copy (may not be needed)
1229 EC42             (  cowin_beta5.asm):03365                  ldd   Wt.XBCnt,u     Get width of window in bytes & bytes wide each text chr is
122B ED22             (  cowin_beta5.asm):03366                  std   Wt.XBCnt,y     Save in new
                      (  cowin_beta5.asm):03367                ENDC
122D A64B             (  cowin_beta5.asm):03368                  lda   Wt.FBlk,u      get block # for font
122F A72B             (  cowin_beta5.asm):03369                  sta   Wt.FBlk,y      save it
1231 EC4C             (  cowin_beta5.asm):03370                  ldd   Wt.FOff,u      get offset for font
1233 ED2C             (  cowin_beta5.asm):03371                  std   Wt.FOff,y
1235 6F29             (  cowin_beta5.asm):03372                  clr   Wt.BSW,y       clear window switches
1237 1701B3           (  cowin_beta5.asm):03373                  lbsr  L1337          set pattern to normal plot
123A 1701BB           (  cowin_beta5.asm):03374                  lbsr  L1342          set logic type to nothing
123D E6C828           (  cowin_beta5.asm):03375                  ldb   Wt.DfSZX,u     get X size
1240 1700AF           (  cowin_beta5.asm):03376                  lbsr  L1015          multiply by 8
1243 EDA81B           (  cowin_beta5.asm):03377                  std   Wt.MaxX,y      save max X coord
1246 E6C829           (  cowin_beta5.asm):03378                  ldb   Wt.DfSZY,u     get Y size
1249 1700A6           (  cowin_beta5.asm):03379                  lbsr  L1015          multiply by 8
124C EDA81D           (  cowin_beta5.asm):03380                  std   Wt.MaxY,y      save max Y co-ordinate
124F EC07             (  cowin_beta5.asm):03381                  ldd   Gt.FClr,x      get fore/back colors
1251 ED26             (  cowin_beta5.asm):03382                  std   Wt.Fore,y      save 'em
1253 35A0             (  cowin_beta5.asm):03383                  puls  y,pc           restore path descriptor ptr & return
                      (  cowin_beta5.asm):03384         
                      (  cowin_beta5.asm):03385         * Change window size to leave a 1 character space on all 4 sides
1255 10BE10B9         (  cowin_beta5.asm):03386         L11F3    ldy   >WGlobal+g00B9 get current window table pointer
1259 CC0101           (  cowin_beta5.asm):03387                  ldd   #$0101         set X/Y start co-ordinate
125C ED35             (  cowin_beta5.asm):03388                  std   Wt.CPX,y       save it
125E ECA828           (  cowin_beta5.asm):03389                  ldd   Wt.DfSZX,y     get default X/Y sizes
1261 830202           (  cowin_beta5.asm):03390         L1200    subd  #$0202         Subtract 2 from both
1264 ED37             (  cowin_beta5.asm):03391         L1204    std   Wt.SZX,y       save X/Y size
1266 C60E             (  cowin_beta5.asm):03392                  ldb   #$0E           get grfdrv function for CWArea
1268 17F120           (  cowin_beta5.asm):03393                  lbsr  L0101
126B 2566             (  cowin_beta5.asm):03394                  bcs   L11F2
126D FE10B7           (  cowin_beta5.asm):03395                  ldu   >WGlobal+g00B7 get static mem pointer
1270 10BE10C0         (  cowin_beta5.asm):03396                  ldy   >WGlobal+g00C0 get path descriptor pointer
1274 16F21C           (  cowin_beta5.asm):03397                  lbra  L0436          go setup lines per page & return
                      (  cowin_beta5.asm):03398         
                      (  cowin_beta5.asm):03399         * NOTE: ALL OF THESE MAY NOT NEED U PRESERVED ANYMORE
                      (  cowin_beta5.asm):03400         * Draw a box
1277 FD114D           (  cowin_beta5.asm):03401         L122B    std   >GrfMem+gr004D
127A 3470             (  cowin_beta5.asm):03402                  pshs  u,y,x
127C C64C             (  cowin_beta5.asm):03403                  ldb   #$4C           get code for box
127E 17F10A           (  cowin_beta5.asm):03404         L1232    lbsr  L0101          Send code to grfdrv
1281 35F0             (  cowin_beta5.asm):03405                  puls  pc,u,y,x
                      (  cowin_beta5.asm):03406         
                      (  cowin_beta5.asm):03407         * Draw a line
1283 FD114D           (  cowin_beta5.asm):03408         L1237    std   >GrfMem+gr004D save current Y coord
1286 3470             (  cowin_beta5.asm):03409         L123A    pshs  u,y,x          preserve regs
1288 C64A             (  cowin_beta5.asm):03410                  ldb   #$4A           get grfdrv function for line
128A 20F2             (  cowin_beta5.asm):03411                  bra   L1232          send it to grfdrv
                      (  cowin_beta5.asm):03412         
                      (  cowin_beta5.asm):03413         * Draw a bar with current color
128C FD114D           (  cowin_beta5.asm):03414         L124E    std   >GrfMem+gr004D
128F 3470             (  cowin_beta5.asm):03415                  pshs  u,y,x
1291 C64E             (  cowin_beta5.asm):03416                  ldb   #$4E           Code for Bar
1293 20E9             (  cowin_beta5.asm):03417                  bra   L1232          Send it to grfdrv
                      (  cowin_beta5.asm):03418         
                      (  cowin_beta5.asm):03419         * Draw a 3D bar starting at 0,0 to 639,7 in current colors
1295 10BE10BB         (  cowin_beta5.asm):03420         L1240    ldy   >WGlobal+g00BB Get ptr to work window table
1299 3410             (  cowin_beta5.asm):03421                  pshs  x              preserve X
129B 308C75           (  cowin_beta5.asm):03422                  leax  <TopBar,pc     point to draw table for top bar
129E 8604             (  cowin_beta5.asm):03423                  lda   #4             get entry count
12A0 8D02             (  cowin_beta5.asm):03424                  bsr   DrawBar        draw the bar
12A2 3590             (  cowin_beta5.asm):03425                  puls  x,pc           restore & return
                      (  cowin_beta5.asm):03426         
                      (  cowin_beta5.asm):03427         * Draw a graphic sequence that requires start & end co-ordinates
                      (  cowin_beta5.asm):03428         * If the co-ordinate in draw table is negative, This will calculate the
                      (  cowin_beta5.asm):03429         * co-ordinate based on the size of the window in pixels.
                      (  cowin_beta5.asm):03430         * Entry: A=Number of draw table entrys
                      (  cowin_beta5.asm):03431         *        X=Pointer to draw table
                      (  cowin_beta5.asm):03432         *        Y=Pointer to window table
                      (  cowin_beta5.asm):03433         *        U=Global mem pointer
12A4 E626             (  cowin_beta5.asm):03434         DrawBar  ldb   Wt.Fore,y      get current color
12A6 3406             (  cowin_beta5.asm):03435                  pshs  d              save it and entry count
12A8 A680             (  cowin_beta5.asm):03436         DrawNxt  lda   ,x+            get foreground color
12AA 8D54             (  cowin_beta5.asm):03437                  bsr   GetColr        get color mask
12AC A726             (  cowin_beta5.asm):03438                  sta   Wt.Fore,y      put it in window table
12AE 8D24             (  cowin_beta5.asm):03439                  bsr   CalXCord       calculate X start co-ordinate
12B0 FD1147           (  cowin_beta5.asm):03440                  std   >GrfMem+gr0047 save it in grfdrv mem.
12B3 8D23             (  cowin_beta5.asm):03441                  bsr   CalYCord       calculate Y start co-ordinate
12B5 FD1149           (  cowin_beta5.asm):03442                  std   >GrfMem+gr0049 save it in grfdrv mem
12B8 8D1A             (  cowin_beta5.asm):03443                  bsr   CalXCord       calculate X end co-ordinate
12BA FD114B           (  cowin_beta5.asm):03444                  std   >GrfMem+gr004B save it in grfdrv mem
12BD 8D19             (  cowin_beta5.asm):03445                  bsr   CalYCord       calculate Y end co-ordinate
12BF FD114D           (  cowin_beta5.asm):03446                  std   >GrfMem+gr004D save it in grfdrv mem
12C2 E680             (  cowin_beta5.asm):03447                  ldb   ,x+            get grfdrv function code
12C4 3470             (  cowin_beta5.asm):03448                  pshs  x,y,u          preserve regs
12C6 17F0C2           (  cowin_beta5.asm):03449                  lbsr  L0101          let grfdrv do the rest
12C9 3570             (  cowin_beta5.asm):03450                  puls  x,y,u          restore regs
12CB 6AE4             (  cowin_beta5.asm):03451                  dec   ,s             done?
12CD 26D9             (  cowin_beta5.asm):03452                  bne   DrawNxt        keep going till we're done
12CF 3506             (  cowin_beta5.asm):03453                  puls  d              restore current color & purge stack
12D1 E726             (  cowin_beta5.asm):03454                  stb   Wt.Fore,y      put it back in window table
12D3 39               (  cowin_beta5.asm):03455         L11F2    rts   
                      (  cowin_beta5.asm):03456         
                      (  cowin_beta5.asm):03457         * Calculate X coord based on the size of window
12D4 8D1A             (  cowin_beta5.asm):03458         CalXCord bsr   L1013          get window X size in pixels
12D6 2002             (  cowin_beta5.asm):03459                  bra   CalCord
                      (  cowin_beta5.asm):03460         
                      (  cowin_beta5.asm):03461         * Calculate Y co-ordinate based on the size of window
12D8 8D12             (  cowin_beta5.asm):03462         CalYCord bsr   L100F          get window Y size in pixels
12DA 3406             (  cowin_beta5.asm):03463         CalCord  pshs  d              preserve size
12DC EC81             (  cowin_beta5.asm):03464                  ldd   ,x++           get coord
12DE 2A09             (  cowin_beta5.asm):03465                  bpl   PosCord        it's positive, return coord
12E0 10838000         (  cowin_beta5.asm):03466                  cmpd  #$8000         use actual size?
12E4 2601             (  cowin_beta5.asm):03467                  bne   NegCord        no, skip ahead
12E6 4F               (  cowin_beta5.asm):03468                  clra                 clear MSB to zero D
12E7 E3E4             (  cowin_beta5.asm):03469         NegCord  addd  ,s             add it to the size (signed add!!)
12E9 3262             (  cowin_beta5.asm):03470         PosCord  leas  2,s            purge size from stack
12EB 39               (  cowin_beta5.asm):03471                  rts                  return
                      (  cowin_beta5.asm):03472         
                      (  cowin_beta5.asm):03473         * Get window Y size in pixels - NEED TO CHANGE TO ADJUST FOR 200 LINE ONLY
12EC E638             (  cowin_beta5.asm):03474         L100F    ldb   Wt.SZY,y       Get window Y size in chars
12EE 2002             (  cowin_beta5.asm):03475                  bra   L1015
                      (  cowin_beta5.asm):03476         
                      (  cowin_beta5.asm):03477         * Get window X size in pixels
12F0 E637             (  cowin_beta5.asm):03478         L1013    ldb   Wt.SZX,y       Get window X size in chars
12F2 4F               (  cowin_beta5.asm):03479         L1015    clra                 Clear MSB
                      (  cowin_beta5.asm):03480         * NOTE: HOW OFTEN WILL WE GET A WINDOW SIZE OF ZERO? SHOULD CHANGE TO NOT
                      (  cowin_beta5.asm):03481         * BOTHER WITH EITHER TSTB OR BEQ (UNLESS CALLING ROUTINE CHECKS FLAG)
12F3 5D               (  cowin_beta5.asm):03482                  tstb                 0?
12F4 2709             (  cowin_beta5.asm):03483                  beq   L101E          Yes, don't bother with multiply
                      (  cowin_beta5.asm):03484                IFNE  H6309
                      (  cowin_beta5.asm):03485                  lsld                 Multiply by 8
                      (  cowin_beta5.asm):03486                  lsld  
                      (  cowin_beta5.asm):03487                  lsld  
                      (  cowin_beta5.asm):03488                  decd                 0 base
                      (  cowin_beta5.asm):03489                ELSE
12F6 58               (  cowin_beta5.asm):03490                  lslb
12F7 49               (  cowin_beta5.asm):03491                  rola
12F8 58               (  cowin_beta5.asm):03492                  lslb
12F9 49               (  cowin_beta5.asm):03493                  rola
12FA 58               (  cowin_beta5.asm):03494                  lslb
12FB 49               (  cowin_beta5.asm):03495                  rola
12FC 830001           (  cowin_beta5.asm):03496                  subd  #$0001
                      (  cowin_beta5.asm):03497                ENDC
12FF 39               (  cowin_beta5.asm):03498         L101E    rts
                      (  cowin_beta5.asm):03499         
                      (  cowin_beta5.asm):03500         * Get color mask
1300 3414             (  cowin_beta5.asm):03501         GetColr  pshs  b,x            save color & table pointer
1302 F610BD           (  cowin_beta5.asm):03502                  ldb   >WGlobal+g00BD get screen type
1305 308C06           (  cowin_beta5.asm):03503                  leax  <ColrMsk-1,pc  point to color mask table (-1 since base 0)
1308 E685             (  cowin_beta5.asm):03504                  ldb   b,x
130A 3D               (  cowin_beta5.asm):03505                  mul   
130B 1F98             (  cowin_beta5.asm):03506                  tfr   b,a
130D 3594             (  cowin_beta5.asm):03507                  puls  b,x,pc         restore & return
                      (  cowin_beta5.asm):03508         
130F FF555511         (  cowin_beta5.asm):03509         ColrMsk  fcb   $ff,$55,$55,$11
                      (  cowin_beta5.asm):03510         
                      (  cowin_beta5.asm):03511         * Draw table for top menu bar
1313 02               (  cowin_beta5.asm):03512         TopBar   fcb   WColor1        Color 1- Draw Bar from 1,1 to (Right-1,6)
1314 0001             (  cowin_beta5.asm):03513                  fdb   1              (Changed from original 0,0-Right,7)
1316 0001             (  cowin_beta5.asm):03514                  fdb   1
1318 FFFF             (  cowin_beta5.asm):03515                  fdb   -1
131A 0006             (  cowin_beta5.asm):03516                  fdb   6
131C 4E               (  cowin_beta5.asm):03517                  fcb   $4e            Grfdrv BAR function code
                      (  cowin_beta5.asm):03518         
131D 03               (  cowin_beta5.asm):03519                  fcb   WColor3        Color 3-Draw Box from 0,0 to Right,7)
131E 0000             (  cowin_beta5.asm):03520                  fdb   0
1320 0000             (  cowin_beta5.asm):03521                  fdb   0
1322 8000             (  cowin_beta5.asm):03522                  fdb   $8000
1324 0007             (  cowin_beta5.asm):03523                  fdb   7
1326 4C               (  cowin_beta5.asm):03524                  fcb   $4c            Grfdrv BOX function code
                      (  cowin_beta5.asm):03525         
1327 01               (  cowin_beta5.asm):03526                  fcb   WColor2        Foreground color
1328 0000             (  cowin_beta5.asm):03527                  fdb   $0000          Start X co-ordinate
132A 0007             (  cowin_beta5.asm):03528                  fdb   $0007          Start Y co-ordinate
132C 8000             (  cowin_beta5.asm):03529                  fdb   $8000          End X
132E 0007             (  cowin_beta5.asm):03530                  fdb   $0007          End Y
1330 4A               (  cowin_beta5.asm):03531                  fcb   $4a            Grfdrv LINE function code
                      (  cowin_beta5.asm):03532         
1331 01               (  cowin_beta5.asm):03533                  fcb   WColor2        Foreground color
1332 8000             (  cowin_beta5.asm):03534                  fdb   $8000          Start X co-ordinate
1334 0000             (  cowin_beta5.asm):03535                  fdb   $0000          Start Y co-ordinate
1336 8000             (  cowin_beta5.asm):03536                  fdb   $8000          End X
1338 0007             (  cowin_beta5.asm):03537                  fdb   $0007          End Y
133A 4A               (  cowin_beta5.asm):03538                  fcb   $4a            Grfdrv LINE function code
                      (  cowin_beta5.asm):03539         
                      (  cowin_beta5.asm):03540         * Print close box
133B 86C7             (  cowin_beta5.asm):03541         L127B    lda   #$C7           CHR$ for Close box symbol
                      (  cowin_beta5.asm):03542         * Generic routine for calling graphics font (font $c803) & resetting to normal
133D 8D5D             (  cowin_beta5.asm):03543         L1271    bsr   L12C2          Go select graphics font
133F 8D08             (  cowin_beta5.asm):03544                  bsr   L1285          Print char on screen
1341 206E             (  cowin_beta5.asm):03545                  bra   L12D7          Revert to normal font, return from there.
                      (  cowin_beta5.asm):03546         
                      (  cowin_beta5.asm):03547         * Print tandy menu icon
1343 86CB             (  cowin_beta5.asm):03548         L127F    lda   #$CB           CHR$ for Tandy icon character
1345 20F6             (  cowin_beta5.asm):03549                  bra   L1271          Put on screen
                      (  cowin_beta5.asm):03550         
                      (  cowin_beta5.asm):03551         * Print a space
1347 8620             (  cowin_beta5.asm):03552         L1283    lda   #C$SPAC        Space char
                      (  cowin_beta5.asm):03553         * Print a single character
                      (  cowin_beta5.asm):03554         * Entry: A=character to print
1349 3476             (  cowin_beta5.asm):03555         L1285    pshs  d,x,y,u
134B C63A             (  cowin_beta5.asm):03556                  ldb   #$3A           Regular alpha put grfdrv
134D 17F03B           (  cowin_beta5.asm):03557         L1289    lbsr  L0101
1350 35F6             (  cowin_beta5.asm):03558                  puls  d,x,y,u,pc
                      (  cowin_beta5.asm):03559         
                      (  cowin_beta5.asm):03560         * Set cursor co-ordinates
                      (  cowin_beta5.asm):03561         * Entry: A=X co-ordinate
                      (  cowin_beta5.asm):03562         *        B=Y co-ordinate
1352 C32020           (  cowin_beta5.asm):03563         L128E    addd  #$2020         Set up for GRFDRV CurXY call
1355 3470             (  cowin_beta5.asm):03564                  pshs  u,y,x
1357 17F083           (  cowin_beta5.asm):03565                  lbsr  L0380
135A 35F0             (  cowin_beta5.asm):03566                  puls  pc,u,y,x
                      (  cowin_beta5.asm):03567         
135C 8D07             (  cowin_beta5.asm):03568         L1299    bsr   L12A2          Calculate length of NUL terminated string @,X
135E C10F             (  cowin_beta5.asm):03569                  cmpb  #15            >15 chars?
1360 2302             (  cowin_beta5.asm):03570                  bls   L12A1          No, return
1362 C60F             (  cowin_beta5.asm):03571                  ldb   #15            Force to 15 chars
1364 39               (  cowin_beta5.asm):03572         L12A1    rts   
                      (  cowin_beta5.asm):03573         
                      (  cowin_beta5.asm):03574         * Get length of a NULL terminated text string (not greater than 128)
                      (  cowin_beta5.asm):03575         * Entry: X=Pointer to string
                      (  cowin_beta5.asm):03576         * Exit : B=Length of string
1365 3402             (  cowin_beta5.asm):03577         L12A2    pshs  a              preserve a
1367 C6FF             (  cowin_beta5.asm):03578                  ldb   #-1            Init count to -1 (loop entry will bump to 0)
1369 5C               (  cowin_beta5.asm):03579         L12A5    incb                 Bump char count up
136A A685             (  cowin_beta5.asm):03580                  lda   b,x            Get char
136C 26FB             (  cowin_beta5.asm):03581                  bne   L12A5          Not end of string yet, keep looking
136E 3582             (  cowin_beta5.asm):03582         L12AC    puls  a,pc           restore a & return
                      (  cowin_beta5.asm):03583         
                      (  cowin_beta5.asm):03584         * Print a string of specific length
                      (  cowin_beta5.asm):03585         * NOTE: ASSUMES LENGTH NEVER >128 CHARS! NOTE: Grfdrv's buffered write is limited to 32 bytes
                      (  cowin_beta5.asm):03586         * Entry: B=Length of string
                      (  cowin_beta5.asm):03587         *        X=Pointer to string
1370 3476             (  cowin_beta5.asm):03588         L12AE    pshs  d,x,y,u        Save regs
                      (  cowin_beta5.asm):03589                IFNE  H6309
                      (  cowin_beta5.asm):03590                  clre  
                      (  cowin_beta5.asm):03591                  tfr   b,f            W=String length
                      (  cowin_beta5.asm):03592                  ldu   #$0180         Point to buffered write buffer
                      (  cowin_beta5.asm):03593                  tfm   x+,u+          Copy to GRFDRV buffer
                      (  cowin_beta5.asm):03594                ELSE
                      (  cowin_beta5.asm):03595         * 6809 - Change to mini stack blast copy eventually
1372 3404             (  cowin_beta5.asm):03596                  pshs  b
1374 CE0180           (  cowin_beta5.asm):03597                  ldu   #$0180
1377 A680             (  cowin_beta5.asm):03598         L12AEb   lda   ,x+
1379 A7C0             (  cowin_beta5.asm):03599                  sta   ,u+
137B 5A               (  cowin_beta5.asm):03600                  decb
137C 26F9             (  cowin_beta5.asm):03601                  bne   L12AEb
137E 4F               (  cowin_beta5.asm):03602                  clra
137F FD11B5           (  cowin_beta5.asm):03603                  std   >GrfMem+gr00B5
1382 3504             (  cowin_beta5.asm):03604                  puls  b
                      (  cowin_beta5.asm):03605                ENDC
1384 CE0180           (  cowin_beta5.asm):03606                  ldu   #$0180         Point to buffered write buffer for GRFDRV
1387 1F98             (  cowin_beta5.asm):03607                  tfr   b,a            Move size of buffer to A for GRFDRV
1389 C606             (  cowin_beta5.asm):03608                  ldb   #$06           Buffered Write call code for GRFDRV
138B 17EFFD           (  cowin_beta5.asm):03609                  lbsr  L0101          Call GRFDRV
138E 35F6             (  cowin_beta5.asm):03610                  puls  d,x,y,u,pc Restore regs & return
                      (  cowin_beta5.asm):03611         
                      (  cowin_beta5.asm):03612         * Erase to end of line
1390 8604             (  cowin_beta5.asm):03613         L12B6    lda   #$04
1392 3476             (  cowin_beta5.asm):03614         L12B8    pshs  u,y,x,d
1394 C63C             (  cowin_beta5.asm):03615                  ldb   #$3C
1396 20B5             (  cowin_beta5.asm):03616                  bra   L1289
                      (  cowin_beta5.asm):03617         
                      (  cowin_beta5.asm):03618         * Clear screen
1398 860C             (  cowin_beta5.asm):03619         L12BE    lda   #$0C
139A 20F6             (  cowin_beta5.asm):03620                  bra   L12B8
                      (  cowin_beta5.asm):03621         
139C 3476             (  cowin_beta5.asm):03622         L12C2    pshs  u,y,x,d
139E BE1075           (  cowin_beta5.asm):03623                  ldx   >WGlobal+G.GfxTbl  Get graphics table ptr
13A1 308902B9         (  cowin_beta5.asm):03624                  leax  >$02B9,x       Offset into menu table ($240,x) + 121/$79 it???
13A5 A684             (  cowin_beta5.asm):03625                  lda   Grf.Bck,x      DOUBT THIS IS RIGHT
13A7 271A             (  cowin_beta5.asm):03626                  beq   L12E9
13A9 A72B             (  cowin_beta5.asm):03627         L12CF    sta   Wt.FBlk,y
13AB EC01             (  cowin_beta5.asm):03628                  ldd   Grf.Off,x
13AD ED2C             (  cowin_beta5.asm):03629                  std   Wt.FOff,y
13AF 35F6             (  cowin_beta5.asm):03630                  puls  pc,u,y,x,d
                      (  cowin_beta5.asm):03631         
                      (  cowin_beta5.asm):03632         * Switch to text font
13B1 3476             (  cowin_beta5.asm):03633         L12D7    pshs  u,y,x,d
13B3 BE1075           (  cowin_beta5.asm):03634                  ldx   >WGlobal+G.GfxTbl Get graphics tables ptr
13B6 308902B6         (  cowin_beta5.asm):03635                  leax  >$02B6,x       Offset to ???
13BA A684             (  cowin_beta5.asm):03636                  lda   Grf.Bck,x      Get ???
13BC 26EB             (  cowin_beta5.asm):03637                  bne   L12CF          If non-0, copy 3 bytes back to original state
13BE CCC827           (  cowin_beta5.asm):03638                  ldd   #$C827         Normal 8x8 text font (Actually, it's 8x8 size, but 8x7 in font data)
13C1 2003             (  cowin_beta5.asm):03639                  bra   L12EC          Call grfdrv to set font
                      (  cowin_beta5.asm):03640         
                      (  cowin_beta5.asm):03641         * Switch to graphic font
13C3 CCC803           (  cowin_beta5.asm):03642         L12E9    ldd   #$C803         Graphics font/buffer #
13C6 3470             (  cowin_beta5.asm):03643         L12EC    pshs  u,y,x
13C8 FD1157           (  cowin_beta5.asm):03644                  std   >GrfMem+gr0057 Save in Grfdrv mem
13CB C618             (  cowin_beta5.asm):03645                  ldb   #$18           Set font command
13CD 17EFBB           (  cowin_beta5.asm):03646                  lbsr  L0101          Set font in grfdrv
13D0 3570             (  cowin_beta5.asm):03647                  puls  u,y,x
13D2 A62B             (  cowin_beta5.asm):03648                  lda   Wt.FBlk,y      Copy stuff back (Font MMU block)
13D4 A784             (  cowin_beta5.asm):03649                  sta   Grf.Bck,x
13D6 EC2C             (  cowin_beta5.asm):03650                  ldd   Wt.FOff,y      (Offset into MMU block where font is)
13D8 ED01             (  cowin_beta5.asm):03651                  std   Grf.Off,x
13DA 35F6             (  cowin_beta5.asm):03652                  puls  pc,u,y,x,d     Restore & return
                      (  cowin_beta5.asm):03653         
                      (  cowin_beta5.asm):03654         * Turn inverse on
13DC 3470             (  cowin_beta5.asm):03655         L1329    pshs  u,y,x
13DE CC2040           (  cowin_beta5.asm):03656                  ldd   #$2040         Inverse ON
13E1 17EFA7           (  cowin_beta5.asm):03657         L130D    lbsr  L0101          Go execute in grfdrv
13E4 35F0             (  cowin_beta5.asm):03658                  puls  pc,u,y,x
                      (  cowin_beta5.asm):03659         
                      (  cowin_beta5.asm):03660         * Turn inverse off
13E6 3470             (  cowin_beta5.asm):03661         L1331    pshs  u,y,x
13E8 CC2140           (  cowin_beta5.asm):03662                  ldd   #$2140         Inverse off
13EB 20F4             (  cowin_beta5.asm):03663                  bra   L130D
                      (  cowin_beta5.asm):03664         
                      (  cowin_beta5.asm):03665         * Set pattern
13ED 3470             (  cowin_beta5.asm):03666         L1337    pshs  u,y,x
                      (  cowin_beta5.asm):03667                IFNE  H6309
                      (  cowin_beta5.asm):03668                  clrd  
                      (  cowin_beta5.asm):03669                ELSE
13EF 4F               (  cowin_beta5.asm):03670                  clra  
13F0 5F               (  cowin_beta5.asm):03671                  clrb  
                      (  cowin_beta5.asm):03672                ENDC
13F1 FD1157           (  cowin_beta5.asm):03673                  std   >GrfMem+gr0057 Save in Grfdrv Mem
13F4 C612             (  cowin_beta5.asm):03674                  ldb   #$12
13F6 20E9             (  cowin_beta5.asm):03675                  bra   L130D
                      (  cowin_beta5.asm):03676         
                      (  cowin_beta5.asm):03677         * Set logic type to 0 (normal gfx)
13F8 3470             (  cowin_beta5.asm):03678         L1342    pshs  u,y,x
13FA 4F               (  cowin_beta5.asm):03679                  clra  
13FB A72A             (  cowin_beta5.asm):03680                  sta   Wt.LSet,y
13FD C61E             (  cowin_beta5.asm):03681                  ldb   #$1E
13FF 20E0             (  cowin_beta5.asm):03682                  bra   L130D
                      (  cowin_beta5.asm):03683         
                      (  cowin_beta5.asm):03684         * Setup graphics table entry
1401 3476             (  cowin_beta5.asm):03685         L1358    pshs  d,x,y,u
1403 17F30D           (  cowin_beta5.asm):03686                  lbsr  L06A0          verify window table
1406 EE66             (  cowin_beta5.asm):03687                  ldu   6,s            get static memory pointer
1408 17F345           (  cowin_beta5.asm):03688                  lbsr  L06B9          get graphics table pointer
140B EC26             (  cowin_beta5.asm):03689                  ldd   Wt.Fore,y      get current foreground/background colors
140D ED07             (  cowin_beta5.asm):03690                  std   Gt.FClr,x      save it in graphics table
140F 17F7E3           (  cowin_beta5.asm):03691                  lbsr  L0B01          get mask value
1412 ED09             (  cowin_beta5.asm):03692                  std   Gt.FMsk,x      save it into graphics table
                      (  cowin_beta5.asm):03693                IFNE  H6309
                      (  cowin_beta5.asm):03694                  clrd                 init pointer to window descriptor
                      (  cowin_beta5.asm):03695                ELSE
1414 4F               (  cowin_beta5.asm):03696                  clra
1415 5F               (  cowin_beta5.asm):03697                  clrb
                      (  cowin_beta5.asm):03698                ENDC
1416 ED05             (  cowin_beta5.asm):03699                  std   Gt.DPtr,x
1418 35F6             (  cowin_beta5.asm):03700                  puls  d,x,y,u,pc
                      (  cowin_beta5.asm):03701         
                      (  cowin_beta5.asm):03702         * Copy a window descriptor from caller's process area
                      (  cowin_beta5.asm):03703         * Entry: None
141A 3466             (  cowin_beta5.asm):03704         L1371    pshs  d,y,u          preserve regs
141C 8D27             (  cowin_beta5.asm):03705                  bsr   L139E          is it the owner of the window?
141E 2520             (  cowin_beta5.asm):03706                  bcs   L1397          no, return
1420 AE05             (  cowin_beta5.asm):03707                  ldx   Gt.DPtr,x      get pointer to window descriptor
1422 33C90240         (  cowin_beta5.asm):03708                  leau  >$0240,u       point to a work buffer
1426 108E0022         (  cowin_beta5.asm):03709                  ldy   #WN.SIZ        get size of descriptor
142A 327E             (  cowin_beta5.asm):03710         L1381    leas  -2,s           make a buffer for current process
142C 17EE23           (  cowin_beta5.asm):03711                  lbsr  L0238          switch to system process
142F 103F1B           (  cowin_beta5.asm):03712                  os9   F$CpyMem       copy the window descriptor from process space
1432 17EE29           (  cowin_beta5.asm):03713                  lbsr  L0244          switch back to current process
1435 3262             (  cowin_beta5.asm):03714                  leas  2,s            purge stack
1437 1F31             (  cowin_beta5.asm):03715                  tfr   u,x            move destination to X
1439 EC8817           (  cowin_beta5.asm):03716                  ldd   WN.SYNC,x      get sync bytes
143C 1083C0C0         (  cowin_beta5.asm):03717                  cmpd  #WINSYNC       set flags for compare
1440 35E6             (  cowin_beta5.asm):03718         L1397    puls  d,y,u,pc       restore & return
                      (  cowin_beta5.asm):03719         
                      (  cowin_beta5.asm):03720         * Entry:
                      (  cowin_beta5.asm):03721         * Exit : B=Offset to DAT image
1442 17F30B           (  cowin_beta5.asm):03722         L139B    lbsr  L06B9          get pointer to graphics table entry
1445 FE1075           (  cowin_beta5.asm):03723         L139E    ldu   >WGlobal+G.GfxTbl  get pointer to start of graphics table
1448 109E48           (  cowin_beta5.asm):03724                  ldy   <D.PrcDBT      get process descriptor block table pointer
144B E60E             (  cowin_beta5.asm):03725                  ldb   Gt.Proc,x      get process number of owner
144D A6A5             (  cowin_beta5.asm):03726                  lda   b,y            get process # of user
144F A10F             (  cowin_beta5.asm):03727                  cmpa  Gt.PBlk,x      match?
1451 2605             (  cowin_beta5.asm):03728                  bne   L13B1          no, set carry & return
1453 C640             (  cowin_beta5.asm):03729                  ldb   #P$DATImg      get offset to DAT image into D
1455 1CFE             (  cowin_beta5.asm):03730                  andcc  #^Carry       clear carry
1457 39               (  cowin_beta5.asm):03731         L13B0    rts                  return
                      (  cowin_beta5.asm):03732         
1458 1A01             (  cowin_beta5.asm):03733         L13B1    orcc  #Carry         set carry
145A 39               (  cowin_beta5.asm):03734                  rts                  return
                      (  cowin_beta5.asm):03735         
                      (  cowin_beta5.asm):03736         * Copy a menu descriptor from caller's process space
145B 3466             (  cowin_beta5.asm):03737         L13B5    pshs  u,y,d
145D 3410             (  cowin_beta5.asm):03738                  pshs  x
145F 8DE1             (  cowin_beta5.asm):03739                  bsr   L139B          Get DAT image offset to copy menu descriptor from
1461 3510             (  cowin_beta5.asm):03740                  puls  x
1463 25DB             (  cowin_beta5.asm):03741                  bcs   L1397
1465 33C90262         (  cowin_beta5.asm):03742                  leau  >$0262,u
1469 108E0017         (  cowin_beta5.asm):03743                  ldy   #MN.SIZ
146D 20BB             (  cowin_beta5.asm):03744                  bra   L1381          Copy the memory
                      (  cowin_beta5.asm):03745         
                      (  cowin_beta5.asm):03746         * Set the root window menu bar to active state (Called from VTIO special calls)
146F 17FD6A           (  cowin_beta5.asm):03747         L13E9    lbsr  L116C          setup working window table
1472 3278             (  cowin_beta5.asm):03748                  leas  -8,s           make a buffer
1474 6F62             (  cowin_beta5.asm):03749                  clr   2,s            clear a flag?
1476 17FE1C           (  cowin_beta5.asm):03750                  lbsr  L1240          draw 3D bar
1479 200E             (  cowin_beta5.asm):03751                  bra   L1404          go print it
                      (  cowin_beta5.asm):03752         
                      (  cowin_beta5.asm):03753         * SS.UmBar enry point
147B 17FD5E           (  cowin_beta5.asm):03754         L13F5    lbsr  L116C          setup working window table
                      (  cowin_beta5.asm):03755         
                      (  cowin_beta5.asm):03756         * Called from SS.WnSet
147E 17FE14           (  cowin_beta5.asm):03757         L13FA    lbsr  L1240          draw a 3D bar
1481 3278             (  cowin_beta5.asm):03758                  leas  -8,s
1483 6F62             (  cowin_beta5.asm):03759                  clr   2,s
1485 10BE10BB         (  cowin_beta5.asm):03760                  ldy   >WGlobal+g00BB Get ptr to work window table
                      (  cowin_beta5.asm):03761         
                      (  cowin_beta5.asm):03762         * Print menu bar in active state
1489 17FF50           (  cowin_beta5.asm):03763         L1404    lbsr  L1329          turn inverse on
                      (  cowin_beta5.asm):03764                IFNE  H6309
                      (  cowin_beta5.asm):03765                  aim   #^TChr,Wt.BSW,y Turn on transparency
                      (  cowin_beta5.asm):03766                ELSE
148C 3402             (  cowin_beta5.asm):03767                  pshs  a
148E A629             (  cowin_beta5.asm):03768                  lda   Wt.BSW,y
1490 847F             (  cowin_beta5.asm):03769                  anda  #^TChr
1492 A729             (  cowin_beta5.asm):03770                  sta   Wt.BSW,y
1494 3502             (  cowin_beta5.asm):03771                  puls  a
                      (  cowin_beta5.asm):03772                ENDC
1496 17FF18           (  cowin_beta5.asm):03773                  lbsr  L12D7          set to text font
                      (  cowin_beta5.asm):03774                IFNE  H6309
                      (  cowin_beta5.asm):03775                  clrd                 x,y both to 0
                      (  cowin_beta5.asm):03776                ELSE
1499 4F               (  cowin_beta5.asm):03777                  clra
149A 5F               (  cowin_beta5.asm):03778                  clrb
                      (  cowin_beta5.asm):03779                ENDC
149B A765             (  cowin_beta5.asm):03780                  sta   5,s
149D 17FEB2           (  cowin_beta5.asm):03781                  lbsr  L128E          Set Text cursor to 0,0
14A0 E637             (  cowin_beta5.asm):03782                  ldb   Wt.SZX,y       get current window X size
14A2 C002             (  cowin_beta5.asm):03783                  subb  #2             take off 2 for space on either side of text
14A4 E7E4             (  cowin_beta5.asm):03784                  stb   ,s             save it
14A6 C602             (  cowin_beta5.asm):03785                  ldb   #2             get current text size (just the spaces so far)
14A8 E761             (  cowin_beta5.asm):03786                  stb   1,s            save it in buffer
14AA 17FE9A           (  cowin_beta5.asm):03787                  lbsr  L1283          print leading space for menu
                      (  cowin_beta5.asm):03788                IFNE  H6309
                      (  cowin_beta5.asm):03789                  aim   #^Bold,Wt.BSW,y Turn off Bold print
                      (  cowin_beta5.asm):03790                ELSE
14AD 3402             (  cowin_beta5.asm):03791                  pshs  a
14AF A629             (  cowin_beta5.asm):03792                  lda   Wt.BSW,y
14B1 84DF             (  cowin_beta5.asm):03793                  anda  #^Bold
14B3 A729             (  cowin_beta5.asm):03794                  sta   Wt.BSW,y
14B5 3502             (  cowin_beta5.asm):03795                  puls  a
                      (  cowin_beta5.asm):03796                ENDC
14B7 17FE81           (  cowin_beta5.asm):03797                  lbsr  L127B          print close box
14BA 10BE1075         (  cowin_beta5.asm):03798                  ldy   >WGlobal+G.GfxTbl  Get graphics table ptr
14BE 31A9028E         (  cowin_beta5.asm):03799                  leay  >$028E,y       point to handling table
14C2 6FA4             (  cowin_beta5.asm):03800                  clr   MnuXNum,y      Menu entry number=0
14C4 17FF53           (  cowin_beta5.asm):03801                  lbsr  L1371          get window descriptor pointer
14C7 1026009B         (  cowin_beta5.asm):03802                  lbne  L14E3          valid?
14CB A68814           (  cowin_beta5.asm):03803                  lda   WN.NMNS,x      yes, get number of menus in menu bar
14CE 10270094         (  cowin_beta5.asm):03804                  lbeq  L14E3          none to print, return
14D2 810A             (  cowin_beta5.asm):03805                  cmpa  #10            more than 10?
14D4 1022008E         (  cowin_beta5.asm):03806                  lbhi  L14E3          yes, return
14D8 A764             (  cowin_beta5.asm):03807                  sta   4,s            save count
14DA AE8820           (  cowin_beta5.asm):03808                  ldx   WN.BAR,x       get pointer to menu descriptor
14DD AF66             (  cowin_beta5.asm):03809         L144A    stx   6,s            save menu descriptor pointer
14DF 3440             (  cowin_beta5.asm):03810                  pshs  u
14E1 FE10B7           (  cowin_beta5.asm):03811                  ldu   >WGlobal+g00B7 get pointer to static mem
                      (  cowin_beta5.asm):03812                IFNE  H6309
                      (  cowin_beta5.asm):03813                  bsr   L13B5          get menu descriptor
                      (  cowin_beta5.asm):03814                ELSE
14E4 17FF74           (  cowin_beta5.asm):03815                  lbsr  L13B5
                      (  cowin_beta5.asm):03816                ENDC
14E7 3540             (  cowin_beta5.asm):03817                  puls  u
14E9 10BE10BB         (  cowin_beta5.asm):03818                  ldy   >WGlobal+g00BB  Get ptr to work window table
14ED A68812           (  cowin_beta5.asm):03819                  lda   MN.ENBL,x      is menu enabled?
14F0 2708             (  cowin_beta5.asm):03820                  beq   L1466          no, skip ahead
                      (  cowin_beta5.asm):03821                IFNE  H6309
                      (  cowin_beta5.asm):03822                  oim   #Bold,Wt.BSW,y Turn on Bold print
                      (  cowin_beta5.asm):03823                ELSE
14F2 A629             (  cowin_beta5.asm):03824                  lda   Wt.BSW,y
14F4 8A20             (  cowin_beta5.asm):03825                  ora   #Bold
14F6 A729             (  cowin_beta5.asm):03826                  sta   Wt.BSW,y
                      (  cowin_beta5.asm):03827                ENDC
14F8 2006             (  cowin_beta5.asm):03828                  bra   L1469          skip ahead
                      (  cowin_beta5.asm):03829         
     14FA             (  cowin_beta5.asm):03830         L1466    equ   *
                      (  cowin_beta5.asm):03831                IFNE  H6309
                      (  cowin_beta5.asm):03832                  aim   #^Bold,Wt.BSW,y Turn off Bold print
                      (  cowin_beta5.asm):03833                ELSE
14FA A629             (  cowin_beta5.asm):03834                  lda   Wt.BSW,y
14FC 84DF             (  cowin_beta5.asm):03835                  anda  #^Bold
14FE A729             (  cowin_beta5.asm):03836                  sta   Wt.BSW,y
                      (  cowin_beta5.asm):03837                ENDC
1500 A60F             (  cowin_beta5.asm):03838         L1469    lda   MN.ID,x        get ID number
1502 8114             (  cowin_beta5.asm):03839                  cmpa  #MId.Tdy       is it tandy menu?
1504 261F             (  cowin_beta5.asm):03840                  bne   L148D          no, skip ahead
                      (  cowin_beta5.asm):03841         * Print Tandy menu
                      (  cowin_beta5.asm):03842         * 6809/6309 note: Some of these multi char prints should be changed to use the FastChr multi-char
                      (  cowin_beta5.asm):03843         * Write that Alan added (like space/tandy/space below) to speed them up (like L12AE does for titles,
                      (  cowin_beta5.asm):03844         * etc.) as long as they are using 8x8 font
1506 10BE10BB         (  cowin_beta5.asm):03845                  ldy   >WGlobal+g00BB Get ptr to work window table
150A 17FE3A           (  cowin_beta5.asm):03846                  lbsr  L1283          print a space
150D 17FE33           (  cowin_beta5.asm):03847                  lbsr  L127F          print the tandy character
1510 17FE34           (  cowin_beta5.asm):03848                  lbsr  L1283          print a space
1513 C601             (  cowin_beta5.asm):03849                  ldb   #1             get this menu's length
1515 E763             (  cowin_beta5.asm):03850                  stb   3,s            save it
1517 3404             (  cowin_beta5.asm):03851                  pshs  b
1519 8D55             (  cowin_beta5.asm):03852                  bsr   L14EE          add it into handling table
151B 3261             (  cowin_beta5.asm):03853                  leas  1,s
151D E6E4             (  cowin_beta5.asm):03854                  ldb   ,s             get window size
151F C003             (  cowin_beta5.asm):03855                  subb  #3             take off length for tandy menu
1521 E7E4             (  cowin_beta5.asm):03856                  stb   ,s             save it back
1523 2034             (  cowin_beta5.asm):03857                  bra   L14C6          go to next entry
                      (  cowin_beta5.asm):03858         
                      (  cowin_beta5.asm):03859         * Print normal menu entry
1525 3084             (  cowin_beta5.asm):03860         L148D    leax  MN.TTL,x       point to text
1527 17FE32           (  cowin_beta5.asm):03861                  lbsr  L1299          get length of it up to maximum of 15
152A E763             (  cowin_beta5.asm):03862                  stb   3,s            save it
152C E1E4             (  cowin_beta5.asm):03863                  cmpb  ,s             will it fit in window?
152E 2308             (  cowin_beta5.asm):03864                  bls   L14A4          yes, skip ahead
1530 E6E4             (  cowin_beta5.asm):03865                  ldb   ,s             get window X size
1532 C001             (  cowin_beta5.asm):03866                  subb  #1
1534 2330             (  cowin_beta5.asm):03867                  bls   L14E3          no, return
1536 6C62             (  cowin_beta5.asm):03868                  inc   2,s            flag only 1 space
                      (  cowin_beta5.asm):03869         * Print menu title text
1538 3404             (  cowin_beta5.asm):03870         L14A4    pshs  b              save length of text
153A 10BE10BB         (  cowin_beta5.asm):03871                  ldy   >WGlobal+g00BB Get ptr to work window table
153E 17FE06           (  cowin_beta5.asm):03872                  lbsr  L1283          print a space
1541 17FE2C           (  cowin_beta5.asm):03873                  lbsr  L12AE          print menu text
1544 6D63             (  cowin_beta5.asm):03874                  tst   3,s            was there anything to print?
1546 2603             (  cowin_beta5.asm):03875                  bne   L14B6          yes, skip ahead
1548 17FDFC           (  cowin_beta5.asm):03876                  lbsr  L1283          print a space
154B 8D23             (  cowin_beta5.asm):03877         L14B6    bsr   L14EE          add menu to handling table
154D 3502             (  cowin_beta5.asm):03878                  puls  a              get length of menu text
154F 8B02             (  cowin_beta5.asm):03879                  adda  #2             add 2 for space on each side
1551 E6E4             (  cowin_beta5.asm):03880                  ldb   ,s             get size
                      (  cowin_beta5.asm):03881                IFNE  H6309
                      (  cowin_beta5.asm):03882                  subr  a,b            subtract width from size left
                      (  cowin_beta5.asm):03883                ELSE
1553 3402             (  cowin_beta5.asm):03884                  pshs  a
1555 E0E0             (  cowin_beta5.asm):03885                  subb  ,s+
                      (  cowin_beta5.asm):03886                ENDC
1557 E7E4             (  cowin_beta5.asm):03887                  stb   ,s             save size left
                      (  cowin_beta5.asm):03888         * Move to next menu descriptor
1559 AE66             (  cowin_beta5.asm):03889         L14C6    ldx   6,s            get menu descriptor pointer
155B 308817           (  cowin_beta5.asm):03890                  leax  MN.SIZ,x       point to next menu descriptor
155E 6C65             (  cowin_beta5.asm):03891                  inc   5,s            add 1 to menu total
1560 6A64             (  cowin_beta5.asm):03892                  dec   4,s            done all descriptors?
1562 1026FF77         (  cowin_beta5.asm):03893                  lbne  L144A          no, go print next one
1566 10BE10BB         (  cowin_beta5.asm):03894         L14E3    ldy   >WGlobal+g00BB Get ptr to work window table
156A 17FE79           (  cowin_beta5.asm):03895                  lbsr  L1331          turn inverse off
156D 3268             (  cowin_beta5.asm):03896                  leas  8,s            purge stack & return
156F 39               (  cowin_beta5.asm):03897                  rts
                      (  cowin_beta5.asm):03898         
                      (  cowin_beta5.asm):03899         * Add menu entry to internal handling table.
                      (  cowin_beta5.asm):03900         * Entry: Stack buffer pre loaded
                      (  cowin_beta5.asm):03901         * This table is 4 bytes long for each entry and consists of:
                      (  cowin_beta5.asm):03902         *        $00 - Menu # (starts at 1)
                      (  cowin_beta5.asm):03903         *        $01 - X start co-ordinate
                      (  cowin_beta5.asm):03904         *        $02 - X End co-ordinate
                      (  cowin_beta5.asm):03905         *        $03 - Reserved as far as I can tell (possibly use for menu type
                      (  cowin_beta5.asm):03906         *              flag: 0=normal, 1="sticky", etc.)
1570 3416             (  cowin_beta5.asm):03907         L14EE    pshs  d,x
1572 BE1075           (  cowin_beta5.asm):03908                  ldx   >WGlobal+G.GfxTbl   get pointer to special windowing table
1575 3089028E         (  cowin_beta5.asm):03909                  leax  >$028E,x       point to menu handling table
1579 E66C             (  cowin_beta5.asm):03910                  ldb   12,s           get menu number
157B 4F               (  cowin_beta5.asm):03911                  clra                 multiply it by 4 (size of handling table entries)
                      (  cowin_beta5.asm):03912                IFNE  H6309
                      (  cowin_beta5.asm):03913                  lsld  
                      (  cowin_beta5.asm):03914                  lsld  
                      (  cowin_beta5.asm):03915                  addr  d,x            add to handling table start
                      (  cowin_beta5.asm):03916                ELSE
157C 58               (  cowin_beta5.asm):03917                  lslb
157D 49               (  cowin_beta5.asm):03918                  rola
157E 58               (  cowin_beta5.asm):03919                  lslb
157F 49               (  cowin_beta5.asm):03920                  rola
1580 308B             (  cowin_beta5.asm):03921                  leax  d,x            add to handling table start
                      (  cowin_beta5.asm):03922                ENDC
1582 E66C             (  cowin_beta5.asm):03923                  ldb   12,s           get menu number
1584 5C               (  cowin_beta5.asm):03924                  incb                 Bump up by 1
1585 E784             (  cowin_beta5.asm):03925                  stb   MnuXNum,x      save menu number
1587 E668             (  cowin_beta5.asm):03926                  ldb   8,s            get X start coord
1589 E701             (  cowin_beta5.asm):03927                  stb   MnuXStrt,x     save it
158B EB6A             (  cowin_beta5.asm):03928                  addb  10,s           add length
158D 5C               (  cowin_beta5.asm):03929                  incb                 add 1 for space
158E E702             (  cowin_beta5.asm):03930                  stb   MnuXEnd,x      save end X coord
1590 5C               (  cowin_beta5.asm):03931                  incb  
1591 E768             (  cowin_beta5.asm):03932                  stb   8,s
1593 6F04             (  cowin_beta5.asm):03933                  clr   MnuHSiz,x      make sure next entry is clear
1595 3596             (  cowin_beta5.asm):03934                  puls  d,x,pc
                      (  cowin_beta5.asm):03935         
                      (  cowin_beta5.asm):03936         * SS.MnSel entry point
                      (  cowin_beta5.asm):03937         * Buffer breakdown:
                      (  cowin_beta5.asm):03938         * $00-$01,s : Static mem ptr
                      (  cowin_beta5.asm):03939         * $02-$17,s : ???
                      (  cowin_beta5.asm):03940         * $18-$19,s : Window table ptr
                      (  cowin_beta5.asm):03941         * $1A-$21,s : ???
                      (  cowin_beta5.asm):03942         * $22,s     : ??? (Flag of some sort)
                      (  cowin_beta5.asm):03943         * $23,s     : ???
1597 32E8DD           (  cowin_beta5.asm):03944         L1515    leas  <-$23,s        make a buffer
159A EFE4             (  cowin_beta5.asm):03945                  stu   ,s             save static mem pointer
159C 10AFE818         (  cowin_beta5.asm):03946                  sty   $18,s          save window table pointer
15A0 6FE822           (  cowin_beta5.asm):03947                  clr   $22,s          clear a flag
15A3 7D100A           (  cowin_beta5.asm):03948                  tst   >WGlobal+G.CrDvFl  Are we the current active device?
15A6 2758             (  cowin_beta5.asm):03949                  beq   L160A          No, return with nothing
15A8 8E103C           (  cowin_beta5.asm):03950                  ldx   #WGlobal+G.Mouse Get ptr to mouse packet
15AB 7F100E           (  cowin_beta5.asm):03951                  clr   >WGlobal+G.WIBusy  flag cowin free
15AE 6D08             (  cowin_beta5.asm):03952         L1530    tst   Pt.CBSA,x      button A still down?
15B0 26FC             (  cowin_beta5.asm):03953                  bne   L1530          yes, wait for release
15B2 7C100E           (  cowin_beta5.asm):03954                  inc   >WGlobal+G.WIBusy   flag cowin busy
15B5 17F15B           (  cowin_beta5.asm):03955                  lbsr  L06A0          verify window
15B8 170899           (  cowin_beta5.asm):03956                  lbsr  L1D24          copy current mouse coords to work cords.
15BB 308820           (  cowin_beta5.asm):03957                  leax  Pt.Siz,x       point to my work coords (hidden outside packet)
15BE 170771           (  cowin_beta5.asm):03958                  lbsr  L1C19          mouse on full window?
15C1 253D             (  cowin_beta5.asm):03959                  bcs   L160A          no, return with nothing
15C3 1700CA           (  cowin_beta5.asm):03960                  lbsr  L161B          calculate window start & end coords in pixels
15C6 EC67             (  cowin_beta5.asm):03961                  ldd   7,s            get current mouse Y coord?
15C8 10830007         (  cowin_beta5.asm):03962                  cmpd  #7             is it in the menu bar?
15CC 2236             (  cowin_beta5.asm):03963                  bhi   L158B          no, skip ahead
15CE E6E813           (  cowin_beta5.asm):03964                  ldb   <$13,s         get current mouse text X coord
15D1 C101             (  cowin_beta5.asm):03965                  cmpb  #$01           past close box?
15D3 2E04             (  cowin_beta5.asm):03966                  bgt   L155E          yes, skip ahead
15D5 8602             (  cowin_beta5.asm):03967                  lda   #MId.Cls       No, menu id=Close box
15D7 204E             (  cowin_beta5.asm):03968                  bra   L160C          return menu info
                      (  cowin_beta5.asm):03969         
                      (  cowin_beta5.asm):03970         * It wasn't close box scan menu handling table
15D9 BE1075           (  cowin_beta5.asm):03971         L155E    ldx   >WGlobal+G.GfxTbl  get graphics table pointer
15DC 3089028E         (  cowin_beta5.asm):03972                  leax  >$028E,x       point to menu handling table
15E0 A684             (  cowin_beta5.asm):03973         L1565    lda   MnuXNum,x      last entry?
15E2 271C             (  cowin_beta5.asm):03974                  beq   L160A          yes, return nothing
15E4 E102             (  cowin_beta5.asm):03975                  cmpb  MnuXEnd,x      within max X range?
15E6 2214             (  cowin_beta5.asm):03976                  bhi   L1587          no, point to next entry
15E8 17017F           (  cowin_beta5.asm):03977                  lbsr  L16E6          process menu pulldown
15EB 3442             (  cowin_beta5.asm):03978                  pshs  a,u            save menu ID & global mem
15ED EE63             (  cowin_beta5.asm):03979                  ldu   3,s            get static mem pointer
15EF A6E824           (  cowin_beta5.asm):03980                  lda   <$24,s         get mouse signal process #
15F2 A7C826           (  cowin_beta5.asm):03981                  sta   V.MSigID,u     save it in static mem
15F5 7F10C6           (  cowin_beta5.asm):03982                  clr   >WGlobal+G.MsSig  Clear mouse signal flag
15F8 3542             (  cowin_beta5.asm):03983                  puls  a,u
15FA 202B             (  cowin_beta5.asm):03984                  bra   L160C          Return menu id # & entry # to caller
                      (  cowin_beta5.asm):03985         
15FC 3004             (  cowin_beta5.asm):03986         L1587    leax  MnuHSiz,x      move to next entry in handling table
15FE 20E0             (  cowin_beta5.asm):03987                  bra   L1565          keep looking
                      (  cowin_beta5.asm):03988         
                      (  cowin_beta5.asm):03989         * Return no menu information received
     1600             (  cowin_beta5.asm):03990         L160A    equ   *
                      (  cowin_beta5.asm):03991                IFNE  H6309
                      (  cowin_beta5.asm):03992                  clrd                 Menu # & ID # =0
                      (  cowin_beta5.asm):03993                ELSE
1600 4F               (  cowin_beta5.asm):03994                  clra                 Menu # & ID # =0
1601 5F               (  cowin_beta5.asm):03995                  clrb
                      (  cowin_beta5.asm):03996                ENDC
1602 2023             (  cowin_beta5.asm):03997                  bra   L160C
                      (  cowin_beta5.asm):03998         
                      (  cowin_beta5.asm):03999         * Mouse wasn't on menu bar check scroll bars
                      (  cowin_beta5.asm):04000         * NOTE: SHOULD ADD SO THAT IF MOUSE CLICKED BETWEEN SCROLL BARS, IT WILL
                      (  cowin_beta5.asm):04001         *       RETURN THE POSITION (IN TEXT CHARS) ACROSS OR UP/DOWN WITHIN SCROLL
                      (  cowin_beta5.asm):04002         *       BAR AREA
1604 3470             (  cowin_beta5.asm):04003         L158B    pshs  u,y,x
1606 EE66             (  cowin_beta5.asm):04004                  ldu   6,s            get static mem pointer
1608 17F145           (  cowin_beta5.asm):04005                  lbsr  L06B9          get graphics table entry pointer
160B A684             (  cowin_beta5.asm):04006                  lda   ,x             get window type
160D 8102             (  cowin_beta5.asm):04007                  cmpa  #WT.FSWin      do we have scroll bars?
160F 3570             (  cowin_beta5.asm):04008                  puls  u,y,x
1611 26ED             (  cowin_beta5.asm):04009                  bne   L160A          no, no need to check more return nothing
                      (  cowin_beta5.asm):04010         * Check for left scroll bar arrow
1613 EC65             (  cowin_beta5.asm):04011                  ldd   5,s            get mouse X coord
1615 10830007         (  cowin_beta5.asm):04012                  cmpd  #7             X in range for left scroll bar arrow?
1619 2219             (  cowin_beta5.asm):04013                  bhi   L15B0          no, check up arrow
161B EC6F             (  cowin_beta5.asm):04014                  ldd   $0F,s
161D 830007           (  cowin_beta5.asm):04015                  subd  #7
1620 10A367           (  cowin_beta5.asm):04016                  cmpd  7,s
1623 220F             (  cowin_beta5.asm):04017                  bhi   L15B0
1625 8607             (  cowin_beta5.asm):04018                  lda   #MId.SLt       get menu ID for left scroll bar arrow
                      (  cowin_beta5.asm):04019         * Return menu ID & item to caller
                      (  cowin_beta5.asm):04020         * Entry: A=Menu ID
                      (  cowin_beta5.asm):04021         *        B=Menu item #
                      (  cowin_beta5.asm):04022         *        Y=Path descriptor pointer
1627 10AEE818         (  cowin_beta5.asm):04023         L160C    ldy   <$18,s         get path descriptor pointer
162B AE26             (  cowin_beta5.asm):04024                  ldx   PD.RGS,y       get register stack pointer
162D ED01             (  cowin_beta5.asm):04025                  std   R$D,x          save menu & item #
162F 32E823           (  cowin_beta5.asm):04026                  leas  <$23,s         Eat stack buffer
1632 5F               (  cowin_beta5.asm):04027                  clrb                 No error & return
1633 39               (  cowin_beta5.asm):04028                  rts   
                      (  cowin_beta5.asm):04029         
                      (  cowin_beta5.asm):04030         * Check for up scroll bar arrow
1634 EC67             (  cowin_beta5.asm):04031         L15B0    ldd   7,s            get mouse Y coord
1636 1083000F         (  cowin_beta5.asm):04032                  cmpd  #15            in range of up arrow?
163A 220E             (  cowin_beta5.asm):04033                  bhi   L15C6          no, check right arrow
163C EC6D             (  cowin_beta5.asm):04034                  ldd   $D,s           get window X end coord pixel
163E 830007           (  cowin_beta5.asm):04035                  subd  #7             subtract 7
1641 10A365           (  cowin_beta5.asm):04036                  cmpd  5,s            mouse X coord in range?
1644 2204             (  cowin_beta5.asm):04037                  bhi   L15C6          no, check right arrow
1646 8604             (  cowin_beta5.asm):04038                  lda   #MId.SUp       get menu ID for scroll up arrow
1648 20DD             (  cowin_beta5.asm):04039                  bra   L160C          return with menu ID
                      (  cowin_beta5.asm):04040         
                      (  cowin_beta5.asm):04041         * Check for right scroll bar arrow
164A EC6F             (  cowin_beta5.asm):04042         L15C6    ldd   $0F,s          get window Y end co-ordinate pixel
164C 830007           (  cowin_beta5.asm):04043                  subd  #7             subtract 7
164F 10A367           (  cowin_beta5.asm):04044                  cmpd  7,s            mouse in range for Y
1652 2218             (  cowin_beta5.asm):04045                  bhi   L15E8          no, check down arrow
1654 EC6D             (  cowin_beta5.asm):04046                  ldd   $0D,s          get window X end co-ordinate pixel
1656 830008           (  cowin_beta5.asm):04047                  subd  #8             subtract 8
1659 10A365           (  cowin_beta5.asm):04048                  cmpd  5,s            mouse below maximum range?
165C 250E             (  cowin_beta5.asm):04049                  blo   L15E8          no, check down arrow
165E EC6D             (  cowin_beta5.asm):04050                  ldd   $0D,s
1660 83000F           (  cowin_beta5.asm):04051                  subd  #$000F
1663 10A365           (  cowin_beta5.asm):04052                  cmpd  5,s
1666 2204             (  cowin_beta5.asm):04053                  bhi   L15E8
1668 8606             (  cowin_beta5.asm):04054                  lda   #MId.SRt       get menu ID for right scroll arrow
166A 20BB             (  cowin_beta5.asm):04055                  bra   L160C
                      (  cowin_beta5.asm):04056         
                      (  cowin_beta5.asm):04057         * Check for down scroll bar arrow
166C EC6D             (  cowin_beta5.asm):04058         L15E8    ldd   $0D,s
166E 830007           (  cowin_beta5.asm):04059                  subd  #$0007
1671 10A365           (  cowin_beta5.asm):04060                  cmpd  5,s
1674 228A             (  cowin_beta5.asm):04061                  bhi   L160A          no, not on scroll bars, so return nothing
1676 EC6F             (  cowin_beta5.asm):04062                  ldd   $0F,s
1678 830008           (  cowin_beta5.asm):04063                  subd  #$0008
167B 10A367           (  cowin_beta5.asm):04064                  cmpd  7,s
167E 2580             (  cowin_beta5.asm):04065                  blo   L160A
1680 EC6F             (  cowin_beta5.asm):04066                  ldd   $0F,s
1682 83000F           (  cowin_beta5.asm):04067                  subd  #$000F
1685 10A367           (  cowin_beta5.asm):04068                  cmpd  7,s
1688 1022FF74         (  cowin_beta5.asm):04069                  lbhi  L160A
168C 8605             (  cowin_beta5.asm):04070                  lda   #MId.SDn       get menu ID for down scroll arrow
168E 2097             (  cowin_beta5.asm):04071                  bra   L160C          save it to caller & return
                      (  cowin_beta5.asm):04072         
                      (  cowin_beta5.asm):04073         * Calculate window start & end coords in pixels
     1690             (  cowin_beta5.asm):04074         L161B    equ   *
                      (  cowin_beta5.asm):04075                IFNE  H6309
                      (  cowin_beta5.asm):04076                  clrd
                      (  cowin_beta5.asm):04077                ELSE
1690 4F               (  cowin_beta5.asm):04078                  clra
1691 5F               (  cowin_beta5.asm):04079                  clrb
                      (  cowin_beta5.asm):04080                ENDC
1692 ED6D             (  cowin_beta5.asm):04081                  std   $0D,s
1694 3406             (  cowin_beta5.asm):04082                  pshs  d
1696 8D4C             (  cowin_beta5.asm):04083                  bsr   L1667          calculate coords
1698 3506             (  cowin_beta5.asm):04084                  puls  d
169A E6A826           (  cowin_beta5.asm):04085                  ldb   Wt.DfCPX,y     get full window X start coord
169D EB6D             (  cowin_beta5.asm):04086                  addb  $0D,s          add it to
169F 17FC50           (  cowin_beta5.asm):04087                  lbsr  L1015          calculate size in pixels
                      (  cowin_beta5.asm):04088                IFNE  H6309
                      (  cowin_beta5.asm):04089                  tfr   d,w            copy it to W
                      (  cowin_beta5.asm):04090                  ldd   ,x             get mouse X co-ordinate
                      (  cowin_beta5.asm):04091                  subr  w,d            calculate relative co-ordinate in window
                      (  cowin_beta5.asm):04092                ELSE
16A2 FD11B5           (  cowin_beta5.asm):04093                  std   >GrfMem+gr00B5
16A5 EC84             (  cowin_beta5.asm):04094                  ldd   ,x             get mouse X co-ordinate
16A7 B311B5           (  cowin_beta5.asm):04095                  subd  >GrfMem+gr00B5 calculate relative co-ordinate in window
                      (  cowin_beta5.asm):04096                ENDC
16AA ED67             (  cowin_beta5.asm):04097                  std   7,s            save it on stack
16AC 8D59             (  cowin_beta5.asm):04098                  bsr   L1027          divide it by 8
16AE E7E815           (  cowin_beta5.asm):04099                  stb   <$15,s         save it as mouse text X co-ordinate
16B1 E6A827           (  cowin_beta5.asm):04100                  ldb   Wt.DfCPY,y     get window default Y start co-ordinate
16B4 EB6E             (  cowin_beta5.asm):04101                  addb  $0E,s          add in size
16B6 17FC39           (  cowin_beta5.asm):04102                  lbsr  L1015          calculate window height in pixels
                      (  cowin_beta5.asm):04103                IFNE  H6309
                      (  cowin_beta5.asm):04104                  ldw   $02,x          get mouse Y co-ordinate
                      (  cowin_beta5.asm):04105                  subr  d,w            calculate relative co-ordinate within window
                      (  cowin_beta5.asm):04106                  stw   9,s            save it
                      (  cowin_beta5.asm):04107                ELSE
16B9 340E             (  cowin_beta5.asm):04108                  pshs  d,dp
16BB A762             (  cowin_beta5.asm):04109                  sta   2,s
16BD EC02             (  cowin_beta5.asm):04110                  ldd   2,x            get mouse Y co-ordinate
16BF A3E1             (  cowin_beta5.asm):04111                  subd  ,s++           calculate relative co-ordinate within window
16C1 ED6A             (  cowin_beta5.asm):04112                  std   10,s
16C3 FD11B5           (  cowin_beta5.asm):04113                  std   >GrfMem+gr00B5
16C6 3502             (  cowin_beta5.asm):04114                  puls  a
                      (  cowin_beta5.asm):04115                ENDC
16C8 E6A826           (  cowin_beta5.asm):04116                  ldb   Wt.DfCPX,y     get window default X start co-ordinate
16CB EB6D             (  cowin_beta5.asm):04117                  addb  $0D,s
16CD EBA828           (  cowin_beta5.asm):04118                  addb  Wt.DfSZX,y
16D0 17FC1F           (  cowin_beta5.asm):04119                  lbsr  L1015          calculate size in pixels
16D3 ED6F             (  cowin_beta5.asm):04120                  std   $0F,s
16D5 E6A827           (  cowin_beta5.asm):04121                  ldb   Wt.DfCPY,y
16D8 EB6E             (  cowin_beta5.asm):04122                  addb  $0E,s
16DA EBA829           (  cowin_beta5.asm):04123                  addb  Wt.DfSZY,y
16DD 17FC12           (  cowin_beta5.asm):04124                  lbsr  L1015          calculate size in pixels
16E0 EDE811           (  cowin_beta5.asm):04125                  std   <$11,s
16E3 39               (  cowin_beta5.asm):04126                  rts   
                      (  cowin_beta5.asm):04127         
                      (  cowin_beta5.asm):04128         * Seems to hunt down root device window given overlay window?
                      (  cowin_beta5.asm):04129         * Entry: X=some sort of window tbl ptr
                      (  cowin_beta5.asm):04130         *        Y=Some sort of window tbl ptr
16E4 3430             (  cowin_beta5.asm):04131         L1667    pshs  y,x
16E6 A632             (  cowin_beta5.asm):04132                  lda   Wt.BLnk,y      this a overlay window?
16E8 2B1B             (  cowin_beta5.asm):04133         L166B    bmi   L1688          no, return
16EA 1706F9           (  cowin_beta5.asm):04134                  lbsr  L1CBC          point X to the window table entry
16ED EC8826           (  cowin_beta5.asm):04135                  ldd   Wt.DfCPX,x     get window default start co-ordinates
16F0 E3E815           (  cowin_beta5.asm):04136                  addd  <$15,s
16F3 10AE8824         (  cowin_beta5.asm):04137                  ldy   Wt.LStDf,x     get window logical start address
16F7 10AC13           (  cowin_beta5.asm):04138                  cmpy  Wt.LStrt,x     match current?
16FA 2702             (  cowin_beta5.asm):04139                  beq   L1681          yes, skip ahead
16FC E315             (  cowin_beta5.asm):04140                  addd  Wt.CPX,x       No, add current start co-ordinates
16FE EDE815           (  cowin_beta5.asm):04141         L1681    std   <$15,s
1701 A612             (  cowin_beta5.asm):04142                  lda   Wt.BLnk,x      get back window link
1703 20E3             (  cowin_beta5.asm):04143                  bra   L166B          go calculate 
                      (  cowin_beta5.asm):04144         
1705 35B0             (  cowin_beta5.asm):04145         L1688    puls  pc,y,x
                      (  cowin_beta5.asm):04146         
                      (  cowin_beta5.asm):04147         * Signed Divide by 8
                      (  cowin_beta5.asm):04148         * ONLY CALLED TWICE...SHOULD EMBED
     1707             (  cowin_beta5.asm):04149         L1027    equ   *
                      (  cowin_beta5.asm):04150                IFNE  H6309
                      (  cowin_beta5.asm):04151                  asrd  
                      (  cowin_beta5.asm):04152                  asrd  
                      (  cowin_beta5.asm):04153                  asrd  
                      (  cowin_beta5.asm):04154                ELSE
1707 47               (  cowin_beta5.asm):04155                  asra
1708 56               (  cowin_beta5.asm):04156                  rorb
1709 47               (  cowin_beta5.asm):04157                  asra
170A 56               (  cowin_beta5.asm):04158                  rorb
170B 47               (  cowin_beta5.asm):04159                  asra
170C 56               (  cowin_beta5.asm):04160                  rorb
                      (  cowin_beta5.asm):04161                ENDC
170D 39               (  cowin_beta5.asm):04162                  rts   
                      (  cowin_beta5.asm):04163         
                      (  cowin_beta5.asm):04164         * Calculate the current mouse Y text coord within a overlay window
                      (  cowin_beta5.asm):04165         * used for menu pull down updates
170E 3450             (  cowin_beta5.asm):04166         L168A    pshs  x,u            preserve pointer to mouse coords & global mem
1710 A632             (  cowin_beta5.asm):04167                  lda   Wt.BLnk,y      get parent window # of this overlay
1712 1706D1           (  cowin_beta5.asm):04168                  lbsr  L1CBC          point X to window table entry
1715 A612             (  cowin_beta5.asm):04169                  lda   Wt.BLnk,x      parent window a overlay?
1717 2A08             (  cowin_beta5.asm):04170                  bpl   L169D          yes, skip ahead
1719 E6A827           (  cowin_beta5.asm):04171                  ldb   Wt.DfCPY,y     get current overlay window Y default start
171C EB8827           (  cowin_beta5.asm):04172                  addb  Wt.DfCPY,x     add it to parent window default Y start
171F 2007             (  cowin_beta5.asm):04173                  bra   L16A6          skip ahead
                      (  cowin_beta5.asm):04174         
1721 E6A827           (  cowin_beta5.asm):04175         L169D    ldb   Wt.DfCPY,y     get default Y co-ordinate of current window
1724 8D1A             (  cowin_beta5.asm):04176                  bsr   L16BC
1726 1F89             (  cowin_beta5.asm):04177                  tfr   a,b
1728 AEE4             (  cowin_beta5.asm):04178         L16A6    ldx   ,s             get mouse coordinate pointer
172A 17FBC5           (  cowin_beta5.asm):04179                  lbsr  L1015          calculate it in pixels
                      (  cowin_beta5.asm):04180                IFNE  H6309
                      (  cowin_beta5.asm):04181                  incd                 Add 1
                      (  cowin_beta5.asm):04182                  tfr   d,w            copy it to W
                      (  cowin_beta5.asm):04183                  ldd   2,x            get mouse Y co-ordinate
                      (  cowin_beta5.asm):04184                  subr  w,d            calculate the relative co-ordinate in window
                      (  cowin_beta5.asm):04185                ELSE
172D C30001           (  cowin_beta5.asm):04186                  addd  #$0001         Add 1
1730 FD11B5           (  cowin_beta5.asm):04187                  std   >GrfMem+gr00B5
1733 3406             (  cowin_beta5.asm):04188                  pshs  d
1735 EC02             (  cowin_beta5.asm):04189                  ldd   2,x            get mouse Y co-ordinate
1737 A3E1             (  cowin_beta5.asm):04190                  subd  ,s++           calculate the relative co-ordinate in window
                      (  cowin_beta5.asm):04191                ENDC
1739 8DCC             (  cowin_beta5.asm):04192                  bsr   L1027          divide it by 8
173B 5A               (  cowin_beta5.asm):04193                  decb                 subtract 1
173C 1F98             (  cowin_beta5.asm):04194                  tfr   b,a            copy it to A
173E 35D0             (  cowin_beta5.asm):04195                  puls  x,u,pc         restore & return
                      (  cowin_beta5.asm):04196         
                      (  cowin_beta5.asm):04197         * Calculate the current mouse Y text co-ordinate
1740 3430             (  cowin_beta5.asm):04198         L16BC    pshs  x,y            preserve current & parent window table pointers
1742 5F               (  cowin_beta5.asm):04199                  clrb  
1743 3404             (  cowin_beta5.asm):04200                  pshs  b
1745 1F21             (  cowin_beta5.asm):04201                  tfr   y,x
1747 A612             (  cowin_beta5.asm):04202         L16C3    lda   Wt.BLnk,x      get window # of parent window
1749 2B0C             (  cowin_beta5.asm):04203                  bmi   L16D3          we're at the bottom, skip ahead
174B 170698           (  cowin_beta5.asm):04204                  lbsr  L1CBC          go calculate
174E E68827           (  cowin_beta5.asm):04205                  ldb   Wt.DfCPY,x     get parent window default Y start
1751 EBE4             (  cowin_beta5.asm):04206                  addb  ,s             add it to current
1753 E7E4             (  cowin_beta5.asm):04207                  stb   ,s             save it
1755 20F0             (  cowin_beta5.asm):04208                  bra   L16C3          keep going
                      (  cowin_beta5.asm):04209         
1757 10AE8824         (  cowin_beta5.asm):04210         L16D3    ldy   Wt.LStDf,x     Get screen logical start address when it was initialized
175B 10AC13           (  cowin_beta5.asm):04211                  cmpy  Wt.LStrt,x     Same as current logical start address?
175E 2706             (  cowin_beta5.asm):04212                  beq   L16E2          Yes, skip ahead
1760 E616             (  cowin_beta5.asm):04213                  ldb   Wt.CPY,x       No, get current Y coord start of window
1762 EBE4             (  cowin_beta5.asm):04214                  addb  ,s             Add to Y value
1764 E7E4             (  cowin_beta5.asm):04215                  stb   ,s
1766 6CE4             (  cowin_beta5.asm):04216         L16E2    inc   ,s             Bump up Y value
1768 35B2             (  cowin_beta5.asm):04217                  puls  a,x,y,pc
                      (  cowin_beta5.asm):04218         
                      (  cowin_beta5.asm):04219         * Process a selected menu item on menu bar
                      (  cowin_beta5.asm):04220         * Entry: A=Menu # from menu handling table
                      (  cowin_beta5.asm):04221         *        X=Pointer to menu handling entry
176A AF6B             (  cowin_beta5.asm):04222         L16E6    stx   $0B,s          save current menu handling entry pointer
176C 10AEE81A         (  cowin_beta5.asm):04223                  ldy   <$1A,s         get path descriptor pointer
1770 EE62             (  cowin_beta5.asm):04224                  ldu   $02,s          get static mem pointer
1772 E6C826           (  cowin_beta5.asm):04225                  ldb   V.MSigID,u     get process ID of mouse signal reciever
1775 E7E823           (  cowin_beta5.asm):04226                  stb   <$23,s         save it
1778 6FC826           (  cowin_beta5.asm):04227                  clr   V.MSigID,u     clear it in device mem
177B 170330           (  cowin_beta5.asm):04228                  lbsr  L1A3C          copy window table
177E AFE81E           (  cowin_beta5.asm):04229                  stx   <$1E,s         save pointer to graphics table entry
1781 10AFE813         (  cowin_beta5.asm):04230                  sty   <$13,s         save pointer to window table
1785 BE1075           (  cowin_beta5.asm):04231                  ldx   >WGlobal+G.GfxTbl  get graphics table pointer
1788 30890240         (  cowin_beta5.asm):04232                  leax  >$0240,x       point to working window descriptor
178C AE8820           (  cowin_beta5.asm):04233                  ldx   WN.BAR,x       get pointer to array of menu descriptors
178F 4A               (  cowin_beta5.asm):04234                  deca                 adjust current menu # to start at 0
1790 C617             (  cowin_beta5.asm):04235                  ldb   #MN.SIZ        get size of menu descriptor
1792 3D               (  cowin_beta5.asm):04236                  mul                  calculate offset
                      (  cowin_beta5.asm):04237                IFNE  H6309
                      (  cowin_beta5.asm):04238                  addr  d,x            add it to menu array pointer
                      (  cowin_beta5.asm):04239                ELSE
1793 308B             (  cowin_beta5.asm):04240                  leax  d,x            add it to menu array pointer
                      (  cowin_beta5.asm):04241                ENDC
1795 EE62             (  cowin_beta5.asm):04242                  ldu   2,s            get static mem pointer
1797 17FCC1           (  cowin_beta5.asm):04243                  lbsr  L13B5          copy menu descriptor from user space
179A AF65             (  cowin_beta5.asm):04244                  stx   5,s            save menu entry pointer
179C A68812           (  cowin_beta5.asm):04245                  lda   MN.ENBL,x      menu enabled?
179F 2605             (  cowin_beta5.asm):04246                  bne   L1728          yes, process pulldown
                      (  cowin_beta5.asm):04247                IFNE  H6309
                      (  cowin_beta5.asm):04248                  clrd                 clear menu ID & item #
                      (  cowin_beta5.asm):04249                ELSE
17A1 4F               (  cowin_beta5.asm):04250                  clra                 clear menu ID & item #
17A2 5F               (  cowin_beta5.asm):04251                  clrb
                      (  cowin_beta5.asm):04252                ENDC
17A3 160204           (  cowin_beta5.asm):04253                  lbra  L193A          restore window table & return
                      (  cowin_beta5.asm):04254         
                      (  cowin_beta5.asm):04255         * Print selected menu text
17A6 EE6B             (  cowin_beta5.asm):04256         L1728    ldu   $0B,s          get menu handling entry pointer
17A8 10AEE813         (  cowin_beta5.asm):04257                  ldy   <$13,s         get window table pointer
17AC A641             (  cowin_beta5.asm):04258                  lda   MnuXStrt,u     get start X co-ordinate
17AE 5F               (  cowin_beta5.asm):04259                  clrb                 get start Y co-ordinate
17AF 3430             (  cowin_beta5.asm):04260                  pshs  y,x            preserve regs
17B1 17FBFD           (  cowin_beta5.asm):04261                  lbsr  L12D7          switch to text font
17B4 17FB9B           (  cowin_beta5.asm):04262                  lbsr  L128E          set text coords
                      (  cowin_beta5.asm):04263                IFNE  H6309
                      (  cowin_beta5.asm):04264                  oim   #Bold+TChr,Wt.BSW,y Turn Bold ON/Transparency OFF
                      (  cowin_beta5.asm):04265                ELSE
17B7 3402             (  cowin_beta5.asm):04266                  pshs  a
17B9 A629             (  cowin_beta5.asm):04267                  lda   Wt.BSW,y       Turn Bold ON/Transparency OFF
17BB 8AA0             (  cowin_beta5.asm):04268                  ora   #Bold+TChr
17BD A729             (  cowin_beta5.asm):04269                  sta   Wt.BSW,y
17BF 3502             (  cowin_beta5.asm):04270                  puls  a
                      (  cowin_beta5.asm):04271                ENDC
17C1 3530             (  cowin_beta5.asm):04272                  puls  y,x            restore regs
17C3 17FB96           (  cowin_beta5.asm):04273                  lbsr  L1299          get length of text to a maximum of 15
17C6 170333           (  cowin_beta5.asm):04274                  lbsr  L1A88          calculate if we can print a space after menu text
17C9 17FB7B           (  cowin_beta5.asm):04275                  lbsr  L1283          print a space
17CC A60F             (  cowin_beta5.asm):04276                  lda   MN.ID,x        get menu ID
17CE 8114             (  cowin_beta5.asm):04277                  cmpa  #MId.Tdy       is it tandy menu?
17D0 2605             (  cowin_beta5.asm):04278                  bne   L1757          no, skip ahead
17D2 17FB6E           (  cowin_beta5.asm):04279                  lbsr  L127F          Yes, print tandy icon
17D5 2003             (  cowin_beta5.asm):04280                  bra   L175A          skip ahead
                      (  cowin_beta5.asm):04281         
17D7 17FB96           (  cowin_beta5.asm):04282         L1757    lbsr  L12AE          print menu text
17DA 6DE819           (  cowin_beta5.asm):04283         L175A    tst   <$19,s         can we print a space here?
17DD 2603             (  cowin_beta5.asm):04284                  bne   L1762          no, skip ahead
17DF 17FB65           (  cowin_beta5.asm):04285                  lbsr  L1283          print a space
     17E2             (  cowin_beta5.asm):04286         L1762    equ   *
                      (  cowin_beta5.asm):04287                IFNE  H6309
                      (  cowin_beta5.asm):04288                  aim   #^Bold,Wt.BSW,y Turn BOLD OFF
                      (  cowin_beta5.asm):04289                ELSE
17E2 A629             (  cowin_beta5.asm):04290                  lda   Wt.BSW,y       Turn BOLD OFF
17E4 84DF             (  cowin_beta5.asm):04291                  anda  #^Bold
17E6 A729             (  cowin_beta5.asm):04292                  sta   Wt.BSW,y
                      (  cowin_beta5.asm):04293                ENDC
17E8 AE65             (  cowin_beta5.asm):04294                  ldx   $05,s          get pointer to menu descriptor
17EA A68811           (  cowin_beta5.asm):04295                  lda   MN.NITS,x      any items to print?
17ED 2606             (  cowin_beta5.asm):04296                  bne   L1772          yes, skip ahead
17EF A60F             (  cowin_beta5.asm):04297                  lda   MN.ID,x        get menu ID
17F1 5F               (  cowin_beta5.asm):04298                  clrb                 clear item
17F2 1601B5           (  cowin_beta5.asm):04299                  lbra  L193A          return with menu info
                      (  cowin_beta5.asm):04300         
                      (  cowin_beta5.asm):04301         * Calculate X start position and size of pull down
17F5 A68810           (  cowin_beta5.asm):04302         L1772    lda   MN.XSIZ,x      get horizontal size of pull down
17F8 8B02             (  cowin_beta5.asm):04303                  adda  #$02           add 2 for the borders
17FA 3402             (  cowin_beta5.asm):04304                  pshs  a              save window width
17FC EE6C             (  cowin_beta5.asm):04305                  ldu   $0C,s          get pointer to handling entry
17FE AB41             (  cowin_beta5.asm):04306                  adda  MnuXStrt,u     add in the start coord to get end coord
1800 A137             (  cowin_beta5.asm):04307                  cmpa  Wt.SZX,y       will it fit in current window?
1802 2404             (  cowin_beta5.asm):04308                  bhs   L1785          no, skip ahead
1804 A641             (  cowin_beta5.asm):04309                  lda   MnuXStrt,u     Yes, get start coord
1806 2004             (  cowin_beta5.asm):04310                  bra   L1789
                      (  cowin_beta5.asm):04311         
1808 A637             (  cowin_beta5.asm):04312         L1785    lda   Wt.SZX,y       get current window size
180A A0E4             (  cowin_beta5.asm):04313                  suba  ,s             subtract calculated width
180C 3504             (  cowin_beta5.asm):04314         L1789    puls  b              restore width of pull down
180E EE62             (  cowin_beta5.asm):04315                  ldu   2,s            get static mem pointer
1810 17F025           (  cowin_beta5.asm):04316                  lbsr  L07B0          find a new window table & link it to current
1813 10AFE81C         (  cowin_beta5.asm):04317                  sty   <$1C,s         save the pointer to new window table
1817 3420             (  cowin_beta5.asm):04318                  pshs  y              preserve new window table pointer
1819 10AEE815         (  cowin_beta5.asm):04319                  ldy   <$15,s         get old window table pointer
181D 6D32             (  cowin_beta5.asm):04320                  tst   Wt.BLnk,y      Is it an overlay window?
181F 2B03             (  cowin_beta5.asm):04321                  bmi   L17A5          No, skip ahead
1821 ABA826           (  cowin_beta5.asm):04322         L17A2    adda  Wt.DfCPX,y     Yes, add to Default X coord start
1824 3520             (  cowin_beta5.asm):04323         L17A5    puls  y              Get new window table ptr back
1826 A735             (  cowin_beta5.asm):04324                  sta   Wt.CPX,y       Save new current X coord start
1828 E737             (  cowin_beta5.asm):04325                  stb   Wt.SZX,y       Save new current X size
182A 3420             (  cowin_beta5.asm):04326                  pshs  y              Save new window table ptr again
182C 10AEE815         (  cowin_beta5.asm):04327                  ldy   <$15,s         get working window table pointer?
1830 6D32             (  cowin_beta5.asm):04328                  tst   Wt.BLnk,y      this a overlay window?
1832 2A04             (  cowin_beta5.asm):04329                  bpl   L17B9          yes, skip ahead
1834 3520             (  cowin_beta5.asm):04330                  puls  y
1836 2008             (  cowin_beta5.asm):04331                  bra   L17C1
                      (  cowin_beta5.asm):04332         
1838 A6A827           (  cowin_beta5.asm):04333         L17B9    lda   Wt.DfCPY,y     get full window Y start
183B 4C               (  cowin_beta5.asm):04334                  inca                 add 1
183C 3520             (  cowin_beta5.asm):04335                  puls  y              restore
183E 2002             (  cowin_beta5.asm):04336                  bra   L17C3          skip ahead
                      (  cowin_beta5.asm):04337         
                      (  cowin_beta5.asm):04338         * Calculate Y start & size of pull down
1840 8601             (  cowin_beta5.asm):04339         L17C1    lda   #$01           get Y co-ordinate start
1842 A736             (  cowin_beta5.asm):04340         L17C3    sta   Wt.CPY,y       save it as current window Y start
1844 B71159           (  cowin_beta5.asm):04341                  sta   >GrfMem+gr0059 save it as save switch too
1847 A68811           (  cowin_beta5.asm):04342                  lda   MN.NITS,x      get # items in this menu
184A 8B02             (  cowin_beta5.asm):04343                  adda  #$02           add 2 to put a blank line on top & bottom
184C 3410             (  cowin_beta5.asm):04344                  pshs  x              save pointer to menu descriptor
184E AEE815           (  cowin_beta5.asm):04345                  ldx   <$15,s         Get ptr to window table
1851 A118             (  cowin_beta5.asm):04346                  cmpa  Wt.SZY,x       lower than current Y size of window?
1853 2D0E             (  cowin_beta5.asm):04347                  blt   L17E5          Yes, skip ahead
1855 A618             (  cowin_beta5.asm):04348                  lda   Wt.SZY,x       No, get current Y size
1857 4A               (  cowin_beta5.asm):04349                  deca                 drop by 1
1858 A738             (  cowin_beta5.asm):04350                  sta   Wt.SZY,y       Save it back as new current Y size
185A 8002             (  cowin_beta5.asm):04351                  suba  #2             Subtract two more
185C 3510             (  cowin_beta5.asm):04352                  puls  x              restore menu descriptor pointer
185E A78811           (  cowin_beta5.asm):04353                  sta   MN.NITS,x      save as # items in menu descriptor
1861 2004             (  cowin_beta5.asm):04354                  bra   L17E9
                      (  cowin_beta5.asm):04355         
1863 3510             (  cowin_beta5.asm):04356         L17E5    puls  x              restore menu descriptor pointer
1865 A738             (  cowin_beta5.asm):04357                  sta   Wt.SZY,y       save overlay window size
                      (  cowin_beta5.asm):04358         * Place pull down on screen
1867 AEE81E           (  cowin_beta5.asm):04359         L17E9    ldx   <$1E,s         get graphics table pointer
186A EC09             (  cowin_beta5.asm):04360                  ldd   Gt.FMsk,x      get the foreground/background masks
186C ED26             (  cowin_beta5.asm):04361                  std   Wt.Fore,y      set foreground/background masks in window table
186E 3420             (  cowin_beta5.asm):04362                  pshs  y              Preserve window tbl ptr
1870 C60A             (  cowin_beta5.asm):04363                  ldb   #$0A           get code for OWSet
1872 17EB16           (  cowin_beta5.asm):04364                  lbsr  L0101          do a overlay window
1875 3520             (  cowin_beta5.asm):04365                  puls  y              Get window tbl ptr back
1877 2430             (  cowin_beta5.asm):04366                  bcc   L181D          no errors on OWSet, print menu items
1879 A632             (  cowin_beta5.asm):04367                  lda   Wt.BLnk,y      Error, get parent window #
187B EE62             (  cowin_beta5.asm):04368                  ldu   2,s            Get static mem ptr
187D A7C835           (  cowin_beta5.asm):04369                  sta   V.WinNum,u     Save parent window
1880 CCFFFF           (  cowin_beta5.asm):04370                  ldd   #$FFFF         Mark window table as unused
1883 ED30             (  cowin_beta5.asm):04371                  std   Wt.STbl,y
1885 1701E1           (  cowin_beta5.asm):04372                  lbsr  L19F1          Print menu descriptor text
                      (  cowin_beta5.asm):04373                IFNE  H6309
                      (  cowin_beta5.asm):04374                  clrd
                      (  cowin_beta5.asm):04375                ELSE
1888 4F               (  cowin_beta5.asm):04376                  clra
1889 5F               (  cowin_beta5.asm):04377                  clrb
                      (  cowin_beta5.asm):04378                ENDC
188A 16011D           (  cowin_beta5.asm):04379                  lbra  L193A          Something involving copying a window table
                      (  cowin_beta5.asm):04380         
                      (  cowin_beta5.asm):04381         * Move a menu item descriptor from caller
                      (  cowin_beta5.asm):04382         * Exit: X=Ptr to destination
188D 3464             (  cowin_beta5.asm):04383         L13C9    pshs  b,y,u          preserve regs
188F DE50             (  cowin_beta5.asm):04384                  ldu   <D.Proc        get source task #
1891 A646             (  cowin_beta5.asm):04385                  lda   P$Task,u
1893 DE4A             (  cowin_beta5.asm):04386                  ldu   <D.SysPrc      get system task #
1895 E646             (  cowin_beta5.asm):04387                  ldb   P$Task,u
1897 FE1075           (  cowin_beta5.asm):04388                  ldu   >WGlobal+G.GfxTbl get destination pointer
189A 33C90279         (  cowin_beta5.asm):04389                  leau  >$0279,u
189E 108E0015         (  cowin_beta5.asm):04390                  ldy   #MI.SIZ        get size of item descriptor
18A2 103F38           (  cowin_beta5.asm):04391                  os9   F$Move         move it
18A5 1F31             (  cowin_beta5.asm):04392                  tfr   u,x            make X point to destination
18A7 35E4             (  cowin_beta5.asm):04393                  puls  b,y,u,pc
                      (  cowin_beta5.asm):04394         
                      (  cowin_beta5.asm):04395         * Setup for printing the item text in the pull down
18A9 EE62             (  cowin_beta5.asm):04396         L181D    ldu   $02,s          get static memory pointer
18AB 17FB53           (  cowin_beta5.asm):04397                  lbsr  L1358          setup graphics table entry
18AE 10AEE81A         (  cowin_beta5.asm):04398                  ldy   <$1A,s         get working window table pointer
18B2 17F67F           (  cowin_beta5.asm):04399                  lbsr  L0E68          do a shadowed window on this overlay
18B5 102500EC         (  cowin_beta5.asm):04400                  lbcs  L1935          error, return nothing
18B9 10AEE81C         (  cowin_beta5.asm):04401                  ldy   <$1C,s         get window table pointer
18BD 3420             (  cowin_beta5.asm):04402                  pshs  y
18BF CC203E           (  cowin_beta5.asm):04403                  ldd   #$203E         turn cursor off
18C2 17EAC6           (  cowin_beta5.asm):04404                  lbsr  L0101
18C5 3520             (  cowin_beta5.asm):04405                  puls  y
18C7 AE65             (  cowin_beta5.asm):04406                  ldx   $05,s          get pointer to menu descriptor
18C9 E68811           (  cowin_beta5.asm):04407                  ldb   MN.NITS,x      get # items in menu
18CC E7E818           (  cowin_beta5.asm):04408                  stb   <$18,s         save it as a counter
18CF 4F               (  cowin_beta5.asm):04409                  clra  
18D0 A7E817           (  cowin_beta5.asm):04410                  sta   <$17,s
18D3 AE8815           (  cowin_beta5.asm):04411                  ldx   MN.ITEMS,x     get pointer to item descriptor
18D6 17FAD8           (  cowin_beta5.asm):04412                  lbsr  L12D7          switch to text font
                      (  cowin_beta5.asm):04413         * Print all items in the pull down
18D9 AFE820           (  cowin_beta5.asm):04414         L1852    stx   <$20,s         save pointer to item descriptor
18DC 8DAF             (  cowin_beta5.asm):04415                  bsr   L13C9          get item descriptor from caller
18DE 6D0F             (  cowin_beta5.asm):04416                  tst   MI.ENBL,x      item enabled?
18E0 2608             (  cowin_beta5.asm):04417                  bne   L1861          yes, turn bold on
                      (  cowin_beta5.asm):04418                IFNE  H6309
                      (  cowin_beta5.asm):04419                  aim   #^Bold,Wt.BSW,y Turn BOLD OFF
                      (  cowin_beta5.asm):04420                ELSE
18E2 A629             (  cowin_beta5.asm):04421                  lda   Wt.BSW,y       Turn BOLD OFF
18E4 84DF             (  cowin_beta5.asm):04422                  anda  #^Bold
18E6 A729             (  cowin_beta5.asm):04423                  sta   Wt.BSW,y
                      (  cowin_beta5.asm):04424                ENDC
18E8 2006             (  cowin_beta5.asm):04425                  bra   L1864          skip to printing
                      (  cowin_beta5.asm):04426         
     18EA             (  cowin_beta5.asm):04427         L1861    equ   *
                      (  cowin_beta5.asm):04428                IFNE  H6309
                      (  cowin_beta5.asm):04429                  oim   #Bold,Wt.BSW,y Turn BOLD ON
                      (  cowin_beta5.asm):04430                ELSE
18EA A629             (  cowin_beta5.asm):04431                  lda   Wt.BSW,y       Turn BOLD ON
18EC 8A20             (  cowin_beta5.asm):04432                  ora   #Bold
18EE A729             (  cowin_beta5.asm):04433                  sta   Wt.BSW,y
                      (  cowin_beta5.asm):04434                ENDC
18F0 4F               (  cowin_beta5.asm):04435         L1864    clra                 set X co-ordinate
18F1 E6E817           (  cowin_beta5.asm):04436                  ldb   <$17,s         get Y co-ordinate
18F4 3410             (  cowin_beta5.asm):04437                  pshs  x              preserve item pointer
18F6 17FA59           (  cowin_beta5.asm):04438                  lbsr  L128E          set text co-ordinate
18F9 3510             (  cowin_beta5.asm):04439                  puls  x              restore item pointer
18FB 17FA5E           (  cowin_beta5.asm):04440                  lbsr  L1299          get length of text to a maximum of 15
18FE 17FA6F           (  cowin_beta5.asm):04441                  lbsr  L12AE          print item text
1901 AEE820           (  cowin_beta5.asm):04442                  ldx   <$20,s         get pointer to item descriptor
1904 308815           (  cowin_beta5.asm):04443                  leax  MI.SIZ,x       move to next item
1907 6CE817           (  cowin_beta5.asm):04444                  inc   <$17,s         add another item
190A 6AE818           (  cowin_beta5.asm):04445                  dec   <$18,s         done all items?
190D 26CA             (  cowin_beta5.asm):04446                  bne   L1852          no, keep going
                      (  cowin_beta5.asm):04447         * Setup some variables
190F 86FF             (  cowin_beta5.asm):04448                  lda   #$FF           set current selected item state
1911 A764             (  cowin_beta5.asm):04449                  sta   $04,s
1913 B710BF           (  cowin_beta5.asm):04450                  sta   >WGlobal+g00BF
1916 B61060           (  cowin_beta5.asm):04451                  lda   >WGlobal+G.MSmpRV   get current mouse scan rate
1919 A7E822           (  cowin_beta5.asm):04452                  sta   <$22,s         preserve it
191C 8602             (  cowin_beta5.asm):04453                  lda   #$02           set new mouse scan rate in global mem
191E B71060           (  cowin_beta5.asm):04454                  sta   >WGlobal+G.MSmpRV
1921 B7103B           (  cowin_beta5.asm):04455                  sta   >WGlobal+G.MSmpRt
                      (  cowin_beta5.asm):04456         * Main pointer processing loop for a pulldown
                      (  cowin_beta5.asm):04457         * waits for either a keypress or a mouse button click while updating
                      (  cowin_beta5.asm):04458         * item text in pull down
1924 7F100E           (  cowin_beta5.asm):04459         L18A5    clr   >WGlobal+G.WIBusy  flag cowin not busy
1927 8E0001           (  cowin_beta5.asm):04460                  ldx   #1             let VTIO scan keyboard & update mouse pointer
192A 103F0A           (  cowin_beta5.asm):04461                  os9   F$Sleep
192D 7C100E           (  cowin_beta5.asm):04462                  inc   >WGlobal+G.WIBusy  flag cowin busy
1930 B610BF           (  cowin_beta5.asm):04463                  lda   >WGlobal+g00BF was a key pressed?
1933 2B09             (  cowin_beta5.asm):04464                  bmi   L18CB          no, skip ahead
1935 277C             (  cowin_beta5.asm):04465                  beq   L1943          already processed, remove pull down & return
1937 7F10BF           (  cowin_beta5.asm):04466                  clr   >WGlobal+g00BF clear key press flag
193A 8608             (  cowin_beta5.asm):04467                  lda   #MId.Chr       get menu ID for key press
193C 2069             (  cowin_beta5.asm):04468                  bra   L1937          remove pull down & return
                      (  cowin_beta5.asm):04469         
193E 8E103C           (  cowin_beta5.asm):04470         L18CB    ldx   #WGlobal+G.Mouse Point to mouse packet
1941 6D08             (  cowin_beta5.asm):04471                  tst   Pt.CBSA,x      button A down?
1943 263C             (  cowin_beta5.asm):04472                  bne   L1911          yes, go check out where it is
                      (  cowin_beta5.asm):04473         * No mouse button, check if mouse is in window
1945 17050C           (  cowin_beta5.asm):04474                  lbsr  L1D24          copy mouse co-ordinates to system co-ordinates
1948 308820           (  cowin_beta5.asm):04475                  leax  Pt.Siz,x       point to 'em
194B 1703F0           (  cowin_beta5.asm):04476                  lbsr  L1C25          mouse in current working area?
194E 241C             (  cowin_beta5.asm):04477                  bcc   L18FC          yes, check for item update
1950 8D68             (  cowin_beta5.asm):04478                  bsr   L194A          print current item in non-inverse state
1952 8E105C           (  cowin_beta5.asm):04479                  ldx   #WGlobal+g005C Get ptr to work mouse coords
1955 1703DA           (  cowin_beta5.asm):04480                  lbsr  L1C19          mouse in current window?
1958 250B             (  cowin_beta5.asm):04481                  bcs   L18F5          no, skip ahead
195A 8601             (  cowin_beta5.asm):04482                  lda   #$01           set mouse in pulldown flag
195C A7E824           (  cowin_beta5.asm):04483                  sta   <$24,s
195F 86FF             (  cowin_beta5.asm):04484                  lda   #$FF           flag no current item selected
1961 A764             (  cowin_beta5.asm):04485                  sta   $04,s
1963 20BF             (  cowin_beta5.asm):04486                  bra   L18A5          go back & wait
                      (  cowin_beta5.asm):04487         
1965 6DE824           (  cowin_beta5.asm):04488         L18F5    tst   <$24,s         mouse still in pull down?
1968 263B             (  cowin_beta5.asm):04489                  bne   L1935          no, remove pulldown & return nothing
196A 20B8             (  cowin_beta5.asm):04490                  bra   L18A5          go back & wait
                      (  cowin_beta5.asm):04491         
                      (  cowin_beta5.asm):04492         * Check if we update current item text
196C 8601             (  cowin_beta5.asm):04493         L18FC    lda   #$01           set mouse in pull down flag
196E A7E824           (  cowin_beta5.asm):04494                  sta   <$24,s
1971 17FD9A           (  cowin_beta5.asm):04495                  lbsr  L168A          calculate text Y co-ordinate from mouse
1974 A7E816           (  cowin_beta5.asm):04496                  sta   <$16,s         save current Y co-ordinate
1977 A164             (  cowin_beta5.asm):04497                  cmpa  $04,s          match current item?
1979 27A9             (  cowin_beta5.asm):04498                  beq   L18A5          yes, go back & wait
197B 8D3D             (  cowin_beta5.asm):04499                  bsr   L194A          print item text
197D 8D69             (  cowin_beta5.asm):04500                  bsr   L1972          print next item in inverse state
197F 20A3             (  cowin_beta5.asm):04501                  bra   L18A5          go back & wait
                      (  cowin_beta5.asm):04502         
                      (  cowin_beta5.asm):04503         * Mouse button down but not released, check if it's a menu item
1981 170121           (  cowin_beta5.asm):04504         L1911    lbsr  L1A33          wait for button release
1984 1704CD           (  cowin_beta5.asm):04505                  lbsr  L1D24          get current mouse co-ordinates
1987 308820           (  cowin_beta5.asm):04506                  leax  Pt.Siz,x       point to 'em
198A 1703B1           (  cowin_beta5.asm):04507                  lbsr  L1C25          mouse still in current working area?
198D 2516             (  cowin_beta5.asm):04508                  bcs   L1935          no, return nothing
198F A664             (  cowin_beta5.asm):04509                  lda   $04,s          get current item #
1991 327E             (  cowin_beta5.asm):04510                  leas  -2,s
                      (  cowin_beta5.asm):04511                IFNE  H6309
                      (  cowin_beta5.asm):04512                  bsr   L19A8          get item descriptor from caller
                      (  cowin_beta5.asm):04513                ELSE
1993 17008F           (  cowin_beta5.asm):04514                  lbsr  L19A8          get item descriptor from caller
                      (  cowin_beta5.asm):04515                ENDC
1996 3262             (  cowin_beta5.asm):04516                  leas  2,s
1998 A60F             (  cowin_beta5.asm):04517                  lda   MI.ENBL,x      item enabled?
199A 2709             (  cowin_beta5.asm):04518                  beq   L1935          no, return nothing
199C AE65             (  cowin_beta5.asm):04519                  ldx   $05,s          get menu descriptor pointer
199E A60F             (  cowin_beta5.asm):04520                  lda   MN.ID,x        get ID
19A0 E664             (  cowin_beta5.asm):04521                  ldb   $04,s          get item #
19A2 5C               (  cowin_beta5.asm):04522                  incb                 add 1 to it (can't use zero)
19A3 2002             (  cowin_beta5.asm):04523                  bra   L1937          return with ID & item #
                      (  cowin_beta5.asm):04524         
     19A5             (  cowin_beta5.asm):04525         L1935    equ   *
                      (  cowin_beta5.asm):04526                IFNE  H6309
                      (  cowin_beta5.asm):04527                  clrd                 clear menu ID & item #
                      (  cowin_beta5.asm):04528                ELSE
19A5 4F               (  cowin_beta5.asm):04529                  clra
19A6 5F               (  cowin_beta5.asm):04530                  clrb
                      (  cowin_beta5.asm):04531                ENDC
     19A7             (  cowin_beta5.asm):04532         L1937    equ   *
                      (  cowin_beta5.asm):04533                IFNE  H6309
                      (  cowin_beta5.asm):04534                  bsr   L19B9          remove pulldown & redraw menu bar
                      (  cowin_beta5.asm):04535                ELSE
19A7 170088           (  cowin_beta5.asm):04536                  lbsr  L19B9          remove pulldown & redraw menu bar
                      (  cowin_beta5.asm):04537                ENDC
19AA 3406             (  cowin_beta5.asm):04538         L193A    pshs  d              preserve menu id & item #
19AC EE64             (  cowin_beta5.asm):04539                  ldu   $04,s          get static mem pointer
19AE 170125           (  cowin_beta5.asm):04540                  lbsr  L1A61          copy the window table
19B1 3586             (  cowin_beta5.asm):04541                  puls  d,pc           restore & return
                      (  cowin_beta5.asm):04542         
     19B3             (  cowin_beta5.asm):04543         L1943    equ   *
                      (  cowin_beta5.asm):04544                IFNE  H6309
                      (  cowin_beta5.asm):04545                  clrd
                      (  cowin_beta5.asm):04546                  bsr   L19CA          Remove pulldown menu
                      (  cowin_beta5.asm):04547                ELSE
19B3 4F               (  cowin_beta5.asm):04548                  clra
19B4 5F               (  cowin_beta5.asm):04549                  clrb
19B5 170089           (  cowin_beta5.asm):04550                  lbsr  L19CA          Remove pulldown menu
                      (  cowin_beta5.asm):04551                ENDC
19B8 20F0             (  cowin_beta5.asm):04552                  bra   L193A
                      (  cowin_beta5.asm):04553         
                      (  cowin_beta5.asm):04554         * Print non-inversed item text
19BA A666             (  cowin_beta5.asm):04555         L194A    lda   $06,s          get current item #
19BC 2B66             (  cowin_beta5.asm):04556                  bmi   L1971          no item, return
19BE 3402             (  cowin_beta5.asm):04557                  pshs  a              preserve it
19C0 17FA23           (  cowin_beta5.asm):04558                  lbsr  L1331          turn inverse off
19C3 3502             (  cowin_beta5.asm):04559                  puls  a              restore item #
19C5 8D5E             (  cowin_beta5.asm):04560                  bsr   L19A8          get item descriptor from caller
19C7 6D0F             (  cowin_beta5.asm):04561                  tst   MI.ENBL,x      enabled?
19C9 2759             (  cowin_beta5.asm):04562                  beq   L1971          no, return
                      (  cowin_beta5.asm):04563                IFNE  H6309
                      (  cowin_beta5.asm):04564                  oim   #Bold,Wt.BSW,y Turn BOLD ON
                      (  cowin_beta5.asm):04565                ELSE
19CB 3402             (  cowin_beta5.asm):04566                  pshs  a
19CD A629             (  cowin_beta5.asm):04567                  lda   Wt.BSW,y       Turn BOLD ON
19CF 8A20             (  cowin_beta5.asm):04568                  ora   #Bold
19D1 A729             (  cowin_beta5.asm):04569                  sta   Wt.BSW,y
19D3 3502             (  cowin_beta5.asm):04570                  puls  a
                      (  cowin_beta5.asm):04571                ENDC
19D5 17F984           (  cowin_beta5.asm):04572                  lbsr  L1299          get length of item text
19D8 3404             (  cowin_beta5.asm):04573                  pshs  b              save length
19DA 4F               (  cowin_beta5.asm):04574                  clra                 get text X co-ordinate
19DB E667             (  cowin_beta5.asm):04575                  ldb   $07,s          get text Y co-ordinate of item
19DD 17F972           (  cowin_beta5.asm):04576                  lbsr  L128E          set them
19E0 17F9AD           (  cowin_beta5.asm):04577                  lbsr  L12B6          erase to end of line
19E3 3504             (  cowin_beta5.asm):04578                  puls  b              restore item text length
19E5 16F988           (  cowin_beta5.asm):04579                  lbra  L12AE          print item text & return from there
                      (  cowin_beta5.asm):04580         
                      (  cowin_beta5.asm):04581         * Print inversed item text
19E8 17F9F1           (  cowin_beta5.asm):04582         L1972    lbsr  L1329          turn inverse on
19EB A6E818           (  cowin_beta5.asm):04583                  lda   <$18,s         get item #
19EE 8D35             (  cowin_beta5.asm):04584                  bsr   L19A8          get item descriptor from caller
19F0 6D0F             (  cowin_beta5.asm):04585                  tst   MI.ENBL,x      enabled?
19F2 272B             (  cowin_beta5.asm):04586                  beq   L19A2          no, return
                      (  cowin_beta5.asm):04587                IFNE  H6309
                      (  cowin_beta5.asm):04588                  oim   #Bold,Wt.BSW,y Turn BOLD ON
                      (  cowin_beta5.asm):04589                ELSE
19F4 3402             (  cowin_beta5.asm):04590                  pshs  a
19F6 A629             (  cowin_beta5.asm):04591                  lda   Wt.BSW,y       Turn BOLD ON
19F8 8A20             (  cowin_beta5.asm):04592                  ora   #Bold
19FA A729             (  cowin_beta5.asm):04593                  sta   Wt.BSW,y
19FC 3502             (  cowin_beta5.asm):04594                  puls  a
                      (  cowin_beta5.asm):04595                ENDC
19FE 17F95B           (  cowin_beta5.asm):04596                  lbsr  L1299          calculate length
1A01 3404             (  cowin_beta5.asm):04597                  pshs  b              save it
1A03 4F               (  cowin_beta5.asm):04598                  clra                 get X coord of item
1A04 E6E819           (  cowin_beta5.asm):04599                  ldb   <$19,s         get Y coord of item
1A07 17F948           (  cowin_beta5.asm):04600                  lbsr  L128E          set cursor
1A0A E6E4             (  cowin_beta5.asm):04601                  ldb   ,s             get length
1A0C 17F961           (  cowin_beta5.asm):04602                  lbsr  L12AE          print item text
1A0F AE68             (  cowin_beta5.asm):04603                  ldx   $08,s          get menu descriptor pointer
1A11 E68810           (  cowin_beta5.asm):04604                  ldb   MN.XSIZ,x      get width of pull down
1A14 E0E0             (  cowin_beta5.asm):04605                  subb  ,s+            subtract from text length
1A16 5A               (  cowin_beta5.asm):04606                  decb                 take one off
1A17 5A               (  cowin_beta5.asm):04607         L199A    decb                 done printing?
1A18 2B05             (  cowin_beta5.asm):04608                  bmi   L19A2          yes, return
1A1A 17F92A           (  cowin_beta5.asm):04609                  lbsr  L1283          print a space
1A1D 20F8             (  cowin_beta5.asm):04610                  bra   L199A          keep going till done
                      (  cowin_beta5.asm):04611         
1A1F A6E818           (  cowin_beta5.asm):04612         L19A2    lda   <$18,s         get new item #
1A22 A766             (  cowin_beta5.asm):04613                  sta   6,s            save as current & return
1A24 39               (  cowin_beta5.asm):04614         L1971    rts
                      (  cowin_beta5.asm):04615         
                      (  cowin_beta5.asm):04616         * Get a item descriptor from caller
                      (  cowin_beta5.asm):04617         * Entry: A=Item #
1A25 AE69             (  cowin_beta5.asm):04618         L19A8    ldx   $09,s          get menu descriptor pointer
1A27 AE8815           (  cowin_beta5.asm):04619                  ldx   MN.ITEMS,x     get pointer to item descriptor array
1A2A C615             (  cowin_beta5.asm):04620                  ldb   #MI.SIZ        get size of item descriptor
1A2C 3D               (  cowin_beta5.asm):04621                  mul                  calculate offset
                      (  cowin_beta5.asm):04622                IFNE  H6309
                      (  cowin_beta5.asm):04623                  addr  d,x            add it to pointer
                      (  cowin_beta5.asm):04624                ELSE
1A2D 308B             (  cowin_beta5.asm):04625                  leax  d,x            add it to pointer
                      (  cowin_beta5.asm):04626                ENDC
1A2F 16FE5B           (  cowin_beta5.asm):04627                  lbra  L13C9          get item descriptor from caller & return
                      (  cowin_beta5.asm):04628         
                      (  cowin_beta5.asm):04629         * Remove pull down menu & redraw menu bar
1A32 3406             (  cowin_beta5.asm):04630         L19B9    pshs  d              preserve menu ID and item number
1A34 8D11             (  cowin_beta5.asm):04631                  bsr   L19D0          remove pull down overlay
1A36 A6E826           (  cowin_beta5.asm):04632                  lda   <$26,s         restore mouse sample rate
1A39 B71060           (  cowin_beta5.asm):04633                  sta   >WGlobal+G.MSmpRV  Save in global (Reset default # ticks till next read)
1A3C B7103B           (  cowin_beta5.asm):04634                  sta   >WGlobal+G.MSmpRt  And reset tick counter for next read
1A3F 202A             (  cowin_beta5.asm):04635                  bra   L19F3          redo menu text
                      (  cowin_beta5.asm):04636         
1A41 3406             (  cowin_beta5.asm):04637         L19CA    pshs  d              preserve menu ID & item #
1A43 8D02             (  cowin_beta5.asm):04638                  bsr   L19D0          remove pull down
1A45 3586             (  cowin_beta5.asm):04639                  puls  d,pc
                      (  cowin_beta5.asm):04640         
                      (  cowin_beta5.asm):04641         * Remove menu bar pull down
1A47 10AEE822         (  cowin_beta5.asm):04642         L19D0    ldy   <$22,s         get window table pointer
1A4B EE68             (  cowin_beta5.asm):04643                  ldu   $08,s          get static mem pointer
1A4D A632             (  cowin_beta5.asm):04644                  lda   Wt.BLnk,y      get window back link #
1A4F A7C835           (  cowin_beta5.asm):04645                  sta   V.WinNum,u     save as current window
1A52 ECA824           (  cowin_beta5.asm):04646                  ldd   Wt.LStDf,y     get screen logical start of full window
1A55 ED33             (  cowin_beta5.asm):04647                  std   Wt.LStrt,y     save it as current
                      (  cowin_beta5.asm):04648                IFNE  H6309
                      (  cowin_beta5.asm):04649                  ldq   Wt.DfCPX,y     get init'ed window start co-ordinates & sizes
                      (  cowin_beta5.asm):04650                  stq   Wt.CPX,y       save 'em as current
                      (  cowin_beta5.asm):04651                ELSE
                      (  cowin_beta5.asm):04652         * changed from original Wt.DfCPX+2 and Wt.CPX+2 for clarity LCB
1A57 ECA828           (  cowin_beta5.asm):04653                  ldd   Wt.DfSZX,y
1A5A ED37             (  cowin_beta5.asm):04654                  std   Wt.SZX,y
1A5C FD11B5           (  cowin_beta5.asm):04655                  std   >GrfMem+gr00B5
1A5F ECA826           (  cowin_beta5.asm):04656                  ldd   Wt.DfCPX,y
1A62 ED35             (  cowin_beta5.asm):04657                  std   Wt.CPX,y
                      (  cowin_beta5.asm):04658                ENDC
1A64 C60C             (  cowin_beta5.asm):04659                  ldb   #$0C           get code for OWEnd
1A66 16E922           (  cowin_beta5.asm):04660                  lbra  L0101
                      (  cowin_beta5.asm):04661         
                      (  cowin_beta5.asm):04662         * Print menu descriptor text
                      (  cowin_beta5.asm):04663         * ENTRY: X=ptr to NUL terminated menu text
1A69 3406             (  cowin_beta5.asm):04664         L19F1    pshs  d              preserve menu ID & item #
1A6B EE6F             (  cowin_beta5.asm):04665         L19F3    ldu   $F,s           get pointer to menu handling entry
1A6D 10AEE817         (  cowin_beta5.asm):04666                  ldy   <$17,s         get window table pointer
1A71 AE69             (  cowin_beta5.asm):04667                  ldx   $9,s           get menu text pointer
1A73 A641             (  cowin_beta5.asm):04668                  lda   MnuXStrt,u     get start X coord
1A75 5F               (  cowin_beta5.asm):04669                  clrb                 Y coord=0
1A76 17F8D9           (  cowin_beta5.asm):04670                  lbsr  L128E          Do CurXY (preserves u,y,x)
                      (  cowin_beta5.asm):04671         * Shut scaling off so it works properly (may be able to use A or B instead)
                      (  cowin_beta5.asm):04672                IFNE  H6309
                      (  cowin_beta5.asm):04673                  oim   #Bold,Wt.BSW,y BOLD ON
                      (  cowin_beta5.asm):04674                  aim   #^(TChr+Scale),Wt.BSW,y Transparency on / Scaling off
                      (  cowin_beta5.asm):04675                ELSE
1A79 A629             (  cowin_beta5.asm):04676                  lda   Wt.BSW,y       Get current switch settings
1A7B 8A20             (  cowin_beta5.asm):04677                  ora   #Bold          BOLD ON
1A7D 8477             (  cowin_beta5.asm):04678                  anda  #^(TChr+Scale) Transparency/Scaling both off
1A7F A729             (  cowin_beta5.asm):04679                  sta   Wt.BSW,y       Save new settings
                      (  cowin_beta5.asm):04680                ENDC
1A81 17F958           (  cowin_beta5.asm):04681                  lbsr  L1329          turn inverse on (preserves u,y,x)
1A84 17F8D5           (  cowin_beta5.asm):04682                  lbsr  L1299          get length of text (up to 15) into B
1A87 8D7A             (  cowin_beta5.asm):04683                  bsr   L1A8F          Get size that we print into A/U=menu table ptr
1A89 170472           (  cowin_beta5.asm):04684                  lbsr  FixMenu        Draw the graphics under current menu option
1A8C 17F8B8           (  cowin_beta5.asm):04685                  lbsr  L1283          print a space
1A8F A60F             (  cowin_beta5.asm):04686                  lda   MN.ID,x        get menu ID
1A91 8114             (  cowin_beta5.asm):04687                  cmpa  #MId.Tdy       tandy menu?
1A93 2605             (  cowin_beta5.asm):04688                  bne   L1A23          no, print normal text
1A95 17F8AB           (  cowin_beta5.asm):04689                  lbsr  L127F          print tandy icon (no spaces)
1A98 2003             (  cowin_beta5.asm):04690                  bra   L1A2E          return
                      (  cowin_beta5.asm):04691         
1A9A 17F8D3           (  cowin_beta5.asm):04692         L1A23    lbsr  L12AE          print menu text
     1A9D             (  cowin_beta5.asm):04693         L1A2E    equ   *
                      (  cowin_beta5.asm):04694                IFNE  H6309
                      (  cowin_beta5.asm):04695                  aim   #^Bold,Wt.BSW,y turn BOLD OFF
                      (  cowin_beta5.asm):04696                ELSE
1A9D A629             (  cowin_beta5.asm):04697                  lda   Wt.BSW,y       turn BOLD OFF
1A9F 84DF             (  cowin_beta5.asm):04698                  anda  #^Bold
1AA1 A729             (  cowin_beta5.asm):04699                  sta   Wt.BSW,y
                      (  cowin_beta5.asm):04700                ENDC
1AA3 3586             (  cowin_beta5.asm):04701                  puls  d,pc
                      (  cowin_beta5.asm):04702         
                      (  cowin_beta5.asm):04703         * Wait for mouse button release
1AA5 6D08             (  cowin_beta5.asm):04704         L1A33    tst   Pt.CBSA,x      button A down?
1AA7 26FC             (  cowin_beta5.asm):04705                  bne   L1A33          yes, wait for release
1AA9 6F0A             (  cowin_beta5.asm):04706                  clr   Pt.CCtA,x      clear click count
1AAB 6F0C             (  cowin_beta5.asm):04707                  clr   Pt.TTSA,x      clear time this state
1AAD 39               (  cowin_beta5.asm):04708                  rts                  return
                      (  cowin_beta5.asm):04709         
                      (  cowin_beta5.asm):04710         * Copy window table into a buffer for preservation while cowin is processing
                      (  cowin_beta5.asm):04711         * the menu bar selections. It does this for ease of restoration of window
                      (  cowin_beta5.asm):04712         * to do overlays & such
1AAE 3406             (  cowin_beta5.asm):04713         L1A3C    pshs  d              preserve registers
1AB0 17EC91           (  cowin_beta5.asm):04714                  lbsr  L06AE          get window table pointer
1AB3 BE1075           (  cowin_beta5.asm):04715                  ldx   >WGlobal+G.GfxTbl  point to a buffer for window table
1AB6 308902CF         (  cowin_beta5.asm):04716                  leax  >$02CF,x       Point to buffer to preserve original window tbl
1ABA 8D27             (  cowin_beta5.asm):04717                  bsr   L1A6E          copy current window table into buffer
1ABC 17EA81           (  cowin_beta5.asm):04718                  lbsr  L04EA          change window to full size
1ABF EE66             (  cowin_beta5.asm):04719                  ldu   6,s
1AC1 17EC8C           (  cowin_beta5.asm):04720                  lbsr  L06B9          get graphics table pointer
1AC4 EC07             (  cowin_beta5.asm):04721                  ldd   Gt.FClr,x
1AC6 ED26             (  cowin_beta5.asm):04722                  std   Wt.Fore,y      save it into window table
                      (  cowin_beta5.asm):04723                IFNE  H6309
                      (  cowin_beta5.asm):04724                  aim   #^Prop,Wt.BSW,y Proportional OFF
                      (  cowin_beta5.asm):04725                ELSE
1AC8 A629             (  cowin_beta5.asm):04726                  lda   Wt.BSW,y
1ACA 84EF             (  cowin_beta5.asm):04727                  anda  #^Prop
1ACC A729             (  cowin_beta5.asm):04728                  sta   Wt.BSW,y
                      (  cowin_beta5.asm):04729                ENDC
1ACE 17F91C           (  cowin_beta5.asm):04730                  lbsr  L1337          set draw pattern to nothing
1AD1 17F924           (  cowin_beta5.asm):04731                  lbsr  L1342          set logic type to nothing
1AD4 3586             (  cowin_beta5.asm):04732                  puls  d,pc           restore & return
                      (  cowin_beta5.asm):04733         
                      (  cowin_beta5.asm):04734         * Restore window table to original state
1AD6 17EC6B           (  cowin_beta5.asm):04735         L1A61    lbsr  L06AE
1AD9 30A4             (  cowin_beta5.asm):04736                  leax  ,y
1ADB 10BE1075         (  cowin_beta5.asm):04737                  ldy   >WGlobal+G.GfxTbl  Get ptr to CoWin graphics tables
1ADF 31A902CF         (  cowin_beta5.asm):04738                  leay  >$02CF,y       Point to "temp" entry
                      (  cowin_beta5.asm):04739         * Copy a window table
                      (  cowin_beta5.asm):04740         * Entry: Y=Source pointer
                      (  cowin_beta5.asm):04741         *        X=Destination pointer
                      (  cowin_beta5.asm):04742         * Exit:  X,Y preserved
1AE3 3430             (  cowin_beta5.asm):04743         L1A6E    pshs  x,y
1AE5 3010             (  cowin_beta5.asm):04744                  leax  Wt.STbl,x      Point X to beginning of destination window table entry (-$10,x)
1AE7 3130             (  cowin_beta5.asm):04745                  leay  Wt.STbl,y      Point Y to beginning of destination window table entry (-$10,y)
                      (  cowin_beta5.asm):04746                IFNE  H6309
                      (  cowin_beta5.asm):04747                  ldw   #Wt.Siz
                      (  cowin_beta5.asm):04748                  tfm   y+,x+
                      (  cowin_beta5.asm):04749                ELSE
                      (  cowin_beta5.asm):04750         * 6809 - Eventually use StkBlCpy vector (64 byte copy)
1AE9 3406             (  cowin_beta5.asm):04751                  pshs  d
1AEB C640             (  cowin_beta5.asm):04752                  ldb   #Wt.Siz
1AED A6A0             (  cowin_beta5.asm):04753         L1A6Eb   lda   ,y+
1AEF A780             (  cowin_beta5.asm):04754                  sta   ,x+
1AF1 5A               (  cowin_beta5.asm):04755                  decb
1AF2 26F9             (  cowin_beta5.asm):04756                  bne   L1A6Eb
1AF4 4F               (  cowin_beta5.asm):04757                  clra
1AF5 FD11B5           (  cowin_beta5.asm):04758                  std   >GrfMem+gr00B5
1AF8 3506             (  cowin_beta5.asm):04759                  puls  d
                      (  cowin_beta5.asm):04760                ENDC
1AFA 35B0             (  cowin_beta5.asm):04761                  puls  x,y,pc
                      (  cowin_beta5.asm):04762         
1AFC 327E             (  cowin_beta5.asm):04763         L1A88    leas  -2,s           adjust stack for L1a8f routine
1AFE 8D03             (  cowin_beta5.asm):04764                  bsr   L1A8F          Calc End X coord for menu entry
1B00 3262             (  cowin_beta5.asm):04765                  leas  2,s            restore stack & return
1B02 39               (  cowin_beta5.asm):04766                  rts   
                      (  cowin_beta5.asm):04767         
                      (  cowin_beta5.asm):04768         * Calculate what size of text we will write (preferably with 1 space in
                      (  cowin_beta5.asm):04769         *   front & back). Set flag @ <$1d on stack as to whether spaces fit or not.
                      (  cowin_beta5.asm):04770         * Entry: B=Size of text entry
                      (  cowin_beta5.asm):04771         * Exit: <$1d,s (after puls a,pc) = 0 if fits with lead & trailing spaces
                      (  cowin_beta5.asm):04772         *       <$1d,s = 1 if did not fit
                      (  cowin_beta5.asm):04773         *       A=End X coord on menu bar of TEXT ONLY, NOT INCLUDING SPACES
                      (  cowin_beta5.asm):04774         *       B=Maximum size of text to write (IF CAN'T FIT WITH 2 SPACES)
                      (  cowin_beta5.asm):04775         *       U=menu table ptr
                      (  cowin_beta5.asm):04776         *       E=End X coord including spaces
                      (  cowin_beta5.asm):04777         * NOTE: A does calculate real end in the routine, but only to set flag on
                      (  cowin_beta5.asm):04778         *       stack. It destroys the result before exiting.
1B03 EEE811           (  cowin_beta5.asm):04779         L1A8F    ldu   <$11,s         get menu table pointer
1B06 A641             (  cowin_beta5.asm):04780                  lda   MnuXStrt,u     get X start co-ordinate
                      (  cowin_beta5.asm):04781                IFNE  H6309
                      (  cowin_beta5.asm):04782                  addr  b,a            add size of text to it
                      (  cowin_beta5.asm):04783                ELSE
1B08 3404             (  cowin_beta5.asm):04784                  pshs  b
1B0A ABE0             (  cowin_beta5.asm):04785                  adda  ,s+            add size of text to it
                      (  cowin_beta5.asm):04786                ENDC
1B0C 3402             (  cowin_beta5.asm):04787                  pshs  a              save result (end coord)
1B0E 4C               (  cowin_beta5.asm):04788                  inca                 add 2 for space on either side
1B0F 4C               (  cowin_beta5.asm):04789                  inca  
                      (  cowin_beta5.asm):04790         * Changed to use E
                      (  cowin_beta5.asm):04791                IFNE  H6309
                      (  cowin_beta5.asm):04792                  tfr   a,e            Move to register we can preserve
                      (  cowin_beta5.asm):04793                  cmpe  Wt.SZX,y       still fit in window?
                      (  cowin_beta5.asm):04794                  bls   L1AB0          yes, skip ahead
                      (  cowin_beta5.asm):04795                  dece                 Subtract one of the 2 spaces
                      (  cowin_beta5.asm):04796                  cmpe  Wt.SZX,y       fit in window now?
                      (  cowin_beta5.asm):04797                ELSE
1B10 B711B5           (  cowin_beta5.asm):04798                  sta   >GrfMem+gr00B5
1B13 A137             (  cowin_beta5.asm):04799                  cmpa  Wt.SZX,y       still fit in window?
1B15 2314             (  cowin_beta5.asm):04800                  bls   L1AB0          Yes, skip ahead
1B17 4A               (  cowin_beta5.asm):04801                  deca                 Subtract one of the 2 spaces
1B18 B711B5           (  cowin_beta5.asm):04802                  sta   >GrfMem+gr00B5
1B1B A137             (  cowin_beta5.asm):04803                  cmpa  Wt.SZX,y       Fit in window now?
                      (  cowin_beta5.asm):04804                ENDC
1B1D 2308             (  cowin_beta5.asm):04805                  bls   L1AAC          yes, skip ahead
1B1F E637             (  cowin_beta5.asm):04806                  ldb   Wt.SZX,y       get window size
1B21 E041             (  cowin_beta5.asm):04807                  subb  MnuXStrt,u     take off start coord
1B23 5A               (  cowin_beta5.asm):04808                  decb                 take off another for space in front
                      (  cowin_beta5.asm):04809                IFNE  H6309
                      (  cowin_beta5.asm):04810                  tfr   b,e
                      (  cowin_beta5.asm):04811                ELSE
1B24 F711B5           (  cowin_beta5.asm):04812                  stb   >GrfMem+gr00B5
                      (  cowin_beta5.asm):04813                ENDC
1B27 8601             (  cowin_beta5.asm):04814         L1AAC    lda   #$01           Set flag that it doesn't fit
1B29 2001             (  cowin_beta5.asm):04815                  bra   L1AB1
                      (  cowin_beta5.asm):04816         
1B2B 4F               (  cowin_beta5.asm):04817         L1AB0    clra                 Flag that it fits
1B2C A7E820           (  cowin_beta5.asm):04818         L1AB1    sta   <$20,s
1B2F 3582             (  cowin_beta5.asm):04819                  puls  a,pc           restore new X coord & return
                      (  cowin_beta5.asm):04820         
                      (  cowin_beta5.asm):04821         * SS.SBar entry point
1B31 17F6A8           (  cowin_beta5.asm):04822         L1AB9    lbsr  L116C          setup working window table
1B34 AE26             (  cowin_beta5.asm):04823                  ldx   PD.RGS,y       get register stack pointer
1B36 10BE10BB         (  cowin_beta5.asm):04824                  ldy   >WGlobal+g00BB Get ptr to work window table
                      (  cowin_beta5.asm):04825         * Theoretically, this is where setting up a FSWIN should draw the scroll bars
1B3A 3410             (  cowin_beta5.asm):04826         DfltBar  pshs  x              preserve register stack pointer
1B3C 8602             (  cowin_beta5.asm):04827                  lda   #2             point to draw table to erase old markers
1B3E 308C6D           (  cowin_beta5.asm):04828                  leax  <SBarErs,pc
1B41 17F760           (  cowin_beta5.asm):04829                  lbsr  DrawBar        erase old markers
1B44 3510             (  cowin_beta5.asm):04830                  puls  x
                      (  cowin_beta5.asm):04831         * Draw horizontal scroll bar marker
1B46 E605             (  cowin_beta5.asm):04832                  ldb   R$X+1,x        get requested coord
1B48 CB05             (  cowin_beta5.asm):04833                  addb  #$05           Add 5 to it (min. size of horiz. scroll bar)
1B4A E137             (  cowin_beta5.asm):04834                  cmpb  Wt.SZX,y       Still within X size of window?
1B4C 2F06             (  cowin_beta5.asm):04835                  ble   L1B1E          Yes, bump X pos. back by 4 & go draw it
1B4E E637             (  cowin_beta5.asm):04836                  ldb   Wt.SZX,y       No, get X size of Window
1B50 C003             (  cowin_beta5.asm):04837                  subb  #$03           Bump down by 3
1B52 2002             (  cowin_beta5.asm):04838                  bra   L1B20          Go draw it
                      (  cowin_beta5.asm):04839         
1B54 C004             (  cowin_beta5.asm):04840         L1B1E    subb  #$04
1B56 4F               (  cowin_beta5.asm):04841         L1B20    clra                 Multiply x 8
                      (  cowin_beta5.asm):04842                IFNE  H6309
                      (  cowin_beta5.asm):04843                  lsld  
                      (  cowin_beta5.asm):04844                  lsld  
                      (  cowin_beta5.asm):04845                  lsld  
                      (  cowin_beta5.asm):04846                ELSE
1B57 58               (  cowin_beta5.asm):04847                  lslb  
1B58 49               (  cowin_beta5.asm):04848                  rola  
1B59 58               (  cowin_beta5.asm):04849                  lslb  
1B5A 49               (  cowin_beta5.asm):04850                  rola  
1B5B 58               (  cowin_beta5.asm):04851                  lslb  
1B5C 49               (  cowin_beta5.asm):04852                  rola  
                      (  cowin_beta5.asm):04853                ENDC
1B5D FD1147           (  cowin_beta5.asm):04854                  std   >GrfMem+gr0047 save X coord
1B60 E638             (  cowin_beta5.asm):04855                  ldb   Wt.SZY,y       get window Y size
1B62 5A               (  cowin_beta5.asm):04856                  decb                 subtract 1 to start at 0
1B63 4F               (  cowin_beta5.asm):04857                  clra                 Multiply x 8
                      (  cowin_beta5.asm):04858                IFNE  H6309
                      (  cowin_beta5.asm):04859                  lsld  
                      (  cowin_beta5.asm):04860                  lsld  
                      (  cowin_beta5.asm):04861                  lsld  
                      (  cowin_beta5.asm):04862                  incd                 Bump down for new marker size
                      (  cowin_beta5.asm):04863                ELSE
1B64 58               (  cowin_beta5.asm):04864                  lslb  
1B65 49               (  cowin_beta5.asm):04865                  rola  
1B66 58               (  cowin_beta5.asm):04866                  lslb  
1B67 49               (  cowin_beta5.asm):04867                  rola  
1B68 58               (  cowin_beta5.asm):04868                  lslb  
1B69 49               (  cowin_beta5.asm):04869                  rola  
1B6A C30001           (  cowin_beta5.asm):04870                  addd   #$0001        Bump down for new marker size
                      (  cowin_beta5.asm):04871                ENDC
1B6D FD1149           (  cowin_beta5.asm):04872                  std   >GrfMem+gr0049
1B70 CCCE06           (  cowin_beta5.asm):04873                  ldd   #$ce06         get group/buffer
1B73 8D2D             (  cowin_beta5.asm):04874                  bsr   DrawScrl       Go PutBlk on screen
                      (  cowin_beta5.asm):04875         * Draw vertical scroll bar marker
1B75 E637             (  cowin_beta5.asm):04876                  ldb   Wt.SZX,y       get window X size
1B77 5A               (  cowin_beta5.asm):04877                  decb                 subtract 1 to start at 0
1B78 4F               (  cowin_beta5.asm):04878                  clra                 Multiply x 8
                      (  cowin_beta5.asm):04879                IFNE  H6309
                      (  cowin_beta5.asm):04880                  lsld  
                      (  cowin_beta5.asm):04881                  lsld  
                      (  cowin_beta5.asm):04882                  lsld
                      (  cowin_beta5.asm):04883                  incd                 added RG
                      (  cowin_beta5.asm):04884                ELSE
1B79 58               (  cowin_beta5.asm):04885                  lslb  
1B7A 49               (  cowin_beta5.asm):04886                  rola  
1B7B 58               (  cowin_beta5.asm):04887                  lslb  
1B7C 49               (  cowin_beta5.asm):04888                  rola  
1B7D 58               (  cowin_beta5.asm):04889                  lslb  
1B7E 49               (  cowin_beta5.asm):04890                  rola
1B7F C30001           (  cowin_beta5.asm):04891                  addd  #1             added RG
                      (  cowin_beta5.asm):04892                ENDC
1B82 FD1147           (  cowin_beta5.asm):04893                  std   >GrfMem+gr0047
1B85 E607             (  cowin_beta5.asm):04894                  ldb   R$Y+1,x        get requested Y position
1B87 CB06             (  cowin_beta5.asm):04895                  addb  #$06
1B89 E138             (  cowin_beta5.asm):04896                  cmpb  Wt.SZY,y       will it fit in window?
1B8B 2F06             (  cowin_beta5.asm):04897                  ble   L1B3D
1B8D E638             (  cowin_beta5.asm):04898                  ldb   Wt.SZY,y
1B8F C003             (  cowin_beta5.asm):04899                  subb  #$03
1B91 2002             (  cowin_beta5.asm):04900                  bra   L1B3F
                      (  cowin_beta5.asm):04901         
1B93 C004             (  cowin_beta5.asm):04902         L1B3D    subb  #4
1B95 4F               (  cowin_beta5.asm):04903         L1B3F    clra                 Multiply x 8
                      (  cowin_beta5.asm):04904                IFNE  H6309
                      (  cowin_beta5.asm):04905                  lsld  
                      (  cowin_beta5.asm):04906                  lsld  
                      (  cowin_beta5.asm):04907                  lsld  
                      (  cowin_beta5.asm):04908                ELSE
1B96 58               (  cowin_beta5.asm):04909                  lslb  
1B97 49               (  cowin_beta5.asm):04910                  rola  
1B98 58               (  cowin_beta5.asm):04911                  lslb  
1B99 49               (  cowin_beta5.asm):04912                  rola  
1B9A 58               (  cowin_beta5.asm):04913                  lslb  
1B9B 49               (  cowin_beta5.asm):04914                  rola  
                      (  cowin_beta5.asm):04915                ENDC
1B9C FD1149           (  cowin_beta5.asm):04916                  std   >GrfMem+gr0049
1B9F CCCE05           (  cowin_beta5.asm):04917                  ldd   #$ce05         get group/buffer
1BA2 FD1157           (  cowin_beta5.asm):04918         DrawScrl std   >GrfMem+gr0057
1BA5 C636             (  cowin_beta5.asm):04919                  ldb   #$36           get grfdrv funtion for putblk
1BA7 3430             (  cowin_beta5.asm):04920                  pshs  x,y
1BA9 17E7DF           (  cowin_beta5.asm):04921                  lbsr  L0101
1BAC 35B0             (  cowin_beta5.asm):04922                  puls  x,y,pc
                      (  cowin_beta5.asm):04923         
                      (  cowin_beta5.asm):04924         * Draw table for erasing scroll bars
1BAE 02               (  cowin_beta5.asm):04925         SBarErs  fcb   WColor1        Background of bar color
1BAF 0009             (  cowin_beta5.asm):04926                  fdb   9              9,(bottom+6) to (Right-17),(Bottom -1)
1BB1 FFFA             (  cowin_beta5.asm):04927                  fdb   -6
1BB3 FFEF             (  cowin_beta5.asm):04928                  fdb   -17
1BB5 FFFE             (  cowin_beta5.asm):04929                  fdb   -2
1BB7 4E               (  cowin_beta5.asm):04930                  fcb   $4e
                      (  cowin_beta5.asm):04931         
1BB8 02               (  cowin_beta5.asm):04932                  fcb   WColor1        Background of bar color
1BB9 FFFA             (  cowin_beta5.asm):04933                  fdb   -6             (Right-6),17 to (Right-1),(Bottom-17)
1BBB 0011             (  cowin_beta5.asm):04934                  fdb   17
1BBD FFFF             (  cowin_beta5.asm):04935                  fdb   -1
1BBF FFEF             (  cowin_beta5.asm):04936                  fdb   -17
1BC1 4E               (  cowin_beta5.asm):04937                  fcb   $4e
                      (  cowin_beta5.asm):04938         
                      (  cowin_beta5.asm):04939         * Update auto follow mouse cursor - ADD CHECK FOR MOUSE BUTTON DOWN ON AREA
                      (  cowin_beta5.asm):04940         *  NOT IN OUR WINDOW, DO SELECT IF IN ANOTHER WINDOW
                      (  cowin_beta5.asm):04941         * NOTE: THE AUTO-FOLLOW MOUSE FLAG REMAINS SET _EVEN_ IF WE END UP ON A TEXT
                      (  cowin_beta5.asm):04942         *    WINDOW!!!
                      (  cowin_beta5.asm):04943         * Theoretically, entry is:
                      (  cowin_beta5.asm):04944         *   U=static mem ptr for current active window
                      (  cowin_beta5.asm):04945         *   Y=Path descriptor (64 bytes) ptr for current active window
1BC2 327B             (  cowin_beta5.asm):04946         L1B4D    leas  -5,s           make a buffer for flag & current mouse coords
1BC4 6F64             (  cowin_beta5.asm):04947                  clr   4,s            clear a flag (for different gfx cursor required)
1BC6 8E1054           (  cowin_beta5.asm):04948                  ldx   #WGlobal+G.Mouse+Pt.AcX Point to mouse current coords
1BC9 FE1020           (  cowin_beta5.asm):04949                  ldu   >WGlobal+G.CurDev  get current device static mem pointer
1BCC 17EB44           (  cowin_beta5.asm):04950                  lbsr  L06A0          Go point to & verify window dsc. (preserves X)
                      (  cowin_beta5.asm):04951                IFNE  H6309
                      (  cowin_beta5.asm):04952                  ldq   ,x             Get current X&Y Coords
                      (  cowin_beta5.asm):04953                  tim   #$01,[Wt.STbl,y] 320 or 640 pixel wide screen?
                      (  cowin_beta5.asm):04954                ELSE
1BCF EC02             (  cowin_beta5.asm):04955                  ldd   2,x
1BD1 FD11B5           (  cowin_beta5.asm):04956                  std   >GrfMem+gr00B5
1BD4 EC84             (  cowin_beta5.asm):04957                  ldd   ,x
1BD6 3402             (  cowin_beta5.asm):04958                  pshs  a
1BD8 A6B8F0           (  cowin_beta5.asm):04959                  lda   [Wt.STbl,y]    320 or 640 pixel wide screen?
1BDB 8501             (  cowin_beta5.asm):04960                  bita  #$01
1BDD 3502             (  cowin_beta5.asm):04961                  puls  a
                      (  cowin_beta5.asm):04962                ENDC
1BDF 2602             (  cowin_beta5.asm):04963                  bne   L1B72          640, skip ahead
                      (  cowin_beta5.asm):04964                IFNE  H6309
                      (  cowin_beta5.asm):04965                  lsrd                 Divide X coord by 2
1BE1                  (  cowin_beta5.asm):04966         L1B72    stq   ,s             Save current mouse coords
                      (  cowin_beta5.asm):04967                ELSE
1BE1 44               (  cowin_beta5.asm):04968                  lsra                 Divide X coord by 2
1BE2 56               (  cowin_beta5.asm):04969                  rorb
1BE3 EDE4             (  cowin_beta5.asm):04970         L1B72    std   ,s             Save current mouse coords
1BE5 FC11B5           (  cowin_beta5.asm):04971                  ldd   >GrfMem+gr00B5
1BE8 ED62             (  cowin_beta5.asm):04972                  std   2,s
1BEA ECE4             (  cowin_beta5.asm):04973                  ldd   ,s
                      (  cowin_beta5.asm):04974                ENDC
1BEC 30E4             (  cowin_beta5.asm):04975                  leax  ,s             point to coord info
                      (  cowin_beta5.asm):04976         *  1ST TRY - NEW ROUTINE
1BEE 170141           (  cowin_beta5.asm):04977                  lbsr  L1C19          Check if mouse coord in current window at all
1BF1 251C             (  cowin_beta5.asm):04978                  bcs   L1B8D          No, check to see if we switch windows
                      (  cowin_beta5.asm):04979         * Mouse cursor within current physical window
1BF3 170148           (  cowin_beta5.asm):04980                  lbsr  L1C25          Check if mouse coord in CWArea of current window
1BF6 102500B3         (  cowin_beta5.asm):04981                  lbcs  AdjstCrs       No, must be in control region, adjust gfx cursor
1BFA FE1020           (  cowin_beta5.asm):04982                  ldu   >WGlobal+G.CurDev  get current device static mem
1BFD 17EB50           (  cowin_beta5.asm):04983                  lbsr  L06B9          get gfx table pointer for this window
1C00 EC0C             (  cowin_beta5.asm):04984                  ldd   Gt.GOff,x      get offset into block of graphics cursor
1C02 10A3A819         (  cowin_beta5.asm):04985                  cmpd  Wt.GOff,y      Same as ptr in window table itself?
1C06 102700EA         (  cowin_beta5.asm):04986                  lbeq  L1BD8          Yes, skip ahead
1C0A 6C64             (  cowin_beta5.asm):04987                  inc   4,s            No, set flag & then skip ahead
1C0C 1600E5           (  cowin_beta5.asm):04988                  lbra  L1BD8
                      (  cowin_beta5.asm):04989         
                      (  cowin_beta5.asm):04990         * Mouse cursor not within current window's CWArea. Please note that if running
                      (  cowin_beta5.asm):04991         *   in a bordered window, this means it could be in the menu bar or scroll bar
                      (  cowin_beta5.asm):04992         *   areas (within DWSet range, but not CWArea)
                      (  cowin_beta5.asm):04993         * Gets here ok when cursor on different window
                      (  cowin_beta5.asm):04994         * REQUIRES VTIO TO SET MSEMOVE FLAG WHEN BUTTON PRESSED (DONE IN TC9IO)
                      (  cowin_beta5.asm):04995         * May want to change to send MsSig here in CoWin instead - then we can leave
                      (  cowin_beta5.asm):04996         * Tc9/CC3 IO alone.
                      (  cowin_beta5.asm):04997         * NOTE: WE _WILL_ HAVE TO MAKE SURE IT IS A WINDOW LINKED WITH A PROCESS IN
                      (  cowin_beta5.asm):04998         *   SOME WAY (AS TC9IO'S CLEAR ROUTINE DOES), AS IT WILL SELECT "GHOST"
                      (  cowin_beta5.asm):04999         *   WINDOWS FOR GSHELL (I THINK)
1C0F FC1044           (  cowin_beta5.asm):05000         L1B8D    ldd   >Pt.CBSA+G.Mouse+WGlobal Get both buttons
1C12 10270097         (  cowin_beta5.asm):05001                  lbeq  AdjstCrs       Neither down, continue normally
                      (  cowin_beta5.asm):05002         * Search through window tables looking for ones on the same screen (NO overlay
1C16 EE30             (  cowin_beta5.asm):05003                  ldu   Wt.STbl,y      Get our screen table for comparison purposes
1C18 8E1290           (  cowin_beta5.asm):05004                  ldx   #WinBase       Point to start of internal window tables
1C1B CC2040           (  cowin_beta5.asm):05005                  ldd   #$2040         32 windows to check, $40 bytes/table entry
                      (  cowin_beta5.asm):05006                IFNE  H6309
1C1E                  (  cowin_beta5.asm):05007         SrchLoop ldw   Wt.STbl,x      Get screen tbl ptr
                      (  cowin_beta5.asm):05008                  cmpw  #$FFFF         unused, skip
                      (  cowin_beta5.asm):05009                  beq   TryNext
                      (  cowin_beta5.asm):05010                  cmpr  x,y            Our own ptr?
                      (  cowin_beta5.asm):05011                  beq   TryNext
                      (  cowin_beta5.asm):05012                  cmpr  w,u            On same screen?
                      (  cowin_beta5.asm):05013                ELSE
1C1E 3410             (  cowin_beta5.asm):05014         SrchLoop pshs  x
1C20 AE10             (  cowin_beta5.asm):05015                  ldx   Wt.STbl,x      Get screen tbl ptr
1C22 BF11B5           (  cowin_beta5.asm):05016                  stx   >GrfMem+gr00B5
1C25 8CFFFF           (  cowin_beta5.asm):05017                  cmpx  #-1            Unused, skip
1C28 3510             (  cowin_beta5.asm):05018                  puls  x
1C2A 270D             (  cowin_beta5.asm):05019                  beq   TryNext
1C2C 3410             (  cowin_beta5.asm):05020                  pshs  x
1C2E 10ACE1           (  cowin_beta5.asm):05021                  cmpy  ,s++           Our own ptr?
1C31 2706             (  cowin_beta5.asm):05022                  beq   TryNext
1C33 11B311B5         (  cowin_beta5.asm):05023                  cmpu   >GrfMem+gr00B5  On same screen?
                      (  cowin_beta5.asm):05024                ENDC
1C37 2706             (  cowin_beta5.asm):05025                  beq   CheckScn       Yes, check if mouse clicked on it.
                      (  cowin_beta5.asm):05026         * inc >BordReg        Debug code to see if we got here
1C39 3A               (  cowin_beta5.asm):05027         TryNext  abx                  No, bump ptr up
1C3A 4A               (  cowin_beta5.asm):05028                  deca                 Dec # windows left to check
1C3B 26E1             (  cowin_beta5.asm):05029                  bne   SrchLoop
1C3D 206E             (  cowin_beta5.asm):05030                  bra   AdjstCrs
                      (  cowin_beta5.asm):05031         
     1C3F             (  cowin_beta5.asm):05032         CheckScn equ   *
                      (  cowin_beta5.asm):05033                IFNE  H6309
                      (  cowin_beta5.asm):05034                  lde   Wt.BLnk,x      Is this an overlay window?
                      (  cowin_beta5.asm):05035                ELSE
1C3F 3402             (  cowin_beta5.asm):05036                  pshs  a
1C41 A612             (  cowin_beta5.asm):05037                  lda   Wt.BLnk,x      Is this an overlay window?
1C43 B711B5           (  cowin_beta5.asm):05038                  sta   >GrfMem+gr00B5
1C46 3502             (  cowin_beta5.asm):05039                  puls  a
                      (  cowin_beta5.asm):05040                ENDC
1C48 2AEF             (  cowin_beta5.asm):05041                  bpl   TryNext        Yes, don't bother with it (MAY BE WRONG?)
1C4A 3476             (  cowin_beta5.asm):05042                  pshs  u,y,x,d        Preserve regs
1C4C 3068             (  cowin_beta5.asm):05043                  leax  8,s            Point to mouse packet
                      (  cowin_beta5.asm):05044         *         ldx   #WGlobal+G.Mouse+Pt.AcX   Point to mouse current coords
1C4E 1700E1           (  cowin_beta5.asm):05045                  lbsr  L1C19          See if mouse on this window
1C51 3576             (  cowin_beta5.asm):05046                  puls  u,y,x,d        Restore regs
1C53 25E4             (  cowin_beta5.asm):05047                  bcs   TryNext        Not on this window either, continue through table
                      (  cowin_beta5.asm):05048         * Found window mouse was clicked on. Now, we must find the ptr to _this_
                      (  cowin_beta5.asm):05049         *   windows' device mem ptr, load it into X, lbsr L0582 & bra L1C16
                      (  cowin_beta5.asm):05050         * See TC9IO source, but basically, get Device Table ptr, get # of devices max,
                      (  cowin_beta5.asm):05051         *   use that as range, Get our V$DRIV, check for match (going through Device
                      (  cowin_beta5.asm):05052         *   table), if match, get V$STAT for static storage. Go in there, make sure
                      (  cowin_beta5.asm):05053         *   $1d indicates GRFDRV/CoWin, $1e >0 (Valid window). If so, we found our
                      (  cowin_beta5.asm):05054         *   ptr. If not, skip to AdjstCrs. Do NOT have to go back in loop, as only
                      (  cowin_beta5.asm):05055         *   one window can be in same area (at this time... until movable/resizable
                      (  cowin_beta5.asm):05056         *   windows are implemented in 16K grfdrv)
                      (  cowin_beta5.asm):05057         * This routine should preserve Y (window table ptr)
                      (  cowin_beta5.asm):05058         * SEEMS TO WORK TO HERE NOW.
                      (  cowin_beta5.asm):05059         * Entry: A=32-window entry #
                      (  cowin_beta5.asm):05060         * NOTE: IF IT ALLOWS SELECTING THE UNDERLYING GSHELL "GHOST" WINDOW, WE ALSO
                      (  cowin_beta5.asm):05061         *   HAVE TO ADD CODE TO MAKE SURE A PROCESS IS ACTIVE FOR THE WINDOW... WHICH
                      (  cowin_beta5.asm):05062         *   MEANS RE-SEARCHING (PAST LAST FOUND POINT) THE WINDOW TABLE ITSELF
1C55 C620             (  cowin_beta5.asm):05063                  ldb   #$20           Invert window entry #
                      (  cowin_beta5.asm):05064                IFNE  H6309
                      (  cowin_beta5.asm):05065                  subr  a,b
                      (  cowin_beta5.asm):05066                ELSE
1C57 3402             (  cowin_beta5.asm):05067                  pshs  a
1C59 E0E0             (  cowin_beta5.asm):05068                  subb  ,s+
                      (  cowin_beta5.asm):05069                ENDC
1C5B 3424             (  cowin_beta5.asm):05070                  pshs  b,y            Preserve window entry # & Window table ptr
1C5D BE1020           (  cowin_beta5.asm):05071                  ldx   >WGlobal+G.CurDev  Get ptr to current device static mem
1C60 AE01             (  cowin_beta5.asm):05072                  ldx   V.PORT,x       Get ptr to our device table entry
                      (  cowin_beta5.asm):05073                IFNE  H6309
                      (  cowin_beta5.asm):05074                  ldw   V$DRIV,x       Get original window's driver ptr
                      (  cowin_beta5.asm):05075                ELSE
1C62 AE84             (  cowin_beta5.asm):05076                  ldx   V$DRIV,x       Get original window's driver ptr
1C64 BF11B5           (  cowin_beta5.asm):05077                  stx   >GrfMem+gr00B5
                      (  cowin_beta5.asm):05078                ENDC
1C67 C60D             (  cowin_beta5.asm):05079                  ldb   #DEVSIZ        Size of each device table entry
1C69 9E24             (  cowin_beta5.asm):05080                  ldx   <D.Init        Get ptr to INIT module
1C6B A60D             (  cowin_beta5.asm):05081                  lda   DevCnt,x       Get # of entries allowed in device table
1C6D 9E80             (  cowin_beta5.asm):05082                  ldx   <D.DevTbl      Get start of device table
1C6F 3D               (  cowin_beta5.asm):05083                  mul                  Calculate offset to end of device table
1C70 318B             (  cowin_beta5.asm):05084                  leay  d,x            Point Y to end of Device table
1C72 C60D             (  cowin_beta5.asm):05085                  ldb   #DEVSIZ        Get device table entry size again
1C74 EE84             (  cowin_beta5.asm):05086         DevLoop  ldu   V$DRIV,x       Get driver ptr for device we are checking
                      (  cowin_beta5.asm):05087                IFNE  H6309
                      (  cowin_beta5.asm):05088                  cmpr  u,w            Same as original window?
                      (  cowin_beta5.asm):05089                ELSE
1C76 11B311B5         (  cowin_beta5.asm):05090                  cmpu  >GrfMem+gr00B5
                      (  cowin_beta5.asm):05091                ENDC
1C7A 2628             (  cowin_beta5.asm):05092                  bne   NextEnt        No, skip to next entry
1C7C EE02             (  cowin_beta5.asm):05093                  ldu   V$STAT,x       Get static mem ptr for CC3/TC9IO device
1C7E A6C81D           (  cowin_beta5.asm):05094                  lda   V.WinType,u    Is this a Windint/Grfint window?
1C81 2621             (  cowin_beta5.asm):05095                  bne   NextEnt        No, VDGINT so skip
1C83 A6C81E           (  cowin_beta5.asm):05096                  lda   V.InfVld,u     Is this static mem properly initialized?
1C86 271C             (  cowin_beta5.asm):05097                  beq   NextEnt        No, skip
1C88 A6C835           (  cowin_beta5.asm):05098                  lda   V.WinNum,u     Get window table entry #
1C8B A1E4             (  cowin_beta5.asm):05099                  cmpa  ,s             Same as one we are looking for?
1C8D 2615             (  cowin_beta5.asm):05100                  bne   NextEnt        No, wrong window
                      (  cowin_beta5.asm):05101         * In some cases, it DOES deactivate the original window
1C8F FC1020           (  cowin_beta5.asm):05102                  ldd   >WGlobal+G.CurDev Copy old static mem ptr to previous
1C92 FD1022           (  cowin_beta5.asm):05103                  std   >WGlobal+G.PrWMPt
1C95 FF1020           (  cowin_beta5.asm):05104                  stu   >WGlobal+G.CurDev Found it, save as current device
1C98 6CC823           (  cowin_beta5.asm):05105                  inc   V.ScrChg,u     Flag that screen update needed
1C9B 7F100A           (  cowin_beta5.asm):05106                  clr   >WGlobal+g000A Flag that we are not active device anymore
1C9E 7F10BF           (  cowin_beta5.asm):05107                  clr   >WGlobal+g00BF Clear Windint's key pressed flag
1CA1 3268             (  cowin_beta5.asm):05108                  leas  8,s            Eat temp vars
1CA3 39               (  cowin_beta5.asm):05109                  rts   
                      (  cowin_beta5.asm):05110         
1CA4 3A               (  cowin_beta5.asm):05111         NextEnt  abx                  Point to next entry in device table
                      (  cowin_beta5.asm):05112                IFNE  H6309
                      (  cowin_beta5.asm):05113                  cmpr  y,x            Past end of table?
                      (  cowin_beta5.asm):05114                ELSE
1CA5 3420             (  cowin_beta5.asm):05115                  pshs  y              Past end of table?
1CA7 ACE1             (  cowin_beta5.asm):05116                  cmpx  ,s++
                      (  cowin_beta5.asm):05117                ENDC
1CA9 25C9             (  cowin_beta5.asm):05118                  blo   DevLoop        No, keep trying
1CAB 3524             (  cowin_beta5.asm):05119         NoGo     puls  b,y            Yes, restore window table ptr
1CAD BE1075           (  cowin_beta5.asm):05120         AdjstCrs ldx   >WGlobal+G.GfxTbl  get pointer to graphics table
1CB0 EC8902BC         (  cowin_beta5.asm):05121                  ldd   >$02BC,x       graphics cursor been initialized?
1CB4 261F             (  cowin_beta5.asm):05122                  bne   L1BB5          yes, skip ahead
1CB6 CCCA01           (  cowin_beta5.asm):05123                  ldd   #$CA01         get default group/buffer for arrow
1CB9 FD1157           (  cowin_beta5.asm):05124                  std   >GrfMem+gr0057 Save in Grfdrv mem
1CBC 3430             (  cowin_beta5.asm):05125                  pshs  y,x
1CBE C61A             (  cowin_beta5.asm):05126                  ldb   #$1A           get function call for GCSet
1CC0 17E6C8           (  cowin_beta5.asm):05127                  lbsr  L0101          let grfdrv do it
1CC3 3530             (  cowin_beta5.asm):05128                  puls  y,x
1CC5 A6A818           (  cowin_beta5.asm):05129                  lda   Wt.GBlk,y      get graphics cursor block #
1CC8 A78902BC         (  cowin_beta5.asm):05130                  sta   >$02BC,x       save it in Gfx table mem
1CCC ECA819           (  cowin_beta5.asm):05131                  ldd   Wt.GOff,y      get offset in block to graphics cursor
1CCF ED8902BD         (  cowin_beta5.asm):05132                  std   >$02BD,x       save it
1CD3 2018             (  cowin_beta5.asm):05133                  bra   L1BD1
                      (  cowin_beta5.asm):05134         
                      (  cowin_beta5.asm):05135         * Change mouse cursor if necessary
1CD5 3402             (  cowin_beta5.asm):05136         L1BB5    pshs  a              save gcursor block #
1CD7 ECA819           (  cowin_beta5.asm):05137                  ldd   Wt.GOff,y      get offset into block
1CDA 10A38902BD       (  cowin_beta5.asm):05138                  cmpd  >$02BD,x       match current?
1CDF 3502             (  cowin_beta5.asm):05139                  puls  a              restore block #
1CE1 2711             (  cowin_beta5.asm):05140                  beq   L1BD8          Yes, skip next bit
1CE3 A7A818           (  cowin_beta5.asm):05141         L1BC5    sta   Wt.GBlk,y      save it into window table
1CE6 EC8902BD         (  cowin_beta5.asm):05142                  ldd   >$02BD,x       get offset from global mem
1CEA EDA819           (  cowin_beta5.asm):05143                  std   Wt.GOff,y      save it as offset in window table
1CED 3430             (  cowin_beta5.asm):05144         L1BD1    pshs  y,x            Preserve regs
1CEF 17F0C9           (  cowin_beta5.asm):05145                  lbsr  L0CEC          Update cursors in Grfdrv
1CF2 3530             (  cowin_beta5.asm):05146                  puls  y,x            Restore regs
                      (  cowin_beta5.asm):05147         
     1CF4             (  cowin_beta5.asm):05148         L1BD8    equ   *
                      (  cowin_beta5.asm):05149                IFNE  H6309
                      (  cowin_beta5.asm):05150                  ldq   ,s             get X&Y coords
                      (  cowin_beta5.asm):05151                  stq   >GrfMem+gr005B save them in grfdrv mem
                      (  cowin_beta5.asm):05152                ELSE
1CF4 EC62             (  cowin_beta5.asm):05153                  ldd   2,s            get X&Y coords & save them in grfdrv mem
1CF6 FD115D           (  cowin_beta5.asm):05154                  std   >GrfMem+gr005B+2
1CF9 FD11B5           (  cowin_beta5.asm):05155                  std   >GrfMem+gr00B5
1CFC ECE4             (  cowin_beta5.asm):05156                  ldd   ,s
1CFE FD115B           (  cowin_beta5.asm):05157                  std   >GrfMem+gr005B 
                      (  cowin_beta5.asm):05158                ENDC
1D01 C644             (  cowin_beta5.asm):05159                  ldb   #$44           get function call for PutGC
1D03 3420             (  cowin_beta5.asm):05160                  pshs  y              Preserve regs
1D05 17E683           (  cowin_beta5.asm):05161                  lbsr  L0101          Put mouse cursor on screen
1D08 3520             (  cowin_beta5.asm):05162                  puls  y              Restore regs
1D0A 6D64             (  cowin_beta5.asm):05163                  tst   4,s            Was gfx cursor in window same as in gfx table?
1D0C 2721             (  cowin_beta5.asm):05164                  beq   L1C16          Yes, skip ahead
1D0E FE1020           (  cowin_beta5.asm):05165                  ldu   >WGlobal+G.CurDev  No, get ptr to current device
1D11 17EA3C           (  cowin_beta5.asm):05166                  lbsr  L06B9          get pointer to graphics tables for this window
1D14 A60B             (  cowin_beta5.asm):05167                  lda   Gt.GBlk,x      Get gfx table block # for gfx cursor
1D16 260C             (  cowin_beta5.asm):05168                  bne   L1C07          There is one, make the it the same in window table
1D18 A6A818           (  cowin_beta5.asm):05169                  lda   Wt.GBlk,y      Isn't one, copy from window table to gfx table
1D1B A70B             (  cowin_beta5.asm):05170                  sta   Gt.GBlk,x
1D1D ECA819           (  cowin_beta5.asm):05171                  ldd   Wt.GOff,y
1D20 ED0C             (  cowin_beta5.asm):05172                  std   Gt.GOff,x
1D22 2008             (  cowin_beta5.asm):05173                  bra   L1C11          Go update the cursors on screen
                      (  cowin_beta5.asm):05174         
1D24 A7A818           (  cowin_beta5.asm):05175         L1C07    sta   Wt.GBlk,y      set block # of graphics cursor in window table
1D27 EC0C             (  cowin_beta5.asm):05176                  ldd   Gt.GOff,x      get offset into block
1D29 EDA819           (  cowin_beta5.asm):05177                  std   Wt.GOff,y
1D2C 17F08C           (  cowin_beta5.asm):05178         L1C11    lbsr  L0CEC          Update cursors in GrfDrv
1D2F 3265             (  cowin_beta5.asm):05179         L1C16    leas  5,s            Eat stack & return
1D31 39               (  cowin_beta5.asm):05180                  rts   
                      (  cowin_beta5.asm):05181         
                      (  cowin_beta5.asm):05182         * Check if mouse is in current window (DWSet area)
                      (  cowin_beta5.asm):05183         * Entry: X=pointer to current mouse coordinates in mouse packet
                      (  cowin_beta5.asm):05184         *        Y=Pointer to window table
                      (  cowin_beta5.asm):05185         * Stack use: 0,s   current window table pointer
                      (  cowin_beta5.asm):05186         *            2,s   window start cords.
                      (  cowin_beta5.asm):05187         *            4,s   window size
1D32 327A             (  cowin_beta5.asm):05188         L1C19    leas  -6,s           make a buffer
1D34 10AFE4           (  cowin_beta5.asm):05189                  sty   ,s             save window table pointer
1D37 31A826           (  cowin_beta5.asm):05190                  leay  Wt.DfCPX,y     point to window default co-ordinates
1D3A 8D73             (  cowin_beta5.asm):05191                  bsr   L1C84          calculate co-ordinates
1D3C 2009             (  cowin_beta5.asm):05192                  bra   L1C2E          go calculate it
                      (  cowin_beta5.asm):05193         
                      (  cowin_beta5.asm):05194         * Check if mouse is in current working area (CWArea)
                      (  cowin_beta5.asm):05195         * Entry: X=pointer to current mouse coordinates in mouse packet
                      (  cowin_beta5.asm):05196         *        Y=Pointer to window table
                      (  cowin_beta5.asm):05197         * Stack use: 0,s   current window table pointer
                      (  cowin_beta5.asm):05198         *            2,s   window start cords.
                      (  cowin_beta5.asm):05199         *            4,s   window size
                      (  cowin_beta5.asm):05200         * Exit: Carry clear - on current window area
                      (  cowin_beta5.asm):05201         *       Carry set, off of current window area
                      (  cowin_beta5.asm):05202         * Preserves X
1D3E 327A             (  cowin_beta5.asm):05203         L1C25    leas  -6,s           make a buffer
1D40 10AFE4           (  cowin_beta5.asm):05204                  sty   ,s             save window table pointer
1D43 3135             (  cowin_beta5.asm):05205                  leay  Wt.CPX,y       point to current window co-ordinates
1D45 8D46             (  cowin_beta5.asm):05206                  bsr   L1C64          (preserves X)
1D47 E662             (  cowin_beta5.asm):05207         L1C2E    ldb   2,s            get window X co-ordinate max.
1D49 4F               (  cowin_beta5.asm):05208                  clra                 Multiply x 8
                      (  cowin_beta5.asm):05209                IFNE  H6309
                      (  cowin_beta5.asm):05210                  lsld  
                      (  cowin_beta5.asm):05211                  lsld  
                      (  cowin_beta5.asm):05212                  lsld  
                      (  cowin_beta5.asm):05213                ELSE
1D4A 58               (  cowin_beta5.asm):05214                  lslb  
1D4B 49               (  cowin_beta5.asm):05215                  rola  
1D4C 58               (  cowin_beta5.asm):05216                  lslb  
1D4D 49               (  cowin_beta5.asm):05217                  rola  
1D4E 58               (  cowin_beta5.asm):05218                  lslb  
1D4F 49               (  cowin_beta5.asm):05219                  rola  
                      (  cowin_beta5.asm):05220                ENDC
1D50 10A384           (  cowin_beta5.asm):05221                  cmpd  ,x             higher or lower than current mouse X co-ordinate
1D53 2231             (  cowin_beta5.asm):05222                  bhi   L1C5D          higher not in window, return carry set
1D55 E662             (  cowin_beta5.asm):05223                  ldb   $02,s          get window X co-ordinate
1D57 EB64             (  cowin_beta5.asm):05224                  addb  $04,s          add it to size
1D59 4F               (  cowin_beta5.asm):05225                  clra                 Multiply x 8
                      (  cowin_beta5.asm):05226                IFNE  H6309
                      (  cowin_beta5.asm):05227                  lsld  
                      (  cowin_beta5.asm):05228                  lsld  
                      (  cowin_beta5.asm):05229                  lsld  
                      (  cowin_beta5.asm):05230                ELSE
1D5A 58               (  cowin_beta5.asm):05231                  lslb  
1D5B 49               (  cowin_beta5.asm):05232                  rola  
1D5C 58               (  cowin_beta5.asm):05233                  lslb  
1D5D 49               (  cowin_beta5.asm):05234                  rola  
1D5E 58               (  cowin_beta5.asm):05235                  lslb  
1D5F 49               (  cowin_beta5.asm):05236                  rola  
                      (  cowin_beta5.asm):05237                ENDC
1D60 10A384           (  cowin_beta5.asm):05238                  cmpd  ,x             within range?
1D63 2321             (  cowin_beta5.asm):05239                  bls   L1C5D
                      (  cowin_beta5.asm):05240         * Check if mouse is within range of maximum Y co-ordinate of window
1D65 E663             (  cowin_beta5.asm):05241                  ldb   $03,s          get 
1D67 4F               (  cowin_beta5.asm):05242                  clra                 Multiply x 8
                      (  cowin_beta5.asm):05243                IFNE  H6309
                      (  cowin_beta5.asm):05244                  lsld  
                      (  cowin_beta5.asm):05245                  lsld  
                      (  cowin_beta5.asm):05246                  lsld  
                      (  cowin_beta5.asm):05247                ELSE
1D68 58               (  cowin_beta5.asm):05248                  lslb  
1D69 49               (  cowin_beta5.asm):05249                  rola  
1D6A 58               (  cowin_beta5.asm):05250                  lslb  
1D6B 49               (  cowin_beta5.asm):05251                  rola  
1D6C 58               (  cowin_beta5.asm):05252                  lslb  
1D6D 49               (  cowin_beta5.asm):05253                  rola  
                      (  cowin_beta5.asm):05254                ENDC
1D6E 10A302           (  cowin_beta5.asm):05255                  cmpd  $02,x
1D71 2213             (  cowin_beta5.asm):05256                  bhi   L1C5D
                      (  cowin_beta5.asm):05257         * Check if mouse is within Y lower range of window
1D73 E663             (  cowin_beta5.asm):05258                  ldb   $03,s          get Y co-ordinate of window
1D75 EB65             (  cowin_beta5.asm):05259                  addb  $05,s          add in the size
1D77 4F               (  cowin_beta5.asm):05260                  clra                 Multiply x 8
                      (  cowin_beta5.asm):05261                IFNE  H6309
                      (  cowin_beta5.asm):05262                  lsld  
                      (  cowin_beta5.asm):05263                  lsld  
                      (  cowin_beta5.asm):05264                  lsld  
                      (  cowin_beta5.asm):05265                ELSE
1D78 58               (  cowin_beta5.asm):05266                  lslb  
1D79 49               (  cowin_beta5.asm):05267                  rola  
1D7A 58               (  cowin_beta5.asm):05268                  lslb  
1D7B 49               (  cowin_beta5.asm):05269                  rola  
1D7C 58               (  cowin_beta5.asm):05270                  lslb  
1D7D 49               (  cowin_beta5.asm):05271                  rola  
                      (  cowin_beta5.asm):05272                ENDC
1D7E 10A302           (  cowin_beta5.asm):05273                  cmpd  $02,x          higher or lower than current mouse Y co-ordinate?
1D81 2303             (  cowin_beta5.asm):05274                  bls   L1C5D          lower, return mouse off window
1D83 4F               (  cowin_beta5.asm):05275                  clra                 flag mouse pointer is on this window
1D84 2001             (  cowin_beta5.asm):05276                  bra   L1C5E          return
                      (  cowin_beta5.asm):05277         
1D86 43               (  cowin_beta5.asm):05278         L1C5D    coma                 flag pointer is off this window
1D87 10AEE4           (  cowin_beta5.asm):05279         L1C5E    ldy   ,s             restore window table pointer
1D8A 3266             (  cowin_beta5.asm):05280                  leas  6,s            purge stack
1D8C 39               (  cowin_beta5.asm):05281                  rts                  return
                      (  cowin_beta5.asm):05282         
1D8D 3410             (  cowin_beta5.asm):05283         L1C64    pshs  x              preserve pointer to mouse working co-ordinates
1D8F 3420             (  cowin_beta5.asm):05284                  pshs  y              save pointer to window X/Y start co-ordinates
1D91 10AE66           (  cowin_beta5.asm):05285                  ldy   6,s            get window table pointer
1D94 EC35             (  cowin_beta5.asm):05286                  ldd   Wt.CPX,y       get current X & Y start co-ordinates
                      (  cowin_beta5.asm):05287                IFNE  H6309
                      (  cowin_beta5.asm):05288                  ldw   Wt.LStDf,y     get screen logical start of full window
                      (  cowin_beta5.asm):05289                  cmpw  Wt.LStrt,y     match current working area?
                      (  cowin_beta5.asm):05290                ELSE
1D96 3410             (  cowin_beta5.asm):05291                  pshs  x
1D98 AEA824           (  cowin_beta5.asm):05292                  ldx   Wt.LStDf,y     get screen logical start of full window
1D9B BF11B5           (  cowin_beta5.asm):05293                  stx   >GrfMem+gr00B5
1D9E AC33             (  cowin_beta5.asm):05294                  cmpx  Wt.LStrt,y     match current working area?
1DA0 3510             (  cowin_beta5.asm):05295                  puls  x
                      (  cowin_beta5.asm):05296                ENDC
1DA2 2707             (  cowin_beta5.asm):05297                  beq   L1C80          yes, skip ahead
1DA4 E3A826           (  cowin_beta5.asm):05298                  addd  Wt.DfCPX,y     add current X/Y start to actual X/Y start
1DA7 3520             (  cowin_beta5.asm):05299                  puls  y
1DA9 2008             (  cowin_beta5.asm):05300                  bra   L1C88
                      (  cowin_beta5.asm):05301         
1DAB 3520             (  cowin_beta5.asm):05302         L1C80    puls  y              restore pointer to window X/Y start coords
1DAD 2002             (  cowin_beta5.asm):05303                  bra   L1C86          skip ahead
                      (  cowin_beta5.asm):05304         
1DAF 3410             (  cowin_beta5.asm):05305         L1C84    pshs  x              preserve pointer to mouse working coords
1DB1 ECA4             (  cowin_beta5.asm):05306         L1C86    ldd   ,y             get active window start X/Y default coords
1DB3 ED66             (  cowin_beta5.asm):05307         L1C88    std   6,s            save 'em
1DB5 EC22             (  cowin_beta5.asm):05308                  ldd   2,y            get active window default sizes
1DB7 ED68             (  cowin_beta5.asm):05309                  std   8,s            save 'em
1DB9 AE64             (  cowin_beta5.asm):05310                  ldx   4,s            get current window table pointer
1DBB A612             (  cowin_beta5.asm):05311                  lda   Wt.BLnk,x      this a overlay window?
1DBD 2B25             (  cowin_beta5.asm):05312                  bmi   L1CBA          no we are the only window, return
1DBF 8D25             (  cowin_beta5.asm):05313         L1C94    bsr   L1CBC          get window table pointer to the parent window
1DC1 A612             (  cowin_beta5.asm):05314                  lda   Wt.BLnk,x      we at the bottom of the pile?
1DC3 2AFA             (  cowin_beta5.asm):05315                  bpl   L1C94          no, keep going
1DC5 EC66             (  cowin_beta5.asm):05316                  ldd   $06,s          get active window start coords
                      (  cowin_beta5.asm):05317                IFNE  H6309
                      (  cowin_beta5.asm):05318                  ldw   Wt.LStDf,x     get window logical start
                      (  cowin_beta5.asm):05319                  cmpw  Wt.LStrt,x     same as current working area?
                      (  cowin_beta5.asm):05320                ELSE
1DC7 3420             (  cowin_beta5.asm):05321                  pshs  y
1DC9 10AE8824         (  cowin_beta5.asm):05322                  ldy   Wt.LStDf,x     get window logical start
1DCD 10BF11B5         (  cowin_beta5.asm):05323                  sty   >GrfMem+gr00B5
1DD1 10AC13           (  cowin_beta5.asm):05324                  cmpy  Wt.LStrt,x     same as current working area?
1DD4 3520             (  cowin_beta5.asm):05325                  puls  y
                      (  cowin_beta5.asm):05326                ENDC
1DD6 2605             (  cowin_beta5.asm):05327                  bne   L1CB1          no, skip ahead
1DD8 E38826           (  cowin_beta5.asm):05328                  addd  Wt.DfCPX,x     add the start coord defaults of parent window
1DDB 2005             (  cowin_beta5.asm):05329                  bra   L1CB8          save & return
                      (  cowin_beta5.asm):05330         
1DDD E38826           (  cowin_beta5.asm):05331         L1CB1    addd  Wt.DfCPX,x     Add to original window default X,Y coord start
1DE0 E315             (  cowin_beta5.asm):05332                  addd  Wt.CPX,x       add current window X,Y start coords of parent window
1DE2 ED66             (  cowin_beta5.asm):05333         L1CB8    std   $06,s          save window start coords
1DE4 3590             (  cowin_beta5.asm):05334         L1CBA    puls  x,pc           restore & return
                      (  cowin_beta5.asm):05335         
                      (  cowin_beta5.asm):05336         * Get pointer to window table entry
                      (  cowin_beta5.asm):05337         * Entry: A=Window table entry #
                      (  cowin_beta5.asm):05338         * Exit : X=Pointer to window table entry
1DE6 C640             (  cowin_beta5.asm):05339         L1CBC    ldb   #Wt.Siz        get size of entrys
1DE8 3D               (  cowin_beta5.asm):05340                  mul                  calculate offset
1DE9 8E1290           (  cowin_beta5.asm):05341                  ldx   #WinBase       Point X to window table start
                      (  cowin_beta5.asm):05342                IFNE  H6309
                      (  cowin_beta5.asm):05343                  addr  d,x            add offset
                      (  cowin_beta5.asm):05344                ELSE
1DEC 308B             (  cowin_beta5.asm):05345                  leax  d,x            add offset
                      (  cowin_beta5.asm):05346                ENDC
1DEE 39               (  cowin_beta5.asm):05347                  rts                  return
                      (  cowin_beta5.asm):05348         
                      (  cowin_beta5.asm):05349         * Update mouse packet pointer status based on where it is (called from VTIO)
                      (  cowin_beta5.asm):05350         * Entry: None
1DEF 17E921           (  cowin_beta5.asm):05351         L1CC8    lbsr  L06A0          verify window (don't care about errors)
1DF2 8D60             (  cowin_beta5.asm):05352                  bsr   L1D24          copy current mouse coords to work area
1DF4 3410             (  cowin_beta5.asm):05353                  pshs  x              save pointer to mouse packet
1DF6 308820           (  cowin_beta5.asm):05354                  leax  Pt.Siz,x       point to working coord copies
1DF9 17FF42           (  cowin_beta5.asm):05355                  lbsr  L1C25          mouse in menu bar area?
1DFC 250A             (  cowin_beta5.asm):05356                  bcs   L1CE2          yes, clear relative coords from mouse packet
1DFE 8D1B             (  cowin_beta5.asm):05357                  bsr   L1CFA          update window relative mouse coords
1E00 4F               (  cowin_beta5.asm):05358                  clra                 get code for content region
1E01 3510             (  cowin_beta5.asm):05359         L1CDD    puls  x              restore mouse packet pointer
1E03 A78816           (  cowin_beta5.asm):05360                  sta   Pt.Stat,x      save pointer type
1E06 5F               (  cowin_beta5.asm):05361                  clrb                 clear errors
1E07 39               (  cowin_beta5.asm):05362                  rts   
                      (  cowin_beta5.asm):05363         
                      (  cowin_beta5.asm):05364         * Mouse is either in control region or off window, calculate which
     1E08             (  cowin_beta5.asm):05365         L1CE2    equ   *
                      (  cowin_beta5.asm):05366                IFNE  H6309
                      (  cowin_beta5.asm):05367                  clrd
                      (  cowin_beta5.asm):05368                  clrw  
                      (  cowin_beta5.asm):05369                  stq   -4,x           clear out relative coords in mouse packet
                      (  cowin_beta5.asm):05370                ELSE
1E08 4F               (  cowin_beta5.asm):05371                  clra
1E09 5F               (  cowin_beta5.asm):05372                  clrb
1E0A FD11B5           (  cowin_beta5.asm):05373                  std   >GrfMem+gr00B5 clear out relative coords in mouse packet
1E0D ED1C             (  cowin_beta5.asm):05374                  std   -4,x
1E0F ED1E             (  cowin_beta5.asm):05375                  std   -2,x
                      (  cowin_beta5.asm):05376                ENDC
1E11 17FF1E           (  cowin_beta5.asm):05377                  lbsr  L1C19          mouse on window?
1E14 8601             (  cowin_beta5.asm):05378                  lda   #WR.Cntrl      Default to Control Region (doesn't affect carry)
1E16 24E9             (  cowin_beta5.asm):05379                  bcc   L1CDD          Yes, leave flag alone
1E18 4C               (  cowin_beta5.asm):05380                  inca                 Not on window, change flag to 2
1E19 20E6             (  cowin_beta5.asm):05381                  bra   L1CDD
                      (  cowin_beta5.asm):05382         
                      (  cowin_beta5.asm):05383         * Update window relative coords in mouse packet
                      (  cowin_beta5.asm):05384         * Entry: X=Ptr to mouse working coords
                      (  cowin_beta5.asm):05385         *        Y=Ptr to current window table
1E1B 327A             (  cowin_beta5.asm):05386         L1CFA    leas  -6,s           make a buffer
1E1D 10AFE4           (  cowin_beta5.asm):05387                  sty   ,s             save window table pointer
1E20 3135             (  cowin_beta5.asm):05388                  leay  Wt.CPX,y       point to current window start coords
1E22 17FF68           (  cowin_beta5.asm):05389                  lbsr  L1C64          calculate window 
1E25 E662             (  cowin_beta5.asm):05390                  ldb   2,s            get window X size
1E27 4F               (  cowin_beta5.asm):05391                  clra                 Multiply x 8
                      (  cowin_beta5.asm):05392                IFNE  H6309
                      (  cowin_beta5.asm):05393                  lsld  
                      (  cowin_beta5.asm):05394                  lsld  
                      (  cowin_beta5.asm):05395                  lsld  
                      (  cowin_beta5.asm):05396                  ldw   ,x             get current mouse X coord
                      (  cowin_beta5.asm):05397                  subr  d,w            subtract it from size
                      (  cowin_beta5.asm):05398                  stw   -4,x           save window relative X coord in mouse packet
                      (  cowin_beta5.asm):05399                ELSE
1E28 58               (  cowin_beta5.asm):05400                  lslb  
1E29 49               (  cowin_beta5.asm):05401                  rola  
1E2A 58               (  cowin_beta5.asm):05402                  lslb  
1E2B 49               (  cowin_beta5.asm):05403                  rola  
1E2C 58               (  cowin_beta5.asm):05404                  lslb  
1E2D 49               (  cowin_beta5.asm):05405                  rola  
1E2E 3406             (  cowin_beta5.asm):05406                  pshs  d
1E30 EC84             (  cowin_beta5.asm):05407                  ldd   ,x             get current mouse X coord
1E32 A3E4             (  cowin_beta5.asm):05408                  subd  ,s             subtract it from size
1E34 ED1C             (  cowin_beta5.asm):05409                  std   -4,x           save window relative X coord in mouse packet
1E36 3506             (  cowin_beta5.asm):05410                  puls  d
                      (  cowin_beta5.asm):05411                ENDC
1E38 E663             (  cowin_beta5.asm):05412                  ldb   3,s            get window Y size
1E3A 4F               (  cowin_beta5.asm):05413                  clra                 Multiply x 8
                      (  cowin_beta5.asm):05414                IFNE  H6309
                      (  cowin_beta5.asm):05415                  lsld  
                      (  cowin_beta5.asm):05416                  lsld  
                      (  cowin_beta5.asm):05417                  lsld  
                      (  cowin_beta5.asm):05418                  ldw   2,x            get current mouse Y coord
                      (  cowin_beta5.asm):05419                  subr  d,w            subtract it from size
                      (  cowin_beta5.asm):05420                  stw   -2,x           save window relative Y coord in mouse packet
                      (  cowin_beta5.asm):05421                ELSE
1E3B 58               (  cowin_beta5.asm):05422                  lslb  
1E3C 49               (  cowin_beta5.asm):05423                  rola  
1E3D 58               (  cowin_beta5.asm):05424                  lslb  
1E3E 49               (  cowin_beta5.asm):05425                  rola  
1E3F 58               (  cowin_beta5.asm):05426                  lslb  
1E40 49               (  cowin_beta5.asm):05427                  rola  
1E41 3406             (  cowin_beta5.asm):05428                  pshs  d
1E43 EC02             (  cowin_beta5.asm):05429                  ldd   2,x            get current mouse Y coord
1E45 A3E4             (  cowin_beta5.asm):05430                  subd  ,s             subtract it from size
1E47 FD11B5           (  cowin_beta5.asm):05431                  std   >GrfMem+gr00B5
1E4A ED1E             (  cowin_beta5.asm):05432                  std   -2,x           save window relative Y coord in mouse packet
1E4C 3506             (  cowin_beta5.asm):05433                  puls  d
                      (  cowin_beta5.asm):05434                ENDC
1E4E 10AEE4           (  cowin_beta5.asm):05435                  ldy   ,s             get window table pointer
1E51 3266             (  cowin_beta5.asm):05436                  leas  6,s            purge stack & return
1E53 39               (  cowin_beta5.asm):05437                  rts
                      (  cowin_beta5.asm):05438         
                      (  cowin_beta5.asm):05439         * Copy current mouse coords to working area
1E54 8E103C           (  cowin_beta5.asm):05440         L1D24    ldx   #WGlobal+G.Mouse Point to mouse packet in global mem
                      (  cowin_beta5.asm):05441                IFNE  H6309
                      (  cowin_beta5.asm):05442                  ldq   Pt.AcX,x       get current mouse coords
                      (  cowin_beta5.asm):05443                  tim   #$01,[Wt.STbl,y] 640 pixel wide screen?
                      (  cowin_beta5.asm):05444                ELSE
1E57 EC881A           (  cowin_beta5.asm):05445                  ldd   Pt.AcY,x       Copy current mouse Y coord 
1E5A FD11B5           (  cowin_beta5.asm):05446                  std   >GrfMem+gr00B5
1E5D EC8818           (  cowin_beta5.asm):05447                  ldd   Pt.AcX,x       Get current mouse X coord
1E60 3402             (  cowin_beta5.asm):05448                  pshs  a
1E62 A6B8F0           (  cowin_beta5.asm):05449                  lda   [Wt.STbl,y]    640 pixel wide screen?
1E65 8401             (  cowin_beta5.asm):05450                  anda  #$01
1E67 3502             (  cowin_beta5.asm):05451                  puls  a
                      (  cowin_beta5.asm):05452                ENDC
1E69 2602             (  cowin_beta5.asm):05453                  bne   L1D47          yes, skip ahead
                      (  cowin_beta5.asm):05454                IFNE  H6309
                      (  cowin_beta5.asm):05455                  lsrd                 320, divide X coord by 2
1E6B                  (  cowin_beta5.asm):05456         L1D47    stq   Pt.Siz,x       Save X&Y coords in working area (g005C/g005E)
                      (  cowin_beta5.asm):05457                ELSE
1E6B 44               (  cowin_beta5.asm):05458                  lsra                 320, divide X coord by 2
1E6C 56               (  cowin_beta5.asm):05459                  rorb
1E6D 3406             (  cowin_beta5.asm):05460         L1D47    pshs  d
1E6F FC11B5           (  cowin_beta5.asm):05461                  ldd   >GrfMem+gr00B5
1E72 ED8822           (  cowin_beta5.asm):05462                  std   Pt.Siz+2,x     Save Y coord in working area (g005E)
1E75 3506             (  cowin_beta5.asm):05463                  puls  d
1E77 ED8820           (  cowin_beta5.asm):05464                  std   Pt.Siz,x       Save X coord in working area (g005C)
                      (  cowin_beta5.asm):05465                ENDC
1E7A 39               (  cowin_beta5.asm):05466                  rts              return
                      (  cowin_beta5.asm):05467         
                      (  cowin_beta5.asm):05468                  ENDC
                      (  cowin_beta5.asm):05469         
                      (  cowin_beta5.asm):05470         ****************************
                      (  cowin_beta5.asm):05471         * Scale/DWProtSw/TCharSw/BoldSw
1E7B                  (  cowin_beta5.asm):05472         DWProtSw
1E7B                  (  cowin_beta5.asm):05473         TCharSw
1E7B                  (  cowin_beta5.asm):05474         BoldSw
1E7B                  (  cowin_beta5.asm):05475         PropSw
1E7B 17E895           (  cowin_beta5.asm):05476         ScaleSw  lbsr  L06A0          verify window table
1E7E 2517             (  cowin_beta5.asm):05477                  bcs   NoWind         not good, return error
1E80 A684             (  cowin_beta5.asm):05478                  lda   ,x             Get switch
1E82 BE100C           (  cowin_beta5.asm):05479                  ldx   >WGlobal+G.CurDvM   Get current devices' static mem ptr
1E85 E68837           (  cowin_beta5.asm):05480                  ldb   V.CallCde,x    Get which switch we will be setting
1E88 C022             (  cowin_beta5.asm):05481                  subb  #$22           Bump down to 0-8 range
1E8A 2A01             (  cowin_beta5.asm):05482                  bpl   doswitch       If anything but DWProtSW, skip ahead
1E8C 5F               (  cowin_beta5.asm):05483                  clrb                 0=DWProtSW
1E8D 308C0A           (  cowin_beta5.asm):05484         doswitch leax  <SwtchTbl,pc   Point to switch table
1E90 4D               (  cowin_beta5.asm):05485                  tsta                 On or Off?
1E91 2602             (  cowin_beta5.asm):05486                  bne   SwOn           On, go do
1E93 300A             (  cowin_beta5.asm):05487                  leax  10,x           Off, adjust for 2nd table
1E95 6E85             (  cowin_beta5.asm):05488         SwOn     jmp   b,x            Go set/reset bit flag
                      (  cowin_beta5.asm):05489         
1E97 C6C4             (  cowin_beta5.asm):05490         NoWind   ldb   #E$WUndef      Window Undefined error
1E99 39               (  cowin_beta5.asm):05491                  rts   
                      (  cowin_beta5.asm):05492         
                      (  cowin_beta5.asm):05493         * Table for switches
1E9A 2012             (  cowin_beta5.asm):05494         SwtchTbl bra   DProtOn        Device window protect On
1E9C 2028             (  cowin_beta5.asm):05495                  bra   TChrOn         Transparent chars On
1E9E 202E             (  cowin_beta5.asm):05496                  bra   PropOn         Proportional On
1EA0 203C             (  cowin_beta5.asm):05497                  bra   ScaleOn        Scaling On
1EA2 204A             (  cowin_beta5.asm):05498                  bra   BoldOn         Bold On
1EA4 2010             (  cowin_beta5.asm):05499                  bra   DProtOff       Device window protect Off
1EA6 2016             (  cowin_beta5.asm):05500                  bra   TChrOff        Transparent chars Off
1EA8 202C             (  cowin_beta5.asm):05501                  bra   PropOff        Proportional Off
1EAA 203A             (  cowin_beta5.asm):05502                  bra   ScaleOff       Scaling Off
1EAC 2048             (  cowin_beta5.asm):05503                  bra   BoldOff        Bold Off
                      (  cowin_beta5.asm):05504         
     1EAE             (  cowin_beta5.asm):05505         DProtOn  equ    *
                      (  cowin_beta5.asm):05506                IFNE  H6309
                      (  cowin_beta5.asm):05507                  oim   #Protect,Wt.BSW,y Turn Device window protect on
                      (  cowin_beta5.asm):05508                ELSE
1EAE E629             (  cowin_beta5.asm):05509                  ldb   Wt.BSW,y       Turn Device window protect on
1EB0 CA01             (  cowin_beta5.asm):05510                  orb   #Protect
1EB2 E729             (  cowin_beta5.asm):05511                  stb   Wt.BSW,y
                      (  cowin_beta5.asm):05512                ENDC
1EB4 5F               (  cowin_beta5.asm):05513                  clrb                 No error & return
1EB5 39               (  cowin_beta5.asm):05514                  rts   
                      (  cowin_beta5.asm):05515         
     1EB6             (  cowin_beta5.asm):05516         DProtOff equ    *
                      (  cowin_beta5.asm):05517                IFNE  H6309
                      (  cowin_beta5.asm):05518                  aim   #^Protect,Wt.BSW,y Turn Device window protect off
                      (  cowin_beta5.asm):05519                ELSE
1EB6 E629             (  cowin_beta5.asm):05520                  ldb   Wt.BSW,y       Turn Device window protect off
1EB8 C4FE             (  cowin_beta5.asm):05521                  andb  #^Protect
1EBA E729             (  cowin_beta5.asm):05522                  stb   Wt.BSW,y
                      (  cowin_beta5.asm):05523                ENDC
1EBC 5F               (  cowin_beta5.asm):05524                  clrb                 No error & return
1EBD 39               (  cowin_beta5.asm):05525                  rts   
                      (  cowin_beta5.asm):05526         
     1EBE             (  cowin_beta5.asm):05527         TChrOff  equ    *
                      (  cowin_beta5.asm):05528                IFNE  H6309
                      (  cowin_beta5.asm):05529                  oim   #TChr,Wt.BSW,y Turn Transparency off
                      (  cowin_beta5.asm):05530                ELSE
1EBE E629             (  cowin_beta5.asm):05531                  ldb   Wt.BSW,y       Turn Transparency off
1EC0 CA80             (  cowin_beta5.asm):05532                  orb   #TChr
1EC2 E729             (  cowin_beta5.asm):05533                  stb   Wt.BSW,y
                      (  cowin_beta5.asm):05534                ENDC
1EC4 5F               (  cowin_beta5.asm):05535                  clrb                 No error & return
1EC5 39               (  cowin_beta5.asm):05536                  rts   
                      (  cowin_beta5.asm):05537         
     1EC6             (  cowin_beta5.asm):05538         TChrOn   equ    *
                      (  cowin_beta5.asm):05539                IFNE  H6309
                      (  cowin_beta5.asm):05540                  aim   #^TChr,Wt.BSW,y Turn Transparency on
                      (  cowin_beta5.asm):05541                ELSE
1EC6 E629             (  cowin_beta5.asm):05542                  ldb   Wt.BSW,y       Turn Transparency on
1EC8 C47F             (  cowin_beta5.asm):05543                  andb  #^TChr
1ECA E729             (  cowin_beta5.asm):05544                  stb   Wt.BSW,y
                      (  cowin_beta5.asm):05545                ENDC
1ECC 5F               (  cowin_beta5.asm):05546                  clrb                 No error & return
1ECD 39               (  cowin_beta5.asm):05547                  rts   
                      (  cowin_beta5.asm):05548         
     1ECE             (  cowin_beta5.asm):05549         PropOn   equ    *
                      (  cowin_beta5.asm):05550                IFNE  H6309
                      (  cowin_beta5.asm):05551                  oim   #Prop,Wt.BSW,y Turn Proportional on
                      (  cowin_beta5.asm):05552                ELSE
1ECE E629             (  cowin_beta5.asm):05553                  ldb   Wt.BSW,y       Turn Proportional on
1ED0 CA10             (  cowin_beta5.asm):05554                  orb   #Prop
1ED2 E729             (  cowin_beta5.asm):05555                  stb   Wt.BSW,y
                      (  cowin_beta5.asm):05556                ENDC
1ED4 5F               (  cowin_beta5.asm):05557                  clrb                 No error & return
1ED5 39               (  cowin_beta5.asm):05558                  rts   
                      (  cowin_beta5.asm):05559         
     1ED6             (  cowin_beta5.asm):05560         PropOff  equ    *
                      (  cowin_beta5.asm):05561                IFNE  H6309
                      (  cowin_beta5.asm):05562                  aim   #^Prop,Wt.BSW,y Turn Proportional off
                      (  cowin_beta5.asm):05563                ELSE
1ED6 E629             (  cowin_beta5.asm):05564                  ldb   Wt.BSW,y       Turn Proportional off
1ED8 C4EF             (  cowin_beta5.asm):05565                  andb  #^Prop
1EDA E729             (  cowin_beta5.asm):05566                  stb   Wt.BSW,y
                      (  cowin_beta5.asm):05567                ENDC
1EDC 5F               (  cowin_beta5.asm):05568                  clrb                 No error & return
1EDD 39               (  cowin_beta5.asm):05569                  rts   
                      (  cowin_beta5.asm):05570         
     1EDE             (  cowin_beta5.asm):05571         ScaleOn  equ    *
                      (  cowin_beta5.asm):05572                IFNE  H6309
                      (  cowin_beta5.asm):05573                  oim   #Scale,Wt.BSW,y Turn Scaling on
                      (  cowin_beta5.asm):05574                ELSE
1EDE E629             (  cowin_beta5.asm):05575                  ldb   Wt.BSW,y       Turn Scaling on
1EE0 CA08             (  cowin_beta5.asm):05576                  orb   #Scale
1EE2 E729             (  cowin_beta5.asm):05577                  stb   Wt.BSW,y
                      (  cowin_beta5.asm):05578                ENDC
1EE4 5F               (  cowin_beta5.asm):05579                  clrb                 No error & return
1EE5 39               (  cowin_beta5.asm):05580                  rts   
                      (  cowin_beta5.asm):05581         
     1EE6             (  cowin_beta5.asm):05582         ScaleOff equ    *
                      (  cowin_beta5.asm):05583                IFNE  H6309
                      (  cowin_beta5.asm):05584                  aim   #^Scale,Wt.BSW,y Turn Scaling off
                      (  cowin_beta5.asm):05585                ELSE
1EE6 E629             (  cowin_beta5.asm):05586                  ldb   Wt.BSW,y       Turn Scaling off
1EE8 C4F7             (  cowin_beta5.asm):05587                  andb  #^Scale
1EEA E729             (  cowin_beta5.asm):05588                  stb   Wt.BSW,y
                      (  cowin_beta5.asm):05589                ENDC
1EEC 5F               (  cowin_beta5.asm):05590                  clrb                 No error & return
1EED 39               (  cowin_beta5.asm):05591                  rts   
                      (  cowin_beta5.asm):05592         
     1EEE             (  cowin_beta5.asm):05593         BoldOn   equ    *
                      (  cowin_beta5.asm):05594                IFNE  H6309
                      (  cowin_beta5.asm):05595                  oim   #Bold,Wt.BSW,y Turn Bold on
                      (  cowin_beta5.asm):05596                ELSE
1EEE E629             (  cowin_beta5.asm):05597                  ldb   Wt.BSW,y       Turn Bold on
1EF0 CA20             (  cowin_beta5.asm):05598                  orb   #Bold
1EF2 E729             (  cowin_beta5.asm):05599                  stb   Wt.BSW,y
                      (  cowin_beta5.asm):05600                ENDC
1EF4 5F               (  cowin_beta5.asm):05601                  clrb                 No error & return
1EF5 39               (  cowin_beta5.asm):05602                  rts   
                      (  cowin_beta5.asm):05603         
     1EF6             (  cowin_beta5.asm):05604         BoldOff  equ    *
                      (  cowin_beta5.asm):05605                IFNE  H6309
                      (  cowin_beta5.asm):05606                  aim   #^Bold,Wt.BSW,y Turn Bold off
                      (  cowin_beta5.asm):05607                ELSE
1EF6 E629             (  cowin_beta5.asm):05608                  ldb   Wt.BSW,y       Turn Bold off
1EF8 C4DF             (  cowin_beta5.asm):05609                  andb  #^Bold
1EFA E729             (  cowin_beta5.asm):05610                  stb   Wt.BSW,y
                      (  cowin_beta5.asm):05611                ENDC
1EFC 5F               (  cowin_beta5.asm):05612                  clrb                 No error & return
1EFD 39               (  cowin_beta5.asm):05613                  rts   
                      (  cowin_beta5.asm):05614         
                      (  cowin_beta5.asm):05615                IFNE  CoGrf-1
                      (  cowin_beta5.asm):05616         * FIXMENU - redos the graphics on the menu bar affected by menu pulldown
                      (  cowin_beta5.asm):05617         * Entry: X=Ptr to menu text (NUL terminated)
                      (  cowin_beta5.asm):05618         *        Y=Window table ptr
                      (  cowin_beta5.asm):05619         *        U=Ptr to menu handling table entry (4 byte packets)
                      (  cowin_beta5.asm):05620         *        B=Size of text to write (dont' need here)
                      (  cowin_beta5.asm):05621         *        A=End X coord of menu entry
                      (  cowin_beta5.asm):05622         * Exit: preserves x,y,u registers
                      (  cowin_beta5.asm):05623         * Stack offsets for temp stack:
     0000             (  cowin_beta5.asm):05624         fixcolor equ   0
     0001             (  cowin_beta5.asm):05625         fixstrtx equ   1
     0003             (  cowin_beta5.asm):05626         fixstrty equ   3
     0005             (  cowin_beta5.asm):05627         fixendx  equ   5
     0007             (  cowin_beta5.asm):05628         fixendy  equ   7
     0009             (  cowin_beta5.asm):05629         fixcode  equ   9
                      (  cowin_beta5.asm):05630         
                      (  cowin_beta5.asm):05631         * 1st, redo background
1EFE 3416             (  cowin_beta5.asm):05632         FixMenu  pshs  d,x            Save # of chars & menu text ptr
1F00 3276             (  cowin_beta5.asm):05633                  leas  -10,s          Make room on stack for graphics "chunk"
                      (  cowin_beta5.asm):05634                IFNE  H6309
                      (  cowin_beta5.asm):05635                  tfr   e,b            Move calculated End X coord to D
                      (  cowin_beta5.asm):05636                ELSE
1F02 F611B5           (  cowin_beta5.asm):05637                  ldb   >GrfMem+gr00B5 Move calculated End X coord to D
                      (  cowin_beta5.asm):05638                ENDC
1F05 A60F             (  cowin_beta5.asm):05639                  lda   MN.ID,x        Get menu ID #
1F07 8114             (  cowin_beta5.asm):05640                  cmpa  #MId.Tdy       Tandy menu (in which case E is fried)
1F09 2603             (  cowin_beta5.asm):05641                  bne   normalmn
1F0B E642             (  cowin_beta5.asm):05642                  ldb   MnuXEnd,u      Get real end coord
1F0D 5C               (  cowin_beta5.asm):05643                  incb                 For space between it & next coord
                      (  cowin_beta5.asm):05644         * Draw 6 pixel high bar in middle
1F0E 4F               (  cowin_beta5.asm):05645         normalmn clra  
                      (  cowin_beta5.asm):05646                IFNE  H6309
                      (  cowin_beta5.asm):05647                  lsld                 D=D*8 (for graphics X coord)
                      (  cowin_beta5.asm):05648                  lsld  
                      (  cowin_beta5.asm):05649                  lsld  
                      (  cowin_beta5.asm):05650                ELSE
1F0F 58               (  cowin_beta5.asm):05651                  lslb                 D=D*8 (for graphics X coord)
1F10 49               (  cowin_beta5.asm):05652                  rola
1F11 58               (  cowin_beta5.asm):05653                  lslb
1F12 49               (  cowin_beta5.asm):05654                  rola
1F13 58               (  cowin_beta5.asm):05655                  lslb
1F14 49               (  cowin_beta5.asm):05656                  rola
                      (  cowin_beta5.asm):05657                ENDC
1F15 ED65             (  cowin_beta5.asm):05658                  std   fixendx,s      Save End X Coord
1F17 C602             (  cowin_beta5.asm):05659                  ldb   #WColor1       Color 1
1F19 E7E4             (  cowin_beta5.asm):05660                  stb   fixcolor,s     Save it
1F1B CC0001           (  cowin_beta5.asm):05661                  ldd   #1             Y Pix start=1 (added since WColor now changeable)
1F1E ED63             (  cowin_beta5.asm):05662                  std   fixstrty,s
1F20 C606             (  cowin_beta5.asm):05663                  ldb   #6             Save Y pixel end
1F22 ED67             (  cowin_beta5.asm):05664                  std   fixendy,s
1F24 E641             (  cowin_beta5.asm):05665                  ldb   MnuXStrt,u     Get start X coord
                      (  cowin_beta5.asm):05666                IFNE  H6309
                      (  cowin_beta5.asm):05667                  lsld                 D=X coord in pixels
                      (  cowin_beta5.asm):05668                  lsld  
                      (  cowin_beta5.asm):05669                  lsld  
                      (  cowin_beta5.asm):05670                ELSE
1F26 58               (  cowin_beta5.asm):05671                  lslb                 D=X coord in pixels
1F27 49               (  cowin_beta5.asm):05672                  rola
1F28 58               (  cowin_beta5.asm):05673                  lslb
1F29 49               (  cowin_beta5.asm):05674                  rola
1F2A 58               (  cowin_beta5.asm):05675                  lslb
1F2B 49               (  cowin_beta5.asm):05676                  rola
                      (  cowin_beta5.asm):05677                ENDC
1F2C ED61             (  cowin_beta5.asm):05678                  std   fixstrtx,s     Save X pixel start
1F2E CC014E           (  cowin_beta5.asm):05679                  ldd   #$014e         1 function & GRFDRV Bar function code
1F31 E769             (  cowin_beta5.asm):05680                  stb   fixcode,s
1F33 30E4             (  cowin_beta5.asm):05681                  leax  ,s             Point to our "chunk"
1F35 17F36C           (  cowin_beta5.asm):05682                  lbsr  DrawBar        Draw the top line again
                      (  cowin_beta5.asm):05683         * Now redo top line
1F38 8603             (  cowin_beta5.asm):05684                  lda   #WColor3       Color 3
1F3A A7E4             (  cowin_beta5.asm):05685                  sta   fixcolor,s
                      (  cowin_beta5.asm):05686                  IFNE  H6309
                      (  cowin_beta5.asm):05687                  clrd                 Y coord=0
                      (  cowin_beta5.asm):05688                  ELSE
1F3C 4F               (  cowin_beta5.asm):05689                  clra
1F3D 5F               (  cowin_beta5.asm):05690                  clrb
                      (  cowin_beta5.asm):05691                  ENDC
1F3E ED63             (  cowin_beta5.asm):05692                  std   fixstrty,s
1F40 ED67             (  cowin_beta5.asm):05693                  std   fixendy,s
1F42 CC014A           (  cowin_beta5.asm):05694                  ldd   #$014a         1 function & Draw line GRFDRV function code
1F45 E769             (  cowin_beta5.asm):05695                  stb   fixcode,s
1F47 30E4             (  cowin_beta5.asm):05696                  leax  ,s             Point to our "chunk"
1F49 17F358           (  cowin_beta5.asm):05697                  lbsr  DrawBar
                      (  cowin_beta5.asm):05698         * Now redo bottom line
1F4C 8601             (  cowin_beta5.asm):05699                  lda   #WColor2       Color 2
1F4E A7E4             (  cowin_beta5.asm):05700                  sta   fixcolor,s
1F50 CC0007           (  cowin_beta5.asm):05701                  ldd   #7             Y coord=7
1F53 ED63             (  cowin_beta5.asm):05702                  std   fixstrty,s
1F55 ED67             (  cowin_beta5.asm):05703                  std   fixendy,s
1F57 CC014A           (  cowin_beta5.asm):05704                  ldd   #$014a         1 function & GRFDRV Draw Line function code
1F5A E769             (  cowin_beta5.asm):05705                  stb   fixcode,s
1F5C 30E4             (  cowin_beta5.asm):05706                  leax  ,s             Point to our "chunk"
1F5E 17F343           (  cowin_beta5.asm):05707                  lbsr  DrawBar
1F61 326A             (  cowin_beta5.asm):05708                  leas  10,s           Restore stack
1F63 3596             (  cowin_beta5.asm):05709                  puls  d,x,pc         Restore regs & return
                      (  cowin_beta5.asm):05710                  ENDC
                      (  cowin_beta5.asm):05711         
1F65 FB7C3A           (  cowin_beta5.asm):05712                  emod  
     1F68             (  cowin_beta5.asm):05713         eom      equ   *
                      (  cowin_beta5.asm):05714                  end
