                      (gshell_beta5_yak.):00001         * LCB note: Since we are planning to add an option to boot a new window with the default GSHPAL
                      (gshell_beta5_yak.):00002         * colors (first 4 palettes), use the pre-built buffer @ GSHBUF, so that we can just I$Write it
                      (gshell_beta5_yak.):00003         * to new window. If the user has NOT set up GSHPAL's, than the 16 byte sequence at GSHPAL will
                      (gshell_beta5_yak.):00004         * all be 0's
                      (gshell_beta5_yak.):00005         
                      (gshell_beta5_yak.):00006                  nam   GShell Graphics Shell
                      (gshell_beta5_yak.):00007                  ttl   Source derived by Kent D. Meyers.
                      (gshell_beta5_yak.):00008         
                      (gshell_beta5_yak.):00009         * Signal handlers will have to handle new RBF call for directory updates
                      (gshell_beta5_yak.):00010         * DIR has to be open (uses path #), but can be in READ+DIR mode
                      (gshell_beta5_yak.):00011         *  Renames, etc. will have to close DIR 1st, do function, re-open.
                      (gshell_beta5_yak.):00012         
                      (gshell_beta5_yak.):00013         * Compressed Version. Started February 7, 1988. Completed February 29.
                      (gshell_beta5_yak.):00014         * Upgraded Version. Started March 2, 1988. Finished by KDM Feb 13, 1994
                      (gshell_beta5_yak.):00015         * NITROS9 ONLY VERSION. Started August 8,1998 by LCB
                      (gshell_beta5_yak.):00016         * NOTE: When GSHPAL added, got rid of DEVICSET, and 2 other SETS from env.file
                      (gshell_beta5_yak.):00017         *       check in DP (3 DP bytes back)
                      (gshell_beta5_yak.):00018         * NOTE: HAVE TRIED 5 ROWS OF ICONS (ICONYMAX=143, ICONROWH=32, ICONSCR=20), &
                      (gshell_beta5_yak.):00019         *       IT FITS, BUT LOOKS REALLY CROWDED. IF WE MAKE THE NEW "SYSTEM" 6 PIXEL
                      (gshell_beta5_yak.):00020         *       WIDE FONT ALSO SHORTER (LIKE FONT #$27, WHICH IS THE 8 PIXEL WIDE VERSION)
                      (gshell_beta5_yak.):00021         *       IT MIGHT WORK THEN.
                      (gshell_beta5_yak.):00022         * Killed all calls to F.SLEEP, embedded (shorter & faster)
                      (gshell_beta5_yak.):00023         * NOTE (6309 ONLY): ALL STD -2,S TO CHECK THE D FLAG CAN BE CHANGED TO TSTD
                      (gshell_beta5_yak.):00024         * (SAME SIZE, FASTER)
                      (gshell_beta5_yak.):00025         
                      (gshell_beta5_yak.):00026         * EOU (Ease of Use) modifications:
                      (gshell_beta5_yak.):00027         *  12/15/2017 - New printer and trash can icons from Nick Marentes (and trash can position) LCB
                      (gshell_beta5_yak.):00028         *  04/30/2018 - Added 'DUMP' command to files menu; change STAT and DUMP to use 8x8 font (fits
                      (gshell_beta5_yak.):00029         *               width, and much faster display) LCB.
                      (gshell_beta5_yak.):00030         *  05/01/2018 - Added Mini stack blast clear and copy routines; will be modifying code to call
                      (gshell_beta5_yak.):00031         *               them when needed. Should speed up initialization, additional memory allocation,
                      (gshell_beta5_yak.):00032         *               and a few other routines. LCB
                      (gshell_beta5_yak.):00033         *  05/09/2018 - Now auto-recognizes RAM size from 128K to 2MB, and thus does not need the 'RAM='
                      (gshell_beta5_yak.):00034         *               in the env.file anymore. However, you can leave it in to override your real RAM,
                      (gshell_beta5_yak.):00035         *               for testing how GSHELL will react. LCB
                      (gshell_beta5_yak.):00036         *  06/22/2018 - Graphic windows created for new process will no longer force the user to move/size
                      (gshell_beta5_yak.):00037         *               if they are full width (either 40 or 80 column) and 24 lines high. 24 and 25 line
                      (gshell_beta5_yak.):00038         *               windows that are full screen width will full window/screens of that size.
                      (gshell_beta5_yak.):00039         *  03/18/2020 - Changed ID.* structure to have ID.NUMBR as single byte, defined new ID.ORGWT
                      (gshell_beta5_yak.):00040         *               testing to make sure that it doesn't break before we use for new VDG launch support
                      (gshell_beta5_yak.):00041         *  03/19/2020 to 03/29/2020 - Implemented screen type 0 for VDG launch using new I$ModDsc
                      (gshell_beta5_yak.):00042         *               call (EOU Beta 5). Restores Window to original settings once app is finished.
                      (gshell_beta5_yak.):00043         *  04/14/2020 - working on fixing bug with AIF.xxx printing the program filename and not the data
                      (gshell_beta5_yak.):00044         *              filename (appeared after '|' optional program name was added). Also updated edition
                      (gshell_beta5_yak.):00045         *              # to 3 and version number to 1.27 (which includes all EOU chance through the end of
                      (gshell_beta5_yak.):00046         *              Beta 5)
                      (gshell_beta5_yak.):00047         
                      (gshell_beta5_yak.):00048                ifp1
                      (gshell_beta5_yak.):00049                  use   defsfile
     0002             (         defsfile):00001         Level equ 2
     0000             (         defsfile):00002         H6309 equ 0
                      (         defsfile):00003               use   os9.d
                      (            os9.d):00001         ********************************************************************
                      (            os9.d):00002         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00003         *
                      (            os9.d):00004         * $Id$
                      (            os9.d):00005         *
                      (            os9.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00007         * Comment
                      (            os9.d):00008         * ------------------------------------------------------------------
                      (            os9.d):00009         *          1985/08/29  KMZ
                      (            os9.d):00010         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00011         *
                      (            os9.d):00012         *          1985/09/01  KMZ
                      (            os9.d):00013         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00014         *
                      (            os9.d):00015         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00016         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00017         * 68000 compatability.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00020         * F$AlHRAM System call added for COCO.
                      (            os9.d):00021         *
                      (            os9.d):00022         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00023         * F$Alarm for COCO Clock Module.
                      (            os9.d):00024         *
                      (            os9.d):00025         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00026         * SS.Tone For COCO.
                      (            os9.d):00027         *
                      (            os9.d):00028         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00029         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00030         *
                      (            os9.d):00031         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00032         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00033         *
                      (            os9.d):00034         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00035         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00036         *
                      (            os9.d):00037         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00038         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00039         *
                      (            os9.d):00040         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00041         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00042         *
                      (            os9.d):00043         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00044         * Added NitrOS-9 definitions.
                      (            os9.d):00045         *
                      (            os9.d):00046         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00047         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00048         *
                      (            os9.d):00049         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00050         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00051         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00052         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00053         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00054         *
                      (            os9.d):00055         *          2003/11/05  Robert Gault
                      (            os9.d):00056         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00057         *
                      (            os9.d):00058         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00059         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00060         *
                      (            os9.d):00061         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00062         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00063         *
                      (            os9.d):00064         * Added I$ModDsc call (modify device descriptor in system memory) BN/LCB
                      (            os9.d):00065         *          2019/10/30  Bill Nobel, from discussions with L. Curtis Boyle
                      (            os9.d):00066                        NAM       os9.d
                      (            os9.d):00067                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00068         
                      (            os9.d):00069         * Common definitions
     0001             (            os9.d):00070         true           EQU       1                   useful name
     0000             (            os9.d):00071         false          EQU       0                   useful name
                      (            os9.d):00072         
                      (            os9.d):00073                        PAG       
                      (            os9.d):00074         *****************************************
                      (            os9.d):00075         * System Service Request Code Definitions
                      (            os9.d):00076         *
                      (            os9.d):00077                        ORG       0
0000                  (            os9.d):00078         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00079         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00080         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00081         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00082         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00083         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00084         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00085         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00086         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00087         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00088         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00089         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00090         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00091         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00092         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00093         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00094         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00095         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00096         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00097         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00098         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00099         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00100         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00101         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00102         
                      (            os9.d):00103         
                      (            os9.d):00104         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00105         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00106         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00107         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00108         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00109         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00110         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00111         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00112                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00113         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00114         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00115         
                      (            os9.d):00116         
                      (            os9.d):00117         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00118         
                      (            os9.d):00119         
0023                  (            os9.d):00120         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00121         
                      (            os9.d):00122         
                      (            os9.d):00123                        ORG       $25
0025                  (            os9.d):00124         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00125         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00126         
                      (            os9.d):00127         
                      (            os9.d):00128                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00129         * NitrOS-9 common system calls
0027                  (            os9.d):00130         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00131         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00132         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00133         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00134         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00135         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00136         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00137         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00138         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00139         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00140         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00141         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00142         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00143         
                      (            os9.d):00144         
0034                  (            os9.d):00145         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00146         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00147         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00148         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00149         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00150         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00151         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00152         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00153         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00154         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00155         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00156         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00157         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00158         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00159         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00160         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00161         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00162         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00163         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00164         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00165         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00166         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00167         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00168         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00169         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00170         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00171         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00172         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00173         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00174         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00175         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00176         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00177         
                      (            os9.d):00178         * Alan DeKok additions
0054                  (            os9.d):00179         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00180         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00181         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00182         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00183         
                      (            os9.d):00184         
                      (            os9.d):00185         *
                      (            os9.d):00186         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00187         *
                      (            os9.d):00188                        ORG       $70
                      (            os9.d):00189         
                      (            os9.d):00190         
                      (            os9.d):00191         
                      (            os9.d):00192         
0070                  (            os9.d):00193         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00194         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00195         
0072                  (            os9.d):00196                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00197         
                      (            os9.d):00198                        PAG       
                      (            os9.d):00199         **************************************
                      (            os9.d):00200         * I/O Service Request Code Definitions
                      (            os9.d):00201         *
                      (            os9.d):00202                        ORG       $80
0080                  (            os9.d):00203         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00204         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00205         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00206         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00207         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00208         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00209         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00210         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00211         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00212         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00213         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00214         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00215         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00216         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00217         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00218         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00219         I$DeletX       RMB       1                   Delete from current exec dir
0091                  (            os9.d):00220         I$ModDsc       RMB       1                   Modify SCF/RBF Descriptor in Memory
                      (            os9.d):00221         
                      (            os9.d):00222         *******************
                      (            os9.d):00223         * File Access Modes
                      (            os9.d):00224         *
     0001             (            os9.d):00225         READ.          EQU       %00000001
     0002             (            os9.d):00226         WRITE.         EQU       %00000010
     0003             (            os9.d):00227         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00228         EXEC.          EQU       %00000100
     0008             (            os9.d):00229         PREAD.         EQU       %00001000
     0010             (            os9.d):00230         PWRIT.         EQU       %00010000
     0020             (            os9.d):00231         PEXEC.         EQU       %00100000
     0040             (            os9.d):00232         SHARE.         EQU       %01000000
     0080             (            os9.d):00233         DIR.           EQU       %10000000
     0020             (            os9.d):00234         ISIZ.          EQU       %00100000
                      (            os9.d):00235         
                      (            os9.d):00236         **************
                      (            os9.d):00237         * Signal Codes
                      (            os9.d):00238         *
                      (            os9.d):00239                        ORG       0
0000                  (            os9.d):00240         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00241         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00242         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00243         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00244         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00245         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00246         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00247         
                      (            os9.d):00248                        PAG       
                      (            os9.d):00249         **********************************
                      (            os9.d):00250         * Status Codes for GetStat/GetStat
                      (            os9.d):00251         *
                      (            os9.d):00252                        ORG       0
0000                  (            os9.d):00253         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00254         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00255         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00256         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00257         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00258         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00259         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00260         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00261         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00262         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00263         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00264         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00265         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00266         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00267         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00268         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00269         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00270         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00271         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00272         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00273         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00274         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00275         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00276         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00277         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00278         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00279         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00280         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00281         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00282         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00283         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00284         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00285                        RMB       1                   Reserved
     0020             (            os9.d):00286         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00287         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00288                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00289         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00290         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00291         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00292         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00293         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00294         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00295         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00296         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00297         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00298         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00299         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00300         
                      (            os9.d):00301         * System Specific and User defined codes above $80
                      (            os9.d):00302                        ORG       $80
0080                  (            os9.d):00303         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00304         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00305         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00306         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00307         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00308         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00309         
                      (            os9.d):00310         *               IFGT      Level-1
                      (            os9.d):00311         * Level 2 Windowing
0086                  (            os9.d):00312         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00313         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00314         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00315         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00316         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00317         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00318         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00319         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00320         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00321         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00322                        RMB       1                   Reserved
0091                  (            os9.d):00323         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00324         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00325         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00326         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00327         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00328         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00329         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00330         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00331         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00332         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00333         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00334         
                      (            os9.d):00335         * sc6551 defined
     0099             (            os9.d):00336         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00337         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00338         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00339         * These are wide open in Level 1
                      (            os9.d):00340         
                      (            os9.d):00341         * sc6551 defined
                      (            os9.d):00342         
                      (            os9.d):00343                        ORG       $A0
                      (            os9.d):00344         *
                      (            os9.d):00345         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00346         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00347         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00348         
                      (            os9.d):00349         
                      (            os9.d):00350                        ORG       $B0
                      (            os9.d):00351         *
                      (            os9.d):00352         * New WDDisk get/set status calls
00B0                  (            os9.d):00353         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00354         
                      (            os9.d):00355         *
                      (            os9.d):00356         
                      (            os9.d):00357         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00358         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00359         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00360         
     0081             (            os9.d):00361         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00362         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00363         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00364         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00365         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00366         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00367         
                      (            os9.d):00368         * SDisk 3 Definition Equates
     0080             (            os9.d):00369         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00370         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00371         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00372         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00373         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00374         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00375         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00376         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00377         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return ($86)
                      (            os9.d):00378         
                      (            os9.d):00379         
                      (            os9.d):00380                        TTL       Direct Page Definitions
                      (            os9.d):00381                        PAG       
                      (            os9.d):00382         
                      (            os9.d):00383         **********************************
                      (            os9.d):00384         * Direct Page Variable Definitions
                      (            os9.d):00385         *
                      (            os9.d):00386                        ORG       $00
0000                  (            os9.d):00387         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00388         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00389         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00390                        RMB       5
0009                  (            os9.d):00391         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00392         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00393         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00394         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00395         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00396         
                      (            os9.d):00397                        ORG       $20
                      (            os9.d):00398         
                      (            os9.d):00399         
                      (            os9.d):00400         * Level 1 DP vars
                      (            os9.d):00401         
                      (            os9.d):00402         *D.XSWI3        RMB       3
                      (            os9.d):00403         *D.XSWI2        RMB       3
                      (            os9.d):00404         *D.XFIRQ        RMB       3
                      (            os9.d):00405         *D.XIRQ         RMB       3
                      (            os9.d):00406         *D.XSWI         RMB       3
                      (            os9.d):00407         *D.XNMI         RMB       3
                      (            os9.d):00408         
                      (            os9.d):00409         
                      (            os9.d):00410         * Table Sizes
                      (            os9.d):00411         
                      (            os9.d):00412         
                      (            os9.d):00413         * Level 2 DP vars
0020                  (            os9.d):00414         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00415         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00416         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00417         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00418         D.Time         EQU       .                   System Time
0028                  (            os9.d):00419         D.Year         RMB       1
0029                  (            os9.d):00420         D.Month        RMB       1
002A                  (            os9.d):00421         D.Day          RMB       1
002B                  (            os9.d):00422         D.Hour         RMB       1
002C                  (            os9.d):00423         D.Min          RMB       1
002D                  (            os9.d):00424         D.Sec          RMB       1
002E                  (            os9.d):00425         D.Tick         RMB       1
002F                  (            os9.d):00426         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00427         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00428         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00429         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00430         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00431         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00432         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00433         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00434         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00435         
003A                  (            os9.d):00436                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00437         
003B                  (            os9.d):00438         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00439         
003C                  (            os9.d):00440         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00441         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00442         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00443         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00444         
                      (            os9.d):00445                        ORG       $40
0040                  (            os9.d):00446         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00447         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00448         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00449         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00450         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00451         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00452         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00453         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00456         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00457         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00458         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00459         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00460         D.Pipe         RMB       2
                      (            os9.d):00461         
                      (            os9.d):00462                        ORG       $6B
006B                  (            os9.d):00463         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00464         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00465         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00466         
                      (            os9.d):00467                        ORG       $80
0080                  (            os9.d):00468         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00469         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00470                        RMB       4                   reserved
0088                  (            os9.d):00471         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00472         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00473         
                      (            os9.d):00474         ********
                      (            os9.d):00475         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00476         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00477         *
                      (            os9.d):00478                        ORG       $90
0090                  (            os9.d):00479         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00480         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00481         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00482         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00483         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00484         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00485         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00486         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00487         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00488         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00489         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00490         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00491         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00492         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00493         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00494         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00495         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00496         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00497         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00498         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00499         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00500         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00501         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00502         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00503         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00504         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00505         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00506         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00507         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00508         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00509                        ORG       $C0
00C0                  (            os9.d):00510         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00511         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00512         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00513         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00514         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00515         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00516         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00517         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00518         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00519                        ORG       $E0
00E0                  (            os9.d):00520         D.Clock        RMB       2
00E2                  (            os9.d):00521         D.XSWI3        RMB       2
00E4                  (            os9.d):00522         D.XSWI2        RMB       2
00E6                  (            os9.d):00523         D.XFIRQ        RMB       2
00E8                  (            os9.d):00524         D.XIRQ         RMB       2
00EA                  (            os9.d):00525         D.XSWI         RMB       2
00EC                  (            os9.d):00526         D.XNMI         RMB       2
00EE                  (            os9.d):00527         D.ErrRst       RMB       2
00F0                  (            os9.d):00528         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00529         D.SWI3         RMB       2
00F4                  (            os9.d):00530         D.SWI2         RMB       2
00F6                  (            os9.d):00531         D.FIRQ         RMB       2
00F8                  (            os9.d):00532         D.IRQ          RMB       2
00FA                  (            os9.d):00533         D.SWI          RMB       2
00FC                  (            os9.d):00534         D.NMI          RMB       2
                      (            os9.d):00535         
                      (            os9.d):00536         *************************
                      (            os9.d):00537         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (            os9.d):00538         * and for bytes in the system memory map at D.SysMem.
                      (            os9.d):00539         * A value of 0 indicates an unused/unassigned block.
                      (            os9.d):00540         * In the code, block assignment often involves incrementing a value
                      (            os9.d):00541         * from 0 to 1 rather than explict use of RAMinUse.
                      (            os9.d):00542         *
     0080             (            os9.d):00543         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00544         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00545         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00546         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00547         *
                      (            os9.d):00548         * Service Dispatch Table special entries
                      (            os9.d):00549         *
     00FE             (            os9.d):00550         IOEntry        EQU       254
                      (            os9.d):00551         
                      (            os9.d):00552         
                      (            os9.d):00553                        TTL       Structure Formats
                      (            os9.d):00554                        PAG       
                      (            os9.d):00555         ************************************
                      (            os9.d):00556         * Module Directory Entry Definitions
                      (            os9.d):00557         *
                      (            os9.d):00558                        ORG       0
0000                  (            os9.d):00559         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00560         MD$MBSiz       RMB       2                   Memory Block size
0004                  (            os9.d):00561         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00562         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00563         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00564         
                      (            os9.d):00565         ************************************
                      (            os9.d):00566         * Module Definitions
                      (            os9.d):00567         *
                      (            os9.d):00568         * Universal Module Offsets
                      (            os9.d):00569         *
                      (            os9.d):00570                        ORG       0
0000                  (            os9.d):00571         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00572         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00573         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00574         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00575         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00576         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00577         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00578         *
                      (            os9.d):00579         * Type-Dependent Module Offsets
                      (            os9.d):00580         *
                      (            os9.d):00581         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00582         *
0009                  (            os9.d):00583         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00584         *
                      (            os9.d):00585         * Device Driver, Program Module
                      (            os9.d):00586         *
000B                  (            os9.d):00587         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00588         *
                      (            os9.d):00589         * Device Driver, Device Descriptor Module
                      (            os9.d):00590         *
000D                  (            os9.d):00591         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00592         *
                      (            os9.d):00593         * Device Descriptor Module
                      (            os9.d):00594         *
                      (            os9.d):00595                        ORG       M$IDSize
0009                  (            os9.d):00596         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00597         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00598                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00599         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00600         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00601         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00602         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00603         *
                      (            os9.d):00604         * Configuration Module Entry Offsets
                      (            os9.d):00605         *
                      (            os9.d):00606                        ORG       M$IDSize
0009                  (            os9.d):00607         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00608         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00609         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00610         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00611         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00612         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00613         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00614         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00615         
0017                  (            os9.d):00616         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00617         OSVer          RMB       1                   OS version
0019                  (            os9.d):00618         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00619         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00620         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00621         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00622         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00623         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00624                        RMB       4                   reserved for future use
                      (            os9.d):00625         
                      (            os9.d):00626         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00627         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00628         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00629         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00630         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00631         
                      (            os9.d):00632         * Feature1 byte definitions
     0001             (            os9.d):00633         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00634         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00635         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00636         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00637         
                      (            os9.d):00638                        PAG       
                      (            os9.d):00639         **************************
                      (            os9.d):00640         * Module Field Definitions
                      (            os9.d):00641         *
                      (            os9.d):00642         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00643         *
     0087             (            os9.d):00644         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00645         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00646         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00647         
                      (            os9.d):00648         *
                      (            os9.d):00649         * Module Type/Language Field Masks
                      (            os9.d):00650         *
     00F0             (            os9.d):00651         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00652         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00653         
                      (            os9.d):00654         *
                      (            os9.d):00655         * Module Type Values
                      (            os9.d):00656         *
     00F0             (            os9.d):00657         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00658         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00659         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00660         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00661         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00662         Data           EQU       $40                 Data Module
     0030             (            os9.d):00663         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00664         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00665         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00666         
                      (            os9.d):00667         *
                      (            os9.d):00668         * Module Language Values
                      (            os9.d):00669         *
     0001             (            os9.d):00670         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00671         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00672         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00673         CCode          EQU       4                   C I-code
     0005             (            os9.d):00674         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00675         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00676         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00677         *
                      (            os9.d):00678         * Module Attributes / Revision byte
                      (            os9.d):00679         *
                      (            os9.d):00680         * Field Masks
                      (            os9.d):00681         *
     00F0             (            os9.d):00682         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00683         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00684         *
                      (            os9.d):00685         * Attribute Flags
                      (            os9.d):00686         *
     0080             (            os9.d):00687         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00688         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00689         ModNat         EQU       %00100000           6309 native mode attribute
     0040             (            os9.d):00690         BufWrits       EQU       ModProt             SCF buffered read supported (Coco only at this point)
     0010             (            os9.d):00691         BufReads       EQU       %00010000           SCF buffered write supported (Coco only at this point)
                      (            os9.d):00692         * LCB - propose we add Buffered Read/Buffered Write attribute bits for Coco (in descriptors and
                      (            os9.d):00693         *   drivers for SCF), with one of them replacing ModProt. SCF would check Read/ReadLn and Write/WritLn
                      (            os9.d):00694         *   calls, and if both the driver and descriptor have the appropriate bit set, it would do buffered 32
                      (            os9.d):00695         *   byte (for now) reads/writes like the Grfdrv write call does now, for all bytes that are ASCII >$1F
                      (            os9.d):00696         *   (ie non-control chars, which need special processing)
                      (            os9.d):00697         
                      (            os9.d):00698         
                      (            os9.d):00699         ********************
                      (            os9.d):00700         * Device Type Values
                      (            os9.d):00701         *
                      (            os9.d):00702         * These values define various classes of devices, which are
                      (            os9.d):00703         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00704         * in a device's device descriptor.
                      (            os9.d):00705         *
     0000             (            os9.d):00706         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00707         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00708         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00709         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00710         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00711         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00712         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00713         
                      (            os9.d):00714         *********************
                      (            os9.d):00715         * CRC Result Constant
                      (            os9.d):00716         *
     0080             (            os9.d):00717         CRCCon1        EQU       $80
     0FE3             (            os9.d):00718         CRCCon23       EQU       $0FE3
                      (            os9.d):00719         
                      (            os9.d):00720                        TTL       Process Information
                      (            os9.d):00721                        PAG       
                      (            os9.d):00722         ********************************
                      (            os9.d):00723         * Process Descriptor Definitions
                      (            os9.d):00724         *
                      (            os9.d):00725         
                      (            os9.d):00726         * Level 1 process descriptor defs
                      (            os9.d):00727         
                      (            os9.d):00728         
                      (            os9.d):00729         *
                      (            os9.d):00730         * Process State Flags
                      (            os9.d):00731         *
                      (            os9.d):00732         
                      (            os9.d):00733         
                      (            os9.d):00734         * Level 2 process descriptor defs
     0010             (            os9.d):00735         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00736         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00737         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00738         
                      (            os9.d):00739                        ORG       0
0000                  (            os9.d):00740         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00741         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00742         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00743         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00744         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00745         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00746         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00747         P$User         RMB       2                   User Index
000A                  (            os9.d):00748         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00749         P$Age          RMB       1                   Age
000C                  (            os9.d):00750         P$State        RMB       1                   Status
000D                  (            os9.d):00751         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00752         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00753         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00754         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00755         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00756         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00757         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00758         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00759         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00760         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00761         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00762                        RMB       $20-.               unused
0020                  (            os9.d):00763         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00764         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00765         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00766         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00767         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00768         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00769         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00770         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00771         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00772         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00773         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00774         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00775         P$Alarm        RMB       6
00C9                  (            os9.d):00776                        RMB       $200-.              Local stack
     0200             (            os9.d):00777         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00778         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00779         
                      (            os9.d):00780         *
                      (            os9.d):00781         * Process State Flags
                      (            os9.d):00782         *
     0080             (            os9.d):00783         SysState       EQU       %10000000
     0040             (            os9.d):00784         TimSleep       EQU       %01000000
     0020             (            os9.d):00785         TimOut         EQU       %00100000
     0010             (            os9.d):00786         ImgChg         EQU       %00010000
     0008             (            os9.d):00787         Suspend        EQU       %00001000
     0002             (            os9.d):00788         Condem         EQU       %00000010
     0001             (            os9.d):00789         Dead           EQU       %00000001
                      (            os9.d):00790         
                      (            os9.d):00791         
                      (            os9.d):00792                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00793                        PAG       
                      (            os9.d):00794         *************************
                      (            os9.d):00795         * Path Descriptor Offsets
                      (            os9.d):00796         *
                      (            os9.d):00797                        ORG       0
0000                  (            os9.d):00798         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00799         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00800         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00801         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00802         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00803         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00804         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00805         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00806         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00807         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00808                        RMB       64-.                Path options
     0040             (            os9.d):00809         PDSIZE         EQU       .
                      (            os9.d):00810         
                      (            os9.d):00811         *
                      (            os9.d):00812         * Pathlist Special Symbols
                      (            os9.d):00813         *
     002F             (            os9.d):00814         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00815         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00816         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00817         
                      (            os9.d):00818                        PAG       
                      (            os9.d):00819         ****************************
                      (            os9.d):00820         * File Manager Entry Offsets
                      (            os9.d):00821         *
                      (            os9.d):00822                        ORG       0
0000                  (            os9.d):00823         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00824         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00825         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00826         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00827         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00828         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00829         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00830         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00831         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00832         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00833         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00834         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00835         FMCLOS         RMB       3                   Close File
                      (            os9.d):00836         
                      (            os9.d):00837         *****************************
                      (            os9.d):00838         * Device Driver Entry Offsets
                      (            os9.d):00839         *
                      (            os9.d):00840                        ORG       0
0000                  (            os9.d):00841         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00842         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00843         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00844         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00845         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00846         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00847         
                      (            os9.d):00848         *********************
                      (            os9.d):00849         * Device Table Format
                      (            os9.d):00850         *
                      (            os9.d):00851                        ORG       0
0000                  (            os9.d):00852         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00853         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00854         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00855         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00856         V$USRS         RMB       1                   use count
0009                  (            os9.d):00857         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00858         V$FMGREX       RMB       2                   File Manager execution address
     000D             (            os9.d):00859         DEVSIZ         EQU       .
                      (            os9.d):00860         
                      (            os9.d):00861         *******************************
                      (            os9.d):00862         * Device Static Storage Offsets
                      (            os9.d):00863         *
                      (            os9.d):00864                        ORG       0
0000                  (            os9.d):00865         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00866         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):00867         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):00868         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):00869         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):00870         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):00871         
                      (            os9.d):00872         ********************************
                      (            os9.d):00873         * Interrupt Polling Table Format
                      (            os9.d):00874         *
                      (            os9.d):00875                        ORG       0
0000                  (            os9.d):00876         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):00877         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):00878         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):00879         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):00880         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):00881         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
0009                  (            os9.d):00882         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
     000B             (            os9.d):00883         POLSIZ         EQU       .
                      (            os9.d):00884         
                      (            os9.d):00885         ********************
                      (            os9.d):00886         * VIRQ packet format
                      (            os9.d):00887         *
                      (            os9.d):00888                        ORG       0
0000                  (            os9.d):00889         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):00890         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):00891         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):00892         Vi.PkSz        EQU       .
                      (            os9.d):00893         
     0001             (            os9.d):00894         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):00895         
                      (            os9.d):00896                        PAG       
                      (            os9.d):00897         *************************************
                      (            os9.d):00898         * Machine Characteristics Definitions
                      (            os9.d):00899         *
     0000             (            os9.d):00900         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):00901         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):00902         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):00903         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):00904                        IFNE      H6309
0005                  (            os9.d):00905         R$E            EQU       3
0005                  (            os9.d):00906         R$F            EQU       4
0005                  (            os9.d):00907         R$W            EQU       R$E
0005                  (            os9.d):00908         R$Q            EQU       R$A
0005                  (            os9.d):00909         R$DP           EQU       5
0005                  (            os9.d):00910         R$X            EQU       6
0005                  (            os9.d):00911         R$Y            EQU       8
0005                  (            os9.d):00912         R$U            EQU       10
0005                  (            os9.d):00913         R$PC           EQU       12
0005                  (            os9.d):00914         R$Size         EQU       14
                      (            os9.d):00915                        ELSE
     0003             (            os9.d):00916         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):00917         R$X            EQU       4                   X Index register
     0006             (            os9.d):00918         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):00919         R$U            EQU       8                   User Stack register
     000A             (            os9.d):00920         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):00921         R$Size         EQU       12                  Total register package size
                      (            os9.d):00922                        ENDC
                      (            os9.d):00923         
                      (            os9.d):00924         * MD register masks
                      (            os9.d):00925         * 6309 definitions
     0080             (            os9.d):00926         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):00927         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):00928         
     0080             (            os9.d):00929         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):00930         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):00931         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):00932         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):00933         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):00934         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):00935         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):00936         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):00937         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):00938         Sign           EQU       %10000000           sign bit
                      (            os9.d):00939         
                      (            os9.d):00940                        TTL       Error Code Definitions
                      (            os9.d):00941                        PAG       
                      (            os9.d):00942         ************************
                      (            os9.d):00943         * Error Code Definitions
                      (            os9.d):00944         *
                      (            os9.d):00945         * Basic09 Error Codes
                      (            os9.d):00946         *
                      (            os9.d):00947                        ORG       10
000A                  (            os9.d):00948         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):00949         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):00950         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):00951         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):00952         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):00953         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):00954         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):00955         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):00956         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):00957         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):00958         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):00959         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):00960         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):00961         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):00962         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):00963         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):00964         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):00965         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):00966         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):00967         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):00968         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):00969         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):00970         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):00971         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):00972         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):00973         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):00974         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):00975         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):00976         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):00977         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):00978         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):00979         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):00980         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):00981         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):00982         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):00983         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):00984         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):00985         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):00986         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):00987         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):00988         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):00989         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):00990         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):00991         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):00992         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):00993         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):00994         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):00995         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):00996         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):00997         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):00998         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):00999         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01000         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01001         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01002         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01003         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01004         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01005         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01006         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01007         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01008         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01009         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01010         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01011         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01012         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01013         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01014         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01015         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01016         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01017         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01018         
                      (            os9.d):01019         *
                      (            os9.d):01020         * System Dependent Error Codes
                      (            os9.d):01021         *
                      (            os9.d):01022         
                      (            os9.d):01023         * Level 2 windowing error codes
                      (            os9.d):01024                        ORG       183
00B7                  (            os9.d):01025         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01026         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01027         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01028         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01029         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01030                        RMB       1                   reserved
00BD                  (            os9.d):01031         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01032         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01033         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01034         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01035         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01036         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01037         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01038         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01039         
00C5                  (            os9.d):01040         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01041         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01042         E$Alias        RMB       1
                      (            os9.d):01043         
                      (            os9.d):01044         
                      (            os9.d):01045         *
                      (            os9.d):01046         * Standard NitrOS-9 Error Codes
                      (            os9.d):01047         *
                      (            os9.d):01048                        ORG       200
00C8                  (            os9.d):01049         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01050         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01051         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01052         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01053         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01054         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01055         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01056         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01057         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01058         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01059         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01060         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01061                        RMB       1
00D5                  (            os9.d):01062         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01063         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01064         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01065         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01066         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01067         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01068         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01069         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01070         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01071                        RMB       1
00DF                  (            os9.d):01072         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01073         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01074         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01075                        RMB       1
00E2                  (            os9.d):01076         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01077         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01078         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01079         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01080         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01081         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01082         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01083         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01084         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01085         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01086         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01087         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01088         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01089         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01090                        RMB       $F0-.               reserved
00F0                  (            os9.d):01091         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01092         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01093         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01094         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01095         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01096         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01097         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01098         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01099         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01100         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01101         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01102         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01103         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01104         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01105         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01106         
                      (            os9.d):01107         
                      (            os9.d):01108         ***************************
                      (            os9.d):01109         * Level 3 Defs
                      (            os9.d):01110         *
                      (            os9.d):01111         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01112         *
                      (            os9.d):01113         
                      (         defsfile):00004               use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
     00E0             (            scf.d):00222         PARMASK        EQU       %11100000
                      (            scf.d):00223         
                      (            scf.d):00224         * PD.BAU definitions
                      (            scf.d):00225         *
                      (            scf.d):00226         * Baud rate
     0000             (            scf.d):00227         B110           EQU       %00000000
     0001             (            scf.d):00228         B300           EQU       %00000001
     0002             (            scf.d):00229         B600           EQU       %00000010
     0003             (            scf.d):00230         B1200          EQU       %00000011
     0004             (            scf.d):00231         B2400          EQU       %00000100
     0005             (            scf.d):00232         B4800          EQU       %00000101
     0006             (            scf.d):00233         B9600          EQU       %00000110
     0007             (            scf.d):00234         B19200         EQU       %00000111
     0008             (            scf.d):00235         B38400         EQU       %00001000
     0009             (            scf.d):00236         B57600         EQU       %00001001
     000A             (            scf.d):00237         B115200        EQU       %00001010
                      (            scf.d):00238         * Word size
     0000             (            scf.d):00239         WORD8          EQU       %00000000
     0020             (            scf.d):00240         WORD7          EQU       %00100000
                      (            scf.d):00241         * Stop bits
     0000             (            scf.d):00242         STOP1          EQU       %00000000
     0010             (            scf.d):00243         STOP2          EQU       %00010000
                      (            scf.d):00244         
                      (            scf.d):00245                        ENDC      
                      (         defsfile):00005               use coco3vtio.d
     0001             (      coco3vtio.d):00001         COCOVTIO.D     SET       1
                      (      coco3vtio.d):00002         
                      (      coco3vtio.d):00003         
                      (      coco3vtio.d):00004         ********************************************************************
                      (      coco3vtio.d):00005         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (      coco3vtio.d):00006         *
                      (      coco3vtio.d):00007         * $Id$
                      (      coco3vtio.d):00008         *
                      (      coco3vtio.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (      coco3vtio.d):00010         * Comment
                      (      coco3vtio.d):00011         * ------------------------------------------------------------------
                      (      coco3vtio.d):00012         *          2004/11/29  P.Harvey-Smith.
                      (      coco3vtio.d):00013         * Added symbolic defines for bits in V.CoLoad.
                      (      coco3vtio.d):00014         *
                      (      coco3vtio.d):00015         *          2004/12/02  P.Harvey-Smith.
                      (      coco3vtio.d):00016         * Moved over all variables from co51.asm
                      (      coco3vtio.d):00017         *
                      (      coco3vtio.d):00018         *          2005/04/09  P.Harvey-Smith.
                      (      coco3vtio.d):00019         * Decoded rest of the CoHR memory locations.
                      (      coco3vtio.d):00020         *
                      (      coco3vtio.d):00021         *              2005/04/24  P.Harvey-Smith.
                      (      coco3vtio.d):00022         * Added variables for cursor flash, currently only implemented in co51
                      (      coco3vtio.d):00023         *
                      (      coco3vtio.d):00024         
                      (      coco3vtio.d):00025         ********************
                      (      coco3vtio.d):00026         * VTIO Static Memory
                      (      coco3vtio.d):00027         *
                      (      coco3vtio.d):00028         * start of CoWP-specific static memory
                      (      coco3vtio.d):00029         * end of CoWP-specific static memory
                      (      coco3vtio.d):00030         
                      (      coco3vtio.d):00031         
                      (      coco3vtio.d):00032         * CoHR vars
                      (      coco3vtio.d):00033         
                      (      coco3vtio.d):00034         * End of CoHR vars
                      (      coco3vtio.d):00035         **** Note these have to come at the end of the defs, or the keyboard ****
                      (      coco3vtio.d):00036         **** code can clobber variables defined after these !                ****
                      (      coco3vtio.d):00037         
                      (      coco3vtio.d):00038         
                      (      coco3vtio.d):00039         * Unknown for now
                      (      coco3vtio.d):00040         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (      coco3vtio.d):00041         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (      coco3vtio.d):00042         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (      coco3vtio.d):00043         *VD.FF6   rmb   1   flood fill flag
                      (      coco3vtio.d):00044         *VD.MCol2 rmb   1  color
                      (      coco3vtio.d):00045         *VD.FF1   rmb   1  data for flood fill
                      (      coco3vtio.d):00046         *VD.FF2   rmb   1  data for flood fill
                      (      coco3vtio.d):00047         *VD.FFMsk rmb   1  flood fill mask
                      (      coco3vtio.d):00048         *VD.FFFlg rmb   1  flood fill flag
                      (      coco3vtio.d):00049         *VD.Palet rmb   16 (16) current palette values
                      (      coco3vtio.d):00050         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (      coco3vtio.d):00051         
                      (      coco3vtio.d):00052         *
                      (      coco3vtio.d):00053         * Defs for V.COLoad flags.
                      (      coco3vtio.d):00054         * 
                      (      coco3vtio.d):00055         
                      (      coco3vtio.d):00056         
                      (      coco3vtio.d):00057         *
                      (      coco3vtio.d):00058         * Defs for cursor flash counter
                      (      coco3vtio.d):00059         *
                      (      coco3vtio.d):00060         
                      (      coco3vtio.d):00061         
                      (      coco3vtio.d):00062                        
                      (      coco3vtio.d):00063         ********************************************************************
                      (      coco3vtio.d):00064         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (      coco3vtio.d):00065         *
                      (      coco3vtio.d):00066         * $Id$
                      (      coco3vtio.d):00067         *
                      (      coco3vtio.d):00068         * Edt/Rev  YYYY/MM/DD  Modified by
                      (      coco3vtio.d):00069         * Comment
                      (      coco3vtio.d):00070         * ------------------------------------------------------------------
                      (      coco3vtio.d):00071         *          2004/07/18  Boisy G. Pitre
                      (      coco3vtio.d):00072         * Started from systype
                      (      coco3vtio.d):00073         
                      (      coco3vtio.d):00074                        NAM       VTIODefs
                      (      coco3vtio.d):00075                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (      coco3vtio.d):00076         
                      (      coco3vtio.d):00077         ****************
                      (      coco3vtio.d):00078         * Window Devices
                      (      coco3vtio.d):00079         *
                      (      coco3vtio.d):00080                        ORG       $FF9F
FF9F                  (      coco3vtio.d):00081         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (      coco3vtio.d):00082         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (      coco3vtio.d):00083         A.W1           RMB       1                   $FFA1
FFA2                  (      coco3vtio.d):00084         A.W2           RMB       1                   $FFA2
FFA3                  (      coco3vtio.d):00085         A.W3           RMB       1                   $FFA3
FFA4                  (      coco3vtio.d):00086         A.W4           RMB       1                   $FFA4
FFA5                  (      coco3vtio.d):00087         A.W5           RMB       1                   $FFA5
FFA6                  (      coco3vtio.d):00088         A.W6           RMB       1                   $FFA6
FFA7                  (      coco3vtio.d):00089         A.W7           RMB       1                   $FFA7
FFA8                  (      coco3vtio.d):00090         A.W8           RMB       1                   $FFA8
FFA9                  (      coco3vtio.d):00091         A.W9           RMB       1                   $FFA9
FFAA                  (      coco3vtio.d):00092         A.W10          RMB       1                   $FFAA
FFAB                  (      coco3vtio.d):00093         A.W11          RMB       1                   $FFAB
FFAC                  (      coco3vtio.d):00094         A.W12          RMB       1                   $FFAC
FFAD                  (      coco3vtio.d):00095         A.W13          RMB       1                   $FFAD
FFAE                  (      coco3vtio.d):00096         A.W14          RMB       1                   $FFAE
FFAF                  (      coco3vtio.d):00097         A.W15          RMB       1                   $FFAF
                      (      coco3vtio.d):00098         
                      (      coco3vtio.d):00099         **********************************
                      (      coco3vtio.d):00100         * Pointer Device Packet Definition
                      (      coco3vtio.d):00101         *
                      (      coco3vtio.d):00102                        ORG       0
0000                  (      coco3vtio.d):00103         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (      coco3vtio.d):00104         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (      coco3vtio.d):00105         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (      coco3vtio.d):00106                        RMB       2                   reserved
0005                  (      coco3vtio.d):00107         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (      coco3vtio.d):00108         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (      coco3vtio.d):00109         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (      coco3vtio.d):00110         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (      coco3vtio.d):00111         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (      coco3vtio.d):00112         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (      coco3vtio.d):00113         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (      coco3vtio.d):00114         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (      coco3vtio.d):00115         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (      coco3vtio.d):00116         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (      coco3vtio.d):00117                        RMB       2                   Reserved
0012                  (      coco3vtio.d):00118         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (      coco3vtio.d):00119         Pt.BDY         RMB       2                   Button down Y value
0016                  (      coco3vtio.d):00120         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (      coco3vtio.d):00121         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (      coco3vtio.d):00122         Pt.AcX         RMB       2                   Actual X Value
001A                  (      coco3vtio.d):00123         Pt.AcY         RMB       2                   Actual Y Value
001C                  (      coco3vtio.d):00124         Pt.WRX         RMB       2                   Window Relative X
001E                  (      coco3vtio.d):00125         Pt.WRY         RMB       2                   Window Relative Y
     0020             (      coco3vtio.d):00126         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (      coco3vtio.d):00127         
                      (      coco3vtio.d):00128         **************************
                      (      coco3vtio.d):00129         * window regions for mouse
                      (      coco3vtio.d):00130         *
     0000             (      coco3vtio.d):00131         WR.Cntnt       EQU       0                   content region
     0001             (      coco3vtio.d):00132         WR.Cntrl       EQU       1                   control region
     0002             (      coco3vtio.d):00133         WR.OfWin       EQU       2                   off window
                      (      coco3vtio.d):00134         
                      (      coco3vtio.d):00135         *************************************
                      (      coco3vtio.d):00136         * Standard system get/put buffer defs
                      (      coco3vtio.d):00137         *
                      (      coco3vtio.d):00138         *
                      (      coco3vtio.d):00139         * system group numbers
                      (      coco3vtio.d):00140         *
                      (      coco3vtio.d):00141                        ORG       200
00C8                  (      coco3vtio.d):00142         Grp.Fnt        RMB       1                   font group
00C9                  (      coco3vtio.d):00143         Grp.Clip       RMB       1                   clipboard group
00CA                  (      coco3vtio.d):00144         Grp.Ptr        RMB       1                   pointer group
00CB                  (      coco3vtio.d):00145         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (      coco3vtio.d):00146         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (      coco3vtio.d):00147         Grp.Pat6       RMB       1                   pattern group 16 color
                      (      coco3vtio.d):00148         *
                      (      coco3vtio.d):00149         * font buffer numbers
                      (      coco3vtio.d):00150         *
                      (      coco3vtio.d):00151                        ORG       1
0001                  (      coco3vtio.d):00152         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (      coco3vtio.d):00153         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (      coco3vtio.d):00154         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (      coco3vtio.d):00155         *
                      (      coco3vtio.d):00156         * pattern buffer numbers
                      (      coco3vtio.d):00157         *
                      (      coco3vtio.d):00158                        ORG       1
0001                  (      coco3vtio.d):00159         Pat.Dot        RMB       1
0002                  (      coco3vtio.d):00160         Pat.Vrt        RMB       1
0003                  (      coco3vtio.d):00161         Pat.Hrz        RMB       1
0004                  (      coco3vtio.d):00162         Pat.XHtc       RMB       1
0005                  (      coco3vtio.d):00163         Pat.LSnt       RMB       1
0006                  (      coco3vtio.d):00164         Pat.RSnt       RMB       1
0007                  (      coco3vtio.d):00165         Pat.SDot       RMB       1
0008                  (      coco3vtio.d):00166         Pat.BDot       RMB       1
                      (      coco3vtio.d):00167         *
                      (      coco3vtio.d):00168         * pointer buffer numbers
                      (      coco3vtio.d):00169         *
                      (      coco3vtio.d):00170                        ORG       1
0001                  (      coco3vtio.d):00171         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (      coco3vtio.d):00172         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (      coco3vtio.d):00173         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (      coco3vtio.d):00174         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (      coco3vtio.d):00175         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (      coco3vtio.d):00176         Ptr.Txt        RMB       1                   Text pointer
0007                  (      coco3vtio.d):00177         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (      coco3vtio.d):00178         
                      (      coco3vtio.d):00179         **********************
                      (      coco3vtio.d):00180         * KeyDrv Entry Points
                      (      coco3vtio.d):00181                        ORG       0
0000                  (      coco3vtio.d):00182         K$Init         RMB       3                   joystick initialization
0003                  (      coco3vtio.d):00183         K$Term         RMB       3                   joystick termination
0006                  (      coco3vtio.d):00184         K$FnKey        RMB       3                   get function key states
0009                  (      coco3vtio.d):00185         K$RdKey        RMB       3                   get key states
                      (      coco3vtio.d):00186         
                      (      coco3vtio.d):00187         **********************
                      (      coco3vtio.d):00188         * JoyDrv Entry Points
                      (      coco3vtio.d):00189                        ORG       0
0000                  (      coco3vtio.d):00190         J$Init         RMB       3                   joystick initialization
0003                  (      coco3vtio.d):00191         J$Term         RMB       3                   joystick termination
0006                  (      coco3vtio.d):00192         J$MsBtn        RMB       3                   get mouse button states
0009                  (      coco3vtio.d):00193         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (      coco3vtio.d):00194         J$JyBtn        RMB       3                   get joystick button states
000F                  (      coco3vtio.d):00195         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (      coco3vtio.d):00196         
                      (      coco3vtio.d):00197         **********************
                      (      coco3vtio.d):00198         * SndDrv Entry Points
                      (      coco3vtio.d):00199                        ORG       0
0000                  (      coco3vtio.d):00200         S$Init         RMB       3                   joystick initialization
0003                  (      coco3vtio.d):00201         S$GetStt       RMB       3                   joystick termination
0006                  (      coco3vtio.d):00202         S$SetStt       RMB       3                   joystick termination
0009                  (      coco3vtio.d):00203         S$Term         RMB       3                   get joystick X/Y coordinates
                      (      coco3vtio.d):00204         
                      (      coco3vtio.d):00205         ********************************
                      (      coco3vtio.d):00206         * Window/Menu Bar Data Structure
                      (      coco3vtio.d):00207         *
                      (      coco3vtio.d):00208         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (      coco3vtio.d):00209         * for use in the high level windowing package.
                      (      coco3vtio.d):00210         *
     000A             (      coco3vtio.d):00211         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (      coco3vtio.d):00212         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (      coco3vtio.d):00213         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (      coco3vtio.d):00214         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (      coco3vtio.d):00215         *
                      (      coco3vtio.d):00216         * Menu Item Descriptor : (MN.ITEMS)
                      (      coco3vtio.d):00217         * one required for each item within the menu
                      (      coco3vtio.d):00218         *
                      (      coco3vtio.d):00219                        ORG       0
0000                  (      coco3vtio.d):00220         MI.TTL         RMB       MXTTLEN             item name
000F                  (      coco3vtio.d):00221         MI.ENBL        RMB       1                   enable flag
0010                  (      coco3vtio.d):00222         MI.RES         RMB       5                   reserved bytes
     0015             (      coco3vtio.d):00223         MI.SIZ         EQU       .                   size of menu item descriptor
                      (      coco3vtio.d):00224         *
                      (      coco3vtio.d):00225         * Menu Descriptor :
                      (      coco3vtio.d):00226         * one for each menu on the manu bar
                      (      coco3vtio.d):00227         * each is pointed to by MB.MPTR below
                      (      coco3vtio.d):00228         *
                      (      coco3vtio.d):00229                        ORG       0
0000                  (      coco3vtio.d):00230         MN.TTL         RMB       MXTTLEN             menu title
000F                  (      coco3vtio.d):00231         MN.ID          RMB       1                   menu id number (1-255)
0010                  (      coco3vtio.d):00232         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (      coco3vtio.d):00233         MN.NITS        RMB       1                   number of items in menu
0012                  (      coco3vtio.d):00234         MN.ENBL        RMB       1                   enable flag
0013                  (      coco3vtio.d):00235         MN.RES         RMB       2                   reserved bytes
0015                  (      coco3vtio.d):00236         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (      coco3vtio.d):00237         MN.SIZ         EQU       .                   size of menu descriptor
                      (      coco3vtio.d):00238         *
                      (      coco3vtio.d):00239         * Window Descriptor:
                      (      coco3vtio.d):00240         * one required for each application in a framed window
                      (      coco3vtio.d):00241         *
                      (      coco3vtio.d):00242                        ORG       0
0000                  (      coco3vtio.d):00243         WN.TTL         RMB       20                  title of window for title bar
0014                  (      coco3vtio.d):00244         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (      coco3vtio.d):00245         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (      coco3vtio.d):00246         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (      coco3vtio.d):00247         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (      coco3vtio.d):00248         WN.RES         RMB       7                   reserved bytes
0020                  (      coco3vtio.d):00249         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (      coco3vtio.d):00250         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (      coco3vtio.d):00251         
                      (      coco3vtio.d):00252         *************************
                      (      coco3vtio.d):00253         * Window Type Definitions
                      (      coco3vtio.d):00254         *
                      (      coco3vtio.d):00255         * To be used in setting up the border of the window in
                      (      coco3vtio.d):00256         * the SS.WnSel SETSTAT
                      (      coco3vtio.d):00257         *
                      (      coco3vtio.d):00258                        ORG       0
0000                  (      coco3vtio.d):00259         WT.NBox        RMB       1                   No Box
0001                  (      coco3vtio.d):00260         WT.FWin        RMB       1                   Framed Window
0002                  (      coco3vtio.d):00261         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (      coco3vtio.d):00262         WT.SBox        RMB       1                   Shadowed Box
0004                  (      coco3vtio.d):00263         WT.DBox        RMB       1                   Double Box
0005                  (      coco3vtio.d):00264         WT.PBox        RMB       1                   Plain Box
                      (      coco3vtio.d):00265         
                      (      coco3vtio.d):00266         *************************************
                      (      coco3vtio.d):00267         * Pre-Defined Menu IDs for the system
                      (      coco3vtio.d):00268         *
                      (      coco3vtio.d):00269                        ORG       1
0001                  (      coco3vtio.d):00270         MId.Mov        RMB       1                   move box
0002                  (      coco3vtio.d):00271         MId.Cls        RMB       1                   close box
0003                  (      coco3vtio.d):00272         MId.Grw        RMB       1                   grow box
0004                  (      coco3vtio.d):00273         MId.SUp        RMB       1                   scroll up
0005                  (      coco3vtio.d):00274         MId.SDn        RMB       1                   scroll down
0006                  (      coco3vtio.d):00275         MId.SRt        RMB       1                   scroll right
0007                  (      coco3vtio.d):00276         MId.SLt        RMB       1                   scroll left
0008                  (      coco3vtio.d):00277         MId.Chr        RMB       1                   character was depressed
                      (      coco3vtio.d):00278                        ORG       20
0014                  (      coco3vtio.d):00279         MId.Tdy        RMB       1                   Tandy menu
0015                  (      coco3vtio.d):00280         MId.Fil        RMB       1                   Files Menu
0016                  (      coco3vtio.d):00281         MId.Edt        RMB       1                   Edit Menu
0017                  (      coco3vtio.d):00282         MId.Sty        RMB       1                   Styles menu
0018                  (      coco3vtio.d):00283         MId.Fnt        RMB       1                   Font menu
                      (      coco3vtio.d):00284         
                      (      coco3vtio.d):00285         
                      (      coco3vtio.d):00286         ******************************************************************************
                      (      coco3vtio.d):00287         ******************************************************************************
                      (      coco3vtio.d):00288         **                                                                          **
                      (      coco3vtio.d):00289         ** NitrOS-9 Windowing system Global data definitions                        **
                      (      coco3vtio.d):00290         **                                                                          **
                      (      coco3vtio.d):00291         ******************************************************************************
                      (      coco3vtio.d):00292         ******************************************************************************
                      (      coco3vtio.d):00293         **                                                                          **
                      (      coco3vtio.d):00294         ** System memory block 0 layout:                                            **
                      (      coco3vtio.d):00295         **                                                                          **
                      (      coco3vtio.d):00296         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (      coco3vtio.d):00297         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (      coco3vtio.d):00298         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (      coco3vtio.d):00299         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (      coco3vtio.d):00300         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (      coco3vtio.d):00301         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (      coco3vtio.d):00302         ** $0010-$001F : unused (User definable)                                    **
                      (      coco3vtio.d):00303         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (      coco3vtio.d):00304         ** $0100-$011F : Task usage table                                           **
                      (      coco3vtio.d):00305         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (      coco3vtio.d):00306         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (      coco3vtio.d):00307         ** $0300-$03FF : system's system call dispatch table                        **
                      (      coco3vtio.d):00308         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (      coco3vtio.d):00309         ** $0500-$05FF : process descriptor pointer table                           **
                      (      coco3vtio.d):00310         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (      coco3vtio.d):00311         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (      coco3vtio.d):00312         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (      coco3vtio.d):00313         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (      coco3vtio.d):00314         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (      coco3vtio.d):00315         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (      coco3vtio.d):00316         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (      coco3vtio.d):00317         ** $1248-$127F : ????                                                       **
                      (      coco3vtio.d):00318         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (      coco3vtio.d):00319         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (      coco3vtio.d):00320         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (      coco3vtio.d):00321         **                                                                          **
                      (      coco3vtio.d):00322         ******************************************************************************
                      (      coco3vtio.d):00323         ******************************************************************************
                      (      coco3vtio.d):00324         
                      (      coco3vtio.d):00325         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (      coco3vtio.d):00326         MaxLines       EQU       25                  Max. Y coord text value
     0000             (      coco3vtio.d):00327         Meg            SET       false               "true" if 1 or 2 meg machine
                      (      coco3vtio.d):00328         
     0000             (      coco3vtio.d):00329         COMP           EQU       0                   composite monitor
     0001             (      coco3vtio.d):00330         RGB            EQU       1                   RGB Analog monitor 
     0002             (      coco3vtio.d):00331         MONO           EQU       2                   monochrome monitor
                      (      coco3vtio.d):00332         
     0001             (      coco3vtio.d):00333         Monitor        SET       RGB
                      (      coco3vtio.d):00334         
                      (      coco3vtio.d):00335         * Global definitions
     0001             (      coco3vtio.d):00336         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (      coco3vtio.d):00337         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (      coco3vtio.d):00338         CapsLck        EQU       %00000100           Capslock enabled
     0280             (      coco3vtio.d):00339         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
     00C6             (      coco3vtio.d):00340         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (      coco3vtio.d):00341         
                      (      coco3vtio.d):00342         *****************************************************************************
                      (      coco3vtio.d):00343         * Static memory area for each window (VTIO/TC9IO)
                      (      coco3vtio.d):00344         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (      coco3vtio.d):00345         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (      coco3vtio.d):00346         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (      coco3vtio.d):00347         * May have to have smaller limit for text to gfx screens, as it will run much
                      (      coco3vtio.d):00348         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (      coco3vtio.d):00349         *
                      (      coco3vtio.d):00350         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (      coco3vtio.d):00351         * V.SCF is to be resolved properly in pass 1!!
                      (      coco3vtio.d):00352                        ORG       V.SCF
001D                  (      coco3vtio.d):00353         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (      coco3vtio.d):00354         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (      coco3vtio.d):00355         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (      coco3vtio.d):00356         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (      coco3vtio.d):00357         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (      coco3vtio.d):00358         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (      coco3vtio.d):00359         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (      coco3vtio.d):00360         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (      coco3vtio.d):00361         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (      coco3vtio.d):00362         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (      coco3vtio.d):00363         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (      coco3vtio.d):00364         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (      coco3vtio.d):00365                        RMB       1                   unused                                       $2A
002B                  (      coco3vtio.d):00366         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (      coco3vtio.d):00367         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (      coco3vtio.d):00368         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (      coco3vtio.d):00369         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (      coco3vtio.d):00370         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (      coco3vtio.d):00371         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (      coco3vtio.d):00372         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (      coco3vtio.d):00373         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (      coco3vtio.d):00374         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (      coco3vtio.d):00375         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (      coco3vtio.d):00376         CC3Parm        RMB       128-.               global parameter area
0080                  (      coco3vtio.d):00377         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (      coco3vtio.d):00378         CC3DSiz        EQU       .
                      (      coco3vtio.d):00379         
                      (      coco3vtio.d):00380         *****************************************************************************
                      (      coco3vtio.d):00381         * GrfInt/WindInt global memory area
                      (      coco3vtio.d):00382         * This area sits in system block 0 from $1000 to $10ff
     1000             (      coco3vtio.d):00383         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (      coco3vtio.d):00384                        ORG       0
0000                  (      coco3vtio.d):00385         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (      coco3vtio.d):00386         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (      coco3vtio.d):00387         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (      coco3vtio.d):00388         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (      coco3vtio.d):00389         *g0003    rmb   2          NEW: UNUSED
0005                  (      coco3vtio.d):00390         g0005          RMB       2                   Temp save in Windint RG
0007                  (      coco3vtio.d):00391         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (      coco3vtio.d):00392         G.MonTyp       RMB       1                   monitor type
     000A             (      coco3vtio.d):00393         g000A          EQU       .                   Old label for compatibility
000A                  (      coco3vtio.d):00394         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (      coco3vtio.d):00395         *                           Parms have been moved to Dev Mem)
                      (      coco3vtio.d):00396         *                           0=We are not on our device
                      (      coco3vtio.d):00397         *                           1=We are the current device
                      (      coco3vtio.d):00398         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (      coco3vtio.d):00399         *                           whether or not to update GIME regs themselves
                      (      coco3vtio.d):00400         *                           If not current device, they don't.)
000B                  (      coco3vtio.d):00401         G.WinType      RMB       1                   current device's V.TYPE
000C                  (      coco3vtio.d):00402         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (      coco3vtio.d):00403         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (      coco3vtio.d):00404         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (      coco3vtio.d):00405         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (      coco3vtio.d):00406         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (      coco3vtio.d):00407         G.BelVec       RMB       2                   BELL routine vector
0019                  (      coco3vtio.d):00408         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (      coco3vtio.d):00409         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (      coco3vtio.d):00410         G.BelTnF       RMB       1                   BELL tone flag
001D                  (      coco3vtio.d):00411         g001D          RMB       3
0020                  (      coco3vtio.d):00412         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (      coco3vtio.d):00413         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (      coco3vtio.d):00414         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (      coco3vtio.d):00415         *                           00000010 : VDGInt found
                      (      coco3vtio.d):00416         *                           10000000 : GrfDrv found
0025                  (      coco3vtio.d):00417         g0025          RMB       1
0026                  (      coco3vtio.d):00418         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (      coco3vtio.d):00419         *         IFEQ  TC9-true
                      (      coco3vtio.d):00420         *CurLght  rmb   1          current keyboard light settings
                      (      coco3vtio.d):00421         *         ELSE  
0027                  (      coco3vtio.d):00422         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (      coco3vtio.d):00423         *         ENDC  
0028                  (      coco3vtio.d):00424         G.LKeyCd       RMB       1                   last keyboard code
0029                  (      coco3vtio.d):00425         G.KyRept       RMB       1                   key repeat counter
                      (      coco3vtio.d):00426         * A secondary 3 key table (same format as g002D below)
002A                  (      coco3vtio.d):00427         G.2Key1        RMB       1                   $2A
002B                  (      coco3vtio.d):00428         G.2Key2        RMB       1                   $2B
002C                  (      coco3vtio.d):00429         G.2Key3        RMB       1
                      (      coco3vtio.d):00430         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (      coco3vtio.d):00431         * than 3 are hit, the last key is overwritten with the very last key down that
                      (      coco3vtio.d):00432         * was checked. Format for all three is the same as the PIA column/row byte @
                      (      coco3vtio.d):00433         * KeyFlag below.
002D                  (      coco3vtio.d):00434         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (      coco3vtio.d):00435         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (      coco3vtio.d):00436         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (      coco3vtio.d):00437         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (      coco3vtio.d):00438         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (      coco3vtio.d):00439         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (      coco3vtio.d):00440         *                           %00000111-Column # (Output, 0-7)
                      (      coco3vtio.d):00441         *                           %00111000-Row # (Input, 0-6)
0033                  (      coco3vtio.d):00442         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (      coco3vtio.d):00443         G.KySns        RMB       1                   key sense byte
0035                  (      coco3vtio.d):00444         G.KySame       RMB       1                   same key flag
0036                  (      coco3vtio.d):00445         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (      coco3vtio.d):00446                        RMB       1
0038                  (      coco3vtio.d):00447         g0038          RMB       1                   grfdrv initialized flag
0039                  (      coco3vtio.d):00448                        RMB       2
003B                  (      coco3vtio.d):00449         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (      coco3vtio.d):00450         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (      coco3vtio.d):00451         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (      coco3vtio.d):00452         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (      coco3vtio.d):00453         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (      coco3vtio.d):00454         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (      coco3vtio.d):00455         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (      coco3vtio.d):00456         *         IFEQ  TC9-true
                      (      coco3vtio.d):00457         *KeyParm  rmb   1          keyboard command parameter byte
                      (      coco3vtio.d):00458         *         ELSE  
0063                  (      coco3vtio.d):00459         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (      coco3vtio.d):00460         *         ENDC  
0064                  (      coco3vtio.d):00461         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (      coco3vtio.d):00462         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (      coco3vtio.d):00463         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (      coco3vtio.d):00464         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (      coco3vtio.d):00465         G.CoTble       RMB       6                   co-module table ($68)
006E                  (      coco3vtio.d):00466         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (      coco3vtio.d):00467         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (      coco3vtio.d):00468         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (      coco3vtio.d):00469         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (      coco3vtio.d):00470         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (      coco3vtio.d):00471         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (      coco3vtio.d):00472         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (      coco3vtio.d):00473         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (      coco3vtio.d):00474         g00BD          RMB       1                   Current screen type for work window table
00BE                  (      coco3vtio.d):00475         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (      coco3vtio.d):00476         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (      coco3vtio.d):00477         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (      coco3vtio.d):00478         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (      coco3vtio.d):00479         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (      coco3vtio.d):00480         G.MsSig        RMB       1                   mouse signal flag
00C7                  (      coco3vtio.d):00481         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (      coco3vtio.d):00482         g00D7          RMB       9
00E0                  (      coco3vtio.d):00483         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (      coco3vtio.d):00484         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (      coco3vtio.d):00485         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (      coco3vtio.d):00486         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (      coco3vtio.d):00487         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (      coco3vtio.d):00488         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (      coco3vtio.d):00489         
                      (      coco3vtio.d):00490         *****************************************************************************
                      (      coco3vtio.d):00491         * GrfDrv global memory data definitions
                      (      coco3vtio.d):00492         * This area sits in system block 0 from $1100 to $119E
     1100             (      coco3vtio.d):00493         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (      coco3vtio.d):00494                        ORG       0
0000                  (      coco3vtio.d):00495         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (      coco3vtio.d):00496         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (      coco3vtio.d):00497         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (      coco3vtio.d):00498         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (      coco3vtio.d):00499         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (      coco3vtio.d):00500         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (      coco3vtio.d):00501         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (      coco3vtio.d):00502         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (      coco3vtio.d):00503         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (      coco3vtio.d):00504         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (      coco3vtio.d):00505         *                             overlay width has been copied
000B                  (      coco3vtio.d):00506         gr000B         RMB       1
000C                  (      coco3vtio.d):00507         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (      coco3vtio.d):00508         gr000E         RMB       1
000F                  (      coco3vtio.d):00509         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (      coco3vtio.d):00510         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (      coco3vtio.d):00511         gr0012         RMB       6
0018                  (      coco3vtio.d):00512         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (      coco3vtio.d):00513         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (      coco3vtio.d):00514         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (      coco3vtio.d):00515         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (      coco3vtio.d):00516         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (      coco3vtio.d):00517         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (      coco3vtio.d):00518         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (      coco3vtio.d):00519         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (      coco3vtio.d):00520         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (      coco3vtio.d):00521         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (      coco3vtio.d):00522         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (      coco3vtio.d):00523         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (      coco3vtio.d):00524         gr002C         RMB       2
002E                  (      coco3vtio.d):00525         gr002E         RMB       2                   current window table entry
0030                  (      coco3vtio.d):00526         gr0030         RMB       2                   current screen table ptr
0032                  (      coco3vtio.d):00527         gr0032         RMB       1                   Last block # we used for buffers
0033                  (      coco3vtio.d):00528         gr0033         RMB       2                   Last offset we used for buffers
0035                  (      coco3vtio.d):00529         gr0035         RMB       1                   group
0036                  (      coco3vtio.d):00530         gr0036         RMB       2                   offset
0038                  (      coco3vtio.d):00531         gr0038         RMB       1                   group returned (new)
0039                  (      coco3vtio.d):00532         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (      coco3vtio.d):00533         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (      coco3vtio.d):00534         gr003B         RMB       2                   end of vars ptr?
003D                  (      coco3vtio.d):00535         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (      coco3vtio.d):00536         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (      coco3vtio.d):00537         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (      coco3vtio.d):00538         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (      coco3vtio.d):00539         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (      coco3vtio.d):00540         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (      coco3vtio.d):00541         gr0047         RMB       2                   'Working' X coordinate
0049                  (      coco3vtio.d):00542         gr0049         RMB       2                   'Working' Y coordinate
004B                  (      coco3vtio.d):00543         gr004B         RMB       2                   current X
004D                  (      coco3vtio.d):00544         gr004D         RMB       2                   current Y
004F                  (      coco3vtio.d):00545         gr004F         RMB       2                   X Size (in bytes)
0051                  (      coco3vtio.d):00546         gr0051         RMB       2                   Y Size (in bytes)
0053                  (      coco3vtio.d):00547         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (      coco3vtio.d):00548         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (      coco3vtio.d):00549         gr0057         RMB       1                   group
0058                  (      coco3vtio.d):00550         gr0058         RMB       1                   buffer #
0059                  (      coco3vtio.d):00551         gr0059         RMB       1                   save switch for overlay
005A                  (      coco3vtio.d):00552         gr005A         RMB       1                   PRN
005B                  (      coco3vtio.d):00553         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (      coco3vtio.d):00554         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (      coco3vtio.d):00555         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (      coco3vtio.d):00556         Gr.STYMk       RMB       1                   STY marker
0061                  (      coco3vtio.d):00557         gr0061         RMB       1                   foreground RGB data
0062                  (      coco3vtio.d):00558         gr0062         RMB       1                   background RGB data
0063                  (      coco3vtio.d):00559         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (      coco3vtio.d):00560         gr0064         RMB       2                   PSet vector
0066                  (      coco3vtio.d):00561         gr0066         RMB       2                   pset offset
0068                  (      coco3vtio.d):00562         gr0068         RMB       2                   LSet vector
006A                  (      coco3vtio.d):00563         gr006A         RMB       2                   max X co-ordinate
006C                  (      coco3vtio.d):00564         gr006C         RMB       2                   max Y co-ordinate
006E                  (      coco3vtio.d):00565         gr006E         RMB       2                   X pixel count
0070                  (      coco3vtio.d):00566         gr0070         RMB       2                   Y pixel count
0072                  (      coco3vtio.d):00567         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (      coco3vtio.d):00568         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (      coco3vtio.d):00569         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (      coco3vtio.d):00570         gr0077         RMB       2                   Vector for right direction FFill
0079                  (      coco3vtio.d):00571         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (      coco3vtio.d):00572         gr007A         RMB       2                   Vector for left direction FFill
007C                  (      coco3vtio.d):00573         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (      coco3vtio.d):00574         gr007D         RMB       1                   buffer block #
007E                  (      coco3vtio.d):00575         gr007E         RMB       2                   buffer offset #
0080                  (      coco3vtio.d):00576         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (      coco3vtio.d):00577         gr0082         RMB       3                   3 byte extended screen address
0085                  (      coco3vtio.d):00578         gr0085         RMB       2                   temp
0087                  (      coco3vtio.d):00579         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (      coco3vtio.d):00580         gr0097         RMB       1                   temp
0098                  (      coco3vtio.d):00581         gr0098         RMB       1                   temp
                      (      coco3vtio.d):00582         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (      coco3vtio.d):00583         gr0099         RMB       2                   temp
                      (      coco3vtio.d):00584         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (      coco3vtio.d):00585         gr009B         RMB       1                   counter temp
009C                  (      coco3vtio.d):00586         gr009C         RMB       1
009D                  (      coco3vtio.d):00587         gr009D         RMB       2                   offset to buffer in block
009F                  (      coco3vtio.d):00588         gr009F         RMB       1
00A0                  (      coco3vtio.d):00589         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (      coco3vtio.d):00590         gr00A1         RMB       2                   vector routine for (changes lots)
                      (      coco3vtio.d):00591         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (      coco3vtio.d):00592         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (      coco3vtio.d):00593         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (      coco3vtio.d):00594         gr00A7         RMB       2
00A9                  (      coco3vtio.d):00595         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (      coco3vtio.d):00596         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (      coco3vtio.d):00597         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (      coco3vtio.d):00598         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (      coco3vtio.d):00599         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (      coco3vtio.d):00600         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (      coco3vtio.d):00601         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (      coco3vtio.d):00602         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (      coco3vtio.d):00603         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (      coco3vtio.d):00604         gr00B5         RMB       1                   regW for grfdrv
00B6                  (      coco3vtio.d):00605         gr00B6         RMB       1
00B7                  (      coco3vtio.d):00606         gr00B7         RMB       2
00B9                  (      coco3vtio.d):00607         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (      coco3vtio.d):00608         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (      coco3vtio.d):00609         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (      coco3vtio.d):00610         gr00BF         RMB       256-.
                      (      coco3vtio.d):00611         * GPLoad buffer - $1200 in system block 0
0100                  (      coco3vtio.d):00612         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (      coco3vtio.d):00613         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (      coco3vtio.d):00614         
                      (      coco3vtio.d):00615         *****************************************************************************
                      (      coco3vtio.d):00616         * Window table entry structure
                      (      coco3vtio.d):00617         * These tables sit in system block 0 and there is 1 for every window init'd
                      (      coco3vtio.d):00618         * including any overlay windows.
     0020             (      coco3vtio.d):00619         MaxWind        EQU       32                  maximum allowable window tables
     1290             (      coco3vtio.d):00620         WinBase        EQU       $1290               base address to start of window tables
                      (      coco3vtio.d):00621                        ORG       -$10
FFF0                  (      coco3vtio.d):00622         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (      coco3vtio.d):00623         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (      coco3vtio.d):00624         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (      coco3vtio.d):00625         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (      coco3vtio.d):00626         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (      coco3vtio.d):00627         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (      coco3vtio.d):00628         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (      coco3vtio.d):00629         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (      coco3vtio.d):00630         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (      coco3vtio.d):00631         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (      coco3vtio.d):00632         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (      coco3vtio.d):00633         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (      coco3vtio.d):00634         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (      coco3vtio.d):00635         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (      coco3vtio.d):00636         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (      coco3vtio.d):00637         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (      coco3vtio.d):00638         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (      coco3vtio.d):00639         Wt.Back        RMB       1                   background palette #                         $07
0008                  (      coco3vtio.d):00640         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (      coco3vtio.d):00641         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (      coco3vtio.d):00642         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (      coco3vtio.d):00643         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (      coco3vtio.d):00644         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (      coco3vtio.d):00645         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (      coco3vtio.d):00646         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (      coco3vtio.d):00647         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (      coco3vtio.d):00648         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (      coco3vtio.d):00649         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (      coco3vtio.d):00650         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (      coco3vtio.d):00651         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (      coco3vtio.d):00652         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (      coco3vtio.d):00653         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (      coco3vtio.d):00654         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (      coco3vtio.d):00655         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (      coco3vtio.d):00656         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (      coco3vtio.d):00657         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (      coco3vtio.d):00658         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (      coco3vtio.d):00659         * NOTE: The following default settings are what the window was initialized
                      (      coco3vtio.d):00660         *       with, and thus are the MAXIMUM start/size the window can handle
                      (      coco3vtio.d):00661         *       until it is restarted (DWEnd & DWSet)
                      (      coco3vtio.d):00662         *       They also appear to be used in WindInt to determine the coords &
                      (      coco3vtio.d):00663         *       sizes for control+content regions
0026                  (      coco3vtio.d):00664         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (      coco3vtio.d):00665         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (      coco3vtio.d):00666         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (      coco3vtio.d):00667         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (      coco3vtio.d):00668         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (      coco3vtio.d):00669         Wt.Siz         EQU       .+$10
                      (      coco3vtio.d):00670         
                      (      coco3vtio.d):00671         *****************************************************************************
                      (      coco3vtio.d):00672         * Screen table entrys
                      (      coco3vtio.d):00673         * These tables sit in system block 0 base=$1A80
                      (      coco3vtio.d):00674         
     0010             (      coco3vtio.d):00675         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (      coco3vtio.d):00676         STblBse        EQU       $1A80               base address of screen tables
                      (      coco3vtio.d):00677                        ORG       0
0000                  (      coco3vtio.d):00678         St.Sty         RMB       1                   Screen type                         $00
0001                  (      coco3vtio.d):00679         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (      coco3vtio.d):00680         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (      coco3vtio.d):00681         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (      coco3vtio.d):00682         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (      coco3vtio.d):00683         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (      coco3vtio.d):00684         St.Back        RMB       1                   Background palette register #       $07
0008                  (      coco3vtio.d):00685         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (      coco3vtio.d):00686         St.Res         RMB       7                   UNUSED???                           $09
                      (      coco3vtio.d):00687         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (      coco3vtio.d):00688         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (      coco3vtio.d):00689         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (      coco3vtio.d):00690         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (      coco3vtio.d):00691         St.Pals        RMB       16                  Palette register contents           $10
     0020             (      coco3vtio.d):00692         St.Siz         EQU       .
                      (      coco3vtio.d):00693         
                      (      coco3vtio.d):00694         *****************************************************************************
                      (      coco3vtio.d):00695         * Graphics buffer tables
                      (      coco3vtio.d):00696         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (      coco3vtio.d):00697         * data.
                      (      coco3vtio.d):00698                        ORG       0
0000                  (      coco3vtio.d):00699         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (      coco3vtio.d):00700         Grf.Off        RMB       2                   back block header offset            $01
0003                  (      coco3vtio.d):00701         Grf.Grp        RMB       1                   group #                             $03
0004                  (      coco3vtio.d):00702         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (      coco3vtio.d):00703         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (      coco3vtio.d):00704         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (      coco3vtio.d):00705         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (      coco3vtio.d):00706         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (      coco3vtio.d):00707         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (      coco3vtio.d):00708         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (      coco3vtio.d):00709         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (      coco3vtio.d):00710         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (      coco3vtio.d):00711         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (      coco3vtio.d):00712         Grf.Siz        EQU       .                   $20
                      (      coco3vtio.d):00713         
                      (      coco3vtio.d):00714         *****************************************************************************
                      (      coco3vtio.d):00715         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (      coco3vtio.d):00716         * $1075-$0176
                      (      coco3vtio.d):00717         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (      coco3vtio.d):00718                        ORG       0
0000                  (      coco3vtio.d):00719         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (      coco3vtio.d):00720         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (      coco3vtio.d):00721         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (      coco3vtio.d):00722         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (      coco3vtio.d):00723         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (      coco3vtio.d):00724         Gt.BClr        RMB       1                   Background color                               $08
0009                  (      coco3vtio.d):00725         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (      coco3vtio.d):00726         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (      coco3vtio.d):00727         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (      coco3vtio.d):00728         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (      coco3vtio.d):00729         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (      coco3vtio.d):00730         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (      coco3vtio.d):00731         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (      coco3vtio.d):00732         GTabSz         EQU       .
                      (      coco3vtio.d):00733         
                      (      coco3vtio.d):00734         *****************************************************************************
                      (      coco3vtio.d):00735         * This table is located in the graphics table memory and is offset from
                      (      coco3vtio.d):00736         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (      coco3vtio.d):00737         * WindInt.
                      (      coco3vtio.d):00738         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (      coco3vtio.d):00739         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (      coco3vtio.d):00740         *  COMBINATION EVERY TIME
                      (      coco3vtio.d):00741                        ORG       $0240
0240                  (      coco3vtio.d):00742                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (      coco3vtio.d):00743                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (      coco3vtio.d):00744                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (      coco3vtio.d):00745                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (      coco3vtio.d):00746         
                      (      coco3vtio.d):00747         *****************************************************************************
                      (      coco3vtio.d):00748         * WindInt menu handling table entry definition
                      (      coco3vtio.d):00749                        ORG       0
0000                  (      coco3vtio.d):00750         MnuXNum        RMB       1                   menu #
0001                  (      coco3vtio.d):00751         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (      coco3vtio.d):00752         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (      coco3vtio.d):00753                        RMB       1                   unused?
     0004             (      coco3vtio.d):00754         MnuHSiz        EQU       .
                      (      coco3vtio.d):00755         
                      (      coco3vtio.d):00756         *****************************************************************************
                      (      coco3vtio.d):00757         * Character binary switches
     0080             (      coco3vtio.d):00758         TChr           EQU       %10000000           transparent characters
     0040             (      coco3vtio.d):00759         Under          EQU       %01000000           underline characters
     0020             (      coco3vtio.d):00760         Bold           EQU       %00100000           bold characters
     0010             (      coco3vtio.d):00761         Prop           EQU       %00010000           proportional spacing of characters
     0008             (      coco3vtio.d):00762         Scale          EQU       %00001000           automatic window scaling
     0004             (      coco3vtio.d):00763         Invers         EQU       %00000100           inverse characters
     0002             (      coco3vtio.d):00764         NoCurs         EQU       %00000010           no cursor display
     0001             (      coco3vtio.d):00765         Protect        EQU       %00000001           device window protection
                      (      coco3vtio.d):00766         
                      (      coco3vtio.d):00767         *****************************************************************************
                      (      coco3vtio.d):00768         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (      coco3vtio.d):00769         Current        EQU       $ff                 Current screen
                      (      coco3vtio.d):00770         *         equ   1          640x200x2
                      (      coco3vtio.d):00771         *         equ   2          320x200x4
                      (      coco3vtio.d):00772         *         equ   3          640x200x4
                      (      coco3vtio.d):00773         *         equ   4          320x200x16
                      (      coco3vtio.d):00774         *         equ   $85        80 column text
                      (      coco3vtio.d):00775         *         equ   $86        40 column text
                      (      coco3vtio.d):00776         
                      (      coco3vtio.d):00777         *************************************
                      (      coco3vtio.d):00778         * Window default palette color codes
                      (      coco3vtio.d):00779         *
                      (      coco3vtio.d):00780                        ORG       0
0000                  (      coco3vtio.d):00781         White.         RMB       1
0001                  (      coco3vtio.d):00782         Blue.          RMB       1
0002                  (      coco3vtio.d):00783         Black.         RMB       1
0003                  (      coco3vtio.d):00784         Green.         RMB       1
0004                  (      coco3vtio.d):00785         Red.           RMB       1
0005                  (      coco3vtio.d):00786         Yellow.        RMB       1
0006                  (      coco3vtio.d):00787         Magenta.       RMB       1
0007                  (      coco3vtio.d):00788         Cyan.          RMB       1
                      (      coco3vtio.d):00789         
                      (         defsfile):00006                use   rbf.d
                      (            rbf.d):00001         
     0001             (            rbf.d):00002         RBF.D          SET       1
                      (            rbf.d):00003         
                      (            rbf.d):00004         ********************************************************************
                      (            rbf.d):00005         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00006         *
                      (            rbf.d):00007         * $Id$
                      (            rbf.d):00008         *
                      (            rbf.d):00009         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00010         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00011         * in that structure.
                      (            rbf.d):00012         *
                      (            rbf.d):00013         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00014         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00015         *
                      (            rbf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00017         * Comment
                      (            rbf.d):00018         * ------------------------------------------------------------------
                      (            rbf.d):00019         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00020         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00021         *
                      (            rbf.d):00022         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00023         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00024         *
                      (            rbf.d):00025         *          1982/09/10  WGP
                      (            rbf.d):00026         * Level One/Level Two condionals added.
                      (            rbf.d):00027         *
                      (            rbf.d):00028         *          1982/09/17  WGP
                      (            rbf.d):00029         *
                      (            rbf.d):00030         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00031         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00032         *
                      (            rbf.d):00033         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00034         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00035         *
                      (            rbf.d):00036         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00037         * Reserved areas added in static storage.
                      (            rbf.d):00038         
                      (            rbf.d):00039         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00040         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00041         *
                      (            rbf.d):00042         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00043         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00044         *
                      (            rbf.d):00045         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00046         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00047         *
                      (            rbf.d):00048         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00049         * Added V.ResBit in drive tables.
                      (            rbf.d):00050         *
                      (            rbf.d):00051         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00052         * Added PE.Prior to save process priority.
                      (            rbf.d):00053         *
                      (            rbf.d):00054         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00055         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00056         *
                      (            rbf.d):00057         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00058         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00059         *
                      (            rbf.d):00060         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00061         * Updated with Dev Desc Info
                      (            rbf.d):00062         *
                      (            rbf.d):00063         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00064         * Updated comments for clarity.
                      (            rbf.d):00065         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00066         *
                      (            rbf.d):00067         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00068         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00069         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00070         *
                      (            rbf.d):00071         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00072         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00073         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00074         *
                      (            rbf.d):00075         *          2005/11/23  Robert Gault
                      (            rbf.d):00076         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00077         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00078         *
                      (            rbf.d):00079         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00080         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00081         
                      (            rbf.d):00082                        NAM       rbf.d
                      (            rbf.d):00083                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00084         
                      (            rbf.d):00085                        PAG       
                      (            rbf.d):00086         *******************************
                      (            rbf.d):00087         * RBF Device Descriptor Offsets
                      (            rbf.d):00088         *
                      (            rbf.d):00089         * These definitions are for RBF device descriptors.
                      (            rbf.d):00090         
                      (            rbf.d):00091                        ORG       M$DTyp
0012                  (            rbf.d):00092                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00093         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00094         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00095         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00096         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00097         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00098         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00099         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00100         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00101         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00102         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00103         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00104         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00105         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00106         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00107         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00108         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00109         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00110         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00111         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00112         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00113         * can be used in other drivers
                      (            rbf.d):00114                        ORG       IT.WPC
0025                  (            rbf.d):00115         IT.SOFF1       RMB       1
0026                  (            rbf.d):00116         IT.SOFF2       RMB       1
0027                  (            rbf.d):00117         IT.SOFF3       RMB       1
0028                  (            rbf.d):00118         IT.LLDRV       RMB       2
002A                  (            rbf.d):00119         IT.MPI         RMB       1
                      (            rbf.d):00120         
                      (            rbf.d):00121         
                      (            rbf.d):00122         * IT.TYP Definitions
                      (            rbf.d):00123         *
     0080             (            rbf.d):00124         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00125         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00126         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00127         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00128         
                      (            rbf.d):00129         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00130         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00131         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00132         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00133         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00134         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00135         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00136         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00137         
                      (            rbf.d):00138         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00139         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00140         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00141         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00142         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00143         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00144         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00145         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00146         
                      (            rbf.d):00147         * IT.DNS Definitions
                      (            rbf.d):00148         *
                      (            rbf.d):00149         
                      (            rbf.d):00150         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00151         
                      (            rbf.d):00152         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00153         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00154         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00155         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00156         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00157         
                      (            rbf.d):00158         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00159         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00160         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00161         
                      (            rbf.d):00162         * Floppy disk step rate definitions
     0000             (            rbf.d):00163         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00164         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00165         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00166         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00167         
                      (            rbf.d):00168                        PAG       
                      (            rbf.d):00169         *************************************
                      (            rbf.d):00170         * Random Block Path Descriptor Format
                      (            rbf.d):00171         *
                      (            rbf.d):00172         * A path descriptor is created for every new path that is open
                      (            rbf.d):00173         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00174         * descriptors track state information of a path.
                      (            rbf.d):00175         *
                      (            rbf.d):00176                        ORG       PD.FST
000A                  (            rbf.d):00177         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00178         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00179         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00180         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00181         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00182         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00183         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00184         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00185                        ORG       PD.OPT
0020                  (            rbf.d):00186                        RMB       1                   Device type
0021                  (            rbf.d):00187         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00188         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00189         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00190         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00191         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00192         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00193         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00194         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00195         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00196         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00197         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00198         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00199         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00200         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00201         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00202         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00203         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00204         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00205         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00206         
                      (            rbf.d):00207         * State Flags
     0001             (            rbf.d):00208         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00209         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00210         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00211         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00212         *EOF equ $10 End of file
     0020             (            rbf.d):00213         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00214         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00215         
                      (            rbf.d):00216         ************************************
                      (            rbf.d):00217         * Random Block Path Extension Format
                      (            rbf.d):00218         *
                      (            rbf.d):00219         * RBF paths under Level Two have additional information that
                      (            rbf.d):00220         * is referenced by the path extension area.
                      (            rbf.d):00221         *
                      (            rbf.d):00222                        ORG       0
0000                  (            rbf.d):00223         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00224         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00225         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00226         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00227         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00228         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00229         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00230         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00231         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00232         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00233         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00234         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00235         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00236         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00237                        RMB       32-.                Reserved
0020                  (            rbf.d):00238         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00239         
                      (            rbf.d):00240         * PE.Lock status codes
     0000             (            rbf.d):00241         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00242         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00243         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00244         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00245         
                      (            rbf.d):00246         
                      (            rbf.d):00247                        PAG       
                      (            rbf.d):00248         ***********************
                      (            rbf.d):00249         * LSN0 Disk Data Format
                      (            rbf.d):00250         *
                      (            rbf.d):00251         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00252         * and contains information about the device's size and format.
                      (            rbf.d):00253         *
                      (            rbf.d):00254                        ORG       0
0000                  (            rbf.d):00255         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00256         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00257         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00258         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00259         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00260         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00261         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00262         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00263         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00264         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00265         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00266         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00267         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00268         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00269         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00270         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00271         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00272         
                      (            rbf.d):00273         *************************
                      (            rbf.d):00274         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00275                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00276         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00277         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00278         
                      (            rbf.d):00279         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00280         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00281         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00282         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00283         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00284         
                      (            rbf.d):00285         
                      (            rbf.d):00286                        PAG       
                      (            rbf.d):00287         ************************
                      (            rbf.d):00288         * File Descriptor Format
                      (            rbf.d):00289         *
                      (            rbf.d):00290         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00291         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00292         * and segment information on a file.
                      (            rbf.d):00293         *
                      (            rbf.d):00294                        ORG       0
0000                  (            rbf.d):00295         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00296         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00297         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00298         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00299         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00300         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00301         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00302         * Segment List Entry Format
                      (            rbf.d):00303                        ORG       0
0000                  (            rbf.d):00304         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00305         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00306         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00307         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00308         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00309         MINSEC         SET       16
                      (            rbf.d):00310         
                      (            rbf.d):00311         
                      (            rbf.d):00312                        PAG       
                      (            rbf.d):00313         ************************
                      (            rbf.d):00314         * Directory Entry Format
                      (            rbf.d):00315         *
                      (            rbf.d):00316         * Directory entries are part of a directory and define the name
                      (            rbf.d):00317         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00318         *
                      (            rbf.d):00319                        ORG       0
0000                  (            rbf.d):00320         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00321         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00322         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00323         
                      (            rbf.d):00324         
                      (            rbf.d):00325                        PAG       
                      (            rbf.d):00326         ********************
                      (            rbf.d):00327         * RBF Static Storage
                      (            rbf.d):00328         *
                      (            rbf.d):00329         * Overall Disk Static Storage
                      (            rbf.d):00330         *
                      (            rbf.d):00331         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00332         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00333         *        the appropriate number of tables.
                      (            rbf.d):00334         *
                      (            rbf.d):00335                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00336         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00337                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00338         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00339         
                      (            rbf.d):00340         
                      (            rbf.d):00341                        PAG       
                      (            rbf.d):00342         ****************
                      (            rbf.d):00343         * Global Storage For Disk Drive Tables
                      (            rbf.d):00344         *
                      (            rbf.d):00345         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00346         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00347         * bitmap use flag, and disk type.
                      (            rbf.d):00348         *
                      (            rbf.d):00349                        ORG       0
0000                  (            rbf.d):00350                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00351         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00352         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00353         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00354         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00355         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00356         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00357         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00358         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00359         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00360         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00361                        RMB       4                   Reserved
     0026             (            rbf.d):00362         DRVMEM         EQU       .
                      (            rbf.d):00363         
                      (            rbf.d):00364         
                      (gshell_beta5_yak.):00050                endc
                      (gshell_beta5_yak.):00051         
0000 87CD4001000D1181 (gshell_beta5_yak.):00052                  mod   MODSIZE,MODNAME,$11,$81,CSTART,DATASIZE
     69001416F2
                      (gshell_beta5_yak.):00053         
                      (gshell_beta5_yak.):00054         * COMPLETE DEFS FOR THIS ASSEMBLY.
                      (gshell_beta5_yak.):00055         
     0010             (gshell_beta5_yak.):00056         ICNONSCR equ   16         # icons on screen in 40 column mode
                      (gshell_beta5_yak.):00057         
                      (gshell_beta5_yak.):00058         * Standard character defs
     0000             (gshell_beta5_yak.):00059         NUL      equ   C$NULL
     0007             (gshell_beta5_yak.):00060         BEL      equ   C$BELL
     0009             (gshell_beta5_yak.):00061         HT       equ   $09
     000A             (gshell_beta5_yak.):00062         LF       equ   C$LF
     000C             (gshell_beta5_yak.):00063         FF       equ   $0C
     000D             (gshell_beta5_yak.):00064         CR       equ   C$CR
     0020             (gshell_beta5_yak.):00065         SPACE    equ   C$SPAC
                      (gshell_beta5_yak.):00066         
                      (gshell_beta5_yak.):00067         * GShell specific Data Structures.
                      (gshell_beta5_yak.):00068         
                      (gshell_beta5_yak.):00069                  org   0
                      (gshell_beta5_yak.):00070         * File info - linked list for each icon (14 bytes each)
0000.                 (gshell_beta5_yak.):00071         FL.XSTRT rmb   2          X start position of icon \   These are for determining if
0002.                 (gshell_beta5_yak.):00072         FL.YSTRT rmb   2          Y start position of icon  \  mouse clicks are on a particular
0004.                 (gshell_beta5_yak.):00073         FL.XEND  rmb   2          X end position of icon    /  icon or not.
0006.                 (gshell_beta5_yak.):00074         FL.YEND  rmb   2          Y end position of icon   /
0008.                 (gshell_beta5_yak.):00075         FL.ICONO rmb   1          Icon type (IC.*)
0009.                 (gshell_beta5_yak.):00076         FL.AIFNO rmb   1          AIF # (entry # to look in ID.* table)
000A.                 (gshell_beta5_yak.):00077         FL.LINK  rmb   2          Link to next FL.* entry
000C.                 (gshell_beta5_yak.):00078         FL.FNAME rmb   2          Ptr to filename
     000E             (gshell_beta5_yak.):00079         FL.SIZE  equ   .
                      (gshell_beta5_yak.):00080         
                      (gshell_beta5_yak.):00081                  org   0
                      (gshell_beta5_yak.):00082         * Structure for table entries for executable programs to fork into new
                      (gshell_beta5_yak.):00083         *   windows - called process tables here (see PTBL* vars)
                      (gshell_beta5_yak.):00084         * NOTE: Since we are planning to extend AIF's (and thus, this table), some
                      (gshell_beta5_yak.):00085         *  of the 16 bit value that only need 8 can have half of their storage
                      (gshell_beta5_yak.):00086         *  re-purposed (MSB of process #, MSB of Overlay window flag, Screen #, etc.)
                      (gshell_beta5_yak.):00087         * (Currently 28 bytes each)
                      (gshell_beta5_yak.):00088         * NOTE: THESE APPEAR TO ONLY BE FOR PROGRAMS THAT FORK INTO RESIZABLE WINDOWS, NOT
                      (gshell_beta5_yak.):00089         *   FULL SCREEN WINDOWS (OR HARDWARE TEXT WINDOWS)?
0000.                 (gshell_beta5_yak.):00090         GD.MNAME rmb   2          Module name ptr (NOTE: can be full path as well for F$NMLoad)
0002.                 (gshell_beta5_yak.):00091         GD.INDVC rmb   2          ??? Ptr to ? (appears it be ptr to alternate window/path name, but is always 0?)
0004.                 (gshell_beta5_yak.):00092         GD.PRCID rmb   2          Process ID # for new process. THIS COULD BE A 1 BYTE VALUE.
0006.                 (gshell_beta5_yak.):00093         GD.STATS rmb   2          Last status of forked program:
                      (gshell_beta5_yak.):00094         *                           -1=running
                      (gshell_beta5_yak.):00095         *                            0=Program ended with no error (F$Exit'ed)
                      (gshell_beta5_yak.):00096         *                           1+=Program ended; GD.STATS contains it's exit Error #
0008.                 (gshell_beta5_yak.):00097         GD.MTYPE rmb   1          Module type
0009.                 (gshell_beta5_yak.):00098         GD.MLANG rmb   1          Module language
000A.                 (gshell_beta5_yak.):00099         GD.MEMSZ rmb   2          Mem size required (# of 256 byte pages for F$Fork)
000C.                 (gshell_beta5_yak.):00100         GD.WPATH rmb   2          Path to window. -1=uninitialized. COULD BE 1 BYTE VALUE.
000E.                 (gshell_beta5_yak.):00101         GD.DW.OW rmb   2          Process running in overlay window (0=Window not created, 1=overlay on GShell wndw, 2=new screen)
0010.                 (gshell_beta5_yak.):00102         GD.XSTRT rmb   2          Start X coord of window (pixel, 0 based)
0012.                 (gshell_beta5_yak.):00103         GD.YSTRT rmb   2          Start Y coord of window (pixel, 0 based)
0014.                 (gshell_beta5_yak.):00104         GD.XEND  rmb   2          End X coord of window (pixel, 0 based)
0016.                 (gshell_beta5_yak.):00105         GD.YEND  rmb   2          End X coord of window (pixel, 0 based)
0018.                 (gshell_beta5_yak.):00106         GD.SCRNO rmb   2          -2=VDG, -1=none yet, 0=Overlay, 1-8 Screen table entry #. THIS COULD BE A 1 BYTE VALUE.
001A.                 (gshell_beta5_yak.):00107         GD.LINK  rmb   2          Link to next GD.* entry
                      (gshell_beta5_yak.):00108         * New for RUNB direct run fix
001C.                 (gshell_beta5_yak.):00109         GD.JSTNM rmb   2          Ptr to ONLY module name (can be same as GD.MNAME)
     001E             (gshell_beta5_yak.):00110         GD.SIZE  equ   .
                      (gshell_beta5_yak.):00111         
                      (gshell_beta5_yak.):00112         * Special re-purposed 8 bytes for VDG launched windows. Flagged by GD.STRT containing a $57 or $77
     0010             (gshell_beta5_yak.):00113         GD.WNNAM equ  GD.XSTRT    for max 5 bytes - does not include '/' but includes Wxx (last char hi bit set)
     0015             (gshell_beta5_yak.):00114         GD.ORGTY equ  GD.XEND+1   original window type
     0016             (gshell_beta5_yak.):00115         GD.OXSIZ equ  GD.YEND     original X size
     0017             (gshell_beta5_yak.):00116         GD.OYSIZ equ  GD.YEND+1   original Y size
                      (gshell_beta5_yak.):00117         
                      (gshell_beta5_yak.):00118         * Defs for table entries of AIF data
                      (gshell_beta5_yak.):00119         * NOTE: all ID.NUMBR's below IC.XTRNL ($14) are for internal AIF structures,
                      (gshell_beta5_yak.):00120         *   not from actual read in AIF files ($f-$13 are currently unused?)
                      (gshell_beta5_yak.):00121         * Again, some of these only need single byte values, so we can re-purpose
                      (gshell_beta5_yak.):00122         *   some bytes for extensions w/o using more memory.
                      (gshell_beta5_yak.):00123         * (Currently $16/22 bytes each). Start pointed to by IDSCSPTR
                      (gshell_beta5_yak.):00124                  org   0
                      (gshell_beta5_yak.):00125         * ID.NUMBR rmb   2          Entry # in ID.* structure - also Get/put buffer # for icon
0000.                 (gshell_beta5_yak.):00126         ID.ALTNM rmb   1          Offset to alternate name to use on screen vs. program name (0=NONE)
0001.                 (gshell_beta5_yak.):00127         ID.NUMBR rmb   1          Entry # in ID.* structure - also Get/put buffer # for icon
0002.                 (gshell_beta5_yak.):00128         ID.WTYPE rmb   2          Window type for AIF (0 WILL BE VDG, NEGATIVE WILL BE GSHPAL FLAG) line #5
0004.                 (gshell_beta5_yak.):00129         ID.XSIZE rmb   2          Minimum window X size for AIF line #6
0006.                 (gshell_beta5_yak.):00130         ID.YSIZE rmb   2          Minimum window Y size for AIF line #7
0008.                 (gshell_beta5_yak.):00131         ID.FRGND rmb   2          Window foreground color for AIF line #8
000A.                 (gshell_beta5_yak.):00132         ID.BKGND rmb   2          Window background color for AIF line #9
000C.                 (gshell_beta5_yak.):00133         ID.MEMSZ rmb   2          Data area size for AIF line #4
000E.                 (gshell_beta5_yak.):00134         ID.MNAME rmb   2          Ptr to module name for AIF line #1
0010.                 (gshell_beta5_yak.):00135         ID.XXXPT rmb   2          Ptr to AIF 3 letter extension
0012.                 (gshell_beta5_yak.):00136         ID.PARAM rmb   2          Ptr to parameters for AIF line #2
0014.                 (gshell_beta5_yak.):00137         ID.LINK  rmb   2          Ptr to next ID.* structure in linked list
     0016             (gshell_beta5_yak.):00138         ID.SIZE  equ   .
                      (gshell_beta5_yak.):00139         
                      (gshell_beta5_yak.):00140         * Structure for screens used table (maximum of 8)
                      (gshell_beta5_yak.):00141         * NOTE: These are ONLY for the underlying, non-protected full screen window to place
                      (gshell_beta5_yak.):00142         * resizable windows on top. While 8 are reserved, I don't think it can ever use all 8 at
                      (gshell_beta5_yak.):00143         * this time. WE NEED TO ADD A WAY TO CREATE A NEW SCREEN IF THE USER DOES *NOT* WANT TO
                      (gshell_beta5_yak.):00144         * LAUNCH A RESIZABLE WINDOW ON WHAT SPACE IS LEFT. MAYBE HAVE GSHELL CHECK FOR SPACEBAR WHILE
                      (gshell_beta5_yak.):00145         * THE "ILLEGAL ACTION" GRAPHICS CURSOR IS SELECTED, AND FORCE A NEW FULL SCREEN & WINDOW
                      (gshell_beta5_yak.):00146         * PLACEMENT?
                      (gshell_beta5_yak.):00147         * (Currently 4 bytes each)
                      (gshell_beta5_yak.):00148                  org   0
0000.                 (gshell_beta5_yak.):00149         SC.PTHNO rmb   1          Path number to screen
0001.                 (gshell_beta5_yak.):00150         SC.WTYPE rmb   1          Full screen background window type
0002.                 (gshell_beta5_yak.):00151         SC.USERS rmb   1          # of users (programs) active on screen
0003.                 (gshell_beta5_yak.):00152                  rmb   1          ??? reserved space?
     0004             (gshell_beta5_yak.):00153         SC.SIZE  equ   .
                      (gshell_beta5_yak.):00154         
                      (gshell_beta5_yak.):00155         * Icon descriptor identifiers (reserved ones). For programs, they will have
                      (gshell_beta5_yak.):00156         *   there own entry for running in a new window (?)
                      (gshell_beta5_yak.):00157         * These are stored in Fl.ICONO
                      (gshell_beta5_yak.):00158         * NOTE: A NEW VERSION OF COCOPR SHOULD BE WRITTEN TO HANDLE GRAPHIC SCREEN
                      (gshell_beta5_yak.):00159         * DUMPS OF VEF'S. IT SHOULD ALSO ALLOW -F (FORMFEED AFTER TRAILER) AS AN
                      (gshell_beta5_yak.):00160         * OPTION FROM THE ENV.FILE
     0001             (gshell_beta5_yak.):00161         IC.TEXT  equ   $0001      Text file identifier
     0002             (gshell_beta5_yak.):00162         IC.FOLDR equ   $0002      Folder (directory) identifier
     0003             (gshell_beta5_yak.):00163         IC.PRGRM equ   $0003      Program (executable) identifier
     0004             (gshell_beta5_yak.):00164         IC.CLOSE equ   $0004      Close box
     0005             (gshell_beta5_yak.):00165         IC.DRIVE equ   $0005      Drive icon
     0006             (gshell_beta5_yak.):00166         IC.AIF.F equ   $0006      Actual AIF entry (whether single program or AIF defining an extension)
     0007             (gshell_beta5_yak.):00167         IC.F.XXX equ   $0007      Files with an extension that have an associated AIF
     0008             (gshell_beta5_yak.):00168         IC.DRBAR equ   $0008      Drive bar (top of current dir window)
     0009             (gshell_beta5_yak.):00169         IC.TRASH equ   $0009      Trash can (delete from file menu)
                      (gshell_beta5_yak.):00170         * above here is internal routines in Gshell itself. Past here requires launching external
                      (gshell_beta5_yak.):00171         *   programs (and hence, ID.* table entries. Above here don't need them).
     000A             (gshell_beta5_yak.):00172         IC.GCALC equ   $000A      Calculator off of Tandy menu
     000B             (gshell_beta5_yak.):00173         IC.GCLOK equ   $000B      Clock off of Tandy menu
     000C             (gshell_beta5_yak.):00174         IC.GCAL  equ   $000C      Calendar off of Tandy menu
     000D             (gshell_beta5_yak.):00175         IC.SHELL equ   $000D      Shell off of Tandy menu
     000E             (gshell_beta5_yak.):00176         IC.QUERY equ   $000E      '?' Help off of Tandy menu
     000F             (gshell_beta5_yak.):00177         IC.PRNTR equ   $000F      Printer (print from file menu)
                      (gshell_beta5_yak.):00178         * Looks like we have room to insert 4 more entries here... (Tandy Menu)
                      (gshell_beta5_yak.):00179         * Clipboard should go here. We need to find the original tandy doc that explained
                      (gshell_beta5_yak.):00180         *  how the get/put buffers were to define clipboard types (text, graphics, etc.)
                      (gshell_beta5_yak.):00181         *  It is supposed to reserve Group 201 of get/put buffers, and is supposed to have the
                      (gshell_beta5_yak.):00182         *  the following menu selections: Undo, Cut, Copy, Paste, Clear, Show
     0014             (gshell_beta5_yak.):00183         IC.XTRNL equ   $0014      Start of external entries (from AIF files)
                      (gshell_beta5_yak.):00184         
                      (gshell_beta5_yak.):00185         * Menu ID #'s
     0002             (gshell_beta5_yak.):00186         YID.CLS  equ   $0002
     0004             (gshell_beta5_yak.):00187         YID.SUP  equ   $0004
     0005             (gshell_beta5_yak.):00188         YID.SDN  equ   $0005
     0006             (gshell_beta5_yak.):00189         YID.SRT  equ   $0006
     0007             (gshell_beta5_yak.):00190         YID.SLT  equ   $0007
     0014             (gshell_beta5_yak.):00191         YID.TDY  equ   $0014
     0017             (gshell_beta5_yak.):00192         YID.FIL  equ   $0017
     0018             (gshell_beta5_yak.):00193         YID.VEW  equ   $0018
     0019             (gshell_beta5_yak.):00194         YID.DSK  equ   $0019
     001A             (gshell_beta5_yak.):00195         YID.KDM  equ   $001A
                      (gshell_beta5_yak.):00196         
                      (gshell_beta5_yak.):00197         * Mouse packet variables (see manual)
     0000             (gshell_beta5_yak.):00198         YT.VALID equ   $0000
     0008             (gshell_beta5_yak.):00199         YT.CBSA  equ   $0008
     0009             (gshell_beta5_yak.):00200         YT.CBSB  equ   $0009
     0016             (gshell_beta5_yak.):00201         YT.STAT  equ   $0016
     0018             (gshell_beta5_yak.):00202         YT.ACX   equ   $0018
     001A             (gshell_beta5_yak.):00203         YT.ACY   equ   $001A
     001C             (gshell_beta5_yak.):00204         YT.WRX   equ   $001C
     001E             (gshell_beta5_yak.):00205         YT.WRY   equ   $001E
                      (gshell_beta5_yak.):00206         
                      (gshell_beta5_yak.):00207         * Std paths
     0001             (gshell_beta5_yak.):00208         STDOUT   equ   $0001
     0002             (gshell_beta5_yak.):00209         STDERR   equ   $0002
                      (gshell_beta5_yak.):00210         
                      (gshell_beta5_yak.):00211         * CoWin window types we use
     0002             (gshell_beta5_yak.):00212         ZT.FSWIN equ   $0002      Framed/scroll bar window
     0004             (gshell_beta5_yak.):00213         ZT.DBOX  equ   $0004      Double Box window
                      (gshell_beta5_yak.):00214         
                      (gshell_beta5_yak.):00215         * Window Descriptors values for a framed window
     0014             (gshell_beta5_yak.):00216         XN.NMNS  equ   $0014      # items in menu bar
     0017             (gshell_beta5_yak.):00217         XN.SYNC  equ   $0017      Sync byte offset in framed window descriptor
     0020             (gshell_beta5_yak.):00218         XN.BAR   equ   $0020      Ptr to Menu descriptor array
     C0C0             (gshell_beta5_yak.):00219         YWINSYNC  equ   $C0C0      Actual Sync byte value (to show window is valid - $CoCo, get it?)
                      (gshell_beta5_yak.):00220         
                      (gshell_beta5_yak.):00221         * Graphic cursors we use
     0001             (gshell_beta5_yak.):00222         YTR.ARR  equ   $0001      Standard arrow ptr graphics cursor
     0004             (gshell_beta5_yak.):00223         YTR.SLP  equ   $0004      Standard Wait (hourglass) graphics cursor
     0005             (gshell_beta5_yak.):00224         YTR.ILL  equ   $0005      Standard Illegal action graphics cursor
                      (gshell_beta5_yak.):00225         
                      (gshell_beta5_yak.):00226         * Standard fonts we use
     0001             (gshell_beta5_yak.):00227         YNT.S8X8 equ   $0001      Font # for normal 8x8 font
     0002             (gshell_beta5_yak.):00228         YNT.S6X8 equ   $0002      Font # for normal 6x8 font
     0003             (gshell_beta5_yak.):00229         YNT.G8X8 equ   $0003      Font # for normal 8x8 graphics symbol font
                      (gshell_beta5_yak.):00230         
                      (gshell_beta5_yak.):00231         * Signal codes we use
     000A             (gshell_beta5_yak.):00232         MOUSIGNL equ   $000A      10=mouse click/select received signal
     000B             (gshell_beta5_yak.):00233         KYBDSGNL equ   $000B      11=key press signal
     000C             (gshell_beta5_yak.):00234         DIRSIG   equ   $000C      New signal for SS.FSig (current viewed directory has been changed)
                      (gshell_beta5_yak.):00235         
                      (gshell_beta5_yak.):00236         * Menu descriptor vars we use
     0012             (gshell_beta5_yak.):00237         QN.ENBL  equ   $0012      Menu Descriptor - Menu enabled flag offset
     0017             (gshell_beta5_yak.):00238         QN.SIZ   equ   $0017      Menu Descriptor packet size (23 bytes)
                      (gshell_beta5_yak.):00239         
                      (gshell_beta5_yak.):00240         * Menu item Descriptor vars we use
     0015             (gshell_beta5_yak.):00241         QI.SIZ   equ   $0015      Menu Item descriptor size (21 bytes)
     000F             (gshell_beta5_yak.):00242         QI.ENBL  equ   $000F      Menu Item descriptor - Menu item enabled flag offset
                      (gshell_beta5_yak.):00243         
     0022             (gshell_beta5_yak.):00244         XN.SIZ   equ   $0022      CoWin framed Window descriptor size (34 bytes)
                      (gshell_beta5_yak.):00245         
                      (gshell_beta5_yak.):00246         * (MAY WANT NEW GROUP FOR 4 COLOR PTRS, KEEP THESE FOR TYPE 5 WINDOWS)
     00C8             (gshell_beta5_yak.):00247         QRP.FNT  equ   $00C8      Standard font group buffer #
     00CA             (gshell_beta5_yak.):00248         QRP.PTR  equ   $00CA      Standard font group for mouse cursor ptrs
                      (gshell_beta5_yak.):00249         
                      (gshell_beta5_yak.):00250         * OS-9 DATA AREA DEFINITIONS
                      (gshell_beta5_yak.):00251                  org   0
0000.                 (gshell_beta5_yak.):00252         WIPED    rmb   1          Icons wiped flag (0=no need to redraw)
0001.                 (gshell_beta5_yak.):00253         DEFWTYPE rmb   2          GShell's current window type (default for GCalc, GClock, etc.)
0003.                 (gshell_beta5_yak.):00254         ICONCOLW rmb   2          Width of icon column. (in pixels)
0005.                 (gshell_beta5_yak.):00255         STRTYPOS rmb   2          Starting Y position for the first icon on screen.
0007.                 (gshell_beta5_yak.):00256         ICONYMAX rmb   2          Maximum Y value for displayed icons.
0009.                 (gshell_beta5_yak.):00257         ICONROWH rmb   2          Height of icon row. (in pixels)
000B.                 (gshell_beta5_yak.):00258         WINDWSZY rmb   2          Y size of GShell window path.
000D.                 (gshell_beta5_yak.):00259         PTBLNEXT rmb   2          Pointer to next available process descriptor link.
000F.                 (gshell_beta5_yak.):00260         FNAMEPTR rmb   2          Pointer to file name buffer. (null terminated)
0011.                 (gshell_beta5_yak.):00261         IDSCSPTR rmb   2          Pointer to start of icon descriptor table.
0013.                 (gshell_beta5_yak.):00262         IDSCNEXT rmb   2          Pointer to next available icon descriptor link
0015.                 (gshell_beta5_yak.):00263         DEVICNTR rmb   1          Current device count. (maximum 5)
0016.                 (gshell_beta5_yak.):00264         DRIVYPOS rmb   1          Starting Y position for first drive icon.
                      (gshell_beta5_yak.):00265         
                      (gshell_beta5_yak.):00266         * The preceding are loaded at startup with default values.
                      (gshell_beta5_yak.):00267         
0017.                 (gshell_beta5_yak.):00268         STRTXPOS rmb   2          Starting X position for the first icon on screen.
0019.                 (gshell_beta5_yak.):00269         PIXELSWD rmb   2          Width of GShell window in pixels.
001B.                 (gshell_beta5_yak.):00270         FLAG640W rmb   1          640 pixels wide flag
001C.                 (gshell_beta5_yak.):00271         RECDSGNL rmb   2          Current received signal from intercept routine.
001E.                 (gshell_beta5_yak.):00272         MAXICONS rmb   2          Maximum number of icons per screen. (12/24)
0020.                 (gshell_beta5_yak.):00273         RAMSIZE  rmb   2          Computer's memory size. (128/256/512/1024/1536/2048K)
0022.                 (gshell_beta5_yak.):00274         WNDWPATH rmb   2          GShell window I/O path number.
0024.                 (gshell_beta5_yak.):00275         WINDWSZX rmb   2          X size of GShell window path.
0026.                 (gshell_beta5_yak.):00276         PRCIDNUM rmb   2          GShell process ID number. (for GPLOAD)
0028.                 (gshell_beta5_yak.):00277         SCREENOW rmb   2          Number of currently displayed icon screen. (0 to n-1)
002A.                 (gshell_beta5_yak.):00278         NSCREENS rmb   2          Number of available icon screens.
002C.                 (gshell_beta5_yak.):00279         STRTICON rmb   2          Pointer to file icon descriptor for first icon on current screen.
002E.                 (gshell_beta5_yak.):00280         FILESCTR rmb   2          Number of files in current data directory.
0030.                 (gshell_beta5_yak.):00281         FTBLSPTR rmb   2          Pointer to start of file icon descriptor table.
0032.                 (gshell_beta5_yak.):00282         FTBLNEXT rmb   2          Pointer to next available link in file icon descriptor table.
0034.                 (gshell_beta5_yak.):00283         SELECTED rmb   2          Pointer to file icon descriptor for currently selected icon.
0036.                 (gshell_beta5_yak.):00284         DEVICNOW rmb   2          Pointer to file icon descriptor for currently selected drive.
0038.                 (gshell_beta5_yak.):00285         PTBLSPTR rmb   2          Pointer to start of process descriptor table.
003A.                 (gshell_beta5_yak.):00286         DIRPTR   rmb   2          Pointer to next directory entry in directory read buffer.
003C.                 (gshell_beta5_yak.):00287         XFD.ATT  rmb   1          Buffer for FD.ATT (attributes) of current directory entry.
003D.                 (gshell_beta5_yak.):00288         NEXTXPOS rmb   2          Next X position for file icon on this screen.
003F.                 (gshell_beta5_yak.):00289         NEXTYPOS rmb   4          Next Y position for file icon on this screen.
0043.                 (gshell_beta5_yak.):00290         ACTVSCRN rmb   2          -1=full screen window, 0-7=screen # window is on (SCRNTABL entries).
0045.                 (gshell_beta5_yak.):00291         PROCXSIZ rmb   2          Minimum X size for this process.
0047.                 (gshell_beta5_yak.):00292         PROCYSIZ rmb   2          Minimum Y size for this process.
0049.                 (gshell_beta5_yak.):00293         PROCWTYP rmb   2          Default window type for this process.
004B.                 (gshell_beta5_yak.):00294         WPOSGOOD rmb   2          Window OK flag. (for window setup)
004D.                 (gshell_beta5_yak.):00295         DWSETSTY rmb   2          Actual STY byte for process window. (for window setup)
                      (gshell_beta5_yak.):00296         
                      (gshell_beta5_yak.):00297         * Additions to handle GSHPALx=r,g,b commands (removed *SET ones)
004F.                 (gshell_beta5_yak.):00298         CURPAL   rmb   1          Current GSHPAL palette # being worked on
0050.                 (gshell_beta5_yak.):00299         CURCOLOR rmb   1          Current palette value
0051.                 (gshell_beta5_yak.):00300         CURGFXSZ rmb   1          Size of GFXBUF to write for GSHPAL values
0052.                 (gshell_beta5_yak.):00301         GIPMSRES rmb   1          0=low res, 1=high res, $ff=not set (default=0)
0053.                 (gshell_beta5_yak.):00302         GIPMSPRT rmb   1          1=right, 2=left, $ff=not set (default=1)
0054.                 (gshell_beta5_yak.):00303         GIPKYST  rmb   1          keyboard repeat start ($ff=not set)
0055.                 (gshell_beta5_yak.):00304         GIPKYSPD rmb   1          keyboard repeat speed ($ff=not set)
0056.                 (gshell_beta5_yak.):00305         DRTBLPTR rmb   2          Pointer to start of drive table.
0058.                 (gshell_beta5_yak.):00306         SUREYPOS rmb   2          Y position for "Sure" box. 
005A.                 (gshell_beta5_yak.):00307         SUREXPOS rmb   1          X position for "Sure" box. 
005B.                 (gshell_beta5_yak.):00308         BXOFFSET rmb   2          X size for selection box. 
005D.                 (gshell_beta5_yak.):00309         WD48FLAG rmb   1          $80 if on type 7 window.
005E.                 (gshell_beta5_yak.):00310         SCRATCH  rmb   2          Scratch var (1 or 2 byte) to speed up some stuff that was on stack
0060.                 (gshell_beta5_yak.):00311         TNDYITMS rmb   QI.SIZ*8   Tandy Menu items array. (8 entries)
                      (gshell_beta5_yak.):00312         
0108.                 (gshell_beta5_yak.):00313         DISKITMS rmb   0          Disk Menu items array.
0108.                 (gshell_beta5_yak.):00314         ITM.FREE rmb   QI.SIZ     Free
011D.                 (gshell_beta5_yak.):00315         ITM.FLDR rmb   QI.SIZ     Folder
0132.                 (gshell_beta5_yak.):00316         ITM.FMAT rmb   QI.SIZ*4   Format to Set Devices (4 entries)
                      (gshell_beta5_yak.):00317         
0186.                 (gshell_beta5_yak.):00318         FILSITMS rmb   0          Files menu items array.
0186.                 (gshell_beta5_yak.):00319         ITM.OPEN rmb   QI.SIZ     Open
019B.                 (gshell_beta5_yak.):00320         ITM.LIST rmb   QI.SIZ     List
01B0.                 (gshell_beta5_yak.):00321         ITM.COPY rmb   QI.SIZ     Copy
01C5.                 (gshell_beta5_yak.):00322         ITM.STAT rmb   QI.SIZ     Stat
01DA.                 (gshell_beta5_yak.):00323         ITM.PRNT rmb   QI.SIZ     Print
01EF.                 (gshell_beta5_yak.):00324         ITM.RNAM rmb   QI.SIZ     Rename
0204.                 (gshell_beta5_yak.):00325         ITM.DELT rmb   QI.SIZ     Delete
                      (gshell_beta5_yak.):00326         * 6809/6309 - add ITM.DUMP here
0219.                 (gshell_beta5_yak.):00327         ITM.DUMP rmb   QI.SIZ     Dump
022E.                 (gshell_beta5_yak.):00328         ITM.SORT rmb   QI.SIZ*2   Sort & Quit 
                      (gshell_beta5_yak.):00329         
0258.                 (gshell_beta5_yak.):00330         VIEWITMS rmb   0          View Menu items array.
0258.                 (gshell_beta5_yak.):00331         ITM.LRES rmb   QI.SIZ*3   Low Res 4 Color (3 items total)
                      (gshell_beta5_yak.):00332         
0297.                 (gshell_beta5_yak.):00333         KDMITMS  rmb   QI.SIZ*2   KDM Menu items array. 2 items, never selectable
                      (gshell_beta5_yak.):00334         
02C1.                 (gshell_beta5_yak.):00335         TNDYDESC rmb   QN.SIZ     Tandy Menu descriptor.
02D8.                 (gshell_beta5_yak.):00336         FILSDESC rmb   QN.SIZ     Files Menu descriptor.
02EF.                 (gshell_beta5_yak.):00337         DISKDESC rmb   QN.SIZ     Disk Menu descriptor.
0306.                 (gshell_beta5_yak.):00338         VIEWDESC rmb   QN.SIZ     View Menu descriptor. 
031D.                 (gshell_beta5_yak.):00339         KDMDESC  rmb   QN.SIZ     KDM Menu descriptor. 
                      (gshell_beta5_yak.):00340         
0334.                 (gshell_beta5_yak.):00341         SHELLNAM rmb   6          "shell"
033A.                 (gshell_beta5_yak.):00342         LISTNAM  rmb   5          "list"
033F.                 (gshell_beta5_yak.):00343         GCALCNAM rmb   6          "gcalc"
0345.                 (gshell_beta5_yak.):00344         GCLOCKNM rmb   7          "gclock"
034C.                 (gshell_beta5_yak.):00345         GCALNAM  rmb   5          "gcal"
0351.                 (gshell_beta5_yak.):00346         CONTRLNM rmb   8          "control"
0359.                 (gshell_beta5_yak.):00347         GPRINTNM rmb   7          "gprint"
0360.                 (gshell_beta5_yak.):00348         GPORTNAM rmb   6          "gport"
0366.                 (gshell_beta5_yak.):00349         HELPNAM  rmb   5          "help"
036B.                 (gshell_beta5_yak.):00350         COCPRNM  rmb   7          "cocopr"
                      (gshell_beta5_yak.):00351         * 6809/6309 - add DUMP text here
0372.                 (gshell_beta5_yak.):00352         DUMPNAM  rmb   5          "dump"
                      (gshell_beta5_yak.):00353         
0377.                 (gshell_beta5_yak.):00354         DBOXDESC rmb   FL.SIZE    Directory Close Box descriptor. (file icon descriptor format)
0385.                 (gshell_beta5_yak.):00355         DBARDESC rmb   FL.SIZE    Directory Bar descriptor. (file icon descriptor format)
0393.                 (gshell_beta5_yak.):00356         QURYDESC rmb   FL.SIZE    ? descriptor. (file icon descriptor format)
03A1.                 (gshell_beta5_yak.):00357         TRSHDESC rmb   FL.SIZE    Trash Can descriptor. (file icon descriptor format) 
03AF.                 (gshell_beta5_yak.):00358         PRTRDESC rmb   FL.SIZE    Printer descriptor (file icon descriptor format)
                      (gshell_beta5_yak.):00359         
03BD.                 (gshell_beta5_yak.):00360         CALCDESC rmb   ID.SIZE    Icon descriptor for gcalc.
03D3.                 (gshell_beta5_yak.):00361         CLOKDESC rmb   ID.SIZE    icon descriptor for gclock
03E9.                 (gshell_beta5_yak.):00362         CALDESC  rmb   ID.SIZE    icon descriptor for gcal.
03FF.                 (gshell_beta5_yak.):00363         SHELDESC rmb   ID.LINK    icon descriptor for shell.
0413.                 (gshell_beta5_yak.):00364         ENDLINK  rmb   2          Terminating link for internal icon descriptors.
0415.                 (gshell_beta5_yak.):00365         NXTICONO rmb   2          Next available external icon number.
0417.                 (gshell_beta5_yak.):00366         PRESSMSG rmb   14         "press any key"
0425.                 (gshell_beta5_yak.):00367         NEWNMSG  rmb   18         "new name:"
0437.                 (gshell_beta5_yak.):00368         SLASHW   rmb   3          "/w"
043A.                 (gshell_beta5_yak.):00369         ALLOCP   rmb   3          "C" Variable.
043D.                 (gshell_beta5_yak.):00370         STTOP    rmb   2          "C" Variable.
043F.                 (gshell_beta5_yak.):00371         MEMEND   rmb   10         "C" Variable.  1st 2 is current upper boundary of data memory
0449.                 (gshell_beta5_yak.):00372         MTOP     rmb   2          "C" Variable.
044B.                 (gshell_beta5_yak.):00373         STBOT    rmb   2          "C" Variable.
044D.                 (gshell_beta5_yak.):00374         ERRNO    rmb   2          "C" Variable.
044F.                 (gshell_beta5_yak.):00375         WINDDESC rmb   XN.SIZ     GShell window descriptor.
0471.                 (gshell_beta5_yak.):00376         DDIRNAME rmb   256        Full path name to current data directory.
0571.                 (gshell_beta5_yak.):00377         XDIRNAME rmb   256        Full path name to current execution directory.
0671.                 (gshell_beta5_yak.):00378         MOUSPCKT rmb   32         Mouse packet buffer.
0691.                 (gshell_beta5_yak.):00379         FNAMBUFR rmb   30         File name (null terminated) for file icon descriptor setup.
06AF.                 (gshell_beta5_yak.):00380         DIRBUFER rmb   2048       Read buffer for current directory information.
0EAF.                 (gshell_beta5_yak.):00381         ICONBUFR rmb   144        Icon read/build buffer. (for GPLOAD)
0F3F.                 (gshell_beta5_yak.):00382         MULTIBFR rmb   256        Shared buffer.
103F.                 (gshell_beta5_yak.):00383         LINEBUFR rmb   80         80 character line input buffer.
108F.                 (gshell_beta5_yak.):00384         ASCIINUM rmb   8          ASCII number from binary/ASCII conversion routine.
1097.                 (gshell_beta5_yak.):00385         ASCIITMP rmb   8          Binary/ASCII temp buffer. (reversed)
109F.                 (gshell_beta5_yak.):00386         PARMSBFR rmb   256        Command/parameters build build buffer.
119F.                 (gshell_beta5_yak.):00387         AIFNMBFR rmb   8          AIF.xxx file name build buffer.
11A7.                 (gshell_beta5_yak.):00388         DNAMBUFR rmb   32         Directory name input buffer.
11C7.                 (gshell_beta5_yak.):00389         SCRNTABL rmb   SC.SIZE*8  Process screen table.
11E7.                 (gshell_beta5_yak.):00390         ENVFLBFR rmb   80         80 character line buffer for ENV.FILE input.
1237.                 (gshell_beta5_yak.):00391         GFXBUF2  rmb   4          Graphics command build buffer. (small)
                      (gshell_beta5_yak.):00392         
123B.                 (gshell_beta5_yak.):00393         SSOPTBFR rmb   34         Buffer for SS.OPT information. ONLY NEED 32 BYTES, BUT WE CAN
                      (gshell_beta5_yak.):00394         * 6809/6309 - REPURPOSE LAST 2 BYTES FOR 1) ORIGINAL PAUSE STATE (for when quitting GSHELL),
                      (gshell_beta5_yak.):00395         * and original screen type
                      (gshell_beta5_yak.):00396         
125D.                 (gshell_beta5_yak.):00397         DRIVETBL rmb   FL.SIZE*5  Device/Drive table.
12A3.                 (gshell_beta5_yak.):00398         DRVNMTBL rmb   32*5       Device/Drive name table.
1343.                 (gshell_beta5_yak.):00399         BASE     rmb   4          "C" Variable.
1347.                 (gshell_beta5_yak.):00400         SPARE    rmb   2          "C" Variable.
1349.                 (gshell_beta5_yak.):00401         GFXBUF   rmb   16         Graphics command build buffer. (large)
                      (gshell_beta5_yak.):00402         * Added for mode changing palette support
1359.                 (gshell_beta5_yak.):00403         GSHBUF   rmb   16         GSHPAL0 to 3 display code buffer.
1369.                 (gshell_beta5_yak.):00404         DIRPATH  rmb   1          Path # to current dir. (added for dir monitoring)
136A.                 (gshell_beta5_yak.):00405         Dirup    rmb   1          Copy of signal code (if it was new DIR signal)
136B.                 (gshell_beta5_yak.):00406         RenFlag  rmb   1          Flag used by rename - whether to reset DIRSIG or not
136C.                 (gshell_beta5_yak.):00407         NSIGN    rmb   1          "C" Variable.
136D.                 (gshell_beta5_yak.):00408         HANDLER  rmb   2          "C" Variable.
136F.                 (gshell_beta5_yak.):00409         RUNBFLAG rmb   1          Flag for RUNB (for increasing mem size for F$Fork)
                      (gshell_beta5_yak.):00410                IFEQ  H6309
1370.                 (gshell_beta5_yak.):00411         REGE     rmb   1
1371.                 (gshell_beta5_yak.):00412         REGF     rmb   1
                      (gshell_beta5_yak.):00413                ENDC
1372.                 (gshell_beta5_yak.):00414         END      rmb   896        "C" Variable.
     16F2             (gshell_beta5_yak.):00415         DATASIZE equ   .
                      (gshell_beta5_yak.):00416         
000D 677368656CEC     (gshell_beta5_yak.):00417         MODNAME  fcs   "gshell"
0013 03               (gshell_beta5_yak.):00418                  fcb   3          Edition #3 (this includes all EOU updates through Beta 5)
                      (gshell_beta5_yak.):00419         
                      (gshell_beta5_yak.):00420         * This first chunk clears some data memory, and copies some "pre-load" data into
                      (gshell_beta5_yak.):00421         * data memory (like menus, which can be modified on the fly depending on circumstances)
0014 3420             (gshell_beta5_yak.):00422         CSTART   pshs  Y          Save ptr to end of parm area
0016 3440             (gshell_beta5_yak.):00423                  pshs  U          Save ptr to start of data area
                      (gshell_beta5_yak.):00424         * Stack blast clear routine - slightly slower than original on 6309, much faster on 6809
0018 5F               (gshell_beta5_yak.):00425                  clrb             Value to clear with
0019 8E0100           (gshell_beta5_yak.):00426                  ldx   #256       Size to clear (X is reloaded below anyways)
001C 17386B           (gshell_beta5_yak.):00427                  lbsr  StkBlClr   Clear direct page (U is already pointing to 0)
                      (gshell_beta5_yak.):00428         * Copy table of initialized data from ETEXT to $00 in DP (note: this overlaps the clear above
                      (gshell_beta5_yak.):00429         *  for about 23 bytes, so we could shorten above init
001F 10AEE4           (gshell_beta5_yak.):00430                  ldy   ,s         Get ptr to start of DP/data area
0022 30A91372         (gshell_beta5_yak.):00431                  leax  END,y      Point to end of GSHELL data area
0026 3410             (gshell_beta5_yak.):00432                  pshs  x          Save it
0028 338D3BDA         (gshell_beta5_yak.):00433                  leau  ETEXT,pc   Point to table of initialized data (includes screen height)
                      (gshell_beta5_yak.):00434                IFNE  H6309
                      (gshell_beta5_yak.):00435                  ldw   ,u++       Get size of data block to copy
                      (gshell_beta5_yak.):00436                  tfm   u+,y+      Block copy initialized data
                      (gshell_beta5_yak.):00437                ELSE
002C ECC1             (gshell_beta5_yak.):00438                  ldd   ,u++       Get size of data block to copy
002E 173886           (gshell_beta5_yak.):00439                  lbsr  StkBlCpy   Stack blast copy the data from U to Y
                      (gshell_beta5_yak.):00440                ENDC
                      (gshell_beta5_yak.):00441         * Copy Menu tables to RAM so we can modify them (grey out items, etc.) when needed w/o
                      (gshell_beta5_yak.):00442         *  self-modifying code and CRC problems
0031 10AE62           (gshell_beta5_yak.):00443                  ldy   2,S        Get ptr to start of data area again
0034 31A860           (gshell_beta5_yak.):00444                  leay  <TNDYITMS,y Point to Tandy Menu Items array in data area
                      (gshell_beta5_yak.):00445                IFNE  H6309
                      (gshell_beta5_yak.):00446                  ldw   ,u++       Get size of data block
                      (gshell_beta5_yak.):00447                  tfm   u+,y+      Block copy initialized data
                      (gshell_beta5_yak.):00448         * Now, clear out rest of data memory starting at end of menu table
                      (gshell_beta5_yak.):00449                  ldw   ,s         Get end address
                      (gshell_beta5_yak.):00450                  clr   ,-s        Zero byte
                      (gshell_beta5_yak.):00451                  subr  y,w        W=Size of area to clear
                      (gshell_beta5_yak.):00452                  tfm   s,y+       Clear until end of data area
                      (gshell_beta5_yak.):00453                  ldu   3,s        Get ptr to start of data area again
                      (gshell_beta5_yak.):00454                  leas  5,s        Eat zero byte & End/Start of data markers
                      (gshell_beta5_yak.):00455                ELSE
0037 ECC1             (gshell_beta5_yak.):00456                  ldd   ,u++       Get size of data block
0039 17387B           (gshell_beta5_yak.):00457                  lbsr  StkBlCpy   Copy menu data to data mem
                      (gshell_beta5_yak.):00458         * Now, clear out rest of data memory starting at end of menu table (,y)
003C 3420             (gshell_beta5_yak.):00459                  pshs  y          Save ptr to start of block to clear
003E EC62             (gshell_beta5_yak.):00460                  ldd   2,s        Get end of data memory address
0040 A3E4             (gshell_beta5_yak.):00461                  subd  ,s         Subtract start ptr (D=size to clear)
0042 3540             (gshell_beta5_yak.):00462                  puls  u          U=start ptr to clear at
0044 1F01             (gshell_beta5_yak.):00463                  tfr   d,x        X=size to clear
0046 5F               (gshell_beta5_yak.):00464                  clrb             Byte to clear with
0047 173840           (gshell_beta5_yak.):00465                  lbsr  StkBlClr   Clear rest of data memory
004A EE62             (gshell_beta5_yak.):00466                  ldu   2,s        Get ptr to start of data area again
004C 3264             (gshell_beta5_yak.):00467                  leas  4,s        Eat temp ptrs
                      (gshell_beta5_yak.):00468                ENDC         
004E 3510             (gshell_beta5_yak.):00469                  puls  X          Get ptr to end of parm area
0050 BF043F           (gshell_beta5_yak.):00470                  stx   >MEMEND    Save as end of data memory ptr
0053 31C4             (gshell_beta5_yak.):00471                  leay  ,U         Point Y to start of data area
0055 8D14             (gshell_beta5_yak.):00472                  bsr   MAIN       Call main GSHELL routine
                      (gshell_beta5_yak.):00473                IFNE  H6309
                      (gshell_beta5_yak.):00474                  clrd             No error & exit
                      (gshell_beta5_yak.):00475                ELSE
0057 4F               (gshell_beta5_yak.):00476                  clra
0058 5F               (gshell_beta5_yak.):00477                  clrb
                      (gshell_beta5_yak.):00478                ENDC
0059 EDE3             (gshell_beta5_yak.):00479                  std   ,--s
005B 1637CB           (gshell_beta5_yak.):00480                  lbra  EXIT
                      (gshell_beta5_yak.):00481         
                      (gshell_beta5_yak.):00482         * Signal intercept trap.
005E 4F               (gshell_beta5_yak.):00483         SAVESGNL clra             Save signal as D & return
005F EDC81C           (gshell_beta5_yak.):00484                  std   RECDSGNL,U
0062 C10C             (gshell_beta5_yak.):00485                  cmpb  #DIRSIG    Dir update signal?
0064 2604             (gshell_beta5_yak.):00486                  bne   DoneSig
0066 E7C9136A         (gshell_beta5_yak.):00487                  stb   Dirup,u    Save copy (in case in middle of dir update, or stuck elsewhere)
006A 3B               (gshell_beta5_yak.):00488         DoneSig  rti   
                      (gshell_beta5_yak.):00489         
                      (gshell_beta5_yak.):00490         * Main GSHELL initialization (other than clearing memory & copying some tables to the data area)
006B 3460             (gshell_beta5_yak.):00491         MAIN     pshs  u,y        Save data mem ptr & parm ptr
                      (gshell_beta5_yak.):00492         * Do REAL RAM check. The 'RAM=' in env.file will override (we can use for testing), but for users
                      (gshell_beta5_yak.):00493         *  they can eliminate this line in the env.file
006D 30C90F3F         (gshell_beta5_yak.):00494                  leax  MULTIBFR,u Temp place to hold DAT IMG block #0
0071 4F               (gshell_beta5_yak.):00495                  clra
0072 5F               (gshell_beta5_yak.):00496                  clrb             DAT IMAGE=block 0 (always system task block 0 in Level II/Coco)
0073 ED84             (gshell_beta5_yak.):00497                  std   ,x         Save as DAT image
0075 1F10             (gshell_beta5_yak.):00498                  tfr   x,d        Move to D for CpyMem
0077 8E0040           (gshell_beta5_yak.):00499                  ldx   #$40       D.BlkMap - place we are copying from in system task block 0
007A 108E0004         (gshell_beta5_yak.):00500                  ldy   #4         We need start and end blocks
007E 33C90F41         (gshell_beta5_yak.):00501                  leau  MULTIBFR+2,u  Place to store mem we are copying
0082 103F1B           (gshell_beta5_yak.):00502                  os9   F$CpyMem
0085 EE62             (gshell_beta5_yak.):00503                  ldu   2,s        Get data mem ptr back
0087 ECC90F43         (gshell_beta5_yak.):00504                  ldd   MULTIBFR+4,u  Get end block #
008B A3C90F41         (gshell_beta5_yak.):00505                  subd  MULTIBFR+2,u  Subtract start block # (# of RAM blocks active)
008F 58               (gshell_beta5_yak.):00506                  lslb             Multiply * 8 to get # of K
0090 49               (gshell_beta5_yak.):00507                  rola
0091 58               (gshell_beta5_yak.):00508                  lslb
0092 49               (gshell_beta5_yak.):00509                  rola
0093 58               (gshell_beta5_yak.):00510                  lslb
0094 49               (gshell_beta5_yak.):00511                  rola
0095 DD20             (gshell_beta5_yak.):00512                  std   <RAMSIZE   Save RAM size (can get over-ridden from RAM= in env.file, for testing)
0097 172EA4           (gshell_beta5_yak.):00513                  lbsr  SETUPENV   Setup drive tables, and read in ENV.FIL stuff
009A 3520             (gshell_beta5_yak.):00514                  puls  y
009C 308CBF           (gshell_beta5_yak.):00515                  leax  <SAVESGNL,PC Set up intercept trap
009F 33A4             (gshell_beta5_yak.):00516                  leau  ,y         Copy start of data area to U
00A1 103F09           (gshell_beta5_yak.):00517                  os9   F$Icpt
                      (gshell_beta5_yak.):00518         * FIXWINDW only called once, embed !
00A4 8D13             (gshell_beta5_yak.):00519                  bsr   FIXWINDW   Get window path
00A6 ED7E             (gshell_beta5_yak.):00520                  std   -2,S       Save it
00A8 270D             (gshell_beta5_yak.):00521                  beq   GSHABORT   Could not get path, abort
00AA 8D32             (gshell_beta5_yak.):00522                  bsr   BILDDESC   Go build menu descriptor for GSHELL
00AC 8D6B             (gshell_beta5_yak.):00523                  bsr   SETWINDW   Set some coords, graphics cursor, window type, etc.
00AE 1732A2           (gshell_beta5_yak.):00524                  lbsr  KILLPBUF   Kill all GP buffers in the our ID # group
00B1 170142           (gshell_beta5_yak.):00525                  lbsr  FINLINIT   Redo std I/O for window path, menus for 128/512k,mouse on
00B4 170187           (gshell_beta5_yak.):00526                  lbsr  GSHSTART
00B7 35C0             (gshell_beta5_yak.):00527         GSHABORT puls  U,PC       Restore U & return
                      (gshell_beta5_yak.):00528         
                      (gshell_beta5_yak.):00529         * Entry: Y=start of data area ptr
00B9 CC0093           (gshell_beta5_yak.):00530         FIXWINDW ldd   #SS.ScTyp  Path=0, get screentype call
00BC 103F8D           (gshell_beta5_yak.):00531                  os9   I$GetStt
00BF 240F             (gshell_beta5_yak.):00532                  bcc   ONWINDOW   No error on call, skip ahead
00C1 4F               (gshell_beta5_yak.):00533                  clra             If we had an error, we are trying to run from a VDG window, or terminal
00C2 FD044D           (gshell_beta5_yak.):00534                  std   >ERRNO     Save 16 bit error #
00C5 8603             (gshell_beta5_yak.):00535                  lda   #UPDAT.    Attempt to open path to '/w'
00C7 8E0437           (gshell_beta5_yak.):00536                  ldx   #SLASHW
00CA 173317           (gshell_beta5_yak.):00537                  lbsr  I.OPEN     D=path for window
00CD DD22             (gshell_beta5_yak.):00538         DoneFix  std   <WNDWPATH  Save path to window
00CF 39               (gshell_beta5_yak.):00539                  rts   
                      (gshell_beta5_yak.):00540         
                      (gshell_beta5_yak.):00541         * 6809/6309 - A=screen type, so save this at SSOPTBFR+33 (so we can exit GSHELL and restore the
                      (gshell_beta5_yak.):00542         * original window type. Will need to set to 0 if VDG launched, so we don't change that.
                      (gshell_beta5_yak.):00543         * SSOPTBFR+34 will be for the original SS.OPT pause on launch
00D0 8602             (gshell_beta5_yak.):00544         ONWINDOW lda   #STDERR    Get Std Error path
00D2 173306           (gshell_beta5_yak.):00545                  lbsr  I.DUP      Duplicate path
00D5 3406             (gshell_beta5_yak.):00546                  pshs  d          Save new path # (16 bit)
00D7 173502           (gshell_beta5_yak.):00547                  lbsr  DWEND      DWEnd the window
00DA 3506             (gshell_beta5_yak.):00548                  puls  d          Get path #
00DC 20EF             (gshell_beta5_yak.):00549                  bra   DoneFix    Save & return
                      (gshell_beta5_yak.):00550         
00DE 8E02C1           (gshell_beta5_yak.):00551         BILDDESC ldx   #TNDYDESC  Point to our copy of Tandy Menu descriptor
00E1 AFA9046F         (gshell_beta5_yak.):00552                  stx   WINDDESC+XN.BAR,Y Save as ptr to menu descriptors
00E5 C605             (gshell_beta5_yak.):00553                  ldb   #5         5 menus on the menu bar
00E7 E7A90463         (gshell_beta5_yak.):00554                  stb   WINDDESC+XN.NMNS,Y
00EB CCC0C0           (gshell_beta5_yak.):00555                  ldd   #YWINSYNC   Sync bytes to $c0c0 <grin>
00EE EDA90466         (gshell_beta5_yak.):00556                  std   WINDDESC+XN.SYNC,Y
00F2 308C17           (gshell_beta5_yak.):00557                  leax  <GSHELLTL,PC Point to GSHELL title bar
00F5 3410             (gshell_beta5_yak.):00558                  pshs  X          Save it
00F7 8E044F           (gshell_beta5_yak.):00559                  ldx   #WINDDESC  Point to Gshell menu descriptor
00FA 3410             (gshell_beta5_yak.):00560                  pshs  X          Save that
00FC 17331E           (gshell_beta5_yak.):00561                  lbsr  STRCPY     Copy title bar info into RAM copy of Menu descriptor
00FF 3264             (gshell_beta5_yak.):00562                  leas  4,S        Eat stack
0101 0F26             (gshell_beta5_yak.):00563                  clr   <PRCIDNUM
0103 3420             (gshell_beta5_yak.):00564                  pshs  y          Save Y
0105 103F0C           (gshell_beta5_yak.):00565                  os9   F$ID       Get process #
0108 9727             (gshell_beta5_yak.):00566                  sta   <PRCIDNUM+1 Save it
010A 35A0             (gshell_beta5_yak.):00567                  puls  y,pc       Restore Y & return
                      (gshell_beta5_yak.):00568         
010C 475368656C6C2B20 (gshell_beta5_yak.):00569         GSHELLTL fcc   "GShell+ 1.27"
     312E3237
0118 00               (gshell_beta5_yak.):00570                  fcb   NUL
                      (gshell_beta5_yak.):00571         
0119 8D74             (gshell_beta5_yak.):00572         SETWINDW bsr   WINDPARM   Set up some of the 40/80 column measurement stuff
011B C602             (gshell_beta5_yak.):00573                  ldb   #2
011D 3406             (gshell_beta5_yak.):00574                  pshs  d          border color=2
011F 3406             (gshell_beta5_yak.):00575                  pshs  d          background color=2
0121 5F               (gshell_beta5_yak.):00576                  clrb  
0122 3406             (gshell_beta5_yak.):00577                  pshs  d          foreground color=0
0124 9E0B             (gshell_beta5_yak.):00578                  ldx   WINDWSZY   Get Window height
0126 D625             (gshell_beta5_yak.):00579                  ldb   WINDWSZX+1 Get X window size (in chars)
0128 3416             (gshell_beta5_yak.):00580                  pshs  d,X        Save them
012A 5F               (gshell_beta5_yak.):00581                  clrb             Start x,y=0,0
012B 3406             (gshell_beta5_yak.):00582                  pshs  d
012D 3406             (gshell_beta5_yak.):00583                  pshs  d
012F 9E01             (gshell_beta5_yak.):00584                  ldx   DEFWTYPE   Get window type
0131 D623             (gshell_beta5_yak.):00585                  ldb   WNDWPATH+1 Get window path #
0133 3416             (gshell_beta5_yak.):00586                  pshs  d,X        Save them
0135 17346C           (gshell_beta5_yak.):00587                  lbsr  DWSET      Do the device window set
0138 172A9F           (gshell_beta5_yak.):00588                  lbsr  ResetPal   Added to restore GSHPAL colors when re-setting window
013B 32E812           (gshell_beta5_yak.):00589                  leas  18,S       Eat all of our stack crap
013E ED7E             (gshell_beta5_yak.):00590                  std   -2,S
0140 2D1B             (gshell_beta5_yak.):00591                  blt   SETWIND1   ??? Error, skip ahead
0142 1736F7           (gshell_beta5_yak.):00592                  lbsr  MenuClr    Set color for menu bars
0145 8E044F           (gshell_beta5_yak.):00593                  ldx   #WINDDESC  Point to Gshell menu structure
0148 CC0002           (gshell_beta5_yak.):00594                  ldd   #ZT.FSWIN  Framed window with scrollbars
014B 3416             (gshell_beta5_yak.):00595                  pshs  d,X        Save on stack
014D D623             (gshell_beta5_yak.):00596                  ldb   WNDWPATH+1 Get path to window
014F 3406             (gshell_beta5_yak.):00597                  pshs  d          Save
0151 17343E           (gshell_beta5_yak.):00598                  lbsr  ST.WNSET   Set the window to framed with scrollbars
0154 3266             (gshell_beta5_yak.):00599                  leas  6,S        Eat stack stuff
0156 1736EA           (gshell_beta5_yak.):00600                  lbsr  RegClr     Set color for regular stuff
0159 ED7E             (gshell_beta5_yak.):00601                  std   -2,S
015B 2C0B             (gshell_beta5_yak.):00602                  bge   SETFONTS   No error, skip ahead
015D ECA9044D         (gshell_beta5_yak.):00603         SETWIND1 ldd   ERRNO,Y    Get error #
0161 3406             (gshell_beta5_yak.):00604                  pshs  d          Save it
0163 171029           (gshell_beta5_yak.):00605                  lbsr  TRYQUIT    ??? Try resetting everything?
0166 3262             (gshell_beta5_yak.):00606                  leas  2,S        Eat stack
0168 5F               (gshell_beta5_yak.):00607         SETFONTS clrb             Save regs
0169 3436             (gshell_beta5_yak.):00608                  pshs  d,x,y
016B 173478           (gshell_beta5_yak.):00609                  lbsr  SELECT     Select std in as current window
016E D623             (gshell_beta5_yak.):00610                  ldb   WNDWPATH+1 Get window path
0170 E761             (gshell_beta5_yak.):00611                  stb   1,S        Save on stack
0172 173471           (gshell_beta5_yak.):00612                  lbsr  SELECT     Select Gshell window path as current window
0175 C602             (gshell_beta5_yak.):00613                  ldb   #YNT.S6X8  Save 6x8 font #
0177 E765             (gshell_beta5_yak.):00614                  stb   1+4,S
0179 C6C8             (gshell_beta5_yak.):00615                  ldb   #QRP.FNT   Save font group #
017B E763             (gshell_beta5_yak.):00616                  stb   3,S
017D 17348D           (gshell_beta5_yak.):00617                  lbsr  FONT       Select the 6x8 font
0180 5F               (gshell_beta5_yak.):00618                  clrb             Echo off, pause off
0181 ED62             (gshell_beta5_yak.):00619                  std   2,S
0183 172CD5           (gshell_beta5_yak.):00620                  lbsr  PAUSECHO   Shut echo & pause off
0186 17008A           (gshell_beta5_yak.):00621                  lbsr  CURSCLOF   Cursor off & Scaling off
0189 172D69           (gshell_beta5_yak.):00622                  lbsr  CRSRAROW   Set graphics cursor to the arrow
018C 3266             (gshell_beta5_yak.):00623                  leas  6,S        Eat stack & return
018E 39               (gshell_beta5_yak.):00624                  rts   
                      (gshell_beta5_yak.):00625         
018F 4F               (gshell_beta5_yak.):00626         WINDPARM clra             Default flag to 320 res.
0190 D602             (gshell_beta5_yak.):00627                  ldb   DEFWTYPE+1 Get default window type
0192 C107             (gshell_beta5_yak.):00628                  cmpb  #7         640x200x4 color?
0194 2601             (gshell_beta5_yak.):00629                  bne   WINDPAR3   No, leave at 320 res.
0196 4C               (gshell_beta5_yak.):00630         WINDPAR1 inca             Flag as 640 res.
0197 971B             (gshell_beta5_yak.):00631         WINDPAR3 sta   FLAG640W   Save 640/320 flag
0199 262B             (gshell_beta5_yak.):00632                  bne   WINDPAR4   640, skip ahead
019B CC012F           (gshell_beta5_yak.):00633                  ldd   #303       Set Gshell window width to 303
019E DD19             (gshell_beta5_yak.):00634                  std   PIXELSWD
01A0 CC0109           (gshell_beta5_yak.):00635                  ldd   #265       Set Directory Bar End X to 265
01A3 EDA90389         (gshell_beta5_yak.):00636                  std   DBARDESC+FL.XEND,Y
01A7 CC0118           (gshell_beta5_yak.):00637                  ldd   #280       '?' Start X pos to 280
01AA EDA90393         (gshell_beta5_yak.):00638                  std   QURYDESC+FL.XSTRT,Y
01AE CC0127           (gshell_beta5_yak.):00639                  ldd   #295       '?' End X pos to 295
01B1 EDA90397         (gshell_beta5_yak.):00640                  std   QURYDESC+FL.XEND,Y
01B5 CC0040           (gshell_beta5_yak.):00641                  ldd   #64        Start X position of icons on screen to 64
01B8 DD17             (gshell_beta5_yak.):00642                  std   STRTXPOS
01BA DD03             (gshell_beta5_yak.):00643                  std   ICONCOLW   Also # pixels between icons (width)
01BC C610             (gshell_beta5_yak.):00644                  ldb   #ICNONSCR  Get max # icons on screen at once
01BE DD1E             (gshell_beta5_yak.):00645                  std   MAXICONS   Save it
01C0 C628             (gshell_beta5_yak.):00646                  ldb   #40        X Size of GShell window path to 40
01C2 0F5D             (gshell_beta5_yak.):00647                  clr   WD48FLAG   Set 40 column flag
01C4 202D             (gshell_beta5_yak.):00648                  bra   WINDPARX
                      (gshell_beta5_yak.):00649         
                      (gshell_beta5_yak.):00650         * 640 wide screen
01C6 CC026F           (gshell_beta5_yak.):00651         WINDPAR4 ldd   #623       GShell window width=632
01C9 DD19             (gshell_beta5_yak.):00652                  std   PIXELSWD
01CB CC0240           (gshell_beta5_yak.):00653                  ldd   #576       Set directory bar end X to 576
01CE EDA90389         (gshell_beta5_yak.):00654                  std   DBARDESC+FL.XEND,Y
01D2 CC0255           (gshell_beta5_yak.):00655                  ldd   #597       '?' Start X pos to 597
01D5 EDA90393         (gshell_beta5_yak.):00656                  std   QURYDESC+FL.XSTRT,Y
01D9 CC0267           (gshell_beta5_yak.):00657                  ldd   #615       '?' End X pos to 615
01DC EDA90397         (gshell_beta5_yak.):00658                  std   QURYDESC+FL.XEND,Y
01E0 CC0038           (gshell_beta5_yak.):00659                  ldd   #56        Start X pos of icons on screen to 56
01E3 DD17             (gshell_beta5_yak.):00660                  std   STRTXPOS
01E5 C620             (gshell_beta5_yak.):00661                  ldb   #ICNONSCR*2 # icons on screen max
01E7 DD1E             (gshell_beta5_yak.):00662                  std   MAXICONS   Save it
01E9 C648             (gshell_beta5_yak.):00663                  ldb   #72        72 pixels between icons on screen
01EB D704             (gshell_beta5_yak.):00664                  stb   ICONCOLW+1
01ED C680             (gshell_beta5_yak.):00665                  ldb   #$80       Flag 80 column screen (also buffer # offset for 48x24 icons)
01EF D75D             (gshell_beta5_yak.):00666                  stb   WD48FLAG
01F1 C650             (gshell_beta5_yak.):00667                  ldb   #80        80 column width
01F3 DD24             (gshell_beta5_yak.):00668         WINDPARX std   WINDWSZX   Save # text chars wide screen is & return
01F5 39               (gshell_beta5_yak.):00669                  rts   
                      (gshell_beta5_yak.):00670         
01F6 171436           (gshell_beta5_yak.):00671         FINLINIT lbsr  RESTDIO    Close std I/O, Reopen with current window path
01F9 171CC8           (gshell_beta5_yak.):00672                  lbsr  SETVIEW    Set up the VIEW menu
01FC 0D20             (gshell_beta5_yak.):00673                  tst   RAMSIZE    >128k RAM?
01FE 260D             (gshell_beta5_yak.):00674                  bne   FINLINIX   Yes, skip ahead
0200 7F0318           (gshell_beta5_yak.):00675                  clr   VIEWDESC+QN.ENBL No, disable the view menu (only allow 16k 320x200x4)
0203 7F0141           (gshell_beta5_yak.):00676                  clr   ITM.FMAT+QI.ENBL Disable the FORMAT command
0206 9623             (gshell_beta5_yak.):00677                  lda   WNDWPATH+1 Get window path
0208 C695             (gshell_beta5_yak.):00678                  ldb   #SS.UMBar  Update the menu bar (to enforce above changes)
020A 103F8E           (gshell_beta5_yak.):00679                  os9   I$SetStt
020D 170BA5           (gshell_beta5_yak.):00680         FINLINIX lbsr  STDICONS   Preload built in icons (regular & expanded for some)
0210 161EE0           (gshell_beta5_yak.):00681                  lbra  MOUSENOW   Turn on auto-follow mouse & return from there
                      (gshell_beta5_yak.):00682         
                      (gshell_beta5_yak.):00683         * Shut cursor & scaling off
0213                  (gshell_beta5_yak.):00684         CURSCLOF
                      (gshell_beta5_yak.):00685                IFNE  H6309
                      (gshell_beta5_yak.):00686                  clrd  
                      (gshell_beta5_yak.):00687                ELSE
0213 4F               (gshell_beta5_yak.):00688                  clra
0214 5F               (gshell_beta5_yak.):00689                  clrb
                      (gshell_beta5_yak.):00690                ENDC
0215 3406             (gshell_beta5_yak.):00691                  pshs  d
0217 E665             (gshell_beta5_yak.):00692                  ldb   5,S
0219 3406             (gshell_beta5_yak.):00693                  pshs  d
021B 173407           (gshell_beta5_yak.):00694                  lbsr  SCALESW    Shut scaling off
021E 172CC9           (gshell_beta5_yak.):00695                  lbsr  CURSROFF   Shut cursor off
0221 2018             (gshell_beta5_yak.):00696                  bra   CURSCLOX
                      (gshell_beta5_yak.):00697         
                      (gshell_beta5_yak.):00698         * Clear out signal code, reset up Mouse/keyboard signals
                      (gshell_beta5_yak.):00699         * CHANGED: will copy Dirup signal flag to RECDSGNL
0223 4F               (gshell_beta5_yak.):00700         SETSGNLS clra             Clear out last received signal
0224 F6136A           (gshell_beta5_yak.):00701                  ldb   Dirup      Get Saved Dir updated signal (0 means none)
0227 DD1C             (gshell_beta5_yak.):00702                  std   RECDSGNL   Clear or set saved DIR signal
0229 D623             (gshell_beta5_yak.):00703                  ldb   WNDWPATH+1 D=window path to receive mouse signal from
022B 8E000A           (gshell_beta5_yak.):00704                  ldx   #MOUSIGNL  Mouse signal #
022E 3416             (gshell_beta5_yak.):00705                  pshs  d,X        Save for routine call (both only s/b 8 bit)
0230 173308           (gshell_beta5_yak.):00706                  lbsr  ST.RELEA   Release the mouse signal
0233 173351           (gshell_beta5_yak.):00707                  lbsr  ST.MSSIG   Set the mouse signal 
0236 6C63             (gshell_beta5_yak.):00708                  inc   3,S        Bump up signal number (to keyboard signal)
0238 1732F5           (gshell_beta5_yak.):00709                  lbsr  ST.SSIG    Set keyboard signal
023B 3264             (gshell_beta5_yak.):00710         CURSCLOX leas  4,S        Eat temp stack & return
023D 39               (gshell_beta5_yak.):00711                  rts   
                      (gshell_beta5_yak.):00712         
023E 3440             (gshell_beta5_yak.):00713         GSHSTART pshs  U          Preserve U
0240 327D             (gshell_beta5_yak.):00714                  leas  -3,S       Make room on stack
0242 CE0671           (gshell_beta5_yak.):00715                  ldu   #MOUSPCKT  Point to mouse packet buffer
0245 172E85           (gshell_beta5_yak.):00716                  lbsr  INITSCRN
0248 8DD9             (gshell_beta5_yak.):00717         WAITLOOP bsr   SETSGNLS   Set signals for keyboard & mouse
024A DC1C             (gshell_beta5_yak.):00718                  ldd   RECDSGNL   Get signal
024C 2612             (gshell_beta5_yak.):00719                  bne   SGNLRECD   Got one, process it
024E 3406             (gshell_beta5_yak.):00720                  pshs  d          Preserve 0
0250 171292           (gshell_beta5_yak.):00721                  lbsr  HNDLWAIT   Go sleep, check for signals
0253 EDE1             (gshell_beta5_yak.):00722                  std   ,S++       Save child's signal code
0255 2609             (gshell_beta5_yak.):00723                  bne   SGNLRECD   Got one, process as if local signal
0257 8DCA             (gshell_beta5_yak.):00724                  bsr   SETSGNLS   Set signals again
0259 9E1C             (gshell_beta5_yak.):00725                  ldx   RECDSGNL   Get any new signal
025B 2603             (gshell_beta5_yak.):00726                  bne   SGNLRECD   Got one, process it
025D 103F0A           (gshell_beta5_yak.):00727                  os9   F$Sleep    Sleep until signal received
0260 DC1C             (gshell_beta5_yak.):00728         SGNLRECD ldd   RECDSGNL   Get signal code (only need B portion)
0262 C00C             (gshell_beta5_yak.):00729                  subb  #DIRSIG    Dir update signal?
0264 102700E0         (gshell_beta5_yak.):00730                  lbeq  EQULSIGN   Yes, go do
0268 5C               (gshell_beta5_yak.):00731                  incb             Keyboard signal?
0269 10270082         (gshell_beta5_yak.):00732                  lbeq  CHKKEYBD   yes, handle
026D 5C               (gshell_beta5_yak.):00733                  incb             Mouse signal?
026E 26D8             (gshell_beta5_yak.):00734                  bne   WAITLOOP   No, wait some more
                      (gshell_beta5_yak.):00735         * Mouse signal handling here
0270 DC22             (gshell_beta5_yak.):00736         CHKMOUSE ldd   WNDWPATH   Get window path
0272 3446             (gshell_beta5_yak.):00737                  pshs  d,U
0274 1732A6           (gshell_beta5_yak.):00738                  lbsr  GT.MOUSE   Get mouse packet
0277 3264             (gshell_beta5_yak.):00739                  leas  4,S
0279 E6C4             (gshell_beta5_yak.):00740                  ldb   YT.VALID,U Mouse on current window?
027B 27CB             (gshell_beta5_yak.):00741                  beq   WAITLOOP   No, continue waiting
027D E648             (gshell_beta5_yak.):00742                  ldb   YT.CBSA,U  Is button A pressed?
027F 27C7             (gshell_beta5_yak.):00743                  beq   WAITLOOP   No, continue waiting
0281 E6C816           (gshell_beta5_yak.):00744                  ldb   YT.STAT,U  Is mouse in control region or off window?
0284 2609             (gshell_beta5_yak.):00745                  bne   CHEKMENU   Yes, go check if menu select made
0286 3440             (gshell_beta5_yak.):00746                  pshs  U
0288 17010E           (gshell_beta5_yak.):00747                  lbsr  CHEKSCRN   No, check if user selected something not on menu bar
028B 3262             (gshell_beta5_yak.):00748         SLCTRTRN leas  2,S        Eat stack, poll keyboard/mouse
028D 20B9             (gshell_beta5_yak.):00749                  bra   WAITLOOP
                      (gshell_beta5_yak.):00750         
028F 9623             (gshell_beta5_yak.):00751         CHEKMENU lda   WNDWPATH+1 Get window path
0291 C687             (gshell_beta5_yak.):00752                  ldb   #SS.MnSel  Menu select call
0293 103F8D           (gshell_beta5_yak.):00753                  os9   I$GetStt   Do call (ignore errors... original does)
                      (gshell_beta5_yak.):00754         * Error code added to see if we get errors when GSHELL "freezes"
0296 2403             (gshell_beta5_yak.):00755                  bcc   NoError
0298 103F06           (gshell_beta5_yak.):00756                  os9   F$Exit
029B 8002             (gshell_beta5_yak.):00757         NoError  suba  #YID.CLS   Close box?
029D 271D             (gshell_beta5_yak.):00758                  beq   CLOSEBOX
029F 8002             (gshell_beta5_yak.):00759                  suba  #YID.SUP-MID.CLS   Scroll up arrow?
02A1 271E             (gshell_beta5_yak.):00760                  beq   SCRLLUPL
02A3 4A               (gshell_beta5_yak.):00761                  deca             Scroll down arrow? (YID.SDN)
02A4 2724             (gshell_beta5_yak.):00762                  beq   SCRLLDNR
02A6 4A               (gshell_beta5_yak.):00763                  deca             Scroll right arrow? (YID.SRT)
02A7 2721             (gshell_beta5_yak.):00764                  beq   SCRLLDNR
02A9 4A               (gshell_beta5_yak.):00765                  deca             Scroll left arrow? (YID.SLT)
02AA 2715             (gshell_beta5_yak.):00766                  beq   SCRLLUPL
02AC 800D             (gshell_beta5_yak.):00767                  suba  #YID.TDY-MID.SLT Tandy menu?
02AE 2723             (gshell_beta5_yak.):00768                  beq   TNDYMENU
02B0 8003             (gshell_beta5_yak.):00769                  suba  #YID.FIL-MID.TDY File menu?
02B2 2726             (gshell_beta5_yak.):00770                  beq   FILEMENU
02B4 4A               (gshell_beta5_yak.):00771                  deca             View menu?
02B5 2731             (gshell_beta5_yak.):00772                  beq   VIEWMENU
02B7 4A               (gshell_beta5_yak.):00773                  deca             Disk menu?
02B8 2727             (gshell_beta5_yak.):00774                  beq   DISKMENU
02BA 208C             (gshell_beta5_yak.):00775         WAITRTRN bra   WAITLOOP   Continue waiting (About.. menu will never return item)
                      (gshell_beta5_yak.):00776         
                      (gshell_beta5_yak.):00777         * Called by hitting 'q' or clicking on close box
02BC 171B50           (gshell_beta5_yak.):00778         CLOSEBOX lbsr  SUREQUIT   Do 'are you sure' box
02BF 2087             (gshell_beta5_yak.):00779                  bra   WAITLOOP   Obviously hit 'no', continue
                      (gshell_beta5_yak.):00780         
02C1 DC36             (gshell_beta5_yak.):00781         SCRLLUPL ldd   DEVICNOW   Drive selected?
02C3 2783             (gshell_beta5_yak.):00782                  beq   WAITLOOP   No, continue polling keyboard/mouse
02C5 1704BE           (gshell_beta5_yak.):00783                  lbsr  SCRLLUP1   Scroll up on current drive
02C8 20F0             (gshell_beta5_yak.):00784                  bra   WAITRTRN   Continue polling keyboard/mouse
                      (gshell_beta5_yak.):00785         
02CA DC36             (gshell_beta5_yak.):00786         SCRLLDNR ldd   DEVICNOW   If drive selected, scroll down
02CC 27EC             (gshell_beta5_yak.):00787                  beq   WAITRTRN   continue polling keyboard/mouse
02CE 1704AC           (gshell_beta5_yak.):00788                  lbsr  SCRLLDN1
02D1 20E7             (gshell_beta5_yak.):00789                  bra   WAITRTRN
                      (gshell_beta5_yak.):00790         
                      (gshell_beta5_yak.):00791         * Entry for all 4 ????MENU calls is B=item # selected
02D3 3406             (gshell_beta5_yak.):00792         TNDYMENU pshs  d
02D5 171C08           (gshell_beta5_yak.):00793                  lbsr  TNDYSLCT   Go handle Tandy menu
02D8 20B1             (gshell_beta5_yak.):00794                  bra   SLCTRTRN   Eat stack, continue polling
                      (gshell_beta5_yak.):00795         
02DA 3406             (gshell_beta5_yak.):00796         FILEMENU pshs  d          Save menu option #
02DC 1715DF           (gshell_beta5_yak.):00797                  lbsr  FILESLCT   Do File menu
02DF 20AA             (gshell_beta5_yak.):00798                  bra   SLCTRTRN   Eat stack, continue polling
                      (gshell_beta5_yak.):00799         
02E1 3406             (gshell_beta5_yak.):00800         DISKMENU pshs  d          Save menu option #
02E3 1718BD           (gshell_beta5_yak.):00801                  lbsr  DISKSLCT   Do Disk menu
02E6 20A3             (gshell_beta5_yak.):00802                  bra   SLCTRTRN   Eat stack, continue polling
                      (gshell_beta5_yak.):00803         
02E8 3406             (gshell_beta5_yak.):00804         VIEWMENU pshs  d          Save menu option #
02EA 171BBF           (gshell_beta5_yak.):00805                  lbsr  VIEWSLCT   Do View menu
02ED 209C             (gshell_beta5_yak.):00806                  bra   SLCTRTRN   Eat stack, continue polling
                      (gshell_beta5_yak.):00807         
                      (gshell_beta5_yak.):00808         * Poll keyboard
02EF CC0001           (gshell_beta5_yak.):00809         CHKKEYBD ldd   #1         1 byte length/std in?
02F2 3406             (gshell_beta5_yak.):00810                  pshs  d
02F4 3062             (gshell_beta5_yak.):00811                  leax  2,S        Point to 1 byte buffer
02F6 DC22             (gshell_beta5_yak.):00812                  ldd   WNDWPATH   Get window path
02F8 3416             (gshell_beta5_yak.):00813                  pshs  d,X
02FA 173091           (gshell_beta5_yak.):00814                  lbsr  I.READ     Read key
02FD 3266             (gshell_beta5_yak.):00815                  leas  6,S
02FF ED7E             (gshell_beta5_yak.):00816                  std   -2,S       save byte
0301 2F4C             (gshell_beta5_yak.):00817                  ble   WAITRTN2   No key(?), continue polling
0303 E6E4             (gshell_beta5_yak.):00818                  ldb   ,S         Get key press
0305 C13D             (gshell_beta5_yak.):00819                  cmpb  #'=
0307 273F             (gshell_beta5_yak.):00820                  beq   EQULSIGN   '=' - go refresh current drive/dir selection
0309 C124             (gshell_beta5_yak.):00821                  cmpb  #'$
030B 2721             (gshell_beta5_yak.):00822                  beq   DOLRSIGN   '$' - go set up new resizable shell window
030D C11C             (gshell_beta5_yak.):00823                  cmpb  #28        (Pageup)
030F 27B0             (gshell_beta5_yak.):00824                  beq   SCRLLUPL   Scroll up current dir
0311 C11A             (gshell_beta5_yak.):00825                  cmpb  #26        (PageDown)
0313 27B5             (gshell_beta5_yak.):00826                  beq   SCRLLDNR   Scroll down current dir
0315 C13F             (gshell_beta5_yak.):00827                  cmpb  #63        '?' - call Help routine
0317 276B             (gshell_beta5_yak.):00828                  beq   ICONQUR1
0319 C45F             (gshell_beta5_yak.):00829                  andb  #$5F
031B C151             (gshell_beta5_yak.):00830                  cmpb  #'Q        'Q'uit Gshell
031D 279D             (gshell_beta5_yak.):00831                  beq   CLOSEBOX
031F C153             (gshell_beta5_yak.):00832                  cmpb  #'S        'S'ame screen overlay shell
0321 272F             (gshell_beta5_yak.):00833                  beq   LETTERS
0323 DC22             (gshell_beta5_yak.):00834                  ldd   WNDWPATH   Illegal key, beep at user
0325 3406             (gshell_beta5_yak.):00835                  pshs  d
0327 172BB3           (gshell_beta5_yak.):00836                  lbsr  RINGBELL
032A 3262             (gshell_beta5_yak.):00837                  leas  2,S
032C 2021             (gshell_beta5_yak.):00838                  bra   WAITRTN2   Continue polling
                      (gshell_beta5_yak.):00839         
                      (gshell_beta5_yak.):00840         * Resizable shell
032E C60D             (gshell_beta5_yak.):00841         DOLRSIGN ldb   #IC.SHELL  We want the structure for the SHELL entry 
0330 3406             (gshell_beta5_yak.):00842                  pshs  d
0332 170D65           (gshell_beta5_yak.):00843                  lbsr  FNDIDESC   (Returns D=ptr to proper ID structure) - may change screen type
0335 EDE4             (gshell_beta5_yak.):00844                  std   ,S         Save ptr
0337 CC0001           (gshell_beta5_yak.):00845                  ldd   #1         ? Save flag that we want a double box window for the program
033A 3406             (gshell_beta5_yak.):00846                  pshs  d
033C 8E0334           (gshell_beta5_yak.):00847                  ldx   #SHELLNAM  Point to shell name for F$Fork
033F 3410             (gshell_beta5_yak.):00848                  pshs  X
0341 171C18           (gshell_beta5_yak.):00849                  lbsr  EXCICOND   Execute shell in resizable window
0344 3266             (gshell_beta5_yak.):00850                  leas  6,S
0346 2007             (gshell_beta5_yak.):00851                  bra   WAITRTN2
                      (gshell_beta5_yak.):00852         
                      (gshell_beta5_yak.):00853         * Refresh current drive/dir (NEW RBF CALL, IF FULLY WORKING, MAY OBSOLETE THIS
                      (gshell_beta5_yak.):00854         * ROUTINE FROM BEING CALLED BY A KEYPRESS)
0348 DC36             (gshell_beta5_yak.):00855         EQULSIGN ldd   DEVICNOW   If no drive selected, don't bother
034A 2703             (gshell_beta5_yak.):00856                  beq   WAITRTN2
034C 170423           (gshell_beta5_yak.):00857                  lbsr  DONEWDIR   Go refresh current drive stuff
034F 16FEF6           (gshell_beta5_yak.):00858         WAITRTN2 lbra  WAITLOOP
                      (gshell_beta5_yak.):00859         
                      (gshell_beta5_yak.):00860         * Same screen overlay shell
0352                  (gshell_beta5_yak.):00861         LETTERS
                      (gshell_beta5_yak.):00862                IFNE  H6309
                      (gshell_beta5_yak.):00863                  clrd  
                      (gshell_beta5_yak.):00864                ELSE
0352 4F               (gshell_beta5_yak.):00865                  clra
0353 5F               (gshell_beta5_yak.):00866                  clrb
                      (gshell_beta5_yak.):00867                ENDC
0354 3406             (gshell_beta5_yak.):00868                  pshs  d
0356 3406             (gshell_beta5_yak.):00869                  pshs  d          No parameter for calling program
0358 5C               (gshell_beta5_yak.):00870                  incb  
0359 3406             (gshell_beta5_yak.):00871                  pshs  d          Flag that we want overlay window to run in
035B 8E0334           (gshell_beta5_yak.):00872                  ldx   #SHELLNAM  Point to 'shell'
035E 3410             (gshell_beta5_yak.):00873                  pshs  X
0360 171D0C           (gshell_beta5_yak.):00874                  lbsr  EXECPRGM   Execute shell in overlay window (MAYBE ALLOW RESIZE?)
0363 3268             (gshell_beta5_yak.):00875                  leas  8,S
0365 20E8             (gshell_beta5_yak.):00876                  bra   WAITRTN2   Continue polling after shell exited
                      (gshell_beta5_yak.):00877         
                      (gshell_beta5_yak.):00878         * Printer click
0367 DC34             (gshell_beta5_yak.):00879         ICONPRTR ldd   SELECTED   Is there a file/dir selected?
0369 2716             (gshell_beta5_yak.):00880                  beq   ICONTRS1   No, don't do printer
036B CC0005           (gshell_beta5_yak.):00881                  ldd   #5         Print menu item # from FILES menu
036E EDE4             (gshell_beta5_yak.):00882                  std   ,S
0370 17154B           (gshell_beta5_yak.):00883                  lbsr  FILESLCT
0373 200C             (gshell_beta5_yak.):00884                  bra   ICONTRS1
                      (gshell_beta5_yak.):00885         
                      (gshell_beta5_yak.):00886         * Trash can click
0375 DC34             (gshell_beta5_yak.):00887         ICONTRSH ldd   SELECTED   Is there a file/dir selected?
0377 2708             (gshell_beta5_yak.):00888                  beq   ICONTRS1   No, don't do trash stuff
0379 CC000B           (gshell_beta5_yak.):00889                  ldd   #11        Trash delete option from FILES menu structure (no sure prompt)
037C EDE4             (gshell_beta5_yak.):00890                  std   ,S         (was 10 before we added dump)
037E 17153D           (gshell_beta5_yak.):00891                  lbsr  FILESLCT
0381 160164           (gshell_beta5_yak.):00892         ICONTRS1 lbra  ICONEXIT
                      (gshell_beta5_yak.):00893         
                      (gshell_beta5_yak.):00894         * ? in upper right corner - hot key
0384 3406             (gshell_beta5_yak.):00895         ICONQUR1 pshs  d          Just so it exits properly
0386 C607             (gshell_beta5_yak.):00896                  ldb   #7         Menu item 7 '?'
0388 3406             (gshell_beta5_yak.):00897                  pshs  d
038A 171B53           (gshell_beta5_yak.):00898                  lbsr  TNDYSLCT
038D 20C0             (gshell_beta5_yak.):00899                  bra   WAITRTN2
                      (gshell_beta5_yak.):00900         
038F C607             (gshell_beta5_yak.):00901         ICONQURY ldb   #7         '?' selected, call 'Help' (menu item 7) from Tandy menu
0391 3406             (gshell_beta5_yak.):00902                  pshs  d
0393 171B4A           (gshell_beta5_yak.):00903                  lbsr  TNDYSLCT
0396 160094           (gshell_beta5_yak.):00904                  lbra  ICONEXT1
                      (gshell_beta5_yak.):00905         
                      (gshell_beta5_yak.):00906         * Not menu bar selection, try other stuff on screen (drive, printer, trashcan)
0399 3440             (gshell_beta5_yak.):00907         CHEKSCRN pshs  U
039B EC64             (gshell_beta5_yak.):00908                  ldd   8-4,S
039D 3416             (gshell_beta5_yak.):00909                  pshs  d,X
039F 170974           (gshell_beta5_yak.):00910                  lbsr  ISITICON   Check if drive or icon
03A2 1F03             (gshell_beta5_yak.):00911                  tfr   D,U        Move ptr to icon info to U
03A4 EF7E             (gshell_beta5_yak.):00912                  stu   -2,S       Set CC based on ptr to icon info
03A6 1027012E         (gshell_beta5_yak.):00913                  lbeq  DSLCTALL   Empty spot clicked, clear any currently highlighted stuff
03AA E648             (gshell_beta5_yak.):00914                  ldb   FL.ICONO,U Get selected icon buffer #
03AC C109             (gshell_beta5_yak.):00915                  cmpb  #IC.TRASH  Is it the trash can?
03AE 27C5             (gshell_beta5_yak.):00916                  beq   ICONTRSH   Yes, go handle
03B0 C10F             (gshell_beta5_yak.):00917                  cmpb  #IC.PRNTR  Is it the printer?
03B2 27B3             (gshell_beta5_yak.):00918                  beq   ICONPRTR   Yes, go do it
03B4 C10E             (gshell_beta5_yak.):00919                  cmpb  #IC.QUERY  Is it the question mark?
03B6 27D7             (gshell_beta5_yak.):00920                  beq   ICONQURY   Yes, go do help
03B8 172CD1           (gshell_beta5_yak.):00921                  lbsr  ENBLSOFF   Disable any menu items that deal with specific file
                      (gshell_beta5_yak.):00922         * 6809/6309 - may need ldd instead?
03BB C601             (gshell_beta5_yak.):00923                  ldb   #1         Set flag (Click count?) to 1 on stack
03BD EDE4             (gshell_beta5_yak.):00924                  std   ,S
03BF DC34             (gshell_beta5_yak.):00925                  ldd   SELECTED   Get current selected icon
03C1 2710             (gshell_beta5_yak.):00926                  beq   CHEKSCR2   None, skip ahead
03C3 119334           (gshell_beta5_yak.):00927                  cmpu  SELECTED   Same as previously selected icon?
03C6 2604             (gshell_beta5_yak.):00928                  bne   CHEKSCR1   No, unselect previous icon
03C8 6C61             (gshell_beta5_yak.):00929                  inc   1,S        Yes, same as previous, increase click count to 2
03CA 2007             (gshell_beta5_yak.):00930                  bra   CHEKSCR2
                      (gshell_beta5_yak.):00931         
03CC 3406             (gshell_beta5_yak.):00932         CHEKSCR1 pshs  d          Unselect previously selected icon
03CE 170834           (gshell_beta5_yak.):00933                  lbsr  UNSLICON
03D1 3262             (gshell_beta5_yak.):00934                  leas  2,S
03D3 DF34             (gshell_beta5_yak.):00935         CHEKSCR2 stu   SELECTED   Save newly selected icon
03D5 E648             (gshell_beta5_yak.):00936                  ldb   FL.ICONO,U Get icon # (also type?)
03D7 5A               (gshell_beta5_yak.):00937                  decb  
03D8 1027008A         (gshell_beta5_yak.):00938                  lbeq  ICONTEXT   1=Text file icon
03DC 5A               (gshell_beta5_yak.):00939                  decb  
03DD 2765             (gshell_beta5_yak.):00940                  beq   ICONFLDR   2=Folder (dir) icon
03DF 5A               (gshell_beta5_yak.):00941                  decb  
03E0 102700CB         (gshell_beta5_yak.):00942                  lbeq  ICONPRGM   3=Program (executable) icon
03E4 5A               (gshell_beta5_yak.):00943                  decb  
03E5 2758             (gshell_beta5_yak.):00944                  beq   ICONCLOS   4=Close box for current device title bar
03E7 5A               (gshell_beta5_yak.):00945                  decb  
03E8 2716             (gshell_beta5_yak.):00946                  beq   ICONDRIV   5=Disk drive icon
03EA 5A               (gshell_beta5_yak.):00947                  decb  
03EB 102700AB         (gshell_beta5_yak.):00948                  lbeq  ICONAIF    6=AIF file icon
03EF 5A               (gshell_beta5_yak.):00949                  decb  
03F0 1027009A         (gshell_beta5_yak.):00950                  lbeq  ICON.XXX   7=file with extension already defined by AIF
03F4 5A               (gshell_beta5_yak.):00951                  decb  
03F5 2638             (gshell_beta5_yak.):00952                  bne   ICONEXT2   >8, exit icon check routine
03F7 DC36             (gshell_beta5_yak.):00953                  ldd   DEVICNOW   8=current device title bar (to refresh current dir)
03F9 2734             (gshell_beta5_yak.):00954                  beq   ICONEXT2
03FB 170374           (gshell_beta5_yak.):00955                  lbsr  DONEWDIR   Refresh current dir
03FE 202F             (gshell_beta5_yak.):00956                  bra   ICONEXT2
                      (gshell_beta5_yak.):00957         
                      (gshell_beta5_yak.):00958         * Select new drive icon
0400 DC36             (gshell_beta5_yak.):00959         ICONDRIV ldd   DEVICNOW   Get current device
0402 ED62             (gshell_beta5_yak.):00960                  std   2,S
0404 3406             (gshell_beta5_yak.):00961                  pshs  d
0406 1707FC           (gshell_beta5_yak.):00962                  lbsr  UNSLICON   Unselect current device
0409 EFE4             (gshell_beta5_yak.):00963                  stu   ,S
040B 1707C0           (gshell_beta5_yak.):00964                  lbsr  SELCICON   Select new icon
040E EC4C             (gshell_beta5_yak.):00965                  ldd   FL.FNAME,U Get ptr to drive name
0410 EDE4             (gshell_beta5_yak.):00966                  std   ,S
0412 170196           (gshell_beta5_yak.):00967                  lbsr  NEWDDIR    Get new drive dir
0415 EDE1             (gshell_beta5_yak.):00968                  std   ,S++
0417 2619             (gshell_beta5_yak.):00969                  bne   ICONDROK   Legit, continue
0419 3440             (gshell_beta5_yak.):00970                  pshs  U
041B 1707E7           (gshell_beta5_yak.):00971                  lbsr  UNSLICON   Bad dir, unselect drive
041E 3262             (gshell_beta5_yak.):00972                  leas  2,S
                      (gshell_beta5_yak.):00973                IFNE  H6309
                      (gshell_beta5_yak.):00974                  clrd  
                      (gshell_beta5_yak.):00975                ELSE
0420 4F               (gshell_beta5_yak.):00976                  clra
0421 5F               (gshell_beta5_yak.):00977                  clrb
                      (gshell_beta5_yak.):00978                ENDC
0422 DD34             (gshell_beta5_yak.):00979                  std   SELECTED   Current device=none
0424 EC62             (gshell_beta5_yak.):00980                  ldd   2,S        Did user have a different drive selected before?
0426 2707             (gshell_beta5_yak.):00981                  beq   ICONEXT2   No, exit
0428 3406             (gshell_beta5_yak.):00982                  pshs  d
042A 1707A1           (gshell_beta5_yak.):00983                  lbsr  SELCICON   Re-select the old drive instead
042D 3262             (gshell_beta5_yak.):00984         ICONEXT1 leas  2,S
042F 1600B6           (gshell_beta5_yak.):00985         ICONEXT2 lbra  ICONEXIT
                      (gshell_beta5_yak.):00986         
                      (gshell_beta5_yak.):00987         * User selected new, legitimate drive
0432 C601             (gshell_beta5_yak.):00988         ICONDROK ldb   #1         Enable menu items flag
0434 3406             (gshell_beta5_yak.):00989                  pshs  d
0436 172C5E           (gshell_beta5_yak.):00990                  lbsr  ENFREFLD   Enable drive specific menu items (NOT FILE ONES!)
0439 3262             (gshell_beta5_yak.):00991                  leas  2,S
043B DF36             (gshell_beta5_yak.):00992                  stu   DEVICNOW   Save new current device
043D 20F0             (gshell_beta5_yak.):00993                  bra   ICONEXT2
                      (gshell_beta5_yak.):00994         
                      (gshell_beta5_yak.):00995         * Selected current path close box (go up a directory)
043F 1701C6           (gshell_beta5_yak.):00996         ICONCLOS lbsr  PARENTDR   Change to parent directory or drive
0442 20EB             (gshell_beta5_yak.):00997                  bra   ICONEXT2
                      (gshell_beta5_yak.):00998         
                      (gshell_beta5_yak.):00999         * Selected a folder (directory)
0444 ECE4             (gshell_beta5_yak.):01000         ICONFLDR ldd   ,S         Get # times mouse clicked
0446 5A               (gshell_beta5_yak.):01001                  decb  
0447 2709             (gshell_beta5_yak.):01002                  beq   ONECLIKF   Once, skip ahead
0449 EC4C             (gshell_beta5_yak.):01003                  ldd   FL.FNAME,U Twice, get ptr to folder name
044B 3406             (gshell_beta5_yak.):01004                  pshs  d
044D 170137           (gshell_beta5_yak.):01005                  lbsr  OPENFLDR   Open the folder & return
0450 20DB             (gshell_beta5_yak.):01006                  bra   ICONEXT1
                      (gshell_beta5_yak.):01007         
0452 3440             (gshell_beta5_yak.):01008         ONECLIKF pshs  U
0454 170777           (gshell_beta5_yak.):01009                  lbsr  SELCICON   Highlight (select) the folder
0457 C601             (gshell_beta5_yak.):01010                  ldb   #1
0459 EDE4             (gshell_beta5_yak.):01011                  std   ,S
                      (gshell_beta5_yak.):01012         * added for DUMP
045B F70228           (gshell_beta5_yak.):01013                  stb   ITM.DUMP+QI.ENBL  Enable DUMP on files menu
045E 172C42           (gshell_beta5_yak.):01014                  lbsr  ENBLOPEN   Enable OPEN item on files menu
0461 172C5D           (gshell_beta5_yak.):01015                  lbsr  ENSTRNDL   Enable STAT, RENAME & DELETE on files menu
0464 20C7             (gshell_beta5_yak.):01016                  bra   ICONEXT1   Exit
                      (gshell_beta5_yak.):01017         
                      (gshell_beta5_yak.):01018         * Text file icon selected
0466 C601             (gshell_beta5_yak.):01019         ICONTEXT ldb   #1         Enable LIST & PRINT on Files menu (& DUMP)
0468 3406             (gshell_beta5_yak.):01020                  pshs  d
046A 172C3C           (gshell_beta5_yak.):01021                  lbsr  ENLSTPRT
046D EC62             (gshell_beta5_yak.):01022                  ldd   2,S        Get # of mouse clicks
046F 5A               (gshell_beta5_yak.):01023                  decb  
0470 2607             (gshell_beta5_yak.):01024                  bne   TWOCLIKT   double click, skip ahead
0472 EFE4             (gshell_beta5_yak.):01025                  stu   ,S         Select the icon
0474 170757           (gshell_beta5_yak.):01026                  lbsr  SELCICON
0477 2055             (gshell_beta5_yak.):01027                  bra   ICONTEX1
                      (gshell_beta5_yak.):01028         
0479 8E0001           (gshell_beta5_yak.):01029         TWOCLIKT ldx   #1         Double clicked text file: try executing as shell script
047C AFE4             (gshell_beta5_yak.):01030                  stx   ,S
047E EC4C             (gshell_beta5_yak.):01031                  ldd   FL.FNAME,U Save ptr to filename
0480 3406             (gshell_beta5_yak.):01032                  pshs  d
0482 CC0334           (gshell_beta5_yak.):01033                  ldd   #SHELLNAM  Save ptr to 'shell' and 'use overlay window' flag
0485 3416             (gshell_beta5_yak.):01034                  pshs  d,X
0487 171BE5           (gshell_beta5_yak.):01035                  lbsr  EXECPRGM   Execute shell in overlay window
048A 3266             (gshell_beta5_yak.):01036                  leas  6,S
048C 2040             (gshell_beta5_yak.):01037                  bra   ICONTEX1
                      (gshell_beta5_yak.):01038         
                      (gshell_beta5_yak.):01039         * File with previously found AIF extension clicked on
048E ECE4             (gshell_beta5_yak.):01040         ICON.XXX ldd   ,S         Get # of clicks
0490 5A               (gshell_beta5_yak.):01041                  decb  
0491 272A             (gshell_beta5_yak.):01042                  beq   ICONAIF1   1 click, skip ahead
0493 3440             (gshell_beta5_yak.):01043                  pshs  U
0495 170099           (gshell_beta5_yak.):01044                  lbsr  EXEC.XXX   Double click, execute the program related to icon
0498 2028             (gshell_beta5_yak.):01045                  bra   ICONAIF2
                      (gshell_beta5_yak.):01046         
                      (gshell_beta5_yak.):01047         * AIF file clicked on
049A C601             (gshell_beta5_yak.):01048         ICONAIF  ldb   #1         Enable LIST & PRINT on FILE menu
049C 3406             (gshell_beta5_yak.):01049                  pshs  d
049E 172C08           (gshell_beta5_yak.):01050                  lbsr  ENLSTPRT
04A1 3262             (gshell_beta5_yak.):01051                  leas  2,S
04A3 ECE4             (gshell_beta5_yak.):01052                  ldd   ,S         Get # of clicks
04A5 5A               (gshell_beta5_yak.):01053                  decb  
04A6 2715             (gshell_beta5_yak.):01054                  beq   ICONAIF1   1 click, skip ahead
04A8 3440             (gshell_beta5_yak.):01055                  pshs  U
04AA 1700A4           (gshell_beta5_yak.):01056                  lbsr  EXECAIF    2 clicks, execute program AIF file refers to
04AD 2013             (gshell_beta5_yak.):01057                  bra   ICONAIF2
                      (gshell_beta5_yak.):01058         
                      (gshell_beta5_yak.):01059         * Executable program clicked on
04AF ECE4             (gshell_beta5_yak.):01060         ICONPRGM ldd   ,S         Get # of clicks
04B1 5A               (gshell_beta5_yak.):01061                  decb  
04B2 2709             (gshell_beta5_yak.):01062                  beq   ICONAIF1   1 click, skip ahead
04B4 3406             (gshell_beta5_yak.):01063                  pshs  d
04B6 171405           (gshell_beta5_yak.):01064                  lbsr  FILESLCT   2 clicks, Go to file select menu, option 1 (OPEN)
04B9 3262             (gshell_beta5_yak.):01065                  leas  2,S
04BB 2007             (gshell_beta5_yak.):01066                  bra   ICONPRG1
                      (gshell_beta5_yak.):01067         
04BD 3440             (gshell_beta5_yak.):01068         ICONAIF1 pshs  U
04BF 17070C           (gshell_beta5_yak.):01069                  lbsr  SELCICON   Do select icon on screen
04C2 3262             (gshell_beta5_yak.):01070         ICONAIF2 leas  2,S
04C4 C601             (gshell_beta5_yak.):01071         ICONPRG1 ldb   #1         Enable OPEN item on FILES menu
                      (gshell_beta5_yak.):01072         * Added for DUMP (works on executables, AIF's of both types)
04C6 F70228           (gshell_beta5_yak.):01073                  stb   ITM.DUMP+QI.ENBL  Enable DUMP menu as well
04C9 3406             (gshell_beta5_yak.):01074                  pshs  d
04CB 172BD5           (gshell_beta5_yak.):01075                  lbsr  ENBLOPEN
04CE C601             (gshell_beta5_yak.):01076         ICONTEX1 ldb   #1
04D0 EDE4             (gshell_beta5_yak.):01077                  std   ,S
04D2 172BE0           (gshell_beta5_yak.):01078                  lbsr  ENBLCOPY   Enable COPY, STAT, RENAME, DELETE item on FILES menu
04D5 16FF55           (gshell_beta5_yak.):01079                  lbra  ICONEXT1
                      (gshell_beta5_yak.):01080         
04D8 DC34             (gshell_beta5_yak.):01081         DSLCTALL ldd   SELECTED   Get ptr to current selected icon
04DA 3406             (gshell_beta5_yak.):01082                  pshs  d
04DC 170726           (gshell_beta5_yak.):01083                  lbsr  UNSLICON   Unselect icon
04DF 172BAA           (gshell_beta5_yak.):01084                  lbsr  ENBLSOFF   Shut all FILES menu items off
04E2 3262             (gshell_beta5_yak.):01085                  leas  2,S
                      (gshell_beta5_yak.):01086                IFNE  H6309
                      (gshell_beta5_yak.):01087                  clrd  
                      (gshell_beta5_yak.):01088                ELSE
04E4 4F               (gshell_beta5_yak.):01089                  clra
04E5 5F               (gshell_beta5_yak.):01090                  clrb
                      (gshell_beta5_yak.):01091                ENDC
04E6 DD34             (gshell_beta5_yak.):01092                  std   SELECTED   Set selected file/device to none
04E8 3264             (gshell_beta5_yak.):01093         ICONEXIT leas  4,S
04EA 35C0             (gshell_beta5_yak.):01094                  puls  U,PC
                      (gshell_beta5_yak.):01095         
                      (gshell_beta5_yak.):01096         * Pop up overlay window to ask user for parameters for file we are about to
                      (gshell_beta5_yak.):01097         *  execute.
04EC 3440             (gshell_beta5_yak.):01098         GETPARMS pshs  U
04EE EC64             (gshell_beta5_yak.):01099                  ldd   4,S
04F0 32E8C6           (gshell_beta5_yak.):01100                  leas  -48-10,S   Make room on stack for string copy
04F3 308D0571         (gshell_beta5_yak.):01101                  leax  TENSPACE,PC
04F7 3416             (gshell_beta5_yak.):01102                  pshs  d,X        Save ptr to 10 spaces & ptr to module name we are executing
04F9 308C25           (gshell_beta5_yak.):01103                  leax  <PARMSFOR,PC Save ptr to "parameters for" text
04FC 3410             (gshell_beta5_yak.):01104                  pshs  X
04FE 3066             (gshell_beta5_yak.):01105                  leax  4+2,S
0500 3410             (gshell_beta5_yak.):01106                  pshs  X
0502 172F18           (gshell_beta5_yak.):01107                  lbsr  STRCPY     Copy "parameters for" onto stack
0505 3264             (gshell_beta5_yak.):01108                  leas  4,S
0507 3406             (gshell_beta5_yak.):01109                  pshs  d
0509 172F21           (gshell_beta5_yak.):01110                  lbsr  STRCAT     Add 10 spaces
050C 3264             (gshell_beta5_yak.):01111                  leas  4,S
050E 3406             (gshell_beta5_yak.):01112                  pshs  d
0510 172F1A           (gshell_beta5_yak.):01113                  lbsr  STRCAT     Add module name
0513 3264             (gshell_beta5_yak.):01114                  leas  4,S
0515 30E4             (gshell_beta5_yak.):01115                  leax  ,S
0517 3410             (gshell_beta5_yak.):01116                  pshs  X
0519 171F91           (gshell_beta5_yak.):01117                  lbsr  INPTSCRN   Get parameter info from user
051C 32E83C           (gshell_beta5_yak.):01118                  leas  48+2+10,S  Eat stack & return
051F 35C0             (gshell_beta5_yak.):01119                  puls  U,PC
                      (gshell_beta5_yak.):01120         
0521 506172616D657465 (gshell_beta5_yak.):01121         PARMSFOR fcc   "Parameters for "
     727320666F7220
0530 00               (gshell_beta5_yak.):01122                  fcb   NUL
                      (gshell_beta5_yak.):01123         
                      (gshell_beta5_yak.):01124         * Execute a program for the currently selected file that has an AIF defined 3 char extension
                      (gshell_beta5_yak.):01125         * already assigned to it (ex launch VIEW for a .gif file, for instance)
0531 3440             (gshell_beta5_yak.):01126         EXEC.XXX pshs  U
0533 8D0F             (gshell_beta5_yak.):01127                  bsr   IDESCTST   See if there is an ID.* (Icon Dsc) entry for current FL.* (Icon File Dsc)
0535 274E             (gshell_beta5_yak.):01128                  beq   EXECAIF3   Nope, restore U & return
0537 3406             (gshell_beta5_yak.):01129                  pshs  d          Save ptr to matching FL.* entry
0539 EC4C             (gshell_beta5_yak.):01130                  ldd   FL.FNAME,U Get ptr to filename
053B 3406             (gshell_beta5_yak.):01131                  pshs  d          Save for subroutine
053D 171064           (gshell_beta5_yak.):01132                  lbsr  STPREFIX   Prepend filename to current string buffer
0540 3546             (gshell_beta5_yak.):01133                  puls  d,U        D=string buffer ptr, U=ptr to FL.* entry
0542 2015             (gshell_beta5_yak.):01134                  bra   EXEC.XX1
                      (gshell_beta5_yak.):01135         
                      (gshell_beta5_yak.):01136         * See if there is a ID.* entry for a FL.* entry
                      (gshell_beta5_yak.):01137         * Entry: 0-1,s : RTS address
                      (gshell_beta5_yak.):01138         *        2-3,s : ignored
                      (gshell_beta5_yak.):01139         *        4-5,s : ignored
                      (gshell_beta5_yak.):01140         *        6-7,s : FL.* ptr
                      (gshell_beta5_yak.):01141         * Exit: D=ptr to ID.* structure (0 if none)
0544 EE66             (gshell_beta5_yak.):01142         IDESCTST ldu   4+2,S      Get ptr to file info structure (FL.*)
0546 4F               (gshell_beta5_yak.):01143                  clra  
0547 E649             (gshell_beta5_yak.):01144                  ldb   FL.AIFNO,U Get entry # in ID.* table
0549 3406             (gshell_beta5_yak.):01145                  pshs  d
054B 170B4C           (gshell_beta5_yak.):01146                  lbsr  FNDIDESC   Get ptr to appropriate ID.* table entry
054E EDE1             (gshell_beta5_yak.):01147                  std   ,S++       Set zero flag based on ptr & return
0550 39               (gshell_beta5_yak.):01148                  rts   
                      (gshell_beta5_yak.):01149         
                      (gshell_beta5_yak.):01150         * Execute program from AIF file directly (not based on extension)
0551 3440             (gshell_beta5_yak.):01151         EXECAIF  pshs  U          Save U
0553 8DEF             (gshell_beta5_yak.):01152                  bsr   IDESCTST   Get ID.* ptr
0555 272E             (gshell_beta5_yak.):01153                  beq   EXECAIF3   None, exit
0557 1F03             (gshell_beta5_yak.):01154                  tfr   D,U        Move ID.* ptr to U
0559 A6D812           (gshell_beta5_yak.):01155         EXEC.XX1 lda   [ID.PARAM,U] Get 1st char of parms
055C 271A             (gshell_beta5_yak.):01156                  beq   EXECAIF2   None, skip ahead
055E 813F             (gshell_beta5_yak.):01157                  cmpa  #'?        Question mark (prompt for parms)?
0560 260C             (gshell_beta5_yak.):01158                  bne   EXECAIFN   No, use parms raw
0562 EC4E             (gshell_beta5_yak.):01159                  ldd   ID.MNAME,U Get ptr to module name
0564 3406             (gshell_beta5_yak.):01160                  pshs  d
0566 8D84             (gshell_beta5_yak.):01161                  bsr   GETPARMS   Prompt user for parms (uses overlay with module name)
0568 EDE1             (gshell_beta5_yak.):01162                  std   ,S++       Size of user response
056A 270C             (gshell_beta5_yak.):01163                  beq   EXECAIF2   Just hit enter, skip ahead
056C 2003             (gshell_beta5_yak.):01164                  bra   EXECAIFP
                      (gshell_beta5_yak.):01165         
056E ECC812           (gshell_beta5_yak.):01166         EXECAIFN ldd   ID.PARAM,U Get ptr to parms string
0571 3406             (gshell_beta5_yak.):01167         EXECAIFP pshs  d          Save ptr to parms string
0573 17102E           (gshell_beta5_yak.):01168                  lbsr  STPREFIX   Prefix that onto Fork line string
0576 3262             (gshell_beta5_yak.):01169                  leas  2,S
0578                  (gshell_beta5_yak.):01170         EXECAIF2
                      (gshell_beta5_yak.):01171                IFNE  H6309
                      (gshell_beta5_yak.):01172                  clrd             Flag=0 means create new resizable window?
                      (gshell_beta5_yak.):01173                ELSE
0578 4F               (gshell_beta5_yak.):01174                  clra             Flag=0 means create new resizable window?
0579 5F               (gshell_beta5_yak.):01175                  clrb
                      (gshell_beta5_yak.):01176                ENDC
057A 3446             (gshell_beta5_yak.):01177                  pshs  d,U        Save flag(?) & ID.* ptr
057C EC4E             (gshell_beta5_yak.):01178                  ldd   ID.MNAME,U Get ptr to module name to fork
057E 3406             (gshell_beta5_yak.):01179                  pshs  d
0580 1719D9           (gshell_beta5_yak.):01180                  lbsr  EXCICOND   Go execute module in (resizable or full screen) window
0583 3266             (gshell_beta5_yak.):01181                  leas  6,S        Eat temp stack, restore U & return
0585 35C0             (gshell_beta5_yak.):01182         EXECAIF3 puls  U,PC
                      (gshell_beta5_yak.):01183         
                      (gshell_beta5_yak.):01184         * Open folder
0587 3440             (gshell_beta5_yak.):01185         OPENFLDR pshs  U
0589 EE64             (gshell_beta5_yak.):01186                  ldu   4,S
058B 3440             (gshell_beta5_yak.):01187                  pshs  U
058D 17297E           (gshell_beta5_yak.):01188                  lbsr  CHGDDIR    Change dir to newly selected folder
0590 EDE1             (gshell_beta5_yak.):01189                  std   ,S++
0592 2612             (gshell_beta5_yak.):01190                  bne   OPENFLD1
0594 8E0471           (gshell_beta5_yak.):01191                  ldx   #DDIRNAME  Append new dir to dir name on drive bar
0597 3410             (gshell_beta5_yak.):01192                  pshs  X
0599 172E76           (gshell_beta5_yak.):01193                  lbsr  STREND     Find end of current path
059C 3262             (gshell_beta5_yak.):01194                  leas  2,S
059E 1F01             (gshell_beta5_yak.):01195                  tfr   D,X
05A0 C62F             (gshell_beta5_yak.):01196                  ldb   #'/        Add slash to end of path
05A2 E780             (gshell_beta5_yak.):01197                  stb   ,X+
05A4 2018             (gshell_beta5_yak.):01198                  bra   NEWDDIR1
                      (gshell_beta5_yak.):01199         
05A6 308C31           (gshell_beta5_yak.):01200         OPENFLD1 leax  <CANTFLDR,PC
05A9 2024             (gshell_beta5_yak.):01201                  bra   OPENFLD2
                      (gshell_beta5_yak.):01202         
05AB 3440             (gshell_beta5_yak.):01203         NEWDDIR  pshs  U
05AD EE64             (gshell_beta5_yak.):01204                  ldu   4,S
05AF 3440             (gshell_beta5_yak.):01205                  pshs  U
05B1 17295A           (gshell_beta5_yak.):01206                  lbsr  CHGDDIR
05B4 EDE1             (gshell_beta5_yak.):01207                  std   ,S++
05B6 2614             (gshell_beta5_yak.):01208                  bne   NEWDDIR2
05B8 170B0D           (gshell_beta5_yak.):01209                  lbsr  KILIBUFS   Kill previous dir's icon buffers & get/put buffers?
05BB 8E0471           (gshell_beta5_yak.):01210                  ldx   #DDIRNAME  Point to full path to current data directory
                      (gshell_beta5_yak.):01211         
05BE 3450             (gshell_beta5_yak.):01212         NEWDDIR1 pshs  X,U
05C0 172E5A           (gshell_beta5_yak.):01213                  lbsr  STRCPY     Add new path (,U) to end of current path (,X)
05C3 3264             (gshell_beta5_yak.):01214                  leas  4,S
05C5 1701AA           (gshell_beta5_yak.):01215                  lbsr  DONEWDIR   Refresh current drive on screen
05C8 C601             (gshell_beta5_yak.):01216                  ldb   #1         Exit with D=1
05CA 200B             (gshell_beta5_yak.):01217                  bra   NEWDDIR3
                      (gshell_beta5_yak.):01218         
05CC 308C22           (gshell_beta5_yak.):01219         NEWDDIR2 leax  <CANTDEVC,PC
05CF 3410             (gshell_beta5_yak.):01220         OPENFLD2 pshs  X
05D1 170C71           (gshell_beta5_yak.):01221                  lbsr  OLAYPRNT
05D4 3262             (gshell_beta5_yak.):01222                  leas  2,S
05D6 5F               (gshell_beta5_yak.):01223                  clrb  
05D7 4F               (gshell_beta5_yak.):01224         NEWDDIR3 clra  
05D8 35C0             (gshell_beta5_yak.):01225                  puls  U,PC
                      (gshell_beta5_yak.):01226         
05DA 43616E2774206F70 (gshell_beta5_yak.):01227         CANTFLDR fcc   "Can't open this folder"
     656E207468697320
     666F6C646572
05F0 00               (gshell_beta5_yak.):01228                  fcb   NUL
                      (gshell_beta5_yak.):01229         
05F1 43616E2774206F70 (gshell_beta5_yak.):01230         CANTDEVC fcc   "Can't open this device"
     656E207468697320
     646576696365
0607 00               (gshell_beta5_yak.):01231                  fcb   NUL
                      (gshell_beta5_yak.):01232         
                      (gshell_beta5_yak.):01233         * Change to parent directory (clicked on dir bar close box)
0608 3440             (gshell_beta5_yak.):01234         PARENTDR pshs  U
060A 1706F8           (gshell_beta5_yak.):01235                  lbsr  FNDSLASH   Find slash NOTE: ONLY CALLED ONCE, EMBED!
060D ED7E             (gshell_beta5_yak.):01236                  std   -2,S       On root?
060F 2617             (gshell_beta5_yak.):01237                  bne   PARENTD1   Yes, skip ahead
0611 308C33           (gshell_beta5_yak.):01238                  leax  <DOTDOT,PC Change directory to '..'
0614 3410             (gshell_beta5_yak.):01239                  pshs  X
0616 1728F5           (gshell_beta5_yak.):01240                  lbsr  CHGDDIR
0619 8E0471           (gshell_beta5_yak.):01241                  ldx   #DDIRNAME  Get ptr to current full path to data dir.
061C AFE4             (gshell_beta5_yak.):01242                  stx   ,S
061E 1714C3           (gshell_beta5_yak.):01243                  lbsr  TERMSLSH   Cut data dir off one directory level earlier
0621 3262             (gshell_beta5_yak.):01244                  leas  2,S        Eat stack
0623 17014C           (gshell_beta5_yak.):01245                  lbsr  DONEWDIR   Refresh current drive on screen
0626 201D             (gshell_beta5_yak.):01246                  bra   PARENTD2
                      (gshell_beta5_yak.):01247         
                      (gshell_beta5_yak.):01248         * On root directory of current drive, unselect drive itself
0628 5F               (gshell_beta5_yak.):01249         PARENTD1 clrb             D=0
0629 3406             (gshell_beta5_yak.):01250                  pshs  d          Save it
062B 172A69           (gshell_beta5_yak.):01251                  lbsr  ENFREFLD   Disable Drive specific menu items
062E 17024C           (gshell_beta5_yak.):01252                  lbsr  CLRDSCRN   Wipe out current dir icon window, reset scroll bars to 0,0
0631 DC36             (gshell_beta5_yak.):01253                  ldd   DEVICNOW   Get ptr to table for current selected drive 
0633 EDE4             (gshell_beta5_yak.):01254                  std   ,S         Save it
0635 1705CD           (gshell_beta5_yak.):01255                  lbsr  UNSLICON   Unselect the current drive
0638 3262             (gshell_beta5_yak.):01256                  leas  2,S
                      (gshell_beta5_yak.):01257                IFNE  H6309
                      (gshell_beta5_yak.):01258                  clrd  
                      (gshell_beta5_yak.):01259                ELSE
063A 4F               (gshell_beta5_yak.):01260                  clra
063B 5F               (gshell_beta5_yak.):01261                  clrb
                      (gshell_beta5_yak.):01262                ENDC
063C DD2C             (gshell_beta5_yak.):01263                  std   STRTICON   Set ptr to start icon for screen to NONE
063E DD34             (gshell_beta5_yak.):01264                  std   SELECTED   Current selected icon to NONE
0640 DD36             (gshell_beta5_yak.):01265                  std   DEVICNOW   Current selected device to NONE
0642 170A83           (gshell_beta5_yak.):01266                  lbsr  KILIBUFS   Kill icon table & get/put buffers
0645 35C0             (gshell_beta5_yak.):01267         PARENTD2 puls  U,PC
                      (gshell_beta5_yak.):01268         
0647 2E2E             (gshell_beta5_yak.):01269         DOTDOT   fcc   ".."
0649 00               (gshell_beta5_yak.):01270                  fcb   NUL
                      (gshell_beta5_yak.):01271         
064A 1600D4           (gshell_beta5_yak.):01272         KILPDS00 lbra  KILPDS16   Eat stack & exit
                      (gshell_beta5_yak.):01273         
                      (gshell_beta5_yak.):01274         * Kill process info for a process that has stopped (update linked list)
                      (gshell_beta5_yak.):01275         * Entry: 0-1,s RTS address
                      (gshell_beta5_yak.):01276         *        2-3,s ptr to GD.* (process table entry ptr) to kill
064D 3440             (gshell_beta5_yak.):01277         KILPDESC pshs  U
                      (gshell_beta5_yak.):01278                IFNE  H6309
                      (gshell_beta5_yak.):01279                  clrd             No entry found yet
                      (gshell_beta5_yak.):01280                ELSE
064F 4F               (gshell_beta5_yak.):01281                  clra
0650 5F               (gshell_beta5_yak.):01282                  clrb
                      (gshell_beta5_yak.):01283                ENDC
0651 3406             (gshell_beta5_yak.):01284                  pshs  d          Save it
0653 DE38             (gshell_beta5_yak.):01285                  ldu   PTBLSPTR   Get ptr to start of process descriptor table
0655 27F3             (gshell_beta5_yak.):01286                  beq   KILPDS00   None, exit
0657 EC66             (gshell_beta5_yak.):01287                  ldd   6,S        Get process table entry ptr we are to kill
0659 27EF             (gshell_beta5_yak.):01288                  beq   KILPDS00   None, exit
065B 11A366           (gshell_beta5_yak.):01289                  cmpu  6,S        Is the requested entry to kill the 1st entry in table?
065E 270E             (gshell_beta5_yak.):01290                  beq   KILPDES2   Yes, skip ahead
                      (gshell_beta5_yak.):01291         * Entry other than 1st to kill
0660 EFE4             (gshell_beta5_yak.):01292         KILPDES1 stu   ,S         Save ptr to entry previous to one we want to kill
0662 EEC81A           (gshell_beta5_yak.):01293                  ldu   GD.LINK,U  Get ptr to next process table entry in chain
                      (gshell_beta5_yak.):01294         * 6809/6309 Following line should be removed (flags from stu are inherent from LDU)
0665 EF7E             (gshell_beta5_yak.):01295                  stu   -2,S
0667 2705             (gshell_beta5_yak.):01296                  beq   KILPDES2   No other entries, exit (if you follow below) (REALLY STUPID)
0669 11A366           (gshell_beta5_yak.):01297                  cmpu  6,S        Is this the entry we are trying to kill?
066C 26F2             (gshell_beta5_yak.):01298                  bne   KILPDES1   No, check next link
                      (gshell_beta5_yak.):01299         * Remove entry from linked list (next entry in list pointed to by U)
066E EF7E             (gshell_beta5_yak.):01300         KILPDES2 stu   -2,S       Next entry a legit one?
0670 27D8             (gshell_beta5_yak.):01301                  beq   KILPDS00   No, exit
0672 119338           (gshell_beta5_yak.):01302                  cmpu  PTBLSPTR   Is it the 1st entry?
0675 2607             (gshell_beta5_yak.):01303                  bne   KILPDES3   No, skip ahead
0677 ECC81A           (gshell_beta5_yak.):01304                  ldd   GD.LINK,U  Get ptr to next process table entry
067A DD38             (gshell_beta5_yak.):01305                  std   PTBLSPTR   Reset this ptr as the 1st process table entry
067C 2008             (gshell_beta5_yak.):01306                  bra   KILPDES4   Skip ahead
                      (gshell_beta5_yak.):01307         
                      (gshell_beta5_yak.):01308         * one to remove is not 1st entry
067E ECC81A           (gshell_beta5_yak.):01309         KILPDES3 ldd   GD.LINK,U  Get next entry in linked list
0681 AEE4             (gshell_beta5_yak.):01310                  ldx   ,S         Get ptr to one previous to the one we want to kill
0683 ED881A           (gshell_beta5_yak.):01311                  std   GD.LINK,X  Repoint previous entry to link to next entry (bypass us)
0686 CC001A           (gshell_beta5_yak.):01312         KILPDES4 ldd   #GD.LINK   Offset to link ptr in structure
                      (gshell_beta5_yak.):01313                IFNE  H6309
                      (gshell_beta5_yak.):01314                  addr  u,d        Point to next link ptr entry in current table entry
                      (gshell_beta5_yak.):01315                ELSE
                      (gshell_beta5_yak.):01316         * 6809 - use DP scratch var
0689 3440             (gshell_beta5_yak.):01317                  pshs  u
068B E3E1             (gshell_beta5_yak.):01318                  addd  ,s++
                      (gshell_beta5_yak.):01319                ENDC
068D 10930D           (gshell_beta5_yak.):01320                  cmpd  PTBLNEXT   Same as next available process descriptor link?
0690 2610             (gshell_beta5_yak.):01321                  bne   KILPDES6   No, skip ahead
0692 ECE4             (gshell_beta5_yak.):01322                  ldd   ,S         Get previous entry ptr
0694 2707             (gshell_beta5_yak.):01323                  beq   KILPDES5   None, skip ahead
0696 C3001A           (gshell_beta5_yak.):01324                  addd  #GD.LINK   Offset to next link ptr
0699 DD0D             (gshell_beta5_yak.):01325                  std   PTBLNEXT   Save as ptr to next available process descriptor link
069B 2005             (gshell_beta5_yak.):01326                  bra   KILPDES6
                      (gshell_beta5_yak.):01327         
069D 30A838           (gshell_beta5_yak.):01328         KILPDES5 leax  <PTBLSPTR,Y Point to 1st entry
06A0 9F0D             (gshell_beta5_yak.):01329                  stx   PTBLNEXT   Save as next available process desc. link
06A2 EC4C             (gshell_beta5_yak.):01330         KILPDES6 ldd   GD.WPATH,U Get window path for process
06A4 2D3E             (gshell_beta5_yak.):01331                  blt   KILPDS10   If negative, skip ahead
06A6 109322           (gshell_beta5_yak.):01332                  cmpd  WNDWPATH   Same as current GSHELL path?
06A9 260C             (gshell_beta5_yak.):01333                  bne   KILPDES7   No, skip ahead
06AB 171CE5           (gshell_beta5_yak.):01334                  lbsr  KILLOLAY   Remove overlay window it was running in.
06AE 0D20             (gshell_beta5_yak.):01335                  tst   RAMSIZE    128k RAM machine?
06B0 263B             (gshell_beta5_yak.):01336                  bne   KILPDS12   >=256K, skip ahead
06B2 172824           (gshell_beta5_yak.):01337                  lbsr  CLRSCRN    on 128k, clear GSHELL screen 1st
06B5 2036             (gshell_beta5_yak.):01338                  bra   KILPDS12
                      (gshell_beta5_yak.):01339         
                      (gshell_beta5_yak.):01340         * Process killed was on different path than GSHELL itself is on - either it's own
                      (gshell_beta5_yak.):01341         * screen, or device window shared on same screen as other device windows
06B7 EC4E             (gshell_beta5_yak.):01342         KILPDES7 ldd   GD.DW.OW,U Did process successfully launch?
06B9 2717             (gshell_beta5_yak.):01343                  beq   KILPDES8   No, just make GShell's window active
06BB EC4C             (gshell_beta5_yak.):01344                  ldd   GD.WPATH,U Yes, get path to the window that the process was running in
06BD 3406             (gshell_beta5_yak.):01345                  pshs  d          Make it the active window (is this to force an INIZ?)
06BF 172F24           (gshell_beta5_yak.):01346                  lbsr  SELECT
06C2 DC22             (gshell_beta5_yak.):01347                  ldd   WNDWPATH   Get GSHELL window path
06C4 EDE4             (gshell_beta5_yak.):01348                  std   ,S         Select it
06C6 172F1D           (gshell_beta5_yak.):01349                  lbsr  SELECT     Select window
06C9 EC4C             (gshell_beta5_yak.):01350                  ldd   GD.WPATH,U Get process' window path again
06CB EDE4             (gshell_beta5_yak.):01351                  std   ,S         End process' window
06CD 172F0C           (gshell_beta5_yak.):01352                  lbsr  DWEND      Tested - this should be save on VDG screen (just ignored)
06D0 2007             (gshell_beta5_yak.):01353                  bra   KILPDES9
                      (gshell_beta5_yak.):01354         
06D2 DC22             (gshell_beta5_yak.):01355         KILPDES8 ldd   WNDWPATH   Get path to GSHELL window
06D4 3406             (gshell_beta5_yak.):01356                  pshs  d          Make it the active window
06D6 172F0D           (gshell_beta5_yak.):01357                  lbsr  SELECT
06D9 3262             (gshell_beta5_yak.):01358         KILPDES9 leas  2,S        Eat temp stack
06DB EC4C             (gshell_beta5_yak.):01359                  ldd   GD.WPATH,U Get path to process' window
06DD 3406             (gshell_beta5_yak.):01360                  pshs  d          Close path to window
06DF 172D0B           (gshell_beta5_yak.):01361                  lbsr  I.CLOSE
06E2 2007             (gshell_beta5_yak.):01362                  bra   KILPDS11
                      (gshell_beta5_yak.):01363         
06E4 DC22             (gshell_beta5_yak.):01364         KILPDS10 ldd   WNDWPATH   Get path to GSHELL window
06E6 3406             (gshell_beta5_yak.):01365                  pshs  d
06E8 172EFB           (gshell_beta5_yak.):01366                  lbsr  SELECT     Make it the active window
06EB 3262             (gshell_beta5_yak.):01367         KILPDS11 leas  2,S        Eat stack
06ED ECC818           (gshell_beta5_yak.):01368         KILPDS12 ldd   GD.SCRNO,U Get screen #
06F0 2F07             (gshell_beta5_yak.):01369                  ble   KILPDS13   If negative (-2=VDG or -1=fullscreen) or 0 (overlay), skip ahead
06F2 3406             (gshell_beta5_yak.):01370                  pshs  d          Save screen #
                      (gshell_beta5_yak.):01371         * 6809/6309 UNLKWNDW only called once, could embed
06F4 172466           (gshell_beta5_yak.):01372                  lbsr  UNLKWNDW   Unlink window from active window/screen list
06F7 3262             (gshell_beta5_yak.):01373                  leas  2,S
06F9 1083FFFE         (gshell_beta5_yak.):01374         KILPDS13 cmpd  #-2        Is it VDG?
06FD 2605             (gshell_beta5_yak.):01375                  bne   KILPD13A   No, check for alternate window name(?)
06FF 8601             (gshell_beta5_yak.):01376                  lda   #1         Flag we are changing from VDG back to window
0701 1731D5           (gshell_beta5_yak.):01377                  lbsr  ModDesc    Change descriptor back to original (ignore errors)
0704 EC42             (gshell_beta5_yak.):01378         KILPD13A ldd   GD.INDVC,U ??? Get ptr to Alternate window device name? (always 0, must have been reserved)
0706 2707             (gshell_beta5_yak.):01379                  beq   KILPDS14   None, skip ahead
0708 3406             (gshell_beta5_yak.):01380                  pshs  d
070A 172B46           (gshell_beta5_yak.):01381                  lbsr  FREE       ??? Free memory of some sort?
070D 3262             (gshell_beta5_yak.):01382                  leas  2,S
070F ECC4             (gshell_beta5_yak.):01383         KILPDS14 ldd   GD.MNAME,U Get ptr to process module name
0711 2707             (gshell_beta5_yak.):01384                  beq   KILPDS15   None, skip ahead
0713 3406             (gshell_beta5_yak.):01385                  pshs  d          ??? Free mem for that?
0715 172B3B           (gshell_beta5_yak.):01386                  lbsr  FREE
0718 3262             (gshell_beta5_yak.):01387                  leas  2,S
071A 3440             (gshell_beta5_yak.):01388         KILPDS15 pshs  U          Save ptr to GD.* entry
071C 172B34           (gshell_beta5_yak.):01389                  lbsr  FREE       Free the memory for the GD.* entry
071F 3262             (gshell_beta5_yak.):01390                  leas  2,S
0721 3262             (gshell_beta5_yak.):01391         KILPDS16 leas  2,S
0723 35C0             (gshell_beta5_yak.):01392                  puls  U,PC
                      (gshell_beta5_yak.):01393         
                      (gshell_beta5_yak.):01394         * Allocate & setup process entry for our table of forked processes
                      (gshell_beta5_yak.):01395         * Exit: D=Ptr to new process descriptor we initialized
                      (gshell_beta5_yak.):01396         * Y= data mem start ptr ($0000)
0725 3440             (gshell_beta5_yak.):01397         SETPDESC pshs  U          Save U (I believe ID.* ptr)
0727 CC001E           (gshell_beta5_yak.):01398                  ldd   #GD.SIZE   Size we want to allocate
072A 3406             (gshell_beta5_yak.):01399                  pshs  d          Save for subroutine
072C 170A16           (gshell_beta5_yak.):01400                  lbsr  MEMSPACE   Allocate the memory
                      (gshell_beta5_yak.):01401         * NOTE: If we couldn't allocate the memory, MEMSPACE shows a popup "Out of memory" window
072F 1F03             (gshell_beta5_yak.):01402                  tfr   D,U        Move ptr to new GD.* entry to U
0731 EDB80D           (gshell_beta5_yak.):01403                  std   [PTBLNEXT,Y] Save ptr to next available spot for process descriptor 
0734 30C81A           (gshell_beta5_yak.):01404                  leax  GD.LINK,U  Point to next link
0737 9F0D             (gshell_beta5_yak.):01405                  stx   PTBLNEXT   Save ptr to next available
0739 EC66             (gshell_beta5_yak.):01406                  ldd   4+2,S
073B EDE4             (gshell_beta5_yak.):01407                  std   ,S
073D 1709E9           (gshell_beta5_yak.):01408                  lbsr  PUTSTRNG
0740 3262             (gshell_beta5_yak.):01409                  leas  2,S
0742 EDC4             (gshell_beta5_yak.):01410                  std   GD.MNAME,U Save ptr to module (and possibly path) name
0744 1F01             (gshell_beta5_yak.):01411                  tfr   d,x        Copy (possibly) full path to X
0746 172BF5           (gshell_beta5_yak.):01412                  lbsr  SKPSLASH   Get ptr to module name itself
0749 AFC81C           (gshell_beta5_yak.):01413                  stx   GD.JSTNM,u Save that as well
                      (gshell_beta5_yak.):01414                IFNE  H6309
                      (gshell_beta5_yak.):01415                  clrd  
                      (gshell_beta5_yak.):01416                ELSE
074C 4F               (gshell_beta5_yak.):01417                  clra
074D 5F               (gshell_beta5_yak.):01418                  clrb
                      (gshell_beta5_yak.):01419                ENDC
074E ED48             (gshell_beta5_yak.):01420                  std   GD.MTYPE,U Default stuff to zeros
0750 ED42             (gshell_beta5_yak.):01421                  std   GD.INDVC,U ??? to 0
0752 ED44             (gshell_beta5_yak.):01422                  std   GD.PRCID,U Process ID # to 0
0754 ED4A             (gshell_beta5_yak.):01423                  std   GD.MEMSZ,U memory size to 0 pages
0756 ED4E             (gshell_beta5_yak.):01424                  std   GD.DW.OW,U Init flag - just create GD.* entry, haven't inited window yet
0758 30C81A           (gshell_beta5_yak.):01425                  leax  GD.LINK,U  Point to next link ptr
075B ED84             (gshell_beta5_yak.):01426                  std   ,X         Set next link to empty
075D CCFFFF           (gshell_beta5_yak.):01427                  ldd   #-1
0760 ED46             (gshell_beta5_yak.):01428                  std   GD.STATS,U Last status to "running"
0762 ED4C             (gshell_beta5_yak.):01429                  std   GD.WPATH,U Window path to uninitialized
0764 ED83             (gshell_beta5_yak.):01430                  std   ,--X       GD.SCRNO=-1 (uninitialized)
0766 ED83             (gshell_beta5_yak.):01431                  std   ,--X       GD.YEND=-1 (uninitialized)
0768 ED83             (gshell_beta5_yak.):01432                  std   ,--X       GD.XEND=-1 (uninitialized)
076A ED83             (gshell_beta5_yak.):01433                  std   ,--X       GD.YSTRT=-1 (uninitialized)
076C ED83             (gshell_beta5_yak.):01434                  std   ,--X       GD.XSTRT=-1 (uninitialized)
076E 1F30             (gshell_beta5_yak.):01435                  tfr   U,D        Move ptr to our new process descriptor to D for exit
0770 35C0             (gshell_beta5_yak.):01436                  puls  U,PC
                      (gshell_beta5_yak.):01437         
0772 170FFE           (gshell_beta5_yak.):01438         DONEWDIR lbsr  KILLFTBL   Kill current file table in memory
0775 171068           (gshell_beta5_yak.):01439                  lbsr  RSTXYPTR   Reset x/y pointers for icon starts
0778 17012D           (gshell_beta5_yak.):01440                  lbsr  NEWDIREC   Redraw current dir screen
077B 2013             (gshell_beta5_yak.):01441                  bra   DRAWSCRN   Redraw screen & return
                      (gshell_beta5_yak.):01442         *         bra   DONEWDR1   Redraw screen & return
                      (gshell_beta5_yak.):01443         
077D D629             (gshell_beta5_yak.):01444         SCRLLDN1 ldb   SCREENOW+1
077F D12B             (gshell_beta5_yak.):01445                  cmpb  NSCREENS+1
0781 2C0C             (gshell_beta5_yak.):01446                  bge   SCRLLUDX
0783 5C               (gshell_beta5_yak.):01447                  incb  
0784 2005             (gshell_beta5_yak.):01448                  bra   SCRLLDN2
                      (gshell_beta5_yak.):01449         
0786 D629             (gshell_beta5_yak.):01450         SCRLLUP1 ldb   SCREENOW+1
0788 2705             (gshell_beta5_yak.):01451                  beq   SCRLLUDX
078A 5A               (gshell_beta5_yak.):01452                  decb  
078B D729             (gshell_beta5_yak.):01453         SCRLLDN2 stb   SCREENOW+1
078D 2001             (gshell_beta5_yak.):01454         DONEWDR1 bra   DRAWSCRN   Slight speed up vs. original BSR
                      (gshell_beta5_yak.):01455         
078F 39               (gshell_beta5_yak.):01456         SCRLLUDX rts              No other RTS nearby we can share
                      (gshell_beta5_yak.):01457         
                      (gshell_beta5_yak.):01458         * Update screen: does 1) update directory bar, 2) update icons, 3) update
                      (gshell_beta5_yak.):01459         *   scroll bar marker.
0790 3440             (gshell_beta5_yak.):01460         DRAWSCRN pshs  U
0792 1728F7           (gshell_beta5_yak.):01461                  lbsr  ENBLSOFF   Disable any menu items that deal with a specific file
0795 DC22             (gshell_beta5_yak.):01462                  ldd   WNDWPATH   Get GSHELL path
0797 3416             (gshell_beta5_yak.):01463                  pshs  d,X
0799 17194B           (gshell_beta5_yak.):01464                  lbsr  NOMOUSE    Shut auto-follow AND mouse cursor off
079C 1700B7           (gshell_beta5_yak.):01465                  lbsr  WIPICONS   Wipe icons off screen (should not touch dir bar except the line under it)
                      (gshell_beta5_yak.):01466                IFNE  H6309
                      (gshell_beta5_yak.):01467                  clrd  
                      (gshell_beta5_yak.):01468                ELSE
079F 4F               (gshell_beta5_yak.):01469                  clra
07A0 5F               (gshell_beta5_yak.):01470                  clrb
                      (gshell_beta5_yak.):01471                ENDC
07A1 DD34             (gshell_beta5_yak.):01472                  std   SELECTED   0 out currently selected icon ptr
07A3 DC1E             (gshell_beta5_yak.):01473                  ldd   MAXICONS   Get # icons/screen
                      (gshell_beta5_yak.):01474                IFNE  H6309
                      (gshell_beta5_yak.):01475                  muld  SCREENOW   Multiply by screen set #
                      (gshell_beta5_yak.):01476                  stw   2,s        Save result
                      (gshell_beta5_yak.):01477                ELSE
07A5 3430             (gshell_beta5_yak.):01478                  pshs  x,y
07A7 9E28             (gshell_beta5_yak.):01479                  ldx   SCREENOW
07A9 1730A7           (gshell_beta5_yak.):01480                  lbsr  MUL16
07AC 3530             (gshell_beta5_yak.):01481                  puls  x,y
07AE EF62             (gshell_beta5_yak.):01482                  stu   2,s
                      (gshell_beta5_yak.):01483                ENDC
07B0 DE30             (gshell_beta5_yak.):01484                  ldu   FTBLSPTR   Get ptr to file icon descriptor table
07B2 2002             (gshell_beta5_yak.):01485                  bra   DRAWSCR2
                      (gshell_beta5_yak.):01486         
07B4 EE4A             (gshell_beta5_yak.):01487         DRAWSCR1 ldu   FL.LINK,U
07B6 EC62             (gshell_beta5_yak.):01488         DRAWSCR2 ldd   2,S        Get screen set # we want to print
                      (gshell_beta5_yak.):01489                IFNE  H6309
                      (gshell_beta5_yak.):01490                  decd             Base 0
                      (gshell_beta5_yak.):01491                ELSE
07B8 830001           (gshell_beta5_yak.):01492                  subd  #$0001
                      (gshell_beta5_yak.):01493                ENDC
07BB ED62             (gshell_beta5_yak.):01494                  std   2,S        Save it back
07BD 2CF5             (gshell_beta5_yak.):01495                  bge   DRAWSCR1   If not 1st, skip ahead
07BF DF2C             (gshell_beta5_yak.):01496                  stu   STRTICON   Save ptr to 1st icon on current screen
                      (gshell_beta5_yak.):01497                IFNE  H6309
                      (gshell_beta5_yak.):01498                  clrd  
                      (gshell_beta5_yak.):01499                ELSE
07C1 4F               (gshell_beta5_yak.):01500                  clra
07C2 5F               (gshell_beta5_yak.):01501                  clrb
                      (gshell_beta5_yak.):01502                ENDC
07C3 200E             (gshell_beta5_yak.):01503                  bra   DRAWSCR4
                      (gshell_beta5_yak.):01504         
07C5 3440             (gshell_beta5_yak.):01505         DRAWSCR3 pshs  U          Save FL.* entry ptr for sub
07C7 170201           (gshell_beta5_yak.):01506                  lbsr  WRITICON
07CA 3262             (gshell_beta5_yak.):01507                  leas  2,S
07CC EE4A             (gshell_beta5_yak.):01508                  ldu   FL.LINK,U
07CE EC62             (gshell_beta5_yak.):01509                  ldd   2,S
                      (gshell_beta5_yak.):01510                IFNE  H6309
                      (gshell_beta5_yak.):01511                  incd  
                      (gshell_beta5_yak.):01512                ELSE
07D0 C30001           (gshell_beta5_yak.):01513                  addd  #$0001
                      (gshell_beta5_yak.):01514                ENDC
07D3 ED62             (gshell_beta5_yak.):01515         DRAWSCR4 std   2,S
07D5 EF7E             (gshell_beta5_yak.):01516                  stu   -2,S
07D7 2705             (gshell_beta5_yak.):01517                  beq   DRAWSCR5
07D9 10931E           (gshell_beta5_yak.):01518                  cmpd  MAXICONS
07DC 2DE7             (gshell_beta5_yak.):01519                  blt   DRAWSCR3
                      (gshell_beta5_yak.):01520         
07DE DC2A             (gshell_beta5_yak.):01521         DRAWSCR5 ldd   NSCREENS   Get # of icon screens
07E0 109328           (gshell_beta5_yak.):01522                  cmpd  SCREENOW   On last one?
07E3 2605             (gshell_beta5_yak.):01523                  bne   SCROLBAR   No, skip ahead
07E5 CC0014           (gshell_beta5_yak.):01524                  ldd   #20        Yes, use Y pos 20 (for 200 line screen)
07E8 204F             (gshell_beta5_yak.):01525                  bra   DRAWSCR6
                      (gshell_beta5_yak.):01526         
                      (gshell_beta5_yak.):01527         * Calculate position of vertical scroll bar (based on current screen #, and
                      (gshell_beta5_yak.):01528         *  how many screens of icons there is in current dir)
07EA DC2A             (gshell_beta5_yak.):01529         SCROLBAR ldd   NSCREENS   Get # of screens of icons
07EC 274B             (gshell_beta5_yak.):01530                  beq   DRAWSCR6   If 0, just put in position 0
07EE 9629             (gshell_beta5_yak.):01531                  lda   SCREENOW+1 Get current screen#
07F0 273F             (gshell_beta5_yak.):01532                  beq   Force0     If 0, that is Y position
07F2 327D             (gshell_beta5_yak.):01533                  leas  -3,s       make room on stack for temp vars
07F4 5C               (gshell_beta5_yak.):01534                  incb             Base 1 for divide (# of screens of icons)
07F5 E763             (gshell_beta5_yak.):01535                  stb   3,s        Save # of screens
                      (gshell_beta5_yak.):01536         
                      (gshell_beta5_yak.):01537         * 6809 NOTE: Since this is 21/(8 bit #), we can keep answer in A, and # we are subtracting from in B
                      (gshell_beta5_yak.):01538         *   (eventually it is remainder), rather than using stack.
07F7 CC0015           (gshell_beta5_yak.):01539                  ldd   #21        Maximum # of screens
                      (gshell_beta5_yak.):01540                IFNE  H6309
                      (gshell_beta5_yak.):01541                  divd  3,s        B= # of Y positions per screen (21/# of active screens of icons)
                      (gshell_beta5_yak.):01542         * remainder = A, quotient = B
                      (gshell_beta5_yak.):01543                ELSE
07FA 6FE2             (gshell_beta5_yak.):01544                  clr   ,-s        Init answer to 0
07FC 6CE4             (gshell_beta5_yak.):01545         SCROLBRa inc   ,s         Bump answer up by 1
07FE E064             (gshell_beta5_yak.):01546                  subb  4,s        Subtract # of active screens of icons
0800 8200             (gshell_beta5_yak.):01547                  sbca  #0
0802 24F8             (gshell_beta5_yak.):01548                  bcc   SCROLBRa   Didn't wrap, keep subtracting
0804 EB64             (gshell_beta5_yak.):01549                  addb  4,s        Wrapped, add answer back
0806 1F98             (gshell_beta5_yak.):01550                  tfr   b,a        Move remainder to A
0808 3504             (gshell_beta5_yak.):01551                  puls  b          Get answer
080A 5A               (gshell_beta5_yak.):01552                  decb             Drop back down by 1
                      (gshell_beta5_yak.):01553                ENDC
080B ED61             (gshell_beta5_yak.):01554                  std   1,s        Save remainder & answer
080D 9629             (gshell_beta5_yak.):01555                  lda   SCREENOW+1 Get current screen #
080F 4C               (gshell_beta5_yak.):01556                  inca             Base 1
0810 3D               (gshell_beta5_yak.):01557                  mul              Multiply by answer (rough Y pos)
0811 E7E4             (gshell_beta5_yak.):01558                  stb   ,s         Save that result
0813 9629             (gshell_beta5_yak.):01559                  lda   SCREENOW+1 Get current screen #
0815 4C               (gshell_beta5_yak.):01560                  inca             Base 1
0816 E661             (gshell_beta5_yak.):01561                  ldb   1,s        Get original remainder
0818 3D               (gshell_beta5_yak.):01562                  mul              Calculate 2ndary offset
                      (gshell_beta5_yak.):01563                IFNE  H6309
                      (gshell_beta5_yak.):01564                  divd  3,s        B= # of Y positions per screen
                      (gshell_beta5_yak.):01565                ELSE
0819 6FE2             (gshell_beta5_yak.):01566                  clr   ,-s
081B 6CE4             (gshell_beta5_yak.):01567         SCROLBRb inc   ,s
081D E064             (gshell_beta5_yak.):01568                  subb  4,s
081F 8200             (gshell_beta5_yak.):01569                  sbca  #0
0821 24F8             (gshell_beta5_yak.):01570                  bcc   SCROLBRb
0823 EB64             (gshell_beta5_yak.):01571                  addb  4,s
0825 1F98             (gshell_beta5_yak.):01572                  tfr   b,a
0827 3504             (gshell_beta5_yak.):01573                  puls  b
0829 5A               (gshell_beta5_yak.):01574                  decb
                      (gshell_beta5_yak.):01575                ENDC
082A EBE4             (gshell_beta5_yak.):01576                  addb  ,s         Add 2ndary to primary Y pos calc
082C 3263             (gshell_beta5_yak.):01577                  leas  3,s        Eat stack
082E 5A               (gshell_beta5_yak.):01578                  decb             Base 0 for scroll bar SETSTAT call
082F 2C02             (gshell_beta5_yak.):01579                  bge   NotNeg     not negative, skip ahead
0831                  (gshell_beta5_yak.):01580         Force0
                      (gshell_beta5_yak.):01581                IFNE  H6309
                      (gshell_beta5_yak.):01582                  clrd             Force to 0
                      (gshell_beta5_yak.):01583                ELSE
0831 4F               (gshell_beta5_yak.):01584                  clra
0832 5F               (gshell_beta5_yak.):01585                  clrb
                      (gshell_beta5_yak.):01586                ENDC
0833 C114             (gshell_beta5_yak.):01587         NotNeg   cmpb  #20        Past end?
0835 2302             (gshell_beta5_yak.):01588                  bls   DRAWSCR6   No, good, so update scroll bars
0837 C614             (gshell_beta5_yak.):01589                  ldb   #20        Force to 20
                      (gshell_beta5_yak.):01590         * Actually update the scrollbar (Y only one used)
                      (gshell_beta5_yak.):01591         * Entry: D=Y position wanted (0-20)
0839 EDE4             (gshell_beta5_yak.):01592         DRAWSCR6 std   ,S         Save Y pos
083B 3406             (gshell_beta5_yak.):01593                  pshs  d          And again
083D 8E004D           (gshell_beta5_yak.):01594                  ldx   #77        Default to X position 77
0840 0D1B             (gshell_beta5_yak.):01595                  tst   FLAG640W   80 or 40 column?
0842 2603             (gshell_beta5_yak.):01596                  bne   DRAWSCR8   80, continue
0844 8E0025           (gshell_beta5_yak.):01597                  ldx   #37        X position to 37 for 40 column
0847 DC22             (gshell_beta5_yak.):01598         DRAWSCR8 ldd   WNDWPATH   Get GSHELL window path
0849 3416             (gshell_beta5_yak.):01599                  pshs  d,X        Save path & x position
084B 172D27           (gshell_beta5_yak.):01600                  lbsr  ST.SBAR    Set scroll bar positions
084E 1718A2           (gshell_beta5_yak.):01601                  lbsr  MOUSENOW   Turn auto-follow mouse back on
0851 3266             (gshell_beta5_yak.):01602                  leas  6,S        eat stack
0853 16020E           (gshell_beta5_yak.):01603                  lbra  GENLEXIT   Fix stack & return
                      (gshell_beta5_yak.):01604         
                      (gshell_beta5_yak.):01605         * Wipe interior window, & redraw directory bar (latter done by call to
                      (gshell_beta5_yak.):01606         *   WRITDBAR). Change so it doesn't redraw directory bar unless directory has
                      (gshell_beta5_yak.):01607         *   changed
0856 3440             (gshell_beta5_yak.):01608         WIPICONS pshs  U
0858 C615             (gshell_beta5_yak.):01609                  ldb   #21        Window Y size to clear - NOTE: WE HAVE TO ELIMINATE THE
085A 3406             (gshell_beta5_yak.):01610                  pshs  d          EXTRA BOX LINE IT CURRENTLY DRAWS
085C 9E24             (gshell_beta5_yak.):01611                  ldx   WINDWSZX   Get window X size
085E 3019             (gshell_beta5_yak.):01612                  leax  -7,X       Subtract 7 (leaves scroll bars & drive icons alone)
0860 C602             (gshell_beta5_yak.):01613                  ldb   #2         Start Y at 2 (skip menu bar and current path line)
0862 3416             (gshell_beta5_yak.):01614                  pshs  d,X
0864 8E0006           (gshell_beta5_yak.):01615                  ldx   #6         Start X (skip left border & drive icons)
0867 DC22             (gshell_beta5_yak.):01616                  ldd   WNDWPATH   Get GSHELL path
0869 3416             (gshell_beta5_yak.):01617                  pshs  d,X
086B 172D82           (gshell_beta5_yak.):01618                  lbsr  CWAREA     Change working area
086E 172668           (gshell_beta5_yak.):01619                  lbsr  CLRSCRN    Clear screen (Send CHR$(12))
0871 326A             (gshell_beta5_yak.):01620                  leas  10,S       Eat stack
0873 17286D           (gshell_beta5_yak.):01621                  lbsr  FULLSCRN   Change working area to whole window except border stuff
0876 172883           (gshell_beta5_yak.):01622                  lbsr  WRITDBAR   Do initial drawing of "inside" screen REDOES DIR STUFF
0879 0F00             (gshell_beta5_yak.):01623                  clr   WIPED      Flag that icons need not be redrawn
087B 35C0             (gshell_beta5_yak.):01624                  puls  U,PC       Exit
                      (gshell_beta5_yak.):01625         
                      (gshell_beta5_yak.):01626         * Wipe interior window, except drive icons (but including box around dir
                      (gshell_beta5_yak.):01627         *  contents)
087D 3440             (gshell_beta5_yak.):01628         CLRDSCRN pshs  U
087F C616             (gshell_beta5_yak.):01629                  ldb   #22        Y size
0881 3406             (gshell_beta5_yak.):01630                  pshs  d
0883 9E24             (gshell_beta5_yak.):01631                  ldx   WINDWSZX   X size -6 (includes box around dir contents)
0885 301A             (gshell_beta5_yak.):01632                  leax  -6,X
0887 C601             (gshell_beta5_yak.):01633                  ldb   #1         Y start=1 (includes dir bar)
0889 3416             (gshell_beta5_yak.):01634                  pshs  d,X
088B 8E0005           (gshell_beta5_yak.):01635                  ldx   #5         X start=5 (includes box around dir)
088E DC22             (gshell_beta5_yak.):01636                  ldd   WNDWPATH
0890 3416             (gshell_beta5_yak.):01637                  pshs  d,X
0892 172D5B           (gshell_beta5_yak.):01638                  lbsr  CWAREA     Clear out interior window
0895 172641           (gshell_beta5_yak.):01639                  lbsr  CLRSCRN
0898 172848           (gshell_beta5_yak.):01640                  lbsr  FULLSCRN   Full interior window size (except border)
                      (gshell_beta5_yak.):01641                IFNE  H6309
                      (gshell_beta5_yak.):01642                  clrd             Redo scroll bars at 0,0
                      (gshell_beta5_yak.):01643                ELSE
089B 4F               (gshell_beta5_yak.):01644                  clra
089C 5F               (gshell_beta5_yak.):01645                  clrb
                      (gshell_beta5_yak.):01646                ENDC
089D ED64             (gshell_beta5_yak.):01647                  std   4,S
089F ED62             (gshell_beta5_yak.):01648                  std   2,S
08A1 172CD1           (gshell_beta5_yak.):01649                  lbsr  ST.SBAR
08A4 326A             (gshell_beta5_yak.):01650                  leas  10,S
08A6 35C0             (gshell_beta5_yak.):01651                  puls  U,PC
                      (gshell_beta5_yak.):01652         
                      (gshell_beta5_yak.):01653         * new dir - read in and print 1st screen
08A8 3440             (gshell_beta5_yak.):01654         NEWDIREC pshs  U
08AA C6FF             (gshell_beta5_yak.):01655                  ldb   #$ff       Flag that we have to redo icons
08AC D700             (gshell_beta5_yak.):01656                  stb   WIPED
08AE 8DA6             (gshell_beta5_yak.):01657                  bsr   WIPICONS   Wipe icons off screen (leave current dir border)
                      (gshell_beta5_yak.):01658                IFNE  H6309
                      (gshell_beta5_yak.):01659                  clrd  
                      (gshell_beta5_yak.):01660                ELSE
08B0 4F               (gshell_beta5_yak.):01661                  clra
08B1 5F               (gshell_beta5_yak.):01662                  clrb
                      (gshell_beta5_yak.):01663                ENDC
08B2 DD2E             (gshell_beta5_yak.):01664                  std   FILESCTR   # files in current dir=0
08B4 C604             (gshell_beta5_yak.):01665                  ldb   #YTR.SLP   Hourglass ptr
08B6 3436             (gshell_beta5_yak.):01666                  pshs  d,X,Y
08B8 8E00CA           (gshell_beta5_yak.):01667                  ldx   #QRP.PTR
08BB DC22             (gshell_beta5_yak.):01668                  ldd   WNDWPATH
08BD 3416             (gshell_beta5_yak.):01669                  pshs  d,X
08BF 172D46           (gshell_beta5_yak.):01670                  lbsr  GCSET      Set cursor to hourglass
                      (gshell_beta5_yak.):01671         * 6809/6309 - default mouse sampling is 1/20th sec (3 ticks). Changed so it is 15 ticks
                      (gshell_beta5_yak.):01672         * (1/4 second) so mouse still moves for user, but doesn't eat much CPU time? 
08C2 CC000F           (gshell_beta5_yak.):01673                  ldd   #15        1/4 second per mouse sample
08C5 172665           (gshell_beta5_yak.):01674                  lbsr  INITMOU1
                      (gshell_beta5_yak.):01675         * New DIR check code here
08C8 B61369           (gshell_beta5_yak.):01676                  lda   DIRPATH    Get current DIR path #
08CB 2703             (gshell_beta5_yak.):01677                  beq   SkipClos   None, don't try closing
08CD 103F8F           (gshell_beta5_yak.):01678                  os9   I$Close    Close dir path 1st
                      (gshell_beta5_yak.):01679         * New label here
08D0 C681             (gshell_beta5_yak.):01680         SkipClos ldb   #DIR.+READ.
08D2 ED62             (gshell_beta5_yak.):01681                  std   2,S
08D4 308D05AC         (gshell_beta5_yak.):01682                  leax  ONEDOT,PC  Point to '.'
08D8 AFE4             (gshell_beta5_yak.):01683                  stx   ,S
08DA 172B03           (gshell_beta5_yak.):01684                  lbsr  I.OPEN2    Open current dir
08DD 3266             (gshell_beta5_yak.):01685                  leas  6,S
08DF ED62             (gshell_beta5_yak.):01686                  std   2,S        Save path # to stack
08E1 102D0098         (gshell_beta5_yak.):01687                  lblt  BAD.DIR    Couldn't read current dir
08E5 F71369           (gshell_beta5_yak.):01688                  stb   DIRPATH    Successfull open; Save current dir path
                      (gshell_beta5_yak.):01689         * NOTE: Done this early so if opening a large directory, and updates are done
                      (gshell_beta5_yak.):01690         *   during read, they will get caught too
08E8 7F136A           (gshell_beta5_yak.):01691                  clr   Dirup      Clear out Directory update flag (saved signal)
                      (gshell_beta5_yak.):01692         * New DIR code here - We want a signal if DIR changes
                      (gshell_beta5_yak.):01693         * Moved here so will detect changes even on dir we are doing
08EB B61369           (gshell_beta5_yak.):01694                  lda   DIRPATH    path in A
08EE 8E000C           (gshell_beta5_yak.):01695                  ldx   #DIRSIG    Signal code to send on dir update
08F1 C62C             (gshell_beta5_yak.):01696                  ldb   #SS.FSig   Send signal on file update setstat
08F3 103F8E           (gshell_beta5_yak.):01697                  os9   I$SetStt   Enable call
08F6 CC0040           (gshell_beta5_yak.):01698                  ldd   #DIR.SZ*2  Flag to read 2 entries (. & ..) - NOTE IF ONE OR BOTH OF THESE
08F9 3406             (gshell_beta5_yak.):01699                  pshs  d          IS NOT PRESENT, THEN GSHELL WILL SKIP ENTRIES!
08FB 8E06AF           (gshell_beta5_yak.):01700                  ldx   #DIRBUFER  Point to start of directory contents buffer (up to 64 files @ a time)
08FE EC64             (gshell_beta5_yak.):01701                  ldd   6-2,S
0900 3416             (gshell_beta5_yak.):01702                  pshs  d,X
0902 172A89           (gshell_beta5_yak.):01703                  lbsr  I.READ     Read . & .. (and eat them)
0905 3266             (gshell_beta5_yak.):01704                  leas  6,S
0907 2052             (gshell_beta5_yak.):01705                  bra   READ.DIR   Go read rest of dir
                      (gshell_beta5_yak.):01706         
0909 ECE4             (gshell_beta5_yak.):01707         DIRVALID ldd   ,S         Get # of bytes of dir entries
090B 3406             (gshell_beta5_yak.):01708                  pshs  d          Save # to divide
090D C605             (gshell_beta5_yak.):01709                  ldb   #5         # of shifts to divide by
090F 172EE3           (gshell_beta5_yak.):01710                  lbsr  CCASR      divide by 32 (2^5) (size of dir entry) to get # files in current block
0912 EDE4             (gshell_beta5_yak.):01711                  std   ,S         Save # of files in current block
0914 8E06AF           (gshell_beta5_yak.):01712                  ldx   #DIRBUFER  Point to start of DIR buffer
0917 9F3A             (gshell_beta5_yak.):01713                  stx   DIRPTR     Save it
0919 2039             (gshell_beta5_yak.):01714                  bra   CLASTST2   Check which kind of file
                      (gshell_beta5_yak.):01715         
091B E6B83A           (gshell_beta5_yak.):01716         CLASSIFY ldb   [DIRPTR,Y] Get 1st byte of dir entry
091E 272B             (gshell_beta5_yak.):01717                  beq   CLASSIF4   NUL (Deleted file, skip to next)
0920 9E3A             (gshell_beta5_yak.):01718                  ldx   DIRPTR     Get ptr to filename
0922 DC0F             (gshell_beta5_yak.):01719                  ldd   FNAMEPTR   Get ptr to current filename buffer
0924 3416             (gshell_beta5_yak.):01720                  pshs  d,x
0926 172B54           (gshell_beta5_yak.):01721                  lbsr  STRHCPY    Copy filename, including fixing hi-bit marker, from DIRPTR to FNAMEPTR
0929 170D51           (gshell_beta5_yak.):01722                  lbsr  UPDTIPTR   Update FL.* table ptrs
092C 3264             (gshell_beta5_yak.):01723                  leas  4,S
092E 1F03             (gshell_beta5_yak.):01724                  tfr   D,U
0930 EF7E             (gshell_beta5_yak.):01725                  stu   -2,S
0932 2717             (gshell_beta5_yak.):01726                  beq   CLASSIF4
                      (gshell_beta5_yak.):01727                IFNE  H6309
                      (gshell_beta5_yak.):01728                  bsr   GTFD.ATT   Get file attributes
                      (gshell_beta5_yak.):01729                ELSE
0934 170081           (gshell_beta5_yak.):01730                  lbsr  GTFD.ATT   Get file attributes
                      (gshell_beta5_yak.):01731                ENDC
0937 C602             (gshell_beta5_yak.):01732                  ldb   #IC.FOLDR  Default to folder (dir, $02)
0939 8580             (gshell_beta5_yak.):01733                  bita  #DIR.      If it is dir, done
093B 260C             (gshell_beta5_yak.):01734                  bne   CLASSIF3
093D 5C               (gshell_beta5_yak.):01735                  incb             (IC.PRGRM, $03)
093E 8504             (gshell_beta5_yak.):01736                  bita  #EXEC.     If executable, program type
0940 2607             (gshell_beta5_yak.):01737                  bne   CLASSIF3
0942 3440             (gshell_beta5_yak.):01738                  pshs  U
0944 170D81           (gshell_beta5_yak.):01739                  lbsr  ISIT.XXX   Check if an AIF type we know about (and create ID.* entry if not; B=IC.* entry #)
0947 3262             (gshell_beta5_yak.):01740                  leas  2,S
0949 E748             (gshell_beta5_yak.):01741         CLASSIF3 stb   FL.ICONO,U Save icon type
094B DC3A             (gshell_beta5_yak.):01742         CLASSIF4 ldd   DIRPTR     Go onto next dir entry
094D C30020           (gshell_beta5_yak.):01743                  addd  #DIR.SZ
0950 DD3A             (gshell_beta5_yak.):01744                  std   DIRPTR
0952 ECE4             (gshell_beta5_yak.):01745         CLASTEST ldd   ,S         Get # of dir entries in this 2k block
0954                  (gshell_beta5_yak.):01746         CLASTST2
                      (gshell_beta5_yak.):01747                IFNE  H6309
                      (gshell_beta5_yak.):01748                  decd             Subtract 1
                      (gshell_beta5_yak.):01749                ELSE
0954 830001           (gshell_beta5_yak.):01750                  subd  #$0001
                      (gshell_beta5_yak.):01751                ENDC
0957 EDE4             (gshell_beta5_yak.):01752                  std   ,S
0959 2CC0             (gshell_beta5_yak.):01753                  bge   CLASSIFY   Still more, classify file type, otherwise, get next 2k block
095B CC0800           (gshell_beta5_yak.):01754         READ.DIR ldd   #2048      Max Size of read buffer (64 dir entries @ once)
095E 3406             (gshell_beta5_yak.):01755                  pshs  d
0960 8E06AF           (gshell_beta5_yak.):01756                  ldx   #DIRBUFER  Point to dir buffer
0963 EC64             (gshell_beta5_yak.):01757                  ldd   6-2,S
0965 3416             (gshell_beta5_yak.):01758                  pshs  d,X
0967 172A24           (gshell_beta5_yak.):01759                  lbsr  I.READ     Read in up to 2K/64 filenames of directory
096A 3266             (gshell_beta5_yak.):01760                  leas  6,S
096C EDE4             (gshell_beta5_yak.):01761                  std   ,S
096E 2E99             (gshell_beta5_yak.):01762                  bgt   DIRVALID   Good read, continue
                      (gshell_beta5_yak.):01763         * New DIR code here
                      (gshell_beta5_yak.):01764         * We want a signal if DIR changes
0970 B61369           (gshell_beta5_yak.):01765                  lda   DIRPATH    path in A
0973 8E000C           (gshell_beta5_yak.):01766                  ldx   #DIRSIG    Signal code to send on dir update
0976 C62C             (gshell_beta5_yak.):01767                  ldb   #SS.FSig   Send signal on file update setstat
0978 103F8E           (gshell_beta5_yak.):01768                  os9   I$SetStt   Enable call
097B 200A             (gshell_beta5_yak.):01769                  bra   READDIR2
                      (gshell_beta5_yak.):01770         
097D 308C0C           (gshell_beta5_yak.):01771         BAD.DIR  leax  <CANTFLD2,PC
0980 3410             (gshell_beta5_yak.):01772                  pshs  X
0982 1708C0           (gshell_beta5_yak.):01773                  lbsr  OLAYPRNT
0985 3262             (gshell_beta5_yak.):01774         READDIRX leas  2,S
0987 8D15             (gshell_beta5_yak.):01775         READDIR2 bsr   CNTSCRNS
0989 1600D8           (gshell_beta5_yak.):01776                  lbra  GENLEXIT
                      (gshell_beta5_yak.):01777         
098C 43616E2774206F70 (gshell_beta5_yak.):01778         CANTFLD2 fcc   "Can't open folder"
     656E20666F6C6465
     72
099D 00               (gshell_beta5_yak.):01779                  fcb   NUL
                      (gshell_beta5_yak.):01780         
                      (gshell_beta5_yak.):01781         * Count # of screens to hold icons
099E                  (gshell_beta5_yak.):01782         CNTSCRNS
                      (gshell_beta5_yak.):01783                IFNE  H6309
                      (gshell_beta5_yak.):01784                  clrd  
                      (gshell_beta5_yak.):01785                ELSE
099E 4F               (gshell_beta5_yak.):01786                  clra
099F 5F               (gshell_beta5_yak.):01787                  clrb
                      (gshell_beta5_yak.):01788                ENDC
09A0 DD28             (gshell_beta5_yak.):01789                  std   SCREENOW   Set current "screen" of icons to 0 (1st)
09A2 DC2E             (gshell_beta5_yak.):01790                  ldd   FILESCTR   Get # files current dir
09A4 270F             (gshell_beta5_yak.):01791                  beq   CNTSCRN2   zero, save & exit
                      (gshell_beta5_yak.):01792                IFNE  H6309
                      (gshell_beta5_yak.):01793                  decd  
                      (gshell_beta5_yak.):01794                  divd  MAXICONS+1 Divide by # icons/"screen"
                      (gshell_beta5_yak.):01795                ELSE
09A6 830001           (gshell_beta5_yak.):01796                  subd  #$0001
09A9 6FE2             (gshell_beta5_yak.):01797                  clr   ,-s          Init answer to 0
09AB 6CE4             (gshell_beta5_yak.):01798         CNTSCRNa inc   ,s           Bump answer up by 1
09AD 931E             (gshell_beta5_yak.):01799                  subd  <MAXICONS    D=D=(# icons/"screen") (same speed as subb/sbca, saves 2 bytes
09AF 24FA             (gshell_beta5_yak.):01800                  bcc   CNTSCRNa     If it didn't wrap negative, keep subtracting divide by; increase answer
09B1 3504             (gshell_beta5_yak.):01801                  puls  b            Get answer
09B3 5A               (gshell_beta5_yak.):01802                  decb               Make base 0
                      (gshell_beta5_yak.):01803                ENDC
09B4 4F               (gshell_beta5_yak.):01804                  clra             16 bit result
09B5 DD2A             (gshell_beta5_yak.):01805         CNTSCRN2 std   NSCREENS   Save # of icon "screens" & return
09B7 39               (gshell_beta5_yak.):01806                  rts   
                      (gshell_beta5_yak.):01807         
09B8 30A83C           (gshell_beta5_yak.):01808         GTFD.ATT leax  <XFD.ATT,Y
09BB DC3A             (gshell_beta5_yak.):01809                  ldd   DIRPTR
09BD 3416             (gshell_beta5_yak.):01810                  pshs  d,X
09BF EC68             (gshell_beta5_yak.):01811                  ldd   6+2,S
09C1 3406             (gshell_beta5_yak.):01812                  pshs  d
09C3 172479           (gshell_beta5_yak.):01813                  lbsr  GT.FDINF
09C6 3266             (gshell_beta5_yak.):01814                  leas  6,S
09C8 963C             (gshell_beta5_yak.):01815                  lda   XFD.ATT
09CA 39               (gshell_beta5_yak.):01816                  rts   
                      (gshell_beta5_yak.):01817         
                      (gshell_beta5_yak.):01818         * Write icon to screen
09CB 3440             (gshell_beta5_yak.):01819         WRITICON pshs  U
09CD EE64             (gshell_beta5_yak.):01820                  ldu   4,S        Get ptr to current FL.* entry
09CF E648             (gshell_beta5_yak.):01821                  ldb   FL.ICONO,U Get icon type
09D1 3406             (gshell_beta5_yak.):01822                  pshs  d          Save it
09D3 2006             (gshell_beta5_yak.):01823                  bra   WRITICO2
                      (gshell_beta5_yak.):01824         
09D5 E649             (gshell_beta5_yak.):01825         WRITICO1 ldb   FL.AIFNO,U Get IC.* table entry number for current icon
09D7 EDE4             (gshell_beta5_yak.):01826                  std   ,S         Save temp copy
09D9 2007             (gshell_beta5_yak.):01827                  bra   WRITICO3
                      (gshell_beta5_yak.):01828         
09DB C007             (gshell_beta5_yak.):01829         WRITICO2 subb  #IC.F.XXX
09DD 27F6             (gshell_beta5_yak.):01830                  beq   WRITICO1
09DF 5C               (gshell_beta5_yak.):01831                  incb  
09E0 27F3             (gshell_beta5_yak.):01832                  beq   WRITICO1
09E2 EC42             (gshell_beta5_yak.):01833         WRITICO3 ldd   FL.YSTRT,U Get icon Y start position
09E4 3406             (gshell_beta5_yak.):01834                  pshs  d          Save it
09E6 AEC4             (gshell_beta5_yak.):01835                  ldx   FL.XSTRT,U Get icon X start position
09E8 EC62             (gshell_beta5_yak.):01836                  ldd   2,S        Get icon buffer #
09EA C105             (gshell_beta5_yak.):01837                  cmpb  #IC.DRIVE  Drive icon?
09EC 270A             (gshell_beta5_yak.):01838                  beq   No48       Yes, there is no 48 pixel wide version
09EE C109             (gshell_beta5_yak.):01839                  cmpb  #IC.TRASH  Trash icon?
09F0 2706             (gshell_beta5_yak.):01840                  beq   No48       Yes, there is no 48 pixel wide version
09F2 C10F             (gshell_beta5_yak.):01841                  cmpb  #IC.PRNTR  Printer icon?
09F4 2702             (gshell_beta5_yak.):01842                  beq   No48       Yes, there is no 48 pixel wide version
09F6 DA5D             (gshell_beta5_yak.):01843                  orb   WD48FLAG   +$80 if double wide (48 pixels for 80 column)
09F8 3416             (gshell_beta5_yak.):01844         No48     pshs  d,X        Save 'em
09FA 9E26             (gshell_beta5_yak.):01845                  ldx   PRCIDNUM   Get group #
09FC DC22             (gshell_beta5_yak.):01846                  ldd   WNDWPATH   Get window path
09FE 3416             (gshell_beta5_yak.):01847                  pshs  d,X        Save 'em
0A00 172C67           (gshell_beta5_yak.):01848                  lbsr  PUTBLK     Put icon on screen
0A03 326A             (gshell_beta5_yak.):01849                  leas  10,S       Eat temp stack
0A05 ECE4             (gshell_beta5_yak.):01850                  ldd   ,S         Get icon type
0A07 C47F             (gshell_beta5_yak.):01851                  andb  #$7F       Strip hi bit
0A09 C109             (gshell_beta5_yak.):01852                  cmpb  #IC.TRASH  Trash icon?
0A0B 2704             (gshell_beta5_yak.):01853                  beq   NoName     Yes, don't print name
0A0D C10F             (gshell_beta5_yak.):01854                  cmpb  #IC.PRNTR  Printer icon?
0A0F 2604             (gshell_beta5_yak.):01855                  bne   WRITICO6   No, print name
0A11 3440             (gshell_beta5_yak.):01856         NoName   pshs  U          Yes, fake stack for exit, NO name printing
0A13 204F             (gshell_beta5_yak.):01857                  bra   GENLEXIT   Eat stack & return
                      (gshell_beta5_yak.):01858         
0A15 C105             (gshell_beta5_yak.):01859         WRITICO6 cmpb  #IC.DRIVE  Drive icon?
0A17 2607             (gshell_beta5_yak.):01860                  bne   WRITICO4   No, skip ahead
0A19 3440             (gshell_beta5_yak.):01861                  pshs  U
0A1B 1700B8           (gshell_beta5_yak.):01862                  lbsr  POSIDRNM   Print drive name below drive icon
0A1E 2044             (gshell_beta5_yak.):01863                  bra   GENLEXIT   Eat stack & exit
                      (gshell_beta5_yak.):01864         
0A20 3440             (gshell_beta5_yak.):01865         WRITICO4 pshs  U          If not trash or drive, print icon name
0A22 8D02             (gshell_beta5_yak.):01866                  bsr   WRITFNAM
0A24 203E             (gshell_beta5_yak.):01867         WRITICO5 bra   GENLEXIT   Eat stack & exit
                      (gshell_beta5_yak.):01868         
0A26 3440             (gshell_beta5_yak.):01869         WRITFNAM pshs  U
0A28 EE64             (gshell_beta5_yak.):01870                  ldu   4,S        Get ptr FL*.* file table ptr for current icon
                      (gshell_beta5_yak.):01871         * Here, we need to get IC.* ptr, and see if IC.ALTNM<>0. If so, we need to use offset name
                      (gshell_beta5_yak.):01872         * If it is 0, we can use FL.FNAME, as we have now. Also, if it is wildcard extension (AIF.xxx),
                      (gshell_beta5_yak.):01873         * need to use FL. version.
0A2A E649             (gshell_beta5_yak.):01874                  ldb   FL.AIFNO,u Get ID.* table entry #
0A2C 2723             (gshell_beta5_yak.):01875                  beq   UseFLNm    None, use regular FL.* filename
0A2E 4F               (gshell_beta5_yak.):01876                  clra             D=entry #
0A2F 3406             (gshell_beta5_yak.):01877                  pshs  d          Put on stack for sub
0A31 170666           (gshell_beta5_yak.):01878                  lbsr  FNDIDESC   Get ptr to ID.* entry
0A34 EDE1             (gshell_beta5_yak.):01879                  std   ,s++       Did we find it (and eat temp stack at same time)
0A36 2719             (gshell_beta5_yak.):01880                  beq   UseFLNm    No, use FL.* filename
                      (gshell_beta5_yak.):01881         * Need to check if extension is a type match (AIF.xxx for stuff like .gif), and use FL name if
                      (gshell_beta5_yak.):01882         * it is.
0A38 3406             (gshell_beta5_yak.):01883                  pshs  d          Save ID.* ptr
0A3A E648             (gshell_beta5_yak.):01884                  ldb   FL.ICONO,u Yes, get icon type #
0A3C C107             (gshell_beta5_yak.):01885                  cmpb  #IC.F.XXX  Is an AIF defined extension icon?
0A3E 3506             (gshell_beta5_yak.):01886                  puls  d          restore ptr first
0A40 270F             (gshell_beta5_yak.):01887                  beq   UseFLNm      Yes, use FL.* filename
                      (gshell_beta5_yak.):01888         
0A42 3410             (gshell_beta5_yak.):01889                  pshs  x          No, save X
0A44 1F01             (gshell_beta5_yak.):01890                  tfr   d,x        Move ID.* to X
0A46 E684             (gshell_beta5_yak.):01891                  ldb   ID.ALTNM,x Get offset to alternate module name from AIF file
0A48 AE0E             (gshell_beta5_yak.):01892                  ldx   ID.MNAME,x Get ptr to module name from AIF file
0A4A 3A               (gshell_beta5_yak.):01893                  abx              Point to alternate name
0A4B 1F10             (gshell_beta5_yak.):01894                  tfr   x,d        Move to D
0A4D 3510             (gshell_beta5_yak.):01895                  puls  x          Restore X
0A4F 2002             (gshell_beta5_yak.):01896                  bra   AltName    Print alternate filename
                      (gshell_beta5_yak.):01897                  
0A51 EC4C             (gshell_beta5_yak.):01898         UseFLNm  ldd   FL.FNAME,U Get ptr to icon name
0A53 3406             (gshell_beta5_yak.):01899         AltName  pshs  d          Save em
0A55 3440             (gshell_beta5_yak.):01900                  pshs  U
0A57 2009             (gshell_beta5_yak.):01901                  bra   ERWRFNAM   Write out icon (file) name
                      (gshell_beta5_yak.):01902         
                      (gshell_beta5_yak.):01903         * Erase the filename from the screen (under the icon)
0A59 3440             (gshell_beta5_yak.):01904         ERASFNAM pshs  U
0A5B 308C0A           (gshell_beta5_yak.):01905                  leax  <TENSPACE,PC
0A5E EC64             (gshell_beta5_yak.):01906                  ldd   4,S
0A60 3416             (gshell_beta5_yak.):01907                  pshs  d,X
0A62 8D0F             (gshell_beta5_yak.):01908         ERWRFNAM bsr   POSIFNAM   Print filename under icon
0A64 3264             (gshell_beta5_yak.):01909         GENLEXIT leas  4,S        Eat stack, restore U and return
0A66 35C0             (gshell_beta5_yak.):01910                  puls  U,PC
                      (gshell_beta5_yak.):01911         
0A68 202020202020     (gshell_beta5_yak.):01912         TENSPACE fcc   "      "
0A6E 20202020         (gshell_beta5_yak.):01913         FOURSPAC fcc   "    "
0A72 00               (gshell_beta5_yak.):01914                  fcb   NUL
                      (gshell_beta5_yak.):01915         
                      (gshell_beta5_yak.):01916         * Print filename under the icon. HAVE TO CHECK - IS THE ID.* TABLE SETUP AT THIS
                      (gshell_beta5_yak.):01917         * POINT?
0A73 3440             (gshell_beta5_yak.):01918         POSIFNAM pshs  U
0A75 EE64             (gshell_beta5_yak.):01919                  ldu   4,S
0A77 EC66             (gshell_beta5_yak.):01920                  ldd   8-2,S
0A79 3406             (gshell_beta5_yak.):01921                  pshs  d
0A7B 172987           (gshell_beta5_yak.):01922                  lbsr  STRLEN     Get length of filename
0A7E 1083000A         (gshell_beta5_yak.):01923                  cmpd  #10        10 or less?
0A82 2F08             (gshell_beta5_yak.):01924                  ble   POSIFNA1   Yes, go print
0A84 CC000A           (gshell_beta5_yak.):01925                  ldd   #10        Force to 10 chars
0A87 0D5D             (gshell_beta5_yak.):01926                  tst   WD48FLAG   80 column screen?
0A89 2701             (gshell_beta5_yak.):01927                  beq   POSIFNA1   No, leave at 10
0A8B 5C               (gshell_beta5_yak.):01928                  incb             yes, room for 11 chars on 80 column
0A8C EDE4             (gshell_beta5_yak.):01929         POSIFNA1 std   ,S         Save X size (# of chars)
0A8E EC42             (gshell_beta5_yak.):01930                  ldd   FL.YSTRT,U Get Y start of icon (pixel line #)
0A90 C30001           (gshell_beta5_yak.):01931                  addd  #1         Force to next text line
0A93 171F36           (gshell_beta5_yak.):01932                  lbsr  DIVDX8     Divide by 8 (text Y position)
0A96 C30003           (gshell_beta5_yak.):01933                  addd  #3         Add 3 (to skip 3*8 pixel height of icon)
0A99 3406             (gshell_beta5_yak.):01934                  pshs  d
0A9B EC62             (gshell_beta5_yak.):01935                  ldd   2,S
0A9D 47               (gshell_beta5_yak.):01936                  asra  
0A9E 56               (gshell_beta5_yak.):01937                  rorb  
0A9F 3406             (gshell_beta5_yak.):01938                  pshs  d
0AA1 ECC4             (gshell_beta5_yak.):01939                  ldd   FL.XSTRT,U Get X Start pos of icon (pixel)
                      (gshell_beta5_yak.):01940         * 6309 - Should be able to DIVD at some point, but need to figure out C's stupid
                      (gshell_beta5_yak.):01941         *  stack crap first. It looks like it saves the MOD of the result on the stack?
0AA3 3406             (gshell_beta5_yak.):01942                  pshs  d          Save for div routine
0AA5 CC0006           (gshell_beta5_yak.):01943                  ldd   #6         Divide by 6 (6 pixel font)
0AA8 172CE0           (gshell_beta5_yak.):01944                  lbsr  CCDIV      Do divide (D=result, 16 bit MOD on stack?)
0AAB A3E1             (gshell_beta5_yak.):01945                  subd  ,S++
0AAD C30002           (gshell_beta5_yak.):01946                  addd  #2
0AB0 0D5D             (gshell_beta5_yak.):01947                  tst   WD48FLAG
0AB2 2703             (gshell_beta5_yak.):01948                  beq   POSIFNA3
0AB4 C30002           (gshell_beta5_yak.):01949                  addd  #2
0AB7 3406             (gshell_beta5_yak.):01950         POSIFNA3 pshs  d
0AB9 DC22             (gshell_beta5_yak.):01951                  ldd   WNDWPATH
0ABB 3406             (gshell_beta5_yak.):01952                  pshs  d
0ABD 0D5D             (gshell_beta5_yak.):01953                  tst   WD48FLAG
0ABF 260A             (gshell_beta5_yak.):01954                  bne   POSIFNA4
0AC1 ECC4             (gshell_beta5_yak.):01955                  ldd   FL.XSTRT,U
0AC3 108300C8         (gshell_beta5_yak.):01956                  cmpd  #200
0AC7 2502             (gshell_beta5_yak.):01957                  blo   POSIFNA4
0AC9 6C63             (gshell_beta5_yak.):01958                  inc   3,S
0ACB 1723E8           (gshell_beta5_yak.):01959         POSIFNA4 lbsr  GOTOXY
0ACE EC66             (gshell_beta5_yak.):01960                  ldd   0+6,S
0AD0 ED64             (gshell_beta5_yak.):01961                  std   4,S
0AD2 EC6E             (gshell_beta5_yak.):01962                  ldd   10+4,S
0AD4 2031             (gshell_beta5_yak.):01963                  bra   POSIFNA2
                      (gshell_beta5_yak.):01964         
                      (gshell_beta5_yak.):01965         * Print drive name (max 4 chars) at proper position below drive icon
0AD6 3440             (gshell_beta5_yak.):01966         POSIDRNM pshs  U
0AD8 EE64             (gshell_beta5_yak.):01967                  ldu   4,S        Get ptr to icon entry for current drive
0ADA EC4C             (gshell_beta5_yak.):01968                  ldd   FL.FNAME,U Get drive name ptr
0ADC 3406             (gshell_beta5_yak.):01969                  pshs  d          Save it
0ADE 172924           (gshell_beta5_yak.):01970                  lbsr  STRLEN     Calculate length of drive name
0AE1 10830004         (gshell_beta5_yak.):01971                  cmpd  #4         4 or less?
0AE5 2F03             (gshell_beta5_yak.):01972                  ble   POSIDRN1   Yep, continue
0AE7 CC0004           (gshell_beta5_yak.):01973                  ldd   #4         No, 4 is max.
0AEA EDE4             (gshell_beta5_yak.):01974         POSIDRN1 std   ,S         Save drive name size
0AEC EC42             (gshell_beta5_yak.):01975                  ldd   FL.YSTRT,U Get Y icon start
0AEE 171EDB           (gshell_beta5_yak.):01976                  lbsr  DIVDX8     Calc char. position
0AF1 C30002           (gshell_beta5_yak.):01977                  addd  #2         +2 to skip icon itself
0AF4 3406             (gshell_beta5_yak.):01978                  pshs  d          Save it
0AF6 C601             (gshell_beta5_yak.):01979                  ldb   #1         X position=1
0AF8 3406             (gshell_beta5_yak.):01980                  pshs  d
0AFA DC22             (gshell_beta5_yak.):01981                  ldd   WNDWPATH   Window path
0AFC 3406             (gshell_beta5_yak.):01982                  pshs  d
0AFE 1723B5           (gshell_beta5_yak.):01983                  lbsr  GOTOXY     Position text cursor
0B01 EC66             (gshell_beta5_yak.):01984                  ldd   6,S        Get drive name size
0B03 ED64             (gshell_beta5_yak.):01985                  std   4,S        Save it
0B05 EC4C             (gshell_beta5_yak.):01986                  ldd   FL.FNAME,U Get drive name ptr
0B07 ED62             (gshell_beta5_yak.):01987         POSIFNA2 std   2,S        Save it
0B09 1728A6           (gshell_beta5_yak.):01988                  lbsr  I.WRITE    Write out drive name
0B0C 3268             (gshell_beta5_yak.):01989                  leas  8,S        Eat temp stack
0B0E 35C0             (gshell_beta5_yak.):01990                  puls  U,PC       Restore U & return
                      (gshell_beta5_yak.):01991         
                      (gshell_beta5_yak.):01992         * Scroll bar Y position table (for # of icon-filled screens)
                      (gshell_beta5_yak.):01993         * SCROLLxx: xx is the number of screens of icons present
                      (gshell_beta5_yak.):01994         *  the last screen is ALWAYS the last position (20), irregardless of the #
                      (gshell_beta5_yak.):01995         *  of screens used.
                      (gshell_beta5_yak.):01996         * since using x200 now, can expand to 21 screen, using 0-20
                      (gshell_beta5_yak.):01997         * Data is then which Y position to be in for each screen set
                      (gshell_beta5_yak.):01998         * This should be a DIV type instruction, and screw the table to save memory
                      (gshell_beta5_yak.):01999         *  in the 6309 version
                      (gshell_beta5_yak.):02000         * EVENTUALLY, SEE IF WINDINT CAN HANDLE VARIABLE SIZED SCROLL
                      (gshell_beta5_yak.):02001         *   BARS (SEE NOTES I PUT IN MULTI-VUE MANUAL).
0B10 00               (gshell_beta5_yak.):02002         SCROLL02 fcb   0
0B11 000A             (gshell_beta5_yak.):02003         SCROLL03 fcb   0,10
0B13 00070E           (gshell_beta5_yak.):02004         SCROLL04 fcb   0,7,14
0B16 00070B0F         (gshell_beta5_yak.):02005         SCROLL05 fcb   0,7,11,15
0B1A 0006090D10       (gshell_beta5_yak.):02006         SCROLL06 fcb   0,6,9,13,16
0B1F 0004070A0D10     (gshell_beta5_yak.):02007         SCROLL07 fcb   0,4,7,10,13,16
0B25 000407090C0E11   (gshell_beta5_yak.):02008         SCROLL08 fcb   0,4,7,9,12,14,17
0B2C 000406080A0C0E10 (gshell_beta5_yak.):02009         SCROLL09 fcb   0,4,6,8,10,12,14,16
0B34 00030507090B0D0F (gshell_beta5_yak.):02010         SCROLL10 fcb   0,3,5,7,9,11,13,15,17
     11
0B3D 00020406080A0C0E (gshell_beta5_yak.):02011         SCROLL11 fcb   0,2,4,6,8,10,12,14,16,18
     1012
0B47 0001030507090B0D (gshell_beta5_yak.):02012         SCROLL12 fcb   0,1,3,5,7,9,11,13,15,17,18
     0F1112
0B52 000102030507090B (gshell_beta5_yak.):02013         SCROLL13 fcb   0,1,2,3,5,7,9,11,13,15,17,18
     0D0F1112
0B5E 000102030507090B (gshell_beta5_yak.):02014         SCROLL14 fcb   0,1,2,3,5,7,9,11,13,15,16,17,18
     0D0F101112
0B6B 0001020304050709 (gshell_beta5_yak.):02015         SCROLL15 fcb   0,1,2,3,4,5,7,9,11,13,15,16,17,18
     0B0D0F101112
0B79 0001020304050709 (gshell_beta5_yak.):02016         SCROLL16 fcb   0,1,2,3,4,5,7,9,11,13,14,15,16,17,18
     0B0D0E0F101112
0B88 0001020304050607 (gshell_beta5_yak.):02017         SCROLL17 fcb   0,1,2,3,4,5,6,7,9,11,13,14,15,16,17,18
     090B0D0E0F101112
0B98 0001020304050607 (gshell_beta5_yak.):02018         SCROLL18 fcb   0,1,2,3,4,5,6,7,9,11,12,13,14,15,16,17,18
     090B0C0D0E0F1011
     12
0BA9 0001020304050607 (gshell_beta5_yak.):02019         SCROLL19 fcb   0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18
     08090B0C0D0E0F10
     1112
0BBB 0001020304050607 (gshell_beta5_yak.):02020         SCROLL20 fcb   0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18
     08090A0B0C0D0E0F
     101112
                      (gshell_beta5_yak.):02021         
                      (gshell_beta5_yak.):02022         * Select icon on screen - draw 3-D indented box
                      (gshell_beta5_yak.):02023         * Entry: U=Ptr to FL.* data structure
0BCE 3440             (gshell_beta5_yak.):02024         SELCICON pshs  U
0BD0 EE64             (gshell_beta5_yak.):02025                  ldu   4,S
0BD2 272F             (gshell_beta5_yak.):02026                  beq   SELCICO3
0BD4 C603             (gshell_beta5_yak.):02027                  ldb   #3         color 3
0BD6 3416             (gshell_beta5_yak.):02028                  pshs  d,X
0BD8 D623             (gshell_beta5_yak.):02029                  ldb   WNDWPATH+1
0BDA 3406             (gshell_beta5_yak.):02030                  pshs  d
0BDC 172A4E           (gshell_beta5_yak.):02031                  lbsr  FCOLOR     Change foreground color to 3
0BDF E648             (gshell_beta5_yak.):02032                  ldb   FL.ICONO,U Get icon type
0BE1 2716             (gshell_beta5_yak.):02033                  beq   SELCICO2
0BE3 C103             (gshell_beta5_yak.):02034                  cmpb  #IC.PRGRM  Program, folder or text?
0BE5 230B             (gshell_beta5_yak.):02035                  bls   SELCICO1   Yes, draw box
0BE7 C105             (gshell_beta5_yak.):02036                  cmpb  #IC.DRIVE  Drive icon?
0BE9 2707             (gshell_beta5_yak.):02037                  beq   SELCICO1   Yes, draw box
0BEB C006             (gshell_beta5_yak.):02038                  subb  #IC.AIF.F  If AIF file, draw box around icon 1st
0BED 2703             (gshell_beta5_yak.):02039                  beq   SELCICO1
0BEF 5A               (gshell_beta5_yak.):02040                  decb             If anything but AIF itself or found AIF extension, don't
0BF0 2607             (gshell_beta5_yak.):02041                  bne   SELCICO2   draw box around icon
0BF2                  (gshell_beta5_yak.):02042         SELCICO1
                      (gshell_beta5_yak.):02043                IFNE  H6309
                      (gshell_beta5_yak.):02044                  lde   #1         Flag we want inverted shadow as well
                      (gshell_beta5_yak.):02045                ELSE
0BF2 8601             (gshell_beta5_yak.):02046                  lda   #1
0BF4 B71370           (gshell_beta5_yak.):02047                  sta   REGE
                      (gshell_beta5_yak.):02048                ENDC
0BF7 8D3E             (gshell_beta5_yak.):02049                  bsr   DRAIFBOX   Draw "selected" box around icon
0BF9 ED62             (gshell_beta5_yak.):02050         SELCICO2 std   2,S
0BFB 5F               (gshell_beta5_yak.):02051                  clrb             Reset foreground color to black
0BFC ED62             (gshell_beta5_yak.):02052                  std   2,S
0BFE 172A2C           (gshell_beta5_yak.):02053                  lbsr  FCOLOR
0C01 3266             (gshell_beta5_yak.):02054                  leas  6,S
0C03 35C0             (gshell_beta5_yak.):02055         SELCICO3 puls  U,PC
                      (gshell_beta5_yak.):02056         
                      (gshell_beta5_yak.):02057         * Unselect icon
                      (gshell_beta5_yak.):02058         * Entry: U=ptr to FL.* structure
0C05 3440             (gshell_beta5_yak.):02059         UNSLICON pshs  U
0C07 EE64             (gshell_beta5_yak.):02060                  ldu   4,S
0C09 27F8             (gshell_beta5_yak.):02061                  beq   SELCICO3
0C0B E648             (gshell_beta5_yak.):02062                  ldb   FL.ICONO,U   Get icon type
0C0D 2726             (gshell_beta5_yak.):02063                  beq   UNSLICO2
0C0F C103             (gshell_beta5_yak.):02064                  cmpb  #IC.PRGRM    text, folder or program?
0C11 230B             (gshell_beta5_yak.):02065                  bls   UNSLICO1     Yes, draw box
0C13 C105             (gshell_beta5_yak.):02066                  cmpb  #IC.DRIVE    Drive?
0C15 2707             (gshell_beta5_yak.):02067                  beq   UNSLICO1     Yes, draw grey box
0C17 C006             (gshell_beta5_yak.):02068                  subb  #IC.AIF.F    If AIF or previously done AIF, we do outside box stuff 1st 
0C19 2703             (gshell_beta5_yak.):02069                  beq   UNSLICO1
0C1B 5A               (gshell_beta5_yak.):02070                  decb  
0C1C 2617             (gshell_beta5_yak.):02071                  bne   UNSLICO2
0C1E 8E0002           (gshell_beta5_yak.):02072         UNSLICO1 ldx   #2           If AIF related, set color to 2 and draw box around it (clear
0C21 D623             (gshell_beta5_yak.):02073                  ldb   WNDWPATH+1   box around around icon)
0C23 3416             (gshell_beta5_yak.):02074                  pshs  d,X
0C25 172A05           (gshell_beta5_yak.):02075                  lbsr  FCOLOR
                      (gshell_beta5_yak.):02076                IFNE  H6309
                      (gshell_beta5_yak.):02077                  clre               Flag that we are just doing light grey box
                      (gshell_beta5_yak.):02078                ELSE
0C28 7F1370           (gshell_beta5_yak.):02079                  clr   REGE
                      (gshell_beta5_yak.):02080                ENDC
0C2B 8D0A             (gshell_beta5_yak.):02081                  bsr   DRAIFBOX     Light grey box (same as background color)
0C2D 5F               (gshell_beta5_yak.):02082                  clrb  
0C2E E763             (gshell_beta5_yak.):02083                  stb   3,S
0C30 1729FA           (gshell_beta5_yak.):02084                  lbsr  FCOLOR       Reset foreground color to black
0C33 3264             (gshell_beta5_yak.):02085                  leas  4,S
0C35 35C0             (gshell_beta5_yak.):02086         UNSLICO2 puls  u,pc         ALSO REDRAWS FILENAME - UNNECESSARY FROM HERE, ANYWAYS
                      (gshell_beta5_yak.):02087         
                      (gshell_beta5_yak.):02088         * Draw select box around selected drive/icon
                      (gshell_beta5_yak.):02089         * Color should be set up before calling
                      (gshell_beta5_yak.):02090         * Entry: E=0 if just straight box, <>0 if box AND dark grey invert shadow
                      (gshell_beta5_yak.):02091         *        U=ptr to FL.* structure
                      (gshell_beta5_yak.):02092         * Uses F
0C37 EC42             (gshell_beta5_yak.):02093         DRAIFBOX ldd   FL.YSTRT,U Get Y start coord for icon, subtract 2 for box
0C39 C002             (gshell_beta5_yak.):02094                  subb  #2         A little above top of icon
0C3B 3406             (gshell_beta5_yak.):02095                  pshs  d
0C3D AEC4             (gshell_beta5_yak.):02096                  ldx   FL.XSTRT,U Get X pos of icon
                      (gshell_beta5_yak.):02097                IFNE  H6309
                      (gshell_beta5_yak.):02098                  ldf   FL.ICONO,u Get icon type
                      (gshell_beta5_yak.):02099                  subf  #IC.DRIVE  Drive? (special case)
                      (gshell_beta5_yak.):02100                ELSE
0C3F A648             (gshell_beta5_yak.):02101                  lda   FL.ICONO,u Get icon type
0C41 8005             (gshell_beta5_yak.):02102                  suba  #IC.DRIVE  Drive? (special case)
0C43 B71371           (gshell_beta5_yak.):02103                  sta   REGF
                      (gshell_beta5_yak.):02104                ENDC
0C46 2604             (gshell_beta5_yak.):02105                  bne   NormIcon   No, do normal box
0C48 301D             (gshell_beta5_yak.):02106                  leax  -3,x       Yes, smaller box
0C4A 2013             (gshell_beta5_yak.):02107                  bra   Minus9     Go save X pos
                      (gshell_beta5_yak.):02108         
0C4C 3017             (gshell_beta5_yak.):02109         NormIcon leax  -9,X       -9 to include text
0C4E 0D5D             (gshell_beta5_yak.):02110                  tst   WD48FLAG   If 40 column, bump down by another 14
0C50 260D             (gshell_beta5_yak.):02111                  bne   Minus9
0C52 3010             (gshell_beta5_yak.):02112                  leax  -16,x
0C54 ECC4             (gshell_beta5_yak.):02113                  ldd   FL.XSTRT,u Get original icon start again
                      (gshell_beta5_yak.):02114                IFNE  H6309
                      (gshell_beta5_yak.):02115                  lsld             Put column # in A
                      (gshell_beta5_yak.):02116                  lsld  
                      (gshell_beta5_yak.):02117                ELSE
0C56 58               (gshell_beta5_yak.):02118                  lslb
0C57 49               (gshell_beta5_yak.):02119                  rola
0C58 58               (gshell_beta5_yak.):02120                  lslb
0C59 49               (gshell_beta5_yak.):02121                  rola
                      (gshell_beta5_yak.):02122                ENDC
0C5A 3002             (gshell_beta5_yak.):02123         AdjLoop  leax  2,x        2 pixels per column
0C5C 4A               (gshell_beta5_yak.):02124                  deca  
0C5D 26FB             (gshell_beta5_yak.):02125                  bne   AdjLoop
0C5F DC22             (gshell_beta5_yak.):02126         Minus9   ldd   WNDWPATH   Save X start & window path
0C61 3416             (gshell_beta5_yak.):02127                  pshs  d,X
0C63 1729EF           (gshell_beta5_yak.):02128                  lbsr  SETDPTR    Set draw ptr to upper left corner of box
                      (gshell_beta5_yak.):02129         * include text below icon as well
0C66 CC0024           (gshell_beta5_yak.):02130                  ldd   #36        Box height 36 pixels (2 above & below)
                      (gshell_beta5_yak.):02131                IFNE  H6309
                      (gshell_beta5_yak.):02132                  tstf  
                      (gshell_beta5_yak.):02133                ELSE
0C69 7D1371           (gshell_beta5_yak.):02134                  tst   REGF
                      (gshell_beta5_yak.):02135                ENDC
0C6C 2603             (gshell_beta5_yak.):02136                  bne   NormIco2
0C6E CC0018           (gshell_beta5_yak.):02137                  ldd   #24        Unless drive, then 24
0C71 ED64             (gshell_beta5_yak.):02138         NormIco2 std   4,S
                      (gshell_beta5_yak.):02139                IFNE  H6309
                      (gshell_beta5_yak.):02140                  tstf             Drive?
                      (gshell_beta5_yak.):02141                ELSE
0C73 7D1371           (gshell_beta5_yak.):02142                  tst   REGF
                      (gshell_beta5_yak.):02143                ENDC
0C76 2604             (gshell_beta5_yak.):02144                  bne   NormIco3   No, determine width
0C78 C61D             (gshell_beta5_yak.):02145                  ldb   #29        Special width for drive
0C7A 2008             (gshell_beta5_yak.):02146                  bra   DRAIFBO1
                      (gshell_beta5_yak.):02147         
0C7C C644             (gshell_beta5_yak.):02148         NormIco3 ldb   #68        80 columns defaults to 68 pixel width
0C7E 0D5D             (gshell_beta5_yak.):02149                  tst   WD48FLAG   If 80 column skip ahead
0C80 2602             (gshell_beta5_yak.):02150                  bne   DRAIFBO1
0C82 C63E             (gshell_beta5_yak.):02151                  ldb   #62        Box width 62 pixels for 40 column
0C84 ED62             (gshell_beta5_yak.):02152         DRAIFBO1 std   2,S        Save box width
0C86 1729C8           (gshell_beta5_yak.):02153                  lbsr  RBOX       Draw box & return
                      (gshell_beta5_yak.):02154         * use entry flag to flag whether
                      (gshell_beta5_yak.):02155                IFNE  H6309
                      (gshell_beta5_yak.):02156                  tste             Do we want shadow too?
                      (gshell_beta5_yak.):02157                ELSE
0C89 7D1370           (gshell_beta5_yak.):02158                  tst   REGE
                      (gshell_beta5_yak.):02159                ENDC
0C8C 2726             (gshell_beta5_yak.):02160                  beq   DoneAIFB   No, exit
0C8E C601             (gshell_beta5_yak.):02161                  ldb   #1         Dark Grey color
0C90 ED62             (gshell_beta5_yak.):02162                  std   2,s
0C92 172998           (gshell_beta5_yak.):02163                  lbsr  FCOLOR
0C95 5F               (gshell_beta5_yak.):02164                  clrb             Set X offset to 0
0C96 ED62             (gshell_beta5_yak.):02165                  std   2,s
0C98 1729AE           (gshell_beta5_yak.):02166                  lbsr  RLINE      Draw vertical line
0C9B 5F               (gshell_beta5_yak.):02167                  clrb             Set Y offset to 0
0C9C ED64             (gshell_beta5_yak.):02168                  std   4,s
                      (gshell_beta5_yak.):02169                IFNE  H6309
                      (gshell_beta5_yak.):02170                  tstf             Drive?
                      (gshell_beta5_yak.):02171                ELSE
0C9E 7D1371           (gshell_beta5_yak.):02172                  tst   REGF
                      (gshell_beta5_yak.):02173                ENDC
0CA1 2604             (gshell_beta5_yak.):02174                  bne   NormIco4   No
0CA3 C61C             (gshell_beta5_yak.):02175                  ldb   #28
0CA5 2008             (gshell_beta5_yak.):02176                  bra   Do40Shdw
                      (gshell_beta5_yak.):02177         
0CA7 C63D             (gshell_beta5_yak.):02178         NormIco4 ldb   #61        61 pixel width for 40 column
0CA9 0D5D             (gshell_beta5_yak.):02179                  tst   WD48FLAG
0CAB 2702             (gshell_beta5_yak.):02180                  beq   Do40Shdw
0CAD C643             (gshell_beta5_yak.):02181                  ldb   #67        67 pixel width for 80 column
0CAF ED62             (gshell_beta5_yak.):02182         Do40Shdw std   2,s        X offset
0CB1 172995           (gshell_beta5_yak.):02183                  lbsr  RLINE      Draw horizontal dark grey line
0CB4 3266             (gshell_beta5_yak.):02184         DoneAIFB leas  6,S        Eat stack & return
0CB6 39               (gshell_beta5_yak.):02185                  rts   
                      (gshell_beta5_yak.):02186         
0CB7 3440             (gshell_beta5_yak.):02187         UPDTDEVC pshs  U
0CB9 CE125D           (gshell_beta5_yak.):02188                  ldu   #DRIVETBL
0CBC 8E0015           (gshell_beta5_yak.):02189                  ldx   #21
0CBF C604             (gshell_beta5_yak.):02190                  ldb   #4
0CC1 3416             (gshell_beta5_yak.):02191                  pshs  d,X
0CC3 8E0001           (gshell_beta5_yak.):02192                  ldx   #1
0CC6 3410             (gshell_beta5_yak.):02193                  pshs  X
0CC8 D623             (gshell_beta5_yak.):02194                  ldb   WNDWPATH+1
0CCA 3416             (gshell_beta5_yak.):02195                  pshs  d,X
0CCC 172921           (gshell_beta5_yak.):02196                  lbsr  CWAREA
0CCF 172254           (gshell_beta5_yak.):02197                  lbsr  MOUSOFF    Shut off auto-follow mouse
0CD2 172204           (gshell_beta5_yak.):02198                  lbsr  CLRSCRN
0CD5 17240B           (gshell_beta5_yak.):02199                  lbsr  FULLSCRN
0CD8 2005             (gshell_beta5_yak.):02200                  bra   UPDTDEV2
                      (gshell_beta5_yak.):02201         
0CDA 17FCEE           (gshell_beta5_yak.):02202         UPDTDEV1 lbsr  WRITICON   Print icon on screen
0CDD EE4A             (gshell_beta5_yak.):02203                  ldu   FL.LINK,U  Get next device in linked list
0CDF EFE4             (gshell_beta5_yak.):02204         UPDTDEV2 stu   ,S         Save it
0CE1 26F7             (gshell_beta5_yak.):02205                  bne   UPDTDEV1   Still more drives, do next one
0CE3 8E03A1           (gshell_beta5_yak.):02206                  ldx   #TRSHDESC  Now, do trash can
0CE6 AFE4             (gshell_beta5_yak.):02207                  stx   ,S
0CE8 17FCE0           (gshell_beta5_yak.):02208                  lbsr  WRITICON
0CEB 8E03AF           (gshell_beta5_yak.):02209                  ldx   #PRTRDESC  And printer
0CEE AFE4             (gshell_beta5_yak.):02210                  stx   ,s
0CF0 17FCD8           (gshell_beta5_yak.):02211                  lbsr  WRITICON
0CF3 DC36             (gshell_beta5_yak.):02212                  ldd   DEVICNOW   Get current drive (if any)
0CF5 EDE4             (gshell_beta5_yak.):02213                  std   ,S
0CF7 17FED4           (gshell_beta5_yak.):02214                  lbsr  SELCICON   Select it on screen
0CFA DC22             (gshell_beta5_yak.):02215                  ldd   WNDWPATH
0CFC EDE4             (gshell_beta5_yak.):02216                  std   ,S
0CFE 172229           (gshell_beta5_yak.):02217                  lbsr  INITMOUS   Set mouse parms
0D01 326A             (gshell_beta5_yak.):02218                  leas  10,S
0D03 35C0             (gshell_beta5_yak.):02219                  puls  U,PC
                      (gshell_beta5_yak.):02220         
                      (gshell_beta5_yak.):02221         * Get ptr to root path (not including drive name)
                      (gshell_beta5_yak.):02222         * Exit: X=ptr to either end of pathname (if on root), or ptr to root path
                      (gshell_beta5_yak.):02223         *       D=1 if on root
                      (gshell_beta5_yak.):02224         *       D=0 if found path
0D05 8E0472           (gshell_beta5_yak.):02225         FNDSLASH ldx   #DDIRNAME+1 Point to full path of current dir (skip 1st '/')
0D08 E680             (gshell_beta5_yak.):02226         FNDSLAS1 ldb   ,X+        Get char
0D0A 2707             (gshell_beta5_yak.):02227                  beq   FNDSLAS2   End of path, exit with D=1
0D0C C12F             (gshell_beta5_yak.):02228                  cmpb  #'/        Find slash?
0D0E 26F8             (gshell_beta5_yak.):02229                  bne   FNDSLAS1   No, keep looking
0D10 5F               (gshell_beta5_yak.):02230                  clrb             Exit with D=0
0D11 2001             (gshell_beta5_yak.):02231                  bra   FNDSLAS3
                      (gshell_beta5_yak.):02232         
0D13 5C               (gshell_beta5_yak.):02233         FNDSLAS2 incb  
0D14 4F               (gshell_beta5_yak.):02234         FNDSLAS3 clra  
0D15 39               (gshell_beta5_yak.):02235                  rts   
                      (gshell_beta5_yak.):02236         
                      (gshell_beta5_yak.):02237         * Check if icon (or clickable option)
                      (gshell_beta5_yak.):02238         * Exit: D=0 if no icon selected
                      (gshell_beta5_yak.):02239         *       else D=ptr to FL.* structure for icon selected
0D16 3440             (gshell_beta5_yak.):02240         ISITICON pshs  U
0D18 AE64             (gshell_beta5_yak.):02241                  ldx   4,S        Get ptr to mouse packet
0D1A EC881A           (gshell_beta5_yak.):02242                  ldd   YT.ACY,X   Get Y coord
0D1D 830008           (gshell_beta5_yak.):02243                  subd  #8
0D20 3416             (gshell_beta5_yak.):02244                  pshs  d,X        Save modified Y coord & room for X coord
0D22 EC8818           (gshell_beta5_yak.):02245                  ldd   YT.ACX,X   Get X coord
0D25 0D1B             (gshell_beta5_yak.):02246                  tst   FLAG640W   640 wide screen?
0D27 2602             (gshell_beta5_yak.):02247                  bne   ISITICO1   No, skip ahead
                      (gshell_beta5_yak.):02248                IFNE  H6309
                      (gshell_beta5_yak.):02249                  asrd             Divide by 2 (scale to 320)
                      (gshell_beta5_yak.):02250                ELSE
0D29 47               (gshell_beta5_yak.):02251                  asra
0D2A 56               (gshell_beta5_yak.):02252                  rorb
                      (gshell_beta5_yak.):02253                ENDC
0D2B 830008           (gshell_beta5_yak.):02254         ISITICO1 subd  #8
0D2E ED62             (gshell_beta5_yak.):02255                  std   2,S        Save modified X coord
0D30 10830020         (gshell_beta5_yak.):02256                  cmpd  #32        Is X coord within 32 pixels of left side (no border)?
0D34 2F11             (gshell_beta5_yak.):02257                  ble   ISITDEVC   Yes, check for device (NOTE: WHERE PRINTER SHOULD GO)
0D36 ECE4             (gshell_beta5_yak.):02258                  ldd   ,S         Get Y adjusted coord
0D38 10830008         (gshell_beta5_yak.):02259                  cmpd  #8         Is it in the current directory bar area?
0D3C 2E05             (gshell_beta5_yak.):02260                  bgt   ISITDISP   No, skip ahead
0D3E CE0377           (gshell_beta5_yak.):02261                  ldu   #DBOXDESC  Point to icon info table entry for CLOSE box in current dir bar
0D41 2039             (gshell_beta5_yak.):02262                  bra   ISITICO4   Go check that
                      (gshell_beta5_yak.):02263         
0D43 DE2C             (gshell_beta5_yak.):02264         ISITDISP ldu   STRTICON   Get ptr to icon descriptor for 1st icon on current scrn
0D45 2035             (gshell_beta5_yak.):02265                  bra   ISITICO4   Check it
                      (gshell_beta5_yak.):02266         
0D47 CE125D           (gshell_beta5_yak.):02267         ISITDEVC ldu   #DRIVETBL  Point to start of device/drive table
0D4A ECE4             (gshell_beta5_yak.):02268                  ldd   ,S         Get adjusted Y coord (NOTE: LDB 1,S BOTH 6809/6309)
0D4C C180             (gshell_beta5_yak.):02269                  cmpb  #128       From 0-128 (drives themselves)?
0D4E 252C             (gshell_beta5_yak.):02270                  blo   ISITICO4   Yes, check with drive table entries
0D50 C1A0             (gshell_beta5_yak.):02271                  cmpb  #160       Trash?
0D52 2505             (gshell_beta5_yak.):02272                  blo   TryPrntr   No, try printer
0D54 CE03A1           (gshell_beta5_yak.):02273                  ldu   #TRSHDESC  Try the trash can descriptor
0D57 2023             (gshell_beta5_yak.):02274                  bra   ISITICO4
                      (gshell_beta5_yak.):02275         
0D59 CE03AF           (gshell_beta5_yak.):02276         TryPrntr ldu   #PRTRDESC  Try printer descriptor
0D5C 201E             (gshell_beta5_yak.):02277                  bra   ISITICO4
                      (gshell_beta5_yak.):02278         
0D5E EC62             (gshell_beta5_yak.):02279         ISITICO2 ldd   2,S        Get X coord
0D60 10A3C4           (gshell_beta5_yak.):02280                  cmpd  FL.XSTRT,U Within X start coord of current file table entry?
0D63 2D15             (gshell_beta5_yak.):02281                  blt   ISITICO3   No, check next file entry
0D65 10A344           (gshell_beta5_yak.):02282                  cmpd  FL.XEND,U  Within X end coord of current entry?
0D68 2E10             (gshell_beta5_yak.):02283                  bgt   ISITICO3   No, check next file entry
0D6A ECE4             (gshell_beta5_yak.):02284                  ldd   ,S         Get Y coord
0D6C 10A342           (gshell_beta5_yak.):02285                  cmpd  FL.YSTRT,U Within Y start coord of current entry?
0D6F 2D09             (gshell_beta5_yak.):02286                  blt   ISITICO3   No, check next
0D71 10A346           (gshell_beta5_yak.):02287                  cmpd  FL.YEND,U  Within Y end coord of current entry
0D74 2E04             (gshell_beta5_yak.):02288                  bgt   ISITICO3   No, check next
0D76 1F30             (gshell_beta5_yak.):02289                  tfr   U,D        Found, move table entry ptr to D & exit
0D78 2008             (gshell_beta5_yak.):02290                  bra   ISITICO5
                      (gshell_beta5_yak.):02291         
                      (gshell_beta5_yak.):02292         * Go to next file table entry
0D7A EE4A             (gshell_beta5_yak.):02293         ISITICO3 ldu   FL.LINK,U  Get next file table ptr
0D7C EF7E             (gshell_beta5_yak.):02294         ISITICO4 stu   -2,S       Is this a legit ptr?
0D7E 26DE             (gshell_beta5_yak.):02295                  bne   ISITICO2   Yes, go check it
0D80 4F               (gshell_beta5_yak.):02296                  clra             No match, return with 0 (done, & no icon clicked)
0D81 5F               (gshell_beta5_yak.):02297                  clrb  
0D82 3264             (gshell_beta5_yak.):02298         ISITICO5 leas  4,S        Eat stack & return
0D84 35C0             (gshell_beta5_yak.):02299                  puls  U,PC
                      (gshell_beta5_yak.):02300         
0D86 CC0120           (gshell_beta5_yak.):02301         SET48X24 ldd   #288       # of bytes for 48x24x4 buffer
0D89 ED6E             (gshell_beta5_yak.):02302                  std   14,S
0D8B 8E0F3F           (gshell_beta5_yak.):02303                  ldx   #MULTIBFR  Point to general purpose buffer (note: this overlaps into LINEBUFR)
0D8E AFE810           (gshell_beta5_yak.):02304                  stx   16,S
0D91 C607             (gshell_beta5_yak.):02305                  ldb   #7
0D93 E769             (gshell_beta5_yak.):02306                  stb   9,S
0D95 CC0030           (gshell_beta5_yak.):02307                  ldd   #48        Need to clear A since 288 above overflows B
0D98 ED6A             (gshell_beta5_yak.):02308                  std   10,S
                      (gshell_beta5_yak.):02309                IFNE H6309
                      (gshell_beta5_yak.):02310                  oim    #$80,7,s   48x24 buffers are +$80 buffer numbers from 24x24 versions
                      (gshell_beta5_yak.):02311                ELSE
0D9A E667             (gshell_beta5_yak.):02312                  ldb   7,S        Get buffer number for 24x24 version
0D9C CA80             (gshell_beta5_yak.):02313                  orb   #$80       Set high bit for 48x24 version
0D9E E767             (gshell_beta5_yak.):02314                  stb   7,S        Save it back
                      (gshell_beta5_yak.):02315                ENDC
0DA0 39               (gshell_beta5_yak.):02316                  rts   
                      (gshell_beta5_yak.):02317         
0DA1 CC0090           (gshell_beta5_yak.):02318         SET24X24 ldd   #144       # of bytes for 24x24x4 buffer
0DA4 ED6E             (gshell_beta5_yak.):02319                  std   14,S
0DA6 8E0EAF           (gshell_beta5_yak.):02320                  ldx   #ICONBUFR  Point to icon build buffer
0DA9 AFE810           (gshell_beta5_yak.):02321                  stx   16,S
0DAC C606             (gshell_beta5_yak.):02322                  ldb   #6
0DAE E769             (gshell_beta5_yak.):02323                  stb   9,S
0DB0 C618             (gshell_beta5_yak.):02324                  ldb   #24        24 bytes high get/put size
0DB2 ED6A             (gshell_beta5_yak.):02325                  std   10,S
0DB4 39               (gshell_beta5_yak.):02326                  rts   
                      (gshell_beta5_yak.):02327         
                      (gshell_beta5_yak.):02328         * Load standard icons
0DB5 3274             (gshell_beta5_yak.):02329         STDICONS leas  -12,S      Make temp buffer on stack
0DB7 9E26             (gshell_beta5_yak.):02330                  ldx   PRCIDNUM   Get GSHELL's process id # (for group)
0DB9 DC22             (gshell_beta5_yak.):02331                  ldd   WNDWPATH   Get GSHELL's window path
0DBB 3416             (gshell_beta5_yak.):02332                  pshs  d,X        Save them
0DBD C618             (gshell_beta5_yak.):02333                  ldb   #24        Save ??? (height in pixels?)
0DBF ED6A             (gshell_beta5_yak.):02334                  std   10,S
0DC1 308D2D57         (gshell_beta5_yak.):02335                  leax  txticon,pc Point to new 4 color image of text
0DC5 C690             (gshell_beta5_yak.):02336                  ldb   #144
0DC7 172A64           (gshell_beta5_yak.):02337                  lbsr  CopyIcon
0DCA 17008A           (gshell_beta5_yak.):02338                  lbsr  ICN48X24
0DCD CC0001           (gshell_beta5_yak.):02339                  ldd   #IC.TEXT
0DD0 ED64             (gshell_beta5_yak.):02340                  std   4,S
0DD2 8DCD             (gshell_beta5_yak.):02341                  bsr   SET24X24
0DD4 1728B7           (gshell_beta5_yak.):02342                  lbsr  GPLOAD
0DD7 8DAD             (gshell_beta5_yak.):02343                  bsr   SET48X24
0DD9 1728B2           (gshell_beta5_yak.):02344                  lbsr  GPLOAD
                      (gshell_beta5_yak.):02345         
0DDC 308D2CAC         (gshell_beta5_yak.):02346                  leax  foldricn,pc Point to new 4 color image of folder
0DE0 C690             (gshell_beta5_yak.):02347                  ldb   #144
0DE2 172A49           (gshell_beta5_yak.):02348                  lbsr  CopyIcon
0DE5 8D70             (gshell_beta5_yak.):02349                  bsr   ICN48X24
0DE7 C602             (gshell_beta5_yak.):02350                  ldb   #IC.FOLDR
0DE9 ED64             (gshell_beta5_yak.):02351                  std   4,S
0DEB 8DB4             (gshell_beta5_yak.):02352                  bsr   SET24X24
0DED 17289E           (gshell_beta5_yak.):02353                  lbsr  GPLOAD
0DF0 8D94             (gshell_beta5_yak.):02354                  bsr   SET48X24
0DF2 172899           (gshell_beta5_yak.):02355                  lbsr  GPLOAD
                      (gshell_beta5_yak.):02356         
0DF5 308D2C03         (gshell_beta5_yak.):02357                  leax  execicon,pc Point to new 4 color image of executable
0DF9 C690             (gshell_beta5_yak.):02358                  ldb   #144
0DFB 172A30           (gshell_beta5_yak.):02359                  lbsr  CopyIcon
0DFE 8D57             (gshell_beta5_yak.):02360                  bsr   ICN48X24   Make double width version for 80 column screen
0E00 C603             (gshell_beta5_yak.):02361                  ldb   #IC.PRGRM
0E02 ED64             (gshell_beta5_yak.):02362                  std   4,S
0E04 8D9B             (gshell_beta5_yak.):02363                  bsr   SET24X24
0E06 172885           (gshell_beta5_yak.):02364                  lbsr  GPLOAD
0E09 17FF7A           (gshell_beta5_yak.):02365                  lbsr  SET48X24
0E0C 17287F           (gshell_beta5_yak.):02366                  lbsr  GPLOAD
                      (gshell_beta5_yak.):02367         
                      (gshell_beta5_yak.):02368         * These next 3 do NOT have double wide versions
0E0F 308D2B59         (gshell_beta5_yak.):02369                  leax  trashicn,pc Point to new 4 color image of trashcan
0E13 C690             (gshell_beta5_yak.):02370                  ldb   #144        144 byte icon
0E15 172A16           (gshell_beta5_yak.):02371                  lbsr  CopyIcon
0E18 C609             (gshell_beta5_yak.):02372                  ldb   #IC.TRASH
0E1A ED64             (gshell_beta5_yak.):02373                  std   4,S
0E1C 8D83             (gshell_beta5_yak.):02374                  bsr   SET24X24
0E1E 17286D           (gshell_beta5_yak.):02375                  lbsr  GPLOAD
                      (gshell_beta5_yak.):02376         
0E21 308D2AFF         (gshell_beta5_yak.):02377                  leax  driveicn,pc Point to new 4 color image of drive
0E25 C648             (gshell_beta5_yak.):02378                  ldb   #72        72 byte icon
0E27 172A04           (gshell_beta5_yak.):02379                  lbsr  CopyIcon
0E2A CC0048           (gshell_beta5_yak.):02380                  ldd   #72        72 bytes to load
0E2D ED6C             (gshell_beta5_yak.):02381                  std   12,S
0E2F C60C             (gshell_beta5_yak.):02382                  ldb   #12        12 lines high 
0E31 ED6A             (gshell_beta5_yak.):02383                  std   10,S
0E33 C605             (gshell_beta5_yak.):02384                  ldb   #IC.DRIVE  Buffer #
0E35 ED64             (gshell_beta5_yak.):02385                  std   4,S
0E37 172854           (gshell_beta5_yak.):02386                  lbsr  GPLOAD     Load it in
                      (gshell_beta5_yak.):02387         
0E3A 308D2D6E         (gshell_beta5_yak.):02388                  leax  prntricn,pc Point to new 4 color image of printer
0E3E C65A             (gshell_beta5_yak.):02389                  ldb   #90        90 bytes to load/copy
0E40 1729EB           (gshell_beta5_yak.):02390                  lbsr  CopyIcon
0E43 CC005A           (gshell_beta5_yak.):02391                  ldd   #90        72 bytes to load
0E46 ED6C             (gshell_beta5_yak.):02392                  std   12,S
0E48 C60F             (gshell_beta5_yak.):02393                  ldb   #15        12 lines high 
0E4A ED6A             (gshell_beta5_yak.):02394                  std   10,S
0E4C C60F             (gshell_beta5_yak.):02395                  ldb   #IC.PRNTR  Buffer #
0E4E ED64             (gshell_beta5_yak.):02396                  std   4,S
0E50 17283B           (gshell_beta5_yak.):02397                  lbsr  GPLOAD     Load it in
0E53 32E810           (gshell_beta5_yak.):02398                  leas  16,S
0E56 39               (gshell_beta5_yak.):02399                  rts   
                      (gshell_beta5_yak.):02400         
                      (gshell_beta5_yak.):02401         * duplicate a 24x12 4 color buffer to a 48x12
                      (gshell_beta5_yak.):02402         * 6309 - use E or F for counter instead of stack
0E57 C690             (gshell_beta5_yak.):02403         ICN48X24 ldb   #144       Counter for # of bytes in 4 color icon
0E59 3444             (gshell_beta5_yak.):02404                  pshs  B,U        Save it
0E5B 8E0EAF           (gshell_beta5_yak.):02405                  ldx   #ICONBUFR  Point to 4 color icon buffer
0E5E CE0F3F           (gshell_beta5_yak.):02406                  ldu   #MULTIBFR  Point to bigger buffer to expand into (could expand into LINEBUFR)
0E61 E680             (gshell_beta5_yak.):02407         IC48X24L ldb   ,X+        Get 4 color byte
0E63 8D08             (gshell_beta5_yak.):02408                  bsr   SR48X24    Expand 2 pixels (a nibble) into 4 pixels (a byte)
0E65 8D06             (gshell_beta5_yak.):02409                  bsr   SR48X24    Do next last half of byte
0E67 6AE4             (gshell_beta5_yak.):02410                  dec   ,S         Are we done all 144 source bytes?
0E69 26F6             (gshell_beta5_yak.):02411                  bne   IC48X24L   No, continue
0E6B 35C4             (gshell_beta5_yak.):02412                  puls  B,U,PC     Restore & return
                      (gshell_beta5_yak.):02413         
0E6D 4F               (gshell_beta5_yak.):02414         SR48X24  clra             Zero out hi byte
0E6E 58               (gshell_beta5_yak.):02415                  lslb             Shift 1st color into B (2 bits)
0E6F 49               (gshell_beta5_yak.):02416                  rola  
0E70 58               (gshell_beta5_yak.):02417                  lslb  
0E71 49               (gshell_beta5_yak.):02418                  rola  
0E72 48               (gshell_beta5_yak.):02419                  lsla             Now, shift that over 1 pixel
0E73 48               (gshell_beta5_yak.):02420                  lsla  
0E74 58               (gshell_beta5_yak.):02421                  lslb             Shift in the next pixel from the source byte
0E75 49               (gshell_beta5_yak.):02422                  rola  
0E76 58               (gshell_beta5_yak.):02423                  lslb  
0E77 49               (gshell_beta5_yak.):02424                  rola  
                      (gshell_beta5_yak.):02425         * 6809/6309 - use scratch DP var
0E78 3402             (gshell_beta5_yak.):02426                  pshs  A          Save that byte (2 source pixels, now separated by a pixel)
0E7A 48               (gshell_beta5_yak.):02427                  lsla             Shift it left by a pixel
0E7B 48               (gshell_beta5_yak.):02428                  lsla  
0E7C AAE0             (gshell_beta5_yak.):02429                  ora   ,S+        Merge with original (effectively doubling each pixel)
0E7E A7C0             (gshell_beta5_yak.):02430                  sta   ,U+        Save doubled up byte
0E80 39               (gshell_beta5_yak.):02431                  rts   
                      (gshell_beta5_yak.):02432         
0E81 616966           (gshell_beta5_yak.):02433         AIF.NAME fcc   "aif"
                      (gshell_beta5_yak.):02434         
0E84 2E               (gshell_beta5_yak.):02435         ONEDOT   fcb   '.
0E85 00               (gshell_beta5_yak.):02436                  fcb   NUL
                      (gshell_beta5_yak.):02437         
                      (gshell_beta5_yak.):02438         * Entry: 0-1,s=RTS address
                      (gshell_beta5_yak.):02439         *        2-3,s=Ptr to file table entry
0E86 3440             (gshell_beta5_yak.):02440         FILE.XXX pshs  U
0E88 EE64             (gshell_beta5_yak.):02441                  ldu   4,S        Get ptr to file table entry
0E8A 32E8C0           (gshell_beta5_yak.):02442                  leas  -64,S      Make large buffer on stack (working copy of Icon Descriptor (ID.*), etc.)
                      (gshell_beta5_yak.):02443                IFNE  H6309
                      (gshell_beta5_yak.):02444                  clrd  
                      (gshell_beta5_yak.):02445                ELSE
0E8D 4F               (gshell_beta5_yak.):02446                  clra
0E8E 5F               (gshell_beta5_yak.):02447                  clrb
                      (gshell_beta5_yak.):02448                ENDC
0E8F EDE81C           (gshell_beta5_yak.):02449                  std   28,S
0E92 EC4C             (gshell_beta5_yak.):02450                  ldd   FL.FNAME,U Get ptr to filename
0E94 3406             (gshell_beta5_yak.):02451                  pshs  d
0E96 1701C1           (gshell_beta5_yak.):02452                  lbsr  ISIT.AIF   Check if filename starts with 'AIF.' (case insensitive)
0E99 EDE81E           (gshell_beta5_yak.):02453                  std   28+2,S     Save flag (0=Not AIF, else it is)
0E9C ECE848           (gshell_beta5_yak.):02454                  ldd   70+2,S     Get ptr to 3 char extension
0E9F EDE4             (gshell_beta5_yak.):02455                  std   ,S         Save for subroutine
0EA1 1701D1           (gshell_beta5_yak.):02456                  lbsr  MTCH.XXX   Check if we have seen this AIF type before
0EA4 3262             (gshell_beta5_yak.):02457                  leas  2,S        Eat temp stack
0EA6 EDE816           (gshell_beta5_yak.):02458                  std   22,S       Save either ptr to Icon Descriptor (if we have found before), or 0 if not
0EA9 10260143         (gshell_beta5_yak.):02459                  lbne  FILEXXX3   Have found it before, skip ahead
                      (gshell_beta5_yak.):02460         * New AIF.xxx extension found
0EAD ECE846           (gshell_beta5_yak.):02461                  ldd   70,S
0EB0 3406             (gshell_beta5_yak.):02462                  pshs  d
0EB2 308CCC           (gshell_beta5_yak.):02463                  leax  <AIF.NAME,PC Point to "aif."
0EB5 3410             (gshell_beta5_yak.):02464                  pshs  X          Save for string copy
0EB7 30E824           (gshell_beta5_yak.):02465                  leax  38-2,S     Where to copy it to
0EBA 3410             (gshell_beta5_yak.):02466                  pshs  X          Save for string copy
0EBC 17255E           (gshell_beta5_yak.):02467                  lbsr  STRCPY     Copy it
0EBF 3264             (gshell_beta5_yak.):02468                  leas  4,S        Eat temp stack
0EC1 3406             (gshell_beta5_yak.):02469                  pshs  d          Save ptr to dest string
0EC3 172567           (gshell_beta5_yak.):02470                  lbsr  STRCAT     Append 3 char extension to temp string
0EC6 EDE81E           (gshell_beta5_yak.):02471                  std   26+4,S     Save ptr to combined string
0EC9 8E0001           (gshell_beta5_yak.):02472                  ldx   #READ.     Read mode
0ECC AF62             (gshell_beta5_yak.):02473                  stx   2,S
0ECE EDE4             (gshell_beta5_yak.):02474                  std   ,S
                      (gshell_beta5_yak.):02475         * Process AIF file, store into temporary ID.* table entry on stack
0ED0 17250D           (gshell_beta5_yak.):02476                  lbsr  I.OPEN2    Open AIF file
0ED3 3264             (gshell_beta5_yak.):02477                  leas  4,S        Eat temp stack
0ED5 EDE81E           (gshell_beta5_yak.):02478                  std   30,S       Save path to AIF file
0ED8 102D010B         (gshell_beta5_yak.):02479                  lblt  FILEXXX2   Couldn't open, skip ahead (D=-1)
0EDC ECE846           (gshell_beta5_yak.):02480                  ldd   70,S
0EDF 3406             (gshell_beta5_yak.):02481                  pshs  d
0EE1 170245           (gshell_beta5_yak.):02482                  lbsr  PUTSTRNG   Allocate memory & copy extension string there
0EE4 EDE812           (gshell_beta5_yak.):02483                  std   ID.XXXPT+2,S  Save ptr to AIF 3 char extension
                      (gshell_beta5_yak.):02484         * stack at this point:
                      (gshell_beta5_yak.):02485         * 0-1,s   = temp value for subroutine calls
                      (gshell_beta5_yak.):02486         * 26-27,s = Ptr to path to icon file
                      (gshell_beta5_yak.):02487         * 28-29,s = Ptr to program name (AIF line #1)
                      (gshell_beta5_yak.):02488         * 32-33,s = Path # to AIF file
0EE7 ECE820           (gshell_beta5_yak.):02489                  ldd   30+2,S     Get path to AIF file
0EEA EDE4             (gshell_beta5_yak.):02490                  std   ,S         Save for subroutine
0EEC 1703C8           (gshell_beta5_yak.):02491                  lbsr  RDLN80CH   Read line of up to 80 chars (AIF line #1)
0EEF EDE4             (gshell_beta5_yak.):02492                  std   ,S         Save size of read
0EF1 170235           (gshell_beta5_yak.):02493                  lbsr  PUTSTRNG   Allocate mem & copy string into that mem
0EF4 EDE810           (gshell_beta5_yak.):02494                  std   ID.MNAME+2,S Save pointer to program name in AIF structure
0EF7 EDE81C           (gshell_beta5_yak.):02495                  std   26+2,S     Save temp copy
                      (gshell_beta5_yak.):02496         * Added EOU Beta 5: Search string for '|' char. If present, return B with offset. This will be used
                      (gshell_beta5_yak.):02497         * For the onscreen program name, leaving the original for F$Fork.
0EFA 1F01             (gshell_beta5_yak.):02498                  tfr   d,x        Move prog name ptr to X
0EFC 172A13           (gshell_beta5_yak.):02499                  lbsr  ParsPipe   See if pipe present, return offset if so (and append NUL) in B (0=none)
0EFF E762             (gshell_beta5_yak.):02500                  stb   ID.ALTNM+2,s  Save offset to "printable" name (0 if none)
0F01 ECE820           (gshell_beta5_yak.):02501                  ldd   30+2,S     Get path to AIF file
0F04 EDE4             (gshell_beta5_yak.):02502                  std   ,S
0F06 1703AE           (gshell_beta5_yak.):02503                  lbsr  RDLN80CH   Read parameters line (AIF line #2)
0F09 EDE4             (gshell_beta5_yak.):02504                  std   ,S         Save size of read
0F0B 17021B           (gshell_beta5_yak.):02505                  lbsr  PUTSTRNG   Allocate mem & copy string
0F0E EDE814           (gshell_beta5_yak.):02506                  std   ID.PARAM+2,S Save parm line ptr
0F11 ECE820           (gshell_beta5_yak.):02507                  ldd   30+2,S     Get path to AIF file
0F14 EDE4             (gshell_beta5_yak.):02508                  std   ,S
0F16 17039E           (gshell_beta5_yak.):02509                  lbsr  RDLN80CH   Get icon file path (AIF line #3)
0F19 EDE4             (gshell_beta5_yak.):02510                  std   ,S         Save # bytes read
0F1B 17020B           (gshell_beta5_yak.):02511                  lbsr  PUTSTRNG   Allocate mem & copy string
0F1E EDE81A           (gshell_beta5_yak.):02512                  std   24+2,S     Save copy of ptr to icon file path
0F21 ECE820           (gshell_beta5_yak.):02513                  ldd   30+2,S     Get path to AIF file
0F24 EDE4             (gshell_beta5_yak.):02514                  std   ,S
0F26 170120           (gshell_beta5_yak.):02515                  lbsr  GETNUMBR   Get memory modifier (in 256 byte pages) HANDLES +/- (AIF line #4)
0F29 ED6E             (gshell_beta5_yak.):02516                  std   ID.MEMSZ+2,S Save mem size
0F2B 17011B           (gshell_beta5_yak.):02517                  lbsr  GETNUMBR   Get Window type (AIF line #5)
0F2E ED64             (gshell_beta5_yak.):02518                  std   ID.WTYPE+2,S Save window type (includes - & 0's!)
0F30 170116           (gshell_beta5_yak.):02519                  lbsr  GETNUMBR   Get Window width (AIF line #6)
0F33 ED66             (gshell_beta5_yak.):02520                  std   ID.XSIZE+2,S Save minimum X size
0F35 170111           (gshell_beta5_yak.):02521                  lbsr  GETNUMBR   Get Window height (AIF line #7)
0F38 ED68             (gshell_beta5_yak.):02522                  std   ID.YSIZE+2,S Save minimum Y size
0F3A 17010C           (gshell_beta5_yak.):02523                  lbsr  GETNUMBR   Get Background palette # (AIF line #8)
0F3D ED6C             (gshell_beta5_yak.):02524                  std   ID.BKGND+2,S Save background color
0F3F 170107           (gshell_beta5_yak.):02525                  lbsr  GETNUMBR   Get Foreground palette # (AIF line #9)
0F42 ED6A             (gshell_beta5_yak.):02526                  std   ID.FRGND+2,S Save foreground color
                      (gshell_beta5_yak.):02527         * LCB: When we extend AIF to add line #10 (default data directory, blank=current) and
                      (gshell_beta5_yak.):02528         * line #11 (default Exec directory, blank=current), that goes here, along with EOF checks
                      (gshell_beta5_yak.):02529         * to skip for backwards compatibility
0F44 1724A6           (gshell_beta5_yak.):02530                  lbsr  I.CLOSE    Close the AIF file
                      (gshell_beta5_yak.):02531         * Buffer in the ICON get/put buffer file (always 144 bytes)
0F47 C605             (gshell_beta5_yak.):02532                  ldb   #EXEC.+READ.
0F49 EDE4             (gshell_beta5_yak.):02533                  std   ,S
0F4B ECE81A           (gshell_beta5_yak.):02534                  ldd   26,S       Get icon file path ptr
0F4E 3406             (gshell_beta5_yak.):02535                  pshs  d
0F50 17248D           (gshell_beta5_yak.):02536                  lbsr  I.OPEN2    Open icon file
0F53 3264             (gshell_beta5_yak.):02537                  leas  4,S
0F55 EDE81E           (gshell_beta5_yak.):02538                  std   30,S       Save path # to icon file
0F58 2D74             (gshell_beta5_yak.):02539                  blt   FILEXXX1   Error opening, skip ahead
0F5A CC0090           (gshell_beta5_yak.):02540                  ldd   #144       Size of icon file
0F5D 3406             (gshell_beta5_yak.):02541                  pshs  d
0F5F 8E0EAF           (gshell_beta5_yak.):02542                  ldx   #ICONBUFR  Point to buffer to hold icon data
0F62 ECE820           (gshell_beta5_yak.):02543                  ldd   34-2,S     Get path #
0F65 3416             (gshell_beta5_yak.):02544                  pshs  d,X        Save them both
0F67 172424           (gshell_beta5_yak.):02545                  lbsr  I.READ     Read in icon data
0F6A ECE824           (gshell_beta5_yak.):02546                  ldd   30+6,S     Get path # again
0F6D EDE4             (gshell_beta5_yak.):02547                  std   ,S
0F6F 17247B           (gshell_beta5_yak.):02548                  lbsr  I.CLOSE    Close icon file
0F72 ECE81E           (gshell_beta5_yak.):02549                  ldd   24+6,S
0F75 EDE4             (gshell_beta5_yak.):02550                  std   ,S
0F77 1722D9           (gshell_beta5_yak.):02551                  lbsr  FREE
0F7A ECE84C           (gshell_beta5_yak.):02552                  ldd   70+6,S
0F7D EDE4             (gshell_beta5_yak.):02553                  std   ,S
0F7F 17009D           (gshell_beta5_yak.):02554                  lbsr  EXTICTBL   Allocate a new AIF descriptor entry (ID.*)
0F82 EDE81C           (gshell_beta5_yak.):02555                  std   22+6,S     Save ptr to new entry
                      (gshell_beta5_yak.):02556         * copy stack copy of ID.* structure to ID.* actual entry we just allocated
0F85 EDE4             (gshell_beta5_yak.):02557                  std   ,S         and again
0F87 CC0016           (gshell_beta5_yak.):02558                  ldd   #ID.SIZE   Get size of ID.* structure (size of copy)
0F8A ED64             (gshell_beta5_yak.):02559                  std   4,S        Save it
0F8C 3066             (gshell_beta5_yak.):02560                  leax  2+4,S      Point X to start of stack copy of ID.* structure (src ptr)
0F8E AF62             (gshell_beta5_yak.):02561                  stx   2,S        Save it
0F90 1724FF           (gshell_beta5_yak.):02562                  lbsr  STRNCPY    Copy stack copy of ID.* structure into allocated entry
0F93 ECA90415         (gshell_beta5_yak.):02563                  ldd   NXTICONO,Y Get next available external icon #
0F97 AEE81C           (gshell_beta5_yak.):02564                  ldx   22+6,S     Get ptr to new ID.* entry we just made
0F9A E701             (gshell_beta5_yak.):02565                  stb   1,X        Save just the icon # (leave ,x as name offset).
                      (gshell_beta5_yak.):02566                IFNE  H6309
                      (gshell_beta5_yak.):02567                  incd             Increase next available icon by 1 
                      (gshell_beta5_yak.):02568                ELSE
0F9C C30001           (gshell_beta5_yak.):02569                  addd  #$0001     Increase next available icon by 1
                      (gshell_beta5_yak.):02570                ENDC
0F9F EDA90415         (gshell_beta5_yak.):02571                  std   NXTICONO,Y Save new value
                      (gshell_beta5_yak.):02572                IFNE  H6309
                      (gshell_beta5_yak.):02573                  clrd  
                      (gshell_beta5_yak.):02574                ELSE
0FA3 4F               (gshell_beta5_yak.):02575                  clra
0FA4 5F               (gshell_beta5_yak.):02576                  clrb
                      (gshell_beta5_yak.):02577                ENDC
0FA5 ED8814           (gshell_beta5_yak.):02578                  std   ID.LINK,X  Set next Icon descriptor in linked list to unused
0FA8 CC0018           (gshell_beta5_yak.):02579                  ldd   #24
0FAB EDE4             (gshell_beta5_yak.):02580                  std   ,S
0FAD 3406             (gshell_beta5_yak.):02581                  pshs  d
0FAF ECF81E           (gshell_beta5_yak.):02582                  ldd   [32-2,S]
0FB2 3416             (gshell_beta5_yak.):02583                  pshs  d,X
0FB4 9E26             (gshell_beta5_yak.):02584                  ldx   PRCIDNUM   Get GShell's process id
0FB6 DC22             (gshell_beta5_yak.):02585                  ldd   WNDWPATH   Get GShell's I/O path #
0FB8 3416             (gshell_beta5_yak.):02586                  pshs  d,X        Save both for subroutine
0FBA 17FDE4           (gshell_beta5_yak.):02587                  lbsr  SET24X24   Set up ICONBUFR for 24x24x4 icon data
0FBD 1726CE           (gshell_beta5_yak.):02588                  lbsr  GPLOAD     GPload the icon into it's get/put buffer
0FC0 17FE94           (gshell_beta5_yak.):02589                  lbsr  ICN48X24   Expand 24x24 buffer from ICONBUFR to 48x24 buffer in MULTIBFR
0FC3 17FDC0           (gshell_beta5_yak.):02590                  lbsr  SET48X24   Set up MULTIBFR for 48x24x4 icon data (pixel doubled horizontally)
0FC6 1726C5           (gshell_beta5_yak.):02591                  lbsr  GPLOAD     GPload the icon into it's get/put buffer (same as 24x24 version + $80 for buffer #)
0FC9 32E810           (gshell_beta5_yak.):02592                  leas  16,S
0FCC 2019             (gshell_beta5_yak.):02593                  bra   FILEXXX2
                      (gshell_beta5_yak.):02594         
                      (gshell_beta5_yak.):02595         * AIF file present, but icon file specified couldn't load comes here
0FCE EC6E             (gshell_beta5_yak.):02596         FILEXXX1 ldd   14,S       Free 3 of the buffers we were using (filename, etc. buffers)
0FD0 3406             (gshell_beta5_yak.):02597                  pshs  d
0FD2 17227E           (gshell_beta5_yak.):02598                  lbsr  FREE
0FD5 ECE814           (gshell_beta5_yak.):02599                  ldd   18+2,S
0FD8 EDE4             (gshell_beta5_yak.):02600                  std   ,S
0FDA 172276           (gshell_beta5_yak.):02601                  lbsr  FREE
0FDD ECE81A           (gshell_beta5_yak.):02602                  ldd   24+2,S
0FE0 EDE4             (gshell_beta5_yak.):02603                  std   ,S
0FE2 17226E           (gshell_beta5_yak.):02604                  lbsr  FREE
0FE5 3262             (gshell_beta5_yak.):02605                  leas  2,S
                      (gshell_beta5_yak.):02606         * Comes here if AIF file failed to I$Open, or if successfully loaded everything including icon
0FE7 ECE81E           (gshell_beta5_yak.):02607         FILEXXX2 ldd   30,S
0FEA 2C04             (gshell_beta5_yak.):02608                  bge   FILEXXX3
                      (gshell_beta5_yak.):02609                IFNE  H6309
                      (gshell_beta5_yak.):02610                  clrd  
                      (gshell_beta5_yak.):02611                ELSE
0FEC 4F               (gshell_beta5_yak.):02612                  clra
0FED 5F               (gshell_beta5_yak.):02613                  clrb
                      (gshell_beta5_yak.):02614                ENDC
0FEE 202A             (gshell_beta5_yak.):02615                  bra   FILEXXX6
                      (gshell_beta5_yak.):02616         
                      (gshell_beta5_yak.):02617         * AIF 3 char extension has been found before
0FF0 ECE81C           (gshell_beta5_yak.):02618         FILEXXX3 ldd   28,S
0FF3 2717             (gshell_beta5_yak.):02619                  beq   FILEXXX4
0FF5 AEE816           (gshell_beta5_yak.):02620                  ldx   22,S
0FF8 EC0E             (gshell_beta5_yak.):02621                  ldd   ID.MNAME,X Get ptr to program name tied to this AIF extension
0FFA 3406             (gshell_beta5_yak.):02622                  pshs  d
0FFC 3440             (gshell_beta5_yak.):02623                  pshs  U
0FFE 1706E8           (gshell_beta5_yak.):02624                  lbsr  RPLFICON   Update File Icon descriptor table (FL.*)
1001 3264             (gshell_beta5_yak.):02625                  leas  4,S
1003 1F03             (gshell_beta5_yak.):02626                  tfr   D,U
1005 CC0006           (gshell_beta5_yak.):02627                  ldd   #IC.AIF.F  Single program icon (?) descriptor identifier
1008 E748             (gshell_beta5_yak.):02628                  stb   FL.ICONO,U Save as icon type # in our file icon descriptor
100A 2003             (gshell_beta5_yak.):02629                  bra   FILEXXX5
                      (gshell_beta5_yak.):02630         
100C CC0007           (gshell_beta5_yak.):02631         FILEXXX4 ldd   #IC.F.XXX
100F EDE81C           (gshell_beta5_yak.):02632         FILEXXX5 std   28,S
1012 ECF816           (gshell_beta5_yak.):02633                  ldd   [22,S]     Get our corresponding Icon Descriptor entry #
1015 E749             (gshell_beta5_yak.):02634                  stb   FL.AIFNO,U Save in File icon table entry
1017 ECE81C           (gshell_beta5_yak.):02635                  ldd   28,S
101A 32E840           (gshell_beta5_yak.):02636         FILEXXX6 leas  64,S
101D 35C0             (gshell_beta5_yak.):02637                  puls  U,PC
                      (gshell_beta5_yak.):02638         
                      (gshell_beta5_yak.):02639         * Allocate new ID.* descriptor
                      (gshell_beta5_yak.):02640         * Exit:D=0 if could not allocate new descriptor
                      (gshell_beta5_yak.):02641         *      or D=ptr to where new descriptor is
101F 3440             (gshell_beta5_yak.):02642         EXTICTBL pshs  U
1021 CC0016           (gshell_beta5_yak.):02643                  ldd   #ID.SIZE   Size of ID.* structure (for AIF's)
1024 3416             (gshell_beta5_yak.):02644                  pshs  d,X
1026 17011C           (gshell_beta5_yak.):02645                  lbsr  MEMSPACE   Try to allocate memory for another ID.* entry
1029 3262             (gshell_beta5_yak.):02646                  leas  2,S
102B EDE4             (gshell_beta5_yak.):02647                  std   ,S         Save ptr to where new ID.* entry will go
102D EDB813           (gshell_beta5_yak.):02648                  std   [IDSCNEXT,Y] ??? Save where process ID # is supposed to be???
1030 C30014           (gshell_beta5_yak.):02649                  addd  #ID.LINK   offset to next link ptr within ID.* entry
1033 DD13             (gshell_beta5_yak.):02650                  std   IDSCNEXT   Save as ptr to next available icon desc. link
1035 ECE1             (gshell_beta5_yak.):02651                  ldd   ,S++       Get ptr to new entry
1037 35C0             (gshell_beta5_yak.):02652                  puls  U,PC       Return with it
                      (gshell_beta5_yak.):02653         
                      (gshell_beta5_yak.):02654         * Find 3 character extensions.
                      (gshell_beta5_yak.):02655         * Entry: 2-3,s = Ptr to filename
                      (gshell_beta5_yak.):02656         * Exit: D=0 if there is no 3 character extension
                      (gshell_beta5_yak.):02657         *       D=ptr to 3 char extension (after the '.')
1039 AE62             (gshell_beta5_yak.):02658         FIND.XXX ldx   2,S
103B 1723D6           (gshell_beta5_yak.):02659                  lbsr  STREND1
103E C62E             (gshell_beta5_yak.):02660                  ldb   #'.
1040 E11C             (gshell_beta5_yak.):02661                  cmpb  -4,X
1042 262E             (gshell_beta5_yak.):02662                  bne   ISITAIF4
1044 301D             (gshell_beta5_yak.):02663                  leax  -3,X
1046 1F10             (gshell_beta5_yak.):02664                  tfr   X,D
1048 39               (gshell_beta5_yak.):02665                  rts   
                      (gshell_beta5_yak.):02666         
                      (gshell_beta5_yak.):02667         * Get a numeric input
                      (gshell_beta5_yak.):02668         * Entry: Path # to read from on stack
1049 EC62             (gshell_beta5_yak.):02669         GETNUMBR ldd   2,S        Get path to do read from
104B 3406             (gshell_beta5_yak.):02670                  pshs  d
104D 170267           (gshell_beta5_yak.):02671                  lbsr  RDLN80CH   Go do 80 char readln
1050 EDE4             (gshell_beta5_yak.):02672                  std   ,S         Save # chars read
1052 2703             (gshell_beta5_yak.):02673                  beq   GETNUMB1   If no characters read, exit
1054 17268F           (gshell_beta5_yak.):02674                  lbsr  ATOI       Convert ASCII # to raw binary form
1057 3262             (gshell_beta5_yak.):02675         GETNUMB1 leas  2,S
1059 39               (gshell_beta5_yak.):02676                  rts   
                      (gshell_beta5_yak.):02677         
                      (gshell_beta5_yak.):02678         * Check if filename starts with 'AIF.' (case insensitive)
                      (gshell_beta5_yak.):02679         * Exit: D=0 if not AIF, D<>0 if AIF
105A AE62             (gshell_beta5_yak.):02680         ISIT.AIF ldx   2,S        Get ptr to filename
105C EC81             (gshell_beta5_yak.):02681                  ldd   ,x++       Get 1st two chars
                      (gshell_beta5_yak.):02682                IFNE  H6309
                      (gshell_beta5_yak.):02683                  andd  #$5f5f     Force case
                      (gshell_beta5_yak.):02684                ELSE
105E 845F             (gshell_beta5_yak.):02685                  anda  #$5f       Force case
1060 C45F             (gshell_beta5_yak.):02686                  andb  #$5f
                      (gshell_beta5_yak.):02687                ENDC
1062 10834149         (gshell_beta5_yak.):02688                  cmpd  #"AI       
1066 260A             (gshell_beta5_yak.):02689                  bne   ISITAIF4   Not AIF file
1068 EC84             (gshell_beta5_yak.):02690                  ldd   ,X         Matching so far, get next 2 chars
106A 845F             (gshell_beta5_yak.):02691                  anda  #$5F       Force case on 3rd char only
106C 1083462E         (gshell_beta5_yak.):02692                  cmpd  #"F.
1070 2702             (gshell_beta5_yak.):02693                  beq   ISITAIF5   Exit with D<>0 since AIF file
1072 4F               (gshell_beta5_yak.):02694         ISITAIF4 clra             Flag not an AIF file
1073 5F               (gshell_beta5_yak.):02695                  clrb  
1074 39               (gshell_beta5_yak.):02696         ISITAIF5 rts   
                      (gshell_beta5_yak.):02697         
                      (gshell_beta5_yak.):02698         * Check if we already have this AIF 3 char extension defined
                      (gshell_beta5_yak.):02699         * Entry: 0-1,s = ptr to 3 char AIF filename extension we are checking if already found
                      (gshell_beta5_yak.):02700         * Exit: D=0 if not a previous AIF extension, else pointer to ID.* entry for matching AIF type.
1075 3450             (gshell_beta5_yak.):02701         MTCH.XXX pshs  X,U        Save regs
1077 EE66             (gshell_beta5_yak.):02702                  ldu   6,S        Get ptr to 1st string
1079 9E11             (gshell_beta5_yak.):02703                  ldx   IDSCSPTR   Get ptr to start of Icon descriptors (linked list)
107B 30882C           (gshell_beta5_yak.):02704                  leax  ID.SIZE*2,X  Skip 1st two entries
107E AE8814           (gshell_beta5_yak.):02705                  ldx   ID.LINK,X  Get ptr to next entry in linked list
1081 2713             (gshell_beta5_yak.):02706                  beq   MTCH.XX2   Hit end of list, skip ahead
1083 EC8810           (gshell_beta5_yak.):02707         MTCH.XX1 ldd   ID.XXXPT,X Get ptr to ? (AIF 3 letter extension?)
1086 3446             (gshell_beta5_yak.):02708                  pshs  d,u        Save both ptrs for subroutine
1088 1723AE           (gshell_beta5_yak.):02709                  lbsr  STRCMP     Check if the strings match
108B 3264             (gshell_beta5_yak.):02710                  leas  4,s        Eat temp copies of string ptrs
108D ED7E             (gshell_beta5_yak.):02711                  std   -2,s       Did they match?
108F 2705             (gshell_beta5_yak.):02712                  beq   MTCH.XX2   Yes, exit 
1091 AE8814           (gshell_beta5_yak.):02713                  ldx   ID.LINK,x  No, get ptr to next entry in ID linked list
1094 26ED             (gshell_beta5_yak.):02714                  bne   MTCH.XX1   Process it (if at end of list, exit with 0)
1096 1F10             (gshell_beta5_yak.):02715         MTCH.XX2 tfr   X,D        Exit with D=0 (matched or not found)
1098 35D0             (gshell_beta5_yak.):02716                  puls  X,U,PC
                      (gshell_beta5_yak.):02717         
                      (gshell_beta5_yak.):02718         * Entry: 0-1,s : RTS address
                      (gshell_beta5_yak.):02719         *        2-3,s : AIF entry # (anything lower than IC.XTRNL is internal AIF's
                      (gshell_beta5_yak.):02720         *                only, such as GCALC, etc.)
                      (gshell_beta5_yak.):02721         * Exit: D=ptr to ID.* structure that matches
                      (gshell_beta5_yak.):02722         *       D=0 if no match found
109A 3440             (gshell_beta5_yak.):02723         FNDIDESC pshs  U
109C EC64             (gshell_beta5_yak.):02724                  ldd   4,S        Get AIF entry # for ID.* structure (only need B)
109E DE11             (gshell_beta5_yak.):02725                  ldu   IDSCSPTR   Get ptr to start of icon descriptor table
                      (gshell_beta5_yak.):02726         *FNDIDES1 cmpb  ID.NUMBR+1,U Is this the correct ID.* entry?
10A0 E141             (gshell_beta5_yak.):02727         FNDIDES1 cmpb  ID.NUMBR,U Is this the correct ID.* entry?
10A2 2707             (gshell_beta5_yak.):02728                  beq   FNDIDES2   Yes, skip ahead
10A4 EEC814           (gshell_beta5_yak.):02729                  ldu   ID.LINK,U  Get ptr to next ID.* entry
10A7 26F7             (gshell_beta5_yak.):02730                  bne   FNDIDES1   Go check it out
10A9 2019             (gshell_beta5_yak.):02731                  bra   FNDIDES5   Hit end of list, no match so exit with ptr=0
                      (gshell_beta5_yak.):02732         
10AB C114             (gshell_beta5_yak.):02733         FNDIDES2 cmpb  #IC.XTRNL  Is this an external AIF?
10AD 2C15             (gshell_beta5_yak.):02734                  bge   FNDIDES5   Yes, exit
10AF C10C             (gshell_beta5_yak.):02735                  cmpb  #IC.GCAL   Is it the calender program?
10B1 260D             (gshell_beta5_yak.):02736                  bne   FNDIDES3   No, use GSHELL's current window type
                      (gshell_beta5_yak.):02737         * ADDED FOR GCAL - to allow it on an 80 column screen
10B3 DC01             (gshell_beta5_yak.):02738                  ldd   DEFWTYPE   Get current GSHELL window type
10B5 10830008         (gshell_beta5_yak.):02739                  cmpd  #8         Is it a 16 color?
10B9 2607             (gshell_beta5_yak.):02740                  bne   FNDIDES4   No, allow GSHELL window type
10BB CC0006           (gshell_beta5_yak.):02741                  ldd   #6         Force GCAL to use type 6 (320x200x4)
10BE 2002             (gshell_beta5_yak.):02742                  bra   FNDIDES4
                      (gshell_beta5_yak.):02743         
10C0 DC01             (gshell_beta5_yak.):02744         FNDIDES3 ldd   DEFWTYPE   Use default window type (GShell's actual type)
10C2 ED42             (gshell_beta5_yak.):02745         FNDIDES4 std   ID.WTYPE,U Save as AIF's window type
10C4 1F30             (gshell_beta5_yak.):02746         FNDIDES5 tfr   U,D        D=ptr to AIF entry found
10C6 35C0             (gshell_beta5_yak.):02747                  puls  U,PC
                      (gshell_beta5_yak.):02748         
                      (gshell_beta5_yak.):02749         * Kill icon Get/put buffer, free up table entry???
10C8 3440             (gshell_beta5_yak.):02750         KILIBUFS pshs  U
10CA DE11             (gshell_beta5_yak.):02751                  ldu   IDSCSPTR
10CC 33C842           (gshell_beta5_yak.):02752                  leau  ID.SIZE*3,U
10CF ECC814           (gshell_beta5_yak.):02753                  ldd   ID.LINK,U
10D2 3406             (gshell_beta5_yak.):02754                  pshs  d
10D4 4F               (gshell_beta5_yak.):02755                  clra  
10D5 5F               (gshell_beta5_yak.):02756                  clrb  
10D6 EDC814           (gshell_beta5_yak.):02757                  std   ID.LINK,U
10D9 203C             (gshell_beta5_yak.):02758                  bra   KILIBUF2
                      (gshell_beta5_yak.):02759         
10DB ECC814           (gshell_beta5_yak.):02760         KILIBUF1 ldd   ID.LINK,U    Get ptr to next Icon Descriptor (linked list)
10DE EDE4             (gshell_beta5_yak.):02761                  std   ,S           Save on stack
                      (gshell_beta5_yak.):02762         * we can change to clra/ldb ID.NUMBR,u to not break any 16 bit stack based number compatibility,
                      (gshell_beta5_yak.):02763         * and also free up ID.NUMBR,u (ID.NUMBR+1 will be actual entry #)
                      (gshell_beta5_yak.):02764         *         ldd   ID.NUMBR,U   Get entry # (only B is used)
10E0 4F               (gshell_beta5_yak.):02765                  clra
10E1 E641             (gshell_beta5_yak.):02766                  ldb   ID.NUMBR,u   Get entry # into D  Get/put buffer # of icon 
10E3 3406             (gshell_beta5_yak.):02767                  pshs  d            Save on stack
10E5 DC26             (gshell_beta5_yak.):02768                  ldd   PRCIDNUM     Get GShell's process ID # (only B is needed)-Gshell's get/put buffer Group #
10E7 3406             (gshell_beta5_yak.):02769                  pshs  d            Save on stack
10E9 DC22             (gshell_beta5_yak.):02770                  ldd   WNDWPATH     Get GShell's window I/O path #
10EB 3406             (gshell_beta5_yak.):02771                  pshs  d            Save on stack
10ED 172522           (gshell_beta5_yak.):02772                  lbsr  KILBUF       Kill icon get/put buffer
10F0 E665             (gshell_beta5_yak.):02773                  ldb   5,S          Get our copy of ID.NUMBR+1 (get/put buffer #)
10F2 CA80             (gshell_beta5_yak.):02774                  orb   #$80         Set high bit flag (buffer # for 80 column version of icon is +128)
10F4 E765             (gshell_beta5_yak.):02775                  stb   5,S          Save it back for subroutine call
10F6 172519           (gshell_beta5_yak.):02776                  lbsr  KILBUF       Kill icon's 48x24 get/put buffer
10F9 EC4E             (gshell_beta5_yak.):02777                  ldd   ID.MNAME,U   Get ptr to module name
10FB EDE4             (gshell_beta5_yak.):02778                  std   ,S
10FD 172153           (gshell_beta5_yak.):02779                  lbsr  FREE         Deallocate RAM used for module name
1100 ECC810           (gshell_beta5_yak.):02780                  ldd   ID.XXXPT,U   Get ptr to extension
1103 EDE4             (gshell_beta5_yak.):02781                  std   ,S
1105 17214B           (gshell_beta5_yak.):02782                  lbsr  FREE         Deallocate RAM used for extension text
1108 ECC812           (gshell_beta5_yak.):02783                  ldd   ID.PARAM,U   Get ptr to parameters line (we got from AIF line #2)
110B EDE4             (gshell_beta5_yak.):02784                  std   ,S
110D 172143           (gshell_beta5_yak.):02785                  lbsr  FREE         Deallocate RAM used for parameters
1110 EFE4             (gshell_beta5_yak.):02786                  stu   ,S           Save ptr to our Icon Descriptor
1112 17213E           (gshell_beta5_yak.):02787                  lbsr  FREE         Deallocate RAM for Icon Descriptor
1115 3266             (gshell_beta5_yak.):02788                  leas  6,S          Eat temp stack
1117 EEE4             (gshell_beta5_yak.):02789         KILIBUF2 ldu   ,S           Get ptr to next icon descriptor
1119 26C0             (gshell_beta5_yak.):02790                  bne   KILIBUF1     There is one, deallocate it & some of it's strings
111B CC0014           (gshell_beta5_yak.):02791                  ldd   #IC.XTRNL    Reset first non-internal icon descriptor # to as next icon desc. ptr
111E EDA90415         (gshell_beta5_yak.):02792                  std   NXTICONO,Y
1122 8E0413           (gshell_beta5_yak.):02793                  ldx   #ENDLINK     Get terminating ptr link for internal icon descriptors
1125 9F13             (gshell_beta5_yak.):02794                  stx   IDSCNEXT     Make that the next available descriptor link
1127 35C6             (gshell_beta5_yak.):02795                  puls  d,U,PC
                      (gshell_beta5_yak.):02796         
1129 EC62             (gshell_beta5_yak.):02797         PUTSTRNG ldd   2,S
112B 3406             (gshell_beta5_yak.):02798                  pshs  d
112D 1722D5           (gshell_beta5_yak.):02799                  lbsr  STRLEN
                      (gshell_beta5_yak.):02800         * 6309 - INCD
1130 C30001           (gshell_beta5_yak.):02801                  addd  #1
1133 EDE4             (gshell_beta5_yak.):02802                  std   ,S
1135 8D0E             (gshell_beta5_yak.):02803                  bsr   MEMSPACE
1137 EDE1             (gshell_beta5_yak.):02804                  std   ,S++
1139 2709             (gshell_beta5_yak.):02805                  beq   PUTSTRNX
113B AE62             (gshell_beta5_yak.):02806                  ldx   2,S
113D 3416             (gshell_beta5_yak.):02807                  pshs  d,X
113F 1722DB           (gshell_beta5_yak.):02808                  lbsr  STRCPY
1142 3264             (gshell_beta5_yak.):02809                  leas  4,S
1144 39               (gshell_beta5_yak.):02810         PUTSTRNX rts   
                      (gshell_beta5_yak.):02811         
                      (gshell_beta5_yak.):02812         * Allocate memory from internal data area?
                      (gshell_beta5_yak.):02813         * Entry: # bytes requested at 0,s
                      (gshell_beta5_yak.):02814         * Exit: D=appears to be ptr to start of memory received, or 0 if couldn't get
                      (gshell_beta5_yak.):02815         *       memory requested
1145 EC62             (gshell_beta5_yak.):02816         MEMSPACE ldd   2,S        Get size of memory requested
1147 3406             (gshell_beta5_yak.):02817                  pshs  d
1149 17209D           (gshell_beta5_yak.):02818                  lbsr  MALLOC     Allocate it
114C EDE4             (gshell_beta5_yak.):02819                  std   ,S         Save ptr to memory received
114E 260A             (gshell_beta5_yak.):02820                  bne   MEMSPAC1   Successful MALLOC, exit with new mem ptr
1150 308C09           (gshell_beta5_yak.):02821                  leax  <OUTOFMEM,PC Unsuccessful, print 'Out of memory" in overlay window
1153 3410             (gshell_beta5_yak.):02822                  pshs  X
1155 1700ED           (gshell_beta5_yak.):02823                  lbsr  OLAYPRNT
1158 3262             (gshell_beta5_yak.):02824                  leas  2,S
115A 3586             (gshell_beta5_yak.):02825         MEMSPAC1 puls  d,pc       Return with ptr
                      (gshell_beta5_yak.):02826         
115C 4F7574206F66206D (gshell_beta5_yak.):02827         OUTOFMEM fcc   "Out of memory"
     656D6F7279
1169 0D00             (gshell_beta5_yak.):02828         CRETURN  fcb   CR,NUL
                      (gshell_beta5_yak.):02829         
                      (gshell_beta5_yak.):02830         * See if all forked processes shut down before we exit
                      (gshell_beta5_yak.):02831         * Exit: D=-1 if still active processes
116B 3440             (gshell_beta5_yak.):02832         TESTQUIT pshs  U
116D DE38             (gshell_beta5_yak.):02833                  ldu   PTBLSPTR   Get ptr to start of linked list of process descriptors
116F 2714             (gshell_beta5_yak.):02834                  beq   TSTQUIT3   No entries
1171 AEC81A           (gshell_beta5_yak.):02835         TSTQUIT1 ldx   GD.LINK,U
1174 EC46             (gshell_beta5_yak.):02836                  ldd   GD.STATS,U
1176 2C0F             (gshell_beta5_yak.):02837                  bge   TSTQUIT2
1178 308C4B           (gshell_beta5_yak.):02838                  leax  <STILACTV,PC Print "processes still active" in overlay window
117B 3410             (gshell_beta5_yak.):02839                  pshs  X
117D 1700C5           (gshell_beta5_yak.):02840                  lbsr  OLAYPRNT
1180 3262             (gshell_beta5_yak.):02841                  leas  2,S
1182 CCFFFF           (gshell_beta5_yak.):02842                  ldd   #-1        Flag we can't exit GSHELL yet
1185 35C0             (gshell_beta5_yak.):02843         TSTQUIT3 puls  U,PC
                      (gshell_beta5_yak.):02844         
1187 1F13             (gshell_beta5_yak.):02845         TSTQUIT2 tfr   X,U
1189 EF7E             (gshell_beta5_yak.):02846                  stu   -2,S
118B 26E4             (gshell_beta5_yak.):02847                  bne   TSTQUIT1
118D 35C0             (gshell_beta5_yak.):02848                  puls  U,PC
                      (gshell_beta5_yak.):02849         
118F 3440             (gshell_beta5_yak.):02850         TRYQUIT  pshs  U
1191 8E0001           (gshell_beta5_yak.):02851                  ldx   #1
1194 D623             (gshell_beta5_yak.):02852                  ldb   WNDWPATH+1
1196 3416             (gshell_beta5_yak.):02853                  pshs  d,X
1198 171CC0           (gshell_beta5_yak.):02854                  lbsr  PAUSECHO   Set pause & echo ON
119B 171D48           (gshell_beta5_yak.):02855                  lbsr  CURSORON   Turn text cursor ON
119E 17239A           (gshell_beta5_yak.):02856                  lbsr  ST.RELEA   Release any pending signals
11A1 1721AF           (gshell_beta5_yak.):02857                  lbsr  KILLPBUF
11A4 6F63             (gshell_beta5_yak.):02858                  clr   3,S
11A6 170F3E           (gshell_beta5_yak.):02859                  lbsr  NOMOUSE    Shut auto-follow AND mouse cursor off
11A9 1723E6           (gshell_beta5_yak.):02860                  lbsr  ST.WNSET
11AC 5F               (gshell_beta5_yak.):02861                  clrb  
11AD 3406             (gshell_beta5_yak.):02862                  pshs  d
11AF 172434           (gshell_beta5_yak.):02863                  lbsr  SELECT
11B2 3262             (gshell_beta5_yak.):02864                  leas  2,S
11B4 172236           (gshell_beta5_yak.):02865                  lbsr  I.CLOSE
11B7 3264             (gshell_beta5_yak.):02866                  leas  4,S
11B9 EC64             (gshell_beta5_yak.):02867                  ldd   4,S
11BB 2D05             (gshell_beta5_yak.):02868                  blt   TRYQUIT4
11BD 3406             (gshell_beta5_yak.):02869                  pshs  d
11BF 172667           (gshell_beta5_yak.):02870                  lbsr  F.EXIT
11C2 4F               (gshell_beta5_yak.):02871         TRYQUIT4 clra  
11C3 5F               (gshell_beta5_yak.):02872                  clrb  
11C4 35C0             (gshell_beta5_yak.):02873                  puls  U,PC
                      (gshell_beta5_yak.):02874         
11C6 50726F6365737365 (gshell_beta5_yak.):02875         STILACTV fcc   "Processes still active"
     73207374696C6C20
     616374697665
11DC 00               (gshell_beta5_yak.):02876                  fcb   NUL
                      (gshell_beta5_yak.):02877         
11DD 3440             (gshell_beta5_yak.):02878         ERRPRINT pshs  U
11DF EE66             (gshell_beta5_yak.):02879                  ldu   6,S
11E1 EC4C             (gshell_beta5_yak.):02880                  ldd   GD.WPATH,U Get process window path
11E3 109322           (gshell_beta5_yak.):02881                  cmpd  WNDWPATH   Same as GSHELL window path?
11E6 2F0E             (gshell_beta5_yak.):02882                  ble   ERRPRIN1
11E8 3406             (gshell_beta5_yak.):02883                  pshs  d
11EA 1723F9           (gshell_beta5_yak.):02884                  lbsr  SELECT
11ED DC22             (gshell_beta5_yak.):02885                  ldd   WNDWPATH
11EF EDE4             (gshell_beta5_yak.):02886                  std   ,S
11F1 1723F2           (gshell_beta5_yak.):02887                  lbsr  SELECT
11F4 3262             (gshell_beta5_yak.):02888                  leas  2,S
                      (gshell_beta5_yak.):02889         * I think inserting 6x8 font select here will solve overlay problem with DUMP/STAT?
11F6 EC46             (gshell_beta5_yak.):02890         ERRPRIN1 ldd   GD.STATS,U Get last status (error) from program
11F8 3406             (gshell_beta5_yak.):02891                  pshs  d
11FA AEC4             (gshell_beta5_yak.):02892                  ldx   GD.MNAME,U Get ptr to module name that had error 
11FC EC66             (gshell_beta5_yak.):02893                  ldd   6,S
11FE 3416             (gshell_beta5_yak.):02894                  pshs  d,X
1200 8D04             (gshell_beta5_yak.):02895                  bsr   BUILDMSG
1202 3266             (gshell_beta5_yak.):02896                  leas  6,S
1204 35C0             (gshell_beta5_yak.):02897                  puls  U,PC
                      (gshell_beta5_yak.):02898         
1206 EC66             (gshell_beta5_yak.):02899         BUILDMSG ldd   6,S
1208 3406             (gshell_beta5_yak.):02900                  pshs  d
120A 1700D5           (gshell_beta5_yak.):02901                  lbsr  BIN2ASCI
120D EDE4             (gshell_beta5_yak.):02902                  std   ,S
120F 308C2E           (gshell_beta5_yak.):02903                  leax  <QUOTDASH,PC
1212 3410             (gshell_beta5_yak.):02904                  pshs  X
1214 AE68             (gshell_beta5_yak.):02905                  ldx   8,S
1216 EC66             (gshell_beta5_yak.):02906                  ldd   6,S
1218 3416             (gshell_beta5_yak.):02907                  pshs  d,X
121A 8E0F3F           (gshell_beta5_yak.):02908                  ldx   #MULTIBFR
121D 3410             (gshell_beta5_yak.):02909                  pshs  X
121F 1721FB           (gshell_beta5_yak.):02910                  lbsr  STRCPY
1222 3264             (gshell_beta5_yak.):02911                  leas  4,S
1224 3406             (gshell_beta5_yak.):02912                  pshs  d
1226 172204           (gshell_beta5_yak.):02913                  lbsr  STRCAT
1229 3264             (gshell_beta5_yak.):02914                  leas  4,S
122B 3406             (gshell_beta5_yak.):02915                  pshs  d
122D 1721FD           (gshell_beta5_yak.):02916                  lbsr  STRCAT
1230 3264             (gshell_beta5_yak.):02917                  leas  4,S
1232 3406             (gshell_beta5_yak.):02918                  pshs  d
1234 1721F6           (gshell_beta5_yak.):02919                  lbsr  STRCAT
1237 3264             (gshell_beta5_yak.):02920                  leas  4,S
1239 3406             (gshell_beta5_yak.):02921                  pshs  d
123B 8D08             (gshell_beta5_yak.):02922                  bsr   OLAYPRNT
123D 3262             (gshell_beta5_yak.):02923                  leas  2,S
123F 39               (gshell_beta5_yak.):02924                  rts   
                      (gshell_beta5_yak.):02925         
1240 22               (gshell_beta5_yak.):02926         QUOTDASH fcb   '"
1241 202D20           (gshell_beta5_yak.):02927                  fcc   " - "
1244 00               (gshell_beta5_yak.):02928                  fcb   NUL
                      (gshell_beta5_yak.):02929         
1245 8E0001           (gshell_beta5_yak.):02930         OLAYPRNT ldx   #1
1248 EC62             (gshell_beta5_yak.):02931                  ldd   2,S
124A 3416             (gshell_beta5_yak.):02932                  pshs  d,X
124C DC22             (gshell_beta5_yak.):02933                  ldd   WNDWPATH
124E 3406             (gshell_beta5_yak.):02934                  pshs  d
1250 171161           (gshell_beta5_yak.):02935                  lbsr  OLAYGNBK
1253 8D43             (gshell_beta5_yak.):02936                  bsr   WAITPRES
1255 1712BA           (gshell_beta5_yak.):02937                  lbsr  KILOLAY2
1258 2012             (gshell_beta5_yak.):02938                  bra   OLAYPRN1
                      (gshell_beta5_yak.):02939         
                      (gshell_beta5_yak.):02940         * Write out a string to the current window path (string length determined by
                      (gshell_beta5_yak.):02941         * NUL char)
                      (gshell_beta5_yak.):02942         * Entry: 0-1,s = RTS address
                      (gshell_beta5_yak.):02943         *        2-3,s = ptr to string to write
125A EC62             (gshell_beta5_yak.):02944         WTSTRLEN ldd   2,S        Get ptr to string to write
125C 3406             (gshell_beta5_yak.):02945                  pshs  d
125E 1721A4           (gshell_beta5_yak.):02946                  lbsr  STRLEN     Determine length
1261 EDE4             (gshell_beta5_yak.):02947                  std   ,S         Save it
1263 AE64             (gshell_beta5_yak.):02948                  ldx   4,S
1265 DC22             (gshell_beta5_yak.):02949                  ldd   WNDWPATH   Get path to window
1267 3416             (gshell_beta5_yak.):02950                  pshs  d,X
1269 172146           (gshell_beta5_yak.):02951                  lbsr  I.WRITE    Write it out
126C 3266             (gshell_beta5_yak.):02952         OLAYPRN1 leas  6,S        Eat temp stack & return
126E 39               (gshell_beta5_yak.):02953                  rts   
                      (gshell_beta5_yak.):02954         
                      (gshell_beta5_yak.):02955         * Write out a string to the current window path (string length determined by
                      (gshell_beta5_yak.):02956         * NUL char) and add a Carriage return if there isn't one already
                      (gshell_beta5_yak.):02957         * Entry: 0-1,s = RTS address
                      (gshell_beta5_yak.):02958         *        2-3,s = ptr to string to write
126F 3460             (gshell_beta5_yak.):02959         WRLNWCR  pshs  Y,U
1271 EC66             (gshell_beta5_yak.):02960                  ldd   6,S        Get ptr to string
1273 3406             (gshell_beta5_yak.):02961                  pshs  d
1275 17219A           (gshell_beta5_yak.):02962                  lbsr  STREND     Get end position of string
1278 1F03             (gshell_beta5_yak.):02963                  tfr   D,U
127A A3E1             (gshell_beta5_yak.):02964                  subd  ,S++       Calculate size of string
127C 1F02             (gshell_beta5_yak.):02965                  tfr   D,Y
127E AE66             (gshell_beta5_yak.):02966                  ldx   6,S        Get ptr to string again
1280 9623             (gshell_beta5_yak.):02967                  lda   WNDWPATH+1 Get window path
1282 103F8C           (gshell_beta5_yak.):02968                  os9   I$WritLn   Write it
1285 E65F             (gshell_beta5_yak.):02969                  ldb   -1,U       Was last char a CR?
1287 C10D             (gshell_beta5_yak.):02970                  cmpb  #CR
1289 270B             (gshell_beta5_yak.):02971                  beq   WRLNWCRX   Yep, done
128B 108E0001         (gshell_beta5_yak.):02972                  ldy   #1         No, write a CR too
128F 308DFED6         (gshell_beta5_yak.):02973                  leax  CRETURN,PC
1293 103F8C           (gshell_beta5_yak.):02974                  os9   I$WritLn
1296 35E0             (gshell_beta5_yak.):02975         WRLNWCRX puls  Y,U,PC
                      (gshell_beta5_yak.):02976         
1298 3440             (gshell_beta5_yak.):02977         WAITPRES pshs  U
129A EE64             (gshell_beta5_yak.):02978                  ldu   4,S
129C 3440             (gshell_beta5_yak.):02979                  pshs  U
129E 17229A           (gshell_beta5_yak.):02980                  lbsr  ST.RELEA
12A1 CC000E           (gshell_beta5_yak.):02981                  ldd   #NEWNMSG-PRESSMSG
12A4 EDE4             (gshell_beta5_yak.):02982                  std   ,S
12A6 8E0417           (gshell_beta5_yak.):02983                  ldx   #PRESSMSG
12A9 3410             (gshell_beta5_yak.):02984                  pshs  X
12AB 3440             (gshell_beta5_yak.):02985                  pshs  U
12AD 172102           (gshell_beta5_yak.):02986                  lbsr  I.WRITE
12B0 3266             (gshell_beta5_yak.):02987                  leas  6,S
12B2 170E9B           (gshell_beta5_yak.):02988                  lbsr  WAITPSIG
12B5 35C0             (gshell_beta5_yak.):02989                  puls  U,PC
                      (gshell_beta5_yak.):02990         
                      (gshell_beta5_yak.):02991         * ReadLn up to 80 chars into [LINEBUFR]
12B7 CC0050           (gshell_beta5_yak.):02992         RDLN80CH ldd   #80        Max read size
12BA 3406             (gshell_beta5_yak.):02993                  pshs  d
12BC 8E103F           (gshell_beta5_yak.):02994                  ldx   #LINEBUFR  Get ptr to read buffer
12BF EC64             (gshell_beta5_yak.):02995                  ldd   4,S        Get path to read from
12C1 3416             (gshell_beta5_yak.):02996                  pshs  d,X
12C3 1720DE           (gshell_beta5_yak.):02997                  lbsr  I.READLN   Read line up to 80 chars (note:includes CR!)
12C6 3266             (gshell_beta5_yak.):02998                  leas  6,S
12C8 C30001           (gshell_beta5_yak.):02999                  addd  #1         Add 1 to total of chars read
12CB 2705             (gshell_beta5_yak.):03000                  beq   RDLN80C0   If was -1 (had error),try reading again
12CD 830002           (gshell_beta5_yak.):03001                  subd  #2         Just CR?
12D0 2605             (gshell_beta5_yak.):03002                  bne   RDLN80C1   No, skip ahead
12D2 6FA9103F         (gshell_beta5_yak.):03003         RDLN80C0 clr   LINEBUFR,Y If just one char, NUL instead of CR
12D6 39               (gshell_beta5_yak.):03004                  rts   
                      (gshell_beta5_yak.):03005         
12D7 8E103F           (gshell_beta5_yak.):03006         RDLN80C1 ldx   #LINEBUFR  Point to input buffer
12DA 3410             (gshell_beta5_yak.):03007                  pshs  X
12DC 308B             (gshell_beta5_yak.):03008                  leax  D,X        Point to last char read in buffer
12DE 6F84             (gshell_beta5_yak.):03009                  clr   ,X         Terminate read string @ CR
12E0 3586             (gshell_beta5_yak.):03010                  puls  D,PC       Return with D=ptr to start of read buffer
                      (gshell_beta5_yak.):03011         
12E2 3440             (gshell_beta5_yak.):03012         BIN2ASCI pshs  U
12E4 CE1097           (gshell_beta5_yak.):03013                  ldu   #ASCIITMP  Point to buffer to hold ASCII version of # (reverse order)
12E7 EC64             (gshell_beta5_yak.):03014                  ldd   4,S
12E9 2019             (gshell_beta5_yak.):03015                  bra   BIN2ASC2
                      (gshell_beta5_yak.):03016         
12EB 3406             (gshell_beta5_yak.):03017         BIN2ASC1 pshs  d
12ED CC000A           (gshell_beta5_yak.):03018                  ldd   #10
12F0 172455           (gshell_beta5_yak.):03019                  lbsr  CCMOD
12F3 C30030           (gshell_beta5_yak.):03020                  addd  #'0        'ASCII'ize the digit
12F6 E7C0             (gshell_beta5_yak.):03021                  stb   ,U+
12F8 EC64             (gshell_beta5_yak.):03022                  ldd   4,S        Get number to divide
12FA 3406             (gshell_beta5_yak.):03023                  pshs  d
12FC CC000A           (gshell_beta5_yak.):03024                  ldd   #10        Divide by 10
12FF 172489           (gshell_beta5_yak.):03025                  lbsr  CCDIV      Do divide (D=result, 16 bit MOD on stack?)
1302 ED64             (gshell_beta5_yak.):03026                  std   4,S
1304 10830009         (gshell_beta5_yak.):03027         BIN2ASC2 cmpd  #9
1308 2EE1             (gshell_beta5_yak.):03028                  bgt   BIN2ASC1
130A C30030           (gshell_beta5_yak.):03029                  addd  #'0
130D 8E1097           (gshell_beta5_yak.):03030                  ldx   #ASCIITMP
1310 3410             (gshell_beta5_yak.):03031                  pshs  X
1312 8E108F           (gshell_beta5_yak.):03032                  ldx   #ASCIINUM
1315 2002             (gshell_beta5_yak.):03033                  bra   BIN2ASC4
                      (gshell_beta5_yak.):03034         
1317 E6C2             (gshell_beta5_yak.):03035         BIN2ASC3 ldb   ,-U
1319 E780             (gshell_beta5_yak.):03036         BIN2ASC4 stb   ,X+
131B 11A3E4           (gshell_beta5_yak.):03037                  cmpu  ,S
131E 22F7             (gshell_beta5_yak.):03038                  bhi   BIN2ASC3
1320 3262             (gshell_beta5_yak.):03039                  leas  2,S
1322 6F84             (gshell_beta5_yak.):03040                  clr   ,X
1324 8E108F           (gshell_beta5_yak.):03041                  ldx   #ASCIINUM
1327 1F10             (gshell_beta5_yak.):03042                  tfr   X,D
1329 35C0             (gshell_beta5_yak.):03043                  puls  U,PC
                      (gshell_beta5_yak.):03044         
                      (gshell_beta5_yak.):03045         * Attempt to link or load module. Also determine if needs a primary module as well (like RUNB)
                      (gshell_beta5_yak.):03046         * Exit: D=0 - could not fork program (error in GD.STATS,u), D=1 - successful fork
132B 3440             (gshell_beta5_yak.):03047         LINKLOAD pshs  U
132D EE64             (gshell_beta5_yak.):03048                  ldu   4,S
132F C604             (gshell_beta5_yak.):03049                  ldb   #YTR.SLP   Change ptr to sleep icon
1331 3416             (gshell_beta5_yak.):03050                  pshs  d,X
1333 8E00CA           (gshell_beta5_yak.):03051                  ldx   #QRP.PTR
1336 DC22             (gshell_beta5_yak.):03052                  ldd   WNDWPATH
1338 3416             (gshell_beta5_yak.):03053                  pshs  d,X
133A 170DAA           (gshell_beta5_yak.):03054                  lbsr  NOMOUSE    Shut auto-follow AND mouse cursor off
133D 3266             (gshell_beta5_yak.):03055                  leas  6,S
133F 3440             (gshell_beta5_yak.):03056                  pshs  U
1341 171F7D           (gshell_beta5_yak.):03057                  lbsr  NMLNKLOD   Attempt to link/load module
1344 EDE1             (gshell_beta5_yak.):03058                  std   ,S++
1346 2705             (gshell_beta5_yak.):03059                  beq   LINKLOA1   Error, deal with it
1348 CC0001           (gshell_beta5_yak.):03060                  ldd   #1         No error, status=successful
134B 2012             (gshell_beta5_yak.):03061                  bra   LINKLOA2
                      (gshell_beta5_yak.):03062         
134D ECA9044D         (gshell_beta5_yak.):03063         LINKLOA1 ldd   ERRNO,Y    Get error code
1351 ED46             (gshell_beta5_yak.):03064                  std   GD.STATS,U Save in forked program status
1353 308C10           (gshell_beta5_yak.):03065                  leax  <CANTFORK,PC Tell user we could not fork program
1356 3450             (gshell_beta5_yak.):03066                  pshs  X,U
1358 17FE82           (gshell_beta5_yak.):03067                  lbsr  ERRPRINT
135B 3264             (gshell_beta5_yak.):03068                  leas  4,S
135D 4F               (gshell_beta5_yak.):03069                  clra             Non successful fork
135E 5F               (gshell_beta5_yak.):03070                  clrb  
135F EDE4             (gshell_beta5_yak.):03071         LINKLOA2 std   ,S         Save status of fork
1361 170D8F           (gshell_beta5_yak.):03072                  lbsr  MOUSENOW   Turn mouse back on and return
1364 35C6             (gshell_beta5_yak.):03073                  puls  d,U,PC
                      (gshell_beta5_yak.):03074         
1366 43616E277420666F (gshell_beta5_yak.):03075         CANTFORK fcc   "Can't fork "
     726B20
1371 2200             (gshell_beta5_yak.):03076                  fcb   '",NUL
                      (gshell_beta5_yak.):03077         
1373 72756E63         (gshell_beta5_yak.):03078         RUNCNAME fcc   "runc"
1377 00               (gshell_beta5_yak.):03079                  fcb   NUL
                      (gshell_beta5_yak.):03080         
1378 72756E62         (gshell_beta5_yak.):03081         RUNBNAME fcc   "runb"
137C 00               (gshell_beta5_yak.):03082                  fcb   NUL
                      (gshell_beta5_yak.):03083         
137D 62617369633039   (gshell_beta5_yak.):03084         BAS09NAM fcc   "basic09"
1384 00               (gshell_beta5_yak.):03085                  fcb   NUL
                      (gshell_beta5_yak.):03086         
                      (gshell_beta5_yak.):03087         * Fork program pointed to by GD.* ptr, onto it's proper window (obviously
                      (gshell_beta5_yak.):03088         * already set up in GD.INDVC or GD.WPATH earlier). Does language stuff
                      (gshell_beta5_yak.):03089         * automatically like SHELL, and mem size stuff
                      (gshell_beta5_yak.):03090         * Stack on entry:
                      (gshell_beta5_yak.):03091         * 0-1,s = RTS address
                      (gshell_beta5_yak.):03092         * 2-3,s = Ptr to GD.* vars
1385 7F136F           (gshell_beta5_yak.):03093         FORKPROC clr   RUNBFLAG   Clear RUNB flag
1388 3440             (gshell_beta5_yak.):03094                  pshs  U          Save U
138A EE64             (gshell_beta5_yak.):03095                  ldu   2+2,S      Get GD.* ptr
138C 3274             (gshell_beta5_yak.):03096                  leas  -12,S      Make temp stack
138E 4F               (gshell_beta5_yak.):03097                  clra  
138F 5F               (gshell_beta5_yak.):03098                  clrb  
1390 ED6A             (gshell_beta5_yak.):03099                  std   10,S       Set some things to 0
1392 ED68             (gshell_beta5_yak.):03100                  std   8,S
1394 EDE4             (gshell_beta5_yak.):03101                  std   ,S
1396 E649             (gshell_beta5_yak.):03102                  ldb   GD.MLANG,U Get language type of module to fork
1398 C101             (gshell_beta5_yak.):03103                  cmpb  #Objct     ML code?
139A 2F75             (gshell_beta5_yak.):03104                  ble   SETPRGRM   Yes, go set
139C C102             (gshell_beta5_yak.):03105                  cmpb  #ICode     RUNB required?
139E 270F             (gshell_beta5_yak.):03106                  beq   SETRUNB    Yes, set that
13A0 C103             (gshell_beta5_yak.):03107                  cmpb  #PCode     Pascal required?
13A2 2718             (gshell_beta5_yak.):03108                  beq   SETPASCL   Yes, set that
13A4 C105             (gshell_beta5_yak.):03109                  cmpb  #CblCode   COBOL required?
13A6 2630             (gshell_beta5_yak.):03110                  bne   BADLANG    No, don't have a clue what it is
13A8 308CC8           (gshell_beta5_yak.):03111                  leax  <RUNCNAME,PC Must be RUNC (whatever that is?)
13AB AF6A             (gshell_beta5_yak.):03112                  stx   10,S       Save ptr to runtime module name
13AD 205D             (gshell_beta5_yak.):03113                  bra   SETLANG
                      (gshell_beta5_yak.):03114         
                      (gshell_beta5_yak.):03115         * 6809/6309 - need to get memory size required (like SHELLPLUS) and invoke that properly based on
                      (gshell_beta5_yak.):03116         *   program module (not runb itself). This is a combination of 3 things:
                      (gshell_beta5_yak.):03117         * 1) RUNB's data size
                      (gshell_beta5_yak.):03118         * 2) basic09 subroutine modules' P.VARC ($B) form header (runtime variable storage size)
                      (gshell_beta5_yak.):03119         * 3) 255 bytes more to pad to even page.
                      (gshell_beta5_yak.):03120         * These 3 should be added up into D, and the result in A is the # of pages needed for F$Fork.
                      (gshell_beta5_yak.):03121         * I don't know if Pascal, Cobol and RUNC are the same?
13AF 7C136F           (gshell_beta5_yak.):03122         SETRUNB  inc   RUNBFLAG     Set flag that this is a RUNB program
13B2 308CC3           (gshell_beta5_yak.):03123                  leax  <RUNBNAME,PC Set ptr to RUNB module name
13B5 AF6A             (gshell_beta5_yak.):03124                  stx   10,S
13B7 308CC3           (gshell_beta5_yak.):03125                  leax  <BAS09NAM,PC 2nd ptr to BASIC09 (if F$Fork of RUNB fails, use this)
13BA 2008             (gshell_beta5_yak.):03126                  bra   SETRUNB1
                      (gshell_beta5_yak.):03127         
13BC 308C09           (gshell_beta5_yak.):03128         SETPASCL leax  <PASCSNAM,PC Set ptr to PASCALS module name
13BF AF6A             (gshell_beta5_yak.):03129                  stx   10,S
13C1 308C0C           (gshell_beta5_yak.):03130                  leax  <PASCNNAM,PC 2nd ptr to PASCALN (if F$Fork of PASCALS fails, use this)
13C4 AF68             (gshell_beta5_yak.):03131         SETRUNB1 stx   8,S          Save 2ndary runtime module ptr
13C6 2044             (gshell_beta5_yak.):03132                  bra   SETLANG
                      (gshell_beta5_yak.):03133         
13C8 70617363616C73   (gshell_beta5_yak.):03134         PASCSNAM fcc   "pascals"
13CF 00               (gshell_beta5_yak.):03135                  fcb   NUL
                      (gshell_beta5_yak.):03136         
13D0 70617363616C6E   (gshell_beta5_yak.):03137         PASCNNAM fcc   "pascaln"
13D7 00               (gshell_beta5_yak.):03138                  fcb   NUL
                      (gshell_beta5_yak.):03139         
13D8 308C0C           (gshell_beta5_yak.):03140         BADLANG  leax  <CANTLANG,PC Code type is unknown, notify user that we can
13DB 3410             (gshell_beta5_yak.):03141                  pshs  X          not run.
13DD 17FE65           (gshell_beta5_yak.):03142                  lbsr  OLAYPRNT
13E0 3262             (gshell_beta5_yak.):03143                  leas  2,S
13E2 4F               (gshell_beta5_yak.):03144                  clra  
13E3 5F               (gshell_beta5_yak.):03145                  clrb  
13E4 1600EB           (gshell_beta5_yak.):03146                  lbra  BADLANGX
                      (gshell_beta5_yak.):03147         
13E7 43616E2774206465 (gshell_beta5_yak.):03148         CANTLANG fcc   "Can't determine language"
     7465726D696E6520
     6C616E6775616765
13FF 20666F72206D6F64 (gshell_beta5_yak.):03149                  fcc   " for module"
     756C65
140A 0D00             (gshell_beta5_yak.):03150                  fcb   CR,NUL
                      (gshell_beta5_yak.):03151         
                      (gshell_beta5_yak.):03152         * Entry: 10-11,s=ptr to primary runtime module (or only if not a separate language module)
                      (gshell_beta5_yak.):03153         *        8-9,s  =ptr to 2ndary runtime module (if above one fails)
                      (gshell_beta5_yak.):03154         *  X=ptr to 2ndary module (if needed) ex. BASIC09 for RUNB
140C CC0101           (gshell_beta5_yak.):03155         SETLANG  ldd   #$0101     Module type=Program module, language=ML
140F ED48             (gshell_beta5_yak.):03156                  std   GD.MTYPE,U Save module type&language of primary program to execute
1411 EC6A             (gshell_beta5_yak.):03157         SETPRGRM ldd   10,S       Get ptr to name of primary program
1413 270E             (gshell_beta5_yak.):03158                  beq   FORKPRC2   If raw ML module (no runtime package), skip ahead
1415 ECC81C           (gshell_beta5_yak.):03159                  ldd   GD.JSTNM,u Get ptr to sub-module name (ex. program name for RUNB)
1418 3406             (gshell_beta5_yak.):03160                  pshs  d          Save it
141A 170187           (gshell_beta5_yak.):03161                  lbsr  STPREFIX   Build (into PARMSBFR) program name <space> module name
141D 3262             (gshell_beta5_yak.):03162                  leas  2,S        Eat stack
141F EC6A             (gshell_beta5_yak.):03163                  ldd   10,S       Get ptr to name of primary program
1421 2002             (gshell_beta5_yak.):03164                  bra   FORKPRC3
                      (gshell_beta5_yak.):03165         
1423 ECC4             (gshell_beta5_yak.):03166         FORKPRC2 ldd   GD.MNAME,U Get ptr to module to run
1425 ED66             (gshell_beta5_yak.):03167         FORKPRC3 std   6,S        Save it
1427 8E109F           (gshell_beta5_yak.):03168                  ldx   #PARMSBFR  Point to temp buffer
142A 3410             (gshell_beta5_yak.):03169                  pshs  X          Save it
142C 171FD6           (gshell_beta5_yak.):03170                  lbsr  STRLEN     Get length of command line to run
142F 3262             (gshell_beta5_yak.):03171                  leas  2,S        Eat stack
1431 ED62             (gshell_beta5_yak.):03172                  std   2,S        Save length
1433 270F             (gshell_beta5_yak.):03173                  beq   FORKPRC4   If 0, just put a CR in it
                      (gshell_beta5_yak.):03174         * 6309 - decd
1435 C3FFFF           (gshell_beta5_yak.):03175                  addd  #-1        Dec length by 1 (space on end?)
1438 8E109F           (gshell_beta5_yak.):03176                  ldx   #PARMSBFR  Point to start of command line
143B 308B             (gshell_beta5_yak.):03177                  leax  D,X        Point to end of it
143D CC0D00           (gshell_beta5_yak.):03178                  ldd   #CR*256    Append a CR/NUL to it
1440 ED84             (gshell_beta5_yak.):03179                  std   ,X
1442 2007             (gshell_beta5_yak.):03180                  bra   FORKPRC5
                      (gshell_beta5_yak.):03181         
1444 CC0D00           (gshell_beta5_yak.):03182         FORKPRC4 ldd   #CR*256    Nothing in command buffer, just put CR/NUL in
1447 EDA9109F         (gshell_beta5_yak.):03183                  std   PARMSBFR,Y
144B EC62             (gshell_beta5_yak.):03184         FORKPRC5 ldd   2,S        Get length of command line to run
144D C30001           (gshell_beta5_yak.):03185                  addd  #1         bump up by 1 & save it again
1450 ED62             (gshell_beta5_yak.):03186                  std   2,S
1452 3440             (gshell_beta5_yak.):03187                  pshs  U
1454 170193           (gshell_beta5_yak.):03188                  lbsr  NEWSTDIO   Change I/O paths (all 3) to window path in current GD.* ptr
1457 EDE1             (gshell_beta5_yak.):03189                  std   ,S++       Were we successful?
1459 274D             (gshell_beta5_yak.):03190                  beq   FORKPRC7   No, skip ahead
145B 4F               (gshell_beta5_yak.):03191                  clra             Select std IN path as current window (in other words,
145C 5F               (gshell_beta5_yak.):03192                  clrb               select GD.* path as new window)
145D 3406             (gshell_beta5_yak.):03193                  pshs  d
145F 172184           (gshell_beta5_yak.):03194                  lbsr  SELECT
1462 EC4A             (gshell_beta5_yak.):03195                  ldd   GD.MEMSZ,U Get memory size required (in 256 byte pages)
                      (gshell_beta5_yak.):03196         * patch to get mem size properly. Eventually should change to get RUNB's actual data mem size
                      (gshell_beta5_yak.):03197         * (in case we change it), but for now will hard code for the 4K. Link/load has already gotten
                      (gshell_beta5_yak.):03198         * the packed basic09 memory size, and rounded it up to even page, so we just need to add 4k
1464 7D136F           (gshell_beta5_yak.):03199                  tst   RUNBFLAG   This a RUNB program?
1467 2702             (gshell_beta5_yak.):03200                  beq   NoExtrRM   No, don't adjust data area size
1469 CB11             (gshell_beta5_yak.):03201                  addb  #$11       Add 17 256 byte pages (4K (default mem for RUNB)+ 1 page, like SHELLPLUS)
146B EDE4             (gshell_beta5_yak.):03202         NoExtrRM std   ,S         Save it
146D 4F               (gshell_beta5_yak.):03203                  clra  
146E 5F               (gshell_beta5_yak.):03204                  clrb  
146F 3406             (gshell_beta5_yak.):03205                  pshs  d
1471 3406             (gshell_beta5_yak.):03206                  pshs  d
1473 8E109F           (gshell_beta5_yak.):03207                  ldx   #PARMSBFR  Point to parms buffer
1476 EC68             (gshell_beta5_yak.):03208                  ldd   8,S
1478 3416             (gshell_beta5_yak.):03209                  pshs  d,X
147A ECE810           (gshell_beta5_yak.):03210                  ldd   16,S       Get ptr to primary module name
147D 3406             (gshell_beta5_yak.):03211                  pshs  d          Save for sub
147F 171EF3           (gshell_beta5_yak.):03212                  lbsr  F.FORK     Fork the program (will save error# @ ERRNO,y if failed)
1482 EDE810           (gshell_beta5_yak.):03213                  std   16,S       Save child process #
1485 2F04             (gshell_beta5_yak.):03214                  ble   FORKPR51   Hi-bit set means F$FORK errored out, skip ahead
1487 326C             (gshell_beta5_yak.):03215                  leas  12,S       Eat temp stack
1489 2014             (gshell_beta5_yak.):03216                  bra   FORKPRC6
                      (gshell_beta5_yak.):03217         
                      (gshell_beta5_yak.):03218         * If Fork failed with primary module name, try alternate module ptr
148B ECE814           (gshell_beta5_yak.):03219         FORKPR51 ldd   20,S       (?)Get alternate module name ptr? (like BASIC09 instead of RUNB)
148E 2604             (gshell_beta5_yak.):03220                  bne   FORKPR52   We have one, try forking that instead
1490 326C             (gshell_beta5_yak.):03221                  leas  12,S       None, eat temp stack
1492 2014             (gshell_beta5_yak.):03222                  bra   FORKPRC7   Unload the module from our process space (and drop link count)
                      (gshell_beta5_yak.):03223         
1494 EDE4             (gshell_beta5_yak.):03224         FORKPR52 std   ,S         Save ptr to alternate module name
1496 171EDC           (gshell_beta5_yak.):03225                  lbsr  F.FORK     Attempt forking it
1499 326C             (gshell_beta5_yak.):03226                  leas  12,S       Eat temp stack
149B ED64             (gshell_beta5_yak.):03227                  std   4,S        Save child process number
149D 2F09             (gshell_beta5_yak.):03228                  ble   FORKPRC7
                      (gshell_beta5_yak.):03229         
149F EC64             (gshell_beta5_yak.):03230         FORKPRC6 ldd   4,S        Get child process # we forked
14A1 ED44             (gshell_beta5_yak.):03231                  std   GD.PRCID,U Save in our process table 
14A3 CC0001           (gshell_beta5_yak.):03232                  ldd   #1         ? Flag that we did successful fork? Or it was primary module?
14A6 EDE4             (gshell_beta5_yak.):03233                  std   ,S
                      (gshell_beta5_yak.):03234         * Couldn't change std paths to new window comes here to unlink the failed module from
                      (gshell_beta5_yak.):03235         *  our mem space (so does a successful fork)
14A8 ECC4             (gshell_beta5_yak.):03236         FORKPRC7 ldd   GD.MNAME,U Get ptr to module name
14AA 3406             (gshell_beta5_yak.):03237                  pshs  d          Save it for sub
14AC 171E86           (gshell_beta5_yak.):03238                  lbsr  F.UNLOAD   Unload the module (ignore errors, like if it wasn't mapped in)
14AF 3262             (gshell_beta5_yak.):03239                  leas  2,S        Eat sub var
14B1 ECE4             (gshell_beta5_yak.):03240                  ldd   ,S         Get flag (successful fork?)
14B3 2610             (gshell_beta5_yak.):03241                  bne   FORKPRC8   Successful Fork, skip ahead
14B5 ECA9044D         (gshell_beta5_yak.):03242                  ldd   ERRNO,Y    No, Get error code that F$Fork returned
14B9 ED46             (gshell_beta5_yak.):03243                  std   GD.STATS,U Save as last status for forked program
14BB 308C18           (gshell_beta5_yak.):03244                  leax  <FORKERR,PC Report FORK error in overlay window
14BE 3450             (gshell_beta5_yak.):03245                  pshs  X,U
14C0 17FD1A           (gshell_beta5_yak.):03246                  lbsr  ERRPRINT
14C3 3264             (gshell_beta5_yak.):03247                  leas  4,S
14C5 6FA9109F         (gshell_beta5_yak.):03248         FORKPRC8 clr   PARMSBFR,Y NUL the command buffer
                      (gshell_beta5_yak.):03249         * 6809/6309 note: U is not used in RESTDIO, so pshs u/leas 2,s can be removed.
14C9 3440             (gshell_beta5_yak.):03250                  pshs  U          Save GD.* ptr
14CB 170161           (gshell_beta5_yak.):03251                  lbsr  RESTDIO    Close std I/O, Reopen with current window path
14CE 3262             (gshell_beta5_yak.):03252                  leas  2,S        Eat sub's copy of GD.* ptr
14D0 ECE4             (gshell_beta5_yak.):03253                  ldd   ,S         Get 'successful fork' flag
14D2 326C             (gshell_beta5_yak.):03254         BADLANGX leas  12,S       Eat temp stack & return
14D4 35C0             (gshell_beta5_yak.):03255                  puls  U,PC
                      (gshell_beta5_yak.):03256         
14D6 466F726B20657272 (gshell_beta5_yak.):03257         FORKERR  fcc   "Fork error - "
     6F72202D20
14E3 2200             (gshell_beta5_yak.):03258                  fcb   '",NUL
                      (gshell_beta5_yak.):03259         
                      (gshell_beta5_yak.):03260         * Call F$Wait. If no child process, returns immediately.
                      (gshell_beta5_yak.):03261         * Otherwise, returns with child ID (A) # & child exit status code (B).
                      (gshell_beta5_yak.):03262         * I believe B=0 means clean F$Exit from child
                      (gshell_beta5_yak.):03263         * We need to add scanning through
                      (gshell_beta5_yak.):03264         * Stack usage (from -6,s):
                      (gshell_beta5_yak.):03265         * 0,s = ???
                      (gshell_beta5_yak.):03266         * 2,s = Child process ID #
                      (gshell_beta5_yak.):03267         * 4,s = Child process signal code
                      (gshell_beta5_yak.):03268         * NOTE: IF child is ABORTED (CTRL-E), GSHELL's keyboard buffer is cleared.
                      (gshell_beta5_yak.):03269         *  IF child is INTERRUPTED, GSHELL's keyboard buffer is left intact.
                      (gshell_beta5_yak.):03270         * Exit: D=$0001 (S$Wake) if Wait ended do to signal (not child dying)
                      (gshell_beta5_yak.):03271         *               this includes Keypress, mouse click (maybe dir update?)
                      (gshell_beta5_yak.):03272         *       D=$0000 If F$Wait failed (Fork failed)
                      (gshell_beta5_yak.):03273         *       D=$0002 to $001F - signal code
14E5 3440             (gshell_beta5_yak.):03274         HNDLWAIT pshs  U
14E7 327A             (gshell_beta5_yak.):03275                  leas  -6,S       Temp stack
14E9 4F               (gshell_beta5_yak.):03276                  clra             Default child status code to 0
14EA 5F               (gshell_beta5_yak.):03277                  clrb  
14EB ED64             (gshell_beta5_yak.):03278                  std   4,S
14ED 3064             (gshell_beta5_yak.):03279         HNDLWAI1 leax  4,S        Point to temp ID/exit status
14EF 3410             (gshell_beta5_yak.):03280                  pshs  X          Save ptr for subroutine call
14F1 171E6E           (gshell_beta5_yak.):03281                  lbsr  F.WAIT     NOTE: ONLY CALLED FROM HERE! EMBED (6809 &6309)
14F4 3262             (gshell_beta5_yak.):03282                  leas  2,S        Eat temp X ptr
14F6 ED62             (gshell_beta5_yak.):03283                  std   2,S        Save child process' ID #
14F8 270A             (gshell_beta5_yak.):03284                  beq   HNDLWAI2   None (likely Signal, not child ending), eat temp stack & return
14FA 1083FFFF         (gshell_beta5_yak.):03285                  cmpd  #-1        Error from F$Wait?
14FE 276E             (gshell_beta5_yak.):03286                  beq   HNDLWA10   Yes, return with exit D=0 (no signal or Child process ending)
1500 DC1C             (gshell_beta5_yak.):03287                  ldd   RECDSGNL   No, a child did die, but do we have a local signal to process first?
1502 2705             (gshell_beta5_yak.):03288                  beq   HNDLWAI3   No, process child's death
1504 CC0001           (gshell_beta5_yak.):03289         HNDLWAI2 ldd   #S$Wake    Yes, exit with WAKE signal (flag to redo signal loop; process mouse,keyboard,dir update)
1507 206F             (gshell_beta5_yak.):03290                  bra   HNDLWA12
                      (gshell_beta5_yak.):03291         
                      (gshell_beta5_yak.):03292         * Child process has died
1509 EC62             (gshell_beta5_yak.):03293         HNDLWAI3 ldd   2,S        Get process id # of child that died
150B 3406             (gshell_beta5_yak.):03294                  pshs  d          Save on stack for subroutine
150D 8D7F             (gshell_beta5_yak.):03295                  bsr   GTPRDESC   Get process descriptor table entry ptr for child
150F 1F03             (gshell_beta5_yak.):03296                  tfr   D,U        Move to U
1511 EFE1             (gshell_beta5_yak.):03297                  stu   ,S++       Did we find an entry for child process? (and eat temp)
1513 275D             (gshell_beta5_yak.):03298                  beq   HNDLWA11   No, get the signal code the orphaned process sent & return with it in D
1515 EC64             (gshell_beta5_yak.):03299                  ldd   4,S        Get child's exit code
1517 EDA9044D         (gshell_beta5_yak.):03300                  std   ERRNO,Y    Save as error
151B ED46             (gshell_beta5_yak.):03301                  std   GD.STATS,U Save as last status for forked program
151D 273B             (gshell_beta5_yak.):03302                  beq   HNDLWAI8   If child exited via clean F$Exit, skip ahead
151F C102             (gshell_beta5_yak.):03303                  cmpb  #S$Abort   Abort signal?
1521 2704             (gshell_beta5_yak.):03304                  beq   HNDLWAI4   yes, go handle
1523 C103             (gshell_beta5_yak.):03305                  cmpb  #S$Intrpt  Interrupt signal?
1525 2629             (gshell_beta5_yak.):03306                  bne   HNDLWAI7   Yes, go handle
                      (gshell_beta5_yak.):03307         * Child ABORTed (CTRL-E) or INTERRUPTed (CTRL-C). Shut off pause and echo on the child's window,
                      (gshell_beta5_yak.):03308         *   so that any cleanup messages from child go through
1527 5F               (gshell_beta5_yak.):03309         HNDLWAI4 clrb             D=0
1528 3406             (gshell_beta5_yak.):03310                  pshs  d          Save for sub (0=Turn pause/echo off)
152A EC4C             (gshell_beta5_yak.):03311                  ldd   GD.WPATH,U Get path to the child processes' window
152C 3406             (gshell_beta5_yak.):03312                  pshs  d          Save for sub
152E 17192A           (gshell_beta5_yak.):03313                  lbsr  PAUSECHO   Shut pause & echo off for that window
1531 3264             (gshell_beta5_yak.):03314                  leas  4,S        Eat temp stack
1533 200E             (gshell_beta5_yak.):03315                  bra   HNDLWAI6   Flush out GShell window's keyboard buffer
                      (gshell_beta5_yak.):03316         
                      (gshell_beta5_yak.):03317         * Flush out keyboard buffer for main GSHELL window
1535 3406             (gshell_beta5_yak.):03318         HNDLWAI5 pshs  d          Save # of chars in main window buffer
1537 8E0F3F           (gshell_beta5_yak.):03319                  ldx   #MULTIBFR  Point to temp buffer area
153A DC22             (gshell_beta5_yak.):03320                  ldd   WNDWPATH   Get window path for GSHELL
153C 3416             (gshell_beta5_yak.):03321                  pshs  d,X
153E 171E4D           (gshell_beta5_yak.):03322                  lbsr  I.READ     Read (eat/flush) all chars in keyboard buffer for GSHELL
1541 3266             (gshell_beta5_yak.):03323                  leas  6,S        Eat temp stack
1543 DC22             (gshell_beta5_yak.):03324         HNDLWAI6 ldd   WNDWPATH   Get path to GSHELL window
1545 3406             (gshell_beta5_yak.):03325                  pshs  d          Save on stack for sub
1547 171FB0           (gshell_beta5_yak.):03326                  lbsr  GT.READY   Check if any data ready in keyboard buffer
154A 3262             (gshell_beta5_yak.):03327                  leas  2,S
154C EDE4             (gshell_beta5_yak.):03328                  std   ,S         Save # chars waiting
154E 2EE5             (gshell_beta5_yak.):03329                  bgt   HNDLWAI5   There are some, process
                      (gshell_beta5_yak.):03330         * Child exited with error other than ABORT or INTERRUPT comes straight here
1550 308C29           (gshell_beta5_yak.):03331         HNDLWAI7 leax  <PROCERR,PC Point to 'process error' msg
1553 3450             (gshell_beta5_yak.):03332                  pshs  X,U
1555 17FC85           (gshell_beta5_yak.):03333                  lbsr  ERRPRINT   Print error to screen (shows error # as well)
1558 3264             (gshell_beta5_yak.):03334                  leas  4,S
                      (gshell_beta5_yak.):03335         * If child quit via a no error F$Exit, it comes here
155A EC4E             (gshell_beta5_yak.):03336         HNDLWAI8 ldd   GD.DW.OW,U Get Overlay/Device window flag
155C 10830001         (gshell_beta5_yak.):03337                  cmpd  #1         Are we running in overlay window on GShell screen?
1560 2707             (gshell_beta5_yak.):03338                  beq   HNDLWAI9   Yes, Skip ahead
1562 3440             (gshell_beta5_yak.):03339                  pshs  U          No, save ptr to Process dsc. entry
1564 17F0E6           (gshell_beta5_yak.):03340                  lbsr  KILPDESC   Remove process descriptor out of table, kill device window
1567 3262             (gshell_beta5_yak.):03341                  leas  2,S
1569 11A36A           (gshell_beta5_yak.):03342         HNDLWAI9 cmpu  10,S       Current process desc. entry ptr same as ???
156C 2604             (gshell_beta5_yak.):03343                  bne   HNDLWA11
156E 4F               (gshell_beta5_yak.):03344         HNDLWA10 clra             Return with D=0 (no signal)
156F 5F               (gshell_beta5_yak.):03345                  clrb  
1570 2006             (gshell_beta5_yak.):03346                  bra   HNDLWA12
                      (gshell_beta5_yak.):03347         
                      (gshell_beta5_yak.):03348         * If signal received not for any child of ours (done directly from GSHELL)
                      (gshell_beta5_yak.):03349         *   ,exit with D=0, else redo WAIT and try again (could this be 'infinite'
                      (gshell_beta5_yak.):03350         * loop bug where sometimes just auto-follow mouse works, but nothing else?
1572 EC64             (gshell_beta5_yak.):03351         HNDLWA11 ldd   4,S        Get child's signal code
1574 1027FF75         (gshell_beta5_yak.):03352                  lbeq  HNDLWAI1   If none, redo WAIT call & try again
1578 3266             (gshell_beta5_yak.):03353         HNDLWA12 leas  6,S        Eat temp stack & return
157A 35C0             (gshell_beta5_yak.):03354                  puls  U,PC
                      (gshell_beta5_yak.):03355         
157C 50726F6365737320 (gshell_beta5_yak.):03356         PROCERR  fcc   "Process error - "
     6572726F72202D20
158C 2200             (gshell_beta5_yak.):03357                  fcb   '",NUL
                      (gshell_beta5_yak.):03358         
                      (gshell_beta5_yak.):03359         * Entry: 0-1,s = RTS address
                      (gshell_beta5_yak.):03360         *        2-3,s = process ID we are looking for
                      (gshell_beta5_yak.):03361         * Exit: D=0 if no child processes in table
                      (gshell_beta5_yak.):03362         *       D=ptr to process descriptor table entry
158E 9E38             (gshell_beta5_yak.):03363         GTPRDESC ldx   PTBLSPTR   Get ptr to start of process descriptor table
1590 270F             (gshell_beta5_yak.):03364                  beq   GTPRDES3   None, exit
1592 EC04             (gshell_beta5_yak.):03365         GTPRDES1 ldd   GD.PRCID,X Get process id # for current table entry
1594 10A362           (gshell_beta5_yak.):03366                  cmpd  2,S        This the one we are looking for?
1597 2603             (gshell_beta5_yak.):03367                  bne   GTPRDES2   No, skip to next one
1599 1F10             (gshell_beta5_yak.):03368                  tfr   X,D        Exit with D=process table entry ptr
159B 39               (gshell_beta5_yak.):03369                  rts   
                      (gshell_beta5_yak.):03370         
159C AE881A           (gshell_beta5_yak.):03371         GTPRDES2 ldx   GD.LINK,X  Get ptr to next process in table
159F 26F1             (gshell_beta5_yak.):03372                  bne   GTPRDES1   got one, check it
15A1 4F               (gshell_beta5_yak.):03373         GTPRDES3 clra             End of table, exit with D=0
15A2 5F               (gshell_beta5_yak.):03374                  clrb  
15A3 39               (gshell_beta5_yak.):03375                  rts   
                      (gshell_beta5_yak.):03376         
                      (gshell_beta5_yak.):03377         * Add a string prefix to the current string
                      (gshell_beta5_yak.):03378         * Entry: 0-1,s = RTS address
                      (gshell_beta5_yak.):03379         *        2-3,s = String that we are inserting in front of
15A4 3440             (gshell_beta5_yak.):03380         STPREFIX pshs  U          Preserve U
15A6 EC64             (gshell_beta5_yak.):03381                  ldd   4,S        Get ptr to string we are inserting in front of
15A8 3436             (gshell_beta5_yak.):03382                  pshs  d,X,Y      Save it & regs
15AA 171E58           (gshell_beta5_yak.):03383                  lbsr  STRLEN     Get length of string we are inserting in front of
                      (gshell_beta5_yak.):03384         * NOTE: WHEN TFM'ING BELOW, DELETE ADDD #1
15AD C30001           (gshell_beta5_yak.):03385                  addd  #1
15B0 ED64             (gshell_beta5_yak.):03386                  std   4,S        Save length of string+1
15B2 CE109F           (gshell_beta5_yak.):03387                  ldu   #PARMSBFR  Point to temp buffer
15B5 EFE4             (gshell_beta5_yak.):03388                  stu   ,S         Save ptr
15B7 171E4B           (gshell_beta5_yak.):03389                  lbsr  STRLEN     Get length of string in temp buffer
15BA 3262             (gshell_beta5_yak.):03390                  leas  2,S        Eat stack
                      (gshell_beta5_yak.):03391         * WHEN TFMING BELOW, DELETE INCB
15BC 5C               (gshell_beta5_yak.):03392                  incb             Bump length up by 1
                      (gshell_beta5_yak.):03393         * 6309
                      (gshell_beta5_yak.):03394         * tfr d,w  Save length
                      (gshell_beta5_yak.):03395         * addr w,u Point to end of string+1
                      (gshell_beta5_yak.):03396         * DELETE LDA 1,S BELOW
                      (gshell_beta5_yak.):03397         
15BD EDE4             (gshell_beta5_yak.):03398                  std   ,S         Save it
15BF 33CB             (gshell_beta5_yak.):03399                  leau  D,U        Point to end of string+1
15C1 1F31             (gshell_beta5_yak.):03400                  tfr   U,X        Save ptr in X
15C3 EC62             (gshell_beta5_yak.):03401                  ldd   2,S        Get length of string we are inserting in front of
15C5 33CB             (gshell_beta5_yak.):03402                  leau  D,U        Calculate end ptr of two strings together
15C7 A661             (gshell_beta5_yak.):03403                  lda   1,S        Get # of bytes to move (size of inserted string)
15C9 2004             (gshell_beta5_yak.):03404                  bra   STPREFX2
                      (gshell_beta5_yak.):03405         
                      (gshell_beta5_yak.):03406         * 6309 - DELETE ABOVE BRA STPREFX2
                      (gshell_beta5_yak.):03407         * NOTE THAT DELETING INCB & ADDD #1 ABOVE IS BECAUSE TFM IS _POST_ DECREMENT,
                      (gshell_beta5_yak.):03408         *   WHILE ORIGINAL ,-X IS _PRE_DECREMENT
                      (gshell_beta5_yak.):03409         * NOTE: 6309 ONLY: CHANGE TO TFM
                      (gshell_beta5_yak.):03410         *  tfm x-,u-
                      (gshell_beta5_yak.):03411         * Copy string we are inserting in front of further ahead in buffer to make
                      (gshell_beta5_yak.):03412         *   room for inserted string
15CB E682             (gshell_beta5_yak.):03413         STPREFX1 ldb   ,-X        Get char from 1st string
15CD E7C2             (gshell_beta5_yak.):03414                  stb   ,-U        Append in 2nd
15CF 4A               (gshell_beta5_yak.):03415         STPREFX2 deca             Dec # bytes left
15D0 2CF9             (gshell_beta5_yak.):03416                  bge   STPREFX1   Still some left continue copying
15D2 AE68             (gshell_beta5_yak.):03417                  ldx   8,S        Get ptr to another string
15D4 CE109F           (gshell_beta5_yak.):03418                  ldu   #PARMSBFR  Point to start of temp buffer
15D7 2004             (gshell_beta5_yak.):03419                  bra   STPREFX4
                      (gshell_beta5_yak.):03420         
15D9 E680             (gshell_beta5_yak.):03421         STPREFX3 ldb   ,X+        Copy char from string to temp buffer
15DB E7C0             (gshell_beta5_yak.):03422                  stb   ,U+
15DD E684             (gshell_beta5_yak.):03423         STPREFX4 ldb   ,X         Get char from string
15DF 26F8             (gshell_beta5_yak.):03424                  bne   STPREFX3   Not end of string, copy character
15E1 CC0020           (gshell_beta5_yak.):03425                  ldd   #SPACE     A=0, B=Space char
15E4 E7C4             (gshell_beta5_yak.):03426                  stb   ,U         Add space char
15E6 3264             (gshell_beta5_yak.):03427                  leas  4,S        Eat stack & return
15E8 35C0             (gshell_beta5_yak.):03428                  puls  U,PC
                      (gshell_beta5_yak.):03429         
                      (gshell_beta5_yak.):03430         * Change all 3 standard I/O paths to path pointed to by current program
                      (gshell_beta5_yak.):03431         *   table entry (GD.*) (or WNDWPATH if GD.WPATH is negative & there is no
                      (gshell_beta5_yak.):03432         *   ptr to a pathname in GD.INDVC)
                      (gshell_beta5_yak.):03433         * Entry: 0-1,s = RTS address
                      (gshell_beta5_yak.):03434         *        2-3,s = Ptr to current entry in GD.* table
15EA 3440             (gshell_beta5_yak.):03435         NEWSTDIO pshs  U
15EC EE64             (gshell_beta5_yak.):03436                  ldu   4,S        Get GD.* ptr
15EE A64D             (gshell_beta5_yak.):03437                  lda   GD.WPATH+1,U Get path # to window program is/will be running on.
15F0 2E02             (gshell_beta5_yak.):03438                  bgt   NEWSTDI1   If positive value, skip ahead
15F2 9623             (gshell_beta5_yak.):03439                  lda   WNDWPATH+1 If negative, use GSHELL window path
15F4 3402             (gshell_beta5_yak.):03440         NEWSTDI1 pshs  A          Save new window path #
15F6 4F               (gshell_beta5_yak.):03441                  clra             Close current input/output/error paths
15F7 103F8F           (gshell_beta5_yak.):03442                  os9   I$Close
15FA 4C               (gshell_beta5_yak.):03443                  inca  
15FB 103F8F           (gshell_beta5_yak.):03444                  os9   I$Close
15FE 4C               (gshell_beta5_yak.):03445                  inca  
15FF 103F8F           (gshell_beta5_yak.):03446                  os9   I$Close
                      (gshell_beta5_yak.):03447         * NOTE: As far as I can tell, GD.INDV only ever gets inited to 0 (use stack path), and is
                      (gshell_beta5_yak.):03448         * never set on it's own???
1602 AE42             (gshell_beta5_yak.):03449                  ldx   GD.INDVC,U Get ptr to new window's path NAME
1604 2707             (gshell_beta5_yak.):03450                  beq   NEWSTDI2   None, use path # on stack
1606 8601             (gshell_beta5_yak.):03451                  lda   #READ.     There is a path name, OPEN a READ path to it
1608 103F84           (gshell_beta5_yak.):03452                  os9   I$Open     & use it's path # for new std i/o paths
160B 2005             (gshell_beta5_yak.):03453                  bra   NEWSTDI3
                      (gshell_beta5_yak.):03454         
160D A6E4             (gshell_beta5_yak.):03455         NEWSTDI2 lda   ,S         Get new window's path # from stack
160F 103F82           (gshell_beta5_yak.):03456                  os9   I$Dup      Duplicate new path as std in
1612 2515             (gshell_beta5_yak.):03457         NEWSTDI3 bcs   NEWSTDI4
1614 A6E4             (gshell_beta5_yak.):03458                  lda   ,S         and std out
1616 103F82           (gshell_beta5_yak.):03459                  os9   I$Dup
1619 250E             (gshell_beta5_yak.):03460                  bcs   NEWSTDI4
161B A6E4             (gshell_beta5_yak.):03461                  lda   ,S         and std err
161D 103F82           (gshell_beta5_yak.):03462                  os9   I$Dup
1620 2507             (gshell_beta5_yak.):03463                  bcs   NEWSTDI4
1622 3502             (gshell_beta5_yak.):03464                  puls  A          eat copy of new path #
1624 CC0001           (gshell_beta5_yak.):03465                  ldd   #1         D=1 if new std i/o paths created successfully
1627 35C0             (gshell_beta5_yak.):03466                  puls  U,PC
                      (gshell_beta5_yak.):03467         
1629 3261             (gshell_beta5_yak.):03468         NEWSTDI4 leas  1,S        Eat stack
162B 4F               (gshell_beta5_yak.):03469                  clra             Exit with D=0 if could not create new paths
162C 5F               (gshell_beta5_yak.):03470                  clrb  
162D 35C0             (gshell_beta5_yak.):03471                  puls  U,PC
                      (gshell_beta5_yak.):03472         
                      (gshell_beta5_yak.):03473         * Restore std I/O paths to normal GSHELL path
162F 4F               (gshell_beta5_yak.):03474         RESTDIO  clra             Close std in/out/error paths
1630 103F8F           (gshell_beta5_yak.):03475                  os9   I$Close
1633 4C               (gshell_beta5_yak.):03476                  inca  
1634 103F8F           (gshell_beta5_yak.):03477                  os9   I$Close
1637 4C               (gshell_beta5_yak.):03478                  inca  
1638 103F8F           (gshell_beta5_yak.):03479                  os9   I$Close
163B 9623             (gshell_beta5_yak.):03480                  lda   WNDWPATH+1 Duplicate normal GSHELL window paths to std i/o
163D 103F82           (gshell_beta5_yak.):03481                  os9   I$Dup
1640 9623             (gshell_beta5_yak.):03482                  lda   WNDWPATH+1
1642 103F82           (gshell_beta5_yak.):03483                  os9   I$Dup
1645 9623             (gshell_beta5_yak.):03484                  lda   WNDWPATH+1
1647 103F82           (gshell_beta5_yak.):03485                  os9   I$Dup
164A 39               (gshell_beta5_yak.):03486                  rts   
                      (gshell_beta5_yak.):03487         
                      (gshell_beta5_yak.):03488         * Attempt to allocate a program name & FL.* table entry as one contiguous buffer
164B 3440             (gshell_beta5_yak.):03489         EXTFITBL pshs  U
164D EC64             (gshell_beta5_yak.):03490                  ldd   4,S          Get ptr to program name
164F 3406             (gshell_beta5_yak.):03491                  pshs  d            Save for sub
1651 171DB1           (gshell_beta5_yak.):03492                  lbsr  STRLEN       Get length of program name
1654 C3000F           (gshell_beta5_yak.):03493                  addd  #FL.SIZE+1   Add size of FL.* table entry
1657 EDE4             (gshell_beta5_yak.):03494                  std   ,S
1659 17FAE9           (gshell_beta5_yak.):03495                  lbsr  MEMSPACE     Go allocated memory for both name & FL.* table entry
165C 3262             (gshell_beta5_yak.):03496                  leas  2,S
165E 1F03             (gshell_beta5_yak.):03497                  tfr   D,U          Move ptr to allocated mem to U
1660 EF7E             (gshell_beta5_yak.):03498                  stu   -2,S         Successful allocate?
1662 2715             (gshell_beta5_yak.):03499                  beq   EXTFITB1     No, return with D=0 (failed)
1664 304E             (gshell_beta5_yak.):03500                  leax  FL.SIZE,U    Point to next entry?
1666 AF4C             (gshell_beta5_yak.):03501                  stx   FL.FNAME,U   Save ptr to filename in File table
1668 EC64             (gshell_beta5_yak.):03502                  ldd   4,S
166A 3406             (gshell_beta5_yak.):03503                  pshs  d
166C 3410             (gshell_beta5_yak.):03504                  pshs  X
166E 171DAC           (gshell_beta5_yak.):03505                  lbsr  STRCPY
1671 3264             (gshell_beta5_yak.):03506                  leas  4,S
1673 0C2F             (gshell_beta5_yak.):03507                  inc   FILESCTR+1
1675 2602             (gshell_beta5_yak.):03508                  bne   EXTFITB1
1677 0C2E             (gshell_beta5_yak.):03509                  inc   FILESCTR
1679 1F30             (gshell_beta5_yak.):03510         EXTFITB1 tfr   U,D
167B 35C0             (gshell_beta5_yak.):03511                  puls  U,PC
                      (gshell_beta5_yak.):03512         
                      (gshell_beta5_yak.):03513         * See if we are adding new File Block Info entry. If we are, initialize the file block
                      (gshell_beta5_yak.):03514         *  entry, set up it's X/Y coords, and update next entry ptr
                      (gshell_beta5_yak.):03515         * Entry:
                      (gshell_beta5_yak.):03516         * 0-1,s = RTS address
                      (gshell_beta5_yak.):03517         * 2-3,s = 
                      (gshell_beta5_yak.):03518         * Exit: D = ptr to FL (File Info block). 
167D EC62             (gshell_beta5_yak.):03519         UPDTIPTR ldd   2,S      
167F 3406             (gshell_beta5_yak.):03520                  pshs  d
1681 8DC8             (gshell_beta5_yak.):03521                  bsr   EXTFITBL     ? Get ptr to file block (0=non)
1683 EDE4             (gshell_beta5_yak.):03522                  std   ,S           Save ptr to stack
1685 2712             (gshell_beta5_yak.):03523                  beq   UPDTIPT1     If no ptr returned, exit
1687 EDB832           (gshell_beta5_yak.):03524                  std   [FTBLNEXT,Y] Save ptr to next available link in file icon descriptor table
168A 1F01             (gshell_beta5_yak.):03525                  tfr   D,X          X=ptr to next available link
168C 4F               (gshell_beta5_yak.):03526                  clra
168D 5F               (gshell_beta5_yak.):03527                  clrb
168E ED0A             (gshell_beta5_yak.):03528                  std   FL.LINK,X    Init next file info block (linked list)
1690 ED08             (gshell_beta5_yak.):03529                  std   FL.ICONO,X   Zero out icon type & AIF #
1692 1700F6           (gshell_beta5_yak.):03530                  lbsr  ICNXYSET     Calc/save X,Y coords for current file block, and where next icon will go to
1695 300A             (gshell_beta5_yak.):03531                  leax  FL.LINK,X    Calc address to where next file block will go
1697 9F32             (gshell_beta5_yak.):03532                  stx   FTBLNEXT     Save it for future
1699 3586             (gshell_beta5_yak.):03533         UPDTIPT1 puls  d,PC
                      (gshell_beta5_yak.):03534         
169B EC62             (gshell_beta5_yak.):03535         ADDFICON ldd   2,S
169D 3406             (gshell_beta5_yak.):03536                  pshs  d
169F 8DDC             (gshell_beta5_yak.):03537                  bsr   UPDTIPTR     Update icon/file table ptrs
16A1 EDE4             (gshell_beta5_yak.):03538                  std   ,S           Save ptr to current File Info block
16A3 2712             (gshell_beta5_yak.):03539                  beq   ADDFICO3     None, return
16A5 E667             (gshell_beta5_yak.):03540                  ldb   7,S          Get icon type
16A7 C106             (gshell_beta5_yak.):03541                  cmpb  #IC.AIF.F    Is it an AIF to launch a program?
16A9 2704             (gshell_beta5_yak.):03542                  beq   ADDFICO1     Yes, skip ahead
16AB C107             (gshell_beta5_yak.):03543                  cmpb  #IC.F.XXX    Is it a file type we have had an AIF for before?
16AD 2602             (gshell_beta5_yak.):03544                  bne   ADDFICO2     No, skip ahead
16AF 8D17             (gshell_beta5_yak.):03545         ADDFICO1 bsr   ISIT.XXX     Go handle either AIF type
16B1 AEE4             (gshell_beta5_yak.):03546         ADDFICO2 ldx   ,S
16B3 E708             (gshell_beta5_yak.):03547                  stb   FL.ICONO,X   
16B5 8D02             (gshell_beta5_yak.):03548                  bsr   UPDTNSCR
16B7 3586             (gshell_beta5_yak.):03549         ADDFICO3 puls  d,pc
                      (gshell_beta5_yak.):03550         
16B9 DC2E             (gshell_beta5_yak.):03551         UPDTNSCR ldd   FILESCTR     Get # of files in current data directory
16BB 830001           (gshell_beta5_yak.):03552                  subd  #1           Base 0?
16BE 3406             (gshell_beta5_yak.):03553                  pshs  d
16C0 DC1E             (gshell_beta5_yak.):03554                  ldd   MAXICONS     Get max # of icons/screen (currently 12 or 24)
16C2 1720C6           (gshell_beta5_yak.):03555                  lbsr  CCDIV        Do divide (D=result, 16 bit MOD on stack?)
16C5 DD2A             (gshell_beta5_yak.):03556                  std   NSCREENS     Save # of icon screens for current directory
16C7 39               (gshell_beta5_yak.):03557                  rts   
                      (gshell_beta5_yak.):03558         
                      (gshell_beta5_yak.):03559         * Check if existing AIF.xxx extension on current filename
16C8 3440             (gshell_beta5_yak.):03560         ISIT.XXX pshs  U
16CA EE64             (gshell_beta5_yak.):03561                  ldu   4,S          Get ptr to current file descriptor entry
16CC EC4C             (gshell_beta5_yak.):03562                  ldd   FL.FNAME,U   Get ptr to actual filename
16CE 3406             (gshell_beta5_yak.):03563                  pshs  d
16D0 17F966           (gshell_beta5_yak.):03564                  lbsr  FIND.XXX     See if 3 char extension
16D3 EDE1             (gshell_beta5_yak.):03565                  std   ,S++         3 char extension?
16D5 270F             (gshell_beta5_yak.):03566                  beq   ISITXXX1     No, return
16D7 3406             (gshell_beta5_yak.):03567                  pshs  d            Yes, save ptr to 3 char extension (we have a possible AIF or AIF extension match)
16D9 3440             (gshell_beta5_yak.):03568                  pshs  U            Save FL.* table entry ptr
16DB 17F7A8           (gshell_beta5_yak.):03569                  lbsr  FILE.XXX     Process AIF file if needed, or used an existing AIF entry (or skip if not AIF)
16DE 3264             (gshell_beta5_yak.):03570                  leas  4,S          Eat temps
16E0 ED7E             (gshell_beta5_yak.):03571                  std   -2,S         Did we get an AIF match?
16E2 2702             (gshell_beta5_yak.):03572                  beq   ISITXXX1     No, skip to next
16E4 35C0             (gshell_beta5_yak.):03573                  puls  U,PC
                      (gshell_beta5_yak.):03574         
16E6 5C               (gshell_beta5_yak.):03575         ISITXXX1 incb  
16E7 35C0             (gshell_beta5_yak.):03576                  puls  U,PC
                      (gshell_beta5_yak.):03577         
                      (gshell_beta5_yak.):03578         * Replace (update) FL.* file icon descriptor entry
16E9 3440             (gshell_beta5_yak.):03579         RPLFICON pshs  U
16EB EC64             (gshell_beta5_yak.):03580                  ldd   6-2,S
16ED 3416             (gshell_beta5_yak.):03581                  pshs  d,X
16EF 8D6D             (gshell_beta5_yak.):03582                  bsr   SRCHFTBL
16F1 ED62             (gshell_beta5_yak.):03583                  std   2,S
16F3 EC6A             (gshell_beta5_yak.):03584                  ldd   8+2,S
16F5 EDE4             (gshell_beta5_yak.):03585                  std   ,S
16F7 17FF51           (gshell_beta5_yak.):03586                  lbsr  EXTFITBL
16FA 1F03             (gshell_beta5_yak.):03587                  tfr   D,U          Move where to copy to to U (dest ptr)
16FC CC000C           (gshell_beta5_yak.):03588                  ldd   #FL.FNAME    Size of File info data block
16FF EDE4             (gshell_beta5_yak.):03589                  std   ,S           Save it
1701 EC68             (gshell_beta5_yak.):03590                  ldd   8,S          Get src ptr
1703 3406             (gshell_beta5_yak.):03591                  pshs  d            Save on stack
1705 3440             (gshell_beta5_yak.):03592                  pshs  U            Save dest ptr
1707 171D88           (gshell_beta5_yak.):03593                  lbsr  STRNCPY
170A 3266             (gshell_beta5_yak.):03594                  leas  6,S
170C AE66             (gshell_beta5_yak.):03595                  ldx   6,S
170E 9C2C             (gshell_beta5_yak.):03596                  cmpx  STRTICON
1710 2602             (gshell_beta5_yak.):03597                  bne   RPLFICOX
1712 DF2C             (gshell_beta5_yak.):03598                  stu   STRTICON
1714 AE0A             (gshell_beta5_yak.):03599         RPLFICOX ldx   FL.LINK,X
1716 2604             (gshell_beta5_yak.):03600                  bne   RPLFICO1
1718 304A             (gshell_beta5_yak.):03601                  leax  FL.LINK,U
171A 9F32             (gshell_beta5_yak.):03602                  stx   FTBLNEXT
171C AEE4             (gshell_beta5_yak.):03603         RPLFICO1 ldx   ,S
171E 2604             (gshell_beta5_yak.):03604                  bne   RPLFICO2
1720 DF30             (gshell_beta5_yak.):03605                  stu   FTBLSPTR
1722 2002             (gshell_beta5_yak.):03606                  bra   RPLFICO3
                      (gshell_beta5_yak.):03607         
1724 EF0A             (gshell_beta5_yak.):03608         RPLFICO2 stu   FL.LINK,X
1726 EC66             (gshell_beta5_yak.):03609         RPLFICO3 ldd   6,S
1728 3406             (gshell_beta5_yak.):03610                  pshs  d
172A 171B26           (gshell_beta5_yak.):03611                  lbsr  FREE
172D DC2E             (gshell_beta5_yak.):03612                  ldd   FILESCTR
172F 830001           (gshell_beta5_yak.):03613                  subd  #1           NOTE: 6309 DECD
1732 DD2E             (gshell_beta5_yak.):03614                  std   FILESCTR
1734 8D83             (gshell_beta5_yak.):03615                  bsr   UPDTNSCR
1736 1F30             (gshell_beta5_yak.):03616                  tfr   U,D
1738 3264             (gshell_beta5_yak.):03617                  leas  4,S
173A 35C0             (gshell_beta5_yak.):03618                  puls  U,PC
                      (gshell_beta5_yak.):03619         
                      (gshell_beta5_yak.):03620         * Remove a FL.* File icon descriptor entry
173C 3440             (gshell_beta5_yak.):03621         RMVFICON pshs  U
173E AE64             (gshell_beta5_yak.):03622                  ldx   4,S
1740 EE0A             (gshell_beta5_yak.):03623                  ldu   FL.LINK,X
1742 3410             (gshell_beta5_yak.):03624                  pshs  X
1744 8D18             (gshell_beta5_yak.):03625                  bsr   SRCHFTBL
1746 EDE4             (gshell_beta5_yak.):03626                  std   ,S
1748 EF7E             (gshell_beta5_yak.):03627                  stu   -2,S
174A 26D0             (gshell_beta5_yak.):03628                  bne   RPLFICO1
174C ECE4             (gshell_beta5_yak.):03629                  ldd   ,S
174E 2607             (gshell_beta5_yak.):03630                  bne   RMVFICO1
1750 30A830           (gshell_beta5_yak.):03631                  leax  <FTBLSPTR,Y
1753 9F32             (gshell_beta5_yak.):03632                  stx   FTBLNEXT
1755 20C5             (gshell_beta5_yak.):03633                  bra   RPLFICO1
                      (gshell_beta5_yak.):03634         
1757 C3000A           (gshell_beta5_yak.):03635         RMVFICO1 addd  #FL.LINK
175A DD32             (gshell_beta5_yak.):03636                  std   FTBLNEXT
175C 20BE             (gshell_beta5_yak.):03637                  bra   RPLFICO1
                      (gshell_beta5_yak.):03638         
                      (gshell_beta5_yak.):03639         * Search FL.* file icon descriptor table
                      (gshell_beta5_yak.):03640         * Entry: 0-1,s=Ptr to FL.* entry we are looking for
                      (gshell_beta5_yak.):03641         * Exit: D & X=0 if no matching one found
                      (gshell_beta5_yak.):03642         *       X=ptr to matching one
175E 4F               (gshell_beta5_yak.):03643         SRCHFTBL clra               Init current ptr temp to 0
175F 5F               (gshell_beta5_yak.):03644                  clrb  
1760 3406             (gshell_beta5_yak.):03645                  pshs  d            Save it
1762 9E30             (gshell_beta5_yak.):03646                  ldx   FTBLSPTR     Get the ptr to the start of the FL.* table
1764 AC64             (gshell_beta5_yak.):03647         SRCHFTB1 cmpx  4,S          Is it the one we are looking for?
1766 2602             (gshell_beta5_yak.):03648                  bne   SRCHFTB2     No, skip ahead
1768 3586             (gshell_beta5_yak.):03649                  puls  d,PC         Yes, exit with original requested ptr in D
                      (gshell_beta5_yak.):03650         
176A AFE4             (gshell_beta5_yak.):03651         SRCHFTB2 stx   ,S           Save "previous" FL.* entry ptr
176C AE0A             (gshell_beta5_yak.):03652                  ldx   FL.LINK,X    Get ptr to next one in linked list
176E 26F4             (gshell_beta5_yak.):03653                  bne   SRCHFTB1     There is one, see if that one matches
1770 4F               (gshell_beta5_yak.):03654                  clra               Hit end of list, Exit with D & X=0
1771 5F               (gshell_beta5_yak.):03655                  clrb  
1772 39               (gshell_beta5_yak.):03656                  rts   
                      (gshell_beta5_yak.):03657         
1773 3446             (gshell_beta5_yak.):03658         KILLFTBL pshs  d,U
1775 DE30             (gshell_beta5_yak.):03659                  ldu   FTBLSPTR     Get ptr to start of the FL.* table
1777 2005             (gshell_beta5_yak.):03660                  bra   KILLFTB2
                      (gshell_beta5_yak.):03661         
1779 EE4A             (gshell_beta5_yak.):03662         KILLFTB1 ldu   FL.LINK,U    Get ptr to next entry in linked list
177B 171AD5           (gshell_beta5_yak.):03663                  lbsr  FREE         Free the memory
177E EFE4             (gshell_beta5_yak.):03664         KILLFTB2 stu   ,S
1780 26F7             (gshell_beta5_yak.):03665                  bne   KILLFTB1
1782 30A830           (gshell_beta5_yak.):03666                  leax  <FTBLSPTR,Y
1785 EF84             (gshell_beta5_yak.):03667                  stu   ,X
1787 9F32             (gshell_beta5_yak.):03668                  stx   FTBLNEXT
1789 35C6             (gshell_beta5_yak.):03669                  puls  d,U,PC
                      (gshell_beta5_yak.):03670         
                      (gshell_beta5_yak.):03671         * Update file icon table position entry, as well as next icon position on
                      (gshell_beta5_yak.):03672         * screen.
                      (gshell_beta5_yak.):03673         * Entry: 0-1,s = RTS address
                      (gshell_beta5_yak.):03674         *        2-3,s = Ptr to current file table (FL.*) entry
178B 3440             (gshell_beta5_yak.):03675         ICNXYSET pshs  U
178D EE64             (gshell_beta5_yak.):03676                  ldu   4,S        Get ptr to current file table entry
178F DC3D             (gshell_beta5_yak.):03677                  ldd   NEXTXPOS   Get next X position for file icon on screen
1791 EDC4             (gshell_beta5_yak.):03678                  std   FL.XSTRT,U Save as X start for file table entry
1793 C30018           (gshell_beta5_yak.):03679                  addd  #24        Add 24 pixels (Width of icon)
1796 0D5D             (gshell_beta5_yak.):03680                  tst   WD48FLAG   Using wide 80 column screen?
1798 2703             (gshell_beta5_yak.):03681                  beq   ICNXYSE2   No, skip ahead
179A C30018           (gshell_beta5_yak.):03682                  addd  #24        Yes, add another 24 pixels (48 pixels for wide)
179D ED44             (gshell_beta5_yak.):03683         ICNXYSE2 std   FL.XEND,U  Save as X end for file table entry
179F DC3F             (gshell_beta5_yak.):03684                  ldd   NEXTYPOS   Get next Y position
17A1 ED42             (gshell_beta5_yak.):03685                  std   FL.YSTRT,U Save as Y start for file table entry
17A3 C30018           (gshell_beta5_yak.):03686                  addd  #24        Add 24
17A6 ED46             (gshell_beta5_yak.):03687                  std   FL.YEND,U  Save Y end for file table entry
17A8 DC3D             (gshell_beta5_yak.):03688                  ldd   NEXTXPOS   Get next X start pos again
17AA D303             (gshell_beta5_yak.):03689                  addd  ICONCOLW   Add icon column width (including spacing)
17AC DD3D             (gshell_beta5_yak.):03690                  std   NEXTXPOS   Save as new next X pos
17AE 3406             (gshell_beta5_yak.):03691                  pshs  d          * NOTE: 6309 SUBR
17B0 DC19             (gshell_beta5_yak.):03692                  ldd   PIXELSWD   Get GSHELL window width
17B2 A3E1             (gshell_beta5_yak.):03693                  subd  ,S++
17B4 10830018         (gshell_beta5_yak.):03694                  cmpd  #24        Is next icon going to be past right window edge?
17B8 2C13             (gshell_beta5_yak.):03695                  bge   ICNXYSE1   No, skip ahead
17BA DC17             (gshell_beta5_yak.):03696                  ldd   STRTXPOS   Yes, reset next X pos to start X pos (left side)
17BC DD3D             (gshell_beta5_yak.):03697                  std   NEXTXPOS
17BE DC3F             (gshell_beta5_yak.):03698                  ldd   NEXTYPOS   Bump Y pos up too by icon row height
17C0 D309             (gshell_beta5_yak.):03699                  addd  ICONROWH
17C2 DD3F             (gshell_beta5_yak.):03700                  std   NEXTYPOS
17C4 109307           (gshell_beta5_yak.):03701                  cmpd  ICONYMAX   Are we passed the bottom of the GSHELL window too?
17C7 2F04             (gshell_beta5_yak.):03702                  ble   ICNXYSE1   No, skip ahead
17C9 DC05             (gshell_beta5_yak.):03703                  ldd   STRTYPOS   Yes, reset next Y pos as start Y pos (top side)
17CB DD3F             (gshell_beta5_yak.):03704                  std   NEXTYPOS
17CD 35C0             (gshell_beta5_yak.):03705         ICNXYSE1 puls  U,PC
                      (gshell_beta5_yak.):03706         
17CF 8D0F             (gshell_beta5_yak.):03707         UPDFITBL bsr   RSTXYPTR   Reset X/Y positions of next icon to upper left corner
17D1 9E30             (gshell_beta5_yak.):03708                  ldx   FTBLSPTR   Get ptr to start of file table
17D3 2008             (gshell_beta5_yak.):03709                  bra   UPDFITB2   Update table icon positions again
                      (gshell_beta5_yak.):03710         
17D5 3410             (gshell_beta5_yak.):03711         UPDFITB1 pshs  X          Save file table entry ptr
17D7 8DB2             (gshell_beta5_yak.):03712                  bsr   ICNXYSET   Calc/save X,Y coords for current file block, and where next icon will go to
17D9 3262             (gshell_beta5_yak.):03713                  leas  2,S
17DB AE0A             (gshell_beta5_yak.):03714                  ldx   FL.LINK,X  Get ptr to next file table entry
17DD 26F6             (gshell_beta5_yak.):03715         UPDFITB2 bne   UPDFITB1   There is one, go fix it's coords
17DF 39               (gshell_beta5_yak.):03716                  rts              Done them all, return
                      (gshell_beta5_yak.):03717         
                      (gshell_beta5_yak.):03718         * Reset next positions for icons to upper left corner
17E0 DC17             (gshell_beta5_yak.):03719         RSTXYPTR ldd   STRTXPOS
17E2 DD3D             (gshell_beta5_yak.):03720                  std   NEXTXPOS
17E4 DC05             (gshell_beta5_yak.):03721                  ldd   STRTYPOS
17E6 DD3F             (gshell_beta5_yak.):03722                  std   NEXTYPOS
17E8 39               (gshell_beta5_yak.):03723                  rts   
                      (gshell_beta5_yak.):03724         
                      (gshell_beta5_yak.):03725         * FILE menu - Sort option
17E9 170A2D           (gshell_beta5_yak.):03726         FLSORT   lbsr  SUREBOX6
17EC ED7E             (gshell_beta5_yak.):03727                  std   -2,S
17EE 2715             (gshell_beta5_yak.):03728                  beq   FLSORT1
                      (gshell_beta5_yak.):03729                IFNE  H6309
                      (gshell_beta5_yak.):03730                  clrd  
                      (gshell_beta5_yak.):03731                ELSE
17F0 4F               (gshell_beta5_yak.):03732                  clra
17F1 5F               (gshell_beta5_yak.):03733                  clrb
                      (gshell_beta5_yak.):03734                ENDC
17F2 3406             (gshell_beta5_yak.):03735                  pshs  d
17F4 3406             (gshell_beta5_yak.):03736                  pshs  d          No parameter for program
17F6 3406             (gshell_beta5_yak.):03737                  pshs  d          No overlay window
17F8 308C0D           (gshell_beta5_yak.):03738                  leax  <GSORTNAM,PC Save primary module name ptr
17FB 3410             (gshell_beta5_yak.):03739                  pshs  X
17FD 17086F           (gshell_beta5_yak.):03740                  lbsr  EXECPRGM   Execute GSORT without overlay window (does it's own)
1800 3268             (gshell_beta5_yak.):03741                  leas  8,S
1802 17EF6D           (gshell_beta5_yak.):03742                  lbsr  DONEWDIR
1805 1600F1           (gshell_beta5_yak.):03743         FLSORT1  lbra  FILSEXIT
                      (gshell_beta5_yak.):03744         
1808 67736F7274       (gshell_beta5_yak.):03745         GSORTNAM fcc   "gsort"
180D 00               (gshell_beta5_yak.):03746                  fcb   NUL
                      (gshell_beta5_yak.):03747         
180E 64656C646972     (gshell_beta5_yak.):03748         DELDIRNM fcc   "deldir"
1814 00               (gshell_beta5_yak.):03749                  fcb   NUL
                      (gshell_beta5_yak.):03750         
1815 43616E2774206465 (gshell_beta5_yak.):03751         CANTDELT fcc   "Can't delete "
     6C65746520
1822 2200             (gshell_beta5_yak.):03752                  fcb   '",NUL
                      (gshell_beta5_yak.):03753         
                      (gshell_beta5_yak.):03754         * FILE menu, Delete option (Trash entry a little further in. NOTE: Use this
                      (gshell_beta5_yak.):03755         *  as the basis for the PRINT option)
1824 1709F2           (gshell_beta5_yak.):03756         FLDELETE lbsr  SUREBOX6   Ask user if he/she is sure they want to delete
1827 ED7E             (gshell_beta5_yak.):03757                  std   -2,S
1829 102700CC         (gshell_beta5_yak.):03758                  lbeq  FILSEXIT   Said no, don't delete
182D E648             (gshell_beta5_yak.):03759         FLTRASH  ldb   FL.ICONO,U Get icon buffer number for file to delete
182F C102             (gshell_beta5_yak.):03760                  cmpb  #IC.FOLDR  Is it a folder (directory)?
1831 2617             (gshell_beta5_yak.):03761                  bne   NOTADIR    No, skip ahead
1833 4F               (gshell_beta5_yak.):03762                  clra             Call DELDIR to delete a directory
1834 5F               (gshell_beta5_yak.):03763                  clrb  
1835 3406             (gshell_beta5_yak.):03764                  pshs  d
1837 AE4C             (gshell_beta5_yak.):03765                  ldx   FL.FNAME,U
1839 5C               (gshell_beta5_yak.):03766                  incb  
183A 3416             (gshell_beta5_yak.):03767                  pshs  d,X
183C 308CCF           (gshell_beta5_yak.):03768                  leax  <DELDIRNM,PC  Point to DELDIR
183F 3410             (gshell_beta5_yak.):03769                  pshs  X
1841 17082B           (gshell_beta5_yak.):03770                  lbsr  EXECPRGM      Call DELDIR
1844 3268             (gshell_beta5_yak.):03771                  leas  8,S
1846 ED64             (gshell_beta5_yak.):03772         FLDELET1 std   4,S
1848 202E             (gshell_beta5_yak.):03773                  bra   FLDELET3
                      (gshell_beta5_yak.):03774         
                      (gshell_beta5_yak.):03775         * Not a dir, delete a normal file
184A 3440             (gshell_beta5_yak.):03776         NOTADIR  pshs  U
184C 17021E           (gshell_beta5_yak.):03777                  lbsr  GETFLPTR   Get ptr to filename
184F EDE4             (gshell_beta5_yak.):03778                  std   ,S
1851 171BA9           (gshell_beta5_yak.):03779                  lbsr  I.DELETE
1854 3262             (gshell_beta5_yak.):03780                  leas  2,S
1856 ED64             (gshell_beta5_yak.):03781                  std   4,S
1858 271E             (gshell_beta5_yak.):03782                  beq   FLDELET3
185A ECA9044D         (gshell_beta5_yak.):03783                  ldd   ERRNO,Y
185E C1D8             (gshell_beta5_yak.):03784                  cmpb  #E$PNNF
1860 2604             (gshell_beta5_yak.):03785                  bne   FLDELET2
1862 4F               (gshell_beta5_yak.):03786                  clra  
1863 5F               (gshell_beta5_yak.):03787                  clrb  
1864 20E0             (gshell_beta5_yak.):03788                  bra   FLDELET1
                      (gshell_beta5_yak.):03789         
1866 AEA9044D         (gshell_beta5_yak.):03790         FLDELET2 ldx   ERRNO,Y
186A EC4C             (gshell_beta5_yak.):03791                  ldd   FL.FNAME,U
186C 3416             (gshell_beta5_yak.):03792                  pshs  d,X
186E 308CA4           (gshell_beta5_yak.):03793                  leax  <CANTDELT,PC
1871 3410             (gshell_beta5_yak.):03794                  pshs  X
1873 17F990           (gshell_beta5_yak.):03795                  lbsr  BUILDMSG
1876 3266             (gshell_beta5_yak.):03796                  leas  6,S
1878 EC64             (gshell_beta5_yak.):03797         FLDELET3 ldd   4,S
187A 267D             (gshell_beta5_yak.):03798                  bne   FILSEXIT
187C 3440             (gshell_beta5_yak.):03799                  pshs  U
187E 17FEBB           (gshell_beta5_yak.):03800                  lbsr  RMVFICON
1881 3262             (gshell_beta5_yak.):03801                  leas  2,S
1883 4F               (gshell_beta5_yak.):03802                  clra  
1884 5F               (gshell_beta5_yak.):03803                  clrb  
1885 DD34             (gshell_beta5_yak.):03804                  std   SELECTED
1887 17FF45           (gshell_beta5_yak.):03805                  lbsr  UPDFITBL
188A EC48             (gshell_beta5_yak.):03806                  ldd   FL.ICONO,U
188C 8106             (gshell_beta5_yak.):03807                  cmpa  #IC.AIF.F
188E 2624             (gshell_beta5_yak.):03808                  bne   FLDELET9
1890 9E30             (gshell_beta5_yak.):03809                  ldx   FTBLSPTR
1892 270E             (gshell_beta5_yak.):03810                  beq   FLDELET6
1894 8601             (gshell_beta5_yak.):03811                  lda   #IC.TEXT
1896 E109             (gshell_beta5_yak.):03812         FLDELET4 cmpb  FL.AIFNO,X
1898 2604             (gshell_beta5_yak.):03813                  bne   FLDELET5
189A 6F09             (gshell_beta5_yak.):03814                  clr   FL.AIFNO,X
189C A708             (gshell_beta5_yak.):03815                  sta   FL.ICONO,X
189E AE0A             (gshell_beta5_yak.):03816         FLDELET5 ldx   FL.LINK,X
18A0 26F4             (gshell_beta5_yak.):03817                  bne   FLDELET4
18A2 9E11             (gshell_beta5_yak.):03818         FLDELET6 ldx   IDSCSPTR     Get ptr to start of icon descriptor table
18A4 E101             (gshell_beta5_yak.):03819         FLDELET7 cmpb  ID.NUMBR,X   Same entry #?
                      (gshell_beta5_yak.):03820         *FLDELET7 cmpb  ID.NUMBR+1,X   Same entry #?
18A6 2607             (gshell_beta5_yak.):03821                  bne   FLDELET8
18A8 AE8810           (gshell_beta5_yak.):03822                  ldx   ID.XXXPT,X
18AB 6F84             (gshell_beta5_yak.):03823                  clr   ,X
18AD 2005             (gshell_beta5_yak.):03824                  bra   FLDELET9
                      (gshell_beta5_yak.):03825         
18AF AE8814           (gshell_beta5_yak.):03826         FLDELET8 ldx   ID.LINK,X
18B2 26F0             (gshell_beta5_yak.):03827                  bne   FLDELET7
18B4                  (gshell_beta5_yak.):03828         FLDELET9       
18B4 17EED9           (gshell_beta5_yak.):03829         FLCOPYEX lbsr  DRAWSCRN
18B7 2040             (gshell_beta5_yak.):03830                  bra   FILSEXIT
                      (gshell_beta5_yak.):03831         
                      (gshell_beta5_yak.):03832         * FILE menu, Quit option
18B9 170549           (gshell_beta5_yak.):03833         FLQUIT   lbsr  SUREQUI3   Ask user if they are sure
18BC 203B             (gshell_beta5_yak.):03834                  bra   FILSEXIT
                      (gshell_beta5_yak.):03835         
                      (gshell_beta5_yak.):03836         * FILES menu
                      (gshell_beta5_yak.):03837         * Entry: 0-1,s = RTS address
                      (gshell_beta5_yak.):03838         *        2-3,s = Menu option #
18BE 3440             (gshell_beta5_yak.):03839         FILESLCT pshs  U          Save U
18C0 3278             (gshell_beta5_yak.):03840                  leas  -8,S       Make temp buff on stack
18C2 DE34             (gshell_beta5_yak.):03841                  ldu   SELECTED   Get ptr to icon table entry currently selected
18C4 E66D             (gshell_beta5_yak.):03842                  ldb   12+1,S     Get FILES menu item # (only uses lower 8 bits)
18C6 5A               (gshell_beta5_yak.):03843                  decb  
18C7 2734             (gshell_beta5_yak.):03844                  beq   FLOPEN     1=Open
18C9 5A               (gshell_beta5_yak.):03845                  decb  
18CA 102700B4         (gshell_beta5_yak.):03846                  lbeq  FLLIST     2=List
18CE 5A               (gshell_beta5_yak.):03847                  decb  
18CF 102700C5         (gshell_beta5_yak.):03848                  lbeq  FLCOPY     3=Copy
18D3 5A               (gshell_beta5_yak.):03849                  decb  
18D4 1027010E         (gshell_beta5_yak.):03850                  lbeq  FLSTAT     4=Stat
18D8 5A               (gshell_beta5_yak.):03851                  decb  
18D9 10270122         (gshell_beta5_yak.):03852                  lbeq  FLPRINT    5=Print
18DD 5A               (gshell_beta5_yak.):03853                  decb  
18DE 1027012B         (gshell_beta5_yak.):03854                  lbeq  FLRENAME   6=Rename
18E2 5A               (gshell_beta5_yak.):03855                  decb  
18E3 1027FF3D         (gshell_beta5_yak.):03856                  lbeq  FLDELETE   7=Delete (with prompt)
18E7 5A               (gshell_beta5_yak.):03857                  decb  
18E8 10270080         (gshell_beta5_yak.):03858                  lbeq  FLDUMP     8=Dump
18EC 5A               (gshell_beta5_yak.):03859                  decb
18ED 1027FEF8         (gshell_beta5_yak.):03860                  lbeq  FLSORT     9=Sort
18F1 5A               (gshell_beta5_yak.):03861                  decb  
18F2 27C5             (gshell_beta5_yak.):03862                  beq   FLQUIT     10=Quit
18F4 5A               (gshell_beta5_yak.):03863                  decb  
18F5 1027FF34         (gshell_beta5_yak.):03864                  lbeq  FLTRASH    11=Trash (delete with no prompt)
18F9 3268             (gshell_beta5_yak.):03865         FILSEXIT leas  8,S
18FB 35C0             (gshell_beta5_yak.):03866                  puls  U,PC
                      (gshell_beta5_yak.):03867         
                      (gshell_beta5_yak.):03868         * File menu - OPEN option
18FD E648             (gshell_beta5_yak.):03869         FLOPEN   ldb   FL.ICONO,U Get icon type
18FF C106             (gshell_beta5_yak.):03870                  cmpb  #IC.AIF.F  Is it a one shot AIF file?
1901 270F             (gshell_beta5_yak.):03871                  beq   FLOPNAIF   Yes, open as an AIF file
1903 C102             (gshell_beta5_yak.):03872                  cmpb  #IC.FOLDR  Is it a folder/directory?
1905 2712             (gshell_beta5_yak.):03873                  beq   FLOPFLDR   Yes, switch to that sub-directory
1907 C107             (gshell_beta5_yak.):03874                  cmpb  #IC.F.XXX  Is it a file that matches a previous AIF extension?
1909 2619             (gshell_beta5_yak.):03875                  bne   FLOPRGRM   No, treat as an executable
190B 3440             (gshell_beta5_yak.):03876                  pshs  U          Save file info ptr
190D 17EC21           (gshell_beta5_yak.):03877                  lbsr  EXEC.XXX   Do the AIF match thing
1910 200E             (gshell_beta5_yak.):03878                  bra   FLEXHOOK
                      (gshell_beta5_yak.):03879         
                      (gshell_beta5_yak.):03880         * File menu - OPEN for a one-shot AIF file
1912 3440             (gshell_beta5_yak.):03881         FLOPNAIF pshs  U          Save file info ptr
1914 17EC3A           (gshell_beta5_yak.):03882                  lbsr  EXECAIF    Execute using AIF stuff
1917 2007             (gshell_beta5_yak.):03883                  bra   FLEXHOOK
                      (gshell_beta5_yak.):03884         
                      (gshell_beta5_yak.):03885         * File menu - OPEN for a folder (directory)
1919 EC4C             (gshell_beta5_yak.):03886         FLOPFLDR ldd   FL.FNAME,U Get ptr to directory name
191B 3406             (gshell_beta5_yak.):03887                  pshs  d
191D 17EC67           (gshell_beta5_yak.):03888                  lbsr  OPENFLDR   Change to sub-directory
1920 3262             (gshell_beta5_yak.):03889         FLEXHOOK leas  2,S        Eat temp stack & exit
1922 20D5             (gshell_beta5_yak.):03890                  bra   FILSEXIT
                      (gshell_beta5_yak.):03891         
                      (gshell_beta5_yak.):03892         * File menu - OPEN for an executable program: 
1924 EC4C             (gshell_beta5_yak.):03893         FLOPRGRM ldd   FL.FNAME,U Get ptr to filename to execute
1926 3406             (gshell_beta5_yak.):03894                  pshs  d
                      (gshell_beta5_yak.):03895         * 6809/6309 - skip putting slash on stack for strcat, and just append manually. Can eliminate
                      (gshell_beta5_yak.):03896         * SLASH byte then, too. Also note that STRCAT & STRCPY manually scans the destination string for the
                      (gshell_beta5_yak.):03897         * NUL position each time they are called. They also preserve X (src)/U (dest)registers, so we don't
                      (gshell_beta5_yak.):03898         * get those back. So we would likely make a new version of these routines that let the destination
                      (gshell_beta5_yak.):03899         * ptr get returned, so we can continue from there.
1928 308C3F           (gshell_beta5_yak.):03900                  leax  <SLASH,PC  Point to a slash
192B 3410             (gshell_beta5_yak.):03901                  pshs  X
192D 8E0471           (gshell_beta5_yak.):03902                  ldx   #DDIRNAME  Point to current full path name
1930 3410             (gshell_beta5_yak.):03903                  pshs  X
1932 8E0F3F           (gshell_beta5_yak.):03904                  ldx   #MULTIBFR  Place to store path & filename
1935 3410             (gshell_beta5_yak.):03905                  pshs  X
1937 171AE3           (gshell_beta5_yak.):03906                  lbsr  STRCPY     Copy pathname to temp buffer
193A 3264             (gshell_beta5_yak.):03907                  leas  4,S
193C 3406             (gshell_beta5_yak.):03908                  pshs  d          Save ptr to start of MULTIBFR
193E 171AEC           (gshell_beta5_yak.):03909                  lbsr  STRCAT     Add slash (NOTE: DO MANUALLY!)
1941 3264             (gshell_beta5_yak.):03910                  leas  4,S
1943 3406             (gshell_beta5_yak.):03911                  pshs  d          Save ptr to start of MULTIBFR
1945 171AE5           (gshell_beta5_yak.):03912                  lbsr  STRCAT     Add filename of program to execute
1948 3264             (gshell_beta5_yak.):03913                  leas  4,S
194A EC4C             (gshell_beta5_yak.):03914                  ldd   FL.FNAME,U Point to filename (for get params prompt)
194C 3406             (gshell_beta5_yak.):03915                  pshs  d
194E 17EB9B           (gshell_beta5_yak.):03916                  lbsr  GETPARMS   Prompt & get any params needed from user
1951 3262             (gshell_beta5_yak.):03917                  leas  2,S
1953 ED62             (gshell_beta5_yak.):03918                  std   2,S
1955 CC0001           (gshell_beta5_yak.):03919                  ldd   #1         We want overlay window to run program in flag
1958 3406             (gshell_beta5_yak.):03920                  pshs  d
195A AE64             (gshell_beta5_yak.):03921                  ldx   4,S
195C 3416             (gshell_beta5_yak.):03922                  pshs  d,X
195E 8E0F3F           (gshell_beta5_yak.):03923                  ldx   #MULTIBFR  Point to new filename path
1961 3410             (gshell_beta5_yak.):03924         FLEXEC   pshs  X
1963 170709           (gshell_beta5_yak.):03925                  lbsr  EXECPRGM   Fork that program in an overlay window
1966 3268             (gshell_beta5_yak.):03926                  leas  8,S
1968 208F             (gshell_beta5_yak.):03927         FILSEXT2 bra   FILSEXIT
                      (gshell_beta5_yak.):03928         
196A 2F               (gshell_beta5_yak.):03929         SLASH    fcc   "/"
196B 00               (gshell_beta5_yak.):03930                  fcb   NUL
                      (gshell_beta5_yak.):03931         
                      (gshell_beta5_yak.):03932         * File menu - DUMP option
196C CC0001           (gshell_beta5_yak.):03933         FLDUMP   ldd   #1
196F 3406             (gshell_beta5_yak.):03934                  pshs  d
1971 3440             (gshell_beta5_yak.):03935                  pshs  U
1973 1700F7           (gshell_beta5_yak.):03936                  lbsr  GETFLPTR   Get ptr to filename we want to list
                      (gshell_beta5_yak.):03937         * 6809/6309 - shrink these routines by doing ldx #<NAMEPTR>, then BRA RUNOVRLY. RUNOVRLY
                      (gshell_beta5_yak.):03938         *   will be at STD ,s below
1976 8E0372           (gshell_beta5_yak.):03939                  ldx   #DUMPNAM   Point to 'DUMP '
1979 EDE4             (gshell_beta5_yak.):03940         RUNOVRLY std   ,s         Save ptr to filename
197B CC8001           (gshell_beta5_yak.):03941                  ldd   #$8001     Flag that we want to run LIST in an overlay window with 8x8 font
197E 3406             (gshell_beta5_yak.):03942                  pshs  d
1980 20DF             (gshell_beta5_yak.):03943                  bra   FLEXEC     Fork program in the overlay window
                      (gshell_beta5_yak.):03944         
                      (gshell_beta5_yak.):03945         * File menu - LIST option
1982 CC0001           (gshell_beta5_yak.):03946         FLLIST   ldd   #1
1985 3406             (gshell_beta5_yak.):03947                  pshs  d
1987 3440             (gshell_beta5_yak.):03948                  pshs  U
1989 1700E1           (gshell_beta5_yak.):03949                  lbsr  GETFLPTR   Get ptr to filename we want to list (into D)
198C 8E033A           (gshell_beta5_yak.):03950                  ldx   #LISTNAM   Point to 'LIST '
198F EDE4             (gshell_beta5_yak.):03951         RUNOVRL2 std   ,s         Save ptr to filename
1991 CC0001           (gshell_beta5_yak.):03952                  ldd   #0001     Flag that we want to run LIST in an overlay window with 6x8 font
1994 3406             (gshell_beta5_yak.):03953                  pshs  d
1996 20C9             (gshell_beta5_yak.):03954                  bra   FLEXEC     Fork program in the overlay window
                      (gshell_beta5_yak.):03955         
                      (gshell_beta5_yak.):03956         * File menu - COPY option
1998 8E0425           (gshell_beta5_yak.):03957         FLCOPY   ldx   #NEWNMSG   Point to 'new name:'
199B 3410             (gshell_beta5_yak.):03958                  pshs  X
199D 170B0D           (gshell_beta5_yak.):03959                  lbsr  INPTSCRN   Prompt for destination path for copy
19A0 ED64             (gshell_beta5_yak.):03960                  std   4,S
                      (gshell_beta5_yak.):03961         * was BEQ before attempted dump/stat font change
19A2 1027FF7A         (gshell_beta5_yak.):03962                  lbeq   FLEXHOOK   User just hit <ENTER>, abort copy
19A6 EDE4             (gshell_beta5_yak.):03963                  std   ,S         Save ptr to string we are inserting in front of
19A8 17FBF9           (gshell_beta5_yak.):03964                  lbsr  STPREFIX   Insert original filename to copy (?)
19AB 4F               (gshell_beta5_yak.):03965                  clra  
19AC 5F               (gshell_beta5_yak.):03966                  clrb  
19AD EDE4             (gshell_beta5_yak.):03967                  std   ,S
19AF 3440             (gshell_beta5_yak.):03968                  pshs  U
19B1 1700B9           (gshell_beta5_yak.):03969                  lbsr  GETFLPTR   Get ptr to filename we want to copy
19B4 EDE4             (gshell_beta5_yak.):03970                  std   ,S
19B6 4F               (gshell_beta5_yak.):03971                  clra             No overlay window for COPY command
19B7 5F               (gshell_beta5_yak.):03972                  clrb  
19B8 3406             (gshell_beta5_yak.):03973                  pshs  d
19BA 308C37           (gshell_beta5_yak.):03974                  leax  <COPYNAME,PC
19BD 3410             (gshell_beta5_yak.):03975                  pshs  X
19BF 1706AD           (gshell_beta5_yak.):03976                  lbsr  EXECPRGM   Execute COPY program
19C2 3268             (gshell_beta5_yak.):03977                  leas  8,S
19C4 ED7E             (gshell_beta5_yak.):03978                  std   -2,S
19C6 26A0             (gshell_beta5_yak.):03979                  bne   FILSEXT2
19C8 EC62             (gshell_beta5_yak.):03980                  ldd   2,S
19CA 3406             (gshell_beta5_yak.):03981                  pshs  d
19CC 1700DF           (gshell_beta5_yak.):03982                  lbsr  INOURDIR
19CF 3262             (gshell_beta5_yak.):03983                  leas  2,S
19D1 ED62             (gshell_beta5_yak.):03984                  std   2,S
19D3 2793             (gshell_beta5_yak.):03985                  beq   FILSEXT2
19D5 E648             (gshell_beta5_yak.):03986                  ldb   FL.ICONO,U
19D7 1D               (gshell_beta5_yak.):03987                  sex   
19D8 3406             (gshell_beta5_yak.):03988                  pshs  d
19DA EC64             (gshell_beta5_yak.):03989                  ldd   4,S
19DC 3406             (gshell_beta5_yak.):03990                  pshs  d
19DE 17FCBA           (gshell_beta5_yak.):03991                  lbsr  ADDFICON
19E1 3264             (gshell_beta5_yak.):03992                  leas  4,S
19E3 16FECE           (gshell_beta5_yak.):03993                  lbra  FLCOPYEX
                      (gshell_beta5_yak.):03994         
                      (gshell_beta5_yak.):03995         * File menu - FSTAT option
19E6 CC0001           (gshell_beta5_yak.):03996         FLSTAT   ldd   #1
19E9 3406             (gshell_beta5_yak.):03997                  pshs  d
19EB 3440             (gshell_beta5_yak.):03998                  pshs  U
19ED 8D7E             (gshell_beta5_yak.):03999                  bsr   GETFLPTR    Get ptr to filename we are FSTATing (into D)
19EF 308C07           (gshell_beta5_yak.):04000                  leax  <FSTATNAM,pc  Point to 'fstat'
19F2 2085             (gshell_beta5_yak.):04001                  bra   RUNOVRLY    Run it in overlay window with 8x8 font
                      (gshell_beta5_yak.):04002                  
19F4 636F7079         (gshell_beta5_yak.):04003         COPYNAME fcc   "copy"
19F8 00               (gshell_beta5_yak.):04004                  fcb   NUL
                      (gshell_beta5_yak.):04005         
19F9 6673746174       (gshell_beta5_yak.):04006         FSTATNAM fcc   "fstat"
19FE 00               (gshell_beta5_yak.):04007                  fcb   NUL
                      (gshell_beta5_yak.):04008         
                      (gshell_beta5_yak.):04009         * File menu - PRINT option - NOTE: ADD PRINT ICON CALL TO HERE
19FF CC0001           (gshell_beta5_yak.):04010         FLPRINT  ldd   #1
1A02 3406             (gshell_beta5_yak.):04011                  pshs  d
1A04 3440             (gshell_beta5_yak.):04012                  pshs  U
1A06 8D65             (gshell_beta5_yak.):04013                  bsr   GETFLPTR   Get ptr to file to print (into D)
1A08 8E036B           (gshell_beta5_yak.):04014                  ldx   #COCPRNM   Point to 'cocopr'
1A0B 2082             (gshell_beta5_yak.):04015                  bra   RUNOVRL2   Run it in overlay window with 6x8 font
                      (gshell_beta5_yak.):04016         
                      (gshell_beta5_yak.):04017         * File menu - RENAME option - patch to not allow DIRSIG to trigger needlessly
                      (gshell_beta5_yak.):04018         * Need to change to be 22 chars wide active area (enough for 29 char filename in 6
                      (gshell_beta5_yak.):04019         *   pixel font), use SCF preload SetStat to preload buffer, and add extra line or 2
                      (gshell_beta5_yak.):04020         *   height to give brief directions ("Edit with (shift/ctrl) arrow keys")
1A0D 8E0425           (gshell_beta5_yak.):04021         FLRENAME ldx   #NEWNMSG   Prompt user for new filename
1A10 3410             (gshell_beta5_yak.):04022                  pshs  X
1A12 170A98           (gshell_beta5_yak.):04023                  lbsr  INPTSCRN
1A15 ED64             (gshell_beta5_yak.):04024                  std   4,S        Save ptr to new filename
1A17 274A             (gshell_beta5_yak.):04025                  beq   FLRENAM1   User hit <ENTER>, abort rename
1A19 EDE4             (gshell_beta5_yak.):04026                  std   ,S
1A1B 17FB86           (gshell_beta5_yak.):04027                  lbsr  STPREFIX
1A1E 4F               (gshell_beta5_yak.):04028                  clra  
1A1F 5F               (gshell_beta5_yak.):04029                  clrb  
1A20 EDE4             (gshell_beta5_yak.):04030                  std   ,S
1A22 3440             (gshell_beta5_yak.):04031                  pshs  U
1A24 8D47             (gshell_beta5_yak.):04032                  bsr   GETFLPTR   Get ptr to filename of original filename to rename
1A26 EDE4             (gshell_beta5_yak.):04033                  std   ,S
                      (gshell_beta5_yak.):04034         * If Dirup <>0, leave RECDSGNL/Dirup alone (another process has updated DIR)
                      (gshell_beta5_yak.):04035         * If Dirup=0, we want to wipe out RECDSGNL & Dirup right after Fork comes back
                      (gshell_beta5_yak.):04036         * before we exit this routine.
1A28 B6136A           (gshell_beta5_yak.):04037                  lda   Dirup      Any directory update signal?
1A2B B7136B           (gshell_beta5_yak.):04038                  sta   RenFlag    Save it (irregardless)
1A2E 4F               (gshell_beta5_yak.):04039                  clra             No overlay window for RENAME
1A2F 5F               (gshell_beta5_yak.):04040                  clrb  
1A30 3406             (gshell_beta5_yak.):04041                  pshs  d
1A32 308C31           (gshell_beta5_yak.):04042                  leax  <RENAMENM,PC Rename the file
1A35 3410             (gshell_beta5_yak.):04043                  pshs  X
1A37 170635           (gshell_beta5_yak.):04044                  lbsr  EXECPRGM   Call RENAME
1A3A 3268             (gshell_beta5_yak.):04045                  leas  8,S
1A3C ED7E             (gshell_beta5_yak.):04046                  std   -2,S
1A3E 1026FEB7         (gshell_beta5_yak.):04047                  lbne  FILSEXIT
1A42 B6136B           (gshell_beta5_yak.):04048                  lda   RenFlag    Was their a dir update originally?
1A45 2605             (gshell_beta5_yak.):04049                  bne   SkipSigC   Yes, leave signal stuff alone
1A47 B7136A           (gshell_beta5_yak.):04050                  sta   Dirup      Clear queued dir update signal flag (rename triggered it)
1A4A 971D             (gshell_beta5_yak.):04051                  sta   RECDSGNL+1 Clear signal copy as well
1A4C 3440             (gshell_beta5_yak.):04052         SkipSigC pshs  U
1A4E 17F008           (gshell_beta5_yak.):04053                  lbsr  ERASFNAM   Erase the original filename from the screen
1A51 EC64             (gshell_beta5_yak.):04054                  ldd   4,S
1A53 EDE4             (gshell_beta5_yak.):04055                  std   ,S
1A55 3440             (gshell_beta5_yak.):04056                  pshs  U
1A57 17FC8F           (gshell_beta5_yak.):04057                  lbsr  RPLFICON   Update the file table entry for the new name
1A5A 3264             (gshell_beta5_yak.):04058                  leas  4,S
1A5C DD34             (gshell_beta5_yak.):04059                  std   SELECTED
1A5E 3406             (gshell_beta5_yak.):04060                  pshs  d
1A60 17EFC3           (gshell_beta5_yak.):04061                  lbsr  WRITFNAM   Write the new filename on the screen
1A63 16FEBA           (gshell_beta5_yak.):04062         FLRENAM1 lbra  FLEXHOOK
                      (gshell_beta5_yak.):04063         
1A66 72656E616D65     (gshell_beta5_yak.):04064         RENAMENM fcc   "rename"
1A6C 00               (gshell_beta5_yak.):04065                  fcb   NUL
                      (gshell_beta5_yak.):04066         
                      (gshell_beta5_yak.):04067         * Get ptr to filename
                      (gshell_beta5_yak.):04068         * Entry: 0-1,s = RTS address
                      (gshell_beta5_yak.):04069         *        2-3,s = Ptr to file table entry for current file
1A6D AE62             (gshell_beta5_yak.):04070         GETFLPTR ldx   2,S        Get ptr to file table entry
1A6F E608             (gshell_beta5_yak.):04071                  ldb   FL.ICONO,X Get icon type
1A71 C106             (gshell_beta5_yak.):04072                  cmpb  #IC.AIF.F  Is it a one shot AIF type?
1A73 2607             (gshell_beta5_yak.):04073                  bne   GETFLPT1   No, skip ahead
1A75 3410             (gshell_beta5_yak.):04074                  pshs  X          Save ptr to file table entry
1A77 8D06             (gshell_beta5_yak.):04075                  bsr   FPTR.XXX   Generate AIF.xxx filename, return with ptr to it
1A79 3262             (gshell_beta5_yak.):04076                  leas  2,S
1A7B 39               (gshell_beta5_yak.):04077                  rts   
                      (gshell_beta5_yak.):04078         
                      (gshell_beta5_yak.):04079         * Non AIF one-shot
1A7C EC0C             (gshell_beta5_yak.):04080         GETFLPT1 ldd   FL.FNAME,X Get filename ptr & return
1A7E 39               (gshell_beta5_yak.):04081                  rts   
                      (gshell_beta5_yak.):04082         
                      (gshell_beta5_yak.):04083         * AIF one shot (need name of AIF itself, not program referenced in it)
1A7F 3440             (gshell_beta5_yak.):04084         FPTR.XXX pshs  U
1A81 338DF3FC         (gshell_beta5_yak.):04085                  leau  AIF.NAME,PC Point to 'aif'
1A85 8E119F           (gshell_beta5_yak.):04086                  ldx   #AIFNMBFR  Point to buffer to build AIF.xxx filename
1A88 3450             (gshell_beta5_yak.):04087                  pshs  X,U
1A8A 171990           (gshell_beta5_yak.):04088                  lbsr  STRCPY     Copy 'aif' into buffer
1A8D 3264             (gshell_beta5_yak.):04089                  leas  4,S
1A8F EE64             (gshell_beta5_yak.):04090                  ldu   4,S
1A91 4F               (gshell_beta5_yak.):04091                  clra  
1A92 E649             (gshell_beta5_yak.):04092                  ldb   FL.AIFNO,U Get entry # into ID.* table
1A94 3406             (gshell_beta5_yak.):04093                  pshs  d
1A96 17F601           (gshell_beta5_yak.):04094                  lbsr  FNDIDESC   Go find the right entry
1A99 1F03             (gshell_beta5_yak.):04095                  tfr   D,U
1A9B EDE1             (gshell_beta5_yak.):04096                  std   ,S++
1A9D 270D             (gshell_beta5_yak.):04097                  beq   FPTRXXX1   None, skip ahead
1A9F EEC810           (gshell_beta5_yak.):04098                  ldu   ID.XXXPT,U Get ptr to ???
1AA2 8E119F           (gshell_beta5_yak.):04099                  ldx   #AIFNMBFR  Point to AIF buffer again
1AA5 3450             (gshell_beta5_yak.):04100                  pshs  X,U
1AA7 171983           (gshell_beta5_yak.):04101                  lbsr  STRCAT     append the 3 letter AIF code
1AAA 3264             (gshell_beta5_yak.):04102                  leas  4,S
1AAC 35C0             (gshell_beta5_yak.):04103         FPTRXXX1 puls  U,PC       Return with ptr to AIF.xxx filename
                      (gshell_beta5_yak.):04104         
1AAE 3440             (gshell_beta5_yak.):04105         INOURDIR pshs  U
1AB0 EE64             (gshell_beta5_yak.):04106                  ldu   4,S
1AB2 E6C4             (gshell_beta5_yak.):04107                  ldb   ,U
1AB4 C12F             (gshell_beta5_yak.):04108                  cmpb  #'/
1AB6 261C             (gshell_beta5_yak.):04109                  bne   INOURDI1
1AB8 3440             (gshell_beta5_yak.):04110                  pshs  U
1ABA 8D28             (gshell_beta5_yak.):04111                  bsr   TERMSLSH   Cut directory name off one dir. level earlier
1ABC EDE4             (gshell_beta5_yak.):04112                  std   ,S         Save ptr to end of new path
1ABE 8E0471           (gshell_beta5_yak.):04113                  ldx   #DDIRNAME
1AC1 3450             (gshell_beta5_yak.):04114                  pshs  X,U
1AC3 171973           (gshell_beta5_yak.):04115                  lbsr  STRCMP
1AC6 3264             (gshell_beta5_yak.):04116                  leas  4,S
1AC8 3510             (gshell_beta5_yak.):04117                  puls  X
1ACA ED7E             (gshell_beta5_yak.):04118                  std   -2,S
1ACC 260E             (gshell_beta5_yak.):04119                  bne   INOURDI2
1ACE 3001             (gshell_beta5_yak.):04120                  leax  1,X
1AD0 1F10             (gshell_beta5_yak.):04121                  tfr   X,D
1AD2 200E             (gshell_beta5_yak.):04122                  bra   INOURDI4
                      (gshell_beta5_yak.):04123         
1AD4 E6C0             (gshell_beta5_yak.):04124         INOURDI1 ldb   ,U+
1AD6 2708             (gshell_beta5_yak.):04125                  beq   INOURDI3
1AD8 C12F             (gshell_beta5_yak.):04126                  cmpb  #'/
1ADA 26F8             (gshell_beta5_yak.):04127                  bne   INOURDI1
1ADC 4F               (gshell_beta5_yak.):04128         INOURDI2 clra  
1ADD 5F               (gshell_beta5_yak.):04129                  clrb  
1ADE 35C0             (gshell_beta5_yak.):04130                  puls  U,PC
                      (gshell_beta5_yak.):04131         
1AE0 EC64             (gshell_beta5_yak.):04132         INOURDI3 ldd   4,S
1AE2 35C0             (gshell_beta5_yak.):04133         INOURDI4 puls  U,PC
                      (gshell_beta5_yak.):04134         
                      (gshell_beta5_yak.):04135         * Shorten string at [2,S] to end at the previous '/'
                      (gshell_beta5_yak.):04136         * Used to shorten directory paths by one directory level
                      (gshell_beta5_yak.):04137         * Exit: D=ptr to end of new pathname
1AE4 AE62             (gshell_beta5_yak.):04138         TERMSLSH ldx   2,S        Get ptr to pathname
1AE6 17192B           (gshell_beta5_yak.):04139                  lbsr  STREND1    Get end of string ptr into D
1AE9 E682             (gshell_beta5_yak.):04140         TERMSLS1 ldb   ,-X        Get previous char
1AEB C12F             (gshell_beta5_yak.):04141                  cmpb  #'/        Slash?
1AED 26FA             (gshell_beta5_yak.):04142                  bne   TERMSLS1   No, keep looking
1AEF AC62             (gshell_beta5_yak.):04143                  cmpx  2,S        Yes, are we at the beginning of the path again?
1AF1 2703             (gshell_beta5_yak.):04144                  beq   TERMSLS2   Yes, done
1AF3 5F               (gshell_beta5_yak.):04145                  clrb             Found previous dir, flag string end here
1AF4 E784             (gshell_beta5_yak.):04146                  stb   ,X
1AF6 1F10             (gshell_beta5_yak.):04147         TERMSLS2 tfr   X,D
1AF8 39               (gshell_beta5_yak.):04148                  rts   
                      (gshell_beta5_yak.):04149         
                      (gshell_beta5_yak.):04150         * FILE menu, Free option
1AF9 CC0001           (gshell_beta5_yak.):04151         DOFREE   ldd   #1         Do in an overlay window
1AFC 3406             (gshell_beta5_yak.):04152                  pshs  d
1AFE 9E36             (gshell_beta5_yak.):04153                  ldx   DEVICNOW   Get ptr to file entry for current device
1B00 AE0C             (gshell_beta5_yak.):04154                  ldx   FL.FNAME,X Get ptr to device name
1B02 3416             (gshell_beta5_yak.):04155                  pshs  d,X
1B04 308C02           (gshell_beta5_yak.):04156                  leax  <FREENAME,PC Fork FREE command on that drive
1B07 207B             (gshell_beta5_yak.):04157                  bra   FORKHOOK
                      (gshell_beta5_yak.):04158         
1B09 66726565         (gshell_beta5_yak.):04159         FREENAME fcc   "free"
1B0D 00               (gshell_beta5_yak.):04160                  fcb   NUL
                      (gshell_beta5_yak.):04161         
1B0E 20536F7572636520 (gshell_beta5_yak.):04162         SORCDEVC fcc   " Source device"
     646576696365
1B1C 0A00             (gshell_beta5_yak.):04163                  fcb   LF,NUL
                      (gshell_beta5_yak.):04164         
1B1E 20446573742E2064 (gshell_beta5_yak.):04165         DESTDEVC fcc   " Dest. device"
     6576696365
1B2B 0A00             (gshell_beta5_yak.):04166                  fcb   LF,NUL
                      (gshell_beta5_yak.):04167         
1B2D 6261636B7570     (gshell_beta5_yak.):04168         BACKUPNM fcc   "backup"
1B33 00               (gshell_beta5_yak.):04169                  fcb   NUL
                      (gshell_beta5_yak.):04170         
1B34 73               (gshell_beta5_yak.):04171         SNAME    fcc   "s"
1B35 00               (gshell_beta5_yak.):04172                  fcb   NUL
                      (gshell_beta5_yak.):04173         
                      (gshell_beta5_yak.):04174         * - Backup command - NOTE: SHOULD WE CHANGE THIS TO USE BRUCE ISTED'S STREAM?
1B36 308CD5           (gshell_beta5_yak.):04175         DOBACKUP leax  <SORCDEVC,PC Point to ' Source device'
1B39 3410             (gshell_beta5_yak.):04176                  pshs  X
1B3B 17012B           (gshell_beta5_yak.):04177                  lbsr  SLCTDEVC   Prompt user for source device to BACKUP
1B3E 1F03             (gshell_beta5_yak.):04178                  tfr   D,U
1B40 EFE1             (gshell_beta5_yak.):04179                  stu   ,S++
1B42 277B             (gshell_beta5_yak.):04180                  beq   DISKEXIT   User just hit <ENTER>, exit
1B44 308CD7           (gshell_beta5_yak.):04181                  leax  <DESTDEVC,PC Prompt user for destination device to BACKUP
1B47 3410             (gshell_beta5_yak.):04182                  pshs  X
1B49 17011D           (gshell_beta5_yak.):04183                  lbsr  SLCTDEVC
1B4C 3262             (gshell_beta5_yak.):04184                  leas  2,S
1B4E ED62             (gshell_beta5_yak.):04185                  std   2,S
1B50 276D             (gshell_beta5_yak.):04186                  beq   DISKEXIT   User just hit <ENTER>, exit
1B52 11A362           (gshell_beta5_yak.):04187                  cmpu  2,S        Same as source drive?
1B55 270B             (gshell_beta5_yak.):04188                  beq   SNGLDRIV   Yes, doing single drive backup
1B57 3406             (gshell_beta5_yak.):04189                  pshs  d
1B59 17FA48           (gshell_beta5_yak.):04190                  lbsr  STPREFIX   Append 
1B5C 3262             (gshell_beta5_yak.):04191                  leas  2,S
1B5E 4F               (gshell_beta5_yak.):04192                  clra             No overlay window (since will be automatic)
1B5F 5F               (gshell_beta5_yak.):04193                  clrb  
1B60 2003             (gshell_beta5_yak.):04194                  bra   TWODRIVE
                      (gshell_beta5_yak.):04195         
                      (gshell_beta5_yak.):04196         * Single drive backup
1B62 CC0001           (gshell_beta5_yak.):04197         SNGLDRIV ldd   #1         Need overlay window for disk swap prompts
1B65 EDE4             (gshell_beta5_yak.):04198         TWODRIVE std   ,S
1B67 3440             (gshell_beta5_yak.):04199                  pshs  U
1B69 17FA38           (gshell_beta5_yak.):04200                  lbsr  STPREFIX
1B6C CC0001           (gshell_beta5_yak.):04201                  ldd   #1
1B6F EDE4             (gshell_beta5_yak.):04202                  std   ,S
1B71 EC62             (gshell_beta5_yak.):04203                  ldd   2,S
1B73 2705             (gshell_beta5_yak.):04204                  beq   TWODRIV1
1B75 308CBC           (gshell_beta5_yak.):04205                  leax  <SNAME,PC
1B78 1F10             (gshell_beta5_yak.):04206                  tfr   X,D
1B7A 3406             (gshell_beta5_yak.):04207         TWODRIV1 pshs  d
1B7C CC0001           (gshell_beta5_yak.):04208                  ldd   #1
1B7F 3406             (gshell_beta5_yak.):04209                  pshs  d
1B81 308CA9           (gshell_beta5_yak.):04210                  leax  <BACKUPNM,PC
1B84 3410             (gshell_beta5_yak.):04211         FORKHOOK pshs  X
1B86 1704E6           (gshell_beta5_yak.):04212                  lbsr  EXECPRGM     Fork BACKUP
1B89 3268             (gshell_beta5_yak.):04213                  leas  8,S
1B8B 2032             (gshell_beta5_yak.):04214                  bra   DISKEXIT
                      (gshell_beta5_yak.):04215         
                      (gshell_beta5_yak.):04216         * Set Execution directory
1B8D 170557           (gshell_beta5_yak.):04217         DOSTEXEC lbsr  NOMOUSE    ++X25 Shut auto-follow AND mouse cursor off
1B90 1701D5           (gshell_beta5_yak.):04218                  lbsr  STEXCDVC
1B93 202A             (gshell_beta5_yak.):04219                  bra   DISKEXIT
                      (gshell_beta5_yak.):04220         
                      (gshell_beta5_yak.):04221         * Set Device
1B95 17054F           (gshell_beta5_yak.):04222         DOSETDVC lbsr  NOMOUSE    ++X25 Shut auto-follow AND mouse cursor off
1B98 171408           (gshell_beta5_yak.):04223                  lbsr  FIXDRTBL
1B9B 171434           (gshell_beta5_yak.):04224                  lbsr  CHGDEVCS
1B9E 17F116           (gshell_beta5_yak.):04225                  lbsr  UPDTDEVC
1BA1 201C             (gshell_beta5_yak.):04226                  bra   DISKEXIT
                      (gshell_beta5_yak.):04227         
                      (gshell_beta5_yak.):04228         * DISK MENU
1BA3 3440             (gshell_beta5_yak.):04229         DISKSLCT pshs  U
1BA5 327C             (gshell_beta5_yak.):04230                  leas  -4,S
1BA7 E669             (gshell_beta5_yak.):04231                  ldb   8+1,S      Get menu item # (only LSB needed)
1BA9 5A               (gshell_beta5_yak.):04232                  decb  
1BAA 1027FF4B         (gshell_beta5_yak.):04233                  lbeq  DOFREE     1=Free
1BAE 5A               (gshell_beta5_yak.):04234                  decb  
1BAF 2715             (gshell_beta5_yak.):04235                  beq   DONWFLDR   2=Create new folder (directory)
1BB1 5A               (gshell_beta5_yak.):04236                  decb  
1BB2 275E             (gshell_beta5_yak.):04237                  beq   DOFORMAT   3=Format disk
1BB4 5A               (gshell_beta5_yak.):04238                  decb  
1BB5 1027FF7D         (gshell_beta5_yak.):04239                  lbeq  DOBACKUP   4=Backup disk
1BB9 5A               (gshell_beta5_yak.):04240                  decb  
1BBA 27D1             (gshell_beta5_yak.):04241                  beq   DOSTEXEC   5=Set execution directory
1BBC 5A               (gshell_beta5_yak.):04242                  decb  
1BBD 27D6             (gshell_beta5_yak.):04243                  beq   DOSETDVC   6=Set data directory (drive)
1BBF 3264             (gshell_beta5_yak.):04244         DISKEXIT leas  4,S
1BC1 17052F           (gshell_beta5_yak.):04245                  lbsr  MOUSENOW   Turn mouse back on
1BC4 35C0             (gshell_beta5_yak.):04246                  puls  U,PC
                      (gshell_beta5_yak.):04247         
1BC6 17051E           (gshell_beta5_yak.):04248         DONWFLDR lbsr  NOMOUSE    Shut auto-follow AND mouse cursor off
1BC9 308C66           (gshell_beta5_yak.):04249                  leax  <FOLDRNAM,PC Ask for new folder name
1BCC 3410             (gshell_beta5_yak.):04250                  pshs  X
1BCE 1708DC           (gshell_beta5_yak.):04251                  lbsr  INPTSCRN
1BD1 1F03             (gshell_beta5_yak.):04252                  tfr   D,U
1BD3 EDE1             (gshell_beta5_yak.):04253                  std   ,S++
1BD5 27E8             (gshell_beta5_yak.):04254                  beq   DISKEXIT
1BD7 C62F             (gshell_beta5_yak.):04255                  ldb   #PEXEC.+PREAD.+EXEC.+UPDAT.
1BD9 3406             (gshell_beta5_yak.):04256                  pshs  d
1BDB 3440             (gshell_beta5_yak.):04257                  pshs  U
1BDD 171814           (gshell_beta5_yak.):04258                  lbsr  I.MAKDIR
1BE0 3264             (gshell_beta5_yak.):04259                  leas  4,S
1BE2 5D               (gshell_beta5_yak.):04260                  tstb  
1BE3 261B             (gshell_beta5_yak.):04261                  bne   DONWFLD1
1BE5 3440             (gshell_beta5_yak.):04262                  pshs  U
1BE7 17FEC4           (gshell_beta5_yak.):04263                  lbsr  INOURDIR
1BEA 1F03             (gshell_beta5_yak.):04264                  tfr   D,U
1BEC EFE1             (gshell_beta5_yak.):04265                  stu   ,S++
1BEE 27CF             (gshell_beta5_yak.):04266                  beq   DISKEXIT
1BF0 C602             (gshell_beta5_yak.):04267                  ldb   #IC.FOLDR
1BF2 3406             (gshell_beta5_yak.):04268                  pshs  d
1BF4 3440             (gshell_beta5_yak.):04269                  pshs  U
1BF6 17FAA2           (gshell_beta5_yak.):04270                  lbsr  ADDFICON
1BF9 3264             (gshell_beta5_yak.):04271                  leas  4,S
1BFB 17EB92           (gshell_beta5_yak.):04272                  lbsr  DRAWSCRN
1BFE 20BF             (gshell_beta5_yak.):04273                  bra   DISKEXIT
                      (gshell_beta5_yak.):04274         
1C00 ECA9044D         (gshell_beta5_yak.):04275         DONWFLD1 ldd   ERRNO,Y
1C04 3406             (gshell_beta5_yak.):04276                  pshs  d
1C06 308C3C           (gshell_beta5_yak.):04277                  leax  <CANTMAKE,PC
1C09 3450             (gshell_beta5_yak.):04278                  pshs  X,U
1C0B 17F5F8           (gshell_beta5_yak.):04279                  lbsr  BUILDMSG
1C0E 3266             (gshell_beta5_yak.):04280                  leas  6,S
1C10 20AD             (gshell_beta5_yak.):04281                  bra   DISKEXIT
                      (gshell_beta5_yak.):04282         
1C12 308C3D           (gshell_beta5_yak.):04283         DOFORMAT leax  <FMTDEVIC,PC
1C15 3410             (gshell_beta5_yak.):04284                  pshs  X
1C17 8D50             (gshell_beta5_yak.):04285                  bsr   SLCTDEVC
1C19 1F03             (gshell_beta5_yak.):04286                  tfr   D,U
1C1B EFE1             (gshell_beta5_yak.):04287                  stu   ,S++
1C1D 27A0             (gshell_beta5_yak.):04288                  beq   DISKEXIT
1C1F 1705F2           (gshell_beta5_yak.):04289                  lbsr  SUREBOX5
1C22 5D               (gshell_beta5_yak.):04290                  tstb  
1C23 279A             (gshell_beta5_yak.):04291                  beq   DISKEXIT
1C25 CC0001           (gshell_beta5_yak.):04292                  ldd   #1
1C28 3406             (gshell_beta5_yak.):04293                  pshs  d
1C2A 3446             (gshell_beta5_yak.):04294                  pshs  d,U
1C2C 308C33           (gshell_beta5_yak.):04295                  leax  <FORMATNM,PC
1C2F 16FF52           (gshell_beta5_yak.):04296                  lbra  FORKHOOK
                      (gshell_beta5_yak.):04297         
1C32 466F6C646572206E (gshell_beta5_yak.):04298         FOLDRNAM fcc   "Folder name:      "
     616D653A20202020
     2020
1C44 00               (gshell_beta5_yak.):04299                  fcb   NUL
                      (gshell_beta5_yak.):04300         
1C45 43616E2774206D61 (gshell_beta5_yak.):04301         CANTMAKE fcc   "Can't make "
     6B6520
1C50 2200             (gshell_beta5_yak.):04302                  fcb   '",NUL
                      (gshell_beta5_yak.):04303         
1C52 20466F726D617420 (gshell_beta5_yak.):04304         FMTDEVIC fcc   " Format device"
     646576696365
1C60 0A00             (gshell_beta5_yak.):04305                  fcb   LF,NUL
                      (gshell_beta5_yak.):04306         
1C62 666F726D6174     (gshell_beta5_yak.):04307         FORMATNM fcc   "format"
1C68 00               (gshell_beta5_yak.):04308                  fcb   NUL
                      (gshell_beta5_yak.):04309         
                      (gshell_beta5_yak.):04310         * Select a new drive
1C69 3440             (gshell_beta5_yak.):04311         SLCTDEVC pshs  U
1C6B 170479           (gshell_beta5_yak.):04312                  lbsr  NOMOUSE    Shut auto-follow AND mouse cursor off
1C6E 8E0671           (gshell_beta5_yak.):04313                  ldx   #MOUSPCKT
1C71 CC0008           (gshell_beta5_yak.):04314                  ldd   #8
1C74 DD5B             (gshell_beta5_yak.):04315                  std   BXOFFSET
1C76 5F               (gshell_beta5_yak.):04316                  clrb  
1C77 3416             (gshell_beta5_yak.):04317                  pshs  d,X
1C79 C603             (gshell_beta5_yak.):04318                  ldb   #3
1C7B 3416             (gshell_beta5_yak.):04319                  pshs  d,X
1C7D 5A               (gshell_beta5_yak.):04320                  decb  
1C7E 3406             (gshell_beta5_yak.):04321                  pshs  d
1C80 8E000A           (gshell_beta5_yak.):04322                  ldx   #10
1C83 EC6E             (gshell_beta5_yak.):04323                  ldd   16-2,S
1C85 3416             (gshell_beta5_yak.):04324                  pshs  d,X
1C87 17177B           (gshell_beta5_yak.):04325                  lbsr  STRLEN
1C8A C30002           (gshell_beta5_yak.):04326                  addd  #2
1C8D EDE4             (gshell_beta5_yak.):04327                  std   ,S
1C8F 5F               (gshell_beta5_yak.):04328                  clrb  
1C90 3406             (gshell_beta5_yak.):04329                  pshs  d
1C92 C60A             (gshell_beta5_yak.):04330                  ldb   #10
1C94 3406             (gshell_beta5_yak.):04331                  pshs  d
1C96 8E0001           (gshell_beta5_yak.):04332                  ldx   #1
1C99 DC22             (gshell_beta5_yak.):04333                  ldd   WNDWPATH
1C9B 3416             (gshell_beta5_yak.):04334                  pshs  d,X
1C9D 171912           (gshell_beta5_yak.):04335                  lbsr  OWSET
1CA0 CC0004           (gshell_beta5_yak.):04336                  ldd   #ZT.DBOX   Double box overlay window
1CA3 ED62             (gshell_beta5_yak.):04337                  std   2,S
1CA5 1718EA           (gshell_beta5_yak.):04338                  lbsr  ST.WNSET
1CA8 ECE81A           (gshell_beta5_yak.):04339                  ldd   10+16,S
1CAB EDE4             (gshell_beta5_yak.):04340                  std   ,S
1CAD 17F5BF           (gshell_beta5_yak.):04341                  lbsr  WRLNWCR
1CB0 32E810           (gshell_beta5_yak.):04342                  leas  2+14,S
1CB3 CC0010           (gshell_beta5_yak.):04343                  ldd   #16
1CB6 EDE4             (gshell_beta5_yak.):04344                  std   ,S
1CB8 CE125D           (gshell_beta5_yak.):04345                  ldu   #DRIVETBL
1CBB 2038             (gshell_beta5_yak.):04346                  bra   SLCTDEV2
                      (gshell_beta5_yak.):04347         
1CBD EC4C             (gshell_beta5_yak.):04348         SLCTDEV1 ldd   FL.FNAME,U
1CBF 3406             (gshell_beta5_yak.):04349                  pshs  d
1CC1 8E11A7           (gshell_beta5_yak.):04350                  ldx   #DNAMBUFR
1CC4 3410             (gshell_beta5_yak.):04351                  pshs  X
1CC6 171754           (gshell_beta5_yak.):04352                  lbsr  STRCPY
1CC9 6FA911B2         (gshell_beta5_yak.):04353                  clr   DNAMBUFR+11,Y
1CCD 308DED9D         (gshell_beta5_yak.):04354                  leax  FOURSPAC,PC
1CD1 AFE4             (gshell_beta5_yak.):04355                  stx   ,S
1CD3 17F584           (gshell_beta5_yak.):04356                  lbsr  WTSTRLEN
1CD6 8E11A7           (gshell_beta5_yak.):04357                  ldx   #DNAMBUFR
1CD9 AFE4             (gshell_beta5_yak.):04358                  stx   ,S
1CDB 17F591           (gshell_beta5_yak.):04359                  lbsr  WRLNWCR
1CDE EC64             (gshell_beta5_yak.):04360                  ldd   4,S
1CE0 ED62             (gshell_beta5_yak.):04361                  std   2,S
1CE2 CC0008           (gshell_beta5_yak.):04362                  ldd   #8
1CE5 EDE4             (gshell_beta5_yak.):04363                  std   ,S
1CE7 1704BE           (gshell_beta5_yak.):04364                  lbsr  DRAWABOX
1CEA 3264             (gshell_beta5_yak.):04365                  leas  4,S
1CEC ECE4             (gshell_beta5_yak.):04366                  ldd   ,S
1CEE C30008           (gshell_beta5_yak.):04367                  addd  #8
1CF1 EDE4             (gshell_beta5_yak.):04368                  std   ,S
1CF3 EE4A             (gshell_beta5_yak.):04369                  ldu   FL.LINK,U
1CF5 EF7E             (gshell_beta5_yak.):04370         SLCTDEV2 stu   -2,S
1CF7 26C4             (gshell_beta5_yak.):04371                  bne   SLCTDEV1
1CF9 DF1C             (gshell_beta5_yak.):04372                  stu   RECDSGNL
1CFB DC22             (gshell_beta5_yak.):04373                  ldd   WNDWPATH
1CFD 3416             (gshell_beta5_yak.):04374                  pshs  d,X
1CFF 171839           (gshell_beta5_yak.):04375                  lbsr  ST.RELEA
1D02 1703EE           (gshell_beta5_yak.):04376                  lbsr  MOUSENOW
1D05 CC000A           (gshell_beta5_yak.):04377                  ldd   #MOUSIGNL
1D08 ED62             (gshell_beta5_yak.):04378                  std   2,S
1D0A 17187A           (gshell_beta5_yak.):04379                  lbsr  ST.MSSIG
1D0D 3264             (gshell_beta5_yak.):04380                  leas  4,S
1D0F 9E1C             (gshell_beta5_yak.):04381                  ldx   RECDSGNL   Get signal
1D11 2603             (gshell_beta5_yak.):04382                  bne   SLCTDEV3   Got one, process
1D13 103F0A           (gshell_beta5_yak.):04383                  os9   F$Sleep    Sleep for remainder of tick
1D16 DC1C             (gshell_beta5_yak.):04384         SLCTDEV3 ldd   RECDSGNL
1D18 C10A             (gshell_beta5_yak.):04385                  cmpb  #MOUSIGNL
1D1A 2634             (gshell_beta5_yak.):04386                  bne   SLCTDEV6
1D1C AE64             (gshell_beta5_yak.):04387                  ldx   4,S
1D1E DC22             (gshell_beta5_yak.):04388                  ldd   WNDWPATH
1D20 3416             (gshell_beta5_yak.):04389                  pshs  d,X
1D22 1717F8           (gshell_beta5_yak.):04390                  lbsr  GT.MOUSE
1D25 3264             (gshell_beta5_yak.):04391                  leas  4,S
1D27 CC0010           (gshell_beta5_yak.):04392                  ldd   #16
1D2A EDE4             (gshell_beta5_yak.):04393                  std   ,S
1D2C CE125D           (gshell_beta5_yak.):04394                  ldu   #DRIVETBL
1D2F 201B             (gshell_beta5_yak.):04395                  bra   SLCTDEV5
                      (gshell_beta5_yak.):04396         
1D31 3406             (gshell_beta5_yak.):04397         SLCTDEV4 pshs  d
1D33 8E0008           (gshell_beta5_yak.):04398                  ldx   #8
1D36 EC66             (gshell_beta5_yak.):04399                  ldd   8-2,S
1D38 3416             (gshell_beta5_yak.):04400                  pshs  d,X
1D3A 17011C           (gshell_beta5_yak.):04401                  lbsr  TESTDBOX
1D3D 3266             (gshell_beta5_yak.):04402                  leas  6,S
1D3F ED62             (gshell_beta5_yak.):04403                  std   2,S
1D41 260D             (gshell_beta5_yak.):04404                  bne   SLCTDEV6
1D43 ECE4             (gshell_beta5_yak.):04405                  ldd   ,S
1D45 C30008           (gshell_beta5_yak.):04406                  addd  #8
1D48 EDE4             (gshell_beta5_yak.):04407                  std   ,S
1D4A EE4A             (gshell_beta5_yak.):04408                  ldu   FL.LINK,U
1D4C EF7E             (gshell_beta5_yak.):04409         SLCTDEV5 stu   -2,S
1D4E 26E1             (gshell_beta5_yak.):04410                  bne   SLCTDEV4
1D50 DC22             (gshell_beta5_yak.):04411         SLCTDEV6 ldd   WNDWPATH
1D52 3406             (gshell_beta5_yak.):04412                  pshs  d
1D54 17188A           (gshell_beta5_yak.):04413                  lbsr  OWEND
1D57 3262             (gshell_beta5_yak.):04414                  leas  2,S
1D59 170397           (gshell_beta5_yak.):04415                  lbsr  MOUSENOW
1D5C EC62             (gshell_beta5_yak.):04416                  ldd   2,S
1D5E 2704             (gshell_beta5_yak.):04417                  beq   SLCTDEV7
1D60 EC4C             (gshell_beta5_yak.):04418                  ldd   FL.FNAME,U
1D62 2065             (gshell_beta5_yak.):04419                  bra   SLCTDEVX
                      (gshell_beta5_yak.):04420         
1D64 4F               (gshell_beta5_yak.):04421         SLCTDEV7 clra  
1D65 5F               (gshell_beta5_yak.):04422                  clrb  
1D66 2061             (gshell_beta5_yak.):04423                  bra   SLCTDEVX
                      (gshell_beta5_yak.):04424         
1D68 3440             (gshell_beta5_yak.):04425         STEXCDVC pshs  U
1D6A CC0003           (gshell_beta5_yak.):04426                  ldd   #3
1D6D 3406             (gshell_beta5_yak.):04427                  pshs  d
1D6F 308C60           (gshell_beta5_yak.):04428                  leax  <SETEXEC,PC
1D72 DC22             (gshell_beta5_yak.):04429                  ldd   WNDWPATH
1D74 3416             (gshell_beta5_yak.):04430                  pshs  d,X
1D76 17063B           (gshell_beta5_yak.):04431                  lbsr  OLAYGNBK
1D79 17116A           (gshell_beta5_yak.):04432                  lbsr  CURSORON
1D7C 308C6A           (gshell_beta5_yak.):04433                  leax  <PREVIOUS,PC
1D7F AFE4             (gshell_beta5_yak.):04434                  stx   ,S
1D81 17F4D6           (gshell_beta5_yak.):04435                  lbsr  WTSTRLEN
1D84 8E0571           (gshell_beta5_yak.):04436                  ldx   #XDIRNAME
1D87 AFE4             (gshell_beta5_yak.):04437                  stx   ,S
1D89 17F4E3           (gshell_beta5_yak.):04438                  lbsr  WRLNWCR
1D8C 308C62           (gshell_beta5_yak.):04439                  leax  <NEW.MSG,PC
1D8F AFE4             (gshell_beta5_yak.):04440                  stx   ,S
1D91 17F4C6           (gshell_beta5_yak.):04441                  lbsr  WTSTRLEN
1D94 170736           (gshell_beta5_yak.):04442                  lbsr  INPUTCHK
1D97 3266             (gshell_beta5_yak.):04443                  leas  2+4,S
1D99 1F03             (gshell_beta5_yak.):04444                  tfr   D,U
1D9B EF7E             (gshell_beta5_yak.):04445                  stu   -2,S
1D9D 272E             (gshell_beta5_yak.):04446                  beq   STEXCDV3
1D9F E6C4             (gshell_beta5_yak.):04447                  ldb   ,U
1DA1 272A             (gshell_beta5_yak.):04448                  beq   STEXCDV3
1DA3 3440             (gshell_beta5_yak.):04449                  pshs  U
1DA5 171162           (gshell_beta5_yak.):04450                  lbsr  CHGXDIR
1DA8 EDE1             (gshell_beta5_yak.):04451                  std   ,S++
1DAA 260C             (gshell_beta5_yak.):04452                  bne   STEXCDV1
1DAC 8E0571           (gshell_beta5_yak.):04453                  ldx   #XDIRNAME
1DAF 3450             (gshell_beta5_yak.):04454                  pshs  X,U
1DB1 171669           (gshell_beta5_yak.):04455                  lbsr  STRCPY
1DB4 3264             (gshell_beta5_yak.):04456                  leas  4,S
1DB6 2015             (gshell_beta5_yak.):04457                  bra   STEXCDV3
                      (gshell_beta5_yak.):04458         
1DB8 1705D8           (gshell_beta5_yak.):04459         STEXCDV1 lbsr  KILLOLAY
1DBB ECA9044D         (gshell_beta5_yak.):04460                  ldd   ERRNO,Y
1DBF 3406             (gshell_beta5_yak.):04461                  pshs  D
1DC1 308C34           (gshell_beta5_yak.):04462                  leax  <CANTOPEN,PC
1DC4 3450             (gshell_beta5_yak.):04463                  pshs  X,U
1DC6 17F43D           (gshell_beta5_yak.):04464                  lbsr  BUILDMSG
1DC9 3266             (gshell_beta5_yak.):04465         SLCTDEVX leas  6,S
1DCB 35C0             (gshell_beta5_yak.):04466                  puls  U,PC
                      (gshell_beta5_yak.):04467         
1DCD 1705C3           (gshell_beta5_yak.):04468         STEXCDV3 lbsr  KILLOLAY
1DD0 35C0             (gshell_beta5_yak.):04469                  puls  U,PC
                      (gshell_beta5_yak.):04470         
1DD2 2053657420657865 (gshell_beta5_yak.):04471         SETEXEC  fcc   " Set execution folder "
     637574696F6E2066
     6F6C64657220
1DE8 00               (gshell_beta5_yak.):04472                  fcb   NUL
                      (gshell_beta5_yak.):04473         
1DE9 0A               (gshell_beta5_yak.):04474         PREVIOUS fcb   LF
1DEA 507265763A20     (gshell_beta5_yak.):04475                  fcc   "Prev: "
1DF0 00               (gshell_beta5_yak.):04476                  fcb   NUL
                      (gshell_beta5_yak.):04477         
1DF1 4E65773A2020     (gshell_beta5_yak.):04478         NEW.MSG  fcc   "New:  "
1DF7 00               (gshell_beta5_yak.):04479                  fcb   NUL
                      (gshell_beta5_yak.):04480         
1DF8 43616E2774206F70 (gshell_beta5_yak.):04481         CANTOPEN fcc   "Can't open "
     656E20
1E03 2200             (gshell_beta5_yak.):04482                  fcb   '",NUL
                      (gshell_beta5_yak.):04483         
1E05 17F363           (gshell_beta5_yak.):04484         SUREQUI3 lbsr  TESTQUIT
1E08 2643             (gshell_beta5_yak.):04485                  bne   SUREQUI2
1E0A 170416           (gshell_beta5_yak.):04486                  lbsr  SUREBOX8
1E0D 2008             (gshell_beta5_yak.):04487                  bra   SUREQUI4
                      (gshell_beta5_yak.):04488         
1E0F 17F359           (gshell_beta5_yak.):04489         SUREQUIT lbsr  TESTQUIT
1E12 2639             (gshell_beta5_yak.):04490                  bne   SUREQUI2
1E14 170407           (gshell_beta5_yak.):04491                  lbsr  SUREBOX7
1E17 ED7E             (gshell_beta5_yak.):04492         SUREQUI4 std   -2,S
1E19 2732             (gshell_beta5_yak.):04493                  beq   SUREQUI2
1E1B CCFFFF           (gshell_beta5_yak.):04494                  ldd   #-1
1E1E 3406             (gshell_beta5_yak.):04495                  pshs  D
1E20 17F36C           (gshell_beta5_yak.):04496                  lbsr  TRYQUIT
1E23 EDE1             (gshell_beta5_yak.):04497                  std   ,S++
1E25 2626             (gshell_beta5_yak.):04498                  bne   SUREQUI2
1E27 103F0C           (gshell_beta5_yak.):04499                  os9   F$ID
1E2A 8E06AF           (gshell_beta5_yak.):04500                  ldx   #DIRBUFER
1E2D 103F18           (gshell_beta5_yak.):04501                  os9   F$GPrDsc
1E30 6D01             (gshell_beta5_yak.):04502                  tst   1,X
1E32 2614             (gshell_beta5_yak.):04503                  bne   SUREQUI1
1E34 10CE00FF         (gshell_beta5_yak.):04504                  lds   #$FF
1E38 308C13           (gshell_beta5_yak.):04505                  leax  <EXITSHEL,PC Point to SHELL
1E3B 338C16           (gshell_beta5_yak.):04506                  leau  <IEQUALS,PC Point to 'i=/1'
1E3E 108E0005         (gshell_beta5_yak.):04507                  ldy   #PARMSIZE
                      (gshell_beta5_yak.):04508         * NOTE: WE SHOULD CHANGE SO THAT GSHELL RECORDS THE ORIGINAL WINDOW TYPE, AND
                      (gshell_beta5_yak.):04509         *  RESTORES IT AS WELL. IT SHOULD ALSO RESET PAUSE PROPERLY
1E42 CC0100           (gshell_beta5_yak.):04510                  ldd   #$0100     Chain to regular SHELL
1E45 103F05           (gshell_beta5_yak.):04511                  os9   F$Chain
                      (gshell_beta5_yak.):04512         
1E48 3406             (gshell_beta5_yak.):04513         SUREQUI1 pshs  D
1E4A 1719DC           (gshell_beta5_yak.):04514                  lbsr  EXIT       lbra trick does NOT work here
1E4D 39               (gshell_beta5_yak.):04515         SUREQUI2 rts   
                      (gshell_beta5_yak.):04516         
1E4E 7368656C6C       (gshell_beta5_yak.):04517         EXITSHEL fcc   "shell"
1E53 0D               (gshell_beta5_yak.):04518                  fcb   CR
                      (gshell_beta5_yak.):04519         
1E54 693D2F31         (gshell_beta5_yak.):04520         IEQUALS  fcc   "i=/1"
1E58 0D               (gshell_beta5_yak.):04521                  fcb   CR
                      (gshell_beta5_yak.):04522         
     0005             (gshell_beta5_yak.):04523         PARMSIZE equ   *-IEQUALS
                      (gshell_beta5_yak.):04524         
                      (gshell_beta5_yak.):04525         * Entry: 0-1,s = RTS address
                      (gshell_beta5_yak.):04526         *        2-3,s = Ptr to mouse packet
1E59 3440             (gshell_beta5_yak.):04527         TESTDBOX pshs  U
1E5B EE64             (gshell_beta5_yak.):04528                  ldu   4,S        Get ptr to mouse packet
1E5D AEC81C           (gshell_beta5_yak.):04529                  ldx   YT.WRX,U   Get
1E60 ECC81E           (gshell_beta5_yak.):04530                  ldd   YT.WRY,U
1E63 3416             (gshell_beta5_yak.):04531                  pshs  d,X
1E65 EC6A             (gshell_beta5_yak.):04532                  ldd   10,S
1E67 10A362           (gshell_beta5_yak.):04533                  cmpd  2,S
1E6A 2C3A             (gshell_beta5_yak.):04534                  bge   TESTDBO1
1E6C D35B             (gshell_beta5_yak.):04535                  addd  BXOFFSET
1E6E 10A362           (gshell_beta5_yak.):04536                  cmpd  2,S
1E71 2D33             (gshell_beta5_yak.):04537                  blt   TESTDBO1
1E73 EC6C             (gshell_beta5_yak.):04538                  ldd   12,S
1E75 10A3E4           (gshell_beta5_yak.):04539                  cmpd  ,S
1E78 2C2C             (gshell_beta5_yak.):04540                  bge   TESTDBO1
1E7A C30008           (gshell_beta5_yak.):04541                  addd  #8
1E7D 10A3E4           (gshell_beta5_yak.):04542                  cmpd  ,S
1E80 2D24             (gshell_beta5_yak.):04543                  blt   TESTDBO1
1E82 EC6C             (gshell_beta5_yak.):04544                  ldd   12,S
1E84 C30002           (gshell_beta5_yak.):04545                  addd  #2
1E87 3406             (gshell_beta5_yak.):04546                  pshs  d
1E89 EC6C             (gshell_beta5_yak.):04547                  ldd   12,S
1E8B C30002           (gshell_beta5_yak.):04548                  addd  #2
1E8E 3406             (gshell_beta5_yak.):04549                  pshs  d
1E90 DC22             (gshell_beta5_yak.):04550                  ldd   WNDWPATH
1E92 3406             (gshell_beta5_yak.):04551                  pshs  d
1E94 1717BE           (gshell_beta5_yak.):04552                  lbsr  SETDPTR
1E97 1717EA           (gshell_beta5_yak.):04553                  lbsr  FFILL
1E9A 8E000A           (gshell_beta5_yak.):04554                  ldx   #10        Sleep for 10 ticks
1E9D 103F0A           (gshell_beta5_yak.):04555                  os9   F$Sleep
1EA0 3266             (gshell_beta5_yak.):04556                  leas  6,S
1EA2 C601             (gshell_beta5_yak.):04557                  ldb   #1
1EA4 2001             (gshell_beta5_yak.):04558                  bra   TESTDBO2
                      (gshell_beta5_yak.):04559         
1EA6 5F               (gshell_beta5_yak.):04560         TESTDBO1 clrb  
1EA7 4F               (gshell_beta5_yak.):04561         TESTDBO2 clra  
1EA8 3264             (gshell_beta5_yak.):04562                  leas  4,S
1EAA 35C0             (gshell_beta5_yak.):04563                  puls  U,PC
                      (gshell_beta5_yak.):04564         
1EAC E663             (gshell_beta5_yak.):04565         VIEWSLCT ldb   2+1,S      Get menu item # (only LSB needed)
1EAE 2713             (gshell_beta5_yak.):04566                  beq   VIEWEXIT   None selected, exit
1EB0 C103             (gshell_beta5_yak.):04567                  cmpb  #3         Higher than the 3 we ignore (HOW WOULD THIS HAPPEN?)
1EB2 220F             (gshell_beta5_yak.):04568                  bhi   VIEWEXIT
1EB4 CB05             (gshell_beta5_yak.):04569                  addb  #5         Adjust to match OS9 window types
1EB6 D102             (gshell_beta5_yak.):04570                  cmpb  DEFWTYPE+1 Same as current type?
1EB8 2709             (gshell_beta5_yak.):04571                  beq   VIEWEXIT   Yes, don't do anything
1EBA D702             (gshell_beta5_yak.):04572                  stb   DEFWTYPE+1 Save new type
1EBC D700             (gshell_beta5_yak.):04573                  stb   WIPED      Flag that we have to redo dir bar
1EBE 8D04             (gshell_beta5_yak.):04574                  bsr   SETVIEW    Do changes to the VIEW menu for the new type
1EC0 170300           (gshell_beta5_yak.):04575                  lbsr  SETHLRES   Change current GSHELL window to new type
1EC3 39               (gshell_beta5_yak.):04576         VIEWEXIT rts   
                      (gshell_beta5_yak.):04577         
                      (gshell_beta5_yak.):04578         * Update VIEW menu options
1EC4 C601             (gshell_beta5_yak.):04579         SETVIEW  ldb   #1
1EC6 8E0267           (gshell_beta5_yak.):04580                  ldx   #ITM.LRES+QI.ENBL
1EC9 E784             (gshell_beta5_yak.):04581                  stb   ,X
1ECB E78815           (gshell_beta5_yak.):04582                  stb   QI.SIZ,X
1ECE E7882A           (gshell_beta5_yak.):04583                  stb   QI.SIZ*2,X
1ED1 D602             (gshell_beta5_yak.):04584                  ldb   DEFWTYPE+1
1ED3 C005             (gshell_beta5_yak.):04585                  subb  #5
1ED5 5A               (gshell_beta5_yak.):04586         SETVIEW1 decb  
1ED6 2705             (gshell_beta5_yak.):04587                  beq   SETVIEW2
1ED8 308815           (gshell_beta5_yak.):04588                  leax  QI.SIZ,X
1EDB 20F8             (gshell_beta5_yak.):04589                  bra   SETVIEW1
                      (gshell_beta5_yak.):04590         
1EDD 6F84             (gshell_beta5_yak.):04591         SETVIEW2 clr   ,X
1EDF 39               (gshell_beta5_yak.):04592                  rts   
                      (gshell_beta5_yak.):04593         
                      (gshell_beta5_yak.):04594         * Select off of the TANDY menu
                      (gshell_beta5_yak.):04595         * Entry: 0-1,s = RTS parameter
                      (gshell_beta5_yak.):04596         *        2-3,s = Menu item # selected (only B portion used)
1EE0                  (gshell_beta5_yak.):04597         TNDYSLCT
                      (gshell_beta5_yak.):04598                IFNE  H6309
                      (gshell_beta5_yak.):04599                  clrd             Put 4 zero bytes on stack
                      (gshell_beta5_yak.):04600                ELSE
1EE0 4F               (gshell_beta5_yak.):04601                  clra
1EE1 5F               (gshell_beta5_yak.):04602                  clrb
                      (gshell_beta5_yak.):04603                ENDC
1EE2 3406             (gshell_beta5_yak.):04604                  pshs  D
1EE4 3406             (gshell_beta5_yak.):04605                  pshs  D
1EE6 E667             (gshell_beta5_yak.):04606                  ldb   6+1,S      Get 1 byte version of menu item selected
1EE8 5A               (gshell_beta5_yak.):04607                  decb  
1EE9 275C             (gshell_beta5_yak.):04608                  beq   SELCALC    1=Calculator
1EEB 5A               (gshell_beta5_yak.):04609                  decb  
1EEC 271C             (gshell_beta5_yak.):04610                  beq   SELCLOCK   2=Clock
1EEE 5A               (gshell_beta5_yak.):04611                  decb  
1EEF 2720             (gshell_beta5_yak.):04612                  beq   SELCAL     3=Calender
1EF1 5A               (gshell_beta5_yak.):04613                  decb  
1EF2 2724             (gshell_beta5_yak.):04614                  beq   SELCNTRL   4=Control Panel
1EF4 5A               (gshell_beta5_yak.):04615                  decb  
1EF5 2726             (gshell_beta5_yak.):04616                  beq   SELPRNTR   5=Printer control panel
1EF7 5A               (gshell_beta5_yak.):04617                  decb  
1EF8 2728             (gshell_beta5_yak.):04618                  beq   SELPORT    6=Serial port control panel
1EFA 5A               (gshell_beta5_yak.):04619                  decb  
1EFB 2731             (gshell_beta5_yak.):04620                  beq   SELHELP    7=Help command
1EFD 5A               (gshell_beta5_yak.):04621                  decb  
1EFE 2659             (gshell_beta5_yak.):04622                  bne   TNDYEXIT   9 or greater, exit Tandy menu
1F00 5C               (gshell_beta5_yak.):04623                  incb             8=Shell (Save ???)
1F01 E761             (gshell_beta5_yak.):04624                  stb   1,S
1F03 C60D             (gshell_beta5_yak.):04625                  ldb   #IC.SHELL  Execute resizable window SHELL command
1F05 8E0334           (gshell_beta5_yak.):04626                  ldx   #SHELLNAM  Point to word "shell" with NUL
1F08 2042             (gshell_beta5_yak.):04627                  bra   TNDYEXEC   Go execute it
                      (gshell_beta5_yak.):04628         
                      (gshell_beta5_yak.):04629         * Clock from Tandy menu selected
1F0A C60B             (gshell_beta5_yak.):04630         SELCLOCK ldb   #IC.GCLOK  Clock forked process ID #
1F0C 8E0345           (gshell_beta5_yak.):04631                  ldx   #GCLOCKNM  Point to name of clock program
1F0F 203B             (gshell_beta5_yak.):04632                  bra   TNDYEXEC   Go execute it
                      (gshell_beta5_yak.):04633         
                      (gshell_beta5_yak.):04634         * Calendar from Tandy menu selected
1F11 C60C             (gshell_beta5_yak.):04635         SELCAL   ldb   #IC.GCAL   Execute GCalendar
1F13 8E034C           (gshell_beta5_yak.):04636                  ldx   #GCALNAM
1F16 2034             (gshell_beta5_yak.):04637                  bra   TNDYEXEC
                      (gshell_beta5_yak.):04638         
                      (gshell_beta5_yak.):04639         * Control panel selected
1F18 8E0351           (gshell_beta5_yak.):04640         SELCNTRL ldx   #CONTRLNM
1F1B 2008             (gshell_beta5_yak.):04641                  bra   TNDYEXC1
                      (gshell_beta5_yak.):04642         
                      (gshell_beta5_yak.):04643         * Printer panel selected
1F1D 8E0359           (gshell_beta5_yak.):04644         SELPRNTR ldx   #GPRINTNM
1F20 2003             (gshell_beta5_yak.):04645                  bra   TNDYEXC1
                      (gshell_beta5_yak.):04646         
                      (gshell_beta5_yak.):04647         * Serial ports panel selected
1F22 8E0360           (gshell_beta5_yak.):04648         SELPORT  ldx   #GPORTNAM
1F25 3410             (gshell_beta5_yak.):04649         TNDYEXC1 pshs  X          Save ptr to program name to fork
1F27 1700FD           (gshell_beta5_yak.):04650                  lbsr  EXCOPOPR
1F2A 3262             (gshell_beta5_yak.):04651                  leas  2,S
1F2C 202B             (gshell_beta5_yak.):04652                  bra   TNDYEXIT
                      (gshell_beta5_yak.):04653         
1F2E 5C               (gshell_beta5_yak.):04654         SELHELP  incb  
1F2F 3406             (gshell_beta5_yak.):04655                  pshs  D
1F31 9E34             (gshell_beta5_yak.):04656                  ldx   SELECTED
1F33 2706             (gshell_beta5_yak.):04657                  beq   SELHELP1
1F35 EC0C             (gshell_beta5_yak.):04658                  ldd   FL.FNAME,X
1F37 ED62             (gshell_beta5_yak.):04659                  std   2,S
1F39 6C65             (gshell_beta5_yak.):04660                  inc   5,S
1F3B 8E0366           (gshell_beta5_yak.):04661         SELHELP1 ldx   #HELPNAM
1F3E 3410             (gshell_beta5_yak.):04662                  pshs  X
1F40 17012C           (gshell_beta5_yak.):04663                  lbsr  EXECPRGM     Fork HELP
1F43 3264             (gshell_beta5_yak.):04664                  leas  4,S
1F45 2012             (gshell_beta5_yak.):04665                  bra   TNDYEXIT
                      (gshell_beta5_yak.):04666         
1F47 C60A             (gshell_beta5_yak.):04667         SELCALC  ldb   #IC.GCALC   Id # for GCalc
1F49 8E033F           (gshell_beta5_yak.):04668                  ldx   #GCALCNAM   Point to "GCalc"
                      (gshell_beta5_yak.):04669         * Execute resizable window, call program
                      (gshell_beta5_yak.):04670         * Entry: B=IC.*  id number
                      (gshell_beta5_yak.):04671         *        X=Pointer to program to call (no parameters at this point)
1F4C 3406             (gshell_beta5_yak.):04672         TNDYEXEC pshs  D          Preserve id #
1F4E 17F149           (gshell_beta5_yak.):04673                  lbsr  FNDIDESC   Find Ptr to ID descriptor we are looking for
1F51 ED64             (gshell_beta5_yak.):04674                  std   2+2,S      Save on stack
1F53 AFE4             (gshell_beta5_yak.):04675                  stx   ,S         Save ptr to program name
1F55 8D05             (gshell_beta5_yak.):04676                  bsr   EXCICOND   Go execute
1F57 3262             (gshell_beta5_yak.):04677                  leas  2,S        Eat temp stack
1F59 3264             (gshell_beta5_yak.):04678         TNDYEXIT leas  4,S        Eat rest of temp stack & return
1F5B 39               (gshell_beta5_yak.):04679                  rts   
                      (gshell_beta5_yak.):04680         
                      (gshell_beta5_yak.):04681         *Execute an IC.* program
                      (gshell_beta5_yak.):04682         * Entry: U=Ptr to Icon Descriptor (ID.*) for program to launch
                      (gshell_beta5_yak.):04683         *        0-1,s  RTS address
                      (gshell_beta5_yak.):04684         *        2-3,s  Ptr to name of program to be called
                      (gshell_beta5_yak.):04685         *        4-5,s  ?
                      (gshell_beta5_yak.):04686         *        6-7,s  Ptr to Icon Descriptor (ID.*) for program to launch
1F5C 3440             (gshell_beta5_yak.):04687         EXCICOND pshs  U          Preserve U  (ID.* ptr)
1F5E EC64             (gshell_beta5_yak.):04688                  ldd   2+2,S      Get ptr to program to be forked
1F60 3406             (gshell_beta5_yak.):04689                  pshs  D          Create/Add entry to our internal table of programs we have forked
1F62 17E7C0           (gshell_beta5_yak.):04690                  lbsr  SETPDESC     from GShell (Add GD.* table entry)
1F65 EDE4             (gshell_beta5_yak.):04691                  std   ,S         Save ptr to current GD descriptor entry
1F67 10270094         (gshell_beta5_yak.):04692                  lbeq  EXCICON9   None (couldn't make), clear 1st byte of parms buffer/exit
1F6B 1F03             (gshell_beta5_yak.):04693                  tfr   D,U        Move ptr to U
1F6D 17F3BB           (gshell_beta5_yak.):04694                  lbsr  LINKLOAD   Shut mouse off/Hourglass, link or load program in question
1F70 EDE1             (gshell_beta5_yak.):04695                  std   ,S++       Did we have an error?
1F72 10270084         (gshell_beta5_yak.):04696                  lbeq  EXCICON8   Yes, kill our GD.* process link, window (if any), exit
1F76 0D20             (gshell_beta5_yak.):04697                  tst   RAMSIZE    Check our RAM size
1F78 263A             (gshell_beta5_yak.):04698                  bne   EXCICON4   >128k, skip ahead
1F7A EC68             (gshell_beta5_yak.):04699                  ldd   6+2,S      128k, get ptr to icon descriptor (ID.*) for program to launch
1F7C 3406             (gshell_beta5_yak.):04700                  pshs  D          Save parms for subroutine
1F7E 3440             (gshell_beta5_yak.):04701                  pshs  U
1F80 17059D           (gshell_beta5_yak.):04702                  lbsr  ISCR128K   Do special 128k processing - initialize new window
1F83 3264             (gshell_beta5_yak.):04703                  leas  4,S        Eat parms
1F85 ED7E             (gshell_beta5_yak.):04704                  std   -2,S       Check if new window create successful
1F87 2707             (gshell_beta5_yak.):04705                  beq   EXCICON1   Yes, continue
1F89 2E55             (gshell_beta5_yak.):04706                  bgt   EXCICON6   Screen type of 7 or 8, can't create in 128k
1F8B 170235           (gshell_beta5_yak.):04707                  lbsr  SETHLRES   Reinit main window, then print 'can't create' error
1F8E 2050             (gshell_beta5_yak.):04708                  bra   EXCICON6
                      (gshell_beta5_yak.):04709         
1F90 EC66             (gshell_beta5_yak.):04710         EXCICON1 ldd   6,S        ???
1F92 2710             (gshell_beta5_yak.):04711                  beq   EXCICON2
1F94 8E0004           (gshell_beta5_yak.):04712                  ldx   #ZT.DBOX   Double box border
1F97 D623             (gshell_beta5_yak.):04713                  ldb   WNDWPATH+1 Window path
1F99 3416             (gshell_beta5_yak.):04714                  pshs  D,X        Save for routine
1F9B 1715F4           (gshell_beta5_yak.):04715                  lbsr  ST.WNSET   Set window to double box
1F9E 3264             (gshell_beta5_yak.):04716                  leas  4,S        Eat temp stack
1FA0 ED7E             (gshell_beta5_yak.):04717                  std   -2,S       Error on Window Set?
1FA2 260B             (gshell_beta5_yak.):04718                  bne   EXCICON3   Yes, reset window (?) and exit
1FA4 3406             (gshell_beta5_yak.):04719         EXCICON2 pshs  D          Save regs
1FA6 3406             (gshell_beta5_yak.):04720                  pshs  D
1FA8 3440             (gshell_beta5_yak.):04721                  pshs  U          ?? Save ptr to process to fork
1FAA 170152           (gshell_beta5_yak.):04722                  lbsr  FORKWAIT   Go fork process
1FAD 3266             (gshell_beta5_yak.):04723                  leas  6,S
1FAF 170211           (gshell_beta5_yak.):04724         EXCICON3 lbsr  SETHLRES   Change current window type & exit
1FB2 2051             (gshell_beta5_yak.):04725                  bra   EXCICN10
                      (gshell_beta5_yak.):04726         
                      (gshell_beta5_yak.):04727         * >128k RAM for forking IC.* program
                      (gshell_beta5_yak.):04728         * U=Ptr to our process GD.* table entry
                      (gshell_beta5_yak.):04729         * Entry: 0-1,s = Preserved U
                      (gshell_beta5_yak.):04730         *        2-3,s = RTS address
                      (gshell_beta5_yak.):04731         *        4-5,s = Ptr to name of program to be launched
                      (gshell_beta5_yak.):04732         *        6-7,s = Flag: <>0 means we are creating a double-box CoWin window (like Shell)
                      (gshell_beta5_yak.):04733         *        8-9,s = Ptr to Icon Descriptor (ID.) for program to launch
1FB4 EC68             (gshell_beta5_yak.):04734         EXCICON4 ldd   8,S        ? Get ptr to ID.* Icon descriptor of program to launch
1FB6 3406             (gshell_beta5_yak.):04735                  pshs  D          Save for sub
1FB8 3440             (gshell_beta5_yak.):04736                  pshs  U          Save ptr to GD.* for process we are launching
1FBA 1708F7           (gshell_beta5_yak.):04737                  lbsr  ISCR512K   >128K Initialize screen - set up new window to fork program into
1FBD 3264             (gshell_beta5_yak.):04738                  leas  4,S        Eat temp stack
1FBF ED7E             (gshell_beta5_yak.):04739                  std   -2,S       Successful window create? (TSTD on 6309)
1FC1 2D44             (gshell_beta5_yak.):04740                  blt   EXCICN11   No, report error
1FC3 EC66             (gshell_beta5_yak.):04741                  ldd   6,S        Yes, Get double box window flag
1FC5 2710             (gshell_beta5_yak.):04742                  beq   EXCICON5   Not set, go straight to program fork
1FC7 8E0004           (gshell_beta5_yak.):04743                  ldx   #ZT.DBOX   Draw Double box window
1FCA EC4C             (gshell_beta5_yak.):04744                  ldd   GD.WPATH,U Get path # to window program is/will be running on
1FCC 3416             (gshell_beta5_yak.):04745                  pshs  D,X        Save for subroutine
1FCE 1715C1           (gshell_beta5_yak.):04746                  lbsr  ST.WNSET   Set up window as double box type
1FD1 3264             (gshell_beta5_yak.):04747                  leas  4,S        Eat temp stack
1FD3 ED7E             (gshell_beta5_yak.):04748                  std   -2,S       TSTD on 6309
1FD5 2609             (gshell_beta5_yak.):04749                  bne   EXCICON6   Couldn't create double box window, report error
1FD7 3440             (gshell_beta5_yak.):04750         EXCICON5 pshs  U          Save ptr to GD.* variables
1FD9 17F3A9           (gshell_beta5_yak.):04751                  lbsr  FORKPROC   Fork program
1FDC EDE1             (gshell_beta5_yak.):04752                  std   ,S++       Was fork successful (0=NO)? (and eat temp U copy)
1FDE 2625             (gshell_beta5_yak.):04753                  bne   EXCICN10   Successful fork, exit
1FE0 DC22             (gshell_beta5_yak.):04754         EXCICON6 ldd   WNDWPATH   Print error on main window that we could not
1FE2 3406             (gshell_beta5_yak.):04755                  pshs  D          make a new window
1FE4 1715FF           (gshell_beta5_yak.):04756                  lbsr  SELECT
1FE7 3262             (gshell_beta5_yak.):04757                  leas  2,S
1FE9 308C6D           (gshell_beta5_yak.):04758                  leax  <CANTWIND,PC  Point to "Can't open new window"
1FEC 3410             (gshell_beta5_yak.):04759         EXCICON7 pshs  X
1FEE 17F254           (gshell_beta5_yak.):04760                  lbsr  OLAYPRNT   Print message on overlay window (main screen)
1FF1 ECC4             (gshell_beta5_yak.):04761                  ldd   GD.MNAME,U Get module name ptr
1FF3 EDE4             (gshell_beta5_yak.):04762                  std   ,S         Save on stack
1FF5 17133D           (gshell_beta5_yak.):04763                  lbsr  F.UNLOAD   Unload program we tried to fork
1FF8 3262             (gshell_beta5_yak.):04764                  leas  2,S
1FFA 3440             (gshell_beta5_yak.):04765         EXCICON8 pshs  U
1FFC 17E64E           (gshell_beta5_yak.):04766                  lbsr  KILPDESC   Yank entry out of current forked processes list
1FFF 3262             (gshell_beta5_yak.):04767         EXCICON9 leas  2,S
2001 6FA9109F         (gshell_beta5_yak.):04768                  clr   PARMSBFR,Y Flag parameters buffer as empty & return
2005 35C0             (gshell_beta5_yak.):04769         EXCICN10 puls  U,PC
                      (gshell_beta5_yak.):04770         
2007 1083FFFF         (gshell_beta5_yak.):04771         EXCICN11 cmpd  #-1
200B 27D3             (gshell_beta5_yak.):04772                  beq   EXCICON6   If error flag=-1,"can't create new window" error
200D 308C02           (gshell_beta5_yak.):04773                  leax  <EXECTERM,PC "Execution terminated" error
2010 20DA             (gshell_beta5_yak.):04774                  bra   EXCICON7
                      (gshell_beta5_yak.):04775         
2012 457865637574696F (gshell_beta5_yak.):04776         EXECTERM fcc   "Execution terminated"
     6E207465726D696E
     61746564
2026 00               (gshell_beta5_yak.):04777                  fcb   NUL
                      (gshell_beta5_yak.):04778         
                      (gshell_beta5_yak.):04779         * Execute program in pop up window on main GSHELL screen?
2027 3440             (gshell_beta5_yak.):04780         EXCOPOPR pshs  U
2029 EC64             (gshell_beta5_yak.):04781                  ldd   4,S
202B 3406             (gshell_beta5_yak.):04782                  pshs  D
202D 17E6F5           (gshell_beta5_yak.):04783                  lbsr  SETPDESC   Allocate internal process descriptor table entry
2030 1F03             (gshell_beta5_yak.):04784                  tfr   D,U        Move the ptr to it to U
2032 EDE4             (gshell_beta5_yak.):04785                  std   ,S         And save copy on stack
2034 27C9             (gshell_beta5_yak.):04786                  beq   EXCICON9   Couldn't allocate one, return
2036 17F2F2           (gshell_beta5_yak.):04787                  lbsr  LINKLOAD   Load/Link the program we will be launching
2039 EDE1             (gshell_beta5_yak.):04788                  std   ,S++       Successful?
203B 27BD             (gshell_beta5_yak.):04789                  beq   EXCICON8   No, return process descriptor memory and return
203D 3440             (gshell_beta5_yak.):04790                  pshs  U
203F 1702EF           (gshell_beta5_yak.):04791                  lbsr  OLAYWTBK
2042 EDE1             (gshell_beta5_yak.):04792                  std   ,S++
2044 27B4             (gshell_beta5_yak.):04793                  beq   EXCICON8   Error, return process descriptor memory and return
2046 8E0001           (gshell_beta5_yak.):04794                  ldx   #1         Scaling on
2049 D623             (gshell_beta5_yak.):04795                  ldb   WNDWPATH+1 Get GShell window path #
204B 3416             (gshell_beta5_yak.):04796                  pshs  D,X
204D 1715D5           (gshell_beta5_yak.):04797                  lbsr  SCALESW    Turn scaling on
2050 3264             (gshell_beta5_yak.):04798                  leas  4,S
2052 4F               (gshell_beta5_yak.):04799                  clra  
2053 5F               (gshell_beta5_yak.):04800                  clrb  
2054 3406             (gshell_beta5_yak.):04801                  pshs  D
2056 5C               (gshell_beta5_yak.):04802                  incb  
2057 2063             (gshell_beta5_yak.):04803                  bra   EXECPRG3   Run the program in the overlay window
                      (gshell_beta5_yak.):04804         
2059 43616E2774206F70 (gshell_beta5_yak.):04805         CANTWIND fcc   "Can't open new window"
     656E206E65772077
     696E646F77
206E 00               (gshell_beta5_yak.):04806                  fcb   NUL
                      (gshell_beta5_yak.):04807         
                      (gshell_beta5_yak.):04808         * Execute program
                      (gshell_beta5_yak.):04809         * Entry: 0-1,s = RTS address
                      (gshell_beta5_yak.):04810         *        2-3,s = Ptr to primary module name
                      (gshell_beta5_yak.):04811         *        4-5,s = Flag: 0=Make overlay window, <>0 = new window ($8000=overlay window with 8x8 font)
                      (gshell_beta5_yak.):04812         *                We might be able to repurpose the high byte to be a custom font # later as well
                      (gshell_beta5_yak.):04813         *        6-7,s = Ptr to parameter to send?
206F 3440             (gshell_beta5_yak.):04814         EXECPRGM pshs  U
2071 EC64             (gshell_beta5_yak.):04815                  ldd   4,S        Get ptr to primary module to execute
2073 3406             (gshell_beta5_yak.):04816                  pshs  D          Save for subroutine
2075 17E6AD           (gshell_beta5_yak.):04817                  lbsr  SETPDESC   Allocate a process table entry (GD.* stuff)
2078 EDE4             (gshell_beta5_yak.):04818                  std   ,S         Save ptr to new entry on stack
207A 2764             (gshell_beta5_yak.):04819                  beq   EXECPRG5   If primary module ptr empty, exit
207C EEE4             (gshell_beta5_yak.):04820                  ldu   ,S         Get ptr to primary module name
207E 17F2AA           (gshell_beta5_yak.):04821                  lbsr  LINKLOAD   Attempt to link or load it
2081 EDE1             (gshell_beta5_yak.):04822                  std   ,S++       Eat stack (and check error flag)
2083 2756             (gshell_beta5_yak.):04823                  beq   EXECPRG4   Could not load/link, return process tbl mem & exit
2085 EC66             (gshell_beta5_yak.):04824                  ldd   6,S        Get overlay window flag
2087 2722             (gshell_beta5_yak.):04825                  beq   EXECPRG1   If flag=0, don't do overlay window
                      (gshell_beta5_yak.):04826         * If hi bit set, we want to switch to 8x8 font first
2089 327A             (gshell_beta5_yak.):04827                  leas  -6,s       Make room for vars for FONT command
208B EDE4             (gshell_beta5_yak.):04828                  std   ,s         Save overlay window flag
208D CC00C8           (gshell_beta5_yak.):04829                  ldd   #QRP.FNT   Font Group ($c8)
2090 ED62             (gshell_beta5_yak.):04830                  std   2,s
2092 CC0002           (gshell_beta5_yak.):04831                  ldd   #YNT.S6X8  Default to 6x8 font
2095 6DE4             (gshell_beta5_yak.):04832                  tst   ,s         Do we want 8x8 font instead?
2097 2A02             (gshell_beta5_yak.):04833                  bpl   SavFntTp   No, save 6x8
2099 C601             (gshell_beta5_yak.):04834                  ldb   #YNT.S8X8  8x8 font (for DUMP and STAT)
209B ED64             (gshell_beta5_yak.):04835         SavFntTp std   4,s
209D 17156D           (gshell_beta5_yak.):04836                  lbsr  FONT       Change font
20A0 3266             (gshell_beta5_yak.):04837                  leas  6,s        Eat temp stack
20A2 3440             (gshell_beta5_yak.):04838                  pshs  U
20A4 170233           (gshell_beta5_yak.):04839                  lbsr  OLAYBLWT   Make overlay window
20A7 8D3E             (gshell_beta5_yak.):04840                  bsr   NOMOUSE    Shut auto-follow AND mouse cursor off
20A9 3262             (gshell_beta5_yak.):04841                  leas  2,S        Eat temp U
                      (gshell_beta5_yak.):04842         * 6,s contains 16 bit flags for overlay window (so we know if we need to switch font back to 6x8)
20AB EC68             (gshell_beta5_yak.):04843         EXECPRG1 ldd   8,S        Any extra parameter to send?
20AD 2707             (gshell_beta5_yak.):04844                  beq   EXECPRG2   No, skip ahead
20AF 3406             (gshell_beta5_yak.):04845                  pshs  D          Save ptr
20B1 17F4F0           (gshell_beta5_yak.):04846                  lbsr  STPREFIX   Add parameter stuff
20B4 3262             (gshell_beta5_yak.):04847                  leas  2,S        Eat temp ptr
20B6 EC6A             (gshell_beta5_yak.):04848         EXECPRG2 ldd   10,S
20B8 3406             (gshell_beta5_yak.):04849                  pshs  D
20BA EC68             (gshell_beta5_yak.):04850                  ldd   8,S
20BC 3406             (gshell_beta5_yak.):04851         EXECPRG3 pshs  d
20BE 3440             (gshell_beta5_yak.):04852                  pshs  U
20C0 8D3D             (gshell_beta5_yak.):04853                  bsr   FORKWAIT   Fork program, wait for program end or signal
20C2 3406             (gshell_beta5_yak.):04854                  pshs  d
20C4 8D2D             (gshell_beta5_yak.):04855                  bsr   MOUSENOW   Turn mouse back on (and mouse ptr)
                      (gshell_beta5_yak.):04856         * Force font to 6x8         
20C6 CC00C8           (gshell_beta5_yak.):04857                  ldd   #QRP.FNT   Font Group ($c8)
20C9 ED62             (gshell_beta5_yak.):04858                  std   2,s
20CB C602             (gshell_beta5_yak.):04859                  ldb   #YNT.S6X8  Default to 6x8 font
20CD ED64             (gshell_beta5_yak.):04860         SaveFnt  std   4,s
20CF 17153B           (gshell_beta5_yak.):04861                  lbsr  FONT       Change font
20D2 3266             (gshell_beta5_yak.):04862                  leas  6,s        Eat temp stack
20D4 3506             (gshell_beta5_yak.):04863                  puls  d          Get back result from FORK
20D6 170B01           (gshell_beta5_yak.):04864                  lbsr  ResetPal   Reset palettes to GSHPAL in case CONTROL was called.
20D9 35C0             (gshell_beta5_yak.):04865                  puls  U,PC
                      (gshell_beta5_yak.):04866         
                      (gshell_beta5_yak.):04867         * Could not call external program
20DB 3440             (gshell_beta5_yak.):04868         EXECPRG4 pshs  U
20DD 17E56D           (gshell_beta5_yak.):04869                  lbsr  KILPDESC   Kill the process table entry we had allocated
20E0 3262             (gshell_beta5_yak.):04870         EXECPRG5 leas  2,S        Exit with error flag set
20E2 CCFFFF           (gshell_beta5_yak.):04871                  ldd   #-1
20E5 35C0             (gshell_beta5_yak.):04872                  puls  U,PC
                      (gshell_beta5_yak.):04873         
                      (gshell_beta5_yak.):04874         * Shut auto-follow AND mouse cursor off
20E7 DC22             (gshell_beta5_yak.):04875         NOMOUSE  ldd   WNDWPATH   Get window path
20E9 3406             (gshell_beta5_yak.):04876                  pshs  d          Save it
20EB 170E0D           (gshell_beta5_yak.):04877                  lbsr  GCSETOFF   Shut gfx cursor off
20EE 170E35           (gshell_beta5_yak.):04878                  lbsr  MOUSOFF    Shut off auto-follow mouse
20F1 3586             (gshell_beta5_yak.):04879                  puls  d,PC       Get window path # back & return
                      (gshell_beta5_yak.):04880         
20F3 DC22             (gshell_beta5_yak.):04881         MOUSENOW ldd   WNDWPATH   Get path to gshell window
20F5 3406             (gshell_beta5_yak.):04882                  pshs  d          Save it
20F7 170DFB           (gshell_beta5_yak.):04883                  lbsr  CRSRAROW   Set gfx cursor to arrow
20FA 170E2D           (gshell_beta5_yak.):04884                  lbsr  INITMOUS   Set mouse parms
20FD 3586             (gshell_beta5_yak.):04885                  puls  d,PC
                      (gshell_beta5_yak.):04886         
                      (gshell_beta5_yak.):04887         * Fork a new process, and wait for it to finish (either by error or regular exit)
                      (gshell_beta5_yak.):04888         * Entry: 0-1,s=RTS address
                      (gshell_beta5_yak.):04889         *        2-3,s=Ptr to GD.* table entry for program we are forking
20FF 3440             (gshell_beta5_yak.):04890         FORKWAIT pshs  U
2101 EE64             (gshell_beta5_yak.):04891                  ldu   4,S        Get ptr to GD.* structure for program we are forking
2103 34C0             (gshell_beta5_yak.):04892                  pshs  U,PC       Save ptr for sub, and current program ctr (which will point to lbsr)
2105 17F27D           (gshell_beta5_yak.):04893                  lbsr  FORKPROC   Fork process
2108 EDE1             (gshell_beta5_yak.):04894                  std   ,S++       Successful?
210A 272F             (gshell_beta5_yak.):04895                  beq   FORKWAI3   No, flag error & kill process descriptor entry
210C 4F               (gshell_beta5_yak.):04896         FORKWAI1 clra             Successful - clear received signal
210D 5F               (gshell_beta5_yak.):04897                  clrb  
210E DD1C             (gshell_beta5_yak.):04898                  std   RECDSGNL
2110 3440             (gshell_beta5_yak.):04899                  pshs  U
2112 17F3D0           (gshell_beta5_yak.):04900                  lbsr  HNDLWAIT   Handle waiting while forked process runs
2115 3262             (gshell_beta5_yak.):04901                  leas  2,S
2117 EC46             (gshell_beta5_yak.):04902                  ldd   GD.STATS,U Get child's exit signal
2119 1083FFFF         (gshell_beta5_yak.):04903                  cmpd  #-1        If -1, try waiting again
211D 27ED             (gshell_beta5_yak.):04904                  beq   FORKWAI1
211F EDE4             (gshell_beta5_yak.):04905                  std   ,S         Save signal
2121 EC68             (gshell_beta5_yak.):04906                  ldd   8,S
2123 2729             (gshell_beta5_yak.):04907                  beq   FORKWAI5
2125 EC6A             (gshell_beta5_yak.):04908                  ldd   10,S
2127 2717             (gshell_beta5_yak.):04909                  beq   FORKWAI4
2129 ECE4             (gshell_beta5_yak.):04910                  ldd   ,S
212B 2613             (gshell_beta5_yak.):04911                  bne   FORKWAI4
212D 8E0417           (gshell_beta5_yak.):04912                  ldx   #PRESSMSG  "Press any key" message
2130 3410             (gshell_beta5_yak.):04913                  pshs  X
2132 17F13A           (gshell_beta5_yak.):04914                  lbsr  WRLNWCR
2135 3262             (gshell_beta5_yak.):04915                  leas  2,S
2137 8D17             (gshell_beta5_yak.):04916                  bsr   WAITPSIG   Wait for signal
2139 2005             (gshell_beta5_yak.):04917                  bra   FORKWAI4
                      (gshell_beta5_yak.):04918         
213B CCFFFF           (gshell_beta5_yak.):04919         FORKWAI3 ldd   #-1        Flag error
213E EDE4             (gshell_beta5_yak.):04920                  std   ,S
2140 3440             (gshell_beta5_yak.):04921         FORKWAI4 pshs  U
2142 17E508           (gshell_beta5_yak.):04922                  lbsr  KILPDESC   Kill process descriptor entry
2145 3262             (gshell_beta5_yak.):04923                  leas  2,S
2147 0D20             (gshell_beta5_yak.):04924                  tst   RAMSIZE    Only 128k?
2149 2603             (gshell_beta5_yak.):04925                  bne   FORKWAI5   No, exit
214B 170F7F           (gshell_beta5_yak.):04926                  lbsr  INITSCRN   Yes, reinit screen before exiting
214E 35C6             (gshell_beta5_yak.):04927         FORKWAI5 puls  d,U,PC
                      (gshell_beta5_yak.):04928         
2150 17E0D0           (gshell_beta5_yak.):04929         WAITPSIG lbsr  SETSGNLS   Reset mouse & keyboard signals
2153 DC1C             (gshell_beta5_yak.):04930                  ldd   RECDSGNL   Get current signal (could be dirupdate from SETSGNLS)
2155 270D             (gshell_beta5_yak.):04931                  beq   WAITPSLP   None, sleep for one.
2157 C10C             (gshell_beta5_yak.):04932                  cmpb  #DIRSIG    Queued Dir update signal?
2159 2708             (gshell_beta5_yak.):04933                  beq   WAITPSL2   Yes, sleep till next signal
215B 8D3A             (gshell_beta5_yak.):04934                  bsr   FORKWTST   Check for key press, abort or interrupt signal
215D 26F1             (gshell_beta5_yak.):04935                  bne   WAITPSIG   Different signal, wait for a different one
215F 8D1C             (gshell_beta5_yak.):04936                  bsr   FORKWSUB   Go read a key from current window
2161 20ED             (gshell_beta5_yak.):04937                  bra   WAITPSIG   Now wait for signal again
                      (gshell_beta5_yak.):04938         
2163 5F               (gshell_beta5_yak.):04939         WAITPSL2 clrb  
2164 1F01             (gshell_beta5_yak.):04940         WAITPSLP tfr   d,x        Sleep till we receive a signal
2166 103F0A           (gshell_beta5_yak.):04941                  os9   F$Sleep
2169 8D2C             (gshell_beta5_yak.):04942                  bsr   FORKWTST   Have signal, check it out
216B 2602             (gshell_beta5_yak.):04943                  bne   WAITPRSX   Not key, abort or interrupt, skip ahead
216D 8D0E             (gshell_beta5_yak.):04944                  bsr   FORKWSUB   If one of those, eat key from kybd buffer 1st
216F DC22             (gshell_beta5_yak.):04945         WAITPRSX ldd   <WNDWPATH  Release signals for window
2171 3406             (gshell_beta5_yak.):04946                  pshs  d
2173 1713C5           (gshell_beta5_yak.):04947                  lbsr  ST.RELEA
2176 3262             (gshell_beta5_yak.):04948                  leas  2,S
                      (gshell_beta5_yak.):04949                IFNE  H6309
                      (gshell_beta5_yak.):04950                  clrd             Clear out signal received & return
                      (gshell_beta5_yak.):04951                ELSE
2178 4F               (gshell_beta5_yak.):04952                  clra
2179 5F               (gshell_beta5_yak.):04953                  clrb
                      (gshell_beta5_yak.):04954                ENDC
217A DD1C             (gshell_beta5_yak.):04955                  std   <RECDSGNL
217C 39               (gshell_beta5_yak.):04956                  rts   
                      (gshell_beta5_yak.):04957         
217D 6FE2             (gshell_beta5_yak.):04958         FORKWSUB clr   ,-S
217F DC22             (gshell_beta5_yak.):04959                  ldd   WNDWPATH
2181 340E             (gshell_beta5_yak.):04960                  pshs  d,DP
2183 170CD5           (gshell_beta5_yak.):04961                  lbsr  PAUSECHO   Shut echo & pause off on current window
2186 CC0001           (gshell_beta5_yak.):04962                  ldd   #1
2189 EDE4             (gshell_beta5_yak.):04963                  std   ,S
218B DC22             (gshell_beta5_yak.):04964                  ldd   WNDWPATH
218D 3062             (gshell_beta5_yak.):04965                  leax  2,S
218F 3416             (gshell_beta5_yak.):04966                  pshs  d,X
2191 1711FA           (gshell_beta5_yak.):04967                  lbsr  I.READ     Read 1 char for current window
2194 3268             (gshell_beta5_yak.):04968                  leas  8,S
2196 39               (gshell_beta5_yak.):04969                  rts   
                      (gshell_beta5_yak.):04970         
                      (gshell_beta5_yak.):04971         * Received signal - Set for BEQ if keyboard, interrupt or abort signal, else
                      (gshell_beta5_yak.):04972         *   BNE
2197 DC1C             (gshell_beta5_yak.):04973         FORKWTST ldd   <RECDSGNL  Get last received signal
2199 0F1C             (gshell_beta5_yak.):04974                  clr   <RECDSGNL  Clear out old signal code
219B 0F1D             (gshell_beta5_yak.):04975                  clr   <RECDSGNL+1
219D C10B             (gshell_beta5_yak.):04976                  cmpb  #KYBDSGNL  Key pressed?
219F 2706             (gshell_beta5_yak.):04977                  beq   FORKWTEX   Yes, return
21A1 C102             (gshell_beta5_yak.):04978                  cmpb  #S$Abort   Abort signal?
21A3 2702             (gshell_beta5_yak.):04979                  beq   FORKWTEX   Yes, return
21A5 C103             (gshell_beta5_yak.):04980                  cmpb  #S$Intrpt  Interrupt signal, return
21A7 39               (gshell_beta5_yak.):04981         FORKWTEX rts   
                      (gshell_beta5_yak.):04982         
21A8 EC62             (gshell_beta5_yak.):04983         DRAWABOX ldd   2,S
21AA AE64             (gshell_beta5_yak.):04984                  ldx   4,S
21AC 3416             (gshell_beta5_yak.):04985                  pshs  d,X
21AE DC22             (gshell_beta5_yak.):04986                  ldd   WNDWPATH
21B0 3406             (gshell_beta5_yak.):04987                  pshs  D
21B2 1714A0           (gshell_beta5_yak.):04988                  lbsr  SETDPTR
21B5 DC5B             (gshell_beta5_yak.):04989                  ldd   BXOFFSET
21B7 ED62             (gshell_beta5_yak.):04990                  std   2,S
21B9 C608             (gshell_beta5_yak.):04991                  ldb   #8
21BB ED64             (gshell_beta5_yak.):04992                  std   4,S
21BD 171491           (gshell_beta5_yak.):04993                  lbsr  RBOX
21C0 3266             (gshell_beta5_yak.):04994                  leas  6,S
21C2 39               (gshell_beta5_yak.):04995                  rts   
                      (gshell_beta5_yak.):04996         
                      (gshell_beta5_yak.):04997         *Change current window type (from VIEW menu)
21C3 CC0004           (gshell_beta5_yak.):04998         SETHLRES ldd   #YTR.SLP   Set mouse cursor to hourglass
21C6 3406             (gshell_beta5_yak.):04999                  pshs  d
21C8 8E00CA           (gshell_beta5_yak.):05000                  ldx   #QRP.PTR
21CB DC22             (gshell_beta5_yak.):05001                  ldd   WNDWPATH
21CD 3416             (gshell_beta5_yak.):05002                  pshs  d,X
21CF 171436           (gshell_beta5_yak.):05003                  lbsr  GCSET
21D2 171366           (gshell_beta5_yak.):05004                  lbsr  ST.RELEA   Release any signals
21D5 170D4E           (gshell_beta5_yak.):05005                  lbsr  MOUSOFF    Shut off auto-follow mouse
21D8 8E001E           (gshell_beta5_yak.):05006                  ldx   #30        Sleep for 1/2 second
21DB 103F0A           (gshell_beta5_yak.):05007         SETHLRE1 os9   F$Sleep
21DE 3084             (gshell_beta5_yak.):05008                  leax  ,X         Did we finish sleeping? (ie no signal interrupt)
21E0 26F9             (gshell_beta5_yak.):05009                  bne   SETHLRE1   No, continue sleeping
21E2 DC22             (gshell_beta5_yak.):05010         SETHLRE2 ldd   WNDWPATH   Get window path
21E4 EDE4             (gshell_beta5_yak.):05011                  std   ,S
21E6 1713F3           (gshell_beta5_yak.):05012                  lbsr  DWEND      End current window
21E9 3266             (gshell_beta5_yak.):05013                  leas  6,S
21EB 17DF2B           (gshell_beta5_yak.):05014                  lbsr  SETWINDW   Set new window
21EE 17E7AD           (gshell_beta5_yak.):05015                  lbsr  CNTSCRNS   Figure out how many screens needed to hold all icons
21F1 17F5DB           (gshell_beta5_yak.):05016                  lbsr  UPDFITBL   Rebuild icon positions in file table (FL.* stuff)
21F4 160ED6           (gshell_beta5_yak.):05017                  lbra  INITSCRN   Init new screen & return from there
                      (gshell_beta5_yak.):05018         
21F7 2041726520796F75 (gshell_beta5_yak.):05019         AREYSURE fcc   " Are you sure?"
     20737572653F
2205 00               (gshell_beta5_yak.):05020                  fcb   NUL
                      (gshell_beta5_yak.):05021         
2206 0A               (gshell_beta5_yak.):05022         YES.NO   fcb   LF
2207 2020202020202020 (gshell_beta5_yak.):05023                  fcc   "        Yes!"
     59657321
2213 00               (gshell_beta5_yak.):05024                  fcb   NUL
                      (gshell_beta5_yak.):05025         
2214 CC000A           (gshell_beta5_yak.):05026         SUREBOX5 ldd   #10
2217 200D             (gshell_beta5_yak.):05027                  bra   SUREBOX9
                      (gshell_beta5_yak.):05028         
2219 CC0405           (gshell_beta5_yak.):05029         SUREBOX6 ldd   #4*256+5
221C 2008             (gshell_beta5_yak.):05030                  bra   SUREBOX9
                      (gshell_beta5_yak.):05031         
221E CC0000           (gshell_beta5_yak.):05032         SUREBOX7 ldd   #0
2221 2003             (gshell_beta5_yak.):05033                  bra   SUREBOX9
                      (gshell_beta5_yak.):05034         
2223 CC0605           (gshell_beta5_yak.):05035         SUREBOX8 ldd   #6*256+5
2226 DD59             (gshell_beta5_yak.):05036         SUREBOX9 std   SUREYPOS+1
2228 3440             (gshell_beta5_yak.):05037                  pshs  U
222A 17FEBA           (gshell_beta5_yak.):05038                  lbsr  NOMOUSE    Shut auto-follow AND mouse cursor off
222D CE0671           (gshell_beta5_yak.):05039                  ldu   #MOUSPCKT
2230 C603             (gshell_beta5_yak.):05040                  ldb   #3
2232 341E             (gshell_beta5_yak.):05041                  pshs  D,DP,X
2234 5A               (gshell_beta5_yak.):05042                  decb  
2235 3406             (gshell_beta5_yak.):05043                  pshs  D
2237 8E0006           (gshell_beta5_yak.):05044                  ldx   #6
223A C60E             (gshell_beta5_yak.):05045                  ldb   #14
223C 3416             (gshell_beta5_yak.):05046                  pshs  D,X
223E 9E58             (gshell_beta5_yak.):05047                  ldx   SUREYPOS
2240 D65A             (gshell_beta5_yak.):05048                  ldb   SUREXPOS
2242 3416             (gshell_beta5_yak.):05049                  pshs  D,X
2244 8E0001           (gshell_beta5_yak.):05050                  ldx   #1
2247 D623             (gshell_beta5_yak.):05051                  ldb   WNDWPATH+1
2249 3416             (gshell_beta5_yak.):05052                  pshs  D,X
224B 171364           (gshell_beta5_yak.):05053                  lbsr  OWSET
224E CC0004           (gshell_beta5_yak.):05054                  ldd   #ZT.DBOX
2251 ED62             (gshell_beta5_yak.):05055                  std   2,S
2253 17133C           (gshell_beta5_yak.):05056                  lbsr  ST.WNSET
2256 308C9E           (gshell_beta5_yak.):05057                  leax  <AREYSURE,PC
2259 AFE4             (gshell_beta5_yak.):05058                  stx   ,S
225B 17F011           (gshell_beta5_yak.):05059                  lbsr  WRLNWCR
225E 308CA5           (gshell_beta5_yak.):05060                  leax  <YES.NO,PC
2261 AFE4             (gshell_beta5_yak.):05061                  stx   ,S
2263 17EFF4           (gshell_beta5_yak.):05062                  lbsr  WTSTRLEN
2266 CC0010           (gshell_beta5_yak.):05063                  ldd   #16
2269 DD5B             (gshell_beta5_yak.):05064                  std   BXOFFSET
226B ED62             (gshell_beta5_yak.):05065                  std   0+2,S
226D C614             (gshell_beta5_yak.):05066                  ldb   #20
226F EDE4             (gshell_beta5_yak.):05067                  std   ,S
2271 17FF34           (gshell_beta5_yak.):05068                  lbsr  DRAWABOX
2274 17FE7C           (gshell_beta5_yak.):05069                  lbsr  MOUSENOW
2277 17DFA9           (gshell_beta5_yak.):05070                  lbsr  SETSGNLS
227A 0D1D             (gshell_beta5_yak.):05071                  tst   RECDSGNL+1
227C 2606             (gshell_beta5_yak.):05072                  bne   SUREBOX0
                      (gshell_beta5_yak.):05073                IFNE  H6309
                      (gshell_beta5_yak.):05074                  tfr   0,x        Sleep for remainder of tick (ldx #0 for 6809)
                      (gshell_beta5_yak.):05075                ELSE
227E 8E0000           (gshell_beta5_yak.):05076                  ldx   #$0000
                      (gshell_beta5_yak.):05077                ENDC
2281 103F0A           (gshell_beta5_yak.):05078                  os9   F$Sleep
2284 32E810           (gshell_beta5_yak.):05079         SUREBOX0 leas  16,S
2287 DC1C             (gshell_beta5_yak.):05080                  ldd   RECDSGNL
2289 C10A             (gshell_beta5_yak.):05081                  cmpb  #MOUSIGNL
228B 2619             (gshell_beta5_yak.):05082                  bne   SUREBOX1
228D D623             (gshell_beta5_yak.):05083                  ldb   WNDWPATH+1
228F 3446             (gshell_beta5_yak.):05084                  pshs  d,U
2291 171289           (gshell_beta5_yak.):05085                  lbsr  GT.MOUSE
2294 CC0010           (gshell_beta5_yak.):05086                  ldd   #16
2297 ED62             (gshell_beta5_yak.):05087                  std   2,S
2299 C614             (gshell_beta5_yak.):05088                  ldb   #20
229B EDE4             (gshell_beta5_yak.):05089                  std   ,S
229D 3440             (gshell_beta5_yak.):05090                  pshs  U
229F 17FBB7           (gshell_beta5_yak.):05091                  lbsr  TESTDBOX
22A2 3266             (gshell_beta5_yak.):05092                  leas  6,S
22A4 2022             (gshell_beta5_yak.):05093                  bra   SUREBOX4
                      (gshell_beta5_yak.):05094         
22A6 C10B             (gshell_beta5_yak.):05095         SUREBOX1 cmpb  #KYBDSGNL
22A8 261C             (gshell_beta5_yak.):05096                  bne   SUREBOX3
22AA C601             (gshell_beta5_yak.):05097                  ldb   #1
22AC 3406             (gshell_beta5_yak.):05098                  pshs  D
22AE 3064             (gshell_beta5_yak.):05099                  leax  4,S
22B0 D623             (gshell_beta5_yak.):05100                  ldb   WNDWPATH+1
22B2 3416             (gshell_beta5_yak.):05101                  pshs  D,X
22B4 1710D7           (gshell_beta5_yak.):05102                  lbsr  I.READ
22B7 3266             (gshell_beta5_yak.):05103                  leas  6,S
22B9 E662             (gshell_beta5_yak.):05104                  ldb   2,S
22BB C45F             (gshell_beta5_yak.):05105                  andb  #$5F
22BD C159             (gshell_beta5_yak.):05106                  cmpb  #'Y
22BF 2605             (gshell_beta5_yak.):05107                  bne   SUREBOX3
22C1 CC0001           (gshell_beta5_yak.):05108                  ldd   #1
22C4 2002             (gshell_beta5_yak.):05109                  bra   SUREBOX4
                      (gshell_beta5_yak.):05110         
22C6 4F               (gshell_beta5_yak.):05111         SUREBOX3 clra  
22C7 5F               (gshell_beta5_yak.):05112                  clrb  
22C8 EDE4             (gshell_beta5_yak.):05113         SUREBOX4 std   ,S
22CA DC22             (gshell_beta5_yak.):05114                  ldd   WNDWPATH
22CC 3406             (gshell_beta5_yak.):05115                  pshs  D
22CE 171310           (gshell_beta5_yak.):05116                  lbsr  OWEND
22D1 17FE1F           (gshell_beta5_yak.):05117                  lbsr  MOUSENOW
22D4 EC62             (gshell_beta5_yak.):05118                  ldd   2,S
22D6 3265             (gshell_beta5_yak.):05119                  leas  5,S
22D8 35C0             (gshell_beta5_yak.):05120                  puls  U,PC
                      (gshell_beta5_yak.):05121         
                      (gshell_beta5_yak.):05122         * Create overlay window for calling other programs. This ONLY gets called from
                      (gshell_beta5_yak.):05123         * EXECPRGM
                      (gshell_beta5_yak.):05124         * Does White on Black
                      (gshell_beta5_yak.):05125         * NOTE: We could make this resizable, possibly sharing the sizing routine used on new screens
22DA 3440             (gshell_beta5_yak.):05126         OLAYBLWT pshs  U
22DC C60D             (gshell_beta5_yak.):05127                  ldb   #13        Overlay window height of 13 lines
22DE 3476             (gshell_beta5_yak.):05128                  pshs  D,X,Y,U
22E0 8E004B           (gshell_beta5_yak.):05129                  ldx   #75        75 char wide window as default
22E3 0D1B             (gshell_beta5_yak.):05130                  tst   FLAG640W   On 640 screen?
22E5 2603             (gshell_beta5_yak.):05131                  bne   OLAYBLW2   Yes, continue on
22E7 8E0025           (gshell_beta5_yak.):05132                  ldx   #37        320 screen, only do 37 char wide window
22EA C609             (gshell_beta5_yak.):05133         OLAYBLW2 ldb   #9         Start Y of overlay at 9 chars down from top
22EC 3416             (gshell_beta5_yak.):05134                  pshs  D,X
22EE 8E0002           (gshell_beta5_yak.):05135                  ldx   #2         Start X of overlay at 2 chars from left
22F1 DC22             (gshell_beta5_yak.):05136                  ldd   WNDWPATH
22F3 3416             (gshell_beta5_yak.):05137                  pshs  D,X
22F5 1712F8           (gshell_beta5_yak.):05138                  lbsr  CWAREA     Change working area to outside of overlay
22F8 5F               (gshell_beta5_yak.):05139                  clrb             Background color black
22F9 ED6E             (gshell_beta5_yak.):05140                  std   14,S
22FB C603             (gshell_beta5_yak.):05141                  ldb   #3         Foreground color (WHITE)
22FD ED6C             (gshell_beta5_yak.):05142                  std   12,S
22FF C60D             (gshell_beta5_yak.):05143                  ldb   #13        Y size of overlay
2301 ED6A             (gshell_beta5_yak.):05144                  std   10,S
2303 C64B             (gshell_beta5_yak.):05145                  ldb   #75        Width of overlay
2305 0D1B             (gshell_beta5_yak.):05146                  tst   FLAG640W
2307 2602             (gshell_beta5_yak.):05147                  bne   OLAYBLW4
2309 C625             (gshell_beta5_yak.):05148                  ldb   #37        40 column width
230B ED68             (gshell_beta5_yak.):05149         OLAYBLW4 std   8,S
230D 5F               (gshell_beta5_yak.):05150                  clrb  
230E ED66             (gshell_beta5_yak.):05151                  std   6,S        Start Y=0
2310 ED64             (gshell_beta5_yak.):05152                  std   4,S        Start X=0
2312 0D20             (gshell_beta5_yak.):05153                  tst   RAMSIZE    Enough RAM to save overlay area?
2314 2701             (gshell_beta5_yak.):05154                  beq   OLAYBLW6   No, don't bother 
2316 5C               (gshell_beta5_yak.):05155                  incb             Flag to preserve contents
2317 ED62             (gshell_beta5_yak.):05156         OLAYBLW6 std   2,S
2319 171296           (gshell_beta5_yak.):05157                  lbsr  OWSET      Do overlay window
231C 32E810           (gshell_beta5_yak.):05158                  leas  16,S       Eat stack
231F ED7E             (gshell_beta5_yak.):05159                  std   -2,S       Was there an error?
2321 2644             (gshell_beta5_yak.):05160                  bne   OLAYBERR   Yes, deal with it
2323 8E0004           (gshell_beta5_yak.):05161                  ldx   #ZT.DBOX   No, convert overlay to Double box window
2326 DC22             (gshell_beta5_yak.):05162                  ldd   WNDWPATH
2328 3416             (gshell_beta5_yak.):05163                  pshs  D,X
232A 171265           (gshell_beta5_yak.):05164                  lbsr  ST.WNSET   Draw double box
232D 3264             (gshell_beta5_yak.):05165                  leas  4,S
232F 202D             (gshell_beta5_yak.):05166                  bra   OLAYBLW7
                      (gshell_beta5_yak.):05167         
                      (gshell_beta5_yak.):05168         * Create overlay window
                      (gshell_beta5_yak.):05169         * Exit: D=0 if overlay window creation failed
2331 3440             (gshell_beta5_yak.):05170         OLAYWTBK pshs  U
2333 5F               (gshell_beta5_yak.):05171                  clrb             Black background
2334 3406             (gshell_beta5_yak.):05172                  pshs  D
2336 C603             (gshell_beta5_yak.):05173                  ldb   #3         White foreground
2338 3406             (gshell_beta5_yak.):05174                  pshs  D
233A 9E0B             (gshell_beta5_yak.):05175                  ldx   WINDWSZY   Get window Y size
233C 301D             (gshell_beta5_yak.):05176                  leax  -3,X       Drop by 3 (for border)
233E DC24             (gshell_beta5_yak.):05177                  ldd   WINDWSZX   Get window X size
2340 47               (gshell_beta5_yak.):05178                  asra             Divide by 2
2341 56               (gshell_beta5_yak.):05179                  rorb  
2342 3416             (gshell_beta5_yak.):05180                  pshs  D,X        Save X/Y sizes
2344 5F               (gshell_beta5_yak.):05181                  clrb  
2345 3406             (gshell_beta5_yak.):05182                  pshs  D
2347 3406             (gshell_beta5_yak.):05183                  pshs  D
2349 0D20             (gshell_beta5_yak.):05184                  tst   RAMSIZE    >=256k?
234B 2701             (gshell_beta5_yak.):05185                  beq   OLAYWTB2   No, only 128k, so flag we are not saving contents under overlay window
234D 5C               (gshell_beta5_yak.):05186                  incb             Flag to save contents under overlay window
234E 3406             (gshell_beta5_yak.):05187         OLAYWTB2 pshs  D          Save 'save screen' flag
2350 DC22             (gshell_beta5_yak.):05188                  ldd   WNDWPATH   Get path to GShell screen 
2352 3406             (gshell_beta5_yak.):05189                  pshs  D
2354 17125B           (gshell_beta5_yak.):05190                  lbsr  OWSET      Create overlay window
2357 32E810           (gshell_beta5_yak.):05191                  leas  16,S       Eat stack
235A ED7E             (gshell_beta5_yak.):05192                  std   -2,S       Was there an error creating overlay window?
235C 2609             (gshell_beta5_yak.):05193                  bne   OLAYBERR   Yes, exit with D=0
235E EC64             (gshell_beta5_yak.):05194         OLAYBLW7 ldd   4,S
2360 3406             (gshell_beta5_yak.):05195                  pshs  D
2362 8D07             (gshell_beta5_yak.):05196                  bsr   OLAYIOPS
2364 160226           (gshell_beta5_yak.):05197                  lbra  ISC128K5
                      (gshell_beta5_yak.):05198         
2367                  (gshell_beta5_yak.):05199         OLAYBERR
                      (gshell_beta5_yak.):05200                IFNE  H6309
                      (gshell_beta5_yak.):05201                  clrd  
                      (gshell_beta5_yak.):05202                ELSE
2367 4F               (gshell_beta5_yak.):05203                  clra
2368 5F               (gshell_beta5_yak.):05204                  clrb
                      (gshell_beta5_yak.):05205                ENDC
2369 35C0             (gshell_beta5_yak.):05206                  puls  U,PC       Error creating overlay; exit with D=0
                      (gshell_beta5_yak.):05207         
236B 3440             (gshell_beta5_yak.):05208         OLAYIOPS pshs  U
236D EE64             (gshell_beta5_yak.):05209                  ldu   4,S
236F 8D0E             (gshell_beta5_yak.):05210                  bsr   IOOPTSON   Turn on page pause, echo, text cursor, and release signals on overlay window
2371 DC22             (gshell_beta5_yak.):05211                  ldd   WNDWPATH   Get GSHELL window path
2373 ED4C             (gshell_beta5_yak.):05212                  std   GD.WPATH,U Save as window path for forked program
                      (gshell_beta5_yak.):05213                IFNE  H6309
                      (gshell_beta5_yak.):05214                  clrd  
                      (gshell_beta5_yak.):05215                ELSE
2375 4F               (gshell_beta5_yak.):05216                  clra
2376 5F               (gshell_beta5_yak.):05217                  clrb
                      (gshell_beta5_yak.):05218                ENDC
2377 EDC818           (gshell_beta5_yak.):05219                  std   GD.SCRNO,U Screen # 0
237A 5C               (gshell_beta5_yak.):05220                  incb  
237B ED4E             (gshell_beta5_yak.):05221                  std   GD.DW.OW,U ? Running in an overlay window flag to 1?
237D 35C0             (gshell_beta5_yak.):05222                  puls  U,PC
                      (gshell_beta5_yak.):05223         
                      (gshell_beta5_yak.):05224         * Turn ON: page pause, echo, text cursor, and release any pending signals
237F C601             (gshell_beta5_yak.):05225         IOOPTSON ldb   #1         Flag for turning stuff ON
2381 3406             (gshell_beta5_yak.):05226                  pshs  D
2383 D623             (gshell_beta5_yak.):05227                  ldb   WNDWPATH+1 Get GShell's window path
2385 3406             (gshell_beta5_yak.):05228                  pshs  D
2387 170AD1           (gshell_beta5_yak.):05229                  lbsr  PAUSECHO   Turn pause & echo on
238A 170B59           (gshell_beta5_yak.):05230                  lbsr  CURSORON   Turn text cursor on
238D 1711AB           (gshell_beta5_yak.):05231                  lbsr  ST.RELEA   Release any pending signals
2390 3264             (gshell_beta5_yak.):05232                  leas  4,S        Eat temps & return
2392 39               (gshell_beta5_yak.):05233                  rts   
                      (gshell_beta5_yak.):05234         
2393 3440             (gshell_beta5_yak.):05235         KILLOLAY pshs  U
2395 DC22             (gshell_beta5_yak.):05236                  ldd   WNDWPATH   Get path to current window
2397 3416             (gshell_beta5_yak.):05237                  pshs  D,X
2399 6F63             (gshell_beta5_yak.):05238                  clr   3,S
239B 17119D           (gshell_beta5_yak.):05239                  lbsr  ST.RELEA   Release any pending signals
239E 170B85           (gshell_beta5_yak.):05240                  lbsr  MOUSOFF    Shut off auto-follow mouse
23A1 17123D           (gshell_beta5_yak.):05241                  lbsr  OWEND      Remove overlay window
23A4 170D3C           (gshell_beta5_yak.):05242                  lbsr  FULLSCRN   Change working area to full screen
23A7 170AB1           (gshell_beta5_yak.):05243                  lbsr  PAUSECHO
23AA 170B3D           (gshell_beta5_yak.):05244                  lbsr  CURSROFF   Shut text cursor off
23AD 170B7A           (gshell_beta5_yak.):05245                  lbsr  INITMOUS   Set mouse parms
23B0 3264             (gshell_beta5_yak.):05246                  leas  4,S
23B2 35C0             (gshell_beta5_yak.):05247                  puls  U,PC
                      (gshell_beta5_yak.):05248         
                      (gshell_beta5_yak.):05249         * Make double bordered overlay window with text in it
23B4 3440             (gshell_beta5_yak.):05250         OLAYGNBK pshs  U
23B6 EE66             (gshell_beta5_yak.):05251                  ldu   6,S
23B8 3274             (gshell_beta5_yak.):05252                  leas  -12,S      Make stack buffer
23BA ECE810           (gshell_beta5_yak.):05253                  ldd   16,S
23BD 3406             (gshell_beta5_yak.):05254                  pshs  D
23BF 171179           (gshell_beta5_yak.):05255                  lbsr  ST.RELEA   Release any pending signals
23C2 EFE4             (gshell_beta5_yak.):05256                  stu   ,S
23C4 17103E           (gshell_beta5_yak.):05257                  lbsr  STRLEN     Get string length of prompt text
23C7 ED66             (gshell_beta5_yak.):05258                  std   4+2,S
23C9 3262             (gshell_beta5_yak.):05259                  leas  2,s
                      (gshell_beta5_yak.):05260         *NOTE: SINCE THIS MULD DOES THE WIDTH OF A WINDOW, WHICH CAN NEVER GET PAST
                      (gshell_beta5_yak.):05261         * 106 CHARACTERS, WE SHOULD BE ABLE TO USE A STRAIGHT 8 BIT MUL, FOLLOWED BY
                      (gshell_beta5_yak.):05262         * AN ADDD#7 ON _BOTH_ THE 6809 & 6309 VERSIONS.
                      (gshell_beta5_yak.):05263                IFNE  H6309
                      (gshell_beta5_yak.):05264                  muld  #6         Multiply by 6 (for 6 pixel font chars)
                      (gshell_beta5_yak.):05265                  ldd   #7         Add 7 extra pixels (border?)
                      (gshell_beta5_yak.):05266                  addr  w,d
                      (gshell_beta5_yak.):05267                ELSE
23CB 3470             (gshell_beta5_yak.):05268                  pshs  x,y,u
23CD 8E0006           (gshell_beta5_yak.):05269                  ldx   #6
23D0 171480           (gshell_beta5_yak.):05270                  lbsr  MUL16
23D3 3440             (gshell_beta5_yak.):05271                  pshs  u
23D5 CC0007           (gshell_beta5_yak.):05272                  ldd   #7
23D8 E3E1             (gshell_beta5_yak.):05273                  addd  ,s++
23DA 3570             (gshell_beta5_yak.):05274                  puls  x,y,u
                      (gshell_beta5_yak.):05275                ENDC
23DC 1705ED           (gshell_beta5_yak.):05276                  lbsr  DIVDX8     Divide by 8 (shift method) for # 8 pixel chars for window width
23DF C30003           (gshell_beta5_yak.):05277                  addd  #3         Add 3 more for borders?
23E2 109324           (gshell_beta5_yak.):05278                  cmpd  WINDWSZX   Too big for current screen width?
23E5 2503             (gshell_beta5_yak.):05279                  blo   OLAYGNB1   No, continue
23E7 DC24             (gshell_beta5_yak.):05280                  ldd   WINDWSZX   Yes, change to screen width-1
23E9 5A               (gshell_beta5_yak.):05281                  decb  
23EA ED66             (gshell_beta5_yak.):05282         OLAYGNB1 std   6,S        Save overlay window width
23EC ECE814           (gshell_beta5_yak.):05283                  ldd   20,S       ???
                      (gshell_beta5_yak.):05284                IFNE  H6309
                      (gshell_beta5_yak.):05285                  incd  
                      (gshell_beta5_yak.):05286                ELSE
23EF C30001           (gshell_beta5_yak.):05287                  addd  #$0001
                      (gshell_beta5_yak.):05288                ENDC
23F2 EDE814           (gshell_beta5_yak.):05289                  std   20,S
23F5 30E4             (gshell_beta5_yak.):05290                  leax  ,S         Where we are going to store Y size
23F7 3410             (gshell_beta5_yak.):05291                  pshs  X
23F9 3064             (gshell_beta5_yak.):05292                  leax  4,S        Where we are going to store X size
23FB ECE812           (gshell_beta5_yak.):05293                  ldd   20-2,S
23FE 3416             (gshell_beta5_yak.):05294                  pshs  D,X        Save path # & ptr to where to store X size
2400 17114F           (gshell_beta5_yak.):05295                  lbsr  GT.SCSIZ   Get the current screen size
2403 3266             (gshell_beta5_yak.):05296                  leas  6,S        Eat ptrs & path duplicates
2405 EC62             (gshell_beta5_yak.):05297                  ldd   2,S        Get X size of screen
2407 10A366           (gshell_beta5_yak.):05298                  cmpd  6,S
240A 2206             (gshell_beta5_yak.):05299                  bhi   OLAYGN05   If it is wider than the proposed overlay window, jump
240C 6A66             (gshell_beta5_yak.):05300                  dec   6,S        If not, bump X size of overlay down by one
240E 6F6B             (gshell_beta5_yak.):05301                  clr   11,S       ??? Clear flag
2410 2006             (gshell_beta5_yak.):05302                  bra   OLAYGN07
                      (gshell_beta5_yak.):05303         
2412 A366             (gshell_beta5_yak.):05304         OLAYGN05 subd  6,S        Get # of characters extra we have for window vs scrn width
2414 44               (gshell_beta5_yak.):05305                  lsra             Divide by 2 (to figure out start X coord of overlay)
2415 56               (gshell_beta5_yak.):05306                  rorb
2416 ED6A             (gshell_beta5_yak.):05307                  std   10,S       Save start X coord
2418 C603             (gshell_beta5_yak.):05308         OLAYGN07 ldb   #3         Save background palette #3 (white in new windint)
241A 3406             (gshell_beta5_yak.):05309                  pshs  D
241C C601             (gshell_beta5_yak.):05310                  ldb   #1         Save foreground palette #1 (dark grey in new windint)
241E 3406             (gshell_beta5_yak.):05311                  pshs  D
2420 ECE818           (gshell_beta5_yak.):05312                  ldd   24,S       Get Y size for border (usually 2)
2423 CB03             (gshell_beta5_yak.):05313                  addb  #3         ??? Add 3 for data entry lines (not including borders)
2425 3406             (gshell_beta5_yak.):05314                  pshs  D          Save overlay Y size
2427 EC6C             (gshell_beta5_yak.):05315                  ldd   12,S       Save X size of overlay
2429 3406             (gshell_beta5_yak.):05316                  pshs  D
                      (gshell_beta5_yak.):05317         * Start Y coord for overlay
                      (gshell_beta5_yak.):05318         * NOTE: 6309 - Change to use W on first load, then SUBR
242B ECE81C           (gshell_beta5_yak.):05319                  ldd   28,S       Get Y size of border (usually 2)
242E C30003           (gshell_beta5_yak.):05320                  addd  #3         Add 3 for height added to overlay window for data entry
2431 3406             (gshell_beta5_yak.):05321                  pshs  D
2433 EC6A             (gshell_beta5_yak.):05322                  ldd   10,S       Get height of screen      
2435 A3E1             (gshell_beta5_yak.):05323                  subd  ,S++       Subtract overlay Y size
2437 47               (gshell_beta5_yak.):05324                  asra             Divide result by 2 
2438 56               (gshell_beta5_yak.):05325                  rorb  
2439 3406             (gshell_beta5_yak.):05326                  pshs  D          Save Y start coord
243B ECE814           (gshell_beta5_yak.):05327                  ldd   20,S       Start X coord of overlay
243E 3406             (gshell_beta5_yak.):05328                  pshs  D
2440 C601             (gshell_beta5_yak.):05329                  ldb   #1         Save switch to ON
2442 3406             (gshell_beta5_yak.):05330                  pshs  D
2444 ECE81E           (gshell_beta5_yak.):05331                  ldd   30,S       Get path to window
2447 3406             (gshell_beta5_yak.):05332                  pshs  D
2449 171166           (gshell_beta5_yak.):05333                  lbsr  OWSET      Make overlay window
244C 32E810           (gshell_beta5_yak.):05334                  leas  16,S       Eat temp stack
244F ED7E             (gshell_beta5_yak.):05335                  std   -2,S       If error, eat stack & return
2451 2656             (gshell_beta5_yak.):05336                  bne   OLAYGNB4
2453 8E0004           (gshell_beta5_yak.):05337                  ldx   #ZT.DBOX   Now make the overlay a double bordered box
2456 ECE810           (gshell_beta5_yak.):05338                  ldd   18-2,S
2459 3416             (gshell_beta5_yak.):05339                  pshs  D,X
245B 171134           (gshell_beta5_yak.):05340                  lbsr  ST.WNSET
245E 3420             (gshell_beta5_yak.):05341                  pshs  y          Save Y just in case
2460 108EC802         (gshell_beta5_yak.):05342                  ldy   #QRP.FNT*256+YNT.S6X8   Font buffer group & 6x8 font #
2464 CC1B3A           (gshell_beta5_yak.):05343                  ldd   #$1B3A     Font Select
2467 3426             (gshell_beta5_yak.):05344                  pshs  d,y        Save font select command
2469 30E4             (gshell_beta5_yak.):05345                  leax  ,s         Point X to it
246B 108E0004         (gshell_beta5_yak.):05346                  ldy   #4         4 byte command sequence
246F 9623             (gshell_beta5_yak.):05347                  lda   <WNDWPATH+1  Get window path
2471 103F8A           (gshell_beta5_yak.):05348                  os9   I$Write    Change font (ignore error)
2474 3264             (gshell_beta5_yak.):05349                  leas  4,s        Eat temp stack
2476 3520             (gshell_beta5_yak.):05350                  puls  y          Restore Y (not sure if needs to be preserved)
2478 3264             (gshell_beta5_yak.):05351                  leas  4,S
247A ECE814           (gshell_beta5_yak.):05352                  ldd   20,S       ??? Flag to indicate whether we add CR to text on overlay
247D 271C             (gshell_beta5_yak.):05353                  beq   OLAYGNB2   or not. If 0, do NOT add CR.
247F EC64             (gshell_beta5_yak.):05354                  ldd   4,S
2481 3406             (gshell_beta5_yak.):05355                  pshs  D          Save length of string to write
2483 ECE812           (gshell_beta5_yak.):05356                  ldd   20-2,S
2486 3446             (gshell_beta5_yak.):05357                  pshs  D,U        Save path # and ptr to text to write
2488 170F40           (gshell_beta5_yak.):05358                  lbsr  I.WRITLN   Write text to double box window
248B CC0001           (gshell_beta5_yak.):05359                  ldd   #1         Length to write=1
248E ED64             (gshell_beta5_yak.):05360                  std   4,S
2490 308DECD5         (gshell_beta5_yak.):05361                  leax  CRETURN,PC Write out a single CR
2494 AF62             (gshell_beta5_yak.):05362                  stx   2,S
2496 170F32           (gshell_beta5_yak.):05363                  lbsr  I.WRITLN
2499 200C             (gshell_beta5_yak.):05364                  bra   OLAYGNB3
                      (gshell_beta5_yak.):05365         
249B EC64             (gshell_beta5_yak.):05366         OLAYGNB2 ldd   4,S        Get length of string to write
249D 3406             (gshell_beta5_yak.):05367                  pshs  D          Save it
249F ECE812           (gshell_beta5_yak.):05368                  ldd   20-2,S     Get ptr to text to write
24A2 3446             (gshell_beta5_yak.):05369                  pshs  D,U
24A4 170F0B           (gshell_beta5_yak.):05370                  lbsr  I.WRITE    Write text out (NO CR)
24A7 3266             (gshell_beta5_yak.):05371         OLAYGNB3 leas  6,S        Eat stack & exit
24A9 326C             (gshell_beta5_yak.):05372         OLAYGNB4 leas  12,S
24AB 35C0             (gshell_beta5_yak.):05373                  puls  U,PC
                      (gshell_beta5_yak.):05374         
                      (gshell_beta5_yak.):05375         * Pop up overlay window and ask for input from user. Change to be 22 chars wide
                      (gshell_beta5_yak.):05376         * (active text area), so 6 bit font can fit full 29 char for filenames, etc. Make
                      (gshell_beta5_yak.):05377         * 2nd entry point for renames (file, folder) to pre-load buffer with existing name.
                      (gshell_beta5_yak.):05378         * destination path and parameters will not preload buffer. Also add height for some
                      (gshell_beta5_yak.):05379         * brief editing instructions
24AD 3440             (gshell_beta5_yak.):05380         INPTSCRN pshs  U
24AF CC0001           (gshell_beta5_yak.):05381                  ldd   #1
24B2 3406             (gshell_beta5_yak.):05382                  pshs  D
24B4 AE66             (gshell_beta5_yak.):05383                  ldx   6,S
24B6 DC22             (gshell_beta5_yak.):05384                  ldd   WNDWPATH
24B8 3416             (gshell_beta5_yak.):05385                  pshs  D,X
24BA 17FEF7           (gshell_beta5_yak.):05386                  lbsr  OLAYGNBK   Pop up overlay window & print prompt
24BD 170A26           (gshell_beta5_yak.):05387                  lbsr  CURSORON   Turn text cursor on
24C0 8D0B             (gshell_beta5_yak.):05388                  bsr   INPUTCHK   Get input from user
24C2 3266             (gshell_beta5_yak.):05389                  leas  2+4,S
24C4 1F03             (gshell_beta5_yak.):05390                  tfr   D,U
24C6 17FECA           (gshell_beta5_yak.):05391                  lbsr  KILLOLAY   Shut off overlay prompt window
24C9 1F30             (gshell_beta5_yak.):05392                  tfr   U,D
24CB 35C0             (gshell_beta5_yak.):05393                  puls  U,PC
                      (gshell_beta5_yak.):05394         
24CD DC22             (gshell_beta5_yak.):05395         INPUTCHK ldd   WNDWPATH   Get window path
24CF 3406             (gshell_beta5_yak.):05396                  pshs  D
24D1 17DD4F           (gshell_beta5_yak.):05397         INPTLOOP lbsr  SETSGNLS   Reset both mouse & keyboard signals
24D4 DC1C             (gshell_beta5_yak.):05398                  ldd   RECDSGNL   Any signal received?
24D6 2607             (gshell_beta5_yak.):05399                  bne   INPTSGNL   Yes, go process
24D8 1F01             (gshell_beta5_yak.):05400                  tfr   d,x
24DA 103F0A           (gshell_beta5_yak.):05401                  os9   F$Sleep    Sleep for remainder of tick
24DD DC1C             (gshell_beta5_yak.):05402                  ldd   RECDSGNL   Get signal code
24DF C103             (gshell_beta5_yak.):05403         INPTSGNL cmpb  #S$Intrpt  Interrupt signal?
24E1 2719             (gshell_beta5_yak.):05404                  beq   INPTQUIT   Yes, abort input
24E3 C102             (gshell_beta5_yak.):05405                  cmpb  #S$Abort   Abort signal?
24E5 2715             (gshell_beta5_yak.):05406                  beq   INPTQUIT   Yes, abort input
24E7 C10A             (gshell_beta5_yak.):05407                  cmpb  #MOUSIGNL  Mouse signal?
24E9 2604             (gshell_beta5_yak.):05408                  bne   INPTKYBD   No, skip ahead (must be keyboard)
                      (gshell_beta5_yak.):05409                IFNE  H6309
                      (gshell_beta5_yak.):05410                  clrd             Mouse signal, abort input & return
                      (gshell_beta5_yak.):05411                ELSE
24EB 4F               (gshell_beta5_yak.):05412                  clra
24EC 5F               (gshell_beta5_yak.):05413                  clrb
                      (gshell_beta5_yak.):05414                ENDC
24ED 200A             (gshell_beta5_yak.):05415                  bra   INPTEXIT
                      (gshell_beta5_yak.):05416         
24EF C10B             (gshell_beta5_yak.):05417         INPTKYBD cmpb  #KYBDSGNL  Keyboard signal?
                      (gshell_beta5_yak.):05418         * NOTE (6309 ONLY): IF LIVE DIRECTORY UPDATE IS ENABLED, WE WILL HAVE TO FLAG
                      (gshell_beta5_yak.):05419         *  IT HERE TO ACT ON _AFTER_ PROCESSING KEYBOARD INPUT
24F1 26DE             (gshell_beta5_yak.):05420                  bne   INPTLOOP   No, ignore any other signals
24F3 17FE89           (gshell_beta5_yak.):05421                  lbsr  IOOPTSON   Turn pause,echo,text cursor on, release signals
24F6 17EDBE           (gshell_beta5_yak.):05422                  lbsr  RDLN80CH   Go read in up to 80 chars
24F9 3262             (gshell_beta5_yak.):05423         INPTEXIT leas  2,S        Eat stack & return
24FB 39               (gshell_beta5_yak.):05424                  rts   
                      (gshell_beta5_yak.):05425         
                      (gshell_beta5_yak.):05426         * Waiting for user input, but received abort or interrupt signal
24FC 17103C           (gshell_beta5_yak.):05427         INPTQUIT lbsr  ST.RELEA   Release any other pending signals
24FF CC0001           (gshell_beta5_yak.):05428                  ldd   #1         Read 1 char from window path
2502 3406             (gshell_beta5_yak.):05429                  pshs  D
2504 3062             (gshell_beta5_yak.):05430                  leax  2,S        Point to temp spot
2506 DC22             (gshell_beta5_yak.):05431                  ldd   WNDWPATH
2508 3416             (gshell_beta5_yak.):05432                  pshs  D,X
250A 170E81           (gshell_beta5_yak.):05433                  lbsr  I.READ     Read 1 key from keyboard (hot key)
                      (gshell_beta5_yak.):05434                IFNE  H6309
                      (gshell_beta5_yak.):05435                  clrd             exit
                      (gshell_beta5_yak.):05436                ELSE
250D 4F               (gshell_beta5_yak.):05437                  clra
250E 5F               (gshell_beta5_yak.):05438                  clrb
                      (gshell_beta5_yak.):05439                ENDC
250F 3268             (gshell_beta5_yak.):05440                  leas  8,S
2511 39               (gshell_beta5_yak.):05441                  rts   
                      (gshell_beta5_yak.):05442         
2512 3440             (gshell_beta5_yak.):05443         KILOLAY2 pshs  U
2514 EC64             (gshell_beta5_yak.):05444                  ldd   4,S
2516 3406             (gshell_beta5_yak.):05445                  pshs  D
2518 171020           (gshell_beta5_yak.):05446                  lbsr  ST.RELEA
251B 1710C3           (gshell_beta5_yak.):05447                  lbsr  OWEND
251E 206D             (gshell_beta5_yak.):05448                  bra   ISC128K5
                      (gshell_beta5_yak.):05449         
                      (gshell_beta5_yak.):05450         * Initialize screen for new program - 128K
2520 3440             (gshell_beta5_yak.):05451         ISCR128K pshs  U
2522 EE66             (gshell_beta5_yak.):05452                  ldu   6,S
2524 EC42             (gshell_beta5_yak.):05453                  ldd   ID.WTYPE,U Get window type
2526 3406             (gshell_beta5_yak.):05454                  pshs  d          Save it
2528 10830006         (gshell_beta5_yak.):05455                  cmpd  #6
252C 2E5C             (gshell_beta5_yak.):05456                  bgt   ISC128K4
252E DC22             (gshell_beta5_yak.):05457                  ldd   WNDWPATH   Get GSHELL window path
2530 AE66             (gshell_beta5_yak.):05458                  ldx   6,S
2532 ED0C             (gshell_beta5_yak.):05459                  std   GD.WPATH,X Save as program window path
2534 3406             (gshell_beta5_yak.):05460                  pshs  d
2536 1709C2           (gshell_beta5_yak.):05461                  lbsr  GCSETOFF
2539 170FFF           (gshell_beta5_yak.):05462                  lbsr  ST.RELEA
253C 17109D           (gshell_beta5_yak.):05463                  lbsr  DWEND
253F EC4A             (gshell_beta5_yak.):05464                  ldd   ID.BKGND,U
2541 EDE4             (gshell_beta5_yak.):05465                  std   ,S
2543 3406             (gshell_beta5_yak.):05466                  pshs  d
2545 AE48             (gshell_beta5_yak.):05467                  ldx   ID.FRGND,U
                      (gshell_beta5_yak.):05468         * Changed for x200 screens
2547 C619             (gshell_beta5_yak.):05469                  ldb   #25
2549 3416             (gshell_beta5_yak.):05470                  pshs  d,X
254B EC68             (gshell_beta5_yak.):05471                  ldd   8,S        Get screen type
254D 17034E           (gshell_beta5_yak.):05472                  lbsr  COLS4080   40 or 80 column?
2550 2704             (gshell_beta5_yak.):05473                  beq   ISC128K1   80 column, skip ahead
2552 C628             (gshell_beta5_yak.):05474                  ldb   #40        40 columns
2554 2002             (gshell_beta5_yak.):05475                  bra   ISC128K2
                      (gshell_beta5_yak.):05476         
2556 C650             (gshell_beta5_yak.):05477         ISC128K1 ldb   #80        80 columns
2558 3406             (gshell_beta5_yak.):05478         ISC128K2 pshs  d
255A 5F               (gshell_beta5_yak.):05479                  clrb  
255B 3406             (gshell_beta5_yak.):05480                  pshs  d
255D 3406             (gshell_beta5_yak.):05481                  pshs  d
255F AE6E             (gshell_beta5_yak.):05482                  ldx   14,S       Get window type
2561 DC22             (gshell_beta5_yak.):05483                  ldd   WNDWPATH   Get path # to window
2563 3416             (gshell_beta5_yak.):05484                  pshs  D,X
2565 17103C           (gshell_beta5_yak.):05485                  lbsr  DWSET      Set the new window
2568 32E812           (gshell_beta5_yak.):05486                  leas  18,S
256B ED7E             (gshell_beta5_yak.):05487                  std   -2,S
256D 2616             (gshell_beta5_yak.):05488                  bne   ISC128K3
256F 8E0001           (gshell_beta5_yak.):05489                  ldx   #1
2572 DC22             (gshell_beta5_yak.):05490                  ldd   WNDWPATH
2574 3416             (gshell_beta5_yak.):05491                  pshs  D,X
2576 17106D           (gshell_beta5_yak.):05492                  lbsr  SELECT
2579 17FB77           (gshell_beta5_yak.):05493                  lbsr  MOUSENOW
257C 1708DC           (gshell_beta5_yak.):05494                  lbsr  PAUSECHO
257F 3264             (gshell_beta5_yak.):05495                  leas  4,S
2581 4F               (gshell_beta5_yak.):05496                  clra  
2582 5F               (gshell_beta5_yak.):05497                  clrb  
2583 2008             (gshell_beta5_yak.):05498                  bra   ISC128K5
                      (gshell_beta5_yak.):05499         
2585 CCFFFF           (gshell_beta5_yak.):05500         ISC128K3 ldd   #-1
2588 2003             (gshell_beta5_yak.):05501                  bra   ISC128K5
                      (gshell_beta5_yak.):05502         
258A CC0001           (gshell_beta5_yak.):05503         ISC128K4 ldd   #1
258D 3262             (gshell_beta5_yak.):05504         ISC128K5 leas  2,S
258F 35C0             (gshell_beta5_yak.):05505                  puls  U,PC
                      (gshell_beta5_yak.):05506         
                      (gshell_beta5_yak.):05507         * Get mouse packet - wait till button A is released
2591 3440             (gshell_beta5_yak.):05508         GETMPAKT pshs  U
2593 CE0671           (gshell_beta5_yak.):05509                  ldu   #MOUSPCKT
2596 EC64             (gshell_beta5_yak.):05510                  ldd   4,S
2598 3446             (gshell_beta5_yak.):05511                  pshs  D,U
259A 170F80           (gshell_beta5_yak.):05512         GETMPAK1 lbsr  GT.MOUSE   Get mouse packet
259D EC48             (gshell_beta5_yak.):05513                  ldd   YT.CBSA,U  Button A pressed?
259F 26F9             (gshell_beta5_yak.):05514                  bne   GETMPAK1   Yes, wait till it is released
25A1 3264             (gshell_beta5_yak.):05515                  leas  4,S
25A3 35C0             (gshell_beta5_yak.):05516                  puls  U,PC
                      (gshell_beta5_yak.):05517         
                      (gshell_beta5_yak.):05518         * Use mouse to position & size new window
25A5 3440             (gshell_beta5_yak.):05519         SETSTOP  pshs  U
25A7 3276             (gshell_beta5_yak.):05520                  leas  -10,S      Make 10 byte temp area
25A9 CE0671           (gshell_beta5_yak.):05521                  ldu   #MOUSPCKT  Point to mouse packet
25AC EC6E             (gshell_beta5_yak.):05522                  ldd   14,S
25AE 3406             (gshell_beta5_yak.):05523                  pshs  D
25B0 8DDF             (gshell_beta5_yak.):05524                  bsr   GETMPAKT   Let auto-follow mouse for start position of window run until
25B2 3262             (gshell_beta5_yak.):05525                  leas  2,S        button A is released
                      (gshell_beta5_yak.):05526         * Upper left corner is now selected
25B4 EC6E             (gshell_beta5_yak.):05527         SETSTOP1 ldd   14,S
25B6 3436             (gshell_beta5_yak.):05528                  pshs  D,X,Y
25B8 170F80           (gshell_beta5_yak.):05529                  lbsr  ST.RELEA   Release signals
25BB 4F               (gshell_beta5_yak.):05530                  clra  
25BC 5F               (gshell_beta5_yak.):05531                  clrb  
25BD DD1C             (gshell_beta5_yak.):05532                  std   RECDSGNL
25BF DD4B             (gshell_beta5_yak.):05533                  std   WPOSGOOD
25C1 CC000B           (gshell_beta5_yak.):05534                  ldd   #KYBDSGNL  Set keyboard signal (So we can trap SPACEBAR to switch screens
25C4 ED62             (gshell_beta5_yak.):05535                  std   2,S        for new window)
25C6 170F67           (gshell_beta5_yak.):05536                  lbsr  ST.SSIG
25C9 4F               (gshell_beta5_yak.):05537                  clra  
25CA 5F               (gshell_beta5_yak.):05538                  clrb  
25CB ED66             (gshell_beta5_yak.):05539                  std   6,S
25CD ED64             (gshell_beta5_yak.):05540                  std   4,S
25CF ED68             (gshell_beta5_yak.):05541                  std   8,S
25D1 ED62             (gshell_beta5_yak.):05542                  std   2,S
25D3 17107F           (gshell_beta5_yak.):05543                  lbsr  SETDPTR    Draw ptr=0,0
25D6 DC47             (gshell_beta5_yak.):05544                  ldd   PROCYSIZ   Min. X size of process
25D8 ED64             (gshell_beta5_yak.):05545                  std   4,S
25DA DC45             (gshell_beta5_yak.):05546                  ldd   PROCXSIZ   Min. Y size of process
25DC ED62             (gshell_beta5_yak.):05547                  std   2,S
25DE 17106C           (gshell_beta5_yak.):05548                  lbsr  BOX        Draw box (for window sizing)
25E1 3266             (gshell_beta5_yak.):05549                  leas  6,S
25E3 3440             (gshell_beta5_yak.):05550         SETSTOP2 pshs  U
25E5 ECE810           (gshell_beta5_yak.):05551                  ldd   16,S
25E8 3406             (gshell_beta5_yak.):05552                  pshs  D
25EA 170F30           (gshell_beta5_yak.):05553                  lbsr  GT.MOUSE   Get mouse update
25ED 3264             (gshell_beta5_yak.):05554                  leas  4,S
25EF E649             (gshell_beta5_yak.):05555                  ldb   YT.CBSB,U  Button B pressed?
25F1 2708             (gshell_beta5_yak.):05556                  beq   SETSTOP3   No, skip ahead
25F3 CC0001           (gshell_beta5_yak.):05557                  ldd   #S$Wake    Flag WAKE signal
25F6 DD1C             (gshell_beta5_yak.):05558                  std   RECDSGNL
25F8 1600CF           (gshell_beta5_yak.):05559                  lbra  SETTOP13
                      (gshell_beta5_yak.):05560         
25FB E648             (gshell_beta5_yak.):05561         SETSTOP3 ldb   YT.CBSA,U  Button A pressed?
25FD 2710             (gshell_beta5_yak.):05562                  beq   SETSTOP4   No, skip ahead
25FF EC6E             (gshell_beta5_yak.):05563                  ldd   14,S       Button B pressed - do this?
2601 3406             (gshell_beta5_yak.):05564                  pshs  D
2603 8D8C             (gshell_beta5_yak.):05565                  bsr   GETMPAKT   Do auto-follow mouse update until button A pressed
2605 3262             (gshell_beta5_yak.):05566                  leas  2,S
2607 DC4B             (gshell_beta5_yak.):05567                  ldd   WPOSGOOD
2609 102700BD         (gshell_beta5_yak.):05568                  lbeq  SETTOP13
260D 20D4             (gshell_beta5_yak.):05569                  bra   SETSTOP2
                      (gshell_beta5_yak.):05570         
                      (gshell_beta5_yak.):05571         * Button A pressed when positioning window
260F ECC818           (gshell_beta5_yak.):05572         SETSTOP4 ldd   YT.ACX,U   Get current X coord of mouse
2612 ED66             (gshell_beta5_yak.):05573                  std   6,S        Save it
2614 DC49             (gshell_beta5_yak.):05574                  ldd   PROCWTYP   Get window type
2616 170285           (gshell_beta5_yak.):05575                  lbsr  COLS4080   40 or 80 column?
2619 2706             (gshell_beta5_yak.):05576                  beq   SETSTOP5   80 column, skip ahead
261B EC66             (gshell_beta5_yak.):05577                  ldd   6,S        Get current X coord of mouse
261D 44               (gshell_beta5_yak.):05578                  lsra             divide by 2
261E 56               (gshell_beta5_yak.):05579                  rorb  
261F ED66             (gshell_beta5_yak.):05580                  std   6,S        Save it
2621 EC66             (gshell_beta5_yak.):05581         SETSTOP5 ldd   6,S        Get X coord of mouse
2623 C4F8             (gshell_beta5_yak.):05582                  andb  #%11111000 Make it evenly divisible by 8
2625 ED66             (gshell_beta5_yak.):05583                  std   6,S        Save new X coord
2627 ECC81A           (gshell_beta5_yak.):05584                  ldd   YT.ACY,U   Get current mouse Y coord
262A C4F8             (gshell_beta5_yak.):05585                  andb  #%11111000 Make it evenly divisible by 8
262C ED64             (gshell_beta5_yak.):05586                  std   4,S        Save it
262E EC66             (gshell_beta5_yak.):05587                  ldd   6,S        Get X coord
2630 10A362           (gshell_beta5_yak.):05588                  cmpd  2,S
2633 2607             (gshell_beta5_yak.):05589                  bne   SETSTOP6
2635 EC64             (gshell_beta5_yak.):05590                  ldd   4,S
2637 10A3E4           (gshell_beta5_yak.):05591                  cmpd  ,S
263A 276A             (gshell_beta5_yak.):05592                  beq   SETTOP11
263C EC64             (gshell_beta5_yak.):05593         SETSTOP6 ldd   4,S
263E D347             (gshell_beta5_yak.):05594                  addd  PROCYSIZ
2640 3406             (gshell_beta5_yak.):05595                  pshs  D
2642 EC68             (gshell_beta5_yak.):05596                  ldd   8,S
2644 D345             (gshell_beta5_yak.):05597                  addd  PROCXSIZ
2646 3406             (gshell_beta5_yak.):05598                  pshs  D
2648 AE68             (gshell_beta5_yak.):05599                  ldx   8,S
264A EC6A             (gshell_beta5_yak.):05600                  ldd   12-2,S
264C 3416             (gshell_beta5_yak.):05601                  pshs  D,X
264E 1701F7           (gshell_beta5_yak.):05602                  lbsr  CHKPOSIT   See if we can position window on existing screen
2651 3268             (gshell_beta5_yak.):05603                  leas  8,S
2653 ED7E             (gshell_beta5_yak.):05604                  std   -2,S
2655 2740             (gshell_beta5_yak.):05605                  beq   SETSTOP9
2657 DC4B             (gshell_beta5_yak.):05606                  ldd   WPOSGOOD
2659 270B             (gshell_beta5_yak.):05607                  beq   SETSTOP7
265B EC6E             (gshell_beta5_yak.):05608                  ldd   14,S
265D 3406             (gshell_beta5_yak.):05609                  pshs  D
265F 1701D9           (gshell_beta5_yak.):05610                  lbsr  GOODWPOS
2662 3262             (gshell_beta5_yak.):05611                  leas  2,S
2664 2002             (gshell_beta5_yak.):05612                  bra   SETSTOP8
                      (gshell_beta5_yak.):05613         
2666 8D1C             (gshell_beta5_yak.):05614         SETSTOP7 bsr   MAKERBOX
2668 EC64             (gshell_beta5_yak.):05615         SETSTOP8 ldd   4,S
266A EDE4             (gshell_beta5_yak.):05616                  std   ,S
266C 3406             (gshell_beta5_yak.):05617                  pshs  D
266E AE68             (gshell_beta5_yak.):05618                  ldx   8,S
2670 AF64             (gshell_beta5_yak.):05619                  stx   4,S
2672 ECE810           (gshell_beta5_yak.):05620                  ldd   18-2,S
2675 3416             (gshell_beta5_yak.):05621                  pshs  D,X
2677 170FDB           (gshell_beta5_yak.):05622                  lbsr  SETDPTR
267A 3266             (gshell_beta5_yak.):05623                  leas  6,S
267C 8D06             (gshell_beta5_yak.):05624                  bsr   MAKERBOX
267E ED7E             (gshell_beta5_yak.):05625                  std   -2,S
2680 2C24             (gshell_beta5_yak.):05626                  bge   SETTOP11
2682 2019             (gshell_beta5_yak.):05627                  bra   SETTOP10
                      (gshell_beta5_yak.):05628         
                      (gshell_beta5_yak.):05629         * Draw relative box
2684 DC47             (gshell_beta5_yak.):05630         MAKERBOX ldd   PROCYSIZ   Y size
2686 3406             (gshell_beta5_yak.):05631                  pshs  D
2688 DC45             (gshell_beta5_yak.):05632                  ldd   PROCXSIZ   X size
268A 3406             (gshell_beta5_yak.):05633                  pshs  D
268C ECE814           (gshell_beta5_yak.):05634                  ldd   18+2,S     Get path # to full-screen window underneath program windows
268F 3406             (gshell_beta5_yak.):05635                  pshs  D
2691 170FBD           (gshell_beta5_yak.):05636                  lbsr  RBOX       Draw box from current coord for currently selected size
2694 3266             (gshell_beta5_yak.):05637                  leas  6,S
2696 39               (gshell_beta5_yak.):05638                  rts   
                      (gshell_beta5_yak.):05639         
2697 DC4B             (gshell_beta5_yak.):05640         SETSTOP9 ldd   WPOSGOOD
2699 260B             (gshell_beta5_yak.):05641                  bne   SETTOP11
269B 8DE7             (gshell_beta5_yak.):05642                  bsr   MAKERBOX
269D EC6E             (gshell_beta5_yak.):05643         SETTOP10 ldd   14,S
269F 3406             (gshell_beta5_yak.):05644                  pshs  D
26A1 17017E           (gshell_beta5_yak.):05645                  lbsr  STOPSIGN
26A4 3262             (gshell_beta5_yak.):05646                  leas  2,S
26A6 DC1C             (gshell_beta5_yak.):05647         SETTOP11 ldd   RECDSGNL
26A8 1027FF37         (gshell_beta5_yak.):05648                  lbeq  SETSTOP2
26AC C10B             (gshell_beta5_yak.):05649                  cmpb  #KYBDSGNL
26AE 2613             (gshell_beta5_yak.):05650                  bne   SETTOP12
26B0 CC0001           (gshell_beta5_yak.):05651                  ldd   #1
26B3 3406             (gshell_beta5_yak.):05652                  pshs  D
26B5 306A             (gshell_beta5_yak.):05653                  leax  10,S
26B7 ECE810           (gshell_beta5_yak.):05654                  ldd   18-2,S
26BA 3416             (gshell_beta5_yak.):05655                  pshs  D,X
26BC 170CCF           (gshell_beta5_yak.):05656                  lbsr  I.READ
26BF 3266             (gshell_beta5_yak.):05657                  leas  6,S
26C1 2007             (gshell_beta5_yak.):05658                  bra   SETTOP13
                      (gshell_beta5_yak.):05659         
26C3 4F               (gshell_beta5_yak.):05660         SETTOP12 clra  
26C4 5F               (gshell_beta5_yak.):05661                  clrb  
26C5 DD1C             (gshell_beta5_yak.):05662                  std   RECDSGNL
26C7 16FF19           (gshell_beta5_yak.):05663                  lbra  SETSTOP2
                      (gshell_beta5_yak.):05664         
26CA DC1C             (gshell_beta5_yak.):05665         SETTOP13 ldd   RECDSGNL   Get last signal received
26CC 2719             (gshell_beta5_yak.):05666                  beq   SETTOP15   None, skip ahead
26CE DC4B             (gshell_beta5_yak.):05667                  ldd   WPOSGOOD   ??? Window positioning good?
26D0 2602             (gshell_beta5_yak.):05668                  bne   SETTOP14   Yes, create selected window pos/size to run program in
26D2 8DB0             (gshell_beta5_yak.):05669                  bsr   MAKERBOX   No, Draw current 
26D4 EC6E             (gshell_beta5_yak.):05670         SETTOP14 ldd   14,S
26D6 3406             (gshell_beta5_yak.):05671                  pshs  D
26D8 170160           (gshell_beta5_yak.):05672                  lbsr  GOODWPOS
26DB 3262             (gshell_beta5_yak.):05673                  leas  2,S
26DD 17039D           (gshell_beta5_yak.):05674                  lbsr  GETPSCRN   Create new window (screen) if possible
26E0 ED6E             (gshell_beta5_yak.):05675                  std   14,S       Save flag
26E2 2D19             (gshell_beta5_yak.):05676                  blt   SETTOP16
26E4 16FECD           (gshell_beta5_yak.):05677                  lbra  SETSTOP1
                      (gshell_beta5_yak.):05678         
26E7 EC6E             (gshell_beta5_yak.):05679         SETTOP15 ldd   14,S
26E9 3406             (gshell_beta5_yak.):05680                  pshs  D
26EB 170E4D           (gshell_beta5_yak.):05681                  lbsr  ST.RELEA   Release signals
26EE 3262             (gshell_beta5_yak.):05682                  leas  2,S
26F0 EC62             (gshell_beta5_yak.):05683                  ldd   2,S
26F2 AEE810           (gshell_beta5_yak.):05684                  ldx   16,S
26F5 ED8810           (gshell_beta5_yak.):05685                  std   GD.XSTRT,X
26F8 ECE4             (gshell_beta5_yak.):05686                  ldd   ,S
26FA ED8812           (gshell_beta5_yak.):05687                  std   GD.YSTRT,X
                      (gshell_beta5_yak.):05688         
26FD EC6E             (gshell_beta5_yak.):05689         SETTOP16 ldd   14,S
26FF 326A             (gshell_beta5_yak.):05690                  leas  10,S
2701 35C0             (gshell_beta5_yak.):05691                  puls  U,PC
                      (gshell_beta5_yak.):05692         
2703 3440             (gshell_beta5_yak.):05693         SETSBOTM pshs  U
2705 EE64             (gshell_beta5_yak.):05694                  ldu   4,S
2707 3272             (gshell_beta5_yak.):05695                  leas  -14,S
2709 8E0671           (gshell_beta5_yak.):05696                  ldx   #MOUSPCKT
270C AF6C             (gshell_beta5_yak.):05697                  stx   12,S
270E 4F               (gshell_beta5_yak.):05698                  clra  
270F 5F               (gshell_beta5_yak.):05699                  clrb  
2710 DD4B             (gshell_beta5_yak.):05700                  std   WPOSGOOD
2712 AEE814           (gshell_beta5_yak.):05701                  ldx   20,S
2715 EC8810           (gshell_beta5_yak.):05702                  ldd   GD.XSTRT,X
2718 D345             (gshell_beta5_yak.):05703                  addd  PROCXSIZ
271A ED62             (gshell_beta5_yak.):05704                  std   2,S
271C ED66             (gshell_beta5_yak.):05705                  std   6,S
271E EC8812           (gshell_beta5_yak.):05706                  ldd   GD.YSTRT,X
2721 D347             (gshell_beta5_yak.):05707                  addd  PROCYSIZ
2723 EDE4             (gshell_beta5_yak.):05708                  std   ,S
2725 ED64             (gshell_beta5_yak.):05709                  std   4,S
                      (gshell_beta5_yak.):05710         
2727 EC6C             (gshell_beta5_yak.):05711         SETSBOT1 ldd   12,S
2729 3406             (gshell_beta5_yak.):05712                  pshs  D
272B 3440             (gshell_beta5_yak.):05713                  pshs  U
272D 170DED           (gshell_beta5_yak.):05714                  lbsr  GT.MOUSE
2730 3264             (gshell_beta5_yak.):05715                  leas  4,S
2732 DC4B             (gshell_beta5_yak.):05716                  ldd   WPOSGOOD
2734 2706             (gshell_beta5_yak.):05717                  beq   SETSBOT2
2736 AE6C             (gshell_beta5_yak.):05718                  ldx   12,S
2738 E608             (gshell_beta5_yak.):05719                  ldb   YT.CBSA,X
273A 26EB             (gshell_beta5_yak.):05720                  bne   SETSBOT1
                      (gshell_beta5_yak.):05721         
273C AE6C             (gshell_beta5_yak.):05722         SETSBOT2 ldx   12,S       Get ptr to mouse packet
273E EC8818           (gshell_beta5_yak.):05723                  ldd   YT.ACX,X   Get current mouse X coord
2741 ED6A             (gshell_beta5_yak.):05724                  std   10,S       Save it
2743 DC49             (gshell_beta5_yak.):05725                  ldd   PROCWTYP   Get new process' window type 
2745 170156           (gshell_beta5_yak.):05726                  lbsr  COLS4080   Check if 40 or 80 column
2748 2706             (gshell_beta5_yak.):05727                  beq   SETSBOT3   80 column, skip ahead
274A EC6A             (gshell_beta5_yak.):05728                  ldd   10,S       Get mouse X coord again
274C 47               (gshell_beta5_yak.):05729                  asra             Divide by 2
274D 56               (gshell_beta5_yak.):05730                  rorb  
274E ED6A             (gshell_beta5_yak.):05731                  std   10,S       Save it
2750 EC6A             (gshell_beta5_yak.):05732         SETSBOT3 ldd   10,S       Get mouse X coord
2752 3406             (gshell_beta5_yak.):05733                  pshs  D          Save it
2754 1700BD           (gshell_beta5_yak.):05734                  lbsr  RNDUPTO8   Round up to nearest 8 pixel boundary
2757 ED6C             (gshell_beta5_yak.):05735                  std   10+2,S     Save it again
2759 AE6E             (gshell_beta5_yak.):05736                  ldx   12+2,S     Get mouse packet ptr again
275B EC881A           (gshell_beta5_yak.):05737                  ldd   YT.ACY,X   Get mouse Y coord
275E EDE4             (gshell_beta5_yak.):05738                  std   ,S         Save it
2760 1700B1           (gshell_beta5_yak.):05739                  lbsr  RNDUPTO8   Round it up to nearest 8 pixel boundary
2763 3262             (gshell_beta5_yak.):05740                  leas  2,S        Eat temp stack
2765 ED68             (gshell_beta5_yak.):05741                  std   8,S        Save it
2767 EC6A             (gshell_beta5_yak.):05742                  ldd   10,S       Get X coord
2769 10A366           (gshell_beta5_yak.):05743                  cmpd  6,S
276C 2C04             (gshell_beta5_yak.):05744                  bge   SETSBOT4
276E EC66             (gshell_beta5_yak.):05745                  ldd   6,S
2770 ED6A             (gshell_beta5_yak.):05746                  std   10,S
                      (gshell_beta5_yak.):05747         
2772 EC68             (gshell_beta5_yak.):05748         SETSBOT4 ldd   8,S
2774 10A364           (gshell_beta5_yak.):05749                  cmpd  4,S
2777 2C04             (gshell_beta5_yak.):05750                  bge   SETSBOT5
2779 EC64             (gshell_beta5_yak.):05751                  ldd   4,S
277B ED68             (gshell_beta5_yak.):05752                  std   8,S
                      (gshell_beta5_yak.):05753         
277D EC6A             (gshell_beta5_yak.):05754         SETSBOT5 ldd   10,S
277F 10A362           (gshell_beta5_yak.):05755                  cmpd  2,S
2782 2607             (gshell_beta5_yak.):05756                  bne   SETSBOT6
2784 EC68             (gshell_beta5_yak.):05757                  ldd   8,S
2786 10A3E4           (gshell_beta5_yak.):05758                  cmpd  ,S
2789 2760             (gshell_beta5_yak.):05759                  beq   SETBOT11
                      (gshell_beta5_yak.):05760         
278B AE68             (gshell_beta5_yak.):05761         SETSBOT6 ldx   8,S
278D EC6A             (gshell_beta5_yak.):05762                  ldd   12-2,S
278F 3416             (gshell_beta5_yak.):05763                  pshs  D,X
2791 AEE818           (gshell_beta5_yak.):05764                  ldx   24,S
2794 EC8812           (gshell_beta5_yak.):05765                  ldd   GD.YSTRT,X
2797 3406             (gshell_beta5_yak.):05766                  pshs  D
2799 EC8810           (gshell_beta5_yak.):05767                  ldd   GD.XSTRT,X
279C 3406             (gshell_beta5_yak.):05768                  pshs  D
279E 1700A7           (gshell_beta5_yak.):05769                  lbsr  CHKPOSIT
27A1 3268             (gshell_beta5_yak.):05770                  leas  8,S
27A3 ED7E             (gshell_beta5_yak.):05771                  std   -2,S
27A5 2738             (gshell_beta5_yak.):05772                  beq   SETSBOT9
27A7 DC4B             (gshell_beta5_yak.):05773                  ldd   WPOSGOOD
27A9 2719             (gshell_beta5_yak.):05774                  beq   SETSBOT7
27AB 3440             (gshell_beta5_yak.):05775                  pshs  U
27AD 17008B           (gshell_beta5_yak.):05776                  lbsr  GOODWPOS
27B0 3262             (gshell_beta5_yak.):05777                  leas  2,S
27B2 2012             (gshell_beta5_yak.):05778                  bra   SETSBOT8
                      (gshell_beta5_yak.):05779         
27B4 EC62             (gshell_beta5_yak.):05780         MAKEBOX2 ldd   2,S
27B6 3406             (gshell_beta5_yak.):05781                  pshs  D
27B8 EC66             (gshell_beta5_yak.):05782                  ldd   4+2,S
27BA 3406             (gshell_beta5_yak.):05783                  pshs  D
27BC 3440             (gshell_beta5_yak.):05784                  pshs  U
27BE 170E8C           (gshell_beta5_yak.):05785                  lbsr  BOX
27C1 3266             (gshell_beta5_yak.):05786                  leas  6,S
27C3 39               (gshell_beta5_yak.):05787                  rts   
                      (gshell_beta5_yak.):05788         
27C4 8DEE             (gshell_beta5_yak.):05789         SETSBOT7 bsr   MAKEBOX2
                      (gshell_beta5_yak.):05790         
27C6 EC68             (gshell_beta5_yak.):05791         SETSBOT8 ldd   8,S
27C8 EDE4             (gshell_beta5_yak.):05792                  std   ,S
27CA 3406             (gshell_beta5_yak.):05793                  pshs  D
27CC EC6C             (gshell_beta5_yak.):05794                  ldd   12,S
27CE ED64             (gshell_beta5_yak.):05795                  std   4,S
27D0 3406             (gshell_beta5_yak.):05796                  pshs  D
27D2 3440             (gshell_beta5_yak.):05797                  pshs  U
27D4 170E76           (gshell_beta5_yak.):05798                  lbsr  BOX
27D7 3266             (gshell_beta5_yak.):05799                  leas  6,S
27D9 ED7E             (gshell_beta5_yak.):05800                  std   -2,S
27DB 2C0E             (gshell_beta5_yak.):05801                  bge   SETBOT11
27DD 2006             (gshell_beta5_yak.):05802                  bra   SETBOT10
                      (gshell_beta5_yak.):05803         
27DF DC4B             (gshell_beta5_yak.):05804         SETSBOT9 ldd   WPOSGOOD
27E1 2602             (gshell_beta5_yak.):05805                  bne   SETBOT10
27E3 8DCF             (gshell_beta5_yak.):05806                  bsr   MAKEBOX2
                      (gshell_beta5_yak.):05807         
27E5 3440             (gshell_beta5_yak.):05808         SETBOT10 pshs  U
27E7 8D39             (gshell_beta5_yak.):05809                  bsr   STOPSIGN
27E9 3262             (gshell_beta5_yak.):05810                  leas  2,S
                      (gshell_beta5_yak.):05811         
27EB AE6C             (gshell_beta5_yak.):05812         SETBOT11 ldx   12,S
27ED E608             (gshell_beta5_yak.):05813                  ldb   YT.CBSA,X
27EF 1027FF34         (gshell_beta5_yak.):05814                  lbeq  SETSBOT1
27F3 DC4B             (gshell_beta5_yak.):05815                  ldd   WPOSGOOD
27F5 1026FF2E         (gshell_beta5_yak.):05816                  lbne  SETSBOT1
27F9 EC68             (gshell_beta5_yak.):05817                  ldd   8,S
27FB AEE814           (gshell_beta5_yak.):05818                  ldx   20,S
27FE ED8816           (gshell_beta5_yak.):05819                  std   GD.YEND,X
2801 3406             (gshell_beta5_yak.):05820                  pshs  D
2803 EC6C             (gshell_beta5_yak.):05821                  ldd   12,S
2805 ED8814           (gshell_beta5_yak.):05822                  std   GD.XEND,X
2808 3406             (gshell_beta5_yak.):05823                  pshs  D
280A 3440             (gshell_beta5_yak.):05824                  pshs  U
280C 170E3E           (gshell_beta5_yak.):05825                  lbsr  BOX
280F 32E814           (gshell_beta5_yak.):05826                  leas  14+6,S
2812 35C0             (gshell_beta5_yak.):05827                  puls  U,PC
                      (gshell_beta5_yak.):05828         
2814 3440             (gshell_beta5_yak.):05829         RNDUPTO8 pshs  U
2816 EC64             (gshell_beta5_yak.):05830                  ldd   4,S
2818 C30007           (gshell_beta5_yak.):05831                  addd  #7
281B C4F8             (gshell_beta5_yak.):05832                  andb  #$F8
281D C3FFFF           (gshell_beta5_yak.):05833                  addd  #-1
2820 35C0             (gshell_beta5_yak.):05834                  puls  U,PC
                      (gshell_beta5_yak.):05835         
2822 3440             (gshell_beta5_yak.):05836         STOPSIGN pshs  U
2824 CC0001           (gshell_beta5_yak.):05837                  ldd   #1
2827 DD4B             (gshell_beta5_yak.):05838                  std   WPOSGOOD
2829 C605             (gshell_beta5_yak.):05839                  ldb   #YTR.ILL
282B 3406             (gshell_beta5_yak.):05840                  pshs  D
282D 8E00CA           (gshell_beta5_yak.):05841                  ldx   #QRP.PTR
2830 EC66             (gshell_beta5_yak.):05842                  ldd   8-2,S
2832 3416             (gshell_beta5_yak.):05843                  pshs  D,X
2834 170DD1           (gshell_beta5_yak.):05844                  lbsr  GCSET
2837 3266             (gshell_beta5_yak.):05845                  leas  6,S
2839 35C0             (gshell_beta5_yak.):05846                  puls  U,PC
                      (gshell_beta5_yak.):05847         
283B 4F               (gshell_beta5_yak.):05848         GOODWPOS clra  
283C 5F               (gshell_beta5_yak.):05849                  clrb  
283D DD4B             (gshell_beta5_yak.):05850                  std   WPOSGOOD
283F EC62             (gshell_beta5_yak.):05851                  ldd   2,S
2841 3406             (gshell_beta5_yak.):05852                  pshs  D
2843 1706B5           (gshell_beta5_yak.):05853                  lbsr  GCSETOFF
2846 3586             (gshell_beta5_yak.):05854                  puls  D,PC
                      (gshell_beta5_yak.):05855         
                      (gshell_beta5_yak.):05856         * Theoretically, code to check if we can fit new window on an existing
                      (gshell_beta5_yak.):05857         * screen
2848 3440             (gshell_beta5_yak.):05858         CHKPOSIT pshs  U          Save U since we are using it
284A DE38             (gshell_beta5_yak.):05859                  ldu   PTBLSPTR   Get ptr to process descriptors table (GD.* entries)
284C 2047             (gshell_beta5_yak.):05860                  bra   CHKPOSI8   NOTE: 6809/6309: S/B ABLE TO BRA PAST STU -2,S
                      (gshell_beta5_yak.):05861         
284E ECC818           (gshell_beta5_yak.):05862         CHKPOSI1 ldd   GD.SCRNO,U Get screen # for process entry
2851 109343           (gshell_beta5_yak.):05863                  cmpd  ACTVSCRN   Same as active process screen?
2854 263C             (gshell_beta5_yak.):05864                  bne   CHKPOSI7   Nope, skip ahead
2856 ECC810           (gshell_beta5_yak.):05865                  ldd   GD.XSTRT,U
2859 10A364           (gshell_beta5_yak.):05866                  cmpd  4,S
285C 2D07             (gshell_beta5_yak.):05867                  blt   CHKPOSI3
285E 10A368           (gshell_beta5_yak.):05868                  cmpd  8,S
2861 2D0F             (gshell_beta5_yak.):05869                  blt   CHKPOSI4
2863 202D             (gshell_beta5_yak.):05870                  bra   CHKPOSI7
                      (gshell_beta5_yak.):05871         
2865 ECC814           (gshell_beta5_yak.):05872         CHKPOSI3 ldd   GD.XEND,U
2868 10A364           (gshell_beta5_yak.):05873                  cmpd  4,S
286B 2E05             (gshell_beta5_yak.):05874                  bgt   CHKPOSI4
286D 10A368           (gshell_beta5_yak.):05875                  cmpd  8,S
2870 2F20             (gshell_beta5_yak.):05876                  ble   CHKPOSI7
                      (gshell_beta5_yak.):05877         
2872 ECC812           (gshell_beta5_yak.):05878         CHKPOSI4 ldd   GD.YSTRT,U
2875 10A366           (gshell_beta5_yak.):05879                  cmpd  6,S
2878 2D07             (gshell_beta5_yak.):05880                  blt   CHKPOSI5
287A 10A36A           (gshell_beta5_yak.):05881                  cmpd  10,S
287D 2D0F             (gshell_beta5_yak.):05882                  blt   CHKPOSI6
287F 2011             (gshell_beta5_yak.):05883                  bra   CHKPOSI7
                      (gshell_beta5_yak.):05884         
2881 ECC816           (gshell_beta5_yak.):05885         CHKPOSI5 ldd   GD.YEND,U
2884 10A366           (gshell_beta5_yak.):05886                  cmpd  6,S
2887 2E05             (gshell_beta5_yak.):05887                  bgt   CHKPOSI6
2889 10A36A           (gshell_beta5_yak.):05888                  cmpd  10,S
288C 2F04             (gshell_beta5_yak.):05889                  ble   CHKPOSI7
288E 4F               (gshell_beta5_yak.):05890         CHKPOSI6 clra  
288F 5F               (gshell_beta5_yak.):05891                  clrb  
2890 35C0             (gshell_beta5_yak.):05892                  puls  U,PC
                      (gshell_beta5_yak.):05893         
2892 EEC81A           (gshell_beta5_yak.):05894         CHKPOSI7 ldu   GD.LINK,U  Get ptr to next forked program entry
2895 EF7E             (gshell_beta5_yak.):05895         CHKPOSI8 stu   -2,S       Is there one?
2897 26B5             (gshell_beta5_yak.):05896                  bne   CHKPOSI1   Yes, check positions
2899 CC0001           (gshell_beta5_yak.):05897                  ldd   #1         No, set flag to 1 & exit
289C 35C0             (gshell_beta5_yak.):05898                  puls  U,PC
                      (gshell_beta5_yak.):05899         
                      (gshell_beta5_yak.):05900         * Entry: B=screen type
                      (gshell_beta5_yak.):05901         * Exit: B=0 (80 column)
                      (gshell_beta5_yak.):05902         *       B=1 (40 column)
                      (gshell_beta5_yak.):05903         * LCB: Change to B=-1 if screen type 0 (VDG)
289E 5D               (gshell_beta5_yak.):05904         COLS4080 tstb             VDG Screen?
289F 2710             (gshell_beta5_yak.):05905                  beq   VDGTYPE    Yes, flag VDG
28A1 5A               (gshell_beta5_yak.):05906                  decb             Type 1?
28A2 270A             (gshell_beta5_yak.):05907                  beq   COLS408X   Yes, flag 40 column
28A4 C105             (gshell_beta5_yak.):05908                  cmpb  #5         320x200x4?
28A6 2706             (gshell_beta5_yak.):05909                  beq   COLS408X   Yes, flag 40 column
28A8 C107             (gshell_beta5_yak.):05910                  cmpb  #7         320x200x16?
28AA 2702             (gshell_beta5_yak.):05911                  beq   COLS408X   Yes, flag 40 column
28AC 5F               (gshell_beta5_yak.):05912                  clrb             Flag for 80 column
28AD 39               (gshell_beta5_yak.):05913                  rts   
                      (gshell_beta5_yak.):05914         
28AE C601             (gshell_beta5_yak.):05915         COLS408X ldb   #1
28B0 39               (gshell_beta5_yak.):05916                  rts
                      (gshell_beta5_yak.):05917         
28B1 C6FF             (gshell_beta5_yak.):05918         VDGTYPE  ldb   #-1        Flag VDG screen
28B3 39               (gshell_beta5_yak.):05919                  rts
                      (gshell_beta5_yak.):05920         
                      (gshell_beta5_yak.):05921         * >128k RAM, Initialize new screen
                      (gshell_beta5_yak.):05922         * Entry: U=ptr to our process descriptor table (GD.*) entry, which we finish setting up here
                      (gshell_beta5_yak.):05923         *        0-1,s : RTS return address
                      (gshell_beta5_yak.):05924         *        2-3,s : U
                      (gshell_beta5_yak.):05925         *        4-5,s : Ptr to icon descriptor (ID.*) for program to launch
                      (gshell_beta5_yak.):05926         * Exit: D=0
                      (gshell_beta5_yak.):05927         *       D=1
                      (gshell_beta5_yak.):05928         *       D=-1
28B4 3440             (gshell_beta5_yak.):05929         ISCR512K pshs  U          Preserve new screen's GD.* ptr
                      (gshell_beta5_yak.):05930         * 6809/6309: This is redundant, as U is already the GD* ptr on entry
28B6 EE64             (gshell_beta5_yak.):05931                  ldu   4,S        Get ptr to current GD (forked process descriptor table) structure
                      (gshell_beta5_yak.):05932                IFNE  H6309
                      (gshell_beta5_yak.):05933                  clrd  
                      (gshell_beta5_yak.):05934                ELSE
28B8 4F               (gshell_beta5_yak.):05935                  clra
28B9 5F               (gshell_beta5_yak.):05936                  clrb
                      (gshell_beta5_yak.):05937                ENDC
28BA DD43             (gshell_beta5_yak.):05938                  std   ACTVSCRN   Current active screen to none
28BC DD4D             (gshell_beta5_yak.):05939                  std   DWSETSTY   New window type to none
28BE AE66             (gshell_beta5_yak.):05940                  ldx   6,S        Get ID.* ptr
28C0 1702AB           (gshell_beta5_yak.):05941                  lbsr  GFXSIZXY   Set window type & minimum X/Y sizes (by pixel) into PROC* DP variables from ID.*
28C3 EC0C             (gshell_beta5_yak.):05942                  ldd   ID.MEMSZ,X Get mem size need for new program
28C5 ED4A             (gshell_beta5_yak.):05943                  std   GD.MEMSZ,U Save it in forked process table
28C7 DC49             (gshell_beta5_yak.):05944                  ldd   PROCWTYP   Get default window type new program
28C9 3434             (gshell_beta5_yak.):05945                  pshs  b,X,Y      Save window type, ID.* tbl ptr & room for 2 bytes(?)
                      (gshell_beta5_yak.):05946         * Change sub to set B to -1 if VDG screen?
28CB 8DD1             (gshell_beta5_yak.):05947                  bsr   COLS4080   Figure out screen width (32 (VDG),40,80 columns)
28CD E764             (gshell_beta5_yak.):05948                  stb   4,S        Save screen width flag (-1=32(VDG), 0=80 column, 1=40 column)
28CF 3504             (gshell_beta5_yak.):05949                  puls  b          Get window type back
28D1 5D               (gshell_beta5_yak.):05950                  tstb             VDG window?
28D2 10270104         (gshell_beta5_yak.):05951                  lbeq  SETUPVDG   Yes, just create new window (with special handling)
28D6 5A               (gshell_beta5_yak.):05952                  decb  
28D7 2715             (gshell_beta5_yak.):05953                  beq   ISC512K3   H/W text handler (type 1) - Just create new window
28D9 5A               (gshell_beta5_yak.):05954                  decb  
28DA 2712             (gshell_beta5_yak.):05955                  beq   ISC512K3   H/W text handler (type 2) - Just create new window
28DC C628             (gshell_beta5_yak.):05956                  ldb   #40        Default to 40 column screen
28DE 6D63             (gshell_beta5_yak.):05957                  tst   3,S        Was process window type 40 or 80 column?
28E0 2602             (gshell_beta5_yak.):05958                  bne   ISC512K2   40, skip ahead
                      (gshell_beta5_yak.):05959         * 6809/6309 - lslb instead (faster/smaller)
28E2 C650             (gshell_beta5_yak.):05960                  ldb   #80        It was 80
                      (gshell_beta5_yak.):05961         *         lslb             *2 so now 80
28E4 E105             (gshell_beta5_yak.):05962         ISC512K2 cmpb  ID.XSIZE+1,X If min width<>full width window, go to window sizing routine
28E6 2634             (gshell_beta5_yak.):05963                  bne   ISC512K6
                      (gshell_beta5_yak.):05964         * Changed to check for <24 (use resize), otherwise use both 24 or 25 as non-resizing
28E8 A607             (gshell_beta5_yak.):05965                  lda   ID.YSIZE+1,X If min height<>full height window, go to window sizing
28EA 8118             (gshell_beta5_yak.):05966                  cmpa  #24        routine
28EC 252E             (gshell_beta5_yak.):05967                  blo   ISC512K6
                      (gshell_beta5_yak.):05968         * New window is full size goes here. (3,s) can only be 0 (80 column) or 1 (40 column) to get here
28EE                  (gshell_beta5_yak.):05969         ISC512K3
                      (gshell_beta5_yak.):05970                IFNE  H6309
                      (gshell_beta5_yak.):05971                  clrd             Default window x,y start to 0,0
                      (gshell_beta5_yak.):05972                ELSE
28EE 4F               (gshell_beta5_yak.):05973                  clra
28EF 5F               (gshell_beta5_yak.):05974                  clrb
                      (gshell_beta5_yak.):05975                ENDC
28F0 EDC810           (gshell_beta5_yak.):05976                  std   GD.XSTRT,U
28F3 EDC812           (gshell_beta5_yak.):05977                  std   GD.YSTRT,U
28F6 CC013F           (gshell_beta5_yak.):05978                  ldd   #319       Default to 320 X pixel size
28F9 6D63             (gshell_beta5_yak.):05979                  tst   3,S        Was it 40 column window?
28FB 2603             (gshell_beta5_yak.):05980                  bne   ISC512K5   Yes, 320 is fine
28FD CC027F           (gshell_beta5_yak.):05981                  ldd   #639       80 column, so 640 X pixel size
2900 EDC814           (gshell_beta5_yak.):05982         ISC512K5 std   GD.XEND,U  Save X size for new process
2903 A607             (gshell_beta5_yak.):05983                  lda   ID.YSIZE+1,x Get Y size again
2905 C6C7             (gshell_beta5_yak.):05984                  ldb   #199       Y end is 199 (assume 25 line default)
2907 8118             (gshell_beta5_yak.):05985                  cmpa  #24        Is it only 24 line?
2909 2602             (gshell_beta5_yak.):05986                  bne   SaveYEnd   No, use 199
290B C6BF             (gshell_beta5_yak.):05987                  ldb   #191       Yes, use 191
290D 4F               (gshell_beta5_yak.):05988         SaveYEnd clra             D=Y size
290E EDC816           (gshell_beta5_yak.):05989                  std   GD.YEND,U
2911 CCFFFF           (gshell_beta5_yak.):05990                  ldd   #-1        Flag active screen with -1 (Full screen window)
2914 DD43             (gshell_beta5_yak.):05991                  std   ACTVSCRN
2916 DC49             (gshell_beta5_yak.):05992                  ldd   PROCWTYP   Get process' requested type
2918 DD4D             (gshell_beta5_yak.):05993                  std   DWSETSTY   Save as screen type to use to create new window
291A 2030             (gshell_beta5_yak.):05994                  bra   ISC512K7
                      (gshell_beta5_yak.):05995         
                      (gshell_beta5_yak.):05996         * New window is sized by user - do positioning/sizing
291C 17015E           (gshell_beta5_yak.):05997         ISC512K6 lbsr  GETPSCRN   Activate screen we will be putting new window on, and set ACTVSCRN to that screen #
291F EDE4             (gshell_beta5_yak.):05998                  std   ,S         Save flag
2921 102D00A3         (gshell_beta5_yak.):05999                  lblt  IS512K13   If -2 or -1, eat stack & exit (Either scrn tbl full, or deleted old screen)
2925 3446             (gshell_beta5_yak.):06000                  pshs  d,U
2927 17FC7B           (gshell_beta5_yak.):06001                  lbsr  SETSTOP    Position & size window with mouse - upper left corner first
292A 3264             (gshell_beta5_yak.):06002                  leas  4,S
292C EDE4             (gshell_beta5_yak.):06003                  std   ,S         Save flag
292E 102D0096         (gshell_beta5_yak.):06004                  lblt  IS512K13
2932 3446             (gshell_beta5_yak.):06005                  pshs  d,U
2934 17FDCC           (gshell_beta5_yak.):06006                  lbsr  SETSBOTM   And set bottom right
2937 EC64             (gshell_beta5_yak.):06007                  ldd   4,S
2939 EDE4             (gshell_beta5_yak.):06008                  std   ,S
293B 1705BD           (gshell_beta5_yak.):06009                  lbsr  GCSETOFF   Shut graphics cursor off
293E 3264             (gshell_beta5_yak.):06010                  leas  4,S
2940 8E0000           (gshell_beta5_yak.):06011                  ldx   #0
2943 ECE4             (gshell_beta5_yak.):06012                  ldd   ,S
2945 3416             (gshell_beta5_yak.):06013                  pshs  d,X
2947 170CE7           (gshell_beta5_yak.):06014                  lbsr  LSET
294A 3264             (gshell_beta5_yak.):06015                  leas  4,S
                      (gshell_beta5_yak.):06016         * Create new window (?)
294C DC43             (gshell_beta5_yak.):06017         ISC512K7 ldd   ACTVSCRN   Get active screen flag (-1=full screen, 0=resizable window on top of underlying Device window)
294E EDC818           (gshell_beta5_yak.):06018                  std   GD.SCRNO,U Save it in our process dsc tbl
2951 2D03             (gshell_beta5_yak.):06019                  blt   ISC512K8   If full screen window, do not inc process count in screen table (SC.*)
2953 170202           (gshell_beta5_yak.):06020                  lbsr  LINKWNDW   Update our screen table entry to bump up # of processes
2956 8603             (gshell_beta5_yak.):06021         ISC512K8 lda   #UPDAT.    Open path to next available window
2958 8E0437           (gshell_beta5_yak.):06022                  ldx   #SLASHW
295B 170A86           (gshell_beta5_yak.):06023                  lbsr  I.OPEN
295E ED62             (gshell_beta5_yak.):06024                  std   2,S        Save path #
2960 2D66             (gshell_beta5_yak.):06025                  blt   IS512K13   negative (error), skip ahead
2962 ED4C             (gshell_beta5_yak.):06026                  std   GD.WPATH,U Save as path # to window for program to fork
2964 AE6A             (gshell_beta5_yak.):06027                  ldx   10,S       ??? I think it means if this is going onto a screen that already has windows
2966 2607             (gshell_beta5_yak.):06028                  bne   ISC512K9   No, new screen, so set up from scratch
2968 4F               (gshell_beta5_yak.):06029                  clra             Foreground color 0
2969 5F               (gshell_beta5_yak.):06030                  clrb  
296A 8E0001           (gshell_beta5_yak.):06031                  ldx   #1         Background color 1
296D 2004             (gshell_beta5_yak.):06032                  bra   IS512K10   Skip ahead
                      (gshell_beta5_yak.):06033         
296F EC08             (gshell_beta5_yak.):06034         ISC512K9 ldd   ID.FRGND,X Get foreground color
2971 AE0A             (gshell_beta5_yak.):06035                  ldx   ID.BKGND,X Get background color
2973 3410             (gshell_beta5_yak.):06036         IS512K10 pshs  X          Save border color (copy of background color)
2975 3416             (gshell_beta5_yak.):06037                  pshs  d,X        Save background & foreground colors
2977 3274             (gshell_beta5_yak.):06038                  leas  -12,S      Make room on stack for rest of DWSET
2979 ECC812           (gshell_beta5_yak.):06039                  ldd   GD.YSTRT,U
297C 8D4E             (gshell_beta5_yak.):06040                  bsr   DIVDX8
297E ED66             (gshell_beta5_yak.):06041                  std   6,S        Save Y start of window
2980 ECC816           (gshell_beta5_yak.):06042                  ldd   GD.YEND,U
2983 5C               (gshell_beta5_yak.):06043                  incb  
2984 8D46             (gshell_beta5_yak.):06044                  bsr   DIVDX8
2986 A366             (gshell_beta5_yak.):06045                  subd  6,S        Save Y window size
2988 ED6A             (gshell_beta5_yak.):06046                  std   10,S
298A ECC810           (gshell_beta5_yak.):06047                  ldd   GD.XSTRT,U Save X start of window
298D 8D3D             (gshell_beta5_yak.):06048                  bsr   DIVDX8
298F ED64             (gshell_beta5_yak.):06049                  std   4,S
2991 ECC814           (gshell_beta5_yak.):06050                  ldd   GD.XEND,U  Save X window size
                      (gshell_beta5_yak.):06051                IFNE  H6309
                      (gshell_beta5_yak.):06052                  incd  
                      (gshell_beta5_yak.):06053                ELSE
2994 C30001           (gshell_beta5_yak.):06054                  addd  #$0001
                      (gshell_beta5_yak.):06055                ENDC
2997 8D33             (gshell_beta5_yak.):06056                  bsr   DIVDX8
2999 A364             (gshell_beta5_yak.):06057                  subd  4,S
299B ED68             (gshell_beta5_yak.):06058                  std   8,S
299D DC4D             (gshell_beta5_yak.):06059                  ldd   DWSETSTY   Save screen type
299F ED62             (gshell_beta5_yak.):06060                  std   2,S
29A1 ECE814           (gshell_beta5_yak.):06061                  ldd   20,S       Save path to new window
29A4 EDE4             (gshell_beta5_yak.):06062                  std   ,S
29A6 170BFB           (gshell_beta5_yak.):06063                  lbsr  DWSET      Create window with DWSet
29A9 32E812           (gshell_beta5_yak.):06064                  leas  18,S       Eat DWSet temp stack
29AC ED7E             (gshell_beta5_yak.):06065                  std   -2,S       Was there an error doing DWSet?
29AE 2615             (gshell_beta5_yak.):06066                  bne   IS512K12   Yes, exit with D=-1
29B0 DC4D             (gshell_beta5_yak.):06067                  ldd   DWSETSTY   Get screen type
29B2 2709             (gshell_beta5_yak.):06068                  beq   IS512K11   If 0 (uninitialized? Or maybe on screen?0, set GD.DW.OW to 2 return with D=1
29B4 EC62             (gshell_beta5_yak.):06069                  ldd   2,S        Get path #
29B6 3406             (gshell_beta5_yak.):06070                  pshs  D          Put on stack for sub
29B8 170C2B           (gshell_beta5_yak.):06071                  lbsr  SELECT     Select the window (D=0 is successful, D=error code otherwise (note: Carry may/may not be set)
29BB 3506             (gshell_beta5_yak.):06072                  puls  D
29BD CC0002           (gshell_beta5_yak.):06073         IS512K11 ldd   #2         Flag that it's a separate screen from GShell
29C0 ED4E             (gshell_beta5_yak.):06074                  std   GD.DW.OW,U
29C2 5A               (gshell_beta5_yak.):06075                  decb             Return with D=1
29C3 2003             (gshell_beta5_yak.):06076                  bra   IS512K13
                      (gshell_beta5_yak.):06077         
29C5 CCFFFF           (gshell_beta5_yak.):06078         IS512K12 ldd   #-1        Flag error
29C8 3264             (gshell_beta5_yak.):06079         IS512K13 leas  4,S        Eat temp stack
29CA 35C0             (gshell_beta5_yak.):06080                  puls  U,PC       Restore U & return
                      (gshell_beta5_yak.):06081         
                      (gshell_beta5_yak.):06082         
                      (gshell_beta5_yak.):06083         *D=D/8
29CC 47               (gshell_beta5_yak.):06084         DIVDX8   asra  
29CD 56               (gshell_beta5_yak.):06085                  rorb  
29CE 47               (gshell_beta5_yak.):06086                  asra  
29CF 56               (gshell_beta5_yak.):06087                  rorb  
29D0 47               (gshell_beta5_yak.):06088                  asra  
29D1 56               (gshell_beta5_yak.):06089                  rorb  
29D2 39               (gshell_beta5_yak.):06090                  rts   
                      (gshell_beta5_yak.):06091         
                      (gshell_beta5_yak.):06092         *D=D*8
29D3 58               (gshell_beta5_yak.):06093         MULDX8   aslb  
29D4 49               (gshell_beta5_yak.):06094                  rola  
29D5 58               (gshell_beta5_yak.):06095                  aslb  
29D6 49               (gshell_beta5_yak.):06096                  rola  
29D7 58               (gshell_beta5_yak.):06097                  aslb  
29D8 49               (gshell_beta5_yak.):06098                  rola  
29D9 39               (gshell_beta5_yak.):06099                  rts   
                      (gshell_beta5_yak.):06100         
                      (gshell_beta5_yak.):06101         * Set up a VDG screen - use /w to find next free window, GetStats the window name, type & size, &
                      (gshell_beta5_yak.):06102         * save them (Close the path. Use new I$ModDsc call to change the actual window name
                      (gshell_beta5_yak.):06103         * to be par=1, col=32, row=16
                      (gshell_beta5_yak.):06104         * These should be saved in the GD.* since that actually keeps track of active processes
                      (gshell_beta5_yak.):06105         * in there own windows, not in ID. Also, we are to set up some other GD.* variables here.
                      (gshell_beta5_yak.):06106         * Since a VDG window is ALWAYS "full screen", and always fixed size, we can re-purpose
                      (gshell_beta5_yak.):06107         * GD.XSTRT to GD.YEND (8 bytes):
                      (gshell_beta5_yak.):06108         * GD.WNNAM equ  GD.XSTRT (for max 5 bytes)
                      (gshell_beta5_yak.):06109         * GD.ORGTY equ  GD.XEND+1 (original window type)
                      (gshell_beta5_yak.):06110         * GD.OXSIZ equ  GD.YEND (original X size)
                      (gshell_beta5_yak.):06111         * GD.OYSIZ equ  GD.YEND+1 (original Y size)
                      (gshell_beta5_yak.):06112         * so it will start with 'W' ($57). So if GD.XSTRT=$57 or $77 (W or w), then we know it's
                      (gshell_beta5_yak.):06113         * 
                      (gshell_beta5_yak.):06114         * Entry: 0-1,s = ID.* ptr
                      (gshell_beta5_yak.):06115         *        2-3,s = 2 bytes temp storage
                      (gshell_beta5_yak.):06116         *        4-5,s = original U (GD.* ptr), which needs to be restore on exit
                      (gshell_beta5_yak.):06117         *        6-s   = RTS return address
                      (gshell_beta5_yak.):06118         *        U     = ptr our GD.* structure
                      (gshell_beta5_yak.):06119         *        X     = ptr our ID.* structure
                      (gshell_beta5_yak.):06120         *        Y     = ???
29DA 8E0437           (gshell_beta5_yak.):06121         SETUPVDG ldx   #SLASHW    Point to '/w'
29DD 8603             (gshell_beta5_yak.):06122                  lda   #UPDAT.    Try opening in update mode
29DF 103F84           (gshell_beta5_yak.):06123                  os9   I$Open
29E2 25E1             (gshell_beta5_yak.):06124                  bcs   IS512K12   Error, abort and return
29E4 1F89             (gshell_beta5_yak.):06125                  tfr   a,b        D=new path #
29E6 4F               (gshell_beta5_yak.):06126                  clra
29E7 ED62             (gshell_beta5_yak.):06127                  std   2,S        Save path # (actual 8 bit # at 3,s; 2,s is free)
29E9 3420             (gshell_beta5_yak.):06128                  pshs  y          Save data mem ptr
29EB 32E8E0           (gshell_beta5_yak.):06129                  leas  -32,s      Make temp buffer on stack
29EE 30E4             (gshell_beta5_yak.):06130                  leax  ,s         Point to it
29F0 A6E825           (gshell_beta5_yak.):06131                  lda   3+2+32,s   Get path # to our new window
29F3 C60E             (gshell_beta5_yak.):06132                  ldb   #SS.DevNm  Get the real window name
29F5 103F8D           (gshell_beta5_yak.):06133                  os9   I$GetStt
29F8 31C810           (gshell_beta5_yak.):06134                  leay  GD.WNNAM,u Point to where to hold window name
29FB CC2F04           (gshell_beta5_yak.):06135                  ldd   #'/*256+4  Pre-pend '/' & max dsc name ctr
29FE A7A0             (gshell_beta5_yak.):06136                  sta   ,y+
2A00 A680             (gshell_beta5_yak.):06137         CpyNmLp  lda   ,x+
2A02 A7A0             (gshell_beta5_yak.):06138                  sta   ,y+
2A04 2B0F             (gshell_beta5_yak.):06139                  bmi   DonCpyNm   Copy until high bit set
2A06 5A               (gshell_beta5_yak.):06140                  decb
2A07 26F7             (gshell_beta5_yak.):06141                  bne   CpyNmLp    or until max size (5 chars) met
2A09 32E820           (gshell_beta5_yak.):06142                  leas  32,s       Couldn't fit name, eat temp stack
2A0C 3520             (gshell_beta5_yak.):06143                  puls  y          Restore Y
                      (gshell_beta5_yak.):06144         * Window descriptor name too long error here
2A0E A663             (gshell_beta5_yak.):06145                  lda   3,s        Get path #
2A10 103F8F           (gshell_beta5_yak.):06146                  os9   I$Close    Close /w
2A13 20B0             (gshell_beta5_yak.):06147                  bra   IS512K12   Could not fit window name, abort with error
                      (gshell_beta5_yak.):06148                  
2A15 847F             (gshell_beta5_yak.):06149         DonCpyNm anda  #$7F       Strip high bit
2A17 C60D             (gshell_beta5_yak.):06150                  ldb   #C$CR      And append CR
2A19 ED3F             (gshell_beta5_yak.):06151                  std   -1,y
2A1B 32E820           (gshell_beta5_yak.):06152                  leas  32,s       Eat temp stack
2A1E A665             (gshell_beta5_yak.):06153                  lda   3+2,s      Get window path # back
2A20 C693             (gshell_beta5_yak.):06154                  ldb   #SS.ScTyp  Get window's original screen type
2A22 103F8D           (gshell_beta5_yak.):06155                  os9   I$GetStt
2A25 A7C815           (gshell_beta5_yak.):06156                  sta   GD.ORGTY,u Save it for restoring after program is done
2A28 A665             (gshell_beta5_yak.):06157                  lda   3+2,s      Get window path # back         
2A2A C626             (gshell_beta5_yak.):06158                  ldb   #SS.ScSiz  Get window's original screen size
2A2C 103F8D           (gshell_beta5_yak.):06159                  os9   I$GetStt
2A2F 1F10             (gshell_beta5_yak.):06160                  tfr   x,d
2A31 E7C816           (gshell_beta5_yak.):06161                  stb   GD.OXSIZ,u Save window's original X size
2A34 1F20             (gshell_beta5_yak.):06162                  tfr   y,d
2A36 E7C817           (gshell_beta5_yak.):06163                  stb   GD.OYSIZ,u Save window's original Y size
2A39 3520             (gshell_beta5_yak.):06164                  puls  y          Restore data mem ptr
                      (gshell_beta5_yak.):06165         * We have saved everything that we need to restore the window afterwards. Now, Close the path,
                      (gshell_beta5_yak.):06166         * quickly modify the descriptor for VDG, then open it again with the new settings
2A3B A663             (gshell_beta5_yak.):06167                  lda   3,s        Get window path # back
2A3D 103F8F           (gshell_beta5_yak.):06168                  os9   I$Close    Close it (so we can change descriptor)
2A40 4F               (gshell_beta5_yak.):06169                  clra             Flag that we are changing to VDG
2A41 170E95           (gshell_beta5_yak.):06170                  lbsr  ModDesc    Go change the descriptor
2A44 252B             (gshell_beta5_yak.):06171                  bcs   AbortVDG   Error, abort
2A46 8603             (gshell_beta5_yak.):06172                  lda   #UPDAT.    Open window again with updated VDG settings
2A48 30C810           (gshell_beta5_yak.):06173                  leax  GD.WNNAM,u Point to real window name including slash
2A4B 103F84           (gshell_beta5_yak.):06174                  os9   I$Open
2A4E 2521             (gshell_beta5_yak.):06175                  bcs   AbortVDG   error, abort
2A50 1F89             (gshell_beta5_yak.):06176                  tfr   a,b
2A52 4F               (gshell_beta5_yak.):06177                  clra
2A53 ED4C             (gshell_beta5_yak.):06178                  std   GD.WPATH,u Save path # to VDG window
                      (gshell_beta5_yak.):06179         * I THINK THIS IS CONFUSING THE KILPDS12 ROUTINE; -1 MEANS PROCESS DESCRIPTOR ALLOCATED,
                      (gshell_beta5_yak.):06180         *  BUT NO WINDOW MADE YET. WILL NEED TO CHANGE VDG TO A SPECIAL. -2 SAME AS ACTIVe
2A55 CCFFFE           (gshell_beta5_yak.):06181                  ldd   #-2
2A58 EDC818           (gshell_beta5_yak.):06182                  std   GD.SCRNO,u Flag as -2 for screen # (quick check later for VDG so we can restore window settings)
2A5B DD43             (gshell_beta5_yak.):06183                  std   ACTVSCRN   -2 as screen # for VDG
2A5D 3420             (gshell_beta5_yak.):06184                  pshs  y          Save data mem ptr
2A5F A64D             (gshell_beta5_yak.):06185                  lda   GD.WPATH+1,u Get path #
2A61 308C17           (gshell_beta5_yak.):06186                  leax  <VDGSlct,pc Send SELECT to window
2A64 108E0002         (gshell_beta5_yak.):06187                  ldy   #2
2A68 103F8A           (gshell_beta5_yak.):06188                  os9   I$Write    CLS to VDG screen (hopefully forces display for select)
2A6B 3520             (gshell_beta5_yak.):06189                  puls  y          Restore data mem ptr
2A6D 1024FF4C         (gshell_beta5_yak.):06190                  lbcc  IS512K11   No error, return
2A71 1F98             (gshell_beta5_yak.):06191         AbortVDG tfr   b,a        Move error code to D
2A73 4F               (gshell_beta5_yak.):06192                  clra
2A74 EDA9044D         (gshell_beta5_yak.):06193                  std   ERRNO,y    Save it
2A78 16FF4A           (gshell_beta5_yak.):06194                  lbra  IS512K12   Return with error
                      (gshell_beta5_yak.):06195         
2A7B 1B21             (gshell_beta5_yak.):06196         VDGSlct  fcb   $1b,$21    Select Esc. sequence
                      (gshell_beta5_yak.):06197         
                      (gshell_beta5_yak.):06198         * Find (or create) screen to put resizable window on
                      (gshell_beta5_yak.):06199         * NOTE: 6809/6309: SINCE MAX=8, LDB ACTVSCRN+1 WOULD BE FINE
                      (gshell_beta5_yak.):06200         * Exit: D=-1 : screen table full, could not create new screen
                      (gshell_beta5_yak.):06201         *       D=-2 : Closed existing screen table, did not create new screen
2A7D 3440             (gshell_beta5_yak.):06202         GETPSCRN pshs  U          Preserve U
2A7F 327E             (gshell_beta5_yak.):06203                  leas  -2,S       Make room on stack
2A81 CE11C7           (gshell_beta5_yak.):06204                  ldu   #SCRNTABL  Point to start of screens used table
                      (gshell_beta5_yak.):06205         * 6809/6309 - use LDB ACTVSCRN+1, and leau b,u (ACTVSCRN is only 0-7)
2A84 DC43             (gshell_beta5_yak.):06206                  ldd   ACTVSCRN   Get active screen #
2A86 58               (gshell_beta5_yak.):06207                  aslb             x4 (size of each entry)
2A87 58               (gshell_beta5_yak.):06208                  aslb  
2A88 33CB             (gshell_beta5_yak.):06209                  leau  D,U        Point to active screen entry
2A8A D644             (gshell_beta5_yak.):06210                  ldb   ACTVSCRN+1 Get active screen # again
2A8C 2726             (gshell_beta5_yak.):06211                  beq   GETPSCR3   1st entry, skip ahead (?)
2A8E 3044             (gshell_beta5_yak.):06212                  leax  SC.SIZE,U  Point to next entry
2A90 A602             (gshell_beta5_yak.):06213                  lda   SC.USERS,X Any paths already open to this next screen?
2A92 2620             (gshell_beta5_yak.):06214                  bne   GETPSCR3   Yes, skip ahead
                      (gshell_beta5_yak.):06215         * Cleanup? seems to close screen path if no programs on screen
2A94 DC22             (gshell_beta5_yak.):06216                  ldd   WNDWPATH   No programs on this screen, get GSHELL window path
2A96 3416             (gshell_beta5_yak.):06217                  pshs  D,X
2A98 170B4B           (gshell_beta5_yak.):06218                  lbsr  SELECT     Go select GSHELL window
2A9B 3516             (gshell_beta5_yak.):06219                  puls  D,X
2A9D 1700C5           (gshell_beta5_yak.):06220                  lbsr  CLOSE.X    Close screen entry path
2AA0 CCFFFE           (gshell_beta5_yak.):06221                  ldd   #-2        Exit flag
2AA3 2029             (gshell_beta5_yak.):06222                  bra   GETPSCR6
                      (gshell_beta5_yak.):06223         
                      (gshell_beta5_yak.):06224         * NOTE: IN ADDITION TO ADDING SUPPORT FOR VDG SCREENS, AND WINDOW TYPES
                      (gshell_beta5_yak.):06225         *  WITH GSHELL PALETTES (INSTEAD OF STANDARD), WE SHOULD PUT IN A WILDCARD
                      (gshell_beta5_yak.):06226         *  ONE FOR PROGRAMS THAT DON'T CARE (EX. ZONE RUNNER, ROGUE, ETC.) THAT CAN
                      (gshell_beta5_yak.):06227         *  RUN ON ANY TYPE AS LONG AS THERE IS ROOM, BASED ON MINIMUM X/Y SIZES.
                      (gshell_beta5_yak.):06228         *  (AND IT HAS TO BE ON A GRAPHICS WINDOW)
                      (gshell_beta5_yak.):06229         * SC.USERS count will be at least 1 (for the underlying size select window)
                      (gshell_beta5_yak.):06230         
                      (gshell_beta5_yak.):06231         * This chunk checks against window types for screens in active use...
2AA5 A641             (gshell_beta5_yak.):06232         GETPSCR1 lda   SC.WTYPE,U Get screen type
2AA7 914A             (gshell_beta5_yak.):06233                  cmpa  PROCWTYP+1 Same as window type needed for process?
2AA9 2604             (gshell_beta5_yak.):06234                  bne   GETPSCR2   No, try next screen
2AAB A642             (gshell_beta5_yak.):06235                  lda   SC.USERS,U Screen initialized already?
2AAD 262F             (gshell_beta5_yak.):06236                  bne   GETPSCR8   Yes, skip ahead
2AAF 5C               (gshell_beta5_yak.):06237         GETPSCR2 incb             Set active screen to next one
2AB0 D744             (gshell_beta5_yak.):06238                  stb   ACTVSCRN+1
2AB2 3344             (gshell_beta5_yak.):06239                  leau  SC.SIZE,U  Bump to next screen table
2AB4 C108             (gshell_beta5_yak.):06240         GETPSCR3 cmpb  #8         On last possible active screen?
2AB6 2DED             (gshell_beta5_yak.):06241                  blt   GETPSCR1   No, check this screen
                      (gshell_beta5_yak.):06242         * No current screen entry of correct type
2AB8 CE11C7           (gshell_beta5_yak.):06243                  ldu   #SCRNTABL  IF on last screen, point to start of screen table
2ABB 5F               (gshell_beta5_yak.):06244                  clrb             Next routine starts @ screen 0 again
2ABC 2007             (gshell_beta5_yak.):06245                  bra   GETPSCR5   See if we can add new screen to list
                      (gshell_beta5_yak.):06246         
                      (gshell_beta5_yak.):06247         * This chunk checks to see if we can add a new screen to the screen table
2ABE A642             (gshell_beta5_yak.):06248         GETPSCR4 lda   SC.USERS,U Is this screen initialized already?
2AC0 2710             (gshell_beta5_yak.):06249                  beq   GETPSCR7   No, use it
2AC2 5C               (gshell_beta5_yak.):06250                  incb             Yes, try next one
2AC3 3344             (gshell_beta5_yak.):06251                  leau  SC.SIZE,U
2AC5 D744             (gshell_beta5_yak.):06252         GETPSCR5 stb   ACTVSCRN+1 Save screen #
2AC7 C108             (gshell_beta5_yak.):06253                  cmpb  #8         On last one?
2AC9 2DF3             (gshell_beta5_yak.):06254                  blt   GETPSCR4   No, check next
2ACB CCFFFF           (gshell_beta5_yak.):06255                  ldd   #-1        ERROR - no room for new screen
2ACE EDE4             (gshell_beta5_yak.):06256         GETPSCR6 std   ,S         Save flag as to what happened
2AD0 2017             (gshell_beta5_yak.):06257                  bra   GETPSCR9   Restore regs & exit
                      (gshell_beta5_yak.):06258         
                      (gshell_beta5_yak.):06259         * Empty screen table entry - add new entry (Screen) for process
2AD2 DC49             (gshell_beta5_yak.):06260         GETPSCR7 ldd   PROCWTYP   Get process window type
2AD4 E741             (gshell_beta5_yak.):06261                  stb   SC.WTYPE,U Save as screen table screen type
2AD6 3406             (gshell_beta5_yak.):06262                  pshs  D          Save it
2AD8 8D2E             (gshell_beta5_yak.):06263                  bsr   OPNSLSHW   Open new window (/w)
2ADA 3262             (gshell_beta5_yak.):06264                  leas  2,S        Eat stack
2ADC E7C4             (gshell_beta5_yak.):06265                  stb   SC.PTHNO,U Save new window path #
2ADE E6C4             (gshell_beta5_yak.):06266         GETPSCR8 ldb   SC.PTHNO,U Get path # to screen
2AE0 1D               (gshell_beta5_yak.):06267                  sex              Save it as D for subroutines
2AE1 EDE4             (gshell_beta5_yak.):06268                  std   ,S
2AE3 2D04             (gshell_beta5_yak.):06269                  blt   GETPSCR9   If new window failed, exit
2AE5 0C44             (gshell_beta5_yak.):06270                  inc   ACTVSCRN+1 Bump up active screen #
2AE7 8D02             (gshell_beta5_yak.):06271                  bsr   INITPSCR   Select new window, LSET to XOR, set up mouse
2AE9 35C6             (gshell_beta5_yak.):06272         GETPSCR9 puls  D,U,PC
                      (gshell_beta5_yak.):06273         
                      (gshell_beta5_yak.):06274         * Select new window, prepare for sizing/etc.
2AEB 3406             (gshell_beta5_yak.):06275         INITPSCR pshs  D          Save new window path #
2AED 3406             (gshell_beta5_yak.):06276                  pshs  D          & again
2AEF 170438           (gshell_beta5_yak.):06277                  lbsr  INITMOUS   Set mouse parms & turn auto follow on
2AF2 17D71E           (gshell_beta5_yak.):06278                  lbsr  CURSCLOF   Cursor & scaling off
2AF5 170AEE           (gshell_beta5_yak.):06279                  lbsr  SELECT     Select new window as interactive one
2AF8 CC0003           (gshell_beta5_yak.):06280                  ldd   #3         gfx logic set to XOR
2AFB ED62             (gshell_beta5_yak.):06281                  std   2,S
2AFD 170B31           (gshell_beta5_yak.):06282                  lbsr  LSET
2B00 6F63             (gshell_beta5_yak.):06283                  clr   3,S
2B02 170356           (gshell_beta5_yak.):06284                  lbsr  PAUSECHO   Shut echo & pause off
2B05 3264             (gshell_beta5_yak.):06285                  leas  4,S        Eat stack & return
2B07 39               (gshell_beta5_yak.):06286                  rts   
                      (gshell_beta5_yak.):06287         
                      (gshell_beta5_yak.):06288         * Create new window - GSHPAL window stuff & VDGINT stuff should go here!
                      (gshell_beta5_yak.):06289         * Called from GETPSCR7 only. Should be able to sneak GSHPAL flag as 1st byte
                      (gshell_beta5_yak.):06290         *   of window type (0=not gshpal, <>0=gshpal), so window type needs no
                      (gshell_beta5_yak.):06291         *   massaging here (or, do masks here)
                      (gshell_beta5_yak.):06292         * Entry: 0-1,s = RTS address
                      (gshell_beta5_yak.):06293         *        2-3,s = window type
                      (gshell_beta5_yak.):06294         * Exit: D=New window path #
                      (gshell_beta5_yak.):06295         *         <0 means failure on OPEN
2B08 3440             (gshell_beta5_yak.):06296         OPNSLSHW pshs  U
2B0A 8E0437           (gshell_beta5_yak.):06297                  ldx   #SLASHW
2B0D 8603             (gshell_beta5_yak.):06298                  lda   #UPDAT.
2B0F 1708D2           (gshell_beta5_yak.):06299                  lbsr  I.OPEN     Open /w
2B12 1F03             (gshell_beta5_yak.):06300                  tfr   D,U        Copy path # to U
2B14 ED7E             (gshell_beta5_yak.):06301                  std   -2,S
2B16 2D34             (gshell_beta5_yak.):06302                  blt   OPNSLSHX   Error opening path, exit 
2B18 C650             (gshell_beta5_yak.):06303                  ldb   #80        Default to 80 column
2B1A A665             (gshell_beta5_yak.):06304                  lda   5,S        Get window type (could put GSHPAL flag at 4,s)
2B1C 8401             (gshell_beta5_yak.):06305                  anda  #1         See if 40 or 80 column window
2B1E 2602             (gshell_beta5_yak.):06306                  bne   OPNSLSH2   80, skip ahead
                      (gshell_beta5_yak.):06307         * 6809/6309 - lsrb instead
                      (gshell_beta5_yak.):06308         *         lsrb             40, change window width to 40
2B20 C628             (gshell_beta5_yak.):06309                  ldb   #40        40, change window width to 40
2B22 3406             (gshell_beta5_yak.):06310         OPNSLSH2 pshs  d          Save window width for DWSET
2B24 C602             (gshell_beta5_yak.):06311                  ldb   #2         Border color=2
2B26 3406             (gshell_beta5_yak.):06312                  pshs  d
2B28 5F               (gshell_beta5_yak.):06313                  clrb             Background color=0
2B29 3406             (gshell_beta5_yak.):06314                  pshs  d
2B2B 5C               (gshell_beta5_yak.):06315                  incb             Foreground color=1
2B2C 3406             (gshell_beta5_yak.):06316                  pshs  d
2B2E C619             (gshell_beta5_yak.):06317                  ldb   #25        Window height=25
2B30 3406             (gshell_beta5_yak.):06318                  pshs  d
2B32 AE68             (gshell_beta5_yak.):06319                  ldx   8,S        Get window width
2B34 5F               (gshell_beta5_yak.):06320                  clrb  
2B35 3416             (gshell_beta5_yak.):06321                  pshs  d,X        Save Y start & window width
2B37 3406             (gshell_beta5_yak.):06322                  pshs  d          Save X start
2B39 ECE814           (gshell_beta5_yak.):06323                  ldd   20,S       Get window type
2B3C 3406             (gshell_beta5_yak.):06324                  pshs  d          Save for DWSET
2B3E 3440             (gshell_beta5_yak.):06325                  pshs  U          Save path # to new window (new screen)
2B40 170A61           (gshell_beta5_yak.):06326                  lbsr  DWSET      Set the window
2B43 5F               (gshell_beta5_yak.):06327                  clrb  
2B44 ED62             (gshell_beta5_yak.):06328                  std   2,S
2B46 170AE0           (gshell_beta5_yak.):06329                  lbsr  DWPROTSW
2B49 32E814           (gshell_beta5_yak.):06330                  leas  20,S       Eat temp stack
2B4C 1F30             (gshell_beta5_yak.):06331         OPNSLSHX tfr   U,D        Transfer new window path # to D & exit
2B4E 35C0             (gshell_beta5_yak.):06332                  puls  U,PC
                      (gshell_beta5_yak.):06333         
2B50 5A               (gshell_beta5_yak.):06334         SRWINDOW decb             0 based screen # (0-7)   
2B51 8E11C7           (gshell_beta5_yak.):06335                  ldx   #SCRNTABL  LEAX d,x to abx
2B54 58               (gshell_beta5_yak.):06336                  aslb             B=B*4 (4 bytes/entry)
2B55 58               (gshell_beta5_yak.):06337                  aslb  
2B56 3A               (gshell_beta5_yak.):06338                  abx              Point to screen entry
2B57 39               (gshell_beta5_yak.):06339                  rts   
                      (gshell_beta5_yak.):06340         
2B58 8DF6             (gshell_beta5_yak.):06341         LINKWNDW bsr   SRWINDOW   Point to screen table entry our window is on
2B5A 6C02             (gshell_beta5_yak.):06342                  inc   SC.USERS,X Bump up the # of processes using it
2B5C 39               (gshell_beta5_yak.):06343                  rts   
                      (gshell_beta5_yak.):06344         
                      (gshell_beta5_yak.):06345         * Unlink window from active screen list
2B5D E663             (gshell_beta5_yak.):06346         UNLKWNDW ldb   2+1,s      Get screen # (1-8)
2B5F 8DEF             (gshell_beta5_yak.):06347                  bsr   SRWINDOW   Point to screen table entry we are unlinking
2B61 6A02             (gshell_beta5_yak.):06348                  dec   SC.USERS,X Dec # processes on current screen
2B63 2608             (gshell_beta5_yak.):06349                  bne   UNLKWND1   Still some left, exit
                      (gshell_beta5_yak.):06350         * Close current SC.* entry path (close screen, since exited process was last one on it)
                      (gshell_beta5_yak.):06351         * Entry: X=ptr to current entry in used screen table
2B65 A684             (gshell_beta5_yak.):06352         CLOSE.X  lda   SC.PTHNO,X Get path to window
2B67 103F8F           (gshell_beta5_yak.):06353                  os9   I$Close    Close it
2B6A 4F               (gshell_beta5_yak.):06354                  clra             Flag as no path anymore & return
2B6B A784             (gshell_beta5_yak.):06355                  sta   SC.PTHNO,X
2B6D 39               (gshell_beta5_yak.):06356         UNLKWND1 rts   
                      (gshell_beta5_yak.):06357         
                      (gshell_beta5_yak.):06358         * Calc highest pixel values allowed for AIF entry (X&Y), and window type
                      (gshell_beta5_yak.):06359         * Saves PROCYSIZ, PROCXSIZ, PROCWTYP
                      (gshell_beta5_yak.):06360         * Entry: X=ptr to ID.* structure
2B6E EC04             (gshell_beta5_yak.):06361         GFXSIZXY ldd   ID.XSIZE,X Get min. X size for AIF entry
2B70 17FE60           (gshell_beta5_yak.):06362                  lbsr  MULDX8     *8 for pixels
2B73 830001           (gshell_beta5_yak.):06363                  subd  #1         -1 for far right pixel base 0
2B76 DD45             (gshell_beta5_yak.):06364                  std   PROCXSIZ   Save as min. X size for process
2B78 EC06             (gshell_beta5_yak.):06365                  ldd   ID.YSIZE,X Do pixel Y calc
2B7A 17FE56           (gshell_beta5_yak.):06366                  lbsr  MULDX8
2B7D 830001           (gshell_beta5_yak.):06367                  subd  #1
2B80 DD47             (gshell_beta5_yak.):06368                  std   PROCYSIZ   Save as min. Y size for process
2B82 EC02             (gshell_beta5_yak.):06369                  ldd   ID.WTYPE,X Save AIF window type too.
2B84 DD49             (gshell_beta5_yak.):06370                  std   PROCWTYP
2B86 39               (gshell_beta5_yak.):06371                  rts   
                      (gshell_beta5_yak.):06372         
2B87 2F64642F7379732F (gshell_beta5_yak.):06373         ENV.FILE fcc   "/dd/sys/env.file"
     656E762E66696C65
2B97 00               (gshell_beta5_yak.):06374                  fcb   NUL
                      (gshell_beta5_yak.):06375         
2B98 3440             (gshell_beta5_yak.):06376         GET.ENV  pshs  U
2B9A CE11E7           (gshell_beta5_yak.):06377                  ldu   #ENVFLBFR  Point U to 80 char buffer for enviornment file lines
2B9D CCFFFF           (gshell_beta5_yak.):06378                  ldd   #$ffff     Defaults for keyboard & mouse stuff
2BA0 DD52             (gshell_beta5_yak.):06379                  std   <GIPMSRES  Both mouse defaults
2BA2 DD54             (gshell_beta5_yak.):06380                  std   <GIPKYST   Both keyboard defaults
2BA4 4F               (gshell_beta5_yak.):06381                  clra
2BA5 9751             (gshell_beta5_yak.):06382                  sta   <CURGFXSZ  Size of GSHPAL buffer to 0
2BA7 308CDD           (gshell_beta5_yak.):06383                  leax  <ENV.FILE,PC Point to filename
2BAA 3430             (gshell_beta5_yak.):06384                  pshs  X,Y
2BAC 3440             (gshell_beta5_yak.):06385                  pshs  U
2BAE 17086C           (gshell_beta5_yak.):06386                  lbsr  STRCPY
2BB1 3264             (gshell_beta5_yak.):06387                  leas  4,S
2BB3 8601             (gshell_beta5_yak.):06388                  lda   #READ.
2BB5 1F31             (gshell_beta5_yak.):06389                  tfr   U,X
2BB7 17082A           (gshell_beta5_yak.):06390                  lbsr  I.OPEN     Open env.file
2BBA EDE4             (gshell_beta5_yak.):06391                  std   ,S         Save path #
2BBC 2D55             (gshell_beta5_yak.):06392                  blt   GET.ENV3   Bad path #, exit
                      (gshell_beta5_yak.):06393         
2BBE CC0050           (gshell_beta5_yak.):06394         GET.ENV1 ldd   #80        Size of line buffer to read
2BC1 3406             (gshell_beta5_yak.):06395                  pshs  d
2BC3 3440             (gshell_beta5_yak.):06396                  pshs  U
2BC5 EC64             (gshell_beta5_yak.):06397                  ldd   4,S
2BC7 3406             (gshell_beta5_yak.):06398                  pshs  d
2BC9 1707D8           (gshell_beta5_yak.):06399                  lbsr  I.READLN   Read line from env.file
2BCC 3266             (gshell_beta5_yak.):06400                  leas  6,S
2BCE ED7E             (gshell_beta5_yak.):06401                  std   -2,S
2BD0 2F0C             (gshell_beta5_yak.):06402                  ble   GET.ENV2   End of file, close & exit
2BD2 3440             (gshell_beta5_yak.):06403                  pshs  U
2BD4 8D4C             (gshell_beta5_yak.):06404                  bsr   PROCENVF   Go process lines we actually pay attention to
2BD6 3262             (gshell_beta5_yak.):06405                  leas  2,S
2BD8 20E4             (gshell_beta5_yak.):06406                  bra   GET.ENV1   Keep going till env.file done
                      (gshell_beta5_yak.):06407         
2BDA 3446             (gshell_beta5_yak.):06408         ResetPal pshs  d,u        For GET.ENV3 below
2BDC 2022             (gshell_beta5_yak.):06409                  bra   DoPal
                      (gshell_beta5_yak.):06410         
2BDE 17080C           (gshell_beta5_yak.):06411         GET.ENV2 lbsr  I.CLOSE
2BE1 3420             (gshell_beta5_yak.):06412                  pshs  y          Do mouse/keyboard updates
2BE3 9652             (gshell_beta5_yak.):06413                  lda   <GIPMSRES  Any change to Mouse resolution?
2BE5 81FF             (gshell_beta5_yak.):06414                  cmpa  #$ff
2BE7 2601             (gshell_beta5_yak.):06415                  bne   Mse2       Yes, use it
2BE9 4F               (gshell_beta5_yak.):06416                  clra             No, default to low res
2BEA D653             (gshell_beta5_yak.):06417         Mse2     ldb   <GIPMSPRT  Any change to mouse port?
2BEC C1FF             (gshell_beta5_yak.):06418                  cmpb  #$ff
2BEE 2602             (gshell_beta5_yak.):06419                  bne   Kybd1      Yes, use it
2BF0 C601             (gshell_beta5_yak.):06420                  ldb   #1         No, default to right port
2BF2 1F01             (gshell_beta5_yak.):06421         Kybd1    tfr   d,x        Move mouse stuff to X
2BF4 109E54           (gshell_beta5_yak.):06422                  ldy   <GIPKYST   Get keyboard repeat start/repeat speed
2BF7 9623             (gshell_beta5_yak.):06423                  lda   <WNDWPATH+1 Get window path
2BF9 C694             (gshell_beta5_yak.):06424                  ldb   #SS.GIP    SS.GIP call
2BFB 103F8E           (gshell_beta5_yak.):06425                  os9   I$SetStt   Set keyboard/mouse stuff
2BFE 3520             (gshell_beta5_yak.):06426                  puls  y
2C00 D651             (gshell_beta5_yak.):06427         DoPal    ldb   <CURGFXSZ  Get current graphics buffer write size
2C02 270F             (gshell_beta5_yak.):06428                  beq   GET.ENV3   Empty, exit
2C04 4F               (gshell_beta5_yak.):06429                  clra             Put in Y
2C05 3420             (gshell_beta5_yak.):06430                  pshs  y          Save Y (else screws up)
2C07 1F02             (gshell_beta5_yak.):06431                  tfr   d,y
2C09 8E1359           (gshell_beta5_yak.):06432                  ldx   #GSHBUF    Point to start of buffer
2C0C 9623             (gshell_beta5_yak.):06433                  lda   <WNDWPATH+1 Get path # to window
2C0E 103F8A           (gshell_beta5_yak.):06434                  os9   I$Write    Write out palette changes
2C11 3520             (gshell_beta5_yak.):06435                  puls  y          Restore y
2C13 35C6             (gshell_beta5_yak.):06436         GET.ENV3 puls  D,U,PC
                      (gshell_beta5_yak.):06437         
2C15 5242464445563D   (gshell_beta5_yak.):06438         RBFDEVEQ fcc   "RBFDEV="
2C1C 00               (gshell_beta5_yak.):06439         RBFSEND  fcb   NUL
                      (gshell_beta5_yak.):06440         
2C1D 52414D3D         (gshell_beta5_yak.):06441         RAMEQU   fcc   "RAM="
2C21 00               (gshell_beta5_yak.):06442         RAMSEND  fcb   NUL
                      (gshell_beta5_yak.):06443         
                      (gshell_beta5_yak.):06444         * Process and env.file line
2C22 3440             (gshell_beta5_yak.):06445         PROCENVF pshs  U
2C24 EE64             (gshell_beta5_yak.):06446                  ldu   4,S
2C26 327E             (gshell_beta5_yak.):06447                  leas  -2,S
2C28 C607             (gshell_beta5_yak.):06448                  ldb   #RBFSEND-RBFDEVEQ
2C2A 308CE8           (gshell_beta5_yak.):06449                  leax  <RBFDEVEQ,PC
2C2D 8D1D             (gshell_beta5_yak.):06450                  bsr   PROCLINE   Check if 'RBFDEV='
2C2F 2629             (gshell_beta5_yak.):06451                  bne   PROCENV2   No, check next
2C31 3347             (gshell_beta5_yak.):06452                  leau  RBFSEND-RBFDEVEQ,U Point to start of string
2C33 3440             (gshell_beta5_yak.):06453         PROCENV1 pshs  U          Save start of string ptr
2C35 8D68             (gshell_beta5_yak.):06454                  bsr   TERMNATE   Append NUL terminator on end of device name
2C37 ED62             (gshell_beta5_yak.):06455                  std   2,S        Save flag as to whether whole string is done
2C39 170335           (gshell_beta5_yak.):06456                  lbsr  ADDEVICE   Add the device to the list
2C3C 1707C6           (gshell_beta5_yak.):06457                  lbsr  STRLEN     Get length of device name
2C3F 3262             (gshell_beta5_yak.):06458                  leas  2,S        Eat extra on stack
2C41 C30001           (gshell_beta5_yak.):06459                  addd  #1         Bump length up to accomodate NUL (INCD for 6309)
2C44 33CB             (gshell_beta5_yak.):06460                  leau  D,U        Point to start of next device name (if any)
2C46 ECE4             (gshell_beta5_yak.):06461                  ldd   ,S         Get flag - do we have more to do?
2C48 27E9             (gshell_beta5_yak.):06462                  beq   PROCENV1   Yes, keep doing until all devices done
2C4A 204A             (gshell_beta5_yak.):06463                  bra   PROCENV4   No, exit process current line of env.file routine
                      (gshell_beta5_yak.):06464         
                      (gshell_beta5_yak.):06465         * Check if current env.file line=current flag we are looking for
                      (gshell_beta5_yak.):06466         * Entry:B=Size of compare to do
                      (gshell_beta5_yak.):06467         *       X=Text of current flag we are looking for
                      (gshell_beta5_yak.):06468         * Exit: Flags set so BEQ will mean a match
2C4C 3406             (gshell_beta5_yak.):06469         PROCLINE pshs  d
2C4E 3410             (gshell_beta5_yak.):06470                  pshs  X
2C50 3440             (gshell_beta5_yak.):06471                  pshs  U
2C52 1707FF           (gshell_beta5_yak.):06472                  lbsr  STRNCMP
2C55 3266             (gshell_beta5_yak.):06473                  leas  6,S
2C57 ED7E             (gshell_beta5_yak.):06474                  std   -2,S
2C59 39               (gshell_beta5_yak.):06475                  rts   
                      (gshell_beta5_yak.):06476         
2C5A C604             (gshell_beta5_yak.):06477         PROCENV2 ldb   #RAMSEND-RAMEQU Check for RAM setting ALREADY HANDLES >128K
2C5C 308CBE           (gshell_beta5_yak.):06478                  leax  <RAMEQU,PC
2C5F 8DEB             (gshell_beta5_yak.):06479                  bsr   PROCLINE
2C61 2613             (gshell_beta5_yak.):06480                  bne   PROCENV3   Not RAM, check next
2C63 3344             (gshell_beta5_yak.):06481                  leau  RAMSEND-RAMEQU,U Point to after RAM=
2C65 3440             (gshell_beta5_yak.):06482                  pshs  U          Save ptr
2C67 170A7C           (gshell_beta5_yak.):06483                  lbsr  ATOI       Convert ASCII text from [,u] into D register
2C6A 3262             (gshell_beta5_yak.):06484                  leas  2,S        Save RAM size from file
2C6C DD20             (gshell_beta5_yak.):06485                  std   <RAMSIZE   Save RAM size found
2C6E 2026             (gshell_beta5_yak.):06486                  bra   PROCENV4   Done processing current line
                      (gshell_beta5_yak.):06487         
2C70 455845433D       (gshell_beta5_yak.):06488         EXECEQU  fcc   "EXEC="
2C75 00               (gshell_beta5_yak.):06489         EXECSEND fcb   NUL
                      (gshell_beta5_yak.):06490         
2C76 C605             (gshell_beta5_yak.):06491         PROCENV3 ldb   #EXECSEND-EXECEQU Check for EXEC setting
2C78 308CF5           (gshell_beta5_yak.):06492                  leax  <EXECEQU,PC
2C7B 8DCF             (gshell_beta5_yak.):06493                  bsr   PROCLINE
2C7D 263D             (gshell_beta5_yak.):06494                  bne   GSHPal
2C7F 3345             (gshell_beta5_yak.):06495                  leau  EXECSEND-EXECEQU,U Point to 1st byte after EXEC=
2C81 3440             (gshell_beta5_yak.):06496                  pshs  U
2C83 8D1A             (gshell_beta5_yak.):06497                  bsr   TERMNATE   Terminate the string with a NUL
2C85 170282           (gshell_beta5_yak.):06498                  lbsr  CHGXDIR    Change Execution directory to one read from env.file
2C88 EDE1             (gshell_beta5_yak.):06499                  std   ,S++       Eat stack & set CC
2C8A 260A             (gshell_beta5_yak.):06500                  bne   PROCENV4
2C8C 8E0571           (gshell_beta5_yak.):06501                  ldx   #XDIRNAME  Copy execution path name here
2C8F 3450             (gshell_beta5_yak.):06502                  pshs  X,U
2C91 170789           (gshell_beta5_yak.):06503                  lbsr  STRCPY
2C94 3264             (gshell_beta5_yak.):06504                  leas  4,S
                      (gshell_beta5_yak.):06505         
2C96 35C6             (gshell_beta5_yak.):06506         PROCENV4 puls  d,U,PC     Restore regs & return
                      (gshell_beta5_yak.):06507         
2C98 47534850414C     (gshell_beta5_yak.):06508         GSHPALEQ fcc   "GSHPAL"   --Added for GShell palettes
2C9E 00               (gshell_beta5_yak.):06509         GSHSEND  fcb   NUL
                      (gshell_beta5_yak.):06510         
                      (gshell_beta5_yak.):06511         * Add a NUL to the end of a string segment (, or CR delimiter)
                      (gshell_beta5_yak.):06512         * Entry: 2,S=Ptr to string
                      (gshell_beta5_yak.):06513         * Exit: D=0 if end of string
                      (gshell_beta5_yak.):06514         *       D=1 if string has more to process yet
2C9F AE62             (gshell_beta5_yak.):06515         TERMNATE ldx   2,S        Get ptr to start of string
2CA1 5F               (gshell_beta5_yak.):06516                  clrb             NUL to terminate string with
                      (gshell_beta5_yak.):06517         * 6809/6309 - would be more code, but faster to do lda ,x+, remove leax 1,x, and add leax -1,x
                      (gshell_beta5_yak.):06518         * before stb ,x @ TERMNAT2, and change TERMNAT3 to stb -1,x, and TERMNAT4 to leax -1,x then ldd #1
                      (gshell_beta5_yak.):06519         * except on extremely short strings
2CA2 A684             (gshell_beta5_yak.):06520         TERMNAT1 lda   ,X         Get char
2CA4 2712             (gshell_beta5_yak.):06521                  beq   TERMNAT4   Already NUL, flag & exit
2CA6 812C             (gshell_beta5_yak.):06522                  cmpa  #',        Comma?
2CA8 2708             (gshell_beta5_yak.):06523                  beq   TERMNAT2   Yes, set NUL & exit
2CAA 810D             (gshell_beta5_yak.):06524                  cmpa  #CR        End of line?
2CAC 2708             (gshell_beta5_yak.):06525                  beq   TERMNAT3   Yes, set NUL & flag & exit
2CAE 3001             (gshell_beta5_yak.):06526                  leax  1,X        Bump up string ptr
2CB0 20F0             (gshell_beta5_yak.):06527                  bra   TERMNAT1   Keep looking
                      (gshell_beta5_yak.):06528         
2CB2 E784             (gshell_beta5_yak.):06529         TERMNAT2 stb   ,X         Save NUL as separator
2CB4 4F               (gshell_beta5_yak.):06530                  clra             We're done the entire string flag
2CB5 39               (gshell_beta5_yak.):06531                  rts   
                      (gshell_beta5_yak.):06532         
2CB6 E784             (gshell_beta5_yak.):06533         TERMNAT3 stb   ,X         Save NUL as separator
2CB8 CC0001           (gshell_beta5_yak.):06534         TERMNAT4 ldd   #1         We still have more in string to do flag
2CBB 39               (gshell_beta5_yak.):06535                  rts   
                      (gshell_beta5_yak.):06536         
                      (gshell_beta5_yak.):06537         * NOTE: FROM HERE ON, SHOULD CHANGE NON-LBRA TO PROCENV4 TO BE SHORT BRANCHES
                      (gshell_beta5_yak.):06538         *  TO THE TERMINATING LBRA PROCENV4 (TO SAVE A LITTLE SPACE)
                      (gshell_beta5_yak.):06539         
                      (gshell_beta5_yak.):06540         * Added by LCB 8/12/1998 - Check for GShell default palettes (only 0-3 legit)
2CBC C606             (gshell_beta5_yak.):06541         GSHPal   ldb   #GSHSEND-GSHPALEQ Check for GSHPAL setting
2CBE 308CD7           (gshell_beta5_yak.):06542                  leax  <GSHPALEQ,pc
2CC1 8D89             (gshell_beta5_yak.):06543                  bsr   PROCLINE
2CC3 10260095         (gshell_beta5_yak.):06544                  lbne  DefCheck   Not, try next
2CC7 3346             (gshell_beta5_yak.):06545         PalLoop  leau  GSHSEND-GSHPALEQ,u Point to 1st byte after GSHPAL
2CC9 ECC1             (gshell_beta5_yak.):06546                  ldd   ,u++       Get palette # to assign to
2CCB C13D             (gshell_beta5_yak.):06547                  cmpb  #'=        2nd char '='?
2CCD 26C7             (gshell_beta5_yak.):06548                  bne   PROCENV4   No, ignore this line
2CCF 8030             (gshell_beta5_yak.):06549                  suba  #$30       Convert to binary palette #
2CD1 2DC3             (gshell_beta5_yak.):06550                  blt   PROCENV4   Went negative, ignore line
2CD3 8103             (gshell_beta5_yak.):06551                  cmpa  #3         Within palette range?
2CD5 22BF             (gshell_beta5_yak.):06552                  bhi   PROCENV4   No, ignore this line
2CD7 974F             (gshell_beta5_yak.):06553                  sta   <CURPAL    Save palette #
2CD9 ECC1             (gshell_beta5_yak.):06554                  ldd   ,u++       Get next 2 chars
2CDB C12C             (gshell_beta5_yak.):06555                  cmpb  #',        2nd a comma?
2CDD 26B7             (gshell_beta5_yak.):06556                  bne   PROCENV4   No, ignore line
2CDF 8030             (gshell_beta5_yak.):06557                  suba  #$30       Convert to binary
2CE1 2DB3             (gshell_beta5_yak.):06558                  blt   PROCENV4   negative, ignore line
2CE3 8103             (gshell_beta5_yak.):06559                  cmpa  #3         Within range?
2CE5 22AF             (gshell_beta5_yak.):06560                  bhi   PROCENV4   (No, ignore line)
2CE7 48               (gshell_beta5_yak.):06561                  lsla             Move to 1st red bit
2CE8 48               (gshell_beta5_yak.):06562                  lsla  
2CE9 1F89             (gshell_beta5_yak.):06563                  tfr   a,b        Save copy
2CEB 8404             (gshell_beta5_yak.):06564                  anda  #4         Save lsb
2CED 3402             (gshell_beta5_yak.):06565                  pshs  a
2CEF 58               (gshell_beta5_yak.):06566                  lslb             Calculate msb of RED
2CF0 58               (gshell_beta5_yak.):06567                  lslb  
2CF1 C420             (gshell_beta5_yak.):06568                  andb  #$20
2CF3 EBE0             (gshell_beta5_yak.):06569                  addb  ,s+        Merge the reds together
2CF5 D750             (gshell_beta5_yak.):06570                  stb   <CURCOLOR  Save it
2CF7 ECC1             (gshell_beta5_yak.):06571                  ldd   ,u++       Get next color
2CF9 C12C             (gshell_beta5_yak.):06572                  cmpb  #',        2nd char a comma?
2CFB 2699             (gshell_beta5_yak.):06573                  bne   PROCENV4   No, ignore line
2CFD 8030             (gshell_beta5_yak.):06574                  suba  #$30       Convert to binary
2CFF 2D95             (gshell_beta5_yak.):06575                  blt   PROCENV4   negative, ignore line
2D01 8103             (gshell_beta5_yak.):06576                  cmpa  #3         Within range?
2D03 2291             (gshell_beta5_yak.):06577                  bhi   PROCENV4   (No, ignore line)
2D05 48               (gshell_beta5_yak.):06578                  lsla             Shift to 1st Green bit
2D06 1F89             (gshell_beta5_yak.):06579                  tfr   a,b        Save copy
2D08 8402             (gshell_beta5_yak.):06580                  anda  #2         Save lsb
2D0A 3402             (gshell_beta5_yak.):06581                  pshs  a
2D0C 58               (gshell_beta5_yak.):06582                  lslb             Calculate msb of Green
2D0D 58               (gshell_beta5_yak.):06583                  lslb  
2D0E C410             (gshell_beta5_yak.):06584                  andb  #$10
2D10 EBE0             (gshell_beta5_yak.):06585                  addb  ,s+        Merge the greens together
2D12 DA50             (gshell_beta5_yak.):06586                  orb   <CURCOLOR  mix with red
2D14 D750             (gshell_beta5_yak.):06587                  stb   <CURCOLOR  Save it
2D16 ECC1             (gshell_beta5_yak.):06588                  ldd   ,u++       Get last color
2D18 C10D             (gshell_beta5_yak.):06589                  cmpb  #CR        2nd char a CR?
2D1A 262B             (gshell_beta5_yak.):06590                  bne   GSHPalEx   No, ignore line
2D1C 8030             (gshell_beta5_yak.):06591                  suba  #$30       Convert to binary
2D1E 2D27             (gshell_beta5_yak.):06592                  blt   GSHPalEx   negative, ignore line
2D20 8103             (gshell_beta5_yak.):06593                  cmpa  #3         Within range?
2D22 2223             (gshell_beta5_yak.):06594                  bhi   GSHPalEx   (No, ignore line)
2D24 1F89             (gshell_beta5_yak.):06595                  tfr   a,b
2D26 C401             (gshell_beta5_yak.):06596                  andb  #1
2D28 3404             (gshell_beta5_yak.):06597                  pshs  b          Save lsb of Blue
2D2A 48               (gshell_beta5_yak.):06598                  lsla             Move msb of Blue
2D2B 48               (gshell_beta5_yak.):06599                  lsla  
2D2C 8408             (gshell_beta5_yak.):06600                  anda  #$08       Just msb
2D2E ABE0             (gshell_beta5_yak.):06601                  adda  ,s+        Merge blues together
2D30 9A50             (gshell_beta5_yak.):06602                  ora   <CURCOLOR  merge with red/green
2D32 8E1359           (gshell_beta5_yak.):06603                  ldx   #GSHBUF    Point to start of palette buffer
2D35 D651             (gshell_beta5_yak.):06604                  ldb   <CURGFXSZ  Get size of previous buffer
2D37 3A               (gshell_beta5_yak.):06605                  abx              Point X to start
2D38 CB04             (gshell_beta5_yak.):06606                  addb  #4         Add for next position
2D3A D751             (gshell_beta5_yak.):06607                  stb   <CURGFXSZ  Save it
2D3C A703             (gshell_beta5_yak.):06608                  sta   3,x        Save color
2D3E 964F             (gshell_beta5_yak.):06609                  lda   <CURPAL    Get current palette
2D40 A702             (gshell_beta5_yak.):06610                  sta   2,x        Save palette
2D42 CC1B31           (gshell_beta5_yak.):06611                  ldd   #$1b31     Change palette command
2D45 ED84             (gshell_beta5_yak.):06612                  std   ,x         Save it
2D47 16FF4C           (gshell_beta5_yak.):06613         GSHPalEx lbra  PROCENV4   Done processing line
                      (gshell_beta5_yak.):06614         
2D4A 444546545950453D (gshell_beta5_yak.):06615         DEFTYPE  fcc   "DEFTYPE="
2D52 00               (gshell_beta5_yak.):06616         DEFTPEND fcb   NUL
                      (gshell_beta5_yak.):06617         
2D53 4D4F4E545950453D (gshell_beta5_yak.):06618         QONITOR  fcc   "MONTYPE="
2D5B 00               (gshell_beta5_yak.):06619         MONTEND  fcb   NUL
                      (gshell_beta5_yak.):06620         
                      (gshell_beta5_yak.):06621         * Added by LCB 12/24/1998 - Check for Default screen type=6,7,8
2D5C C608             (gshell_beta5_yak.):06622         DefCheck ldb   #DEFTPEND-DEFTYPE Check for Default screen type
2D5E 308CE9           (gshell_beta5_yak.):06623                  leax  <DEFTYPE,PC
2D61 17FEE8           (gshell_beta5_yak.):06624                  lbsr  PROCLINE
2D64 2613             (gshell_beta5_yak.):06625                  bne   MonCheck   No, try next
2D66 3348             (gshell_beta5_yak.):06626                  leau  DEFTPEND-DEFTYPE,u Point to after DEFTYPE=
2D68 A6C4             (gshell_beta5_yak.):06627                  lda   ,u         Get screen type
2D6A 8030             (gshell_beta5_yak.):06628                  suba  #$30       Adjust to binary
2D6C 8106             (gshell_beta5_yak.):06629                  cmpa  #6         Below type 6?
2D6E 2506             (gshell_beta5_yak.):06630                  blo   DefEx      Yes, ignore
2D70 8108             (gshell_beta5_yak.):06631                  cmpa  #8         Above type 8?
2D72 2202             (gshell_beta5_yak.):06632                  bhi   DefEx      Yes, ignore
2D74 9702             (gshell_beta5_yak.):06633                  sta   DEFWTYPE+1 One of 3 good ones, save it
2D76 16FF1D           (gshell_beta5_yak.):06634         DefEx    lbra  PROCENV4   Done processing current line
                      (gshell_beta5_yak.):06635         
                      (gshell_beta5_yak.):06636         * Added by LCB 04/15/1999 - set monitor type
2D79 C608             (gshell_beta5_yak.):06637         MonCheck ldb   #MONTEND-QONITOR Check for monitor type
2D7B 308CD5           (gshell_beta5_yak.):06638                  leax  <QONITOR,pc
2D7E 17FECB           (gshell_beta5_yak.):06639                  lbsr  PROCLINE
2D81 261F             (gshell_beta5_yak.):06640                  bne   MousChk1   No, try next
2D83 3348             (gshell_beta5_yak.):06641                  leau  MONTEND-QONITOR,u Point to after MONTYPE=
2D85 E6C4             (gshell_beta5_yak.):06642                  ldb   ,u         Get monitor type
2D87 C030             (gshell_beta5_yak.):06643                  subb  #$30       Adjust to binary
2D89 C102             (gshell_beta5_yak.):06644                  cmpb  #2         Above 2, ignore
2D8B 220A             (gshell_beta5_yak.):06645                  bhi   MonEx
2D8D 4F               (gshell_beta5_yak.):06646                  clra  
2D8E 1F01             (gshell_beta5_yak.):06647                  tfr   d,x        Move to proper register
2D90 9623             (gshell_beta5_yak.):06648                  lda   <WNDWPATH+1 Get path # to window
2D92 C692             (gshell_beta5_yak.):06649                  ldb   #SS.Montr  SS.Montr call
2D94 103F8E           (gshell_beta5_yak.):06650                  os9   I$SetStt   Change monitor type
2D97 16FEFC           (gshell_beta5_yak.):06651         MonEx    lbra  PROCENV4   Done processing current line
                      (gshell_beta5_yak.):06652         
2D9A 5054525349443D   (gshell_beta5_yak.):06653         PTRSIDE  fcc   "PTRSID="
2DA1 00               (gshell_beta5_yak.):06654         PTRSDEND fcb   NUL
                      (gshell_beta5_yak.):06655         
                      (gshell_beta5_yak.):06656         * Following 4 (PTRSID, PTRRES, REPSPD, REPSTR) added by LCB 04/15/1999 - set
                      (gshell_beta5_yak.):06657         *   keyboard and mouse parameters
2DA2 C607             (gshell_beta5_yak.):06658         MousChk1 ldb   #PTRSDEND-PTRSIDE Check for Mouse port
2DA4 308CF3           (gshell_beta5_yak.):06659                  leax  <PTRSIDE,pc
2DA7 17FEA2           (gshell_beta5_yak.):06660                  lbsr  PROCLINE
2DAA 261E             (gshell_beta5_yak.):06661                  bne   MousChk2   No, try next
2DAC 3347             (gshell_beta5_yak.):06662                  leau  PTRSDEND-PTRSIDE,u Point to after PTRSID=
2DAE A6C4             (gshell_beta5_yak.):06663                  lda   ,u         Get parm
2DB0 8030             (gshell_beta5_yak.):06664                  suba  #$30       ASC to binary
2DB2 8101             (gshell_beta5_yak.):06665                  cmpa  #1
2DB4 2209             (gshell_beta5_yak.):06666                  bhi   Mse1Ex     <>0 or 1 is illegal
2DB6 C601             (gshell_beta5_yak.):06667                  ldb   #1
                      (gshell_beta5_yak.):06668                IFNE  H6309
                      (gshell_beta5_yak.):06669                  subr  a,b        Invert value
                      (gshell_beta5_yak.):06670                ELSE
2DB8 3402             (gshell_beta5_yak.):06671                  pshs  a
2DBA E0E0             (gshell_beta5_yak.):06672                  subb  ,s+
                      (gshell_beta5_yak.):06673                ENDC
2DBC 5C               (gshell_beta5_yak.):06674                  incb             Bump up to 1-2 for SS.GIP
2DBD 9753             (gshell_beta5_yak.):06675                  sta   <GIPMSPRT  Save it
2DBF 16FED4           (gshell_beta5_yak.):06676         Mse1Ex   lbra  PROCENV4
                      (gshell_beta5_yak.):06677         
2DC2 5054525245533D   (gshell_beta5_yak.):06678         PTRRES   fcc   'PTRRES='
2DC9 00               (gshell_beta5_yak.):06679         PTRRESEN fcb   NUL
                      (gshell_beta5_yak.):06680         
2DCA C607             (gshell_beta5_yak.):06681         MousChk2 ldb   #PTRRESEN-PTRRES Check for mouse resolution
2DCC 308CF3           (gshell_beta5_yak.):06682                  leax  <PTRRES,pc
2DCF 17FE7A           (gshell_beta5_yak.):06683                  lbsr  PROCLINE
2DD2 261C             (gshell_beta5_yak.):06684                  bne   KybdChk1   No, try next
2DD4 3347             (gshell_beta5_yak.):06685                  leau  PTRRESEN-PTRRES,u Point to after PTRRES=
2DD6 A6C4             (gshell_beta5_yak.):06686                  lda   ,u         Get parm
2DD8 8030             (gshell_beta5_yak.):06687                  suba  #$30       ASC to bin
2DDA 8101             (gshell_beta5_yak.):06688                  cmpa  #1
2DDC 2202             (gshell_beta5_yak.):06689                  bhi   Mse2Ex     <>1 or 2 is illegal
2DDE 9752             (gshell_beta5_yak.):06690                  sta   <GIPMSRES  Save mouse res
2DE0 16FEB3           (gshell_beta5_yak.):06691         Mse2Ex   lbra  PROCENV4
                      (gshell_beta5_yak.):06692         
2DE3 5245505354523D   (gshell_beta5_yak.):06693         REPSTR   fcc   'REPSTR='
2DEA 00               (gshell_beta5_yak.):06694         REPSTREN fcb   NUL
                      (gshell_beta5_yak.):06695         
                      (gshell_beta5_yak.):06696         * Start delay table from CONTROL
2DEB 002D1E140A       (gshell_beta5_yak.):06697         StrtTble fcb   0,45,30,20,10
                      (gshell_beta5_yak.):06698         
2DF0 C607             (gshell_beta5_yak.):06699         KybdChk1 ldb   #REPSTREN-REPSTR Check for keyboard repeat start
2DF2 308CEE           (gshell_beta5_yak.):06700                  leax  <REPSTR,pc
2DF5 17FE54           (gshell_beta5_yak.):06701                  lbsr  PROCLINE
2DF8 2624             (gshell_beta5_yak.):06702                  bne   KybdChk2   No, try next
2DFA 3347             (gshell_beta5_yak.):06703                  leau  REPSTREN-REPSTR,u Point to after REPSTR=
2DFC A6C4             (gshell_beta5_yak.):06704                  lda   ,u         Get parm
2DFE 8030             (gshell_beta5_yak.):06705                  suba  #$30       ASC to bin
2E00 270C             (gshell_beta5_yak.):06706                  beq   Key1Ex     0 not legal
2E02 8105             (gshell_beta5_yak.):06707                  cmpa  #5
2E04 2208             (gshell_beta5_yak.):06708                  bhi   Key1Ex     Above 5 ain't either (unlike manual's 3)
2E06 308CE2           (gshell_beta5_yak.):06709                  leax  <StrtTble,pc Point to table
2E09 4A               (gshell_beta5_yak.):06710                  deca             0-4
2E0A E686             (gshell_beta5_yak.):06711                  ldb   a,x        Get speed setting
2E0C D754             (gshell_beta5_yak.):06712                  stb   <GIPKYST   Save keyboard repeat start
2E0E 16FE85           (gshell_beta5_yak.):06713         Key1Ex   lbra  PROCENV4
                      (gshell_beta5_yak.):06714         
2E11 5245505350443D   (gshell_beta5_yak.):06715         REPSPD   fcc   'REPSPD='
2E18 00               (gshell_beta5_yak.):06716         REPSPDEN fcb   NUL
                      (gshell_beta5_yak.):06717         
2E19 180C060302       (gshell_beta5_yak.):06718         SpdTble  fcb   24,12,6,3,2
                      (gshell_beta5_yak.):06719         
2E1E C607             (gshell_beta5_yak.):06720         KybdChk2 ldb   #REPSPDEN-REPSPD Check for keyboard repeat speed
2E20 308CEE           (gshell_beta5_yak.):06721                  leax  <REPSPD,pc
2E23 17FE26           (gshell_beta5_yak.):06722                  lbsr  PROCLINE
2E26 2614             (gshell_beta5_yak.):06723                  bne   Key2Ex     No, done processing current line
2E28 3347             (gshell_beta5_yak.):06724                  leau  REPSPDEN-REPSPD,u Point to after REPSPD=
2E2A A6C4             (gshell_beta5_yak.):06725                  lda   ,u         Get parm
2E2C 8030             (gshell_beta5_yak.):06726                  suba  #$30       ASC to bin
2E2E 270C             (gshell_beta5_yak.):06727                  beq   Key2Ex     0 not legal
2E30 8105             (gshell_beta5_yak.):06728                  cmpa  #5
2E32 2208             (gshell_beta5_yak.):06729                  bhi   Key2Ex     Above 5 ain't either (unlike manual's 3)
2E34 308CE2           (gshell_beta5_yak.):06730                  leax  <SpdTble,pc Point to table
2E37 4A               (gshell_beta5_yak.):06731                  deca             0-4
2E38 E686             (gshell_beta5_yak.):06732                  ldb   a,x        Get speed setting
2E3A D755             (gshell_beta5_yak.):06733                  stb   <GIPKYSPD  Save keyboard repeat speed
2E3C 16FE57           (gshell_beta5_yak.):06734         Key2Ex   lbra  PROCENV4
                      (gshell_beta5_yak.):06735         
                      (gshell_beta5_yak.):06736         * Get file descriptor info
2E3F 3476             (gshell_beta5_yak.):06737         GT.FDINF pshs  d,X,Y,U
2E41 AE6C             (gshell_beta5_yak.):06738                  ldx   12,S
2E43 30881D           (gshell_beta5_yak.):06739                  leax  DIR.FD,X
2E46 A680             (gshell_beta5_yak.):06740                  lda   ,X+
2E48 C601             (gshell_beta5_yak.):06741                  ldb   #1
2E4A 1F02             (gshell_beta5_yak.):06742                  tfr   D,Y
2E4C EE84             (gshell_beta5_yak.):06743                  ldu   ,X
2E4E AE6E             (gshell_beta5_yak.):06744                  ldx   14,S
2E50 A661             (gshell_beta5_yak.):06745                  lda   1,S
2E52 C620             (gshell_beta5_yak.):06746                  ldb   #SS.FDInf
2E54 103F8D           (gshell_beta5_yak.):06747                  os9   I$GetStt
2E57 3576             (gshell_beta5_yak.):06748                  puls  d,X,Y,U
2E59 2015             (gshell_beta5_yak.):06749                  bra   ISYSRET1
                      (gshell_beta5_yak.):06750         
                      (gshell_beta5_yak.):06751         * Entry: 0-1,s  = RTS address
                      (gshell_beta5_yak.):06752         *        2-3,s  = Path for window (only use 3,s)
                      (gshell_beta5_yak.):06753         *        4-5,s  = On/off flag (0=off, 1=on) (only use 5,s)
2E5B 8E123B           (gshell_beta5_yak.):06754         PAUSECHO ldx   #SSOPTBFR  Point to window's SS.option buffer
2E5E A663             (gshell_beta5_yak.):06755                  lda   3,S        Get path
2E60 5F               (gshell_beta5_yak.):06756                  clrb             SS.OPT Getstat
2E61 103F8D           (gshell_beta5_yak.):06757                  os9   I$GetStt   Get current window options
2E64 250A             (gshell_beta5_yak.):06758                  bcs   ISYSRET1
2E66 E665             (gshell_beta5_yak.):06759                  ldb   5,S        Get on/off flag
2E68 E704             (gshell_beta5_yak.):06760                  stb   4,X        Set echo (PD.EKO)
2E6A E707             (gshell_beta5_yak.):06761                  stb   7,X        Set page pause (PD.PAU)
2E6C 5F               (gshell_beta5_yak.):06762                  clrb             SS.OPT SetStat
2E6D 103F8E           (gshell_beta5_yak.):06763                  os9   I$SetStt   Set echo & pause options
2E70 1609B1           (gshell_beta5_yak.):06764         ISYSRET1 lbra  SYSRET
                      (gshell_beta5_yak.):06765         
                      (gshell_beta5_yak.):06766         *Close box char, and CurXY to 8,0
2E73 C7022820         (gshell_beta5_yak.):06767         CBOXICON fcb   $C7,$02,$28,$20
                      (gshell_beta5_yak.):06768         * Text string to draw stripes for directory bar from graphics
                      (gshell_beta5_yak.):06769         * font (Grp $C8, buffer 2)
2E77 C5C5C5C5C5C5C5C5 (gshell_beta5_yak.):06770         STRIPBAR fcb   $C5,$C5,$C5,$C5,$C5,$C5,$C5,$C5
2E7F C5C5C5C5C5C5C5C5 (gshell_beta5_yak.):06771                  fcb   $C5,$C5,$C5,$C5,$C5,$C5,$C5,$C5
2E87 C5C5C5C5C5C5C5C5 (gshell_beta5_yak.):06772                  fcb   $C5,$C5,$C5,$C5,$C5,$C5,$C5,$C5
2E8F C5C5C5C5C5C5C5C5 (gshell_beta5_yak.):06773                  fcb   $C5,$C5,$C5,$C5,$C5,$C5,$C5,$C5
2E97 C5C5C5C500       (gshell_beta5_yak.):06774                  fcb   $C5,$C5,$C5,$C5,$00              Should only need 36, not 38
                      (gshell_beta5_yak.):06775         
                      (gshell_beta5_yak.):06776         * NOTE: If we replace WBOX.BAR with line/bar commands, then CBOXICON becomes 1 byte, STRIPBAR
                      (gshell_beta5_yak.):06777         * is eliminated
2E9C 308CD4           (gshell_beta5_yak.):06778         WBOX.BAR leax  <CBOXICON,PC Point to CLOSE box & CurXY 8,0
2E9F C61D             (gshell_beta5_yak.):06779                  ldb   #29        Default to close box & 25 "stripe" bar chars to write
2EA1 0D1B             (gshell_beta5_yak.):06780                  tst   FLAG640W
2EA3 2726             (gshell_beta5_yak.):06781                  beq   WRITEBX    If 320 pixel screen, go write it
2EA5 DC22             (gshell_beta5_yak.):06782                  ldd   <WNDWPATH  Save window path
2EA7 3406             (gshell_beta5_yak.):06783                  pshs  d
2EA9 C621             (gshell_beta5_yak.):06784                  ldb   #33        Do close box & 29 "stripe" bar chars
2EAB 8D1E             (gshell_beta5_yak.):06785                  bsr   WRITEBX
2EAD 3262             (gshell_beta5_yak.):06786                  leas  2,S        Eat temp window path
2EAF C624             (gshell_beta5_yak.):06787                  ldb   #36        Do 36 more "stripe" bar chars (65 total)
2EB1 308CC3           (gshell_beta5_yak.):06788                  leax  <STRIPBAR,PC
2EB4 2015             (gshell_beta5_yak.):06789                  bra   WRITEBX
                      (gshell_beta5_yak.):06790         
2EB6 8E1237           (gshell_beta5_yak.):06791         GOTOXY   ldx   #GFXBUF2   Point to buffer
2EB9 8602             (gshell_beta5_yak.):06792                  lda   #2         CurXY Ctrl code
2EBB A784             (gshell_beta5_yak.):06793                  sta   ,x         Save in output buffer
2EBD A665             (gshell_beta5_yak.):06794                  lda   5,s        Get X coord
2EBF E667             (gshell_beta5_yak.):06795                  ldb   7,s        Get Y coord
2EC1 C32020           (gshell_beta5_yak.):06796                  addd  #$2020     Offset both by $20
2EC4 ED01             (gshell_beta5_yak.):06797                  std   1,x        Save in output buffer
2EC6 C603             (gshell_beta5_yak.):06798                  ldb   #3         3 bytes to write
2EC8 8E1237           (gshell_beta5_yak.):06799         GFXWR2   ldx   #GFXBUF2
                      (gshell_beta5_yak.):06800         * Write text string
                      (gshell_beta5_yak.):06801         * Entry: B    =# chars to write
                      (gshell_beta5_yak.):06802         *        X    =Ptr to text to write
                      (gshell_beta5_yak.):06803         *        0-1,s=RTS address
                      (gshell_beta5_yak.):06804         *        2-3,s=path # to write to (only 3,s used)
2ECB 3420             (gshell_beta5_yak.):06805         WRITEBX  pshs  Y          Save Y
                      (gshell_beta5_yak.):06806         *        0-1,s=Preserved Y
                      (gshell_beta5_yak.):06807         *        2,3,s=RTS address
                      (gshell_beta5_yak.):06808         *        4-5,s=path # to write to (only 5 used)
2ECD 4F               (gshell_beta5_yak.):06809                  clra  
2ECE 1F02             (gshell_beta5_yak.):06810                  tfr   D,Y          Move length to write to Y
2ED0 A665             (gshell_beta5_yak.):06811                  lda   5,S          Get path to write to
2ED2 103F8A           (gshell_beta5_yak.):06812                  os9   I$Write      Write sequence out
2ED5 3520             (gshell_beta5_yak.):06813                  puls  Y            Restore Y
2ED7 2097             (gshell_beta5_yak.):06814                  bra   ISYSRET1
                      (gshell_beta5_yak.):06815         
2ED9 C60C             (gshell_beta5_yak.):06816         CLRSCRN  ldb   #FF
2EDB 2002             (gshell_beta5_yak.):06817                  bra   OUT1
                      (gshell_beta5_yak.):06818         
2EDD C607             (gshell_beta5_yak.):06819         RINGBELL ldb   #BEL
2EDF F71237           (gshell_beta5_yak.):06820         OUT1     stb   GFXBUF2
2EE2 C601             (gshell_beta5_yak.):06821                  ldb   #1
2EE4 20E2             (gshell_beta5_yak.):06822                  bra   GFXWR2
                      (gshell_beta5_yak.):06823         
2EE6 C621             (gshell_beta5_yak.):06824         CURSORON ldb   #$21
2EE8 2002             (gshell_beta5_yak.):06825                  bra   CURSRSET
                      (gshell_beta5_yak.):06826         
2EEA C620             (gshell_beta5_yak.):06827         CURSROFF ldb   #$20
2EEC 8605             (gshell_beta5_yak.):06828         CURSRSET lda   #5
2EEE FD1237           (gshell_beta5_yak.):06829                  std   GFXBUF2
2EF1 C602             (gshell_beta5_yak.):06830                  ldb   #2
2EF3 20D3             (gshell_beta5_yak.):06831                  bra   GFXWR2
                      (gshell_beta5_yak.):06832         
                      (gshell_beta5_yak.):06833         * Change gfx cursor to arrow
2EF5 86CA             (gshell_beta5_yak.):06834         CRSRAROW lda   #QRP.PTR
2EF7 C601             (gshell_beta5_yak.):06835                  ldb   #YTR.ARR
2EF9 2002             (gshell_beta5_yak.):06836                  bra   GCSET.2
                      (gshell_beta5_yak.):06837         
2EFB 4F               (gshell_beta5_yak.):06838         GCSETOFF clra  
2EFC 5F               (gshell_beta5_yak.):06839                  clrb  
2EFD FD1239           (gshell_beta5_yak.):06840         GCSET.2  std   GFXBUF2+2
2F00 CC1B39           (gshell_beta5_yak.):06841                  ldd   #$1B39
2F03 FD1237           (gshell_beta5_yak.):06842                  std   GFXBUF2
2F06 C604             (gshell_beta5_yak.):06843                  ldb   #4
2F08 20BE             (gshell_beta5_yak.):06844                  bra   GFXWR2
                      (gshell_beta5_yak.):06845         
                      (gshell_beta5_yak.):06846         * Entry for change EXEC dir
2F0A 8604             (gshell_beta5_yak.):06847         CHGXDIR  lda   #EXEC.
2F0C 2002             (gshell_beta5_yak.):06848                  bra   I.CHGDIR
                      (gshell_beta5_yak.):06849         
                      (gshell_beta5_yak.):06850         * Entry for change DATA dir
2F0E 8601             (gshell_beta5_yak.):06851         CHGDDIR  lda   #READ.
2F10 3402             (gshell_beta5_yak.):06852         I.CHGDIR pshs  A
                      (gshell_beta5_yak.):06853         * SHOULD WE CHANGE TO JUST DROP SAMPLING RATE SO MOUSE CAN STILL MOVE?
                      (gshell_beta5_yak.):06854         * Shut mouse off (note that keyboard mouse ignores this)
2F12 17F1D2           (gshell_beta5_yak.):06855                  lbsr  NOMOUSE    Shut auto-follow AND mouse cursor off
2F15 3502             (gshell_beta5_yak.):06856                  puls  A
2F17 AE62             (gshell_beta5_yak.):06857                  ldx   2,S
2F19 103F86           (gshell_beta5_yak.):06858                  os9   I$ChgDir
2F1C 3405             (gshell_beta5_yak.):06859                  pshs  CC,B
                      (gshell_beta5_yak.):06860         * Mouse back on
2F1E 17F1D2           (gshell_beta5_yak.):06861                  lbsr  MOUSENOW
2F21 3505             (gshell_beta5_yak.):06862                  puls  CC,B
2F23 1608FE           (gshell_beta5_yak.):06863                  lbra  SYSRET
                      (gshell_beta5_yak.):06864         
                      (gshell_beta5_yak.):06865         * Shut off mouse auto follow (does not affect mouse cursor on/off)
                      (gshell_beta5_yak.):06866         * 6809/6309 - May want to change to really low sampling rate instead, so user has feedback that GShell
                      (gshell_beta5_yak.):06867         * has not frozen when handling large directories. Overlay windows should still shut it off, though.
2F26 4F               (gshell_beta5_yak.):06868         MOUSOFF  clra             0 clock tick sampling rate (leave mouse cursor on, but don't update it)
2F27 5F               (gshell_beta5_yak.):06869                  clrb  
2F28 2003             (gshell_beta5_yak.):06870                  bra   INITMOU1
                      (gshell_beta5_yak.):06871         
                      (gshell_beta5_yak.):06872         *             0-1,s = Path to window to read mouse from
                      (gshell_beta5_yak.):06873         *             2-3,s = Mouse sampling rate
                      (gshell_beta5_yak.):06874         *             4-5,s = Mouse button timeout
                      (gshell_beta5_yak.):06875         *             6-7 ,s= Auto follow mouse flag 
                      (gshell_beta5_yak.):06876         * Init mouse to Auto follow, 
2F2A CC0003           (gshell_beta5_yak.):06877         INITMOUS ldd   #3         Sampling rate every 3 ticks (1/20th sec)
2F2D 8E0001           (gshell_beta5_yak.):06878         INITMOU1 ldx   #1         Auto follow flag ON & Mouse button timeout to 1
2F30 3410             (gshell_beta5_yak.):06879                  pshs  X
2F32 3416             (gshell_beta5_yak.):06880                  pshs  d,X        Save mouse sampling rate & mouse button timeout
2F34 EC68             (gshell_beta5_yak.):06881                  ldd   8,S
2F36 3406             (gshell_beta5_yak.):06882                  pshs  d          Save path to window mouse is on
                      (gshell_beta5_yak.):06883         * NOTE: ONLY CALLED ONCE...EMBED WITH RAW CALL!
2F38 1705CA           (gshell_beta5_yak.):06884                  lbsr  ST.MOUSE   Set mouse parms
2F3B 3268             (gshell_beta5_yak.):06885                  leas  8,S        Eat temp stack & return
2F3D 39               (gshell_beta5_yak.):06886                  rts   
                      (gshell_beta5_yak.):06887         
2F3E 3440             (gshell_beta5_yak.):06888         SETUPENV pshs  U
2F40 CE125D           (gshell_beta5_yak.):06889                  ldu   #DRIVETBL
2F43 DF56             (gshell_beta5_yak.):06890                  stu   <DRTBLPTR
2F45 8E12A3           (gshell_beta5_yak.):06891                  ldx   #DRVNMTBL
2F48 4F               (gshell_beta5_yak.):06892                  clra  
2F49 AF4C             (gshell_beta5_yak.):06893         SETUPEN1 stx   FL.FNAME,U
2F4B C605             (gshell_beta5_yak.):06894                  ldb   #IC.DRIVE
2F4D E748             (gshell_beta5_yak.):06895                  stb   FL.ICONO,U
2F4F C608             (gshell_beta5_yak.):06896                  ldb   #8
2F51 EDC4             (gshell_beta5_yak.):06897                  std   FL.XSTRT,U
2F53 C620             (gshell_beta5_yak.):06898                  ldb   #32
2F55 ED44             (gshell_beta5_yak.):06899                  std   FL.XEND,U
2F57 D616             (gshell_beta5_yak.):06900                  ldb   <DRIVYPOS
2F59 ED42             (gshell_beta5_yak.):06901                  std   FL.YSTRT,U
2F5B CB0C             (gshell_beta5_yak.):06902                  addb  #12
2F5D ED46             (gshell_beta5_yak.):06903                  std   FL.YEND,U
2F5F CB0C             (gshell_beta5_yak.):06904                  addb  #12
2F61 D716             (gshell_beta5_yak.):06905                  stb   <DRIVYPOS
2F63 308820           (gshell_beta5_yak.):06906                  leax  32,X
2F66 334E             (gshell_beta5_yak.):06907                  leau  FL.SIZE,U
2F68 0A15             (gshell_beta5_yak.):06908                  dec   <DEVICNTR
2F6A 26DD             (gshell_beta5_yak.):06909                  bne   SETUPEN1
2F6C 17FC29           (gshell_beta5_yak.):06910                  lbsr  GET.ENV    Read env.sys file
2F6F 35C0             (gshell_beta5_yak.):06911                  puls  U,PC
                      (gshell_beta5_yak.):06912         
2F71 3440             (gshell_beta5_yak.):06913         ADDEVICE pshs  U
2F73 9E56             (gshell_beta5_yak.):06914                  ldx   <DRTBLPTR
2F75 D615             (gshell_beta5_yak.):06915                  ldb   <DEVICNTR
2F77 C105             (gshell_beta5_yak.):06916                  cmpb  #5
2F79 2C18             (gshell_beta5_yak.):06917                  bge   ADDEVIC1
2F7B 3404             (gshell_beta5_yak.):06918                  pshs  B
2F7D 0C15             (gshell_beta5_yak.):06919                  inc   DEVICNTR
2F7F EE65             (gshell_beta5_yak.):06920                  ldu   5,S
2F81 3450             (gshell_beta5_yak.):06921                  pshs  X,U
2F83 8D10             (gshell_beta5_yak.):06922                  bsr   MOVDNAME
2F85 3550             (gshell_beta5_yak.):06923                  puls  X,U
2F87 330E             (gshell_beta5_yak.):06924                  leau  FL.SIZE,X
2F89 DF56             (gshell_beta5_yak.):06925                  stu   <DRTBLPTR
2F8B E6E0             (gshell_beta5_yak.):06926                  ldb   ,S+
2F8D 2704             (gshell_beta5_yak.):06927                  beq   ADDEVIC1
2F8F 3312             (gshell_beta5_yak.):06928                  leau  0-FL.SIZE,X
2F91 AF4A             (gshell_beta5_yak.):06929                  stx   FL.LINK,U
2F93 35C0             (gshell_beta5_yak.):06930         ADDEVIC1 puls  U,PC
                      (gshell_beta5_yak.):06931         
2F95 AE62             (gshell_beta5_yak.):06932         MOVDNAME ldx   2,S
2F97 EC0C             (gshell_beta5_yak.):06933                  ldd   FL.FNAME,X
2F99 AE64             (gshell_beta5_yak.):06934                  ldx   4,S
2F9B 3416             (gshell_beta5_yak.):06935                  pshs  d,X
2F9D 17047D           (gshell_beta5_yak.):06936                  lbsr  STRCPY
2FA0 3264             (gshell_beta5_yak.):06937                  leas  4,S
2FA2 39               (gshell_beta5_yak.):06938                  rts   
                      (gshell_beta5_yak.):06939         
                      (gshell_beta5_yak.):06940         * Fix drive table
2FA3 D615             (gshell_beta5_yak.):06941         FIXDRTBL ldb   <DEVICNTR  Get # of drive devices active  
2FA5 272A             (gshell_beta5_yak.):06942                  beq   FIXDRTB1   If 0, return
2FA7 DC34             (gshell_beta5_yak.):06943                  ldd   <SELECTED  Get ptr to currently selection file icon descriptor (FL.*)
2FA9 2707             (gshell_beta5_yak.):06944                  beq   FIXDRTBX   None, skip ahead
                      (gshell_beta5_yak.):06945         * 6809/6309 - since we aren't using file icon dsc ptr, the pshs d and leas 2,s can be removed
                      (gshell_beta5_yak.):06946         * LCB
2FAB 3406             (gshell_beta5_yak.):06947                  pshs  d          Save file icon dsc ptr
2FAD 17DC55           (gshell_beta5_yak.):06948                  lbsr  UNSLICON   Unselect current icon
2FB0 3262             (gshell_beta5_yak.):06949                  leas  2,S
                      (gshell_beta5_yak.):06950         * 6809/6309 - If we CLRD (A/B) first, then do ldx, we can move can save cycles on BEQ above
2FB2 9E56             (gshell_beta5_yak.):06951         FIXDRTBX ldx   <DRTBLPTR  Get ptr to start of drive table (which uses FL.* format)
                      (gshell_beta5_yak.):06952                IFNE  H6309
                      (gshell_beta5_yak.):06953                  clrd  
                      (gshell_beta5_yak.):06954                ELSE
2FB4 4F               (gshell_beta5_yak.):06955                  clra
2FB5 5F               (gshell_beta5_yak.):06956                  clrb
                      (gshell_beta5_yak.):06957                ENDC
2FB6 DD34             (gshell_beta5_yak.):06958                  std   <SELECTED  Clear selected icon ptr
2FB8 ED1C             (gshell_beta5_yak.):06959                  std   FL.LINK-FL.SIZE,X   Zero out previous drives link to us
2FBA DC36             (gshell_beta5_yak.):06960                  ldd   <DEVICNOW  Get ptr to currently selected drive FL.* table entry
2FBC 2713             (gshell_beta5_yak.):06961                  beq   FIXDRTB1   None, return
2FBE 9C36             (gshell_beta5_yak.):06962                  cmpx  <DEVICNOW  
2FC0 220F             (gshell_beta5_yak.):06963                  bhi   FIXDRTB1
                      (gshell_beta5_yak.):06964                IFNE  H6309
                      (gshell_beta5_yak.):06965                  clrd  
                      (gshell_beta5_yak.):06966                ELSE
2FC2 4F               (gshell_beta5_yak.):06967                  clra
2FC3 5F               (gshell_beta5_yak.):06968                  clrb
                      (gshell_beta5_yak.):06969                ENDC
2FC4 DD36             (gshell_beta5_yak.):06970                  std   <DEVICNOW
2FC6 DD2C             (gshell_beta5_yak.):06971                  std   <STRTICON
2FC8 1700CE           (gshell_beta5_yak.):06972                  lbsr  ENFREFL1
2FCB 1700BE           (gshell_beta5_yak.):06973                  lbsr  ENBLSOFF
2FCE 17D8AC           (gshell_beta5_yak.):06974                  lbsr  CLRDSCRN
2FD1 39               (gshell_beta5_yak.):06975         FIXDRTB1 rts   
                      (gshell_beta5_yak.):06976         
2FD2 3440             (gshell_beta5_yak.):06977         CHGDEVCS pshs  U
2FD4 32E8DA           (gshell_beta5_yak.):06978                  leas  -38,S
2FD7 3066             (gshell_beta5_yak.):06979                  leax  6,S
2FD9 AF64             (gshell_beta5_yak.):06980                  stx   4,S
2FDB CC0003           (gshell_beta5_yak.):06981                  ldd   #3
2FDE 3406             (gshell_beta5_yak.):06982                  pshs  d
2FE0 5A               (gshell_beta5_yak.):06983                  decb  
2FE1 3406             (gshell_beta5_yak.):06984                  pshs  d
2FE3 C60A             (gshell_beta5_yak.):06985                  ldb   #10
2FE5 3406             (gshell_beta5_yak.):06986                  pshs  d
2FE7 8E0014           (gshell_beta5_yak.):06987                  ldx   #20
2FEA C60B             (gshell_beta5_yak.):06988                  ldb   #11
2FEC 3416             (gshell_beta5_yak.):06989                  pshs  d,X
2FEE 5A               (gshell_beta5_yak.):06990                  decb  
2FEF 3406             (gshell_beta5_yak.):06991                  pshs  d
2FF1 8E0001           (gshell_beta5_yak.):06992                  ldx   #1
2FF4 D623             (gshell_beta5_yak.):06993                  ldb   <WNDWPATH+1
2FF6 3416             (gshell_beta5_yak.):06994                  pshs  d,X
2FF8 1705B7           (gshell_beta5_yak.):06995                  lbsr  OWSET      Overlay window
2FFB CC0004           (gshell_beta5_yak.):06996                  ldd   #ZT.DBOX
2FFE ED62             (gshell_beta5_yak.):06997                  std   2,S
3000 17058F           (gshell_beta5_yak.):06998                  lbsr  ST.WNSET   Double boxed window
3003 17F379           (gshell_beta5_yak.):06999                  lbsr  IOOPTSON
3006 308C6E           (gshell_beta5_yak.):07000                  leax  <CHGDEVNM,PC
3009 AFE4             (gshell_beta5_yak.):07001                  stx   ,S
300B 17E261           (gshell_beta5_yak.):07002                  lbsr  WRLNWCR
300E 32E810           (gshell_beta5_yak.):07003                  leas  2+14,S
3011 CE125D           (gshell_beta5_yak.):07004                  ldu   #DRIVETBL
3014 200B             (gshell_beta5_yak.):07005                  bra   CHGDEVC2
                      (gshell_beta5_yak.):07006         
3016 EC4C             (gshell_beta5_yak.):07007         CHGDEVC1 ldd   FL.FNAME,U
3018 3406             (gshell_beta5_yak.):07008                  pshs  d
301A 17E252           (gshell_beta5_yak.):07009                  lbsr  WRLNWCR
301D 3262             (gshell_beta5_yak.):07010                  leas  2,S
301F EE4A             (gshell_beta5_yak.):07011                  ldu   FL.LINK,U
3021 EF7E             (gshell_beta5_yak.):07012         CHGDEVC2 stu   -2,S
3023 26F1             (gshell_beta5_yak.):07013                  bne   CHGDEVC1
3025 DE56             (gshell_beta5_yak.):07014                  ldu   <DRTBLPTR
3027 D615             (gshell_beta5_yak.):07015                  ldb   <DEVICNTR
3029 203E             (gshell_beta5_yak.):07016                  bra   CHGDEVC5
                      (gshell_beta5_yak.):07017         
302B CC0020           (gshell_beta5_yak.):07018         CHGDEVC3 ldd   #32
302E 3406             (gshell_beta5_yak.):07019                  pshs  d
3030 AE66             (gshell_beta5_yak.):07020                  ldx   6,S
3032 DC22             (gshell_beta5_yak.):07021                  ldd   WNDWPATH
3034 3416             (gshell_beta5_yak.):07022                  pshs  d,X
3036 17036B           (gshell_beta5_yak.):07023                  lbsr  I.READLN
3039 3266             (gshell_beta5_yak.):07024                  leas  6,S
303B EDE4             (gshell_beta5_yak.):07025                  std   ,S
303D 2F30             (gshell_beta5_yak.):07026                  ble   CHGDEVC6
303F E6F804           (gshell_beta5_yak.):07027                  ldb   [4,S]
3042 C12F             (gshell_beta5_yak.):07028                  cmpb  #'/
3044 2629             (gshell_beta5_yak.):07029                  bne   CHGDEVC6
3046 ECE4             (gshell_beta5_yak.):07030                  ldd   ,S
3048 5A               (gshell_beta5_yak.):07031                  decb  
3049 E364             (gshell_beta5_yak.):07032                  addd  4,S
304B 1F01             (gshell_beta5_yak.):07033                  tfr   D,X
304D 6F84             (gshell_beta5_yak.):07034                  clr   ,X
304F EC64             (gshell_beta5_yak.):07035                  ldd   4,S
3051 3406             (gshell_beta5_yak.):07036                  pshs  d
3053 3440             (gshell_beta5_yak.):07037                  pshs  U
3055 17FF3D           (gshell_beta5_yak.):07038                  lbsr  MOVDNAME
3058 3264             (gshell_beta5_yak.):07039                  leas  4,S
305A E663             (gshell_beta5_yak.):07040                  ldb   3,S
305C 2702             (gshell_beta5_yak.):07041                  beq   CHGDEVC4
305E EF5C             (gshell_beta5_yak.):07042                  stu   FL.LINK-FL.SIZE,U
3060                  (gshell_beta5_yak.):07043         CHGDEVC4
                      (gshell_beta5_yak.):07044                IFNE  H6309
                      (gshell_beta5_yak.):07045                  clrd  
                      (gshell_beta5_yak.):07046                ELSE
3060 4F               (gshell_beta5_yak.):07047                  clra
3061 5F               (gshell_beta5_yak.):07048                  clrb
                      (gshell_beta5_yak.):07049                ENDC
3062 ED4A             (gshell_beta5_yak.):07050                  std   FL.LINK,U
3064 334E             (gshell_beta5_yak.):07051                  leau  FL.SIZE,U
3066 E663             (gshell_beta5_yak.):07052                  ldb   3,S
3068 5C               (gshell_beta5_yak.):07053                  incb  
3069 E763             (gshell_beta5_yak.):07054         CHGDEVC5 stb   3,S
306B C105             (gshell_beta5_yak.):07055                  cmpb  #5
306D 2DBC             (gshell_beta5_yak.):07056                  blt   CHGDEVC3
306F 17F321           (gshell_beta5_yak.):07057         CHGDEVC6 lbsr  KILLOLAY
3072 32E826           (gshell_beta5_yak.):07058                  leas  38,S
3075 35C0             (gshell_beta5_yak.):07059                  puls  U,PC
                      (gshell_beta5_yak.):07060         
3077 4368616E67652064 (gshell_beta5_yak.):07061         CHGDEVNM fcc   "Change device names"
     6576696365206E61
     6D6573
308A 0A00             (gshell_beta5_yak.):07062                  fcb   LF,NUL
                      (gshell_beta5_yak.):07063         
308C 5F               (gshell_beta5_yak.):07064         ENBLSOFF clrb             Flag to disable menu items on FILES menu
308D 3406             (gshell_beta5_yak.):07065                  pshs  d
308F 8D12             (gshell_beta5_yak.):07066                  bsr   ENBLOPEN   Set OPEN item on FILES menu
3091 8D16             (gshell_beta5_yak.):07067                  bsr   ENLSTPRT   Set LIST & PRINT items on FILES menu
3093 8D20             (gshell_beta5_yak.):07068                  bsr   ENBLCOPY   Set COPY item on FILES menu
3095 2027             (gshell_beta5_yak.):07069                  bra   ENBLSOFX
                      (gshell_beta5_yak.):07070         
3097 E663             (gshell_beta5_yak.):07071         ENFREFLD ldb   3,S
                      (gshell_beta5_yak.):07072         * Enable/Disable FREE, FOLDER & SORT on DISK menu
3099 F70117           (gshell_beta5_yak.):07073         ENFREFL1 stb   ITM.FREE+QI.ENBL
309C F7012C           (gshell_beta5_yak.):07074                  stb   ITM.FLDR+QI.ENBL
309F F7023D           (gshell_beta5_yak.):07075                  stb   ITM.SORT+QI.ENBL
30A2 39               (gshell_beta5_yak.):07076                  rts   
                      (gshell_beta5_yak.):07077         
                      (gshell_beta5_yak.):07078         * Enable/Disable OPEN item on FILES menu
30A3 E663             (gshell_beta5_yak.):07079         ENBLOPEN ldb   3,S
30A5 F70195           (gshell_beta5_yak.):07080                  stb   ITM.OPEN+QI.ENBL
30A8 39               (gshell_beta5_yak.):07081                  rts   
                      (gshell_beta5_yak.):07082         
                      (gshell_beta5_yak.):07083         * Enable/Disable LIST & PRINT items on FILES menu. When we add DUMP, it should be here too.
30A9 E663             (gshell_beta5_yak.):07084         ENLSTPRT ldb   3,S
30AB F701AA           (gshell_beta5_yak.):07085                  stb   ITM.LIST+QI.ENBL
30AE F701E9           (gshell_beta5_yak.):07086                  stb   ITM.PRNT+QI.ENBL
30B1 F70228           (gshell_beta5_yak.):07087                  stb   ITM.DUMP+QI.ENBL
30B4 39               (gshell_beta5_yak.):07088                  rts   
                      (gshell_beta5_yak.):07089         
                      (gshell_beta5_yak.):07090         * Enable/Disable COPY item on FILES menu
30B5 EC62             (gshell_beta5_yak.):07091         ENBLCOPY ldd   2,S        Get item On/Off flag (6809/6309-only needs B)
30B7 F701BF           (gshell_beta5_yak.):07092                  stb   ITM.COPY+QI.ENBL (En/Dis)able COPY
30BA 3406             (gshell_beta5_yak.):07093                  pshs  d          Save item on/off flag for sub (could leave original)
30BC 8D03             (gshell_beta5_yak.):07094                  bsr   ENSTRNDL   Deal with 3 other menu items
30BE 3262             (gshell_beta5_yak.):07095         ENBLSOFX leas  2,S
30C0 39               (gshell_beta5_yak.):07096                  rts   
                      (gshell_beta5_yak.):07097         
                      (gshell_beta5_yak.):07098         * Enable/Disable STAT, RENAME & DELETE items on FILES menu
30C1 E663             (gshell_beta5_yak.):07099         ENSTRNDL ldb   3,S        Get item On/Off flag (6809/6309-only needs B)
30C3 F701D4           (gshell_beta5_yak.):07100                  stb   ITM.STAT+QI.ENBL  (En/Dis)able STAT
30C6 F701FE           (gshell_beta5_yak.):07101                  stb   ITM.RNAM+QI.ENBL  (En/Dis)able RENAME
30C9 F70213           (gshell_beta5_yak.):07102                  stb   ITM.DELT+QI.ENBL  (En/Dis)able DELETE
30CC 39               (gshell_beta5_yak.):07103                  rts   
                      (gshell_beta5_yak.):07104         
30CD 8D14             (gshell_beta5_yak.):07105         INITSCRN bsr   FULLSCRN   Change working area to everything but menu/scroll bars
30CF DC22             (gshell_beta5_yak.):07106                  ldd   WNDWPATH   Get window path
30D1 3406             (gshell_beta5_yak.):07107                  pshs  d
30D3 17FE03           (gshell_beta5_yak.):07108                  lbsr  CLRSCRN    Send $0c to clear screen
30D6 3262             (gshell_beta5_yak.):07109                  leas  2,S        Eat stack
30D8 17DBDC           (gshell_beta5_yak.):07110                  lbsr  UPDTDEVC   Update device list at left in window ONLY
30DB DC36             (gshell_beta5_yak.):07111                  ldd   DEVICNOW   Get ptr to icon descriptor for current selected drive
30DD 2703             (gshell_beta5_yak.):07112                  beq   INITSCR1   No drive selected, return
30DF 17D6AE           (gshell_beta5_yak.):07113                  lbsr  DRAWSCRN   Disable OPEN,COPY,LIST,PRINT,STAT,RENAME,DELETE options
30E2 39               (gshell_beta5_yak.):07114         INITSCR1 rts              Wipe out icons, draw icons, etc., etc.
                      (gshell_beta5_yak.):07115         
                      (gshell_beta5_yak.):07116         * Changed from 22 to 23 for NitrOS9
30E3 C617             (gshell_beta5_yak.):07117         FULLSCRN ldb   #23        Save CWAREA height
30E5 3406             (gshell_beta5_yak.):07118                  pshs  d
30E7 DC24             (gshell_beta5_yak.):07119                  ldd   WINDWSZX   CWAREA width=full width-2
30E9 C002             (gshell_beta5_yak.):07120                  subb  #2
30EB 3406             (gshell_beta5_yak.):07121                  pshs  d          Save it
30ED 8E0001           (gshell_beta5_yak.):07122                  ldx   #1         Save '1'
30F0 3410             (gshell_beta5_yak.):07123                  pshs  X
30F2 D623             (gshell_beta5_yak.):07124                  ldb   WNDWPATH+1 Get window path
30F4 3416             (gshell_beta5_yak.):07125                  pshs  d,X        Save '1' again & path
30F6 1704F7           (gshell_beta5_yak.):07126                  lbsr  CWAREA     Change working area
30F9 326A             (gshell_beta5_yak.):07127                  leas  10,S
30FB 39               (gshell_beta5_yak.):07128                  rts   
                      (gshell_beta5_yak.):07129         
                      (gshell_beta5_yak.):07130         * Draw border stuff for current dir, re-title dir bar
30FC                  (gshell_beta5_yak.):07131         WRITDBAR
                      (gshell_beta5_yak.):07132                IFNE  H6309
                      (gshell_beta5_yak.):07133                  clrd  
                      (gshell_beta5_yak.):07134                ELSE
30FC 4F               (gshell_beta5_yak.):07135                  clra
30FD 5F               (gshell_beta5_yak.):07136                  clrb
                      (gshell_beta5_yak.):07137                ENDC
30FE 3406             (gshell_beta5_yak.):07138                  pshs  d
3100 8E0027           (gshell_beta5_yak.):07139                  ldx   #39        39,0 for 1st coord (relative to window inside border)
3103 DC22             (gshell_beta5_yak.):07140                  ldd   WNDWPATH
3105 3416             (gshell_beta5_yak.):07141                  pshs  d,X
3107 17FE1C           (gshell_beta5_yak.):07142                  lbsr  MOUSOFF    Shut off auto-follow mouse
310A 170548           (gshell_beta5_yak.):07143                  lbsr  SETDPTR    Set draw ptr
                      (gshell_beta5_yak.):07144         
310D C6B7             (gshell_beta5_yak.):07145                  ldb   #183       Draw to 39,183 (for 200 line screen)
                      (gshell_beta5_yak.):07146         
310F ED64             (gshell_beta5_yak.):07147                  std   4,S
                      (gshell_beta5_yak.):07148         
3111 17052D           (gshell_beta5_yak.):07149                  lbsr  LINE
                      (gshell_beta5_yak.):07150         
3114 C608             (gshell_beta5_yak.):07151                  ldb   #8         Y coord=8
                      (gshell_beta5_yak.):07152         
3116 ED64             (gshell_beta5_yak.):07153                  std   4,s
                      (gshell_beta5_yak.):07154         
3118 17053A           (gshell_beta5_yak.):07155                  lbsr  SETDPTR    Set draw ptr to 39,8
                      (gshell_beta5_yak.):07156         
311B DC19             (gshell_beta5_yak.):07157                  ldd   PIXELSWD   Get far right coord of current dir window
                      (gshell_beta5_yak.):07158         
311D ED62             (gshell_beta5_yak.):07159                  std   2,s
                      (gshell_beta5_yak.):07160         
311F 17051F           (gshell_beta5_yak.):07161                  lbsr  LINE       Draw top line
                      (gshell_beta5_yak.):07162         
3122 D600             (gshell_beta5_yak.):07163                  ldb   WIPED      icons ok already?
                      (gshell_beta5_yak.):07164         
3124 10270089         (gshell_beta5_yak.):07165                  lbeq  WIPICEXT   Yes, exit
                      (gshell_beta5_yak.):07166         
                      (gshell_beta5_yak.):07167         * From here on draws the dir bar, question mark, and current directory.
                      (gshell_beta5_yak.):07168         
                      (gshell_beta5_yak.):07169         *  Should flag to NOT do this if still in same dir.
                      (gshell_beta5_yak.):07170         
3128 CC0003           (gshell_beta5_yak.):07171                  ldd   #YNT.G8X8  8x8 graphic font
                      (gshell_beta5_yak.):07172         
312B ED64             (gshell_beta5_yak.):07173                  std   4,S
                      (gshell_beta5_yak.):07174         
312D C6C8             (gshell_beta5_yak.):07175                  ldb   #QRP.FNT
                      (gshell_beta5_yak.):07176         
312F ED62             (gshell_beta5_yak.):07177                  std   2,S
                      (gshell_beta5_yak.):07178         
3131 1704D9           (gshell_beta5_yak.):07179                  lbsr  FONT       Set font to special GSHELL font set
                      (gshell_beta5_yak.):07180         
                      (gshell_beta5_yak.):07181                IFNE  H6309
                      (gshell_beta5_yak.):07182         
                      (gshell_beta5_yak.):07183                  clrd  
                      (gshell_beta5_yak.):07184         
                      (gshell_beta5_yak.):07185                ELSE
                      (gshell_beta5_yak.):07186         
3134 4F               (gshell_beta5_yak.):07187                  clra
                      (gshell_beta5_yak.):07188         
3135 5F               (gshell_beta5_yak.):07189                  clrb
                      (gshell_beta5_yak.):07190         
                      (gshell_beta5_yak.):07191                ENDC
                      (gshell_beta5_yak.):07192         
3136 ED64             (gshell_beta5_yak.):07193                  std   4,S
                      (gshell_beta5_yak.):07194         
3138 C606             (gshell_beta5_yak.):07195                  ldb   #6
                      (gshell_beta5_yak.):07196         
313A ED62             (gshell_beta5_yak.):07197                  std   2,S
                      (gshell_beta5_yak.):07198         
313C 17FD77           (gshell_beta5_yak.):07199                  lbsr  GOTOXY     Text cursor to 6,0
                      (gshell_beta5_yak.):07200         
313F 17FD5A           (gshell_beta5_yak.):07201                  lbsr  WBOX.BAR   Draw dir entry close box, and bars all the way across
                      (gshell_beta5_yak.):07202         
3142 C601             (gshell_beta5_yak.):07203                  ldb   #YNT.S8X8  Select 8x8 text font
                      (gshell_beta5_yak.):07204         
3144 ED64             (gshell_beta5_yak.):07205                  std   4,S
                      (gshell_beta5_yak.):07206         
3146 C6C8             (gshell_beta5_yak.):07207                  ldb   #QRP.FNT
                      (gshell_beta5_yak.):07208         
3148 ED62             (gshell_beta5_yak.):07209                  std   2,S
                      (gshell_beta5_yak.):07210         
314A 1704C0           (gshell_beta5_yak.):07211                  lbsr  FONT
                      (gshell_beta5_yak.):07212         
314D C605             (gshell_beta5_yak.):07213                  ldb   #5         Write out ' <?> ' for help box
                      (gshell_beta5_yak.):07214         
314F E765             (gshell_beta5_yak.):07215                  stb   5,S
                      (gshell_beta5_yak.):07216         
3151 308C63           (gshell_beta5_yak.):07217                  leax  <QUERY,PC
                      (gshell_beta5_yak.):07218         
3154 AF62             (gshell_beta5_yak.):07219                  stx   2,S
                      (gshell_beta5_yak.):07220         
3156 170259           (gshell_beta5_yak.):07221                  lbsr  I.WRITE
                      (gshell_beta5_yak.):07222         
3159 C602             (gshell_beta5_yak.):07223                  ldb   #YNT.S6X8  6x8 text font
                      (gshell_beta5_yak.):07224         
315B ED64             (gshell_beta5_yak.):07225                  std   4,S
                      (gshell_beta5_yak.):07226         
315D C6C8             (gshell_beta5_yak.):07227                  ldb   #QRP.FNT
                      (gshell_beta5_yak.):07228         
315F ED62             (gshell_beta5_yak.):07229                  std   2,S
                      (gshell_beta5_yak.):07230         
3161 1704A9           (gshell_beta5_yak.):07231                  lbsr  FONT       Text cursor to 10,0
                      (gshell_beta5_yak.):07232         
                      (gshell_beta5_yak.):07233                IFNE  H6309
                      (gshell_beta5_yak.):07234         
                      (gshell_beta5_yak.):07235                  clrd  
                      (gshell_beta5_yak.):07236         
                      (gshell_beta5_yak.):07237                ELSE
                      (gshell_beta5_yak.):07238         
3164 4F               (gshell_beta5_yak.):07239                  clra
                      (gshell_beta5_yak.):07240         
3165 5F               (gshell_beta5_yak.):07241                  clrb
                      (gshell_beta5_yak.):07242         
                      (gshell_beta5_yak.):07243                ENDC
                      (gshell_beta5_yak.):07244         
3166 ED64             (gshell_beta5_yak.):07245                  std   4,S
                      (gshell_beta5_yak.):07246         
3168 C60A             (gshell_beta5_yak.):07247                  ldb   #10
                      (gshell_beta5_yak.):07248         
316A ED62             (gshell_beta5_yak.):07249                  std   2,S
                      (gshell_beta5_yak.):07250         
316C 17FD47           (gshell_beta5_yak.):07251                  lbsr  GOTOXY
                      (gshell_beta5_yak.):07252         
316F 8E0471           (gshell_beta5_yak.):07253                  ldx   #DDIRNAME  Print dir name (as far as can fit)
                      (gshell_beta5_yak.):07254         
3172 AF62             (gshell_beta5_yak.):07255                  stx   2,S
                      (gshell_beta5_yak.):07256         
3174 3410             (gshell_beta5_yak.):07257                  pshs  X
                      (gshell_beta5_yak.):07258         
3176 17028C           (gshell_beta5_yak.):07259                  lbsr  STRLEN
                      (gshell_beta5_yak.):07260         
3179 3510             (gshell_beta5_yak.):07261                  puls  X
                      (gshell_beta5_yak.):07262         
317B 10830022         (gshell_beta5_yak.):07263                  cmpd  #34        If 320 screen, we can fit up to 34 chars
                      (gshell_beta5_yak.):07264         
317F 231E             (gshell_beta5_yak.):07265                  bls   WRITDBA1
                      (gshell_beta5_yak.):07266         
3181 0D1B             (gshell_beta5_yak.):07267                  tst   FLAG640W   Check if 640 screen, in which case we can fit up to 87 chars
                      (gshell_beta5_yak.):07268         
3183 2710             (gshell_beta5_yak.):07269                  beq   WRITDB05
                      (gshell_beta5_yak.):07270         
3185 10830057         (gshell_beta5_yak.):07271                  cmpd  #87
                      (gshell_beta5_yak.):07272         
3189 2314             (gshell_beta5_yak.):07273                  bls   WRITDBA1
                      (gshell_beta5_yak.):07274         
318B 830057           (gshell_beta5_yak.):07275                  subd  #87
                      (gshell_beta5_yak.):07276         
318E 308B             (gshell_beta5_yak.):07277                  leax  D,X
                      (gshell_beta5_yak.):07278         
3190 CC0057           (gshell_beta5_yak.):07279                  ldd   #87
                      (gshell_beta5_yak.):07280         
3193 2008             (gshell_beta5_yak.):07281                  bra   WRITDB07
                      (gshell_beta5_yak.):07282         
                      (gshell_beta5_yak.):07283         
                      (gshell_beta5_yak.):07284         
3195 830022           (gshell_beta5_yak.):07285         WRITDB05 subd  #34
                      (gshell_beta5_yak.):07286         
3198 308B             (gshell_beta5_yak.):07287                  leax  D,X
                      (gshell_beta5_yak.):07288         
319A CC0022           (gshell_beta5_yak.):07289                  ldd   #34
                      (gshell_beta5_yak.):07290         
319D AF62             (gshell_beta5_yak.):07291         WRITDB07 stx   2,S
                      (gshell_beta5_yak.):07292         
319F ED64             (gshell_beta5_yak.):07293         WRITDBA1 std   4,S
                      (gshell_beta5_yak.):07294         
31A1 17020E           (gshell_beta5_yak.):07295                  lbsr  I.WRITE    Write out current directory name
                      (gshell_beta5_yak.):07296         
31A4 CC0001           (gshell_beta5_yak.):07297                  ldd   #1
                      (gshell_beta5_yak.):07298         
31A7 ED64             (gshell_beta5_yak.):07299                  std   4,S
                      (gshell_beta5_yak.):07300         
31A9 308C10           (gshell_beta5_yak.):07301                  leax  <ONESPACE,PC Add one space
                      (gshell_beta5_yak.):07302         
31AC AF62             (gshell_beta5_yak.):07303                  stx   2,S
                      (gshell_beta5_yak.):07304         
31AE 170201           (gshell_beta5_yak.):07305                  lbsr  I.WRITE
                      (gshell_beta5_yak.):07306         
31B1 17FD76           (gshell_beta5_yak.):07307         WIPICEXT lbsr  INITMOUS   Re-init mouse
                      (gshell_beta5_yak.):07308         
31B4 3266             (gshell_beta5_yak.):07309                  leas  6,S        Eat stack & return
                      (gshell_beta5_yak.):07310         
31B6 39               (gshell_beta5_yak.):07311                  rts   
                      (gshell_beta5_yak.):07312         
                      (gshell_beta5_yak.):07313         
                      (gshell_beta5_yak.):07314         
31B7 203C3F3E20       (gshell_beta5_yak.):07315         QUERY    fcc   " <?> "
                      (gshell_beta5_yak.):07316         
                      (gshell_beta5_yak.):07317         
                      (gshell_beta5_yak.):07318         
31BC 20               (gshell_beta5_yak.):07319         ONESPACE fcc   " "
                      (gshell_beta5_yak.):07320         
                      (gshell_beta5_yak.):07321         
                      (gshell_beta5_yak.):07322         
                      (gshell_beta5_yak.):07323         * memory allocation ala K&R
                      (gshell_beta5_yak.):07324         
                      (gshell_beta5_yak.):07325         *  functionally identical to the C stuff from MicroWare
                      (gshell_beta5_yak.):07326         
                      (gshell_beta5_yak.):07327         *   but 75% as much code and faster
                      (gshell_beta5_yak.):07328         
                      (gshell_beta5_yak.):07329         *   calloc split out to save size
                      (gshell_beta5_yak.):07330         
                      (gshell_beta5_yak.):07331         * Allocates memory in multiples of 256 bytes (pages)
                      (gshell_beta5_yak.):07332         
                      (gshell_beta5_yak.):07333         * Exit:D=-1 If could not get the memory requested
                      (gshell_beta5_yak.):07334         
                      (gshell_beta5_yak.):07335         
                      (gshell_beta5_yak.):07336         
31BD EC62             (gshell_beta5_yak.):07337         MORECORE ldd   2,S        get nu   (Get # 4 byte units requested)
                      (gshell_beta5_yak.):07338         
31BF C300FF           (gshell_beta5_yak.):07339                  addd  #255       nu + NALLOC - 1  Round up to even 256 byte page
                      (gshell_beta5_yak.):07340         
31C2 5F               (gshell_beta5_yak.):07341                  clrb             divided by NALLOC
                      (gshell_beta5_yak.):07342         
31C3 3406             (gshell_beta5_yak.):07343                  pshs  D          rnu = result      Save # of 256 byte pages needed
                      (gshell_beta5_yak.):07344         
31C5 58               (gshell_beta5_yak.):07345                  aslb             * sizeof(HEADER)    (Multiply by 4)
                      (gshell_beta5_yak.):07346         
31C6 49               (gshell_beta5_yak.):07347                  rola  
                      (gshell_beta5_yak.):07348         
31C7 58               (gshell_beta5_yak.):07349                  aslb  
                      (gshell_beta5_yak.):07350         
31C8 49               (gshell_beta5_yak.):07351                  rola  
                      (gshell_beta5_yak.):07352         
31C9 3406             (gshell_beta5_yak.):07353                  pshs  D          Save # 
                      (gshell_beta5_yak.):07354         
31CB 1702D2           (gshell_beta5_yak.):07355                  lbsr  SBRK       Go allocate more data mem & clear it
                      (gshell_beta5_yak.):07356         
31CE 3262             (gshell_beta5_yak.):07357                  leas  2,S        Eat temp
                      (gshell_beta5_yak.):07358         
31D0 3540             (gshell_beta5_yak.):07359                  puls  U          get rnu into U (U=# 256 byte pages requested)
                      (gshell_beta5_yak.):07360         
31D2 1083FFFF         (gshell_beta5_yak.):07361                  cmpd  #-1        Did we get our requested data memory?
                      (gshell_beta5_yak.):07362         
31D6 2710             (gshell_beta5_yak.):07363                  beq   ANRTS      No, return with D=-1
                      (gshell_beta5_yak.):07364         
31D8 1E03             (gshell_beta5_yak.):07365                  exg   D,U        Swap # 256 byte pages & ptr to start of free data mem
                      (gshell_beta5_yak.):07366         
31DA ED42             (gshell_beta5_yak.):07367                  std   2,U        Save # 256 byte pages at 2,<start of free data mem>
                      (gshell_beta5_yak.):07368         
31DC 3344             (gshell_beta5_yak.):07369                  leau  4,U        up += 1 (Point to next entry after free data header)??
                      (gshell_beta5_yak.):07370         
31DE 3440             (gshell_beta5_yak.):07371                  pshs  U          Save ptr
                      (gshell_beta5_yak.):07372         
31E0 8D71             (gshell_beta5_yak.):07373                  bsr   FREE
                      (gshell_beta5_yak.):07374         
31E2 3262             (gshell_beta5_yak.):07375                  leas  2,S        waste up
                      (gshell_beta5_yak.):07376         
31E4 EEA9043A         (gshell_beta5_yak.):07377                  ldu   ALLOCP,Y   return allocp (never 0)
                      (gshell_beta5_yak.):07378         
31E8 39               (gshell_beta5_yak.):07379         ANRTS    rts   
                      (gshell_beta5_yak.):07380         
                      (gshell_beta5_yak.):07381         
                      (gshell_beta5_yak.):07382         
                      (gshell_beta5_yak.):07383         * Allocate memory within our data area
                      (gshell_beta5_yak.):07384         
31E9 3446             (gshell_beta5_yak.):07385         MALLOC   pshs  D,U        Preserve regs
                      (gshell_beta5_yak.):07386         
31EB EC66             (gshell_beta5_yak.):07387                  ldd   6,S        Get # bytes to be allocated
                      (gshell_beta5_yak.):07388         
31ED C30003           (gshell_beta5_yak.):07389                  addd  #3         nbytes + sizeof(HEADER) - 1
                      (gshell_beta5_yak.):07390         
                      (gshell_beta5_yak.):07391                IFNE  H6309
                      (gshell_beta5_yak.):07392         
                      (gshell_beta5_yak.):07393                  lsrd             div by sizeof(HEADER) (4 bytes)
                      (gshell_beta5_yak.):07394         
                      (gshell_beta5_yak.):07395                  lsrd  
                      (gshell_beta5_yak.):07396         
                      (gshell_beta5_yak.):07397                  incd             result+1
                      (gshell_beta5_yak.):07398         
                      (gshell_beta5_yak.):07399                ELSE
                      (gshell_beta5_yak.):07400         
31F0 44               (gshell_beta5_yak.):07401                  lsra
                      (gshell_beta5_yak.):07402         
31F1 56               (gshell_beta5_yak.):07403                  rorb
                      (gshell_beta5_yak.):07404         
31F2 44               (gshell_beta5_yak.):07405                  lsra
                      (gshell_beta5_yak.):07406         
31F3 56               (gshell_beta5_yak.):07407                  rorb
                      (gshell_beta5_yak.):07408         
31F4 C30001           (gshell_beta5_yak.):07409                  addd  #$0001
                      (gshell_beta5_yak.):07410         
                      (gshell_beta5_yak.):07411                ENDC
                      (gshell_beta5_yak.):07412         
31F7 EDE4             (gshell_beta5_yak.):07413                  std   ,S         nunits = result (units allocated seems to be 4 byte chunks)
                      (gshell_beta5_yak.):07414         
31F9 AEA9043A         (gshell_beta5_yak.):07415                  ldx   ALLOCP,Y   q = allocp  (Get current value)
                      (gshell_beta5_yak.):07416         
31FD 2611             (gshell_beta5_yak.):07417                  bne   MALLOC1    if not 0    (If not zero, it has been initialized)
                      (gshell_beta5_yak.):07418         
31FF 8E1343           (gshell_beta5_yak.):07419                  ldx   #BASE      q = &base   (Initialize it to BASE)
                      (gshell_beta5_yak.):07420         
3202 AFA9043A         (gshell_beta5_yak.):07421                  stx   ALLOCP,Y   allocp = q = &base
                      (gshell_beta5_yak.):07422         
3206 AFA91343         (gshell_beta5_yak.):07423                  stx   BASE,Y     base.ptr = .... = &base  (BASE points to itself)
                      (gshell_beta5_yak.):07424         
                      (gshell_beta5_yak.):07425                IFNE  H6309
                      (gshell_beta5_yak.):07426         
                      (gshell_beta5_yak.):07427                  clrd  
                      (gshell_beta5_yak.):07428         
                      (gshell_beta5_yak.):07429                ELSE
                      (gshell_beta5_yak.):07430         
320A 4F               (gshell_beta5_yak.):07431                  clra
                      (gshell_beta5_yak.):07432         
320B 5F               (gshell_beta5_yak.):07433                  clrb
                      (gshell_beta5_yak.):07434         
                      (gshell_beta5_yak.):07435                ENDC
                      (gshell_beta5_yak.):07436         
320C EDA91345         (gshell_beta5_yak.):07437                  std   BASE+2,Y   base.size = 0   (it's size=0)
                      (gshell_beta5_yak.):07438         
3210 EE84             (gshell_beta5_yak.):07439         MALLOC1  ldu   ,X         p = q->ptr   (Get ptr to current allocp (last mem entry?)
                      (gshell_beta5_yak.):07440         
3212 2004             (gshell_beta5_yak.):07441                  bra   MALLOC3
                      (gshell_beta5_yak.):07442         
                      (gshell_beta5_yak.):07443         
                      (gshell_beta5_yak.):07444         
3214 1F31             (gshell_beta5_yak.):07445         MALLOC2  tfr   U,X        q = p
                      (gshell_beta5_yak.):07446         
3216 EEC4             (gshell_beta5_yak.):07447                  ldu   ,U         p = p->ptr
                      (gshell_beta5_yak.):07448         
3218 EC42             (gshell_beta5_yak.):07449         MALLOC3  ldd   2,U        Get size of last block allocated
                      (gshell_beta5_yak.):07450         
321A 10A3E4           (gshell_beta5_yak.):07451                  cmpd  ,S         Compare with # 4 byte blocks requested
                      (gshell_beta5_yak.):07452         
321D 2522             (gshell_beta5_yak.):07453                  blo   MALLOC6    if (p->size >= nunits)
                      (gshell_beta5_yak.):07454         
321F 2606             (gshell_beta5_yak.):07455                  bne   MALLOC4    if (p->size == nunits)
                      (gshell_beta5_yak.):07456         
3221 ECC4             (gshell_beta5_yak.):07457                  ldd   ,U
                      (gshell_beta5_yak.):07458         
3223 ED84             (gshell_beta5_yak.):07459                  std   ,X         q->ptr = p->ptr
                      (gshell_beta5_yak.):07460         
3225 2010             (gshell_beta5_yak.):07461                  bra   MALLOC5
                      (gshell_beta5_yak.):07462         
                      (gshell_beta5_yak.):07463         
                      (gshell_beta5_yak.):07464         
3227 EC42             (gshell_beta5_yak.):07465         MALLOC4  ldd   2,U        p->size -= nunits
                      (gshell_beta5_yak.):07466         
3229 A3E4             (gshell_beta5_yak.):07467                  subd  ,S
                      (gshell_beta5_yak.):07468         
322B ED42             (gshell_beta5_yak.):07469                  std   2,U
                      (gshell_beta5_yak.):07470         
322D 58               (gshell_beta5_yak.):07471                  aslb             (char) p->size
                      (gshell_beta5_yak.):07472         
322E 49               (gshell_beta5_yak.):07473                  rola  
                      (gshell_beta5_yak.):07474         
322F 58               (gshell_beta5_yak.):07475                  aslb  
                      (gshell_beta5_yak.):07476         
3230 49               (gshell_beta5_yak.):07477                  rola  
                      (gshell_beta5_yak.):07478         
3231 33CB             (gshell_beta5_yak.):07479                  leau  D,U        p += (char) p->size
                      (gshell_beta5_yak.):07480         
3233 ECE4             (gshell_beta5_yak.):07481                  ldd   ,S         p->size = nunits
                      (gshell_beta5_yak.):07482         
3235 ED42             (gshell_beta5_yak.):07483                  std   2,U
                      (gshell_beta5_yak.):07484         
                      (gshell_beta5_yak.):07485         
                      (gshell_beta5_yak.):07486         
3237 AFA9043A         (gshell_beta5_yak.):07487         MALLOC5  stx   ALLOCP,Y   allocp = q
                      (gshell_beta5_yak.):07488         
323B 3344             (gshell_beta5_yak.):07489                  leau  4,U        p += 1 (header)
                      (gshell_beta5_yak.):07490         
323D 1F30             (gshell_beta5_yak.):07491                  tfr   U,D        set up for return
                      (gshell_beta5_yak.):07492         
323F 200E             (gshell_beta5_yak.):07493                  bra   MALLOC7
                      (gshell_beta5_yak.):07494         
                      (gshell_beta5_yak.):07495         
                      (gshell_beta5_yak.):07496         
3241 11A3A9043A       (gshell_beta5_yak.):07497         MALLOC6  cmpu  ALLOCP,Y   if (p == allocp)
                      (gshell_beta5_yak.):07498         
3246 26CC             (gshell_beta5_yak.):07499                  bne   MALLOC2
                      (gshell_beta5_yak.):07500         
3248 17FF72           (gshell_beta5_yak.):07501                  lbsr  MORECORE   nunits above return addr (Get more data mem)
                      (gshell_beta5_yak.):07502         
324B 26C7             (gshell_beta5_yak.):07503                  bne   MALLOC2    if (p = .... == 0) (Get mem failed?)
                      (gshell_beta5_yak.):07504         
                      (gshell_beta5_yak.):07505                IFNE  H6309
                      (gshell_beta5_yak.):07506         
                      (gshell_beta5_yak.):07507                  clrd             set up zero for return
                      (gshell_beta5_yak.):07508         
                      (gshell_beta5_yak.):07509                ELSE
                      (gshell_beta5_yak.):07510         
324D 4F               (gshell_beta5_yak.):07511                  clra
                      (gshell_beta5_yak.):07512         
324E 5F               (gshell_beta5_yak.):07513                  clrb
                      (gshell_beta5_yak.):07514         
                      (gshell_beta5_yak.):07515                ENDC
                      (gshell_beta5_yak.):07516         
324F 3262             (gshell_beta5_yak.):07517         MALLOC7  leas  2,S
                      (gshell_beta5_yak.):07518         
3251 35C0             (gshell_beta5_yak.):07519                  puls  U,PC
                      (gshell_beta5_yak.):07520         
                      (gshell_beta5_yak.):07521         
                      (gshell_beta5_yak.):07522         
                      (gshell_beta5_yak.):07523         * Entry: 0-1,s    RTS address
                      (gshell_beta5_yak.):07524         
                      (gshell_beta5_yak.):07525         *        2-3,s    Ptr of some sort (to data area after 4 byte header?)
                      (gshell_beta5_yak.):07526         
                      (gshell_beta5_yak.):07527         *        D=# 256 byte pages requested
                      (gshell_beta5_yak.):07528         
                      (gshell_beta5_yak.):07529         *        U=Ptr to header+4
                      (gshell_beta5_yak.):07530         
3253 3446             (gshell_beta5_yak.):07531         FREE     pshs  D,U        Save ??? ptr & #256 byte pages
                      (gshell_beta5_yak.):07532         
3255 EE66             (gshell_beta5_yak.):07533                  ldu   6,S        Get ptr to data start of allocated chunk?
                      (gshell_beta5_yak.):07534         
3257 335C             (gshell_beta5_yak.):07535                  leau  -4,U       p = ap - 1 (Point to star of chunk header?)
                      (gshell_beta5_yak.):07536         
3259 AEA9043A         (gshell_beta5_yak.):07537                  ldx   ALLOCP,Y   q = allocp  ???
                      (gshell_beta5_yak.):07538         
325D 2010             (gshell_beta5_yak.):07539                  bra   FREE3
                      (gshell_beta5_yak.):07540         
                      (gshell_beta5_yak.):07541         
                      (gshell_beta5_yak.):07542         
325F AC84             (gshell_beta5_yak.):07543         FREE1    cmpx  ,X         if (q >= q->ptr)
                      (gshell_beta5_yak.):07544         
3261 250A             (gshell_beta5_yak.):07545                  blo   FREE2
                      (gshell_beta5_yak.):07546         
3263 11A3E4           (gshell_beta5_yak.):07547                  cmpu  ,S         && (p > q
                      (gshell_beta5_yak.):07548         
3266 2213             (gshell_beta5_yak.):07549                  bhi   FREE4
                      (gshell_beta5_yak.):07550         
3268 11A384           (gshell_beta5_yak.):07551                  cmpu  ,X         || p < q->ptr)
                      (gshell_beta5_yak.):07552         
326B 250E             (gshell_beta5_yak.):07553                  blo   FREE4      break
                      (gshell_beta5_yak.):07554         
326D AE84             (gshell_beta5_yak.):07555         FREE2    ldx   ,X         q >= q->ptr
                      (gshell_beta5_yak.):07556         
326F AFE4             (gshell_beta5_yak.):07557         FREE3    stx   ,S         q' = q         Save ??? (chunk header?)
                      (gshell_beta5_yak.):07558         
3271 11A3E4           (gshell_beta5_yak.):07559                  cmpu  ,S         if (p > q)     Is 
                      (gshell_beta5_yak.):07560         
3274 23E9             (gshell_beta5_yak.):07561                  bls   FREE1
                      (gshell_beta5_yak.):07562         
3276 11A384           (gshell_beta5_yak.):07563                  cmpu  ,X         && (p < q->ptr)
                      (gshell_beta5_yak.):07564         
3279 24E4             (gshell_beta5_yak.):07565                  bhs   FREE1
                      (gshell_beta5_yak.):07566         
327B 3440             (gshell_beta5_yak.):07567         FREE4    pshs  U          stack p
                      (gshell_beta5_yak.):07568         
327D EC42             (gshell_beta5_yak.):07569                  ldd   2,U        t$1 = p->size
                      (gshell_beta5_yak.):07570         
327F 58               (gshell_beta5_yak.):07571                  aslb             scale it
                      (gshell_beta5_yak.):07572         
3280 49               (gshell_beta5_yak.):07573                  rola  
                      (gshell_beta5_yak.):07574         
3281 58               (gshell_beta5_yak.):07575                  aslb  
                      (gshell_beta5_yak.):07576         
3282 49               (gshell_beta5_yak.):07577                  rola  
                      (gshell_beta5_yak.):07578         
3283 E3E1             (gshell_beta5_yak.):07579                  addd  ,S++       t$1 = p + p->size
                      (gshell_beta5_yak.):07580         
3285 10A384           (gshell_beta5_yak.):07581                  cmpd  ,X         if (p + p->size == q->ptr)
                      (gshell_beta5_yak.):07582         
3288 2610             (gshell_beta5_yak.):07583                  bne   FREE5
                      (gshell_beta5_yak.):07584         
328A 3410             (gshell_beta5_yak.):07585                  pshs  X          save q
                      (gshell_beta5_yak.):07586         
328C AE84             (gshell_beta5_yak.):07587                  ldx   ,X         q = q->ptr
                      (gshell_beta5_yak.):07588         
328E EC02             (gshell_beta5_yak.):07589                  ldd   2,X        t$1 = q->ptr->size
                      (gshell_beta5_yak.):07590         
3290 3510             (gshell_beta5_yak.):07591                  puls  X          recover q
                      (gshell_beta5_yak.):07592         
3292 E342             (gshell_beta5_yak.):07593                  addd  2,U        t$1 = p->size + p->ptr->size
                      (gshell_beta5_yak.):07594         
3294 ED42             (gshell_beta5_yak.):07595                  std   2,U        p->size = t$1
                      (gshell_beta5_yak.):07596         
3296 EC94             (gshell_beta5_yak.):07597                  ldd   [,X]       t$1 = q->ptr->ptr
                      (gshell_beta5_yak.):07598         
3298 2002             (gshell_beta5_yak.):07599                  bra   FREE6
                      (gshell_beta5_yak.):07600         
                      (gshell_beta5_yak.):07601         
                      (gshell_beta5_yak.):07602         
329A EC84             (gshell_beta5_yak.):07603         FREE5    ldd   ,X         t$1 = q->ptr
                      (gshell_beta5_yak.):07604         
329C EDC4             (gshell_beta5_yak.):07605         FREE6    std   ,U         p->ptr = t$1
                      (gshell_beta5_yak.):07606         
329E EC02             (gshell_beta5_yak.):07607                  ldd   2,X        t$1 = q->size
                      (gshell_beta5_yak.):07608         
32A0 58               (gshell_beta5_yak.):07609                  aslb             scale it
                      (gshell_beta5_yak.):07610         
32A1 49               (gshell_beta5_yak.):07611                  rola  
                      (gshell_beta5_yak.):07612         
32A2 58               (gshell_beta5_yak.):07613                  aslb  
                      (gshell_beta5_yak.):07614         
32A3 49               (gshell_beta5_yak.):07615                  rola  
                      (gshell_beta5_yak.):07616         
32A4 E3E4             (gshell_beta5_yak.):07617                  addd  ,S         t$1 = q + q->size
                      (gshell_beta5_yak.):07618         
                      (gshell_beta5_yak.):07619         *NOTE 6309:CMPR D,U
                      (gshell_beta5_yak.):07620         
32A6 3406             (gshell_beta5_yak.):07621                  pshs  D
                      (gshell_beta5_yak.):07622         
32A8 11A3E1           (gshell_beta5_yak.):07623                  cmpu  ,S++       if (q + q->size == p)
                      (gshell_beta5_yak.):07624         
32AB 260C             (gshell_beta5_yak.):07625                  bne   FREE7
                      (gshell_beta5_yak.):07626         
32AD EC02             (gshell_beta5_yak.):07627                  ldd   2,X        t$1 = q->size
                      (gshell_beta5_yak.):07628         
32AF E342             (gshell_beta5_yak.):07629                  addd  2,U        t$1 += p->size
                      (gshell_beta5_yak.):07630         
32B1 ED02             (gshell_beta5_yak.):07631                  std   2,X        q->size = t$1
                      (gshell_beta5_yak.):07632         
32B3 ECC4             (gshell_beta5_yak.):07633                  ldd   ,U         t$1 = p->ptr
                      (gshell_beta5_yak.):07634         
32B5 ED84             (gshell_beta5_yak.):07635                  std   ,X         q->ptr = t$1
                      (gshell_beta5_yak.):07636         
32B7 2002             (gshell_beta5_yak.):07637                  bra   FREE8
                      (gshell_beta5_yak.):07638         
                      (gshell_beta5_yak.):07639         
                      (gshell_beta5_yak.):07640         
32B9 EF84             (gshell_beta5_yak.):07641         FREE7    stu   ,X         q->ptr = p
                      (gshell_beta5_yak.):07642         
32BB AFA9043A         (gshell_beta5_yak.):07643         FREE8    stx   ALLOCP,Y   allocp = q
                      (gshell_beta5_yak.):07644         
32BF 208E             (gshell_beta5_yak.):07645                  bra   MALLOC7
                      (gshell_beta5_yak.):07646         
                      (gshell_beta5_yak.):07647         
                      (gshell_beta5_yak.):07648         
                      (gshell_beta5_yak.):07649         * Attempt to link/load the module to be executed
                      (gshell_beta5_yak.):07650         
32C1 3440             (gshell_beta5_yak.):07651         NMLNKLOD pshs  U
                      (gshell_beta5_yak.):07652         
32C3 327C             (gshell_beta5_yak.):07653                  leas  -4,S         Make temp buffer for two 16 bit values
                      (gshell_beta5_yak.):07654         
32C5 30E4             (gshell_beta5_yak.):07655                  leax  ,S           Point X to 1st 16 bit entry
                      (gshell_beta5_yak.):07656         
32C7 3362             (gshell_beta5_yak.):07657                  leau  2,S          Point U to 2nd 16 bit entry
                      (gshell_beta5_yak.):07658         
32C9 3450             (gshell_beta5_yak.):07659                  pshs  X,U          Save ptrs to temp vars
                      (gshell_beta5_yak.):07660         
32CB EE6C             (gshell_beta5_yak.):07661                  ldu   12,S         Get ptr to GD.table entry
                      (gshell_beta5_yak.):07662         
32CD ECC4             (gshell_beta5_yak.):07663                  ldd   GD.MNAME,U   Get ptr to module name
                      (gshell_beta5_yak.):07664         
32CF 3406             (gshell_beta5_yak.):07665                  pshs  D            Save for subroutine
                      (gshell_beta5_yak.):07666         
32D1 8D3F             (gshell_beta5_yak.):07667                  bsr   F.NMLINK     Attempt to link to the module in memory first (see if is loaded already)
                      (gshell_beta5_yak.):07668         
32D3 ED7E             (gshell_beta5_yak.):07669                  std   -2,S         Check error status of NMLink
                      (gshell_beta5_yak.):07670         
32D5 260A             (gshell_beta5_yak.):07671                  bne   LINLOA1      Successful NMLink, process
                      (gshell_beta5_yak.):07672         
32D7 8D2F             (gshell_beta5_yak.):07673                  bsr   F.NMLOAD     Nope, try loading it (but not into our address space)
                      (gshell_beta5_yak.):07674         
32D9 ED7E             (gshell_beta5_yak.):07675                  std   -2,S         Check error status of NMLoad
                      (gshell_beta5_yak.):07676         
32DB 2604             (gshell_beta5_yak.):07677                  bne   LINLOA1      Successful NMLoad, process
                      (gshell_beta5_yak.):07678         
                      (gshell_beta5_yak.):07679         * 6809/6309 - replace two lines with leas 10,s / puls u,pc (same size, saves 4 cyc)
                      (gshell_beta5_yak.):07680         
32DD 326A             (gshell_beta5_yak.):07681                  leas  10,s         Eat temp stack
                      (gshell_beta5_yak.):07682         
32DF 35C0             (gshell_beta5_yak.):07683                  puls  u,pc         Restore U and return
                      (gshell_beta5_yak.):07684         
                      (gshell_beta5_yak.):07685         *         leas  6,S          Neither worked, eat temp stack, restore U and return
                      (gshell_beta5_yak.):07686         
                      (gshell_beta5_yak.):07687         *         bra   LINLOA3
                      (gshell_beta5_yak.):07688         
                      (gshell_beta5_yak.):07689                  
                      (gshell_beta5_yak.):07690         
                      (gshell_beta5_yak.):07691         * module is now loaded and/or linked.
                      (gshell_beta5_yak.):07692         
32E1 3266             (gshell_beta5_yak.):07693         LINLOA1  leas  6,S          Eat temp stack
                      (gshell_beta5_yak.):07694         
32E3 E661             (gshell_beta5_yak.):07695                  ldb   1,S          Get language/type byte
                      (gshell_beta5_yak.):07696         
32E5 C4F0             (gshell_beta5_yak.):07697                  andb  #$F0         Mask so we only have module type
                      (gshell_beta5_yak.):07698         
32E7 54               (gshell_beta5_yak.):07699                  lsrb               Shift to lower nibble
                      (gshell_beta5_yak.):07700         
32E8 54               (gshell_beta5_yak.):07701                  lsrb  
                      (gshell_beta5_yak.):07702         
32E9 54               (gshell_beta5_yak.):07703                  lsrb  
                      (gshell_beta5_yak.):07704         
32EA 54               (gshell_beta5_yak.):07705                  lsrb  
                      (gshell_beta5_yak.):07706         
32EB E748             (gshell_beta5_yak.):07707                  stb   GD.MTYPE,U   Save module type
                      (gshell_beta5_yak.):07708         
32ED E661             (gshell_beta5_yak.):07709                  ldb   1,S          Get language/type byte back
                      (gshell_beta5_yak.):07710         
32EF C40F             (gshell_beta5_yak.):07711                  andb  #$0F         Mask so we only have language
                      (gshell_beta5_yak.):07712         
32F1 E749             (gshell_beta5_yak.):07713                  stb   GD.MLANG,U   Save language
                      (gshell_beta5_yak.):07714         
32F3 EC4A             (gshell_beta5_yak.):07715                  ldd   GD.MEMSZ,U   Get memory size required
                      (gshell_beta5_yak.):07716         
32F5 260D             (gshell_beta5_yak.):07717                  bne   LINLOA3      If we already have a legitimate memory requirement, skip ahead
                      (gshell_beta5_yak.):07718         
32F7 EC62             (gshell_beta5_yak.):07719                  ldd   2,S          No, get value we got from module header
                      (gshell_beta5_yak.):07720         
32F9 5D               (gshell_beta5_yak.):07721                  tstb               If even 256 multiple, use literal value
                      (gshell_beta5_yak.):07722         
32FA 2701             (gshell_beta5_yak.):07723                  beq   LINLOA2
                      (gshell_beta5_yak.):07724         
32FC 4C               (gshell_beta5_yak.):07725                  inca               If not, round up by 1 page (256 bytes)
                      (gshell_beta5_yak.):07726         
32FD 1F89             (gshell_beta5_yak.):07727         LINLOA2  tfr   A,B          Move A to D (F$Fork wants # of 256 byte pages)
                      (gshell_beta5_yak.):07728         
32FF 4F               (gshell_beta5_yak.):07729                  clra  
                      (gshell_beta5_yak.):07730         
3300 ED4A             (gshell_beta5_yak.):07731                  std   GD.MEMSZ,U   Save as mem size needed
                      (gshell_beta5_yak.):07732         
3302 C601             (gshell_beta5_yak.):07733                  ldb   #1           Set D=1 for exit (that we found module)
                      (gshell_beta5_yak.):07734         
3304 3264             (gshell_beta5_yak.):07735         LINLOA3  leas  4,S          Eat temp stack, restore U and return
                      (gshell_beta5_yak.):07736         
3306 35C0             (gshell_beta5_yak.):07737                  puls  U,PC
                      (gshell_beta5_yak.):07738         
                      (gshell_beta5_yak.):07739         
                      (gshell_beta5_yak.):07740         
                      (gshell_beta5_yak.):07741         * 0-1,s = preserved X
                      (gshell_beta5_yak.):07742         
                      (gshell_beta5_yak.):07743         * 2-3,s = preserved Y
                      (gshell_beta5_yak.):07744         
                      (gshell_beta5_yak.):07745         * 4-5,s = RTS addressd
                      (gshell_beta5_yak.):07746         
                      (gshell_beta5_yak.):07747         * 6-7,s = Ptr to module name (Still pointing to just module name from previous F.NMLINK call)
                      (gshell_beta5_yak.):07748         
                      (gshell_beta5_yak.):07749         * Exit: D=0 (could not link), or D=1 (NMLink successful)
                      (gshell_beta5_yak.):07750         
                      (gshell_beta5_yak.):07751         * 6809/6309 NOTE: I THINK THIS ROUTINE IS THE ONE CAUSING A PROBLEM WITH DIRECTLY DOUBLE-CLICKING A RUNB
                      (gshell_beta5_yak.):07752         
                      (gshell_beta5_yak.):07753         * PROGRAM. IT APPEARS TO BE SCREWING UP THE GD.MNAME PTR TO POINT TO A NUL, AND THEN THE FULL PATH. I THINK
                      (gshell_beta5_yak.):07754         
                      (gshell_beta5_yak.):07755         * THAT THE FULL PATH SHOULD ONLY BE FOR F$NMLOAD, AND THAT THE PTR AFTER THAT SHOULD JUST BE THE MODULE NAME
                      (gshell_beta5_yak.):07756         
3308 3430             (gshell_beta5_yak.):07757         F.NMLOAD pshs  X,Y          Save X,Y
                      (gshell_beta5_yak.):07758         
330A AE66             (gshell_beta5_yak.):07759                  ldx   6,S          Get ptr to module name (full path)
                      (gshell_beta5_yak.):07760         
330C 4F               (gshell_beta5_yak.):07761                  clra               Type/language = wildcard (any kind)
                      (gshell_beta5_yak.):07762         
330D 103F22           (gshell_beta5_yak.):07763                  os9   F$NMLoad     Attempt to load it
                      (gshell_beta5_yak.):07764         
3310 200A             (gshell_beta5_yak.):07765                  bra   F.NML1       Check if successful
                      (gshell_beta5_yak.):07766         
                      (gshell_beta5_yak.):07767         
                      (gshell_beta5_yak.):07768         
3312 3430             (gshell_beta5_yak.):07769         F.NMLINK pshs  X,Y
                      (gshell_beta5_yak.):07770         
                      (gshell_beta5_yak.):07771         * 0-1,s = preserved X
                      (gshell_beta5_yak.):07772         
                      (gshell_beta5_yak.):07773         * 2-3,s = preserved Y
                      (gshell_beta5_yak.):07774         
                      (gshell_beta5_yak.):07775         * 4-5,s = RTS address
                      (gshell_beta5_yak.):07776         
                      (gshell_beta5_yak.):07777         * 6-7,s = Ptr to module name (full path)
                      (gshell_beta5_yak.):07778         
                      (gshell_beta5_yak.):07779         * Exit: D=0 (could not link), or D=1 (NMLink successful)
                      (gshell_beta5_yak.):07780         
3314 AE66             (gshell_beta5_yak.):07781                  ldx   6,S          Get ptr to module path and name
                      (gshell_beta5_yak.):07782         
3316 8D26             (gshell_beta5_yak.):07783                  bsr   SKPSLASH     Get ptr to just module name in X
                      (gshell_beta5_yak.):07784         
3318 4F               (gshell_beta5_yak.):07785                  clra               Type/language = wildcard (any kind)
                      (gshell_beta5_yak.):07786         
3319 103F21           (gshell_beta5_yak.):07787                  os9   F$NMLink     Attempt to link to module (w/o mapping it into our space)
                      (gshell_beta5_yak.):07788         
331C 2409             (gshell_beta5_yak.):07789         F.NML1   bcc   F.NML2       Successful; skip ahead
                      (gshell_beta5_yak.):07790         
331E 3530             (gshell_beta5_yak.):07791                  puls  X,Y          Could not link; restore original X,Y
                      (gshell_beta5_yak.):07792         
3320 E7A9044E         (gshell_beta5_yak.):07793                  stb   ERRNO+1,Y    Save error #; exit with D=0
                      (gshell_beta5_yak.):07794         
                      (gshell_beta5_yak.):07795                IFNE  H6309
                      (gshell_beta5_yak.):07796         
                      (gshell_beta5_yak.):07797                  clrd  
                      (gshell_beta5_yak.):07798         
                      (gshell_beta5_yak.):07799                ELSE
                      (gshell_beta5_yak.):07800         
3324 4F               (gshell_beta5_yak.):07801                  clra
                      (gshell_beta5_yak.):07802         
3325 5F               (gshell_beta5_yak.):07803                  clrb
                      (gshell_beta5_yak.):07804         
                      (gshell_beta5_yak.):07805                ENDC
                      (gshell_beta5_yak.):07806         
3326 39               (gshell_beta5_yak.):07807                  rts   
                      (gshell_beta5_yak.):07808         
                      (gshell_beta5_yak.):07809         
                      (gshell_beta5_yak.):07810         
                      (gshell_beta5_yak.):07811         * Successful F$NMLink/F$NMLoad call. regs are exit from NMLink itself
                      (gshell_beta5_yak.):07812         
3327 10AFF80A         (gshell_beta5_yak.):07813         F.NML2   sty   [10,S]       Save data mem size needed
                      (gshell_beta5_yak.):07814         
332B 1F89             (gshell_beta5_yak.):07815                  tfr   A,B          Move language/type code of module to D
                      (gshell_beta5_yak.):07816         
332D 4F               (gshell_beta5_yak.):07817                  clra  
                      (gshell_beta5_yak.):07818         
332E EDF808           (gshell_beta5_yak.):07819                  std   [8,S]        Save language/type code
                      (gshell_beta5_yak.):07820         
3331 C601             (gshell_beta5_yak.):07821                  ldb   #1           Exit with D=1 (successful NMLink)
                      (gshell_beta5_yak.):07822         
3333 35B0             (gshell_beta5_yak.):07823                  puls  X,Y,PC
                      (gshell_beta5_yak.):07824         
                      (gshell_beta5_yak.):07825         
                      (gshell_beta5_yak.):07826         
3335 AE62             (gshell_beta5_yak.):07827         F.UNLOAD ldx   2,S          Get ptr to module name
                      (gshell_beta5_yak.):07828         
3337 8D05             (gshell_beta5_yak.):07829                  bsr   SKPSLASH     Find only module name (in case full path)
                      (gshell_beta5_yak.):07830         
3339 4F               (gshell_beta5_yak.):07831                  clra               Type/language = wildcard (any kind)
                      (gshell_beta5_yak.):07832         
333A 103F1D           (gshell_beta5_yak.):07833                  os9   F$UnLoad
                      (gshell_beta5_yak.):07834         
333D 39               (gshell_beta5_yak.):07835                  rts   
                      (gshell_beta5_yak.):07836         
                      (gshell_beta5_yak.):07837         
                      (gshell_beta5_yak.):07838         
                      (gshell_beta5_yak.):07839         * Get ptr to last slash in pathname
                      (gshell_beta5_yak.):07840         
                      (gshell_beta5_yak.):07841         * Entry: X=ptr to start of full path
                      (gshell_beta5_yak.):07842         
                      (gshell_beta5_yak.):07843         * Exit:  X=ptr to 
                      (gshell_beta5_yak.):07844         
333E 3410             (gshell_beta5_yak.):07845         SKPSLASH pshs  X            Save start ptr to string
                      (gshell_beta5_yak.):07846         
3340 1700D1           (gshell_beta5_yak.):07847                  lbsr  STREND1      Get ptr to end of string
                      (gshell_beta5_yak.):07848         
3343 ACE4             (gshell_beta5_yak.):07849         SKPSLAS1 cmpx  ,S           End ptr=start ptr?
                      (gshell_beta5_yak.):07850         
3345 2F0A             (gshell_beta5_yak.):07851                  ble   SKPSLAS2     Yes, just exit (0 length string)
                      (gshell_beta5_yak.):07852         
3347 E682             (gshell_beta5_yak.):07853                  ldb   ,-X          Get char from end
                      (gshell_beta5_yak.):07854         
3349 C12F             (gshell_beta5_yak.):07855                  cmpb  #'/          Is it a slash?
                      (gshell_beta5_yak.):07856         
334B 26F6             (gshell_beta5_yak.):07857                  bne   SKPSLAS1     No, keep going until we find one (or hit beginning of string)
                      (gshell_beta5_yak.):07858         
334D 3001             (gshell_beta5_yak.):07859                  leax  1,X          Yes, bump ptr back up to start of module name
                      (gshell_beta5_yak.):07860         
334F AFE4             (gshell_beta5_yak.):07861                  stx   ,S           Save ptr
                      (gshell_beta5_yak.):07862         
3351 3590             (gshell_beta5_yak.):07863         SKPSLAS2 puls  x,pc         Get ptr into X & return
                      (gshell_beta5_yak.):07864         
                      (gshell_beta5_yak.):07865         
                      (gshell_beta5_yak.):07866         
3353 5F               (gshell_beta5_yak.):07867         KILLPBUF clrb  
                      (gshell_beta5_yak.):07868         
3354 3406             (gshell_beta5_yak.):07869                  pshs  D
                      (gshell_beta5_yak.):07870         
3356 9E26             (gshell_beta5_yak.):07871                  ldx   PRCIDNUM     Get process #
                      (gshell_beta5_yak.):07872         
3358 DC22             (gshell_beta5_yak.):07873                  ldd   WNDWPATH     Get path to window
                      (gshell_beta5_yak.):07874         
335A 3416             (gshell_beta5_yak.):07875                  pshs  D,X
                      (gshell_beta5_yak.):07876         
335C 1702B3           (gshell_beta5_yak.):07877                  lbsr  KILBUF       Kill all buffers in our group (which is process #)
                      (gshell_beta5_yak.):07878         
335F 3266             (gshell_beta5_yak.):07879                  leas  6,S
                      (gshell_beta5_yak.):07880         
3361 39               (gshell_beta5_yak.):07881                  rts   
                      (gshell_beta5_yak.):07882         
                      (gshell_beta5_yak.):07883         
                      (gshell_beta5_yak.):07884         
                      (gshell_beta5_yak.):07885         * NOTE: ONLY CALLED FROM ONE SPOT. However, F.WAITX is called separately from F.FORK
                      (gshell_beta5_yak.):07886         
                      (gshell_beta5_yak.):07887         * Wait for forked program to die (or wait for signal)
                      (gshell_beta5_yak.):07888         
                      (gshell_beta5_yak.):07889         * Entry: [,x] is a ptr to a 16 bit area to save the child's exit code
                      (gshell_beta5_yak.):07890         
                      (gshell_beta5_yak.):07891         * Exit:  [,x] child's exit code
                      (gshell_beta5_yak.):07892         
                      (gshell_beta5_yak.):07893         *        D=-1 if F$Wait produced an error (and ERRNO contains 16 bit error number)
                      (gshell_beta5_yak.):07894         
                      (gshell_beta5_yak.):07895         *        D=0 - if [,x] ptr was 0
                      (gshell_beta5_yak.):07896         
                      (gshell_beta5_yak.):07897         *   else D=(2-31) Child's process # and 4,s on stack (on return) is exit status code
                      (gshell_beta5_yak.):07898         
3362                  (gshell_beta5_yak.):07899         F.WAIT
                      (gshell_beta5_yak.):07900         
                      (gshell_beta5_yak.):07901                IFNE  H6309
                      (gshell_beta5_yak.):07902         
                      (gshell_beta5_yak.):07903                  clrd             Wait for signal
                      (gshell_beta5_yak.):07904         
                      (gshell_beta5_yak.):07905                ELSE
                      (gshell_beta5_yak.):07906         
3362 4F               (gshell_beta5_yak.):07907                  clra
                      (gshell_beta5_yak.):07908         
3363 5F               (gshell_beta5_yak.):07909                  clrb
                      (gshell_beta5_yak.):07910         
                      (gshell_beta5_yak.):07911                ENDC
                      (gshell_beta5_yak.):07912         
3364 103F04           (gshell_beta5_yak.):07913                  os9   F$Wait
                      (gshell_beta5_yak.):07914         
3367 255B             (gshell_beta5_yak.):07915                  bcs   OS9ERR2    Error, save error code & return (no child process) 
                      (gshell_beta5_yak.):07916         
3369 AE62             (gshell_beta5_yak.):07917                  ldx   2,S        Get ptr to spot on stack to save process ID # & exit code (0=clean F$Exit)
                      (gshell_beta5_yak.):07918         
336B 2704             (gshell_beta5_yak.):07919                  beq   F.WAITX    If 0, exit with child ID process #=0
                      (gshell_beta5_yak.):07920         
336D E701             (gshell_beta5_yak.):07921                  stb   1,X        Save child's exit code in pointed to area
                      (gshell_beta5_yak.):07922         
336F 6F84             (gshell_beta5_yak.):07923                  clr   ,X
                      (gshell_beta5_yak.):07924         
3371 1F89             (gshell_beta5_yak.):07925         F.WAITX  tfr   A,B        D=child process's ID # (Deceased # or new one from F.FORK below)
                      (gshell_beta5_yak.):07926         
3373 4F               (gshell_beta5_yak.):07927                  clra  
                      (gshell_beta5_yak.):07928         
3374 39               (gshell_beta5_yak.):07929                  rts   
                      (gshell_beta5_yak.):07930         
                      (gshell_beta5_yak.):07931         
                      (gshell_beta5_yak.):07932         
                      (gshell_beta5_yak.):07933         * Fork program. Entry: Stack has all the parms for F$Fork.
                      (gshell_beta5_yak.):07934         
                      (gshell_beta5_yak.):07935         * Exit: D=-1 if F$FORK errored out, otherwise D=child process #
                      (gshell_beta5_yak.):07936         
3375 3460             (gshell_beta5_yak.):07937         F.FORK   pshs  Y,U        Save regs
                      (gshell_beta5_yak.):07938         
3377 AE66             (gshell_beta5_yak.):07939                  ldx   6,S        Get ptr to module name (or path/filename)
                      (gshell_beta5_yak.):07940         
3379 10AE68           (gshell_beta5_yak.):07941                  ldy   8,S        Get size of parameter area
                      (gshell_beta5_yak.):07942         
337C EE6A             (gshell_beta5_yak.):07943                  ldu   10,S       Get ptr to start of parameter area
                      (gshell_beta5_yak.):07944         
337E A66D             (gshell_beta5_yak.):07945                  lda   12+1,S     Get language code
                      (gshell_beta5_yak.):07946         
3380 AA6F             (gshell_beta5_yak.):07947                  ora   14+1,S     Merge with type code
                      (gshell_beta5_yak.):07948         
3382 E6E811           (gshell_beta5_yak.):07949                  ldb   16+1,S     Get size of data area (# of 256 byte pages)
                      (gshell_beta5_yak.):07950         
3385 103F03           (gshell_beta5_yak.):07951                  os9   F$Fork     Fork the program
                      (gshell_beta5_yak.):07952         
3388 3560             (gshell_beta5_yak.):07953                  puls  Y,U        restore regs
                      (gshell_beta5_yak.):07954         
338A 2538             (gshell_beta5_yak.):07955                  bcs   OS9ERR2    If error forking, save error # and exit with D=-1
                      (gshell_beta5_yak.):07956         
                      (gshell_beta5_yak.):07957         * Saving 2 bytes/adding 3 cycles, this isn't time sensitive anyways
                      (gshell_beta5_yak.):07958         
338C 20E3             (gshell_beta5_yak.):07959                  bra   F.WAITX    Successful fork, exit with D=child process #
                      (gshell_beta5_yak.):07960         
                      (gshell_beta5_yak.):07961         
                      (gshell_beta5_yak.):07962         
                      (gshell_beta5_yak.):07963         * Raw read
                      (gshell_beta5_yak.):07964         
338E 3420             (gshell_beta5_yak.):07965         I.READ   pshs  Y          Save Y
                      (gshell_beta5_yak.):07966         
3390 AE66             (gshell_beta5_yak.):07967                  ldx   6,S        Get ptr to buffer to read into
                      (gshell_beta5_yak.):07968         
3392 A665             (gshell_beta5_yak.):07969                  lda   5,S        Get file path
                      (gshell_beta5_yak.):07970         
3394 10AE68           (gshell_beta5_yak.):07971                  ldy   8,S        Get size of read
                      (gshell_beta5_yak.):07972         
3397 103F89           (gshell_beta5_yak.):07973                  os9   I$Read     Read data
                      (gshell_beta5_yak.):07974         
339A 242B             (gshell_beta5_yak.):07975         READ1    bcc   WRITE10
                      (gshell_beta5_yak.):07976         
339C C1D3             (gshell_beta5_yak.):07977                  cmpb  #E$EOF     EOF error?
                      (gshell_beta5_yak.):07978         
339E 2622             (gshell_beta5_yak.):07979                  bne   WRITERR    No, report error
                      (gshell_beta5_yak.):07980         
                      (gshell_beta5_yak.):07981                IFNE  H6309
                      (gshell_beta5_yak.):07982         
                      (gshell_beta5_yak.):07983                  clrd             If EOF error, report 0 bytes read
                      (gshell_beta5_yak.):07984         
                      (gshell_beta5_yak.):07985                ELSE
                      (gshell_beta5_yak.):07986         
33A0 4F               (gshell_beta5_yak.):07987                  clra
                      (gshell_beta5_yak.):07988         
33A1 5F               (gshell_beta5_yak.):07989                  clrb
                      (gshell_beta5_yak.):07990         
                      (gshell_beta5_yak.):07991                ENDC
                      (gshell_beta5_yak.):07992         
33A2 35A0             (gshell_beta5_yak.):07993                  puls  Y,PC
                      (gshell_beta5_yak.):07994         
                      (gshell_beta5_yak.):07995         
                      (gshell_beta5_yak.):07996         
                      (gshell_beta5_yak.):07997         * Read line: Exits with D=# bytes read
                      (gshell_beta5_yak.):07998         
33A4 3420             (gshell_beta5_yak.):07999         I.READLN pshs  Y
                      (gshell_beta5_yak.):08000         
33A6 A665             (gshell_beta5_yak.):08001                  lda   5,S          Get path
                      (gshell_beta5_yak.):08002         
33A8 AE66             (gshell_beta5_yak.):08003                  ldx   6,S          Get ptr to start of buffer to read into
                      (gshell_beta5_yak.):08004         
33AA 10AE68           (gshell_beta5_yak.):08005                  ldy   8,S          Get max size to read
                      (gshell_beta5_yak.):08006         
33AD 103F8B           (gshell_beta5_yak.):08007                  os9   I$ReadLn     Read up to size or CR
                      (gshell_beta5_yak.):08008         
33B0 20E8             (gshell_beta5_yak.):08009                  bra   READ1
                      (gshell_beta5_yak.):08010         
                      (gshell_beta5_yak.):08011         
                      (gshell_beta5_yak.):08012         
33B2 3420             (gshell_beta5_yak.):08013         I.WRITE  pshs  Y
                      (gshell_beta5_yak.):08014         
33B4 10AE68           (gshell_beta5_yak.):08015                  ldy   8,S          Get size to write
                      (gshell_beta5_yak.):08016         
33B7 270E             (gshell_beta5_yak.):08017                  beq   WRITE10      If empty, skip writing
                      (gshell_beta5_yak.):08018         
33B9 A665             (gshell_beta5_yak.):08019                  lda   5,S          Get path
                      (gshell_beta5_yak.):08020         
33BB AE66             (gshell_beta5_yak.):08021                  ldx   6,S          Get ptr to start of string to write
                      (gshell_beta5_yak.):08022         
33BD 103F8A           (gshell_beta5_yak.):08023                  os9   I$Write      Write it out
                      (gshell_beta5_yak.):08024         
33C0 2405             (gshell_beta5_yak.):08025         WRITE1   bcc   WRITE10
                      (gshell_beta5_yak.):08026         
33C2 3520             (gshell_beta5_yak.):08027         WRITERR  puls  Y
                      (gshell_beta5_yak.):08028         
33C4 160454           (gshell_beta5_yak.):08029         OS9ERR2  lbra  OS9ERR
                      (gshell_beta5_yak.):08030         
                      (gshell_beta5_yak.):08031         
                      (gshell_beta5_yak.):08032         
33C7 1F20             (gshell_beta5_yak.):08033         WRITE10  tfr   Y,D
                      (gshell_beta5_yak.):08034         
33C9 35A0             (gshell_beta5_yak.):08035                  puls  Y,PC
                      (gshell_beta5_yak.):08036         
                      (gshell_beta5_yak.):08037         
                      (gshell_beta5_yak.):08038         
                      (gshell_beta5_yak.):08039         * Perform WritLn call
                      (gshell_beta5_yak.):08040         
                      (gshell_beta5_yak.):08041         * Entry: 0-1,s  =RTS address
                      (gshell_beta5_yak.):08042         
                      (gshell_beta5_yak.):08043         *        2-3,s  =Path to write to (use only B)
                      (gshell_beta5_yak.):08044         
                      (gshell_beta5_yak.):08045         *        4-5,s  =Ptr to text to write
                      (gshell_beta5_yak.):08046         
                      (gshell_beta5_yak.):08047         *        6-7,s  =Length to write
                      (gshell_beta5_yak.):08048         
33CB 3420             (gshell_beta5_yak.):08049         I.WRITLN pshs  Y
                      (gshell_beta5_yak.):08050         
33CD 10AE68           (gshell_beta5_yak.):08051                  ldy   8,S          Get size to write
                      (gshell_beta5_yak.):08052         
33D0 27F5             (gshell_beta5_yak.):08053                  beq   WRITE10      If 0, exit with D=size and don't write anything
                      (gshell_beta5_yak.):08054         
33D2 A665             (gshell_beta5_yak.):08055                  lda   5,S          Get path #
                      (gshell_beta5_yak.):08056         
33D4 AE66             (gshell_beta5_yak.):08057                  ldx   6,S          Get ptr to start of string to write
                      (gshell_beta5_yak.):08058         
33D6 103F8C           (gshell_beta5_yak.):08059                  os9   I$WritLn     Write it out
                      (gshell_beta5_yak.):08060         
33D9 20E5             (gshell_beta5_yak.):08061                  bra   WRITE1
                      (gshell_beta5_yak.):08062         
                      (gshell_beta5_yak.):08063         
                      (gshell_beta5_yak.):08064         
33DB 103F82           (gshell_beta5_yak.):08065         I.DUP    os9   I$Dup
                      (gshell_beta5_yak.):08066         
33DE 2007             (gshell_beta5_yak.):08067                  bra   ERRTEST
                      (gshell_beta5_yak.):08068         
                      (gshell_beta5_yak.):08069         
                      (gshell_beta5_yak.):08070         
33E0 AE62             (gshell_beta5_yak.):08071         I.OPEN2  ldx   2,S          Get ptr to filename to open
                      (gshell_beta5_yak.):08072         
33E2 A665             (gshell_beta5_yak.):08073                  lda   5,S          Get path #
                      (gshell_beta5_yak.):08074         
33E4 103F84           (gshell_beta5_yak.):08075         I.OPEN   os9   I$Open       Open the file
                      (gshell_beta5_yak.):08076         
33E7 25DB             (gshell_beta5_yak.):08077         ERRTEST  bcs   OS9ERR2
                      (gshell_beta5_yak.):08078         
33E9 1F89             (gshell_beta5_yak.):08079                  tfr   A,B
                      (gshell_beta5_yak.):08080         
33EB 4F               (gshell_beta5_yak.):08081                  clra  
                      (gshell_beta5_yak.):08082         
33EC 39               (gshell_beta5_yak.):08083                  rts   
                      (gshell_beta5_yak.):08084         
                      (gshell_beta5_yak.):08085         
                      (gshell_beta5_yak.):08086         
33ED A663             (gshell_beta5_yak.):08087         I.CLOSE  lda   3,S          Get file path
                      (gshell_beta5_yak.):08088         
33EF 103F8F           (gshell_beta5_yak.):08089                  os9   I$Close      Close file
                      (gshell_beta5_yak.):08090         
33F2 200E             (gshell_beta5_yak.):08091                  bra   I.SYSRET
                      (gshell_beta5_yak.):08092         
                      (gshell_beta5_yak.):08093         
                      (gshell_beta5_yak.):08094         
33F4 AE62             (gshell_beta5_yak.):08095         I.MAKDIR ldx   2,S          Get ptr to directory name we are creating
                      (gshell_beta5_yak.):08096         
33F6 E665             (gshell_beta5_yak.):08097                  ldb   4+1,S        Get attributes
                      (gshell_beta5_yak.):08098         
33F8 103F85           (gshell_beta5_yak.):08099                  os9   I$MakDir     Make the directory
                      (gshell_beta5_yak.):08100         
33FB 2005             (gshell_beta5_yak.):08101                  bra   I.SYSRET
                      (gshell_beta5_yak.):08102         
                      (gshell_beta5_yak.):08103         
                      (gshell_beta5_yak.):08104         
33FD AE62             (gshell_beta5_yak.):08105         I.DELETE ldx   2,S          Get ptr to filename to delete
                      (gshell_beta5_yak.):08106         
33FF 103F87           (gshell_beta5_yak.):08107                  os9   I$Delete     Delete the file
                      (gshell_beta5_yak.):08108         
3402 16041F           (gshell_beta5_yak.):08109         I.SYSRET lbra  SYSRET
                      (gshell_beta5_yak.):08110         
                      (gshell_beta5_yak.):08111         
                      (gshell_beta5_yak.):08112         
                      (gshell_beta5_yak.):08113         * Get String length - terminated by NUL (CHR$(0)) char
                      (gshell_beta5_yak.):08114         
                      (gshell_beta5_yak.):08115         * Entry: 0-1,s is RTS address
                      (gshell_beta5_yak.):08116         
                      (gshell_beta5_yak.):08117         *        2-3,s is the ptr to the string to check
                      (gshell_beta5_yak.):08118         
                      (gshell_beta5_yak.):08119         * Exit:  X=Ptr to end of string (not including NUL)
                      (gshell_beta5_yak.):08120         
                      (gshell_beta5_yak.):08121         *        D=Length of string
                      (gshell_beta5_yak.):08122         
3405 AE62             (gshell_beta5_yak.):08123         STRLEN   ldx   2,S        Get ptr to string we are checking length of
                      (gshell_beta5_yak.):08124         
3407 E680             (gshell_beta5_yak.):08125         STRLEN1  ldb   ,X+        Get char
                      (gshell_beta5_yak.):08126         
3409 26FC             (gshell_beta5_yak.):08127                  bne   STRLEN1    Not end of string, keep checking
                      (gshell_beta5_yak.):08128         
340B 301F             (gshell_beta5_yak.):08129                  leax  -1,X       Found it, point to last char
                      (gshell_beta5_yak.):08130         
340D 1F10             (gshell_beta5_yak.):08131                  tfr   X,D
                      (gshell_beta5_yak.):08132         
340F A362             (gshell_beta5_yak.):08133                  subd  2,S        D=length of string
                      (gshell_beta5_yak.):08134         
3411 39               (gshell_beta5_yak.):08135                  rts   
                      (gshell_beta5_yak.):08136         
                      (gshell_beta5_yak.):08137         
                      (gshell_beta5_yak.):08138         
                      (gshell_beta5_yak.):08139         * Get string end - terminated by NUL char
                      (gshell_beta5_yak.):08140         
                      (gshell_beta5_yak.):08141         * Entry: [,s] is the ptr to the string to check
                      (gshell_beta5_yak.):08142         
                      (gshell_beta5_yak.):08143         * Exit: D=Ptr to end of string (not including NUL)
                      (gshell_beta5_yak.):08144         
3412 AE62             (gshell_beta5_yak.):08145         STREND   ldx   2,S
                      (gshell_beta5_yak.):08146         
3414 E680             (gshell_beta5_yak.):08147         STREND1  ldb   ,X+
                      (gshell_beta5_yak.):08148         
3416 26FC             (gshell_beta5_yak.):08149                  bne   STREND1
                      (gshell_beta5_yak.):08150         
3418 301F             (gshell_beta5_yak.):08151                  leax  -1,X
                      (gshell_beta5_yak.):08152         
341A 1F10             (gshell_beta5_yak.):08153                  tfr   X,D
                      (gshell_beta5_yak.):08154         
341C 39               (gshell_beta5_yak.):08155                  rts   
                      (gshell_beta5_yak.):08156         
                      (gshell_beta5_yak.):08157         
                      (gshell_beta5_yak.):08158         
                      (gshell_beta5_yak.):08159         * Copy string until NUL is hit (inclusive).
                      (gshell_beta5_yak.):08160         
                      (gshell_beta5_yak.):08161         * Entry: 0-1,s = Ptr to destination of copy
                      (gshell_beta5_yak.):08162         
                      (gshell_beta5_yak.):08163         *        2-3,s = Ptr to source of copy
                      (gshell_beta5_yak.):08164         
                      (gshell_beta5_yak.):08165         * Exit: D=ptr to dest string
                      (gshell_beta5_yak.):08166         
341D 3450             (gshell_beta5_yak.):08167         STRCPY   pshs  X,U
                      (gshell_beta5_yak.):08168         
341F EE66             (gshell_beta5_yak.):08169                  ldu   6,S        Get ptr to destination of copy
                      (gshell_beta5_yak.):08170         
3421 AE68             (gshell_beta5_yak.):08171         STRCAT2  ldx   8,S        Get ptr to string to append
                      (gshell_beta5_yak.):08172         
3423 E680             (gshell_beta5_yak.):08173         STRCPY1  ldb   ,X+        Copy until NUL found
                      (gshell_beta5_yak.):08174         
3425 E7C0             (gshell_beta5_yak.):08175                  stb   ,U+
                      (gshell_beta5_yak.):08176         
3427 26FA             (gshell_beta5_yak.):08177                  bne   STRCPY1
                      (gshell_beta5_yak.):08178         
3429 EC66             (gshell_beta5_yak.):08179                  ldd   6,S        Get ptr to start of final destination string, restore regs & return
                      (gshell_beta5_yak.):08180         
342B 35D0             (gshell_beta5_yak.):08181                  puls  X,U,PC
                      (gshell_beta5_yak.):08182         
                      (gshell_beta5_yak.):08183         
                      (gshell_beta5_yak.):08184         
                      (gshell_beta5_yak.):08185         * Add string to another string
                      (gshell_beta5_yak.):08186         
342D 3450             (gshell_beta5_yak.):08187         STRCAT   pshs  X,U        Save regs
                      (gshell_beta5_yak.):08188         
342F EE66             (gshell_beta5_yak.):08189                  ldu   6,S        Get ptr to original destination string
                      (gshell_beta5_yak.):08190         
3431 E6C0             (gshell_beta5_yak.):08191         STRCAT1  ldb   ,U+        Look for end of it
                      (gshell_beta5_yak.):08192         
3433 26FC             (gshell_beta5_yak.):08193                  bne   STRCAT1
                      (gshell_beta5_yak.):08194         
3435 335F             (gshell_beta5_yak.):08195                  leau  -1,U       Point to NUL ending original destination string
                      (gshell_beta5_yak.):08196         
3437 20E8             (gshell_beta5_yak.):08197                  bra   STRCAT2    Now, append 2nd string to destination string
                      (gshell_beta5_yak.):08198         
                      (gshell_beta5_yak.):08199         
                      (gshell_beta5_yak.):08200         
                      (gshell_beta5_yak.):08201         * Compare two strings
                      (gshell_beta5_yak.):08202         
                      (gshell_beta5_yak.):08203         * Exit: D=0 if they are the same
                      (gshell_beta5_yak.):08204         
                      (gshell_beta5_yak.):08205         *       D=-1 if they are not the same
                      (gshell_beta5_yak.):08206         
3439 3450             (gshell_beta5_yak.):08207         STRCMP   pshs  X,U        Save regs
                      (gshell_beta5_yak.):08208         
343B EE66             (gshell_beta5_yak.):08209                  ldu   6,S        Get ptr to 1st string
                      (gshell_beta5_yak.):08210         
343D 2710             (gshell_beta5_yak.):08211                  beq   STRCMP2    No string, exit with <>
                      (gshell_beta5_yak.):08212         
343F AE68             (gshell_beta5_yak.):08213                  ldx   8,S        Get ptr to 2nd string
                      (gshell_beta5_yak.):08214         
3441 270C             (gshell_beta5_yak.):08215                  beq   STRCMP2    No string, exit with <>
                      (gshell_beta5_yak.):08216         
3443 E6C0             (gshell_beta5_yak.):08217         STRCMP1  ldb   ,U+        Get char from 1st string
                      (gshell_beta5_yak.):08218         
3445 E180             (gshell_beta5_yak.):08219                  cmpb  ,X+        Same as char from 2nd string?
                      (gshell_beta5_yak.):08220         
3447 2606             (gshell_beta5_yak.):08221                  bne   STRCMP2    No, exit with <>
                      (gshell_beta5_yak.):08222         
3449 5D               (gshell_beta5_yak.):08223                  tstb             Same, is it an end of string marker?
                      (gshell_beta5_yak.):08224         
344A 26F7             (gshell_beta5_yak.):08225                  bne   STRCMP1    No, continue comparing
                      (gshell_beta5_yak.):08226         
344C 4F               (gshell_beta5_yak.):08227                  clra             Exit with '='
                      (gshell_beta5_yak.):08228         
344D 35D0             (gshell_beta5_yak.):08229                  puls  X,U,PC
                      (gshell_beta5_yak.):08230         
                      (gshell_beta5_yak.):08231         
                      (gshell_beta5_yak.):08232         
                      (gshell_beta5_yak.):08233         * Flag not equal strings
                      (gshell_beta5_yak.):08234         
344F CCFFFF           (gshell_beta5_yak.):08235         STRCMP2  ldd   #-1
                      (gshell_beta5_yak.):08236         
3452 35D0             (gshell_beta5_yak.):08237                  puls  X,U,PC
                      (gshell_beta5_yak.):08238         
                      (gshell_beta5_yak.):08239         
                      (gshell_beta5_yak.):08240         
                      (gshell_beta5_yak.):08241         * String compare with maximum length of strings (max length 255)
                      (gshell_beta5_yak.):08242         
                      (gshell_beta5_yak.):08243         * Exit: D=-1 if they are <>
                      (gshell_beta5_yak.):08244         
                      (gshell_beta5_yak.):08245         *       D=0  if they are =
                      (gshell_beta5_yak.):08246         
3454 3450             (gshell_beta5_yak.):08247         STRNCMP  pshs  X,U
                      (gshell_beta5_yak.):08248         
3456 EE66             (gshell_beta5_yak.):08249                  ldu   6,S        Get ptr to string 1
                      (gshell_beta5_yak.):08250         
3458 271E             (gshell_beta5_yak.):08251                  beq   STRNCMP4   Empty, exit with <>
                      (gshell_beta5_yak.):08252         
345A AE68             (gshell_beta5_yak.):08253                  ldx   8,S        Get ptr to string 2
                      (gshell_beta5_yak.):08254         
345C 271A             (gshell_beta5_yak.):08255                  beq   STRNCMP4   Empty, exit with <>
                      (gshell_beta5_yak.):08256         
345E A66B             (gshell_beta5_yak.):08257                  lda   11,S       Get maximum size to compare
                      (gshell_beta5_yak.):08258         
3460 270C             (gshell_beta5_yak.):08259                  beq   STRNCMP2   If 0, exit with =
                      (gshell_beta5_yak.):08260         
3462 4A               (gshell_beta5_yak.):08261         STRNCMP1 deca             Done max length?
                      (gshell_beta5_yak.):08262         
3463 2D0D             (gshell_beta5_yak.):08263                  blt   STRNCMP3   Yes, process
                      (gshell_beta5_yak.):08264         
3465 E6C0             (gshell_beta5_yak.):08265                  ldb   ,U+        Get char
                      (gshell_beta5_yak.):08266         
3467 E180             (gshell_beta5_yak.):08267                  cmpb  ,X+        Same as in 2nd string?
                      (gshell_beta5_yak.):08268         
3469 260D             (gshell_beta5_yak.):08269                  bne   STRNCMP4   No,  exit with <>
                      (gshell_beta5_yak.):08270         
346B 5D               (gshell_beta5_yak.):08271                  tstb             End of string early?
                      (gshell_beta5_yak.):08272         
346C 26F4             (gshell_beta5_yak.):08273                  bne   STRNCMP1   No, continue comparing
                      (gshell_beta5_yak.):08274         
346E                  (gshell_beta5_yak.):08275         STRNCMP2
                      (gshell_beta5_yak.):08276         
                      (gshell_beta5_yak.):08277                IFNE  H6309
                      (gshell_beta5_yak.):08278         
                      (gshell_beta5_yak.):08279                  clrd             Exit with =
                      (gshell_beta5_yak.):08280         
                      (gshell_beta5_yak.):08281                ELSE
                      (gshell_beta5_yak.):08282         
346E 4F               (gshell_beta5_yak.):08283                  clra
                      (gshell_beta5_yak.):08284         
346F 5F               (gshell_beta5_yak.):08285                  clrb
                      (gshell_beta5_yak.):08286         
                      (gshell_beta5_yak.):08287                ENDC
                      (gshell_beta5_yak.):08288         
3470 35D0             (gshell_beta5_yak.):08289                  puls  X,U,PC
                      (gshell_beta5_yak.):08290         
                      (gshell_beta5_yak.):08291         
                      (gshell_beta5_yak.):08292         
                      (gshell_beta5_yak.):08293         * If done up to max length, compare last chars of each string
                      (gshell_beta5_yak.):08294         
3472 E6C2             (gshell_beta5_yak.):08295         STRNCMP3 ldb   ,-U        If last 2 chars matched, exit with =
                      (gshell_beta5_yak.):08296         
3474 E182             (gshell_beta5_yak.):08297                  cmpb  ,-X
                      (gshell_beta5_yak.):08298         
3476 27F6             (gshell_beta5_yak.):08299                  beq   STRNCMP2
                      (gshell_beta5_yak.):08300         
3478 CCFFFF           (gshell_beta5_yak.):08301         STRNCMP4 ldd   #-1        Exit with <>
                      (gshell_beta5_yak.):08302         
347B 35D0             (gshell_beta5_yak.):08303         STRNCMPX puls  X,U,PC
                      (gshell_beta5_yak.):08304         
                      (gshell_beta5_yak.):08305         
                      (gshell_beta5_yak.):08306         
                      (gshell_beta5_yak.):08307         *  Copy hi bit terminated string, changing hi bit last char to normal char and append NUL
                      (gshell_beta5_yak.):08308         
347D 3440             (gshell_beta5_yak.):08309         STRHCPY  pshs  U
                      (gshell_beta5_yak.):08310         
347F EE64             (gshell_beta5_yak.):08311                  ldu   4,S
                      (gshell_beta5_yak.):08312         
3481 AE66             (gshell_beta5_yak.):08313                  ldx   6,S
                      (gshell_beta5_yak.):08314         
3483 A680             (gshell_beta5_yak.):08315         STRHCPY1 lda   ,X+
                      (gshell_beta5_yak.):08316         
3485 A7C0             (gshell_beta5_yak.):08317                  sta   ,U+
                      (gshell_beta5_yak.):08318         
3487 2EFA             (gshell_beta5_yak.):08319                  bgt   STRHCPY1
                      (gshell_beta5_yak.):08320         
3489 847F             (gshell_beta5_yak.):08321                  anda  #$7F       Strip high bit off last char and save it back
                      (gshell_beta5_yak.):08322         
348B 5F               (gshell_beta5_yak.):08323                  clrb               and append NUL
                      (gshell_beta5_yak.):08324         
348C ED5F             (gshell_beta5_yak.):08325                  std   -1,u
                      (gshell_beta5_yak.):08326         
348E EC64             (gshell_beta5_yak.):08327                  ldd   4,S        Get original dest ptr back & return with it in D
                      (gshell_beta5_yak.):08328         
3490 35C0             (gshell_beta5_yak.):08329                  puls  U,PC
                      (gshell_beta5_yak.):08330         
                      (gshell_beta5_yak.):08331         
                      (gshell_beta5_yak.):08332         
                      (gshell_beta5_yak.):08333         * Copy B bytes from X to U.
                      (gshell_beta5_yak.):08334         
3492 3470             (gshell_beta5_yak.):08335         STRNCPY  pshs  x,y,u      Save regs
                      (gshell_beta5_yak.):08336         
3494 10AE68           (gshell_beta5_yak.):08337                  ldy   6+2,S      Get destination ptr
                      (gshell_beta5_yak.):08338         
3497 EE6A             (gshell_beta5_yak.):08339                  ldu   6+4,S      Get src ptr
                      (gshell_beta5_yak.):08340         
                      (gshell_beta5_yak.):08341                IFNE  H6309
                      (gshell_beta5_yak.):08342         
                      (gshell_beta5_yak.):08343                  ldw   6+6,s      Get size of copy (only F is used, but this is faster than clre/ldf)
                      (gshell_beta5_yak.):08344         
                      (gshell_beta5_yak.):08345                  tfm   u+,y+
                      (gshell_beta5_yak.):08346         
                      (gshell_beta5_yak.):08347                ELSE
                      (gshell_beta5_yak.):08348         
3499 EC6C             (gshell_beta5_yak.):08349                  ldd   6+6,S      Get size of copy (1-255)
                      (gshell_beta5_yak.):08350         
349B 170419           (gshell_beta5_yak.):08351                  lbsr  StkBlCpy
                      (gshell_beta5_yak.):08352         
                      (gshell_beta5_yak.):08353                ENDC
                      (gshell_beta5_yak.):08354         
349E 35F0             (gshell_beta5_yak.):08355                  puls  x,y,u,pc   Restore regs & return
                      (gshell_beta5_yak.):08356         
                      (gshell_beta5_yak.):08357         
                      (gshell_beta5_yak.):08358         
                      (gshell_beta5_yak.):08359         * Allocate more memory from our remaining data memory, or get more data mem-
                      (gshell_beta5_yak.):08360         
                      (gshell_beta5_yak.):08361         * ory and allocate from that
                      (gshell_beta5_yak.):08362         
                      (gshell_beta5_yak.):08363         * Exit:D=-1 if could not get memory
                      (gshell_beta5_yak.):08364         
                      (gshell_beta5_yak.):08365         *      or D=Ptr to start of free data memory
                      (gshell_beta5_yak.):08366         
34A0 ECA9043F         (gshell_beta5_yak.):08367         SBRK     ldd   MEMEND,Y   Get end of data memory ptr
                      (gshell_beta5_yak.):08368         
34A4 3406             (gshell_beta5_yak.):08369                  pshs  D          Save it
                      (gshell_beta5_yak.):08370         
34A6 EC64             (gshell_beta5_yak.):08371                  ldd   4,S        Get # bytes requested
                      (gshell_beta5_yak.):08372         
34A8 10A3A91347       (gshell_beta5_yak.):08373                  cmpd  SPARE,Y    Will that fit in what we have left right now?
                      (gshell_beta5_yak.):08374         
34AD 2525             (gshell_beta5_yak.):08375                  blo   SBRK20     Yes, skip ahead
                      (gshell_beta5_yak.):08376         
34AF E3A9043F         (gshell_beta5_yak.):08377                  addd  MEMEND,Y   Calculate what total data area size should now be
                      (gshell_beta5_yak.):08378         
34B3 250B             (gshell_beta5_yak.):08379                  bcs   SBRK05     >64k, too big to fit in process space, exit with error
                      (gshell_beta5_yak.):08380         
34B5 3420             (gshell_beta5_yak.):08381                  pshs  Y          Preserve Y
                      (gshell_beta5_yak.):08382         
34B7 103F07           (gshell_beta5_yak.):08383                  os9   F$Mem      Attempt to change data area size to D bytes
                      (gshell_beta5_yak.):08384         
34BA 1F20             (gshell_beta5_yak.):08385                  tfr   Y,D        Move new end of data mem address to D
                      (gshell_beta5_yak.):08386         
34BC 3520             (gshell_beta5_yak.):08387                  puls  Y          Restore Y
                      (gshell_beta5_yak.):08388         
34BE 2406             (gshell_beta5_yak.):08389                  bcc   SBRK10     No error on F$MEM call, continue
                      (gshell_beta5_yak.):08390         
34C0 CCFFFF           (gshell_beta5_yak.):08391         SBRK05   ldd   #-1        Eat stack & exit with error flag set
                      (gshell_beta5_yak.):08392         
34C3 3262             (gshell_beta5_yak.):08393                  leas  2,S
                      (gshell_beta5_yak.):08394         
34C5 39               (gshell_beta5_yak.):08395                  rts   
                      (gshell_beta5_yak.):08396         
                      (gshell_beta5_yak.):08397         
                      (gshell_beta5_yak.):08398         
                      (gshell_beta5_yak.):08399         * Extra memory requested was successful
                      (gshell_beta5_yak.):08400         
34C6 EDA9043F         (gshell_beta5_yak.):08401         SBRK10   std   MEMEND,Y   Save new end of data mem ptr
                      (gshell_beta5_yak.):08402         
34CA E3A91347         (gshell_beta5_yak.):08403                  addd  SPARE,Y    Add to amount of free data mem before request came in
                      (gshell_beta5_yak.):08404         
34CE A3E4             (gshell_beta5_yak.):08405                  subd  ,S         Subtract original end of data mem ptr
                      (gshell_beta5_yak.):08406         
34D0 EDA91347         (gshell_beta5_yak.):08407                  std   SPARE,Y    Save new amount of spare data mem
                      (gshell_beta5_yak.):08408         
34D4 3262             (gshell_beta5_yak.):08409         SBRK20   leas  2,S
                      (gshell_beta5_yak.):08410         
34D6 ECA91347         (gshell_beta5_yak.):08411                  ldd   SPARE,Y    Get amount of spare data mem
                      (gshell_beta5_yak.):08412         
34DA 3406             (gshell_beta5_yak.):08413                  pshs  D
                      (gshell_beta5_yak.):08414         
34DC A364             (gshell_beta5_yak.):08415                  subd  4,S        Subtract the amount of mem requested
                      (gshell_beta5_yak.):08416         
34DE EDA91347         (gshell_beta5_yak.):08417                  std   SPARE,Y    Save new amount of spare data mem
                      (gshell_beta5_yak.):08418         
34E2 ECA9043F         (gshell_beta5_yak.):08419                  ldd   MEMEND,Y   Get end of data mem ptr
                      (gshell_beta5_yak.):08420         
34E6 A3E1             (gshell_beta5_yak.):08421                  subd  ,S++       Calculate start address of free data mem
                      (gshell_beta5_yak.):08422         
34E8 3476             (gshell_beta5_yak.):08423                  pshs  u,y,x,d    Save regs & D (start address) on stack
                      (gshell_beta5_yak.):08424         
34EA EEE4             (gshell_beta5_yak.):08425                  ldu   ,s         Get start address into U for subroutine
                      (gshell_beta5_yak.):08426         
                      (gshell_beta5_yak.):08427                IFNE  H6309
                      (gshell_beta5_yak.):08428         
                      (gshell_beta5_yak.):08429                  ldx   MEMEND,y   Get end address
                      (gshell_beta5_yak.):08430         
                      (gshell_beta5_yak.):08431                  subr  u,x        Subtract start address to get size to clear
                      (gshell_beta5_yak.):08432         
                      (gshell_beta5_yak.):08433                ELSE
                      (gshell_beta5_yak.):08434         
34EC ECA9043F         (gshell_beta5_yak.):08435                  ldd   MEMEND,y   Get end address
                      (gshell_beta5_yak.):08436         
34F0 A3E4             (gshell_beta5_yak.):08437                  subd  ,s         Subtract end address to calc size to clear
                      (gshell_beta5_yak.):08438         
34F2 1F01             (gshell_beta5_yak.):08439                  tfr   d,x        Move size to X for subroutine
                      (gshell_beta5_yak.):08440         
                      (gshell_beta5_yak.):08441                ENDC
                      (gshell_beta5_yak.):08442         
34F4 5F               (gshell_beta5_yak.):08443                  clrb             0 byte to clear with
                      (gshell_beta5_yak.):08444         
34F5 170392           (gshell_beta5_yak.):08445                  lbsr  StkBlClr   Clear memory fast
                      (gshell_beta5_yak.):08446         
34F8 35F6             (gshell_beta5_yak.):08447                  puls  d,x,y,u,pc  Restore regs & D=start address of free data mem
                      (gshell_beta5_yak.):08448         
                      (gshell_beta5_yak.):08449         
                      (gshell_beta5_yak.):08450         
34FA A663             (gshell_beta5_yak.):08451         GT.READY lda   3,S
                      (gshell_beta5_yak.):08452         
34FC C601             (gshell_beta5_yak.):08453                  ldb   #SS.Ready
                      (gshell_beta5_yak.):08454         
34FE 103F8D           (gshell_beta5_yak.):08455                  os9   I$GetStt
                      (gshell_beta5_yak.):08456         
3501 2542             (gshell_beta5_yak.):08457                  bcs   OS9ERR3
                      (gshell_beta5_yak.):08458         
3503 4F               (gshell_beta5_yak.):08459                  clra  
                      (gshell_beta5_yak.):08460         
3504 39               (gshell_beta5_yak.):08461                  rts   
                      (gshell_beta5_yak.):08462         
                      (gshell_beta5_yak.):08463         
                      (gshell_beta5_yak.):08464         
                      (gshell_beta5_yak.):08465         * setup mouse parms - NOTE: should embed elsewhere  - only called once.
                      (gshell_beta5_yak.):08466         
                      (gshell_beta5_yak.):08467         * In routine: 0-1,s = Preserved Y
                      (gshell_beta5_yak.):08468         
                      (gshell_beta5_yak.):08469         *             2-3,s = RTS address
                      (gshell_beta5_yak.):08470         
                      (gshell_beta5_yak.):08471         *             4-5,s = Path to window to read mouse from
                      (gshell_beta5_yak.):08472         
                      (gshell_beta5_yak.):08473         *             6-7,s = Mouse sampling rate
                      (gshell_beta5_yak.):08474         
                      (gshell_beta5_yak.):08475         *             8-9,s = Mouse button timeout
                      (gshell_beta5_yak.):08476         
                      (gshell_beta5_yak.):08477         *            10-11,s= Auto follow mouse flag 
                      (gshell_beta5_yak.):08478         
3505 3420             (gshell_beta5_yak.):08479         ST.MOUSE pshs  Y          Preserve Y
                      (gshell_beta5_yak.):08480         
3507 A667             (gshell_beta5_yak.):08481                  lda   7,S        Get # clock ticks between mouse reads
                      (gshell_beta5_yak.):08482         
3509 E669             (gshell_beta5_yak.):08483                  ldb   9,S        Get mouse button timeout value
                      (gshell_beta5_yak.):08484         
350B 1F01             (gshell_beta5_yak.):08485                  tfr   D,X
                      (gshell_beta5_yak.):08486         
350D 4F               (gshell_beta5_yak.):08487                  clra             Get auto-follow flag
                      (gshell_beta5_yak.):08488         
350E E66B             (gshell_beta5_yak.):08489                  ldb   11,S
                      (gshell_beta5_yak.):08490         
3510 1F02             (gshell_beta5_yak.):08491                  tfr   D,Y
                      (gshell_beta5_yak.):08492         
3512 A665             (gshell_beta5_yak.):08493                  lda   5,S        Get path for window mouse is on
                      (gshell_beta5_yak.):08494         
3514 C689             (gshell_beta5_yak.):08495                  ldb   #SS.Mouse  Setup mouse parms
                      (gshell_beta5_yak.):08496         
3516 103F8E           (gshell_beta5_yak.):08497                  os9   I$SetStt
                      (gshell_beta5_yak.):08498         
3519 3520             (gshell_beta5_yak.):08499                  puls  Y          Restore Y & return
                      (gshell_beta5_yak.):08500         
351B 2025             (gshell_beta5_yak.):08501                  bra   SYSRET2
                      (gshell_beta5_yak.):08502         
                      (gshell_beta5_yak.):08503         
                      (gshell_beta5_yak.):08504         
                      (gshell_beta5_yak.):08505         * Get mouse packet
                      (gshell_beta5_yak.):08506         
351D A663             (gshell_beta5_yak.):08507         GT.MOUSE lda   3,S        Get path # to window we want to get mouse packet from
                      (gshell_beta5_yak.):08508         
351F C689             (gshell_beta5_yak.):08509                  ldb   #SS.Mouse
                      (gshell_beta5_yak.):08510         
3521 AE64             (gshell_beta5_yak.):08511                  ldx   4,S        Get ptr of where to store mouse packet
                      (gshell_beta5_yak.):08512         
3523 3420             (gshell_beta5_yak.):08513                  pshs  Y          Save data mem ptr
                      (gshell_beta5_yak.):08514         
3525 108E0000         (gshell_beta5_yak.):08515                  ldy   #0         Automatic mouse side selection (I think it means use "currently selected")
                      (gshell_beta5_yak.):08516         
3529 103F8D           (gshell_beta5_yak.):08517                  os9   I$GetStt
                      (gshell_beta5_yak.):08518         
352C 3520             (gshell_beta5_yak.):08519                  puls  Y          Get data mem ptr back
                      (gshell_beta5_yak.):08520         
352E 2012             (gshell_beta5_yak.):08521                  bra   SYSRET2    Return (with or w/o error)
                      (gshell_beta5_yak.):08522         
                      (gshell_beta5_yak.):08523         
                      (gshell_beta5_yak.):08524         
                      (gshell_beta5_yak.):08525         
                      (gshell_beta5_yak.):08526         
                      (gshell_beta5_yak.):08527         * Set up signal when keyboard data ready
                      (gshell_beta5_yak.):08528         
3530 A663             (gshell_beta5_yak.):08529         ST.SSIG  lda   3,S        Get path #
                      (gshell_beta5_yak.):08530         
3532 C61A             (gshell_beta5_yak.):08531                  ldb   #SS.SSig   Send Signal on Data Ready call
                      (gshell_beta5_yak.):08532         
3534 AE64             (gshell_beta5_yak.):08533                  ldx   4,S        Signal code to send for keypresses ready
                      (gshell_beta5_yak.):08534         
3536 103F8E           (gshell_beta5_yak.):08535                  os9   I$SetStt
                      (gshell_beta5_yak.):08536         
3539 2007             (gshell_beta5_yak.):08537                  bra   SYSRET2    Return (with or w/o error)
                      (gshell_beta5_yak.):08538         
                      (gshell_beta5_yak.):08539         
                      (gshell_beta5_yak.):08540         
                      (gshell_beta5_yak.):08541         * Release any pending keyboard and/or mouse signals on specified window path
                      (gshell_beta5_yak.):08542         
353B A663             (gshell_beta5_yak.):08543         ST.RELEA lda   3,S        Get path #
                      (gshell_beta5_yak.):08544         
353D C61B             (gshell_beta5_yak.):08545                  ldb   #SS.Relea  Release any pending signals (Mouse and Keyboard)
                      (gshell_beta5_yak.):08546         
353F 103F8E           (gshell_beta5_yak.):08547                  os9   I$SetStt
                      (gshell_beta5_yak.):08548         
3542 1602DF           (gshell_beta5_yak.):08549         SYSRET2  lbra  SYSRET     Return D=0 no error, or D=-1 & ERRNO with error code
                      (gshell_beta5_yak.):08550         
                      (gshell_beta5_yak.):08551         
                      (gshell_beta5_yak.):08552         
3545 102502D2         (gshell_beta5_yak.):08553         OS9ERR3  lbcs  OS9ERR
                      (gshell_beta5_yak.):08554         
3549 3402             (gshell_beta5_yak.):08555                  pshs  A
                      (gshell_beta5_yak.):08556         
354B 1D               (gshell_beta5_yak.):08557                  sex   
                      (gshell_beta5_yak.):08558         
354C EDF805           (gshell_beta5_yak.):08559                  std   [5,S]
                      (gshell_beta5_yak.):08560         
354F 4F               (gshell_beta5_yak.):08561                  clra
                      (gshell_beta5_yak.):08562         
3550 3584             (gshell_beta5_yak.):08563                  puls  b,pc
                      (gshell_beta5_yak.):08564         
                      (gshell_beta5_yak.):08565         
                      (gshell_beta5_yak.):08566         
                      (gshell_beta5_yak.):08567         * Get current screen size in 8x8 text chars
                      (gshell_beta5_yak.):08568         
                      (gshell_beta5_yak.):08569         * Entry: 0-1,s   = RTS address
                      (gshell_beta5_yak.):08570         
                      (gshell_beta5_yak.):08571         *        2-3,s   = 16 bit path # (only use 3,s)
                      (gshell_beta5_yak.):08572         
                      (gshell_beta5_yak.):08573         *        4-5,s   = Ptr to where to store X size
                      (gshell_beta5_yak.):08574         
                      (gshell_beta5_yak.):08575         *        6-7,s   = Ptr to where to store Y size
                      (gshell_beta5_yak.):08576         
3552 A663             (gshell_beta5_yak.):08577         GT.SCSIZ lda   3,S        Get path to screen
                      (gshell_beta5_yak.):08578         
3554 C626             (gshell_beta5_yak.):08579                  ldb   #SS.ScSiz
                      (gshell_beta5_yak.):08580         
3556 3430             (gshell_beta5_yak.):08581                  pshs  X,Y        Preserve regs
                      (gshell_beta5_yak.):08582         
3558 103F8D           (gshell_beta5_yak.):08583                  os9   I$GetStt
                      (gshell_beta5_yak.):08584         
355B 250B             (gshell_beta5_yak.):08585                  bcs   SCSIZERR
                      (gshell_beta5_yak.):08586         
355D AFF808           (gshell_beta5_yak.):08587                  stx   [8,S]      Save X size (by pointer)
                      (gshell_beta5_yak.):08588         
3560 10AFF80A         (gshell_beta5_yak.):08589                  sty   [10,S]     Save Y size (by pointer)
                      (gshell_beta5_yak.):08590         
                      (gshell_beta5_yak.):08591                IFNE  H6309
                      (gshell_beta5_yak.):08592         
                      (gshell_beta5_yak.):08593                  clrd  
                      (gshell_beta5_yak.):08594         
                      (gshell_beta5_yak.):08595                ELSE
                      (gshell_beta5_yak.):08596         
3564 4F               (gshell_beta5_yak.):08597                  clra
                      (gshell_beta5_yak.):08598         
3565 5F               (gshell_beta5_yak.):08599                  clrb
                      (gshell_beta5_yak.):08600         
                      (gshell_beta5_yak.):08601                ENDC
                      (gshell_beta5_yak.):08602         
3566 200B             (gshell_beta5_yak.):08603                  bra   SCSIZEXT
                      (gshell_beta5_yak.):08604         
                      (gshell_beta5_yak.):08605         
                      (gshell_beta5_yak.):08606         
3568 10AE62           (gshell_beta5_yak.):08607         SCSIZERR ldy   2,S        Get data area pointer back
                      (gshell_beta5_yak.):08608         
356B 4F               (gshell_beta5_yak.):08609                  clra  
                      (gshell_beta5_yak.):08610         
356C EDA9044D         (gshell_beta5_yak.):08611                  std   ERRNO,Y    Save error code
                      (gshell_beta5_yak.):08612         
3570 CCFFFF           (gshell_beta5_yak.):08613                  ldd   #-1        Flag error & return
                      (gshell_beta5_yak.):08614         
3573 35B0             (gshell_beta5_yak.):08615         SCSIZEXT puls  x,y,pc
                      (gshell_beta5_yak.):08616         
                      (gshell_beta5_yak.):08617         
                      (gshell_beta5_yak.):08618         
3575 A663             (gshell_beta5_yak.):08619         ST.SBAR  lda   3,S
                      (gshell_beta5_yak.):08620         
3577 C688             (gshell_beta5_yak.):08621                  ldb   #SS.SBar
                      (gshell_beta5_yak.):08622         
3579 AE64             (gshell_beta5_yak.):08623                  ldx   4,S
                      (gshell_beta5_yak.):08624         
357B 3420             (gshell_beta5_yak.):08625                  pshs  Y
                      (gshell_beta5_yak.):08626         
357D 10AE68           (gshell_beta5_yak.):08627                  ldy   8,S
                      (gshell_beta5_yak.):08628         
3580 103F8E           (gshell_beta5_yak.):08629                  os9   I$SetStt
                      (gshell_beta5_yak.):08630         
3583 3520             (gshell_beta5_yak.):08631                  puls  Y
                      (gshell_beta5_yak.):08632         
3585 20BB             (gshell_beta5_yak.):08633                  bra   SYSRET2
                      (gshell_beta5_yak.):08634         
                      (gshell_beta5_yak.):08635         
                      (gshell_beta5_yak.):08636         
                      (gshell_beta5_yak.):08637         * Set up Mouse signal (sends signal on mouse button press)
                      (gshell_beta5_yak.):08638         
3587 A663             (gshell_beta5_yak.):08639         ST.MSSIG lda   3,S        Get path # to window we want mouse signal from
                      (gshell_beta5_yak.):08640         
3589 C68A             (gshell_beta5_yak.):08641                  ldb   #SS.MsSig  Mouse signal on button press
                      (gshell_beta5_yak.):08642         
358B AE64             (gshell_beta5_yak.):08643                  ldx   4,S        Get signal # to send on button press
                      (gshell_beta5_yak.):08644         
358D 103F8E           (gshell_beta5_yak.):08645                  os9   I$SetStt
                      (gshell_beta5_yak.):08646         
3590 20B0             (gshell_beta5_yak.):08647                  bra   SYSRET2    Return
                      (gshell_beta5_yak.):08648         
                      (gshell_beta5_yak.):08649         
                      (gshell_beta5_yak.):08650         
                      (gshell_beta5_yak.):08651         * Do WINDINT window style
                      (gshell_beta5_yak.):08652         
                      (gshell_beta5_yak.):08653         * Entry: 0-1,s   =RTS address
                      (gshell_beta5_yak.):08654         
                      (gshell_beta5_yak.):08655         *        2-3,s   =Window path (only use B)
                      (gshell_beta5_yak.):08656         
                      (gshell_beta5_yak.):08657         *        4-5,s   =window type (ZT.*)
                      (gshell_beta5_yak.):08658         
                      (gshell_beta5_yak.):08659         *        6-7,s   =Ptr to window/menu data (for framed windows only)
                      (gshell_beta5_yak.):08660         
3592 A663             (gshell_beta5_yak.):08661         ST.WNSET lda   3,S        Get path
                      (gshell_beta5_yak.):08662         
3594 C686             (gshell_beta5_yak.):08663                  ldb   #SS.WnSet
                      (gshell_beta5_yak.):08664         
3596 3420             (gshell_beta5_yak.):08665                  pshs  Y
                      (gshell_beta5_yak.):08666         
3598 10AE66           (gshell_beta5_yak.):08667                  ldy   6,S        Get window type
                      (gshell_beta5_yak.):08668         
359B AE68             (gshell_beta5_yak.):08669                  ldx   8,S        Get ptr for framed window data
                      (gshell_beta5_yak.):08670         
359D 103F8E           (gshell_beta5_yak.):08671                  os9   I$SetStt   Convert current window
                      (gshell_beta5_yak.):08672         
35A0 3520             (gshell_beta5_yak.):08673                  puls  Y
                      (gshell_beta5_yak.):08674         
35A2 209E             (gshell_beta5_yak.):08675                  bra   SYSRET2
                      (gshell_beta5_yak.):08676         
                      (gshell_beta5_yak.):08677         
                      (gshell_beta5_yak.):08678         
                      (gshell_beta5_yak.):08679         * Entry: all parms for DWSET are on stack, in order-but with 2 bytes/parm
                      (gshell_beta5_yak.):08680         
                      (gshell_beta5_yak.):08681         *    whether it needs it or not!
                      (gshell_beta5_yak.):08682         
                      (gshell_beta5_yak.):08683         * 0-1,s: RTS address
                      (gshell_beta5_yak.):08684         
                      (gshell_beta5_yak.):08685         * 2-3,s: path # to window
                      (gshell_beta5_yak.):08686         
                      (gshell_beta5_yak.):08687         * 4-5,s: screen type
                      (gshell_beta5_yak.):08688         
                      (gshell_beta5_yak.):08689         * etc. for other DWSET parms
                      (gshell_beta5_yak.):08690         
35A4 CC1B20           (gshell_beta5_yak.):08691         DWSET    ldd   #$1B20     Device window Set
                      (gshell_beta5_yak.):08692         
35A7 8D12             (gshell_beta5_yak.):08693                  bsr   DW.OWSET   Set up GFXBUF to contain full display code sequence for DWSET
                      (gshell_beta5_yak.):08694         
35A9 C609             (gshell_beta5_yak.):08695                  ldb   #9         # of bytes to write in DWSET sequence
                      (gshell_beta5_yak.):08696         
35AB 6D65             (gshell_beta5_yak.):08697                  tst   5,S        Check low byte of window type (actual type)
                      (gshell_beta5_yak.):08698         
35AD 2F73             (gshell_beta5_yak.):08699                  ble   GFXWR3     If current displayed or current processes screen, don't bother with border
                      (gshell_beta5_yak.):08700         
35AF 5C               (gshell_beta5_yak.):08701                  incb             If positive, bump # bytes up to 10 (to cover border color)
                      (gshell_beta5_yak.):08702         
35B0 2070             (gshell_beta5_yak.):08703                  bra   GFXWR3     Go write it out and return from there
                      (gshell_beta5_yak.):08704         
                      (gshell_beta5_yak.):08705         
                      (gshell_beta5_yak.):08706         
35B2 CC1B22           (gshell_beta5_yak.):08707         OWSET    ldd   #$1B22     Overlay Window Start
                      (gshell_beta5_yak.):08708         
35B5 8D04             (gshell_beta5_yak.):08709                  bsr   DW.OWSET   Build overlay window set output buffer
                      (gshell_beta5_yak.):08710         
35B7 C609             (gshell_beta5_yak.):08711                  ldb   #9         9 byte sequence
                      (gshell_beta5_yak.):08712         
35B9 2067             (gshell_beta5_yak.):08713                  bra   GFXWR3     Write it out and return from there
                      (gshell_beta5_yak.):08714         
                      (gshell_beta5_yak.):08715         
                      (gshell_beta5_yak.):08716         
35BB 8E1349           (gshell_beta5_yak.):08717         DW.OWSET ldx   #GFXBUF    Place to put actual command bytes for DWSET
                      (gshell_beta5_yak.):08718         
35BE ED84             (gshell_beta5_yak.):08719                  std   ,X         Save command sequence
                      (gshell_beta5_yak.):08720         
35C0 A667             (gshell_beta5_yak.):08721                  lda   7,S        Get screen type (low byte only)
                      (gshell_beta5_yak.):08722         
35C2 E669             (gshell_beta5_yak.):08723                  ldb   9,S
                      (gshell_beta5_yak.):08724         
35C4 ED02             (gshell_beta5_yak.):08725                  std   2,X        Get start, end ,etc. parms & append them
                      (gshell_beta5_yak.):08726         
35C6 A66B             (gshell_beta5_yak.):08727                  lda   11,S
                      (gshell_beta5_yak.):08728         
35C8 E66D             (gshell_beta5_yak.):08729                  ldb   13,S
                      (gshell_beta5_yak.):08730         
35CA ED04             (gshell_beta5_yak.):08731                  std   4,X
                      (gshell_beta5_yak.):08732         
35CC A66F             (gshell_beta5_yak.):08733                  lda   15,S
                      (gshell_beta5_yak.):08734         
35CE E6E811           (gshell_beta5_yak.):08735                  ldb   17,S
                      (gshell_beta5_yak.):08736         
35D1 ED06             (gshell_beta5_yak.):08737                  std   6,X
                      (gshell_beta5_yak.):08738         
35D3 A6E813           (gshell_beta5_yak.):08739                  lda   19,S
                      (gshell_beta5_yak.):08740         
35D6 E6E815           (gshell_beta5_yak.):08741                  ldb   21,S       Get border color (may not be used)
                      (gshell_beta5_yak.):08742         
35D9 ED08             (gshell_beta5_yak.):08743                  std   8,X
                      (gshell_beta5_yak.):08744         
35DB 39               (gshell_beta5_yak.):08745                  rts   
                      (gshell_beta5_yak.):08746         
                      (gshell_beta5_yak.):08747         
                      (gshell_beta5_yak.):08748         
35DC CC1B24           (gshell_beta5_yak.):08749         DWEND    ldd   #$1B24
                      (gshell_beta5_yak.):08750         
35DF 2008             (gshell_beta5_yak.):08751                  bra   OUT2
                      (gshell_beta5_yak.):08752         
                      (gshell_beta5_yak.):08753         
                      (gshell_beta5_yak.):08754         
35E1 CC1B23           (gshell_beta5_yak.):08755         OWEND    ldd   #$1B23
                      (gshell_beta5_yak.):08756         
35E4 2003             (gshell_beta5_yak.):08757                  bra   OUT2
                      (gshell_beta5_yak.):08758         
                      (gshell_beta5_yak.):08759         
                      (gshell_beta5_yak.):08760         
35E6 CC1B21           (gshell_beta5_yak.):08761         SELECT   ldd   #$1B21
                      (gshell_beta5_yak.):08762         
                      (gshell_beta5_yak.):08763         
                      (gshell_beta5_yak.):08764         
35E9 FD1349           (gshell_beta5_yak.):08765         OUT2     std   GFXBUF
                      (gshell_beta5_yak.):08766         
35EC C602             (gshell_beta5_yak.):08767                  ldb   #2
                      (gshell_beta5_yak.):08768         
35EE 2032             (gshell_beta5_yak.):08769                  bra   GFXWR3
                      (gshell_beta5_yak.):08770         
                      (gshell_beta5_yak.):08771         
                      (gshell_beta5_yak.):08772         
35F0 CC1B25           (gshell_beta5_yak.):08773         CWAREA   ldd   #$1B25
                      (gshell_beta5_yak.):08774         
35F3 8E1349           (gshell_beta5_yak.):08775                  ldx   #GFXBUF
                      (gshell_beta5_yak.):08776         
35F6 ED84             (gshell_beta5_yak.):08777                  std   ,X
                      (gshell_beta5_yak.):08778         
35F8 A665             (gshell_beta5_yak.):08779                  lda   5,S
                      (gshell_beta5_yak.):08780         
35FA E667             (gshell_beta5_yak.):08781                  ldb   7,S
                      (gshell_beta5_yak.):08782         
35FC ED02             (gshell_beta5_yak.):08783                  std   2,X
                      (gshell_beta5_yak.):08784         
35FE A669             (gshell_beta5_yak.):08785                  lda   9,S
                      (gshell_beta5_yak.):08786         
3600 E66B             (gshell_beta5_yak.):08787                  ldb   11,S
                      (gshell_beta5_yak.):08788         
3602 ED04             (gshell_beta5_yak.):08789                  std   4,X
                      (gshell_beta5_yak.):08790         
3604 C606             (gshell_beta5_yak.):08791                  ldb   #6
                      (gshell_beta5_yak.):08792         
3606 201A             (gshell_beta5_yak.):08793                  bra   GFXWR3
                      (gshell_beta5_yak.):08794         
                      (gshell_beta5_yak.):08795         
                      (gshell_beta5_yak.):08796         
3608 CC1B39           (gshell_beta5_yak.):08797         GCSET    ldd   #$1B39
                      (gshell_beta5_yak.):08798         
360B 2008             (gshell_beta5_yak.):08799                  bra   OUT4
                      (gshell_beta5_yak.):08800         
                      (gshell_beta5_yak.):08801         
                      (gshell_beta5_yak.):08802         
360D CC1B3A           (gshell_beta5_yak.):08803         FONT     ldd   #$1B3A
                      (gshell_beta5_yak.):08804         
3610 2003             (gshell_beta5_yak.):08805                  bra   OUT4
                      (gshell_beta5_yak.):08806         
                      (gshell_beta5_yak.):08807         
                      (gshell_beta5_yak.):08808         
3612 CC1B2A           (gshell_beta5_yak.):08809         KILBUF   ldd   #$1B2A       Kill buffer esc sequence
                      (gshell_beta5_yak.):08810         
3615 8E1349           (gshell_beta5_yak.):08811         OUT4     ldx   #GFXBUF      Point to output gfx buffer
                      (gshell_beta5_yak.):08812         
3618 ED84             (gshell_beta5_yak.):08813                  std   ,X           Save esc sequence
                      (gshell_beta5_yak.):08814         
361A A665             (gshell_beta5_yak.):08815                  lda   5,S          Get group #
                      (gshell_beta5_yak.):08816         
361C E667             (gshell_beta5_yak.):08817                  ldb   7,S          Get buffer #
                      (gshell_beta5_yak.):08818         
361E ED02             (gshell_beta5_yak.):08819                  std   2,X          Save to output buffer
                      (gshell_beta5_yak.):08820         
3620 C604             (gshell_beta5_yak.):08821                  ldb   #4           4 byte sequence
                      (gshell_beta5_yak.):08822         
3622 1600A4           (gshell_beta5_yak.):08823         GFXWR3   lbra  GFXWR        Go write it out
                      (gshell_beta5_yak.):08824         
                      (gshell_beta5_yak.):08825         
                      (gshell_beta5_yak.):08826         
3625 C635             (gshell_beta5_yak.):08827         SCALESW  ldb   #$35
                      (gshell_beta5_yak.):08828         
3627 200A             (gshell_beta5_yak.):08829                  bra   OUT3
                      (gshell_beta5_yak.):08830         
                      (gshell_beta5_yak.):08831         
                      (gshell_beta5_yak.):08832         
3629 C636             (gshell_beta5_yak.):08833         DWPROTSW ldb   #$36
                      (gshell_beta5_yak.):08834         
362B 2006             (gshell_beta5_yak.):08835                  bra   OUT3
                      (gshell_beta5_yak.):08836         
                      (gshell_beta5_yak.):08837         
                      (gshell_beta5_yak.):08838         
362D C632             (gshell_beta5_yak.):08839         FCOLOR   ldb   #$32
                      (gshell_beta5_yak.):08840         
362F 2002             (gshell_beta5_yak.):08841                  bra   OUT3
                      (gshell_beta5_yak.):08842         
                      (gshell_beta5_yak.):08843         
                      (gshell_beta5_yak.):08844         
3631 C62F             (gshell_beta5_yak.):08845         LSET     ldb   #$2F
                      (gshell_beta5_yak.):08846         
3633 861B             (gshell_beta5_yak.):08847         OUT3     lda   #$1B
                      (gshell_beta5_yak.):08848         
3635 FD1349           (gshell_beta5_yak.):08849                  std   GFXBUF
                      (gshell_beta5_yak.):08850         
3638 E665             (gshell_beta5_yak.):08851                  ldb   5,S
                      (gshell_beta5_yak.):08852         
363A F7134B           (gshell_beta5_yak.):08853                  stb   GFXBUF+2
                      (gshell_beta5_yak.):08854         
363D C603             (gshell_beta5_yak.):08855                  ldb   #3
                      (gshell_beta5_yak.):08856         
363F 20E1             (gshell_beta5_yak.):08857                  bra   GFXWR3
                      (gshell_beta5_yak.):08858         
                      (gshell_beta5_yak.):08859         
                      (gshell_beta5_yak.):08860         
3641 C644             (gshell_beta5_yak.):08861         LINE     ldb   #$44
                      (gshell_beta5_yak.):08862         
3643 2012             (gshell_beta5_yak.):08863                  bra   OUT6
                      (gshell_beta5_yak.):08864         
                      (gshell_beta5_yak.):08865         
                      (gshell_beta5_yak.):08866         
3645 C646             (gshell_beta5_yak.):08867         LINEM    ldb   #$46
                      (gshell_beta5_yak.):08868         
3647 200E             (gshell_beta5_yak.):08869                  bra   OUT6
                      (gshell_beta5_yak.):08870         
                      (gshell_beta5_yak.):08871         
                      (gshell_beta5_yak.):08872         
3649 C645             (gshell_beta5_yak.):08873         RLINE    ldb   #$45
                      (gshell_beta5_yak.):08874         
364B 200A             (gshell_beta5_yak.):08875                  bra   OUT6
                      (gshell_beta5_yak.):08876         
                      (gshell_beta5_yak.):08877         
                      (gshell_beta5_yak.):08878         
364D C648             (gshell_beta5_yak.):08879         BOX      ldb   #$48
                      (gshell_beta5_yak.):08880         
364F 2006             (gshell_beta5_yak.):08881                  bra   OUT6
                      (gshell_beta5_yak.):08882         
                      (gshell_beta5_yak.):08883         
                      (gshell_beta5_yak.):08884         
3651 C649             (gshell_beta5_yak.):08885         RBOX     ldb   #$49
                      (gshell_beta5_yak.):08886         
3653 2002             (gshell_beta5_yak.):08887                  bra   OUT6
                      (gshell_beta5_yak.):08888         
                      (gshell_beta5_yak.):08889         
                      (gshell_beta5_yak.):08890         
3655 C640             (gshell_beta5_yak.):08891         SETDPTR  ldb   #$40
                      (gshell_beta5_yak.):08892         
3657 861B             (gshell_beta5_yak.):08893         OUT6     lda   #$1B
                      (gshell_beta5_yak.):08894         
3659 8E1349           (gshell_beta5_yak.):08895                  ldx   #GFXBUF
                      (gshell_beta5_yak.):08896         
365C ED84             (gshell_beta5_yak.):08897                  std   ,X
                      (gshell_beta5_yak.):08898         
365E EC64             (gshell_beta5_yak.):08899                  ldd   4,S
                      (gshell_beta5_yak.):08900         
3660 ED02             (gshell_beta5_yak.):08901                  std   2,X
                      (gshell_beta5_yak.):08902         
3662 EC66             (gshell_beta5_yak.):08903                  ldd   6,S
                      (gshell_beta5_yak.):08904         
3664 ED04             (gshell_beta5_yak.):08905                  std   4,X
                      (gshell_beta5_yak.):08906         
3666 C606             (gshell_beta5_yak.):08907                  ldb   #6
                      (gshell_beta5_yak.):08908         
3668 205F             (gshell_beta5_yak.):08909                  bra   GFXWR
                      (gshell_beta5_yak.):08910         
                      (gshell_beta5_yak.):08911         
                      (gshell_beta5_yak.):08912         
366A 8E1349           (gshell_beta5_yak.):08913         PUTBLK   ldx   #GFXBUF
                      (gshell_beta5_yak.):08914         
366D CC1B2D           (gshell_beta5_yak.):08915                  ldd   #$1B2D
                      (gshell_beta5_yak.):08916         
3670 ED84             (gshell_beta5_yak.):08917                  std   ,X
                      (gshell_beta5_yak.):08918         
3672 A665             (gshell_beta5_yak.):08919                  lda   5,S
                      (gshell_beta5_yak.):08920         
3674 E667             (gshell_beta5_yak.):08921                  ldb   7,S
                      (gshell_beta5_yak.):08922         
3676 ED02             (gshell_beta5_yak.):08923                  std   2,X
                      (gshell_beta5_yak.):08924         
3678 EC68             (gshell_beta5_yak.):08925                  ldd   8,S
                      (gshell_beta5_yak.):08926         
367A ED04             (gshell_beta5_yak.):08927                  std   4,X
                      (gshell_beta5_yak.):08928         
367C EC6A             (gshell_beta5_yak.):08929                  ldd   10,S
                      (gshell_beta5_yak.):08930         
367E ED06             (gshell_beta5_yak.):08931                  std   6,X
                      (gshell_beta5_yak.):08932         
3680 C608             (gshell_beta5_yak.):08933                  ldb   #8
                      (gshell_beta5_yak.):08934         
3682 2045             (gshell_beta5_yak.):08935                  bra   GFXWR
                      (gshell_beta5_yak.):08936         
                      (gshell_beta5_yak.):08937         
                      (gshell_beta5_yak.):08938         
3684 CC1B4F           (gshell_beta5_yak.):08939         FFILL    ldd   #$1B4F
                      (gshell_beta5_yak.):08940         
3687 FD1349           (gshell_beta5_yak.):08941                  std   GFXBUF
                      (gshell_beta5_yak.):08942         
368A C602             (gshell_beta5_yak.):08943                  ldb   #2
                      (gshell_beta5_yak.):08944         
368C 203B             (gshell_beta5_yak.):08945                  bra   GFXWR
                      (gshell_beta5_yak.):08946         
                      (gshell_beta5_yak.):08947         
                      (gshell_beta5_yak.):08948         
368E 8E1349           (gshell_beta5_yak.):08949         GPLOAD   ldx   #GFXBUF
                      (gshell_beta5_yak.):08950         
3691 CC1B2B           (gshell_beta5_yak.):08951                  ldd   #$1B2B
                      (gshell_beta5_yak.):08952         
3694 ED84             (gshell_beta5_yak.):08953                  std   ,X
                      (gshell_beta5_yak.):08954         
3696 A665             (gshell_beta5_yak.):08955                  lda   5,S
                      (gshell_beta5_yak.):08956         
3698 E667             (gshell_beta5_yak.):08957                  ldb   7,S
                      (gshell_beta5_yak.):08958         
369A ED02             (gshell_beta5_yak.):08959                  std   2,X
                      (gshell_beta5_yak.):08960         
369C A669             (gshell_beta5_yak.):08961                  lda   9,S
                      (gshell_beta5_yak.):08962         
369E A704             (gshell_beta5_yak.):08963                  sta   4,X
                      (gshell_beta5_yak.):08964         
36A0 EC6A             (gshell_beta5_yak.):08965                  ldd   10,S
                      (gshell_beta5_yak.):08966         
36A2 ED05             (gshell_beta5_yak.):08967                  std   5,X
                      (gshell_beta5_yak.):08968         
36A4 EC6C             (gshell_beta5_yak.):08969                  ldd   12,S
                      (gshell_beta5_yak.):08970         
36A6 ED07             (gshell_beta5_yak.):08971                  std   7,X
                      (gshell_beta5_yak.):08972         
36A8 EC6E             (gshell_beta5_yak.):08973                  ldd   14,S
                      (gshell_beta5_yak.):08974         
36AA ED09             (gshell_beta5_yak.):08975                  std   9,X
                      (gshell_beta5_yak.):08976         
36AC EC62             (gshell_beta5_yak.):08977                  ldd   2,S
                      (gshell_beta5_yak.):08978         
36AE 3406             (gshell_beta5_yak.):08979                  pshs  D
                      (gshell_beta5_yak.):08980         
36B0 C60B             (gshell_beta5_yak.):08981                  ldb   #11
                      (gshell_beta5_yak.):08982         
36B2 8D15             (gshell_beta5_yak.):08983                  bsr   GFXWR
                      (gshell_beta5_yak.):08984         
36B4 3262             (gshell_beta5_yak.):08985                  leas  2,S
                      (gshell_beta5_yak.):08986         
36B6 AEE810           (gshell_beta5_yak.):08987                  ldx   16,S
                      (gshell_beta5_yak.):08988         
36B9 3420             (gshell_beta5_yak.):08989                  pshs  Y
                      (gshell_beta5_yak.):08990         
36BB 10AEE810         (gshell_beta5_yak.):08991                  ldy   16,S
                      (gshell_beta5_yak.):08992         
36BF A665             (gshell_beta5_yak.):08993                  lda   5,S
                      (gshell_beta5_yak.):08994         
36C1 103F8A           (gshell_beta5_yak.):08995                  os9   I$Write
                      (gshell_beta5_yak.):08996         
                      (gshell_beta5_yak.):08997         * I think this is wrong. Going to replace it and see if makes a difference
                      (gshell_beta5_yak.):08998         
                      (gshell_beta5_yak.):08999         *         bcs   GFXERR
                      (gshell_beta5_yak.):09000         
                      (gshell_beta5_yak.):09001         *         puls  Y,PC
                      (gshell_beta5_yak.):09002         
36C4 3520             (gshell_beta5_yak.):09003                  puls  Y          restore Y
                      (gshell_beta5_yak.):09004         
36C6 2515             (gshell_beta5_yak.):09005                  bcs   GFXERR
                      (gshell_beta5_yak.):09006         
36C8 39               (gshell_beta5_yak.):09007                  rts
                      (gshell_beta5_yak.):09008         
                      (gshell_beta5_yak.):09009         
                      (gshell_beta5_yak.):09010         
                      (gshell_beta5_yak.):09011         * Entry:B= # bytes to write
                      (gshell_beta5_yak.):09012         
36C9 4F               (gshell_beta5_yak.):09013         GFXWR    clra             D=B
                      (gshell_beta5_yak.):09014         
36CA 8E1349           (gshell_beta5_yak.):09015                  ldx   #GFXBUF    Point to buffer that holds graphics commands to execute
36CD 3420             (gshell_beta5_yak.):09016                  pshs  Y
36CF 1F02             (gshell_beta5_yak.):09017                  tfr   D,Y        Length of command sequence to write
36D1 A665             (gshell_beta5_yak.):09018                  lda   5,S        Get path # to write to
36D3 103F8A           (gshell_beta5_yak.):09019                  os9   I$Write    Send gfx command
36D6 3520             (gshell_beta5_yak.):09020                  puls  Y
36D8 2503             (gshell_beta5_yak.):09021                  bcs   GFXERR
36DA 4F               (gshell_beta5_yak.):09022                  clra  
36DB 5F               (gshell_beta5_yak.):09023                  clrb  
36DC 39               (gshell_beta5_yak.):09024                  rts   
                      (gshell_beta5_yak.):09025         
36DD 4F               (gshell_beta5_yak.):09026         GFXERR   clra  
36DE EDA9044D         (gshell_beta5_yak.):09027                  std   ERRNO,Y
36E2 CCFFFF           (gshell_beta5_yak.):09028                  ldd   #-1
36E5 39               (gshell_beta5_yak.):09029                  rts   
                      (gshell_beta5_yak.):09030         
                      (gshell_beta5_yak.):09031         * Convert ASCII # to 16 bit signed integer
                      (gshell_beta5_yak.):09032         * NOTE:WILL DO WEIRD THINGS IF RESULT IS >65535 (WRAPS AT 16 BIT)
                      (gshell_beta5_yak.):09033         * Works by saving neg/pos flag, and then going from left to right, multiplying
                      (gshell_beta5_yak.):09034         *  cumulative result by 10 each time a new digit is found, until non-digit
                      (gshell_beta5_yak.):09035         *  found. Also eats leading spaces & tabs.
                      (gshell_beta5_yak.):09036         * Entry: ptr to ASCII buffer on stack
                      (gshell_beta5_yak.):09037         * Exit: D=signed 16 bit value
36E6 3440             (gshell_beta5_yak.):09038         ATOI     pshs  U          Preserve U
36E8 EE64             (gshell_beta5_yak.):09039                  ldu   4,S        Get ptr to text to convert
                      (gshell_beta5_yak.):09040                IFNE  H6309
                      (gshell_beta5_yak.):09041                  clrd             Clear carry, and default # to 0
                      (gshell_beta5_yak.):09042                ELSE
36EA 4F               (gshell_beta5_yak.):09043                  clra
36EB 5F               (gshell_beta5_yak.):09044                  clrb
                      (gshell_beta5_yak.):09045                ENDC
36EC 340F             (gshell_beta5_yak.):09046                  pshs  cc,d,dp    CC=storage for current ASC char, dp=sign, D=current result
36EE E6C0             (gshell_beta5_yak.):09047         ATOI1    ldb   ,U+        Get 1st ascii character
36F0 E7E4             (gshell_beta5_yak.):09048                  stb   ,S         Save it
36F2 C120             (gshell_beta5_yak.):09049                  cmpb  #SPACE     Is it a space?
36F4 27F8             (gshell_beta5_yak.):09050                  beq   ATOI1      Yes, skip that char
36F6 C109             (gshell_beta5_yak.):09051                  cmpb  #HT        Is it a TAB char?
36F8 27F4             (gshell_beta5_yak.):09052                  beq   ATOI1      Yes, skip that char
36FA C12D             (gshell_beta5_yak.):09053                  cmpb  #'-        Is it a negative sign?
36FC 2604             (gshell_beta5_yak.):09054                  bne   ATOI2      No, process character
36FE C601             (gshell_beta5_yak.):09055                  ldb   #1         Flag that we are working with a negative #
3700 2001             (gshell_beta5_yak.):09056                  bra   ATOI3
                      (gshell_beta5_yak.):09057         
3702 5F               (gshell_beta5_yak.):09058         ATOI2    clrb             Flag that it is a positive #
3703 E763             (gshell_beta5_yak.):09059         ATOI3    stb   3,S        Save positive/negative flag
3705 E6E4             (gshell_beta5_yak.):09060                  ldb   ,S         Get char again
3707 C12D             (gshell_beta5_yak.):09061                  cmpb  #'-        Was it a negative sign?
3709 271B             (gshell_beta5_yak.):09062                  beq   ATOI5      Yes, go onto next character
370B C12B             (gshell_beta5_yak.):09063                  cmpb  #'+        Was it a plus sign?
370D 2619             (gshell_beta5_yak.):09064                  bne   ATOI6      No, go check if it was a numeric char
370F 2015             (gshell_beta5_yak.):09065                  bra   ATOI5      +, skip to next char
                      (gshell_beta5_yak.):09066         * CHANGE MAIN LOOP TO PRE SUBTRACT #$30 INSTEAD OF CMP 1ST WHEN CHECKING
                      (gshell_beta5_yak.):09067         *   RANGE (?)
                      (gshell_beta5_yak.):09068         
3711 EC61             (gshell_beta5_yak.):09069         ATOI4    ldd   1,S        Get current result (so far)
                      (gshell_beta5_yak.):09070                IFNE  H6309
                      (gshell_beta5_yak.):09071                  muld  #10        Bump up by one order of magnitude (Since on next digit)
                      (gshell_beta5_yak.):09072                  ldb   ,S         Get original numeric char
                      (gshell_beta5_yak.):09073                  sex              make 16 bit (note: still ascii version!)
                      (gshell_beta5_yak.):09074                  addr  w,d        Add to current base digit value (1,10,100,1000,10000)
                      (gshell_beta5_yak.):09075                ELSE
3713 3470             (gshell_beta5_yak.):09076                  pshs  x,y,u
3715 8E000A           (gshell_beta5_yak.):09077                  ldx   #10
3718 170138           (gshell_beta5_yak.):09078                  lbsr  MUL16
371B E666             (gshell_beta5_yak.):09079                  ldb   6,s
371D 1D               (gshell_beta5_yak.):09080                  sex
371E 3440             (gshell_beta5_yak.):09081                  pshs  u
3720 E3E1             (gshell_beta5_yak.):09082                  addd  ,s++ 
3722 3570             (gshell_beta5_yak.):09083                  puls  x,y,u
                      (gshell_beta5_yak.):09084                ENDC
3724 ED61             (gshell_beta5_yak.):09085                  std   1,S        Save current result
3726 E6C0             (gshell_beta5_yak.):09086         ATOI5    ldb   ,U+        Get next char from ASCII buffer
3728 C030             (gshell_beta5_yak.):09087         ATOI6    subb  #$30       Convert to binary
372A E7E4             (gshell_beta5_yak.):09088                  stb   ,S         Save it
372C 2D0C             (gshell_beta5_yak.):09089                  blt   ATOI65     Below '0', stop conversion
372E C109             (gshell_beta5_yak.):09090                  cmpb  #9         Above '9'?
3730 23DF             (gshell_beta5_yak.):09091                  bls   ATOI4      No, numeric, go process
3732 C130             (gshell_beta5_yak.):09092                  cmpb  #'0        Below a numeric char?
3734 2504             (gshell_beta5_yak.):09093                  blo   ATOI65     Yes, skip ahead
3736 C139             (gshell_beta5_yak.):09094                  cmpb  #'9        Above a numeric char?
3738 23D7             (gshell_beta5_yak.):09095                  bls   ATOI4      No, a numeric, go process
                      (gshell_beta5_yak.):09096         * Non numeric char stops conversion
373A EC61             (gshell_beta5_yak.):09097         ATOI65   ldd   1,S        Get current result
373C 6D63             (gshell_beta5_yak.):09098                  tst   3,S        Was there a negative sign?
373E 2704             (gshell_beta5_yak.):09099                  beq   ATOI8      No, done
                      (gshell_beta5_yak.):09100                IFNE  H6309
                      (gshell_beta5_yak.):09101                  negd  
                      (gshell_beta5_yak.):09102                ELSE
3740 40               (gshell_beta5_yak.):09103                  nega  
3741 50               (gshell_beta5_yak.):09104                  negb  
3742 8200             (gshell_beta5_yak.):09105                  sbca  #$00
                      (gshell_beta5_yak.):09106                ENDC
3744 3264             (gshell_beta5_yak.):09107         ATOI8    leas  4,S        Eat temp vars
3746 35C0             (gshell_beta5_yak.):09108                  puls  U,PC       Restore U & exit
                      (gshell_beta5_yak.):09109         
3748 308C40           (gshell_beta5_yak.):09110         CCMOD    leax  <CCDIV,PC
374B AFA9136D         (gshell_beta5_yak.):09111                  stx   HANDLER,Y
374F 6FA9136C         (gshell_beta5_yak.):09112                  clr   NSIGN,Y
3753 6D62             (gshell_beta5_yak.):09113                  tst   2,S
3755 2A04             (gshell_beta5_yak.):09114                  bpl   CCMOD1
3757 6CA9136C         (gshell_beta5_yak.):09115                  inc   NSIGN,Y
375B 830000           (gshell_beta5_yak.):09116         CCMOD1   subd  #0
375E 2606             (gshell_beta5_yak.):09117                  bne   CCMOD2
3760 3510             (gshell_beta5_yak.):09118                  puls  X
3762 ECE1             (gshell_beta5_yak.):09119                  ldd   ,S++
3764 6E84             (gshell_beta5_yak.):09120                  jmp   ,X
                      (gshell_beta5_yak.):09121         
3766 AE62             (gshell_beta5_yak.):09122         CCMOD2   ldx   2,S
3768 3410             (gshell_beta5_yak.):09123                  pshs  X
376A ADB9136D         (gshell_beta5_yak.):09124                  jsr   [HANDLER,Y]
376E ECE4             (gshell_beta5_yak.):09125                  ldd   ,S
3770 ED62             (gshell_beta5_yak.):09126                  std   2,S
3772 1F10             (gshell_beta5_yak.):09127                  tfr   X,D
3774 6DA9136C         (gshell_beta5_yak.):09128                  tst   NSIGN,Y
3778 2704             (gshell_beta5_yak.):09129                  beq   CCMODX
                      (gshell_beta5_yak.):09130                IFNE  H6309
                      (gshell_beta5_yak.):09131                  negd  
                      (gshell_beta5_yak.):09132                ELSE
377A 40               (gshell_beta5_yak.):09133                  nega  
377B 50               (gshell_beta5_yak.):09134                  negb  
377C 8200             (gshell_beta5_yak.):09135                  sbca  #$00
                      (gshell_beta5_yak.):09136                ENDC
377E EDE1             (gshell_beta5_yak.):09137         CCMODX   std   ,S++
3780 39               (gshell_beta5_yak.):09138                  rts   
                      (gshell_beta5_yak.):09139         
3781 3506             (gshell_beta5_yak.):09140         DIVIDE.0 puls  D            Get & remove RTS address from stack
3783 EDE4             (gshell_beta5_yak.):09141                  std   ,S           Save over original # to divide
3785 CC002D           (gshell_beta5_yak.):09142                  ldd   #45          Divide by 0 error #
                      (gshell_beta5_yak.):09143                IFNE  H6309
                      (gshell_beta5_yak.):09144                  bra   RPTERR
                      (gshell_beta5_yak.):09145                ELSE
3788 160081           (gshell_beta5_yak.):09146                  lbra  RPTERR
                      (gshell_beta5_yak.):09147                ENDC
                      (gshell_beta5_yak.):09148         
                      (gshell_beta5_yak.):09149         * Entry: D=# to divide by
                      (gshell_beta5_yak.):09150         *        0-1,s = RTS address
                      (gshell_beta5_yak.):09151         *        2-3,s = # to divide
                      (gshell_beta5_yak.):09152         * Exit: Answer replaces # to divide on stack!
378B 830000           (gshell_beta5_yak.):09153         CCDIV    subd  #0           Is dividend 0?
378E 27F1             (gshell_beta5_yak.):09154                  beq   DIVIDE.0     Yes, handle divide by 0 error
3790 3406             (gshell_beta5_yak.):09155                  pshs  D            Save # to divide by
3792 327E             (gshell_beta5_yak.):09156                  leas  -2,S         Make temp on stack, and init to $0000
3794 6FE4             (gshell_beta5_yak.):09157                  clr   ,S
3796 6F61             (gshell_beta5_yak.):09158                  clr   1,S
3798 4D               (gshell_beta5_yak.):09159                  tsta               Is dividend a negative #?
3799 2A08             (gshell_beta5_yak.):09160                  bpl   CCDIV1       No, skip ahead
                      (gshell_beta5_yak.):09161                IFNE  H6309
                      (gshell_beta5_yak.):09162                  negd               Yes, flip to positive
                      (gshell_beta5_yak.):09163                ELSE
379B 40               (gshell_beta5_yak.):09164                  nega               Yes, flip to positive
379C 50               (gshell_beta5_yak.):09165                  negb  
379D 8200             (gshell_beta5_yak.):09166                  sbca  #$00
                      (gshell_beta5_yak.):09167                ENDC
379F 6C61             (gshell_beta5_yak.):09168                  inc   1,S
37A1 ED62             (gshell_beta5_yak.):09169                  std   2,S          Save positive version over original #
37A3 EC66             (gshell_beta5_yak.):09170         CCDIV1   ldd   6,S
37A5 2A08             (gshell_beta5_yak.):09171                  bpl   CCDIV2
                      (gshell_beta5_yak.):09172                IFNE  H6309
                      (gshell_beta5_yak.):09173                  negd  
                      (gshell_beta5_yak.):09174                ELSE
37A7 40               (gshell_beta5_yak.):09175                  nega  
37A8 50               (gshell_beta5_yak.):09176                  negb  
37A9 8200             (gshell_beta5_yak.):09177                  sbca  #$00
                      (gshell_beta5_yak.):09178                ENDC
37AB 6361             (gshell_beta5_yak.):09179                  com   1,S
37AD ED66             (gshell_beta5_yak.):09180                  std   6,S
37AF 8601             (gshell_beta5_yak.):09181         CCDIV2   lda   #1
37B1 4C               (gshell_beta5_yak.):09182         CCDIV3   inca  
37B2 6863             (gshell_beta5_yak.):09183                  asl   3,S
37B4 6962             (gshell_beta5_yak.):09184                  rol   2,S
37B6 2AF9             (gshell_beta5_yak.):09185                  bpl   CCDIV3
37B8 A7E4             (gshell_beta5_yak.):09186                  sta   ,S
37BA EC66             (gshell_beta5_yak.):09187                  ldd   6,S
37BC 6F66             (gshell_beta5_yak.):09188                  clr   6,S
37BE 6F67             (gshell_beta5_yak.):09189                  clr   7,S
37C0 A362             (gshell_beta5_yak.):09190         CCDIV4   subd  2,S
37C2 2406             (gshell_beta5_yak.):09191                  bcc   CCDIV5
37C4 E362             (gshell_beta5_yak.):09192                  addd  2,S
37C6 1CFE             (gshell_beta5_yak.):09193                  andcc  #^Carry
37C8 2002             (gshell_beta5_yak.):09194                  bra   CCDIV6
                      (gshell_beta5_yak.):09195         
37CA 1A01             (gshell_beta5_yak.):09196         CCDIV5   orcc  #Carry
37CC 6967             (gshell_beta5_yak.):09197         CCDIV6   rol   7,S
37CE 6966             (gshell_beta5_yak.):09198                  rol   6,S
37D0 6462             (gshell_beta5_yak.):09199                  lsr   2,S
37D2 6663             (gshell_beta5_yak.):09200                  ror   3,S
37D4 6AE4             (gshell_beta5_yak.):09201                  dec   ,S
37D6 26E8             (gshell_beta5_yak.):09202                  bne   CCDIV4
37D8 ED62             (gshell_beta5_yak.):09203                  std   2,S
37DA 6D61             (gshell_beta5_yak.):09204                  tst   1,S
37DC 2708             (gshell_beta5_yak.):09205                  beq   CCDIV7
37DE EC66             (gshell_beta5_yak.):09206                  ldd   6,S
                      (gshell_beta5_yak.):09207                IFNE  H6309
                      (gshell_beta5_yak.):09208                  negd  
                      (gshell_beta5_yak.):09209                ELSE
37E0 40               (gshell_beta5_yak.):09210                  nega  
37E1 50               (gshell_beta5_yak.):09211                  negb  
37E2 8200             (gshell_beta5_yak.):09212                  sbca  #$00
                      (gshell_beta5_yak.):09213                ENDC
37E4 ED66             (gshell_beta5_yak.):09214                  std   6,S
37E6 AE64             (gshell_beta5_yak.):09215         CCDIV7   ldx   4,S
37E8 EC66             (gshell_beta5_yak.):09216                  ldd   6,S
37EA ED64             (gshell_beta5_yak.):09217                  std   4,S
37EC AF66             (gshell_beta5_yak.):09218                  stx   6,S
37EE AE62             (gshell_beta5_yak.):09219                  ldx   2,S
37F0 EC64             (gshell_beta5_yak.):09220                  ldd   4,S
37F2 3266             (gshell_beta5_yak.):09221                  leas  6,S
37F4 39               (gshell_beta5_yak.):09222                  rts   
                      (gshell_beta5_yak.):09223         
37F5 5D               (gshell_beta5_yak.):09224         CCASR    tstb  
37F6 2707             (gshell_beta5_yak.):09225                  beq   CCSEXIT
37F8 6762             (gshell_beta5_yak.):09226         CCASR1   asr   2,S
37FA 6663             (gshell_beta5_yak.):09227                  ror   3,S
37FC 5A               (gshell_beta5_yak.):09228                  decb  
37FD 26F9             (gshell_beta5_yak.):09229                  bne   CCASR1
37FF EC62             (gshell_beta5_yak.):09230         CCSEXIT  ldd   2,S
3801 3406             (gshell_beta5_yak.):09231                  pshs  D
3803 EC62             (gshell_beta5_yak.):09232                  ldd   2,S
3805 ED64             (gshell_beta5_yak.):09233                  std   4,S
3807 ECE4             (gshell_beta5_yak.):09234                  ldd   ,S
3809 3264             (gshell_beta5_yak.):09235                  leas  4,S
380B 39               (gshell_beta5_yak.):09236                  rts   
                      (gshell_beta5_yak.):09237         
380C EDA9044D         (gshell_beta5_yak.):09238         RPTERR   std   ERRNO,Y
3810 3424             (gshell_beta5_yak.):09239                  pshs  B,Y
3812 103F0C           (gshell_beta5_yak.):09240                  os9   F$ID
3815 3524             (gshell_beta5_yak.):09241                  puls  B,Y
3817 103F08           (gshell_beta5_yak.):09242                  os9   F$Send
381A 39               (gshell_beta5_yak.):09243                  rts   
                      (gshell_beta5_yak.):09244         
                      (gshell_beta5_yak.):09245         * Save error # & set flag
381B 4F               (gshell_beta5_yak.):09246         OS9ERR   clra  
381C EDA9044D         (gshell_beta5_yak.):09247                  std   ERRNO,Y
3820 CCFFFF           (gshell_beta5_yak.):09248                  ldd   #-1
3823 39               (gshell_beta5_yak.):09249                  rts   
                      (gshell_beta5_yak.):09250         
3824 25F5             (gshell_beta5_yak.):09251         SYSRET   bcs   OS9ERR
                      (gshell_beta5_yak.):09252                IFNE  H6309
                      (gshell_beta5_yak.):09253                  clrd  
                      (gshell_beta5_yak.):09254                ELSE
3826 4F               (gshell_beta5_yak.):09255                  clra
3827 5F               (gshell_beta5_yak.):09256                  clrb
                      (gshell_beta5_yak.):09257                ENDC
3828 39               (gshell_beta5_yak.):09258                  rts   
                      (gshell_beta5_yak.):09259         
3829                  (gshell_beta5_yak.):09260         EXIT           
3829 EC62             (gshell_beta5_yak.):09261         F.EXIT   ldd   2,S
382B 103F06           (gshell_beta5_yak.):09262                  os9   F$Exit
                      (gshell_beta5_yak.):09263         
                      (gshell_beta5_yak.):09264         * Quick hack to copy new 4 color icon stuff into buffer used by GPLOAD routine
                      (gshell_beta5_yak.):09265         * Entry: X=Source buffer of icon
                      (gshell_beta5_yak.):09266         *        B=# bytes to copy
382E 3440             (gshell_beta5_yak.):09267         CopyIcon pshs  u
3830 CE0EAF           (gshell_beta5_yak.):09268                  ldu   #ICONBUFR  Point to icon build buffer
3833 A680             (gshell_beta5_yak.):09269         CpyIc    lda   ,x+
3835 A7C0             (gshell_beta5_yak.):09270                  sta   ,u+
3837 5A               (gshell_beta5_yak.):09271                  decb  
3838 26F9             (gshell_beta5_yak.):09272                  bne   CpyIc
383A 35C0             (gshell_beta5_yak.):09273                  puls  u,pc
                      (gshell_beta5_yak.):09274         
                      (gshell_beta5_yak.):09275         * Reset fore/back colors for Menu bar updates
383C 3436             (gshell_beta5_yak.):09276         MenuClr  pshs  d,x,y
383E 308C3D           (gshell_beta5_yak.):09277                  leax  <MenuColr,pc
3841 2005             (gshell_beta5_yak.):09278                  bra   WritColr
                      (gshell_beta5_yak.):09279         
                      (gshell_beta5_yak.):09280         * Reset fore/back colors for non-Menu bar updates
3843 3436             (gshell_beta5_yak.):09281         RegClr   pshs  d,x,y
3845 308C3C           (gshell_beta5_yak.):09282                  leax  <RegColr,pc
3848 108E0006         (gshell_beta5_yak.):09283         WritColr ldy   #6
384C 9623             (gshell_beta5_yak.):09284                  lda   <WNDWPATH+1 Get window path
384E 103F8A           (gshell_beta5_yak.):09285                  os9   I$Write
3851 35B6             (gshell_beta5_yak.):09286                  puls  d,x,y,pc
                      (gshell_beta5_yak.):09287         
                      (gshell_beta5_yak.):09288         * 16 bit multiply - only needed for 6809 version
                      (gshell_beta5_yak.):09289                IFEQ  H6309
3853 3476             (gshell_beta5_yak.):09290         MUL16    pshs  d,x,y,u        XmulD returns Y&U
3855 6F64             (gshell_beta5_yak.):09291                  clr   4,s
3857 A663             (gshell_beta5_yak.):09292                  lda   3,s
3859 3D               (gshell_beta5_yak.):09293                  mul
385A ED66             (gshell_beta5_yak.):09294                  std   6,s
385C EC61             (gshell_beta5_yak.):09295                  ldd   1,s
385E 3D               (gshell_beta5_yak.):09296                  mul
385F EB66             (gshell_beta5_yak.):09297                  addb  6,s
3861 8900             (gshell_beta5_yak.):09298                  adca  #0
3863 ED65             (gshell_beta5_yak.):09299                  std   5,s
3865 E6E4             (gshell_beta5_yak.):09300                  ldb   ,s
3867 A663             (gshell_beta5_yak.):09301                  lda   3,s
3869 3D               (gshell_beta5_yak.):09302                  mul
386A E365             (gshell_beta5_yak.):09303                  addd  5,s
386C ED65             (gshell_beta5_yak.):09304                  std   5,s
386E 2402             (gshell_beta5_yak.):09305                  bcc   MUL16b
3870 6C64             (gshell_beta5_yak.):09306                  inc   4,s
3872 A6E4             (gshell_beta5_yak.):09307         MUL16b   lda   ,s
3874 E662             (gshell_beta5_yak.):09308                  ldb   2,s
3876 3D               (gshell_beta5_yak.):09309                  mul
3877 E364             (gshell_beta5_yak.):09310                  addd  4,s
3879 4F               (gshell_beta5_yak.):09311                  clra
387A ED64             (gshell_beta5_yak.):09312                  std   4,s
387C 35F6             (gshell_beta5_yak.):09313                  puls  d,x,y,u,pc
                      (gshell_beta5_yak.):09314                ENDC
                      (gshell_beta5_yak.):09315         
387E 1B32021B3300     (gshell_beta5_yak.):09316         MenuColr fcb   $1b,$32,2,$1b,$33,0
3884 1B32001B3302     (gshell_beta5_yak.):09317         RegColr  fcb   $1b,$32,0,$1b,$33,2
                      (gshell_beta5_yak.):09318         
                      (gshell_beta5_yak.):09319         * Mini stack blast subroutine for faster memory clears
                      (gshell_beta5_yak.):09320         * Entry: B=Value to clear with (single byte). NOTE: If you enter the 6809 version at entry point+2,
                      (gshell_beta5_yak.):09321         *          you can have D=double byte value to clear with (useful for hardware text screens, like in
                      (gshell_beta5_yak.):09322         *          Level II grfdrv)
                      (gshell_beta5_yak.):09323         *        X=Size (in bytes) to clear
                      (gshell_beta5_yak.):09324         *        U=Start address to clear from
388A                  (gshell_beta5_yak.):09325         StkBlClr
                      (gshell_beta5_yak.):09326                IFNE  H6309
                      (gshell_beta5_yak.):09327                  pshs  b              Save value to clear with
                      (gshell_beta5_yak.):09328                  tfr   x,w            Move size to TFM size register
                      (gshell_beta5_yak.):09329                  tfm   s,u+           Clear mem
                      (gshell_beta5_yak.):09330                  puls  b,pc           Eat stack & return
                      (gshell_beta5_yak.):09331                ELSE
388A 1F98             (gshell_beta5_yak.):09332                  tfr   b,a            D=double copy of value to clear memory with
388C 1E10             (gshell_beta5_yak.):09333                  exg   x,d            D=Size to clear (in bytes), X=2 byte value to clear with
388E 33CB             (gshell_beta5_yak.):09334                  leau  d,u            Point to end of clear area for stack blast
3890 3414             (gshell_beta5_yak.):09335                  pshs  b,x            Save 16 bit value to clear with, & LSB of size (to check for leftover bytes)
3892 44               (gshell_beta5_yak.):09336                  lsra                 Divide size by 4 (since we are doing 4 bytes at a time)
3893 56               (gshell_beta5_yak.):09337                  rorb
3894 44               (gshell_beta5_yak.):09338                  lsra
3895 56               (gshell_beta5_yak.):09339                  rorb
3896 3406             (gshell_beta5_yak.):09340                  pshs  d              Save mini-stack blast counters
3898 EC62             (gshell_beta5_yak.):09341                  ldd   2,s            Get A=LSB of # of bytes to clear, B=byte to clear with
389A 8403             (gshell_beta5_yak.):09342                  anda  #$3            Non-even multiple of 4?
389C 2705             (gshell_beta5_yak.):09343                  beq   NoOdd          Even, skip single byte cleanup copy
389E E7C2             (gshell_beta5_yak.):09344         OverLp   stb   ,-u            Save odd bytes
38A0 4A               (gshell_beta5_yak.):09345                  deca
38A1 26FB             (gshell_beta5_yak.):09346                  bne   OverLp
38A3 ECE1             (gshell_beta5_yak.):09347         NoOdd    ldd   ,s++           Get Mini-stack blast ctrs back
38A5 270E             (gshell_beta5_yak.):09348                  beq   ExitClrB       No 4 byte blocks, done
38A7 4D               (gshell_beta5_yak.):09349                  tsta                 Special case: Is A=0?
38A8 2601             (gshell_beta5_yak.):09350                  bne   NormClr        No, start stack blasting
38AA 4C               (gshell_beta5_yak.):09351                  inca                 If A=0, bump to 1 so we don't wrap and try to do 256 1K copies
38AB 3184             (gshell_beta5_yak.):09352         NormClr  leay  ,x             Dupe 16 bit clear value to Y
38AD 3630             (gshell_beta5_yak.):09353         ClrLp    pshu  x,y            Clear 4 bytes
38AF 5A               (gshell_beta5_yak.):09354                  decb                 Dec "leftover" (<256) 4 byte block counter
38B0 26FB             (gshell_beta5_yak.):09355                  bne   ClrLp          Keep doing till that chunk is done
38B2 4A               (gshell_beta5_yak.):09356                  deca                 Dec 1Kbyte counter
38B3 26F8             (gshell_beta5_yak.):09357                  bne   ClrLp          Still going (B has been set to 0, so inner loop is 256 now)
38B5 3594             (gshell_beta5_yak.):09358         ExitClrB puls  b,x,pc         Eat temp regs & return
                      (gshell_beta5_yak.):09359                ENDC
                      (gshell_beta5_yak.):09360         
                      (gshell_beta5_yak.):09361         * Mini stack blast subroutine for faster memory copies. We are only keeping 6809 version here
                      (gshell_beta5_yak.):09362         * Mini stack blast copy - works on odd # of bytes. Will use stack pull 4 bytes/time when
                      (gshell_beta5_yak.):09363         * possible.
                      (gshell_beta5_yak.):09364         * Entry: D=size of copy
                      (gshell_beta5_yak.):09365         *        U=Source ptr
                      (gshell_beta5_yak.):09366         *        Y=Dest ptr
                      (gshell_beta5_yak.):09367         * Uses: W if 6309
                      (gshell_beta5_yak.):09368         *       U,X,D,Y
                      (gshell_beta5_yak.):09369         * X preserved on exit
38B7 3426             (gshell_beta5_yak.):09370         StkBlCpy pshs  y,d            Save dest ptr & size
38B9 30CB             (gshell_beta5_yak.):09371                  leax  d,u            Point to end of source copy
38BB 3410             (gshell_beta5_yak.):09372                  pshs  x              Save that as where to stop copying
38BD C403             (gshell_beta5_yak.):09373                  andb  #$03           1st, check if non-even multiple of 4 bytes
38BF 270F             (gshell_beta5_yak.):09374                  beq   ChkBlst        Even multiple of 4, go straight to mini-stack blast
38C1 A6C0             (gshell_beta5_yak.):09375         OddCpy   lda   ,u+            Otherwise, copy 1-3 bytes 1 at at time until we line up with a 4 byte boundary
38C3 A7A0             (gshell_beta5_yak.):09376                  sta   ,y+            
38C5 5A               (gshell_beta5_yak.):09377                  decb                 Done odd bytes?
38C6 26F9             (gshell_beta5_yak.):09378                  bne   OddCpy         No, keep copying 1 at a time
38C8 2006             (gshell_beta5_yak.):09379                  bra   ChkBlst        Yes, finish any remaining 4 bytes/time with stack blast
                      (gshell_beta5_yak.):09380         
                      (gshell_beta5_yak.):09381         * Mini stack blast copy - does 4 byte stack blast for read, 4 byte 'normal' write
                      (gshell_beta5_yak.):09382         * Entry: U=ptr to src
                      (gshell_beta5_yak.):09383         *        Y=ptr to dest
                      (gshell_beta5_yak.):09384         *        0,s=ptr to stop at (for source)
38CA 3716             (gshell_beta5_yak.):09385         BlstCpy  pulu  x,d        Get 4 bytes really quickly
38CC EDA1             (gshell_beta5_yak.):09386                  std   ,y++       Save them in output buffer. 
38CE AFA1             (gshell_beta5_yak.):09387                  stx   ,y++            
38D0 11A3E4           (gshell_beta5_yak.):09388         ChkBlst  cmpu  ,s         Are we done
38D3 25F5             (gshell_beta5_yak.):09389                  blo   BlstCpy
38D5 3262             (gshell_beta5_yak.):09390                  leas  2,s        Eat stop address
38D7 35A6             (gshell_beta5_yak.):09391                  puls  pc,y,d     Restore regs & return
                      (gshell_beta5_yak.):09392         
                      (gshell_beta5_yak.):09393         * Entry: U=GD.* ptr to GShell process descriptor
                      (gshell_beta5_yak.):09394         *          GD.WNNAM needs to be set up already
                      (gshell_beta5_yak.):09395         *        A=0 Change window to VDG or
                      (gshell_beta5_yak.):09396         *        A=1 (restore window from VDG to normal)
                      (gshell_beta5_yak.):09397         * Preserves U,Y. Modifies D,X
                      (gshell_beta5_yak.):09398         * Exit:  Changes done, or CC set/B=error code from ModDsc
38D9 3460             (gshell_beta5_yak.):09399         ModDesc  pshs  u,y        Save regs
38DB 318C2D           (gshell_beta5_yak.):09400                  leay  <ModDscPt,pc  Point to I$ModDsc packet
38DE 3279             (gshell_beta5_yak.):09401                  leas  -ModDscSz,s   Make room on stock to copy it (so we can modify)
38E0 33E4             (gshell_beta5_yak.):09402                  leau  ,s
38E2 E6A0             (gshell_beta5_yak.):09403                  ldb   ,y+        Get count of double bytes
38E4 E7C0             (gshell_beta5_yak.):09404                  stb   ,u+
38E6 AEA1             (gshell_beta5_yak.):09405         CpyMdDsc ldx   ,y++       Get byte pair
38E8 AFC1             (gshell_beta5_yak.):09406                  stx   ,u++       Save data copy
38EA 5A               (gshell_beta5_yak.):09407                  decb
38EB 26F9             (gshell_beta5_yak.):09408                  bne   CpyMdDsc
38ED 33E4             (gshell_beta5_yak.):09409                  leau  ,s         Point to start of copy again
38EF AE69             (gshell_beta5_yak.):09410                  ldx   2+ModDscSz,s  Get GD.* ptr back
38F1 4D               (gshell_beta5_yak.):09411                  tsta             Are we modifying TO VDG?
38F2 270B             (gshell_beta5_yak.):09412                  beq   DoMod      Yes, go do
38F4 8680             (gshell_beta5_yak.):09413                  lda   #$80       No, hardcode parity (which sub-screen driver) for CoWin
38F6 A742             (gshell_beta5_yak.):09414                  sta   2,u        Save in ModDsc packet
38F8 EC8816           (gshell_beta5_yak.):09415                  ldd   GD.OXSIZ,x No, grab original X&Y sizes
38FB A744             (gshell_beta5_yak.):09416                  sta   4,u        Save them
38FD E746             (gshell_beta5_yak.):09417                  stb   6,u
38FF 308811           (gshell_beta5_yak.):09418         DoMod    leax  GD.WNNAM+1,x Point to real window name NOT including slash
3902 E6C0             (gshell_beta5_yak.):09419                  ldb   ,u+        Get # of byte pairs
3904 103F91           (gshell_beta5_yak.):09420                  os9   I$ModDsc   Modify the descriptor to make into VDG screen
3907 3267             (gshell_beta5_yak.):09421                  leas  ModDscSz,s Eat temp stack copy
3909 35E0             (gshell_beta5_yak.):09422                  puls  y,u,pc     Restore regs and return (with error intact)
                      (gshell_beta5_yak.):09423         
                      (gshell_beta5_yak.):09424         * I$ModDsc packet for converting window to VDG
390B 03               (gshell_beta5_yak.):09425         ModDscPt fcb   3          3 bytes to change in descriptor
390C 2601             (gshell_beta5_yak.):09426                  fcb   IT.PAR,1   Parity: 1=VDG, $80=CoGrf/CoWin
390E 2C20             (gshell_beta5_yak.):09427                  fcb   IT.COL,32  32 columns
3910 2D10             (gshell_beta5_yak.):09428                  fcb   IT.ROW,16  16 rows
     0007             (gshell_beta5_yak.):09429         ModDscSz equ   *-ModDscPt
                      (gshell_beta5_yak.):09430         
                      (gshell_beta5_yak.):09431         * Parse for a '|' symbol in a string
                      (gshell_beta5_yak.):09432         * Entry: X=ptr to NUL terminated string
                      (gshell_beta5_yak.):09433         * Exit:  B=0 (no pipe symbol found) OR
                      (gshell_beta5_yak.):09434         *        B=offset to pipe position+1, and pipe is replace with NUL in string
3912 5F               (gshell_beta5_yak.):09435         ParsPipe clrb             Init ptr
3913 A685             (gshell_beta5_yak.):09436         PipeLp   lda   b,x        Get char from filename
3915 2707             (gshell_beta5_yak.):09437                  beq   NoPipe     Hit end of string, exit with B=0
3917 817C             (gshell_beta5_yak.):09438                  cmpa  #'|        Pipe symbol?
3919 2705             (gshell_beta5_yak.):09439                  beq   FndPipe    Yes, change to NUL and return with B=offset
391B 5C               (gshell_beta5_yak.):09440                  incb             No NUL or Pipe, bump ptr offset up
391C 26F5             (gshell_beta5_yak.):09441                  bne   PipeLp     Check next char
391E 5F               (gshell_beta5_yak.):09442         NoPipe   clrb             Flag no pipe found & return
391F 39               (gshell_beta5_yak.):09443                  rts
                      (gshell_beta5_yak.):09444         
3920 6F85             (gshell_beta5_yak.):09445         FndPipe  clr   b,x        Replace pipe with NUL
3922 5C               (gshell_beta5_yak.):09446                  incb
3923 39               (gshell_beta5_yak.):09447                  rts              Return with B being offset to post-pipe string
                      (gshell_beta5_yak.):09448         
                      (gshell_beta5_yak.):09449         * New 4 color disk drive icon 24x12
3924 FFFFFFFFFFFD     (gshell_beta5_yak.):09450         driveicn fcb   255,255,255,255,255,253
392A EAAAAAAAAAA9     (gshell_beta5_yak.):09451                  fcb   234,170,170,170,170,169
3930 EAAAAAAAAAA9     (gshell_beta5_yak.):09452                  fcb   234,170,170,170,170,169
3936 EAAAAAAAAAA9     (gshell_beta5_yak.):09453                  fcb   234,170,170,170,170,169
393C EAAA5555AAA9     (gshell_beta5_yak.):09454                  fcb   234,170,85,85,170,169
3942 E955400155E9     (gshell_beta5_yak.):09455                  fcb   233,85,64,1,85,233
3948 EBFFEAABFFE9     (gshell_beta5_yak.):09456                  fcb   235,255,234,171,255,233
394E EAAAFFFFAAA9     (gshell_beta5_yak.):09457                  fcb   234,170,255,255,170,169
3954 EAAAAAAAAFE9     (gshell_beta5_yak.):09458                  fcb   234,170,170,170,175,233
395A E56AAAAAAD69     (gshell_beta5_yak.):09459                  fcb   229,106,170,170,173,105
3960 EAAAAAAAAAA9     (gshell_beta5_yak.):09460                  fcb   234,170,170,170,170,169
3966 D55555555555     (gshell_beta5_yak.):09461                  fcb   213,85,85,85,85,85
                      (gshell_beta5_yak.):09462         
                      (gshell_beta5_yak.):09463         * Proposed new one from Nick Marentes version 2
396C AAAA800AAAAA     (gshell_beta5_yak.):09464         trashicn fcb   $AA,$AA,$80,$0A,$AA,$AA
3972 AAAA1B52AAAA     (gshell_beta5_yak.):09465                  fcb   $AA,$AA,$1B,$52,$AA,$AA
3978 AA00000000AA     (gshell_beta5_yak.):09466                  fcb   $AA,$00,$00,$00,$00,$AA
397E A856BFA5552A     (gshell_beta5_yak.):09467                  fcb   $A8,$56,$BF,$A5,$55,$2A
3984 A8000000002A     (gshell_beta5_yak.):09468                  fcb   $A8,$00,$00,$00,$00,$2A
398A AA16BFA954AA     (gshell_beta5_yak.):09469                  fcb   $AA,$16,$BF,$A9,$54,$AA
3990 AA16BFA954AA     (gshell_beta5_yak.):09470                  fcb   $AA,$16,$BF,$A9,$54,$AA
3996 AA11879144AA     (gshell_beta5_yak.):09471                  fcb   $AA,$11,$87,$91,$44,$AA
399C AA11879144AA     (gshell_beta5_yak.):09472                  fcb   $AA,$11,$87,$91,$44,$AA
39A2 AA11879144AA     (gshell_beta5_yak.):09473                  fcb   $AA,$11,$87,$91,$44,$AA
39A8 AA11879144AA     (gshell_beta5_yak.):09474                  fcb   $AA,$11,$87,$91,$44,$AA
39AE AA11879144AA     (gshell_beta5_yak.):09475                  fcb   $AA,$11,$87,$91,$44,$AA
39B4 AA11879144AA     (gshell_beta5_yak.):09476                  fcb   $AA,$11,$87,$91,$44,$AA
39BA AA11879144AA     (gshell_beta5_yak.):09477                  fcb   $AA,$11,$87,$91,$44,$AA
39C0 AA11879144AA     (gshell_beta5_yak.):09478                  fcb   $AA,$11,$87,$91,$44,$AA
39C6 AA11879144AA     (gshell_beta5_yak.):09479                  fcb   $AA,$11,$87,$91,$44,$AA
39CC AA11879144AA     (gshell_beta5_yak.):09480                  fcb   $AA,$11,$87,$91,$44,$AA
39D2 AA11879144AA     (gshell_beta5_yak.):09481                  fcb   $AA,$11,$87,$91,$44,$AA
39D8 AA11879144AA     (gshell_beta5_yak.):09482                  fcb   $AA,$11,$87,$91,$44,$AA
39DE AA16BFA954AA     (gshell_beta5_yak.):09483                  fcb   $AA,$16,$BF,$A9,$54,$AA
39E4 AA16BFA954AA     (gshell_beta5_yak.):09484                  fcb   $AA,$16,$BF,$A9,$54,$AA
39EA AA80000002AA     (gshell_beta5_yak.):09485                  fcb   $AA,$80,$00,$00,$02,$AA
39F0 AAAAAAAAAAAA     (gshell_beta5_yak.):09486                  fcb   $AA,$AA,$AA,$AA,$AA,$AA
39F6 AAAAAAAAAAAA     (gshell_beta5_yak.):09487                  fcb   $AA,$AA,$AA,$AA,$AA,$AA
                      (gshell_beta5_yak.):09488         
                      (gshell_beta5_yak.):09489         * New 4 color EXECUTABLE icon 24x24
39FC FFFFFFFFFFFD     (gshell_beta5_yak.):09490         execicon fcb   255,255,255,255,255,253
3A02 E4A915644AA5     (gshell_beta5_yak.):09491                  fcb   228,169,21,100,74,165
3A08 E4A914A10AA5     (gshell_beta5_yak.):09492                  fcb   228,169,20,161,10,165
3A0E D55555555555     (gshell_beta5_yak.):09493                  fcb   213,85,85,85,85,85
3A14 FDAAAAAAAAFD     (gshell_beta5_yak.):09494                  fcb   253,170,170,170,170,253
3A1A E991AA12AAC9     (gshell_beta5_yak.):09495                  fcb   233,145,170,18,170,201
3A20 E984AA46AAC1     (gshell_beta5_yak.):09496                  fcb   233,132,170,70,170,193
3A26 E991AA12AAD5     (gshell_beta5_yak.):09497                  fcb   233,145,170,18,170,213
3A2C E9AAAAAAAAE9     (gshell_beta5_yak.):09498                  fcb   233,170,170,170,170,233
3A32 E9946A14AAFD     (gshell_beta5_yak.):09499                  fcb   233,148,106,20,170,253
3A38 E9916A50AAE9     (gshell_beta5_yak.):09500                  fcb   233,145,106,80,170,233
3A3E E9AAAAAAAAD5     (gshell_beta5_yak.):09501                  fcb   233,170,170,170,170,213
3A44 E9AAAAAAAAE9     (gshell_beta5_yak.):09502                  fcb   233,170,170,170,170,233
3A4A E99DEAAAAAE9     (gshell_beta5_yak.):09503                  fcb   233,157,234,170,170,233
3A50 E9B46AAAAAE9     (gshell_beta5_yak.):09504                  fcb   233,180,106,170,170,233
3A56 E9836AAAAAE9     (gshell_beta5_yak.):09505                  fcb   233,131,106,170,170,233
3A5C E9AAAAAAAAD5     (gshell_beta5_yak.):09506                  fcb   233,170,170,170,170,213
3A62 E9812AAAAAC1     (gshell_beta5_yak.):09507                  fcb   233,129,42,170,170,193
3A68 E9842AAAAAD1     (gshell_beta5_yak.):09508                  fcb   233,132,42,170,170,209
3A6E D5AAAAAAAAD5     (gshell_beta5_yak.):09509                  fcb   213,170,170,170,170,213
3A74 FFFFFFFFFFFD     (gshell_beta5_yak.):09510                  fcb   255,255,255,255,255,253
3A7A C1AE6AAAAA41     (gshell_beta5_yak.):09511                  fcb   193,174,106,170,170,65
3A80 E1AE6AAAAA49     (gshell_beta5_yak.):09512                  fcb   225,174,106,170,170,73
3A86 555555555555     (gshell_beta5_yak.):09513                  fcb   85,85,85,85,85,85
                      (gshell_beta5_yak.):09514         
                      (gshell_beta5_yak.):09515         * New 4 color Folder icon 24x24
3A8C AA82AAAAAAAA     (gshell_beta5_yak.):09516         foldricn fcb   170,130,170,170,170,170
3A92 AA3C0AAAAAAA     (gshell_beta5_yak.):09517                  fcb   170,60,10,170,170,170
3A98 AA37F0AAAAAA     (gshell_beta5_yak.):09518                  fcb   170,55,240,170,170,170
3A9E 01E17CAAAAAA     (gshell_beta5_yak.):09519                  fcb   1,225,124,170,170,170
3AA4 3C2AA80AAAAA     (gshell_beta5_yak.):09520                  fcb   60,42,168,10,170,170
3AAA 3FC0ABF02AAA     (gshell_beta5_yak.):09521                  fcb   63,192,171,240,42,170
3AB0 3EBF02AFC0AA     (gshell_beta5_yak.):09522                  fcb   62,191,2,175,192,170
3AB6 3AAAFC0ABF02     (gshell_beta5_yak.):09523                  fcb   58,170,252,10,191,2
3ABC 3AAAABF02AFC     (gshell_beta5_yak.):09524                  fcb   58,170,171,240,42,252
3AC2 3AAAAAAFC2A0     (gshell_beta5_yak.):09525                  fcb   58,170,170,175,194,160
3AC8 3AAAAAAA92A4     (gshell_beta5_yak.):09526                  fcb   58,170,170,170,146,164
3ACE 3AAAAAAA9194     (gshell_beta5_yak.):09527                  fcb   58,170,170,170,145,148
3AD4 3AAAAAAA9264     (gshell_beta5_yak.):09528                  fcb   58,170,170,170,146,100
3ADA 3AAAAAAA9194     (gshell_beta5_yak.):09529                  fcb   58,170,170,170,145,148
3AE0 3AAAAAAA9252     (gshell_beta5_yak.):09530                  fcb   58,170,170,170,146,82
3AE6 3AAAAAAAA492     (gshell_beta5_yak.):09531                  fcb   58,170,170,170,164,146
3AEC 3AAAAAAAA452     (gshell_beta5_yak.):09532                  fcb   58,170,170,170,164,82
3AF2 15AAAAAAA492     (gshell_beta5_yak.):09533                  fcb   21,170,170,170,164,146
3AF8 8056AAAAA452     (gshell_beta5_yak.):09534                  fcb   128,86,170,170,164,82
3AFE AA015AAAA40A     (gshell_beta5_yak.):09535                  fcb   170,1,90,170,164,10
3B04 AAA8056AA50A     (gshell_beta5_yak.):09536                  fcb   170,168,5,106,165,10
3B0A AAAAA015990A     (gshell_beta5_yak.):09537                  fcb   170,170,160,21,153,10
3B10 AAAAAA80550A     (gshell_beta5_yak.):09538                  fcb   170,170,170,128,85,10
3B16 AAAAAAAA000A     (gshell_beta5_yak.):09539                  fcb   170,170,170,170,0,10
                      (gshell_beta5_yak.):09540         
                      (gshell_beta5_yak.):09541         * Text Icon 24x24
3B1C 00000000000A     (gshell_beta5_yak.):09542         txticon  fcb   0,0,0,0,0,10
3B22 3FFFFFFD5546     (gshell_beta5_yak.):09543                  fcb   63,255,255,253,85,70
3B28 3DB7E5FD9A86     (gshell_beta5_yak.):09544                  fcb   61,183,229,253,154,134
3B2E 3D776D7DE686     (gshell_beta5_yak.):09545                  fcb   61,119,109,125,230,134
3B34 3FFFFFFDF986     (gshell_beta5_yak.):09546                  fcb   63,255,255,253,249,134
3B3A 3FFFFFFDBE46     (gshell_beta5_yak.):09547                  fcb   63,255,255,253,190,70
3B40 3DBFF6FD5546     (gshell_beta5_yak.):09548                  fcb   61,191,246,253,85,70
3B46 3EDF9BBFFFC6     (gshell_beta5_yak.):09549                  fcb   62,223,155,191,255,198
3B4C 3FFFFFFFFFC6     (gshell_beta5_yak.):09550                  fcb   63,255,255,255,255,198
3B52 3FFFFFFFFFC6     (gshell_beta5_yak.):09551                  fcb   63,255,255,255,255,198
3B58 3E6DFDD7FBC6     (gshell_beta5_yak.):09552                  fcb   62,109,253,215,251,198
3B5E 3F7E7ADBB9C6     (gshell_beta5_yak.):09553                  fcb   63,126,122,219,185,198
3B64 3FFFFFFFFFC6     (gshell_beta5_yak.):09554                  fcb   63,255,255,255,255,198
3B6A 3FFFFFFFFFC6     (gshell_beta5_yak.):09555                  fcb   63,255,255,255,255,198
3B70 3EFEFEFFFBC6     (gshell_beta5_yak.):09556                  fcb   62,254,254,255,251,198
3B76 3E7D6E7DF9C6     (gshell_beta5_yak.):09557                  fcb   62,125,110,125,249,198
3B7C 3FFFFFFFFFC6     (gshell_beta5_yak.):09558                  fcb   63,255,255,255,255,198
3B82 3FFFFFFFFFC6     (gshell_beta5_yak.):09559                  fcb   63,255,255,255,255,198
3B88 3EBD7FE797C6     (gshell_beta5_yak.):09560                  fcb   62,189,127,231,151,198
3B8E 3EFFAFDFFBC6     (gshell_beta5_yak.):09561                  fcb   62,255,175,223,251,198
3B94 3FFFFFFFFFC6     (gshell_beta5_yak.):09562                  fcb   63,255,255,255,255,198
3B9A 000000000006     (gshell_beta5_yak.):09563                  fcb   0,0,0,0,0,6
3BA0 955555555556     (gshell_beta5_yak.):09564                  fcb   149,85,85,85,85,86
3BA6 AAAAAAAAAAAA     (gshell_beta5_yak.):09565                  fcb   170,170,170,170,170,170
                      (gshell_beta5_yak.):09566         
                      (gshell_beta5_yak.):09567         * New printer icon (24x15) - Nick for EOU
3BAC AAA80002AAAA     (gshell_beta5_yak.):09568         prntricn fcb   170,168,0,2,170,170
3BB2 AAA8FFC8AAAA     (gshell_beta5_yak.):09569                  fcb   170,168,255,200,170,170
3BB8 AAA8C3CD2AAA     (gshell_beta5_yak.):09570                  fcb   170,168,195,205,42,170
3BBE AAA8FFC02AAA     (gshell_beta5_yak.):09571                  fcb   170,168,255,192,42,170
3BC4 AAA8C0FF2AAA     (gshell_beta5_yak.):09572                  fcb   170,168,192,255,42,170
3BCA AAA8FFC32AAA     (gshell_beta5_yak.):09573                  fcb   170,168,255,195,42,170
3BD0 AA80C0FF02AA     (gshell_beta5_yak.):09574                  fcb   170,128,192,255,2,170
3BD6 AA88FFFF22AA     (gshell_beta5_yak.):09575                  fcb   170,136,255,255,34,170
3BDC AA00000000AA     (gshell_beta5_yak.):09576                  fcb   170,0,0,0,0,170
3BE2 A8AAAAAAAA2A     (gshell_beta5_yak.):09577                  fcb   $A8,$AA,$AA,$AA,$AA,$2A
3BE8 A8AAAAAA822A     (gshell_beta5_yak.):09578                  fcb   168,170,170,170,130,42
3BEE A8AAAAAAAA2A     (gshell_beta5_yak.):09579                  fcb   168,170,170,170,170,42
3BF4 A8000000002A     (gshell_beta5_yak.):09580                  fcb   168,0,0,0,0,42
3BFA AA2AAAAAA8AA     (gshell_beta5_yak.):09581                  fcb   $AA,$2A,$AA,$AA,$A8,$AA
3C00 AA80000002AA     (gshell_beta5_yak.):09582                  fcb   170,128,0,0,2,170
                      (gshell_beta5_yak.):09583         
3C06 0017             (gshell_beta5_yak.):09584         ETEXT    fdb   INTCOUNT-DPAGDATA
                      (gshell_beta5_yak.):09585         
3C08 FF               (gshell_beta5_yak.):09586         DPAGDATA fcb   $FF        WIPED     On initialization, we have to refresh DIR screen
3C09 0006             (gshell_beta5_yak.):09587                  fdb   6          DEFWTYPE
3C0B 0040             (gshell_beta5_yak.):09588                  fdb   64         ICONCOLW
3C0D 000F             (gshell_beta5_yak.):09589                  fdb   15         STRTYPOS
3C0F 0087             (gshell_beta5_yak.):09590                  fdb   135        ICONYMAX
3C11 0028             (gshell_beta5_yak.):09591                  fdb   40         ICONROWH
3C13 0019             (gshell_beta5_yak.):09592                  fdb   25         WNDWSZY
3C15 0038             (gshell_beta5_yak.):09593                  fdb   PTBLSPTR   PTBLNEXT
3C17 0691             (gshell_beta5_yak.):09594                  fdb   FNAMBUFR   FNAMEPTR
3C19 03BD             (gshell_beta5_yak.):09595                  fdb   CALCDESC   IDSCSPTR
3C1B 0413             (gshell_beta5_yak.):09596                  fdb   ENDLINK    IDSCNEXT
3C1D 05               (gshell_beta5_yak.):09597                  fcb   5          DEVICNTR
3C1E 02               (gshell_beta5_yak.):09598                  fcb   2          DRIVYPOS  Was 18 (making room for printer)
                      (gshell_beta5_yak.):09599         
                      (gshell_beta5_yak.):09600         * End of Direct Page Variables.
                      (gshell_beta5_yak.):09601         
3C1F 03DD             (gshell_beta5_yak.):09602         INTCOUNT fdb   DTXCOUNT-INITDATA
                      (gshell_beta5_yak.):09603         
                      (gshell_beta5_yak.):09604         * TNDYITMS
                      (gshell_beta5_yak.):09605         
3C21 43616C63         (gshell_beta5_yak.):09606         INITDATA fcc   "Calc"
3C25 0000000000000000 (gshell_beta5_yak.):09607                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3C2D 000000           (gshell_beta5_yak.):09608                  fcb   NUL,NUL,NUL
3C30 01000000         (gshell_beta5_yak.):09609                  fcb   1,0,0,0
3C34 0000             (gshell_beta5_yak.):09610                  fcb   0,0
                      (gshell_beta5_yak.):09611         
3C36 436C6F636B       (gshell_beta5_yak.):09612                  fcc   "Clock"
3C3B 0000000000000000 (gshell_beta5_yak.):09613                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3C43 0000             (gshell_beta5_yak.):09614                  fcb   NUL,NUL
3C45 01000000         (gshell_beta5_yak.):09615                  fcb   1,0,0,0
3C49 0000             (gshell_beta5_yak.):09616                  fcb   0,0
                      (gshell_beta5_yak.):09617         
3C4B 43616C656E646172 (gshell_beta5_yak.):09618                  fcc   "Calendar"
3C53 00000000000000   (gshell_beta5_yak.):09619                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL
3C5A 01000000         (gshell_beta5_yak.):09620                  fcb   1,0,0,0
3C5E 0000             (gshell_beta5_yak.):09621                  fcb   0,0
                      (gshell_beta5_yak.):09622         
3C60 436F6E74726F6C   (gshell_beta5_yak.):09623                  fcc   "Control"
3C67 0000000000000000 (gshell_beta5_yak.):09624                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3C6F 01000000         (gshell_beta5_yak.):09625                  fcb   1,0,0,0
3C73 0000             (gshell_beta5_yak.):09626                  fcb   0,0
                      (gshell_beta5_yak.):09627         
3C75 5072696E746572   (gshell_beta5_yak.):09628                  fcc   "Printer"
3C7C 0000000000000000 (gshell_beta5_yak.):09629                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3C84 01000000         (gshell_beta5_yak.):09630                  fcb   1,0,0,0
3C88 0000             (gshell_beta5_yak.):09631                  fcb   0,0
                      (gshell_beta5_yak.):09632         
3C8A 506F7274         (gshell_beta5_yak.):09633                  fcc   "Port"
3C8E 0000000000000000 (gshell_beta5_yak.):09634                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3C96 000000           (gshell_beta5_yak.):09635                  fcb   NUL,NUL,NUL
3C99 01000000         (gshell_beta5_yak.):09636                  fcb   1,0,0,0
3C9D 0000             (gshell_beta5_yak.):09637                  fcb   0,0
                      (gshell_beta5_yak.):09638         
3C9F 48656C70         (gshell_beta5_yak.):09639                  fcc   "Help"
3CA3 0000000000000000 (gshell_beta5_yak.):09640                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3CAB 000000           (gshell_beta5_yak.):09641                  fcb   NUL,NUL,NUL
3CAE 01000000         (gshell_beta5_yak.):09642                  fcb   1,0,0,0
3CB2 0000             (gshell_beta5_yak.):09643                  fcb   0,0
                      (gshell_beta5_yak.):09644         
3CB4 5368656C6C       (gshell_beta5_yak.):09645                  fcc   "Shell"
3CB9 0000000000000000 (gshell_beta5_yak.):09646                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3CC1 0000             (gshell_beta5_yak.):09647                  fcb   NUL,NUL
3CC3 01000000         (gshell_beta5_yak.):09648                  fcb   1,0,0,0
3CC7 0000             (gshell_beta5_yak.):09649                  fcb   0,0
                      (gshell_beta5_yak.):09650         
                      (gshell_beta5_yak.):09651         * MAY WANT TO ADD BACK IN IF WE START USING CLIPBOARD FUNCTIONS
                      (gshell_beta5_yak.):09652         * Need to find Tandy doc on how to set up data type headers for clipboard
                      (gshell_beta5_yak.):09653         * (text, graphics,etc.)
                      (gshell_beta5_yak.):09654         * FCC "Clipboard" 
                      (gshell_beta5_yak.):09655         * FCB NUL,NUL,NUL,NUL,NUL,NUL 
                      (gshell_beta5_yak.):09656         * FCB 0,0,0,0 
                      (gshell_beta5_yak.):09657         * FCB 0,0 
                      (gshell_beta5_yak.):09658         
                      (gshell_beta5_yak.):09659         * DISKITMS
                      (gshell_beta5_yak.):09660         * ITM.FREE
3CC9 46726565         (gshell_beta5_yak.):09661                  fcc   "Free"
3CCD 0000000000000000 (gshell_beta5_yak.):09662                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3CD5 000000           (gshell_beta5_yak.):09663                  fcb   NUL,NUL,NUL
3CD8 00000000         (gshell_beta5_yak.):09664                  fcb   0,0,0,0
3CDC 0000             (gshell_beta5_yak.):09665                  fcb   0,0
                      (gshell_beta5_yak.):09666         
                      (gshell_beta5_yak.):09667         * ITM.FLDR
3CDE 4E657720466F6C64 (gshell_beta5_yak.):09668                  fcc   "New Folder"
     6572
3CE8 0000000000       (gshell_beta5_yak.):09669                  fcb   NUL,NUL,NUL,NUL,NUL
3CED 00000000         (gshell_beta5_yak.):09670                  fcb   0,0,0,0
3CF1 0000             (gshell_beta5_yak.):09671                  fcb   0,0
                      (gshell_beta5_yak.):09672         
                      (gshell_beta5_yak.):09673         * ITM.FMAT
3CF3 466F726D6174     (gshell_beta5_yak.):09674                  fcc   "Format"
3CF9 0000000000000000 (gshell_beta5_yak.):09675                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3D01 00               (gshell_beta5_yak.):09676                  fcb   NUL
3D02 01000000         (gshell_beta5_yak.):09677                  fcb   1,0,0,0
3D06 0000             (gshell_beta5_yak.):09678                  fcb   0,0
                      (gshell_beta5_yak.):09679         
3D08 4261636B7570     (gshell_beta5_yak.):09680                  fcc   "Backup"
3D0E 0000000000000000 (gshell_beta5_yak.):09681                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3D16 00               (gshell_beta5_yak.):09682                  fcb   NUL
3D17 01000000         (gshell_beta5_yak.):09683                  fcb   1,0,0,0
3D1B 0000             (gshell_beta5_yak.):09684                  fcb   0,0
                      (gshell_beta5_yak.):09685         
3D1D 5365742045786563 (gshell_beta5_yak.):09686                  fcc   "Set Execute"
     757465
3D28 00000000         (gshell_beta5_yak.):09687                  fcb   NUL,NUL,NUL,NUL
3D2C 01000000         (gshell_beta5_yak.):09688                  fcb   1,0,0,0
3D30 0000             (gshell_beta5_yak.):09689                  fcb   0,0
                      (gshell_beta5_yak.):09690         
3D32 5365742044657669 (gshell_beta5_yak.):09691                  fcc   "Set Devices"
     636573
3D3D 00000000         (gshell_beta5_yak.):09692                  fcb   NUL,NUL,NUL,NUL
3D41 01000000         (gshell_beta5_yak.):09693                  fcb   1,0,0,0
3D45 0000             (gshell_beta5_yak.):09694                  fcb   0,0
                      (gshell_beta5_yak.):09695         
                      (gshell_beta5_yak.):09696         * ITM.OPEN
3D47 4F70656E         (gshell_beta5_yak.):09697                  fcc   "Open"
3D4B 0000000000000000 (gshell_beta5_yak.):09698                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3D53 000000           (gshell_beta5_yak.):09699                  fcb   NUL,NUL,NUL
3D56 00000000         (gshell_beta5_yak.):09700                  fcb   0,0,0,0
3D5A 0000             (gshell_beta5_yak.):09701                  fcb   0,0
                      (gshell_beta5_yak.):09702         
                      (gshell_beta5_yak.):09703         * ITM.LIST
3D5C 4C697374         (gshell_beta5_yak.):09704                  fcc   "List"
3D60 0000000000000000 (gshell_beta5_yak.):09705                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3D68 000000           (gshell_beta5_yak.):09706                  fcb   NUL,NUL,NUL
3D6B 00000000         (gshell_beta5_yak.):09707                  fcb   0,0,0,0
3D6F 0000             (gshell_beta5_yak.):09708                  fcb   0,0
                      (gshell_beta5_yak.):09709         
                      (gshell_beta5_yak.):09710         * ITM.COPY
3D71 436F7079         (gshell_beta5_yak.):09711                  fcc   "Copy"
3D75 0000000000000000 (gshell_beta5_yak.):09712                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3D7D 000000           (gshell_beta5_yak.):09713                  fcb   NUL,NUL,NUL
3D80 00000000         (gshell_beta5_yak.):09714                  fcb   0,0,0,0
3D84 0000             (gshell_beta5_yak.):09715                  fcb   0,0
                      (gshell_beta5_yak.):09716         
                      (gshell_beta5_yak.):09717         * ITM.STAT
3D86 53746174         (gshell_beta5_yak.):09718                  fcc   "Stat"
3D8A 0000000000000000 (gshell_beta5_yak.):09719                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3D92 000000           (gshell_beta5_yak.):09720                  fcb   NUL,NUL,NUL
3D95 00000000         (gshell_beta5_yak.):09721                  fcb   0,0,0,0
3D99 0000             (gshell_beta5_yak.):09722                  fcb   0,0
                      (gshell_beta5_yak.):09723         
                      (gshell_beta5_yak.):09724         * ITM.PRNT
3D9B 5072696E74       (gshell_beta5_yak.):09725                  fcc   "Print"
3DA0 0000000000000000 (gshell_beta5_yak.):09726                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3DA8 0000             (gshell_beta5_yak.):09727                  fcb   NUL,NUL
3DAA 00000000         (gshell_beta5_yak.):09728                  fcb   0,0,0,0
3DAE 0000             (gshell_beta5_yak.):09729                  fcb   0,0
                      (gshell_beta5_yak.):09730         
                      (gshell_beta5_yak.):09731         * ITM.RENAM
3DB0 52656E616D65     (gshell_beta5_yak.):09732                  fcc   "Rename"
3DB6 0000000000000000 (gshell_beta5_yak.):09733                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3DBE 00               (gshell_beta5_yak.):09734                  fcb   NUL
3DBF 00000000         (gshell_beta5_yak.):09735                  fcb   0,0,0,0
3DC3 0000             (gshell_beta5_yak.):09736                  fcb   0,0
                      (gshell_beta5_yak.):09737         
                      (gshell_beta5_yak.):09738         * ITM.DELT
3DC5 44656C657465     (gshell_beta5_yak.):09739                  fcc   "Delete"
3DCB 0000000000000000 (gshell_beta5_yak.):09740                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3DD3 00               (gshell_beta5_yak.):09741                  fcb   NUL
3DD4 00000000         (gshell_beta5_yak.):09742                  fcb   0,0,0,0
3DD8 0000             (gshell_beta5_yak.):09743                  fcb   0,0
                      (gshell_beta5_yak.):09744         
                      (gshell_beta5_yak.):09745         * ITM.DUMP
3DDA 44756D70         (gshell_beta5_yak.):09746                  fcc   "Dump"
3DDE 0000000000000000 (gshell_beta5_yak.):09747                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3DE6 000000           (gshell_beta5_yak.):09748                  fcb   NUL,NUL,NUL
3DE9 00000000         (gshell_beta5_yak.):09749                  fcb   0,0,0,0
3DED 0000             (gshell_beta5_yak.):09750                  fcb   0,0
                      (gshell_beta5_yak.):09751                  
                      (gshell_beta5_yak.):09752         * ITM.SORT
3DEF 536F7274         (gshell_beta5_yak.):09753                  fcc   "Sort"
3DF3 0000000000000000 (gshell_beta5_yak.):09754                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3DFB 000000           (gshell_beta5_yak.):09755                  fcb   NUL,NUL,NUL
3DFE 00000000         (gshell_beta5_yak.):09756                  fcb   0,0,0,0
3E02 0000             (gshell_beta5_yak.):09757                  fcb   0,0
                      (gshell_beta5_yak.):09758         
3E04 51756974         (gshell_beta5_yak.):09759                  fcc   "Quit"
3E08 0000000000000000 (gshell_beta5_yak.):09760                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3E10 000000           (gshell_beta5_yak.):09761                  fcb   NUL,NUL,NUL
3E13 01000000         (gshell_beta5_yak.):09762                  fcb   1,0,0,0
3E17 0000             (gshell_beta5_yak.):09763                  fcb   0,0
                      (gshell_beta5_yak.):09764         
                      (gshell_beta5_yak.):09765         * VIEWITEMS
                      (gshell_beta5_yak.):09766         * ITM.LRES
3E19 34307832352D34   (gshell_beta5_yak.):09767                  fcc   "40x25-4"
3E20 0000000000000000 (gshell_beta5_yak.):09768                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3E28 01000000         (gshell_beta5_yak.):09769                  fcb   1,0,0,0
3E2C 0000             (gshell_beta5_yak.):09770                  fcb   0,0
                      (gshell_beta5_yak.):09771         
3E2E 38307832352D3420 (gshell_beta5_yak.):09772                  fcc   "80x25-4 (FAT)"
     2846415429
3E3B 0000             (gshell_beta5_yak.):09773                  fcb   NUL,NUL
3E3D 01000000         (gshell_beta5_yak.):09774                  fcb   1,0,0,0
3E41 0000             (gshell_beta5_yak.):09775                  fcb   0,0
                      (gshell_beta5_yak.):09776         * 6809/6309 - could add 80x25-4 (THIN) (non-doubled up pixels - faster display, but proportions
                      (gshell_beta5_yak.):09777         * wrong
                      (gshell_beta5_yak.):09778         
3E43 34307832352D3136 (gshell_beta5_yak.):09779                  fcc   "40x25-16"
3E4B 00000000000000   (gshell_beta5_yak.):09780                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL
3E52 01000000         (gshell_beta5_yak.):09781                  fcb   1,0,0,0
3E56 0000             (gshell_beta5_yak.):09782                  fcb   0,0
                      (gshell_beta5_yak.):09783         
                      (gshell_beta5_yak.):09784         * KDMITMS
3E58 3C4B444D264C4342 (gshell_beta5_yak.):09785                  fcc   "<KDM&LCB>"
     3E
3E61 000000000000     (gshell_beta5_yak.):09786                  fcb   NUL,NUL,NUL,NUL,NUL,NUL
3E67 00000000         (gshell_beta5_yak.):09787                  fcb   0,0,0,0
3E6B 0000             (gshell_beta5_yak.):09788                  fcb   0,0
                      (gshell_beta5_yak.):09789         
3E6D 5623312E3237     (gshell_beta5_yak.):09790                  fcc   "V#1.27"
3E73 0000000000000000 (gshell_beta5_yak.):09791                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
     00
3E7C 00000000         (gshell_beta5_yak.):09792                  fcb   0,0,0,0
3E80 0000             (gshell_beta5_yak.):09793                  fcb   0,0
                      (gshell_beta5_yak.):09794         
                      (gshell_beta5_yak.):09795         * TNDYDESC
3E82 54616E6479       (gshell_beta5_yak.):09796                  fcc   "Tandy"
3E87 0000000000000000 (gshell_beta5_yak.):09797                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3E8F 0000             (gshell_beta5_yak.):09798                  fcb   NUL,NUL
3E91 14               (gshell_beta5_yak.):09799                  fcb   YID.TDY
3E92 080801           (gshell_beta5_yak.):09800                  fcb   8,8,1
3E95 0000             (gshell_beta5_yak.):09801                  fdb   $0000
3E97 0060             (gshell_beta5_yak.):09802                  fdb   TNDYITMS
                      (gshell_beta5_yak.):09803         
                      (gshell_beta5_yak.):09804         * FILSDESC
3E99 46696C6573       (gshell_beta5_yak.):09805                  fcc   "Files"
3E9E 0000000000000000 (gshell_beta5_yak.):09806                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3EA6 0000             (gshell_beta5_yak.):09807                  fcb   NUL,NUL
3EA8 17               (gshell_beta5_yak.):09808                  fcb   YID.FIL
                      (gshell_beta5_yak.):09809         * Now 10 menu items when DUMP added
3EA9 060A01           (gshell_beta5_yak.):09810                  fcb   6,10,1     6 chars wide, 10 items, 1=enabled
3EAC 0000             (gshell_beta5_yak.):09811                  fdb   $0000      Reserved
3EAE 0186             (gshell_beta5_yak.):09812                  fdb   FILSITMS   Ptr to array of menu items
                      (gshell_beta5_yak.):09813         
                      (gshell_beta5_yak.):09814         * DISKDESC
3EB0 4469736B         (gshell_beta5_yak.):09815                  fcc   "Disk"
3EB4 0000000000000000 (gshell_beta5_yak.):09816                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3EBC 000000           (gshell_beta5_yak.):09817                  fcb   NUL,NUL,NUL
3EBF 19               (gshell_beta5_yak.):09818                  fcb   YID.DSK
3EC0 0C0601           (gshell_beta5_yak.):09819                  fcb   12,6,1
3EC3 0000             (gshell_beta5_yak.):09820                  fdb   $0000
3EC5 0108             (gshell_beta5_yak.):09821                  fdb   DISKITMS
                      (gshell_beta5_yak.):09822         
                      (gshell_beta5_yak.):09823         * VIEWDESC
3EC7 56696577         (gshell_beta5_yak.):09824                  fcc   "View"
3ECB 0000000000000000 (gshell_beta5_yak.):09825                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3ED3 000000           (gshell_beta5_yak.):09826                  fcb   NUL,NUL,NUL
3ED6 18               (gshell_beta5_yak.):09827                  fcb   YID.VEW
3ED7 0D0301           (gshell_beta5_yak.):09828                  fcb   13,3,1
3EDA 0000             (gshell_beta5_yak.):09829                  fdb   $0000
3EDC 0258             (gshell_beta5_yak.):09830                  fdb   VIEWITMS
                      (gshell_beta5_yak.):09831         
                      (gshell_beta5_yak.):09832         * KDMDESC
3EDE 41626F75742E2E   (gshell_beta5_yak.):09833                  fcc   "About.."
3EE5 0000000000000000 (gshell_beta5_yak.):09834                  fcb   NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL
3EED 1A               (gshell_beta5_yak.):09835                  fcb   YID.KDM
3EEE 090201           (gshell_beta5_yak.):09836                  fcb   9,2,1
3EF1 0000             (gshell_beta5_yak.):09837                  fdb   $0000
3EF3 0297             (gshell_beta5_yak.):09838                  fdb   KDMITMS
                      (gshell_beta5_yak.):09839         
                      (gshell_beta5_yak.):09840         * SHELLNAM
3EF5 7368656C6C       (gshell_beta5_yak.):09841                  fcc   "shell"
3EFA 00               (gshell_beta5_yak.):09842                  fcb   NUL
                      (gshell_beta5_yak.):09843         
                      (gshell_beta5_yak.):09844         * LISTNAM
3EFB 6C697374         (gshell_beta5_yak.):09845                  fcc   "list"
3EFF 00               (gshell_beta5_yak.):09846                  fcb   NUL
                      (gshell_beta5_yak.):09847         
                      (gshell_beta5_yak.):09848         * GCALCNAM
3F00 6763616C63       (gshell_beta5_yak.):09849                  fcc   "gcalc"
3F05 00               (gshell_beta5_yak.):09850                  fcb   NUL
                      (gshell_beta5_yak.):09851         
                      (gshell_beta5_yak.):09852         * GCLOCKNM
3F06 67636C6F636B     (gshell_beta5_yak.):09853                  fcc   "gclock"
3F0C 00               (gshell_beta5_yak.):09854                  fcb   NUL
                      (gshell_beta5_yak.):09855         
                      (gshell_beta5_yak.):09856         * GCALNAM
3F0D 6763616C         (gshell_beta5_yak.):09857                  fcc   "gcal"
3F11 00               (gshell_beta5_yak.):09858                  fcb   NUL
                      (gshell_beta5_yak.):09859         
                      (gshell_beta5_yak.):09860         * CONTROLNM
3F12 636F6E74726F6C   (gshell_beta5_yak.):09861                  fcc   "control"
3F19 00               (gshell_beta5_yak.):09862                  fcb   NUL
                      (gshell_beta5_yak.):09863         
                      (gshell_beta5_yak.):09864         * GPRINTNM
3F1A 677072696E74     (gshell_beta5_yak.):09865                  fcc   "gprint"
3F20 00               (gshell_beta5_yak.):09866                  fcb   NUL
                      (gshell_beta5_yak.):09867         
                      (gshell_beta5_yak.):09868         * GPORTNAM
3F21 67706F7274       (gshell_beta5_yak.):09869                  fcc   "gport"
3F26 00               (gshell_beta5_yak.):09870                  fcb   NUL
                      (gshell_beta5_yak.):09871         
                      (gshell_beta5_yak.):09872         * HELPNAM
3F27 68656C70         (gshell_beta5_yak.):09873                  fcc   "help"
3F2B 00               (gshell_beta5_yak.):09874                  fcb   NUL
                      (gshell_beta5_yak.):09875         
                      (gshell_beta5_yak.):09876         * COCPRNM
3F2C 636F636F7072     (gshell_beta5_yak.):09877                  fcc   "cocopr"
3F32 00               (gshell_beta5_yak.):09878                  fcb   NUL
                      (gshell_beta5_yak.):09879                  
                      (gshell_beta5_yak.):09880         * DUMPNAM
3F33 64756D70         (gshell_beta5_yak.):09881                  fcc   "dump"
3F37 00               (gshell_beta5_yak.):09882                  fcb   NUL
                      (gshell_beta5_yak.):09883         
                      (gshell_beta5_yak.):09884         * SCRLPTRS table of pointers was here
                      (gshell_beta5_yak.):09885         
                      (gshell_beta5_yak.):09886         * DBOXDESC
3F38 0030000000380008 (gshell_beta5_yak.):09887                  fdb   48,0,56,8
3F40 04               (gshell_beta5_yak.):09888                  fcb   IC.CLOSE
3F41 00               (gshell_beta5_yak.):09889                  fcb   0
3F42 0385             (gshell_beta5_yak.):09890                  fdb   DBARDESC
3F44 0000             (gshell_beta5_yak.):09891                  fdb   $0000
                      (gshell_beta5_yak.):09892         
                      (gshell_beta5_yak.):09893         * DBARDESC
3F46 003A000002580008 (gshell_beta5_yak.):09894                  fdb   58,0,600,8
3F4E 08               (gshell_beta5_yak.):09895                  fcb   IC.DRBAR
3F4F 00               (gshell_beta5_yak.):09896                  fcb   0
3F50 0393             (gshell_beta5_yak.):09897                  fdb   QURYDESC
3F52 0000             (gshell_beta5_yak.):09898                  fdb   $0000
                      (gshell_beta5_yak.):09899         
                      (gshell_beta5_yak.):09900         * QURYDESC
3F54 02580000026F0008 (gshell_beta5_yak.):09901                  fdb   600,0,623,8
3F5C 0E               (gshell_beta5_yak.):09902                  fcb   IC.QUERY
3F5D 00               (gshell_beta5_yak.):09903                  fcb   0
3F5E 00000000         (gshell_beta5_yak.):09904                  fdb   $0000,$0000
                      (gshell_beta5_yak.):09905         
                      (gshell_beta5_yak.):09906         * TRSHDESC - moved down to make room for printer. Adjust again for Nick's new icons
3F62 0008009C002000B4 (gshell_beta5_yak.):09907                  fdb   8,156,32,180
                      (gshell_beta5_yak.):09908         * before Nick's icon changes
                      (gshell_beta5_yak.):09909         *         fdb   8,160,32,184 Was 8,144,32,168
3F6A 09               (gshell_beta5_yak.):09910                  fcb   IC.TRASH
3F6B 00               (gshell_beta5_yak.):09911                  fcb   0
3F6C 00000000         (gshell_beta5_yak.):09912                  fdb   $0000,$0000
                      (gshell_beta5_yak.):09913         
                      (gshell_beta5_yak.):09914         * PRTRDESC - NEW
3F70 0008008500200094 (gshell_beta5_yak.):09915                  fdb   8,133,32,148
3F78 0F               (gshell_beta5_yak.):09916                  fcb   IC.PRNTR
3F79 00               (gshell_beta5_yak.):09917                  fcb   0
3F7A 00000000         (gshell_beta5_yak.):09918                  fdb   $0000,$0000
                      (gshell_beta5_yak.):09919         
                      (gshell_beta5_yak.):09920         * CALCDESC
3F7E 000A             (gshell_beta5_yak.):09921                  fdb   IC.GCALC
3F80 00060014000C0001 (gshell_beta5_yak.):09922                  fdb   6,20,12,1
3F88 00000000         (gshell_beta5_yak.):09923                  fdb   0,0
3F8C 033F             (gshell_beta5_yak.):09924                  fdb   GCALCNAM
3F8E 00000000         (gshell_beta5_yak.):09925                  fdb   $0000,$0000
3F92 03D3             (gshell_beta5_yak.):09926                  fdb   CLOKDESC
                      (gshell_beta5_yak.):09927         
                      (gshell_beta5_yak.):09928         * CLOKDESC
3F94 000B             (gshell_beta5_yak.):09929                  fdb   IC.GCLOK
3F96 00060014000A0001 (gshell_beta5_yak.):09930                  fdb   6,20,10,1
3F9E 00000000         (gshell_beta5_yak.):09931                  fdb   0,0
3FA2 0345             (gshell_beta5_yak.):09932                  fdb   GCLOCKNM
3FA4 00000000         (gshell_beta5_yak.):09933                  fdb   $0000,$0000
3FA8 03E9             (gshell_beta5_yak.):09934                  fdb   CALDESC
                      (gshell_beta5_yak.):09935         
                      (gshell_beta5_yak.):09936         * CALDESC
3FAA 000C             (gshell_beta5_yak.):09937                  fdb   IC.GCAL
3FAC 0006002800190001 (gshell_beta5_yak.):09938                  fdb   6,40,25,1
3FB4 00000000         (gshell_beta5_yak.):09939                  fdb   0,0
3FB8 034C             (gshell_beta5_yak.):09940                  fdb   GCALNAM
3FBA 00000000         (gshell_beta5_yak.):09941                  fdb   $0000,$0000
3FBE 03FF             (gshell_beta5_yak.):09942                  fdb   SHELDESC
                      (gshell_beta5_yak.):09943         
                      (gshell_beta5_yak.):09944         * SHELDESC
3FC0 000D             (gshell_beta5_yak.):09945                  fdb   IC.SHELL
3FC2 0006000A00050001 (gshell_beta5_yak.):09946                  fdb   6,10,5,1
3FCA 00000000         (gshell_beta5_yak.):09947                  fdb   0,0
3FCE 0334             (gshell_beta5_yak.):09948                  fdb   SHELLNAM
3FD0 00000000         (gshell_beta5_yak.):09949                  fdb   $0000,$0000
                      (gshell_beta5_yak.):09950         
                      (gshell_beta5_yak.):09951         * ENDLINK
3FD4 0000             (gshell_beta5_yak.):09952                  fdb   $0000
                      (gshell_beta5_yak.):09953         
                      (gshell_beta5_yak.):09954         * NXTICONO
3FD6 0014             (gshell_beta5_yak.):09955                  fdb   IC.XTRNL
                      (gshell_beta5_yak.):09956         
                      (gshell_beta5_yak.):09957         * PRESSMSG
3FD8 507265737320616E (gshell_beta5_yak.):09958                  fcc   "Press any key"
     79206B6579
3FE5 00               (gshell_beta5_yak.):09959                  fcb   NUL
                      (gshell_beta5_yak.):09960         
                      (gshell_beta5_yak.):09961         * NEWNMSG
3FE6 4E6577206E616D65 (gshell_beta5_yak.):09962                  fcc   "New name:        "
     3A20202020202020
     20
3FF7 00               (gshell_beta5_yak.):09963                  fcb   NUL
                      (gshell_beta5_yak.):09964         
                      (gshell_beta5_yak.):09965         * SLASHW
3FF8 2F77             (gshell_beta5_yak.):09966                  fcc   "/w"
3FFA 00               (gshell_beta5_yak.):09967                  fcb   NUL
                      (gshell_beta5_yak.):09968         
                      (gshell_beta5_yak.):09969         * ALLOCP
3FFB 000000           (gshell_beta5_yak.):09970                  fcb   0,0,0
                      (gshell_beta5_yak.):09971         
3FFE                  (gshell_beta5_yak.):09972         DTXCOUNT       
                      (gshell_beta5_yak.):09973         
3FFE 4A85EF           (gshell_beta5_yak.):09974                  emod  
     4001             (gshell_beta5_yak.):09975         MODSIZE  equ   *
                      (gshell_beta5_yak.):09976                  end   
