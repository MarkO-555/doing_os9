                      (         fuji.asm):00001         ****************************************
                      (         fuji.asm):00002         * Sample kick application for Liber809
                      (         fuji.asm):00003         * James Wilkinson
                      (         fuji.asm):00004         * v.2 - March 28, 2012
                      (         fuji.asm):00005         ****************************************
                      (         fuji.asm):00006         
                      (         fuji.asm):00007                  nam   Fuji
                      (         fuji.asm):00008                  ttl   Fuji Demo
                      (         fuji.asm):00009         
                      (         fuji.asm):00010                  ifp1
                      (         fuji.asm):00011                  use   defsfile
                      (         defsfile):00001                   use    ../defsfile
     0001             (      ../defsfile):00001         Level    equ   1
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0018                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
0018                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
0018                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
0018                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
0018                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
0018                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
                      (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0018                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0018                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
0018                  (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0024                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0024                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0034                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0034                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0034                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0034                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0034                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
0034                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
0034                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
0034                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
0034                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
0034                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
0034                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0034                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0034                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0034                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0034                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0034                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0034                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0034                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0034                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0034                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0034                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
0034                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
0034                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
0034                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
0034                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
0034                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
0034                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0034                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0034                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0034                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0034                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0034                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0034                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0034                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0034                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
0070                  (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0080                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0080                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
                      (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
00B1                  (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
00B1                  (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
00B1                  (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
00B1                  (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
00B1                  (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
00B1                  (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
00B1                  (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
00B1                  (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
00B1                  (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
00B1                  (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
00B1                  (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
00B1                  (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
00B1                  (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
00B1                  (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
00B1                  (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
00B1                  (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
00B1                  (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0024                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0026                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
002A                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
002C                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
002E                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0030                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0032                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0034                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0036                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0038                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
003A                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
003C                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
003E                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0040                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0042                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0044                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0046                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0048                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0049                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
004B                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
004D                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
004F                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0051                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
     0053             (            os9.d):00456         D.Time         EQU       .                   Time
0053                  (            os9.d):00457         D.Year         RMB       1                   $53
0054                  (            os9.d):00458         D.Month        RMB       1                   $54
0055                  (            os9.d):00459         D.Day          RMB       1                   $55
0056                  (            os9.d):00460         D.Hour         RMB       1                   $56
0057                  (            os9.d):00461         D.Min          RMB       1                   $57
0058                  (            os9.d):00462         D.Sec          RMB       1                   $58
0059                  (            os9.d):00463         D.Tick         RMB       1                   $59
005A                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
005B                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
005C                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
005E                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0060                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0062                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0064                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0066                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0068                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
006A                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
006B                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
006D                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
006F                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0071                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0081                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0083                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0084                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0086                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0088                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0089                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
008A                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0100                  (            os9.d):00494         D.XSWI3        RMB       3
0103                  (            os9.d):00495         D.XSWI2        RMB       3
0106                  (            os9.d):00496         D.XSWI         RMB       3
0109                  (            os9.d):00497         D.XNMI         RMB       3
010C                  (            os9.d):00498         D.XIRQ         RMB       3
010F                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
     0020             (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
     0002             (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
     006E             (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0112                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0112                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0112                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0112                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
0112                  (            os9.d):00513         D.Time         EQU       .                   System Time
0112                  (            os9.d):00514         D.Year         RMB       1
0112                  (            os9.d):00515         D.Month        RMB       1
0112                  (            os9.d):00516         D.Day          RMB       1
0112                  (            os9.d):00517         D.Hour         RMB       1
0112                  (            os9.d):00518         D.Min          RMB       1
0112                  (            os9.d):00519         D.Sec          RMB       1
0112                  (            os9.d):00520         D.Tick         RMB       1
0112                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0112                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0112                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0112                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0112                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0112                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0112                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0112                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0112                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
0112                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
0112                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
0112                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
0112                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
0112                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
0112                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0112                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0112                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0112                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
0112                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
0112                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
0112                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0112                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0112                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0112                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0112                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0112                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
0112                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
0112                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
0112                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0112                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
0112                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0112                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
0112                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0112                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0112                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
                      (            os9.d):00569                        RMB       4                   reserved
0112                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
0112                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0112                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0112                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0112                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0112                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0112                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0112                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0112                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0112                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0112                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0112                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
0112                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
0112                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
0112                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
0112                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
0112                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
0112                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
0112                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
0112                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
0112                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
0112                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
0112                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
0112                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
0112                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
0112                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
0112                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
0112                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
0112                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
0112                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
0112                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
0112                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
0112                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
0112                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
0112                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
0112                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
0112                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
0112                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
0112                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
0112                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
0112                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
0112                  (            os9.d):00619         D.Clock        RMB       2
0112                  (            os9.d):00620         D.XSWI3        RMB       2
0112                  (            os9.d):00621         D.XSWI2        RMB       2
0112                  (            os9.d):00622         D.XFIRQ        RMB       2
0112                  (            os9.d):00623         D.XIRQ         RMB       2
0112                  (            os9.d):00624         D.XSWI         RMB       2
0112                  (            os9.d):00625         D.XNMI         RMB       2
0112                  (            os9.d):00626         D.ErrRst       RMB       2
0112                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
0112                  (            os9.d):00628         D.SWI3         RMB       2
0112                  (            os9.d):00629         D.SWI2         RMB       2
0112                  (            os9.d):00630         D.FIRQ         RMB       2
0112                  (            os9.d):00631         D.IRQ          RMB       2
0112                  (            os9.d):00632         D.SWI          RMB       2
0112                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
0112                  (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
0112                  (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
0112                  (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
0112                  (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
0112                  (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0000                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0000                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0002                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0004             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0025                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0025                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0025                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
     000C             (            os9.d):00820         DefIOSiz       EQU       12
     0010             (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
0000                  (            os9.d):00824         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
0007                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
0008                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
0009                  (            os9.d):00832         P$User         RMB       2                   User Index $09
000B                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
000C                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
000D                  (            os9.d):00835         P$State        RMB       1                   Status $0D
000E                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
0010                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
0011                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
0012                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
0014                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
0016                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
0018                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
001A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
0026                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
0036                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
0037                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
0039                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
003B                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
003F                  (            os9.d):00849                        RMB       $40-.               unused
     0040             (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
     0080             (            os9.d):00855         SysState       EQU       %10000000
     0040             (            os9.d):00856         TimSleep       EQU       %01000000
     0020             (            os9.d):00857         TimOut         EQU       %00100000
     0010             (            os9.d):00858         ImgChg         EQU       %00010000
     0002             (            os9.d):00859         Condem         EQU       %00000010
     0001             (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
0040                  (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
0040                  (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
0040                  (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0040                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0040                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0040                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0040                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0040                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0040                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0040                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0040                  (            os9.d):00877         P$User         RMB       2                   User Index
0040                  (            os9.d):00878         P$Prior        RMB       1                   Priority
0040                  (            os9.d):00879         P$Age          RMB       1                   Age
0040                  (            os9.d):00880         P$State        RMB       1                   Status
0040                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
0040                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0040                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0040                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0040                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0040                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0040                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0040                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
0040                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
0040                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
0040                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
                      (            os9.d):00892                        RMB       $20-.               unused
0040                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0040                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0040                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
0040                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
0040                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
0040                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
0040                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
0040                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
0040                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
0040                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
0040                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
0040                  (            os9.d):00905         P$Alarm        RMB       6
                      (            os9.d):00906                        RMB       $200-.              Local stack
0040                  (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
0040                  (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
0040                  (            os9.d):00913         SysState       EQU       %10000000
0040                  (            os9.d):00914         TimSleep       EQU       %01000000
0040                  (            os9.d):00915         TimOut         EQU       %00100000
0040                  (            os9.d):00916         ImgChg         EQU       %00010000
0040                  (            os9.d):00917         Suspend        EQU       %00001000
0040                  (            os9.d):00918         Condem         EQU       %00000010
0040                  (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
0009                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     0009             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     0009             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
     EE00             (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
     1080             (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
00FF                  (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
00FF                  (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
00FF                  (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
00FF                  (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002F                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
002F                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
002F                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
002F                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
002F                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
002F                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
002F                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0040                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0040                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0040                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0040                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0040                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0040                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
0040                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0040                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0040                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0040                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0040                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0040                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0040                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0040                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
                      (            rbf.d):00239                        RMB       32-.                Reserved
0040                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
0040                  (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
0040                  (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
0040                  (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
0040                  (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   atari.d
                      (          atari.d):00001                        ifne      ATARI.D-1
     0001             (          atari.d):00002         ATARI.D        set       1
                      (          atari.d):00003         
                      (          atari.d):00004         ********************************************************************
                      (          atari.d):00005         * AtariDefs - NitrOS-9 System Definitions for the Atari XE/XL
                      (          atari.d):00006         *
                      (          atari.d):00007         * This is a high level view of the Atari XE/XL memory map as setup by
                      (          atari.d):00008         * NitrOS-9.
                      (          atari.d):00009         *
                      (          atari.d):00010         *     $0000----> ================================== 
                      (          atari.d):00011         *               |                                  |
                      (          atari.d):00012         *               |      NitrOS-9 Globals/Stack      |
                      (          atari.d):00013         *               |                                  |
                      (          atari.d):00014         *     $0500---->|==================================|
                      (          atari.d):00015         *               |                                  |
                      (          atari.d):00016         *               |               Atari              |
                      (          atari.d):00017         *  $0500-$08BF  |           Screen Memory          |
                      (          atari.d):00018         *               |              (40x24)             |
                      (          atari.d):00019         *               |                                  |
                      (          atari.d):00020         *               |----------------------------------|
                      (          atari.d):00021         *  $08C0-$08FF  |         ANTIC Display List       |
                      (          atari.d):00022         *     $9000---->|----------------------------------|
                      (          atari.d):00023         *               |                                  |
                      (          atari.d):00024         *                 . . . . . . . . . . . . . . . . .
                      (          atari.d):00025         *               |                                  |
                      (          atari.d):00026         *               |   RAM available for allocation   |
                      (          atari.d):00027         *               |       by NitrOS-9 and Apps       |
                      (          atari.d):00028         *               |                                  |
                      (          atari.d):00029         *                 . . . . . . . . . . . . . . . . .
                      (          atari.d):00030         *               |                                  |
                      (          atari.d):00031         *     $C000---->|==================================|
                      (          atari.d):00032         *               |                                  |
                      (          atari.d):00033         *  $C000-$CFFF  |               ROM                |
                      (          atari.d):00034         *               |                                  |
                      (          atari.d):00035         *     $D000---->|==================================|
                      (          atari.d):00036         *               |                                  |
                      (          atari.d):00037         *               |   XEGS Memory Mapped I/O Region  |
                      (          atari.d):00038         *               |(may differ in location on others)|
                      (          atari.d):00039         *               |                                  |
                      (          atari.d):00040         *     $D800---->|==================================|
                      (          atari.d):00041         *               |                                  |
                      (          atari.d):00042         *  $D800-$FFFF  |               ROM                |
                      (          atari.d):00043         *               |                                  |
                      (          atari.d):00044         *               |==================================|
                      (          atari.d):00045         *
                      (          atari.d):00046         * Note that ROM above becomes RAM if booting from DriveWire.
                      (          atari.d):00047         *
                      (          atari.d):00048         * Atari Hardware is documented here:
                      (          atari.d):00049         *   http://user.xmission.com/~trevin/atari/pokey_regs.html
                      (          atari.d):00050         *
                      (          atari.d):00051         * $Id$
                      (          atari.d):00052         *
                      (          atari.d):00053         * Edt/Rev  YYYY/MM/DD  Modified by
                      (          atari.d):00054         * Comment
                      (          atari.d):00055         * ------------------------------------------------------------------
                      (          atari.d):00056         *          2012/02/23  Boisy G. Pitre
                      (          atari.d):00057         * Started
                      (          atari.d):00058         
                      (          atari.d):00059                        nam       AtariDefs
                      (          atari.d):00060                        ttl       NitrOS-9 System Definitions for the Atari XE/XL
                      (          atari.d):00061         
                      (          atari.d):00062         
                      (          atari.d):00063         
                      (          atari.d):00064         **********************************
                      (          atari.d):00065         * Power Line Frequency Definitions
                      (          atari.d):00066         *
     0001             (          atari.d):00067         Hz50           equ       1                   Assemble clock for 50 hz power
     0002             (          atari.d):00068         Hz60           equ       2                   Assemble clock for 60 hz power
                      (          atari.d):00069                        IFNDEF    PwrLnFrq
     0002             (          atari.d):00070         PwrLnFrq       set       Hz60                Set to Appropriate freq
                      (          atari.d):00071                        ENDC
                      (          atari.d):00072         
                      (          atari.d):00073         
                      (          atari.d):00074         **********************************
                      (          atari.d):00075         * Ticks per second
                      (          atari.d):00076         *
                      (          atari.d):00077                        IFNDEF    TkPerSec
                      (          atari.d):00078                        ifeq      PwrLnFrq-Hz50
0026                  (          atari.d):00079         TkPerSec       set       50
                      (          atari.d):00080                        else      
     003C             (          atari.d):00081         TkPerSec       set       60
                      (          atari.d):00082                        endc      
                      (          atari.d):00083                        ENDC
                      (          atari.d):00084         
                      (          atari.d):00085         
                      (          atari.d):00086         *************************************************
                      (          atari.d):00087         *
                      (          atari.d):00088         * NitrOS-9 Level 1 Section
                      (          atari.d):00089         *
                      (          atari.d):00090         *************************************************
                      (          atari.d):00091         
     00FF             (          atari.d):00092         HW.Page        set       $FF                 Device descriptor hardware page
                      (          atari.d):00093         
                      (          atari.d):00094         
                      (          atari.d):00095         ********************************************************************
                      (          atari.d):00096         * NitrOS-9 Memory Definitions for the Atari XE/XL
                      (          atari.d):00097         *
                      (          atari.d):00098         * The Atari's support chips have certain alignment restrictions for
                      (          atari.d):00099         * things like screen memory, display lists and character maps.  For this
                      (          atari.d):00100         * reason, we reserve some low memory for the screen.
                      (          atari.d):00101         *
                      (          atari.d):00102         * Screen memory range is $0500-$08FF (1K).  Of that, 40*24 (960) bytes
                      (          atari.d):00103         * are for the screen buffer and the remaining 64 bytes are for the
                      (          atari.d):00104         * ANTIC's Display List
     0028             (          atari.d):00105         G.Cols         equ       40
     0018             (          atari.d):00106         G.Rows         equ       24
     0500             (          atari.d):00107         G.ScrStart     equ       $0500
     08C0             (          atari.d):00108         G.ScrEnd       equ       G.ScrStart+(G.Cols*G.Rows)
                      (          atari.d):00109         
                      (          atari.d):00110         * The Character Set must be aligned to a 4K address.  We can really only
                      (          atari.d):00111         * guarnatee that in the Krn module, which is always at the end of RAM.  So
                      (          atari.d):00112         * for now, the character set is located at $F800
     F800             (          atari.d):00113         G.CharSetAddr  equ       $F800
                      (          atari.d):00114         
                      (          atari.d):00115         * POKEY requires shadow registers.  We allocate them in the kernel's DP
                      (          atari.d):00116         * (Yes, we are stealing an existing variable that is so old it should be
                      (          atari.d):00117         *  removed from os9defs)
     0002             (          atari.d):00118         D.IRQENShdw    equ       $02               ; was D.WDBtDr
     0003             (          atari.d):00119         D.SKCTLShdw    equ       $03               ; was D.SWPage
                      (          atari.d):00120         
                      (          atari.d):00121         * The clock interrupt is driven by the unmaskable NMI.  Therefore,
                      (          atari.d):00122         * the rbdw3 driver uses the DWIOSEMA flag in the D.ATARIFLAGS field as
                      (          atari.d):00123         * a signal, setting it before doing an DW operation and clearing it after.
                      (          atari.d):00124         * The clock ISR checks if this flag is set, and, if so, defers the OP_TIME
                      (          atari.d):00125         * command to the server.
     0080             (          atari.d):00126         DWIOSEMA       equ       %10000000
                      (          atari.d):00127         
                      (          atari.d):00128         
                      (          atari.d):00129         ********************************************************************
                      (          atari.d):00130         * Atari XE/XL Hardware Definitions
                      (          atari.d):00131         *
                      (          atari.d):00132         * These were lifted from the Atari OS disassembly, and represents all
                      (          atari.d):00133         * of the hardware registers available on the Atari XE/XL
                      (          atari.d):00134         *
                      (          atari.d):00135         
                      (          atari.d):00136         
                      (          atari.d):00137         *************************************************
                      (          atari.d):00138         **      CTIA/GTIA Address Equates
     D000             (          atari.d):00139         CTIA           equ       $D000               ;CTIA/GTIA area
                      (          atari.d):00140         
                      (          atari.d):00141         *       Read/Write Addresses
     D01F             (          atari.d):00142         CONSOL         equ       CTIA+$1F            ;console switches and speaker control
                      (          atari.d):00143         
                      (          atari.d):00144         *       Read Addresses
     D000             (          atari.d):00145         M0PF           equ       CTIA+$00            ;missle 0 and playfield collision
     D001             (          atari.d):00146         M1PF           equ       CTIA+$01            ;missle 1 and playfield collision
     D002             (          atari.d):00147         M2PF           equ       CTIA+$02            ;missle 2 and playfield collision
     D003             (          atari.d):00148         M3PF           equ       CTIA+$03            ;missle 3 and playfield collision
                      (          atari.d):00149         
     D004             (          atari.d):00150         P0PF           equ       CTIA+$04            ;player 0 and playfield collision
     D005             (          atari.d):00151         P1PF           equ       CTIA+$05            ;player 1 and playfield collision
     D006             (          atari.d):00152         P2PF           equ       CTIA+$06            ;player 2 and playfield collision
     D007             (          atari.d):00153         P3PF           equ       CTIA+$07            ;player 3 and playfield collision
                      (          atari.d):00154         
     D008             (          atari.d):00155         M0PL           equ       CTIA+$08            ;missle 0 and player collision
     D009             (          atari.d):00156         M1PL           equ       CTIA+$09            ;missle 1 and player collision
     D00A             (          atari.d):00157         M2PL           equ       CTIA+$0A            ;missle 2 and player collision
     D00B             (          atari.d):00158         M3PL           equ       CTIA+$0B            ;missle 3 and player collision
                      (          atari.d):00159         
     D00C             (          atari.d):00160         P0PL           equ       CTIA+$0C            ;player 0 and player collision
     D00D             (          atari.d):00161         P1PL           equ       CTIA+$0D            ;player 1 and player collision
     D00E             (          atari.d):00162         P2PL           equ       CTIA+$0E            ;player 2 and player collision
     D00F             (          atari.d):00163         P3PL           equ       CTIA+$0F            ;player 3 and player collision
                      (          atari.d):00164         
     D010             (          atari.d):00165         TRIG0          equ       CTIA+$10            ;joystick trigger 0
     D011             (          atari.d):00166         TRIG1          equ       CTIA+$11            ;joystick trigger 1
                      (          atari.d):00167         
     D012             (          atari.d):00168         TRIG2          equ       CTIA+$12            ;cartridge interlock
     D013             (          atari.d):00169         TRIG3          equ       CTIA+$13            ;ACMI module interlock
                      (          atari.d):00170         
     D014             (          atari.d):00171         PAL            equ       CTIA+$14            ;PAL/NTSC indicator
                      (          atari.d):00172         
                      (          atari.d):00173         * Write Addresses
     D000             (          atari.d):00174         HPOSP0         equ       CTIA+$00            ;player 0 horizontal position
     D001             (          atari.d):00175         HPOSP1         equ       CTIA+$01            ;player 1 horizontal position
     D002             (          atari.d):00176         HPOSP2         equ       CTIA+$02            ;player 2 horizontal position
     D003             (          atari.d):00177         HPOSP3         equ       CTIA+$03            ;player 3 horizontal position
                      (          atari.d):00178         
     D004             (          atari.d):00179         HPOSM0         equ       CTIA+$04            ;missle 0 horizontal position
     D005             (          atari.d):00180         HPOSM1         equ       CTIA+$05            ;missle 1 horizontal position
     D006             (          atari.d):00181         HPOSM2         equ       CTIA+$06            ;missle 2 horizontal position
     D007             (          atari.d):00182         HPOSM3         equ       CTIA+$07            ;missle 3 horizontal position
                      (          atari.d):00183         
     D008             (          atari.d):00184         SIZEP0         equ       CTIA+$08            ;player 0 size
     D009             (          atari.d):00185         SIZEP1         equ       CTIA+$09            ;player 1 size
     D00A             (          atari.d):00186         SIZEP2         equ       CTIA+$0A            ;player 2 size
     D00B             (          atari.d):00187         SIZEP3         equ       CTIA+$0B            ;player 3 size
                      (          atari.d):00188         
     D00C             (          atari.d):00189         SIZEM          equ       CTIA+$0C            ;missle sizes
                      (          atari.d):00190         
     D00D             (          atari.d):00191         GRAFP0         equ       CTIA+$0D            ;player 0 graphics
     D00E             (          atari.d):00192         GRAFP1         equ       CTIA+$0E            ;player 1 graphics
     D00F             (          atari.d):00193         GRAFP2         equ       CTIA+$0F            ;player 2 graphics
     D010             (          atari.d):00194         GRAFP3         equ       CTIA+$10            ;player 3 graphics
                      (          atari.d):00195         
     D011             (          atari.d):00196         GRAFM          equ       CTIA+$11            ;missle graphics
                      (          atari.d):00197         
     D012             (          atari.d):00198         COLPM0         equ       CTIA+$12            ;player-missle 0 color/luminance
     D013             (          atari.d):00199         COLPM1         equ       CTIA+$13            ;player-missle 1 color/luminance
     D014             (          atari.d):00200         COLPM2         equ       CTIA+$14            ;player-missle 2 color/luminance
     D015             (          atari.d):00201         COLPM3         equ       CTIA+$15            ;player-missle 3 color/luminance
                      (          atari.d):00202         
     D016             (          atari.d):00203         COLPF0         equ       CTIA+$16            ;playfield 0 color/luminance
     D017             (          atari.d):00204         COLPF1         equ       CTIA+$17            ;playfield 1 color/luminance
     D018             (          atari.d):00205         COLPF2         equ       CTIA+$18            ;playfield 2 color/luminance
     D019             (          atari.d):00206         COLPF3         equ       CTIA+$19            ;playfield 3 color/luminance
                      (          atari.d):00207         
     D01A             (          atari.d):00208         COLBK          equ       CTIA+$1A            ;background color/luminance
                      (          atari.d):00209         
     D01B             (          atari.d):00210         PRIOR          equ       CTIA+$1B            ;priority select
     D01C             (          atari.d):00211         VDELAY         equ       CTIA+$1C            ;vertical delay
     D01D             (          atari.d):00212         GRACTL         equ       CTIA+$1D            ;graphic control
     D01E             (          atari.d):00213         HITCLR         equ       CTIA+$1E            ;collision clear
                      (          atari.d):00214         
                      (          atari.d):00215         
                      (          atari.d):00216         *************************************************
                      (          atari.d):00217         ** POKEY Address Equates
     D200             (          atari.d):00218         POKEY          equ       $D200               ;POKEY area
                      (          atari.d):00219         
                      (          atari.d):00220         *Read Addresses
     D200             (          atari.d):00221         POT0           equ       POKEY+$00           ;potentiometer 0
     D201             (          atari.d):00222         POT1           equ       POKEY+$01           ;potentiometer 1
     D202             (          atari.d):00223         POT2           equ       POKEY+$02           ;potentiometer 2
     D203             (          atari.d):00224         POT3           equ       POKEY+$03           ;potentiometer 3
     D204             (          atari.d):00225         POT4           equ       POKEY+$04           ;potentiometer 4
     D205             (          atari.d):00226         POT5           equ       POKEY+$05           ;potentiometer 5
     D206             (          atari.d):00227         POT6           equ       POKEY+$06           ;potentiometer 6
     D207             (          atari.d):00228         POT7           equ       POKEY+$07           ;potentiometer 7
                      (          atari.d):00229         
     D208             (          atari.d):00230         ALLPOT         equ       POKEY+$08           ;potentiometer port state
     D209             (          atari.d):00231         KBCODE         equ       POKEY+$09           ;keyboard code
     D20A             (          atari.d):00232         RANDOM         equ       POKEY+$0A           ;random number generator
     D20D             (          atari.d):00233         SERIN          equ       POKEY+$0D           ;serial port input
     D20E             (          atari.d):00234         IRQST          equ       POKEY+$0E           ;IRQ interrupt status
     0080             (          atari.d):00235         IRQST.BREAKDOWN equ       %10000000
     0040             (          atari.d):00236         IRQST.KEYDOWN  equ       %01000000
     0020             (          atari.d):00237         IRQST.SERINRDY equ       %00100000
     0010             (          atari.d):00238         IRQST.SEROUTNEEDED equ       %00010000
     0008             (          atari.d):00239         IRQST.SEROUTDONE equ       %00001000
     0004             (          atari.d):00240         IRQST.TIMER4   equ       %00000100
     0002             (          atari.d):00241         IRQST.TIMER2   equ       %00000010
     0001             (          atari.d):00242         IRQST.TIMER1   equ       %00000001
                      (          atari.d):00243         
     D20F             (          atari.d):00244         SKSTAT         equ       POKEY+$0F           ;serial port and keyboard status
                      (          atari.d):00245         
                      (          atari.d):00246         * Write Addresses
     D200             (          atari.d):00247         AUDF1          equ       POKEY+$00           ;channel 1 audio frequency
     D201             (          atari.d):00248         AUDC1          equ       POKEY+$01           ;channel 1 audio control
                      (          atari.d):00249         
     D202             (          atari.d):00250         AUDF2          equ       POKEY+$02           ;channel 2 audio frequency
     D203             (          atari.d):00251         AUDC2          equ       POKEY+$03           ;channel 2 audio control
                      (          atari.d):00252         
     D204             (          atari.d):00253         AUDF3          equ       POKEY+$04           ;channel 3 audio frequency
     D205             (          atari.d):00254         AUDC3          equ       POKEY+$05           ;channel 3 audio control
                      (          atari.d):00255         
     D206             (          atari.d):00256         AUDF4          equ       POKEY+$06           ;channel 4 audio frequency
     D207             (          atari.d):00257         AUDC4          equ       POKEY+$07           ;channel 4 audio control
                      (          atari.d):00258         
     D208             (          atari.d):00259         AUDCTL         equ       POKEY+$08           ;audio control
     D209             (          atari.d):00260         STIMER         equ       POKEY+$09           ;start timers
     D20A             (          atari.d):00261         SKRES          equ       POKEY+$0A           ;reset SKSTAT status
     D20B             (          atari.d):00262         POTGO          equ       POKEY+$0B           ;start potentiometer scan sequence
     D20D             (          atari.d):00263         SEROUT         equ       POKEY+$0D           ;serial port output
     D20E             (          atari.d):00264         IRQEN          equ       POKEY+$0E           ;IRQ interrupt enable
     0080             (          atari.d):00265         IRQEN.BREAKDOWN equ       %10000000
     0040             (          atari.d):00266         IRQEN.KEYDOWN  equ       %01000000
     0020             (          atari.d):00267         IRQEN.SERINRDY equ       %00100000
     0010             (          atari.d):00268         IRQEN.SEROUTNEEDED equ       %00010000
     0008             (          atari.d):00269         IRQEN.SEROUTDONE equ       %00001000
     0004             (          atari.d):00270         IRQEN.TIMER4   equ       %00000100
     0002             (          atari.d):00271         IRQEN.TIMER2   equ       %00000010
     0001             (          atari.d):00272         IRQEN.TIMER1   equ       %00000001
                      (          atari.d):00273         
     D20F             (          atari.d):00274         SKCTL          equ       POKEY+$0F           ;serial port and keyboard control
     0080             (          atari.d):00275         SKCTL.FORECEBREAK equ       %10000000
     0070             (          atari.d):00276         SKCTL.SERMODECTRLMASK equ       %01110000
     0020             (          atari.d):00277         SKCTL.SERMODEOUT equ       %00100000
     0010             (          atari.d):00278         SKCTL.SERMODEIN  equ       %00010000
     0008             (          atari.d):00279         SKCTL.TWOTONEMODE equ       %00001000
     0004             (          atari.d):00280         SKCTL.FASTPOTSCAN equ       %00000100
     0002             (          atari.d):00281         SKCTL.KEYBRDSCAN equ       %00000010
     0001             (          atari.d):00282         SKCTL.KEYDEBOUNCE equ       %00000001
                      (          atari.d):00283         
                      (          atari.d):00284         
                      (          atari.d):00285         *************************************************
                      (          atari.d):00286         ** PIA Address Equates
     D300             (          atari.d):00287         PIA            equ       $D300               ;PIA area
                      (          atari.d):00288         
                      (          atari.d):00289         * Read/Write Addresses
     D300             (          atari.d):00290         PORTA          equ       PIA+$00             ;port A direction register or jacks 0 and 1
     D301             (          atari.d):00291         PORTB          equ       PIA+$01             ;port B direction register or memory control
                      (          atari.d):00292         
     D302             (          atari.d):00293         PACTL          equ       PIA+$02             ;port A control
     D303             (          atari.d):00294         PBCTL          equ       PIA+$03             ;port B control
                      (          atari.d):00295         
                      (          atari.d):00296         * PIA bit assignments for XEGS:
                      (          atari.d):00297         * bit 7 0 = Self-Test switched in, but only if OS Rom is also switched in
                      (          atari.d):00298         * bit 6 0 = Missile Command @ $A000 but ony if Basic Rom is switched out
                      (          atari.d):00299         * 
                      (          atari.d):00300         * bit 1 0 = Basic switched in
                      (          atari.d):00301         * bit 0 1 = OS Rom switched in, opposite behaviour for this bit vs all the others relating to Rom. 
                      (          atari.d):00302         
                      (          atari.d):00303         
                      (          atari.d):00304         *************************************************
                      (          atari.d):00305         ** ANTIC Address Equates
     D400             (          atari.d):00306         ANTIC          equ       $D400               ;ANTIC area
                      (          atari.d):00307         
                      (          atari.d):00308         * Read Addresses
     D40B             (          atari.d):00309         VCOUNT         equ       ANTIC+$0B           ;vertical line counter
     D40C             (          atari.d):00310         PENH           equ       ANTIC+$0C           ;light pen horizontal position
     D40D             (          atari.d):00311         PENV           equ       ANTIC+$0D           ;light pen vertical position
     D40F             (          atari.d):00312         NMIST          equ       ANTIC+$0F           ;NMI interrupt status
                      (          atari.d):00313         
                      (          atari.d):00314         * Write Addresses
     D400             (          atari.d):00315         DMACTL         equ       ANTIC+$00           ;DMA control
     D401             (          atari.d):00316         CHACTL         equ       ANTIC+$01           ;character control
     D402             (          atari.d):00317         DLISTL         equ       ANTIC+$02           ;low display list address
     D403             (          atari.d):00318         DLISTH         equ       ANTIC+$03           ;high disply list address
     D404             (          atari.d):00319         HSCROL         equ       ANTIC+$04           ;horizontal scroll
     D405             (          atari.d):00320         VSCROL         equ       ANTIC+$05           ;vertical scroll
     D407             (          atari.d):00321         PMBASE         equ       ANTIC+$07           ;player-missle base address
     D409             (          atari.d):00322         CHBASE         equ       ANTIC+$09           ;character base address
     D40A             (          atari.d):00323         WSYNC          equ       ANTIC+$0A           ;wait for HBLANK synchronization
     D40E             (          atari.d):00324         NMIEN          equ       ANTIC+$0E           ;NMI enable
     D40F             (          atari.d):00325         NMIRES         equ       ANTIC+$0F           ;NMI interrupt status reset
                      (          atari.d):00326         
                      (          atari.d):00327         
                      (          atari.d):00328         *************************************************
                      (          atari.d):00329         ** Display List Equates
     0080             (          atari.d):00330         ADLI           equ       $80                 ;display list interrupt
     0040             (          atari.d):00331         AVB            equ       $40                 ;vertical blank
     0040             (          atari.d):00332         ALMS           equ       $40                 ;set screen data address
     0020             (          atari.d):00333         AVSCR          equ       $20
     0010             (          atari.d):00334         AHSCR          equ       $10
     0001             (          atari.d):00335         AJMP           equ       $01                 ;jump
     0000             (          atari.d):00336         AEMPTY1        equ       $00
     0010             (          atari.d):00337         AEMPTY2        equ       $10
     0020             (          atari.d):00338         AEMPTY3        equ       $20
     0030             (          atari.d):00339         AEMPTY4        equ       $30
     0040             (          atari.d):00340         AEMPTY5        equ       $40
     0050             (          atari.d):00341         AEMPTY6        equ       $50
     0060             (          atari.d):00342         AEMPTY7        equ       $60
     0070             (          atari.d):00343         AEMPTY8        equ       $70
     0002             (          atari.d):00344         AMODE2         equ       $02
     0003             (          atari.d):00345         AMODE3         equ       $03
     0004             (          atari.d):00346         AMODE4         equ       $04
     0005             (          atari.d):00347         AMODE5         equ       $05
     0006             (          atari.d):00348         AMODE6         equ       $06
     0007             (          atari.d):00349         AMODE7         equ       $07
     0008             (          atari.d):00350         AMODE8         equ       $08
     0009             (          atari.d):00351         AMODE9         equ       $09
     000A             (          atari.d):00352         AMODEA         equ       $0A
     000B             (          atari.d):00353         AMODEB         equ       $0B
     000C             (          atari.d):00354         AMODEC         equ       $0C
     000D             (          atari.d):00355         AMODED         equ       $0D
     000E             (          atari.d):00356         AMODEE         equ       $0E
     000F             (          atari.d):00357         AMODEF         equ       $0F
                      (          atari.d):00358         
                      (          atari.d):00359                        endc      
                      (         fuji.asm):00012                     use     atari.d
                      (          atari.d):00001                        ifne      ATARI.D-1
0026                  (          atari.d):00002         ATARI.D        set       1
                      (          atari.d):00003         
                      (          atari.d):00004         ********************************************************************
                      (          atari.d):00005         * AtariDefs - NitrOS-9 System Definitions for the Atari XE/XL
                      (          atari.d):00006         *
                      (          atari.d):00007         * This is a high level view of the Atari XE/XL memory map as setup by
                      (          atari.d):00008         * NitrOS-9.
                      (          atari.d):00009         *
                      (          atari.d):00010         *     $0000----> ================================== 
                      (          atari.d):00011         *               |                                  |
                      (          atari.d):00012         *               |      NitrOS-9 Globals/Stack      |
                      (          atari.d):00013         *               |                                  |
                      (          atari.d):00014         *     $0500---->|==================================|
                      (          atari.d):00015         *               |                                  |
                      (          atari.d):00016         *               |               Atari              |
                      (          atari.d):00017         *  $0500-$08BF  |           Screen Memory          |
                      (          atari.d):00018         *               |              (40x24)             |
                      (          atari.d):00019         *               |                                  |
                      (          atari.d):00020         *               |----------------------------------|
                      (          atari.d):00021         *  $08C0-$08FF  |         ANTIC Display List       |
                      (          atari.d):00022         *     $9000---->|----------------------------------|
                      (          atari.d):00023         *               |                                  |
                      (          atari.d):00024         *                 . . . . . . . . . . . . . . . . .
                      (          atari.d):00025         *               |                                  |
                      (          atari.d):00026         *               |   RAM available for allocation   |
                      (          atari.d):00027         *               |       by NitrOS-9 and Apps       |
                      (          atari.d):00028         *               |                                  |
                      (          atari.d):00029         *                 . . . . . . . . . . . . . . . . .
                      (          atari.d):00030         *               |                                  |
                      (          atari.d):00031         *     $C000---->|==================================|
                      (          atari.d):00032         *               |                                  |
                      (          atari.d):00033         *  $C000-$CFFF  |               ROM                |
                      (          atari.d):00034         *               |                                  |
                      (          atari.d):00035         *     $D000---->|==================================|
                      (          atari.d):00036         *               |                                  |
                      (          atari.d):00037         *               |   XEGS Memory Mapped I/O Region  |
                      (          atari.d):00038         *               |(may differ in location on others)|
                      (          atari.d):00039         *               |                                  |
                      (          atari.d):00040         *     $D800---->|==================================|
                      (          atari.d):00041         *               |                                  |
                      (          atari.d):00042         *  $D800-$FFFF  |               ROM                |
                      (          atari.d):00043         *               |                                  |
                      (          atari.d):00044         *               |==================================|
                      (          atari.d):00045         *
                      (          atari.d):00046         * Note that ROM above becomes RAM if booting from DriveWire.
                      (          atari.d):00047         *
                      (          atari.d):00048         * Atari Hardware is documented here:
                      (          atari.d):00049         *   http://user.xmission.com/~trevin/atari/pokey_regs.html
                      (          atari.d):00050         *
                      (          atari.d):00051         * $Id$
                      (          atari.d):00052         *
                      (          atari.d):00053         * Edt/Rev  YYYY/MM/DD  Modified by
                      (          atari.d):00054         * Comment
                      (          atari.d):00055         * ------------------------------------------------------------------
                      (          atari.d):00056         *          2012/02/23  Boisy G. Pitre
                      (          atari.d):00057         * Started
                      (          atari.d):00058         
                      (          atari.d):00059                        nam       AtariDefs
                      (          atari.d):00060                        ttl       NitrOS-9 System Definitions for the Atari XE/XL
                      (          atari.d):00061         
                      (          atari.d):00062         
                      (          atari.d):00063         
                      (          atari.d):00064         **********************************
                      (          atari.d):00065         * Power Line Frequency Definitions
                      (          atari.d):00066         *
0026                  (          atari.d):00067         Hz50           equ       1                   Assemble clock for 50 hz power
0026                  (          atari.d):00068         Hz60           equ       2                   Assemble clock for 60 hz power
                      (          atari.d):00069                        IFNDEF    PwrLnFrq
0026                  (          atari.d):00070         PwrLnFrq       set       Hz60                Set to Appropriate freq
                      (          atari.d):00071                        ENDC
                      (          atari.d):00072         
                      (          atari.d):00073         
                      (          atari.d):00074         **********************************
                      (          atari.d):00075         * Ticks per second
                      (          atari.d):00076         *
                      (          atari.d):00077                        IFNDEF    TkPerSec
                      (          atari.d):00078                        ifeq      PwrLnFrq-Hz50
0026                  (          atari.d):00079         TkPerSec       set       50
                      (          atari.d):00080                        else      
0026                  (          atari.d):00081         TkPerSec       set       60
                      (          atari.d):00082                        endc      
                      (          atari.d):00083                        ENDC
                      (          atari.d):00084         
                      (          atari.d):00085         
                      (          atari.d):00086         *************************************************
                      (          atari.d):00087         *
                      (          atari.d):00088         * NitrOS-9 Level 1 Section
                      (          atari.d):00089         *
                      (          atari.d):00090         *************************************************
                      (          atari.d):00091         
0026                  (          atari.d):00092         HW.Page        set       $FF                 Device descriptor hardware page
                      (          atari.d):00093         
                      (          atari.d):00094         
                      (          atari.d):00095         ********************************************************************
                      (          atari.d):00096         * NitrOS-9 Memory Definitions for the Atari XE/XL
                      (          atari.d):00097         *
                      (          atari.d):00098         * The Atari's support chips have certain alignment restrictions for
                      (          atari.d):00099         * things like screen memory, display lists and character maps.  For this
                      (          atari.d):00100         * reason, we reserve some low memory for the screen.
                      (          atari.d):00101         *
                      (          atari.d):00102         * Screen memory range is $0500-$08FF (1K).  Of that, 40*24 (960) bytes
                      (          atari.d):00103         * are for the screen buffer and the remaining 64 bytes are for the
                      (          atari.d):00104         * ANTIC's Display List
0026                  (          atari.d):00105         G.Cols         equ       40
0026                  (          atari.d):00106         G.Rows         equ       24
0026                  (          atari.d):00107         G.ScrStart     equ       $0500
0026                  (          atari.d):00108         G.ScrEnd       equ       G.ScrStart+(G.Cols*G.Rows)
                      (          atari.d):00109         
                      (          atari.d):00110         * The Character Set must be aligned to a 4K address.  We can really only
                      (          atari.d):00111         * guarnatee that in the Krn module, which is always at the end of RAM.  So
                      (          atari.d):00112         * for now, the character set is located at $F800
0026                  (          atari.d):00113         G.CharSetAddr  equ       $F800
                      (          atari.d):00114         
                      (          atari.d):00115         * POKEY requires shadow registers.  We allocate them in the kernel's DP
                      (          atari.d):00116         * (Yes, we are stealing an existing variable that is so old it should be
                      (          atari.d):00117         *  removed from os9defs)
0026                  (          atari.d):00118         D.IRQENShdw    equ       $02               ; was D.WDBtDr
0026                  (          atari.d):00119         D.SKCTLShdw    equ       $03               ; was D.SWPage
                      (          atari.d):00120         
                      (          atari.d):00121         * The clock interrupt is driven by the unmaskable NMI.  Therefore,
                      (          atari.d):00122         * the rbdw3 driver uses the DWIOSEMA flag in the D.ATARIFLAGS field as
                      (          atari.d):00123         * a signal, setting it before doing an DW operation and clearing it after.
                      (          atari.d):00124         * The clock ISR checks if this flag is set, and, if so, defers the OP_TIME
                      (          atari.d):00125         * command to the server.
0026                  (          atari.d):00126         DWIOSEMA       equ       %10000000
                      (          atari.d):00127         
                      (          atari.d):00128         
                      (          atari.d):00129         ********************************************************************
                      (          atari.d):00130         * Atari XE/XL Hardware Definitions
                      (          atari.d):00131         *
                      (          atari.d):00132         * These were lifted from the Atari OS disassembly, and represents all
                      (          atari.d):00133         * of the hardware registers available on the Atari XE/XL
                      (          atari.d):00134         *
                      (          atari.d):00135         
                      (          atari.d):00136         
                      (          atari.d):00137         *************************************************
                      (          atari.d):00138         **      CTIA/GTIA Address Equates
0026                  (          atari.d):00139         CTIA           equ       $D000               ;CTIA/GTIA area
                      (          atari.d):00140         
                      (          atari.d):00141         *       Read/Write Addresses
0026                  (          atari.d):00142         CONSOL         equ       CTIA+$1F            ;console switches and speaker control
                      (          atari.d):00143         
                      (          atari.d):00144         *       Read Addresses
0026                  (          atari.d):00145         M0PF           equ       CTIA+$00            ;missle 0 and playfield collision
0026                  (          atari.d):00146         M1PF           equ       CTIA+$01            ;missle 1 and playfield collision
0026                  (          atari.d):00147         M2PF           equ       CTIA+$02            ;missle 2 and playfield collision
0026                  (          atari.d):00148         M3PF           equ       CTIA+$03            ;missle 3 and playfield collision
                      (          atari.d):00149         
0026                  (          atari.d):00150         P0PF           equ       CTIA+$04            ;player 0 and playfield collision
0026                  (          atari.d):00151         P1PF           equ       CTIA+$05            ;player 1 and playfield collision
0026                  (          atari.d):00152         P2PF           equ       CTIA+$06            ;player 2 and playfield collision
0026                  (          atari.d):00153         P3PF           equ       CTIA+$07            ;player 3 and playfield collision
                      (          atari.d):00154         
0026                  (          atari.d):00155         M0PL           equ       CTIA+$08            ;missle 0 and player collision
0026                  (          atari.d):00156         M1PL           equ       CTIA+$09            ;missle 1 and player collision
0026                  (          atari.d):00157         M2PL           equ       CTIA+$0A            ;missle 2 and player collision
0026                  (          atari.d):00158         M3PL           equ       CTIA+$0B            ;missle 3 and player collision
                      (          atari.d):00159         
0026                  (          atari.d):00160         P0PL           equ       CTIA+$0C            ;player 0 and player collision
0026                  (          atari.d):00161         P1PL           equ       CTIA+$0D            ;player 1 and player collision
0026                  (          atari.d):00162         P2PL           equ       CTIA+$0E            ;player 2 and player collision
0026                  (          atari.d):00163         P3PL           equ       CTIA+$0F            ;player 3 and player collision
                      (          atari.d):00164         
0026                  (          atari.d):00165         TRIG0          equ       CTIA+$10            ;joystick trigger 0
0026                  (          atari.d):00166         TRIG1          equ       CTIA+$11            ;joystick trigger 1
                      (          atari.d):00167         
0026                  (          atari.d):00168         TRIG2          equ       CTIA+$12            ;cartridge interlock
0026                  (          atari.d):00169         TRIG3          equ       CTIA+$13            ;ACMI module interlock
                      (          atari.d):00170         
0026                  (          atari.d):00171         PAL            equ       CTIA+$14            ;PAL/NTSC indicator
                      (          atari.d):00172         
                      (          atari.d):00173         * Write Addresses
0026                  (          atari.d):00174         HPOSP0         equ       CTIA+$00            ;player 0 horizontal position
0026                  (          atari.d):00175         HPOSP1         equ       CTIA+$01            ;player 1 horizontal position
0026                  (          atari.d):00176         HPOSP2         equ       CTIA+$02            ;player 2 horizontal position
0026                  (          atari.d):00177         HPOSP3         equ       CTIA+$03            ;player 3 horizontal position
                      (          atari.d):00178         
0026                  (          atari.d):00179         HPOSM0         equ       CTIA+$04            ;missle 0 horizontal position
0026                  (          atari.d):00180         HPOSM1         equ       CTIA+$05            ;missle 1 horizontal position
0026                  (          atari.d):00181         HPOSM2         equ       CTIA+$06            ;missle 2 horizontal position
0026                  (          atari.d):00182         HPOSM3         equ       CTIA+$07            ;missle 3 horizontal position
                      (          atari.d):00183         
0026                  (          atari.d):00184         SIZEP0         equ       CTIA+$08            ;player 0 size
0026                  (          atari.d):00185         SIZEP1         equ       CTIA+$09            ;player 1 size
0026                  (          atari.d):00186         SIZEP2         equ       CTIA+$0A            ;player 2 size
0026                  (          atari.d):00187         SIZEP3         equ       CTIA+$0B            ;player 3 size
                      (          atari.d):00188         
0026                  (          atari.d):00189         SIZEM          equ       CTIA+$0C            ;missle sizes
                      (          atari.d):00190         
0026                  (          atari.d):00191         GRAFP0         equ       CTIA+$0D            ;player 0 graphics
0026                  (          atari.d):00192         GRAFP1         equ       CTIA+$0E            ;player 1 graphics
0026                  (          atari.d):00193         GRAFP2         equ       CTIA+$0F            ;player 2 graphics
0026                  (          atari.d):00194         GRAFP3         equ       CTIA+$10            ;player 3 graphics
                      (          atari.d):00195         
0026                  (          atari.d):00196         GRAFM          equ       CTIA+$11            ;missle graphics
                      (          atari.d):00197         
0026                  (          atari.d):00198         COLPM0         equ       CTIA+$12            ;player-missle 0 color/luminance
0026                  (          atari.d):00199         COLPM1         equ       CTIA+$13            ;player-missle 1 color/luminance
0026                  (          atari.d):00200         COLPM2         equ       CTIA+$14            ;player-missle 2 color/luminance
0026                  (          atari.d):00201         COLPM3         equ       CTIA+$15            ;player-missle 3 color/luminance
                      (          atari.d):00202         
0026                  (          atari.d):00203         COLPF0         equ       CTIA+$16            ;playfield 0 color/luminance
0026                  (          atari.d):00204         COLPF1         equ       CTIA+$17            ;playfield 1 color/luminance
0026                  (          atari.d):00205         COLPF2         equ       CTIA+$18            ;playfield 2 color/luminance
0026                  (          atari.d):00206         COLPF3         equ       CTIA+$19            ;playfield 3 color/luminance
                      (          atari.d):00207         
0026                  (          atari.d):00208         COLBK          equ       CTIA+$1A            ;background color/luminance
                      (          atari.d):00209         
0026                  (          atari.d):00210         PRIOR          equ       CTIA+$1B            ;priority select
0026                  (          atari.d):00211         VDELAY         equ       CTIA+$1C            ;vertical delay
0026                  (          atari.d):00212         GRACTL         equ       CTIA+$1D            ;graphic control
0026                  (          atari.d):00213         HITCLR         equ       CTIA+$1E            ;collision clear
                      (          atari.d):00214         
                      (          atari.d):00215         
                      (          atari.d):00216         *************************************************
                      (          atari.d):00217         ** POKEY Address Equates
0026                  (          atari.d):00218         POKEY          equ       $D200               ;POKEY area
                      (          atari.d):00219         
                      (          atari.d):00220         *Read Addresses
0026                  (          atari.d):00221         POT0           equ       POKEY+$00           ;potentiometer 0
0026                  (          atari.d):00222         POT1           equ       POKEY+$01           ;potentiometer 1
0026                  (          atari.d):00223         POT2           equ       POKEY+$02           ;potentiometer 2
0026                  (          atari.d):00224         POT3           equ       POKEY+$03           ;potentiometer 3
0026                  (          atari.d):00225         POT4           equ       POKEY+$04           ;potentiometer 4
0026                  (          atari.d):00226         POT5           equ       POKEY+$05           ;potentiometer 5
0026                  (          atari.d):00227         POT6           equ       POKEY+$06           ;potentiometer 6
0026                  (          atari.d):00228         POT7           equ       POKEY+$07           ;potentiometer 7
                      (          atari.d):00229         
0026                  (          atari.d):00230         ALLPOT         equ       POKEY+$08           ;potentiometer port state
0026                  (          atari.d):00231         KBCODE         equ       POKEY+$09           ;keyboard code
0026                  (          atari.d):00232         RANDOM         equ       POKEY+$0A           ;random number generator
0026                  (          atari.d):00233         SERIN          equ       POKEY+$0D           ;serial port input
0026                  (          atari.d):00234         IRQST          equ       POKEY+$0E           ;IRQ interrupt status
0026                  (          atari.d):00235         IRQST.BREAKDOWN equ       %10000000
0026                  (          atari.d):00236         IRQST.KEYDOWN  equ       %01000000
0026                  (          atari.d):00237         IRQST.SERINRDY equ       %00100000
0026                  (          atari.d):00238         IRQST.SEROUTNEEDED equ       %00010000
0026                  (          atari.d):00239         IRQST.SEROUTDONE equ       %00001000
0026                  (          atari.d):00240         IRQST.TIMER4   equ       %00000100
0026                  (          atari.d):00241         IRQST.TIMER2   equ       %00000010
0026                  (          atari.d):00242         IRQST.TIMER1   equ       %00000001
                      (          atari.d):00243         
0026                  (          atari.d):00244         SKSTAT         equ       POKEY+$0F           ;serial port and keyboard status
                      (          atari.d):00245         
                      (          atari.d):00246         * Write Addresses
0026                  (          atari.d):00247         AUDF1          equ       POKEY+$00           ;channel 1 audio frequency
0026                  (          atari.d):00248         AUDC1          equ       POKEY+$01           ;channel 1 audio control
                      (          atari.d):00249         
0026                  (          atari.d):00250         AUDF2          equ       POKEY+$02           ;channel 2 audio frequency
0026                  (          atari.d):00251         AUDC2          equ       POKEY+$03           ;channel 2 audio control
                      (          atari.d):00252         
0026                  (          atari.d):00253         AUDF3          equ       POKEY+$04           ;channel 3 audio frequency
0026                  (          atari.d):00254         AUDC3          equ       POKEY+$05           ;channel 3 audio control
                      (          atari.d):00255         
0026                  (          atari.d):00256         AUDF4          equ       POKEY+$06           ;channel 4 audio frequency
0026                  (          atari.d):00257         AUDC4          equ       POKEY+$07           ;channel 4 audio control
                      (          atari.d):00258         
0026                  (          atari.d):00259         AUDCTL         equ       POKEY+$08           ;audio control
0026                  (          atari.d):00260         STIMER         equ       POKEY+$09           ;start timers
0026                  (          atari.d):00261         SKRES          equ       POKEY+$0A           ;reset SKSTAT status
0026                  (          atari.d):00262         POTGO          equ       POKEY+$0B           ;start potentiometer scan sequence
0026                  (          atari.d):00263         SEROUT         equ       POKEY+$0D           ;serial port output
0026                  (          atari.d):00264         IRQEN          equ       POKEY+$0E           ;IRQ interrupt enable
0026                  (          atari.d):00265         IRQEN.BREAKDOWN equ       %10000000
0026                  (          atari.d):00266         IRQEN.KEYDOWN  equ       %01000000
0026                  (          atari.d):00267         IRQEN.SERINRDY equ       %00100000
0026                  (          atari.d):00268         IRQEN.SEROUTNEEDED equ       %00010000
0026                  (          atari.d):00269         IRQEN.SEROUTDONE equ       %00001000
0026                  (          atari.d):00270         IRQEN.TIMER4   equ       %00000100
0026                  (          atari.d):00271         IRQEN.TIMER2   equ       %00000010
0026                  (          atari.d):00272         IRQEN.TIMER1   equ       %00000001
                      (          atari.d):00273         
0026                  (          atari.d):00274         SKCTL          equ       POKEY+$0F           ;serial port and keyboard control
0026                  (          atari.d):00275         SKCTL.FORECEBREAK equ       %10000000
0026                  (          atari.d):00276         SKCTL.SERMODECTRLMASK equ       %01110000
0026                  (          atari.d):00277         SKCTL.SERMODEOUT equ       %00100000
0026                  (          atari.d):00278         SKCTL.SERMODEIN  equ       %00010000
0026                  (          atari.d):00279         SKCTL.TWOTONEMODE equ       %00001000
0026                  (          atari.d):00280         SKCTL.FASTPOTSCAN equ       %00000100
0026                  (          atari.d):00281         SKCTL.KEYBRDSCAN equ       %00000010
0026                  (          atari.d):00282         SKCTL.KEYDEBOUNCE equ       %00000001
                      (          atari.d):00283         
                      (          atari.d):00284         
                      (          atari.d):00285         *************************************************
                      (          atari.d):00286         ** PIA Address Equates
0026                  (          atari.d):00287         PIA            equ       $D300               ;PIA area
                      (          atari.d):00288         
                      (          atari.d):00289         * Read/Write Addresses
0026                  (          atari.d):00290         PORTA          equ       PIA+$00             ;port A direction register or jacks 0 and 1
0026                  (          atari.d):00291         PORTB          equ       PIA+$01             ;port B direction register or memory control
                      (          atari.d):00292         
0026                  (          atari.d):00293         PACTL          equ       PIA+$02             ;port A control
0026                  (          atari.d):00294         PBCTL          equ       PIA+$03             ;port B control
                      (          atari.d):00295         
                      (          atari.d):00296         * PIA bit assignments for XEGS:
                      (          atari.d):00297         * bit 7 0 = Self-Test switched in, but only if OS Rom is also switched in
                      (          atari.d):00298         * bit 6 0 = Missile Command @ $A000 but ony if Basic Rom is switched out
                      (          atari.d):00299         * 
                      (          atari.d):00300         * bit 1 0 = Basic switched in
                      (          atari.d):00301         * bit 0 1 = OS Rom switched in, opposite behaviour for this bit vs all the others relating to Rom. 
                      (          atari.d):00302         
                      (          atari.d):00303         
                      (          atari.d):00304         *************************************************
                      (          atari.d):00305         ** ANTIC Address Equates
0026                  (          atari.d):00306         ANTIC          equ       $D400               ;ANTIC area
                      (          atari.d):00307         
                      (          atari.d):00308         * Read Addresses
0026                  (          atari.d):00309         VCOUNT         equ       ANTIC+$0B           ;vertical line counter
0026                  (          atari.d):00310         PENH           equ       ANTIC+$0C           ;light pen horizontal position
0026                  (          atari.d):00311         PENV           equ       ANTIC+$0D           ;light pen vertical position
0026                  (          atari.d):00312         NMIST          equ       ANTIC+$0F           ;NMI interrupt status
                      (          atari.d):00313         
                      (          atari.d):00314         * Write Addresses
0026                  (          atari.d):00315         DMACTL         equ       ANTIC+$00           ;DMA control
0026                  (          atari.d):00316         CHACTL         equ       ANTIC+$01           ;character control
0026                  (          atari.d):00317         DLISTL         equ       ANTIC+$02           ;low display list address
0026                  (          atari.d):00318         DLISTH         equ       ANTIC+$03           ;high disply list address
0026                  (          atari.d):00319         HSCROL         equ       ANTIC+$04           ;horizontal scroll
0026                  (          atari.d):00320         VSCROL         equ       ANTIC+$05           ;vertical scroll
0026                  (          atari.d):00321         PMBASE         equ       ANTIC+$07           ;player-missle base address
0026                  (          atari.d):00322         CHBASE         equ       ANTIC+$09           ;character base address
0026                  (          atari.d):00323         WSYNC          equ       ANTIC+$0A           ;wait for HBLANK synchronization
0026                  (          atari.d):00324         NMIEN          equ       ANTIC+$0E           ;NMI enable
0026                  (          atari.d):00325         NMIRES         equ       ANTIC+$0F           ;NMI interrupt status reset
                      (          atari.d):00326         
                      (          atari.d):00327         
                      (          atari.d):00328         *************************************************
                      (          atari.d):00329         ** Display List Equates
0026                  (          atari.d):00330         ADLI           equ       $80                 ;display list interrupt
0026                  (          atari.d):00331         AVB            equ       $40                 ;vertical blank
0026                  (          atari.d):00332         ALMS           equ       $40                 ;set screen data address
0026                  (          atari.d):00333         AVSCR          equ       $20
0026                  (          atari.d):00334         AHSCR          equ       $10
0026                  (          atari.d):00335         AJMP           equ       $01                 ;jump
0026                  (          atari.d):00336         AEMPTY1        equ       $00
0026                  (          atari.d):00337         AEMPTY2        equ       $10
0026                  (          atari.d):00338         AEMPTY3        equ       $20
0026                  (          atari.d):00339         AEMPTY4        equ       $30
0026                  (          atari.d):00340         AEMPTY5        equ       $40
0026                  (          atari.d):00341         AEMPTY6        equ       $50
0026                  (          atari.d):00342         AEMPTY7        equ       $60
0026                  (          atari.d):00343         AEMPTY8        equ       $70
0026                  (          atari.d):00344         AMODE2         equ       $02
0026                  (          atari.d):00345         AMODE3         equ       $03
0026                  (          atari.d):00346         AMODE4         equ       $04
0026                  (          atari.d):00347         AMODE5         equ       $05
0026                  (          atari.d):00348         AMODE6         equ       $06
0026                  (          atari.d):00349         AMODE7         equ       $07
0026                  (          atari.d):00350         AMODE8         equ       $08
0026                  (          atari.d):00351         AMODE9         equ       $09
0026                  (          atari.d):00352         AMODEA         equ       $0A
0026                  (          atari.d):00353         AMODEB         equ       $0B
0026                  (          atari.d):00354         AMODEC         equ       $0C
0026                  (          atari.d):00355         AMODED         equ       $0D
0026                  (          atari.d):00356         AMODEE         equ       $0E
0026                  (          atari.d):00357         AMODEF         equ       $0F
                      (          atari.d):00358         
                      (          atari.d):00359                        endc      
                      (         fuji.asm):00013                  endc
                      (         fuji.asm):00014         
     0011             (         fuji.asm):00015         tylg     set   Prgrm+Objct   
     0080             (         fuji.asm):00016         atrv     set   ReEnt+rev
     0000             (         fuji.asm):00017         rev      set   $00
     0000             (         fuji.asm):00018         edition  set   0
                      (         fuji.asm):00019         
                      (         fuji.asm):00020         * Here are some tweakable options
     0080             (         fuji.asm):00021         STACKSZ  set   128      estimated stack size in bytes
     0100             (         fuji.asm):00022         PARMSZ   set   256      estimated parameter size in bytes
                      (         fuji.asm):00023         
0000 87CD1011000D1180 (         fuji.asm):00024                  mod   eom,name,tylg,atrv,start,size
     280ED1018A
                      (         fuji.asm):00025         
     0028             (         fuji.asm):00026         GRSIZE      equ     40                  ;memory per graphics mode line
     0050             (         fuji.asm):00027         GRCOUNT     equ     80                  ;total graphics mode lines
     0028             (         fuji.asm):00028         TXTSIZE     equ     40                  ;memory per text mode line
     0004             (         fuji.asm):00029         TXTCOUNT    equ     4                   ;total lines of text
                      (         fuji.asm):00030         
     0010             (         fuji.asm):00031         CLR0        equ     $10                 ;Fuji
     000E             (         fuji.asm):00032         CLR1        equ     $0E                 ;text foreground
     0000             (         fuji.asm):00033         CLR2        equ     $00                 ;text background
                      (         fuji.asm):00034         
     0002             (         fuji.asm):00035         VOICES      equ     2                   ;number of sound channels to use
                      (         fuji.asm):00036         
                      (         fuji.asm):00037                  org   0
0000.                 (         fuji.asm):00038         CharRead  rmb  1
0001.                 (         fuji.asm):00039         OrgNMI    rmb  2
0003.                 (         fuji.asm):00040         Clr0Next  rmb   1
0004.                 (         fuji.asm):00041         SndAddrs  rmb  VOICES*2
0008.                 (         fuji.asm):00042         SndDurs   rmb  VOICES
                      (         fuji.asm):00043         * Finally the stack for any PSHS/PULS/BSR/LBSRs that we might do
000A.                 (         fuji.asm):00044                  rmb   STACKSZ+PARMSZ
     018A             (         fuji.asm):00045         size     equ   .
                      (         fuji.asm):00046         
000D 4D657267E5       (         fuji.asm):00047         name     fcs   /Merge/
0012 00               (         fuji.asm):00048                  fcb   edition    change to 6, as merge 5 has problems?
                      (         fuji.asm):00049         
                      (         fuji.asm):00050         
                      (         fuji.asm):00051         * Screen display areas
                      (         fuji.asm):00052                     use     fujimem.asm
                      (      fujimem.asm):00001         ****************************************
                      (      fujimem.asm):00002         * Sample kick application for Liber809
                      (      fujimem.asm):00003         * James Wilkinson
                      (      fujimem.asm):00004         * v.2 - March 28, 2012
                      (      fujimem.asm):00005         ****************************************
                      (      fujimem.asm):00006         
                      (      fujimem.asm):00007         ****************************************
                      (      fujimem.asm):00008         * Color table (2 bits/pixel):
                      (      fujimem.asm):00009         *       [  ] [ #] [# ] [##]
                      (      fujimem.asm):00010         * PF0    $0   $1   $4   $5
                      (      fujimem.asm):00011         * PF1    $0   $2   $8   $a
                      (      fujimem.asm):00012         * PF2    $0   $3   $c   $f
                      (      fujimem.asm):00013         
0013 0000000000000000 (      fujimem.asm):00014         FujiMem     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
003B 0000000000000000 (      fujimem.asm):00015                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
0063 0000000000000000 (      fujimem.asm):00016                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
008B 0000000000000000 (      fujimem.asm):00017                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
00B3 0000000000000000 (      fujimem.asm):00018                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
00DB 0000000000000000 (      fujimem.asm):00019                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
0103 0000000000000000 (      fujimem.asm):00020                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
012B 0000000000000000 (      fujimem.asm):00021                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
0153 0000000000000000 (      fujimem.asm):00022                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
017B 0000000000000000 (      fujimem.asm):00023                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
01A3 0000000000000000 (      fujimem.asm):00024                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
01CB 0000000000000000 (      fujimem.asm):00025                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
01F3 0000000000000000 (      fujimem.asm):00026                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
021B 0000000000000000 (      fujimem.asm):00027                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
0243 0000000000000000 (      fujimem.asm):00028                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
026B 0000000000000000 (      fujimem.asm):00029                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
0293 0000000000000000 (      fujimem.asm):00030                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
02BB 0000000000000000 (      fujimem.asm):00031                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
02E3 0000000000000000 (      fujimem.asm):00032                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
030B 0000000000000000 (      fujimem.asm):00033                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
0333 0000000000000000 (      fujimem.asm):00034                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
035B 0000000000000000 (      fujimem.asm):00035                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
0383 0000000000000000 (      fujimem.asm):00036                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
03AB 0000000000000000 (      fujimem.asm):00037                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
03D3 0000000000000000 (      fujimem.asm):00038                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
03FB 0000000000000000 (      fujimem.asm):00039                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
0423 0000000000000000 (      fujimem.asm):00040                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
044B 0000000000000000 (      fujimem.asm):00041                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000005
     5550555555550555
     5000000000000000
     0000000000000000
0473 00000000002A80AA (      fujimem.asm):00042                     fcb     $00,$00,$00,$00,$00,$2a,$80,$aa,$a0,$2a,$80,$2a,$80,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$02,$a8,$02,$a8,$02,$a8,$02,$a8,$00,$00,$00,$00,$00
     A02A802A80000005
     5550555555550555
     50000002A802A802
     A802A80000000000
049B 0000000000A000A0 (      fujimem.asm):00043                     fcb     $00,$00,$00,$00,$00,$a0,$00,$a0,$00,$a0,$a0,$a0,$a0,$00,$00,$05,$55,$50,$55,$55,$55,$55,$05,$55,$50,$00,$00,$0a,$00,$0a,$0a,$0a,$0a,$0a,$0a,$00,$00,$00,$00,$00
     00A0A0A0A0000005
     5550555555550555
     5000000A000A0A0A
     0A0A0A0000000000
04C3 0000000000AA80AA (      fujimem.asm):00044                     fcb     $00,$00,$00,$00,$00,$aa,$80,$aa,$80,$a2,$a0,$02,$80,$00,$00,$55,$55,$50,$55,$55,$55,$55,$05,$55,$55,$00,$00,$0a,$a8,$02,$a8,$0a,$2a,$02,$aa,$00,$00,$00,$00,$00
     80A2A00280000055
     5550555555550555
     5500000AA802A80A
     2A02AA0000000000
04EB 0000000000A0A000 (      fujimem.asm):00045                     fcb     $00,$00,$00,$00,$00,$a0,$a0,$00,$a0,$a8,$a0,$0a,$00,$00,$00,$55,$55,$50,$55,$55,$55,$55,$05,$55,$55,$00,$00,$0a,$0a,$0a,$0a,$0a,$8a,$00,$0a,$00,$00,$00,$00,$00
     A0A8A00A00000055
     5550555555550555
     5500000A0A0A0A0A
     8A000A0000000000
0513 0000000000A0A0A0 (      fujimem.asm):00046                     fcb     $00,$00,$00,$00,$00,$a0,$a0,$a0,$a0,$a0,$a0,$28,$00,$00,$00,$55,$55,$50,$55,$55,$55,$55,$05,$55,$55,$00,$00,$0a,$0a,$0a,$0a,$0a,$0a,$00,$28,$00,$00,$00,$00,$00
     A0A0A02800000055
     5550555555550555
     5500000A0A0A0A0A
     0A00280000000000
053B 00000000002A802A (      fujimem.asm):00047                     fcb     $00,$00,$00,$00,$00,$2a,$80,$2a,$80,$2a,$80,$aa,$a0,$00,$00,$55,$55,$50,$55,$55,$55,$55,$05,$55,$55,$00,$00,$02,$a8,$02,$a8,$02,$a8,$02,$a0,$00,$00,$00,$00,$00
     802A80AAA0000055
     5550555555550555
     55000002A802A802
     A802A00000000000
0563 0000000000000000 (      fujimem.asm):00048                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$50,$55,$55,$55,$55,$05,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000055
     5550555555550555
     5500000000000000
     0000000000000000
058B 0000000000000000 (      fujimem.asm):00049                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$50,$55,$55,$55,$55,$05,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000055
     5550555555550555
     5500000000000000
     0000000000000000
05B3 0000000000000000 (      fujimem.asm):00050                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$50,$55,$55,$55,$55,$05,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000055
     5550555555550555
     5500000000000000
     0000000000000000
05DB 0000000000000000 (      fujimem.asm):00051                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$50,$55,$55,$55,$55,$05,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000055
     5550555555550555
     5500000000000000
     0000000000000000
0603 0000000000000000 (      fujimem.asm):00052                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$50,$55,$55,$55,$55,$05,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000555
     5550555555550555
     5550000000000000
     0000000000000000
062B 0000000000000000 (      fujimem.asm):00053                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$50,$55,$55,$55,$55,$05,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000555
     5550555555550555
     5550000000000000
     0000000000000000
0653 0000000000000000 (      fujimem.asm):00054                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$50,$55,$55,$55,$55,$05,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000555
     5550555555550555
     5550000000000000
     0000000000000000
067B 0000000000000000 (      fujimem.asm):00055                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$00,$55,$55,$55,$55,$00,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000555
     5500555555550055
     5550000000000000
     0000000000000000
06A3 0000000000000000 (      fujimem.asm):00056                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$00,$55,$55,$55,$55,$00,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000555
     5500555555550055
     5550000000000000
     0000000000000000
06CB 0000000000000000 (      fujimem.asm):00057                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$00,$55,$55,$55,$55,$00,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000005555
     5500555555550055
     5555000000000000
     0000000000000000
06F3 0000000000000000 (      fujimem.asm):00058                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$00,$55,$55,$55,$55,$00,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000005555
     5500555555550055
     5555000000000000
     0000000000000000
071B 0000000000000000 (      fujimem.asm):00059                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$00,$55,$55,$55,$55,$00,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000005555
     5500555555550055
     5555000000000000
     0000000000000000
0743 0000000000000000 (      fujimem.asm):00060                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$00,$55,$55,$55,$55,$00,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000005555
     5500555555550055
     5555000000000000
     0000000000000000
076B 0000000000000000 (      fujimem.asm):00061                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$55,$00,$55,$55,$55,$55,$00,$55,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000055555
     5500555555550055
     5555500000000000
     0000000000000000
0793 0000000000000000 (      fujimem.asm):00062                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$50,$00,$55,$55,$55,$55,$00,$05,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000055555
     5000555555550005
     5555500000000000
     0000000000000000
07BB 0000000000000000 (      fujimem.asm):00063                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$50,$00,$55,$55,$55,$55,$00,$05,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000055555
     5000555555550005
     5555500000000000
     0000000000000000
07E3 0000000000000000 (      fujimem.asm):00064                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$50,$00,$55,$55,$55,$55,$00,$05,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000555555
     5000555555550005
     5555550000000000
     0000000000000000
080B 0000000000000000 (      fujimem.asm):00065                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$50,$00,$55,$55,$55,$55,$00,$05,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000555555
     5000555555550005
     5555550000000000
     0000000000000000
0833 0000000000000000 (      fujimem.asm):00066                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$50,$00,$55,$55,$55,$55,$00,$05,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000555555
     5000555555550005
     5555550000000000
     0000000000000000
085B 0000000000000000 (      fujimem.asm):00067                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$55,$00,$00,$55,$55,$55,$55,$00,$00,$55,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000005555555
     0000555555550000
     5555555000000000
     0000000000000000
0883 0000000000000000 (      fujimem.asm):00068                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$55,$00,$00,$55,$55,$55,$55,$00,$00,$55,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000005555555
     0000555555550000
     5555555000000000
     0000000000000000
08AB 0000000000000000 (      fujimem.asm):00069                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$55,$55,$55,$55,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000055555555
     0000555555550000
     5555555500000000
     0000000000000000
08D3 0000000000000000 (      fujimem.asm):00070                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$55,$55,$55,$55,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000055555555
     0000555555550000
     5555555500000000
     0000000000000000
08FB 0000000000000000 (      fujimem.asm):00071                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$55,$50,$00,$00,$55,$55,$55,$55,$00,$00,$05,$55,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000555555550
     0000555555550000
     0555555550000000
     0000000000000000
0923 0000000000000000 (      fujimem.asm):00072                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$55,$50,$00,$00,$55,$55,$55,$55,$00,$00,$05,$55,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000555555550
     0000555555550000
     0555555550000000
     0000000000000000
094B 0000000000000000 (      fujimem.asm):00073                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$50,$00,$00,$55,$55,$55,$55,$00,$00,$05,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000005555555550
     0000555555550000
     0555555555000000
     0000000000000000
0973 0000000000000000 (      fujimem.asm):00074                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$55,$55,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$55,$55,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000055555555500
     0000555555550000
     0055555555500000
     0000000000000000
099B 0000000000000000 (      fujimem.asm):00075                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$55,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000555555555500
     0000555555550000
     0055555555550000
     0000000000000000
09C3 0000000000000000 (      fujimem.asm):00076                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$55,$55,$55,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$55,$55,$55,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0005555555555500
     0000555555550000
     0055555555555000
     0000000000000000
09EB 0000000000000000 (      fujimem.asm):00077                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$55,$55,$55,$50,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$05,$55,$55,$55,$55,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00
     0555555555555000
     0000555555550000
     0005555555555550
     0000000000000000
0A13 0000000000000055 (      fujimem.asm):00078                     fcb     $00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$55,$55,$55,$50,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$05,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00
     5555555555555000
     0000555555550000
     0005555555555555
     5500000000000000
0A3B 0000000000000055 (      fujimem.asm):00079                     fcb     $00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00
     5555555555550000
     0000555555550000
     0000555555555555
     5500000000000000
0A63 0000000000000055 (      fujimem.asm):00080                     fcb     $00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$55,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00
     5555555555550000
     0000555555550000
     0000555555555555
     5500000000000000
0A8B 0000000000000055 (      fujimem.asm):00081                     fcb     $00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$55,$55,$50,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$05,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00
     5555555555500000
     0000555555550000
     0000055555555555
     5500000000000000
0AB3 0000000000000055 (      fujimem.asm):00082                     fcb     $00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$55,$55,$50,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$05,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00
     5555555555500000
     0000555555550000
     0000055555555555
     5500000000000000
0ADB 0000000000000055 (      fujimem.asm):00083                     fcb     $00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$00,$55,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00
     5555555555000000
     0000555555550000
     0000005555555555
     5500000000000000
0B03 0000000000000055 (      fujimem.asm):00084                     fcb     $00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$55,$50,$00,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$00,$05,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00
     5555555550000000
     0000555555550000
     0000000555555555
     5500000000000000
0B2B 0000000000000055 (      fujimem.asm):00085                     fcb     $00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00
     5555555500000000
     0000555555550000
     0000000055555555
     5500000000000000
0B53 0000000000000055 (      fujimem.asm):00086                     fcb     $00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$50,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$05,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00
     5555555000000000
     0000555555550000
     0000000005555555
     5500000000000000
0B7B 0000000000000055 (      fujimem.asm):00087                     fcb     $00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00
     5555550000000000
     0000555555550000
     0000000000555555
     5500000000000000
0BA3 0000000000000055 (      fujimem.asm):00088                     fcb     $00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00
     5555000000000000
     0000555555550000
     0000000000005555
     5500000000000000
0BCB 0000000000000055 (      fujimem.asm):00089                     fcb     $00,$00,$00,$00,$00,$00,$00,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$00,$00,$00,$00,$00,$00,$00
     5500000000000000
     0000555555550000
     0000000000000055
     5500000000000000
0BF3 0000000000000000 (      fujimem.asm):00090                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
0C1B 0000000000000000 (      fujimem.asm):00091                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
0C43 0000000000000000 (      fujimem.asm):00092                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
0C6B 0000000000000000 (      fujimem.asm):00093                     fcb     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
                      (      fujimem.asm):00094         
                      (      fujimem.asm):00095         * Text display area
0C93 20202020204C6962 (      fujimem.asm):00096         FujiTxt1    fcc     "     Liber809 Hardware and Firmware     "
     6572383039204861
     7264776172652061
     6E64204669726D77
     6172652020202020
0CBB 2020202020202020 (      fujimem.asm):00097                     fcc     "          (C) Boisy Pitre 2012          "
     202028432920426F
     6973792050697472
     6520323031322020
     2020202020202020
0CE3 2020202020202020 (      fujimem.asm):00098         FujiTxt2    fcc     "           Fuji Demo by Slor            "
     20202046756A6920
     44656D6F20627920
     536C6F7220202020
     2020202020202020
0D0B 2020202020206874 (      fujimem.asm):00099                     fcc     "      http://liber809.blogspot.com      "
     74703A2F2F6C6962
     65723830392E626C
     6F6773706F742E63
     6F6D202020202020
                      (         fuji.asm):00053         
                      (         fuji.asm):00054         * Music data
                      (         fuji.asm):00055                     use     fujitune.asm
                      (     fujitune.asm):00001         ****************************************
                      (     fujitune.asm):00002         * Sample kick application for Liber809
                      (     fujitune.asm):00003         * James Wilkinson
                      (     fujitune.asm):00004         * v.2 - March 28, 2012
                      (     fujitune.asm):00005         ****************************************
                      (     fujitune.asm):00006         
                      (     fujitune.asm):00007         * Note periods
     00FF             (     fujitune.asm):00008         B4          equ     255
     00F3             (     fujitune.asm):00009         C5          equ     243
     00E6             (     fujitune.asm):00010         C5S         equ     230
     00D9             (     fujitune.asm):00011         D5          equ     217
     00CC             (     fujitune.asm):00012         D5S         equ     204
     00C1             (     fujitune.asm):00013         E5          equ     193
     00B6             (     fujitune.asm):00014         F5          equ     182
     00AD             (     fujitune.asm):00015         F5S         equ     173
     00A2             (     fujitune.asm):00016         G5          equ     162
     0099             (     fujitune.asm):00017         G5S         equ     153
     0090             (     fujitune.asm):00018         A5          equ     144
     0088             (     fujitune.asm):00019         A5S         equ     136
     0080             (     fujitune.asm):00020         B5          equ     128
     0079             (     fujitune.asm):00021         C6          equ     121
     0072             (     fujitune.asm):00022         C6S         equ     114
     006C             (     fujitune.asm):00023         D6          equ     108
     0066             (     fujitune.asm):00024         D6S         equ     102
     0060             (     fujitune.asm):00025         E6          equ     96
     005B             (     fujitune.asm):00026         F6          equ     91
     0055             (     fujitune.asm):00027         F6S         equ     85
     0051             (     fujitune.asm):00028         G6          equ     81
     004C             (     fujitune.asm):00029         G6S         equ     76
     0048             (     fujitune.asm):00030         A6          equ     72
     0044             (     fujitune.asm):00031         A6S         equ     68
     0040             (     fujitune.asm):00032         B6          equ     64
     003C             (     fujitune.asm):00033         C7          equ     60
     0039             (     fujitune.asm):00034         C7S         equ     57
     0035             (     fujitune.asm):00035         D7          equ     53
     0032             (     fujitune.asm):00036         D7S         equ     50
     002F             (     fujitune.asm):00037         E7          equ     47
     002D             (     fujitune.asm):00038         F7          equ     45
     002A             (     fujitune.asm):00039         F7S         equ     42
     0028             (     fujitune.asm):00040         G7          equ     40
     0025             (     fujitune.asm):00041         G7S         equ     37
     0023             (     fujitune.asm):00042         A7          equ     35
     0021             (     fujitune.asm):00043         A7S         equ     33
     001F             (     fujitune.asm):00044         B7          equ     31
     001D             (     fujitune.asm):00045         C8          equ     29
     001B             (     fujitune.asm):00046         C8S         equ     27
     001A             (     fujitune.asm):00047         D8          equ     26
     0018             (     fujitune.asm):00048         D8S         equ     24
     0017             (     fujitune.asm):00049         E8          equ     23
     0016             (     fujitune.asm):00050         F8          equ     22
     0015             (     fujitune.asm):00051         F8S         equ     21
     0013             (     fujitune.asm):00052         G8          equ     19
     0012             (     fujitune.asm):00053         G8S         equ     18
     0011             (     fujitune.asm):00054         A8          equ     17
     0010             (     fujitune.asm):00055         A8S         equ     16
     000F             (     fujitune.asm):00056         B8          equ     15
     000E             (     fujitune.asm):00057         C9          equ     14
                      (     fujitune.asm):00058         
                      (     fujitune.asm):00059         * Note volume levels
     0001             (     fujitune.asm):00060         VOL03       equ     1
     0001             (     fujitune.asm):00061         VOL05       equ     1
     0003             (     fujitune.asm):00062         VOL10       equ     3
     0007             (     fujitune.asm):00063         VOL20       equ     7
     000A             (     fujitune.asm):00064         VOL40       equ     10
     000D             (     fujitune.asm):00065         VOL52       equ     13
     000F             (     fujitune.asm):00066         VOL64       equ     15
                      (     fujitune.asm):00067         
                      (     fujitune.asm):00068         * Note durations
     0004             (     fujitune.asm):00069         DUR01       equ     4
     000C             (     fujitune.asm):00070         DUR03       equ     DUR01*3
     001C             (     fujitune.asm):00071         DUR07       equ     DUR01*7
     002C             (     fujitune.asm):00072         DUR11       equ     DUR01*11
                      (     fujitune.asm):00073         
                      (     fujitune.asm):00074         ****************************************
                      (     fujitune.asm):00075         * Track for each voice, in triplets of
                      (     fujitune.asm):00076         * period, volume, and duration
                      (     fujitune.asm):00077         
0D33 5B0A04790104600A (     fujitune.asm):00078         Track0      fcb     F6,VOL40,DUR01,C6,VOL05,DUR01,E6,VOL40,DUR01,G5,VOL03,DUR01,C6,VOL40,DUR01,F6,VOL05,DUR01,D6,VOL40,DUR01,E6,VOL05,DUR01
     04A20104790A045B
     01046C0A04600104
0D4B 5B0A04790104600A (     fujitune.asm):00079                     fcb     F6,VOL40,DUR01,C6,VOL03,DUR01,E6,VOL40,DUR01,D6,VOL05,DUR01,C6,VOL40,DUR01,F6,VOL05,DUR01,G5,VOL40,DUR01,E6,VOL05,DUR01
     046C0104790A045B
     0104A20A04600104
0D63 5B0A04790104600A (     fujitune.asm):00080                     fcb     F6,VOL40,DUR01,C6,VOL05,DUR01,E6,VOL40,DUR01,G5,VOL03,DUR01,C6,VOL40,DUR01,F6,VOL05,DUR01,D6,VOL40,DUR01,E6,VOL05,DUR01
     04A20104790A045B
     01046C0A04600104
0D7B 5B0A04790104600A (     fujitune.asm):00081                     fcb     F6,VOL40,DUR01,C6,VOL03,DUR01,E6,VOL40,DUR01,D6,VOL05,DUR01,C6,VOL40,DUR01,F6,VOL05,DUR01,G5,VOL40,DUR01,E6,VOL05,DUR01
     046C0104790A045B
     0104A20A04600104
0D93 5B0A04790104600A (     fujitune.asm):00082                     fcb     F6,VOL40,DUR01,C6,VOL05,DUR01,E6,VOL40,DUR01,G5,VOL03,DUR01,C6,VOL40,DUR01,F6,VOL05,DUR01,D6,VOL40,DUR01,E6,VOL05,DUR01
     04A20104790A045B
     01046C0A04600104
0DAB 5B0A04790104600A (     fujitune.asm):00083                     fcb     F6,VOL40,DUR01,C6,VOL03,DUR01,E6,VOL40,DUR01,D6,VOL05,DUR01,C6,VOL40,DUR01,F6,VOL05,DUR01,G5,VOL40,DUR01,E6,VOL05,DUR01
     046C0104790A045B
     0104A20A04600104
0DC3 5B0A04790104600A (     fujitune.asm):00084                     fcb     F6,VOL40,DUR01,C6,VOL05,DUR01,E6,VOL40,DUR01,G5,VOL03,DUR01,C6,VOL40,DUR01,F6,VOL05,DUR01,D6,VOL40,DUR01,E6,VOL05,DUR01
     04A20104790A045B
     01046C0A04600104
0DDB 5B0A04790104600A (     fujitune.asm):00085                     fcb     F6,VOL40,DUR01,C6,VOL03,DUR01,E6,VOL40,DUR01,D6,VOL05,DUR01,C6,VOL40,DUR01,F6,VOL05,DUR01,G5,VOL40,DUR01,E6,VOL05,DUR01
     046C0104790A045B
     0104A20A04600104
0DF3 000000           (     fujitune.asm):00086                     fcb     0,0,0
0DF6 D90A0400000CF307 (     fujitune.asm):00087         Track1      fcb     D5,VOL40,DUR01,0,0,DUR03,C5,VOL20,DUR01,0,0,DUR01,D5,VOL40,DUR01,0,0,DUR01,D5,VOL20,DUR01,0,0,DUR01,C5,VOL40,DUR01,0,0,DUR01,C5,VOL40,DUR01,0,0,DUR01,D5,VOL40,DUR01,0,0,DUR01
     04000004D90A0400
     0004D90704000004
     F30A04000004F30A
     04000004D90A0400
     0004
0E20 F30A04000004F307 (     fujitune.asm):00088                     fcb     C5,VOL40,DUR01,0,0,DUR01,C5,VOL20,DUR01,0,0,DUR01,D5,VOL10,DUR01,0,0,DUR11
     04000004D9030400
     002C
0E32 F30A0400000CD907 (     fujitune.asm):00089                     fcb     C5,VOL40,DUR01,0,0,DUR03,D5,VOL20,DUR01,0,0,DUR01,C5,VOL40,DUR01,0,0,DUR01,C5,VOL20,DUR01,0,0,DUR01,C5,VOL40,DUR01,0,0,DUR01,C5,VOL10,DUR01,0,0,DUR01,C5,VOL40,DUR01,0,0,DUR01
     04000004F30A0400
     0004F30704000004
     F30A04000004F303
     04000004F30A0400
     0004
0E5C F30A0400000CF307 (     fujitune.asm):00090                     fcb     C5,VOL40,DUR01,0,0,DUR03,C5,VOL20,DUR01,0,0,DUR03,C5,VOL40,DUR01,0,0,DUR07
     0400000CF30A0400
     001C
0E6E 000000           (     fujitune.asm):00091                     fcb     0,0,0
                      (         fuji.asm):00056         
                      (         fuji.asm):00057         
                      (         fuji.asm):00058         * Custom display list:
                      (         fuji.asm):00059         * - 3 empty mode lines, to prevent overscan
                      (         fuji.asm):00060         * - 2 mode lines of ANTIC mode $2 (text)
                      (         fuji.asm):00061         * - 80 mode lines of ANTIC mode $D (graphics) with display list interrupts
                      (         fuji.asm):00062         * - 2 mode lines of ANTIC mode $2 (text)
0E71 707070           (         fuji.asm):00063         DList       fcb     AEMPTY8,AEMPTY8,AEMPTY8
0E74 42               (         fuji.asm):00064                     fcb     ALMS+AMODE2
0E75 930C             (         fuji.asm):00065         DListT1     fdbs    FujiTxt1
0E77 02               (         fuji.asm):00066                     fcb     AMODE2
0E78 CD               (         fuji.asm):00067                     fcb     ALMS+ADLI+AMODED
0E79 1300             (         fuji.asm):00068         DListM      fdbs    FujiMem
0E7B 8D8D8D8D8D8D8D8D (         fuji.asm):00069                     fill    ADLI+AMODED,$4e
     8D8D8D8D8D8D8D8D
     8D8D8D8D8D8D8D8D
     8D8D8D8D8D8D8D8D
     8D8D8D8D8D8D8D8D
     8D8D8D8D8D8D8D8D
     8D8D8D8D8D8D8D8D
     8D8D8D8D8D8D8D8D
     8D8D8D8D8D8D8D8D
     8D8D8D8D8D8D
0EC9 0D               (         fuji.asm):00070                     fcb     AMODED
0ECA 42               (         fuji.asm):00071                     fcb     ALMS+AMODE2
0ECB E30C             (         fuji.asm):00072         DListT2     fdbs    FujiTxt2
0ECD 02               (         fuji.asm):00073                     fcb     AMODE2
0ECE 41               (         fuji.asm):00074                     fcb     AVB+AJMP
0ECF 710E             (         fuji.asm):00075         DListPtr    fdbs    DList
                      (         fuji.asm):00076         
                      (         fuji.asm):00077         ****************************************
                      (         fuji.asm):00078         * Main entry point
                      (         fuji.asm):00079         
     0ED1             (         fuji.asm):00080         start       equ     *
                      (         fuji.asm):00081         * Initialize POKEY sound
0ED1 8603             (         fuji.asm):00082         InitPokey   lda     #$03          
0ED3 B7D20F           (         fuji.asm):00083                     sta     SKCTL               ;set POKEY 2-tone mode
0ED6 8600             (         fuji.asm):00084                     lda     #$00          
0ED8 B7D208           (         fuji.asm):00085                     sta     AUDCTL              ;set POKEY clock base to 15 KHz
0EDB 170084           (         fuji.asm):00086                     lbsr    InitSnd
                      (         fuji.asm):00087         
                      (         fuji.asm):00088         * Initialize GTIA color registers
0EDE 8610             (         fuji.asm):00089         InitClr     lda     #CLR0
0EE0 B7D016           (         fuji.asm):00090                     sta     COLPF0
0EE3 860E             (         fuji.asm):00091                     lda     #CLR1
0EE5 B7D017           (         fuji.asm):00092                     sta     COLPF1
0EE8 8600             (         fuji.asm):00093                     lda     #CLR2
0EEA B7D018           (         fuji.asm):00094                     sta     COLPF2
                      (         fuji.asm):00095         
                      (         fuji.asm):00096         * Convert static text, using simplified conversion to ANTIC screen characters
0EED 308DFDA2         (         fuji.asm):00097         InitTxt     leax    FujiTxt1,pcr
0EF1 108E00A0         (         fuji.asm):00098                     ldy     #TXTSIZE*TXTCOUNT
0EF5 A684             (         fuji.asm):00099         loop@       lda     ,x
0EF7 8020             (         fuji.asm):00100                     suba    #$20
0EF9 A780             (         fuji.asm):00101                     sta     ,x+
0EFB 313F             (         fuji.asm):00102                     leay    -1,y
0EFD 26F6             (         fuji.asm):00103                     bne     loop@
                      (         fuji.asm):00104         
                      (         fuji.asm):00105         * Set up custom display list
0EFF 308DFF6E         (         fuji.asm):00106         InitDL      leax    DList,pcr
0F03 1F10             (         fuji.asm):00107                     tfr     x,d
0F05 1E89             (         fuji.asm):00108                     exg     a,b
0F07 FDD402           (         fuji.asm):00109                     std     DLISTL              ;point ANTIC to custom display list
0F0A ED8CC2           (         fuji.asm):00110                     std     DListPtr,pcr
                      (         fuji.asm):00111         
0F0D 308DFD82         (         fuji.asm):00112                     leax    FujiTxt1,pcr
0F11 1F10             (         fuji.asm):00113                     tfr     x,d
0F13 1E89             (         fuji.asm):00114                     exg     a,b
0F15 ED8DFF5C         (         fuji.asm):00115                     std     DListT1,pcr
                      (         fuji.asm):00116         
0F19 308DF0F6         (         fuji.asm):00117                     leax    FujiMem,pcr
0F1D 1F10             (         fuji.asm):00118                     tfr     x,d
0F1F 1E89             (         fuji.asm):00119                     exg     a,b
0F21 ED8DFF54         (         fuji.asm):00120                     std     DListM,pcr
                      (         fuji.asm):00121         
0F25 308DFDBA         (         fuji.asm):00122                     leax    FujiTxt2,pcr
0F29 1F10             (         fuji.asm):00123                     tfr     x,d
0F2B 1E89             (         fuji.asm):00124                     exg     a,b
0F2D ED8C9B           (         fuji.asm):00125                     std     DListT2,pcr
                      (         fuji.asm):00126         
                      (         fuji.asm):00127         * Set up and enable non-maskable interrupt
0F30 308D0040         (         fuji.asm):00128         InitNMI     leax    NMIVect,pcr
0F34 10BEFFFC         (         fuji.asm):00129                     ldy     $FFFC
0F38 10AF41           (         fuji.asm):00130                     sty     OrgNMI,u
0F3B BFFFFC           (         fuji.asm):00131                     stx     $FFFC               ;point 6809 to custom interrupt vector
0F3E 86C0             (         fuji.asm):00132                     lda     #$C0                
0F40 B7D40E           (         fuji.asm):00133                     sta     NMIEN               ;enable both display list and vertical blank interrupts
                      (         fuji.asm):00134         
                      (         fuji.asm):00135         * Read one character
0F43 4F               (         fuji.asm):00136                     clra
0F44 108E0001         (         fuji.asm):00137                     ldy     #$0001
0F48 30C4             (         fuji.asm):00138                     leax    CharRead,u
0F4A 103F89           (         fuji.asm):00139                     os9     I$Read
                      (         fuji.asm):00140                   
                      (         fuji.asm):00141         * Now awake, time to quit
0F4D 8600             (         fuji.asm):00142                     lda     #$00
0F4F B7D40E           (         fuji.asm):00143                     sta     NMIEN
0F52 10AE41           (         fuji.asm):00144                     ldy     OrgNMI,u
0F55 109F36           (         fuji.asm):00145                     sty     D.NMI
0F58 CC00F8           (         fuji.asm):00146                     ldd     #$00F8
0F5B FDD402           (         fuji.asm):00147                     std     DLISTL
                      (         fuji.asm):00148         
0F5E 5F               (         fuji.asm):00149                     clrb
0F5F 103F06           (         fuji.asm):00150                     os9     F$Exit
                      (         fuji.asm):00151         
                      (         fuji.asm):00152         * Initialize sound pointers
0F62                  (         fuji.asm):00153         InitSnd
0F62 8E0004           (         fuji.asm):00154                     ldx     #SndAddrs
0F65 318DFDCA         (         fuji.asm):00155                     leay    Track0,pcr          ;initialize pointer to track 0
0F69 10AF81           (         fuji.asm):00156                     sty     ,x++
0F6C 318DFE86         (         fuji.asm):00157                     leay    Track1,pcr          ;initialize pointer to track 1
0F70 10AF84           (         fuji.asm):00158                     sty     ,x  
0F73 39               (         fuji.asm):00159                     rts
                      (         fuji.asm):00160         
                      (         fuji.asm):00161         * Single vector to handle all non-maskable interrupts
0F74 3436             (         fuji.asm):00162         NMIVect     pshs    d,x,y               ;save register used during interrupt
0F76 B6D40F           (         fuji.asm):00163                     lda     NMIST
0F79 8480             (         fuji.asm):00164         DLITest@    anda    #%10000000          ;was interrupt generated by display list?
0F7B 2702             (         fuji.asm):00165                     beq     VBITest@
0F7D 8D0C             (         fuji.asm):00166                     bsr     DLIVect             ;if so, run DLI routine
0F7F B6D40F           (         fuji.asm):00167         VBITest@    lda     NMIST
0F82 8440             (         fuji.asm):00168                     anda    #%01000000          ;was interrupt generated by vertical blank?
0F84 2702             (         fuji.asm):00169                     beq     done@
0F86 8D16             (         fuji.asm):00170                     bsr     VBIVect             ;if so, run VBI routine
0F88 3536             (         fuji.asm):00171         done@       puls    d,x,y               ;restore register
0F8A 3B               (         fuji.asm):00172                     rti
                      (         fuji.asm):00173         
0F8B A643             (         fuji.asm):00174         DLIVect     lda     Clr0Next,u          ;get color for next mode line
0F8D 8B02             (         fuji.asm):00175                     adda    #2                  ;adjust for rainbow effect
0F8F 8110             (         fuji.asm):00176                     cmpa    #CLR0               ;skip grey tones
0F91 2202             (         fuji.asm):00177                     bhi     dcycle@
0F93 8B10             (         fuji.asm):00178                     adda    #CLR0
0F95 A743             (         fuji.asm):00179         dcycle@     sta     Clr0Next,u          ;save shadow for next interrupt
0F97 B7D40A           (         fuji.asm):00180                     sta     WSYNC               ;wait for horizontal sync
0F9A B7D016           (         fuji.asm):00181                     sta     COLPF0              ;update GTIA color register
0F9D 39               (         fuji.asm):00182                     rts
                      (         fuji.asm):00183         
0F9E 8D0F             (         fuji.asm):00184         VBIVect     bsr     SndVect
0FA0 A643             (         fuji.asm):00185                     lda     Clr0Next,u          ;get color for next mode line
0FA2 81AF             (         fuji.asm):00186                     cmpa    #$af                ;adjust for skipped grey tones
0FA4 2202             (         fuji.asm):00187                     bhi     vcycle@
0FA6 8010             (         fuji.asm):00188                     suba    #CLR0
0FA8 80A1             (         fuji.asm):00189         vcycle@     suba    #$a1                ;reset color for top line of Fuji
0FAA A743             (         fuji.asm):00190                     sta     Clr0Next,u          ;save shadow
0FAC 8DDD             (         fuji.asm):00191                     bsr     DLIVect             ;chain to DLI routine
0FAE 39               (         fuji.asm):00192                     rts
                      (         fuji.asm):00193         
0FAF CC0000           (         fuji.asm):00194         SndVect     ldd     #$0000        
0FB2 1F01             (         fuji.asm):00195                     tfr     d,x                 ;start with voice #0
0FB4 39               (         fuji.asm):00196          rts
                      (         fuji.asm):00197          
0FB5 A608             (         fuji.asm):00198         PlayVoice   lda     SndDurs,x  
0FB7 264B             (         fuji.asm):00199                     bne     UpdateDur           ;skip work if same note keeps playing
                      (         fuji.asm):00200         
0FB9 1F10             (         fuji.asm):00201         LoadNote    tfr     x,d
0FBB 58               (         fuji.asm):00202                     lslb
0FBC 1F01             (         fuji.asm):00203                     tfr     d,x
0FBE 10AE04           (         fuji.asm):00204                     ldy     SndAddrs,x          ;load from word offset for current note
0FC1 54               (         fuji.asm):00205                     lsrb
0FC2 1F01             (         fuji.asm):00206                     tfr     d,x
0FC4 3122             (         fuji.asm):00207                     leay    2,y                 
0FC6 A6A4             (         fuji.asm):00208                     lda     ,y
0FC8 A708             (         fuji.asm):00209                     sta     SndDurs,x           ;save duration
0FCA AAA4             (         fuji.asm):00210                     ora     ,y
0FCC 2608             (         fuji.asm):00211                     bne     PlayNote
0FCE 3410             (         fuji.asm):00212                     pshs    x
0FD0 8D90             (         fuji.asm):00213                     bsr     InitSnd             ;loop back to beginning at end of tune
0FD2 3510             (         fuji.asm):00214                     puls    x
0FD4 20E3             (         fuji.asm):00215                     bra     LoadNote
                      (         fuji.asm):00216         
0FD6 313E             (         fuji.asm):00217         PlayNote    leay    -2,y
0FD8 A6A0             (         fuji.asm):00218                     lda     ,y+
0FDA 3402             (         fuji.asm):00219                     pshs    a                   ;save frequency
0FDC A6A4             (         fuji.asm):00220                     lda     ,y
0FDE 3402             (         fuji.asm):00221                     pshs    a                   ;save volume
0FE0 1F10             (         fuji.asm):00222                     tfr     x,d          
0FE2 58               (         fuji.asm):00223                     lslb                 
0FE3 1F02             (         fuji.asm):00224                     tfr     d,y                 ;y = x * 2
0FE5 3502             (         fuji.asm):00225                     puls    a                   ;restore volume
0FE7 8BA0             (         fuji.asm):00226                     adda    #$a0
0FE9 A7A9D201         (         fuji.asm):00227                     sta     AUDC1,y             ;set pure tone and volume
0FED 3502             (         fuji.asm):00228                     puls    a                   ;restore frequency
0FEF A7A9D200         (         fuji.asm):00229                     sta     AUDF1,y             ;set frequency
0FF3 1F10             (         fuji.asm):00230                     tfr     x,d
0FF5 58               (         fuji.asm):00231                     lslb
0FF6 1F01             (         fuji.asm):00232                     tfr     d,x
0FF8 EC04             (         fuji.asm):00233                     ldd     SndAddrs,x          ;load from word offset for current note
0FFA C30003           (         fuji.asm):00234                     addd    #$0003                
0FFD ED04             (         fuji.asm):00235                     std     SndAddrs,x          ;point to next note
0FFF 1F10             (         fuji.asm):00236                     tfr     x,d
1001 54               (         fuji.asm):00237                     lsrb
1002 1F01             (         fuji.asm):00238                     tfr     d,x
                      (         fuji.asm):00239         
1004 6A08             (         fuji.asm):00240         UpdateDur   dec     SndDurs,x           ;decrement remaining duration
1006 3001             (         fuji.asm):00241                     leax    1,x
1008 8C0002           (         fuji.asm):00242                     cmpx    #VOICES
100B 26A8             (         fuji.asm):00243                     bne     PlayVoice           ;play next voice
100D 39               (         fuji.asm):00244                     rts
                      (         fuji.asm):00245         
100E 80DF58           (         fuji.asm):00246                  emod
     1011             (         fuji.asm):00247         eom      equ   *
                      (         fuji.asm):00248                  end
