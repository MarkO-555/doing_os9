                      (/home/strick/6809):00001         ********************************************************************
                      (/home/strick/6809):00002         * Format - RBF Disk format program
                      (/home/strick/6809):00003         *
                      (/home/strick/6809):00004         * $Id$
                      (/home/strick/6809):00005         *
                      (/home/strick/6809):00006         * Notes:
                      (/home/strick/6809):00007         *   1. If the TYP.DSQ bit in IT.TYP is clear, then the total number
                      (/home/strick/6809):00008         *      of sectors is NOT multiplied by the bytes per sector.  This
                      (/home/strick/6809):00009         *      means that descriptors using partition offsets will need to
                      (/home/strick/6809):00010         *      fill IT.CYL, IT.SID and IT.SCT with values that reflect the
                      (/home/strick/6809):00011         *      number of 256 byte sectors on the disk.
                      (/home/strick/6809):00012         *
                      (/home/strick/6809):00013         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/6809):00014         * Comment
                      (/home/strick/6809):00015         * ------------------------------------------------------------------
                      (/home/strick/6809):00016         *  22      ????/??/??
                      (/home/strick/6809):00017         * From Tandy OS-9 Level Two VR 02.00.01.
                      (/home/strick/6809):00018         *
                      (/home/strick/6809):00019         *  23      2003/01/06  JC
                      (/home/strick/6809):00020         * Format incorrect/clusters summary: now, specifying cluster size works.
                      (/home/strick/6809):00021         * Fixed bug where format showed an improper number of sectors formatted
                      (/home/strick/6809):00022         * at the summary if the number of sectors was a large number.
                      (/home/strick/6809):00023         * This was most notable when formatting large disks, such as hard drives.
                      (/home/strick/6809):00024         *
                      (/home/strick/6809):00025         *  24      2004/07/20  Boisy G. Pitre
                      (/home/strick/6809):00026         * Revamped to display summary similar to OS-9/68K. Also, format now
                      (/home/strick/6809):00027         * checks the TYPH.DSQ bit in order to query the drive for its size.
                      (/home/strick/6809):00028         * A rolling track counter that stays on the same line is now used
                      (/home/strick/6809):00029         * instead of the scrolling track counter, and 4 byte track numbers
                      (/home/strick/6809):00030         * are now shown instead of 3 byte track numbers.
                      (/home/strick/6809):00031         * Also, if a cluster size is not specified on the command line,
                      (/home/strick/6809):00032         * the best one is automatically calculated.
                      (/home/strick/6809):00033         *
                      (/home/strick/6809):00034         *       2005-10-25  P.Harvey-Smith.
                      (/home/strick/6809):00035         * Added support for formatting Dragon floppies, this is required because
                      (/home/strick/6809):00036         * dragon floppies are aranged thus :-
                      (/home/strick/6809):00037         *       LSN     Purpose
                      (/home/strick/6809):00038         *       0       Standard LSN0
                      (/home/strick/6809):00039         *       1       Blockmap
                      (/home/strick/6809):00040         *       2-17    Boot area (as on track 35 of CoCo disk).
                      (/home/strick/6809):00041         *       18      Begining of root dir
                      (/home/strick/6809):00042         *       19+     Continuation of root dir ? and data sectors.
                      (/home/strick/6809):00043         *
                      (/home/strick/6809):00044         * Note as a limitation of this scheme, is that disks with more than 2048 
                      (/home/strick/6809):00045         * sectors, need to have a cluster size of 2 as only one sector is available 
                      (/home/strick/6809):00046         * for the block map.
                      (/home/strick/6809):00047         *
                      (/home/strick/6809):00048         * To format a floppy with dragon format, you need to use the command line 
                      (/home/strick/6809):00049         * parameter 'FD' (format, Dragon).
                      (/home/strick/6809):00050         *
                      (/home/strick/6809):00051         *       2005-10-26  P.Harvey-Smith
                      (/home/strick/6809):00052         * Determined the purpose and commented some of the unknown memory vars,
                      (/home/strick/6809):00053         * also renamed others to more closeley represent their purpose, e.g.
                      (/home/strick/6809):00054         * there where two 'cluster size' vars, one was inface number of bytes in
                      (/home/strick/6809):00055         * bitmap, so that got renamed :)
                      (/home/strick/6809):00056         * Format can now correctly build a DragonData OS-9 compatible disk
                      (/home/strick/6809):00057         * that can have (under OS-9) cobbler run on it, and will subsequently then
                      (/home/strick/6809):00058         * boot.
                      (/home/strick/6809):00059         *
                      (/home/strick/6809):00060         *  25   2005-10-26  Boisy G. Pitre
                      (/home/strick/6809):00061         * Fixed an issue where the bitmap sector wasn't being properly set up
                      (/home/strick/6809):00062         * due to some incorrect assumptions.  The result was that copying a file
                      (/home/strick/6809):00063         * to a newly formatted hard drive would, in cases where the drive was
                      (/home/strick/6809):00064         * large, wipe out the bitmap sector and root directory area.
                      (/home/strick/6809):00065                                  
                      (/home/strick/6809):00066                  nam   Format    
                      (/home/strick/6809):00067                  ttl   RBF Disk format program
                      (/home/strick/6809):00068                                  
                      (/home/strick/6809):00069         * Disassembled 02/07/17 11:00:13 by Disasm v1.6 (C) 1988 by RML
                      (/home/strick/6809):00070                                  
                      (/home/strick/6809):00071                  ifp1            
                      (/home/strick/6809):00072                  use   defsfile  
                      (         defsfile):00001                   use    ../defsfile
     0003             (      ../defsfile):00001         Level    equ   3
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
     0003             (            os9.d):01040         R$E            EQU       3                   E Accumulator
     0004             (            os9.d):01041         R$F            EQU       4                   F Accumulator
     0003             (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
     0001             (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
     0005             (            os9.d):01044         R$DP           EQU       5                   Direct Page register
     0006             (            os9.d):01045         R$X            EQU       6                   X Index register
     0008             (            os9.d):01046         R$Y            EQU       8                   Y Index register
     000A             (            os9.d):01047         R$U            EQU       10                  User Stack register
     000C             (            os9.d):01048         R$PC           EQU       12                  Program Counter register
     000E             (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
0005                  (            os9.d):01051         R$DP           EQU       3                   Direct Page register
0005                  (            os9.d):01052         R$X            EQU       4                   X Index register
0005                  (            os9.d):01053         R$Y            EQU       6                   Y Index register
0005                  (            os9.d):01054         R$U            EQU       8                   User Stack register
0005                  (            os9.d):01055         R$PC           EQU       10                  Program Counter register
0005                  (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
     2000             (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
     0040             (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
     0002             (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
     6000             (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
     0660             (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
     0661             (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         *************************************************
                      (           coco.d):00148         *
                      (           coco.d):00149         * NitrOS-9 Level 1 Section
                      (           coco.d):00150         *
                      (           coco.d):00151         *************************************************
                      (           coco.d):00152         
0004                  (           coco.d):00153         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE      
                      (           coco.d):00156         
                      (           coco.d):00157         *************************************************
                      (           coco.d):00158         *
                      (           coco.d):00159         * NitrOS-9 Level 2 Section
                      (           coco.d):00160         *
                      (           coco.d):00161         *************************************************
                      (           coco.d):00162         
                      (           coco.d):00163         ****************************************
                      (           coco.d):00164         * Dynamic Address Translator Definitions
                      (           coco.d):00165         *
     0008             (           coco.d):00166         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00167         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00168         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00169         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00170         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00171         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00172         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00173         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00174         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00175         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00176         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00177         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00178         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00179         IOBlock        EQU       $3F
     003F             (           coco.d):00180         ROMBlock       EQU       $3F
     007F             (           coco.d):00181         IOAddr         EQU       $7F
     0001             (           coco.d):00182         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00183         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00184         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00185         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00186         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00187         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00188         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00189         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00190         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00191         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00192         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00193         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00194         
                      (           coco.d):00195         ***************************
                      (           coco.d):00196         * Color Computer 3 Specific
                      (           coco.d):00197         *
     0001             (           coco.d):00198         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00199         
                      (           coco.d):00200         ********************
                      (           coco.d):00201         * Hardware addresses
                      (           coco.d):00202         *
     FF00             (           coco.d):00203         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00204         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00205         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00206         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00207         
     0007             (           coco.d):00208         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00209         
                      (           coco.d):00210                        ENDC
                      (           coco.d):00211                        
                      (           coco.d):00212                        ENDC      
                      (           coco.d):00213         
                      (      ../defsfile):00007                  use   cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
     0001             (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
0004                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
0004                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0004                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0004                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0004                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0004                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0004                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0004                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0004                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0004                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
                      (       cocovtio.d):00043                        RMB       1
0004                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
0004                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
0004                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
0004                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
0004                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0004                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0004                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0004                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0004                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0004                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0004                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
0004                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
0004                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
0004                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0004                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0004                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   ??
0004                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0004                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0004                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0004                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0004                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0004                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF)
0004                  (       cocovtio.d):00066         V.MCol         RMB       1                   color? (C003,8001)
0004                  (       cocovtio.d):00067         V.4A           RMB       1
0004                  (       cocovtio.d):00068         V.PMask        RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0004                  (       cocovtio.d):00069         V.4C           RMB       1
0004                  (       cocovtio.d):00070         V.4D           RMB       1
0004                  (       cocovtio.d):00071         V.4E           RMB       1
0004                  (       cocovtio.d):00072         V.4F           RMB       1
0004                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0004                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0004                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0004                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0004                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0004                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0004                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0004                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0004                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0004                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
0004                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
0004                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
0004                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
0004                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0004                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0004                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0004                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0004                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0004                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0004                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0004                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0004                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0004                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0004                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
0004                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
0004                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
0004                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
0004                  (       cocovtio.d):00102         V.Spcl         RMB       1
0004                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
0004                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0004                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0004                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0004                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0004                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0004                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0004                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
                      (       cocovtio.d):00111         
0004                  (       cocovtio.d):00112         V.Flash        RMB       2                   Cursor flash routine address.
0004                  (       cocovtio.d):00113         v.FlashCount   RMB       1                   Cursor flash count
0004                  (       cocovtio.d):00114         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00115         
                      (       cocovtio.d):00116         * CoHR vars
                      (       cocovtio.d):00117         
0004                  (       cocovtio.d):00118         V.51ScrnA      RMB       2                   * Screen address.
0004                  (       cocovtio.d):00119         V.51XPos       RMB       1                   * X co-ordinate
0004                  (       cocovtio.d):00120         V.51YPos       RMB       1                   * Y co-ordinate
0004                  (       cocovtio.d):00121         V.51EscSeq     RMB       1                   * In escape sequence
0004                  (       cocovtio.d):00122         V.51ReverseFlag RMB       1                   * Reverse video flag
0004                  (       cocovtio.d):00123         V.51UnderlineFlag RMB       1                   * Underline flag
0004                  (       cocovtio.d):00124         V.51CtrlDispatch RMB       2                   * Ctrl char dispatch address, currently processing
0004                  (       cocovtio.d):00125         V.51BytePixOffset RMB       1                   * byte offset in screen line, of character X position        
0004                  (       cocovtio.d):00126         V.51OldCursorPosX RMB       1                   * Position of old cursor before update        
0004                  (       cocovtio.d):00127         V.51OldCursorPosY RMB       1
0004                  (       cocovtio.d):00128         V.51CursorChanged RMB       1                   * Has cursor position changed ? 1=yes,0=no
0004                  (       cocovtio.d):00129         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
0004                  (       cocovtio.d):00130         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
0004                  (       cocovtio.d):00131         V.51ScreenMask1 RMB       1                   * screen masks for drawing characters on screen         
0004                  (       cocovtio.d):00132         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00133         * End of CoHR vars
                      (       cocovtio.d):00134         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00135         **** code can clobber variables defined after these !                ****
0004                  (       cocovtio.d):00136         V.IBufH        RMB       1                   input buffer head
0004                  (       cocovtio.d):00137         V.IBufT        RMB       1                   input buffer tail
0004                  (       cocovtio.d):00138         V.InBuf        RMB       1                   input buffer ptr
0004                  (       cocovtio.d):00139         V.51End        RMB       1
                      (       cocovtio.d):00140                        RMB       250-.
0004                  (       cocovtio.d):00141         V.Last         EQU       .
                      (       cocovtio.d):00142         
                      (       cocovtio.d):00143         
                      (       cocovtio.d):00144         * Unknown for now
                      (       cocovtio.d):00145         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00146         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00147         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00148         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00149         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00150         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00151         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00152         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00153         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00154         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00155         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00156         
                      (       cocovtio.d):00157         *
                      (       cocovtio.d):00158         * Defs for V.COLoad flags.
                      (       cocovtio.d):00159         * 
                      (       cocovtio.d):00160         
0004                  (       cocovtio.d):00161         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
0004                  (       cocovtio.d):00162         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
0004                  (       cocovtio.d):00163         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
                      (       cocovtio.d):00164         
                      (       cocovtio.d):00165         *
                      (       cocovtio.d):00166         * Defs for cursor flash counter
                      (       cocovtio.d):00167         *
                      (       cocovtio.d):00168         
0004                  (       cocovtio.d):00169         CFlash50hz     EQU       25                  * 50Hz flash counter
0004                  (       cocovtio.d):00170         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00171         
                      (       cocovtio.d):00172                        ELSE
                      (       cocovtio.d):00173                        
                      (       cocovtio.d):00174         ********************************************************************
                      (       cocovtio.d):00175         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * $Id$
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00180         * Comment
                      (       cocovtio.d):00181         * ------------------------------------------------------------------
                      (       cocovtio.d):00182         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00183         * Started from systype
                      (       cocovtio.d):00184         
                      (       cocovtio.d):00185                        NAM       VTIODefs
                      (       cocovtio.d):00186                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         
                      (       cocovtio.d):00188         ****************
                      (       cocovtio.d):00189         * Window Devices
                      (       cocovtio.d):00190         *
                      (       cocovtio.d):00191                        ORG       $FF9F
FF9F                  (       cocovtio.d):00192         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (       cocovtio.d):00193         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (       cocovtio.d):00194         A.W1           RMB       1                   $FFA1
FFA2                  (       cocovtio.d):00195         A.W2           RMB       1                   $FFA2
FFA3                  (       cocovtio.d):00196         A.W3           RMB       1                   $FFA3
FFA4                  (       cocovtio.d):00197         A.W4           RMB       1                   $FFA4
FFA5                  (       cocovtio.d):00198         A.W5           RMB       1                   $FFA5
FFA6                  (       cocovtio.d):00199         A.W6           RMB       1                   $FFA6
FFA7                  (       cocovtio.d):00200         A.W7           RMB       1                   $FFA7
FFA8                  (       cocovtio.d):00201         A.W8           RMB       1                   $FFA8
FFA9                  (       cocovtio.d):00202         A.W9           RMB       1                   $FFA9
FFAA                  (       cocovtio.d):00203         A.W10          RMB       1                   $FFAA
FFAB                  (       cocovtio.d):00204         A.W11          RMB       1                   $FFAB
FFAC                  (       cocovtio.d):00205         A.W12          RMB       1                   $FFAC
FFAD                  (       cocovtio.d):00206         A.W13          RMB       1                   $FFAD
FFAE                  (       cocovtio.d):00207         A.W14          RMB       1                   $FFAE
FFAF                  (       cocovtio.d):00208         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00209         
                      (       cocovtio.d):00210         **********************************
                      (       cocovtio.d):00211         * Pointer Device Packet Definition
                      (       cocovtio.d):00212         *
                      (       cocovtio.d):00213                        ORG       0
0000                  (       cocovtio.d):00214         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (       cocovtio.d):00215         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (       cocovtio.d):00216         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (       cocovtio.d):00217                        RMB       2                   reserved
0005                  (       cocovtio.d):00218         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (       cocovtio.d):00219         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (       cocovtio.d):00220         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (       cocovtio.d):00221         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (       cocovtio.d):00222         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (       cocovtio.d):00223         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (       cocovtio.d):00224         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (       cocovtio.d):00225         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (       cocovtio.d):00226         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (       cocovtio.d):00227         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (       cocovtio.d):00228                        RMB       2                   Reserved
0012                  (       cocovtio.d):00229         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (       cocovtio.d):00230         Pt.BDY         RMB       2                   Button down Y value
0016                  (       cocovtio.d):00231         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (       cocovtio.d):00232         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (       cocovtio.d):00233         Pt.AcX         RMB       2                   Actual X Value
001A                  (       cocovtio.d):00234         Pt.AcY         RMB       2                   Actual Y Value
001C                  (       cocovtio.d):00235         Pt.WRX         RMB       2                   Window Relative X
001E                  (       cocovtio.d):00236         Pt.WRY         RMB       2                   Window Relative Y
     0020             (       cocovtio.d):00237         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00238         
                      (       cocovtio.d):00239         **************************
                      (       cocovtio.d):00240         * window regions for mouse
                      (       cocovtio.d):00241         *
     0000             (       cocovtio.d):00242         WR.Cntnt       EQU       0                   content region
     0001             (       cocovtio.d):00243         WR.Cntrl       EQU       1                   control region
     0002             (       cocovtio.d):00244         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00245         
                      (       cocovtio.d):00246         *************************************
                      (       cocovtio.d):00247         * Standard system get/put buffer defs
                      (       cocovtio.d):00248         *
                      (       cocovtio.d):00249         *
                      (       cocovtio.d):00250         * system group numbers
                      (       cocovtio.d):00251         *
                      (       cocovtio.d):00252                        ORG       200
00C8                  (       cocovtio.d):00253         Grp.Fnt        RMB       1                   font group
00C9                  (       cocovtio.d):00254         Grp.Clip       RMB       1                   clipboard group
00CA                  (       cocovtio.d):00255         Grp.Ptr        RMB       1                   pointer group
00CB                  (       cocovtio.d):00256         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (       cocovtio.d):00257         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (       cocovtio.d):00258         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         * font buffer numbers
                      (       cocovtio.d):00261         *
                      (       cocovtio.d):00262                        ORG       1
0001                  (       cocovtio.d):00263         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (       cocovtio.d):00264         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (       cocovtio.d):00265         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00266         *
                      (       cocovtio.d):00267         * pattern buffer numbers
                      (       cocovtio.d):00268         *
                      (       cocovtio.d):00269                        ORG       1
0001                  (       cocovtio.d):00270         Pat.Dot        RMB       1
0002                  (       cocovtio.d):00271         Pat.Vrt        RMB       1
0003                  (       cocovtio.d):00272         Pat.Hrz        RMB       1
0004                  (       cocovtio.d):00273         Pat.XHtc       RMB       1
0005                  (       cocovtio.d):00274         Pat.LSnt       RMB       1
0006                  (       cocovtio.d):00275         Pat.RSnt       RMB       1
0007                  (       cocovtio.d):00276         Pat.SDot       RMB       1
0008                  (       cocovtio.d):00277         Pat.BDot       RMB       1
                      (       cocovtio.d):00278         *
                      (       cocovtio.d):00279         * pointer buffer numbers
                      (       cocovtio.d):00280         *
                      (       cocovtio.d):00281                        ORG       1
0001                  (       cocovtio.d):00282         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (       cocovtio.d):00283         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (       cocovtio.d):00284         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (       cocovtio.d):00285         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (       cocovtio.d):00286         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (       cocovtio.d):00287         Ptr.Txt        RMB       1                   Text pointer
0007                  (       cocovtio.d):00288         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00289         
                      (       cocovtio.d):00290         **********************
                      (       cocovtio.d):00291         * KeyDrv Entry Points
                      (       cocovtio.d):00292                        ORG       0
0000                  (       cocovtio.d):00293         K$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00294         K$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00295         K$FnKey        RMB       3                   get function key states
0009                  (       cocovtio.d):00296         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00297         
                      (       cocovtio.d):00298         **********************
                      (       cocovtio.d):00299         * JoyDrv Entry Points
                      (       cocovtio.d):00300                        ORG       0
0000                  (       cocovtio.d):00301         J$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00302         J$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00303         J$MsBtn        RMB       3                   get mouse button states
0009                  (       cocovtio.d):00304         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (       cocovtio.d):00305         J$JyBtn        RMB       3                   get joystick button states
000F                  (       cocovtio.d):00306         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00307         
                      (       cocovtio.d):00308         **********************
                      (       cocovtio.d):00309         * SndDrv Entry Points
                      (       cocovtio.d):00310                        ORG       0
0000                  (       cocovtio.d):00311         S$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00312         S$GetStt       RMB       3                   joystick termination
0006                  (       cocovtio.d):00313         S$SetStt       RMB       3                   joystick termination
0009                  (       cocovtio.d):00314         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00315         
                      (       cocovtio.d):00316         ********************************
                      (       cocovtio.d):00317         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00318         *
                      (       cocovtio.d):00319         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00320         * for use in the high level windowing package.
                      (       cocovtio.d):00321         *
     000A             (       cocovtio.d):00322         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (       cocovtio.d):00323         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (       cocovtio.d):00324         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (       cocovtio.d):00325         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00326         *
                      (       cocovtio.d):00327         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00328         * one required for each item within the menu
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330                        ORG       0
0000                  (       cocovtio.d):00331         MI.TTL         RMB       MXTTLEN             item name
000F                  (       cocovtio.d):00332         MI.ENBL        RMB       1                   enable flag
0010                  (       cocovtio.d):00333         MI.RES         RMB       5                   reserved bytes
     0015             (       cocovtio.d):00334         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00335         *
                      (       cocovtio.d):00336         * Menu Descriptor :
                      (       cocovtio.d):00337         * one for each menu on the manu bar
                      (       cocovtio.d):00338         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00339         *
                      (       cocovtio.d):00340                        ORG       0
0000                  (       cocovtio.d):00341         MN.TTL         RMB       MXTTLEN             menu title
000F                  (       cocovtio.d):00342         MN.ID          RMB       1                   menu id number (1-255)
0010                  (       cocovtio.d):00343         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (       cocovtio.d):00344         MN.NITS        RMB       1                   number of items in menu
0012                  (       cocovtio.d):00345         MN.ENBL        RMB       1                   enable flag
0013                  (       cocovtio.d):00346         MN.RES         RMB       2                   reserved bytes
0015                  (       cocovtio.d):00347         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (       cocovtio.d):00348         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00349         *
                      (       cocovtio.d):00350         * Window Descriptor:
                      (       cocovtio.d):00351         * one required for each application in a framed window
                      (       cocovtio.d):00352         *
                      (       cocovtio.d):00353                        ORG       0
0000                  (       cocovtio.d):00354         WN.TTL         RMB       20                  title of window for title bar
0014                  (       cocovtio.d):00355         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (       cocovtio.d):00356         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (       cocovtio.d):00357         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (       cocovtio.d):00358         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (       cocovtio.d):00359         WN.RES         RMB       7                   reserved bytes
0020                  (       cocovtio.d):00360         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (       cocovtio.d):00361         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00362         
                      (       cocovtio.d):00363         *************************
                      (       cocovtio.d):00364         * Window Type Definitions
                      (       cocovtio.d):00365         *
                      (       cocovtio.d):00366         * To be used in setting up the border of the window in
                      (       cocovtio.d):00367         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00368         *
                      (       cocovtio.d):00369                        ORG       0
0000                  (       cocovtio.d):00370         WT.NBox        RMB       1                   No Box
0001                  (       cocovtio.d):00371         WT.FWin        RMB       1                   Framed Window
0002                  (       cocovtio.d):00372         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (       cocovtio.d):00373         WT.SBox        RMB       1                   Shadowed Box
0004                  (       cocovtio.d):00374         WT.DBox        RMB       1                   Double Box
0005                  (       cocovtio.d):00375         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00376         
                      (       cocovtio.d):00377         *************************************
                      (       cocovtio.d):00378         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       1
0001                  (       cocovtio.d):00381         MId.Mov        RMB       1                   move box
0002                  (       cocovtio.d):00382         MId.Cls        RMB       1                   close box
0003                  (       cocovtio.d):00383         MId.Grw        RMB       1                   grow box
0004                  (       cocovtio.d):00384         MId.SUp        RMB       1                   scroll up
0005                  (       cocovtio.d):00385         MId.SDn        RMB       1                   scroll down
0006                  (       cocovtio.d):00386         MId.SRt        RMB       1                   scroll right
0007                  (       cocovtio.d):00387         MId.SLt        RMB       1                   scroll left
0008                  (       cocovtio.d):00388         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00389                        ORG       20
0014                  (       cocovtio.d):00390         MId.Tdy        RMB       1                   Tandy menu
0015                  (       cocovtio.d):00391         MId.Fil        RMB       1                   Files Menu
0016                  (       cocovtio.d):00392         MId.Edt        RMB       1                   Edit Menu
0017                  (       cocovtio.d):00393         MId.Sty        RMB       1                   Styles menu
0018                  (       cocovtio.d):00394         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00395         
                      (       cocovtio.d):00396         
                      (       cocovtio.d):00397         ******************************************************************************
                      (       cocovtio.d):00398         ******************************************************************************
                      (       cocovtio.d):00399         **                                                                          **
                      (       cocovtio.d):00400         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00401         **                                                                          **
                      (       cocovtio.d):00402         ******************************************************************************
                      (       cocovtio.d):00403         ******************************************************************************
                      (       cocovtio.d):00404         **                                                                          **
                      (       cocovtio.d):00405         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00406         **                                                                          **
                      (       cocovtio.d):00407         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00408         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00409         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00410         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00411         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00412         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00413         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00414         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00415         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00416         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00417         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00418         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00419         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (       cocovtio.d):00420         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00421         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00422         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00423         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00424         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00425         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00426         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00427         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00428         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00429         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00430         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00431         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00432         **                                                                          **
                      (       cocovtio.d):00433         ******************************************************************************
                      (       cocovtio.d):00434         ******************************************************************************
                      (       cocovtio.d):00435         
                      (       cocovtio.d):00436         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (       cocovtio.d):00437         MaxLines       EQU       25                  Max. Y coord text value
     0000             (       cocovtio.d):00438         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00439         
     0000             (       cocovtio.d):00440         COMP           EQU       0                   composite monitor
     0001             (       cocovtio.d):00441         RGB            EQU       1                   RGB Analog monitor 
     0002             (       cocovtio.d):00442         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00443         
     0001             (       cocovtio.d):00444         Monitor        SET       RGB
                      (       cocovtio.d):00445         
                      (       cocovtio.d):00446         * Global definitions
     0001             (       cocovtio.d):00447         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (       cocovtio.d):00448         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (       cocovtio.d):00449         CapsLck        EQU       %00000100           Capslock enabled
     0280             (       cocovtio.d):00450         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00451                        IFEQ      MaxLines-25
     00C6             (       cocovtio.d):00452         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00453                        ELSE      
0019                  (       cocovtio.d):00454         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00455                        ENDC      
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         *****************************************************************************
                      (       cocovtio.d):00458         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00459         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00460         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00461         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00462         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00463         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00464         *
                      (       cocovtio.d):00465         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00466         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00467                        ORG       V.SCF
001D                  (       cocovtio.d):00468         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (       cocovtio.d):00469         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (       cocovtio.d):00470         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (       cocovtio.d):00471         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (       cocovtio.d):00472         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (       cocovtio.d):00473         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (       cocovtio.d):00474         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (       cocovtio.d):00475         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (       cocovtio.d):00476         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (       cocovtio.d):00477         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (       cocovtio.d):00478         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (       cocovtio.d):00479         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (       cocovtio.d):00480                        RMB       1                   unused                                       $2A
002B                  (       cocovtio.d):00481         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (       cocovtio.d):00482         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (       cocovtio.d):00483         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (       cocovtio.d):00484         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (       cocovtio.d):00485         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (       cocovtio.d):00486         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (       cocovtio.d):00487         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (       cocovtio.d):00488         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (       cocovtio.d):00489         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (       cocovtio.d):00490         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (       cocovtio.d):00491         CC3Parm        RMB       128-.               global parameter area
0080                  (       cocovtio.d):00492         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (       cocovtio.d):00493         CC3DSiz        EQU       .
                      (       cocovtio.d):00494         
                      (       cocovtio.d):00495         *****************************************************************************
                      (       cocovtio.d):00496         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00497         * This area sits in system block 0 from $1000 to $10ff
     1000             (       cocovtio.d):00498         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00499                        ORG       0
0000                  (       cocovtio.d):00500         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (       cocovtio.d):00501         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (       cocovtio.d):00502         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (       cocovtio.d):00503         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00504         *g0003    rmb   2          NEW: UNUSED
0005                  (       cocovtio.d):00505         g0005          RMB       2                   Temp save in Windint RG
0007                  (       cocovtio.d):00506         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (       cocovtio.d):00507         G.MonTyp       RMB       1                   monitor type
     000A             (       cocovtio.d):00508         g000A          EQU       .                   Old label for compatibility
000A                  (       cocovtio.d):00509         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00510         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00511         *                           0=We are not on our device
                      (       cocovtio.d):00512         *                           1=We are the current device
                      (       cocovtio.d):00513         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00514         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00515         *                           If not current device, they don't.)
000B                  (       cocovtio.d):00516         G.WinType      RMB       1                   current device's V.TYPE
000C                  (       cocovtio.d):00517         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (       cocovtio.d):00518         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (       cocovtio.d):00519         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (       cocovtio.d):00520         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (       cocovtio.d):00521         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (       cocovtio.d):00522         G.BelVec       RMB       2                   BELL routine vector
0019                  (       cocovtio.d):00523         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (       cocovtio.d):00524         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (       cocovtio.d):00525         G.BelTnF       RMB       1                   BELL tone flag
001D                  (       cocovtio.d):00526         g001D          RMB       3
0020                  (       cocovtio.d):00527         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (       cocovtio.d):00528         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (       cocovtio.d):00529         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00530         *                           00000010 : VDGInt found
                      (       cocovtio.d):00531         *                           10000000 : GrfDrv found
0025                  (       cocovtio.d):00532         g0025          RMB       1
0026                  (       cocovtio.d):00533         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00534         *         IFEQ  TC9-true
                      (       cocovtio.d):00535         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00536         *         ELSE  
0027                  (       cocovtio.d):00537         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00538         *         ENDC  
0028                  (       cocovtio.d):00539         G.LKeyCd       RMB       1                   last keyboard code
0029                  (       cocovtio.d):00540         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00541         * A secondary 3 key table (same format as g002D below)
002A                  (       cocovtio.d):00542         G.2Key1        RMB       1                   $2A
002B                  (       cocovtio.d):00543         G.2Key2        RMB       1                   $2B
002C                  (       cocovtio.d):00544         G.2Key3        RMB       1
                      (       cocovtio.d):00545         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00546         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00547         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00548         * KeyFlag below.
002D                  (       cocovtio.d):00549         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (       cocovtio.d):00550         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (       cocovtio.d):00551         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (       cocovtio.d):00552         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (       cocovtio.d):00553         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (       cocovtio.d):00554         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00555         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00556         *                           %00111000-Row # (Input, 0-6)
0033                  (       cocovtio.d):00557         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (       cocovtio.d):00558         G.KySns        RMB       1                   key sense byte
0035                  (       cocovtio.d):00559         G.KySame       RMB       1                   same key flag
0036                  (       cocovtio.d):00560         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (       cocovtio.d):00561                        RMB       1
0038                  (       cocovtio.d):00562         g0038          RMB       1                   grfdrv initialized flag
0039                  (       cocovtio.d):00563                        RMB       2
003B                  (       cocovtio.d):00564         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (       cocovtio.d):00565         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (       cocovtio.d):00566         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (       cocovtio.d):00567         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (       cocovtio.d):00568         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (       cocovtio.d):00569         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (       cocovtio.d):00570         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00571         *         IFEQ  TC9-true
                      (       cocovtio.d):00572         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00573         *         ELSE  
0063                  (       cocovtio.d):00574         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00575         *         ENDC  
0064                  (       cocovtio.d):00576         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (       cocovtio.d):00577         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (       cocovtio.d):00578         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (       cocovtio.d):00579         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (       cocovtio.d):00580         G.CoTble       RMB       6                   co-module table ($68)
006E                  (       cocovtio.d):00581         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (       cocovtio.d):00582         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (       cocovtio.d):00583         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (       cocovtio.d):00584         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (       cocovtio.d):00585         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (       cocovtio.d):00586         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (       cocovtio.d):00587         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (       cocovtio.d):00588         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (       cocovtio.d):00589         g00BD          RMB       1                   Current screen type for work window table
00BE                  (       cocovtio.d):00590         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (       cocovtio.d):00591         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (       cocovtio.d):00592         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (       cocovtio.d):00593         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (       cocovtio.d):00594         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (       cocovtio.d):00595         G.MsSig        RMB       1                   mouse signal flag
00C7                  (       cocovtio.d):00596         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (       cocovtio.d):00597         g00D7          RMB       9
00E0                  (       cocovtio.d):00598         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (       cocovtio.d):00599         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (       cocovtio.d):00600         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (       cocovtio.d):00601         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (       cocovtio.d):00602         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (       cocovtio.d):00603         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00604         
                      (       cocovtio.d):00605         *****************************************************************************
                      (       cocovtio.d):00606         * GrfDrv global memory data definitions
                      (       cocovtio.d):00607         * This area sits in system block 0 from $1100 to $119E
     1100             (       cocovtio.d):00608         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00609                        ORG       0
0000                  (       cocovtio.d):00610         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (       cocovtio.d):00611         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (       cocovtio.d):00612         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (       cocovtio.d):00613         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (       cocovtio.d):00614         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (       cocovtio.d):00615         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (       cocovtio.d):00616         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (       cocovtio.d):00617         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (       cocovtio.d):00618         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (       cocovtio.d):00619         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00620         *                             overlay width has been copied
000B                  (       cocovtio.d):00621         gr000B         RMB       1
000C                  (       cocovtio.d):00622         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (       cocovtio.d):00623         gr000E         RMB       1
000F                  (       cocovtio.d):00624         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (       cocovtio.d):00625         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (       cocovtio.d):00626         gr0012         RMB       6
0018                  (       cocovtio.d):00627         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (       cocovtio.d):00628         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (       cocovtio.d):00629         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (       cocovtio.d):00630         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (       cocovtio.d):00631         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (       cocovtio.d):00632         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (       cocovtio.d):00633         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (       cocovtio.d):00634         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (       cocovtio.d):00635         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (       cocovtio.d):00636         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (       cocovtio.d):00637         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (       cocovtio.d):00638         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (       cocovtio.d):00639         gr002C         RMB       2
002E                  (       cocovtio.d):00640         gr002E         RMB       2                   current window table entry
0030                  (       cocovtio.d):00641         gr0030         RMB       2                   current screen table ptr
0032                  (       cocovtio.d):00642         gr0032         RMB       1                   Last block # we used for buffers
0033                  (       cocovtio.d):00643         gr0033         RMB       2                   Last offset we used for buffers
0035                  (       cocovtio.d):00644         gr0035         RMB       1                   group
0036                  (       cocovtio.d):00645         gr0036         RMB       2                   offset
0038                  (       cocovtio.d):00646         gr0038         RMB       1                   group returned (new)
0039                  (       cocovtio.d):00647         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (       cocovtio.d):00648         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (       cocovtio.d):00649         gr003B         RMB       2                   end of vars ptr?
003D                  (       cocovtio.d):00650         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (       cocovtio.d):00651         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (       cocovtio.d):00652         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (       cocovtio.d):00653         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (       cocovtio.d):00654         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (       cocovtio.d):00655         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (       cocovtio.d):00656         gr0047         RMB       2                   'Working' X coordinate
0049                  (       cocovtio.d):00657         gr0049         RMB       2                   'Working' Y coordinate
004B                  (       cocovtio.d):00658         gr004B         RMB       2                   current X
004D                  (       cocovtio.d):00659         gr004D         RMB       2                   current Y
004F                  (       cocovtio.d):00660         gr004F         RMB       2                   X Size (in bytes)
0051                  (       cocovtio.d):00661         gr0051         RMB       2                   Y Size (in bytes)
0053                  (       cocovtio.d):00662         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (       cocovtio.d):00663         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (       cocovtio.d):00664         gr0057         RMB       1                   group
0058                  (       cocovtio.d):00665         gr0058         RMB       1                   buffer #
0059                  (       cocovtio.d):00666         gr0059         RMB       1                   save switch for overlay
005A                  (       cocovtio.d):00667         gr005A         RMB       1                   PRN
005B                  (       cocovtio.d):00668         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (       cocovtio.d):00669         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (       cocovtio.d):00670         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (       cocovtio.d):00671         Gr.STYMk       RMB       1                   STY marker
0061                  (       cocovtio.d):00672         gr0061         RMB       1                   foreground RGB data
0062                  (       cocovtio.d):00673         gr0062         RMB       1                   background RGB data
0063                  (       cocovtio.d):00674         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (       cocovtio.d):00675         gr0064         RMB       2                   PSet vector
0066                  (       cocovtio.d):00676         gr0066         RMB       2                   pset offset
0068                  (       cocovtio.d):00677         gr0068         RMB       2                   LSet vector
006A                  (       cocovtio.d):00678         gr006A         RMB       2                   max X co-ordinate
006C                  (       cocovtio.d):00679         gr006C         RMB       2                   max Y co-ordinate
006E                  (       cocovtio.d):00680         gr006E         RMB       2                   X pixel count
0070                  (       cocovtio.d):00681         gr0070         RMB       2                   Y pixel count
0072                  (       cocovtio.d):00682         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (       cocovtio.d):00683         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (       cocovtio.d):00684         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (       cocovtio.d):00685         gr0077         RMB       2                   Vector for right direction FFill
0079                  (       cocovtio.d):00686         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (       cocovtio.d):00687         gr007A         RMB       2                   Vector for left direction FFill
007C                  (       cocovtio.d):00688         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (       cocovtio.d):00689         gr007D         RMB       1                   buffer block #
007E                  (       cocovtio.d):00690         gr007E         RMB       2                   buffer offset #
0080                  (       cocovtio.d):00691         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (       cocovtio.d):00692         gr0082         RMB       3                   3 byte extended screen address
0085                  (       cocovtio.d):00693         gr0085         RMB       2                   temp
0087                  (       cocovtio.d):00694         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (       cocovtio.d):00695         gr0097         RMB       1                   temp
0098                  (       cocovtio.d):00696         gr0098         RMB       1                   temp
                      (       cocovtio.d):00697         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (       cocovtio.d):00698         gr0099         RMB       2                   temp
                      (       cocovtio.d):00699         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (       cocovtio.d):00700         gr009B         RMB       1                   counter temp
009C                  (       cocovtio.d):00701         gr009C         RMB       1
009D                  (       cocovtio.d):00702         gr009D         RMB       2                   offset to buffer in block
009F                  (       cocovtio.d):00703         gr009F         RMB       1
00A0                  (       cocovtio.d):00704         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (       cocovtio.d):00705         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00706         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (       cocovtio.d):00707         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (       cocovtio.d):00708         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (       cocovtio.d):00709         gr00A7         RMB       2
00A9                  (       cocovtio.d):00710         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (       cocovtio.d):00711         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (       cocovtio.d):00712         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (       cocovtio.d):00713         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (       cocovtio.d):00714         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (       cocovtio.d):00715         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00716         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (       cocovtio.d):00717         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (       cocovtio.d):00718         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (       cocovtio.d):00719         gr00B5         RMB       1                   regW for grfdrv
00B6                  (       cocovtio.d):00720         gr00B6         RMB       1
00B7                  (       cocovtio.d):00721         gr00B7         RMB       2
00B9                  (       cocovtio.d):00722         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (       cocovtio.d):00723         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (       cocovtio.d):00724         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (       cocovtio.d):00725         gr00BF         RMB       256-.
                      (       cocovtio.d):00726         * GPLoad buffer - $1200 in system block 0
0100                  (       cocovtio.d):00727         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (       cocovtio.d):00728         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00729         
                      (       cocovtio.d):00730         *****************************************************************************
                      (       cocovtio.d):00731         * Window table entry structure
                      (       cocovtio.d):00732         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00733         * including any overlay windows.
     0020             (       cocovtio.d):00734         MaxWind        EQU       32                  maximum allowable window tables
     1290             (       cocovtio.d):00735         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00736                        ORG       -$10
FFF0                  (       cocovtio.d):00737         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (       cocovtio.d):00738         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (       cocovtio.d):00739         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (       cocovtio.d):00740         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (       cocovtio.d):00741         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (       cocovtio.d):00742         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (       cocovtio.d):00743         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (       cocovtio.d):00744         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (       cocovtio.d):00745         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (       cocovtio.d):00746         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (       cocovtio.d):00747         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (       cocovtio.d):00748         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (       cocovtio.d):00749         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (       cocovtio.d):00750         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (       cocovtio.d):00751         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (       cocovtio.d):00752         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (       cocovtio.d):00753         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (       cocovtio.d):00754         Wt.Back        RMB       1                   background palette #                         $07
0008                  (       cocovtio.d):00755         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (       cocovtio.d):00756         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (       cocovtio.d):00757         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (       cocovtio.d):00758         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (       cocovtio.d):00759         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (       cocovtio.d):00760         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (       cocovtio.d):00761         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (       cocovtio.d):00762         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (       cocovtio.d):00763         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (       cocovtio.d):00764         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (       cocovtio.d):00765         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (       cocovtio.d):00766         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (       cocovtio.d):00767         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (       cocovtio.d):00768         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (       cocovtio.d):00769         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (       cocovtio.d):00770         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (       cocovtio.d):00771         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (       cocovtio.d):00772         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (       cocovtio.d):00773         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00774         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00775         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00776         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00777         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00778         *       sizes for control+content regions
0026                  (       cocovtio.d):00779         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (       cocovtio.d):00780         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (       cocovtio.d):00781         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (       cocovtio.d):00782         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (       cocovtio.d):00783         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (       cocovtio.d):00784         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00785         
                      (       cocovtio.d):00786         *****************************************************************************
                      (       cocovtio.d):00787         * Screen table entrys
                      (       cocovtio.d):00788         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00789         
     0010             (       cocovtio.d):00790         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (       cocovtio.d):00791         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00792                        ORG       0
0000                  (       cocovtio.d):00793         St.Sty         RMB       1                   Screen type                         $00
0001                  (       cocovtio.d):00794         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (       cocovtio.d):00795         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (       cocovtio.d):00796         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (       cocovtio.d):00797         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (       cocovtio.d):00798         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (       cocovtio.d):00799         St.Back        RMB       1                   Background palette register #       $07
0008                  (       cocovtio.d):00800         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (       cocovtio.d):00801         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00802         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00803         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00804         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00805         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (       cocovtio.d):00806         St.Pals        RMB       16                  Palette register contents           $10
     0020             (       cocovtio.d):00807         St.Siz         EQU       .
                      (       cocovtio.d):00808         
                      (       cocovtio.d):00809         *****************************************************************************
                      (       cocovtio.d):00810         * Graphics buffer tables
                      (       cocovtio.d):00811         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00812         * data.
                      (       cocovtio.d):00813                        ORG       0
0000                  (       cocovtio.d):00814         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (       cocovtio.d):00815         Grf.Off        RMB       2                   back block header offset            $01
0003                  (       cocovtio.d):00816         Grf.Grp        RMB       1                   group #                             $03
0004                  (       cocovtio.d):00817         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (       cocovtio.d):00818         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (       cocovtio.d):00819         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (       cocovtio.d):00820         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (       cocovtio.d):00821         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (       cocovtio.d):00822         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (       cocovtio.d):00823         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (       cocovtio.d):00824         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (       cocovtio.d):00825         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (       cocovtio.d):00826         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (       cocovtio.d):00827         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00828         
                      (       cocovtio.d):00829         *****************************************************************************
                      (       cocovtio.d):00830         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00831         * $1075-$0176
                      (       cocovtio.d):00832         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00833                        ORG       0
0000                  (       cocovtio.d):00834         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (       cocovtio.d):00835         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (       cocovtio.d):00836         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (       cocovtio.d):00837         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (       cocovtio.d):00838         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (       cocovtio.d):00839         Gt.BClr        RMB       1                   Background color                               $08
0009                  (       cocovtio.d):00840         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (       cocovtio.d):00841         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (       cocovtio.d):00842         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (       cocovtio.d):00843         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (       cocovtio.d):00844         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (       cocovtio.d):00845         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (       cocovtio.d):00846         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (       cocovtio.d):00847         GTabSz         EQU       .
                      (       cocovtio.d):00848         
                      (       cocovtio.d):00849         *****************************************************************************
                      (       cocovtio.d):00850         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00851         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00852         * WindInt.
                      (       cocovtio.d):00853         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00854         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00855         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00856                        ORG       $0240
0240                  (       cocovtio.d):00857                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (       cocovtio.d):00858                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (       cocovtio.d):00859                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (       cocovtio.d):00860                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00861         
                      (       cocovtio.d):00862         *****************************************************************************
                      (       cocovtio.d):00863         * WindInt menu handling table entry definition
                      (       cocovtio.d):00864                        ORG       0
0000                  (       cocovtio.d):00865         MnuXNum        RMB       1                   menu #
0001                  (       cocovtio.d):00866         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (       cocovtio.d):00867         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (       cocovtio.d):00868                        RMB       1                   unused?
     0004             (       cocovtio.d):00869         MnuHSiz        EQU       .
                      (       cocovtio.d):00870         
                      (       cocovtio.d):00871         *****************************************************************************
                      (       cocovtio.d):00872         * Character binary switches
     0080             (       cocovtio.d):00873         TChr           EQU       %10000000           transparent characters
     0040             (       cocovtio.d):00874         Under          EQU       %01000000           underline characters
     0020             (       cocovtio.d):00875         Bold           EQU       %00100000           bold characters
     0010             (       cocovtio.d):00876         Prop           EQU       %00010000           proportional spacing of characters
     0008             (       cocovtio.d):00877         Scale          EQU       %00001000           automatic window scaling
     0004             (       cocovtio.d):00878         Invers         EQU       %00000100           inverse characters
     0002             (       cocovtio.d):00879         NoCurs         EQU       %00000010           no cursor display
     0001             (       cocovtio.d):00880         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (       cocovtio.d):00884         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00885         *         equ   1          640x200x2
                      (       cocovtio.d):00886         *         equ   2          320x200x4
                      (       cocovtio.d):00887         *         equ   3          640x200x4
                      (       cocovtio.d):00888         *         equ   4          320x200x16
                      (       cocovtio.d):00889         *         equ   $85        80 column text
                      (       cocovtio.d):00890         *         equ   $86        40 column text
                      (       cocovtio.d):00891         
                      (       cocovtio.d):00892         *************************************
                      (       cocovtio.d):00893         * Window default palette color codes
                      (       cocovtio.d):00894         *
                      (       cocovtio.d):00895                        ORG       0
0000                  (       cocovtio.d):00896         White.         RMB       1
0001                  (       cocovtio.d):00897         Blue.          RMB       1
0002                  (       cocovtio.d):00898         Black.         RMB       1
0003                  (       cocovtio.d):00899         Green.         RMB       1
0004                  (       cocovtio.d):00900         Red.           RMB       1
0005                  (       cocovtio.d):00901         Yellow.        RMB       1
0006                  (       cocovtio.d):00902         Magenta.       RMB       1
0007                  (       cocovtio.d):00903         Cyan.          RMB       1
                      (       cocovtio.d):00904         
                      (       cocovtio.d):00905                        ENDC      
                      (       cocovtio.d):00906                        ENDC      
                      (/home/strick/6809):00073                  endc            
                      (/home/strick/6809):00074                                  
     0000             (/home/strick/6809):00075         DOHELP   set   0         
     0000             (/home/strick/6809):00076         DOROLL   set   0         
                      (/home/strick/6809):00077                                  
     0011             (/home/strick/6809):00078         tylg     set   Prgrm+Objct
     0080             (/home/strick/6809):00079         atrv     set   ReEnt+rev 
     0000             (/home/strick/6809):00080         rev      set   $00       
     0019             (/home/strick/6809):00081         edition  set   25
                      (/home/strick/6809):00082                                  
0000 87CD10C7000D1180 (/home/strick/6809):00083                  mod   eom,name,tylg,atrv,start,size
     FE00952B70
                      (/home/strick/6809):00084                                  
                      (/home/strick/6809):00085         ********************************************************************
                      (/home/strick/6809):00086         * begin our data area, starts on direct page
                      (/home/strick/6809):00087         ********************************************************************
                      (/home/strick/6809):00088                                  
0000.                 (/home/strick/6809):00089         savedu   rmb   2          save the u register
0002.                 (/home/strick/6809):00090         totsects rmb   3         
0005.                 (/home/strick/6809):00091         tmpnum   rmb   4         
0009.                 (/home/strick/6809):00092         sectmode rmb   1         
000A.                 (/home/strick/6809):00093         diskpath rmb   1          disk path number
000B.                 (/home/strick/6809):00094         currtrak rmb   2          current track on
000D.                 (/home/strick/6809):00095         currside rmb   2         
000F.                 (/home/strick/6809):00096         currsect rmb   1          current sector on
0010.                 (/home/strick/6809):00097         sectcount rmb   2          counted sectors
0012.                 (/home/strick/6809):00098         trk0data rmb   2          track 0 data pointer
0014.                 (/home/strick/6809):00099         trkdata  rmb   2          track !0 data pointer
0016.                 (/home/strick/6809):00100         u000E    rmb   2         
0018.                 (/home/strick/6809):00101         mfm      rmb   1          denisity (double/single)
0019.                 (/home/strick/6809):00102         maxmfm   rmb   1         
001A.                 (/home/strick/6809):00103         tpi      rmb   1         
001B.                 (/home/strick/6809):00104         numsides rmb   1         
001C.                 (/home/strick/6809):00105         ncyls    rmb   2          total number of cylinders
001E.                 (/home/strick/6809):00106         u0017    rmb   1         
001F.                 (/home/strick/6809):00107         u0018    rmb   1         
0020.                 (/home/strick/6809):00108         sectors  rmb   2          total number of sectors
0022.                 (/home/strick/6809):00109         sectors0 rmb   2          total number of sectors
0024.                 (/home/strick/6809):00110         bps      rmb   1          bytes per sector (returned from SS.DSize)
0025.                 (/home/strick/6809):00111         dtype    rmb   1          disk device type (5", 8", hard disk)
0026.                 (/home/strick/6809):00112         dns      rmb   1          density byte
0027.                 (/home/strick/6809):00113         sas      rmb   1          density byte
0028.                 (/home/strick/6809):00114         ready    rmb   1          ready to proceed, skip warning
0029.                 (/home/strick/6809):00115         dresult  rmb   2          decimal number in binary
002B.                 (/home/strick/6809):00116         interlv  rmb   1          sector interleave value
002C.                 (/home/strick/6809):00117         u0022    rmb   2         
002E.                 (/home/strick/6809):00118         clustsiz rmb   1          cluster size (specified or default)
002F.                 (/home/strick/6809):00119         clustspecified rmb   1          cluster size specified on command line
0030.                 (/home/strick/6809):00120         NumBitmapBytes rmb   2          Number of bytes in cluster allocation bitmap
0032.                 (/home/strick/6809):00121         u002A    rmb   1         
0033.                 (/home/strick/6809):00122         clustcnt rmb   1         
0034.                 (/home/strick/6809):00123         NoRootFDSecs rmb   1          Number of sectors in Root FD (normally 8 ?)
0035.                 (/home/strick/6809):00124         NoSysSectors rmb   2          Number of Sectors at beginning of disk reserved for system
0037.                 (/home/strick/6809):00125         NoSysClusters rmb   2          Number of system Clusters to allocate
0039.                 (/home/strick/6809):00126         u0030    rmb   1         
003A.                 (/home/strick/6809):00127         u0031    rmb   1         
003B.                 (/home/strick/6809):00128         u0032    rmb   1         
003C.                 (/home/strick/6809):00129         u0033    rmb   1         
003D.                 (/home/strick/6809):00130         u0034    rmb   1         
003E.                 (/home/strick/6809):00131         u0035    rmb   1         
003F.                 (/home/strick/6809):00132         oksects  rmb   3         
0042.                 (/home/strick/6809):00133         u0038    rmb   2         
0044.                 (/home/strick/6809):00134         u003A    rmb   2         
0046.                 (/home/strick/6809):00135         u003C    rmb   1         
0047.                 (/home/strick/6809):00136         u003D    rmb   2         
0049.                 (/home/strick/6809):00137         u003F    rmb   2         
004B.                 (/home/strick/6809):00138         u0041    rmb   2         
004D.                 (/home/strick/6809):00139         u0043    rmb   1         
004E.                 (/home/strick/6809):00140         u0044    rmb   1         
004F.                 (/home/strick/6809):00141         dovfy    rmb   1         
0050.                 (/home/strick/6809):00142         dtentry  rmb   2         
0052.                 (/home/strick/6809):00143         u0048    rmb   1         
0053.                 (/home/strick/6809):00144         toffs    rmb   1          track offset (derived from PD.SToff)
0054.                 (/home/strick/6809):00145         soffs    rmb   1          sector offset (derived from PD.SToff)
0055.                 (/home/strick/6809):00146         t0sngdns rmb   1          track 0 single density flag
0056.                 (/home/strick/6809):00147         cocofmt  rmb   1          COCO disk format flag (1 = yes)
0057.                 (/home/strick/6809):00148         dolog    rmb   1          logical format
0058.                 (/home/strick/6809):00149         prmbuf   rmb   2         
005A.                 (/home/strick/6809):00150         u0051    rmb   4         
005E.                 (/home/strick/6809):00151         u0055    rmb   15        
006D.                 (/home/strick/6809):00152         u0064    rmb   7         
0074.                 (/home/strick/6809):00153         u006B    rmb   4         
0078.                 (/home/strick/6809):00154         dskname  rmb   32         quoted delimited disk name buffer
0098.                 (/home/strick/6809):00155         u008F    rmb   40        
00C0.                 (/home/strick/6809):00156         IsDragon rmb   1          Is this a dragon disk ?
00C1.                 (/home/strick/6809):00157         SaveRootLSN rmb   3          Saved copy of DD.DIR
00C4.                 (/home/strick/6809):00158         AddedSysSecs rmb   2          Additional system sectors (0 for CoCo, $10 for Dragon boot area)
00C6.                 (/home/strick/6809):00159         LSN0     rmb   256        LSN0 build buffer
01C6.                 (/home/strick/6809):00160         optbuf   rmb   256       
02C6.                 (/home/strick/6809):00161         numbuf   rmb   32        
02E6.                 (/home/strick/6809):00162         fdtbuf1  rmb   3         
02E9.                 (/home/strick/6809):00163         fdtbuf2  rmb   9924      
29AD.                 (/home/strick/6809):00164         u297E    rmb   451       
     2B70             (/home/strick/6809):00165         size     equ   .         
                      (/home/strick/6809):00166                                  
000D 466F726D61F4     (/home/strick/6809):00167         name     fcs   /Format/  
0013 19               (/home/strick/6809):00168                  fcb   edition   
                      (/home/strick/6809):00169                                  
                      (/home/strick/6809):00170         *val1     fdb   $0000
                      (/home/strick/6809):00171         *val2     fdb   $0000
                      (/home/strick/6809):00172         *val3     fdb   $0000
                      (/home/strick/6809):00173                                  
                      (/home/strick/6809):00174         * Hard drive sector data: 128 bytes of $E5, and another 128 bytes of $E5
0014 80E580E50000     (/home/strick/6809):00175         hdsdat   fdb   $80E5,$80E5,$0000
                      (/home/strick/6809):00176                                  
                      (/home/strick/6809):00177         * Single Density Floppy Track Data
001A 010028FF060001FC (/home/strick/6809):00178         sgtdat   fdb   $0100,$28FF,$0600,$01FC,$0CFF,$0000
     0CFF0000
                      (/home/strick/6809):00179         * Single Density Sector Data
0026 060001FE040001F7 (/home/strick/6809):00180         sgsdat   fdb   $0600,$01FE,$0400,$01F7,$0AFF,$0600
     0AFF0600
0032 01FB80E580E501F7 (/home/strick/6809):00181                  fdb   $01FB,$80E5,$80E5,$01F7,$0AFF,$0000
     0AFF0000
003E FF               (/home/strick/6809):00182                  fcb   $FF       
003F 0043             (/home/strick/6809):00183         sgfidp   fdb   $0043     
0041 0128             (/home/strick/6809):00184         sgsize   fdb   $0128     
                      (/home/strick/6809):00185                                  
                      (/home/strick/6809):00186         * Double Density Floppy Track Data
0043 504E0C0003F601FC (/home/strick/6809):00187         dbtdat   fdb   $504E,$0C00,$03F6,$01FC,$204E,$0000
     204E0000
                      (/home/strick/6809):00188         * Double Density Sector Data
004F 0C0003F501FE0400 (/home/strick/6809):00189         dbsdat   fdb   $0C00,$03F5,$01FE,$0400,$01F7,$164E
     01F7164E
005B 0C0003F501FB80E5 (/home/strick/6809):00190                  fdb   $0C00,$03F5,$01FB,$80E5,$80E5,$01F7
     80E501F7
0067 164E0000         (/home/strick/6809):00191                  fdb   $164E,$0000
006B 4E               (/home/strick/6809):00192                  fcb   $4E       
006C 0090             (/home/strick/6809):00193         dbfidp   fdb   $0090     
006E 0152             (/home/strick/6809):00194         dbsize   fdb   $0152     
                      (/home/strick/6809):00195                                  
                      (/home/strick/6809):00196         * Double Density Color Computer Format
0070 204E00000C0003F5 (/home/strick/6809):00197         dctdat   fdb   $204E,$0000,$0C00,$03F5,$01FE,$0400
     01FE0400
007C 01F7164E0C0003F5 (/home/strick/6809):00198                  fdb   $01F7,$164E,$0C00,$03F5,$01FB,$80E5
     01FB80E5
0088 80E501F7184E0000 (/home/strick/6809):00199                  fdb   $80E5,$01F7,$184E,$0000
0090 4E               (/home/strick/6809):00200                  fcb   $4E       
0091 0030             (/home/strick/6809):00201         dcfidp   fdb   $0030     
0093 0154             (/home/strick/6809):00202         dcsize   fdb   $0154     
                      (/home/strick/6809):00203                                  
     0064             (/home/strick/6809):00204         DragonFlag equ   'd        Flag that we are formatting dragon formatted disk.
     0012             (/home/strick/6809):00205         DragonRootSec equ   $12        Dragon root sector is always LSN 18
     0010             (/home/strick/6809):00206         DragonBootSize equ   $10        Size of dragon boot area
                      (/home/strick/6809):00207                                  
                      (/home/strick/6809):00208         ********************************************************************
                      (/home/strick/6809):00209         * format module execution start address
                      (/home/strick/6809):00210         ********************************************************************
                      (/home/strick/6809):00211                                  
0095 DF00             (/home/strick/6809):00212         start    stu   <savedu    save our data pointer
0097 8D23             (/home/strick/6809):00213                  bsr   ClrWork    clear the work area
0099 8D3E             (/home/strick/6809):00214                  bsr   OpenDev    get device name and open it
009B 170086           (/home/strick/6809):00215                  lbsr  Default    handle all the options
009E 1702F2           (/home/strick/6809):00216                  lbsr  GetDTyp    initialize the device
00A1 17024F           (/home/strick/6809):00217                  lbsr  Proceed   
00A4 1703D4           (/home/strick/6809):00218                  lbsr  Format     physically format device
00A7 170539           (/home/strick/6809):00219                  lbsr  InitLSN0   initialize LSN0
00AA 17062E           (/home/strick/6809):00220                  lbsr  ReadLSN0   attempt to read back LSN0
00AD 170671           (/home/strick/6809):00221                  lbsr  MkBMap     make bitmap sectors
00B0 170870           (/home/strick/6809):00222                  lbsr  MkRootFD   file descriptor
00B3 DE50             (/home/strick/6809):00223                  ldu   <dtentry   device table entry
00B5 103F81           (/home/strick/6809):00224                  os9   I$Detach   detach the device
00B8 5F               (/home/strick/6809):00225                  clrb             flag no error
00B9 103F06           (/home/strick/6809):00226         Exit     os9   F$Exit     exit module
                      (/home/strick/6809):00227                                  
                      (/home/strick/6809):00228         ********************************************************************
                      (/home/strick/6809):00229         * clear our working memory area
                      (/home/strick/6809):00230         ********************************************************************
                      (/home/strick/6809):00231                                  
00BC 314A             (/home/strick/6809):00232         ClrWork  leay  diskpath,u point to work area
00BE 3420             (/home/strick/6809):00233                  pshs  y          save that
00C0 31C900C6         (/home/strick/6809):00234                  leay  >LSN0,u    get size of area
00C4 6FA2             (/home/strick/6809):00235         ClrOne   clr   ,-y        clear it down
00C6 10ACE4           (/home/strick/6809):00236                  cmpy  ,s         at begin?
00C9 22F9             (/home/strick/6809):00237                  bhi   ClrOne     not yet,
00CB 6FC900C0         (/home/strick/6809):00238                  clr   IsDragon,u Assume we are not formatting a dragon disk
00CF 6FC900C4         (/home/strick/6809):00239                  clr   AddedSysSecs,u Clear aditional system sectors
00D3 6FC900C5         (/home/strick/6809):00240                  clr   AddedSysSecs+1,u
00D7 35A0             (/home/strick/6809):00241                  puls  pc,y       done
                      (/home/strick/6809):00242                                  
                      (/home/strick/6809):00243         ********************************************************************
                      (/home/strick/6809):00244         * get rbf device name and open it
                      (/home/strick/6809):00245         ********************************************************************
                      (/home/strick/6809):00246                                  
00D9 A680             (/home/strick/6809):00247         OpenDev  lda   ,x+        get char at X
00DB 812F             (/home/strick/6809):00248                  cmpa  #PDELIM    pathlist delimiter?
00DD 2705             (/home/strick/6809):00249                  beq   PrsPrm     branch if so
00DF C6D7             (/home/strick/6809):00250         BadPath  ldb   #E$BPNam   else set bad pathname
00E1 160977           (/home/strick/6809):00251                  lbra  PrtError   and print error
00E4 103F10           (/home/strick/6809):00252         PrsPrm   os9   F$PrsNam   parse pathname
00E7 10250970         (/home/strick/6809):00253                  lbcs  PrtError   branch if illegal (has additional pathlist element)
00EB 862F             (/home/strick/6809):00254                  lda   #PDELIM    get pathlist name separator
00ED A1A4             (/home/strick/6809):00255                  cmpa  ,y         another pathlist separator?
00EF 27EE             (/home/strick/6809):00256                  beq   BadPath    yes, set bad pathname
00F1 109F2C           (/home/strick/6809):00257                  sty   <u0022     no, save end of pathname
00F4 31C858           (/home/strick/6809):00258                  leay  <prmbuf,u  point to pathname buffer
00F7 A7A0             (/home/strick/6809):00259         MovNam   sta   ,y+        save pathname character
00F9 A680             (/home/strick/6809):00260                  lda   ,x+        get next pathname character
00FB 5A               (/home/strick/6809):00261                  decb             decrement pathname size
00FC 2AF9             (/home/strick/6809):00262                  bpl   MovNam     got full pathname?
00FE 30C859           (/home/strick/6809):00263                  leax  <prmbuf+1,u get pathname for I$Attach
0101 8620             (/home/strick/6809):00264                  lda   #C$SPAC    space character
0103 A7A4             (/home/strick/6809):00265                  sta   ,y         delimit pathname
0105 4F               (/home/strick/6809):00266                  clra             get access mode
0106 103F80           (/home/strick/6809):00267                  os9   I$Attach   attach the rbf device
0109 1025094E         (/home/strick/6809):00268                  lbcs  PrtError   if error print error and exit
010D DF50             (/home/strick/6809):00269                  stu   <dtentry   save device table entry
010F DE00             (/home/strick/6809):00270                  ldu   <savedu    get data pointer
0111 8640             (/home/strick/6809):00271                  lda   #PENTIR    delimit pathname
0113 C620             (/home/strick/6809):00272                  ldb   #C$SPAC    for os9 I$Open
0115 EDA4             (/home/strick/6809):00273                  std   ,y         do it now
0117 8602             (/home/strick/6809):00274                  lda   #WRITE.    get access mode
0119 30C858           (/home/strick/6809):00275                  leax  <prmbuf,u  get pathname
011C 103F84           (/home/strick/6809):00276                  os9   I$Open     open the rbf device
011F 2598             (/home/strick/6809):00277                  bcs   Exit       exit if could not open it
0121 970A             (/home/strick/6809):00278                  sta   <diskpath  save path number
0123 39               (/home/strick/6809):00279                  rts              return
                      (/home/strick/6809):00280                                  
                      (/home/strick/6809):00281         ********************************************************************
                      (/home/strick/6809):00282         * get geometry and options, proceed (Y/N)
                      (/home/strick/6809):00283         ********************************************************************
                      (/home/strick/6809):00284                                  
0124 8D08             (/home/strick/6809):00285         Default  bsr   Geometry  
0126 1700B2           (/home/strick/6809):00286                  lbsr  DoOpts    
                      (/home/strick/6809):00287         *         lbsr  Proceed
0129 39               (/home/strick/6809):00288                  rts             
                      (/home/strick/6809):00289                                  
                      (/home/strick/6809):00290         ********************************************************************
                      (/home/strick/6809):00291         * get rbf device geometry
                      (/home/strick/6809):00292         ********************************************************************
                      (/home/strick/6809):00293                                  
012A 01020408         (/home/strick/6809):00294         ssztbl   fcb   $1,$2,$4,$8
                      (/home/strick/6809):00295                                  
012E 30C901C6         (/home/strick/6809):00296         Geometry leax  >optbuf,u  status packet address
0132 5F               (/home/strick/6809):00297                  clrb             SS.OPT function
0133 103F8D           (/home/strick/6809):00298                  os9   I$GetStt   get status packet
0136 2581             (/home/strick/6809):00299                  bcs   Exit       exit if error
0138 E607             (/home/strick/6809):00300                  ldb   PD.SID-PD.OPT,x number of surfaces
013A D71B             (/home/strick/6809):00301                  stb   <numsides  save it
013C E68812           (/home/strick/6809):00302                  ldb   PD.SToff-PD.OPT,x get track/sector offset values
013F 270C             (/home/strick/6809):00303                  beq   L0143      branch if they are zero
0141 1F98             (/home/strick/6809):00304                  tfr   b,a        yes, make copy
0143 840F             (/home/strick/6809):00305                  anda  #$0F       isolate track offset (lower 4 bits)
0145 9753             (/home/strick/6809):00306                  sta   <toffs     save it
0147 54               (/home/strick/6809):00307                  lsrb            
0148 54               (/home/strick/6809):00308                  lsrb            
0149 54               (/home/strick/6809):00309                  lsrb            
014A 54               (/home/strick/6809):00310                  lsrb             isolate sector offset
014B D754             (/home/strick/6809):00311                  stb   <soffs     save it
014D E604             (/home/strick/6809):00312         L0143    ldb   PD.DNS-PD.OPT,x density capability
014F D726             (/home/strick/6809):00313                  stb   <dns      
                      (/home/strick/6809):00314         *         pshs  b                save it
0151 C401             (/home/strick/6809):00315                  andb  #DNS.MFM   check double-density
0153 D718             (/home/strick/6809):00316                  stb   <mfm       save double-density (Yes/No)
0155 D719             (/home/strick/6809):00317                  stb   <maxmfm    save it again as maximum mfm
0157 D626             (/home/strick/6809):00318                  ldb   <dns       get saved PD.DNS byte
0159 54               (/home/strick/6809):00319                  lsrb             now 96 TPI bit is in bit pos 0
015A 3404             (/home/strick/6809):00320                  pshs  b          save it
015C C401             (/home/strick/6809):00321                  andb  #$01       tpi (0=48/135, 1=96)
015E D71A             (/home/strick/6809):00322                  stb   <tpi       save it
0160 3504             (/home/strick/6809):00323                  puls  b          get byte with bit shifted right once
0162 54               (/home/strick/6809):00324                  lsrb             shift original bit #2 into bit #0
0163 D419             (/home/strick/6809):00325                  andb  <maxmfm    AND with mfm bit (1 = MFM, 0 = FM)
0165 D755             (/home/strick/6809):00326                  stb   <t0sngdns  save as track 0 single density flag
                      (/home/strick/6809):00327         *         puls  b               get original PD.DNS byte
                      (/home/strick/6809):00328         * NOTE: We check the TYP.CCF at this point
0167 E603             (/home/strick/6809):00329                  ldb   PD.TYP-PD.OPT,x disk device type
0169 D725             (/home/strick/6809):00330                  stb   <dtype    
016B C420             (/home/strick/6809):00331                  andb  #TYP.CCF  
016D D756             (/home/strick/6809):00332                  stb   <cocofmt   store it
016F 2706             (/home/strick/6809):00333                  beq   L0169      branch if not CoCo format
0171 C601             (/home/strick/6809):00334                  ldb   #$01      
0173 D754             (/home/strick/6809):00335                  stb   <soffs     CoCo has a sector offset of 1
0175 0F53             (/home/strick/6809):00336                  clr   <toffs     and no track offset
0177 EC05             (/home/strick/6809):00337         L0169    ldd   PD.CYL-PD.OPT,x number of cylinders
0179 DD1C             (/home/strick/6809):00338                  std   <ncyls     save it
                      (/home/strick/6809):00339         *         ldb   PD.TYP-PD.OPT,x  disk device type
017B D625             (/home/strick/6809):00340                  ldb   <dtype     get IT.TYP byte
017D C403             (/home/strick/6809):00341                  andb  #TYPH.SSM  mask out all but sector size
017F 318CA8           (/home/strick/6809):00342                  leay  ssztbl,pcr
0182 E6A5             (/home/strick/6809):00343                  ldb   b,y       
0184 D724             (/home/strick/6809):00344                  stb   <bps       and save bytes per sector
0186 EC09             (/home/strick/6809):00345                  ldd   PD.SCT-PD.OPT,x default sectors/track
0188 DD20             (/home/strick/6809):00346                  std   <sectors   save it
018A EC0B             (/home/strick/6809):00347                  ldd   PD.T0S-PD.OPT,x default sectors/track tr00,s0
018C DD22             (/home/strick/6809):00348                  std   <sectors0  save it
018E E60D             (/home/strick/6809):00349                  ldb   PD.ILV-PD.OPT,x sector interleave offset
0190 D72B             (/home/strick/6809):00350                  stb   <interlv   save it
0192 E60E             (/home/strick/6809):00351                  ldb   PD.SAS-PD.OPT,x minimum sector allocation
0194 D727             (/home/strick/6809):00352                  stb   <sas       save it
0196 C601             (/home/strick/6809):00353                  ldb   #$01       default cluster size
0198 D72E             (/home/strick/6809):00354                  stb   <clustsiz  save it
019A D709             (/home/strick/6809):00355                  stb   <sectmode  and sector mode
                      (/home/strick/6809):00356         *** ADDED CODE -- BGP.  CHECK FOR PRESENCE OF SS.DSIZE
019C 9625             (/home/strick/6809):00357                  lda   <dtype     get type byte
019E 8510             (/home/strick/6809):00358                  bita  #TYPH.DSQ  drive size query bit set?
01A0 2723             (/home/strick/6809):00359                  beq   nogo@      no, don't bother querying the drive for its size
01A2 960A             (/home/strick/6809):00360                  lda   <diskpath  get disk path number
01A4 C626             (/home/strick/6809):00361                  ldb   #SS.DSize  disk size getstat
01A6 103F8D           (/home/strick/6809):00362                  os9   I$GetStt   attempt
01A9 251C             (/home/strick/6809):00363                  bcs   err@      
01AB 9724             (/home/strick/6809):00364                  sta   <bps       save bytes/sector
01AD D709             (/home/strick/6809):00365                  stb   <sectmode 
01AF 5D               (/home/strick/6809):00366                  tstb             LBA mode?
01B0 2609             (/home/strick/6809):00367                  bne   chs@      
01B2 1F10             (/home/strick/6809):00368                  tfr   x,d       
01B4 D702             (/home/strick/6809):00369                  stb   <totsects  save result...
01B6 109F03           (/home/strick/6809):00370                  sty   <totsects+1
01B9 200A             (/home/strick/6809):00371                  bra   nogo@     
01BB                  (/home/strick/6809):00372         chs@                     
01BB 9F1C             (/home/strick/6809):00373                  stx   <ncyls     save cylinders
01BD D71B             (/home/strick/6809):00374                  stb   <numsides  save sides
01BF 109F20           (/home/strick/6809):00375                  sty   <sectors   save sectors/track
01C2 109F22           (/home/strick/6809):00376                  sty   <sectors0  save sectors/track 0
01C5                  (/home/strick/6809):00377         nogo@                    
01C5 5F               (/home/strick/6809):00378                  clrb             no error
01C6 39               (/home/strick/6809):00379                  rts              return
01C7 3404             (/home/strick/6809):00380         err@     pshs  b         
01C9 308D08B2         (/home/strick/6809):00381                  leax  CapErr,pcr
01CD 8602             (/home/strick/6809):00382                  lda   #$02      
01CF 108E0064         (/home/strick/6809):00383                  ldy   #100      
01D3 103F8C           (/home/strick/6809):00384                  os9   I$WritLn  
01D6 3504             (/home/strick/6809):00385                  puls  b         
01D8 160880           (/home/strick/6809):00386                  lbra  PrtError  
                      (/home/strick/6809):00387                                  
                      (/home/strick/6809):00388         ********************************************************************
                      (/home/strick/6809):00389         * find a option and call, until all options are processed
                      (/home/strick/6809):00390         ********************************************************************
                      (/home/strick/6809):00391                                  
01DB 9E2C             (/home/strick/6809):00392         DoOpts   ldx   <u0022     option buffer
01DD 318D0025         (/home/strick/6809):00393         L0185    leay  >OptTbl,pcr point to table
01E1 8D11             (/home/strick/6809):00394                  bsr   L019C      check for match?
01E3 2518             (/home/strick/6809):00395                  bcs   L01A5      no, match
01E5 3406             (/home/strick/6809):00396                  pshs  b,a        save d register
01E7 EC22             (/home/strick/6809):00397                  ldd   $02,y      get offset value
01E9 31AB             (/home/strick/6809):00398                  leay  d,y        make function address
01EB 3506             (/home/strick/6809):00399                  puls  b,a        restore d register
01ED ADA4             (/home/strick/6809):00400                  jsr   ,y         call function
01EF 24EC             (/home/strick/6809):00401                  bcc   L0185      finished good?
01F1 16FEC5           (/home/strick/6809):00402                  lbra  Exit       no, exit
01F4 A680             (/home/strick/6809):00403         L019C    lda   ,x+        get option character
01F6 A1A4             (/home/strick/6809):00404         L019E    cmpa  ,y         is it in the table?
01F8 2604             (/home/strick/6809):00405                  bne   L01A6      no, try the next one
01FA E621             (/home/strick/6809):00406                  ldb   $01,y      get return value
01FC 4F               (/home/strick/6809):00407                  clra             flag good
01FD 39               (/home/strick/6809):00408         L01A5    rts              return
01FE 3124             (/home/strick/6809):00409         L01A6    leay  $04,y      get next table location
0200 6DA4             (/home/strick/6809):00410                  tst   ,y         is it the end of the table?
0202 26F2             (/home/strick/6809):00411                  bne   L019E      no, try next location
0204 43               (/home/strick/6809):00412                  coma             yes, flag bad
0205 39               (/home/strick/6809):00413                  rts              return
                      (/home/strick/6809):00414                                  
                      (/home/strick/6809):00415         ********************************************************************
                      (/home/strick/6809):00416         * option command table
                      (/home/strick/6809):00417         ********************************************************************
                      (/home/strick/6809):00418                                  
0206                  (/home/strick/6809):00419         OptTbl                   
0206 52               (/home/strick/6809):00420         opt.1    fcc   /R/       
0207 59               (/home/strick/6809):00421                  fcc   /Y/       
0208 005D             (/home/strick/6809):00422                  fdb   DoReady-opt.1
020A 72               (/home/strick/6809):00423         opt.2    fcc   /r/       
020B 59               (/home/strick/6809):00424                  fcc   /Y/       
020C 0059             (/home/strick/6809):00425                  fdb   DoReady-opt.2
020E 53               (/home/strick/6809):00426         opt.3    fcc   /S/       
020F 20               (/home/strick/6809):00427                  fcc   / /       
0210 0049             (/home/strick/6809):00428                  fdb   DoDsity-opt.3
0212 73               (/home/strick/6809):00429         opt.4    fcc   /s/       
0213 20               (/home/strick/6809):00430                  fcc   / /       
0214 0045             (/home/strick/6809):00431                  fdb   DoDsity-opt.4
0216 44               (/home/strick/6809):00432         opt.5    fcc   /D/       
0217 4D               (/home/strick/6809):00433                  fcc   /M/       
0218 0041             (/home/strick/6809):00434                  fdb   DoDsity-opt.5
021A 64               (/home/strick/6809):00435         opt.6    fcc   /d/       
021B 4D               (/home/strick/6809):00436                  fcc   /M/       
021C 003D             (/home/strick/6809):00437                  fdb   DoDsity-opt.6
021E 22               (/home/strick/6809):00438         opt.7    fcc   /"/       
021F 00               (/home/strick/6809):00439                  fcb   $00       
0220 005B             (/home/strick/6809):00440                  fdb   DoQuote-opt.7
0222 3A               (/home/strick/6809):00441         opt.8    fcc   /:/       
0223 00               (/home/strick/6809):00442                  fcb   $00       
0224 008B             (/home/strick/6809):00443                  fdb   DoColon-opt.8
0226 2F               (/home/strick/6809):00444         opt.9    fcc   "/"       
0227 00               (/home/strick/6809):00445                  fcb   $00       
0228 00B3             (/home/strick/6809):00446                  fdb   DoClust-opt.9
022A 31               (/home/strick/6809):00447         opt.10   fcc   /1/       
022B 01               (/home/strick/6809):00448                  fcb   $01       
022C 003C             (/home/strick/6809):00449                  fdb   Do1-opt.10
022E 32               (/home/strick/6809):00450         opt.11   fcc   /2/       
022F 02               (/home/strick/6809):00451                  fcb   $02       
0230 0038             (/home/strick/6809):00452                  fdb   Do2-opt.11
0232 27               (/home/strick/6809):00453         opt.12   fcc   /'/       
0233 00               (/home/strick/6809):00454                  fcb   0         
0234 0073             (/home/strick/6809):00455                  fdb   DoSQuote-opt.12
0236 4C               (/home/strick/6809):00456         opt.13   fcc   /L/       
0237 01               (/home/strick/6809):00457                  fcb   $01       
0238 0038             (/home/strick/6809):00458                  fdb   DoL-opt.13
023A 6C               (/home/strick/6809):00459         opt.14   fcc   /l/       
023B 01               (/home/strick/6809):00460                  fcb   01        
023C 0034             (/home/strick/6809):00461                  fdb   DoL-opt.14
023E 28               (/home/strick/6809):00462         opt.15   fcc   /(/       
023F 00               (/home/strick/6809):00463                  fcb   $00       
0240 0024             (/home/strick/6809):00464                  fdb   DoLParen-opt.15
0242 29               (/home/strick/6809):00465         opt.16   fcc   /)/       
0243 00               (/home/strick/6809):00466                  fcb   $00       
0244 0020             (/home/strick/6809):00467                  fdb   DoRParen-opt.16
0246 2C               (/home/strick/6809):00468         opt.17   fcc   /,/       
0247 00               (/home/strick/6809):00469                  fcb   $00       
0248 001C             (/home/strick/6809):00470                  fdb   DoComa-opt.17
024A 20               (/home/strick/6809):00471         opt.18   fcb   C$SPAC    
024B 00               (/home/strick/6809):00472                  fcb   00        
024C 0018             (/home/strick/6809):00473                  fdb   DoSpace-opt.18
                      (/home/strick/6809):00474                                  
024E 46               (/home/strick/6809):00475         opt.19   fcb   'F       
024F 20               (/home/strick/6809):00476                  fcb   '          '
0250 006C             (/home/strick/6809):00477                  fdb   DoFormat-opt.19
0252 66               (/home/strick/6809):00478         opt.20   fcb   'f       
0253 20               (/home/strick/6809):00479                  fcb   '          '
0254 0068             (/home/strick/6809):00480                  fdb   DoFormat-opt.20
                      (/home/strick/6809):00481                                  
                      (/home/strick/6809):00482                                  
0256 00               (/home/strick/6809):00483                  fcb   $00       
                      (/home/strick/6809):00484                                  
                      (/home/strick/6809):00485         ********************************************************************
                      (/home/strick/6809):00486         * S/D - density; single or double
                      (/home/strick/6809):00487         ********************************************************************
                      (/home/strick/6809):00488                                  
0257 D119             (/home/strick/6809):00489         DoDsity  cmpb  <maxmfm    compare against maximum
0259 2E17             (/home/strick/6809):00490                  bgt   OptAbort   if greater than, abort
025B D155             (/home/strick/6809):00491                  cmpb  <t0sngdns 
025D 2D13             (/home/strick/6809):00492                  blt   OptAbort  
025F D718             (/home/strick/6809):00493                  stb   <mfm      
0261 5F               (/home/strick/6809):00494                  clrb            
                      (/home/strick/6809):00495                                  
                      (/home/strick/6809):00496         ********************************************************************
                      (/home/strick/6809):00497         * skip white space
                      (/home/strick/6809):00498         ********************************************************************
                      (/home/strick/6809):00499                                  
0262                  (/home/strick/6809):00500         DoComa                   
0262                  (/home/strick/6809):00501         DoRParen                 
0262                  (/home/strick/6809):00502         DoLParen                 
0262 39               (/home/strick/6809):00503         DoSpace  rts             
                      (/home/strick/6809):00504                                  
                      (/home/strick/6809):00505         ********************************************************************
                      (/home/strick/6809):00506         * set ready flag - skip warn messages
                      (/home/strick/6809):00507         ********************************************************************
                      (/home/strick/6809):00508                                  
0263 D728             (/home/strick/6809):00509         DoReady  stb   <ready     set and save ready
0265 39               (/home/strick/6809):00510                  rts              return
                      (/home/strick/6809):00511                                  
                      (/home/strick/6809):00512         ********************************************************************
                      (/home/strick/6809):00513         * 1/2 - number of sides
                      (/home/strick/6809):00514         ********************************************************************
                      (/home/strick/6809):00515                                  
0266                  (/home/strick/6809):00516         Do2                      
0266 D11B             (/home/strick/6809):00517         Do1      cmpb  <numsides 
0268 2E08             (/home/strick/6809):00518                  bgt   OptAbort  
026A D71B             (/home/strick/6809):00519                  stb   <numsides 
026C 5F               (/home/strick/6809):00520                  clrb            
026D 39               (/home/strick/6809):00521                  rts             
                      (/home/strick/6809):00522                                  
                      (/home/strick/6809):00523         ********************************************************************
                      (/home/strick/6809):00524         * only do a logical format on the rbf device
                      (/home/strick/6809):00525         ********************************************************************
                      (/home/strick/6809):00526                                  
026E D757             (/home/strick/6809):00527         DoL      stb   <dolog     do a logical format
0270 5F               (/home/strick/6809):00528                  clrb             did option
0271 39               (/home/strick/6809):00529                  rts              return
                      (/home/strick/6809):00530                                  
                      (/home/strick/6809):00531         ********************************************************************
                      (/home/strick/6809):00532         * not a option - show abort message and exit
                      (/home/strick/6809):00533         ********************************************************************
                      (/home/strick/6809):00534                                  
0272 308D086D         (/home/strick/6809):00535         OptAbort leax  >AbortOp,pcr Option not allowed message
0276 16055E           (/home/strick/6809):00536                  lbra  PExit      print message and exit
                      (/home/strick/6809):00537                                  
                      (/home/strick/6809):00538         ********************************************************************
                      (/home/strick/6809):00539         * double quoted option "disk name" save name in dskname
                      (/home/strick/6809):00540         ********************************************************************
                      (/home/strick/6809):00541                                  
0279 31C878           (/home/strick/6809):00542         DoQuote  leay  <dskname,u delimited buffer
027C C620             (/home/strick/6809):00543                  ldb   #C$SPAC    delimited size
027E A680             (/home/strick/6809):00544         koQuote  lda   ,x+        delimited character
0280 8122             (/home/strick/6809):00545                  cmpa  #'"        is end quote?
0282 2711             (/home/strick/6809):00546                  beq   L0221      must be done
0284 A7A0             (/home/strick/6809):00547                  sta   ,y+        no, save character
0286 5A               (/home/strick/6809):00548                  decb             decrement name size
0287 26F5             (/home/strick/6809):00549                  bne   KoQuote    get all 32 of them or quote
0289 E680             (/home/strick/6809):00550         L0215    ldb   ,x+        next delimited character
028B C122             (/home/strick/6809):00551                  cmpb  #'"        find end quote?
028D 270C             (/home/strick/6809):00552                  beq   L0227      yes, back up and mark it
028F C120             (/home/strick/6809):00553                  cmpb  #C$SPAC    skip space character?
0291 24F6             (/home/strick/6809):00554                  bcc   L0215      yes, get next one
0293 2006             (/home/strick/6809):00555                  bra   L0227      no, mark it's end
0295 8620             (/home/strick/6809):00556         L0221    lda   #C$SPAC    get space character
0297 C120             (/home/strick/6809):00557                  cmpb  #C$SPAC    any delimited characters?
0299 2704             (/home/strick/6809):00558                  beq   L022B      no, mark it's end
029B 313F             (/home/strick/6809):00559         L0227    leay  -$01,y     yes, back up
029D A6A4             (/home/strick/6809):00560                  lda   ,y         get saved character
029F 8B80             (/home/strick/6809):00561         L022B    adda  #$80       make it negative
02A1 A7A4             (/home/strick/6809):00562                  sta   ,y         mark it's end
02A3 5F               (/home/strick/6809):00563                  clrb             did option
02A4 39               (/home/strick/6809):00564                  rts              return
                      (/home/strick/6809):00565                                  
                      (/home/strick/6809):00566         ********************************************************************
                      (/home/strick/6809):00567         * single quoted option 'number of cylinders' save number in ncyls
                      (/home/strick/6809):00568         ********************************************************************
                      (/home/strick/6809):00569                                  
02A5 17077E           (/home/strick/6809):00570         DoSQuote lbsr  Decimal    procces number of cylinders
02A8 DC29             (/home/strick/6809):00571                  ldd   <dresult   get it
02AA DD1C             (/home/strick/6809):00572                  std   <ncyls     save it
02AC 39               (/home/strick/6809):00573                  rts              return
                      (/home/strick/6809):00574                                  
                      (/home/strick/6809):00575         ********************************************************************
                      (/home/strick/6809):00576         * colon quoted option :interleave value: save value in interlv
                      (/home/strick/6809):00577         ********************************************************************
                      (/home/strick/6809):00578                                  
02AD 170776           (/home/strick/6809):00579         DoColon  lbsr  Decimal    proccess interleave value 
02B0 DC29             (/home/strick/6809):00580                  ldd   <dresult   get it
02B2 4D               (/home/strick/6809):00581                  tsta             answer out of bounds?
02B3 2702             (/home/strick/6809):00582                  beq   L0243      no, save it
02B5 C601             (/home/strick/6809):00583                  ldb   #$01       yes, default size
02B7 D72B             (/home/strick/6809):00584         L0243    stb   <interlv   save it
02B9 39               (/home/strick/6809):00585                  rts              return
                      (/home/strick/6809):00586                                  
                      (/home/strick/6809):00587         ********************************************************************
                      (/home/strick/6809):00588         * Format option : formatting a CoCo or a Dragon disk ?
                      (/home/strick/6809):00589         ********************************************************************
                      (/home/strick/6809):00590                                  
02BA                  (/home/strick/6809):00591         DoFormat                 
02BA A680             (/home/strick/6809):00592                  lda   ,x+        Get next char
02BC 8144             (/home/strick/6809):00593                  cmpa  #'D       Do a dragon disk ?
02BE 270A             (/home/strick/6809):00594                  beq   DoFmtDragon
02C0 8164             (/home/strick/6809):00595                  cmpa  #'d      
02C2 2606             (/home/strick/6809):00596                  bne   DoFmtDragon
02C4 6FC900C0         (/home/strick/6809):00597                  clr   IsDragon,u Mark it as a normal CoCo (or other) disk
02C8 5F               (/home/strick/6809):00598                  clrb            
02C9 39               (/home/strick/6809):00599                  rts             
                      (/home/strick/6809):00600                                  
02CA                  (/home/strick/6809):00601         DoFmtDragon                 
02CA 8664             (/home/strick/6809):00602                  lda   #DragonFlag Mark as Dragon disk
02CC A7C900C0         (/home/strick/6809):00603                  sta   IsDragon,u
                      (/home/strick/6809):00604                                  
02D0 CC0010           (/home/strick/6809):00605                  ldd   #DragonBootSize Setup additional system sectors
02D3 EDC900C4         (/home/strick/6809):00606                  std   AddedSysSecs,u
                      (/home/strick/6809):00607                                  
02D7 5F               (/home/strick/6809):00608                  clrb            
02D8 39               (/home/strick/6809):00609                  rts             
                      (/home/strick/6809):00610                                  
                      (/home/strick/6809):00611         ********************************************************************
                      (/home/strick/6809):00612         * quoted option /cluster size/ save size in clustsiz
                      (/home/strick/6809):00613         * cluster size is in decimal. The number of sectors
                      (/home/strick/6809):00614         * in a cluster must be a power of 2 and the number
                      (/home/strick/6809):00615         * should max out at 32 for coco os9
                      (/home/strick/6809):00616         ********************************************************************
                      (/home/strick/6809):00617                                  
02D9 17074A           (/home/strick/6809):00618         DoClust  lbsr  Decimal    proccess cluster size
02DC DC29             (/home/strick/6809):00619                  ldd   <dresult   get it
02DE 4D               (/home/strick/6809):00620                  tsta             answer out of bounds?
02DF 2702             (/home/strick/6809):00621                  beq   L0250      no, save it
02E1 C601             (/home/strick/6809):00622                  ldb   #$01       yes, default size
02E3 D72E             (/home/strick/6809):00623         L0250    stb   <clustsiz  save it
02E5 D72F             (/home/strick/6809):00624                  stb   <clustspecified save fact that cluster was specified
02E7 50               (/home/strick/6809):00625                  negb             get two's complement
02E8 5A               (/home/strick/6809):00626                  decb             power of 2
02E9 D42E             (/home/strick/6809):00627                  andb  <clustsiz  in range?
02EB 2704             (/home/strick/6809):00628                  beq   L025C      yes, skip ahead
02ED C601             (/home/strick/6809):00629                  ldb   #$01       no, default size
02EF D72E             (/home/strick/6809):00630                  stb   <clustsiz  save it
02F1 5F               (/home/strick/6809):00631         L025C    clrb             did option
02F2 39               (/home/strick/6809):00632         L025D    rts              return
                      (/home/strick/6809):00633                                  
                      (/home/strick/6809):00634         ********************************************************************
                      (/home/strick/6809):00635         * print title, format (Y/N), and get response
                      (/home/strick/6809):00636         ********************************************************************
                      (/home/strick/6809):00637                                  
02F3                  (/home/strick/6809):00638         Proceed                  
                      (/home/strick/6809):00639         *         leax  >Title,pcr       coco formatter message
                      (/home/strick/6809):00640         *         lbsr  PrintLn          print it
02F3 0D25             (/home/strick/6809):00641                  tst   <dtype     disk type...
02F5 2B05             (/home/strick/6809):00642                  bmi   h@        
02F7 170B3B           (/home/strick/6809):00643                  lbsr  FloppySummary
02FA 2003             (/home/strick/6809):00644                  bra   n@        
02FC 170B18           (/home/strick/6809):00645         h@       lbsr  HDSummary 
02FF 31C901C6         (/home/strick/6809):00646         n@       leay  >optbuf,u  point to option buffer
0303 AE2B             (/home/strick/6809):00647                  ldx   PD.T0S-PD.OPT,y default sectors/track tr00,s0
0305 0D18             (/home/strick/6809):00648                  tst   <mfm       double-density?
0307 2702             (/home/strick/6809):00649                  beq   L0271      no,
0309 AE29             (/home/strick/6809):00650                  ldx   PD.SCT-PD.OPT,y default sectors/track
030B 9F20             (/home/strick/6809):00651         L0271    stx   <sectors   save it
030D 17005C           (/home/strick/6809):00652                  lbsr  LineFD    
0310 308D0750         (/home/strick/6809):00653                  leax  >FmtMsg,pcr formatting drive message
0314 108E0013         (/home/strick/6809):00654                  ldy   #FmtMLen   length of message
0318 170059           (/home/strick/6809):00655                  lbsr  Print      print it
031B 30C858           (/home/strick/6809):00656                  leax  <prmbuf,u  input buffer
031E 1F12             (/home/strick/6809):00657                  tfr   x,y        put it in y
0320 A6A0             (/home/strick/6809):00658         L0283    lda   ,y+        get input
0322 8140             (/home/strick/6809):00659                  cmpa  #PENTIR    proceed (y/n)?
0324 26FA             (/home/strick/6809):00660                  bne   L0283      no, wait for yes
0326 3420             (/home/strick/6809):00661                  pshs  y          save input pointer
0328 860D             (/home/strick/6809):00662                  lda   #C$CR      carriage return
032A A73F             (/home/strick/6809):00663                  sta   -$01,y     store it over input
032C 170041           (/home/strick/6809):00664                  lbsr  PrintLn    print line
032F 3520             (/home/strick/6809):00665                  puls  y          get pointer
0331 8640             (/home/strick/6809):00666                  lda   #PENTIR   
0333 A73F             (/home/strick/6809):00667                  sta   -$01,y    
0335 9628             (/home/strick/6809):00668                  lda   <ready     ok to proceed? ready
0337 2611             (/home/strick/6809):00669                  bne   L02BC      yes, were ready skip ahead
                      (/home/strick/6809):00670         *         tst   <dtype           is this a floppy or hard drive?
                      (/home/strick/6809):00671         *         bpl   L02AB            it is a floppy
                      (/home/strick/6809):00672         *         leax  >HDFmt,pcr       it is a hard drive
                      (/home/strick/6809):00673         *         ldy   #$002A           length of message
                      (/home/strick/6809):00674         *         lbsr  Print            print message
0339 308D073A         (/home/strick/6809):00675         L02AB    leax  >Query,pcr query message
033D 108E0008         (/home/strick/6809):00676                  ldy   #QueryLen  length of message
0341 170036           (/home/strick/6809):00677                  lbsr  Input      show it and get response (Y/N)
0344 84DF             (/home/strick/6809):00678                  anda  #$DF       make it upper case
0346 8159             (/home/strick/6809):00679                  cmpa  #'Y        answered yes?
0348 2619             (/home/strick/6809):00680                  bne   L02D5      no, check for no?
034A 0D25             (/home/strick/6809):00681         L02BC    tst   <dtype     formatting hard drive?
034C 2AA4             (/home/strick/6809):00682                  bpl   L025D      no, return skip hard disk warn message
034E 308D082F         (/home/strick/6809):00683                  leax  >HDFmt,pcr show hard disk warn message
0352 108E0024         (/home/strick/6809):00684                  ldy   #HDFmtLen  size of the message
0356 170021           (/home/strick/6809):00685                  lbsr  Input      show it and get response (Y/N)
0359 84DF             (/home/strick/6809):00686                  anda  #$DF       make it upper case
035B 8159             (/home/strick/6809):00687                  cmpa  #'Y        answered yes?
035D 2793             (/home/strick/6809):00688                  beq   L025D      yes, return
035F 5F               (/home/strick/6809):00689                  clrb             clear error
0360 16FD56           (/home/strick/6809):00690                  lbra  Exit       exit
0363 5F               (/home/strick/6809):00691         L02D5    clrb             clear error
0364 814E             (/home/strick/6809):00692                  cmpa  #'N        answered no?
0366 1027FD4F         (/home/strick/6809):00693                  lbeq  Exit       yes, exit
036A 20CD             (/home/strick/6809):00694                  bra   L02AB      no, get a (Y/N) answer
                      (/home/strick/6809):00695                                  
                      (/home/strick/6809):00696         ********************************************************************
                      (/home/strick/6809):00697         * print usage message and return
                      (/home/strick/6809):00698         ********************************************************************
                      (/home/strick/6809):00699                                  
036C 308D07F7         (/home/strick/6809):00700         LineFD   leax  >CrRtn,pcr point to line feed
0370 108E0050         (/home/strick/6809):00701         PrintLn  ldy   #80        size of message
0374 8601             (/home/strick/6809):00702         Print    lda   #$01       standard output path
0376 103F8C           (/home/strick/6809):00703                  os9   I$WritLn   print line
0379 39               (/home/strick/6809):00704                  rts              return
                      (/home/strick/6809):00705                                  
                      (/home/strick/6809):00706         ********************************************************************
                      (/home/strick/6809):00707         * print message and get response
                      (/home/strick/6809):00708         * entry: x holds data address y holds data size
                      (/home/strick/6809):00709         *  exit: a holds response (ascii character)
                      (/home/strick/6809):00710         ********************************************************************
                      (/home/strick/6809):00711                                  
037A 3476             (/home/strick/6809):00712         Input    pshs  u,y,x,b,a  save registers
037C 8DF6             (/home/strick/6809):00713                  bsr   Print      print line
037E 30E4             (/home/strick/6809):00714                  leax  ,s         get data address
0380 108E0001         (/home/strick/6809):00715                  ldy   #$0001     data size
0384 4F               (/home/strick/6809):00716                  clra             standard input
0385 103F89           (/home/strick/6809):00717                  os9   I$Read     read it
0388 1025FD2D         (/home/strick/6809):00718                  lbcs  Exit       exit on error
038C 8DDE             (/home/strick/6809):00719                  bsr   LineFD     print line feed
038E 3576             (/home/strick/6809):00720                  puls  u,y,x,b,a  restore stack
0390 847F             (/home/strick/6809):00721                  anda  #$7F       make it ascii
0392 39               (/home/strick/6809):00722                  rts              return
                      (/home/strick/6809):00723                                  
                      (/home/strick/6809):00724         ********************************************************************
                      (/home/strick/6809):00725         * get capability of the rbf device
                      (/home/strick/6809):00726         ********************************************************************
                      (/home/strick/6809):00727                                  
0393 308DFC7D         (/home/strick/6809):00728         GetDTyp  leax  >hdsdat,pcr assume hard drive data for now
0397 9F12             (/home/strick/6809):00729                  stx   <trk0data  sector data pointer
0399 D625             (/home/strick/6809):00730                  ldb   <dtype     get disk drive type
039B C5C0             (/home/strick/6809):00731                  bitb  #TYP.HARD+TYP.NSF hard disk or non-standard type?
039D 2612             (/home/strick/6809):00732                  bne   L0323      yes, branch
039F 0D56             (/home/strick/6809):00733                  tst   <cocofmt   is this a COCO formatted disk?
03A1 2706             (/home/strick/6809):00734                  beq   L031B      branch if not
03A3 308DFCC9         (/home/strick/6809):00735                  leax  >dctdat,pcr point to COCO track data
03A7 2012             (/home/strick/6809):00736                  bra   L032D     
03A9 308DFC6D         (/home/strick/6809):00737         L031B    leax  >sgtdat,pcr point to single density track data
03AD 0D18             (/home/strick/6809):00738                  tst   <mfm       double-density?
03AF 270A             (/home/strick/6809):00739                  beq   L032D      no, save off X
03B1 9F12             (/home/strick/6809):00740         L0323    stx   <trk0data 
03B3 308DFC8C         (/home/strick/6809):00741                  leax  >dbtdat,pcr
03B7 0D55             (/home/strick/6809):00742                  tst   <t0sngdns  track 0 is single density?
03B9 2702             (/home/strick/6809):00743                  beq   L032F      branch if so
03BB 9F12             (/home/strick/6809):00744         L032D    stx   <trk0data  save as track 0 data
03BD 9F14             (/home/strick/6809):00745         L032F    stx   <trkdata   and !0 track data
03BF 0D09             (/home/strick/6809):00746                  tst   <sectmode  LBA values already in place?
03C1 2726             (/home/strick/6809):00747                  beq   ack@      
                      (/home/strick/6809):00748         * Compute total sectors from C/H/S
03C3 4F               (/home/strick/6809):00749                  clra            
03C4 D61B             (/home/strick/6809):00750                  ldb   <numsides  get number of sides
03C6 1F02             (/home/strick/6809):00751                  tfr   d,y       
03C8 5F               (/home/strick/6809):00752                  clrb             D = 0
03C9 9E1C             (/home/strick/6809):00753                  ldx   <ncyls    
03CB 8D60             (/home/strick/6809):00754                  bsr   Mulbxty    multiply B,X*Y
                      (/home/strick/6809):00755         * B,X now is numsides * numcyls
                      (/home/strick/6809):00756         * Subtract one from B,X because t0s will be added later
03CD 1E01             (/home/strick/6809):00757                  exg   d,x       
03CF 830001           (/home/strick/6809):00758                  subd  #$0001    
03D2 2402             (/home/strick/6809):00759                  bcc   L0344     
03D4 301F             (/home/strick/6809):00760                  leax  -$01,x    
03D6 1E01             (/home/strick/6809):00761         L0344    exg   d,x       
03D8 109E20           (/home/strick/6809):00762                  ldy   <sectors  
03DB 8D50             (/home/strick/6809):00763                  bsr   Mulbxty    multiply B,X*Y
                      (/home/strick/6809):00764         * B,X now is numsides * numcyls * sectors
03DD 1E01             (/home/strick/6809):00765                  exg   d,x       
                      (/home/strick/6809):00766         * Add in sectors/track0
03DF D322             (/home/strick/6809):00767                  addd  <sectors0 
03E1 DD03             (/home/strick/6809):00768                  std   <totsects+1
03E3 1E01             (/home/strick/6809):00769                  exg   d,x       
03E5 C900             (/home/strick/6809):00770                  adcb  #$00      
03E7 D702             (/home/strick/6809):00771                  stb   <totsects 
03E9                  (/home/strick/6809):00772         ack@                     
03E9 9625             (/home/strick/6809):00773                  lda   <dtype     get type byte
03EB 8510             (/home/strick/6809):00774                  bita  #TYPH.DSQ  drive size query bit set?
03ED 2710             (/home/strick/6809):00775                  beq   mlex       branch if so (we don't take bps into account here)
                      (/home/strick/6809):00776         **** We now multiply totsects * the bytes per sector
03EF 0A24             (/home/strick/6809):00777                  dec   <bps       decrement bytes per sector (8=7,4=3,2=1,1=0)
03F1 270C             (/home/strick/6809):00778                  beq   mlex       exit out ofloop if zero
03F3 0804             (/home/strick/6809):00779         ml@      lsl   <totsects+2 else multiply by 2
03F5 0903             (/home/strick/6809):00780                  rol   <totsects+1
03F7 0902             (/home/strick/6809):00781                  rol   <totsects 
03F9 0424             (/home/strick/6809):00782                  lsr   <bps       shift out bits
03FB 0D24             (/home/strick/6809):00783                  tst   <bps      
03FD 26F4             (/home/strick/6809):00784                  bne   ml@       
                      (/home/strick/6809):00785                                  
                      (/home/strick/6809):00786         ************************************************
                      (/home/strick/6809):00787         * Calculates the correct cluster size & size of bitmap in bytes
                      (/home/strick/6809):00788                                  
03FF 8608             (/home/strick/6809):00789         mlex     lda   #$08      
0401 3402             (/home/strick/6809):00790                  pshs  a         
0403 9E03             (/home/strick/6809):00791                  ldx   <totsects+1
0405 D602             (/home/strick/6809):00792                  ldb   <totsects 
0407 8D6D             (/home/strick/6809):00793                  bsr   Div24by8   divide totsects by 8
0409 962E             (/home/strick/6809):00794                  lda   <clustsiz  get current cluster size
040B 3402             (/home/strick/6809):00795                  pshs  a          save it as divisor
040D 8D67             (/home/strick/6809):00796                  bsr   Div24by8  
040F 5D               (/home/strick/6809):00797                  tstb             B = 0? (more than $FFFF bytes required ?)
0410 2716             (/home/strick/6809):00798                  beq   L0374      branch if so
                      (/home/strick/6809):00799                                  
                      (/home/strick/6809):00800         * Too small a cluster size comes here
0412 0D2F             (/home/strick/6809):00801                  tst   <clustspecified did user specify cluster on command line?
0414 2608             (/home/strick/6809):00802                  bne   u@         branch if so (show error message)
0416 082E             (/home/strick/6809):00803                  lsl   <clustsiz  multiply by 2
0418 2504             (/home/strick/6809):00804                  bcs   u@         if carry set to stop
041A 3262             (/home/strick/6809):00805                  leas  2,s        else eat stack
041C 20E1             (/home/strick/6809):00806                  bra   mlex       and continue trying
041E 308D0730         (/home/strick/6809):00807         u@       leax  >ClustMsg,pcr cluster size mismatch message
0422 17FF4B           (/home/strick/6809):00808                  lbsr  PrintLn    print mismatch message
0425 160241           (/home/strick/6809):00809                  lbra  L05B1      abort message and exit
0428 3262             (/home/strick/6809):00810         L0374    leas  $02,s     
042A 9F30             (/home/strick/6809):00811                  stx   <NumBitmapBytes Save Size of bitmap in bytes
042C 39               (/home/strick/6809):00812                  rts              return
                      (/home/strick/6809):00813                                  
                      (/home/strick/6809):00814         ********************************************************************
                      (/home/strick/6809):00815         * multiply (mlbxty B:X * Y)
                      (/home/strick/6809):00816         ********************************************************************
                      (/home/strick/6809):00817                                  
042D 8608             (/home/strick/6809):00818         Mulbxty  lda   #$08       make stack space
042F 6FE2             (/home/strick/6809):00819         MulClr   clr   ,-s        clear the space
0431 4A               (/home/strick/6809):00820                  deca             cleared?
0432 26FB             (/home/strick/6809):00821                  bne   MulClr     no,
0434 10AFE4           (/home/strick/6809):00822                  sty   ,s        
0437 E762             (/home/strick/6809):00823                  stb   $02,s     
0439 AF63             (/home/strick/6809):00824                  stx   $03,s     
043B ECE4             (/home/strick/6809):00825         MulLoop  ldd   ,s         we done?
043D 271F             (/home/strick/6809):00826                  beq   MulZer     yes, clean up
043F 44               (/home/strick/6809):00827                  lsra            
0440 56               (/home/strick/6809):00828                  rorb            
0441 EDE4             (/home/strick/6809):00829                  std   ,s        
0443 240C             (/home/strick/6809):00830                  bcc   MulNoC    
0445 EC63             (/home/strick/6809):00831                  ldd   $03,s     
0447 E366             (/home/strick/6809):00832                  addd  $06,s     
0449 ED66             (/home/strick/6809):00833                  std   $06,s     
044B A662             (/home/strick/6809):00834                  lda   $02,s     
044D A965             (/home/strick/6809):00835                  adca  $05,s     
044F A765             (/home/strick/6809):00836                  sta   $05,s     
0451 EC63             (/home/strick/6809):00837         MulNoC   ldd   $03,s     
0453 58               (/home/strick/6809):00838                  lslb            
0454 49               (/home/strick/6809):00839                  rola            
0455 ED63             (/home/strick/6809):00840                  std   $03,s     
0457 A662             (/home/strick/6809):00841                  lda   $02,s     
0459 49               (/home/strick/6809):00842                  rola            
045A A762             (/home/strick/6809):00843                  sta   $02,s     
045C 20DD             (/home/strick/6809):00844                  bra   MulLoop    continue rest
045E 3265             (/home/strick/6809):00845         MulZer   leas  $05,s      clean up space
0460 3594             (/home/strick/6809):00846                  puls  pc,x,b     pop results, return
                      (/home/strick/6809):00847                                  
                      (/home/strick/6809):00848         ********************************************************************
                      (/home/strick/6809):00849         * 24 bit divide (2,s = divisor, B:X = dividend, result in B:X)
                      (/home/strick/6809):00850         ********************************************************************
                      (/home/strick/6809):00851                                  
0462 3414             (/home/strick/6809):00852         L03AE    pshs  x,b        save X,B on stack
0464 64E4             (/home/strick/6809):00853                  lsr   ,s         divide B:X by 2
0466 6661             (/home/strick/6809):00854                  ror   $01,s     
0468 6662             (/home/strick/6809):00855                  ror   $02,s     
046A 3514             (/home/strick/6809):00856                  puls  x,b        retrieve B:X
046C 1E01             (/home/strick/6809):00857                  exg   d,x        exchange bits 15-0 in D,X
046E C900             (/home/strick/6809):00858                  adcb  #$00      
0470 8900             (/home/strick/6809):00859                  adca  #$00      
0472 1E01             (/home/strick/6809):00860                  exg   d,x       
0474 C900             (/home/strick/6809):00861                  adcb  #$00      
0476 6462             (/home/strick/6809):00862         Div24by8 lsr   $02,s     
0478 26E8             (/home/strick/6809):00863                  bne   L03AE     
047A 39               (/home/strick/6809):00864                  rts             
                      (/home/strick/6809):00865                                  
                      (/home/strick/6809):00866         ********************************************************************
                      (/home/strick/6809):00867         * format rbf device
                      (/home/strick/6809):00868         ********************************************************************
                      (/home/strick/6809):00869                                  
047B 0D57             (/home/strick/6809):00870         Format   tst   <dolog     doing a logical format?
047D 2619             (/home/strick/6809):00871                  bne   L03E4      yes, don't do this then
047F 0D25             (/home/strick/6809):00872                  tst   <dtype     test for hard drive from PD.TYP
0481 2A16             (/home/strick/6809):00873                  bpl   L03E5      branch if floppy
0483 308D071E         (/home/strick/6809):00874                  leax  >Both,pcr  PHYSICAL and LOGICAL? message
0487 108E0022         (/home/strick/6809):00875                  ldy   #BothLen   length of message
048B 17FEEC           (/home/strick/6809):00876                  lbsr  Input      print and get input
048E 84DF             (/home/strick/6809):00877                  anda  #$DF       make it upper case
0490 8159             (/home/strick/6809):00878                  cmpa  #'Y        is it yes?
0492 2705             (/home/strick/6809):00879                  beq   L03E5      yes,
0494 814E             (/home/strick/6809):00880                  cmpa  #'N        is it no?
0496 26E3             (/home/strick/6809):00881                  bne   Format     no,
0498 39               (/home/strick/6809):00882         L03E4    rts              return
0499 960A             (/home/strick/6809):00883         L03E5    lda   <diskpath  device path number
049B C603             (/home/strick/6809):00884                  ldb   #SS.Reset  reset device
049D 103F8E           (/home/strick/6809):00885                  os9   I$SetStt   at track zero
04A0 1025FC15         (/home/strick/6809):00886                  lbcs  Exit       exit if error
04A4 CC0000           (/home/strick/6809):00887                  ldd   #$0000     get current track
04A7 DD0B             (/home/strick/6809):00888                  std   <currtrak  save it
04A9 4C               (/home/strick/6809):00889                  inca             get current sector
04AA 970F             (/home/strick/6809):00890                  sta   <currsect  save it
04AC 0F0D             (/home/strick/6809):00891         L03F8    clr   <currside  clear current side
04AE 8D60             (/home/strick/6809):00892         L03FA    bsr   L045C     
04B0 30C900C6         (/home/strick/6809):00893                  leax  >LSN0,u    point to our LSN0 buffer
04B4 DC0B             (/home/strick/6809):00894                  ldd   <currtrak 
04B6 D352             (/home/strick/6809):00895                  addd  <u0048    
04B8 1F03             (/home/strick/6809):00896                  tfr   d,u       
04BA 5F               (/home/strick/6809):00897                  clrb            
04BB 0D56             (/home/strick/6809):00898                  tst   <cocofmt   do we format this as a COCO disk?
04BD 2610             (/home/strick/6809):00899                  bne   L041B      branch if so
04BF 0D18             (/home/strick/6809):00900                  tst   <mfm       single density?
04C1 270E             (/home/strick/6809):00901                  beq   L041D      branch if so
04C3 0D55             (/home/strick/6809):00902                  tst   <t0sngdns  track 0 single density?
04C5 2608             (/home/strick/6809):00903                  bne   L041B      branch if not
04C7 0D0C             (/home/strick/6809):00904                  tst   <currtrak+1 is current track 0?
04C9 2604             (/home/strick/6809):00905                  bne   L041B      branch if not
04CB 0D0D             (/home/strick/6809):00906                  tst   <currside  side is zero?
04CD 2702             (/home/strick/6809):00907                  beq   L041D      branch if 0
04CF CA02             (/home/strick/6809):00908         L041B    orb   #$02       else set side 1
04D1 0D1A             (/home/strick/6809):00909         L041D    tst   <tpi       48 tpi?
04D3 2702             (/home/strick/6809):00910                  beq   L0423      branch if so
04D5 CA04             (/home/strick/6809):00911                  orb   #$04       else set 96 tpi bit
04D7 960D             (/home/strick/6809):00912         L0423    lda   <currside  get current side
04D9 2702             (/home/strick/6809):00913                  beq   L0429      branch if 0
04DB CA01             (/home/strick/6809):00914                  orb   #$01      
04DD 1F02             (/home/strick/6809):00915         L0429    tfr   d,y        get side/density bits
04DF 960A             (/home/strick/6809):00916                  lda   <diskpath  rbf device path number
04E1 C604             (/home/strick/6809):00917                  ldb   #SS.WTrk   format (write) track
04E3 103F8E           (/home/strick/6809):00918                  os9   I$SetStt   do format it
04E6 1025FBCF         (/home/strick/6809):00919                  lbcs  Exit       exit if error
04EA DE00             (/home/strick/6809):00920                  ldu   <savedu    get u pointer
04EC D60D             (/home/strick/6809):00921                  ldb   <currside  get current side
04EE 5C               (/home/strick/6809):00922                  incb             increment
04EF D70D             (/home/strick/6809):00923                  stb   <currside  and store
04F1 D11B             (/home/strick/6809):00924                  cmpb  <numsides  compare against number of sides
04F3 25B9             (/home/strick/6809):00925                  bcs   L03FA      branch if greater than
04F5 DC0B             (/home/strick/6809):00926                  ldd   <currtrak  get current track
04F7 C30001           (/home/strick/6809):00927                  addd  #$0001     increment it
04FA DD0B             (/home/strick/6809):00928                  std   <currtrak  save it
04FC 10931C           (/home/strick/6809):00929                  cmpd  <ncyls     did all tracks?
04FF 25AB             (/home/strick/6809):00930                  bcs   L03F8      no,
0501 39               (/home/strick/6809):00931                  rts              yes, return
                      (/home/strick/6809):00932                                  
                      (/home/strick/6809):00933         ********************************************************************
                      (/home/strick/6809):00934         * Writes AA bytes of BB to X (byte pairs are in tables above)
                      (/home/strick/6809):00935         ********************************************************************
                      (/home/strick/6809):00936                                  
0502 109E16           (/home/strick/6809):00937         L044E    ldy   <u000E    
0505 ECA1             (/home/strick/6809):00938         L0451    ldd   ,y++       get two bytes at Y
0507 2716             (/home/strick/6809):00939                  beq   L046B      branch if zero (end)
0509 E780             (/home/strick/6809):00940         L0455    stb   ,x+        store B at X and post increment
050B 4A               (/home/strick/6809):00941                  deca             decrement count
050C 26FB             (/home/strick/6809):00942                  bne   L0455      continue if not done
050E 20F5             (/home/strick/6809):00943                  bra   L0451      else get next byte pair
0510 9625             (/home/strick/6809):00944         L045C    lda   <dtype     get drive's PD.TYP
0512 85C0             (/home/strick/6809):00945                  bita  #TYP.HARD+TYP.NSF hard disk or non-standard format?
0514 270A             (/home/strick/6809):00946                  beq   L046C      branch if neither
0516 109E14           (/home/strick/6809):00947                  ldy   <trkdata   point Y to track data
0519 30C900C6         (/home/strick/6809):00948                  leax  >LSN0,u    point to the LSN0 buffer
051D 8DE6             (/home/strick/6809):00949                  bsr   L0451      build LSN0 sector
051F 39               (/home/strick/6809):00950         L046B    rts             
                      (/home/strick/6809):00951                                  
                      (/home/strick/6809):00952         ********************************************************************
                      (/home/strick/6809):00953         *
                      (/home/strick/6809):00954         ********************************************************************
                      (/home/strick/6809):00955                                  
0520 109E14           (/home/strick/6809):00956         L046C    ldy   <trkdata   grab normal track data
0523 D621             (/home/strick/6809):00957                  ldb   <sectors+1 get sector
0525 0D0C             (/home/strick/6809):00958                  tst   <currtrak+1 track 0?
0527 2609             (/home/strick/6809):00959                  bne   L047E      branch if not
0529 0D0D             (/home/strick/6809):00960                  tst   <currside  side 0?
052B 2605             (/home/strick/6809):00961                  bne   L047E      branch if not
052D 109E12           (/home/strick/6809):00962                  ldy   <trk0data 
                      (/home/strick/6809):00963         *         ldb   <u001C
0530 D623             (/home/strick/6809):00964                  ldb   <sectors0+1 get sectors in track 0
0532 109F16           (/home/strick/6809):00965         L047E    sty   <u000E    
0535 D711             (/home/strick/6809):00966                  stb   <sectcount+1
0537 D71F             (/home/strick/6809):00967                  stb   <u0018    
0539 8D65             (/home/strick/6809):00968                  bsr   L04EC     
053B 30C900C6         (/home/strick/6809):00969                  leax  >LSN0,u   
053F 8DC4             (/home/strick/6809):00970                  bsr   L0451     
0541 109F16           (/home/strick/6809):00971                  sty   <u000E    
0544 8DBC             (/home/strick/6809):00972         L0490    bsr   L044E     
0546 0A11             (/home/strick/6809):00973                  dec   <sectcount+1
0548 26FA             (/home/strick/6809):00974                  bne   L0490     
054A A6A0             (/home/strick/6809):00975                  lda   ,y+       
054C 109F16           (/home/strick/6809):00976                  sty   <u000E    
054F 9F47             (/home/strick/6809):00977                  stx   <u003D    
0551 31C929AD         (/home/strick/6809):00978                  leay  >u297E,u  
0555 109F29           (/home/strick/6809):00979                  sty   <dresult  
0558 1F89             (/home/strick/6809):00980                  tfr   a,b       
055A ED81             (/home/strick/6809):00981         L04A6    std   ,x++      
055C 9C29             (/home/strick/6809):00982                  cmpx  <dresult  
055E 25FA             (/home/strick/6809):00983                  bcs   L04A6     
0560 109E16           (/home/strick/6809):00984                  ldy   <u000E    
0563 ECA1             (/home/strick/6809):00985                  ldd   ,y++      
0565 DD49             (/home/strick/6809):00986                  std   <u003F    
0567 ECA4             (/home/strick/6809):00987                  ldd   ,y        
0569 DD4B             (/home/strick/6809):00988                  std   <u0041    
056B 0F11             (/home/strick/6809):00989                  clr   <sectcount+1
056D 30C900C6         (/home/strick/6809):00990                  leax  >LSN0,u   
0571 DC49             (/home/strick/6809):00991                  ldd   <u003F    
0573 31C90098         (/home/strick/6809):00992                  leay  >u008F,u  
0577 308B             (/home/strick/6809):00993         L04C3    leax  d,x       
0579 DC0C             (/home/strick/6809):00994                  ldd   <currtrak+1
057B 9B53             (/home/strick/6809):00995                  adda  <toffs     add in track offset
057D ED84             (/home/strick/6809):00996                  std   ,x        
057F D611             (/home/strick/6809):00997                  ldb   <sectcount+1
0581 A6A5             (/home/strick/6809):00998                  lda   b,y       
0583 5C               (/home/strick/6809):00999                  incb            
0584 D711             (/home/strick/6809):01000                  stb   <sectcount+1
0586 D60F             (/home/strick/6809):01001                  ldb   <currsect 
0588 9B54             (/home/strick/6809):01002                  adda  <soffs     add in sector offset
058A 250D             (/home/strick/6809):01003                  bcs   L04E5     
058C ED02             (/home/strick/6809):01004                  std   $02,x     
058E 9611             (/home/strick/6809):01005                  lda   <sectcount+1
0590 911F             (/home/strick/6809):01006                  cmpa  <u0018    
0592 2404             (/home/strick/6809):01007                  bcc   L04E4     
0594 DC4B             (/home/strick/6809):01008                  ldd   <u0041    
0596 20DF             (/home/strick/6809):01009                  bra   L04C3     
0598 39               (/home/strick/6809):01010         L04E4    rts             
                      (/home/strick/6809):01011                                  
                      (/home/strick/6809):01012         ********************************************************************
                      (/home/strick/6809):01013         *
                      (/home/strick/6809):01014         ********************************************************************
                      (/home/strick/6809):01015                                  
0599 308D0525         (/home/strick/6809):01016         L04E5    leax  >AbortSct,pcr sector number out of range message
059D 160237           (/home/strick/6809):01017                  lbra  PExit      print message and exit
                      (/home/strick/6809):01018                                  
                      (/home/strick/6809):01019         ********************************************************************
                      (/home/strick/6809):01020         *
                      (/home/strick/6809):01021         ********************************************************************
                      (/home/strick/6809):01022                                  
05A0 3424             (/home/strick/6809):01023         L04EC    pshs  y,b       
05A2 1F98             (/home/strick/6809):01024                  tfr   b,a       
05A4 D60C             (/home/strick/6809):01025                  ldb   <currtrak+1
05A6 C101             (/home/strick/6809):01026                  cmpb  #$01      
05A8 2222             (/home/strick/6809):01027                  bhi   L0518     
05AA 30C90098         (/home/strick/6809):01028                  leax  >u008F,u  
05AE 3186             (/home/strick/6809):01029                  leay  a,x       
05B0 D62B             (/home/strick/6809):01030                  ldb   <interlv  
05B2 2607             (/home/strick/6809):01031                  bne   L0507     
05B4 308D04E6         (/home/strick/6809):01032         L0500    leax  >AbortIlv,pcr Interleave out of range message
05B8 16021C           (/home/strick/6809):01033                  lbra  PExit      print message and exit
05BB D11F             (/home/strick/6809):01034         L0507    cmpb  <u0018    
05BD 22F5             (/home/strick/6809):01035                  bhi   L0500     
05BF 40               (/home/strick/6809):01036                  nega            
05C0 3436             (/home/strick/6809):01037                  pshs  y,x,b,a   
05C2 4F               (/home/strick/6809):01038                  clra            
05C3 A784             (/home/strick/6809):01039         L050F    sta   ,x        
05C5 4C               (/home/strick/6809):01040                  inca            
05C6 911F             (/home/strick/6809):01041                  cmpa  <u0018    
05C8 2604             (/home/strick/6809):01042                  bne   L051A     
05CA 3266             (/home/strick/6809):01043                  leas  $06,s     
05CC 35A4             (/home/strick/6809):01044         L0518    puls  pc,y,b    
05CE D62B             (/home/strick/6809):01045         L051A    ldb   <interlv  
05D0 3A               (/home/strick/6809):01046                  abx             
05D1 AC64             (/home/strick/6809):01047                  cmpx  $04,s     
05D3 2504             (/home/strick/6809):01048                  bcs   L0525     
05D5 E6E4             (/home/strick/6809):01049                  ldb   ,s        
05D7 3085             (/home/strick/6809):01050                  leax  b,x       
05D9 AC62             (/home/strick/6809):01051         L0525    cmpx  $02,s     
05DB 26E6             (/home/strick/6809):01052                  bne   L050F     
05DD 3001             (/home/strick/6809):01053                  leax  $01,x     
05DF AF62             (/home/strick/6809):01054                  stx   $02,s     
05E1 20E0             (/home/strick/6809):01055                  bra   L050F     
                      (/home/strick/6809):01056                                  
                      (/home/strick/6809):01057         ********************************************************************
                      (/home/strick/6809):01058         * initialize sector 0
                      (/home/strick/6809):01059         ********************************************************************
                      (/home/strick/6809):01060                                  
05E3 1703AC           (/home/strick/6809):01061         InitLSN0 lbsr  ClrBuf     clear the sector buffer
05E6 DC03             (/home/strick/6809):01062                  ldd   <totsects+1 get total sectors bits 15-0
05E8 ED01             (/home/strick/6809):01063                  std   DD.TOT+1,x save
05EA D602             (/home/strick/6809):01064                  ldb   <totsects  get bits 23-16
05EC E784             (/home/strick/6809):01065                  stb   DD.TOT,x   save
05EE DC20             (/home/strick/6809):01066                  ldd   <sectors   get sectors/track
05F0 ED8811           (/home/strick/6809):01067                  std   <DD.SPT,x  save
05F3 E703             (/home/strick/6809):01068                  stb   DD.TKS,x   save
05F5 962E             (/home/strick/6809):01069                  lda   <clustsiz  get cluster size
05F7 A707             (/home/strick/6809):01070                  sta   DD.BIT+1,x save
                      (/home/strick/6809):01071                                  
05F9 4F               (/home/strick/6809):01072                  clra            
05FA D630             (/home/strick/6809):01073                  ldb   <NumBitmapBytes Calculate number of bitmap sectors needed
05FC 0D31             (/home/strick/6809):01074                  tst   <NumBitmapBytes+1 Exact multiple of sector size ?
05FE 2703             (/home/strick/6809):01075                  beq   L054F      Yes no extra sectors needed
0600 C30001           (/home/strick/6809):01076                  addd  #$0001     Add extra sector for bytes at end
0603 C30001           (/home/strick/6809):01077         L054F    addd  #$0001    
0606 E3C900C4         (/home/strick/6809):01078                  addd  AddedSysSecs,u Add additional system sectors (usually 0)
060A ED09             (/home/strick/6809):01079                  std   DD.DIR+1,x save directory sector
                      (/home/strick/6809):01080                                  
060C 4F               (/home/strick/6809):01081                  clra            
060D 0D18             (/home/strick/6809):01082                  tst   <mfm       single density?
060F 2708             (/home/strick/6809):01083                  beq   L0561      branch if so
0611 8A02             (/home/strick/6809):01084                  ora   #FMT.DNS   else set double density bit
0613 0D55             (/home/strick/6809):01085                  tst   <t0sngdns  track 0 is single density?
0615 2702             (/home/strick/6809):01086                  beq   L0561      branch if so
                      (/home/strick/6809):01087         *         ora   #FMT.T0DN
0617 8A08             (/home/strick/6809):01088                  ora   #$08      
0619 D61B             (/home/strick/6809):01089         L0561    ldb   <numsides  get number of sides
061B C101             (/home/strick/6809):01090                  cmpb  #$01       just 1?
061D 2702             (/home/strick/6809):01091                  beq   L0569      branch if so
061F 8A01             (/home/strick/6809):01092                  ora   #FMT.SIDE  else set double-sided bit
0621 0D1A             (/home/strick/6809):01093         L0569    tst   <tpi       48tpi?
0623 2702             (/home/strick/6809):01094                  beq   L056F      branch if so
0625 8A04             (/home/strick/6809):01095                  ora   #FMT.TDNS  else set 96 tpi
0627 A78810           (/home/strick/6809):01096         L056F    sta   <DD.FMT,x  save
062A DC30             (/home/strick/6809):01097                  ldd   <NumBitmapBytes get size of bitmap in bytes
062C ED04             (/home/strick/6809):01098                  std   DD.MAP,x   save number of bytes in allocation bit map
062E 86FF             (/home/strick/6809):01099                  lda   #$FF       attributes
0630 A70D             (/home/strick/6809):01100                  sta   DD.ATT,x   save
0632 30C900E0         (/home/strick/6809):01101                  leax  >LSN0+DD.DAT,u point to time buffer
0636 103F15           (/home/strick/6809):01102                  os9   F$Time     get current time
0639 30C900E5         (/home/strick/6809):01103                  leax  >LSN0+DD.NAM,u
063D 31C878           (/home/strick/6809):01104                  leay  <dskname,u quote delimited disk name buffer
0640 6DA4             (/home/strick/6809):01105                  tst   ,y         name in buffer?
0642 2708             (/home/strick/6809):01106                  beq   L0594      branch if not
0644 A6A0             (/home/strick/6809):01107         L058C    lda   ,y+        get character of name
0646 A780             (/home/strick/6809):01108                  sta   ,x+        and save in name area of LSN0
0648 2AFA             (/home/strick/6809):01109                  bpl   L058C     
064A 2033             (/home/strick/6809):01110                  bra   L05C7     
                      (/home/strick/6809):01111         * Here we prompt for a disk name
064C 308D04B6         (/home/strick/6809):01112         L0594    leax  >DName,pcr
0650 108E000B         (/home/strick/6809):01113                  ldy   #DNameLen 
0654 17FD1D           (/home/strick/6809):01114                  lbsr  Print      print disk name prompt
0657 30C900E5         (/home/strick/6809):01115                  leax  >LSN0+DD.NAM,u point to new name
065B 108E0021         (/home/strick/6809):01116                  ldy   #33        read up to 33 characters
065F 4F               (/home/strick/6809):01117                  clra            
0660 103F8B           (/home/strick/6809):01118                  os9   I$ReadLn   from standard input
0663 240B             (/home/strick/6809):01119                  bcc   L05B8      branch if ok
0665 81D3             (/home/strick/6809):01120                  cmpa  #E$EOF     end of file?
0667 26E3             (/home/strick/6809):01121                  bne   L0594      branch if not
0669 308D04D6         (/home/strick/6809):01122         L05B1    leax  >Aborted,pcr format aborted message
066D 160167           (/home/strick/6809):01123                  lbra  PExit      print message and exit
0670 1F20             (/home/strick/6809):01124         L05B8    tfr   y,d        copy number of chars entered into D
0672 308B             (/home/strick/6809):01125                  leax  d,x        point to last char + 1
0674 6F82             (/home/strick/6809):01126                  clr   ,-x       
0676 5A               (/home/strick/6809):01127                  decb             decrement chars typed
0677 27D3             (/home/strick/6809):01128                  beq   L0594      branch if zero (go ask again)
0679 A682             (/home/strick/6809):01129                  lda   ,-x        get last character
067B 8A80             (/home/strick/6809):01130                  ora   #$80       set hi bit
067D A784             (/home/strick/6809):01131                  sta   ,x         and save
067F 30C900E0         (/home/strick/6809):01132         L05C7    leax  >LSN0+DD.DAT,u point to time
0683 318840           (/home/strick/6809):01133                  leay  <$40,x    
0686 3420             (/home/strick/6809):01134                  pshs  y         
0688 CC0000           (/home/strick/6809):01135                  ldd   #$0000    
068B E381             (/home/strick/6809):01136         L05D3    addd  ,x++      
068D ACE4             (/home/strick/6809):01137                  cmpx  ,s        
068F 25FA             (/home/strick/6809):01138                  bcs   L05D3     
0691 3262             (/home/strick/6809):01139                  leas  $02,s     
0693 EDC900D4         (/home/strick/6809):01140                  std   >LSN0+DD.DSK,u save disk ID
                      (/home/strick/6809):01141                                  
0697 A6C900C0         (/home/strick/6809):01142                  lda   IsDragon,u Do we need to fixup for dragon ?
069B 8164             (/home/strick/6809):01143                  cmpa  #DragonFlag
069D 2602             (/home/strick/6809):01144                  bne   Nofixup   
069F 8D1B             (/home/strick/6809):01145                  bsr   FixForDragon Adjust for Dragon disk format
                      (/home/strick/6809):01146                                  
06A1                  (/home/strick/6809):01147         NoFixup                  
                      (/home/strick/6809):01148         * Not sure what this code is for...
                      (/home/strick/6809):01149         *         ldd   >val1,pcr
                      (/home/strick/6809):01150         *         std   >u01A7,u
                      (/home/strick/6809):01151         *         ldd   >val2,pcr
                      (/home/strick/6809):01152         *         std   >u01A9,u
                      (/home/strick/6809):01153         *         ldd   >val3,pcr
                      (/home/strick/6809):01154         *         std   >u01AB,u
06A1 960A             (/home/strick/6809):01155                  lda   <diskpath 
06A3 C600             (/home/strick/6809):01156                  ldb   #SS.Opt   
06A5 30C90105         (/home/strick/6809):01157                  leax  >LSN0+DD.OPT,u point to disk options
06A9 103F8D           (/home/strick/6809):01158                  os9   I$GetStt   get options
06AC C603             (/home/strick/6809):01159                  ldb   #SS.Reset  reset head to track 0
06AE 103F8E           (/home/strick/6809):01160                  os9   I$SetStt   do it!
06B1 1025FA04         (/home/strick/6809):01161                  lbcs  Exit       branch if error
06B5 30C900C6         (/home/strick/6809):01162                  leax  >LSN0,u    point to LSN0
06B9 1602E2           (/home/strick/6809):01163                  lbra  WritSec    and write it!
                      (/home/strick/6809):01164                                  
                      (/home/strick/6809):01165                                  
                      (/home/strick/6809):01166         ********************************************************************
                      (/home/strick/6809):01167         * Adjust LSN0 values so we make a Dragon OS-9 compatible disk
                      (/home/strick/6809):01168         ********************************************************************
                      (/home/strick/6809):01169                                  
06BC                  (/home/strick/6809):01170         FixForDragon                 
06BC 3410             (/home/strick/6809):01171                  pshs  x         
06BE 30C900C6         (/home/strick/6809):01172                  leax  LSN0,u     Point at LSN0
                      (/home/strick/6809):01173                                  
06C2 A6C825           (/home/strick/6809):01174                  lda   dtype,u    Get disk type
06C5 8520             (/home/strick/6809):01175                  bita  #TYP.CCF   CoCo/Dragon format disk ?
06C7 2710             (/home/strick/6809):01176                  beq   DgnNoFix   Nope, don't adjust
                      (/home/strick/6809):01177                                  
06C9 EC04             (/home/strick/6809):01178                  ldd   DD.MAP,x   Fixup map
06CB 108300FF         (/home/strick/6809):01179                  cmpd  #$ff       Dragon disks have only one bitmap sector
06CF 2308             (/home/strick/6809):01180                  bls   DgnMapOK   only using 1, don't adjust 
06D1 44               (/home/strick/6809):01181                  lsra             Divide map count by 2
06D2 56               (/home/strick/6809):01182                  rorb            
06D3 ED04             (/home/strick/6809):01183                  std   DD.MAP,x  
06D5 6C07             (/home/strick/6809):01184                  inc   DD.BIT+1,x Increment cluster size to 2   
                      (/home/strick/6809):01185                                  
06D7 D72E             (/home/strick/6809):01186                  stb   <clustsiz  Update local cluster size var
                      (/home/strick/6809):01187                                  
06D9                  (/home/strick/6809):01188         DgnMapOK                 
06D9                  (/home/strick/6809):01189         DgnNoFix                 
06D9 3590             (/home/strick/6809):01190                  puls  x,pc      
                      (/home/strick/6809):01191                                  
                      (/home/strick/6809):01192                                  
                      (/home/strick/6809):01193         ********************************************************************
                      (/home/strick/6809):01194         * read in sector 0 of device
                      (/home/strick/6809):01195         ********************************************************************
                      (/home/strick/6809):01196                                  
06DB 960A             (/home/strick/6809):01197         ReadLSN0 lda   <diskpath  get disk path
06DD 103F8F           (/home/strick/6809):01198                  os9   I$Close    close it
06E0 30C858           (/home/strick/6809):01199                  leax  <prmbuf,u  point to device name
06E3 8601             (/home/strick/6809):01200                  lda   #READ.    
06E5 103F84           (/home/strick/6809):01201                  os9   I$Open     open for read
06E8 102500E7         (/home/strick/6809):01202                  lbcs  BadSect    branch if problem
06EC 970A             (/home/strick/6809):01203                  sta   <diskpath  save new disk path
06EE 30C900C6         (/home/strick/6809):01204                  leax  >LSN0,u   
06F2 108E0100         (/home/strick/6809):01205                  ldy   #256      
06F6 103F89           (/home/strick/6809):01206                  os9   I$Read     read first sector
06F9 102500D6         (/home/strick/6809):01207                  lbcs  BadSect    branch if problem
06FD 960A             (/home/strick/6809):01208                  lda   <diskpath  get disk path
06FF 103F8F           (/home/strick/6809):01209                  os9   I$Close    close path to device
0702 30C858           (/home/strick/6809):01210                  leax  <prmbuf,u  re-point to device name
0705 8603             (/home/strick/6809):01211                  lda   #UPDAT.   
0707 103F84           (/home/strick/6809):01212                  os9   I$Open     open in read/write mode
070A 102500C5         (/home/strick/6809):01213                  lbcs  BadSect    branch if error
070E 970A             (/home/strick/6809):01214                  sta   <diskpath  else save new disk path
                      (/home/strick/6809):01215                                  
                      (/home/strick/6809):01216         * Save location of start of root directory, for later use
0710 30C900C6         (/home/strick/6809):01217                  leax  LSN0,u     point to LSN0
0714 A608             (/home/strick/6809):01218                  lda   DD.DIR,x   Get location of root
0716 AE09             (/home/strick/6809):01219                  ldx   DD.DIR+1,x
0718 A7C900C1         (/home/strick/6809):01220                  sta   SaveRootLSN,u Save a copy for later use
071C AFC900C2         (/home/strick/6809):01221                  stx   SaveRootLSN+1,u
0720 39               (/home/strick/6809):01222                  rts              and return
                      (/home/strick/6809):01223                                  
                      (/home/strick/6809):01224         ********************************************************************
                      (/home/strick/6809):01225         * Make Bitmap Sectors
                      (/home/strick/6809):01226         ********************************************************************
                      (/home/strick/6809):01227                                  
0721 9625             (/home/strick/6809):01228         MkBMap   lda   <dtype     get device type in A
0723 0F4F             (/home/strick/6809):01229                  clr   <dovfy     clear verify flag
0725 8580             (/home/strick/6809):01230                  bita  #TYP.HARD  hard drive?
0727 2717             (/home/strick/6809):01231                  beq   nothd      branch if not
                      (/home/strick/6809):01232         * Hard drives are asked for physical verification here
0729 308D049A         (/home/strick/6809):01233         askphys  leax  >Verify,pcr
072D 108E0019         (/home/strick/6809):01234                  ldy   #VerifyL  
0731 17FC46           (/home/strick/6809):01235                  lbsr  Input      prompt for physical verify of hard drive
0734 84DF             (/home/strick/6809):01236                  anda  #$DF      
0736 8159             (/home/strick/6809):01237                  cmpa  #'Y        yes?
0738 2706             (/home/strick/6809):01238                  beq   nothd      branch if so
073A 814E             (/home/strick/6809):01239                  cmpa  #'N        no?
073C 26EB             (/home/strick/6809):01240                  bne   askphys    not not, ask again
073E 974F             (/home/strick/6809):01241                  sta   <dovfy     else flag that we don't want physical verify
0740 DC22             (/home/strick/6809):01242         nothd    ldd   <sectors0  get sectors/track at track 0
0742 DD1E             (/home/strick/6809):01243                  std   <u0017     save
0744 4F               (/home/strick/6809):01244                  clra             D = 0
0745 5F               (/home/strick/6809):01245                  clrb            
0746 973F             (/home/strick/6809):01246                  sta   <oksects   clear OK sectors
0748 DD40             (/home/strick/6809):01247                  std   <oksects+1
074A DD0B             (/home/strick/6809):01248                  std   <currtrak  clear current track
074C DD10             (/home/strick/6809):01249                  std   <sectcount clear counted sectors
074E DD3B             (/home/strick/6809):01250                  std   <u0032    
0750 D73A             (/home/strick/6809):01251                  stb   <u0031    
0752 9746             (/home/strick/6809):01252                  sta   <u003C    
0754 30C901C6         (/home/strick/6809):01253                  leax  >optbuf,u 
0758 9F42             (/home/strick/6809):01254                  stx   <u0038    
075A 170239           (/home/strick/6809):01255                  lbsr  ClrSec    
075D 30890100         (/home/strick/6809):01256                  leax  256,x     
0761 9F44             (/home/strick/6809):01257                  stx   <u003A    
0763 4F               (/home/strick/6809):01258                  clra            
0764 C601             (/home/strick/6809):01259                  ldb   #$01       D = 1
0766 DD3D             (/home/strick/6809):01260                  std   <u0034    
0768 962E             (/home/strick/6809):01261                  lda   <clustsiz  get cluster size
076A 9733             (/home/strick/6809):01262                  sta   <clustcnt  store in cluster counter
076C 0F32             (/home/strick/6809):01263                  clr   <u002A    
                      (/home/strick/6809):01264                                  
                      (/home/strick/6809):01265         * Calculate the number of reserved clusters at begining of disk, from
                      (/home/strick/6809):01266         * number of reserved sectors
076E 4F               (/home/strick/6809):01267                  clra            
076F D630             (/home/strick/6809):01268                  ldb   <NumBitmapBytes Get no of sectors used by bitmap
0771 0D31             (/home/strick/6809):01269                  tst   <NumBitmapBytes+1 Exact number of sectors in bitmap ?
0773 2703             (/home/strick/6809):01270                  beq   L069D      Yes : skip
0775 C30001           (/home/strick/6809):01271                  addd  #$0001     No : round up sector count
0778 C30009           (/home/strick/6809):01272         L069D    addd  #$0009     Add 8 sectors for root FD (IT.SAS) + 1 sector for LSN0
077B E3C900C4         (/home/strick/6809):01273                  addd  AddedSysSecs,u Add additional system sectors (if any)
077F DD35             (/home/strick/6809):01274                  std   <NoSysSectors
0781 DD37             (/home/strick/6809):01275                  std   <NoSysClusters
0783 962E             (/home/strick/6809):01276                  lda   <clustsiz  get cluster size
                      (/home/strick/6809):01277                                  
                      (/home/strick/6809):01278         * Since cluster sizes can only be a power of 2 (1,2,4,8,16 etc) we divide block count
                      (/home/strick/6809):01279         * by 2 until we get a carry, this gives us the cluster count
                      (/home/strick/6809):01280                                  
0785 44               (/home/strick/6809):01281         L06A4    lsra            
0786 250E             (/home/strick/6809):01282                  bcs   L06B5      First calculate number of system clusters
0788 0437             (/home/strick/6809):01283                  lsr   <NoSysClusters
078A 0638             (/home/strick/6809):01284                  ror   <NoSysClusters+1
078C 24F7             (/home/strick/6809):01285                  bcc   L06A4     
078E 0C38             (/home/strick/6809):01286                  inc   <NoSysClusters+1
0790 26F3             (/home/strick/6809):01287                  bne   L06A4     
0792 0C37             (/home/strick/6809):01288                  inc   <NoSysClusters
0794 20EF             (/home/strick/6809):01289                  bra   L06A4     
                      (/home/strick/6809):01290                                  
0796                  (/home/strick/6809):01291         L06B5                    
0796 DC35             (/home/strick/6809):01292                  ldd   <NoSysSectors
                      (/home/strick/6809):01293         *         ldd   <NoSysSectors
                      (/home/strick/6809):01294         *         std   <NoSysClusters  Save No of clusters
                      (/home/strick/6809):01295         *         lda   <clustsiz        get cluster size
                      (/home/strick/6809):01296         *         mul                           Now work out number of system sectors
                      (/home/strick/6809):01297         *         std   <NoSysSectors   Save it
                      (/home/strick/6809):01298                                  
0798 830001           (/home/strick/6809):01299                  subd  #$0001     Calculate number of sectors in root FD ?
079B A3C900C4         (/home/strick/6809):01300                  subd  AddedSysSecs,u Remove additional system sectors (if any)
079F D030             (/home/strick/6809):01301                  subb  <NumBitmapBytes
07A1 8200             (/home/strick/6809):01302                  sbca  #$00      
07A3 0D31             (/home/strick/6809):01303                  tst   <NumBitmapBytes+1
07A5 2703             (/home/strick/6809):01304                  beq   L06CC     
07A7 830001           (/home/strick/6809):01305                  subd  #$0001    
                      (/home/strick/6809):01306                                  
07AA D734             (/home/strick/6809):01307         L06CC    stb   <NoRootFDSecs
                      (/home/strick/6809):01308                                  
07AC 0D4F             (/home/strick/6809):01309         L06CE    tst   <dovfy     do we verify?
07AE 262E             (/home/strick/6809):01310                  bne   OutScrn    no, output screen display
07B0 960A             (/home/strick/6809):01311                  lda   <diskpath  yes, get rbf device path
07B2 30C900C6         (/home/strick/6809):01312                  leax  >LSN0,u    get sector buffer
07B6 108E0100         (/home/strick/6809):01313                  ldy   #256       sector size
07BA 103F89           (/home/strick/6809):01314                  os9   I$Read     read of sector successful?
07BD 241F             (/home/strick/6809):01315                  bcc   OutScrn    yes, output screen display
07BF 103F0F           (/home/strick/6809):01316                  os9   F$PErr     no, print error message
07C2 1701FD           (/home/strick/6809):01317                  lbsr  NextSec    get next sector
07C5 86FF             (/home/strick/6809):01318                  lda   #$FF      
07C7 9732             (/home/strick/6809):01319                  sta   <u002A    
07C9 0D3A             (/home/strick/6809):01320                  tst   <u0031    
07CB 2611             (/home/strick/6809):01321                  bne   OutScrn    output screen display
07CD 9E3B             (/home/strick/6809):01322                  ldx   <u0032    
07CF 9C35             (/home/strick/6809):01323                  cmpx  <NoSysSectors
07D1 220B             (/home/strick/6809):01324                  bhi   OutScrn    output screen display
07D3 308D0359         (/home/strick/6809):01325         BadSect  leax  >BadSectM,pcr bad system sector message
07D7 17FB96           (/home/strick/6809):01326         PExit    lbsr  PrintLn    print message
07DA 5F               (/home/strick/6809):01327                  clrb             clear error
07DB 16F8DB           (/home/strick/6809):01328                  lbra  Exit       exit no error
                      (/home/strick/6809):01329                                  
                      (/home/strick/6809):01330         ********************************************************************
                      (/home/strick/6809):01331         * output screen display scrolling track counter
                      (/home/strick/6809):01332         ********************************************************************
                      (/home/strick/6809):01333                                  
07DE DC10             (/home/strick/6809):01334         OutScrn  ldd   <sectcount get counted sectors
07E0 C30001           (/home/strick/6809):01335                  addd  #$0001     increment it
07E3 DD10             (/home/strick/6809):01336                  std   <sectcount save counted sectors
07E5 10931E           (/home/strick/6809):01337                  cmpd  <u0017     good sector count?
07E8 2536             (/home/strick/6809):01338                  bcs   L0745      next segment
07EA 0F10             (/home/strick/6809):01339                  clr   <sectcount clear counted sectors
07EC 0F11             (/home/strick/6809):01340                  clr   <sectcount+1
07EE 0D4F             (/home/strick/6809):01341                  tst   <dovfy     are we verifying?
07F0 2623             (/home/strick/6809):01342                  bne   L073A      no,
07F2 8620             (/home/strick/6809):01343                  lda   #C$SPAC    yes, get space
07F4 3402             (/home/strick/6809):01344                  pshs  a          save it
07F6 960C             (/home/strick/6809):01345                  lda   <currtrak+1 track high byte
07F8 17008C           (/home/strick/6809):01346                  lbsr  HexDigit   make it ascii
07FB 3406             (/home/strick/6809):01347         L0724    pshs  b,a        save two ascii digits
07FD 960B             (/home/strick/6809):01348                  lda   <currtrak  track low byte
07FF 170085           (/home/strick/6809):01349                  lbsr  HexDigit   make it ascii
0802 3406             (/home/strick/6809):01350                  pshs  b,a        save two ascii digits
0804 860D             (/home/strick/6809):01351                  lda   #C$CR      get CR
0806 3402             (/home/strick/6809):01352                  pshs  a         
0808 1F41             (/home/strick/6809):01353                  tfr   s,x        get output from stack
080A 108E0006         (/home/strick/6809):01354                  ldy   #$0006     length of output
                      (/home/strick/6809):01355         *         lbsr  Print            print it
080E 8601             (/home/strick/6809):01356                  lda   #$01      
0810 103F8A           (/home/strick/6809):01357                  os9   I$Write   
                      (/home/strick/6809):01358         *         lda   $02,s
                      (/home/strick/6809):01359         *         cmpa  #$46             end of line?
                      (/home/strick/6809):01360         *         bne   L0738            skip line feed
                      (/home/strick/6809):01361         *         lbsr  LineFD           print linefeed
0813 3266             (/home/strick/6809):01362         L0738    leas  $06,s      pop output off stack
0815 DC0B             (/home/strick/6809):01363         L073A    ldd   <currtrak  get current track
0817 C30001           (/home/strick/6809):01364                  addd  #$0001     increment it
081A DD0B             (/home/strick/6809):01365                  std   <currtrak  save it back
081C DC20             (/home/strick/6809):01366                  ldd   <sectors   get number of sectors
081E DD1E             (/home/strick/6809):01367                  std   <u0017     save it
0820 0A33             (/home/strick/6809):01368         L0745    dec   <clustcnt  decrement cluster counter
0822 2617             (/home/strick/6809):01369                  bne   L075B     
0824 8D3E             (/home/strick/6809):01370                  bsr   L0784     
0826 0D32             (/home/strick/6809):01371                  tst   <u002A    
0828 260B             (/home/strick/6809):01372                  bne   L0755     
082A DC40             (/home/strick/6809):01373                  ldd   <oksects+1 increment good sectors
082C C30001           (/home/strick/6809):01374                  addd  #$0001    
082F DD40             (/home/strick/6809):01375                  std   <oksects+1
0831 2402             (/home/strick/6809):01376                  bcc   L0755     
0833 0C3F             (/home/strick/6809):01377                  inc   <oksects  
0835 0F32             (/home/strick/6809):01378         L0755    clr   <u002A    
0837 962E             (/home/strick/6809):01379                  lda   <clustsiz  get cluster size
0839 9733             (/home/strick/6809):01380                  sta   <clustcnt  save in cluster counter
083B D63A             (/home/strick/6809):01381         L075B    ldb   <u0031    
083D 9E3B             (/home/strick/6809):01382                  ldx   <u0032    
083F 3001             (/home/strick/6809):01383                  leax  $01,x     
0841 2601             (/home/strick/6809):01384                  bne   L0764     
0843 5C               (/home/strick/6809):01385                  incb            
0844 D102             (/home/strick/6809):01386         L0764    cmpb  <totsects 
0846 2504             (/home/strick/6809):01387                  bcs   L076C     
0848 9C03             (/home/strick/6809):01388                  cmpx  <totsects+1
084A 2407             (/home/strick/6809):01389                  bcc   L0773     
084C D73A             (/home/strick/6809):01390         L076C    stb   <u0031    
084E 9F3B             (/home/strick/6809):01391                  stx   <u0032    
0850 16FF59           (/home/strick/6809):01392                  lbra  L06CE     
0853 86FF             (/home/strick/6809):01393         L0773    lda   #$FF      
0855 9732             (/home/strick/6809):01394                  sta   <u002A    
0857 31C901C6         (/home/strick/6809):01395                  leay  >optbuf,u 
085B 109C42           (/home/strick/6809):01396         L077B    cmpy  <u0038    
085E 273F             (/home/strick/6809):01397                  beq   GoodSect   number of good sectors summary
0860 8D02             (/home/strick/6809):01398                  bsr   L0784     
0862 20F7             (/home/strick/6809):01399                  bra   L077B     
0864 9E42             (/home/strick/6809):01400         L0784    ldx   <u0038    
0866 9632             (/home/strick/6809):01401                  lda   <u002A    
0868 46               (/home/strick/6809):01402                  rora            
0869 6980             (/home/strick/6809):01403                  rol   ,x+       
086B 0C46             (/home/strick/6809):01404                  inc   <u003C    
086D 9646             (/home/strick/6809):01405                  lda   <u003C    
086F 8108             (/home/strick/6809):01406                  cmpa  #$08      
0871 2513             (/home/strick/6809):01407                  bcs   L07A6     
0873 0F46             (/home/strick/6809):01408                  clr   <u003C    
0875 9F42             (/home/strick/6809):01409                  stx   <u0038    
0877 9C44             (/home/strick/6809):01410                  cmpx  <u003A    
0879 260B             (/home/strick/6809):01411                  bne   L07A6     
087B 8D67             (/home/strick/6809):01412                  bsr   WrtSecs   
087D 30C901C6         (/home/strick/6809):01413                  leax  >optbuf,u 
0881 9F42             (/home/strick/6809):01414                  stx   <u0038    
0883 170110           (/home/strick/6809):01415                  lbsr  ClrSec    
0886 39               (/home/strick/6809):01416         L07A6    rts              return
                      (/home/strick/6809):01417                                  
                      (/home/strick/6809):01418         ********************************************************************
                      (/home/strick/6809):01419         * convert byte to ascii hexadecimal and return it in d register
                      (/home/strick/6809):01420         ********************************************************************
                      (/home/strick/6809):01421                                  
0887 1F89             (/home/strick/6809):01422         HexDigit tfr   a,b        get byte again
0889 44               (/home/strick/6809):01423                  lsra             shift upper digit
088A 44               (/home/strick/6809):01424                  lsra            
088B 44               (/home/strick/6809):01425                  lsra            
088C 44               (/home/strick/6809):01426                  lsra            
088D C40F             (/home/strick/6809):01427                  andb  #$0F       mask lower digit
088F C33030           (/home/strick/6809):01428                  addd  #$3030     make it ascii
0892 8139             (/home/strick/6809):01429                  cmpa  #$39       upper digit > 9
0894 2302             (/home/strick/6809):01430                  bls   L07B8      no,
0896 8B07             (/home/strick/6809):01431                  adda  #$07       yes, make hexadecimal
0898 C139             (/home/strick/6809):01432         L07B8    cmpb  #$39       lower digit > 9
089A 2302             (/home/strick/6809):01433                  bls   L07BE      no,
089C CB07             (/home/strick/6809):01434                  addb  #$07       yes, make hexadecimal
089E 39               (/home/strick/6809):01435         L07BE    rts              return
                      (/home/strick/6809):01436                                  
                      (/home/strick/6809):01437         ********************************************************************
                      (/home/strick/6809):01438         * number of good sectors message
                      (/home/strick/6809):01439         ********************************************************************
                      (/home/strick/6809):01440                                  
089F 17FACA           (/home/strick/6809):01441         GoodSect lbsr  LineFD     print line feed
08A2 308D02C2         (/home/strick/6809):01442                  leax  >NumGood,pcr number of good sectors
08A6 108E0019         (/home/strick/6809):01443                  ldy   #NGoodLen  length of message
08AA 17FAC7           (/home/strick/6809):01444                  lbsr  Print      print it
08AD D62E             (/home/strick/6809):01445                  ldb   <clustsiz  get cluster size
08AF 963F             (/home/strick/6809):01446                  lda   <oksects   get  24 bit counter
08B1 9E40             (/home/strick/6809):01447                  ldx   <oksects+1
08B3 3412             (/home/strick/6809):01448                  pshs  x,a        save 24 bit counter
08B5 54               (/home/strick/6809):01449         L07D4    lsrb             carry set 0xxx xxxx  ->  X ?
08B6 2508             (/home/strick/6809):01450                  bcs   L07DF      yes,
08B8 6862             (/home/strick/6809):01451                  lsl   $02,s      <u0036 1  X  <- nnnn nnnn  X  <- xxxx xxx0
08BA 6961             (/home/strick/6809):01452                  rol   $01,s      <u0036 2  N  <- nnnn nnnX  N  <- xxxx xxx0
08BC 69E4             (/home/strick/6809):01453                  rol   ,s         <u0036 3  N  <- nnnn nnnN
08BE 20F5             (/home/strick/6809):01454                  bra   L07D4      did all sectors?
08C0 3512             (/home/strick/6809):01455         L07DF    puls  x,a        get counted sectors
08C2 C60D             (/home/strick/6809):01456                  ldb   #C$CR     
08C4 3404             (/home/strick/6809):01457                  pshs  b          save enter
08C6 1F02             (/home/strick/6809):01458                  tfr   d,y        get size
08C8 1F10             (/home/strick/6809):01459                  tfr   x,d        get
08CA 1F98             (/home/strick/6809):01460                  tfr   b,a        get convert byte
08CC 8DB9             (/home/strick/6809):01461                  bsr   HexDigit   convert it BYTE 1
08CE 3406             (/home/strick/6809):01462                  pshs  b,a        save in buffer
08D0 1F10             (/home/strick/6809):01463                  tfr   x,d        get convert byte
08D2 8DB3             (/home/strick/6809):01464                  bsr   HexDigit   convert it BYTE 2
08D4 3406             (/home/strick/6809):01465                  pshs  b,a        save in buffer
08D6 1F20             (/home/strick/6809):01466                  tfr   y,d        get convert byte
08D8 8DAD             (/home/strick/6809):01467                  bsr   HexDigit   convert it BYTE 3
08DA 3406             (/home/strick/6809):01468                  pshs  b,a        save it buffer
08DC 1F41             (/home/strick/6809):01469                  tfr   s,x        get output buffer
08DE 17FA8F           (/home/strick/6809):01470                  lbsr  PrintLn    print it
08E1 3267             (/home/strick/6809):01471                  leas  $07,s      fix stack
08E3 39               (/home/strick/6809):01472                  rts              return
                      (/home/strick/6809):01473                                  
                      (/home/strick/6809):01474         ********************************************************************
                      (/home/strick/6809):01475         * get allocation bit map and write sectors
                      (/home/strick/6809):01476         ********************************************************************
                      (/home/strick/6809):01477                                  
08E4                  (/home/strick/6809):01478         WrtSecs                  
08E4 3420             (/home/strick/6809):01479                  pshs  y          save register
08E6 4F               (/home/strick/6809):01480                  clra             set number
08E7 C601             (/home/strick/6809):01481                  ldb   #$01       bits to set
08E9 10933D           (/home/strick/6809):01482                  cmpd  <u0034     map sector?
08EC 2610             (/home/strick/6809):01483                  bne   L081E      yes, write sector
08EE 30C901C6         (/home/strick/6809):01484                  leax  >optbuf,u  allocation bit map
08F2 4F               (/home/strick/6809):01485                  clra             get number
08F3 109E37           (/home/strick/6809):01486                  ldy   <NoSysClusters system sectors
                      (/home/strick/6809):01487         *         tfr   d,y              into register
08F6 5F               (/home/strick/6809):01488                  clrb             first bit to set
08F7 103F13           (/home/strick/6809):01489                  os9   F$AllBit   set allocation bit map
08FA 1025FED5         (/home/strick/6809):01490                  lbcs  BadSect    if there a error
08FE 1700AB           (/home/strick/6809):01491         L081E    lbsr  GetSec     get sector
0901 30C901C6         (/home/strick/6809):01492                  leax  >optbuf,u  allocation bit map
0905 170096           (/home/strick/6809):01493                  lbsr  WritSec    write sector
0908 DC02             (/home/strick/6809):01494                  ldd   <totsects  get total sectors
090A 10933A           (/home/strick/6809):01495                  cmpd  <u0031     lsn sector count?
090D 250B             (/home/strick/6809):01496                  bcs   AdvSec     advance to mapped sectors
090F 2206             (/home/strick/6809):01497                  bhi   NxtSec     get next sector
0911 D604             (/home/strick/6809):01498                  ldb   <totsects+2 get LSB total sectors
0913 D13C             (/home/strick/6809):01499                  cmpb  <u0033     good sector count?
0915 2403             (/home/strick/6809):01500                  bcc   AdvSec     advance to mapped sectors
0917 1700A8           (/home/strick/6809):01501         NxtSec   lbsr  NextSec    skip to next sector
091A DC3D             (/home/strick/6809):01502         AdvSec   ldd   <u0034     get mapped sectors
091C C30001           (/home/strick/6809):01503                  addd  #$0001     count from one
091F DD3D             (/home/strick/6809):01504                  std   <u0034     save mapped sectors count
0921 35A0             (/home/strick/6809):01505                  puls  pc,y       restore and return
                      (/home/strick/6809):01506                                  
                      (/home/strick/6809):01507         ********************************************************************
                      (/home/strick/6809):01508         * create root directory file descriptor
                      (/home/strick/6809):01509         ********************************************************************
                      (/home/strick/6809):01510                                  
0923 170086           (/home/strick/6809):01511         MkRootFD lbsr  GetSec     get sector
0926 30C902E6         (/home/strick/6809):01512                  leax  >fdtbuf1,u sector buff
092A 170069           (/home/strick/6809):01513                  lbsr  ClrSec     clear sector
092D 30C902E9         (/home/strick/6809):01514                  leax  >fdtbuf2,u get date last modified
0931 103F15           (/home/strick/6809):01515                  os9   F$Time     get system time
0934 30C902E6         (/home/strick/6809):01516                  leax  >fdtbuf1,u get file descriptor
0938 86BF             (/home/strick/6809):01517                  lda   #DIR.+PEXEC.+PWRIT.+PREAD.+EXEC.+UPDAT.
093A A784             (/home/strick/6809):01518                  sta   FD.ATT,x   save in FD.ATT
093C 8602             (/home/strick/6809):01519                  lda   #$02       get link count
093E A708             (/home/strick/6809):01520                  sta   FD.LNK,x   save in FD.LNK
0940 4F               (/home/strick/6809):01521                  clra             directory size
0941 C640             (/home/strick/6809):01522                  ldb   #DIR.SZ*2  directory entries (DIR.SZ*2)
0943 ED0B             (/home/strick/6809):01523                  std   FD.SIZ+2,x save it           (FD.SIZ+2)
0945 D634             (/home/strick/6809):01524                  ldb   <NoRootFDSecs
0947 5A               (/home/strick/6809):01525                  decb            
0948 E78814           (/home/strick/6809):01526                  stb   <FD.SEG+FDSL.B+1,x save it  (c+FDSL.B+1)
                      (/home/strick/6809):01527         *         ldd   <u0034
                      (/home/strick/6809):01528                                  
094B ECC900C2         (/home/strick/6809):01529                  ldd   SaveRootLSN+1,u Get saved root dir LSN
                      (/home/strick/6809):01530                                  
094F C30001           (/home/strick/6809):01531                  addd  #$0001    
0952 ED8811           (/home/strick/6809):01532                  std   <FD.SEG+FDSL.A+1,x save it  (FD.SEG+FDSL.A+1)    
0955 8D29             (/home/strick/6809):01533                  bsr   SeekRootLSN
0957 8D45             (/home/strick/6809):01534                  bsr   WritSec   
0959 8D37             (/home/strick/6809):01535                  bsr   ClrBuf    
095B CC2EAE           (/home/strick/6809):01536                  ldd   #$2EAE     (#'.*256+'.+128)
095E ED84             (/home/strick/6809):01537                  std   DIR.NM,x   (DIR.NM)
0960 E78820           (/home/strick/6809):01538                  stb   <DIR.SZ+DIR.NM,x (DIR.NM+DIR.SZ)
                      (/home/strick/6809):01539         *         ldd   <u0034
                      (/home/strick/6809):01540                                  
0963 ECC900C2         (/home/strick/6809):01541                  ldd   SaveRootLSN+1,u Get saved root dir LSN
                      (/home/strick/6809):01542                                  
0967 ED881E           (/home/strick/6809):01543                  std   <DIR.FD+1,x
096A ED883E           (/home/strick/6809):01544                  std   <DIR.SZ+DIR.FD+1,x
096D 8D2F             (/home/strick/6809):01545                  bsr   WritSec   
096F 8D21             (/home/strick/6809):01546                  bsr   ClrBuf    
0971 D634             (/home/strick/6809):01547                  ldb   <NoRootFDSecs
0973 5A               (/home/strick/6809):01548                  decb             make zero offset (0 - 255)
0974 5A               (/home/strick/6809):01549         NextCnt  decb             decrement sector count
0975 2601             (/home/strick/6809):01550                  bne   NextWrt    if more to do
0977 39               (/home/strick/6809):01551                  rts              else return
0978 3404             (/home/strick/6809):01552         NextWrt  pshs  b          save sector count
097A 8D22             (/home/strick/6809):01553                  bsr   WritSec    write the sector
097C 3504             (/home/strick/6809):01554                  puls  b          get count back
097E 20F4             (/home/strick/6809):01555                  bra   NextCnt    do until done
                      (/home/strick/6809):01556                                  
                      (/home/strick/6809):01557         ********************************************************************
                      (/home/strick/6809):01558         * Get root dir first LSN
                      (/home/strick/6809):01559         ********************************************************************
                      (/home/strick/6809):01560                                  
                      (/home/strick/6809):01561         *GetRootLSN
                      (/home/strick/6809):01562         *        pshs   x               Retrieve start of Dir from LSN0 
                      (/home/strick/6809):01563         *        leax   LSN0,u
                      (/home/strick/6809):01564         *        ldd    DD.DIR+1,x
                      (/home/strick/6809):01565         *        puls   x
                      (/home/strick/6809):01566         *
                      (/home/strick/6809):01567         *       rts
                      (/home/strick/6809):01568                                  
                      (/home/strick/6809):01569         ********************************************************************
                      (/home/strick/6809):01570         * Seek to Root LSN
                      (/home/strick/6809):01571         ********************************************************************
                      (/home/strick/6809):01572                                  
0980                  (/home/strick/6809):01573         SeekRootLSN                 
0980 3456             (/home/strick/6809):01574                  pshs  d,x,u     
                      (/home/strick/6809):01575                                  
0982 AEC900C1         (/home/strick/6809):01576                  ldx   SaveRootLSN,u msw of pos
0986 A6C900C3         (/home/strick/6809):01577                  lda   SaveRootLSN+2,u lsw
098A 5F               (/home/strick/6809):01578                  clrb            
098B 1F03             (/home/strick/6809):01579                  tfr   d,u       
098D 170026           (/home/strick/6809):01580                  lbsr  SeekSec   
                      (/home/strick/6809):01581                                  
0990 35D6             (/home/strick/6809):01582                  puls  d,x,u,pc  
                      (/home/strick/6809):01583                                  
                      (/home/strick/6809):01584         ********************************************************************
                      (/home/strick/6809):01585         * clear the 256 byte sector buffer
                      (/home/strick/6809):01586         ********************************************************************
                      (/home/strick/6809):01587                                  
0992 30C900C6         (/home/strick/6809):01588         ClrBuf   leax  >LSN0,u    sector buffer
0996 4F               (/home/strick/6809):01589         ClrSec   clra             store mask
0997 5F               (/home/strick/6809):01590                  clrb             sector count
0998 A78B             (/home/strick/6809):01591         ClrLop   sta   d,x        clear the buffer
099A 5A               (/home/strick/6809):01592                  decb             decrement sector count
099B 26FB             (/home/strick/6809):01593                  bne   ClrLop     clear sector buffer
099D 39               (/home/strick/6809):01594                  rts              return when done
                      (/home/strick/6809):01595                                  
                      (/home/strick/6809):01596         ********************************************************************
                      (/home/strick/6809):01597         * write physical 256 byte sector to the diskette
                      (/home/strick/6809):01598         ********************************************************************
                      (/home/strick/6809):01599                                  
099E 960A             (/home/strick/6809):01600         WritSec  lda   <diskpath  get path number
09A0 108E0100         (/home/strick/6809):01601                  ldy   #256       get sector size
09A4 103F8A           (/home/strick/6809):01602                  os9   I$Write    write the sector
09A7 1025F70E         (/home/strick/6809):01603                  lbcs  Exit       exit on error
09AB 39               (/home/strick/6809):01604                  rts              return
                      (/home/strick/6809):01605                                  
                      (/home/strick/6809):01606         ********************************************************************
                      (/home/strick/6809):01607         * get sector file position
                      (/home/strick/6809):01608         ********************************************************************
                      (/home/strick/6809):01609                                  
09AC 4F               (/home/strick/6809):01610         GetSec   clra            
09AD D63D             (/home/strick/6809):01611                  ldb   <u0034     get map sectors high word
09AF 1F01             (/home/strick/6809):01612                  tfr   d,x        save it
09B1 963E             (/home/strick/6809):01613                  lda   <u0035    
09B3 5F               (/home/strick/6809):01614                  clrb             get map sectors low  word
09B4 1F03             (/home/strick/6809):01615                  tfr   d,u        save it
                      (/home/strick/6809):01616                                  
                      (/home/strick/6809):01617         ********************************************************************
                      (/home/strick/6809):01618         * seek to physical sector
                      (/home/strick/6809):01619         ********************************************************************
                      (/home/strick/6809):01620                                  
09B6 960A             (/home/strick/6809):01621         SeekSec  lda   <diskpath  get path number
09B8 103F88           (/home/strick/6809):01622                  os9   I$Seek     seek to sector
09BB DE00             (/home/strick/6809):01623                  ldu   <savedu    get data pointer
09BD 1025F6F8         (/home/strick/6809):01624                  lbcs  Exit       exit if error
09C1 39               (/home/strick/6809):01625                  rts              return
                      (/home/strick/6809):01626                                  
                      (/home/strick/6809):01627         ********************************************************************
                      (/home/strick/6809):01628         * skip to the next sector
                      (/home/strick/6809):01629         ********************************************************************
                      (/home/strick/6809):01630                                  
09C2 9E3A             (/home/strick/6809):01631         NextSec  ldx   <u0031     lsn count
09C4 963C             (/home/strick/6809):01632                  lda   <u0033     good sector count
09C6 5F               (/home/strick/6809):01633                  clrb             add this
09C7 C30100           (/home/strick/6809):01634                  addd  #$0100     sector
09CA 1F03             (/home/strick/6809):01635                  tfr   d,u        lsn count
09CC 24E8             (/home/strick/6809):01636                  bcc   SeekSec    seek it?
09CE 3001             (/home/strick/6809):01637                  leax  $01,x      next sector
09D0 20E4             (/home/strick/6809):01638                  bra   SeekSec    seek it
                      (/home/strick/6809):01639                                  
                      (/home/strick/6809):01640         ********************************************************************
                      (/home/strick/6809):01641         * the format module never gets to this code?
                      (/home/strick/6809):01642         ********************************************************************
                      (/home/strick/6809):01643                                  
09D2 ECA4             (/home/strick/6809):01644                  ldd   ,y        
09D4 33C900C6         (/home/strick/6809):01645                  leau  >LSN0,u   
09D8 308D003E         (/home/strick/6809):01646                  leax  >dcnums,pcr decimal number conversion table
09DC 108E2F20         (/home/strick/6809):01647                  ldy   #$2F20    
                      (/home/strick/6809):01648                                  
                      (/home/strick/6809):01649         ********************************************************************
                      (/home/strick/6809):01650         *
                      (/home/strick/6809):01651         ********************************************************************
                      (/home/strick/6809):01652                                  
09E0 31A90100         (/home/strick/6809):01653         L08E6    leay  >$0100,y  
09E4 A384             (/home/strick/6809):01654                  subd  ,x        
09E6 24F8             (/home/strick/6809):01655                  bcc   L08E6     
09E8 E381             (/home/strick/6809):01656                  addd  ,x++      
09EA 3406             (/home/strick/6809):01657                  pshs  b,a       
09EC EC84             (/home/strick/6809):01658                  ldd   ,x        
09EE 1F20             (/home/strick/6809):01659                  tfr   y,d       
09F0 2716             (/home/strick/6809):01660                  beq   L090E     
09F2 108E2F30         (/home/strick/6809):01661                  ldy   #$2F30    
09F6 10833020         (/home/strick/6809):01662                  cmpd  #$3020    
09FA 2606             (/home/strick/6809):01663                  bne   L0908     
09FC 108E2F20         (/home/strick/6809):01664                  ldy   #$2F20    
0A00 1F98             (/home/strick/6809):01665                  tfr   b,a       
0A02 A7C0             (/home/strick/6809):01666         L0908    sta   ,u+       
0A04 3506             (/home/strick/6809):01667                  puls  b,a       
0A06 20D8             (/home/strick/6809):01668                  bra   L08E6     
0A08 A7C0             (/home/strick/6809):01669         L090E    sta   ,u+       
0A0A 860D             (/home/strick/6809):01670                  lda   #C$CR     
0A0C A7C4             (/home/strick/6809):01671                  sta   ,u        
0A0E DE00             (/home/strick/6809):01672                  ldu   <savedu   
0A10 3262             (/home/strick/6809):01673                  leas  $02,s     
0A12 30C900C6         (/home/strick/6809):01674                  leax  >LSN0,u   
0A16 17F957           (/home/strick/6809):01675                  lbsr  PrintLn   
0A19 39               (/home/strick/6809):01676                  rts             
                      (/home/strick/6809):01677                                  
0A1A 271003E80064000A (/home/strick/6809):01678         dcnums   fdb   10000,1000,100,10,1,0
     00010000
                      (/home/strick/6809):01679                                  
                      (/home/strick/6809):01680         ********************************************************************
                      (/home/strick/6809):01681         *  process decimal number input (65535)
                      (/home/strick/6809):01682         ********************************************************************
                      (/home/strick/6809):01683                                  
0A26 CC0000           (/home/strick/6809):01684         Decimal  ldd   #$0000     start at zero
0A29 8D0E             (/home/strick/6809):01685         L092F    bsr   DecBin     get first digit
0A2B 2506             (/home/strick/6809):01686                  bcs   L0939      if overflow
0A2D 26FA             (/home/strick/6809):01687                  bne   L092F      get next digit
0A2F DD29             (/home/strick/6809):01688                  std   <dresult   save decimal as binary
0A31 2605             (/home/strick/6809):01689                  bne   L093E      if no error return
0A33 CC0001           (/home/strick/6809):01690         L0939    ldd   #$0001     flag error
0A36 DD29             (/home/strick/6809):01691                  std   <dresult   save it
0A38 39               (/home/strick/6809):01692         L093E    rts              return
                      (/home/strick/6809):01693                                  
                      (/home/strick/6809):01694         ********************************************************************
                      (/home/strick/6809):01695         * process decimal number into it's binary representation
                      (/home/strick/6809):01696         * return with binary in the d register
                      (/home/strick/6809):01697         ********************************************************************
                      (/home/strick/6809):01698                                  
0A39 3426             (/home/strick/6809):01699         DecBin   pshs  y,b,a      save registers
0A3B E680             (/home/strick/6809):01700                  ldb   ,x+        get digit
0A3D C030             (/home/strick/6809):01701                  subb  #$30       make it binary
0A3F C10A             (/home/strick/6809):01702                  cmpb  #$0A       bla bla bla!          
0A41 2414             (/home/strick/6809):01703                  bcc   L095D     
0A43 8600             (/home/strick/6809):01704                  lda   #$00      
0A45 108E000A         (/home/strick/6809):01705                  ldy   #$000A    
0A49 E3E4             (/home/strick/6809):01706         L094F    addd  ,s        
0A4B 2508             (/home/strick/6809):01707                  bcs   L095B     
0A4D 313F             (/home/strick/6809):01708                  leay  -$01,y    
0A4F 26F8             (/home/strick/6809):01709                  bne   L094F     
0A51 EDE4             (/home/strick/6809):01710                  std   ,s        
0A53 1CFB             (/home/strick/6809):01711                  andcc  #^Zero    
0A55 35A6             (/home/strick/6809):01712         L095B    puls  pc,y,b,a  
0A57 1A04             (/home/strick/6809):01713         L095D    orcc  #Zero     
0A59 35A6             (/home/strick/6809):01714                  puls  pc,y,b,a  
                      (/home/strick/6809):01715                                  
                      (/home/strick/6809):01716         ********************************************************************
                      (/home/strick/6809):01717         * print error, usage message, and exit
                      (/home/strick/6809):01718         ********************************************************************
                      (/home/strick/6809):01719                                  
0A5B 8602             (/home/strick/6809):01720         PrtError lda   #$02       standard error
0A5D 103F0F           (/home/strick/6809):01721                  os9   F$PErr     print error
                      (/home/strick/6809):01722                  ifne  DOHELP    
                      (/home/strick/6809):01723                  leax  <HelpMsg,pcr point to usage
                      (/home/strick/6809):01724                  ldy   #HelpLen   usage size
                      (/home/strick/6809):01725                  lda   #$02       standard error
                      (/home/strick/6809):01726                  os9   I$WritLn   print usage
                      (/home/strick/6809):01727                  endc            
0A60 5F               (/home/strick/6809):01728                  clrb             no error
0A61 103F06           (/home/strick/6809):01729                  os9   F$Exit     exit module
                      (/home/strick/6809):01730                                  
                      (/home/strick/6809):01731         ********************************************************************
                      (/home/strick/6809):01732         * messages
                      (/home/strick/6809):01733         ********************************************************************
                      (/home/strick/6809):01734                                  
                      (/home/strick/6809):01735         *Title    fcb   C$LF
                      (/home/strick/6809):01736         *         fcc   "COLOR COMPUTER FORMATTER"
                      (/home/strick/6809):01737         *HelpCR   fcb   C$CR
                      (/home/strick/6809):01738                  ifne  DOHELP    
0A64                  (/home/strick/6809):01739         HelpMsg  fcc   "Use: FORMAT /devname <opts>"
                      (/home/strick/6809):01740                  fcb   C$LF      
                      (/home/strick/6809):01741                  fcc   "  opts: R   - Ready"
                      (/home/strick/6809):01742                  fcb   C$LF      
                      (/home/strick/6809):01743                  fcc   "        S/D - density; single or double"
                      (/home/strick/6809):01744                  fcb   C$LF      
                      (/home/strick/6809):01745                  fcc   "        L   - Logical format only"
                      (/home/strick/6809):01746                  fcb   C$LF      
                      (/home/strick/6809):01747                  fcc   /        "disk name"/
                      (/home/strick/6809):01748                  fcb   C$LF      
                      (/home/strick/6809):01749                  fcc   "        1/2 - number of sides"
                      (/home/strick/6809):01750                  fcb   C$LF      
                      (/home/strick/6809):01751                  fcc   "        'No. of cylinders'   (in decimal)"
                      (/home/strick/6809):01752                  fcb   C$LF      
                      (/home/strick/6809):01753                  fcc   "        :Interleave value:   (in decimal)"
                      (/home/strick/6809):01754                  fcb   C$LF      
                      (/home/strick/6809):01755                  fcc   "        /Cluster size/       (in decimal)"
                      (/home/strick/6809):01756                  fcb   C$LF      
                      (/home/strick/6809):01757                  fcc   "        FD - Dragon format disk"
                      (/home/strick/6809):01758                  fcb   C$CR      
0A64                  (/home/strick/6809):01759         HelpLen  equ   *-HelpMsg 
                      (/home/strick/6809):01760                  endc            
0A64 466F726D61747469 (/home/strick/6809):01761         FmtMsg   fcc   "Formatting device: "
     6E67206465766963
     653A20
     0013             (/home/strick/6809):01762         FmtMLen  equ   *-FmtMsg  
0A77                  (/home/strick/6809):01763         Query                    
                      (/home/strick/6809):01764         *         fcc   "y (yes) or n (no)"
                      (/home/strick/6809):01765         *         fcb   C$LF
0A77 52656164793F2020 (/home/strick/6809):01766                  fcc   "Ready?  "
     0008             (/home/strick/6809):01767         QueryLen equ   *-Query   
0A7F 41424F5254206361 (/home/strick/6809):01768         CapErr   fcc   "ABORT can't get media capacity"
     6E27742067657420
     6D65646961206361
     706163697479
0A9D 0D               (/home/strick/6809):01769                  fcb   C$CR      
0A9E 41424F525420496E (/home/strick/6809):01770         AbortIlv fcc   "ABORT Interleave value out of range"
     7465726C65617665
     2076616C7565206F
     7574206F66207261
     6E6765
0AC1 0D               (/home/strick/6809):01771                  fcb   C$CR      
0AC2 41424F5254205365 (/home/strick/6809):01772         AbortSct fcc   "ABORT Sector number out of range"
     63746F72206E756D
     626572206F757420
     6F662072616E6765
0AE2 0D               (/home/strick/6809):01773                  fcb   C$CR      
0AE3 41424F5254204F70 (/home/strick/6809):01774         AbortOp  fcc   "ABORT Option not allowed on Device"
     74696F6E206E6F74
     20616C6C6F776564
     206F6E2044657669
     6365
0B05 0D               (/home/strick/6809):01775                  fcb   C$CR      
0B06 4469736B206E616D (/home/strick/6809):01776         DName    fcc   "Disk name: "
     653A20
     000B             (/home/strick/6809):01777         DNameLen equ   *-DName   
0B11 486F77206D616E79 (/home/strick/6809):01778                  fcc   "How many Cylinders (Tracks?) : "
     2043796C696E6465
     7273202854726163
     6B733F29203A20
0B30 4261642073797374 (/home/strick/6809):01779         BadSectM fcc   "Bad system sector, "
     656D20736563746F
     722C20
0B43 464F524D41542041 (/home/strick/6809):01780         Aborted  fcc   "FORMAT ABORTED"
     424F52544544
0B51 0D               (/home/strick/6809):01781                  fcb   C$CR      
0B52 436C757374657220 (/home/strick/6809):01782         ClustMsg fcc   "Cluster size mismatch"
     73697A65206D6973
     6D61746368
0B67 0D               (/home/strick/6809):01783         CrRtn    fcb   C$CR      
                      (/home/strick/6809):01784         *         fcc   "Double density? "
                      (/home/strick/6809):01785         *         fcc   "Track 0 Double density? "
                      (/home/strick/6809):01786         *TPIChg   fcc   "Change from 96tpi to 48tpi? "
                      (/home/strick/6809):01787         *DSided   fcc   "Double sided? "
0B68 4E756D626572206F (/home/strick/6809):01788         NumGood  fcc   "Number of good sectors: $"
     6620676F6F642073
     6563746F72733A20
     24
     0019             (/home/strick/6809):01789         NGoodLen equ   *-NumGood 
0B81 5468697320697320 (/home/strick/6809):01790         HDFmt    fcc   "This is a HARD disk - are you sure? "
     6120484152442064
     69736B202D206172
     6520796F75207375
     72653F20
                      (/home/strick/6809):01791         *HDFmt    fcc   "WARNING: You are formatting a HARD Disk.."
                      (/home/strick/6809):01792         *         fcb   C$LF
                      (/home/strick/6809):01793         *         fcc   "Are you sure? "
     0024             (/home/strick/6809):01794         HDFmtLen equ   *-HDFmt   
0BA5 426F746820504859 (/home/strick/6809):01795         Both     fcc   "Both PHYSICAL and LOGICAL format? "
     534943414C20616E
     64204C4F47494341
     4C20666F726D6174
     3F20
     0022             (/home/strick/6809):01796         BothLen  equ   *-Both    
0BC7 506879736963616C (/home/strick/6809):01797         Verify   fcc   "Physical Verify desired? "
     2056657269667920
     646573697265643F
     20
     0019             (/home/strick/6809):01798         VerifyL  equ   *-Verify  
0BE0                  (/home/strick/6809):01799         SUMH                     
0BE0 0D0A             (/home/strick/6809):01800                  fcb   C$CR,C$LF 
0BE2 2020202020204E69 (/home/strick/6809):01801                  fcc   "      NitrOS-9 RBF Disk Formatter"
     74724F532D392052
     4246204469736B20
     466F726D61747465
     72
0C03 0D0A             (/home/strick/6809):01802                  fcb   C$CR,C$LF 
0C05 2D2D2D2D2D2D2D2D (/home/strick/6809):01803                  fcc   "------------  Format Data  ------------"
     2D2D2D2D2020466F
     726D617420446174
     6120202D2D2D2D2D
     2D2D2D2D2D2D2D
0C2C 0D0A             (/home/strick/6809):01804                  fcb   C$CR,C$LF 
                      (/home/strick/6809):01805         *         fcb   C$CR,C$LF
                      (/home/strick/6809):01806         *         fcc   "Fixed values:"
0C2E 0D0A             (/home/strick/6809):01807                  fcb   C$CR,C$LF 
     0050             (/home/strick/6809):01808         SUMHL    equ   *-SUMH    
0C30 202020202020466C (/home/strick/6809):01809         FMT      fcc   "      Floppy Disk Format: "
     6F70707920446973
     6B20466F726D6174
     3A20
     001A             (/home/strick/6809):01810         FMTL     equ   *-FMT     
0C4A 2020202020202020 (/home/strick/6809):01811         TOF      fcc   "            Track Offset: "
     2020202054726163
     6B204F6666736574
     3A20
     001A             (/home/strick/6809):01812         TOFL     equ   *-TOF     
0C64 2020202020202020 (/home/strick/6809):01813         SOF      fcc   "           Sector Offset: "
     202020536563746F
     72204F6666736574
     3A20
     001A             (/home/strick/6809):01814         SOFL     equ   *-SOF     
0C7E 2020202050687973 (/home/strick/6809):01815         PFS      fcc   "    Physical floppy size: "
     6963616C20666C6F
     7070792073697A65
     3A20
     001A             (/home/strick/6809):01816         PFSL     equ   *-PFS     
0C98 2020202020202020 (/home/strick/6809):01817         DC       fcc   "           Disk capacity: "
     2020204469736B20
     6361706163697479
     3A20
     001A             (/home/strick/6809):01818         DCL      equ   *-DC      
0CB2 2020202020202020 (/home/strick/6809):01819         CSZ      fcc   "            Cluster size: "
     20202020436C7573
     7465722073697A65
     3A20
     001A             (/home/strick/6809):01820         CSZL     equ   *-CSZ     
                      (/home/strick/6809):01821         *SSZ      fcc   "             Sector size: "
                      (/home/strick/6809):01822         *SSZL     equ   *-SSZ
0CCC 2020202020202020 (/home/strick/6809):01823         SST      fcc   "           Sectors/track: "
     202020536563746F
     72732F747261636B
     3A20
     001A             (/home/strick/6809):01824         SSTL     equ   *-SST     
0CE6 2020202020547261 (/home/strick/6809):01825         TZST     fcc   "     Track zero sect/trk: "
     636B207A65726F20
     736563742F74726B
     3A20
     001A             (/home/strick/6809):01826         TZSTL    equ   *-TZST    
                      (/home/strick/6809):01827         *LSNOF    fcc   "              LSN offset: $"
                      (/home/strick/6809):01828         *LSNOFL   equ   *-LSNOF
0D00 546F74616C207068 (/home/strick/6809):01829         TPC      fcc   "Total physical cylinders: "
     79736963616C2063
     796C696E64657273
     3A20
     001A             (/home/strick/6809):01830         TPCL     equ   *-TPC     
0D1A 204D696E696D756D (/home/strick/6809):01831         MSA      fcc   " Minimum sect allocation: "
     207365637420616C
     6C6F636174696F6E
     3A20
     001A             (/home/strick/6809):01832         MSAL     equ   *-MSA     
0D34 2020202020202020 (/home/strick/6809):01833         RF       fcc   "        Recording format: "
     5265636F7264696E
     6720666F726D6174
     3A20
     001A             (/home/strick/6809):01834         RFL      equ   *-RF      
0D4E 2020202054726163 (/home/strick/6809):01835         TD       fcc   "    Track density in TPI: "
     6B2064656E736974
     7920696E20545049
     3A20
     001A             (/home/strick/6809):01836         TDL      equ   *-TD      
0D68 4E756D626572206F (/home/strick/6809):01837         NLC      fcc   "Number of log. cylinders: "
     66206C6F672E2063
     796C696E64657273
     3A20
     001A             (/home/strick/6809):01838         NLCL     equ   *-NLC     
0D82 2020202020204E75 (/home/strick/6809):01839         NS       fcc   "      Number of surfaces: "
     6D626572206F6620
     7375726661636573
     3A20
     001A             (/home/strick/6809):01840         NSL      equ   *-NS      
0D9C 536563746F722069 (/home/strick/6809):01841         SI       fcc   "Sector interleave offset: "
     6E7465726C656176
     65206F6666736574
     3A20
     001A             (/home/strick/6809):01842         SIL      equ   *-SI      
0DB6 20736563746F7273 (/home/strick/6809):01843         SCTS     fcc   " sectors"
0DBE 0D               (/home/strick/6809):01844                  fcb   C$CR      
0DBF 2020202020202020 (/home/strick/6809):01845         SPPR     fcc   "                         ("
     2020202020202020
     2020202020202020
     2028
     001A             (/home/strick/6809):01846         SPPRL    equ   *-SPPR    
0DD9 20627974657329   (/home/strick/6809):01847         PRSP     fcc   " bytes)" 
0DE0 0D               (/home/strick/6809):01848                  fcb   C$CR      
     0008             (/home/strick/6809):01849         PRSPL    equ   *-PRSP    
0DE1 436F436F         (/home/strick/6809):01850         _CoCo    fcc   !CoCo!    
0DE5 0D               (/home/strick/6809):01851                  fcb   C$CR      
0DE6 447261676F6E     (/home/strick/6809):01852         _Dragon  fcc   !Dragon!  
0DEC 0D               (/home/strick/6809):01853                  fcb   C$CR      
0DED 5374616E64617264 (/home/strick/6809):01854         Standard fcc   !Standard OS-9!
     204F532D39
0DFA 0D               (/home/strick/6809):01855                  fcb   C$CR      
0DFB 3320312F3222     (/home/strick/6809):01856         Three5   fcc   !3 1/2"!  
0E01 0D               (/home/strick/6809):01857                  fcb   C$CR      
0E02 3520312F3422     (/home/strick/6809):01858         FiveQ    fcc   !5 1/4"!  
0E08 0D               (/home/strick/6809):01859                  fcb   C$CR      
0E09 4D               (/home/strick/6809):01860         _MFM     fcc   /M/       
0E0A 464D             (/home/strick/6809):01861         FM       fcc   /FM/      
0E0C 0D               (/home/strick/6809):01862                  fcb   C$CR      
0E0D 3438             (/home/strick/6809):01863         TPI48    fcc   /48/      
0E0F 0D               (/home/strick/6809):01864                  fcb   C$CR      
0E10 3936             (/home/strick/6809):01865         TPI96    fcc   !96!      
0E12 0D               (/home/strick/6809):01866                  fcb   C$CR      
0E13 313335           (/home/strick/6809):01867         TPI135   fcc   !135!     
0E16 0D               (/home/strick/6809):01868                  fcb   C$CR      
                      (/home/strick/6809):01869                                  
                      (/home/strick/6809):01870                                  
0E17                  (/home/strick/6809):01871         HDSummary                 
0E17 8D44             (/home/strick/6809):01872                  bsr   ShowHeader
0E19 17009F           (/home/strick/6809):01873                  lbsr  ShowDiskCapacity
0E1C D625             (/home/strick/6809):01874                  ldb   <dtype    
0E1E C410             (/home/strick/6809):01875                  andb  #TYPH.DSQ 
0E20 260C             (/home/strick/6809):01876                  bne   o@        
0E22 170101           (/home/strick/6809):01877                  lbsr  ShowSectorsTrack
0E25 170130           (/home/strick/6809):01878                  lbsr  ShowSectorsTrackZero
0E28 1701C8           (/home/strick/6809):01879                  lbsr  ShowNumberSurfaces
0E2B 17013A           (/home/strick/6809):01880                  lbsr  ShowTotalPhysCylinders
0E2E 170147           (/home/strick/6809):01881         o@       lbsr  ShowClusterSize
0E31 170155           (/home/strick/6809):01882                  lbsr  ShowSAS   
0E34 39               (/home/strick/6809):01883                  rts             
                      (/home/strick/6809):01884                                  
0E35                  (/home/strick/6809):01885         FloppySummary                 
0E35 8D26             (/home/strick/6809):01886                  bsr   ShowHeader
0E37 8D32             (/home/strick/6809):01887                  bsr   ShowDiskType
0E39 8D5F             (/home/strick/6809):01888                  bsr   ShowPhysFloppy
0E3B 1700E8           (/home/strick/6809):01889                  lbsr  ShowSectorsTrack
0E3E 170117           (/home/strick/6809):01890                  lbsr  ShowSectorsTrackZero
0E41 170124           (/home/strick/6809):01891                  lbsr  ShowTotalPhysCylinders
0E44 1700EF           (/home/strick/6809):01892                  lbsr  ShowTrackOffset
0E47 1700FD           (/home/strick/6809):01893                  lbsr  ShowSectorOffset
0E4A 17013C           (/home/strick/6809):01894                  lbsr  ShowSAS   
0E4D 17014A           (/home/strick/6809):01895                  lbsr  ShowRecordingFormat
0E50 170166           (/home/strick/6809):01896                  lbsr  ShowTrackDensity
0E53 17018D           (/home/strick/6809):01897                  lbsr  ShowNumberLogCylinders
0E56 17019A           (/home/strick/6809):01898                  lbsr  ShowNumberSurfaces
0E59 1701A7           (/home/strick/6809):01899                  lbsr  ShowSectorInterleaveOffset
0E5C 39               (/home/strick/6809):01900                  rts             
                      (/home/strick/6809):01901                                  
0E5D                  (/home/strick/6809):01902         ShowHeader                 
0E5D 8601             (/home/strick/6809):01903                  lda   #$01      
0E5F 308DFD7D         (/home/strick/6809):01904                  leax  SUMH,pcr  
0E63 108E0050         (/home/strick/6809):01905                  ldy   #SUMHL    
0E67 103F8A           (/home/strick/6809):01906                  os9   I$Write   
0E6A 39               (/home/strick/6809):01907                  rts             
                      (/home/strick/6809):01908                                  
0E6B                  (/home/strick/6809):01909         ShowDiskType                 
0E6B 308DFDC1         (/home/strick/6809):01910                  leax  FMT,pcr   
0E6F 108E001A         (/home/strick/6809):01911                  ldy   #FMTL     
0E73 103F8A           (/home/strick/6809):01912                  os9   I$Write   
0E76 D625             (/home/strick/6809):01913                  ldb   <dtype    
0E78 308DFF65         (/home/strick/6809):01914                  leax  _CoCo,pcr  
0E7C C520             (/home/strick/6809):01915                  bitb  #TYP.CCF  
0E7E 2606             (/home/strick/6809):01916                  bne   n@        
0E80 308DFF69         (/home/strick/6809):01917         t@       leax  Standard,pcr
0E84 200C             (/home/strick/6809):01918                  bra   s@        
0E86 E6C900C0         (/home/strick/6809):01919         n@       ldb   IsDragon,u Get dragon flag
0E8A C164             (/home/strick/6809):01920                  cmpb  #DragonFlag Dragon disk ?
0E8C 2604             (/home/strick/6809):01921                  bne   s@        
0E8E 308DFF54         (/home/strick/6809):01922                  leax  _Dragon,pcr
0E92 108E0050         (/home/strick/6809):01923         s@       ldy   #80       
0E96 103F8C           (/home/strick/6809):01924                  os9   I$WritLn  
0E99 39               (/home/strick/6809):01925                  rts             
                      (/home/strick/6809):01926                                  
0E9A                  (/home/strick/6809):01927         ShowPhysFloppy                 
0E9A 308DFDE0         (/home/strick/6809):01928                  leax  PFS,pcr   
0E9E 108E001A         (/home/strick/6809):01929                  ldy   #PFSL     
0EA2 103F8A           (/home/strick/6809):01930                  os9   I$Write   
0EA5 D625             (/home/strick/6809):01931                  ldb   <dtype    
0EA7 308DFF57         (/home/strick/6809):01932                  leax  FiveQ,pcr 
0EAB C501             (/home/strick/6809):01933                  bitb  #TYP.3    
0EAD 2704             (/home/strick/6809):01934                  beq   n@        
0EAF 308DFF48         (/home/strick/6809):01935         t@       leax  Three5,pcr
0EB3 108E0050         (/home/strick/6809):01936         n@       ldy   #80       
0EB7 103F8C           (/home/strick/6809):01937                  os9   I$WritLn  
0EBA 39               (/home/strick/6809):01938                  rts             
                      (/home/strick/6809):01939                                  
0EBB                  (/home/strick/6809):01940         ShowDiskCapacity                 
0EBB 308DFDD9         (/home/strick/6809):01941                  leax  DC,pcr    
0EBF 108E001A         (/home/strick/6809):01942                  ldy   #DCL      
0EC3 103F8A           (/home/strick/6809):01943                  os9   I$Write   
0EC6 4F               (/home/strick/6809):01944                  clra            
0EC7 D602             (/home/strick/6809):01945                  ldb   <totsects 
0EC9 DD05             (/home/strick/6809):01946                  std   <tmpnum   
0ECB DC03             (/home/strick/6809):01947                  ldd   <totsects+1
0ECD DD07             (/home/strick/6809):01948                  std   <tmpnum+2 
0ECF 30C805           (/home/strick/6809):01949                  leax  <tmpnum,u 
0ED2 31C902C6         (/home/strick/6809):01950                  leay  numbuf,u  
0ED6 17017A           (/home/strick/6809):01951                  lbsr  itoa      
                      (/home/strick/6809):01952         * X points to buffer, Y holds size
0ED9 3410             (/home/strick/6809):01953                  pshs  x         
0EDB 1F20             (/home/strick/6809):01954                  tfr   y,d       
0EDD 308B             (/home/strick/6809):01955                  leax  d,x       
                      (/home/strick/6809):01956         * X points at character after last member
0EDF 318DFED3         (/home/strick/6809):01957                  leay  SCTS,pcr  
0EE3 A6A0             (/home/strick/6809):01958         go@      lda   ,y+       
0EE5 A780             (/home/strick/6809):01959                  sta   ,x+       
0EE7 810D             (/home/strick/6809):01960                  cmpa  #C$CR     
0EE9 26F8             (/home/strick/6809):01961                  bne   go@       
0EEB 3510             (/home/strick/6809):01962                  puls  x         
0EED 108E0050         (/home/strick/6809):01963                  ldy   #80       
0EF1 8601             (/home/strick/6809):01964                  lda   #$01      
0EF3 103F8C           (/home/strick/6809):01965                  os9   I$WritLn  
                      (/home/strick/6809):01966         * Put out leading spaces and (
0EF6 308DFEC5         (/home/strick/6809):01967                  leax  SPPR,pcr  
0EFA 108E001A         (/home/strick/6809):01968                  ldy   #SPPRL    
0EFE 103F8A           (/home/strick/6809):01969                  os9   I$Write   
                      (/home/strick/6809):01970         * Copy number from totsects
0F01 4F               (/home/strick/6809):01971                  clra            
0F02 EC42             (/home/strick/6809):01972                  ldd   totsects,u
0F04 ED45             (/home/strick/6809):01973                  std   tmpnum,u  
0F06 A644             (/home/strick/6809):01974                  lda   totsects+2,u
0F08 5F               (/home/strick/6809):01975                  clrb            
0F09 ED47             (/home/strick/6809):01976                  std   tmpnum+2,u
0F0B 30C805           (/home/strick/6809):01977                  leax  <tmpnum,u 
0F0E 31C902C6         (/home/strick/6809):01978                  leay  numbuf,u  
0F12 17013E           (/home/strick/6809):01979                  lbsr  itoa      
                      (/home/strick/6809):01980         * X points to the ASCII number
                      (/home/strick/6809):01981         * Y holds length
0F15 8601             (/home/strick/6809):01982                  lda   #$01      
0F17 103F8A           (/home/strick/6809):01983                  os9   I$Write   
0F1A 308DFEBB         (/home/strick/6809):01984                  leax  PRSP,pcr  
0F1E 108E0008         (/home/strick/6809):01985                  ldy   #PRSPL    
0F22 103F8C           (/home/strick/6809):01986                  os9   I$WritLn  
0F25 39               (/home/strick/6809):01987                  rts             
                      (/home/strick/6809):01988                                  
0F26                  (/home/strick/6809):01989         ShowSectorsTrack                 
0F26 308DFDA2         (/home/strick/6809):01990                  leax  SST,pcr   
0F2A 108E001A         (/home/strick/6809):01991                  ldy   #SSTL     
0F2E 103F8A           (/home/strick/6809):01992                  os9   I$Write   
0F31 DC20             (/home/strick/6809):01993                  ldd   <sectors  
0F33 1600DD           (/home/strick/6809):01994                  lbra  PrintNum  
                      (/home/strick/6809):01995                                  
0F36                  (/home/strick/6809):01996         ShowTrackOffset                 
0F36 308DFD10         (/home/strick/6809):01997                  leax  TOF,pcr   
0F3A 108E001A         (/home/strick/6809):01998                  ldy   #TOFL     
0F3E 103F8A           (/home/strick/6809):01999                  os9   I$Write   
0F41 4F               (/home/strick/6809):02000                  clra            
0F42 D653             (/home/strick/6809):02001                  ldb   <toffs    
0F44 1600CC           (/home/strick/6809):02002                  lbra  PrintNum  
                      (/home/strick/6809):02003                                  
0F47                  (/home/strick/6809):02004         ShowSectorOffset                 
0F47 308DFD19         (/home/strick/6809):02005                  leax  sOF,pcr   
0F4B 108E001A         (/home/strick/6809):02006                  ldy   #SOFL     
0F4F 103F8A           (/home/strick/6809):02007                  os9   I$Write   
0F52 4F               (/home/strick/6809):02008                  clra            
0F53 D654             (/home/strick/6809):02009                  ldb   <soffs    
0F55 1600BB           (/home/strick/6809):02010                  lbra  PrintNum  
                      (/home/strick/6809):02011                                  
0F58                  (/home/strick/6809):02012         ShowSectorsTrackZero                 
0F58 308DFD8A         (/home/strick/6809):02013                  leax  TZST,pcr  
0F5C 108E001A         (/home/strick/6809):02014                  ldy   #TZSTL    
0F60 103F8A           (/home/strick/6809):02015                  os9   I$Write   
0F63 DC22             (/home/strick/6809):02016                  ldd   <sectors0 
0F65 1600AB           (/home/strick/6809):02017                  lbra  PrintNum  
                      (/home/strick/6809):02018                                  
0F68                  (/home/strick/6809):02019         ShowTotalPhysCylinders                 
0F68 308DFD94         (/home/strick/6809):02020                  leax  TPC,pcr   
0F6C 108E001A         (/home/strick/6809):02021                  ldy   #TPCL     
0F70 103F8A           (/home/strick/6809):02022                  os9   I$Write   
0F73 DC1C             (/home/strick/6809):02023                  ldd   <ncyls    
0F75 16009B           (/home/strick/6809):02024                  lbra  PrintNum  
                      (/home/strick/6809):02025                                  
0F78                  (/home/strick/6809):02026         ShowClusterSize                 
0F78 308DFD36         (/home/strick/6809):02027                  leax  CSZ,pcr   
0F7C 108E001A         (/home/strick/6809):02028                  ldy   #CSZL     
0F80 103F8A           (/home/strick/6809):02029                  os9   I$Write   
0F83 4F               (/home/strick/6809):02030                  clra            
0F84 D62E             (/home/strick/6809):02031                  ldb   <clustsiz 
0F86 16008A           (/home/strick/6809):02032                  lbra  PrintNum  
                      (/home/strick/6809):02033                                  
0F89                  (/home/strick/6809):02034         ShowSAS                  
0F89 308DFD8D         (/home/strick/6809):02035                  leax  MSA,pcr   
0F8D 108E001A         (/home/strick/6809):02036                  ldy   #MSAL     
0F91 103F8A           (/home/strick/6809):02037                  os9   I$Write   
0F94 4F               (/home/strick/6809):02038                  clra            
0F95 D627             (/home/strick/6809):02039                  ldb   <sas      
0F97 160079           (/home/strick/6809):02040                  lbra  PrintNum  
                      (/home/strick/6809):02041                                  
0F9A                  (/home/strick/6809):02042         ShowRecordingFormat                 
0F9A 308DFD96         (/home/strick/6809):02043                  leax  RF,pcr    
0F9E 108E001A         (/home/strick/6809):02044                  ldy   #RFL      
0FA2 103F8A           (/home/strick/6809):02045                  os9   I$Write   
0FA5 308DFE60         (/home/strick/6809):02046                  leax  _MFM,pcr  
0FA9 0D18             (/home/strick/6809):02047                  tst   <mfm      
0FAB 2604             (/home/strick/6809):02048                  bne   n@        
0FAD 308DFE59         (/home/strick/6809):02049                  leax  FM,pcr    
0FB1 108E0050         (/home/strick/6809):02050         n@       ldy   #80       
0FB5 103F8C           (/home/strick/6809):02051                  os9   I$WritLn  
0FB8 39               (/home/strick/6809):02052                  rts             
                      (/home/strick/6809):02053                                  
0FB9                  (/home/strick/6809):02054         ShowTrackDensity                 
0FB9 308DFD91         (/home/strick/6809):02055                  leax  TD,pcr    
0FBD 108E001A         (/home/strick/6809):02056                  ldy   #TDL      
0FC1 103F8A           (/home/strick/6809):02057                  os9   I$Write   
0FC4 308DFE4B         (/home/strick/6809):02058                  leax  TPI135,pcr
0FC8 D625             (/home/strick/6809):02059                  ldb   <dtype    
0FCA 54               (/home/strick/6809):02060                  lsrb            
0FCB 250E             (/home/strick/6809):02061                  bcs   n@        
0FCD 308DFE3C         (/home/strick/6809):02062         x@       leax  TPI48,pcr 
0FD1 D626             (/home/strick/6809):02063                  ldb   <dns      
0FD3 C502             (/home/strick/6809):02064                  bitb  #DNS.DTD  
0FD5 2704             (/home/strick/6809):02065                  beq   n@        
0FD7 308DFE35         (/home/strick/6809):02066                  leax  TPI96,pcr 
0FDB 108E0050         (/home/strick/6809):02067         n@       ldy   #80       
0FDF 103F8C           (/home/strick/6809):02068                  os9   I$WritLn  
0FE2 39               (/home/strick/6809):02069                  rts             
                      (/home/strick/6809):02070                                  
0FE3                  (/home/strick/6809):02071         ShowNumberLogCylinders                 
0FE3 308DFD81         (/home/strick/6809):02072                  leax  NLC,pcr   
0FE7 108E001A         (/home/strick/6809):02073                  ldy   #NLCL     
0FEB 103F8A           (/home/strick/6809):02074                  os9   I$Write   
0FEE DC1C             (/home/strick/6809):02075                  ldd   <ncyls    
0FF0 160020           (/home/strick/6809):02076                  lbra  PrintNum  
                      (/home/strick/6809):02077                                  
0FF3                  (/home/strick/6809):02078         ShowNumberSurfaces                 
0FF3 308DFD8B         (/home/strick/6809):02079                  leax  NS,pcr    
0FF7 108E001A         (/home/strick/6809):02080                  ldy   #NSL      
0FFB 103F8A           (/home/strick/6809):02081                  os9   I$Write   
0FFE 4F               (/home/strick/6809):02082                  clra            
0FFF D61B             (/home/strick/6809):02083                  ldb   <numsides 
1001 2010             (/home/strick/6809):02084                  bra   PrintNum  
                      (/home/strick/6809):02085                                  
1003                  (/home/strick/6809):02086         ShowSectorInterleaveOffset                 
1003 308DFD95         (/home/strick/6809):02087                  leax  SI,pcr    
1007 108E001A         (/home/strick/6809):02088                  ldy   #SIL      
100B 103F8A           (/home/strick/6809):02089                  os9   I$Write   
100E 4F               (/home/strick/6809):02090                  clra            
100F D62B             (/home/strick/6809):02091                  ldb   <interlv  
1011 2000             (/home/strick/6809):02092                  bra   PrintNum  
                      (/home/strick/6809):02093                                  
                      (/home/strick/6809):02094         * Output decimal number to stdout with CR tacked at end
                      (/home/strick/6809):02095         * Entry: B = number
                      (/home/strick/6809):02096         * Leading zeros are NOT printed
1013                  (/home/strick/6809):02097         PrintNum                 
1013 3406             (/home/strick/6809):02098                  pshs  d         
1015 6FE2             (/home/strick/6809):02099                  clr   ,-s       
1017 6FE2             (/home/strick/6809):02100                  clr   ,-s       
1019 30E4             (/home/strick/6809):02101                  leax  ,s        
101B 31C902C6         (/home/strick/6809):02102                  leay  numbuf,u  
101F 8D32             (/home/strick/6809):02103                  bsr   itoa      
1021 8601             (/home/strick/6809):02104                  lda   #$01      
1023 103F8A           (/home/strick/6809):02105                  os9   I$Write   
1026 3264             (/home/strick/6809):02106                  leas  4,s       
1028 16F341           (/home/strick/6809):02107                  lbra  LineFd    
                      (/home/strick/6809):02108                                  
102B 3B9ACA00         (/home/strick/6809):02109         Base     fcb   $3B,$9A,$CA,$00 1,000,000,000
102F 05F5E100         (/home/strick/6809):02110                  fcb   $05,$F5,$E1,$00 100,000,000
1033 00989680         (/home/strick/6809):02111                  fcb   $00,$98,$96,$80 10,000,000
1037 000F4240         (/home/strick/6809):02112                  fcb   $00,$0f,$42,$40 1,000,000
103B 000186A0         (/home/strick/6809):02113                  fcb   $00,$01,$86,$a0 100,000
103F 00002710         (/home/strick/6809):02114                  fcb   $00,$00,$27,$10 10,000
1043 000003E8         (/home/strick/6809):02115                  fcb   $00,$00,$03,$e8 1,000
1047 00000064         (/home/strick/6809):02116                  fcb   $00,$00,$00,$64 100
104B 0000000A         (/home/strick/6809):02117                  fcb   $00,$00,$00,$0a 10
104F 00000001         (/home/strick/6809):02118                  fcb   $00,$00,$00,$01 1
                      (/home/strick/6809):02119                                  
                      (/home/strick/6809):02120         * Entry:
                      (/home/strick/6809):02121         * X = address of 24 bit value
                      (/home/strick/6809):02122         * Y = address of buffer to hold hexadecimal number
                      (/home/strick/6809):02123         * Exit:
                      (/home/strick/6809):02124         * X = address of buffer holding hexadecimal number
                      (/home/strick/6809):02125         * Y = length of number string in bytes (always 6)
                      (/home/strick/6809):02126         *i24toha  pshs  y
                      (/home/strick/6809):02127         *         ldb   #3
                      (/home/strick/6809):02128         *         pshs  b
                      (/home/strick/6809):02129         *a@       lda   ,x
                      (/home/strick/6809):02130         *         anda  #$F0
                      (/home/strick/6809):02131         *         lsra
                      (/home/strick/6809):02132         *         lsra
                      (/home/strick/6809):02133         *         lsra
                      (/home/strick/6809):02134         *         lsra
                      (/home/strick/6809):02135         *         cmpa  #10
                      (/home/strick/6809):02136         *         blt   o@
                      (/home/strick/6809):02137         *         adda  #$41
                      (/home/strick/6809):02138         *o@       sta   ,y+
                      (/home/strick/6809):02139         *         lda   ,x+
                      (/home/strick/6809):02140         *         anda  #$0F
                      (/home/strick/6809):02141         *         cmpa  #10
                      (/home/strick/6809):02142         *         blt   p@
                      (/home/strick/6809):02143         *         adda  #$41
                      (/home/strick/6809):02144         *p@       sta   ,y+
                      (/home/strick/6809):02145         *         dec   ,s
                      (/home/strick/6809):02146         *         bne   a@
                      (/home/strick/6809):02147         *         leas  1,s
                      (/home/strick/6809):02148         *         ldy   #0006
                      (/home/strick/6809):02149         *         puls  x,pc
                      (/home/strick/6809):02150                                  
                      (/home/strick/6809):02151         * Entry:
                      (/home/strick/6809):02152         * X = address of 32 bit value
                      (/home/strick/6809):02153         * Y = address of buffer to hold number
                      (/home/strick/6809):02154         * Exit:
                      (/home/strick/6809):02155         * X = address of buffer holding number
                      (/home/strick/6809):02156         * Y = length of number string in bytes
1053 3460             (/home/strick/6809):02157         itoa     pshs  u,y       
1055 1F23             (/home/strick/6809):02158                  tfr   y,u       
1057 C60A             (/home/strick/6809):02159                  ldb   #10        max number of numbers (10^9)
1059 3404             (/home/strick/6809):02160                  pshs  b          save count on stack
105B 318CCD           (/home/strick/6809):02161                  leay  Base,pcr   point to base of numbers
105E 8630             (/home/strick/6809):02162         s@       lda   #$30       put #'0
1060 A7C4             (/home/strick/6809):02163                  sta   ,u         at U
1062 8D42             (/home/strick/6809):02164         s1@      bsr   Sub32      ,X=,X-,Y
1064 6CC4             (/home/strick/6809):02165                  inc   ,u        
1066 24FA             (/home/strick/6809):02166                  bcc   s1@        if X>0, continue
1068 8D4B             (/home/strick/6809):02167                  bsr   Add32      add back in
106A 6AC0             (/home/strick/6809):02168                  dec   ,u+       
106C 6AE4             (/home/strick/6809):02169                  dec   ,s         decrement counter
106E 2716             (/home/strick/6809):02170                  beq   done@     
1070 A6E4             (/home/strick/6809):02171                  lda   ,s        
1072 8109             (/home/strick/6809):02172                  cmpa  #$09      
1074 2708             (/home/strick/6809):02173                  beq   comma@    
1076 8106             (/home/strick/6809):02174                  cmpa  #$06      
1078 2704             (/home/strick/6809):02175                  beq   comma@    
107A 8103             (/home/strick/6809):02176                  cmpa  #$03      
107C 2604             (/home/strick/6809):02177                  bne   s2@       
107E C62C             (/home/strick/6809):02178         comma@   ldb   #',       
1080 E7C0             (/home/strick/6809):02179                  stb   ,u+       
1082 3124             (/home/strick/6809):02180         s2@      leay  4,y        point to next
1084 20D8             (/home/strick/6809):02181                  bra   s@        
1086 3261             (/home/strick/6809):02182         done@    leas  1,s       
                      (/home/strick/6809):02183         * 1,234,567,890
1088 C60E             (/home/strick/6809):02184                  ldb   #14        length of string with commas + 1
108A AEE1             (/home/strick/6809):02185                  ldx   ,s++       get pointer to buffer
108C 5A               (/home/strick/6809):02186         a@       decb            
108D 2711             (/home/strick/6809):02187                  beq   ex@       
108F A680             (/home/strick/6809):02188                  lda   ,x+        get byte
1091 8130             (/home/strick/6809):02189                  cmpa  #'0       
1093 27F7             (/home/strick/6809):02190                  beq   a@        
1095 812C             (/home/strick/6809):02191                  cmpa  #',       
1097 27F3             (/home/strick/6809):02192                  beq   a@        
1099 4F               (/home/strick/6809):02193                  clra            
109A 1F02             (/home/strick/6809):02194                  tfr   d,y        transfer count into Y
109C 301F             (/home/strick/6809):02195         v@       leax  -1,x      
109E 35C0             (/home/strick/6809):02196                  puls  u,pc      
10A0 108E0001         (/home/strick/6809):02197         ex@      ldy   #0001     
10A4 20F6             (/home/strick/6809):02198                  bra   v@        
                      (/home/strick/6809):02199                                  
                      (/home/strick/6809):02200         * Entry:
                      (/home/strick/6809):02201         * X = address of 32 bit minuend
                      (/home/strick/6809):02202         * Y = address of 32 bit subtrahend
                      (/home/strick/6809):02203         * Exit:
                      (/home/strick/6809):02204         * X = address of 32 bit difference
10A6 EC02             (/home/strick/6809):02205         Sub32    ldd   2,x       
10A8 A322             (/home/strick/6809):02206                  subd  2,y       
10AA ED02             (/home/strick/6809):02207                  std   2,x       
10AC EC84             (/home/strick/6809):02208                  ldd   ,x        
10AE E221             (/home/strick/6809):02209                  sbcb  1,y       
10B0 A2A4             (/home/strick/6809):02210                  sbca  ,y        
10B2 ED84             (/home/strick/6809):02211                  std   ,x        
10B4 39               (/home/strick/6809):02212                  rts             
                      (/home/strick/6809):02213                                  
                      (/home/strick/6809):02214                                  
                      (/home/strick/6809):02215         * Entry:
                      (/home/strick/6809):02216         * X = address of 32 bit number
                      (/home/strick/6809):02217         * Y = address of 32 bit number
                      (/home/strick/6809):02218         * Exit:
                      (/home/strick/6809):02219         * X = address of 32 bit sum
10B5 EC02             (/home/strick/6809):02220         Add32    ldd   2,x       
10B7 E322             (/home/strick/6809):02221                  addd  2,y       
10B9 ED02             (/home/strick/6809):02222                  std   2,x       
10BB EC84             (/home/strick/6809):02223                  ldd   ,x        
10BD E921             (/home/strick/6809):02224                  adcb  1,y       
10BF A9A4             (/home/strick/6809):02225                  adca  ,y        
10C1 ED84             (/home/strick/6809):02226                  std   ,x        
10C3 39               (/home/strick/6809):02227                  rts             
                      (/home/strick/6809):02228                                  
                      (/home/strick/6809):02229                                  
                      (/home/strick/6809):02230                  ifne  DOROLL    
10C4                  (/home/strick/6809):02231         RollMsg  fcc   "        Recording Format:  FM/MFM"
                      (/home/strick/6809):02232                  fcb   C$LF      
                      (/home/strick/6809):02233                  fcc   "    Track density in TPI:  48/96"
                      (/home/strick/6809):02234                  fcb   C$LF      
                      (/home/strick/6809):02235                  fcc   "     Number of Cylinders:  0000"
                      (/home/strick/6809):02236                  fcb   C$LF      
                      (/home/strick/6809):02237                  fcc   "      Number of Surfaces:  0000"
                      (/home/strick/6809):02238                  fcb   C$LF      
                      (/home/strick/6809):02239                  fcc   "Sector Interleave Offset:  0000"
                      (/home/strick/6809):02240                  fcb   C$LF      
                      (/home/strick/6809):02241                  fcc   "               Disk type:  0000"
                      (/home/strick/6809):02242                  fcb   C$LF      
                      (/home/strick/6809):02243                  fcc   "         Sectors/Cluster:  0000"
                      (/home/strick/6809):02244                  fcb   C$LF      
                      (/home/strick/6809):02245                  fcc   "           Sectors/Track:  0000"
                      (/home/strick/6809):02246                  fdb   $0A0A     
                      (/home/strick/6809):02247                  fcc   "Sector: 00  Track: 00  Side: 00"
10C4                  (/home/strick/6809):02248         RollLen  equ   *-RollMsg 
                      (/home/strick/6809):02249                  endc            
                      (/home/strick/6809):02250                                  
10C4 0ABD19           (/home/strick/6809):02251                  emod            
     10C7             (/home/strick/6809):02252         eom      equ   *         
                      (/home/strick/6809):02253                  end             
