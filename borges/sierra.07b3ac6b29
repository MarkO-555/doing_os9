                      (../objs_lsl/sierr):00001         ********************************************************************
                      (../objs_lsl/sierr):00002         * sierra - Sierra setup module
                      (../objs_lsl/sierr):00003         *
                      (../objs_lsl/sierr):00004         * $Id$
                      (../objs_lsl/sierr):00005         *
                      (../objs_lsl/sierr):00006         * Notes: This module is for the 2.072 version of the interpreter.
                      (../objs_lsl/sierr):00007         *
                      (../objs_lsl/sierr):00008         * Edt/Rev  YYYY/MM/DD  Modified by
                      (../objs_lsl/sierr):00009         * Comment
                      (../objs_lsl/sierr):00010         * ------------------------------------------------------------------
                      (../objs_lsl/sierr):00011         *   0      2003/01/31  Paul W. Zibaila
                      (../objs_lsl/sierr):00012         * Disassembly of original distribution and merged in comments from
                      (../objs_lsl/sierr):00013         * an earlier disasm dated 1992.
                      (../objs_lsl/sierr):00014         *
                      (../objs_lsl/sierr):00015         *   1      2003/03/10  Boisy G. Pitre
                      (../objs_lsl/sierr):00016         * Monitor type bug now fixed.
                      (../objs_lsl/sierr):00017         *   2      2012/01/05  Robert Gault
                      (../objs_lsl/sierr):00018         * Converted raw reads of $FFA0-$FFAF to a routine that gets images
                      (../objs_lsl/sierr):00019         * from the system. Now works with 2 or 8Meg systems. Unfortunately
                      (../objs_lsl/sierr):00020         * it was necessary to make buffers within the code rather than data
                      (../objs_lsl/sierr):00021         * area because it was safer given data was shared with other modules.
                      (../objs_lsl/sierr):00022         *
                      (../objs_lsl/sierr):00023         * Simplified some other routines.
                      (../objs_lsl/sierr):00024         
                      (../objs_lsl/sierr):00025         *Monitor defs
                      (../objs_lsl/sierr):00026         #COMP    equ   0
                      (../objs_lsl/sierr):00027         #RGB     equ   1
                      (../objs_lsl/sierr):00028         #MONO    equ   2
                      (../objs_lsl/sierr):00029         
                      (../objs_lsl/sierr):00030         
                      (../objs_lsl/sierr):00031         * I/O path definitions
     0000             (../objs_lsl/sierr):00032         StdIn    equ   0
     0001             (../objs_lsl/sierr):00033         StdOut   equ   1
     0002             (../objs_lsl/sierr):00034         StdErr   equ   2
                      (../objs_lsl/sierr):00035         
                      (../objs_lsl/sierr):00036                  nam   sierra
                      (../objs_lsl/sierr):00037                  ttl   Sierra setup module
                      (../objs_lsl/sierr):00038         
                      (../objs_lsl/sierr):00039                  ifp1
                      (../objs_lsl/sierr):00040                  use   defsfile
     0002             (         defsfile):00001         Level   equ     2
                      (         defsfile):00002         
                      (         defsfile):00003                 use     os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (         defsfile):00004                 use     scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (         defsfile):00005                 use     coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0040                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0040                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0040                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         *************************************************
                      (           coco.d):00148         *
                      (           coco.d):00149         * NitrOS-9 Level 1 Section
                      (           coco.d):00150         *
                      (           coco.d):00151         *************************************************
                      (           coco.d):00152         
0004                  (           coco.d):00153         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE      
                      (           coco.d):00156         
                      (           coco.d):00157         *************************************************
                      (           coco.d):00158         *
                      (           coco.d):00159         * NitrOS-9 Level 2 Section
                      (           coco.d):00160         *
                      (           coco.d):00161         *************************************************
                      (           coco.d):00162         
                      (           coco.d):00163         ****************************************
                      (           coco.d):00164         * Dynamic Address Translator Definitions
                      (           coco.d):00165         *
     0008             (           coco.d):00166         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00167         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00168         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00169         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00170         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00171         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00172         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00173         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00174         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00175         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00176         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00177         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00178         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00179         IOBlock        EQU       $3F
     003F             (           coco.d):00180         ROMBlock       EQU       $3F
     007F             (           coco.d):00181         IOAddr         EQU       $7F
     0001             (           coco.d):00182         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00183         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00184         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00185         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00186         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00187         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00188         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00189         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00190         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00191         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00192         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00193         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00194         
                      (           coco.d):00195         ***************************
                      (           coco.d):00196         * Color Computer 3 Specific
                      (           coco.d):00197         *
     0001             (           coco.d):00198         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00199         
                      (           coco.d):00200         ********************
                      (           coco.d):00201         * Hardware addresses
                      (           coco.d):00202         *
     FF00             (           coco.d):00203         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00204         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00205         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00206         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00207         
     0007             (           coco.d):00208         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00209         
                      (           coco.d):00210                        ENDC
                      (           coco.d):00211                        
                      (           coco.d):00212                        ENDC      
                      (           coco.d):00213         
                      (         defsfile):00006                 use     cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
     0001             (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
0004                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
0004                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0004                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0004                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0004                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0004                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0004                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0004                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0004                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0004                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
                      (       cocovtio.d):00043                        RMB       1
0004                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
0004                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
0004                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
0004                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
0004                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0004                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0004                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0004                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0004                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0004                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0004                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
0004                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
0004                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
0004                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0004                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0004                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   ??
0004                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0004                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0004                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0004                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0004                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0004                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF)
0004                  (       cocovtio.d):00066         V.MCol         RMB       1                   color? (C003,8001)
0004                  (       cocovtio.d):00067         V.4A           RMB       1
0004                  (       cocovtio.d):00068         V.PMask        RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0004                  (       cocovtio.d):00069         V.4C           RMB       1
0004                  (       cocovtio.d):00070         V.4D           RMB       1
0004                  (       cocovtio.d):00071         V.4E           RMB       1
0004                  (       cocovtio.d):00072         V.4F           RMB       1
0004                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0004                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0004                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0004                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0004                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0004                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0004                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0004                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0004                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0004                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
0004                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
0004                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
0004                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
0004                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0004                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0004                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0004                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0004                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0004                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0004                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0004                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0004                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0004                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0004                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
0004                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
0004                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
0004                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
0004                  (       cocovtio.d):00102         V.Spcl         RMB       1
0004                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
0004                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0004                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0004                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0004                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0004                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0004                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0004                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
                      (       cocovtio.d):00111         
0004                  (       cocovtio.d):00112         V.Flash        RMB       2                   Cursor flash routine address.
0004                  (       cocovtio.d):00113         v.FlashCount   RMB       1                   Cursor flash count
0004                  (       cocovtio.d):00114         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00115         
                      (       cocovtio.d):00116         * CoHR vars
                      (       cocovtio.d):00117         
0004                  (       cocovtio.d):00118         V.51ScrnA      RMB       2                   * Screen address.
0004                  (       cocovtio.d):00119         V.51XPos       RMB       1                   * X co-ordinate
0004                  (       cocovtio.d):00120         V.51YPos       RMB       1                   * Y co-ordinate
0004                  (       cocovtio.d):00121         V.51EscSeq     RMB       1                   * In escape sequence
0004                  (       cocovtio.d):00122         V.51ReverseFlag RMB       1                   * Reverse video flag
0004                  (       cocovtio.d):00123         V.51UnderlineFlag RMB       1                   * Underline flag
0004                  (       cocovtio.d):00124         V.51CtrlDispatch RMB       2                   * Ctrl char dispatch address, currently processing
0004                  (       cocovtio.d):00125         V.51BytePixOffset RMB       1                   * byte offset in screen line, of character X position        
0004                  (       cocovtio.d):00126         V.51OldCursorPosX RMB       1                   * Position of old cursor before update        
0004                  (       cocovtio.d):00127         V.51OldCursorPosY RMB       1
0004                  (       cocovtio.d):00128         V.51CursorChanged RMB       1                   * Has cursor position changed ? 1=yes,0=no
0004                  (       cocovtio.d):00129         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
0004                  (       cocovtio.d):00130         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
0004                  (       cocovtio.d):00131         V.51ScreenMask1 RMB       1                   * screen masks for drawing characters on screen         
0004                  (       cocovtio.d):00132         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00133         * End of CoHR vars
                      (       cocovtio.d):00134         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00135         **** code can clobber variables defined after these !                ****
0004                  (       cocovtio.d):00136         V.IBufH        RMB       1                   input buffer head
0004                  (       cocovtio.d):00137         V.IBufT        RMB       1                   input buffer tail
0004                  (       cocovtio.d):00138         V.InBuf        RMB       1                   input buffer ptr
0004                  (       cocovtio.d):00139         V.51End        RMB       1
                      (       cocovtio.d):00140                        RMB       250-.
0004                  (       cocovtio.d):00141         V.Last         EQU       .
                      (       cocovtio.d):00142         
                      (       cocovtio.d):00143         
                      (       cocovtio.d):00144         * Unknown for now
                      (       cocovtio.d):00145         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00146         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00147         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00148         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00149         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00150         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00151         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00152         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00153         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00154         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00155         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00156         
                      (       cocovtio.d):00157         *
                      (       cocovtio.d):00158         * Defs for V.COLoad flags.
                      (       cocovtio.d):00159         * 
                      (       cocovtio.d):00160         
0004                  (       cocovtio.d):00161         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
0004                  (       cocovtio.d):00162         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
0004                  (       cocovtio.d):00163         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
                      (       cocovtio.d):00164         
                      (       cocovtio.d):00165         *
                      (       cocovtio.d):00166         * Defs for cursor flash counter
                      (       cocovtio.d):00167         *
                      (       cocovtio.d):00168         
0004                  (       cocovtio.d):00169         CFlash50hz     EQU       25                  * 50Hz flash counter
0004                  (       cocovtio.d):00170         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00171         
                      (       cocovtio.d):00172                        ELSE
                      (       cocovtio.d):00173                        
                      (       cocovtio.d):00174         ********************************************************************
                      (       cocovtio.d):00175         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * $Id$
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00180         * Comment
                      (       cocovtio.d):00181         * ------------------------------------------------------------------
                      (       cocovtio.d):00182         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00183         * Started from systype
                      (       cocovtio.d):00184         
                      (       cocovtio.d):00185                        NAM       VTIODefs
                      (       cocovtio.d):00186                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         
                      (       cocovtio.d):00188         ****************
                      (       cocovtio.d):00189         * Window Devices
                      (       cocovtio.d):00190         *
                      (       cocovtio.d):00191                        ORG       $FF9F
FF9F                  (       cocovtio.d):00192         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (       cocovtio.d):00193         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (       cocovtio.d):00194         A.W1           RMB       1                   $FFA1
FFA2                  (       cocovtio.d):00195         A.W2           RMB       1                   $FFA2
FFA3                  (       cocovtio.d):00196         A.W3           RMB       1                   $FFA3
FFA4                  (       cocovtio.d):00197         A.W4           RMB       1                   $FFA4
FFA5                  (       cocovtio.d):00198         A.W5           RMB       1                   $FFA5
FFA6                  (       cocovtio.d):00199         A.W6           RMB       1                   $FFA6
FFA7                  (       cocovtio.d):00200         A.W7           RMB       1                   $FFA7
FFA8                  (       cocovtio.d):00201         A.W8           RMB       1                   $FFA8
FFA9                  (       cocovtio.d):00202         A.W9           RMB       1                   $FFA9
FFAA                  (       cocovtio.d):00203         A.W10          RMB       1                   $FFAA
FFAB                  (       cocovtio.d):00204         A.W11          RMB       1                   $FFAB
FFAC                  (       cocovtio.d):00205         A.W12          RMB       1                   $FFAC
FFAD                  (       cocovtio.d):00206         A.W13          RMB       1                   $FFAD
FFAE                  (       cocovtio.d):00207         A.W14          RMB       1                   $FFAE
FFAF                  (       cocovtio.d):00208         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00209         
                      (       cocovtio.d):00210         **********************************
                      (       cocovtio.d):00211         * Pointer Device Packet Definition
                      (       cocovtio.d):00212         *
                      (       cocovtio.d):00213                        ORG       0
0000                  (       cocovtio.d):00214         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (       cocovtio.d):00215         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (       cocovtio.d):00216         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (       cocovtio.d):00217                        RMB       2                   reserved
0005                  (       cocovtio.d):00218         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (       cocovtio.d):00219         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (       cocovtio.d):00220         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (       cocovtio.d):00221         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (       cocovtio.d):00222         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (       cocovtio.d):00223         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (       cocovtio.d):00224         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (       cocovtio.d):00225         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (       cocovtio.d):00226         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (       cocovtio.d):00227         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (       cocovtio.d):00228                        RMB       2                   Reserved
0012                  (       cocovtio.d):00229         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (       cocovtio.d):00230         Pt.BDY         RMB       2                   Button down Y value
0016                  (       cocovtio.d):00231         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (       cocovtio.d):00232         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (       cocovtio.d):00233         Pt.AcX         RMB       2                   Actual X Value
001A                  (       cocovtio.d):00234         Pt.AcY         RMB       2                   Actual Y Value
001C                  (       cocovtio.d):00235         Pt.WRX         RMB       2                   Window Relative X
001E                  (       cocovtio.d):00236         Pt.WRY         RMB       2                   Window Relative Y
     0020             (       cocovtio.d):00237         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00238         
                      (       cocovtio.d):00239         **************************
                      (       cocovtio.d):00240         * window regions for mouse
                      (       cocovtio.d):00241         *
     0000             (       cocovtio.d):00242         WR.Cntnt       EQU       0                   content region
     0001             (       cocovtio.d):00243         WR.Cntrl       EQU       1                   control region
     0002             (       cocovtio.d):00244         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00245         
                      (       cocovtio.d):00246         *************************************
                      (       cocovtio.d):00247         * Standard system get/put buffer defs
                      (       cocovtio.d):00248         *
                      (       cocovtio.d):00249         *
                      (       cocovtio.d):00250         * system group numbers
                      (       cocovtio.d):00251         *
                      (       cocovtio.d):00252                        ORG       200
00C8                  (       cocovtio.d):00253         Grp.Fnt        RMB       1                   font group
00C9                  (       cocovtio.d):00254         Grp.Clip       RMB       1                   clipboard group
00CA                  (       cocovtio.d):00255         Grp.Ptr        RMB       1                   pointer group
00CB                  (       cocovtio.d):00256         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (       cocovtio.d):00257         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (       cocovtio.d):00258         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         * font buffer numbers
                      (       cocovtio.d):00261         *
                      (       cocovtio.d):00262                        ORG       1
0001                  (       cocovtio.d):00263         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (       cocovtio.d):00264         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (       cocovtio.d):00265         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00266         *
                      (       cocovtio.d):00267         * pattern buffer numbers
                      (       cocovtio.d):00268         *
                      (       cocovtio.d):00269                        ORG       1
0001                  (       cocovtio.d):00270         Pat.Dot        RMB       1
0002                  (       cocovtio.d):00271         Pat.Vrt        RMB       1
0003                  (       cocovtio.d):00272         Pat.Hrz        RMB       1
0004                  (       cocovtio.d):00273         Pat.XHtc       RMB       1
0005                  (       cocovtio.d):00274         Pat.LSnt       RMB       1
0006                  (       cocovtio.d):00275         Pat.RSnt       RMB       1
0007                  (       cocovtio.d):00276         Pat.SDot       RMB       1
0008                  (       cocovtio.d):00277         Pat.BDot       RMB       1
                      (       cocovtio.d):00278         *
                      (       cocovtio.d):00279         * pointer buffer numbers
                      (       cocovtio.d):00280         *
                      (       cocovtio.d):00281                        ORG       1
0001                  (       cocovtio.d):00282         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (       cocovtio.d):00283         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (       cocovtio.d):00284         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (       cocovtio.d):00285         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (       cocovtio.d):00286         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (       cocovtio.d):00287         Ptr.Txt        RMB       1                   Text pointer
0007                  (       cocovtio.d):00288         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00289         
                      (       cocovtio.d):00290         **********************
                      (       cocovtio.d):00291         * KeyDrv Entry Points
                      (       cocovtio.d):00292                        ORG       0
0000                  (       cocovtio.d):00293         K$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00294         K$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00295         K$FnKey        RMB       3                   get function key states
0009                  (       cocovtio.d):00296         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00297         
                      (       cocovtio.d):00298         **********************
                      (       cocovtio.d):00299         * JoyDrv Entry Points
                      (       cocovtio.d):00300                        ORG       0
0000                  (       cocovtio.d):00301         J$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00302         J$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00303         J$MsBtn        RMB       3                   get mouse button states
0009                  (       cocovtio.d):00304         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (       cocovtio.d):00305         J$JyBtn        RMB       3                   get joystick button states
000F                  (       cocovtio.d):00306         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00307         
                      (       cocovtio.d):00308         **********************
                      (       cocovtio.d):00309         * SndDrv Entry Points
                      (       cocovtio.d):00310                        ORG       0
0000                  (       cocovtio.d):00311         S$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00312         S$GetStt       RMB       3                   joystick termination
0006                  (       cocovtio.d):00313         S$SetStt       RMB       3                   joystick termination
0009                  (       cocovtio.d):00314         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00315         
                      (       cocovtio.d):00316         ********************************
                      (       cocovtio.d):00317         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00318         *
                      (       cocovtio.d):00319         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00320         * for use in the high level windowing package.
                      (       cocovtio.d):00321         *
     000A             (       cocovtio.d):00322         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (       cocovtio.d):00323         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (       cocovtio.d):00324         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (       cocovtio.d):00325         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00326         *
                      (       cocovtio.d):00327         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00328         * one required for each item within the menu
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330                        ORG       0
0000                  (       cocovtio.d):00331         MI.TTL         RMB       MXTTLEN             item name
000F                  (       cocovtio.d):00332         MI.ENBL        RMB       1                   enable flag
0010                  (       cocovtio.d):00333         MI.RES         RMB       5                   reserved bytes
     0015             (       cocovtio.d):00334         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00335         *
                      (       cocovtio.d):00336         * Menu Descriptor :
                      (       cocovtio.d):00337         * one for each menu on the manu bar
                      (       cocovtio.d):00338         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00339         *
                      (       cocovtio.d):00340                        ORG       0
0000                  (       cocovtio.d):00341         MN.TTL         RMB       MXTTLEN             menu title
000F                  (       cocovtio.d):00342         MN.ID          RMB       1                   menu id number (1-255)
0010                  (       cocovtio.d):00343         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (       cocovtio.d):00344         MN.NITS        RMB       1                   number of items in menu
0012                  (       cocovtio.d):00345         MN.ENBL        RMB       1                   enable flag
0013                  (       cocovtio.d):00346         MN.RES         RMB       2                   reserved bytes
0015                  (       cocovtio.d):00347         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (       cocovtio.d):00348         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00349         *
                      (       cocovtio.d):00350         * Window Descriptor:
                      (       cocovtio.d):00351         * one required for each application in a framed window
                      (       cocovtio.d):00352         *
                      (       cocovtio.d):00353                        ORG       0
0000                  (       cocovtio.d):00354         WN.TTL         RMB       20                  title of window for title bar
0014                  (       cocovtio.d):00355         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (       cocovtio.d):00356         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (       cocovtio.d):00357         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (       cocovtio.d):00358         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (       cocovtio.d):00359         WN.RES         RMB       7                   reserved bytes
0020                  (       cocovtio.d):00360         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (       cocovtio.d):00361         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00362         
                      (       cocovtio.d):00363         *************************
                      (       cocovtio.d):00364         * Window Type Definitions
                      (       cocovtio.d):00365         *
                      (       cocovtio.d):00366         * To be used in setting up the border of the window in
                      (       cocovtio.d):00367         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00368         *
                      (       cocovtio.d):00369                        ORG       0
0000                  (       cocovtio.d):00370         WT.NBox        RMB       1                   No Box
0001                  (       cocovtio.d):00371         WT.FWin        RMB       1                   Framed Window
0002                  (       cocovtio.d):00372         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (       cocovtio.d):00373         WT.SBox        RMB       1                   Shadowed Box
0004                  (       cocovtio.d):00374         WT.DBox        RMB       1                   Double Box
0005                  (       cocovtio.d):00375         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00376         
                      (       cocovtio.d):00377         *************************************
                      (       cocovtio.d):00378         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       1
0001                  (       cocovtio.d):00381         MId.Mov        RMB       1                   move box
0002                  (       cocovtio.d):00382         MId.Cls        RMB       1                   close box
0003                  (       cocovtio.d):00383         MId.Grw        RMB       1                   grow box
0004                  (       cocovtio.d):00384         MId.SUp        RMB       1                   scroll up
0005                  (       cocovtio.d):00385         MId.SDn        RMB       1                   scroll down
0006                  (       cocovtio.d):00386         MId.SRt        RMB       1                   scroll right
0007                  (       cocovtio.d):00387         MId.SLt        RMB       1                   scroll left
0008                  (       cocovtio.d):00388         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00389                        ORG       20
0014                  (       cocovtio.d):00390         MId.Tdy        RMB       1                   Tandy menu
0015                  (       cocovtio.d):00391         MId.Fil        RMB       1                   Files Menu
0016                  (       cocovtio.d):00392         MId.Edt        RMB       1                   Edit Menu
0017                  (       cocovtio.d):00393         MId.Sty        RMB       1                   Styles menu
0018                  (       cocovtio.d):00394         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00395         
                      (       cocovtio.d):00396         
                      (       cocovtio.d):00397         ******************************************************************************
                      (       cocovtio.d):00398         ******************************************************************************
                      (       cocovtio.d):00399         **                                                                          **
                      (       cocovtio.d):00400         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00401         **                                                                          **
                      (       cocovtio.d):00402         ******************************************************************************
                      (       cocovtio.d):00403         ******************************************************************************
                      (       cocovtio.d):00404         **                                                                          **
                      (       cocovtio.d):00405         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00406         **                                                                          **
                      (       cocovtio.d):00407         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00408         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00409         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00410         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00411         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00412         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00413         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00414         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00415         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00416         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00417         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00418         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00419         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (       cocovtio.d):00420         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00421         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00422         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00423         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00424         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00425         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00426         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00427         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00428         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00429         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00430         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00431         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00432         **                                                                          **
                      (       cocovtio.d):00433         ******************************************************************************
                      (       cocovtio.d):00434         ******************************************************************************
                      (       cocovtio.d):00435         
                      (       cocovtio.d):00436         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (       cocovtio.d):00437         MaxLines       EQU       25                  Max. Y coord text value
     0000             (       cocovtio.d):00438         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00439         
     0000             (       cocovtio.d):00440         COMP           EQU       0                   composite monitor
     0001             (       cocovtio.d):00441         RGB            EQU       1                   RGB Analog monitor 
     0002             (       cocovtio.d):00442         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00443         
     0001             (       cocovtio.d):00444         Monitor        SET       RGB
                      (       cocovtio.d):00445         
                      (       cocovtio.d):00446         * Global definitions
     0001             (       cocovtio.d):00447         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (       cocovtio.d):00448         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (       cocovtio.d):00449         CapsLck        EQU       %00000100           Capslock enabled
     0280             (       cocovtio.d):00450         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00451                        IFEQ      MaxLines-25
     00C6             (       cocovtio.d):00452         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00453                        ELSE      
0019                  (       cocovtio.d):00454         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00455                        ENDC      
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         *****************************************************************************
                      (       cocovtio.d):00458         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00459         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00460         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00461         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00462         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00463         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00464         *
                      (       cocovtio.d):00465         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00466         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00467                        ORG       V.SCF
001D                  (       cocovtio.d):00468         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (       cocovtio.d):00469         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (       cocovtio.d):00470         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (       cocovtio.d):00471         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (       cocovtio.d):00472         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (       cocovtio.d):00473         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (       cocovtio.d):00474         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (       cocovtio.d):00475         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (       cocovtio.d):00476         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (       cocovtio.d):00477         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (       cocovtio.d):00478         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (       cocovtio.d):00479         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (       cocovtio.d):00480                        RMB       1                   unused                                       $2A
002B                  (       cocovtio.d):00481         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (       cocovtio.d):00482         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (       cocovtio.d):00483         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (       cocovtio.d):00484         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (       cocovtio.d):00485         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (       cocovtio.d):00486         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (       cocovtio.d):00487         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (       cocovtio.d):00488         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (       cocovtio.d):00489         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (       cocovtio.d):00490         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (       cocovtio.d):00491         CC3Parm        RMB       128-.               global parameter area
0080                  (       cocovtio.d):00492         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (       cocovtio.d):00493         CC3DSiz        EQU       .
                      (       cocovtio.d):00494         
                      (       cocovtio.d):00495         *****************************************************************************
                      (       cocovtio.d):00496         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00497         * This area sits in system block 0 from $1000 to $10ff
     1000             (       cocovtio.d):00498         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00499                        ORG       0
0000                  (       cocovtio.d):00500         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (       cocovtio.d):00501         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (       cocovtio.d):00502         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (       cocovtio.d):00503         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00504         *g0003    rmb   2          NEW: UNUSED
0005                  (       cocovtio.d):00505         g0005          RMB       2                   Temp save in Windint RG
0007                  (       cocovtio.d):00506         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (       cocovtio.d):00507         G.MonTyp       RMB       1                   monitor type
     000A             (       cocovtio.d):00508         g000A          EQU       .                   Old label for compatibility
000A                  (       cocovtio.d):00509         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00510         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00511         *                           0=We are not on our device
                      (       cocovtio.d):00512         *                           1=We are the current device
                      (       cocovtio.d):00513         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00514         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00515         *                           If not current device, they don't.)
000B                  (       cocovtio.d):00516         G.WinType      RMB       1                   current device's V.TYPE
000C                  (       cocovtio.d):00517         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (       cocovtio.d):00518         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (       cocovtio.d):00519         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (       cocovtio.d):00520         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (       cocovtio.d):00521         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (       cocovtio.d):00522         G.BelVec       RMB       2                   BELL routine vector
0019                  (       cocovtio.d):00523         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (       cocovtio.d):00524         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (       cocovtio.d):00525         G.BelTnF       RMB       1                   BELL tone flag
001D                  (       cocovtio.d):00526         g001D          RMB       3
0020                  (       cocovtio.d):00527         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (       cocovtio.d):00528         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (       cocovtio.d):00529         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00530         *                           00000010 : VDGInt found
                      (       cocovtio.d):00531         *                           10000000 : GrfDrv found
0025                  (       cocovtio.d):00532         g0025          RMB       1
0026                  (       cocovtio.d):00533         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00534         *         IFEQ  TC9-true
                      (       cocovtio.d):00535         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00536         *         ELSE  
0027                  (       cocovtio.d):00537         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00538         *         ENDC  
0028                  (       cocovtio.d):00539         G.LKeyCd       RMB       1                   last keyboard code
0029                  (       cocovtio.d):00540         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00541         * A secondary 3 key table (same format as g002D below)
002A                  (       cocovtio.d):00542         G.2Key1        RMB       1                   $2A
002B                  (       cocovtio.d):00543         G.2Key2        RMB       1                   $2B
002C                  (       cocovtio.d):00544         G.2Key3        RMB       1
                      (       cocovtio.d):00545         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00546         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00547         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00548         * KeyFlag below.
002D                  (       cocovtio.d):00549         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (       cocovtio.d):00550         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (       cocovtio.d):00551         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (       cocovtio.d):00552         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (       cocovtio.d):00553         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (       cocovtio.d):00554         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00555         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00556         *                           %00111000-Row # (Input, 0-6)
0033                  (       cocovtio.d):00557         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (       cocovtio.d):00558         G.KySns        RMB       1                   key sense byte
0035                  (       cocovtio.d):00559         G.KySame       RMB       1                   same key flag
0036                  (       cocovtio.d):00560         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (       cocovtio.d):00561                        RMB       1
0038                  (       cocovtio.d):00562         g0038          RMB       1                   grfdrv initialized flag
0039                  (       cocovtio.d):00563                        RMB       2
003B                  (       cocovtio.d):00564         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (       cocovtio.d):00565         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (       cocovtio.d):00566         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (       cocovtio.d):00567         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (       cocovtio.d):00568         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (       cocovtio.d):00569         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (       cocovtio.d):00570         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00571         *         IFEQ  TC9-true
                      (       cocovtio.d):00572         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00573         *         ELSE  
0063                  (       cocovtio.d):00574         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00575         *         ENDC  
0064                  (       cocovtio.d):00576         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (       cocovtio.d):00577         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (       cocovtio.d):00578         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (       cocovtio.d):00579         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (       cocovtio.d):00580         G.CoTble       RMB       6                   co-module table ($68)
006E                  (       cocovtio.d):00581         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (       cocovtio.d):00582         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (       cocovtio.d):00583         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (       cocovtio.d):00584         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (       cocovtio.d):00585         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (       cocovtio.d):00586         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (       cocovtio.d):00587         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (       cocovtio.d):00588         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (       cocovtio.d):00589         g00BD          RMB       1                   Current screen type for work window table
00BE                  (       cocovtio.d):00590         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (       cocovtio.d):00591         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (       cocovtio.d):00592         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (       cocovtio.d):00593         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (       cocovtio.d):00594         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (       cocovtio.d):00595         G.MsSig        RMB       1                   mouse signal flag
00C7                  (       cocovtio.d):00596         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (       cocovtio.d):00597         g00D7          RMB       9
00E0                  (       cocovtio.d):00598         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (       cocovtio.d):00599         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (       cocovtio.d):00600         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (       cocovtio.d):00601         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (       cocovtio.d):00602         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (       cocovtio.d):00603         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00604         
                      (       cocovtio.d):00605         *****************************************************************************
                      (       cocovtio.d):00606         * GrfDrv global memory data definitions
                      (       cocovtio.d):00607         * This area sits in system block 0 from $1100 to $119E
     1100             (       cocovtio.d):00608         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00609                        ORG       0
0000                  (       cocovtio.d):00610         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (       cocovtio.d):00611         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (       cocovtio.d):00612         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (       cocovtio.d):00613         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (       cocovtio.d):00614         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (       cocovtio.d):00615         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (       cocovtio.d):00616         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (       cocovtio.d):00617         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (       cocovtio.d):00618         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (       cocovtio.d):00619         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00620         *                             overlay width has been copied
000B                  (       cocovtio.d):00621         gr000B         RMB       1
000C                  (       cocovtio.d):00622         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (       cocovtio.d):00623         gr000E         RMB       1
000F                  (       cocovtio.d):00624         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (       cocovtio.d):00625         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (       cocovtio.d):00626         gr0012         RMB       6
0018                  (       cocovtio.d):00627         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (       cocovtio.d):00628         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (       cocovtio.d):00629         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (       cocovtio.d):00630         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (       cocovtio.d):00631         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (       cocovtio.d):00632         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (       cocovtio.d):00633         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (       cocovtio.d):00634         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (       cocovtio.d):00635         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (       cocovtio.d):00636         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (       cocovtio.d):00637         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (       cocovtio.d):00638         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (       cocovtio.d):00639         gr002C         RMB       2
002E                  (       cocovtio.d):00640         gr002E         RMB       2                   current window table entry
0030                  (       cocovtio.d):00641         gr0030         RMB       2                   current screen table ptr
0032                  (       cocovtio.d):00642         gr0032         RMB       1                   Last block # we used for buffers
0033                  (       cocovtio.d):00643         gr0033         RMB       2                   Last offset we used for buffers
0035                  (       cocovtio.d):00644         gr0035         RMB       1                   group
0036                  (       cocovtio.d):00645         gr0036         RMB       2                   offset
0038                  (       cocovtio.d):00646         gr0038         RMB       1                   group returned (new)
0039                  (       cocovtio.d):00647         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (       cocovtio.d):00648         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (       cocovtio.d):00649         gr003B         RMB       2                   end of vars ptr?
003D                  (       cocovtio.d):00650         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (       cocovtio.d):00651         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (       cocovtio.d):00652         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (       cocovtio.d):00653         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (       cocovtio.d):00654         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (       cocovtio.d):00655         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (       cocovtio.d):00656         gr0047         RMB       2                   'Working' X coordinate
0049                  (       cocovtio.d):00657         gr0049         RMB       2                   'Working' Y coordinate
004B                  (       cocovtio.d):00658         gr004B         RMB       2                   current X
004D                  (       cocovtio.d):00659         gr004D         RMB       2                   current Y
004F                  (       cocovtio.d):00660         gr004F         RMB       2                   X Size (in bytes)
0051                  (       cocovtio.d):00661         gr0051         RMB       2                   Y Size (in bytes)
0053                  (       cocovtio.d):00662         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (       cocovtio.d):00663         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (       cocovtio.d):00664         gr0057         RMB       1                   group
0058                  (       cocovtio.d):00665         gr0058         RMB       1                   buffer #
0059                  (       cocovtio.d):00666         gr0059         RMB       1                   save switch for overlay
005A                  (       cocovtio.d):00667         gr005A         RMB       1                   PRN
005B                  (       cocovtio.d):00668         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (       cocovtio.d):00669         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (       cocovtio.d):00670         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (       cocovtio.d):00671         Gr.STYMk       RMB       1                   STY marker
0061                  (       cocovtio.d):00672         gr0061         RMB       1                   foreground RGB data
0062                  (       cocovtio.d):00673         gr0062         RMB       1                   background RGB data
0063                  (       cocovtio.d):00674         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (       cocovtio.d):00675         gr0064         RMB       2                   PSet vector
0066                  (       cocovtio.d):00676         gr0066         RMB       2                   pset offset
0068                  (       cocovtio.d):00677         gr0068         RMB       2                   LSet vector
006A                  (       cocovtio.d):00678         gr006A         RMB       2                   max X co-ordinate
006C                  (       cocovtio.d):00679         gr006C         RMB       2                   max Y co-ordinate
006E                  (       cocovtio.d):00680         gr006E         RMB       2                   X pixel count
0070                  (       cocovtio.d):00681         gr0070         RMB       2                   Y pixel count
0072                  (       cocovtio.d):00682         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (       cocovtio.d):00683         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (       cocovtio.d):00684         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (       cocovtio.d):00685         gr0077         RMB       2                   Vector for right direction FFill
0079                  (       cocovtio.d):00686         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (       cocovtio.d):00687         gr007A         RMB       2                   Vector for left direction FFill
007C                  (       cocovtio.d):00688         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (       cocovtio.d):00689         gr007D         RMB       1                   buffer block #
007E                  (       cocovtio.d):00690         gr007E         RMB       2                   buffer offset #
0080                  (       cocovtio.d):00691         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (       cocovtio.d):00692         gr0082         RMB       3                   3 byte extended screen address
0085                  (       cocovtio.d):00693         gr0085         RMB       2                   temp
0087                  (       cocovtio.d):00694         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (       cocovtio.d):00695         gr0097         RMB       1                   temp
0098                  (       cocovtio.d):00696         gr0098         RMB       1                   temp
                      (       cocovtio.d):00697         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (       cocovtio.d):00698         gr0099         RMB       2                   temp
                      (       cocovtio.d):00699         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (       cocovtio.d):00700         gr009B         RMB       1                   counter temp
009C                  (       cocovtio.d):00701         gr009C         RMB       1
009D                  (       cocovtio.d):00702         gr009D         RMB       2                   offset to buffer in block
009F                  (       cocovtio.d):00703         gr009F         RMB       1
00A0                  (       cocovtio.d):00704         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (       cocovtio.d):00705         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00706         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (       cocovtio.d):00707         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (       cocovtio.d):00708         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (       cocovtio.d):00709         gr00A7         RMB       2
00A9                  (       cocovtio.d):00710         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (       cocovtio.d):00711         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (       cocovtio.d):00712         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (       cocovtio.d):00713         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (       cocovtio.d):00714         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (       cocovtio.d):00715         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00716         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (       cocovtio.d):00717         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (       cocovtio.d):00718         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (       cocovtio.d):00719         gr00B5         RMB       1                   regW for grfdrv
00B6                  (       cocovtio.d):00720         gr00B6         RMB       1
00B7                  (       cocovtio.d):00721         gr00B7         RMB       2
00B9                  (       cocovtio.d):00722         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (       cocovtio.d):00723         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (       cocovtio.d):00724         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (       cocovtio.d):00725         gr00BF         RMB       256-.
                      (       cocovtio.d):00726         * GPLoad buffer - $1200 in system block 0
0100                  (       cocovtio.d):00727         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (       cocovtio.d):00728         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00729         
                      (       cocovtio.d):00730         *****************************************************************************
                      (       cocovtio.d):00731         * Window table entry structure
                      (       cocovtio.d):00732         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00733         * including any overlay windows.
     0020             (       cocovtio.d):00734         MaxWind        EQU       32                  maximum allowable window tables
     1290             (       cocovtio.d):00735         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00736                        ORG       -$10
FFF0                  (       cocovtio.d):00737         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (       cocovtio.d):00738         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (       cocovtio.d):00739         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (       cocovtio.d):00740         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (       cocovtio.d):00741         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (       cocovtio.d):00742         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (       cocovtio.d):00743         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (       cocovtio.d):00744         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (       cocovtio.d):00745         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (       cocovtio.d):00746         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (       cocovtio.d):00747         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (       cocovtio.d):00748         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (       cocovtio.d):00749         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (       cocovtio.d):00750         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (       cocovtio.d):00751         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (       cocovtio.d):00752         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (       cocovtio.d):00753         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (       cocovtio.d):00754         Wt.Back        RMB       1                   background palette #                         $07
0008                  (       cocovtio.d):00755         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (       cocovtio.d):00756         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (       cocovtio.d):00757         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (       cocovtio.d):00758         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (       cocovtio.d):00759         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (       cocovtio.d):00760         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (       cocovtio.d):00761         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (       cocovtio.d):00762         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (       cocovtio.d):00763         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (       cocovtio.d):00764         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (       cocovtio.d):00765         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (       cocovtio.d):00766         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (       cocovtio.d):00767         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (       cocovtio.d):00768         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (       cocovtio.d):00769         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (       cocovtio.d):00770         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (       cocovtio.d):00771         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (       cocovtio.d):00772         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (       cocovtio.d):00773         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00774         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00775         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00776         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00777         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00778         *       sizes for control+content regions
0026                  (       cocovtio.d):00779         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (       cocovtio.d):00780         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (       cocovtio.d):00781         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (       cocovtio.d):00782         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (       cocovtio.d):00783         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (       cocovtio.d):00784         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00785         
                      (       cocovtio.d):00786         *****************************************************************************
                      (       cocovtio.d):00787         * Screen table entrys
                      (       cocovtio.d):00788         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00789         
     0010             (       cocovtio.d):00790         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (       cocovtio.d):00791         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00792                        ORG       0
0000                  (       cocovtio.d):00793         St.Sty         RMB       1                   Screen type                         $00
0001                  (       cocovtio.d):00794         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (       cocovtio.d):00795         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (       cocovtio.d):00796         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (       cocovtio.d):00797         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (       cocovtio.d):00798         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (       cocovtio.d):00799         St.Back        RMB       1                   Background palette register #       $07
0008                  (       cocovtio.d):00800         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (       cocovtio.d):00801         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00802         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00803         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00804         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00805         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (       cocovtio.d):00806         St.Pals        RMB       16                  Palette register contents           $10
     0020             (       cocovtio.d):00807         St.Siz         EQU       .
                      (       cocovtio.d):00808         
                      (       cocovtio.d):00809         *****************************************************************************
                      (       cocovtio.d):00810         * Graphics buffer tables
                      (       cocovtio.d):00811         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00812         * data.
                      (       cocovtio.d):00813                        ORG       0
0000                  (       cocovtio.d):00814         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (       cocovtio.d):00815         Grf.Off        RMB       2                   back block header offset            $01
0003                  (       cocovtio.d):00816         Grf.Grp        RMB       1                   group #                             $03
0004                  (       cocovtio.d):00817         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (       cocovtio.d):00818         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (       cocovtio.d):00819         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (       cocovtio.d):00820         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (       cocovtio.d):00821         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (       cocovtio.d):00822         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (       cocovtio.d):00823         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (       cocovtio.d):00824         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (       cocovtio.d):00825         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (       cocovtio.d):00826         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (       cocovtio.d):00827         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00828         
                      (       cocovtio.d):00829         *****************************************************************************
                      (       cocovtio.d):00830         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00831         * $1075-$0176
                      (       cocovtio.d):00832         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00833                        ORG       0
0000                  (       cocovtio.d):00834         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (       cocovtio.d):00835         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (       cocovtio.d):00836         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (       cocovtio.d):00837         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (       cocovtio.d):00838         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (       cocovtio.d):00839         Gt.BClr        RMB       1                   Background color                               $08
0009                  (       cocovtio.d):00840         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (       cocovtio.d):00841         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (       cocovtio.d):00842         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (       cocovtio.d):00843         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (       cocovtio.d):00844         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (       cocovtio.d):00845         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (       cocovtio.d):00846         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (       cocovtio.d):00847         GTabSz         EQU       .
                      (       cocovtio.d):00848         
                      (       cocovtio.d):00849         *****************************************************************************
                      (       cocovtio.d):00850         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00851         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00852         * WindInt.
                      (       cocovtio.d):00853         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00854         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00855         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00856                        ORG       $0240
0240                  (       cocovtio.d):00857                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (       cocovtio.d):00858                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (       cocovtio.d):00859                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (       cocovtio.d):00860                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00861         
                      (       cocovtio.d):00862         *****************************************************************************
                      (       cocovtio.d):00863         * WindInt menu handling table entry definition
                      (       cocovtio.d):00864                        ORG       0
0000                  (       cocovtio.d):00865         MnuXNum        RMB       1                   menu #
0001                  (       cocovtio.d):00866         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (       cocovtio.d):00867         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (       cocovtio.d):00868                        RMB       1                   unused?
     0004             (       cocovtio.d):00869         MnuHSiz        EQU       .
                      (       cocovtio.d):00870         
                      (       cocovtio.d):00871         *****************************************************************************
                      (       cocovtio.d):00872         * Character binary switches
     0080             (       cocovtio.d):00873         TChr           EQU       %10000000           transparent characters
     0040             (       cocovtio.d):00874         Under          EQU       %01000000           underline characters
     0020             (       cocovtio.d):00875         Bold           EQU       %00100000           bold characters
     0010             (       cocovtio.d):00876         Prop           EQU       %00010000           proportional spacing of characters
     0008             (       cocovtio.d):00877         Scale          EQU       %00001000           automatic window scaling
     0004             (       cocovtio.d):00878         Invers         EQU       %00000100           inverse characters
     0002             (       cocovtio.d):00879         NoCurs         EQU       %00000010           no cursor display
     0001             (       cocovtio.d):00880         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (       cocovtio.d):00884         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00885         *         equ   1          640x200x2
                      (       cocovtio.d):00886         *         equ   2          320x200x4
                      (       cocovtio.d):00887         *         equ   3          640x200x4
                      (       cocovtio.d):00888         *         equ   4          320x200x16
                      (       cocovtio.d):00889         *         equ   $85        80 column text
                      (       cocovtio.d):00890         *         equ   $86        40 column text
                      (       cocovtio.d):00891         
                      (       cocovtio.d):00892         *************************************
                      (       cocovtio.d):00893         * Window default palette color codes
                      (       cocovtio.d):00894         *
                      (       cocovtio.d):00895                        ORG       0
0000                  (       cocovtio.d):00896         White.         RMB       1
0001                  (       cocovtio.d):00897         Blue.          RMB       1
0002                  (       cocovtio.d):00898         Black.         RMB       1
0003                  (       cocovtio.d):00899         Green.         RMB       1
0004                  (       cocovtio.d):00900         Red.           RMB       1
0005                  (       cocovtio.d):00901         Yellow.        RMB       1
0006                  (       cocovtio.d):00902         Magenta.       RMB       1
0007                  (       cocovtio.d):00903         Cyan.          RMB       1
                      (       cocovtio.d):00904         
                      (       cocovtio.d):00905                        ENDC      
                      (       cocovtio.d):00906                        ENDC      
                      (../objs_lsl/sierr):00041                  endc
                      (../objs_lsl/sierr):00042         
     0011             (../objs_lsl/sierr):00043         tylg     set   Prgrm+Objct   
     0081             (../objs_lsl/sierr):00044         atrv     set   ReEnt+rev
     0001             (../objs_lsl/sierr):00045         rev      set   $01
     0001             (../objs_lsl/sierr):00046         edition  set   1
                      (../objs_lsl/sierr):00047         
0000 87CD07B3000D1181 (../objs_lsl/sierr):00048                  mod   eom,name,tylg,atrv,start,size
     9C00141FFF
                      (../objs_lsl/sierr):00049         
                      (../objs_lsl/sierr):00050                  org   0
0000.                 (../objs_lsl/sierr):00051         u0000    rmb   2   holds size of data area
0002.                 (../objs_lsl/sierr):00052         u0002    rmb   1   MMU block # mapped into block #2 -org
0003.                 (../objs_lsl/sierr):00053         u0003    rmb   1   MMU block # mapped into block #3 -org
0004.                 (../objs_lsl/sierr):00054         u0004    rmb   2   Hi res screen start address
0006.                 (../objs_lsl/sierr):00055         u0006    rmb   2   Hi res screen end address  ?????
0008.                 (../objs_lsl/sierr):00056         u0008    rmb   1   disasm as u0008 rmb 2
0009.                 (../objs_lsl/sierr):00057         u0009    rmb   1   MMU Block # SIERRA is in  -org
000A.                 (../objs_lsl/sierr):00058         u000A    rmb   1   double byte MMU Task 1 block 1   
000B.                 (../objs_lsl/sierr):00059         u000B    rmb   1   value actually resides here
000C.                 (../objs_lsl/sierr):00060         u000C    rmb   1
000D.                 (../objs_lsl/sierr):00061         u000D    rmb   1
000E.                 (../objs_lsl/sierr):00062         u000E    rmb   1
000F.                 (../objs_lsl/sierr):00063         u000F    rmb   1
0010.                 (../objs_lsl/sierr):00064         u0010    rmb   1
0011.                 (../objs_lsl/sierr):00065         u0011    rmb   3
0014.                 (../objs_lsl/sierr):00066         u0014    rmb   2   Hi res screen start address
0016.                 (../objs_lsl/sierr):00067         u0016    rmb   2   Hi res screen end address ???
0018.                 (../objs_lsl/sierr):00068         u0017    rmb   4
001C.                 (../objs_lsl/sierr):00069         u001C    rmb   2
001E.                 (../objs_lsl/sierr):00070         u001E    rmb   4
0022.                 (../objs_lsl/sierr):00071         u0022    rmb   1
0023.                 (../objs_lsl/sierr):00072         u0023    rmb   1
0024.                 (../objs_lsl/sierr):00073         u0024    rmb   2   mnln remap value holder
0026.                 (../objs_lsl/sierr):00074         u0026    rmb   2   scrn remap value holder
0028.                 (../objs_lsl/sierr):00075         u0028    rmb   2   shdw remap value holder
002A.                 (../objs_lsl/sierr):00076         u002A    rmb   2   saves stack pointer of caller to sub659
002C.                 (../objs_lsl/sierr):00077         u002C    rmb   2
002E.                 (../objs_lsl/sierr):00078         u002E    rmb   16
003E.                 (../objs_lsl/sierr):00079         u003E    rmb   1
003F.                 (../objs_lsl/sierr):00080         u003F    rmb   2
0041.                 (../objs_lsl/sierr):00081         u0041    rmb   1
0042.                 (../objs_lsl/sierr):00082         u0042    rmb   1   MMU Block # of SIERRA's dsc.
0043.                 (../objs_lsl/sierr):00083         u0043    rmb   2
0045.                 (../objs_lsl/sierr):00084         u0045    rmb   1   flag after color table sets
0046.                 (../objs_lsl/sierr):00085         u0046    rmb   2
0048.                 (../objs_lsl/sierr):00086         u0048    rmb   2
004A.                 (../objs_lsl/sierr):00087         u004A    rmb   5
004F.                 (../objs_lsl/sierr):00088         u004F    rmb   4
0053.                 (../objs_lsl/sierr):00089         u0053    rmb   2   
0055.                 (../objs_lsl/sierr):00090         u0055    rmb   10
005F.                 (../objs_lsl/sierr):00091         u005F    rmb   163
0102.                 (../objs_lsl/sierr):00092         u0102    rmb   112
0172.                 (../objs_lsl/sierr):00093         mtf173   rmb   1    multitasking flag
0173.                 (../objs_lsl/sierr):00094         scr174   rmb   1    screen number?
0174.                 (../objs_lsl/sierr):00095         x01076   rmb   212 
0248.                 (../objs_lsl/sierr):00096         u0249    rmb   1
0249.                 (../objs_lsl/sierr):00097         u024A    rmb   1
024A.                 (../objs_lsl/sierr):00098         u024B    rmb   1
024B.                 (../objs_lsl/sierr):00099         u024C    rmb   497
043C.                 (../objs_lsl/sierr):00100         u043D    rmb   245
0531.                 (../objs_lsl/sierr):00101         u0532    rmb   16   vol_handle_table (pointer to file structures)
0541.                 (../objs_lsl/sierr):00102         u0542    rmb   15  
0550.                 (../objs_lsl/sierr):00103         u0551    rmb   2    given_pic_data (pointer)
0552.                 (../objs_lsl/sierr):00104         u0553    rmb   1    monitor type V26_MONITORTYPE
0553.                 (../objs_lsl/sierr):00105         u0554    rmb   154
05ED.                 (../objs_lsl/sierr):00106                  rmb   169
0696.                 (../objs_lsl/sierr):00107         int5EE   rmb   1  Signal Intercept routine from 452 - 4BD
0697.                 (../objs_lsl/sierr):00108                  rmb   106
0701.                 (../objs_lsl/sierr):00109         sub659   rmb   1    Slot to hold subroutine for others uses at 4DA - 54F
0702.                 (../objs_lsl/sierr):00110                  rmb   116
0776.                 (../objs_lsl/sierr):00111         u0xxx    rmb   6281
     1FFF             (../objs_lsl/sierr):00112         size     equ   .
                      (../objs_lsl/sierr):00113         
000D 7369657272E1     (../objs_lsl/sierr):00114         name     fcs   /sierra/
0013 01               (../objs_lsl/sierr):00115                  fcb   edition
                      (../objs_lsl/sierr):00116         
     0014             (../objs_lsl/sierr):00117         start    equ   *
0014 160066           (../objs_lsl/sierr):00118         L0014    lbra L007D  branch to entry process params
0017 1600C5           (../objs_lsl/sierr):00119         L0017    lbra L00DB  agi_exit() branch to clean up routines
                      (../objs_lsl/sierr):00120         
                      (../objs_lsl/sierr):00121         
                      (../objs_lsl/sierr):00122         *                   Multi-tasking flag (0=No multitask, 1=multitask) 
001A 00               (../objs_lsl/sierr):00123         L001A    fcb   $00  we store a value here
                      (../objs_lsl/sierr):00124         *                   the "old self modifying code" trick
                      (../objs_lsl/sierr):00125         
                      (../objs_lsl/sierr):00126         
                      (../objs_lsl/sierr):00127         * Text strings think this was probably an Info thing
001B 4147492028632920 (../objs_lsl/sierr):00128         L001B    fcc   'AGI (c) copyright 1988 SIERRA On-Line'
     636F707972696768
     7420313938382053
     4945525241204F6E
     2D4C696E65
0040 436F436F33207665 (../objs_lsl/sierr):00129                  fcc   'CoCo3 version by Chris Iden'
     7273696F6E206279
     2043687269732049
     64656E
005B 00               (../objs_lsl/sierr):00130                  fcb   $00
     0041             (../objs_lsl/sierr):00131         Infosz   equ   *-L001B
                      (../objs_lsl/sierr):00132         
                      (../objs_lsl/sierr):00133         
                      (../objs_lsl/sierr):00134         * Useage text string
005C 55736167653A2053 (../objs_lsl/sierr):00135         L005C    fcc   'Usage: Sierra -Rgb -Multitasking'
     6965727261202D52
     6762202D4D756C74
     697461736B696E67
007C 0D               (../objs_lsl/sierr):00136                  fcb   C$CR
     0021             (../objs_lsl/sierr):00137         Usgsz    equ   *-L005C
                      (../objs_lsl/sierr):00138         
                      (../objs_lsl/sierr):00139         
007D 1F40             (../objs_lsl/sierr):00140         L007D    tfr   s,d     save stack ptr / start of param ptr into d
                      (../objs_lsl/sierr):00141         *              
007F 8304FF           (../objs_lsl/sierr):00142                  subd  #$04FF     start of stack/end of data mem ptr
0082 DD00             (../objs_lsl/sierr):00143                  std   <u0000     store this value in user var
0084 8D1A             (../objs_lsl/sierr):00144                  bsr   L009C      branch to input processer routine
                      (../objs_lsl/sierr):00145         
0086 170095           (../objs_lsl/sierr):00146         L0086    lbsr  L011A      relay call to L0140
                      (../objs_lsl/sierr):00147         
0089 DC00             (../objs_lsl/sierr):00148         L0089    ldd   <u0000     load the data pointer
008B 2756             (../objs_lsl/sierr):00149                  beq   L00DF      if it is zero we have a problem
                      (../objs_lsl/sierr):00150         *         ldd   >$FFA9     MMU task 1, blocks 1&2 (0-7)
008D 170700           (../objs_lsl/sierr):00151                  lbsr  mmuini2    get MMU values $FFA8-$FFAF
0090 EC8D04D6         (../objs_lsl/sierr):00152                  ldd   mmubuf+9,pcr
0094 DD0A             (../objs_lsl/sierr):00153                  std   <u000A     save the task 1, blocks 1&2
0096 8600             (../objs_lsl/sierr):00154                  lda   #$00       clear a to zero 
                      (../objs_lsl/sierr):00155         *         clra
0098 9711             (../objs_lsl/sierr):00156                  sta   <u0011     save that value
009A 9E24             (../objs_lsl/sierr):00157                  ldx   <u0024     set up to jump to mnln and go for it
009C BD0701           (../objs_lsl/sierr):00158                  jsr   sub659     code at L04DA plays with mmu blocks
009F 39               (../objs_lsl/sierr):00159                  rts   
                      (../objs_lsl/sierr):00160         
                      (../objs_lsl/sierr):00161         * Process any command line args
                      (../objs_lsl/sierr):00162         * See F$Fork description 8-15 for entry conditions
                      (../objs_lsl/sierr):00163         
00A0 A680             (../objs_lsl/sierr):00164         L009C    lda   ,x+         get next char after name string
00A2 810D             (../objs_lsl/sierr):00165                  cmpa  #C$CR       is it a CR?
00A4 2738             (../objs_lsl/sierr):00166                  beq   L00DA       yes exit from routine
00A6 812D             (../objs_lsl/sierr):00167                  cmpa  #$2D        is it a dash '-
00A8 26F6             (../objs_lsl/sierr):00168                  bne   L009C       not a dash go look again
                      (../objs_lsl/sierr):00169         
00AA A680             (../objs_lsl/sierr):00170                  lda   ,x+         was as dash get the next char
00AC 8A20             (../objs_lsl/sierr):00171                  ora   #$20        apply mask to lower case
00AE 8172             (../objs_lsl/sierr):00172                  cmpa  #$72        is it a 'r ?
00B0 2714             (../objs_lsl/sierr):00173                  beq   L00C2       yep go set up for RGB monitor
00B2 816D             (../objs_lsl/sierr):00174                  cmpa  #$6D        is it an 'm ? 
00B4 2720             (../objs_lsl/sierr):00175                  beq   L00D2       if so go store a flag and continue
                      (../objs_lsl/sierr):00176         
                      (../objs_lsl/sierr):00177         *  We've found something other than Mm or Rr after a dash
                      (../objs_lsl/sierr):00178         *  write usage message and Exit program
                      (../objs_lsl/sierr):00179         
00B6 8601             (../objs_lsl/sierr):00180                  lda   #StdOut     load path std out
00B8 308DFFA0         (../objs_lsl/sierr):00181                  leax  >L005C,pcr  load address of message
00BC 108E0021         (../objs_lsl/sierr):00182                  ldy   #Usgsz      $0021  load the size of the message
00C0 103F8C           (../objs_lsl/sierr):00183                  os9   I$WritLn    write it
00C3 5F               (../objs_lsl/sierr):00184                  clrb              clear the error code (unneeded branch to L00DE) 
00C4 201D             (../objs_lsl/sierr):00185                  bra   L00DF       and branch to exit!
                      (../objs_lsl/sierr):00186         
                      (../objs_lsl/sierr):00187         * found a "-r"
00C6 3410             (../objs_lsl/sierr):00188         L00C2    pshs  x           save x-reg since set stat call uses it
00C8 8601             (../objs_lsl/sierr):00189                  lda   #StdOut     $01  set the path number
00CA C692             (../objs_lsl/sierr):00190                  ldb   #SS.Montr   code #$92 sets the monitor type
00CC 8E0001           (../objs_lsl/sierr):00191                  ldx   #RGB        monitor type code $0001
00CF 103F8E           (../objs_lsl/sierr):00192                  os9   I$SetStt    set it up
00D2 3510             (../objs_lsl/sierr):00193                  puls  x           fetch our x back assumes call doesn't fail
00D4 20CA             (../objs_lsl/sierr):00194                  bra   L009C       go process the rest of the parms
                      (../objs_lsl/sierr):00195         
                      (../objs_lsl/sierr):00196         * found an "-m"
00D6 8601             (../objs_lsl/sierr):00197         L00D2    lda   #$01        we have found a -m and load a flag
00D8 A78DFF3E         (../objs_lsl/sierr):00198                  sta   >L001A,pcr  and stow it in our code area  (SELF MODIFYING)
00DC 20C2             (../objs_lsl/sierr):00199                  bra   L009C       check for next param
                      (../objs_lsl/sierr):00200         
00DE 39               (../objs_lsl/sierr):00201         L00DA    rts               return
                      (../objs_lsl/sierr):00202         
                      (../objs_lsl/sierr):00203         
                      (../objs_lsl/sierr):00204         *  This is just a relay call to L0336
00DF                  (../objs_lsl/sierr):00205         agi_exit
00DF 170058           (../objs_lsl/sierr):00206         L00DB    lbsr  L0133
                      (../objs_lsl/sierr):00207         
00E2 5F               (../objs_lsl/sierr):00208         L00DE    clrb              NOBODY USES ME ? 
00E3 103F06           (../objs_lsl/sierr):00209         L00DF    os9   F$Exit      time to check out
                      (../objs_lsl/sierr):00210         
                      (../objs_lsl/sierr):00211         * disassembler had a little problem here
00E6 000C             (../objs_lsl/sierr):00212         L00E2    fdb   $000C  another prog internal var  
                      (../objs_lsl/sierr):00213         
                      (../objs_lsl/sierr):00214         * Are these all data bytes of some kind ???
                      (../objs_lsl/sierr):00215         * quirky assemblage of bytes. Palette colors?
00E8 022E06090420101B (../objs_lsl/sierr):00216         L00E4    fcb   $02,$2E,$06,$09,$04,$20,$10,$1B
00F0 113D1729333F0008 (../objs_lsl/sierr):00217                  fcb   $11,$3D,$17,$29,$33,$3F,$00,$08
00F8 141820282238070B (../objs_lsl/sierr):00218                  fcb   $14,$18,$20,$28,$22,$38,$07,$0B
0100 161F272D373F     (../objs_lsl/sierr):00219                  fcb   $16,$1F,$27,$2D,$37,$3F
                      (../objs_lsl/sierr):00220         
                      (../objs_lsl/sierr):00221         * The disassembly gets confused here with text and the nulls
                      (../objs_lsl/sierr):00222         *  according to the partial disassembly I recieved these hold
                      (../objs_lsl/sierr):00223         *  Original MMU block image of second and third blocks of SIERRA  
                      (../objs_lsl/sierr):00224         *  MORE SELF MODIFYING CODE
                      (../objs_lsl/sierr):00225         
0106 0000             (../objs_lsl/sierr):00226         L0102    fdb   $0000 Orig MMU block image of 2nd blk of sierra
0108 0000             (../objs_lsl/sierr):00227         L0104    fdb   $0000 Orig MMU block image of 3nd blk of sierra
                      (../objs_lsl/sierr):00228         
                      (../objs_lsl/sierr):00229         * Name strings of other modules to load.
                      (../objs_lsl/sierr):00230         
010A 53686477         (../objs_lsl/sierr):00231         L0106    fcc   'Shdw'
010E 0D               (../objs_lsl/sierr):00232                  fcb   C$CR
                      (../objs_lsl/sierr):00233         
010F 5363726E         (../objs_lsl/sierr):00234         L010B    fcc   'Scrn'
0113 0D               (../objs_lsl/sierr):00235                  fcb   C$CR
                      (../objs_lsl/sierr):00236         
0114 4D6E4C6E         (../objs_lsl/sierr):00237         L0110    fcc   'MnLn'
0118 0D               (../objs_lsl/sierr):00238                  fcb   C$CR
                      (../objs_lsl/sierr):00239         
                      (../objs_lsl/sierr):00240         
                      (../objs_lsl/sierr):00241         * Internal variables for self modifying code
0119 00               (../objs_lsl/sierr):00242         L0115    fcb   $00  Echo
011A 00               (../objs_lsl/sierr):00243         L0116    fcb   $00  EOF
011B 00               (../objs_lsl/sierr):00244         L0117    fcb   $00  INTerupt
011C 00               (../objs_lsl/sierr):00245         L0118    fcb   $00  Quit
011D 00               (../objs_lsl/sierr):00246         L0119    fcb   $00  Monitor type Coco set to when Sierra ran
                      (../objs_lsl/sierr):00247         
                      (../objs_lsl/sierr):00248         
                      (../objs_lsl/sierr):00249         * L011A called by L0086
011E 170026           (../objs_lsl/sierr):00250         L011A    lbsr  L0140  Clears data area, sets up vars and saves montype
0121 17064D           (../objs_lsl/sierr):00251                  lbsr  mmuini1 get MMU values $FFA0-$FFA7
0124 170089           (../objs_lsl/sierr):00252                  lbsr  L01AF  Change our process image to dupe block 0 to 1-2
0127 1700D1           (../objs_lsl/sierr):00253         L0120    lbsr  L01FA  copies two subs to data area so others can use them
                      (../objs_lsl/sierr):00254         
012A 1702EF           (../objs_lsl/sierr):00255                  lbsr  L0419  load intercept routine and open /VI and allocate Ram
012D 2511             (../objs_lsl/sierr):00256                  bcs   L0139  if errors occured  close VIRQ device
                      (../objs_lsl/sierr):00257         
012F 1700F5           (../objs_lsl/sierr):00258                  lbsr  L0229  NMLoads the three other modules and sets up vals
0132 2509             (../objs_lsl/sierr):00259                  bcs   L0136  problems then unload them
                      (../objs_lsl/sierr):00260         
0134 170132           (../objs_lsl/sierr):00261                  lbsr  L026B  go set up screens
0137 2501             (../objs_lsl/sierr):00262                  bcs   L0133  problems deallocate them
0139 39               (../objs_lsl/sierr):00263                  rts   
                      (../objs_lsl/sierr):00264         
                      (../objs_lsl/sierr):00265         * clean up and shut down
013A                  (../objs_lsl/sierr):00266         agi_shutdown
013A 1701FA           (../objs_lsl/sierr):00267         L0133    lbsr  L0336  go deallocate hi res screens 
013D 170231           (../objs_lsl/sierr):00268         L0136    lbsr  L0370  unloads the three other modules
0140 17037D           (../objs_lsl/sierr):00269         L0139    lbsr  L04BD  Close VIRQ device
0143 170243           (../objs_lsl/sierr):00270                  lbsr  L0388  restore the MMU blocks
0146 39               (../objs_lsl/sierr):00271                  rts   
                      (../objs_lsl/sierr):00272         
                      (../objs_lsl/sierr):00273         * at this point u0000 contains the value of some entry minus $04FF
                      (../objs_lsl/sierr):00274         * which should be the size of our initialized data
                      (../objs_lsl/sierr):00275         * so we don't over write it but clear the rest of the data area
                      (../objs_lsl/sierr):00276         
0147 8E0002           (../objs_lsl/sierr):00277         L0140    ldx   #$0002 Init data area from 2-end with 0's
014A CC0000           (../objs_lsl/sierr):00278                  ldd   #$0000
014D ED81             (../objs_lsl/sierr):00279         L0146    std   ,x++
014F 9C00             (../objs_lsl/sierr):00280                  cmpx  <u0000  should have the value $04FF
0151 25FA             (../objs_lsl/sierr):00281                  bcs   L0146   appears this zeros out memory somewhere
                      (../objs_lsl/sierr):00282         
                      (../objs_lsl/sierr):00283         * initialize some variables
0153 A68DFEC3         (../objs_lsl/sierr):00284                  lda   >L001A,pcr  multitasking flag from startup parms
0157 B70172           (../objs_lsl/sierr):00285                  sta   mtf173      >$0173       store it
                      (../objs_lsl/sierr):00286         
015A CC0776           (../objs_lsl/sierr):00287                  ldd   #$0776   why twice
015D DD53             (../objs_lsl/sierr):00288                  std   <u0053
015F DD55             (../objs_lsl/sierr):00289                  std   <u0055
                      (../objs_lsl/sierr):00290         
0161 865C             (../objs_lsl/sierr):00291                  lda   #$5C
0163 B70101           (../objs_lsl/sierr):00292                  sta   >$0101
                      (../objs_lsl/sierr):00293         
0166 8617             (../objs_lsl/sierr):00294                  lda   #$17
0168 B701D7           (../objs_lsl/sierr):00295                  sta   >$01D7
                      (../objs_lsl/sierr):00296         
016B 860F             (../objs_lsl/sierr):00297                  lda   #$0F
016D B7023E           (../objs_lsl/sierr):00298                  sta   >$023E
                      (../objs_lsl/sierr):00299         
0170 CC0000           (../objs_lsl/sierr):00300                  ldd   #$0000
0173 DD4F             (../objs_lsl/sierr):00301                  std   <u004F
                      (../objs_lsl/sierr):00302         
                      (../objs_lsl/sierr):00303         *  get current montype
                      (../objs_lsl/sierr):00304         *  GetStat Function Code $92 
                      (../objs_lsl/sierr):00305         *          Allocates and maps high res screen 
                      (../objs_lsl/sierr):00306         *          into application address space
                      (../objs_lsl/sierr):00307         * entry:
                      (../objs_lsl/sierr):00308         *       a -> path number 
                      (../objs_lsl/sierr):00309         *       b -> function code $92 (SS.Montr)
                      (../objs_lsl/sierr):00310         *
                      (../objs_lsl/sierr):00311         * exit:
                      (../objs_lsl/sierr):00312         *       x -> monitor type
                      (../objs_lsl/sierr):00313         *
                      (../objs_lsl/sierr):00314         * error:
                      (../objs_lsl/sierr):00315         *       CC -> Carry set on error
                      (../objs_lsl/sierr):00316         *       b  -> error code (if any)
                      (../objs_lsl/sierr):00317         * 
0175 8601             (../objs_lsl/sierr):00318                  lda   #StdOut     $01 path number
0177 C692             (../objs_lsl/sierr):00319                  ldb   #SS.Montr   monitor type code (not listed for getstat $92  
0179 103F8D           (../objs_lsl/sierr):00320                  os9   I$GetStt    make the call
017C 1F10             (../objs_lsl/sierr):00321                  tfr   x,d         save in d appears he expects montype returned
017E E78DFF9B         (../objs_lsl/sierr):00322                  stb   >L0119,pcr  trim it to a byte and save it 
0182 C401             (../objs_lsl/sierr):00323                  andb  #$01        mask out mono type only RGB or COMP
0184 F70553           (../objs_lsl/sierr):00324                  stb   >$0553      save that value off as display_type
                      (../objs_lsl/sierr):00325         
                      (../objs_lsl/sierr):00326         *  set current montype
                      (../objs_lsl/sierr):00327         *  SetStat Function Code $92 
                      (../objs_lsl/sierr):00328         *          Allocates and maps high res screen 
                      (../objs_lsl/sierr):00329         *          into application address space
                      (../objs_lsl/sierr):00330         * entry:
                      (../objs_lsl/sierr):00331         *       a -> path number 
                      (../objs_lsl/sierr):00332         *       b -> function code $92 (SS.Montr)
                      (../objs_lsl/sierr):00333         *       x -> momitor type
                      (../objs_lsl/sierr):00334         *            0 = color composite
                      (../objs_lsl/sierr):00335         *            1 = analog RGB
                      (../objs_lsl/sierr):00336         *            2 = monochrome composite
                      (../objs_lsl/sierr):00337         *
                      (../objs_lsl/sierr):00338         * error:
                      (../objs_lsl/sierr):00339         *       CC -> Carry set on error
                      (../objs_lsl/sierr):00340         *       b  -> error code (if any)
                      (../objs_lsl/sierr):00341         * 
0187 8E0001           (../objs_lsl/sierr):00342                  ldx   #RGB        $0001 set type to RGB again as in L00C2
018A 8601             (../objs_lsl/sierr):00343                  lda   #StdOut     $01 set the path
018C C692             (../objs_lsl/sierr):00344                  ldb   #SS.Montr   Monitor type code $92
018E 103F8E           (../objs_lsl/sierr):00345                  os9   I$SetStt    make the call
                      (../objs_lsl/sierr):00346         
                      (../objs_lsl/sierr):00347         * initialize more variables
                      (../objs_lsl/sierr):00348         
0191 8632             (../objs_lsl/sierr):00349                  lda   #$32
0193 B70245           (../objs_lsl/sierr):00350                  sta   >$0245
                      (../objs_lsl/sierr):00351         
0196 CC6000           (../objs_lsl/sierr):00352                  ldd   #$6000   This is the start of high res screen memory
0199 DD46             (../objs_lsl/sierr):00353                  std   <u0046
                      (../objs_lsl/sierr):00354         
019B 8615             (../objs_lsl/sierr):00355                  lda   #$15
019D B70247           (../objs_lsl/sierr):00356                  sta   >$0247
                      (../objs_lsl/sierr):00357         
01A0 86FF             (../objs_lsl/sierr):00358                  lda   #$FF   Init 15 bytes at u0532 to $FF 
01A2 B705EE           (../objs_lsl/sierr):00359                  sta   $05EE
01A5 C610             (../objs_lsl/sierr):00360                  ldb   #$10
01A7 8E0531           (../objs_lsl/sierr):00361                  ldx   #$0531
                      (../objs_lsl/sierr):00362         
                      (../objs_lsl/sierr):00363         * Fill routine-one byte pattern
                      (../objs_lsl/sierr):00364         * Entry: A=Byte to fill with
                      (../objs_lsl/sierr):00365         *        B=# bytes to fill
                      (../objs_lsl/sierr):00366         *        X=Start address of fill
                      (../objs_lsl/sierr):00367         
01AA A780             (../objs_lsl/sierr):00368         L01A3    sta   ,x+
01AC 5A               (../objs_lsl/sierr):00369                  decb  
01AD 26FB             (../objs_lsl/sierr):00370                  bne   L01A3
01AF 39               (../objs_lsl/sierr):00371                  rts   
                      (../objs_lsl/sierr):00372         
                      (../objs_lsl/sierr):00373         
                      (../objs_lsl/sierr):00374         **********************************************************
                      (../objs_lsl/sierr):00375         * COMMENTS FROM CODE RECIEVED
                      (../objs_lsl/sierr):00376         * Change our process map: 
                      (../objs_lsl/sierr):00377         *         Blocks 1-2 become duplicates of block 0 (data area... 
                      (../objs_lsl/sierr):00378         *         changes actual MMU regs themselves & 
                      (../objs_lsl/sierr):00379         *         changes them in our process descriptor
                      (../objs_lsl/sierr):00380         *
                      (../objs_lsl/sierr):00381         * NOTE: SHOULD CHANGE SO IT MAPS IN BLOCK 0 IN AN UNUSED BLOCK 1ST 
                      (../objs_lsl/sierr):00382         *       TO GET PROCESS DESCRIPTOR DAT IMAGE FOR SIERRA. 
                      (../objs_lsl/sierr):00383         *       THEN, CAN BUMP BLOCKS AROUND WITH THE ACTUAL BLOCK # 
                      (../objs_lsl/sierr):00384         *       IN FULL 2 MB RANGE, INSTEAD OF JUST GIME 512K RANGE.
                      (../objs_lsl/sierr):00385         * R.Gault: A better way is to use F$GPrDsc and that is done with
                      (../objs_lsl/sierr):00386         * new routines at the end of the program.
01B0 1A50             (../objs_lsl/sierr):00387         L01AF    orcc  #IntMasks    Shut interrupts off
01B2 8E0002           (../objs_lsl/sierr):00388                  ldx   #$0002       ???
01B5 9F22             (../objs_lsl/sierr):00389                  stx   <u0022
                      (../objs_lsl/sierr):00390         
                      (../objs_lsl/sierr):00391         *        As per above NOTE, should postpone this until we have DAT image 
                      (../objs_lsl/sierr):00392         *        available for Sierra process
                      (../objs_lsl/sierr):00393         
                      (../objs_lsl/sierr):00394         *         lda   >$FFAF         Get MMU block # SIERRA is in
01B7 A68D03B5         (../objs_lsl/sierr):00395                  lda   mmubuf+$0F,pcr
01BB 9708             (../objs_lsl/sierr):00396                  sta   <u0008         Save it
01BD 7FFFA9           (../objs_lsl/sierr):00397                  clr   >$FFA9         Map system block 0 into $2000-$3FFF
01C0 FC2050           (../objs_lsl/sierr):00398                  ldd   >D.Proc+$2000  Get SIERRA's process dsc. ptr
01C3 841F             (../objs_lsl/sierr):00399                  anda  #$1F           Keep non-MMU dependent address
                      (../objs_lsl/sierr):00400         
                      (../objs_lsl/sierr):00401         * NOTE: OFFSET IS STUPID, SHOULD USE EVEN BYTE SO LDD'S BELOW 
                      (../objs_lsl/sierr):00402         *       CAN USE FASTER LDD ,X INSTEAD OF OFFSET,X
                      (../objs_lsl/sierr):00403         
01C5 C32043           (../objs_lsl/sierr):00404                  addd  #$2000+P$DATImg+3  Set up ptr for what we want out of it
01C8 DD43             (../objs_lsl/sierr):00405                  std   <u0043             Save it
01CA F62050           (../objs_lsl/sierr):00406                  ldb   >D.Proc+$2000      Get MSB of SIERRA's process dsc. ptr
01CD C4E0             (../objs_lsl/sierr):00407                  andb  #$E0               Calculate which 8K block within 
                      (../objs_lsl/sierr):00408         *                                 system task it's in
                      (../objs_lsl/sierr):00409         * I don't like the original and made it simpler. RG
                      (../objs_lsl/sierr):00410         *         lsrb  
                      (../objs_lsl/sierr):00411         *         lsrb  
                      (../objs_lsl/sierr):00412         *         lsrb  
                      (../objs_lsl/sierr):00413         *         lsrb  
                      (../objs_lsl/sierr):00414         *         lsrb
01CF 8608             (../objs_lsl/sierr):00415                  lda   #8
01D1 3D               (../objs_lsl/sierr):00416                  mul
                      (../objs_lsl/sierr):00417         *         ldx   #$FFA0       Point to base of System task DAT register set block 0 task 0
01D2 308D038B         (../objs_lsl/sierr):00418                  leax  mmubuf,pcr
                      (../objs_lsl/sierr):00419         *         lda   b,x          Get block # that has process desc. for SIERRA
01D6 A686             (../objs_lsl/sierr):00420                  lda   a,x          Get MMU value of block
01D8 9742             (../objs_lsl/sierr):00421                  sta   <u0042       Save it
01DA B7FFA9           (../objs_lsl/sierr):00422                  sta   >$FFA9       Map in block with process dsc. to $2000-$3FFF
01DD 9E43             (../objs_lsl/sierr):00423                  ldx   <u0043       Get offset to 2nd 8K block in DAT map for SIERRA
01DF EC1F             (../objs_lsl/sierr):00424                  ldd   -1,x         Get MMU block # of current 2nd 8k block in SIERRA
01E1 ED8DFF21         (../objs_lsl/sierr):00425                  std   >L0102,pcr   Save it
01E5 EC01             (../objs_lsl/sierr):00426                  ldd   1,x          Get MMU block # of current 3rd 8k block in SIERRA
01E7 ED8DFF1D         (../objs_lsl/sierr):00427                  std   >L0104,pcr   Save it
01EB EC1D             (../objs_lsl/sierr):00428                  ldd   -3,x         Get data area block 3 from sierra (1st block)
01ED ED1F             (../objs_lsl/sierr):00429                  std   -1,x         Move 8k data area to 2nd block
01EF ED01             (../objs_lsl/sierr):00430                  std   1,x          And to 3rd block
01F1 1F98             (../objs_lsl/sierr):00431                  tfr   b,a          D=Raw MMU block # for both
                      (../objs_lsl/sierr):00432         
01F3 FDFFA9           (../objs_lsl/sierr):00433                  std   >$FFA9       Map data area block into both blocks 2&3
01F6 DD02             (../objs_lsl/sierr):00434                  std   <u0002       Save both block #'s
01F8 1CAF             (../objs_lsl/sierr):00435                  andcc #^IntMasks   Turn interrupts back on
01FA 39               (../objs_lsl/sierr):00436                  rts   
                      (../objs_lsl/sierr):00437         
                      (../objs_lsl/sierr):00438         
                      (../objs_lsl/sierr):00439         * NOTE: 6809/6309 MOD: STUPID. DO LEAX, AND THEN PSHS X
                      (../objs_lsl/sierr):00440         * Right so I'll change it! RG
                      (../objs_lsl/sierr):00441         * load first routine
                      (../objs_lsl/sierr):00442         *L01FA    leas  -2,s         Make 2 word buffer on stack
                      (../objs_lsl/sierr):00443         *         leax  >L054F,pcr   Point to end of routine
                      (../objs_lsl/sierr):00444         *         stx   ,s           Save ptr
01FB 308D0353         (../objs_lsl/sierr):00445         L01FA    leax  L054F,pcr
01FF 3410             (../objs_lsl/sierr):00446                  pshs  x
0201 308D02D8         (../objs_lsl/sierr):00447                  leax  L04DA,pcr    Point to routine
                      (../objs_lsl/sierr):00448         *         ldu   #$0659      Point to place in data area to copy it
0205 CE0701           (../objs_lsl/sierr):00449                  ldu   #sub659
0208 A680             (../objs_lsl/sierr):00450         L0209    lda   ,x+          Copy routine
020A A7C0             (../objs_lsl/sierr):00451                  sta   ,u+
020C ACE4             (../objs_lsl/sierr):00452                  cmpx  ,s           Done whole routine yet?
020E 25F8             (../objs_lsl/sierr):00453                  blo   L0209        No, keep going
                      (../objs_lsl/sierr):00454         
                      (../objs_lsl/sierr):00455         * get next routine interrupt intecept routine
0210 308D02AC         (../objs_lsl/sierr):00456                  leax  >L04BD,pcr   point to end of routine
0214 AFE4             (../objs_lsl/sierr):00457                  stx   ,s           save pointer
0216 308D023B         (../objs_lsl/sierr):00458                  leax  >L0452,pcr   point to routine
021A CE0696           (../objs_lsl/sierr):00459                  ldu   #int5EE      point to place in data area to copy it
021D A680             (../objs_lsl/sierr):00460         L021E    lda   ,x+          copy routine
021F A7C0             (../objs_lsl/sierr):00461                  sta   ,u+
0221 ACE4             (../objs_lsl/sierr):00462                  cmpx  ,s           Done whole routine yet?
0223 25F8             (../objs_lsl/sierr):00463                  blo   L021E        No, keep going
                      (../objs_lsl/sierr):00464         *         leas  $02,s        clean up stack
                      (../objs_lsl/sierr):00465         *         rts                return
0225 3590             (../objs_lsl/sierr):00466                  puls  x,pc
                      (../objs_lsl/sierr):00467         
                      (../objs_lsl/sierr):00468         * Called from dispatch table at L0120
                      (../objs_lsl/sierr):00469         * The last op in the subroutine before this one
                      (../objs_lsl/sierr):00470         * was a puls a,b after a puhs x and a setsatt call for process+path to VIRQ
                      (../objs_lsl/sierr):00471         
0227 1F98             (../objs_lsl/sierr):00472         L0229    tfr   b,a          don't see what's going on here
0229 5C               (../objs_lsl/sierr):00473                  incb  
022A DD1C             (../objs_lsl/sierr):00474                  std   <u001C       but we save off a bunch of values
                      (../objs_lsl/sierr):00475         
022C C30202           (../objs_lsl/sierr):00476                  addd  #$0202
022F DD1E             (../objs_lsl/sierr):00477                  std   <u001E
                      (../objs_lsl/sierr):00478         
0231 C30202           (../objs_lsl/sierr):00479                  addd  #$0202
0234 975F             (../objs_lsl/sierr):00480                  sta   <u005F
0236 DD0C             (../objs_lsl/sierr):00481                  std   <u000C
0238 DD0E             (../objs_lsl/sierr):00482                  std   <u000E
                      (../objs_lsl/sierr):00483         
023A CE001A           (../objs_lsl/sierr):00484                  ldu   #$001A
023D DF28             (../objs_lsl/sierr):00485                  stu   <u0028       
023F 308DFEC7         (../objs_lsl/sierr):00486                  leax  >L0106,pcr   shdw
0243 17018A           (../objs_lsl/sierr):00487                  lbsr  L03D0        NMLoads named module
0246 2520             (../objs_lsl/sierr):00488                  bcs   L026A        return on error
                      (../objs_lsl/sierr):00489         
0248 CE0012           (../objs_lsl/sierr):00490                  ldu   #$0012
024B DF26             (../objs_lsl/sierr):00491                  stu   <u0026
024D 308DFEBE         (../objs_lsl/sierr):00492                  leax  >L010B,pcr    scrn
0251 17017C           (../objs_lsl/sierr):00493                  lbsr  L03D0        NMLoads named module
0254 2512             (../objs_lsl/sierr):00494                  bcs   L026A        return on error
                      (../objs_lsl/sierr):00495         
0256 CE000A           (../objs_lsl/sierr):00496                  ldu   #$000A
0259 DF24             (../objs_lsl/sierr):00497                  stu   <u0024
025B 308DFEB5         (../objs_lsl/sierr):00498                  leax  >L0110,pcr    mnln
025F 17016E           (../objs_lsl/sierr):00499                  lbsr  L03D0        NMLoads named module
                      (../objs_lsl/sierr):00500         
0262 33C92000         (../objs_lsl/sierr):00501                  leau  >$2000,u
0266 DF2E             (../objs_lsl/sierr):00502                  stu   <u002E
0268 39               (../objs_lsl/sierr):00503         L026A    rts   
                      (../objs_lsl/sierr):00504         
                      (../objs_lsl/sierr):00505         *****************************************************
                      (../objs_lsl/sierr):00506         * 
                      (../objs_lsl/sierr):00507         *  Set up screens 
                      (../objs_lsl/sierr):00508         *  SetStat Function Code $8B 
                      (../objs_lsl/sierr):00509         *          Allocates and maps high res screen 
                      (../objs_lsl/sierr):00510         *          into application address space
                      (../objs_lsl/sierr):00511         * entry:
                      (../objs_lsl/sierr):00512         *       a -> path number 
                      (../objs_lsl/sierr):00513         *       b -> function code $8B (SS.AScrn)
                      (../objs_lsl/sierr):00514         *       x -> screen type 
                      (../objs_lsl/sierr):00515         *            0 = 640 x 192 x 2 colors (16K)
                      (../objs_lsl/sierr):00516         *            1 = 320 x 192 x 4 colors (16K)
                      (../objs_lsl/sierr):00517         *            2 = 160 x 192 x 16 colors (16K)
                      (../objs_lsl/sierr):00518         *            3 = 640 x 192 x 4 colors (32K)
                      (../objs_lsl/sierr):00519         *            4 = 320 x 192 x 16 colors (32K)
                      (../objs_lsl/sierr):00520         *
                      (../objs_lsl/sierr):00521         * exit:
                      (../objs_lsl/sierr):00522         *       x -> application address space of screen
                      (../objs_lsl/sierr):00523         *       y -> screen number (1-3)
                      (../objs_lsl/sierr):00524         *
                      (../objs_lsl/sierr):00525         * error:
                      (../objs_lsl/sierr):00526         *       CC -> Carry set on error
                      (../objs_lsl/sierr):00527         *       b  -> error code (if any)
                      (../objs_lsl/sierr):00528         * 
                      (../objs_lsl/sierr):00529         *  Call use VDGINT allocates high res graphics for use with screens 
                      (../objs_lsl/sierr):00530         *  updated by the process, does not clear the screens only allocates
                      (../objs_lsl/sierr):00531         *  See OS-9 Technical Reference 8-142 for more details
                      (../objs_lsl/sierr):00532         *
                      (../objs_lsl/sierr):00533         
0269 327C             (../objs_lsl/sierr):00534         L026B    leas  -$04,s       make room on stack 2 words
026B 8601             (../objs_lsl/sierr):00535                  lda   #$01         Std out
026D C68B             (../objs_lsl/sierr):00536                  ldb   #SS.AScrn    Allocate & map in hi-res screen (VDGINT)
026F 8E0004           (../objs_lsl/sierr):00537                  ldx   #$0004       320x192x16 screen
0272 103F8E           (../objs_lsl/sierr):00538                  os9   I$SetStt     Map it in
0275 2570             (../objs_lsl/sierr):00539                  bcs   L02E6        Error, Restore stack & exit
0277 1F20             (../objs_lsl/sierr):00540                  tfr   y,d          Move screen # returned to D
                      (../objs_lsl/sierr):00541         *         stb   >$0174      Save screen #
0279 F70173           (../objs_lsl/sierr):00542                  stb   scr174       Save screen #
                      (../objs_lsl/sierr):00543         
                      (../objs_lsl/sierr):00544         * call with application address of screen in x
                      (../objs_lsl/sierr):00545         * returns with MMU values in u
027C 170511           (../objs_lsl/sierr):00546                  lbsr  mmuini2      get current MMU values
027F 170135           (../objs_lsl/sierr):00547                  lbsr  L03B6        convert addresses into MMU values
0282 DF04             (../objs_lsl/sierr):00548                  stu   <u0004       stow it two places
0284 DF14             (../objs_lsl/sierr):00549                  stu   <u0014
                      (../objs_lsl/sierr):00550         
0286 30894000         (../objs_lsl/sierr):00551                  leax  >$4000,x     end address ???
028A 17012A           (../objs_lsl/sierr):00552                  lbsr  L03B6        convert addresses into MMU values
028D DF06             (../objs_lsl/sierr):00553                  stu   <u0006       stow it in two places
028F DF16             (../objs_lsl/sierr):00554                  stu   <u0016
                      (../objs_lsl/sierr):00555         
                      (../objs_lsl/sierr):00556         * TFM for 6309
0291 CED800           (../objs_lsl/sierr):00557                  ldu   #$D800       Clear hi-res screen to color 0
0294 8E7800           (../objs_lsl/sierr):00558                  ldx   #$7800       Screen is from $6000 to $D800
0297 CC0000           (../objs_lsl/sierr):00559                  ldd   #$0000       (U will end up pointing to beginning of screen)
029A EDC3             (../objs_lsl/sierr):00560         L0299    std   ,--u         writes 0000 to screen address and decrements
029C 301E             (../objs_lsl/sierr):00561                  leax  -2,x         decrement x loop counter
029E 26FA             (../objs_lsl/sierr):00562                  bne   L0299        keep going till all of screen is cleared
                      (../objs_lsl/sierr):00563         
                      (../objs_lsl/sierr):00564         *  Display a screen allocated by SS.AScrn
                      (../objs_lsl/sierr):00565         *  SetStat Function Code $8C
                      (../objs_lsl/sierr):00566         *
                      (../objs_lsl/sierr):00567         * entry:
                      (../objs_lsl/sierr):00568         *       a -> path number 
                      (../objs_lsl/sierr):00569         *       b -> function code $8C (SS.DScrn)
                      (../objs_lsl/sierr):00570         *       y -> screen numbe
                      (../objs_lsl/sierr):00571         *            0 = text screen (32 x 16)
                      (../objs_lsl/sierr):00572         *            1-3 = high resolution screen
                      (../objs_lsl/sierr):00573         *
                      (../objs_lsl/sierr):00574         * error:
                      (../objs_lsl/sierr):00575         *       CC -> Carry set on error
                      (../objs_lsl/sierr):00576         *       b  -> error code (if any)
                      (../objs_lsl/sierr):00577         
02A0 4F               (../objs_lsl/sierr):00578                  clra               Get screen # to display
02A1 F60173           (../objs_lsl/sierr):00579                  ldb   scr174
02A4 1F02             (../objs_lsl/sierr):00580                  tfr   d,y          Y=screen # to display
02A6 8601             (../objs_lsl/sierr):00581                  lda   #StdOut      $01  Std out path
02A8 C68C             (../objs_lsl/sierr):00582                  ldb   #SS.DScrn    Display 320x192x16 screen
02AA 103F8E           (../objs_lsl/sierr):00583                  os9   I$SetStt     make the call
02AD 2538             (../objs_lsl/sierr):00584                  bcs   L02E6
                      (../objs_lsl/sierr):00585         
02AF 308DFE33         (../objs_lsl/sierr):00586                  leax  >L00E2,pcr  values initialized to is $000C
02B3 F60553           (../objs_lsl/sierr):00587                  ldb   >$0553      monitor type
02B6 8610             (../objs_lsl/sierr):00588                  lda   #$10
02B8 3D               (../objs_lsl/sierr):00589                  mul
02B9 3A               (../objs_lsl/sierr):00590                  abx               add b to x and stow at x
                      (../objs_lsl/sierr):00591         
                      (../objs_lsl/sierr):00592         
                      (../objs_lsl/sierr):00593         * This loads up the control sequence to set the pallete 1B 31 PRN CTN
                      (../objs_lsl/sierr):00594         *  PRN palette register 0 - 15, CTN color table 0 - 63
02BA 861B             (../objs_lsl/sierr):00595                  lda   #$1B      Escape code
02BC A7E4             (../objs_lsl/sierr):00596                  sta   ,s        push on stack
02BE 8631             (../objs_lsl/sierr):00597                  lda   #$31      Palette code
02C0 A761             (../objs_lsl/sierr):00598                  sta   $01,s     push on stack
02C2 4F               (../objs_lsl/sierr):00599                  clra            make a zero palette reg value
02C3 A762             (../objs_lsl/sierr):00600                  sta   $02,s     push it `
02C5 108E0004         (../objs_lsl/sierr):00601                  ldy   #$0004    sets up # of bytes to write
02C9 E680             (../objs_lsl/sierr):00602         L02C8    ldb   ,x+       get value computed above for color table and bump it
02CB E763             (../objs_lsl/sierr):00603                  stb   $03,s     push it
02CD 3410             (../objs_lsl/sierr):00604                  pshs  x         save it
02CF 8601             (../objs_lsl/sierr):00605                  lda   #StdOut   $01      Std Out path
02D1 3062             (../objs_lsl/sierr):00606                  leax  $02,s     start of data to write
02D3 103F8A           (../objs_lsl/sierr):00607                  os9   I$Write   write it
02D6 250F             (../objs_lsl/sierr):00608                  bcs   L02E6     error during write clean up stack and leave
02D8 3510             (../objs_lsl/sierr):00609                  puls  x         retrieve our x
02DA 6C62             (../objs_lsl/sierr):00610                  inc   $02,s     this is our palette register value
02DC A662             (../objs_lsl/sierr):00611                  lda   $02,s     we bumped it by one 
02DE 8110             (../objs_lsl/sierr):00612                  cmpa  #$10      we loop 15 times to set them all
02E0 25E7             (../objs_lsl/sierr):00613                  bcs   L02C8     loop
                      (../objs_lsl/sierr):00614         
02E2 0F45             (../objs_lsl/sierr):00615                  clr   <u0045    clear a flag in memory
02E4 170003           (../objs_lsl/sierr):00616                  lbsr  L02E9     go disable keyboard interrupts
02E7 3264             (../objs_lsl/sierr):00617         L02E6    leas  $04,s     clean up stack
02E9 39               (../objs_lsl/sierr):00618                  rts             return
                      (../objs_lsl/sierr):00619         
                      (../objs_lsl/sierr):00620         
                      (../objs_lsl/sierr):00621         
                      (../objs_lsl/sierr):00622         * Kills the echo, eof, int and quit signals
                      (../objs_lsl/sierr):00623         *  get current options packet
                      (../objs_lsl/sierr):00624         *  GetStat Function Code $00 
                      (../objs_lsl/sierr):00625         *          Reads the options section of the path descriptor and
                      (../objs_lsl/sierr):00626         *          copies it into the 32 byte area pointed to by reg X`
                      (../objs_lsl/sierr):00627         * entry:
                      (../objs_lsl/sierr):00628         *       a -> path number 
                      (../objs_lsl/sierr):00629         *       b -> function code $00 (SS.OPT)
                      (../objs_lsl/sierr):00630         *       x -> address to recieve status packet
                      (../objs_lsl/sierr):00631         *
                      (../objs_lsl/sierr):00632         * error:
                      (../objs_lsl/sierr):00633         *       CC -> Carry set on error
                      (../objs_lsl/sierr):00634         *       b  -> error code (if any)
                      (../objs_lsl/sierr):00635         * 
                      (../objs_lsl/sierr):00636         
02EA 32E8E0           (../objs_lsl/sierr):00637         L02E9    leas  <-$20,s           Make temp buffer to hold PD.OPT data
02ED 8600             (../objs_lsl/sierr):00638                  lda   #StdIn            $00 Get 32 byte PD.OPT from Std In
02EF C600             (../objs_lsl/sierr):00639                  ldb   #SS.OPT           $00
02F1 30E4             (../objs_lsl/sierr):00640                  leax  ,s                point to our temp buffer
02F3 103F8D           (../objs_lsl/sierr):00641                  os9   I$GetStt          make the call
02F6 253B             (../objs_lsl/sierr):00642                  bcs   L0332             error goto exit sub
                      (../objs_lsl/sierr):00643         
                      (../objs_lsl/sierr):00644         * NOTE: make sure following lines assemble into 5 bit, not 8 bit
                      (../objs_lsl/sierr):00645         *       These appear to be loading the  echo EOF, INT and QUIT with 
                      (../objs_lsl/sierr):00646         *       null values and saving the original ones back to vars
                      (../objs_lsl/sierr):00647         *       since L0115 - L0118 were initialized with $00
                      (../objs_lsl/sierr):00648         
02F8 A68DFE1D         (../objs_lsl/sierr):00649                  lda   >L0115,pcr
02FC E604             (../objs_lsl/sierr):00650                  ldb   PD.EKO-PD.OPT,x   Get echo option
02FE A704             (../objs_lsl/sierr):00651                  sta   PD.EKO-PD.OPT,x   change echo option no echo
0300 E78DFE15         (../objs_lsl/sierr):00652                  stb   >L0115,pcr         Save original echo option
                      (../objs_lsl/sierr):00653         
0304 A68DFE12         (../objs_lsl/sierr):00654                  lda   >L0116,pcr
0308 E60C             (../objs_lsl/sierr):00655                  ldb   PD.EOF-PD.OPT,x   Change EOF char 
030A A70C             (../objs_lsl/sierr):00656                  sta   PD.EOF-PD.OPT,x
030C E78DFE0A         (../objs_lsl/sierr):00657                  stb   >L0116,pcr
                      (../objs_lsl/sierr):00658         
0310 A68DFE07         (../objs_lsl/sierr):00659                  lda   >L0117,pcr
0314 E68810           (../objs_lsl/sierr):00660                  ldb   <PD.INT-PD.OPT,x  Change INTerrupt char (normally CTRL-C)
0317 A78810           (../objs_lsl/sierr):00661                  sta   <PD.INT-PD.OPT,x
031A E78DFDFD         (../objs_lsl/sierr):00662                  stb   >L0117,pcr
                      (../objs_lsl/sierr):00663         
031E A68DFDFA         (../objs_lsl/sierr):00664                  lda   >L0118,pcr
0322 E68811           (../objs_lsl/sierr):00665                  ldb   <PD.QUT-PD.OPT,x  Change QUIT char (normally CTRL-E)
0325 A78811           (../objs_lsl/sierr):00666                  sta   <PD.QUT-PD.OPT,x
0328 E78DFDF0         (../objs_lsl/sierr):00667                  stb   >L0118,pcr
                      (../objs_lsl/sierr):00668         
                      (../objs_lsl/sierr):00669         *  set current options packet
                      (../objs_lsl/sierr):00670         *  SetStat Function Code $00 
                      (../objs_lsl/sierr):00671         *          Writes the options section of the path descriptor 
                      (../objs_lsl/sierr):00672         *          from the 32 byte area pointed to by reg X`
                      (../objs_lsl/sierr):00673         * entry:
                      (../objs_lsl/sierr):00674         *       a -> path number 
                      (../objs_lsl/sierr):00675         *       b -> function code $00 (SS.OPT)
                      (../objs_lsl/sierr):00676         *       x -> address holding the status packet
                      (../objs_lsl/sierr):00677         *
                      (../objs_lsl/sierr):00678         * error:
                      (../objs_lsl/sierr):00679         *       CC -> Carry set on error
                      (../objs_lsl/sierr):00680         *       b  -> error code (if any)
                      (../objs_lsl/sierr):00681         * 
                      (../objs_lsl/sierr):00682         
                      (../objs_lsl/sierr):00683         *                                x is still pointing to our temp buff
032C 8600             (../objs_lsl/sierr):00684                  lda   #StdIn            $00 Set VDG screen to new options
032E C600             (../objs_lsl/sierr):00685                  ldb   #SS.OPT           $00
0330 103F8E           (../objs_lsl/sierr):00686                  os9   I$SetStt          set them to be our new values
                      (../objs_lsl/sierr):00687         
0333 32E820           (../objs_lsl/sierr):00688         L0332    leas  <$20,s            Eat temp stack & return
0336 39               (../objs_lsl/sierr):00689                  rts   
                      (../objs_lsl/sierr):00690         
                      (../objs_lsl/sierr):00691         
                      (../objs_lsl/sierr):00692         
                      (../objs_lsl/sierr):00693         *  Return the screen to default text sreen and its values
                      (../objs_lsl/sierr):00694         *  deallocate and free memory of high res screen created
                      (../objs_lsl/sierr):00695         
0337 327E             (../objs_lsl/sierr):00696         L0336    leas  -2,s         Make temp buffer to hold write data
                      (../objs_lsl/sierr):00697         *         tst   >$0174       Any hi-res screen # allocated?
0339 7D0173           (../objs_lsl/sierr):00698                  tst   scr174       Any hi-res screen # allocated?
033C 2730             (../objs_lsl/sierr):00699                  beq   L036D        No, restore stack & return
033E 17FFA9           (../objs_lsl/sierr):00700                  lbsr  L02E9        go change the echo,eof,int and quit settings
0341 252B             (../objs_lsl/sierr):00701                  bcs   L036D        had an error restore stack and return
0343 861B             (../objs_lsl/sierr):00702                  lda   #$1B         Setup DefColr sequence in temp buffer
0345 A7E4             (../objs_lsl/sierr):00703                  sta   ,s
0347 8630             (../objs_lsl/sierr):00704                  lda   #$30         Sets palettes back to default color
0349 A761             (../objs_lsl/sierr):00705                  sta   1,s
034B 108E0002         (../objs_lsl/sierr):00706                  ldy   #$0002       number of bytes to write 
034F 8601             (../objs_lsl/sierr):00707                  lda   #StdOut      path to write to $01
0351 30E4             (../objs_lsl/sierr):00708                  leax  ,s           point x a buffer
0353 103F8A           (../objs_lsl/sierr):00709                  os9   I$Write      write
0356 2516             (../objs_lsl/sierr):00710                  bcs   L036D        we have an error clean stack and leave
                      (../objs_lsl/sierr):00711         
                      (../objs_lsl/sierr):00712         *  Display a screen allocated by SS.AScrn
                      (../objs_lsl/sierr):00713         *  SetStat Function Code $8C
                      (../objs_lsl/sierr):00714         *
                      (../objs_lsl/sierr):00715         * entry:
                      (../objs_lsl/sierr):00716         *       a -> path number 
                      (../objs_lsl/sierr):00717         *       b -> function code $8C (SS.DScrn)
                      (../objs_lsl/sierr):00718         *       y -> screen numbe
                      (../objs_lsl/sierr):00719         *            0 = text screen (32 x 16)
                      (../objs_lsl/sierr):00720         *            1-3 = high resolution screen
                      (../objs_lsl/sierr):00721         *
                      (../objs_lsl/sierr):00722         * error:
                      (../objs_lsl/sierr):00723         *       CC -> Carry set on error
                      (../objs_lsl/sierr):00724         *       b  -> error code (if any)
                      (../objs_lsl/sierr):00725         
                      (../objs_lsl/sierr):00726         *                           a is still set to stdout from above
0358 C68C             (../objs_lsl/sierr):00727                  ldb   #SS.DScrn   Display screen function code
035A 108E0000         (../objs_lsl/sierr):00728                  ldy   #$0000      Display screen #0 (lo-res or 32x16 text)
035E 103F8E           (../objs_lsl/sierr):00729                  os9   I$SetStt    make the call
                      (../objs_lsl/sierr):00730         
                      (../objs_lsl/sierr):00731         *  Frees the memory of a screen allocated by SS.AScrn
                      (../objs_lsl/sierr):00732         *  SetStat Function Code $8C
                      (../objs_lsl/sierr):00733         *
                      (../objs_lsl/sierr):00734         * entry:
                      (../objs_lsl/sierr):00735         *       a -> path number 
                      (../objs_lsl/sierr):00736         *       b -> function code $8D (SS.FScrn)
                      (../objs_lsl/sierr):00737         *       y -> screen number 1-3 = high resolution screen
                      (../objs_lsl/sierr):00738         *
                      (../objs_lsl/sierr):00739         * error:
                      (../objs_lsl/sierr):00740         *       CC -> Carry set on error
                      (../objs_lsl/sierr):00741         *       b  -> error code (if any)
                      (../objs_lsl/sierr):00742         
0361 4F               (../objs_lsl/sierr):00743                  clra               clear high byte
0362 F60173           (../objs_lsl/sierr):00744                  ldb   scr174       Get hi-res screen # again
0365 1F02             (../objs_lsl/sierr):00745                  tfr   d,y          move it to Y=screen #
0367 8601             (../objs_lsl/sierr):00746                  lda   #StdOut      set the path $01
0369 C68D             (../objs_lsl/sierr):00747                  ldb   #SS.FSCrn    Return screen memory to system
036B 103F8E           (../objs_lsl/sierr):00748                  os9   I$SetStt     amke the call
                      (../objs_lsl/sierr):00749         
036E 3262             (../objs_lsl/sierr):00750         L036D    leas  2,s          Eat stack & return
0370 39               (../objs_lsl/sierr):00751                  rts   
                      (../objs_lsl/sierr):00752         
                      (../objs_lsl/sierr):00753         
                      (../objs_lsl/sierr):00754         
                      (../objs_lsl/sierr):00755         *  Unload the other modules
0371 308DFD95         (../objs_lsl/sierr):00756         L0370    leax  >L0106,pcr    shdw name string
0375 8611             (../objs_lsl/sierr):00757                  lda   #Prgrm+Objct  #$11        module type
0377 170094           (../objs_lsl/sierr):00758                  lbsr  L040B         unload it
037A 308DFD91         (../objs_lsl/sierr):00759                  leax  >L010B,pcr    scrn name string
037E 17008D           (../objs_lsl/sierr):00760                  lbsr  L040B         unload it
0381 308DFD8F         (../objs_lsl/sierr):00761                  leax  >L0110,pcr    mnln name string
0385 170086           (../objs_lsl/sierr):00762                  lbsr  L040B         unload it 
0388 39               (../objs_lsl/sierr):00763                  rts   
                      (../objs_lsl/sierr):00764         
                      (../objs_lsl/sierr):00765         
                      (../objs_lsl/sierr):00766         
                      (../objs_lsl/sierr):00767         * Restore original MMU block numbers
0389 1A50             (../objs_lsl/sierr):00768         L0388    orcc  #IntMasks    Shut off interrupts
038B 9642             (../objs_lsl/sierr):00769                  lda   <u0042       get MMU Block #
038D B7FFA9           (../objs_lsl/sierr):00770                  sta   >$FFA9       Restore original block 0 onto MMU
0390 9E43             (../objs_lsl/sierr):00771                  ldx   <u0043
0392 EC8DFD72         (../objs_lsl/sierr):00772                  ldd   >L0104,pcr    Original 3rd block of MMU
0396 ED01             (../objs_lsl/sierr):00773                  std   1,x
0398 F7FFAA           (../objs_lsl/sierr):00774                  stb   >$FFAA       Restore original block 1 onto MMU
039B EC8DFD67         (../objs_lsl/sierr):00775                  ldd   >L0102,pcr    Original 2nd block of MMU
039F ED1F             (../objs_lsl/sierr):00776                  std   -1,x
03A1 F7FFA9           (../objs_lsl/sierr):00777                  stb   >$FFA9       Restore block 0 again
03A4 1CAF             (../objs_lsl/sierr):00778                  andcc #^IntMasks   Turn interrupts back on
                      (../objs_lsl/sierr):00779         
                      (../objs_lsl/sierr):00780         *  return monitor type to original value
03A6 4F               (../objs_lsl/sierr):00781                  clra  
03A7 E68DFD72         (../objs_lsl/sierr):00782                  ldb   >L0119,pcr    Get original monitor type
03AB C403             (../objs_lsl/sierr):00783                  andb  #$03         Force to only legit values
03AD 1F01             (../objs_lsl/sierr):00784                  tfr   d,x          Move to proper register
03AF 8601             (../objs_lsl/sierr):00785                  lda   #StdOut      set path $01
03B1 C692             (../objs_lsl/sierr):00786                  ldb   #SS.Montr    Restore original monitor type
03B3 103F8E           (../objs_lsl/sierr):00787                  os9   I$SetStt     make the call
03B6 39               (../objs_lsl/sierr):00788                  rts   
                      (../objs_lsl/sierr):00789         
                      (../objs_lsl/sierr):00790         
                      (../objs_lsl/sierr):00791         * Converts address into MMU values
                      (../objs_lsl/sierr):00792         * called with value to be converted in X
                      (../objs_lsl/sierr):00793         * returns block # in a 
                      (../objs_lsl/sierr):00794         
03B7 1F10             (../objs_lsl/sierr):00795         L03B6     tfr   x,d          Move address to D
                      (../objs_lsl/sierr):00796         * I decided to simplify this code. RG
                      (../objs_lsl/sierr):00797         *         exg   a,b          Swap MSB/LSB should be tfr a,b
                      (../objs_lsl/sierr):00798         *         lsrb               Divide MSB by 32 (calculate 8k block # in proc map)
                      (../objs_lsl/sierr):00799         *         lsrb  
                      (../objs_lsl/sierr):00800         *         lsrb  
                      (../objs_lsl/sierr):00801         *         lsrb  
                      (../objs_lsl/sierr):00802         *         lsrb
                      (../objs_lsl/sierr):00803         *         pshs  b            Save block # in process map
                      (../objs_lsl/sierr):00804         *         ldu   #$FFA8       Point to start of user DAT image
                      (../objs_lsl/sierr):00805         *         lda   b,u
03B9 C608             (../objs_lsl/sierr):00806                  ldb   #8
03BB 3D               (../objs_lsl/sierr):00807                  mul                slow but much less code
03BC 3402             (../objs_lsl/sierr):00808                  pshs  a      
03BE 338D01A7         (../objs_lsl/sierr):00809                  leau  mmubuf+8,pcr
03C2 A6C6             (../objs_lsl/sierr):00810                  lda   a,u          get MMU value
03C4 E6E4             (../objs_lsl/sierr):00811                  ldb   ,s           recover block value
03C6 5C               (../objs_lsl/sierr):00812                  incb               block +1
                      (../objs_lsl/sierr):00813         * This next seems inadequate protection. 
03C7 C407             (../objs_lsl/sierr):00814                  andb  #$07         must fall within Task1
03C9 E6C5             (../objs_lsl/sierr):00815                  ldb   b,u          get current value
03CB 1F03             (../objs_lsl/sierr):00816                  tfr   d,u          save two adjacent MMU values
03CD 3502             (../objs_lsl/sierr):00817                  puls  a
03CF 39               (../objs_lsl/sierr):00818                  rts   
                      (../objs_lsl/sierr):00819         
                      (../objs_lsl/sierr):00820         
                      (../objs_lsl/sierr):00821         
                      (../objs_lsl/sierr):00822         *************************************************************
                      (../objs_lsl/sierr):00823         *  Called from  within sub at L0229
                      (../objs_lsl/sierr):00824         *  entry:
                      (../objs_lsl/sierr):00825         *       x -> is loaded with the address of the name string to load
                      (../objs_lsl/sierr):00826         *       u -> contains some arbitrary value
                      (../objs_lsl/sierr):00827         *
                      (../objs_lsl/sierr):00828         
03D0 3278             (../objs_lsl/sierr):00829         L03D0    leas  -$08,s       Make a little scratch on the stack
03D2 EFE4             (../objs_lsl/sierr):00830                  stu   ,s           pointer to our buffer
                      (../objs_lsl/sierr):00831         
                      (../objs_lsl/sierr):00832         * Loads one or more modules from a file but does not map the module
                      (../objs_lsl/sierr):00833         * into user's address space F$NMLoad
                      (../objs_lsl/sierr):00834         * entry:
                      (../objs_lsl/sierr):00835         *      a -> type/language byte
                      (../objs_lsl/sierr):00836         *      x -> address of the path list
                      (../objs_lsl/sierr):00837         *           with out path list default path is current execution dir
                      (../objs_lsl/sierr):00838         *
                      (../objs_lsl/sierr):00839         * exit:
                      (../objs_lsl/sierr):00840         *      a -> type/language
                      (../objs_lsl/sierr):00841         *      b -> module revision
                      (../objs_lsl/sierr):00842         *      x -> address of the last byte in the pathlist + 1
                      (../objs_lsl/sierr):00843         *      y -> storage requirements of the module
                      (../objs_lsl/sierr):00844         *
                      (../objs_lsl/sierr):00845         * error:
                      (../objs_lsl/sierr):00846         *      b  -> error code if any
                      (../objs_lsl/sierr):00847         *      cc -> carry set on error
                      (../objs_lsl/sierr):00848         
03D4 AF62             (../objs_lsl/sierr):00849                  stx   $02,s        pointer module name
03D6 8611             (../objs_lsl/sierr):00850                  lda   #Prgrm+Objct $11      module type
03D8 103F22           (../objs_lsl/sierr):00851                  os9   F$NMLoad     Load it but don't map it in
03DB 252E             (../objs_lsl/sierr):00852                  bcs   L0408        exit on error
                      (../objs_lsl/sierr):00853         
                      (../objs_lsl/sierr):00854         * Links to a memory module that has the specified name, language and type
                      (../objs_lsl/sierr):00855         * entry:
                      (../objs_lsl/sierr):00856         *      a -> type/language byte
                      (../objs_lsl/sierr):00857         *      x -> address of the module name
                      (../objs_lsl/sierr):00858         *
                      (../objs_lsl/sierr):00859         * exit:
                      (../objs_lsl/sierr):00860         *      a -> type/language
                      (../objs_lsl/sierr):00861         *      b -> attributes/module revision
                      (../objs_lsl/sierr):00862         *      x -> address of the last byte in the modulename + 1
                      (../objs_lsl/sierr):00863         *      y -> module entry point absolute address
                      (../objs_lsl/sierr):00864         *      u -> module header abosolute address
                      (../objs_lsl/sierr):00865         *
                      (../objs_lsl/sierr):00866         * error:
                      (../objs_lsl/sierr):00867         *     cc -> set on error
                      (../objs_lsl/sierr):00868         
03DD AE62             (../objs_lsl/sierr):00869                  ldx   $02,s        get our name string again
03DF 103F00           (../objs_lsl/sierr):00870                  os9   F$Link       link it
03E2 2527             (../objs_lsl/sierr):00871                  bcs   L0408        exit on error
03E4 EF66             (../objs_lsl/sierr):00872                  stu   $06,s        store module header address
03E6 1F31             (../objs_lsl/sierr):00873                  tfr   u,x
03E8 1703A5           (../objs_lsl/sierr):00874                  lbsr  mmuini2      get current MMU values
03EB AF64             (../objs_lsl/sierr):00875         L03E8    stx   $04,s
03ED 17FFC7           (../objs_lsl/sierr):00876                  lbsr  L03B6        Go twiddle with address`
03F0 AEE4             (../objs_lsl/sierr):00877                  ldx   ,s
03F2 3086             (../objs_lsl/sierr):00878                  leax  a,x
03F4 1E03             (../objs_lsl/sierr):00879                  exg   d,u
03F6 A784             (../objs_lsl/sierr):00880                  sta   ,x
03F8 1E03             (../objs_lsl/sierr):00881                  exg   d,u
03FA 8106             (../objs_lsl/sierr):00882                  cmpa  #$06
03FC 2708             (../objs_lsl/sierr):00883                  beq   L0403
03FE AE64             (../objs_lsl/sierr):00884                  ldx   $04,s
0400 30892000         (../objs_lsl/sierr):00885                  leax  >$2000,x
0404 20E5             (../objs_lsl/sierr):00886                  bra   L03E8
                      (../objs_lsl/sierr):00887         
0406 EE66             (../objs_lsl/sierr):00888         L0403    ldu   $06,s
0408 103F02           (../objs_lsl/sierr):00889                  os9   F$UnLink 
040B 3268             (../objs_lsl/sierr):00890         L0408    leas  $08,s
040D 39               (../objs_lsl/sierr):00891                  rts   
                      (../objs_lsl/sierr):00892         
040E 103F1D           (../objs_lsl/sierr):00893         L040B    os9   F$UnLoad  Unlink a module by name
0411 24FB             (../objs_lsl/sierr):00894                  bcc   L040B
0413 5F               (../objs_lsl/sierr):00895                  clrb  
0414 39               (../objs_lsl/sierr):00896                  rts   
                      (../objs_lsl/sierr):00897         
0415 2F5649           (../objs_lsl/sierr):00898         L0412    fcc   '/VI'
0418 0D               (../objs_lsl/sierr):00899         L0415    fcb   C$CR
0419 0000             (../objs_lsl/sierr):00900         L0416    fdb   $0000  address of the device table entry
041B 00               (../objs_lsl/sierr):00901         L0418    fcb   $00    path number to device
                      (../objs_lsl/sierr):00902         
                      (../objs_lsl/sierr):00903         **************************************************************
                      (../objs_lsl/sierr):00904         *
                      (../objs_lsl/sierr):00905         *   subroutine entry is L0419 
                      (../objs_lsl/sierr):00906         *   sets up Sig Intercept 
                      (../objs_lsl/sierr):00907         *   verifies /VI device is loaded links to it 
                      (../objs_lsl/sierr):00908         *   and allocates ram for it
                      (../objs_lsl/sierr):00909         *   called from dispatch table around L0120
                      (../objs_lsl/sierr):00910         
                      (../objs_lsl/sierr):00911         
                      (../objs_lsl/sierr):00912         * Set signal intercept trap
                      (../objs_lsl/sierr):00913         *  entry: 
                      (../objs_lsl/sierr):00914         *        x -> address of intercept routine
                      (../objs_lsl/sierr):00915         *        u -> starting adress of routines memory area
                      (../objs_lsl/sierr):00916         *  exit:
                      (../objs_lsl/sierr):00917         *       Signals sent to the process cause the intercept to be
                      (../objs_lsl/sierr):00918         *       called instead of the process being killed
                      (../objs_lsl/sierr):00919         
041C CE0000           (../objs_lsl/sierr):00920         L0419    ldu   #$0000     start of Sierra memory area
041F 8E0696           (../objs_lsl/sierr):00921                  ldx   #int5EE    Intercept rourtine copied to mem area
0422 103F09           (../objs_lsl/sierr):00922                  os9   F$Icpt     install the trap
                      (../objs_lsl/sierr):00923         
                      (../objs_lsl/sierr):00924         * Attach to the vrt memory descriptor
                      (../objs_lsl/sierr):00925         * Attaches and verifies loaded the VI descriptor
                      (../objs_lsl/sierr):00926         * entry:
                      (../objs_lsl/sierr):00927         *      a -> access mode
                      (../objs_lsl/sierr):00928         *          0 = use any special device capabilities
                      (../objs_lsl/sierr):00929         *          1 = read only
                      (../objs_lsl/sierr):00930         *          2 = write only
                      (../objs_lsl/sierr):00931         *          3 = update (read and write)
                      (../objs_lsl/sierr):00932         *      x -> address of device name string
                      (../objs_lsl/sierr):00933         *
                      (../objs_lsl/sierr):00934         * exit:
                      (../objs_lsl/sierr):00935         *      x -> updated past device name
                      (../objs_lsl/sierr):00936         *      u -> address of device table entry
                      (../objs_lsl/sierr):00937         *
                      (../objs_lsl/sierr):00938         * error:
                      (../objs_lsl/sierr):00939         *      b  -> error code (if any)
                      (../objs_lsl/sierr):00940         *      cc -> carry set on error
                      (../objs_lsl/sierr):00941         
0425 8601             (../objs_lsl/sierr):00942                  lda   #$01          attach for read
0427 308DFFEB         (../objs_lsl/sierr):00943                  leax  >L0412+1,pcr  skip the slash Load VI only
042B 103F80           (../objs_lsl/sierr):00944                  os9   I$Attach      make the call
042E 2524             (../objs_lsl/sierr):00945                  bcs   L0451         didn't work exit
0430 EF8DFFE5         (../objs_lsl/sierr):00946                  stu   >L0416,pcr    did work save address 
                      (../objs_lsl/sierr):00947         
                      (../objs_lsl/sierr):00948         * Open a path to the device /VI
                      (../objs_lsl/sierr):00949         * entry:
                      (../objs_lsl/sierr):00950         *       a -> access mode (D S PE PW PR E W R)
                      (../objs_lsl/sierr):00951         *       x -> address of the path list
                      (../objs_lsl/sierr):00952         *
                      (../objs_lsl/sierr):00953         * exit:
                      (../objs_lsl/sierr):00954         *       a -> path number
                      (../objs_lsl/sierr):00955         *       x -> address of the last byte if the pathlist + 1
                      (../objs_lsl/sierr):00956         *
                      (../objs_lsl/sierr):00957         * error:
                      (../objs_lsl/sierr):00958         *       b  -> error code(if any)
                      (../objs_lsl/sierr):00959         *       cc -> carry set on error
                      (../objs_lsl/sierr):00960         *
                      (../objs_lsl/sierr):00961         *                            a still contains $01 read
0434 308DFFDD         (../objs_lsl/sierr):00962                  leax  >L0412,pcr    load with device name including /
0438 103F84           (../objs_lsl/sierr):00963                  os9   I$Open        make the call
043B 2517             (../objs_lsl/sierr):00964                  bcs   L0451         didn't work exit
043D A78DFFDA         (../objs_lsl/sierr):00965                  sta   >L0418,pcr    did work save path #
                      (../objs_lsl/sierr):00966         
                      (../objs_lsl/sierr):00967         * Allocate process+path RAM blocks
                      (../objs_lsl/sierr):00968         
0441 C6CA             (../objs_lsl/sierr):00969                  ldb   #SS.ARAM      $CA function code for VIRQ
0443 8E000D           (../objs_lsl/sierr):00970                  ldx   #$000D
0446 103F8E           (../objs_lsl/sierr):00971                  os9   I$SetStt      make the call
0449 2509             (../objs_lsl/sierr):00972                  bcs   L0451
044B 3410             (../objs_lsl/sierr):00973                  pshs  x
                      (../objs_lsl/sierr):00974         
                      (../objs_lsl/sierr):00975         * Set process+path VIRQ KQ3
044D C6C8             (../objs_lsl/sierr):00976                  ldb   #SS.KSet     $C8 function code for VIRQ
044F 103F8E           (../objs_lsl/sierr):00977                  os9   I$SetStt 
0452 3506             (../objs_lsl/sierr):00978                  puls  b,a
0454 39               (../objs_lsl/sierr):00979         L0451    rts   
                      (../objs_lsl/sierr):00980         
                      (../objs_lsl/sierr):00981         * Signal Intercept processing gets copied to int5EE mem slot
0455 C180             (../objs_lsl/sierr):00982         L0452    cmpb  #$80     b gets the signal code if not $80 ignore
0457 260E             (../objs_lsl/sierr):00983                  bne   L0464    $80 is user defined
0459 1F30             (../objs_lsl/sierr):00984                  tfr   u,d
045B 1F8B             (../objs_lsl/sierr):00985                  tfr   a,dp
045D 0A4A             (../objs_lsl/sierr):00986                  dec   <u004A
045F 2606             (../objs_lsl/sierr):00987                  bne   L0464
0461 8D05             (../objs_lsl/sierr):00988                  bsr   L0465
0463 8603             (../objs_lsl/sierr):00989                  lda   #$03
0465 974A             (../objs_lsl/sierr):00990                  sta   <u004A
0467 3B               (../objs_lsl/sierr):00991         L0464    rti   
                      (../objs_lsl/sierr):00992         
0468 6CC9024B         (../objs_lsl/sierr):00993         L0465    inc   >u024C,u
046C 2610             (../objs_lsl/sierr):00994                  bne   L047B
046E 6CC9024A         (../objs_lsl/sierr):00995                  inc   >u024B,u
0472 260A             (../objs_lsl/sierr):00996                  bne   L047B
0474 6CC90249         (../objs_lsl/sierr):00997                  inc   >u024A,u
0478 2604             (../objs_lsl/sierr):00998                  bne   L047B
047A 6CC90248         (../objs_lsl/sierr):00999                  inc   >u0249,u
047E 6DC90102         (../objs_lsl/sierr):01000         L047B    tst   >u0102,u
0482 263B             (../objs_lsl/sierr):01001                  bne   L04BC
                      (../objs_lsl/sierr):01002         
0484 0C3F             (../objs_lsl/sierr):01003                  inc   <u003F
0486 2602             (../objs_lsl/sierr):01004                  bne   L0487
0488 0C3E             (../objs_lsl/sierr):01005                  inc   <u003E
048A DC48             (../objs_lsl/sierr):01006         L0487    ldd   <u0048
048C C30001           (../objs_lsl/sierr):01007                  addd  #$0001
048F DD48             (../objs_lsl/sierr):01008                  std   <u0048
0491 10830014         (../objs_lsl/sierr):01009                  cmpd  #$0014
0495 2528             (../objs_lsl/sierr):01010                  bcs   L04BC
0497 830014           (../objs_lsl/sierr):01011                  subd  #$0014
049A DD48             (../objs_lsl/sierr):01012                  std   <u0048
049C CC003C           (../objs_lsl/sierr):01013                  ldd   #$003C
049F 30C9043C         (../objs_lsl/sierr):01014                  leax  >u043D,u
04A3 6C84             (../objs_lsl/sierr):01015                  inc   ,x
04A5 E184             (../objs_lsl/sierr):01016                  cmpb  ,x
04A7 2216             (../objs_lsl/sierr):01017                  bhi   L04BC
04A9 A780             (../objs_lsl/sierr):01018                  sta   ,x+
04AB 6C84             (../objs_lsl/sierr):01019                  inc   ,x
04AD E184             (../objs_lsl/sierr):01020                  cmpb  ,x
04AF 220E             (../objs_lsl/sierr):01021                  bhi   L04BC
04B1 A780             (../objs_lsl/sierr):01022                  sta   ,x+
04B3 6C84             (../objs_lsl/sierr):01023                  inc   ,x
04B5 C618             (../objs_lsl/sierr):01024                  ldb   #$18
04B7 E184             (../objs_lsl/sierr):01025                  cmpb  ,x
04B9 2204             (../objs_lsl/sierr):01026                  bhi   L04BC
04BB A780             (../objs_lsl/sierr):01027                  sta   ,x+
04BD 6C84             (../objs_lsl/sierr):01028                  inc   ,x
04BF 39               (../objs_lsl/sierr):01029         L04BC    rts   
                      (../objs_lsl/sierr):01030         
                      (../objs_lsl/sierr):01031         * deallocates the VIRQ device
04C0 A68DFF57         (../objs_lsl/sierr):01032         L04BD    lda   >L0418,pcr  load path number to /VI device
04C4 270D             (../objs_lsl/sierr):01033                  beq   L04D0       no path open check for device table addr
04C6 C6C9             (../objs_lsl/sierr):01034                  ldb   #SS.KClr    $C9 Clear KQ3 VIRQ       
04C8 103F8E           (../objs_lsl/sierr):01035                  os9   I$SetStt    make the call
04CB C6CB             (../objs_lsl/sierr):01036                  ldb   #SS.DRAM    $CB deallocate the ram    
04CD 103F8E           (../objs_lsl/sierr):01037                  os9   I$SetStt    make the call
04D0 103F8F           (../objs_lsl/sierr):01038                  os9   I$Close     close the path to /VI
04D3 EE8DFF42         (../objs_lsl/sierr):01039         L04D0    ldu   >L0416,pcr  load device table address for VI
04D7 2703             (../objs_lsl/sierr):01040                  beq   L04D9       don't have one leave now
04D9 103F81           (../objs_lsl/sierr):01041                  os9   I$Detach    else detach it
04DC 39               (../objs_lsl/sierr):01042         L04D9    rts   
                      (../objs_lsl/sierr):01043         
                      (../objs_lsl/sierr):01044         *  Twiddles with MMU blocks for us
                      (../objs_lsl/sierr):01045         *  This sub gets copied into $0659 and executed there from this and
                      (../objs_lsl/sierr):01046         *  the other modules this one loads (sub659)
                      (../objs_lsl/sierr):01047         *
                      (../objs_lsl/sierr):01048         *  s and x loaded by calling routine
                      (../objs_lsl/sierr):01049         
04DD ECE1             (../objs_lsl/sierr):01050         L04DA    ldd   ,s++       load d with current stack pointer and bump it
                      (../objs_lsl/sierr):01051         *                         from mnln we come in with $4040
04DF DD2A             (../objs_lsl/sierr):01052                  std   <u002A     save the calling stack pointer in u002A
04E1 1A50             (../objs_lsl/sierr):01053                  orcc  #IntMasks  mask the interrupts
04E3 9642             (../objs_lsl/sierr):01054                  lda   <u0042
04E5 A784             (../objs_lsl/sierr):01055                  sta   ,x         x is loaded with value from u0028 in mnln
04E7 B7FFA9           (../objs_lsl/sierr):01056                  sta   >$FFA9  task 1 block 2 x2000 - x3FFF
04EA DE43             (../objs_lsl/sierr):01057                  ldu   <u0043
04EC A606             (../objs_lsl/sierr):01058                  lda   $06,x
04EE A74C             (../objs_lsl/sierr):01059                  sta   u000C,u
04F0 B7FFAF           (../objs_lsl/sierr):01060                  sta   >$FFAF  task 1 block 8 xE000 - xFFFF
04F3 A605             (../objs_lsl/sierr):01061                  lda   $05,x
04F5 A74A             (../objs_lsl/sierr):01062                  sta   u000A,u
04F7 B7FFAE           (../objs_lsl/sierr):01063                  sta   >$FFAE  task 1 block 7 xC000 - xDFFF
04FA A604             (../objs_lsl/sierr):01064                  lda   $04,x
04FC A748             (../objs_lsl/sierr):01065                  sta   u0008,u
04FE B7FFAD           (../objs_lsl/sierr):01066                  sta   >$FFAD  task 1 block 6 xA000 - xBFFF
0501 A603             (../objs_lsl/sierr):01067                  lda   $03,x
0503 A746             (../objs_lsl/sierr):01068                  sta   u0006,u
0505 B7FFAC           (../objs_lsl/sierr):01069                  sta   >$FFAC  task 1 block 5 x8000 - x9FFF
0508 A602             (../objs_lsl/sierr):01070                  lda   $02,x
050A A744             (../objs_lsl/sierr):01071                  sta   u0004,u
050C B7FFAB           (../objs_lsl/sierr):01072                  sta   >$FFAB  task 1 block 4 x6000 - x7FFF
050F 1CAF             (../objs_lsl/sierr):01073                  andcc #^IntMasks   unmask interrupts  
                      (../objs_lsl/sierr):01074         
0511 A607             (../objs_lsl/sierr):01075                  lda   $07,x
0513 DE2E             (../objs_lsl/sierr):01076                  ldu   <u002E
0515 AB4A             (../objs_lsl/sierr):01077                  adda  u000A,u
0517 ADC6             (../objs_lsl/sierr):01078                  jsr   a,u
                      (../objs_lsl/sierr):01079         
0519 1A50             (../objs_lsl/sierr):01080                  orcc  #IntMasks
051B 9642             (../objs_lsl/sierr):01081                  lda   <u0042
051D B7FFA9           (../objs_lsl/sierr):01082                  sta   >$FFA9
0520 DE43             (../objs_lsl/sierr):01083                  ldu   <u0043
0522 9610             (../objs_lsl/sierr):01084                  lda   <u0010
0524 A74C             (../objs_lsl/sierr):01085                  sta   u000C,u
0526 B7FFAF           (../objs_lsl/sierr):01086                  sta   >$FFAF
0529 960F             (../objs_lsl/sierr):01087                  lda   <u000F
052B A74A             (../objs_lsl/sierr):01088                  sta   u000A,u
052D B7FFAE           (../objs_lsl/sierr):01089                  sta   >$FFAE
0530 960E             (../objs_lsl/sierr):01090                  lda   <u000E
0532 A748             (../objs_lsl/sierr):01091                  sta   u0008,u
0534 B7FFAD           (../objs_lsl/sierr):01092                  sta   >$FFAD
0537 960D             (../objs_lsl/sierr):01093                  lda   <u000D
0539 A746             (../objs_lsl/sierr):01094                  sta   u0006,u
053B B7FFAC           (../objs_lsl/sierr):01095                  sta   >$FFAC
053E 960B             (../objs_lsl/sierr):01096                  lda   <u000B
0540 A742             (../objs_lsl/sierr):01097                  sta   u0002,u
0542 B7FFAA           (../objs_lsl/sierr):01098                  sta   >$FFAA
0545 960A             (../objs_lsl/sierr):01099                  lda   <u000A
0547 A7C4             (../objs_lsl/sierr):01100                  sta   ,u
0549 B7FFA9           (../objs_lsl/sierr):01101                  sta   >$FFA9
054C 1CAF             (../objs_lsl/sierr):01102                  andcc #^IntMasks
                      (../objs_lsl/sierr):01103         
054E 6E9F002A         (../objs_lsl/sierr):01104                  jmp   [>$002A]
                      (../objs_lsl/sierr):01105         
0552 0000000000000000 (../objs_lsl/sierr):01106         L054F    fcb   $00,$00,$00,$00,$00,$00,$00,$00   ........
055A 73696572726100   (../objs_lsl/sierr):01107         L0557    fcb   $73,$69,$65,$72,$72,$61,$00       sierra.
                      (../objs_lsl/sierr):01108         
                      (../objs_lsl/sierr):01109         * New routines so we don't have raw reads of the MMU bytes. RG
0561 0000000000000000 (../objs_lsl/sierr):01110         mmubuf   fcb   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     0000000000000000
0571 0000000000000000 (../objs_lsl/sierr):01111         gprbuf   fzb   512
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
                      (../objs_lsl/sierr):01112         * Get $FFA0-$FFA7
0771 3431             (../objs_lsl/sierr):01113         mmuini1  pshs  cc,x,y
0773 1A50             (../objs_lsl/sierr):01114                  orcc  #$50
0775 8601             (../objs_lsl/sierr):01115                  lda   #1               system ID#
0777 308DFDF6         (../objs_lsl/sierr):01116                  leax  gprbuf,pcr
077B 103F18           (../objs_lsl/sierr):01117                  os9   F$GPrDsc         get system process descriptor
077E 318841           (../objs_lsl/sierr):01118                  leay  $41,x            point to its mmu block values
0781 308DFDDC         (../objs_lsl/sierr):01119                  leax  mmubuf,pcr
0785 C608             (../objs_lsl/sierr):01120                  ldb   #8
0787 A6A1             (../objs_lsl/sierr):01121         m2lup    lda   ,y++             get MMU value and skip over usage
0789 A780             (../objs_lsl/sierr):01122                  sta   ,x+
078B 5A               (../objs_lsl/sierr):01123                  decb
078C 26F9             (../objs_lsl/sierr):01124                  bne   m2lup
078E 35B1             (../objs_lsl/sierr):01125                  puls  cc,x,y,pc
                      (../objs_lsl/sierr):01126         * Get $FFA8-$FFAF
0790 3431             (../objs_lsl/sierr):01127         mmuini2  pshs  cc,x,y
0792 1A50             (../objs_lsl/sierr):01128                  orcc  #$50
0794 103F0C           (../objs_lsl/sierr):01129                  os9   F$ID             get our ID#
0797 308DFDD6         (../objs_lsl/sierr):01130                  leax  gprbuf,pcr
079B 103F18           (../objs_lsl/sierr):01131                  os9   F$GPrDsc         get our process descriptor
079E 318841           (../objs_lsl/sierr):01132                  leay  $41,x            point to our mmu block values
07A1 308DFDC4         (../objs_lsl/sierr):01133                  leax  mmubuf+8,pcr
07A5 C608             (../objs_lsl/sierr):01134                  ldb   #8
07A7 A6A1             (../objs_lsl/sierr):01135         mloop    lda   ,y++
07A9 A780             (../objs_lsl/sierr):01136                  sta   ,x+
07AB 5A               (../objs_lsl/sierr):01137                  decb
07AC 26F9             (../objs_lsl/sierr):01138                  bne   mloop
07AE 35B1             (../objs_lsl/sierr):01139                  puls  cc,x,y,pc
                      (../objs_lsl/sierr):01140         
07B0 AC6B29           (../objs_lsl/sierr):01141                  emod
     07B3             (../objs_lsl/sierr):01142         eom      equ   *
                      (../objs_lsl/sierr):01143                  end
