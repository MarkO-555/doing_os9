                      (/home/strick/go/s):00001         ********************************************************************
                      (/home/strick/go/s):00002         * GrfDrv - NitrOS-9 Windowing Driver
                      (/home/strick/go/s):00003         *
                      (/home/strick/go/s):00004         * $Id$
                      (/home/strick/go/s):00005         *
                      (/home/strick/go/s):00006         * Copyright (c) 1982 Microware Corporation
                      (/home/strick/go/s):00007         * Modified for 6309 Native mode by Bill Nobel - Gale Force Enterprises
                      (/home/strick/go/s):00008         * Also contains Kevin Darlings FstGrf patches & 1 meg routines
                      (/home/strick/go/s):00009         *
                      (/home/strick/go/s):00010         * Ed.    Comments                                       Who YY/MM/DD
                      (/home/strick/go/s):00011         * ------------------------------------------------------------------
                      (/home/strick/go/s):00012         ** 08/11/92 - Active in Native mode No apparent bugs
                      (/home/strick/go/s):00013         ** Additional bugfixes/optomizations by Bill Nobel & L. Curtis Boyle
                      (/home/strick/go/s):00014         **   09/01/92 - present
                      (/home/strick/go/s):00015         ** NitrOS9 V1.10
                      (/home/strick/go/s):00016         **   05/26/93 - 3 cycle speedup in hardware text alpha put @ L0F6B
                      (/home/strick/go/s):00017         ** NitrOS9 V1.11
                      (/home/strick/go/s):00018         **   07/14/93 - Eliminated useless LDB 8,Y @ L01B5
                      (/home/strick/go/s):00019         **   07/14/93 - Eliminated BMI's from L01D2; replace BGT's with BHI's
                      (/home/strick/go/s):00020         **   07/15/93 - Save 1 cycle/byte in Composite conversion in Select routine
                      (/home/strick/go/s):00021         **            - Changed some pixel calcs in L06xx to use LSLD instead of
                      (/home/strick/go/s):00022         **              MUL's by 8 (longer, but ends up being 12 cycles faster)
                      (/home/strick/go/s):00023         **            - Moved L017C routine to be near Gfx cursor updates (1 cycle
                      (/home/strick/go/s):00024         **              faster their and for Points with Pset buffers as well)
                      (/home/strick/go/s):00025         **            - Moved SysRet routine near Alpha Put area to speed text output
                      (/home/strick/go/s):00026         **              by 4 cycles (whether error or not)
                      (/home/strick/go/s):00027         **            - Modified routine @ L0F04 to save up to 2 cycles per line
                      (/home/strick/go/s):00028         **              of PutBlk
                      (/home/strick/go/s):00029         **            - Modified L0E2F & L0F20 routines to speed up checks for
                      (/home/strick/go/s):00030         **              stopping non-TFM PutBlk's
                      (/home/strick/go/s):00031         **            - Changed LEAX B,X to ABX in FFill @ L1C5F
                      (/home/strick/go/s):00032         **              Also change LEAS -2,s / PSHS D to PSHS X,D @ L1DCB (FFill)
                      (/home/strick/go/s):00033         **   07/16/93 - Changed L012B routine to LDX first, then PSHS, eliminating
                      (/home/strick/go/s):00034         **              the need for the STX 2,S (saves 2 bytes/6 cycles)
                      (/home/strick/go/s):00035         **            - Got rid of LEAY/PSHS Y/PULS Y in L012B since 8 bit addressing
                      (/home/strick/go/s):00036         **              is same speed as 5
                      (/home/strick/go/s):00037         **   07/20/93 - Modified Alpha Put to have a shortcut if writing to the
                      (/home/strick/go/s):00038         **              same window as GRFDRV wrote to the last time it was run
                      (/home/strick/go/s):00039         **            - Moved L1F08 & L1F18 routines closer to LINE to allow BSR's
                      (/home/strick/go/s):00040         **            - Removed redundant BRA L0FF8 in 2 color gfx text put routine
                      (/home/strick/go/s):00041         **            - Replaced 2 BRA L102D's with PULS A,PC (same size but saves
                      (/home/strick/go/s):00042         **              3 cycles)
                      (/home/strick/go/s):00043         **            - Replaced BRA L0A38 in L0A1C routine with PULS PC,Y,A
                      (/home/strick/go/s):00044         **            - Replaced BRA L0AA6 in L0A75 routine with PULS PC,Y,X,B
                      (/home/strick/go/s):00045         **            - Replaced BRA L0BE1 in L0BA2 routine with CLRB / LBRA SysRet
                      (/home/strick/go/s):00046         **            - Replaced BRA L1ADD's in L1A9D routines with PULS PC,X,D's
                      (/home/strick/go/s):00047         **              (In Ellipse/Circle/Arc routines)
                      (/home/strick/go/s):00048         **   07/28/93 - Modified L11CA routine to eliminate 1 LBRA (saves 4 cycles)
                      (/home/strick/go/s):00049         **            - Modified pixel XOR routine to save 3 cycles (used by Gfx
                      (/home/strick/go/s):00050         **              Cursor)
                      (/home/strick/go/s):00051         **            - Changed CMPW to CMPF when checking gfx coords @ L1E86
                      (/home/strick/go/s):00052         **   08/06/93 - Changed BSR Lxxxx / RTS to BRA Lxxxx in following locations:
                      (/home/strick/go/s):00053         **              L13AD (2), Just before L0516, L0798, Just before L1A97, L1D3C
                      (/home/strick/go/s):00054         ** NitrOS9 V1.16
                      (/home/strick/go/s):00055         **   08/30/93 - Took out DECD/DECB @ L0D27 (GPBuf wrap checks), changed BHI's
                      (/home/strick/go/s):00056         **              to BHS's
                      (/home/strick/go/s):00057         **   08/30/93 - L0E14 replaced LDA / ANDA with TIM
                      (/home/strick/go/s):00058         **   08/31/93 - L0B79 changed registers around for split or normal Move buffer
                      (/home/strick/go/s):00059         **              to shrink & speed up copy slightly
                      (/home/strick/go/s):00060         **   09/01/93 - L0C96 - change BLE in overwrap GP Buffer to BLO ($4000 is in
                      (/home/strick/go/s):00061         **              next block)
                      (/home/strick/go/s):00062         **   09/22/93 - Moved L1BE8 to eliminate BSR (only called once)
                      (/home/strick/go/s):00063         **            - Moved L1BDD to L18B7 (only called once)
                      (/home/strick/go/s):00064         **            - Optomized 1BC9 by 7 cycles (multiply 5 byte integer x2)
                      (/home/strick/go/s):00065         **   09/23/93 - Remarked out L1B4B (never called-for filled circle/ellipse?)
                      (/home/strick/go/s):00066         **            - Moved L1B5D to L1BB4 (only called once)
                      (/home/strick/go/s):00067         **   09/27/93 - Moved L1BF3 to L1BCB (only called once)
                      (/home/strick/go/s):00068         **   09/28/93 - Sped up/shrunk RGB color copy in Select routine with LDQ
                      (/home/strick/go/s):00069         **            - Sped up of 2 color text by 18 cycles/character (changed
                      (/home/strick/go/s):00070         **              branch compare order @ L1051
                      (/home/strick/go/s):00071         **            - Sped up of normal gfx text @ L10ED, and shortened code @
                      (/home/strick/go/s):00072         **              L10FE/L1109 by moving PULS B, and optomized L1109 branch
                      (/home/strick/go/s):00073         **              compare order (same as L1051)
                      (/home/strick/go/s):00074         **            - Changed <$A9,u vector to use ,W instead (<>2 color txt on gfx
                      (/home/strick/go/s):00075         **              (NOTE: Type 7 window (640x200x4) tests are over 8% faster)
                      (/home/strick/go/s):00076         **   10/04/93 - Shortened L0FD6 (changed BNE/BRA to a BEQ/fall through) so
                      (/home/strick/go/s):00077         **              Proportional & 2 color fonts are faster
                      (/home/strick/go/s):00078         **            - Moved L122F to before L121A (eliminate BRA for wrap to next
                      (/home/strick/go/s):00079         **              line)
                      (/home/strick/go/s):00080         **            - Did optomization @ L127E for non-full screen width screen
                      (/home/strick/go/s):00081         **              scrolls (also called by Insert line & Delete line)
                      (/home/strick/go/s):00082         **            - Took out redundant LDB <$60 @ L13E3 (clear to end of screen)
                      (/home/strick/go/s):00083         **            - Attempted opt of L10A4 to eliminate EXG X,Y
                      (/home/strick/go/s):00084         **            - Re-arranged L10FA (Gfx text, not 2 color/normal) so it is
                      (/home/strick/go/s):00085         **              optomized for actual text, not the cursor
                      (/home/strick/go/s):00086         **   10/08/93 - Changed L1E2C to use LEAX B,U (since B always <$80) since
                      (/home/strick/go/s):00087         **              same speed but shorter
                      (/home/strick/go/s):00088         **            - Changed BHI L1DEB @ L1DCB to LBHI L1C93 (1 byte longer but
                      (/home/strick/go/s):00089         **              2 cycles shorter)
                      (/home/strick/go/s):00090         **            - Changed L017C (map GP Buffer blocks, both in GRFDRV DAT &
                      (/home/strick/go/s):00091         **              immediate) to use DP instead of <xxxx,u vars.
                      (/home/strick/go/s):00092         **            - Changed L0E70 to not bother changing U because of L017C change
                      (/home/strick/go/s):00093         **            - Modified Gfx screen map-in routine @ MMUOnly to use
                      (/home/strick/go/s):00094         **              DP addressing instead of ,X (eliminates LEAX too), saving
                      (/home/strick/go/s):00095         **              mem & 11 cycles per map
                      (/home/strick/go/s):00096         **            - Also removed PSHSing X in above routine & calls to it since
                      (/home/strick/go/s):00097         **              not needed anymore
                      (/home/strick/go/s):00098         **            - Changed L01FB to use LDX #$1290 instead of LEAX >$190,u
                      (/home/strick/go/s):00099         **            - Changed all [...],u to use DP or immediate mode whenever
                      (/home/strick/go/s):00100         **              possible
                      (/home/strick/go/s):00101         **            - Changed EXG X,Y @ L03FF to TFR X,Y (since X immediately
                      (/home/strick/go/s):00102         **              destroyed) (part of DWEnd to check if last window on scrn)
                      (/home/strick/go/s):00103         **            - Eliminated useless BRA PutIt2 @ L0C96
                      (/home/strick/go/s):00104         **            - Removed PSHS/PULS of U in L0C8F (L0E70 no longer destroys U)
                      (/home/strick/go/s):00105         **   10/19/93 - Change L1F18 to use LDB #1/ABX instead of LEAX 1,X (2 cycles
                      (/home/strick/go/s):00106         **              faster)
                      (/home/strick/go/s):00107         **            - Removed LDU #$1100 @ L0EB2 since change to L0E70 (GP buffer)
                      (/home/strick/go/s):00108         **   10/20/93 - BUG FIX: Changed CMPF <$1E,Y @ L1E86 to CMPW <$1D,Y (otherwise
                      (/home/strick/go/s):00109         **              routines that use th 16 bit Y coord for calculations screwed
                      (/home/strick/go/s):00110         **              up on values >255) - MAY WANT TO TO CHANGE LATER TO HAVE HARD
                      (/home/strick/go/s):00111         **              CODED 0 BYTE AS MSB OF Y COORDS AND SWITCH ALL CALCS POSSIBLE
                      (/home/strick/go/s):00112         **              TO 8 BIT (OR LEAVE 16 BIT FOR VERTICAL SCROLLABLE SCREEN
                      (/home/strick/go/s):00113         **              OPTIONS)
                      (/home/strick/go/s):00114         **            - Moved L1E86 to L1DF8 (eliminates BRA from most X,Y coord pairs)
                      (/home/strick/go/s):00115         **            - Moved L1F1D/L1F2C/L1F42 (right direction FFill vectors) to
                      (/home/strick/go/s):00116         **              within FFill (only called once, eliminates LBSR/RTS)
                      (/home/strick/go/s):00117         **            - Moved L1CC2 to eliminate BRA (eats coords off of FFill stack?)
                      (/home/strick/go/s):00118         **            - L1D1E subroutine removed, embedded in places where called
                      (/home/strick/go/s):00119         **            - L1DAA: eliminated LDD <$47 & changed CMPD <$4B to CMPW <$4B
                      (/home/strick/go/s):00120         **            - L1DCB: changed to use both D & W to save code space & time
                      (/home/strick/go/s):00121         **   10/21/93 - L1D14 subroutine removed, embedded in 2 places where called
                      (/home/strick/go/s):00122         **            - Changed BHI L1D03 to LBHI L1C93 @ L1D55 & eliminated L1D03
                      (/home/strick/go/s):00123         **              label
                      (/home/strick/go/s):00124         **            - Changed BRA L1C93 at end of L1CF8 to LBRA L1CF8
                      (/home/strick/go/s):00125         **            - Moved L1186 (CurXY) to before L1129 (CTRL codes) to allow
                      (/home/strick/go/s):00126         **              3 LBEQ's to change to BEQ's (Cursor left,right & up) -
                      (/home/strick/go/s):00127         **              shrinks GRFDRV by 6 bytes
                      (/home/strick/go/s):00128         **            - Modified L158B (update cursor) to not PSHS/PULS Y unless on
                      (/home/strick/go/s):00129         **              Gfx screen (speeds text cursor updates by 9 cyc/1 byte)
                      (/home/strick/go/s):00130         **            - Changed LBSR to BSR (L15BF) in PutGC (L1531)
                      (/home/strick/go/s):00131         **            - Attempted to move L06A4-L1FB2 to just before Point (L1635)
                      (/home/strick/go/s):00132         **              & changed leax >L1FA3,pc to LEAX <L1FA3,pc in L15FE (saves
                      (/home/strick/go/s):00133         **              2 cycles & 2 bytes)
                      (/home/strick/go/s):00134         **   10/25/93 - Changed GRFDRV entry point to use LDX instead of LEAX
                      (/home/strick/go/s):00135         **              (2 cycles faster)
                      (/home/strick/go/s):00136         **            - Changed all LEA* xxxx,pc to use LDX #GrfStrt+xxxx (2 cyc fstr)
                      (/home/strick/go/s):00137         **            - Changed GRFDRV entry point to do LDX / JMP ,X (1 byte shorter &
                      (/home/strick/go/s):00138         **              2 cycles faster)
                      (/home/strick/go/s):00139         **   11/02/93 - Modified Init routine to be shorter & faster
                      (/home/strick/go/s):00140         **            - Took old 2 line L18B3 routine, put the label in front of
                      (/home/strick/go/s):00141         **              stx <$A1 just past L18BF
                      (/home/strick/go/s):00142         **   11/03/93 - Removed the last of [<$xx,u] labels, changed FFill to use
                      (/home/strick/go/s):00143         **              JSR ,U instead of JSR [$<64,U]
                      (/home/strick/go/s):00144         **            - Removed LDU 4,s from L0B2E, and remove PSHS/PULS U from
                      (/home/strick/go/s):00145         **              L0ACD, L0B35, L0B38
                      (/home/strick/go/s):00146         **            - In L0B79 (Move Buffer command), optomized to not PSHS/PULS
                      (/home/strick/go/s):00147         **              Y, use U instead for ptr (13 cyc faster/72 byte block, 5 bytes
                      (/home/strick/go/s):00148         **              shorter)
                      (/home/strick/go/s):00149         **            - Added LDU <$64 in L0E97, changed JSR [$>1164] in L0EE1 to
                      (/home/strick/go/s):00150         **              JSR ,U (PutBlk on different screen types)
                      (/home/strick/go/s):00151         **   11/04/93 - Change all LBRA xxxx to JMP GrfStrt+xxxx (1 cycle faster)
                      (/home/strick/go/s):00152         **   11/10/93 - Added window table references from cc3global.defs
                      (/home/strick/go/s):00153         **            - Added screen table references from cc3global.defs
                      (/home/strick/go/s):00154         **            - Added graphics table references from cc3global.defs
                      (/home/strick/go/s):00155         **            - Added graphics buffer references from cc3global.defs
                      (/home/strick/go/s):00156         **   11/12/93 - Removed code that has been moved to CoWin/CoGrf
                      (/home/strick/go/s):00157         **   12/15/93 - Changed TST Wt.BSW,y @ L0F8E to LDB Wt.BSW,y (cycle faster)
                      (/home/strick/go/s):00158         **   12/21/93 - Moved L1E9D to near next line routine to speed up some alpha
                      (/home/strick/go/s):00159         **              writes. Also used U instead of Y in L1E9D (smaller & a cycle
                      (/home/strick/go/s):00160         **              faster)
                      (/home/strick/go/s):00161         **   02/23/94 - Moved L0BE4 error routine earlier to allow short branch to it
                      (/home/strick/go/s):00162         **              from L0B3F (GPLoad), also optomized for no-error (5 cycles
                      (/home/strick/go/s):00163         **              faster, 2 bytes smaller)
                      (/home/strick/go/s):00164         **   02/24/94 - Changed lbcs L0BE7 @ L0B52 to BCS
                      (/home/strick/go/s):00165         **   04/14/94 - Changed CMPB >$FFAC to CMPB <$90 (saves 1 byte/cycle & poss-
                      (/home/strick/go/s):00166         **              ibly fixes bug for >512K machines) in L012B & L0173
                      (/home/strick/go/s):00167         **            - Got rid of CLR >$1003 @ L0177, changed BSR L012B to BSR L0129
                      (/home/strick/go/s):00168         **            - Changed CMPD #$4000 to CMPA #$40 @ L0B79 & L0C96 (also fixed
                      (/home/strick/go/s):00169         **              bug @ L0B79-changed BLS MoveIt to BLO MoveIt)
                      (/home/strick/go/s):00170         **   04/15/94 - Changed L0E14 & L0E24 to use 640/320 base to eliminate INCD,
                      (/home/strick/go/s):00171         **              also optomized by using LSRD instead of 2 separate LDD's
                      (/home/strick/go/s):00172         **            - Moved INCB from L0E2F to L0E03 to allow L0E24 to fall through
                      (/home/strick/go/s):00173         **              faster (by also changing LDB #MaxLine to LDB #MaxLine+1)
                      (/home/strick/go/s):00174         **   04/21/94 - Change all occurences of >$1003 (last window GRFDRV accessed)
                      (/home/strick/go/s):00175         **              to <$A9 (since now free) to speed up/shrink checks.
                      (/home/strick/go/s):00176         **            - Attempted mod for hware text screens: faster if >1 window
                      (/home/strick/go/s):00177         **              being written to at once
                      (/home/strick/go/s):00178         **   04/25/94 - Removed LDX #$FF90 from late in L08A4, changed STD 8,x to
                      (/home/strick/go/s):00179         **              STD >$FF98 (Select routine-saves 4 cycles/2 bytes
                      (/home/strick/go/s):00180         **            - Attempted mod @ L05C0: Changed 1st TST <$60 to LDE <$60, and
                      (/home/strick/go/s):00181         **              2nd to TSTE (also changed 3 LSLD's in Y coord to LSLB's)
                      (/home/strick/go/s):00182         **              (CWArea routine)
                      (/home/strick/go/s):00183         **   04/26/94 - Changed L11E1 (Home cursor) to move CLRD/CLRW/STQ Wt.CurX,y
                      (/home/strick/go/s):00184         **              to end (just before RTS) to allow removal of CLRD/CLRW @
                      (/home/strick/go/s):00185         **              L1377 (CLS)
                      (/home/strick/go/s):00186         **   04/27/94 - Changed GFX text routines (non-2 color) to use U as jump
                      (/home/strick/go/s):00187         **              vector instead of W (has changes @ L0FEC,L10D9,L10FE,L15A5)
                      (/home/strick/go/s):00188         **            - Changed pixel across counter from <$97 to E reg in Gfx text
                      (/home/strick/go/s):00189         **              routine (changes @ L10D1,L10FE)
                      (/home/strick/go/s):00190         **   05/04/94 - Attempted to remove PSHS X/PULS X from L0C0B (used by GetBlk
                      (/home/strick/go/s):00191         **              and Overlay window saves)
                      (/home/strick/go/s):00192         **              Also changed LBSR L0CBD to BSR @ L0BEA (part of OWSet save)
                      (/home/strick/go/s):00193         **   05/05/94 - Changed L0B79: Took out TFR A,B, changed CLRA to CLRE, changed
                      (/home/strick/go/s):00194         **              TFR D,W to TFR W,D (reflects change in CoWin)
                      (/home/strick/go/s):00195         **   05/08/94 - Eliminated LDB #$FF @ L108C, change BNE above it to go to
                      (/home/strick/go/s):00196         **              L108E instead (saves 2 cyc/bytes in proportional fonts)
                      (/home/strick/go/s):00197         **            - Change to L127E to move LDF to just before BRA (saves 3 cyc
                      (/home/strick/go/s):00198         **              on partial width screen scrolls)
                      (/home/strick/go/s):00199         **            - Changed TST <$60 @ L1260 to LDB <$60 (saves 1 cycle)
                      (/home/strick/go/s):00200         **   06/15/94 - Changed TST >$1038 @ L0080 to LDB >$1038 (saves 1 cycle)
                      (/home/strick/go/s):00201         **            - Changed TST St.Sty,x @ L0335 to LDB St.Sty,x (save 1 cyc)
                      (/home/strick/go/s):00202         **            - Eliminated LDA St.Sty,x @ L0343
                      (/home/strick/go/s):00203         **            - Changed TST <$59 to LDB <$59 @ L046A (OWSet)
                      (/home/strick/go/s):00204         **            - Changed TST Wt.FBlk,y @ L0662 to LDB Wt.FBlk,y (Font)
                      (/home/strick/go/s):00205         ** NitrOS9 V1.21 Changes
                      (/home/strick/go/s):00206         **   10/16/94 - Changed L0FBE to BSR L100F instead of L1002, added L100F (PSHS
                      (/home/strick/go/s):00207         **              A), saves 5 cycles per alpha put onto graphics screen
                      (/home/strick/go/s):00208         **   10/22/94 - Eliminated useles LDB <$60 @ L029B
                      (/home/strick/go/s):00209         **            - Eliminated PSHS X/PULS X @ L0366 by changing PSET/LSET vector
                      (/home/strick/go/s):00210         **              settings to use Q since immediate mode instead of indexed now
                      (/home/strick/go/s):00211         **              (saves 6 bytes/>12 cycles in Window Inits)
                      (/home/strick/go/s):00212         **            - Changed L106D: changed LDX/STX to use D, eliminated LDX ,S
                      (/home/strick/go/s):00213         **              (Part of font on multi-colored windows;saves 2 bytes/4 cyc)
                      (/home/strick/go/s):00214         **   10/30/94 - Changed L126B (full width screen scroll) by taking out label,
                      (/home/strick/go/s):00215         **              (as well as L1260), and taking out PSHS/PULS X
                      (/home/strick/go/s):00216         **            - Changed TST <$60 to LDB <$60 @ L12C5, changed BRA L128E @
                      (/home/strick/go/s):00217         **              L12DC to BRA L1354 (Saves 3 cycles when using Delete Line on
                      (/home/strick/go/s):00218         **              bottom line of window)
                      (/home/strick/go/s):00219         **            - Moved CLRE in L142A to just before L142A (saves 2 cycles per
                      (/home/strick/go/s):00220         **              run through loop) (same thing with CLRE @ L1450)
                      (/home/strick/go/s):00221         **            - Deleted L146F, moved label for it to PULS pc,a @ ClsFGfx
                      (/home/strick/go/s):00222         ** ATD:
                      (/home/strick/go/s):00223         **   12/23/95 - have SCF put text-only data at $0180, and have new call
                      (/home/strick/go/s):00224         **              to grfdrv to do a block PUT of the text data.
                      (/home/strick/go/s):00225         **              Added new L0F4B, and labels L0F4B.1 and L0F4B.2
                      (/home/strick/go/s):00226         **              cuts by 40% the time required for alpha screen writes!
                      (/home/strick/go/s):00227         **   12/26/95 - moved Line/Bar/Box common code to i.line routine
                      (/home/strick/go/s):00228         **              +6C:-40B, only called once per entry, so it's OK
                      (/home/strick/go/s):00229         **   12/28/95 - added LBSR L0177 just before font set up routine at L1002
                      (/home/strick/go/s):00230         **              changed lbsr L0177, lbsr L1002 to lbsr L0FFF: gets +0C:-3B
                      (/home/strick/go/s):00231         **              par call from L1478, L116E, L1186, L1129
                      (/home/strick/go/s):00232         **            - replaced 3 lines of code at L1641, i.line, L1C4F with
                      (/home/strick/go/s):00233         **              lbsr L1884: map in window and verify it's graphics
                      (/home/strick/go/s):00234         **              it's only called once per iteration, so we get 3 of +11C:-6B
                      (/home/strick/go/s):00235         **   02/08/96 - added fast fonts on byte boundaries to L102F
                      (/home/strick/go/s):00236         **            - added TFM for horizontal line if LSET=0 and no PSET
                      (/home/strick/go/s):00237         **            - removed most of graphics screen CLS code for non-byte
                      (/home/strick/go/s):00238         **              boundary windows.  They don't exist, the code is unnecessary.
                      (/home/strick/go/s):00239         **            - changed many ADDR D,r  to LEAr D,r where speed was unimportant
                      (/home/strick/go/s):00240         **   02/13/96 - fixed font.2 routine to properly handle changes in foreground
                      (/home/strick/go/s):00241         **              and background colors: ~13 bytes smaller. (other changes???)
                      (/home/strick/go/s):00242         **            - added special code to fast horizontal line routine at L16E0
                      (/home/strick/go/s):00243         **              to do the line byte by byte: saves a few cycles, but 2B larger
                      (/home/strick/go/s):00244         **   02/14/96 - added 'ldu <$64' U=pset vector to i.line, bar/box. -6 bytes,
                      (/home/strick/go/s):00245         **              and timed at -18 clock cycles/byte for XOR to full-screen
                      (/home/strick/go/s):00246         **              or 14/50 = 0.28 second faster per screen (iteration)
                      (/home/strick/go/s):00247         **  02/16/96  - shrunk code for $1F handler. Smaller and faster.
                      (/home/strick/go/s):00248         **  02/18/96  - Discovered that NitrOS-9 will allow GetBlk and PutBlk on
                      (/home/strick/go/s):00249         **              text screens!  Checked: GET on text and PUT on gfx crashes
                      (/home/strick/go/s):00250         **              the system, ditto for other way around.  Stock OS-9 does NOT
                      (/home/strick/go/s):00251         **              allow PutBlk or GetBlk on text! No error, but no work, either.
                      (/home/strick/go/s):00252         **            - Added code to PutBlk to output E$IWTyp if mixing txt and gfx
                      (/home/strick/go/s):00253         **              GetBlk/PutBlk, but we now allow Get and put on text screens.
                      (/home/strick/go/s):00254         **  02/20/96  - minor mods to update video hardware at L08A4: use U
                      (/home/strick/go/s):00255         **            - Added 'L1B63 LDD #1' to replace multiple LDD #1/lbsr L1B64
                      (/home/strick/go/s):00256         **            - moved code around to optimize for size in arc/ellipse/circle
                      (/home/strick/go/s):00257         **              without affecting speed at all.
                      (/home/strick/go/s):00258         **  02/24/96  - added special purpose code for LSET AND, OR, XOR and NO PSET
                      (/home/strick/go/s):00259         **              to put pixels 2 bytes at a time... full-screen BAR goes from
                      (/home/strick/go/s):00260         **              1.4 to .35 seconds, adds ~75 bytes.
                      (/home/strick/go/s):00261         **            - Added code to check for 24/25 line windows in video set code
                      (/home/strick/go/s):00262         **              from DWSET: Wt.DfSZY=24 uses old 192 line video defs
                      (/home/strick/go/s):00263         **  02/25/96  - removed 24/25-line check code, optimized video hardware update
                      (/home/strick/go/s):00264         **  02/26/96  - fixed fast TFM and XOR (double byte) horizontal line to
                      (/home/strick/go/s):00265         **              update <$47 properly
                      (/home/strick/go/s):00266         **            - rearranged BOX routine to cut out extra X,Y updates
                      (/home/strick/go/s):00267         **  02/29/96  - optimized BOX routine: smaller and marginally faster
                      (/home/strick/go/s):00268         **  03/05/96  - moved PSET setup routines to L1884 for Point, Line, Bar, Box
                      (/home/strick/go/s):00269         **              Arc, Circle, Ellipse, and FFill.
                      (/home/strick/go/s):00270         **            - modified FFILL to do left/right checking, and right painting
                      (/home/strick/go/s):00271         **              to do byte operations, if possible.  Speeds up FFILL by >20%
                      (/home/strick/go/s):00272         **  03/07/96  - modified FFILL to search (not paint) to the right, and to
                      (/home/strick/go/s):00273         **              call the fast horizontal line routine. 2-color screen FFILLs
                      (/home/strick/go/s):00274         **              take 1/10 the time of v1.22k: 16-color takes 1/2 of the time!
                      (/home/strick/go/s):00275         **  03/17/96  - added TFM and left/right pixel fixes so non-PSET/LSET odd
                      (/home/strick/go/s):00276         **              pixel boundary PutBlks can go full-speed.
                      (/home/strick/go/s):00277         **  03/18/96  - optimized the fast-font routine.  16-color screens ~5% faster
                      (/home/strick/go/s):00278         **  04/05/96  - addeed special-purpose hardware text screen alpha put routine
                      (/home/strick/go/s):00279         **              about 30% faster than before: 5 times over stock 'Xmas GrfDrv'
                      (/home/strick/go/s):00280         **            - merged cursor On/Off routines at L157A: smaller, ~10c slower
                      (/home/strick/go/s):00281         **            - saved 1 byte in invert attribute color routine
                      (/home/strick/go/s):00282         **            - moved FastHTxt routine (i.e. deleted it: smaller, 3C slower)
                      (/home/strick/go/s):00283         **            - L0516 and L0581: added 'xy.intoq' routine to set up X,Y size
                      (/home/strick/go/s):00284         **              for text/graphics screens
                      (/home/strick/go/s):00285         ** V2.00a changs (LCB)
                      (/home/strick/go/s):00286         ** 05/25/97-05/26/97 - added code to support 224 char fonts on graphics
                      (/home/strick/go/s):00287         **            screens
                      (/home/strick/go/s):00288         **          - Changed 3 LBSR's to BSR's (@ L01B5,L1BB4,L1D40)
                      (/home/strick/go/s):00289         ** 12/02/97 - Attempted to fix GetBlk, PutBlk & GPLoad to handle full width
                      (/home/strick/go/s):00290         **            lines @ L0BAE (GetBlk), L0CBB (PutBlk),
                      (/home/strick/go/s):00291         **            NOTE: TO SAVE SPACE GRFDRV, MAYBE HAVE CoWin DO THE INITIAL
                      (/home/strick/go/s):00292         **              DEC ADJUSTMENTS, AND JUST DO THE INC'S IN GRFDRV
                      (/home/strick/go/s):00293         ** 07/10/98 - Fixed OWSet/CWArea bug: changed DECB to DECD @ L05C0
                      (/home/strick/go/s):00294         ** 07/21/98 - Fixed screen wrap on CWAREA or Overlay window on hardware text
                      (/home/strick/go/s):00295         **            screens by adding check @ ftxt.ext
                      (/home/strick/go/s):00296         ** 07/28/98 - Fixed FFill "infinite loop" bug (See SnakeByte game), I think.
                      (/home/strick/go/s):00297         ** 07/30/98 - Filled Circle/Ellipse added ($1b53 & $1b54)
                      (/home/strick/go/s):00298         ** 09/17/03 - Added trap for windows overlapping 512K bank; RG.
                      (/home/strick/go/s):00299         **            Required changing a bsr L0306 to lbsr L0306 near L02A7
                      (/home/strick/go/s):00300         ** 09/25/03 - Many changes for 6809 only code. Use <$B5 to store regW
                      (/home/strick/go/s):00301         **            Probably could use some trimming. RG
                      (/home/strick/go/s):00302         ** 02/26/07 - Changed Line routine to improve symmetry. The changes will permit
                      (/home/strick/go/s):00303         **            the removal of the FastH and FastV routines if desired. The new
                      (/home/strick/go/s):00304         **            Normal Line will correctly draw horizontal or vertical lines. RG
                      (/home/strick/go/s):00305         *****************************************************************************
                      (/home/strick/go/s):00306         * NOTE: The 'WHITE SCREEN' BUG MAY BE (IF WE'RE LUCKY) ALLEVIATED BY CLR'ING
                      (/home/strick/go/s):00307         * OFFSET 1E IN THE STATIC MEM FOR THE WINDOW, FORCING THE WINDOWING DRIVERS
                      (/home/strick/go/s):00308         * TO RESTART RIGHT FROM THE DEVICE DESCRIPTOR, INSTEAD OF ASSUMING THE DATA IN
                      (/home/strick/go/s):00309         * STATIC MEM TO BE CORRECT??
                      (/home/strick/go/s):00310         
                      (/home/strick/go/s):00311                  nam   GrfDrv
                      (/home/strick/go/s):00312                  ttl   NitrOS-9 Windowing Driver
                      (/home/strick/go/s):00313         
                      (/home/strick/go/s):00314                  ifp1
                      (/home/strick/go/s):00315                  use   defsfile
                      (         defsfile):00001                   use    ../defsfile
     0002             (      ../defsfile):00001         Level    equ   2
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (            os9.d):00637         * and for bytes in the system memory map at D.SysMem.
                      (            os9.d):00638         * A value of 0 indicates an unused/unassigned block.
                      (            os9.d):00639         * In the code, block assignment often involves incrementing a value
                      (            os9.d):00640         * from 0 to 1 rather than explict use of RAMinUse.
                      (            os9.d):00641         *
     0080             (            os9.d):00642         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00643         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00644         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00645         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00646         *
                      (            os9.d):00647         * Service Dispatch Table special entries
                      (            os9.d):00648         *
     00FE             (            os9.d):00649         IOEntry        EQU       254
                      (            os9.d):00650         
                      (            os9.d):00651                        ENDC      
                      (            os9.d):00652         
                      (            os9.d):00653                        TTL       Structure Formats
                      (            os9.d):00654                        PAG       
                      (            os9.d):00655         ************************************
                      (            os9.d):00656         * Module Directory Entry Definitions
                      (            os9.d):00657         *
                      (            os9.d):00658                        ORG       0
                      (            os9.d):00659                        IFGT      Level-1
0000                  (            os9.d):00660         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00661         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00662                        ENDC      
0004                  (            os9.d):00663         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00664         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00665         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00666         
                      (            os9.d):00667         ************************************
                      (            os9.d):00668         * Module Definitions
                      (            os9.d):00669         *
                      (            os9.d):00670         * Universal Module Offsets
                      (            os9.d):00671         *
                      (            os9.d):00672                        ORG       0
0000                  (            os9.d):00673         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00674         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00675         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00676         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00677         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00678         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00679         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00680         *
                      (            os9.d):00681         * Type-Dependent Module Offsets
                      (            os9.d):00682         *
                      (            os9.d):00683         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00684         *
0009                  (            os9.d):00685         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Program Module
                      (            os9.d):00688         *
000B                  (            os9.d):00689         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Driver, Device Descriptor Module
                      (            os9.d):00692         *
000D                  (            os9.d):00693         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00694         *
                      (            os9.d):00695         * Device Descriptor Module
                      (            os9.d):00696         *
                      (            os9.d):00697                        ORG       M$IDSize
0009                  (            os9.d):00698         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00699         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00700                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00701         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00702         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00703         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00704         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00705         *
                      (            os9.d):00706         * Configuration Module Entry Offsets
                      (            os9.d):00707         *
                      (            os9.d):00708                        ORG       M$IDSize
0009                  (            os9.d):00709         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00710         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00711         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00712         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00713         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00714         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00715         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00716         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00717         
0017                  (            os9.d):00718         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00719         OSVer          RMB       1                   OS version
0019                  (            os9.d):00720         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00721         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00722         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00723         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00724         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00725         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00726                        RMB       4                   reserved for future use
                      (            os9.d):00727         
                      (            os9.d):00728                        IFGT      Level-1
                      (            os9.d):00729         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00730         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00731         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00732         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00733         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00734                        ENDC      
                      (            os9.d):00735         
                      (            os9.d):00736         * Feature1 byte definitions
     0001             (            os9.d):00737         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00738         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00739         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00740         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00741         
                      (            os9.d):00742                        PAG       
                      (            os9.d):00743         **************************
                      (            os9.d):00744         * Module Field Definitions
                      (            os9.d):00745         *
                      (            os9.d):00746         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00747         *
     0087             (            os9.d):00748         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00749         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00750         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00751         
                      (            os9.d):00752         *
                      (            os9.d):00753         * Module Type/Language Field Masks
                      (            os9.d):00754         *
     00F0             (            os9.d):00755         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00756         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00757         
                      (            os9.d):00758         *
                      (            os9.d):00759         * Module Type Values
                      (            os9.d):00760         *
     00F0             (            os9.d):00761         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00762         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00763         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00764         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00765         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00766         Data           EQU       $40                 Data Module
     0030             (            os9.d):00767         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00768         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00769         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00770         
                      (            os9.d):00771         *
                      (            os9.d):00772         * Module Language Values
                      (            os9.d):00773         *
     0001             (            os9.d):00774         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00775         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00776         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00777         CCode          EQU       4                   C I-code
     0005             (            os9.d):00778         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00779         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00780         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00781         *
                      (            os9.d):00782         * Module Attributes / Revision byte
                      (            os9.d):00783         *
                      (            os9.d):00784         * Field Masks
                      (            os9.d):00785         *
     00F0             (            os9.d):00786         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00787         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00788         *
                      (            os9.d):00789         * Attribute Flags
                      (            os9.d):00790         *
     0080             (            os9.d):00791         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00792         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00793         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00794         
                      (            os9.d):00795         ********************
                      (            os9.d):00796         * Device Type Values
                      (            os9.d):00797         *
                      (            os9.d):00798         * These values define various classes of devices, which are
                      (            os9.d):00799         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00800         * in a device's device descriptor.
                      (            os9.d):00801         *
     0000             (            os9.d):00802         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00803         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00804         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00805         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00806         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00807         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00808         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00809         
                      (            os9.d):00810         *********************
                      (            os9.d):00811         * CRC Result Constant
                      (            os9.d):00812         *
     0080             (            os9.d):00813         CRCCon1        EQU       $80
     0FE3             (            os9.d):00814         CRCCon23       EQU       $0FE3
                      (            os9.d):00815         
                      (            os9.d):00816                        TTL       Process Information
                      (            os9.d):00817                        PAG       
                      (            os9.d):00818         ********************************
                      (            os9.d):00819         * Process Descriptor Definitions
                      (            os9.d):00820         *
                      (            os9.d):00821                        IFEQ      Level-1
                      (            os9.d):00822         
                      (            os9.d):00823         * Level 1 process descriptor defs
002A                  (            os9.d):00824         DefIOSiz       EQU       12
002A                  (            os9.d):00825         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00826         
                      (            os9.d):00827                        ORG       0
002A                  (            os9.d):00828         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00829         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00830         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00831         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00832         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00833         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00834         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00835         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00836         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00837         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00838         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00839         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00840         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00841         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00842         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00843         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00844         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00845         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00846         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00847         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00848         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00849         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00850         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00851         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00852         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00853                        RMB       $40-.               unused
002A                  (            os9.d):00854         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00855         
                      (            os9.d):00856         *
                      (            os9.d):00857         * Process State Flags
                      (            os9.d):00858         *
002A                  (            os9.d):00859         SysState       EQU       %10000000
002A                  (            os9.d):00860         TimSleep       EQU       %01000000
002A                  (            os9.d):00861         TimOut         EQU       %00100000
002A                  (            os9.d):00862         ImgChg         EQU       %00010000
002A                  (            os9.d):00863         Condem         EQU       %00000010
002A                  (            os9.d):00864         Dead           EQU       %00000001
                      (            os9.d):00865         
                      (            os9.d):00866                        ELSE      
                      (            os9.d):00867         
                      (            os9.d):00868         * Level 2 process descriptor defs
     0010             (            os9.d):00869         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00870         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00871         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00872         
                      (            os9.d):00873                        ORG       0
0000                  (            os9.d):00874         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00875         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00876         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00877         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00878         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00879         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00880         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00881         P$User         RMB       2                   User Index
000A                  (            os9.d):00882         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00883         P$Age          RMB       1                   Age
000C                  (            os9.d):00884         P$State        RMB       1                   Status
000D                  (            os9.d):00885         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00886         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00887         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00888         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00889         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00890         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00891         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00892         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00893         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00894         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00895         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00896                        RMB       $20-.               unused
0020                  (            os9.d):00897         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00898         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00899         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00900         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00901         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00902         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00903         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00904         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00905         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00906         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00907         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00908         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00909         P$Alarm        RMB       6
00C9                  (            os9.d):00910                        RMB       $200-.              Local stack
     0200             (            os9.d):00911         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00912         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00913         
                      (            os9.d):00914         *
                      (            os9.d):00915         * Process State Flags
                      (            os9.d):00916         *
     0080             (            os9.d):00917         SysState       EQU       %10000000
     0040             (            os9.d):00918         TimSleep       EQU       %01000000
     0020             (            os9.d):00919         TimOut         EQU       %00100000
     0010             (            os9.d):00920         ImgChg         EQU       %00010000
     0008             (            os9.d):00921         Suspend        EQU       %00001000
     0002             (            os9.d):00922         Condem         EQU       %00000010
     0001             (            os9.d):00923         Dead           EQU       %00000001
                      (            os9.d):00924         
                      (            os9.d):00925                        ENDC      
                      (            os9.d):00926         
                      (            os9.d):00927                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00928                        PAG       
                      (            os9.d):00929         *************************
                      (            os9.d):00930         * Path Descriptor Offsets
                      (            os9.d):00931         *
                      (            os9.d):00932                        ORG       0
0000                  (            os9.d):00933         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00934         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00935         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00936         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00937         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00938         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00939         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00940         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00941         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00942         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00943                        RMB       64-.                Path options
     0040             (            os9.d):00944         PDSIZE         EQU       .
                      (            os9.d):00945         
                      (            os9.d):00946         *
                      (            os9.d):00947         * Pathlist Special Symbols
                      (            os9.d):00948         *
     002F             (            os9.d):00949         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00950         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00951         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00952         
                      (            os9.d):00953                        PAG       
                      (            os9.d):00954         ****************************
                      (            os9.d):00955         * File Manager Entry Offsets
                      (            os9.d):00956         *
                      (            os9.d):00957                        ORG       0
0000                  (            os9.d):00958         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00959         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00960         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00961         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00962         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00963         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00964         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00965         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00966         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00967         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00968         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00969         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00970         FMCLOS         RMB       3                   Close File
                      (            os9.d):00971         
                      (            os9.d):00972         *****************************
                      (            os9.d):00973         * Device Driver Entry Offsets
                      (            os9.d):00974         *
                      (            os9.d):00975                        ORG       0
0000                  (            os9.d):00976         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00977         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00978         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00979         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00980         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00981         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00982         
                      (            os9.d):00983         *********************
                      (            os9.d):00984         * Device Table Format
                      (            os9.d):00985         *
                      (            os9.d):00986                        ORG       0
0000                  (            os9.d):00987         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00988         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00989         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00990         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00991         V$USRS         RMB       1                   use count
                      (            os9.d):00992                        IFGT      Level-1
0009                  (            os9.d):00993         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00994         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00995                        ENDC      
     000D             (            os9.d):00996         DEVSIZ         EQU       .
                      (            os9.d):00997         
                      (            os9.d):00998         *******************************
                      (            os9.d):00999         * Device Static Storage Offsets
                      (            os9.d):01000         *
                      (            os9.d):01001                        ORG       0
0000                  (            os9.d):01002         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):01003         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01004         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01005         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01006         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01007         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01008         
                      (            os9.d):01009         ********************************
                      (            os9.d):01010         * Interrupt Polling Table Format
                      (            os9.d):01011         *
                      (            os9.d):01012                        ORG       0
0000                  (            os9.d):01013         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01014         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01015         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01016         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01017         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01018         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01019                        IFGT      Level-1
0009                  (            os9.d):01020         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01021                        ENDC      
     000B             (            os9.d):01022         POLSIZ         EQU       .
                      (            os9.d):01023         
                      (            os9.d):01024         ********************
                      (            os9.d):01025         * VIRQ packet format
                      (            os9.d):01026         *
                      (            os9.d):01027                        ORG       0
0000                  (            os9.d):01028         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01029         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01030         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01031         Vi.PkSz        EQU       .
                      (            os9.d):01032         
     0001             (            os9.d):01033         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01034         
                      (            os9.d):01035                        PAG       
                      (            os9.d):01036         *************************************
                      (            os9.d):01037         * Machine Characteristics Definitions
                      (            os9.d):01038         *
     0000             (            os9.d):01039         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01040         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01041         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01042         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01043                        IFNE      H6309
0005                  (            os9.d):01044         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01045         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01046         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01047         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01048         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01049         R$X            EQU       6                   X Index register
0005                  (            os9.d):01050         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01051         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01052         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01053         R$Size         EQU       14                  Total register package size
                      (            os9.d):01054                        ELSE      
     0003             (            os9.d):01055         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01056         R$X            EQU       4                   X Index register
     0006             (            os9.d):01057         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01058         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01059         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01060         R$Size         EQU       12                  Total register package size
                      (            os9.d):01061                        ENDC      
                      (            os9.d):01062         
                      (            os9.d):01063         * MD register masks
                      (            os9.d):01064         * 6309 definitions
     0080             (            os9.d):01065         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01066         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01067         
     0080             (            os9.d):01068         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01069         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01070         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01071         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01072         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01073         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01074         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01075         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01076         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01077         Sign           EQU       %10000000           sign bit
                      (            os9.d):01078         
                      (            os9.d):01079                        TTL       Error Code Definitions
                      (            os9.d):01080                        PAG       
                      (            os9.d):01081         ************************
                      (            os9.d):01082         * Error Code Definitions
                      (            os9.d):01083         *
                      (            os9.d):01084         * Basic09 Error Codes
                      (            os9.d):01085         *
                      (            os9.d):01086                        ORG       10
000A                  (            os9.d):01087         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01088         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01089         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01090         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01091         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01092         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01093         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01094         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01095         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01096         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01097         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01098         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01099         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01100         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01101         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01102         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01103         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01104         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01105         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01106         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01107         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01108         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01109         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01110         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01111         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01112         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01113         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01114         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01115         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01116         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01117         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01118         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01119         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01120         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01121         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01122         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01123         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01124         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01125         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01126         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01127         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01128         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01129         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01130         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01131         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01132         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01133         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01134         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01135         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01136         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01137         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01138         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01139         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01140         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01141         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01142         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01143         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01144         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01145         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01146         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01147         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01148         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01149         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01150         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01151         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01152         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01153         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01154         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01155         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01156         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01157         
                      (            os9.d):01158         *
                      (            os9.d):01159         * System Dependent Error Codes
                      (            os9.d):01160         *
                      (            os9.d):01161         
                      (            os9.d):01162         * Level 2 windowing error codes
                      (            os9.d):01163                        ORG       183
00B7                  (            os9.d):01164         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01165         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01166         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01167         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01168         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01169                        RMB       1                   reserved
00BD                  (            os9.d):01170         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01171         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01172         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01173         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01174         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01175         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01176         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01177         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01178         
00C5                  (            os9.d):01179         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01180         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01181         E$Alias        RMB       1
                      (            os9.d):01182         
                      (            os9.d):01183         
                      (            os9.d):01184         *
                      (            os9.d):01185         * Standard NitrOS-9 Error Codes
                      (            os9.d):01186         *
                      (            os9.d):01187                        ORG       200
00C8                  (            os9.d):01188         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01189         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01190         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01191         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01192         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01193         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01194         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01195         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01196         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01197         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01198         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01199         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01200                        RMB       1
00D5                  (            os9.d):01201         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01202         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01203         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01204         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01205         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01206         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01207         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01208         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01209         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01210                        RMB       1
00DF                  (            os9.d):01211         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01212         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01213         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01214                        RMB       1
00E2                  (            os9.d):01215         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01216         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01217         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01218         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01219         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01220         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01221         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01222         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01223         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01224         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01225         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01226         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01227         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01228         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01229                        RMB       $F0-.               reserved
00F0                  (            os9.d):01230         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01231         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01232         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01233         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01234         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01235         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01236         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01237         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01238         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01239         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01240         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01241         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01242         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01243         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01244         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01245         
                      (            os9.d):01246         
                      (            os9.d):01247                        IFGT      Level-2
                      (            os9.d):01248         ***************************
                      (            os9.d):01249         * Level 3 Defs
                      (            os9.d):01250         *
                      (            os9.d):01251         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01252         *
00FF                  (            os9.d):01253         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01254         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01255         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01256         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01257         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01258         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01259                        ENDC      
                      (            os9.d):01260         
                      (            os9.d):01261                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
     00E0             (            scf.d):00222         PARMASK        EQU       %11100000
                      (            scf.d):00223         
                      (            scf.d):00224         * PD.BAU definitions
                      (            scf.d):00225         *
                      (            scf.d):00226         * Baud rate
     0000             (            scf.d):00227         B110           EQU       %00000000
     0001             (            scf.d):00228         B300           EQU       %00000001
     0002             (            scf.d):00229         B600           EQU       %00000010
     0003             (            scf.d):00230         B1200          EQU       %00000011
     0004             (            scf.d):00231         B2400          EQU       %00000100
     0005             (            scf.d):00232         B4800          EQU       %00000101
     0006             (            scf.d):00233         B9600          EQU       %00000110
     0007             (            scf.d):00234         B19200         EQU       %00000111
     0008             (            scf.d):00235         B38400         EQU       %00001000
     0009             (            scf.d):00236         B57600         EQU       %00001001
     000A             (            scf.d):00237         B115200        EQU       %00001010
                      (            scf.d):00238         * Word size
     0000             (            scf.d):00239         WORD8          EQU       %00000000
     0020             (            scf.d):00240         WORD7          EQU       %00100000
                      (            scf.d):00241         * Stop bits
     0000             (            scf.d):00242         STOP1          EQU       %00000000
     0010             (            scf.d):00243         STOP2          EQU       %00010000
                      (            scf.d):00244         
                      (            scf.d):00245                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         ********************************
                      (           coco.d):00148         * Boot defs for NitrOS-9 Level 1
                      (           coco.d):00149         *
                      (           coco.d):00150         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00151         * system.
                      (           coco.d):00152         *
0004                  (           coco.d):00153         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE
                      (           coco.d):00156         
                      (           coco.d):00157         ******************************************
                      (           coco.d):00158         * Boot defs for NitrOS-9 Level 2 and above
                      (           coco.d):00159         *
                      (           coco.d):00160         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00161         * system.
                      (           coco.d):00162         *
     ED00             (           coco.d):00163         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (           coco.d):00164         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (           coco.d):00165         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (           coco.d):00166         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (           coco.d):00167         
                      (           coco.d):00168                        ENDC
                      (           coco.d):00169         
                      (           coco.d):00170         * On the CoCo, the boot track is all of track 34
                      (           coco.d):00171         
     0022             (           coco.d):00172         Bt.Track       EQU       34                  Boot track
     0000             (           coco.d):00173         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (           coco.d):00174         
                      (           coco.d):00175         
     1080             (           coco.d):00176         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (           coco.d):00177         
                      (           coco.d):00178         
                      (           coco.d):00179                        IFEQ      Level-1
                      (           coco.d):00180         
                      (           coco.d):00181         *************************************************
                      (           coco.d):00182         *
                      (           coco.d):00183         * NitrOS-9 Level 1 Section
                      (           coco.d):00184         *
                      (           coco.d):00185         *************************************************
                      (           coco.d):00186         
0004                  (           coco.d):00187         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00188         
                      (           coco.d):00189                        ELSE      
                      (           coco.d):00190         
                      (           coco.d):00191         *************************************************
                      (           coco.d):00192         *
                      (           coco.d):00193         * NitrOS-9 Level 2 Section
                      (           coco.d):00194         *
                      (           coco.d):00195         *************************************************
                      (           coco.d):00196         
                      (           coco.d):00197         ****************************************
                      (           coco.d):00198         * Dynamic Address Translator Definitions
                      (           coco.d):00199         *
     0008             (           coco.d):00200         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00201         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00202         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00203         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00204         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00205         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00206         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00207         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00208         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00209         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00210         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00211         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00212         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00213         IOBlock        EQU       $3F
     003F             (           coco.d):00214         ROMBlock       EQU       $3F
     007F             (           coco.d):00215         IOAddr         EQU       $7F
     0001             (           coco.d):00216         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00217         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00218         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00219         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00220         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00221         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00222         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00223         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00224         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00225         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00226         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00227         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00228         
                      (           coco.d):00229         ***************************
                      (           coco.d):00230         * Color Computer 3 Specific
                      (           coco.d):00231         *
     0001             (           coco.d):00232         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00233         
                      (           coco.d):00234         ********************
                      (           coco.d):00235         * Hardware addresses
                      (           coco.d):00236         *
     FF00             (           coco.d):00237         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00238         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00239         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00240         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00241         
     0007             (           coco.d):00242         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00243         
                      (           coco.d):00244         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (           coco.d):00245         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (           coco.d):00246         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (           coco.d):00247         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (           coco.d):00248         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (           coco.d):00249         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (           coco.d):00250         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (           coco.d):00251         * it will end up with its own block assigned for CPU address space $E000-
                      (           coco.d):00252         * $FFFF but the top of the address space is unusable by the user process:
                      (           coco.d):00253         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (           coco.d):00254         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (           coco.d):00255         * For the COCO GIME, it's always $3F.
     003F             (           coco.d):00256         KrnBlk         SET       $3F
                      (           coco.d):00257         
                      (           coco.d):00258                        ENDC
                      (           coco.d):00259                        ENDC
                      (           coco.d):00260         
                      (/home/strick/go/s):00316                  use   cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
     0001             (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
0004                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
0004                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0004                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0004                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0004                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0004                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0004                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0004                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0004                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0004                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
                      (       cocovtio.d):00043                        RMB       1                   (I assume reserved for a 3rd parameter byte)
0004                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
0004                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
0004                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
0004                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
0004                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0004                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0004                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0004                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0004                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0004                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0004                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
0004                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
0004                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
0004                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0004                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0004                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   Error in FloodFill - E$Write if FFill stack overflows, 0 if no error
0004                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0004                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0004                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0004                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0004                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0004                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF) Full byte Color Mask
0004                  (       cocovtio.d):00066         V.MCol         RMB       1                   Start pixel in a byte mask ($C0=4 color, $80=2 color)
0004                  (       cocovtio.d):00067         V.4A           RMB       1                   End pixel in a byte mask ($03=4 color,$01=2 color)
0004                  (       cocovtio.d):00068         V.PMask        RMB       1                   Full byte pixel mask for colors (i.e. $55, $CC etc)
0004                  (       cocovtio.d):00069         V.4C           RMB       1
0004                  (       cocovtio.d):00070         V.4D           RMB       1
0004                  (       cocovtio.d):00071         V.4E           RMB       1                   Flood Fill full byte color mask
0004                  (       cocovtio.d):00072         V.4F           RMB       1
0004                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0004                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0004                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0004                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0004                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0004                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0004                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0004                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0004                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0004                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
0004                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
0004                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
0004                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
0004                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0004                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0004                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0004                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0004                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0004                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0004                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0004                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0004                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0004                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0004                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
0004                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
0004                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
0004                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
0004                  (       cocovtio.d):00102         V.Spcl         RMB       1
0004                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
0004                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0004                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0004                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0004                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0004                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0004                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0004                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
0004                  (       cocovtio.d):00111         V.Co42E        RMB       2                   Co42 entry point
0004                  (       cocovtio.d):00112         V.CoVGAE       RMB       2                   CoVGA entry point
0004                  (       cocovtio.d):00113         V.Co80E        RMB       2                   Co80 entry point
0004                  (       cocovtio.d):00114         V.CoDPlusE     RMB       2                   CoDPlus entry point
0004                  (       cocovtio.d):00115         V.Flash        RMB       2                   Cursor flash routine address.
0004                  (       cocovtio.d):00116         v.FlashTime    RMB       1                   Cursor flash time
0004                  (       cocovtio.d):00117         v.FlashCount   RMB       1                   Cursor flash count
0004                  (       cocovtio.d):00118         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00119         * If we make ClrBlk vector, throw it in here so the various comoduels, as well as VTIO,
                      (       cocovtio.d):00120         * can all use it (clearing text/graphics screens, clearing full width line (pure text or
                      (       cocovtio.d):00121         * CoHr/Co42 graphics lines), and possibly Clear to end of line could all use it.
0004                  (       cocovtio.d):00122         V.ClrBlk       RMB       2                   Vector to mini-stack blast clearing routine
0004                  (       cocovtio.d):00123         V.CpyBlk       RMB       2                   Vector to mini-stack blast copying routine
                      (       cocovtio.d):00124         * CoHR vars
0004                  (       cocovtio.d):00125         V.51ScrnA      RMB       2                   * Screen address.
0004                  (       cocovtio.d):00126         V.51XPos       RMB       1                   * X co-ordinate
0004                  (       cocovtio.d):00127         V.51YPos       RMB       1                   * Y co-ordinate
0004                  (       cocovtio.d):00128         V.51EscSeq     RMB       1                   * In escape sequence
0004                  (       cocovtio.d):00129         V.51ReverseFlag RMB       1                  * Reverse video flag
0004                  (       cocovtio.d):00130         V.51UnderlineFlag RMB       1                * Underline flag
0004                  (       cocovtio.d):00131         V.51CtrlDispatch RMB       2                 * Ctrl char dispatch address, currently processing
0004                  (       cocovtio.d):00132         V.51BytePixOffset RMB       1                * byte offset in screen line, of character X position        
0004                  (       cocovtio.d):00133         V.51OldCursorPosX RMB       1                * Position of old cursor before update        
0004                  (       cocovtio.d):00134         V.51OldCursorPosY RMB       1
0004                  (       cocovtio.d):00135         V.51CursorChanged RMB       1                * Has cursor position changed ? 1=yes,0=no
0004                  (       cocovtio.d):00136         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
0004                  (       cocovtio.d):00137         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
0004                  (       cocovtio.d):00138         V.51ScreenMask1 RMB       1                  * screen masks for drawing characters on screen         
0004                  (       cocovtio.d):00139         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00140         * End of CoHR vars
                      (       cocovtio.d):00141         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00142         **** code can clobber variables defined after these !                ****
0004                  (       cocovtio.d):00143         V.IBufH        RMB       1                   input buffer head
0004                  (       cocovtio.d):00144         V.IBufT        RMB       1                   input buffer tail
0004                  (       cocovtio.d):00145         V.InBuf        RMB       1                   input buffer ptr
0004                  (       cocovtio.d):00146         V.51End        RMB       1
                      (       cocovtio.d):00147                        RMB       250-.
0004                  (       cocovtio.d):00148         V.Last         EQU       .
                      (       cocovtio.d):00149         
                      (       cocovtio.d):00150         
                      (       cocovtio.d):00151         * Unknown for now
                      (       cocovtio.d):00152         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00153         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00154         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00155         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00156         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00157         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00158         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00159         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00160         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00161         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00162         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00163         
                      (       cocovtio.d):00164         *
                      (       cocovtio.d):00165         * Defs for V.COLoad flags.
                      (       cocovtio.d):00166         * 
                      (       cocovtio.d):00167         
0004                  (       cocovtio.d):00168         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
0004                  (       cocovtio.d):00169         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
0004                  (       cocovtio.d):00170         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
0004                  (       cocovtio.d):00171         ModCo42        EQU       %00010000           Co42, PMODE 4 42x25 text
0004                  (       cocovtio.d):00172         ModCoVGA       EQU       %00100000           CoVGA, 64x32 text
0004                  (       cocovtio.d):00173         ModCo80        EQU       %01000000           Co80, CRT9128 WordPak, 80x25
0004                  (       cocovtio.d):00174         ModCoDPlus     EQU       %10000000           Dragon Plus, 6545, 80x24
                      (       cocovtio.d):00175         
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * Defs for cursor flash counter
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         
0004                  (       cocovtio.d):00180         CFlash50hz     EQU       25                  * 50Hz flash counter
0004                  (       cocovtio.d):00181         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00182         
                      (       cocovtio.d):00183                        ELSE
                      (       cocovtio.d):00184                        
                      (       cocovtio.d):00185         ********************************************************************
                      (       cocovtio.d):00186         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         *
                      (       cocovtio.d):00188         * $Id$
                      (       cocovtio.d):00189         *
                      (       cocovtio.d):00190         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00191         * Comment
                      (       cocovtio.d):00192         * ------------------------------------------------------------------
                      (       cocovtio.d):00193         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00194         * Started from systype
                      (       cocovtio.d):00195         
                      (       cocovtio.d):00196                        NAM       VTIODefs
                      (       cocovtio.d):00197                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00198         
                      (       cocovtio.d):00199         ****************
                      (       cocovtio.d):00200         * Window Devices
                      (       cocovtio.d):00201         *
                      (       cocovtio.d):00202                        ORG       $FF9F
FF9F                  (       cocovtio.d):00203         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (       cocovtio.d):00204         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (       cocovtio.d):00205         A.W1           RMB       1                   $FFA1
FFA2                  (       cocovtio.d):00206         A.W2           RMB       1                   $FFA2
FFA3                  (       cocovtio.d):00207         A.W3           RMB       1                   $FFA3
FFA4                  (       cocovtio.d):00208         A.W4           RMB       1                   $FFA4
FFA5                  (       cocovtio.d):00209         A.W5           RMB       1                   $FFA5
FFA6                  (       cocovtio.d):00210         A.W6           RMB       1                   $FFA6
FFA7                  (       cocovtio.d):00211         A.W7           RMB       1                   $FFA7
FFA8                  (       cocovtio.d):00212         A.W8           RMB       1                   $FFA8
FFA9                  (       cocovtio.d):00213         A.W9           RMB       1                   $FFA9
FFAA                  (       cocovtio.d):00214         A.W10          RMB       1                   $FFAA
FFAB                  (       cocovtio.d):00215         A.W11          RMB       1                   $FFAB
FFAC                  (       cocovtio.d):00216         A.W12          RMB       1                   $FFAC
FFAD                  (       cocovtio.d):00217         A.W13          RMB       1                   $FFAD
FFAE                  (       cocovtio.d):00218         A.W14          RMB       1                   $FFAE
FFAF                  (       cocovtio.d):00219         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00220         
                      (       cocovtio.d):00221         **********************************
                      (       cocovtio.d):00222         * Pointer Device Packet Definition
                      (       cocovtio.d):00223         *
                      (       cocovtio.d):00224                        ORG       0
0000                  (       cocovtio.d):00225         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (       cocovtio.d):00226         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (       cocovtio.d):00227         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (       cocovtio.d):00228                        RMB       2                   reserved
0005                  (       cocovtio.d):00229         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (       cocovtio.d):00230         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (       cocovtio.d):00231         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (       cocovtio.d):00232         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (       cocovtio.d):00233         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (       cocovtio.d):00234         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (       cocovtio.d):00235         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (       cocovtio.d):00236         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (       cocovtio.d):00237         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (       cocovtio.d):00238         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (       cocovtio.d):00239                        RMB       2                   Reserved
0012                  (       cocovtio.d):00240         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (       cocovtio.d):00241         Pt.BDY         RMB       2                   Button down Y value
0016                  (       cocovtio.d):00242         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (       cocovtio.d):00243         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (       cocovtio.d):00244         Pt.AcX         RMB       2                   Actual X Value
001A                  (       cocovtio.d):00245         Pt.AcY         RMB       2                   Actual Y Value
001C                  (       cocovtio.d):00246         Pt.WRX         RMB       2                   Window Relative X
001E                  (       cocovtio.d):00247         Pt.WRY         RMB       2                   Window Relative Y
     0020             (       cocovtio.d):00248         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00249         
                      (       cocovtio.d):00250         **************************
                      (       cocovtio.d):00251         * window regions for mouse
                      (       cocovtio.d):00252         *
     0000             (       cocovtio.d):00253         WR.Cntnt       EQU       0                   content region
     0001             (       cocovtio.d):00254         WR.Cntrl       EQU       1                   control region
     0002             (       cocovtio.d):00255         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00256         
                      (       cocovtio.d):00257         *************************************
                      (       cocovtio.d):00258         * Standard system get/put buffer defs
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         *
                      (       cocovtio.d):00261         * system group numbers
                      (       cocovtio.d):00262         *
                      (       cocovtio.d):00263                        ORG       200
00C8                  (       cocovtio.d):00264         Grp.Fnt        RMB       1                   font group
00C9                  (       cocovtio.d):00265         Grp.Clip       RMB       1                   clipboard group
00CA                  (       cocovtio.d):00266         Grp.Ptr        RMB       1                   pointer group
00CB                  (       cocovtio.d):00267         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (       cocovtio.d):00268         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (       cocovtio.d):00269         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00270         *
                      (       cocovtio.d):00271         * font buffer numbers
                      (       cocovtio.d):00272         *
                      (       cocovtio.d):00273                        ORG       1
0001                  (       cocovtio.d):00274         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (       cocovtio.d):00275         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (       cocovtio.d):00276         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00277         *
                      (       cocovtio.d):00278         * pattern buffer numbers
                      (       cocovtio.d):00279         *
                      (       cocovtio.d):00280                        ORG       1
0001                  (       cocovtio.d):00281         Pat.Dot        RMB       1
0002                  (       cocovtio.d):00282         Pat.Vrt        RMB       1
0003                  (       cocovtio.d):00283         Pat.Hrz        RMB       1
0004                  (       cocovtio.d):00284         Pat.XHtc       RMB       1
0005                  (       cocovtio.d):00285         Pat.LSnt       RMB       1
0006                  (       cocovtio.d):00286         Pat.RSnt       RMB       1
0007                  (       cocovtio.d):00287         Pat.SDot       RMB       1
0008                  (       cocovtio.d):00288         Pat.BDot       RMB       1
                      (       cocovtio.d):00289         *
                      (       cocovtio.d):00290         * pointer buffer numbers
                      (       cocovtio.d):00291         *
                      (       cocovtio.d):00292                        ORG       1
0001                  (       cocovtio.d):00293         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (       cocovtio.d):00294         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (       cocovtio.d):00295         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (       cocovtio.d):00296         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (       cocovtio.d):00297         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (       cocovtio.d):00298         Ptr.Txt        RMB       1                   Text pointer
0007                  (       cocovtio.d):00299         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00300         
                      (       cocovtio.d):00301         **********************
                      (       cocovtio.d):00302         * KeyDrv Entry Points
                      (       cocovtio.d):00303                        ORG       0
0000                  (       cocovtio.d):00304         K$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00305         K$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00306         K$FnKey        RMB       3                   get function key states
0009                  (       cocovtio.d):00307         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00308         
                      (       cocovtio.d):00309         **********************
                      (       cocovtio.d):00310         * JoyDrv Entry Points
                      (       cocovtio.d):00311                        ORG       0
0000                  (       cocovtio.d):00312         J$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00313         J$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00314         J$MsBtn        RMB       3                   get mouse button states
0009                  (       cocovtio.d):00315         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (       cocovtio.d):00316         J$JyBtn        RMB       3                   get joystick button states
000F                  (       cocovtio.d):00317         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00318         
                      (       cocovtio.d):00319         **********************
                      (       cocovtio.d):00320         * SndDrv Entry Points
                      (       cocovtio.d):00321                        ORG       0
0000                  (       cocovtio.d):00322         S$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00323         S$GetStt       RMB       3                   joystick termination
0006                  (       cocovtio.d):00324         S$SetStt       RMB       3                   joystick termination
0009                  (       cocovtio.d):00325         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00326         
                      (       cocovtio.d):00327         ********************************
                      (       cocovtio.d):00328         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00331         * for use in the high level windowing package.
                      (       cocovtio.d):00332         *
     000A             (       cocovtio.d):00333         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (       cocovtio.d):00334         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (       cocovtio.d):00335         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (       cocovtio.d):00336         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00337         *
                      (       cocovtio.d):00338         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00339         * one required for each item within the menu
                      (       cocovtio.d):00340         *
                      (       cocovtio.d):00341                        ORG       0
0000                  (       cocovtio.d):00342         MI.TTL         RMB       MXTTLEN             item name
000F                  (       cocovtio.d):00343         MI.ENBL        RMB       1                   enable flag
0010                  (       cocovtio.d):00344         MI.RES         RMB       5                   reserved bytes
     0015             (       cocovtio.d):00345         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00346         *
                      (       cocovtio.d):00347         * Menu Descriptor :
                      (       cocovtio.d):00348         * one for each menu on the manu bar
                      (       cocovtio.d):00349         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00350         *
                      (       cocovtio.d):00351                        ORG       0
0000                  (       cocovtio.d):00352         MN.TTL         RMB       MXTTLEN             menu title
000F                  (       cocovtio.d):00353         MN.ID          RMB       1                   menu id number (1-255)
0010                  (       cocovtio.d):00354         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (       cocovtio.d):00355         MN.NITS        RMB       1                   number of items in menu
0012                  (       cocovtio.d):00356         MN.ENBL        RMB       1                   enable flag
0013                  (       cocovtio.d):00357         MN.RES         RMB       2                   reserved bytes
0015                  (       cocovtio.d):00358         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (       cocovtio.d):00359         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00360         *
                      (       cocovtio.d):00361         * Window Descriptor:
                      (       cocovtio.d):00362         * one required for each application in a framed window
                      (       cocovtio.d):00363         *
                      (       cocovtio.d):00364                        ORG       0
0000                  (       cocovtio.d):00365         WN.TTL         RMB       20                  title of window for title bar
0014                  (       cocovtio.d):00366         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (       cocovtio.d):00367         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (       cocovtio.d):00368         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (       cocovtio.d):00369         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (       cocovtio.d):00370         WN.RES         RMB       7                   reserved bytes
0020                  (       cocovtio.d):00371         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (       cocovtio.d):00372         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00373         
                      (       cocovtio.d):00374         *************************
                      (       cocovtio.d):00375         * Window Type Definitions
                      (       cocovtio.d):00376         *
                      (       cocovtio.d):00377         * To be used in setting up the border of the window in
                      (       cocovtio.d):00378         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       0
0000                  (       cocovtio.d):00381         WT.NBox        RMB       1                   No Box
0001                  (       cocovtio.d):00382         WT.FWin        RMB       1                   Framed Window
0002                  (       cocovtio.d):00383         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (       cocovtio.d):00384         WT.SBox        RMB       1                   Shadowed Box
0004                  (       cocovtio.d):00385         WT.DBox        RMB       1                   Double Box
0005                  (       cocovtio.d):00386         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00387         
                      (       cocovtio.d):00388         *************************************
                      (       cocovtio.d):00389         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00390         *
                      (       cocovtio.d):00391                        ORG       1
0001                  (       cocovtio.d):00392         MId.Mov        RMB       1                   move box
0002                  (       cocovtio.d):00393         MId.Cls        RMB       1                   close box
0003                  (       cocovtio.d):00394         MId.Grw        RMB       1                   grow box
0004                  (       cocovtio.d):00395         MId.SUp        RMB       1                   scroll up
0005                  (       cocovtio.d):00396         MId.SDn        RMB       1                   scroll down
0006                  (       cocovtio.d):00397         MId.SRt        RMB       1                   scroll right
0007                  (       cocovtio.d):00398         MId.SLt        RMB       1                   scroll left
0008                  (       cocovtio.d):00399         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00400                        ORG       20
0014                  (       cocovtio.d):00401         MId.Tdy        RMB       1                   Tandy menu
0015                  (       cocovtio.d):00402         MId.Fil        RMB       1                   Files Menu
0016                  (       cocovtio.d):00403         MId.Edt        RMB       1                   Edit Menu
0017                  (       cocovtio.d):00404         MId.Sty        RMB       1                   Styles menu
0018                  (       cocovtio.d):00405         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00406         
                      (       cocovtio.d):00407         
                      (       cocovtio.d):00408         ******************************************************************************
                      (       cocovtio.d):00409         ******************************************************************************
                      (       cocovtio.d):00410         **                                                                          **
                      (       cocovtio.d):00411         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00412         **                                                                          **
                      (       cocovtio.d):00413         ******************************************************************************
                      (       cocovtio.d):00414         ******************************************************************************
                      (       cocovtio.d):00415         **                                                                          **
                      (       cocovtio.d):00416         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00417         **                                                                          **
                      (       cocovtio.d):00418         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00419         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00420         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00421         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00422         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00423         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00424         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00425         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00426         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00427         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00428         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00429         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00430         ** $0400-$04FF : user's system call dispatch table                          **
                      (       cocovtio.d):00431         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00432         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00433         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00434         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00435         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00436         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00437         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00438         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00439         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00440         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00441         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00442         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00443         **                                                                          **
                      (       cocovtio.d):00444         ******************************************************************************
                      (       cocovtio.d):00445         ******************************************************************************
                      (       cocovtio.d):00446         
                      (       cocovtio.d):00447         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (       cocovtio.d):00448         MaxLines       EQU       25                  Max. Y coord text value
     0000             (       cocovtio.d):00449         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00450         
     0000             (       cocovtio.d):00451         COMP           EQU       0                   composite monitor
     0001             (       cocovtio.d):00452         RGB            EQU       1                   RGB Analog monitor 
     0002             (       cocovtio.d):00453         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00454         
     0001             (       cocovtio.d):00455         Monitor        SET       RGB
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         * Global definitions
     0001             (       cocovtio.d):00458         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (       cocovtio.d):00459         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (       cocovtio.d):00460         CapsLck        EQU       %00000100           Capslock enabled
     0280             (       cocovtio.d):00461         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00462                      IFEQ      MaxLines-25
     00C6             (       cocovtio.d):00463         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00464                      ELSE      
0019                  (       cocovtio.d):00465         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00466                      ENDC      
                      (       cocovtio.d):00467         
                      (       cocovtio.d):00468         *****************************************************************************
                      (       cocovtio.d):00469         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00470         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00471         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00472         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00473         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00474         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00475         *
                      (       cocovtio.d):00476         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00477         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00478                        ORG       V.SCF
001D                  (       cocovtio.d):00479         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (       cocovtio.d):00480         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (       cocovtio.d):00481         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (       cocovtio.d):00482         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (       cocovtio.d):00483         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (       cocovtio.d):00484         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (       cocovtio.d):00485         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (       cocovtio.d):00486         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (       cocovtio.d):00487         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (       cocovtio.d):00488         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (       cocovtio.d):00489         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (       cocovtio.d):00490         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (       cocovtio.d):00491                        RMB       1                   unused                                       $2A
002B                  (       cocovtio.d):00492         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (       cocovtio.d):00493         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (       cocovtio.d):00494         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (       cocovtio.d):00495         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (       cocovtio.d):00496         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (       cocovtio.d):00497         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (       cocovtio.d):00498         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (       cocovtio.d):00499         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (       cocovtio.d):00500         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (       cocovtio.d):00501         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (       cocovtio.d):00502         CC3Parm        RMB       128-.               global parameter area
0080                  (       cocovtio.d):00503         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (       cocovtio.d):00504         CC3DSiz        EQU       .
                      (       cocovtio.d):00505         
                      (       cocovtio.d):00506         *****************************************************************************
                      (       cocovtio.d):00507         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00508         * This area sits in system block 0 from $1000 to $10ff
     1000             (       cocovtio.d):00509         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00510                        ORG       0
0000                  (       cocovtio.d):00511         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (       cocovtio.d):00512         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (       cocovtio.d):00513         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (       cocovtio.d):00514         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00515         *g0003    rmb   2          NEW: UNUSED
0005                  (       cocovtio.d):00516         g0005          RMB       2                   Temp save in Windint RG
0007                  (       cocovtio.d):00517         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (       cocovtio.d):00518         G.MonTyp       RMB       1                   monitor type
     000A             (       cocovtio.d):00519         g000A          EQU       .                   Old label for compatibility
000A                  (       cocovtio.d):00520         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00521         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00522         *                           0=We are not on our device
                      (       cocovtio.d):00523         *                           1=We are the current device
                      (       cocovtio.d):00524         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00525         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00526         *                           If not current device, they don't.)
000B                  (       cocovtio.d):00527         G.WinType      RMB       1                   current device's V.TYPE
000C                  (       cocovtio.d):00528         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (       cocovtio.d):00529         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (       cocovtio.d):00530         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (       cocovtio.d):00531         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (       cocovtio.d):00532         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (       cocovtio.d):00533         G.BelVec       RMB       2                   BELL routine vector
0019                  (       cocovtio.d):00534         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (       cocovtio.d):00535         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (       cocovtio.d):00536         G.BelTnF       RMB       1                   BELL tone flag
001D                  (       cocovtio.d):00537         g001D          RMB       3
0020                  (       cocovtio.d):00538         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (       cocovtio.d):00539         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (       cocovtio.d):00540         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00541         *                           00000010 : VDGInt found
                      (       cocovtio.d):00542         *                           10000000 : GrfDrv found
0025                  (       cocovtio.d):00543         g0025          RMB       1
0026                  (       cocovtio.d):00544         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00545         *         IFEQ  TC9-true
                      (       cocovtio.d):00546         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00547         *         ELSE  
0027                  (       cocovtio.d):00548         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00549         *         ENDC  
0028                  (       cocovtio.d):00550         G.LKeyCd       RMB       1                   last keyboard code
0029                  (       cocovtio.d):00551         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00552         * A secondary 3 key table (same format as g002D below)
002A                  (       cocovtio.d):00553         G.2Key1        RMB       1                   $2A
002B                  (       cocovtio.d):00554         G.2Key2        RMB       1                   $2B
002C                  (       cocovtio.d):00555         G.2Key3        RMB       1
                      (       cocovtio.d):00556         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00557         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00558         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00559         * KeyFlag below.
002D                  (       cocovtio.d):00560         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (       cocovtio.d):00561         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (       cocovtio.d):00562         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (       cocovtio.d):00563         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (       cocovtio.d):00564         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (       cocovtio.d):00565         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00566         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00567         *                           %00111000-Row # (Input, 0-6)
0033                  (       cocovtio.d):00568         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (       cocovtio.d):00569         G.KySns        RMB       1                   key sense byte
0035                  (       cocovtio.d):00570         G.KySame       RMB       1                   same key flag
0036                  (       cocovtio.d):00571         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (       cocovtio.d):00572                        RMB       1
0038                  (       cocovtio.d):00573         g0038          RMB       1                   grfdrv initialized flag
0039                  (       cocovtio.d):00574                        RMB       2
003B                  (       cocovtio.d):00575         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (       cocovtio.d):00576         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (       cocovtio.d):00577         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (       cocovtio.d):00578         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (       cocovtio.d):00579         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (       cocovtio.d):00580         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (       cocovtio.d):00581         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00582         *         IFEQ  TC9-true
                      (       cocovtio.d):00583         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00584         *         ELSE  
0063                  (       cocovtio.d):00585         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00586         *         ENDC  
0064                  (       cocovtio.d):00587         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (       cocovtio.d):00588         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (       cocovtio.d):00589         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (       cocovtio.d):00590         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (       cocovtio.d):00591         G.CoTble       RMB       6                   co-module table ($68)
006E                  (       cocovtio.d):00592         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (       cocovtio.d):00593         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (       cocovtio.d):00594         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (       cocovtio.d):00595         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (       cocovtio.d):00596         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (       cocovtio.d):00597         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (       cocovtio.d):00598         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (       cocovtio.d):00599         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (       cocovtio.d):00600         g00BD          RMB       1                   Current screen type for work window table
00BE                  (       cocovtio.d):00601         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (       cocovtio.d):00602         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (       cocovtio.d):00603         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (       cocovtio.d):00604         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (       cocovtio.d):00605         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (       cocovtio.d):00606         G.MsSig        RMB       1                   mouse signal flag
00C7                  (       cocovtio.d):00607         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (       cocovtio.d):00608         g00D7          RMB       9
00E0                  (       cocovtio.d):00609         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (       cocovtio.d):00610         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (       cocovtio.d):00611         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (       cocovtio.d):00612         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (       cocovtio.d):00613         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (       cocovtio.d):00614         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00615         
                      (       cocovtio.d):00616         *****************************************************************************
                      (       cocovtio.d):00617         * GrfDrv global memory data definitions
                      (       cocovtio.d):00618         * This area sits in system block 0 from $1100 to $119E
     1100             (       cocovtio.d):00619         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00620                        ORG       0
0000                  (       cocovtio.d):00621         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (       cocovtio.d):00622         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (       cocovtio.d):00623         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (       cocovtio.d):00624         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (       cocovtio.d):00625         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (       cocovtio.d):00626         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (       cocovtio.d):00627         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (       cocovtio.d):00628         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (       cocovtio.d):00629         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (       cocovtio.d):00630         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00631         *                             overlay width has been copied
000B                  (       cocovtio.d):00632         gr000B         RMB       1
000C                  (       cocovtio.d):00633         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (       cocovtio.d):00634         gr000E         RMB       1
000F                  (       cocovtio.d):00635         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (       cocovtio.d):00636         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (       cocovtio.d):00637         gr0012         RMB       6
0018                  (       cocovtio.d):00638         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (       cocovtio.d):00639         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (       cocovtio.d):00640         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (       cocovtio.d):00641         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (       cocovtio.d):00642         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (       cocovtio.d):00643         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (       cocovtio.d):00644         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (       cocovtio.d):00645         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (       cocovtio.d):00646         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (       cocovtio.d):00647         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (       cocovtio.d):00648         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (       cocovtio.d):00649         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (       cocovtio.d):00650         gr002C         RMB       2
002E                  (       cocovtio.d):00651         gr002E         RMB       2                   current window table entry
0030                  (       cocovtio.d):00652         gr0030         RMB       2                   current screen table ptr
0032                  (       cocovtio.d):00653         gr0032         RMB       1                   Last block # we used for buffers
0033                  (       cocovtio.d):00654         gr0033         RMB       2                   Last offset we used for buffers
0035                  (       cocovtio.d):00655         gr0035         RMB       1                   group
0036                  (       cocovtio.d):00656         gr0036         RMB       2                   offset
0038                  (       cocovtio.d):00657         gr0038         RMB       1                   group returned (new)
0039                  (       cocovtio.d):00658         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (       cocovtio.d):00659         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (       cocovtio.d):00660         gr003B         RMB       2                   end of vars ptr?
003D                  (       cocovtio.d):00661         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (       cocovtio.d):00662         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (       cocovtio.d):00663         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (       cocovtio.d):00664         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (       cocovtio.d):00665         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (       cocovtio.d):00666         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (       cocovtio.d):00667         gr0047         RMB       2                   'Working' X coordinate
0049                  (       cocovtio.d):00668         gr0049         RMB       2                   'Working' Y coordinate
004B                  (       cocovtio.d):00669         gr004B         RMB       2                   current X
004D                  (       cocovtio.d):00670         gr004D         RMB       2                   current Y
004F                  (       cocovtio.d):00671         gr004F         RMB       2                   X Size (in bytes)
0051                  (       cocovtio.d):00672         gr0051         RMB       2                   Y Size (in bytes)
0053                  (       cocovtio.d):00673         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (       cocovtio.d):00674         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (       cocovtio.d):00675         gr0057         RMB       1                   group
0058                  (       cocovtio.d):00676         gr0058         RMB       1                   buffer #
0059                  (       cocovtio.d):00677         gr0059         RMB       1                   save switch for overlay
005A                  (       cocovtio.d):00678         gr005A         RMB       1                   PRN
005B                  (       cocovtio.d):00679         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (       cocovtio.d):00680         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (       cocovtio.d):00681         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (       cocovtio.d):00682         Gr.STYMk       RMB       1                   STY marker
0061                  (       cocovtio.d):00683         gr0061         RMB       1                   foreground RGB data
0062                  (       cocovtio.d):00684         gr0062         RMB       1                   background RGB data
0063                  (       cocovtio.d):00685         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (       cocovtio.d):00686         gr0064         RMB       2                   PSet vector
0066                  (       cocovtio.d):00687         gr0066         RMB       2                   pset offset
0068                  (       cocovtio.d):00688         gr0068         RMB       2                   LSet vector
006A                  (       cocovtio.d):00689         gr006A         RMB       2                   max X co-ordinate
006C                  (       cocovtio.d):00690         gr006C         RMB       2                   max Y co-ordinate
006E                  (       cocovtio.d):00691         gr006E         RMB       2                   X pixel count
0070                  (       cocovtio.d):00692         gr0070         RMB       2                   Y pixel count
0072                  (       cocovtio.d):00693         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (       cocovtio.d):00694         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (       cocovtio.d):00695         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (       cocovtio.d):00696         gr0077         RMB       2                   Vector for right direction FFill
0079                  (       cocovtio.d):00697         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (       cocovtio.d):00698         gr007A         RMB       2                   Vector for left direction FFill
007C                  (       cocovtio.d):00699         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (       cocovtio.d):00700         gr007D         RMB       1                   buffer block #
007E                  (       cocovtio.d):00701         gr007E         RMB       2                   buffer offset #
0080                  (       cocovtio.d):00702         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (       cocovtio.d):00703         gr0082         RMB       3                   3 byte extended screen address
0085                  (       cocovtio.d):00704         gr0085         RMB       2                   temp
0087                  (       cocovtio.d):00705         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (       cocovtio.d):00706         gr0097         RMB       1                   temp
0098                  (       cocovtio.d):00707         gr0098         RMB       1                   temp
                      (       cocovtio.d):00708         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (       cocovtio.d):00709         gr0099         RMB       2                   temp
                      (       cocovtio.d):00710         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (       cocovtio.d):00711         gr009B         RMB       1                   counter temp
009C                  (       cocovtio.d):00712         gr009C         RMB       1
009D                  (       cocovtio.d):00713         gr009D         RMB       2                   offset to buffer in block
009F                  (       cocovtio.d):00714         gr009F         RMB       1
00A0                  (       cocovtio.d):00715         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (       cocovtio.d):00716         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00717         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (       cocovtio.d):00718         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (       cocovtio.d):00719         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (       cocovtio.d):00720         gr00A7         RMB       2
00A9                  (       cocovtio.d):00721         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (       cocovtio.d):00722         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (       cocovtio.d):00723         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (       cocovtio.d):00724         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (       cocovtio.d):00725         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (       cocovtio.d):00726         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00727         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (       cocovtio.d):00728         gr00B3         RMB       1                   temp variable grfdrv
00B4                  (       cocovtio.d):00729         gr00B4         RMB       1                   temp variable grfdrv
00B5                  (       cocovtio.d):00730         gr00B5         RMB       1                   regW for grfdrv
00B6                  (       cocovtio.d):00731         gr00B6         RMB       1
00B7                  (       cocovtio.d):00732         gr00B7         RMB       2
00B9                  (       cocovtio.d):00733         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (       cocovtio.d):00734         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (       cocovtio.d):00735         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (       cocovtio.d):00736         gr00BF         RMB       256-.
                      (       cocovtio.d):00737         * GPLoad buffer - $1200 in system block 0
0100                  (       cocovtio.d):00738         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (       cocovtio.d):00739         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00740         
                      (       cocovtio.d):00741         *****************************************************************************
                      (       cocovtio.d):00742         * Window table entry structure
                      (       cocovtio.d):00743         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00744         * including any overlay windows.
     0020             (       cocovtio.d):00745         MaxWind        EQU       32                  maximum allowable window tables
     1290             (       cocovtio.d):00746         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00747                        ORG       -$10
FFF0                  (       cocovtio.d):00748         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (       cocovtio.d):00749         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (       cocovtio.d):00750         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (       cocovtio.d):00751         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (       cocovtio.d):00752         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (       cocovtio.d):00753         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (       cocovtio.d):00754         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (       cocovtio.d):00755         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (       cocovtio.d):00756         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (       cocovtio.d):00757         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (       cocovtio.d):00758         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (       cocovtio.d):00759         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (       cocovtio.d):00760         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (       cocovtio.d):00761         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (       cocovtio.d):00762         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (       cocovtio.d):00763         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (       cocovtio.d):00764         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (       cocovtio.d):00765         Wt.Back        RMB       1                   background palette #                         $07
0008                  (       cocovtio.d):00766         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (       cocovtio.d):00767         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (       cocovtio.d):00768         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (       cocovtio.d):00769         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (       cocovtio.d):00770         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (       cocovtio.d):00771         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (       cocovtio.d):00772         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (       cocovtio.d):00773         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (       cocovtio.d):00774         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (       cocovtio.d):00775         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (       cocovtio.d):00776         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (       cocovtio.d):00777         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (       cocovtio.d):00778         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (       cocovtio.d):00779         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (       cocovtio.d):00780         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (       cocovtio.d):00781         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (       cocovtio.d):00782         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (       cocovtio.d):00783         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (       cocovtio.d):00784         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00785         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00786         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00787         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00788         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00789         *       sizes for control+content regions
0026                  (       cocovtio.d):00790         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (       cocovtio.d):00791         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (       cocovtio.d):00792         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (       cocovtio.d):00793         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (       cocovtio.d):00794         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (       cocovtio.d):00795         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00796         
                      (       cocovtio.d):00797         *****************************************************************************
                      (       cocovtio.d):00798         * Screen table entrys
                      (       cocovtio.d):00799         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00800         
     0010             (       cocovtio.d):00801         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (       cocovtio.d):00802         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00803                        ORG       0
0000                  (       cocovtio.d):00804         St.Sty         RMB       1                   Screen type                         $00
0001                  (       cocovtio.d):00805         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (       cocovtio.d):00806         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (       cocovtio.d):00807         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (       cocovtio.d):00808         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (       cocovtio.d):00809         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (       cocovtio.d):00810         St.Back        RMB       1                   Background palette register #       $07
0008                  (       cocovtio.d):00811         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (       cocovtio.d):00812         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00813         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00814         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00815         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00816         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (       cocovtio.d):00817         St.Pals        RMB       16                  Palette register contents           $10
     0020             (       cocovtio.d):00818         St.Siz         EQU       .
                      (       cocovtio.d):00819         
                      (       cocovtio.d):00820         *****************************************************************************
                      (       cocovtio.d):00821         * Graphics buffer tables
                      (       cocovtio.d):00822         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00823         * data.
                      (       cocovtio.d):00824                        ORG       0
0000                  (       cocovtio.d):00825         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (       cocovtio.d):00826         Grf.Off        RMB       2                   back block header offset            $01
0003                  (       cocovtio.d):00827         Grf.Grp        RMB       1                   group #                             $03
0004                  (       cocovtio.d):00828         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (       cocovtio.d):00829         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (       cocovtio.d):00830         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (       cocovtio.d):00831         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (       cocovtio.d):00832         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (       cocovtio.d):00833         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (       cocovtio.d):00834         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (       cocovtio.d):00835         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (       cocovtio.d):00836         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (       cocovtio.d):00837         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (       cocovtio.d):00838         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00839         
                      (       cocovtio.d):00840         *****************************************************************************
                      (       cocovtio.d):00841         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00842         * $1075-$0176
                      (       cocovtio.d):00843         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00844                        ORG       0
0000                  (       cocovtio.d):00845         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (       cocovtio.d):00846         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (       cocovtio.d):00847         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (       cocovtio.d):00848         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (       cocovtio.d):00849         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (       cocovtio.d):00850         Gt.BClr        RMB       1                   Background color                               $08
0009                  (       cocovtio.d):00851         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (       cocovtio.d):00852         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (       cocovtio.d):00853         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (       cocovtio.d):00854         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (       cocovtio.d):00855         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (       cocovtio.d):00856         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (       cocovtio.d):00857         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (       cocovtio.d):00858         GTabSz         EQU       .
                      (       cocovtio.d):00859         
                      (       cocovtio.d):00860         *****************************************************************************
                      (       cocovtio.d):00861         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00862         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00863         * WindInt.
                      (       cocovtio.d):00864         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00865         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00866         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00867                        ORG       $0240
0240                  (       cocovtio.d):00868                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (       cocovtio.d):00869                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (       cocovtio.d):00870                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (       cocovtio.d):00871                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00872         
                      (       cocovtio.d):00873         *****************************************************************************
                      (       cocovtio.d):00874         * WindInt menu handling table entry definition
                      (       cocovtio.d):00875                        ORG       0
0000                  (       cocovtio.d):00876         MnuXNum        RMB       1                   menu #
0001                  (       cocovtio.d):00877         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (       cocovtio.d):00878         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (       cocovtio.d):00879                        RMB       1                   unused?
     0004             (       cocovtio.d):00880         MnuHSiz        EQU       .
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Character binary switches
     0080             (       cocovtio.d):00884         TChr           EQU       %10000000           transparent characters
     0040             (       cocovtio.d):00885         Under          EQU       %01000000           underline characters
     0020             (       cocovtio.d):00886         Bold           EQU       %00100000           bold characters
     0010             (       cocovtio.d):00887         Prop           EQU       %00010000           proportional spacing of characters
     0008             (       cocovtio.d):00888         Scale          EQU       %00001000           automatic window scaling
     0004             (       cocovtio.d):00889         Invers         EQU       %00000100           inverse characters
     0002             (       cocovtio.d):00890         NoCurs         EQU       %00000010           no cursor display
     0001             (       cocovtio.d):00891         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00892         
                      (       cocovtio.d):00893         *****************************************************************************
                      (       cocovtio.d):00894         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (       cocovtio.d):00895         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00896         *         equ   1          640x200x2
                      (       cocovtio.d):00897         *         equ   2          320x200x4
                      (       cocovtio.d):00898         *         equ   3          640x200x4
                      (       cocovtio.d):00899         *         equ   4          320x200x16
                      (       cocovtio.d):00900         *         equ   $85        80 column text
                      (       cocovtio.d):00901         *         equ   $86        40 column text
                      (       cocovtio.d):00902         
                      (       cocovtio.d):00903         *************************************
                      (       cocovtio.d):00904         * Window default palette color codes
                      (       cocovtio.d):00905         *
                      (       cocovtio.d):00906                        ORG       0
0000                  (       cocovtio.d):00907         White.         RMB       1
0001                  (       cocovtio.d):00908         Blue.          RMB       1
0002                  (       cocovtio.d):00909         Black.         RMB       1
0003                  (       cocovtio.d):00910         Green.         RMB       1
0004                  (       cocovtio.d):00911         Red.           RMB       1
0005                  (       cocovtio.d):00912         Yellow.        RMB       1
0006                  (       cocovtio.d):00913         Magenta.       RMB       1
0007                  (       cocovtio.d):00914         Cyan.          RMB       1
                      (       cocovtio.d):00915         
                      (       cocovtio.d):00916                        ENDC      
                      (       cocovtio.d):00917                        ENDC      
                      (/home/strick/go/s):00317                  endc
                      (/home/strick/go/s):00318         
     4000             (/home/strick/go/s):00319         GrfStrt  equ   $4000          Position of GRFDRV in it's own task
                      (/home/strick/go/s):00320         
     00C1             (/home/strick/go/s):00321         tylg     set   Systm+Objct
     0081             (/home/strick/go/s):00322         atrv     set   ReEnt+rev
     0001             (/home/strick/go/s):00323         rev      set   $01
     000E             (/home/strick/go/s):00324         edition  equ   14
                      (/home/strick/go/s):00325         
                      (/home/strick/go/s):00326         * NOTE: Following set has meaning only if 25 text line mode is selected
     0000             (/home/strick/go/s):00327         TV       set   $00            Set to 1 for 25 line TV res. (200 vs. 225)
                      (/home/strick/go/s):00328         
0000 87CD2332000EC181 (/home/strick/go/s):00329                  mod   eom,name,tylg,atrv,entry,size
     EA00150000
     0000             (/home/strick/go/s):00330         size     equ   .
                      (/home/strick/go/s):00331         
000D 07               (/home/strick/go/s):00332                  fcb   $07 
                      (/home/strick/go/s):00333         
000E 4772664472F6     (/home/strick/go/s):00334         name     fcs   /GrfDrv/
0014 0E               (/home/strick/go/s):00335                  fcb   edition
                      (/home/strick/go/s):00336         
                      (/home/strick/go/s):00337         ******************************
                      (/home/strick/go/s):00338         * Main entry point
                      (/home/strick/go/s):00339         *   Entry: B=Internal function code (from CoGRF or CoWin)
                      (/home/strick/go/s):00340         *          A=Character (for Write routine)
                      (/home/strick/go/s):00341         *          U=Pointer to GRFDRV memory area ($1100 in system)
                      (/home/strick/go/s):00342         *          Y=Current window Window Table Pointer
                      (/home/strick/go/s):00343         *    Stack area is from $1b80 to $1fff in block 0
                      (/home/strick/go/s):00344         *   When function call vector is executed via JMP ,X
                      (/home/strick/go/s):00345         *     DP has been set to $11 to allow direct page access to GRFDRV variables
                      (/home/strick/go/s):00346         
                      (/home/strick/go/s):00347         
     0015             (/home/strick/go/s):00348         entry    equ   *
                      (/home/strick/go/s):00349                  IFNE  H6309
                      (/home/strick/go/s):00350                  lde   #GrfMem/256         Direct page for GrfDrv
                      (/home/strick/go/s):00351                  tfr   e,dp
                      (/home/strick/go/s):00352                  ELSE
0015 3402             (/home/strick/go/s):00353                  pshs  a
0017 8611             (/home/strick/go/s):00354                  lda   #GrfMem/256
0019 1F8B             (/home/strick/go/s):00355                  tfr   a,dp
001B 3502             (/home/strick/go/s):00356                  puls  a
                      (/home/strick/go/s):00357                  ENDC
001D 5D               (/home/strick/go/s):00358                  tstb               initialization?
001E 2602             (/home/strick/go/s):00359                  bne   grfdrv.1     no, do other stuff
0020 205D             (/home/strick/go/s):00360                  bra   L0080        do relative jump to the init routine
                      (/home/strick/go/s):00361         
0022 8E4027           (/home/strick/go/s):00362         grfdrv.1 ldx   #GrfStrt+L0028   Point to function vector table
0025 6E95             (/home/strick/go/s):00363                  jmp   [b,x]        Execute function
                      (/home/strick/go/s):00364         
                      (/home/strick/go/s):00365         * GrfDrv function code vector table
0027 407F             (/home/strick/go/s):00366         L0028    fdb   L0080+GrfStrt  Initialization ($00)
0029 40F4             (/home/strick/go/s):00367                  fdb   L0104+GrfStrt  Terminate      ($02)
002B 4167             (/home/strick/go/s):00368                  fdb   L019D+GrfStrt  DWSet          ($04)
002D 508D             (/home/strick/go/s):00369                  fdb   fast.chr+GrfStrt  buffered writes... ($06)
002F 440B             (/home/strick/go/s):00370                  fdb   L03CB+GrfStrt  DWEnd          ($08)
0031 44AD             (/home/strick/go/s):00371                  fdb   L046A+GrfStrt  OWSet          ($0A)
0033 456B             (/home/strick/go/s):00372                  fdb   L053A+GrfStrt  OWEnd          ($0C)
0035 459F             (/home/strick/go/s):00373                  fdb   L056E+GrfStrt  CWArea         ($0E)
0037 47A9             (/home/strick/go/s):00374                  fdb   L07D7+GrfStrt  Select         ($10)
0039 4692             (/home/strick/go/s):00375                  fdb   L0611+GrfStrt  PSet           ($12)
003B 0000             (/home/strick/go/s):00376                  fdb   $0000          Border         ($14) NOW IN CoWin
003D 0000             (/home/strick/go/s):00377                  fdb   $0000          Palette        ($16) NOW IN CoWin
003F 46B8             (/home/strick/go/s):00378                  fdb   L063C+GrfStrt  Font           ($18)
0041 4705             (/home/strick/go/s):00379                  fdb   L068B+GrfStrt  GCSet          ($1A)
0043 0000             (/home/strick/go/s):00380                  fdb   $0000          DefColor       ($1C) NOW IN CoWin
0045 58AE             (/home/strick/go/s):00381                  fdb   L06A4+GrfStrt  LSet           ($1E)
0047 471E             (/home/strick/go/s):00382                  fdb   L0707+GrfStrt  FColor         ($20)
0049 473C             (/home/strick/go/s):00383                  fdb   L0726+GrfStrt  BColor         ($22)
004B 0000             (/home/strick/go/s):00384                  fdb   $0000          TChrSW         ($24) NOW IN CoWin
004D 0000             (/home/strick/go/s):00385                  fdb   $0000          PropSW         ($26) NOW IN CoWin
004F 0000             (/home/strick/go/s):00386                  fdb   $0000          Scale          ($28) NOW IN CoWin
0051 0000             (/home/strick/go/s):00387                  fdb   $0000          Bold           ($2A) NOW IN CoWin
0053 48BA             (/home/strick/go/s):00388                  fdb   L08DC+GrfStrt  DefGB          ($2C)
0055 4A13             (/home/strick/go/s):00389                  fdb   L0A3A+GrfStrt  KillBuf        ($2E)
0057 4B11             (/home/strick/go/s):00390                  fdb   L0B3F+GrfStrt  GPLoad         ($30)
0059 4B4D             (/home/strick/go/s):00391                  fdb   L0B79+GrfStrt  Move buffer    ($32)
005B 4BB8             (/home/strick/go/s):00392                  fdb   L0BAE+GrfStrt  GetBlk         ($34)
005D 4D16             (/home/strick/go/s):00393                  fdb   L0CBB+GrfStrt  PutBlk         ($36)
005F 501C             (/home/strick/go/s):00394                  fdb   L0F31+GrfStrt  Map GP buffer  ($38)
0061 5174             (/home/strick/go/s):00395                  fdb   L0F4B+GrfStrt  Alpha put      ($3A)
0063 53E7             (/home/strick/go/s):00396                  fdb   L1129+GrfStrt  Control codes  ($3C)
0065 576C             (/home/strick/go/s):00397                  fdb   L116E+GrfStrt  Cursor on/off  ($3E)
0067 56E7             (/home/strick/go/s):00398                  fdb   L1478+GrfStrt  $1f codes      ($40)
0069 53AD             (/home/strick/go/s):00399                  fdb   L1186+GrfStrt  Goto X/Y       ($42)
006B 5795             (/home/strick/go/s):00400                  fdb   L151B+GrfStrt  PutGC          ($44)
006D 577B             (/home/strick/go/s):00401                  fdb   L1500+GrfStrt  Update Cursors ($46)
006F 5909             (/home/strick/go/s):00402                  fdb   L1635+GrfStrt  Point          ($48)
0071 592B             (/home/strick/go/s):00403                  fdb   L1654+GrfStrt  Line           ($4A)
0073 5B31             (/home/strick/go/s):00404                  fdb   L1790+GrfStrt  Box            ($4C)
0075 5B7B             (/home/strick/go/s):00405                  fdb   L17FB+GrfStrt  Bar            ($4E)
0077 5BC5             (/home/strick/go/s):00406                  fdb   L1856+GrfStrt  Circle         ($50)
0079 5C39             (/home/strick/go/s):00407                  fdb   L18BD+GrfStrt  Ellipse        ($52)
007B 5BCF             (/home/strick/go/s):00408                  fdb   L1860+GrfStrt  Arc            ($54)
007D 6008             (/home/strick/go/s):00409                  fdb   L1C4F+GrfStrt  FFill          ($56)
                      (/home/strick/go/s):00410         
                      (/home/strick/go/s):00411         * Initialization entry point
                      (/home/strick/go/s):00412         * Entry: U=$1100
                      (/home/strick/go/s):00413         *       DP=$11
                      (/home/strick/go/s):00414         *        B=$00
007F F61038           (/home/strick/go/s):00415         L0080    ldb   >WGlobal+g0038       have we been initialized?
0082 2B6C             (/home/strick/go/s):00416                  bmi   L0102                yes, exit
0084 43               (/home/strick/go/s):00417                  coma 
0085 B71038           (/home/strick/go/s):00418                  sta   >WGlobal+g0038       Put it back
                      (/home/strick/go/s):00419         * Initialize window entries
0088 8E1280           (/home/strick/go/s):00420                  ldx   #WinBase-$10 Point to start of window tbl entries
                      (/home/strick/go/s):00421                  IFNE  H6309
                      (/home/strick/go/s):00422                  ldq   #$2040FFFF   Max # window/size of each entry/Table init code
008B                  (/home/strick/go/s):00423         L0097    stw   ,x           Initialize table pointer
                      (/home/strick/go/s):00424                  abx                Move to next entry
                      (/home/strick/go/s):00425                  deca               Done?
                      (/home/strick/go/s):00426                  bne   L0097        No keep going
                      (/home/strick/go/s):00427                  ELSE
008B 3440             (/home/strick/go/s):00428                  pshs  u
008D CC2040           (/home/strick/go/s):00429                  ldd   #$2040
0090 CEFFFF           (/home/strick/go/s):00430                  ldu   #$FFFF
0093 EF84             (/home/strick/go/s):00431         L0097    stu   ,x
0095 3A               (/home/strick/go/s):00432                  abx
0096 4A               (/home/strick/go/s):00433                  deca
0097 26FA             (/home/strick/go/s):00434                  bne   L0097
0099 DFB5             (/home/strick/go/s):00435                  stu   <$B5
009B 3540             (/home/strick/go/s):00436                  puls  u
                      (/home/strick/go/s):00437                  ENDC
                      (/home/strick/go/s):00438         * Initialize screen tables
009D 8E1A81           (/home/strick/go/s):00439                  ldx   #STblBse+1   Point to 2nd byte of scrn tbls - 1st block # used
00A0 CC1020           (/home/strick/go/s):00440                  ldd   #$1020       smaller than the ldb/lde
                      (/home/strick/go/s):00441         * ATD: doing CLR is slightly slower than STA, but this code is executed only
                      (/home/strick/go/s):00442         * once, so we optimize for size, not speed
00A3 6F84             (/home/strick/go/s):00443         L00A9    clr   ,x           Set first block # used (A=0 from L0097 loop)
00A5 3A               (/home/strick/go/s):00444                  abx                Move to next entry
00A6 4A               (/home/strick/go/s):00445                  deca               Done?
00A7 26FA             (/home/strick/go/s):00446                  bne   L00A9        No, keep goin
                      (/home/strick/go/s):00447         * Initialize DAT image
00A9 5F               (/home/strick/go/s):00448                  clrb               Set System bank as first one (a already 0)
00AA DD87             (/home/strick/go/s):00449                  std   <$87
                      (/home/strick/go/s):00450                  IFNE  H6309
                      (/home/strick/go/s):00451                  ldq   #$333E333E   Get blank image
                      (/home/strick/go/s):00452                  std   <$89           Save it in rest 
                      (/home/strick/go/s):00453         * NOTE: IF 16K GRFDRV DONE,CHANGE FOLLOWING LINE TO STD <$8F
                      (/home/strick/go/s):00454         * Set entire table as this will be reset below as needed. RG.
                      (/home/strick/go/s):00455                  stq   <$8D
                      (/home/strick/go/s):00456                  stq   <$91
                      (/home/strick/go/s):00457                  std   <$95
                      (/home/strick/go/s):00458                  ELSE
00AC CC333E           (/home/strick/go/s):00459                  ldd   #$333E     Since 6809 version is >8K save some steps
00AF DD89             (/home/strick/go/s):00460                  std   <$89
00B1 DD8F             (/home/strick/go/s):00461                  std   <$8F
00B3 DD91             (/home/strick/go/s):00462                  std   <$91
00B5 DD93             (/home/strick/go/s):00463                  std   <$93
00B7 DD95             (/home/strick/go/s):00464                  std   <$95
                      (/home/strick/go/s):00465         *         std   <$B5
                      (/home/strick/go/s):00466                  ENDC
00B9 1F50             (/home/strick/go/s):00467                  tfr   pc,d           Get current location in memory
00BB 44               (/home/strick/go/s):00468                  lsra                 Calculate DAT image offset
00BC 44               (/home/strick/go/s):00469                  lsra  
00BD 44               (/home/strick/go/s):00470                  lsra  
00BE 44               (/home/strick/go/s):00471                  lsra  
00BF 840E             (/home/strick/go/s):00472                  anda  #$0E           Mask off rest of bits
00C1 10BE004A         (/home/strick/go/s):00473                  ldy   >D.SysPrc      Get system process descriptor pointer
00C5 31A840           (/home/strick/go/s):00474                  leay  <P$DATImg,y    Point to DAT Image
                      (/home/strick/go/s):00475         * NOTE: IF 16K GRFDRV DONE,WILL HAVE TO COPY 4 (NOT 2) BYTES OF DAT IMAGE
                      (/home/strick/go/s):00476                  IFNE  H6309
                      (/home/strick/go/s):00477                  ldd   a,y            Get the DAT image of myself
                      (/home/strick/go/s):00478                  std   <$8B           Save it to new task
                      (/home/strick/go/s):00479                  ELSE
00C8 31A6             (/home/strick/go/s):00480                  leay   a,y
00CA ECA1             (/home/strick/go/s):00481                  ldd   ,y++
00CC DD8B             (/home/strick/go/s):00482                  std   <$8B
00CE ECA4             (/home/strick/go/s):00483                  ldd   ,y             get next two bytes
00D0 DD8D             (/home/strick/go/s):00484                  std   <$8D
                      (/home/strick/go/s):00485                  ENDC
00D2 10BE00A1         (/home/strick/go/s):00486                  ldy   >D.TskIPt      Get task image pointer
00D6 8E1187           (/home/strick/go/s):00487                  ldx   #GrfMem+gr0087         Point to grfdrv DAT image tbl
00D9 AF22             (/home/strick/go/s):00488                  stx   2,y            Save it as second task
                      (/home/strick/go/s):00489         * ATD: changed from $1C98 for more lee-way on the stack
00DB CC1CB0           (/home/strick/go/s):00490                  ldd   #$1CB0         low address for stack: L1DC4, L1DEE
00DE DD3B             (/home/strick/go/s):00491                  std   <$3B           Save in GRFDRV mem
                      (/home/strick/go/s):00492                  IFNE  H6309
                      (/home/strick/go/s):00493                  clrd                 Get screen table initialization
                      (/home/strick/go/s):00494                  clrw                 (CLRQ)
                      (/home/strick/go/s):00495                  stq   <$2e           Init current screen table ptr & window entry
                      (/home/strick/go/s):00496                  stq   <$3d           Init X/Y coords Gfx cursor was last ON at
                      (/home/strick/go/s):00497                  ELSE
00E0 4F               (/home/strick/go/s):00498                  clra
00E1 5F               (/home/strick/go/s):00499                  clrb
00E2 DD2E             (/home/strick/go/s):00500                  std   <$2e
00E4 DD30             (/home/strick/go/s):00501                  std   <$30
00E6 DD3D             (/home/strick/go/s):00502                  std   <$3d
00E8 DD3F             (/home/strick/go/s):00503                  std   <$3f
                      (/home/strick/go/s):00504         *         std   <$B5
                      (/home/strick/go/s):00505                  ENDC
00EA D732             (/home/strick/go/s):00506                  stb   <$32           Clear out block #'s for G/P buffer (Current,
00EC D735             (/home/strick/go/s):00507                  stb   <$35            previous)
00EE DD39             (/home/strick/go/s):00508                  std   <$39           Text cursor & gfx cursors off
00F0 4F               (/home/strick/go/s):00509         L0102    clra
00F1 1F8B             (/home/strick/go/s):00510                  tfr   a,dp           Set DP to 0 for Wind/CoGrf, which need it there
00F3 39               (/home/strick/go/s):00511                  rts                  Return
                      (/home/strick/go/s):00512         
                      (/home/strick/go/s):00513         * Termination routine
00F4 0F38             (/home/strick/go/s):00514         L0104    clr   <$0038         Clear group #
00F6 0F7D             (/home/strick/go/s):00515                  clr   <$007D         Clear buffer block #
00F8 D632             (/home/strick/go/s):00516                  ldb   <$0032         Get last block used
00FA 270A             (/home/strick/go/s):00517                  beq   L0115          If 0, return to system
00FC 9E33             (/home/strick/go/s):00518                  ldx   <$0033         Get offset into last block we used
00FE 17092D           (/home/strick/go/s):00519                  lbsr  L0A55          Deallocate that buffer
0101 24F1             (/home/strick/go/s):00520                  bcc   L0104          Keep doing until all are deallocated
0103 7E5177           (/home/strick/go/s):00521                  jmp   >GrfStrt+SysRet Return to system with error if can't
0106 7E5176           (/home/strick/go/s):00522         L0115    jmp   >GrfStrt+L0F78 Exit system
                      (/home/strick/go/s):00523         
                      (/home/strick/go/s):00524         * Setup GrfDrv memory with data from current window table
                      (/home/strick/go/s):00525         * Entry: Y=Window table ptr
                      (/home/strick/go/s):00526         * Puts in following:
                      (/home/strick/go/s):00527         *   PSET/LSET vectors & offsets
                      (/home/strick/go/s):00528         *   Foreground/background palettes
                      (/home/strick/go/s):00529         *   Maximum X&Y coords for window
                      (/home/strick/go/s):00530         *   Screen type
                      (/home/strick/go/s):00531         *   Start block # of screen
                      (/home/strick/go/s):00532         *   # bytes / row of text
                      (/home/strick/go/s):00533         * NOTE: USING A 2 BYTE FREE MEMORY LOCATION SOMEWHERE IN BLOCK 0, KEEP A
                      (/home/strick/go/s):00534         *  'LAST WINDOW' ACCESSED COPY OF THE WINDOW TABLE PTR. IF IT HAS NOT CHANGED
                      (/home/strick/go/s):00535         *  WHEN IT GETS HERE (OR WHATEVER CALLS HERE) FROM THE 'LAST WINDOW' ACCESSED,
                      (/home/strick/go/s):00536         *  SKIP THIS ENTIRE ROUTINE
0109 0FA9             (/home/strick/go/s):00537         L0129    clr   <$A9         Special entry pt for DWSet,Select,UpdtWin,PutGC
010B AE30             (/home/strick/go/s):00538         L012B    ldx   Wt.STbl,y    Get screen table ptr
010D 3406             (/home/strick/go/s):00539                  pshs  d            Preserve register
010F ECA816           (/home/strick/go/s):00540                  ldd   Wt.PVec,y    Get PSet vector for this window
                      (/home/strick/go/s):00541                  IFNE  H6309
                      (/home/strick/go/s):00542                  ldw   Wt.POff,y    Get PSet offset for this window
                      (/home/strick/go/s):00543                  stq   <$64         Save Pset vector & PSet offset
                      (/home/strick/go/s):00544                  ELSE
0112 DD64             (/home/strick/go/s):00545                  std   <$64
0114 EC2F             (/home/strick/go/s):00546                  ldd   Wt.POff,y
0116 DD66             (/home/strick/go/s):00547                  std   <$66
                      (/home/strick/go/s):00548                  ENDC
0118 ECA814           (/home/strick/go/s):00549                  ldd   Wt.LVec,y    Get LSet vector
011B DD68             (/home/strick/go/s):00550                  std   <$68         Save it for this window
011D EC26             (/home/strick/go/s):00551                  ldd   Wt.Fore,y    Get Foreground/Background prn
011F DD61             (/home/strick/go/s):00552                  std   <$61         Save it for this window
                      (/home/strick/go/s):00553                  IFNE  H6309
                      (/home/strick/go/s):00554                  ldq   Wt.MaxX,y    Get max. X & Y coords from table
                      (/home/strick/go/s):00555                  stq   <$6A         Save in Grfdrv mem
                      (/home/strick/go/s):00556                  ELSE
0121 ECA81B           (/home/strick/go/s):00557                  ldd   Wt.MaxX,y
0124 DD6A             (/home/strick/go/s):00558                  std   <$6A
0126 ECA81D           (/home/strick/go/s):00559                  ldd   Wt.MaxX+2,y
0129 DD6C             (/home/strick/go/s):00560                  std   <$6C
012B DDB5             (/home/strick/go/s):00561                  std   <$B5
                      (/home/strick/go/s):00562                  ENDC
012D A604             (/home/strick/go/s):00563                  lda   St.BRow,x    Get # bytes per row
012F 9763             (/home/strick/go/s):00564                  sta   <$63         Save it for this window
0131 EC84             (/home/strick/go/s):00565                  ldd   St.Sty,x     Get screen type & first block #
0133 9760             (/home/strick/go/s):00566                  sta   <$60         Save screen type for this window
                      (/home/strick/go/s):00567         * Setup Task 1 MMU for Window: B=Start block # of window
                      (/home/strick/go/s):00568         *   As above, may check start block # to see if our 4 blocks are already
                      (/home/strick/go/s):00569         *   mapped in (just check block # in B with block # in 1st DAT entry).
                      (/home/strick/go/s):00570         *   Since 4 blocks are always mapped in, we know the rest is OK
                      (/home/strick/go/s):00571         * This routine always maps 4 blocks in even if it is only a text window
                      (/home/strick/go/s):00572         * which only has to map 1 block. Slight opt (2 cycles) done 03/01/93
                      (/home/strick/go/s):00573         * Attempted opt: cmpb/beq noneed 03/12/93
0135 D190             (/home/strick/go/s):00574         MMUOnly  cmpb  <$90         Is our screen block set already here?
0137 271C             (/home/strick/go/s):00575                  beq   noneed       Yes, don't bother doing it again
0139 4F               (/home/strick/go/s):00576                  clra               Get block type for DAT image
013A DD8F             (/home/strick/go/s):00577                  std   <$8f         Save screen start in my image
013C F7FFAC           (/home/strick/go/s):00578                  stb   >$FFAC       Save 1st screen block to MMU
                      (/home/strick/go/s):00579         
013F 0D60             (/home/strick/go/s):00580                  tst   <$60         Hardware text (only 1 block needed?)
0141 2B12             (/home/strick/go/s):00581                  bmi   noneed       yes, no need to map in the rest of the blocks
                      (/home/strick/go/s):00582         
0143 5C               (/home/strick/go/s):00583                  incb               Get 2nd block
0144 DD91             (/home/strick/go/s):00584                  std   <$91         Save it in my image
0146 F7FFAD           (/home/strick/go/s):00585                  stb   >$FFAD       Save it to MMU
0149 5C               (/home/strick/go/s):00586                  incb               Get 3rd block
014A DD93             (/home/strick/go/s):00587                  std   <$93         Save it to my image
014C F7FFAE           (/home/strick/go/s):00588                  stb   >$FFAE       Save it to MMU
014F 5C               (/home/strick/go/s):00589                  incb               Get 4th block
0150 DD95             (/home/strick/go/s):00590                  std   <$95         Save it to my image
0152 F7FFAF           (/home/strick/go/s):00591                  stb   >$FFAF       Save it to MMU
0155 3586             (/home/strick/go/s):00592         noneed   puls  d,pc         Restore D & return
                      (/home/strick/go/s):00593         
                      (/home/strick/go/s):00594         * Setup the MMU only: called twice from the screen setup routines
                      (/home/strick/go/s):00595         * This could be just before MMUOnly, with a 'fcb $8C' just before the PSHS
                      (/home/strick/go/s):00596         * to save one more byte, but L0129 is called a lot more often than this is
0157 3406             (/home/strick/go/s):00597         L0173    pshs  d            save our registers
0159 20DA             (/home/strick/go/s):00598                  bra   MMUOnly      go set up the MMU registers, if necessary
                      (/home/strick/go/s):00599         
                      (/home/strick/go/s):00600         * Entry point for Alpha Put
015B 109CA9           (/home/strick/go/s):00601         L0175    cmpy  <$A9         Same as previous window GRFDRV alpha putted to?
015E 10271624         (/home/strick/go/s):00602                  lbeq  L150C        Yes, skip map/setup, update cursors
                      (/home/strick/go/s):00603         * Normal entry point
0162 8DA5             (/home/strick/go/s):00604         L0177    bsr   L0129        Mark Tbl Ptr bad, map in window,set up GRFDRV vars for it
0164 7E5786           (/home/strick/go/s):00605         L0179    jmp   >GrfStrt+L150C Update text & gfx cursors if needed
                      (/home/strick/go/s):00606         
                      (/home/strick/go/s):00607         * DWSet routine
                      (/home/strick/go/s):00608         * ATD: Next 9 lines added to support multiple-height screens.
                      (/home/strick/go/s):00609         * We MUST have a screen table in order to do St.ScSiz checks (24, 25, 28).
                      (/home/strick/go/s):00610         * GrfDrv is a kernel task (not task switched), so we point X to the possible
                      (/home/strick/go/s):00611         * screen table
0167 AE30             (/home/strick/go/s):00612         L019D    ldx   Wt.STbl,y    get screen table
0169 2A07             (/home/strick/go/s):00613                  bpl   L01A0        $FFFF is a flag saying it's unallocated
016B 170112           (/home/strick/go/s):00614                  lbsr  FScrTbl      find a screen table
016E 2528             (/home/strick/go/s):00615                  bcs   L01C5        exit on error
0170 6F08             (/home/strick/go/s):00616                  clr   St.ScSiz,x   clear screen size flag: not defined yet
                      (/home/strick/go/s):00617         
0172 8D27             (/home/strick/go/s):00618         L01A0    bsr   L01C8        Check coordinates and size
0174 2522             (/home/strick/go/s):00619                  bcs   L01C5        Error, exit
0176 9660             (/home/strick/go/s):00620                  lda   <$60         Get screen type requested
0178 81FF             (/home/strick/go/s):00621                  cmpa  #$FF         Current screen?
017A 2609             (/home/strick/go/s):00622                  bne   L01B0        No, go create a new screen for the window
017C 8D5F             (/home/strick/go/s):00623                  bsr   L01FB        Make sure window can be fit on current screen
017E 2518             (/home/strick/go/s):00624                  bcs   L01C5        Nope, return with error
0180 171603           (/home/strick/go/s):00625                  lbsr  L150C        Update Text & Gfx cursors
0183 2005             (/home/strick/go/s):00626                  bra   L01B5        Do hardware setup for new window & return to system
                      (/home/strick/go/s):00627         
                      (/home/strick/go/s):00628         * Make window on new screen : have to change so it sets up defaults & colors
                      (/home/strick/go/s):00629         * BEFORE it clears the screen
0185 1700C8           (/home/strick/go/s):00630         L01B0    lbsr  L0268        Go set up a new screen table (INCLUDES CLR SCRN)
0188 250E             (/home/strick/go/s):00631                  bcs   L01C5        If error, return to system with that error
                      (/home/strick/go/s):00632         * All window creates come here
     018A             (/home/strick/go/s):00633         L01B5    equ   *
                      (/home/strick/go/s):00634                  IFNE  H6309
                      (/home/strick/go/s):00635                  bsr   L0129        go setup data & MMU for new window
                      (/home/strick/go/s):00636                  ELSE
018A 17FF7C           (/home/strick/go/s):00637                  lbsr  L0129
                      (/home/strick/go/s):00638                  ENDC
018D 170229           (/home/strick/go/s):00639                  lbsr  L0366        setup default values
0190 86FF             (/home/strick/go/s):00640                  lda   #$FF         Change back window# link to indicate there is none
0192 A732             (/home/strick/go/s):00641                  sta   Wt.BLnk,y
                      (/home/strick/go/s):00642         * ATD: same next 3 lines as at L03F4
0194 17144F           (/home/strick/go/s):00643                  lbsr  L1377        Call CLS (CHR$(12)) routine
0197 5F               (/home/strick/go/s):00644                  clrb               No errors
0198 7E5177           (/home/strick/go/s):00645         L01C5    jmp   >GrfStrt+SysRet return to system
                      (/home/strick/go/s):00646         
                      (/home/strick/go/s):00647         * Check screen coordinates
                      (/home/strick/go/s):00648         * Entry: X = screen table pointer
019B 9660             (/home/strick/go/s):00649         L01C8    lda   <$60         get current window STY marker
019D 81FF             (/home/strick/go/s):00650                  cmpa  #$FF         current screen?
019F 2602             (/home/strick/go/s):00651                  bne   L01D2        no, go on
01A1 A684             (/home/strick/go/s):00652                  lda   ,x           Get current screen type (from screen table ptr)
01A3 CE41DB           (/home/strick/go/s):00653         L01D2    ldu   #GrfStrt+L01F9  Point to width table
01A6 8401             (/home/strick/go/s):00654                  anda  #$01         only keep resolution bit (0=40 column, 1=80)
01A8 E635             (/home/strick/go/s):00655                  ldb   Wt.CPX,y     get current X start
                      (/home/strick/go/s):00656         *         cmpb  a,u          within range?
                      (/home/strick/go/s):00657         *         bhi   L01F5        no, exit with error
01AA EB37             (/home/strick/go/s):00658                  addb  Wt.SZX,y     calculate size
01AC 2529             (/home/strick/go/s):00659                  bcs   L01F5        added line: exit if 8-bit overflow
01AE E1C6             (/home/strick/go/s):00660                  cmpb  a,u          still within range?
01B0 2225             (/home/strick/go/s):00661                  bhi   L01F5        no, error out
                      (/home/strick/go/s):00662         
                      (/home/strick/go/s):00663         * ATD: These lines added for screen size support
01B2 A608             (/home/strick/go/s):00664                  lda   St.ScSiz,x   get screen size
01B4 2602             (/home/strick/go/s):00665                  bne   L01E0        skip ahead if already initialized
01B6 8619             (/home/strick/go/s):00666                  lda   #25          get maximum screen size in A
                      (/home/strick/go/s):00667         
01B8 E636             (/home/strick/go/s):00668         L01E0    ldb   Wt.CPY,y     get current Y start
                      (/home/strick/go/s):00669                  IFNE  H6309
                      (/home/strick/go/s):00670                  cmpr  a,b          within maximum?
                      (/home/strick/go/s):00671                  ELSE
01BA 3402             (/home/strick/go/s):00672                  pshs  a
01BC E1E0             (/home/strick/go/s):00673                  cmpb  ,s+
                      (/home/strick/go/s):00674                  ENDC
01BE 2217             (/home/strick/go/s):00675                  bhi   L01F5        no, error out
01C0 EB38             (/home/strick/go/s):00676                  addb  Wt.SZY,y     calculate size: Now B = maximum size of the window
01C2 2513             (/home/strick/go/s):00677                  bcs   L01F5        added line: exit if 8-bit overflow
                      (/home/strick/go/s):00678                  IFNE  H6309
                      (/home/strick/go/s):00679                  cmpr  a,b          still within maximum?
                      (/home/strick/go/s):00680                  ELSE
01C4 3402             (/home/strick/go/s):00681                  pshs  a
01C6 E1E0             (/home/strick/go/s):00682                  cmpb  ,s+
                      (/home/strick/go/s):00683                  ENDC
01C8 220D             (/home/strick/go/s):00684                  bhi   L01F5        no, error out
                      (/home/strick/go/s):00685         
01CA A108             (/home/strick/go/s):00686                  cmpa  St.ScSiz,x   do we have the current screen size?
01CC 2707             (/home/strick/go/s):00687                  beq   L01F3        yes, skip ahead
                      (/home/strick/go/s):00688         
01CE C118             (/home/strick/go/s):00689                  cmpb  #24          do we have a 24-line screen?
01D0 2201             (/home/strick/go/s):00690                  bhi   L01F1        no, it's 25: skip ahead
01D2 4A               (/home/strick/go/s):00691                  deca               25-1=24 line screen, if window <= 24 lines
                      (/home/strick/go/s):00692         
01D3 A708             (/home/strick/go/s):00693         L01F1    sta   St.ScSiz,x   save the size of the screen
01D5 5F               (/home/strick/go/s):00694         L01F3    clrb               clear carry
01D6 39               (/home/strick/go/s):00695                  rts                return
                      (/home/strick/go/s):00696         
01D7 53               (/home/strick/go/s):00697         L01F5    comb               Set carry
01D8 C6BD             (/home/strick/go/s):00698                  ldb   #E$ICoord    Get error code for Illegal co-ordinate
01DA 39               (/home/strick/go/s):00699                  rts                Return
                      (/home/strick/go/s):00700         * Maximum widths of text & graphic windows table
01DB 2850             (/home/strick/go/s):00701         L01F9    fcb   40,80
                      (/home/strick/go/s):00702         
                      (/home/strick/go/s):00703         * Check if Current screen DWSET request can be honored (carry set & b=error
                      (/home/strick/go/s):00704         *   # if we can't)
                      (/home/strick/go/s):00705         * Entry: Y=Ptr to our (new window) window table
                      (/home/strick/go/s):00706         * NOTE: It has to check all active windows. If it it fits without overlap
                      (/home/strick/go/s):00707         *         on all of them, then it will obviously fit with several on the same
                      (/home/strick/go/s):00708         *         screen.
01DD 8E1290           (/home/strick/go/s):00709         L01FB    ldx   #WinBase     Point to start of window tables
                      (/home/strick/go/s):00710                  IFNE  H6309
                      (/home/strick/go/s):00711                  lde   #MaxWind     Get maximum number of windows (32)
                      (/home/strick/go/s):00712                  ELSE
01E0 3402             (/home/strick/go/s):00713                  pshs  a
01E2 8620             (/home/strick/go/s):00714                  lda   #MaxWind
01E4 97B5             (/home/strick/go/s):00715                  sta   <$B5
01E6 3502             (/home/strick/go/s):00716                  puls  a
                      (/home/strick/go/s):00717                  ENDC
     01E8             (/home/strick/go/s):00718         L0206    equ   *
                      (/home/strick/go/s):00719                  IFNE  H6309 
                      (/home/strick/go/s):00720                  cmpr  y,x          Is this our own window table entry?
                      (/home/strick/go/s):00721                  ELSE
01E8 3420             (/home/strick/go/s):00722                  pshs  y
01EA ACE1             (/home/strick/go/s):00723                  cmpx  ,s++
                      (/home/strick/go/s):00724                  ENDC
01EC 2711             (/home/strick/go/s):00725                  beq   L021B        Yes, skip it (obviously)
01EE EC10             (/home/strick/go/s):00726                  ldd   Wt.STbl,x    Get screen table pointer of search window
01F0 2B0D             (/home/strick/go/s):00727                  bmi   L021B        High bit set means not active, skip to next
01F2 10A330           (/home/strick/go/s):00728                  cmpd  Wt.STbl,y    Same screen as ours?
01F5 2608             (/home/strick/go/s):00729                  bne   L021B        No, skip to next
01F7 A612             (/home/strick/go/s):00730                  lda   Wt.BLnk,x    Is this entry for an overlay window?
01F9 2A04             (/home/strick/go/s):00731                  bpl   L021B        Yes, useless to us
01FB 8D0B             (/home/strick/go/s):00732                  bsr   L0224        Go make sure we will fit
01FD 2508             (/home/strick/go/s):00733                  bcs   L0223        Nope, return with error
01FF C640             (/home/strick/go/s):00734         L021B    ldb   #Wt.Siz      Move to next entry (originally leax $40,x, but
0201 3A               (/home/strick/go/s):00735                  abx                believe it or not, this is faster in native)
                      (/home/strick/go/s):00736                  IFNE  H6309
                      (/home/strick/go/s):00737                  dece               Done?
                      (/home/strick/go/s):00738                  ELSE
0202 0AB5             (/home/strick/go/s):00739                  dec   <$B5
                      (/home/strick/go/s):00740                  ENDC
0204 26E2             (/home/strick/go/s):00741                  bne   L0206        No, go back
0206 5F               (/home/strick/go/s):00742                  clrb               Clear errors
0207 39               (/home/strick/go/s):00743         L0223    rts                Return
                      (/home/strick/go/s):00744         
                      (/home/strick/go/s):00745         * Routine to make sure a 'current screen' DWSet window will fit with other
                      (/home/strick/go/s):00746         *   windows already on that screen
                      (/home/strick/go/s):00747         * Entry: X=Ptr to window table entry that is on same screen as us
                      (/home/strick/go/s):00748         *        Y=Ptr to our window table entry
                      (/home/strick/go/s):00749         * Exit: Carry clear if it will fit
                      (/home/strick/go/s):00750         
     0208             (/home/strick/go/s):00751         L0224    equ   *
                      (/home/strick/go/s):00752                  IFNE  H6309
                      (/home/strick/go/s):00753                  tim   #Protect,Wt.BSW,x Is this window protected?
                      (/home/strick/go/s):00754                  ELSE
0208 3404             (/home/strick/go/s):00755                  pshs  b 
020A E609             (/home/strick/go/s):00756                  ldb   Wt.BSW,x
020C C501             (/home/strick/go/s):00757                  bitb  #Protect
020E 3504             (/home/strick/go/s):00758                  puls  b
                      (/home/strick/go/s):00759                  ENDC
0210 2738             (/home/strick/go/s):00760                  beq   L0262        No, window can overlap/write wherever it wants
0212 A635             (/home/strick/go/s):00761                  lda   Wt.CPX,y     get our new window's requested Left border
0214 A18826           (/home/strick/go/s):00762                  cmpa  Wt.DfCPX,x   Does it start on or past existing windows left border?
0217 2C09             (/home/strick/go/s):00763                  bge   L023A        Yes, could still work - check width
0219 AB37             (/home/strick/go/s):00764                  adda  Wt.SZX,y     add in our requested width
021B A18826           (/home/strick/go/s):00765                  cmpa  Wt.DfCPX,x   Does our right border go past existing's left border?
021E 2E0E             (/home/strick/go/s):00766                  bgt   L0246        Yes, could still work if Y is somewhere empty(?)
0220 5F               (/home/strick/go/s):00767                  clrb               No X coord conflict at all...will be fine
0221 39               (/home/strick/go/s):00768                  rts
                      (/home/strick/go/s):00769         * Comes here only if our window will start past left side of existing window
0222 E68826           (/home/strick/go/s):00770         L023A    ldb   Wt.DfCPX,x   Get existing windows left border value
0225 EB8828           (/home/strick/go/s):00771                  addb  Wt.DfSZX,x   Calculate existing window's right border
                      (/home/strick/go/s):00772                  IFNE  H6309
                      (/home/strick/go/s):00773                  cmpr  b,a          Our X start greater than existing windows right border?
                      (/home/strick/go/s):00774                  ELSE
0228 3404             (/home/strick/go/s):00775                  pshs  b
022A A1E0             (/home/strick/go/s):00776                  cmpa  ,s+
                      (/home/strick/go/s):00777                  ENDC
022C 2C1C             (/home/strick/go/s):00778                  bge   L0262        Yes, legal coordinate
                      (/home/strick/go/s):00779         * X is fine, start checking Y
022E A636             (/home/strick/go/s):00780         L0246    lda   Wt.CPY,y     Get our new window's requested top border value
0230 A18827           (/home/strick/go/s):00781                  cmpa  Wt.DfCPY,x   Compare with existing window's top border
0233 2C09             (/home/strick/go/s):00782         L024B    bge   L0256        If we are lower on screen, jump ahead
0235 AB38             (/home/strick/go/s):00783                  adda  Wt.SZY,y     Calculate our bottom border
0237 A18827           (/home/strick/go/s):00784                  cmpa  Wt.DfCPY,x   Is it past the top border of existing window?
023A 2E10             (/home/strick/go/s):00785                  bgt   L0264        Yes, illegal coordinate
023C 5F               (/home/strick/go/s):00786                  clrb               Yes, window will fit legally, return with no error
023D 39               (/home/strick/go/s):00787                  rts
                      (/home/strick/go/s):00788         
                      (/home/strick/go/s):00789         * Comes here only if our window will start below top of existing window
023E E68827           (/home/strick/go/s):00790         L0256    ldb   Wt.DfCPY,x   Get existing window's top border value
0241 EB8829           (/home/strick/go/s):00791                  addb  Wt.DfSZY,x   Calculate existing window's bottom border
                      (/home/strick/go/s):00792                  IFNE  H6309
                      (/home/strick/go/s):00793                  cmpr  b,a          Our Y start less than bottom of existing?
                      (/home/strick/go/s):00794                  ELSE
0244 3404             (/home/strick/go/s):00795                  pshs  b
0246 A1E0             (/home/strick/go/s):00796                  cmpa  ,s+
                      (/home/strick/go/s):00797                  ENDC
0248 2D02             (/home/strick/go/s):00798                  blt   L0264        Yes, would overlap, return error
024A 5F               (/home/strick/go/s):00799         L0262    clrb               Yes, window will fit legally, return with no error
024B 39               (/home/strick/go/s):00800                  rts   
024C 53               (/home/strick/go/s):00801         L0264    comb               Window won't fit with existing windows
024D C6C3             (/home/strick/go/s):00802                  ldb   #E$IWDef
024F 39               (/home/strick/go/s):00803         L0286    rts   
                      (/home/strick/go/s):00804         
                      (/home/strick/go/s):00805         * Setup a new screen table
                      (/home/strick/go/s):00806         *L0268    bsr   FScrTbl      search for a screen table
                      (/home/strick/go/s):00807         *         bcs   L0286        not available, return
                      (/home/strick/go/s):00808         * X=Screen tbl ptr, Y=Window tbl ptr
0250 AF30             (/home/strick/go/s):00809         L0268    stx   Wt.STbl,y    save the pointer in window table
0252 D660             (/home/strick/go/s):00810                  ldb   <$60         get screen type
0254 E784             (/home/strick/go/s):00811                  stb   St.Sty,x     save it to screen table
0256 8D3E             (/home/strick/go/s):00812                  bsr   L029B        go setup screen table (Block & addr #'s)
0258 25F5             (/home/strick/go/s):00813                  bcs   L0286        couldn't do it, return
025A D65A             (/home/strick/go/s):00814                  ldb   <$5A         get border color
025C E705             (/home/strick/go/s):00815                  stb   St.Brdr,x    save it in screen table
                      (/home/strick/go/s):00816         * This line added
025E E627             (/home/strick/go/s):00817                  ldb   Wt.Back,y    Get background color from window table
0260 17052D           (/home/strick/go/s):00818                  lbsr  L0791        get color mask for bckgrnd color
0263 170105           (/home/strick/go/s):00819                  lbsr  L0335        clear the screen (with bckgrnd color)
0266 308810           (/home/strick/go/s):00820                  leax  St.Pals,x    Point to palette regs in screen table
0269 FC1019           (/home/strick/go/s):00821                  ldd   >WGlobal+G.DefPal       Get system default palette pointer
                      (/home/strick/go/s):00822                  IFNE  H6309
                      (/home/strick/go/s):00823                  ldw   #16          16 palettes to copy
                      (/home/strick/go/s):00824                  tfm   d+,x+        Copy into screen table
                      (/home/strick/go/s):00825                  ELSE
026C 3424             (/home/strick/go/s):00826                  pshs  b,y 
026E 1F02             (/home/strick/go/s):00827                  tfr   d,y
0270 C608             (/home/strick/go/s):00828                  ldb   #8
0272 E7E4             (/home/strick/go/s):00829                  stb   ,s
0274 ECA1             (/home/strick/go/s):00830         L0287b   ldd   ,y++
0276 ED81             (/home/strick/go/s):00831                  std   ,x++
0278 6AE4             (/home/strick/go/s):00832                  dec   ,s
027A 26F8             (/home/strick/go/s):00833                  bne   L0287b
027C 3524             (/home/strick/go/s):00834                  puls  b,y
                      (/home/strick/go/s):00835                  ENDC
027E 5F               (/home/strick/go/s):00836                  clrb               No error & return
027F 39               (/home/strick/go/s):00837                  rts                Get back scrn tbl ptr & return
                      (/home/strick/go/s):00838         
                      (/home/strick/go/s):00839         * Search for a empty screen table
0280 8E1A81           (/home/strick/go/s):00840         FScrTbl  ldx   #STblBse+1   Point to screen tables+1
0283 CC1020           (/home/strick/go/s):00841                  ldd   #$10*256+St.Siz get # table entrys & entry size
0286 6D84             (/home/strick/go/s):00842         L028D    tst   ,x           already allocated a block?
0288 2604             (/home/strick/go/s):00843                  bne   Yes          Yes, go to next one
028A 301F             (/home/strick/go/s):00844                  leax  -1,x         Bump pointer back by $980 based
028C 5F               (/home/strick/go/s):00845                  clrb               No error & return
028D 39               (/home/strick/go/s):00846                  rts
                      (/home/strick/go/s):00847         
028E 3A               (/home/strick/go/s):00848         Yes      abx                move to next one
028F 4A               (/home/strick/go/s):00849                  deca               done?
0290 26F4             (/home/strick/go/s):00850                  bne   L028D        no, keep looking
0292 53               (/home/strick/go/s):00851                  comb               set carry for error
0293 C6C1             (/home/strick/go/s):00852                  ldb   #E$TblFul    get error code
0295 39               (/home/strick/go/s):00853                  rts                return
                      (/home/strick/go/s):00854         
                      (/home/strick/go/s):00855         * Setup screen table
                      (/home/strick/go/s):00856         * Entry: Y=Window table ptr
                      (/home/strick/go/s):00857         *        B=screen type (flags still set based on it too)
0296 3420             (/home/strick/go/s):00858         L029B    pshs  y            preserve window table pointer
0298 2A1B             (/home/strick/go/s):00859                  bpl   L02BB        Screen type not text, go on
029A 108E1A80         (/home/strick/go/s):00860                  ldy   #STblBse     Point to screen tables
029E 8610             (/home/strick/go/s):00861                  lda   #$10         get # screen tables
                      (/home/strick/go/s):00862         * Search screen tables
02A0 E6A4             (/home/strick/go/s):00863         L02A7    ldb   St.Sty,y     is it text?
02A2 2A09             (/home/strick/go/s):00864                  bpl   L02B3        no, go to next one
02A4 E621             (/home/strick/go/s):00865                  ldb   St.SBlk,y    get memory block #
02A6 2705             (/home/strick/go/s):00866                  beq   L02B3        don't exist, go to next one
02A8 170091           (/home/strick/go/s):00867                  lbsr   L0306        search window block for a spot
02AB 244B             (/home/strick/go/s):00868                  bcc   L02DE        found one, go initialize it
02AD 31A820           (/home/strick/go/s):00869         L02B3    leay  St.Siz,y     move to next screen table
02B0 4A               (/home/strick/go/s):00870                  deca               done?
02B1 26ED             (/home/strick/go/s):00871                  bne   L02A7        no, keep going
                      (/home/strick/go/s):00872         
                      (/home/strick/go/s):00873         * No screen available, get a new screen block
                      (/home/strick/go/s):00874         * NOTE: Should be able to change L02F1 loop to use W/CMPE to slightly
                      (/home/strick/go/s):00875         *       speed up/shrink
02B3 D660             (/home/strick/go/s):00876                  ldb   <$60         get STY marker
02B5 86FF             (/home/strick/go/s):00877         L02BB    lda   #$FF         preset counter
02B7 97B3             (/home/strick/go/s):00878                  sta   <$B3         unused grfdrv space
02B9 108E432F         (/home/strick/go/s):00879                  ldy   #GrfStrt+L02FA-1   Point to RAM block table 
02BD C40F             (/home/strick/go/s):00880                  andb  #$F          make it fit table
02BF E6A5             (/home/strick/go/s):00881                  ldb   b,y          get # blocks needed
02C1 D7B4             (/home/strick/go/s):00882                  stb   <$B4         save number of blocks, unused space
02C3 0CB3             (/home/strick/go/s):00883         OVLAP    inc   <$B3         update counter, unused space
02C5 D6B4             (/home/strick/go/s):00884                  ldb   <$B4         get number of blocks needed
02C7 103F53           (/home/strick/go/s):00885                  os9   F$AlHRAM     AlHRAM Allocate memory ***********
02CA 253E             (/home/strick/go/s):00886                  bcs   L02EF        no memory, return error
02CC 3404             (/home/strick/go/s):00887                  pshs  b            save starting block #
02CE C43F             (/home/strick/go/s):00888                  andb  #$3F         modulo 512K
02D0 3404             (/home/strick/go/s):00889                  pshs  b            save modulo starting block
02D2 D6B4             (/home/strick/go/s):00890                  ldb   <$B4         regB now # blocks requested
02D4 5A               (/home/strick/go/s):00891                  decb               set to base 0
02D5 EBE4             (/home/strick/go/s):00892                  addb  ,s
02D7 C43F             (/home/strick/go/s):00893                  andb  #$3F         final block # modulo 512K
02D9 E1E0             (/home/strick/go/s):00894                  cmpb  ,s+          compare with first block
02DB 25E6             (/home/strick/go/s):00895                  blo   OVLAP        overlapped 512K boundary so ask for more RAM
02DD 8D2D             (/home/strick/go/s):00896                  bsr   DeMost 
02DF 3504             (/home/strick/go/s):00897                  puls  b            get starting block #
02E1 96B3             (/home/strick/go/s):00898                  lda   <$B3
02E3 32E6             (/home/strick/go/s):00899                  leas  a,s          yank temps
02E5 108E8000         (/home/strick/go/s):00900                  ldy   #$8000       get default screen start
02E9 3424             (/home/strick/go/s):00901                  pshs  b,y          save that & start block #
02EB 17FE69           (/home/strick/go/s):00902                  lbsr  L0173        setup MMU with screen
                      (/home/strick/go/s):00903         * Mark first byte of every possible screen in block with $FF
02EE C6FF             (/home/strick/go/s):00904                  ldb   #$FF
02F0 E7A4             (/home/strick/go/s):00905         L02D6    stb   ,y           save marker
02F2 8D33             (/home/strick/go/s):00906                  bsr   L02F1        move to next one
02F4 25FA             (/home/strick/go/s):00907                  blo   L02D6        not done, keep going
02F6 3524             (/home/strick/go/s):00908                  puls  b,y          restore block # & start address
                      (/home/strick/go/s):00909         * Initialize rest of screen table
02F8 E701             (/home/strick/go/s):00910         L02DE    stb   St.SBlk,x    save block # to table
02FA 10AF02           (/home/strick/go/s):00911                  sty   St.LStrt,x   save logical screen start
02FD 9660             (/home/strick/go/s):00912                  lda   <$0060       get screen type
02FF 840F             (/home/strick/go/s):00913                  anda  #$F          make it fit table
0301 108E4335         (/home/strick/go/s):00914                  ldy   #GrfStrt+L0300-1  Point to width table
0305 A6A6             (/home/strick/go/s):00915                  lda   a,y          get width
0307 A704             (/home/strick/go/s):00916                  sta   St.BRow,x    save it to screen table
0309 5F               (/home/strick/go/s):00917                  clrb               clear errors
030A 35A0             (/home/strick/go/s):00918         L02EF    puls  y,pc         return
                      (/home/strick/go/s):00919         
                      (/home/strick/go/s):00920         * Get rid of allocated blocks that overflowed 512K bank; RG.
030C 0DB3             (/home/strick/go/s):00921         DeMost   tst   <$B3         if none then return
030E 2716             (/home/strick/go/s):00922                  beq   DA020
0310 96B3             (/home/strick/go/s):00923                  lda   <$B3
0312 3412             (/home/strick/go/s):00924                  pshs  a,x
0314 3166             (/home/strick/go/s):00925                  leay  6,s          a,x,rts,b; point to first bad group
0316 4F               (/home/strick/go/s):00926         DA010    clra
0317 E6A0             (/home/strick/go/s):00927                  ldb   ,y+          get starting block number
0319 1F01             (/home/strick/go/s):00928                  tfr   d,x
031B D6B4             (/home/strick/go/s):00929                  ldb   <$B4         number of blocks
031D 103F51           (/home/strick/go/s):00930                  os9   F$DelRAM     de-allocate the blocks *** IGNORING ERRORS ***
0320 6AE4             (/home/strick/go/s):00931                  dec   ,s           decrease count
0322 26F2             (/home/strick/go/s):00932                  bne   DA010
0324 3512             (/home/strick/go/s):00933                  puls  a,x
0326 39               (/home/strick/go/s):00934         DA020    rts
                      (/home/strick/go/s):00935         
                      (/home/strick/go/s):00936         * Move to next text screen in memory block
0327 31A90800         (/home/strick/go/s):00937         L02F1    leay  >$0800,y     move Y to next text screen start
032B 108CA000         (/home/strick/go/s):00938                  cmpy  #$A000       set flags for completion check
032F 39               (/home/strick/go/s):00939         L02F9    rts                return
                      (/home/strick/go/s):00940         
                      (/home/strick/go/s):00941         * Memory block requirement table (# of 8K banks)
0330 02               (/home/strick/go/s):00942         L02FA    fcb   2            640 2 color
0331 02               (/home/strick/go/s):00943                  fcb   2            320 4 color
0332 04               (/home/strick/go/s):00944                  fcb   4            640 4 color
0333 04               (/home/strick/go/s):00945                  fcb   4            320 16 color
0334 01               (/home/strick/go/s):00946                  fcb   1            80 column text
0335 01               (/home/strick/go/s):00947                  fcb   1            40 column text
                      (/home/strick/go/s):00948         
                      (/home/strick/go/s):00949         * Screen width in bytes table (# bytes/line)
0336 50               (/home/strick/go/s):00950         L0300    fcb   80           640 2 color
0337 50               (/home/strick/go/s):00951                  fcb   80           320 4 color
0338 A0               (/home/strick/go/s):00952                  fcb   160          640 4 color
0339 A0               (/home/strick/go/s):00953                  fcb   160          320 16 color
033A A0               (/home/strick/go/s):00954                  fcb   160          80 column
033B 50               (/home/strick/go/s):00955                  fcb   80           40 column text
                      (/home/strick/go/s):00956         
                      (/home/strick/go/s):00957         * Look for a empty window in a text screen memory block
033C 3436             (/home/strick/go/s):00958         L0306    pshs  d,x,y        Preserve regs
033E 17FE16           (/home/strick/go/s):00959                  lbsr  L0173        go map in the screen
0341 108E8000         (/home/strick/go/s):00960                  ldy   #$8000       get screen start address
0345 C6FF             (/home/strick/go/s):00961                  ldb   #$FF         get used marker flag
0347 E1A4             (/home/strick/go/s):00962         L0311    cmpb  ,y           used?
0349 2707             (/home/strick/go/s):00963                  beq   L031C        no, go see if it will fit
034B 8DDA             (/home/strick/go/s):00964         L0315    bsr   L02F1        move to next screen
034D 25F8             (/home/strick/go/s):00965                  bcs   L0311        keep looking if not outside of block
034F 53               (/home/strick/go/s):00966         L0319    comb               set carry
0350 35B6             (/home/strick/go/s):00967                  puls  d,x,y,pc     return
                      (/home/strick/go/s):00968         
0352 9660             (/home/strick/go/s):00969         L031C    lda   <$0060       get screen type
0354 8186             (/home/strick/go/s):00970                  cmpa  #$86         80 column text?
0356 270D             (/home/strick/go/s):00971                  beq   L032F        yes, return
0358 30A90800         (/home/strick/go/s):00972                  leax  $0800,y      move to next screen to check if it will fit
035C 8CA000           (/home/strick/go/s):00973                  cmpx  #$A000       will it fit in block?
035F 24EE             (/home/strick/go/s):00974                  bhs   L0319        no, return error
0361 E184             (/home/strick/go/s):00975                  cmpb  ,x           is it already used?
0363 26E6             (/home/strick/go/s):00976                  bne   L0315        yes, return error
0365 5F               (/home/strick/go/s):00977         L032F    clrb               clear error status
0366 3516             (/home/strick/go/s):00978                  puls  d,x
0368 3262             (/home/strick/go/s):00979                  leas  2,s          dump screen table pointer to keep screen address
036A 39               (/home/strick/go/s):00980                  rts                return
                      (/home/strick/go/s):00981         
                      (/home/strick/go/s):00982         * Clear screen (not window, but whole screen)
                      (/home/strick/go/s):00983         * Entry: B=Background color mask byte (from $6,x in window table)
                      (/home/strick/go/s):00984         *        X=Ptr to screen table
                      (/home/strick/go/s):00985         * Currently comes in with foreground color though.
                      (/home/strick/go/s):00986         * ATD: only called once, from just above...
036B 3430             (/home/strick/go/s):00987         L0335    pshs  x,y          save regs
036D 8620             (/home/strick/go/s):00988                  lda   #C$SPAC      get a space code
036F DD97             (/home/strick/go/s):00989                  std   <$0097       init screen clear value to $00 (or attribute)
0371 E684             (/home/strick/go/s):00990                  ldb   St.Sty,x     is window text?
0373 10AE02           (/home/strick/go/s):00991         L0343    ldy   St.LStrt,x   get screen start
0376 C40F             (/home/strick/go/s):00992                  andb  #$F          make it fit table
0378 58               (/home/strick/go/s):00993                  lslb               adjust for 2 bytes entry
0379 8E4396           (/home/strick/go/s):00994                  ldx   #GrfStrt+L035A-2  Point to screen length table
                      (/home/strick/go/s):00995                  IFNE  H6309
                      (/home/strick/go/s):00996                  ldw   b,x          get length
                      (/home/strick/go/s):00997                  ELSE
037C 3410             (/home/strick/go/s):00998                  pshs  x
037E AE85             (/home/strick/go/s):00999                  ldx   b,x
0380 9FB5             (/home/strick/go/s):01000                  stx   <$B5
0382 3510             (/home/strick/go/s):01001                  puls  x
                      (/home/strick/go/s):01002                  ENDC
0384 C108             (/home/strick/go/s):01003                  cmpb  #$8          Text mode? 
0386 231C             (/home/strick/go/s):01004                  bls   ClrGfx       No, do Graphics screen clear
                      (/home/strick/go/s):01005         * Clear text screen
0388 9E97             (/home/strick/go/s):01006                  ldx   <$0097       get screen clear codes ($2000)
                      (/home/strick/go/s):01007                  IFNE  H6309
                      (/home/strick/go/s):01008                  tfr   w,d          Move count to D
                      (/home/strick/go/s):01009                  tfr   y,w          Move ptr to faster indexing register
038A                  (/home/strick/go/s):01010         L0352    stx   ,w++         Store blank char on screen
                      (/home/strick/go/s):01011                  decd               Dec counter
                      (/home/strick/go/s):01012                  bne   L0352
                      (/home/strick/go/s):01013                  ELSE
038A DCB5             (/home/strick/go/s):01014                  ldd   <$B5
038C AFA1             (/home/strick/go/s):01015         L0352    stx   ,y++ 
038E 830001           (/home/strick/go/s):01016                  subd  #1
0391 26F9             (/home/strick/go/s):01017                  bne   L0352        Do until done screen
0393 109FB5           (/home/strick/go/s):01018                  sty   <$B5
                      (/home/strick/go/s):01019                  ENDC
0396 35B0             (/home/strick/go/s):01020                  puls  x,y,pc       Get back regs & return
                      (/home/strick/go/s):01021         
                      (/home/strick/go/s):01022         * Screen length table
0398 3E80             (/home/strick/go/s):01023         L035A    fdb   80*MaxLines*8    640 2 color   (gfx are 1 byte counts)
039A 3E80             (/home/strick/go/s):01024                  fdb   80*MaxLines*8    320 4 color
039C 7D00             (/home/strick/go/s):01025                  fdb   160*MaxLines*8   640 4 color
039E 7D00             (/home/strick/go/s):01026                  fdb   160*MaxLines*8   320 16 color
03A0 07D0             (/home/strick/go/s):01027                  fdb   160*Maxlines/2   80 column text  (txt are 2 byte counts)
03A2 03E8             (/home/strick/go/s):01028                  fdb   80*MaxLines/2    40 column text
                      (/home/strick/go/s):01029         
                      (/home/strick/go/s):01030         * Clear a graphics screen
03A4 8E1098           (/home/strick/go/s):01031         ClrGfx   ldx   #$1098       Point to clear code char.
                      (/home/strick/go/s):01032                  IFNE  H6309
                      (/home/strick/go/s):01033                  tfm   x,y+         Clear screen
                      (/home/strick/go/s):01034                  ELSE
03A7 3402             (/home/strick/go/s):01035                  pshs  a
03A9 A684             (/home/strick/go/s):01036                  lda   ,x
03AB 9EB5             (/home/strick/go/s):01037                  ldx   <$B5
03AD A7A0             (/home/strick/go/s):01038         ClrGfx2  sta   ,y+
03AF 301F             (/home/strick/go/s):01039                  leax  -1,x
03B1 26FA             (/home/strick/go/s):01040                  bne   ClrGfx2
03B3 9FB5             (/home/strick/go/s):01041                  stx   <$B5
03B5 3502             (/home/strick/go/s):01042                  puls  a
                      (/home/strick/go/s):01043                  ENDC
03B7 35B0             (/home/strick/go/s):01044                  puls  x,y,pc       Restore regs & return
                      (/home/strick/go/s):01045         
                      (/home/strick/go/s):01046         * Part of window init routine
                      (/home/strick/go/s):01047         * Entry: Y=Window table ptr
                      (/home/strick/go/s):01048         *        X=Screen table ptr
03B9 CC8900           (/home/strick/go/s):01049         L0366    ldd   #(TChr!Scale!Protect)*256 Transparency off & protect/Scale on
03BC E7A818           (/home/strick/go/s):01050                  stb   Wt.GBlk,y    Graphics cursor memory block #0
03BF ED29             (/home/strick/go/s):01051                  std   Wt.BSW,y     Character switch defaults & Lset type 0
03C1 E72E             (/home/strick/go/s):01052                  stb   Wt.PBlk,y    Pset block #0
                      (/home/strick/go/s):01053                  IFNE  H6309
                      (/home/strick/go/s):01054         * Assembler can't do $10000x#
                      (/home/strick/go/s):01055         *         ldq   #(GrfStrt+L1FA9)*65536+(GrfStrt+L1F9E) Normal LSET/PSET vector
                      (/home/strick/go/s):01056                  fcb   $cd
                      (/home/strick/go/s):01057                  fdb   GrfStrt+L1FA9,GrfStrt+L1F9E
                      (/home/strick/go/s):01058                  stq   Wt.LVec,y    Save vectors
                      (/home/strick/go/s):01059                  ELSE
03C3 CC631E           (/home/strick/go/s):01060                  ldd   #GrfStrt+L1F9E
03C6 EDA816           (/home/strick/go/s):01061                  std   Wt.LVec+2,y
03C9 DDB5             (/home/strick/go/s):01062                  std   <$B5
03CB CC58D7           (/home/strick/go/s):01063                  ldd   #GrfStrt+L1FA9
03CE EDA814           (/home/strick/go/s):01064                  std   Wt.LVec,y
                      (/home/strick/go/s):01065                  ENDC
03D1 E626             (/home/strick/go/s):01066                  ldb   Wt.Fore,y    Get foreground palette #
03D3 17038A           (/home/strick/go/s):01067                  lbsr  L074C        Get bit mask for this color
03D6 E726             (/home/strick/go/s):01068                  stb   Wt.Fore,y    Store new foreground bit mask
03D8 D761             (/home/strick/go/s):01069                  stb   <$0061       Store new foreground bit mask in GRFDRV's global
03DA E627             (/home/strick/go/s):01070                  ldb   Wt.Back,y    Get background palette #
03DC 170381           (/home/strick/go/s):01071                  lbsr  L074C        Get bit mask for this color
03DF E727             (/home/strick/go/s):01072                  stb   Wt.Back,y    Store new background bit mask
03E1 D762             (/home/strick/go/s):01073                  stb   <$0062       Store bckground bit mask in GRFDRV's global mem
03E3 1703B1           (/home/strick/go/s):01074                  lbsr  L079B        Set default attributes to new colors
03E6 EC02             (/home/strick/go/s):01075                  ldd   St.LStrt,x   Get screen logical start
03E8 8D0C             (/home/strick/go/s):01076                  bsr   L03A9        Go copy scrn address/X&Y start to defaults area
03EA 6F2B             (/home/strick/go/s):01077                  clr   Wt.FBlk,y    Font memory block to 0 (no font yet)
                      (/home/strick/go/s):01078         * get group & buffer for font
03EC CCC801           (/home/strick/go/s):01079                  ldd   #$C801       Default group/buffer number for font
03EF DD57             (/home/strick/go/s):01080                  std   <$0057
03F1 1702CC           (/home/strick/go/s):01081                  lbsr  L0643        Go set up for font
03F4 5F               (/home/strick/go/s):01082                  clrb               No error and return
03F5 39               (/home/strick/go/s):01083                  rts   
                      (/home/strick/go/s):01084         * Move screen start address, X & Y coordinate starts of screen to 'default'
                      (/home/strick/go/s):01085         *   areas.  The first set is for what the window is currently at (CWArea
                      (/home/strick/go/s):01086         *   changes, for example), and the second set is the maximums of the window
                      (/home/strick/go/s):01087         *   when it was initialized, and thusly the maximums that can be used until
                      (/home/strick/go/s):01088         *   it is DWEnd'ed and DWSet'ed again.
                      (/home/strick/go/s):01089         * Entry :x= Screen table ptr
                      (/home/strick/go/s):01090         *        y= Window table ptr
                      (/home/strick/go/s):01091         *        d= Screen logical start address
03F6 1701D6           (/home/strick/go/s):01092         L03A9    lbsr  L0581             Go set up window/character sizes
                      (/home/strick/go/s):01093                  IFNE  H6309
                      (/home/strick/go/s):01094                  ldq   Wt.LStrt,y        Get screen start addr. & X coord start
                      (/home/strick/go/s):01095                  stq   Wt.LStDf,y        Save as 'window init' values
                      (/home/strick/go/s):01096                  ELSE
03F9 EC33             (/home/strick/go/s):01097                  ldd   Wt.LStrt,y
03FB EDA824           (/home/strick/go/s):01098                  std   Wt.LStDf,y
03FE EC35             (/home/strick/go/s):01099                  ldd   Wt.LStrt+2,y
0400 EDA826           (/home/strick/go/s):01100                  std   Wt.LStDf+2,y
0403 DDB5             (/home/strick/go/s):01101                  std   <$B5
                      (/home/strick/go/s):01102                  ENDC
0405 EC37             (/home/strick/go/s):01103                  ldd   Wt.SZX,y          Get Y coord start
0407 EDA828           (/home/strick/go/s):01104                  std   Wt.DfSZX,y        Set default Y coord start
040A 39               (/home/strick/go/s):01105                  rts   
                      (/home/strick/go/s):01106         
                      (/home/strick/go/s):01107         * DWEnd entry point : NOTE: the LDD #$FFFF was a LDD #$FFFE from Kevin
                      (/home/strick/go/s):01108         *   Darling's 'christmas' patch. It is supposed to have something to do
                      (/home/strick/go/s):01109         *   with INIZ'ed but not screen allocated windows.
040B 17FD54           (/home/strick/go/s):01110         L03CB    lbsr  L0177          Go map in window
040E CCFFFF           (/home/strick/go/s):01111                  ldd   #$FFFF         Set screen table ptr to indicate not active
0411 ED30             (/home/strick/go/s):01112                  std   Wt.STbl,y
                      (/home/strick/go/s):01113         * This routine checks to see if we are the last window on the current screen
                      (/home/strick/go/s):01114         * Carry set if there is there is another window on our screen
                      (/home/strick/go/s):01115         * (Originally a subroutine...moved to save 2 bytes & 5 cycles
                      (/home/strick/go/s):01116         * Entry: Y=window table ptr
                      (/home/strick/go/s):01117         *        X=Screen table ptr?
0413 3430             (/home/strick/go/s):01118         L03FF    pshs  y,x            Preserve window table & screen table ptrs
0415 1F12             (/home/strick/go/s):01119                  tfr   x,y            Move for ABX
0417 8E1290           (/home/strick/go/s):01120                  ldx   #WinBase       Point to window table entries
041A CC2040           (/home/strick/go/s):01121                  ldd   #MaxWind*256+Wt.Siz Get # entries & size
041D 10AC10           (/home/strick/go/s):01122         L0407    cmpy  Wt.STbl,x      Keep looking until we find entry on our screen
0420 2706             (/home/strick/go/s):01123                  beq   L0414          Found one, error
0422 3A               (/home/strick/go/s):01124                  abx                  Bump to next one
0423 4A               (/home/strick/go/s):01125                  deca                 Keep doing until all 32 window entries are done
0424 26F7             (/home/strick/go/s):01126                  bne   L0407
0426 5F               (/home/strick/go/s):01127                  clrb                 We were only window on screen, no error
                      (/home/strick/go/s):01128         *ATD: FCB $21: BRN = skip 1 byte
                      (/home/strick/go/s):01129         *         bra   L0415
0427 21               (/home/strick/go/s):01130                  fcb   $21          BRN foo = skip one byte, same speed 1 byte less
0428 53               (/home/strick/go/s):01131         L0414    comb                 Set flag (there is another window on screen)
0429 3530             (/home/strick/go/s):01132         L0415    puls  y,x            Restore window table & screen table ptrs
042B 2523             (/home/strick/go/s):01133                  bcs   L03F4          Not only window, CLS our area before we exit
042D 8D2B             (/home/strick/go/s):01134                  bsr   L0417          Only one, deallocate mem for screen if possible
042F 109C2E           (/home/strick/go/s):01135                  cmpy  <$002E         Our window table ptr same as current ptr?
                      (/home/strick/go/s):01136         * Note: The following line was causing our screen to clear which wrote over
                      (/home/strick/go/s):01137         * the $FF value we wrote at the beginning to flag the screen memory as free.
                      (/home/strick/go/s):01138         * This caused a memory leak in certain situations, like:
                      (/home/strick/go/s):01139         * iniz w1 w4;echo>/w1;echo>/w4;deiniz w4 w1
                      (/home/strick/go/s):01140         *         bne   L03F4          No, Clear our screen & exit
0432 2623             (/home/strick/go/s):01141                  bne   L03F5          No, just exit
                      (/home/strick/go/s):01142                  IFNE  H6309
                      (/home/strick/go/s):01143                  clrd                 Yes, clear current window & screen table ptrs
                      (/home/strick/go/s):01144                  clrw
                      (/home/strick/go/s):01145                  stq   <$2E
                      (/home/strick/go/s):01146                  ELSE
0434 4F               (/home/strick/go/s):01147                  clra
0435 5F               (/home/strick/go/s):01148                  clrb
0436 DD2E             (/home/strick/go/s):01149                  std   <$2E
0438 DD30             (/home/strick/go/s):01150                  std   <$30
043A DDB5             (/home/strick/go/s):01151                  std   <$B5
                      (/home/strick/go/s):01152                  ENDC
                      (/home/strick/go/s):01153         * Clear palettes to black
043C B7FF9A           (/home/strick/go/s):01154                  sta   >$ff9a         Border
                      (/home/strick/go/s):01155                  IFNE  H6309
                      (/home/strick/go/s):01156                  stq   >$ffb0         And all palette regs
                      (/home/strick/go/s):01157                  stq   >$ffb4
                      (/home/strick/go/s):01158                  stq   >$ffb8
                      (/home/strick/go/s):01159                  stq   >$ffbc
                      (/home/strick/go/s):01160                  ELSE
043F 3414             (/home/strick/go/s):01161                  pshs  b,x
0441 8EFFB0           (/home/strick/go/s):01162                  ldx   #$ffb0
0444 C610             (/home/strick/go/s):01163                  ldb   #16
0446 A780             (/home/strick/go/s):01164         L03FCb   sta   ,x+
0448 5A               (/home/strick/go/s):01165                  decb
0449 26FB             (/home/strick/go/s):01166                  bne   L03FCb
044B 3514             (/home/strick/go/s):01167                  puls  b,x
                      (/home/strick/go/s):01168                  ENDC
044D 7E5177           (/home/strick/go/s):01169         L03FC    jmp   >GrfStrt+SysRet Return to system
                      (/home/strick/go/s):01170         
                      (/home/strick/go/s):01171         * CLS our old screen with background color & leave if we weren't only window
                      (/home/strick/go/s):01172         *   on the screen (for Multi-Vue, for example)
0450 E607             (/home/strick/go/s):01173         L03F4    ldb   St.Back,x      Get background palette reg from screen table
0452 D762             (/home/strick/go/s):01174                  stb   <$0062         Put into background RGB Data
0454 17118F           (/home/strick/go/s):01175                  lbsr  L1377          CLS the area we were in
                      (/home/strick/go/s):01176         *         clrb                 No errors
0457 7E5176           (/home/strick/go/s):01177         L03F5     jmp   >GrfStrt+L0F78 Return to system
                      (/home/strick/go/s):01178         
                      (/home/strick/go/s):01179         * Called by DWEnd if we were only window on physical screen
                      (/home/strick/go/s):01180         * Entry: Y=window table ptr
                      (/home/strick/go/s):01181         *        X=screen table ptr
045A 3420             (/home/strick/go/s):01182         L0417    pshs  y              Preserve window table pointer
045C A684             (/home/strick/go/s):01183                  lda   St.Sty,x       Get screen type
045E 2A22             (/home/strick/go/s):01184                  bpl   L043F          Graphics screen, can definately de-allocate
                      (/home/strick/go/s):01185         * Text window - could be others still active in 8K block
0460 10AE02           (/home/strick/go/s):01186                  ldy   St.LStrt,x     Get screen phys. addr from screen table
0463 C6FF             (/home/strick/go/s):01187                  ldb   #$FF           Mark this part of 8K block as unused
0465 E7A4             (/home/strick/go/s):01188                  stb   ,y
0467 8185             (/home/strick/go/s):01189                  cmpa  #$85           Is this an 80 column hardware text window?
0469 2606             (/home/strick/go/s):01190                  bne   L042E          No, 40 column so just mark the 1 half
046B 31A90800         (/home/strick/go/s):01191                  leay  >$0800,y       80 column so mark both halves as unused (since
046F E7A4             (/home/strick/go/s):01192                  stb   ,y               routine below checks for 40 column markers)
0471 108E8000         (/home/strick/go/s):01193         L042E    ldy   #$8000         Point to first of 4 possible windows in block
                      (/home/strick/go/s):01194         * Check if entire 8K block is empty... if it is, deallocate it
0475 E1A4             (/home/strick/go/s):01195         L0432    cmpb  ,y             Is this one already marked as unused?
0477 261F             (/home/strick/go/s):01196                  bne   L0455          No, can't deallocate block so skip ahead
0479 17FEAB           (/home/strick/go/s):01197                  lbsr  L02F1          Yes, move to next text screen start in block
047C 25F7             (/home/strick/go/s):01198                  blo   L0432          Not last one, keep checking
047E C601             (/home/strick/go/s):01199                  ldb   #$01           # of memory blocks in this screen
0480 2006             (/home/strick/go/s):01200                  bra   L0445          Deallocate the block from used memory pool
                      (/home/strick/go/s):01201         * If a graphics screen, get # blocks to deallocate
0482 108E432F         (/home/strick/go/s):01202         L043F    ldy   #GrfStrt+L02FA-1   Get # mem blocks for this screen
0486 E6A6             (/home/strick/go/s):01203                  ldb   a,y
                      (/home/strick/go/s):01204         * Deallocate memory block(s) from screen since they are now unused
0488 3414             (/home/strick/go/s):01205         L0445    pshs  x,b            Preserve screen table ptr & # blocks
048A 4F               (/home/strick/go/s):01206                  clra                 clear MSB of D
048B E601             (/home/strick/go/s):01207                  ldb   St.SBlk,x      Get MMU start block # for screen
048D 1F01             (/home/strick/go/s):01208                  tfr   d,x            Move to X
048F 3504             (/home/strick/go/s):01209                  puls  b              Get back # blocks to deallocate
0491 103F51           (/home/strick/go/s):01210                  os9   F$DelRAM       Deallocate the memory
                      (/home/strick/go/s):01211         * 03/02/92 MOD: A BAD DELRAM CALL WOULD LEAVE X ON THE STACK WHEN IT BCS'ED
                      (/home/strick/go/s):01212         * TO L0458, SO THE PULS & BCS ARE SWAPPED TO SET THE STACK CORRECTLY
0494 3510             (/home/strick/go/s):01213                  puls  x              get screen table ptr back
0496 2503             (/home/strick/go/s):01214                  bcs   L0458          If error, return with error flags
0498 5F               (/home/strick/go/s):01215         L0455    clrb                 No error and set start block # to 0 (to indicate
0499 E701             (/home/strick/go/s):01216                  stb   St.SBlk,x       not used)
049B 35A0             (/home/strick/go/s):01217         L0458    puls  pc,y           Restore window table ptr & return
                      (/home/strick/go/s):01218         
                      (/home/strick/go/s):01219         * Part of OWSet
                      (/home/strick/go/s):01220         * Entry: Y=New overlay window table ptr
                      (/home/strick/go/s):01221         * Exit: Overlay window table ptr on stack, Y=Parent window table ptr
049D 3506             (/home/strick/go/s):01222         L045A    puls  d              Get RTS address
049F 3426             (/home/strick/go/s):01223                  pshs  y,d            Swap RTS address & Y on stack
04A1 E632             (/home/strick/go/s):01224                  ldb   Wt.BLnk,y      Get parent window #
04A3 8640             (/home/strick/go/s):01225                  lda   #Wt.Siz        Size of window table entries
04A5 3D               (/home/strick/go/s):01226                  mul   
04A6 108E1290         (/home/strick/go/s):01227                  ldy   #WinBase       Point to start of window tables
04AA 31AB             (/home/strick/go/s):01228                  leay  d,y            Point to parent window entry
04AC 39               (/home/strick/go/s):01229                  rts   
                      (/home/strick/go/s):01230         
                      (/home/strick/go/s):01231         * OWSet Entry point
04AD 8DEE             (/home/strick/go/s):01232         L046A    bsr   L045A          Get parent window table ptr
04AF 17FCB0           (/home/strick/go/s):01233                  lbsr  L0177          Map in parent window & setup grfdrv mem from it
04B2 ECE4             (/home/strick/go/s):01234                  ldd   ,s           Y=parent, d=overlay
04B4 1E20             (/home/strick/go/s):01235                  exg   y,d          d=parent, y=overlay
04B6 EDE4             (/home/strick/go/s):01236                  std   ,s             Stack=Parent window ptr, Y=Overlay window ptr
04B8 8D25             (/home/strick/go/s):01237                  bsr   L049D          Check legitamacy of overlay coords & size
04BA 2520             (/home/strick/go/s):01238                  bcs   L049A          Illegal, exit with Illegal Coord error
04BC EC10             (/home/strick/go/s):01239                  ldd   Wt.STbl,x      Get root window's screen table ptr
04BE ED30             (/home/strick/go/s):01240                  std   Wt.STbl,y      Dupe into overlay window's screen table ptr
04C0 8D4E             (/home/strick/go/s):01241                  bsr   L04CC          Set up overlay window table from root table
04C2 D659             (/home/strick/go/s):01242                  ldb   <$0059         Save switch on?
04C4 270C             (/home/strick/go/s):01243                  beq   L0490          No, don't save original area (or clear it)
04C6 17008C           (/home/strick/go/s):01244                  lbsr  L0516          Calculate sizes
04C9 2511             (/home/strick/go/s):01245                  bcs   L049A          error, return to system
04CB E627             (/home/strick/go/s):01246                  ldb   Wt.Back,y      Get background color
04CD D762             (/home/strick/go/s):01247                  stb   <$62           Make current background color
04CF 171114           (/home/strick/go/s):01248                  lbsr  L1377          CLS the overlay window area
04D2 3510             (/home/strick/go/s):01249         L0490    puls  x              Get parent's window table ptr
04D4 9C2E             (/home/strick/go/s):01250                  cmpx  <$002E         Is it the current window?
04D6 2603             (/home/strick/go/s):01251                  bne   L0499          No, exit without error
04D8 109F2E           (/home/strick/go/s):01252                  sty   <$002E         Make overlay window the current window
04DB 5F               (/home/strick/go/s):01253         L0499    clrb                 No errors
04DC 7E5177           (/home/strick/go/s):01254         L049A    jmp   >GrfStrt+SysRet Return to system
                      (/home/strick/go/s):01255         
                      (/home/strick/go/s):01256         * Make sure overlay window coords & size are legit
04DF 8D1F             (/home/strick/go/s):01257         L049D    bsr   L04BA          Get pointer to 'root' device window into X
04E1 E635             (/home/strick/go/s):01258         L049F    ldb   Wt.CPX,y       Get X coord start of overlay window
04E3 2B18             (/home/strick/go/s):01259                  bmi   L04B7          If >=128 then exit with error
04E5 EB37             (/home/strick/go/s):01260                  addb  Wt.SZX,y       Add current X size to X start
04E7 2514             (/home/strick/go/s):01261                  bcs   L04B7          added line: exit if 8-bit overflow
04E9 E18828           (/home/strick/go/s):01262                  cmpb  Wt.DfSZX,x     Compare with maximum X size allowed
04EC 220F             (/home/strick/go/s):01263                  bhi   L04B7          Too wide, exit with error
04EE E636             (/home/strick/go/s):01264                  ldb   Wt.CPY,y       Get current Y coord start
04F0 2B0B             (/home/strick/go/s):01265                  bmi   L04B7          If >=128 then exit with error
04F2 EB38             (/home/strick/go/s):01266                  addb  Wt.SZY,y       Add current Y size to Y start
04F4 2507             (/home/strick/go/s):01267                  bcs   L04B7          added line: exit if 8-bit overflow
04F6 E18829           (/home/strick/go/s):01268                  cmpb  Wt.DfSZY,x     Compare with maximum Y size allowed
04F9 2202             (/home/strick/go/s):01269                  bhi   L04B7          Too high, exit with error
04FB 5F               (/home/strick/go/s):01270                  clrb                 Will fit, exit without error
04FC 39               (/home/strick/go/s):01271         L04CB    rts   
                      (/home/strick/go/s):01272         
04FD 7E41D7           (/home/strick/go/s):01273         L04B7    jmp   >GrfStrt+L01F5 Exit with illegal coordinate error
                      (/home/strick/go/s):01274         
                      (/home/strick/go/s):01275         * Search for device window entry at the bottom of this set of overlay windows
                      (/home/strick/go/s):01276         * Entry: Y=Current window ptr
                      (/home/strick/go/s):01277         * Exit:  X=Pointer to 'root' device window (in case of multiple overlays)
0500 1F21             (/home/strick/go/s):01278         L04BA    tfr   y,x            Move current window ptr to X
0502 E612             (/home/strick/go/s):01279         L04BC    ldb   Wt.BLnk,x      Get back window # link
0504 2BF6             (/home/strick/go/s):01280                  bmi   L04CB          If overlay window itself, skip ahead
0506 8E1290           (/home/strick/go/s):01281                  ldx   #WinBase       Point to start of window tables
0509 8640             (/home/strick/go/s):01282                  lda   #Wt.Siz        Size of each entry
050B 3D               (/home/strick/go/s):01283                  mul                  Calculate address of back window table entry
                      (/home/strick/go/s):01284                  IFNE  H6309
                      (/home/strick/go/s):01285                  addr  d,x
                      (/home/strick/go/s):01286                  ELSE
050C 308B             (/home/strick/go/s):01287                  leax  d,x
                      (/home/strick/go/s):01288                  ENDC
050E 20F2             (/home/strick/go/s):01289                  bra   L04BC          Keep looking back until device window is found
                      (/home/strick/go/s):01290         
                      (/home/strick/go/s):01291         * Set up new overlay window table based on root window information
                      (/home/strick/go/s):01292         * Entry: X=root window ptr, Y=overlay window ptr
0510 6FA811           (/home/strick/go/s):01293         L04CC    clr   Wt.OBlk,y      Overlay memory block #=0
0513 170281           (/home/strick/go/s):01294                  lbsr  L079B          Go make default attribute byte from FG/BG colors
0516 A608             (/home/strick/go/s):01295                  lda   Wt.Attr,x      Get the default attribute byte from root
0518 84C0             (/home/strick/go/s):01296                  anda  #$C0           Mask out all but Blink & Underline
051A AA28             (/home/strick/go/s):01297                  ora   Wt.Attr,y      Merge with overlay window's colors
051C A728             (/home/strick/go/s):01298                  sta   Wt.Attr,y      Save new attribute byte
                      (/home/strick/go/s):01299                  IFNE  H6309
                      (/home/strick/go/s):01300                  ldq   Wt.BSW,x       Set up other defaults in overlay based on root
                      (/home/strick/go/s):01301                  stq   Wt.BSW,y
                      (/home/strick/go/s):01302                  ldq   Wt.LVec,x
                      (/home/strick/go/s):01303                  stq   Wt.LVec,y
                      (/home/strick/go/s):01304                  ELSE
051E EC09             (/home/strick/go/s):01305                  ldd   Wt.BSW,x
0520 ED29             (/home/strick/go/s):01306                  std   Wt.BSW,y
0522 EC0B             (/home/strick/go/s):01307                  ldd   Wt.BSW+2,x
0524 ED2B             (/home/strick/go/s):01308                  std   Wt.BSW+2,y
0526 EC8814           (/home/strick/go/s):01309                  ldd   Wt.LVec,x
0529 EDA814           (/home/strick/go/s):01310                  std   Wt.LVec,y
052C EC8816           (/home/strick/go/s):01311                  ldd   Wt.LVec+2,x
052F EDA816           (/home/strick/go/s):01312                  std   Wt.LVec+2,y
                      (/home/strick/go/s):01313                  ENDC
0532 EC0D             (/home/strick/go/s):01314                  ldd   Wt.FOff+1,x
0534 ED2D             (/home/strick/go/s):01315                  std   Wt.FOff+1,y
0536 E68818           (/home/strick/go/s):01316                  ldb   Wt.GBlk,x
0539 E7A818           (/home/strick/go/s):01317                  stb   Wt.GBlk,y
053C EC8819           (/home/strick/go/s):01318                  ldd   Wt.GOff,x
053F EDA819           (/home/strick/go/s):01319                  std   Wt.GOff,y
0542 E626             (/home/strick/go/s):01320                  ldb   Wt.Fore,y      Get foreground palette
0544 170219           (/home/strick/go/s):01321                  lbsr  L074C          Get bit mask if gfx window
0547 E726             (/home/strick/go/s):01322                  stb   Wt.Fore,y      Store color or mask
0549 E627             (/home/strick/go/s):01323                  ldb   Wt.Back,y      Get background palette
054B 170212           (/home/strick/go/s):01324                  lbsr  L074C          Get bit mask if gfx window
054E E727             (/home/strick/go/s):01325                  stb   Wt.Back,y      Store color or mask
0550 EC13             (/home/strick/go/s):01326                  ldd   Wt.LStrt,x     Get screen logical start address
0552 7E43F6           (/home/strick/go/s):01327                  jmp   >GrfStrt+L03A9 Set up rest of window table & return
                      (/home/strick/go/s):01328         
                      (/home/strick/go/s):01329         * Entry: X=root window table ptr
                      (/home/strick/go/s):01330         *        Y=Overlay window table ptr
                      (/home/strick/go/s):01331         * Exit:  <$4F=X screen size (chars if hware text, pixels if Gfx)
                      (/home/strick/go/s):01332         *        <$51=Y screen size (char lines if hware text, pixels if Gfx)
0555 3410             (/home/strick/go/s):01333         L0516    pshs  x              Preserve root window table ptr
0557 8D59             (/home/strick/go/s):01334                  bsr   xy.intoq     get X,Y size for text/gfx into Q
                      (/home/strick/go/s):01335                  IFNE  H6309
                      (/home/strick/go/s):01336                  stq   <$4F           Save X and Y screen size (chars or pixels)
                      (/home/strick/go/s):01337                  ELSE
0559 3406             (/home/strick/go/s):01338                  pshs  d
055B DD4F             (/home/strick/go/s):01339                  std   <$4F
055D DCB5             (/home/strick/go/s):01340                  ldd   <$B5
055F DD51             (/home/strick/go/s):01341                  std   <$51
0561 3506             (/home/strick/go/s):01342                  puls  d
                      (/home/strick/go/s):01343                  ENDC
0563 5F               (/home/strick/go/s):01344                  clrb  
0564 DD47             (/home/strick/go/s):01345                  std   <$0047         Set current X coordinate to 0
0566 1706A5           (/home/strick/go/s):01346                  lbsr  L0BEA          Calculate # bytes wide overlay is
0569 3590             (/home/strick/go/s):01347                  puls  pc,x           Restore root window table ptr & return
                      (/home/strick/go/s):01348         
                      (/home/strick/go/s):01349         * OWEnd entry point
056B 17FBF4           (/home/strick/go/s):01350         L053A    lbsr  L0177          Map in window & set up Grfdrv mem from it
056E 109C2E           (/home/strick/go/s):01351                  cmpy  <$2E           Is this the current interactive window?
0571 2608             (/home/strick/go/s):01352                  bne   L054A          No, skip ahead
0573 17FF27           (/home/strick/go/s):01353                  lbsr  L045A          Yes, get parent window tbl ptr into Y
0576 109F2E           (/home/strick/go/s):01354                  sty   <$002E         Make parent window the new interactive window
0579 3520             (/home/strick/go/s):01355                  puls  y              Get overlay window tbl ptr back
057B E6A811           (/home/strick/go/s):01356         L054A    ldb   Wt.OBlk,y      Get MMU block # of overlay window
057E 2713             (/home/strick/go/s):01357                  beq   L0562          If none, save switch was off, so skip ahead
0580 171323           (/home/strick/go/s):01358                  lbsr  L017C          Map in get/put block
0583 D77D             (/home/strick/go/s):01359                  stb   <$007D         Save block #
0585 ECA812           (/home/strick/go/s):01360                  ldd   Wt.OOff,y      Get ptr to buffer start in block
0588 DD7E             (/home/strick/go/s):01361                  std   <$007E         Save that too
058A 1707DE           (/home/strick/go/s):01362                  lbsr  L0CF8          Go put it back on the screen
058D 170379           (/home/strick/go/s):01363                  lbsr  L092B          Hunt down the overlay window GP Buffer
0590 17049B           (/home/strick/go/s):01364                  lbsr  L0A55          Kill the buffer (free it up)
0593 CCFFFF           (/home/strick/go/s):01365         L0562    ldd   #$FFFF         Mark window table entry as unused
0596 ED30             (/home/strick/go/s):01366                  std   Wt.STbl,y
0598 2014             (/home/strick/go/s):01367                  bra   L057D          Exit without error
                      (/home/strick/go/s):01368         
059A 53               (/home/strick/go/s):01369         L0569    comb  
059B C6C0             (/home/strick/go/s):01370                  ldb   #E$IllCmd      Exit with Illegal Command error
059D 2010             (/home/strick/go/s):01371                  bra   L057E
                      (/home/strick/go/s):01372         
                      (/home/strick/go/s):01373         * CWArea entry point
059F 17FBC0           (/home/strick/go/s):01374         L056E    lbsr  L0177          Map in the window
05A2 1F21             (/home/strick/go/s):01375                  tfr   y,x            Move window tbl ptr to X
05A4 17FF3A           (/home/strick/go/s):01376                  lbsr  L049F          Make sure coords will fit in orig. window sizes
05A7 2506             (/home/strick/go/s):01377                  bcs   L057E          No, exit with error
05A9 ECA824           (/home/strick/go/s):01378                  ldd   Wt.LStDf,y     get screen logical start
05AC 8D21             (/home/strick/go/s):01379                  bsr   L0581          go do it
05AE 5F               (/home/strick/go/s):01380         L057D    clrb                 No error
05AF 7E5177           (/home/strick/go/s):01381         L057E    jmp   >GrfStrt+SysRet return to system
                      (/home/strick/go/s):01382         
                      (/home/strick/go/s):01383         * This routine is ONLY called from L0516 (CWArea) and L0581 (OWSet)
                      (/home/strick/go/s):01384         * As these routines are not called too often, we can add 10 clock cycles
05B2 4F               (/home/strick/go/s):01385         xy.intoq clra               clear carry for ROLW, below
05B3 E638             (/home/strick/go/s):01386                  ldb   Wt.SZY,y       Get current Y size of overlay window into W
                      (/home/strick/go/s):01387                  IFNE  H6309
                      (/home/strick/go/s):01388                  tfr   d,w          move Y-size into W
                      (/home/strick/go/s):01389                  ELSE
05B5 DDB5             (/home/strick/go/s):01390                  std   <$B5
                      (/home/strick/go/s):01391                  ENDC
05B7 E637             (/home/strick/go/s):01392                  ldb   Wt.SZX,y       Get current X size of overlay window into D
05B9 0D60             (/home/strick/go/s):01393                  tst   <$60           Test screen type
05BB 2B11             (/home/strick/go/s):01394                  bmi   L0530          If hardware text, exit without doing more shifts
                      (/home/strick/go/s):01395                  IFNE  H6309
                      (/home/strick/go/s):01396                  rolw                 multiply by 8 for # pixels down
                      (/home/strick/go/s):01397                  rolw
                      (/home/strick/go/s):01398                  rolw               E=$00 and CC.C=0 from above,so this is really ASLW
                      (/home/strick/go/s):01399                  lslb                 Multiply by 8 for # pixels across
                      (/home/strick/go/s):01400                  lsld               A=$00 from CLRA, above.  Max 80
                      (/home/strick/go/s):01401                  lsld
                      (/home/strick/go/s):01402                  ELSE
05BD 08B6             (/home/strick/go/s):01403                  lsl   <$B6
05BF 09B5             (/home/strick/go/s):01404                  rol   <$B5
05C1 08B6             (/home/strick/go/s):01405                  lsl   <$B6
05C3 09B5             (/home/strick/go/s):01406                  rol   <$B5
05C5 08B6             (/home/strick/go/s):01407                  lsl   <$B6
05C7 09B5             (/home/strick/go/s):01408                  rol   <$B5
05C9 58               (/home/strick/go/s):01409                  lslb
05CA 58               (/home/strick/go/s):01410                  lslb
05CB 49               (/home/strick/go/s):01411                  rola
05CC 58               (/home/strick/go/s):01412                  lslb
05CD 49               (/home/strick/go/s):01413                  rola
                      (/home/strick/go/s):01414                  ENDC
05CE 39               (/home/strick/go/s):01415         L0530    rts
                      (/home/strick/go/s):01416         
                      (/home/strick/go/s):01417         * Entry :x= Screen table ptr
                      (/home/strick/go/s):01418         *        y= Window table ptr
                      (/home/strick/go/s):01419         *        d= Screen logical start address
05CF 3416             (/home/strick/go/s):01420         L0581    pshs  d,x          Preserve Screen start & screen tbl ptr
05D1 D660             (/home/strick/go/s):01421                  ldb   <$0060       get STY marker
05D3 C40F             (/home/strick/go/s):01422                  andb  #$0F         keep only first 4 bits
05D5 8E462B           (/home/strick/go/s):01423                  ldx   #GrfStrt+L05E1-1  Point to # bytes/text char table
05D8 E685             (/home/strick/go/s):01424                  ldb   b,x          get number bytes/char
05DA E723             (/home/strick/go/s):01425                  stb   Wt.CWTmp,y   Preserve # bytes/char
05DC A637             (/home/strick/go/s):01426                  lda   Wt.SZX,y     get current X size (of window)
05DE 3D               (/home/strick/go/s):01427                  mul                Calculate # bytes wide window is
05DF E722             (/home/strick/go/s):01428                  stb   Wt.XBCnt,y   Preserve #bytes wide window is
05E1 4F               (/home/strick/go/s):01429                  clra               #bytes per row MSB to 0
05E2 D663             (/home/strick/go/s):01430                  ldb   <$0063       Get #bytes per row on screen
05E4 0D60             (/home/strick/go/s):01431                  tst   <$0060       Text or graphics screen?
05E6 2B06             (/home/strick/go/s):01432                  bmi   L05A1        If text, we already have # bytes per row
                      (/home/strick/go/s):01433                  IFNE  H6309
                      (/home/strick/go/s):01434                  lsld               If graphics, multiply x 8 since each text row
                      (/home/strick/go/s):01435                  lsld               is 8 sets of lines
                      (/home/strick/go/s):01436                  lsld
                      (/home/strick/go/s):01437                  ELSE
05E8 58               (/home/strick/go/s):01438                  lslb
05E9 49               (/home/strick/go/s):01439                  rola
05EA 58               (/home/strick/go/s):01440                  lslb
05EB 49               (/home/strick/go/s):01441                  rola
05EC 58               (/home/strick/go/s):01442                  lslb
05ED 49               (/home/strick/go/s):01443                  rola
                      (/home/strick/go/s):01444                  ENDC
05EE ED24             (/home/strick/go/s):01445         L05A1    std   Wt.BRow,y    Preserve # bytes/text row (8 lines if gfx)
05F0 4F               (/home/strick/go/s):01446                  clra
05F1 E636             (/home/strick/go/s):01447                  ldb   Wt.CPY,y     Get Upper left Y coord of window
                      (/home/strick/go/s):01448                  IFNE  H6309
                      (/home/strick/go/s):01449                  muld  Wt.BRow,y    Calculate Y coordinate start
                      (/home/strick/go/s):01450                  stw   <$0097       save Y offset
                      (/home/strick/go/s):01451                  ELSE
05F3 3470             (/home/strick/go/s):01452                  pshs  x,y,u
05F5 AE24             (/home/strick/go/s):01453                  ldx   Wt.BRow,y
05F7 1718DF           (/home/strick/go/s):01454                  lbsr  MUL16
05FA DF97             (/home/strick/go/s):01455                  stu   <$97
05FC DFB5             (/home/strick/go/s):01456                  stu   <$B5
05FE 3570             (/home/strick/go/s):01457                  puls  x,y,u
                      (/home/strick/go/s):01458                  ENDC
0600 A635             (/home/strick/go/s):01459                  lda   Wt.CPX,y     get X coordinate start
0602 E623             (/home/strick/go/s):01460                  ldb   Wt.CWTmp,y   get # bytes per text character
0604 3D               (/home/strick/go/s):01461                  mul                calculate where X starts
0605 E3E1             (/home/strick/go/s):01462                  addd  ,s++         add it to screen start address
0607 D397             (/home/strick/go/s):01463                  addd  <$0097       add in Y offset
0609 ED33             (/home/strick/go/s):01464                  std   Wt.LStrt,y   get screen logical start
060B 170E5A           (/home/strick/go/s):01465                  lbsr  L11E1        home cursor
060E D660             (/home/strick/go/s):01466                  ldb   <$0060       get STY marker
0610 2B02             (/home/strick/go/s):01467                  bmi   L05C0        text, don't need scale factor
0612 8D24             (/home/strick/go/s):01468                  bsr   L05E7        calculate scaling factor
                      (/home/strick/go/s):01469         * Calculate window X size in either pixels or characters
                      (/home/strick/go/s):01470         * Q is D:W  D=X size, W=Y size
0614 8D9C             (/home/strick/go/s):01471         L05C0    bsr   xy.intoq     get X and Y for text/gfx into Q
                      (/home/strick/go/s):01472                  IFNE  H6309
                      (/home/strick/go/s):01473                  decw               adjust Y to start at 0
                      (/home/strick/go/s):01474                  decd               adjust X to start at 0
                      (/home/strick/go/s):01475                  stq   Wt.MaxX,y    save maximum X co-ordinate
                      (/home/strick/go/s):01476                  ELSE
0616 830001           (/home/strick/go/s):01477                  subd  #1
0619 EDA81B           (/home/strick/go/s):01478                  std   Wt.MaxX,y
061C 3406             (/home/strick/go/s):01479                  pshs  d
061E DCB5             (/home/strick/go/s):01480                  ldd   <$B5
0620 830001           (/home/strick/go/s):01481                  subd  #1
0623 DDB5             (/home/strick/go/s):01482                  std   <$B5
0625 EDA81D           (/home/strick/go/s):01483                  std   Wt.MaxX+2,y
0628 3506             (/home/strick/go/s):01484                  puls  d
                      (/home/strick/go/s):01485                  ENDC
062A 3590             (/home/strick/go/s):01486                  puls  x,pc         restore & return
                      (/home/strick/go/s):01487         
                      (/home/strick/go/s):01488         * # bytes for each text char
062C 01               (/home/strick/go/s):01489         L05E1    fcb   $01          640 2 color
062D 02               (/home/strick/go/s):01490                  fcb   $02          320 4 color
062E 02               (/home/strick/go/s):01491                  fcb   $02          640 4 color
062F 04               (/home/strick/go/s):01492                  fcb   $04          320 16 color
0630 02               (/home/strick/go/s):01493                  fcb   $02          80 column text (includes attribute byte)
0631 02               (/home/strick/go/s):01494                  fcb   $02          40 column text (includes attribute byte)
                      (/home/strick/go/s):01495         
                      (/home/strick/go/s):01496         * Graphic window scaling constants (When multiplied by the maximum width/
                      (/home/strick/go/s):01497         * height of the screen in characters, they equal 256. The resulting figure
                      (/home/strick/go/s):01498         * is rounded up by 1 if the result has a fraction >=.8.
                      (/home/strick/go/s):01499         * The resulting rounded figure (1 byte long) is then used by multiplying
                      (/home/strick/go/s):01500         * it with the coordinate requested, and then dividing by 256 (dropping
                      (/home/strick/go/s):01501         * the least significiant byte). The resulting 2 byte number is the scaled
                      (/home/strick/go/s):01502         * coordinate to actually use.)
                      (/home/strick/go/s):01503         * The actual scaling factor is a 16x8 bit multiply (Scale factor by # of
                      (/home/strick/go/s):01504         * columns/rows) into a 3 byte #. If the LSB is >=$CD (.8), then round up
                      (/home/strick/go/s):01505         * the 2nd byte by 1 (MSB is unused). The 2nd byte is the scaling factor.
                      (/home/strick/go/s):01506         * X scaling constants for 640x screen
0632 0333             (/home/strick/go/s):01507         XSclMSB  fdb   $0333          X Scaling factor (~3.2)
                      (/home/strick/go/s):01508         
                      (/home/strick/go/s):01509         * Y scaling constants (note: fractional part of 200 line has changed from
                      (/home/strick/go/s):01510         * $3f to $3e, since that is closer to get the 256 mod value)
0634 0AAB             (/home/strick/go/s):01511         YScl192  fdb   $0AAB          Y Scaling factor for 192 row scrn (~10.668)
0636 0A3E             (/home/strick/go/s):01512         YScl200  fdb   $0A3E          Y Scaling factor for 200 row scrn (~10.2422)
                      (/home/strick/go/s):01513         
                      (/home/strick/go/s):01514         * Calculate scaling factors for a graphics window (# row/columns*scale factor)
                      (/home/strick/go/s):01515         * Must be as close to 256 as possible
0638 4F               (/home/strick/go/s):01516         L05E7    clra               D=# of columns
0639 E637             (/home/strick/go/s):01517                  ldb   Wt.SZX,y
                      (/home/strick/go/s):01518                  IFNE  H6309
                      (/home/strick/go/s):01519                  muld  <XSclMSB,pc  Multiply by X scaling factor
                      (/home/strick/go/s):01520                  cmpf  #$cd         Need to round it up if >=.8?
                      (/home/strick/go/s):01521                  ELSE
063B 3470             (/home/strick/go/s):01522                  pshs  x,y,u
063D AE8CF2           (/home/strick/go/s):01523                  ldx   <XSclMSB,pc
0640 171896           (/home/strick/go/s):01524                  lbsr  MUL16
0643 DFB5             (/home/strick/go/s):01525                  stu   <$B5
0645 1F30             (/home/strick/go/s):01526                  tfr   u,d
0647 C1CD             (/home/strick/go/s):01527                  cmpb  #$cd
0649 1F20             (/home/strick/go/s):01528                  tfr   y,d
064B 3570             (/home/strick/go/s):01529                  puls  x,y,u
                      (/home/strick/go/s):01530                  ENDC
064D 2502             (/home/strick/go/s):01531                  blo   saveXscl     No, save result
                      (/home/strick/go/s):01532                  IFNE  H6309
                      (/home/strick/go/s):01533                  ince               Round it up
064F                  (/home/strick/go/s):01534         saveXscl ste   Wt.SXFct,y   Save X scaling multiplier
                      (/home/strick/go/s):01535                  ELSE
064F 0CB5             (/home/strick/go/s):01536                  inc   <$B5
0651 3402             (/home/strick/go/s):01537         saveXscl pshs  a
0653 96B5             (/home/strick/go/s):01538                  lda   <$B5
0655 A739             (/home/strick/go/s):01539                  sta   Wt.SXFct,y
0657 3502             (/home/strick/go/s):01540                  puls  a
                      (/home/strick/go/s):01541                  ENDC
0659 E638             (/home/strick/go/s):01542                  ldb   Wt.SZY,y     D=# of rows (A=0 from MULD already)
065B C119             (/home/strick/go/s):01543                  cmpb  #25          Is it the full 25 lines?
065D 2510             (/home/strick/go/s):01544                  blo   useold       No, use old scaling factor for compatibility
                      (/home/strick/go/s):01545                  IFNE  H6309
                      (/home/strick/go/s):01546                  muld  <YScl200,pc  Multiply by 200 line Y scaling factor
                      (/home/strick/go/s):01547                  ELSE
065F 3470             (/home/strick/go/s):01548                  pshs  x,y,u
0661 AE8CD2           (/home/strick/go/s):01549                  ldx   <YScl200,pc
0664 171872           (/home/strick/go/s):01550                  lbsr  MUL16
0667 DFB5             (/home/strick/go/s):01551                  stu   <$B5
0669 1F20             (/home/strick/go/s):01552                  tfr   y,d
066B 3570             (/home/strick/go/s):01553                  puls  x,y,u
                      (/home/strick/go/s):01554                  ENDC
066D 200E             (/home/strick/go/s):01555                  bra   chkrnd
     066F             (/home/strick/go/s):01556         useold   equ   *
                      (/home/strick/go/s):01557                  IFNE  H6309
                      (/home/strick/go/s):01558                  muld  <YScl192,pc  Multiply by 192 line Y scaling factor
                      (/home/strick/go/s):01559                  ELSE
066F 3470             (/home/strick/go/s):01560                  pshs  x,y,u
0671 AE8CC0           (/home/strick/go/s):01561                  ldx   <YScl192,pc
0674 171862           (/home/strick/go/s):01562                  lbsr  MUL16
0677 DFB5             (/home/strick/go/s):01563                  stu   <$B5
0679 1F20             (/home/strick/go/s):01564                  tfr   y,d
067B 3570             (/home/strick/go/s):01565                  puls  x,y,u
                      (/home/strick/go/s):01566                  ENDC
     067D             (/home/strick/go/s):01567         chkrnd   equ   *
                      (/home/strick/go/s):01568                  IFNE  H6309
                      (/home/strick/go/s):01569                  cmpf  #$cd         Need to round it up if >=.8?
                      (/home/strick/go/s):01570                  ELSE
067D 3404             (/home/strick/go/s):01571                  pshs  b
067F D6B6             (/home/strick/go/s):01572                  ldb   <$B6
0681 C1CD             (/home/strick/go/s):01573                  cmpb  #$cd
0683 3504             (/home/strick/go/s):01574                  puls  b
                      (/home/strick/go/s):01575                  ENDC
0685 2502             (/home/strick/go/s):01576                  blo   saveYscl     No, save result
                      (/home/strick/go/s):01577                  IFNE  H6309
                      (/home/strick/go/s):01578                  ince               Round it up
                      (/home/strick/go/s):01579                  ELSE
0687 0CB5             (/home/strick/go/s):01580                  inc   <$B5
                      (/home/strick/go/s):01581                  ENDC
     0689             (/home/strick/go/s):01582         saveYscl equ   *
                      (/home/strick/go/s):01583                  IFNE  H6309
                      (/home/strick/go/s):01584                  ste   Wt.SYFct,y   Save Y scaling multiplier
                      (/home/strick/go/s):01585                  ELSE
0689 3402             (/home/strick/go/s):01586                  pshs  a
068B 96B5             (/home/strick/go/s):01587                  lda   <$B5
068D A73A             (/home/strick/go/s):01588                  sta   Wt.SYFct,y
068F 3502             (/home/strick/go/s):01589                  puls  a
                      (/home/strick/go/s):01590                  ENDC
0691 39               (/home/strick/go/s):01591                  rts
                      (/home/strick/go/s):01592         
                      (/home/strick/go/s):01593         * PSet entry point - Change <$16,y vector to proper pattern drawing
0692 D657             (/home/strick/go/s):01594         L0611    ldb   <$0057       get group mem block #
0694 2607             (/home/strick/go/s):01595                  bne   L061D        If a pattern is wanted, go find it
0696 E72E             (/home/strick/go/s):01596                  stb   Wt.PBlk,y    Set memory block # to 0 (PSET patterning off)
0698 8E631E           (/home/strick/go/s):01597                  ldx   #GrfStrt+L1F9E  Point to normal PSET vector
069B 2015             (/home/strick/go/s):01598                  bra   L0635        Go preserve vector & exit without error
                      (/home/strick/go/s):01599         
069D 17026E           (/home/strick/go/s):01600         L061D    lbsr  L0930        Go search buffers for the one we want
06A0 251B             (/home/strick/go/s):01601                  bcs   L0639        If the buffer doesn't exist, exit with error
06A2 E72E             (/home/strick/go/s):01602                  stb   Wt.PBlk,y    Save PSET block #
06A4 308820           (/home/strick/go/s):01603                  leax  Grf.Siz,x    Skip Gfx buffer header
06A7 AF2F             (/home/strick/go/s):01604                  stx   Wt.POff,y    Save offset to actual graphics data
06A9 E6B8F0           (/home/strick/go/s):01605                  ldb   [Wt.STbl,y]  Get screen type from screen table
06AC 8E62EB           (/home/strick/go/s):01606                  ldx   #GrfStrt+L1FB4-1  Point to table (-1 since scrn type 0 illegal)
06AF E685             (/home/strick/go/s):01607                  ldb   b,x          Get unsigned offset for vector calculation
06B1 3A               (/home/strick/go/s):01608                  abx                Calculate address of vector
06B2 AFA816           (/home/strick/go/s):01609         L0635    stx   Wt.PVec,y    Preserve PSET vector
06B5 7E5176           (/home/strick/go/s):01610         L0638    jmp   >GrfStrt+L0F78 Return to system, without any errors
                      (/home/strick/go/s):01611         
                      (/home/strick/go/s):01612         * Font entry point
06B8 17FAA7           (/home/strick/go/s):01613         L063C    lbsr  L0177        Map in window
06BB 8D03             (/home/strick/go/s):01614                  bsr   L0643        Go set font group #
06BD 7E5177           (/home/strick/go/s):01615         L0639    jmp   >GrfStrt+SysRet Return to system
                      (/home/strick/go/s):01616         
06C0 D657             (/home/strick/go/s):01617         L0643    ldb   <$0057       get block number for font buffer
06C2 2603             (/home/strick/go/s):01618                  bne   L064A        If there is one, go set it up
06C4 E72B             (/home/strick/go/s):01619                  stb   Wt.FBlk,y    Set font memory block # to 0 (no fonts)
06C6 39               (/home/strick/go/s):01620                  rts   
                      (/home/strick/go/s):01621         
06C7 170B30           (/home/strick/go/s):01622         L064A    lbsr  L1002        Go set the font ('.' font default if none)
06CA 170241           (/home/strick/go/s):01623                  lbsr  L0930        Search buffers for proper one
06CD 252F             (/home/strick/go/s):01624                  bcs   L0684        Error, skip ahead
06CF 3414             (/home/strick/go/s):01625                  pshs  x,b          Preserve graphics buffer table ptr & b
06D1 EC07             (/home/strick/go/s):01626                  ldd   Grf.XSz,x    Get X size of buffer
06D3 10830006         (/home/strick/go/s):01627                  cmpd  #6           6 pixel wide buffer?
06D7 2706             (/home/strick/go/s):01628                  beq   L0662        Yes, go on
06D9 10830008         (/home/strick/go/s):01629                  cmpd  #8           8 pixel wide buffer?
06DD 2620             (/home/strick/go/s):01630                  bne   L0685        Not a font, report buffer # error
                      (/home/strick/go/s):01631         * It is a buffer size that matches those acceptable to fonts
06DF EC09             (/home/strick/go/s):01632         L0662    ldd   Grf.YSz,x    Get Y size of buffer
06E1 10830008         (/home/strick/go/s):01633                  cmpd  #8           8 pixel high buffer?
06E5 2618             (/home/strick/go/s):01634                  bne   L0685        No, report buffer # error
06E7 E70B             (/home/strick/go/s):01635                  stb   Grf.XBSz,x   Preserve font height
06E9 EC07             (/home/strick/go/s):01636                  ldd   Grf.XSz,x    Get X size of buffer again
06EB 10936E           (/home/strick/go/s):01637                  cmpd  <$006E       Get X pixel count
06EE 2707             (/home/strick/go/s):01638                  beq   L067D        Same, set up normally
06F0 E62B             (/home/strick/go/s):01639                  ldb   Wt.FBlk,y    Check font block #
06F2 2703             (/home/strick/go/s):01640                  beq   L067D        If there is none, exit normally (pointing to '.')
06F4 170D5E           (/home/strick/go/s):01641                  lbsr  L11CD        If not, do CR & set up width of line
06F7 3514             (/home/strick/go/s):01642         L067D    puls  x,b          Get back regs
06F9 E72B             (/home/strick/go/s):01643                  stb   Wt.FBlk,y    Store block # where font is
06FB AF2C             (/home/strick/go/s):01644                  stx   Wt.FOff,y    Store offset to font within 8K block
06FD 5F               (/home/strick/go/s):01645                  clrb               No error and return
06FE 39               (/home/strick/go/s):01646         L0684    rts   
                      (/home/strick/go/s):01647         
                      (/home/strick/go/s):01648         * Can't do font
06FF 3514             (/home/strick/go/s):01649         L0685    puls  x,b          Get block # and graphics table buffer ptr back
0701 C6C2             (/home/strick/go/s):01650                  ldb   #E$BadBuf    bad buffer # error
0703 43               (/home/strick/go/s):01651                  coma               Set error flag
0704 39               (/home/strick/go/s):01652                  rts   
                      (/home/strick/go/s):01653         
                      (/home/strick/go/s):01654         * GCSet entry point
0705 17FA5A           (/home/strick/go/s):01655         L068B    lbsr  L0177        Map in window
0708 D657             (/home/strick/go/s):01656                  ldb   <$0057       Get group # for graphics cursor
070A 2605             (/home/strick/go/s):01657                  bne   L0697        There is one, go process
070C E7A818           (/home/strick/go/s):01658                  stb   Wt.GBlk,y    Set to 0 to flag that graphics cursor is off
070F 20AC             (/home/strick/go/s):01659                  bra   L0639        Return to system
0711 1701FA           (/home/strick/go/s):01660         L0697    lbsr  L0930        Go search graphics buffers for the one we want
0714 25A7             (/home/strick/go/s):01661                  bcs   L0639        Can't find, return to system with error
0716 E7A818           (/home/strick/go/s):01662                  stb   Wt.GBlk,y    Store block # of graphics cursor
0719 AFA819           (/home/strick/go/s):01663                  stx   Wt.GOff,y    Store offset into block for graphics cursor
071C 2097             (/home/strick/go/s):01664                  bra   L0638        Return to system with no errors
                      (/home/strick/go/s):01665         
                      (/home/strick/go/s):01666         * FColor entry point
071E E6B8F0           (/home/strick/go/s):01667         L0707    ldb   [Wt.STbl,y]   Get screen type from screen table
0721 D760             (/home/strick/go/s):01668                  stb   <$0060        Save as current screen type
0723 D65A             (/home/strick/go/s):01669                  ldb   <$005A        Get palette number from user
0725 8D39             (/home/strick/go/s):01670                  bsr   L074C         Go get mask for it
0727 E726             (/home/strick/go/s):01671                  stb   Wt.Fore,y     Save foreground palette #
                      (/home/strick/go/s):01672                  IFNE  H6309
                      (/home/strick/go/s):01673                  tim   #Invers,Wt.BSW,y Inverse on?
                      (/home/strick/go/s):01674                  ELSE
0729 E629             (/home/strick/go/s):01675                  ldb   Wt.BSW,y      regB does not need to be preserved
072B C504             (/home/strick/go/s):01676                  bitb  #Invers
                      (/home/strick/go/s):01677                  ENDC
072D 261E             (/home/strick/go/s):01678                  bne   L0738         Yes, go process for that
072F D65A             (/home/strick/go/s):01679         L0719    ldb   <$005A        get palette register number
0731 58               (/home/strick/go/s):01680                  lslb                Move into foreground of attribute byte
0732 58               (/home/strick/go/s):01681                  lslb  
0733 58               (/home/strick/go/s):01682                  lslb  
0734 C438             (/home/strick/go/s):01683                  andb  #$38          Clear out blink/underline & background
0736 A628             (/home/strick/go/s):01684                  lda   Wt.Attr,y     Get default attributes
0738 84C7             (/home/strick/go/s):01685                  anda  #$C7          Mask out foreground
073A 2019             (/home/strick/go/s):01686                  bra   L0742         OR in new foreground
                      (/home/strick/go/s):01687         
                      (/home/strick/go/s):01688         * BColor entry point
073C E6B8F0           (/home/strick/go/s):01689         L0726    ldb   [Wt.STbl,y]   Get screen type from screen table
073F D760             (/home/strick/go/s):01690                  stb   <$0060        save it in global
0741 D65A             (/home/strick/go/s):01691                  ldb   <$005A        get palette register #
0743 8D1B             (/home/strick/go/s):01692                  bsr   L074C
0745 E727             (/home/strick/go/s):01693                  stb   Wt.Back,y     save background into window table
                      (/home/strick/go/s):01694                  IFNE  H6309
                      (/home/strick/go/s):01695                  tim   #Invers,Wt.BSW,y Inverse on?
                      (/home/strick/go/s):01696                  ELSE
0747 E629             (/home/strick/go/s):01697                  ldb   Wt.BSW,y      regB does not need to be preserved
0749 C504             (/home/strick/go/s):01698                  bitb  #Invers
                      (/home/strick/go/s):01699                  ENDC
074B 26E2             (/home/strick/go/s):01700                  bne   L0719        If set, do masking to switch fore/bck ground colors
                      (/home/strick/go/s):01701         
074D D65A             (/home/strick/go/s):01702         L0738    ldb   <$005A       Get palette register #
074F C407             (/home/strick/go/s):01703                  andb  #$07         Force to 0-7 only
0751 A628             (/home/strick/go/s):01704                  lda   Wt.Attr,y    Get default attributes
0753 84F8             (/home/strick/go/s):01705                  anda  #$F8         Mask out background
     0755             (/home/strick/go/s):01706         L0742    equ   *
                      (/home/strick/go/s):01707                  IFNE  H6309
                      (/home/strick/go/s):01708                  orr   b,a          Merge the color into attribute byte
                      (/home/strick/go/s):01709                  ELSE
0755 3404             (/home/strick/go/s):01710                  pshs  b
0757 AAE0             (/home/strick/go/s):01711                  ora   ,s+
                      (/home/strick/go/s):01712                  ENDC
0759 A728             (/home/strick/go/s):01713                  sta   Wt.Attr,y    Store new default attribute
075B 0FA9             (/home/strick/go/s):01714         L0748    clr   <$A9         No error, clear flag & return to system
075D 7E5177           (/home/strick/go/s):01715                  jmp   >GrfStrt+SysRet
                      (/home/strick/go/s):01716         
                      (/home/strick/go/s):01717         * Convert color to allowable ones for screen type
                      (/home/strick/go/s):01718         * NOTE: see if we can swap a/b roles to allow ABX instead of LEAX A,X
0760 3412             (/home/strick/go/s):01719         L074C    pshs  x,a          Preserve screen table ptr & a
0762 9660             (/home/strick/go/s):01720                  lda   <$0060       get STY marker
0764 2B0B             (/home/strick/go/s):01721                  bmi   L075D        text or same screen, return
0766 8E4772           (/home/strick/go/s):01722                  ldx   #GrfStrt+L075F-1  Point to mask table
0769 A686             (/home/strick/go/s):01723                  lda   a,x          Get offset to proper mask set
076B 3086             (/home/strick/go/s):01724                  leax  a,x          Point to the mask table
076D E480             (/home/strick/go/s):01725                  andb  ,x+          Mask out bits we can't use on this type screen
076F E685             (/home/strick/go/s):01726                  ldb   b,x          Get bit mask for the foreground color
0771 3592             (/home/strick/go/s):01727         L075D    puls  pc,x,a       restore regs & return
                      (/home/strick/go/s):01728         
0773 05               (/home/strick/go/s):01729         L075F    fcb   L0763-(L075F-1)    $05   (640/2 color table offset)
0774 08               (/home/strick/go/s):01730                  fcb   L0766-(L075F-1)    $08   (320/4 color table offset)
0775 08               (/home/strick/go/s):01731                  fcb   L0766-(L075F-1)    $08   (640/4 color table offset)
0776 0D               (/home/strick/go/s):01732                  fcb   L076B-(L075F-1)    $0d   (320/16 color table offset)
                      (/home/strick/go/s):01733         
                      (/home/strick/go/s):01734         * Color masks for 640 2 color
0777 01               (/home/strick/go/s):01735         L0763    fcb   $01
0778 00FF             (/home/strick/go/s):01736                  fcb   $00,$ff
                      (/home/strick/go/s):01737         
                      (/home/strick/go/s):01738         * Color masks for 640 and 320 4 color
077A 03               (/home/strick/go/s):01739         L0766    fcb   $03
077B 0055AAFF         (/home/strick/go/s):01740                  fcb   $00,$55,$aa,$ff
                      (/home/strick/go/s):01741         
                      (/home/strick/go/s):01742         * Color masks for 320 16 color
077F 0F               (/home/strick/go/s):01743         L076B    fcb   $0f
0780 0011223344556677 (/home/strick/go/s):01744                  fcb   $00,$11,$22,$33,$44,$55,$66,$77
0788 8899AABBCCDDEEFF (/home/strick/go/s):01745                  fcb   $88,$99,$aa,$bb,$cc,$dd,$ee,$ff
                      (/home/strick/go/s):01746         
                      (/home/strick/go/s):01747         * Get foreground color mask
0790 6D84             (/home/strick/go/s):01748         L0791    tst   ,x             Check screen type?
0792 2ACC             (/home/strick/go/s):01749                  bpl   L074C          If graphics, mask out values scrn type can't use
0794 C407             (/home/strick/go/s):01750                  andb  #$07           Just least significiant 3 bits
0796 39               (/home/strick/go/s):01751                  rts
                      (/home/strick/go/s):01752         
                      (/home/strick/go/s):01753         * Make default attribute byte from current fore/background colors (blink &
                      (/home/strick/go/s):01754         *   underline forced off)
0797 E626             (/home/strick/go/s):01755         L079B    ldb   Wt.Fore,y      Get foreground palette #
0799 C407             (/home/strick/go/s):01756                  andb  #$07           Use only 0-7
079B 58               (/home/strick/go/s):01757                  lslb                 Shift to foreground color position
079C 58               (/home/strick/go/s):01758                  lslb
079D 58               (/home/strick/go/s):01759                  lslb
079E A627             (/home/strick/go/s):01760                  lda   Wt.Back,y      Get background palette #
07A0 8407             (/home/strick/go/s):01761                  anda  #$07           Use only 0-7
                      (/home/strick/go/s):01762                  IFNE  H6309
                      (/home/strick/go/s):01763                  orr   a,b            Merge foreground & background
                      (/home/strick/go/s):01764                  ELSE
07A2 3402             (/home/strick/go/s):01765                  pshs  a
07A4 EAE0             (/home/strick/go/s):01766                  orb   ,s+
                      (/home/strick/go/s):01767                  ENDC
07A6 E728             (/home/strick/go/s):01768                  stb   Wt.Attr,y      Set new default attributes
07A8 39               (/home/strick/go/s):01769                  rts   
                      (/home/strick/go/s):01770         
                      (/home/strick/go/s):01771         * Select entry point
                      (/home/strick/go/s):01772         * Entry: Y=Newly selected window pointer
                      (/home/strick/go/s):01773         * ATD: !! Save DP, too.
07A9 3420             (/home/strick/go/s):01774         L07D7    pshs  y            save Window table ptr we will be going to
07AB 109E2E           (/home/strick/go/s):01775                  ldy   <$002E       get window table ptr we are going from
07AE 2703             (/home/strick/go/s):01776                  beq   L07E1        If none, skip ahead
07B0 17F9AF           (/home/strick/go/s):01777                  lbsr  L0177        set variables/MMU & update cursors on old window
07B3 F61000           (/home/strick/go/s):01778         L07E1    ldb   >WGlobal+G.CurTik       Reload counter for # ticks/cursor updates
07B6 F71001           (/home/strick/go/s):01779                  stb   >WGlobal+G.CntTik
07B9 10AEE4           (/home/strick/go/s):01780                  ldy   ,s           get 'to' window table pointer
07BC 17F94A           (/home/strick/go/s):01781                  lbsr  L0129        Map in window & setup grfdrv mem for new window
07BF 109F2E           (/home/strick/go/s):01782                  sty   <$002E       save it as current window entry
07C2 9F30             (/home/strick/go/s):01783                  stx   <$0030       set current screen table pointer
07C4 1F12             (/home/strick/go/s):01784                  tfr   x,y          Move to Y reg
07C6 8EFF90           (/home/strick/go/s):01785         L08DB    ldx   #$FF90       point to Gime registers
                      (/home/strick/go/s):01786         *ATD: Do a TFR 0,DP: larger but faster?
07C9 CE0090           (/home/strick/go/s):01787                  ldu   #$0090       point to shadow RAM for GIME hardware
                      (/home/strick/go/s):01788                  IFNE  H6309
                      (/home/strick/go/s):01789                  aim   #$7f,,u      remove Coco 1/2 compatibility bit: set from CoVDG
                      (/home/strick/go/s):01790                  ldb   ,u           get new value
                      (/home/strick/go/s):01791                  ELSE
07CC E6C4             (/home/strick/go/s):01792                  ldb   ,u 
07CE C47F             (/home/strick/go/s):01793                  andb  #$7f
07D0 E7C4             (/home/strick/go/s):01794                  stb   ,u
                      (/home/strick/go/s):01795                  ENDC
07D2 E784             (/home/strick/go/s):01796                  stb   ,x           save it to GIME
                      (/home/strick/go/s):01797         * Calculate extended screen address for 1 or 2 Meg upgrade
                      (/home/strick/go/s):01798         * Entry: X=$FF90 (start of GIME regs)
                      (/home/strick/go/s):01799         *        Y=Screen table ptr
                      (/home/strick/go/s):01800         * Exits: With GIME (and shadow regs) pointing to proper GIME screen address &
                      (/home/strick/go/s):01801         *        proper 512k bank (via Disto's DAT) that screen is in (0-3 for up to
                      (/home/strick/go/s):01802         *        2 Meg of RAM)
07D4 4F               (/home/strick/go/s):01803                  clra
07D5 A70F             (/home/strick/go/s):01804                  sta   $0F,x      Set horizontal scroll to 0
07D7 A74F             (/home/strick/go/s):01805                  sta   $0F,u      And set it's shadow
07D9 E621             (/home/strick/go/s):01806                  ldb   St.SBlk,y  Get block # of screen
                      (/home/strick/go/s):01807                  IFNE  H6309
                      (/home/strick/go/s):01808                  lsld             Multiply by 4 (to shift which 512k bank into A)
                      (/home/strick/go/s):01809                  lsld
                      (/home/strick/go/s):01810                  ELSE
07DB 58               (/home/strick/go/s):01811                  lslb
07DC 49               (/home/strick/go/s):01812                  rola
07DD 58               (/home/strick/go/s):01813                  lslb
07DE 49               (/home/strick/go/s):01814                  rola
                      (/home/strick/go/s):01815                  ENDC
07DF D782             (/home/strick/go/s):01816                  stb   <$0082     Remainder is the block #(0-3F) in this 512k bank
                      (/home/strick/go/s):01817         *                         No, remainder is V.OFF1 of this block. RG.
07E1 5F               (/home/strick/go/s):01818                  clrb               vertical scroll=0
07E2 ED0B             (/home/strick/go/s):01819                  std   $0B,x      Set which of up to 4 512K banks video is from
07E4 ED4B             (/home/strick/go/s):01820                  std   $0B,u      And set it's shadow, along with vertical scroll
07E6 EC22             (/home/strick/go/s):01821                  ldd   St.LStrt,y Get screen logical start
07E8 8080             (/home/strick/go/s):01822                  suba  #$80       Subtract $80 from MSB of that address
                      (/home/strick/go/s):01823                  IFNE  H6309
                      (/home/strick/go/s):01824                  lsrd             Divide result by 8
                      (/home/strick/go/s):01825                  lsrd
                      (/home/strick/go/s):01826                  lsrd
                      (/home/strick/go/s):01827                  ELSE
07EA 44               (/home/strick/go/s):01828                  lsra
07EB 56               (/home/strick/go/s):01829                  rorb
07EC 44               (/home/strick/go/s):01830                  lsra
07ED 56               (/home/strick/go/s):01831                  rorb
07EE 44               (/home/strick/go/s):01832                  lsra
07EF 56               (/home/strick/go/s):01833                  rorb
                      (/home/strick/go/s):01834                  ENDC
07F0 9B82             (/home/strick/go/s):01835                  adda  <$0082     Add to MSB of 24 bit extended screen address
07F2 ED0D             (/home/strick/go/s):01836                  std   $0D,x      Store result into GIME's vertical offset register
07F4 ED4D             (/home/strick/go/s):01837                  std   $0D,u      and it's shadow
                      (/home/strick/go/s):01838         
07F6 8E486C           (/home/strick/go/s):01839                  ldx   #GrfStrt+L086A.24-2   GIME setup table for 24-line screens
07F9 E628             (/home/strick/go/s):01840                  ldb   St.ScSiz,y   get screen size into B
07FB C118             (/home/strick/go/s):01841                  cmpb  #24          24-line screens?
07FD 2703             (/home/strick/go/s):01842                  beq   L0840        if so: skip ahead; else get 25-line pointer
07FF 8E4860           (/home/strick/go/s):01843                  ldx   #GrfStrt+L086A.25-2   GIME setup table for 25-line screens
                      (/home/strick/go/s):01844         
0802 E6A4             (/home/strick/go/s):01845         L0840    ldb   ,y           get screen type we need
0804 C40F             (/home/strick/go/s):01846                  andb  #$0F         keep only first 4 bits
0806 58               (/home/strick/go/s):01847                  lslb               multiply by 2 (2 bytes per entry)
0807 3A               (/home/strick/go/s):01848                  abx                find entry
0808 A648             (/home/strick/go/s):01849                  lda   $08,u        get current GIME video mode register
080A 8478             (/home/strick/go/s):01850                  anda  #$78         keep only non video bits
080C AA84             (/home/strick/go/s):01851                  ora   ,x           bring in new video mode
080E E601             (/home/strick/go/s):01852                  ldb   1,x          get Video resolution
                      (/home/strick/go/s):01853         * ATD: for new 'garbage-less' CLRing, and new clock, save these values
                      (/home/strick/go/s):01854         * at $08,u, and set $06,u: The clock will clear the flag at $0096, and update
                      (/home/strick/go/s):01855         * the GIME video hardware at the _start_ of the IRQ process.
0810 ED48             (/home/strick/go/s):01856                  std   $08,u        save new GIME shadow registers
0812 FDFF98           (/home/strick/go/s):01857                  std   >$FF98       save it to GIME
                      (/home/strick/go/s):01858         * Set up colors on GIME for newly selected window
0815 E625             (/home/strick/go/s):01859                  ldb   St.Brdr,y    Get current border palette #
0817 31A810           (/home/strick/go/s):01860                  leay  St.Pals,y    Point to palette register data in scrn tbl
                      (/home/strick/go/s):01861                  IFNE  H6309
                      (/home/strick/go/s):01862                  ldf   >WGlobal+G.MonTyp       Get monitor type in F for faster translates
                      (/home/strick/go/s):01863                  ENDC
081A E6A5             (/home/strick/go/s):01864                  ldb   b,y          Get border color
081C E74A             (/home/strick/go/s):01865                  stb   $0A,u        Save new border color to GIME shadow
                      (/home/strick/go/s):01866                  IFNE  H6309
                      (/home/strick/go/s):01867                  tstf               Need to convert color?
                      (/home/strick/go/s):01868                  ELSE
081E 7D1009           (/home/strick/go/s):01869                  tst   >WGlobal+G.MonTyp 
                      (/home/strick/go/s):01870                  ENDC
0821 2605             (/home/strick/go/s):01871                  bne   DoBord       Nope
0823 8E487A           (/home/strick/go/s):01872                  ldx   #GrfStrt+L0884   Point to translation table
0826 E685             (/home/strick/go/s):01873                  ldb   b,x          Get composite version
0828 F7FF9A           (/home/strick/go/s):01874         DoBord   stb   >$ff9a       Save it on GIME
082B CEFFB0           (/home/strick/go/s):01875                  ldu   #$FFB0       U=GIME palette reg. ptr
                      (/home/strick/go/s):01876                  IFNE  H6309
                      (/home/strick/go/s):01877                  tstf               Rest of colors need translation?
                      (/home/strick/go/s):01878                  ELSE
082E 7D1009           (/home/strick/go/s):01879                  tst   >WGlobal+G.MonTyp 
                      (/home/strick/go/s):01880                  ENDC
0831 260D             (/home/strick/go/s):01881                  bne   FstRGB       No, use TFM
                      (/home/strick/go/s):01882         * Composite translate here
0833 8610             (/home/strick/go/s):01883                  lda   #$10         A=# of colors
0835 E6A0             (/home/strick/go/s):01884         L0851    ldb   ,y+          Get RGB color
0837 E685             (/home/strick/go/s):01885                  ldb   b,x          Get composite version
0839 E7C0             (/home/strick/go/s):01886                  stb   ,u+          Save it to GIME
083B 4A               (/home/strick/go/s):01887                  deca               Done?
083C 22F7             (/home/strick/go/s):01888                  bhi   L0851        No, keep going
083E 2010             (/home/strick/go/s):01889                  bra   DnePaltt     Done, go do Gfx cursor
     0840             (/home/strick/go/s):01890         FstRGB   equ   *
                      (/home/strick/go/s):01891                  IFNE  H6309
                      (/home/strick/go/s):01892                  ldw   #$0010       Palette register ptr & # palette regs
                      (/home/strick/go/s):01893                  tfm   y+,u+        Move them onto GIME
                      (/home/strick/go/s):01894                  ELSE
0840 3406             (/home/strick/go/s):01895                  pshs  d
0842 C610             (/home/strick/go/s):01896                  ldb   #16
0844 A6A0             (/home/strick/go/s):01897         FstRGB2  lda   ,y+
0846 A7C0             (/home/strick/go/s):01898                  sta   ,u+
0848 5A               (/home/strick/go/s):01899                  decb
0849 26F9             (/home/strick/go/s):01900                  bne   FstRGB2
084B 4F               (/home/strick/go/s):01901                  clra
084C DDB5             (/home/strick/go/s):01902                  std   <$B5
084E 3506             (/home/strick/go/s):01903                  puls  d
                      (/home/strick/go/s):01904                  ENDC
                      (/home/strick/go/s):01905         
                      (/home/strick/go/s):01906         * ATD: PULS DP, too
0850 3520             (/home/strick/go/s):01907         DnePaltt puls  y            Restore window entry
                      (/home/strick/go/s):01908                  IFNE  H6309
                      (/home/strick/go/s):01909                  ldq   <$3D         Get last coords that Gfx cursor was ON at
                      (/home/strick/go/s):01910                  stq   <$5B         Save as current coords of Gfx cursor
                      (/home/strick/go/s):01911                  ELSE
0852 DC3F             (/home/strick/go/s):01912                  ldd   <$3F
0854 DD5D             (/home/strick/go/s):01913                  std   <$5D
0856 DDB5             (/home/strick/go/s):01914                  std   <$B5
0858 DC3D             (/home/strick/go/s):01915                  ldd   <$3D
085A DD5B             (/home/strick/go/s):01916                  std   <$5B
                      (/home/strick/go/s):01917                  ENDC
085C 170F53           (/home/strick/go/s):01918                  lbsr  L153B        Update 'last gfx cursor on' position to new one
085F 7E5176           (/home/strick/go/s):01919                  jmp   >GrfStrt+L0F78 return to system: no errors
                      (/home/strick/go/s):01920         
                      (/home/strick/go/s):01921         * GIME graphics register values
                      (/home/strick/go/s):01922         *     1st byte goes to $ff98
                      (/home/strick/go/s):01923         *     2nd byte goes to $ff99
                      (/home/strick/go/s):01924         * NOTE: To change to 25 line TV res (200 not 225), change $0475 & $0465 to
                      (/home/strick/go/s):01925         * $033D & $032D respectively (approx $825 in V1.15+)
                      (/home/strick/go/s):01926         *       ifeq MaxLines-25
0862 8034             (/home/strick/go/s):01927         L086A.25 fdb   $8034        640x200 2 color
0864 8035             (/home/strick/go/s):01928                  fdb   $8035        320x200 4 color
0866 803D             (/home/strick/go/s):01929                  fdb   $803D        640x200 4 color
0868 803E             (/home/strick/go/s):01930                  fdb   $803E        320x200 16 color
                      (/home/strick/go/s):01931                ifeq TV-1
                      (/home/strick/go/s):01932                  fdb   $033D        80x25, 200 line screen
                      (/home/strick/go/s):01933                  fdb   $032D        40x25, 200 line screen
                      (/home/strick/go/s):01934                else
086A 0475             (/home/strick/go/s):01935                  fdb   $0475        80x25, 225 line screen
086C 0465             (/home/strick/go/s):01936                  fdb   $0465        40x25, 225 line screen
                      (/home/strick/go/s):01937                endc
                      (/home/strick/go/s):01938         
                      (/home/strick/go/s):01939         *       else
086E 8014             (/home/strick/go/s):01940         L086A.24 fdb   $8014        640x192 2 color
0870 8015             (/home/strick/go/s):01941                  fdb   $8015        320x192 4 color
0872 801D             (/home/strick/go/s):01942                  fdb   $801D        640x192 4 color
0874 801E             (/home/strick/go/s):01943                  fdb   $801E        320x192 16 color
0876 0315             (/home/strick/go/s):01944                  fdb   $0315        80x24, 192 line screen
0878 0305             (/home/strick/go/s):01945                  fdb   $0305        40x24, 192 line screen
                      (/home/strick/go/s):01946         *       endc
                      (/home/strick/go/s):01947         
                      (/home/strick/go/s):01948         * 64 color translation table for RGB to composite monitor
087A 000C020E07090510 (/home/strick/go/s):01949         L0884    fcb   $00,$0c,$02,$0e,$07,$09,$05,$10
0882 1C2C0D1D0B1B0A2B (/home/strick/go/s):01950                  fcb   $1c,$2c,$0d,$1d,$0b,$1b,$0a,$2b
088A 2211122103011332 (/home/strick/go/s):01951                  fcb   $22,$11,$12,$21,$03,$01,$13,$32
0892 1E2D1F2E0F3C2F3D (/home/strick/go/s):01952                  fcb   $1e,$2d,$1f,$2e,$0f,$3c,$2f,$3d
089A 1708150627162636 (/home/strick/go/s):01953                  fcb   $17,$08,$15,$06,$27,$16,$26,$36
08A2 192A1A3A18292838 (/home/strick/go/s):01954                  fcb   $19,$2a,$1a,$3a,$18,$29,$28,$38
08AA 1404233325352434 (/home/strick/go/s):01955                  fcb   $14,$04,$23,$33,$25,$35,$24,$34
08B2 203B313E37393F30 (/home/strick/go/s):01956                  fcb   $20,$3b,$31,$3e,$37,$39,$3f,$30
                      (/home/strick/go/s):01957         
                      (/home/strick/go/s):01958         * DefGPB entry point
08BA 8D03             (/home/strick/go/s):01959         L08DC    bsr   L08E1        go do it
08BC 7E5177           (/home/strick/go/s):01960                  jmp   >GrfStrt+SysRet return to system
                      (/home/strick/go/s):01961         
                      (/home/strick/go/s):01962         * Entry point for internal DefGPB (Ex. Overlay window)
08BF DC80             (/home/strick/go/s):01963         L08E1    ldd   <$80         get buffer length requested
08C1 C3001F           (/home/strick/go/s):01964                  addd  #$001F       round it up to even multiples of 32 bytes
08C4 C4E0             (/home/strick/go/s):01965                  andb  #$E0         (to allow for header)        
08C6 DD80             (/home/strick/go/s):01966                  std   <$80         Preserve new value
08C8 D657             (/home/strick/go/s):01967                  ldb   <$57         get group
08CA C1FF             (/home/strick/go/s):01968                  cmpb  #$FF         overlay window save?
08CC 2708             (/home/strick/go/s):01969                  beq   L08F8        yes, skip ahead
08CE 0D32             (/home/strick/go/s):01970                  tst   <$32         No, has there been any buffers?
08D0 2704             (/home/strick/go/s):01971                  beq   L08F8        no, go make one
08D2 8D3A             (/home/strick/go/s):01972                  bsr   L0930        Yes, see if we can fit one in
08D4 2472             (/home/strick/go/s):01973                  bcc   L096A        Return Bad/Undefined buffer error
08D6 DC80             (/home/strick/go/s):01974         L08F8    ldd   <$80         get requested length including header
08D8 10832000         (/home/strick/go/s):01975                  cmpd  #$2000       over 8k?
08DC 220A             (/home/strick/go/s):01976                  bhi   L090A        yes, skip ahead
08DE 8D73             (/home/strick/go/s):01977                  bsr   L0975        Find block & offset to put it (new or old)
08E0 2506             (/home/strick/go/s):01978                  bcs   L090A        If couldn't find/allocate, skip ahead
08E2 8601             (/home/strick/go/s):01979                  lda   #$01         1 8K block used for this buffer
08E4 A70F             (/home/strick/go/s):01980                  sta   Grf.NBlk,x
08E6 2005             (/home/strick/go/s):01981                  bra   L090F        Skip ahead
                      (/home/strick/go/s):01982         * Couldn't find existing block that would fit it
08E8 17009A           (/home/strick/go/s):01983         L090A    lbsr  L09A8        Go allocate blocks & map 1st one in
08EB 251B             (/home/strick/go/s):01984                  bcs   L0928        Error, exit with it
08ED D77D             (/home/strick/go/s):01985         L090F    stb   <$007D       Save start block #
08EF 9F7E             (/home/strick/go/s):01986                  stx   <$007E       Save offset into block
08F1 1700E1           (/home/strick/go/s):01987                  lbsr  L09FC        Update get/put buffer header & last used in global
08F4 DC57             (/home/strick/go/s):01988                  ldd   <$0057       Get group & buffer #
08F6 ED03             (/home/strick/go/s):01989                  std   Grf.Grp,x    save group & buffer # into buffer header
08F8 DC80             (/home/strick/go/s):01990                  ldd   <$0080       Get buffer size (not including header)
08FA ED05             (/home/strick/go/s):01991                  std   Grf.BSz,x    save buffer size in buffer header
                      (/home/strick/go/s):01992                  IFNE  H6309
                      (/home/strick/go/s):01993                  clrd
                      (/home/strick/go/s):01994                  clrw
                      (/home/strick/go/s):01995                  stq   Grf.XSz,x    Init X and Y sizes to 0
                      (/home/strick/go/s):01996                  ELSE
08FC 4F               (/home/strick/go/s):01997                  clra
08FD 5F               (/home/strick/go/s):01998                  clrb
08FE ED07             (/home/strick/go/s):01999                  std   Grf.XSz,x
0900 ED09             (/home/strick/go/s):02000                  std   Grf.XSz+2,x
0902 DDB5             (/home/strick/go/s):02001                  std   <$B5
                      (/home/strick/go/s):02002                  ENDC
0904 ED0C             (/home/strick/go/s):02003                  std   Grf.LfPx,x   Init Pixel masks for 1st & last bytes in block
0906 E70E             (/home/strick/go/s):02004                  stb   Grf.STY,x    set internal screen type marker
0908 39               (/home/strick/go/s):02005         L0928    rts   
                      (/home/strick/go/s):02006         
                      (/home/strick/go/s):02007         * Set vector for overlay window buffer search
0909 8E491D           (/home/strick/go/s):02008         L092B    ldx   #GrfStrt+L093F  Point to overlay window bffr search routine
090C 2003             (/home/strick/go/s):02009                  bra   L0933        set the vector & do search
                      (/home/strick/go/s):02010         
                      (/home/strick/go/s):02011         * Set vector for graphics buffer search
090E 8E4927           (/home/strick/go/s):02012         L0930    ldx   #GrfStrt+L0949  Point to normal buffer search routine
0911 9FA1             (/home/strick/go/s):02013         L0933    stx   <$A1         save the search routine vector
0913 8D37             (/home/strick/go/s):02014                  bsr   L096E        initialize previous table pointers
0915 D632             (/home/strick/go/s):02015                  ldb   <$32         get the last block # we used for buffers
0917 272F             (/home/strick/go/s):02016                  beq   L096A        Wasn't one, return error
0919 9E33             (/home/strick/go/s):02017                  ldx   <$33         get last offset
091B 2022             (/home/strick/go/s):02018                  bra   L0961        go map it in & do search routine
                      (/home/strick/go/s):02019         
                      (/home/strick/go/s):02020         * Overlay window buffer search
091D E1A811           (/home/strick/go/s):02021         L093F    cmpb  Wt.OBlk,y    is this the right overlay?
0920 2613             (/home/strick/go/s):02022                  bne   L0957        no, move to next one and come back again
0922 ACA812           (/home/strick/go/s):02023                  cmpx  Wt.OOff,y    set conditions for offset match
0925 200C             (/home/strick/go/s):02024                  bra   L0955        go check it
                      (/home/strick/go/s):02025         
                      (/home/strick/go/s):02026         * Graphics buffer search
0927 9657             (/home/strick/go/s):02027         L0949    lda   <$0057       get group we're looking for
0929 A103             (/home/strick/go/s):02028                  cmpa  Grf.Grp,x    find it?
092B 2608             (/home/strick/go/s):02029                  bne   L0957        nope, keep looking
092D 9658             (/home/strick/go/s):02030                  lda   <$0058       get buffer #
092F 2715             (/home/strick/go/s):02031                  beq   L0968        done, return
0931 A104             (/home/strick/go/s):02032                  cmpa  Grf.Buff,x   match?
0933 2711             (/home/strick/go/s):02033         L0955    beq   L0968        yes, return
0935 D77D             (/home/strick/go/s):02034         L0957    stb   <$007D       save it as previous block #
0937 9F7E             (/home/strick/go/s):02035                  stx   <$007E       save previous offset
0939 E684             (/home/strick/go/s):02036                  ldb   Grf.Bck,x    get back block # link
093B 270B             (/home/strick/go/s):02037                  beq   L096A        there isn't one, return
093D AE01             (/home/strick/go/s):02038                  ldx   Grf.Off,x    get offset
093F 170F64           (/home/strick/go/s):02039         L0961    lbsr  L017C        go map it in
0942 6E9F11A1         (/home/strick/go/s):02040                  jmp   [>GrfMem+gr00A1]     Do search again
0946 4F               (/home/strick/go/s):02041         L0968    clra               No error & exit
0947 39               (/home/strick/go/s):02042                  rts
0948 53               (/home/strick/go/s):02043         L096A    comb               Bad buffer # error & exit
0949 C6C2             (/home/strick/go/s):02044                  ldb   #E$BadBuf
094B 39               (/home/strick/go/s):02045                  rts
                      (/home/strick/go/s):02046         
                      (/home/strick/go/s):02047         * Initialize previous buffer pointers
     094C             (/home/strick/go/s):02048         L096E    equ   *
                      (/home/strick/go/s):02049                  IFNE  H6309
                      (/home/strick/go/s):02050                  clrd
                      (/home/strick/go/s):02051                  ELSE
094C 4F               (/home/strick/go/s):02052                  clra
094D 5F               (/home/strick/go/s):02053                  clrb
                      (/home/strick/go/s):02054                  ENDC
094E D77D             (/home/strick/go/s):02055                  stb   <$7D         Buffer block #
0950 DD7E             (/home/strick/go/s):02056                  std   <$7E         Buffer offset #
0952 39               (/home/strick/go/s):02057                  rts   
                      (/home/strick/go/s):02058         
                      (/home/strick/go/s):02059         * Called by DefGPB
                      (/home/strick/go/s):02060         * Find get/put buffer & block # with room (or make new one)
                      (/home/strick/go/s):02061         * Exit: B=Block #, X=Ptr to where next GP buffer could go
0953 3424             (/home/strick/go/s):02062         L0975    pshs  b,y          Preserve regs
0955 109E80           (/home/strick/go/s):02063                  ldy   <$0080       get size of buffer requested
0958 8E4AB2           (/home/strick/go/s):02064                  ldx   #GrfStrt+L0AE0  Set vector to find empty space in a block big
095B 9FA1             (/home/strick/go/s):02065                  stx   <$00A1         enough to fit the size we want
095D 170145           (/home/strick/go/s):02066                  lbsr  L0ACD        Go find it
0960 2521             (/home/strick/go/s):02067                  bcs   L09A6        Couldn't find, exit with carry set
0962 E7E4             (/home/strick/go/s):02068                  stb   ,s           Change B on stack to block # we found
0964 EC05             (/home/strick/go/s):02069                  ldd   Grf.BSz,x    Get buffer size from GP header
0966 9380             (/home/strick/go/s):02070                  subd  <$0080       Subtract the buffer size we need
0968 260E             (/home/strick/go/s):02071                  bne   L099B        If not exact fit, skip ahead
096A 3410             (/home/strick/go/s):02072                  pshs  x            Preserve GP buffer ptr a sec
096C 170086           (/home/strick/go/s):02073                  lbsr  L0A1C        Map in previous block or new block?
096F 3510             (/home/strick/go/s):02074                  puls  x            Restore GP buffer ptr
0971 E6E4             (/home/strick/go/s):02075                  ldb   ,s           Get block # we found
0973 170F30           (/home/strick/go/s):02076                  lbsr  L017C        Go map it in
0976 200A             (/home/strick/go/s):02077                  bra   L09A5        exit without error
0978 830020           (/home/strick/go/s):02078         L099B    subd  #$0020       Don't include GP header in GP's buffer size
097B ED05             (/home/strick/go/s):02079                  std   Grf.BSz,x    Store size into GP header's size
097D 308820           (/home/strick/go/s):02080                  leax  Grf.Siz,x    Point to start of actual GP buffer data
0980 308B             (/home/strick/go/s):02081                  leax  d,x          Point to where next GP buffer will go
0982 4F               (/home/strick/go/s):02082         L09A5    clra               No error
0983 35A4             (/home/strick/go/s):02083         L09A6    puls  pc,y,b       Restore regs and return
                      (/home/strick/go/s):02084         
                      (/home/strick/go/s):02085         * If initial search couldn't find/fit block, or if size>8K, go here
                      (/home/strick/go/s):02086         * Some of stack pushing/Temp storing could be done in E/F instead
                      (/home/strick/go/s):02087         * Particularily <$99
                      (/home/strick/go/s):02088         * Map in buffer needed (or 1st block of it if >8K)
0985 DC80             (/home/strick/go/s):02089         L09A8    ldd   <$80         Get original size we wanted
0987 C30020           (/home/strick/go/s):02090                  addd  #$0020       Add block header size
098A DD97             (/home/strick/go/s):02091                  std   <$97         Preserve into temp area
098C C31FFF           (/home/strick/go/s):02092                  addd  #$1FFF       Round up to 8K 
098F 44               (/home/strick/go/s):02093                  lsra               Divide by 32 for # blocks needed
0990 44               (/home/strick/go/s):02094                  lsra  
0991 44               (/home/strick/go/s):02095                  lsra  
0992 44               (/home/strick/go/s):02096                  lsra  
0993 44               (/home/strick/go/s):02097                  lsra  
0994 1F89             (/home/strick/go/s):02098                  tfr   a,b          Dupe into B
                      (/home/strick/go/s):02099                  IFNE  H6309
                      (/home/strick/go/s):02100                  tfr   a,f          And into F
                      (/home/strick/go/s):02101                  ELSE
0996 97B6             (/home/strick/go/s):02102                  sta   <$B6
                      (/home/strick/go/s):02103                  ENDC
0998 103F39           (/home/strick/go/s):02104                  os9   F$AllRAM     Allocate memory
099B 2537             (/home/strick/go/s):02105                  bcs   L09FB        Couldn't allocate, return with error
                      (/home/strick/go/s):02106                  IFNE  H6309
                      (/home/strick/go/s):02107                  tfr   b,e          Preserve start block #
                      (/home/strick/go/s):02108                  cmpf  #$01
                      (/home/strick/go/s):02109                  ELSE
099D D7B5             (/home/strick/go/s):02110                  stb   <$B5
099F D6B6             (/home/strick/go/s):02111                  ldb   <$B6         regB does not need to be preserved
09A1 C101             (/home/strick/go/s):02112                  cmpb  #1
                      (/home/strick/go/s):02113                  ENDC
09A3 2222             (/home/strick/go/s):02114                  bhi   L09EE        If more than 1 block requested, skip ahead
09A5 CC2000           (/home/strick/go/s):02115                  ldd   #$2000       8k
09A8 9397             (/home/strick/go/s):02116                  subd  <$97         Calculate # bytes left in block after our buffer
09AA 841F             (/home/strick/go/s):02117                  anda  #$1F         Round to within 8K
09AC DD9B             (/home/strick/go/s):02118                  std   <$9B         Store in another temp
09AE 2717             (/home/strick/go/s):02119                  beq   L09EE        Exact size of 8K block, skip ahead
09B0 CC2000           (/home/strick/go/s):02120                  ldd   #$2000       Size of block
09B3 939B             (/home/strick/go/s):02121                  subd  <$9B         subtract rounded size left in block
09B5 8B20             (/home/strick/go/s):02122                  adda  #$20         Add 8K so it points to address in GRFDRV's get/
09B7 1F01             (/home/strick/go/s):02123                  tfr   d,x          put buffer block (which is where it will be)
                      (/home/strick/go/s):02124                  IFNE  H6309
                      (/home/strick/go/s):02125                  tfr   e,b          B=Start block # of allocated RAM
                      (/home/strick/go/s):02126                  ELSE
09B9 D6B5             (/home/strick/go/s):02127                  ldb   <$B5
                      (/home/strick/go/s):02128                  ENDC
09BB 170EE8           (/home/strick/go/s):02129                  lbsr  L017C        map it in
09BE 8D25             (/home/strick/go/s):02130                  bsr   L0A0C        Set up new block hdr's back links & current
09C0 DC9B             (/home/strick/go/s):02131                  ldd   <$9B         Get # bytes left in block
09C2 830020           (/home/strick/go/s):02132                  subd  #$0020       Subtract header size
09C5 ED05             (/home/strick/go/s):02133                  std   Grf.BSz,x    Preserve buffer size in header
                      (/home/strick/go/s):02134         
09C7 8E2000           (/home/strick/go/s):02135         L09EE    ldx   #$2000       Start address of GRFDRV's get/put buffer block
                      (/home/strick/go/s):02136                  IFNE  H6309
                      (/home/strick/go/s):02137                  tfr   e,b          Move start block # to proper register
                      (/home/strick/go/s):02138                  ELSE
09CA D6B5             (/home/strick/go/s):02139                  ldb   <$B5
                      (/home/strick/go/s):02140                  ENDC
09CC 170ED7           (/home/strick/go/s):02141                  lbsr  L017C        Map it in
                      (/home/strick/go/s):02142                  IFNE  H6309
                      (/home/strick/go/s):02143                  stf   Grf.NBlk,x   Save # of blocks needed for whole buffer
                      (/home/strick/go/s):02144                  ELSE
09CF 96B6             (/home/strick/go/s):02145                  lda   <$B6
09D1 A70F             (/home/strick/go/s):02146                  sta   Grf.NBlk,x
                      (/home/strick/go/s):02147                  ENDC
09D3 4F               (/home/strick/go/s):02148                  clra               No error & return
09D4 39               (/home/strick/go/s):02149         L09FB    rts   
                      (/home/strick/go/s):02150         
                      (/home/strick/go/s):02151         * Update last get/put buffer used info & Get/Put buffer header
                      (/home/strick/go/s):02152         * Updates $32 & $33-$34
                      (/home/strick/go/s):02153         * Entry: D=Size left in second block
09D5 3406             (/home/strick/go/s):02154         L09FC    pshs  d           Preserve D
09D7 9632             (/home/strick/go/s):02155                  lda   <$32        Get last mapped in block for Get/Put buffers
09D9 A784             (/home/strick/go/s):02156                  sta   Grf.Bck,x   Make that the block # for our header
09DB D732             (/home/strick/go/s):02157                  stb   <$32        Put our new last mapped block
09DD DC33             (/home/strick/go/s):02158                  ldd   <$33        Get last mapped offset
09DF ED01             (/home/strick/go/s):02159                  std   Grf.Off,x   Put that into our header
09E1 9F33             (/home/strick/go/s):02160                  stx   <$33        Put our new offset into the last mapped offset
09E3 3586             (/home/strick/go/s):02161                  puls  pc,d        restore D & return
                      (/home/strick/go/s):02162         
                      (/home/strick/go/s):02163         * Update current get/put buffer info & Get/Put Buffer header
                      (/home/strick/go/s):02164         * Updates $35 & $36-$37
                      (/home/strick/go/s):02165         *Entry: X=ptr to start of buffer header in GRFDRV's 2nd block (Get/put buffer)
09E5 3406             (/home/strick/go/s):02166         L0A0C    pshs  d           Preserve D
09E7 9635             (/home/strick/go/s):02167                  lda   <$35        Get current block/group #
09E9 A784             (/home/strick/go/s):02168                  sta   Grf.Bck,x   Make new block's back ptrs. point to it
09EB D735             (/home/strick/go/s):02169                  stb   <$35        Make current ptr to start block we just allocated
09ED DC36             (/home/strick/go/s):02170                  ldd   <$36        Get current offset
09EF ED01             (/home/strick/go/s):02171                  std   Grf.Off,x   Put into new block's offset
09F1 9F36             (/home/strick/go/s):02172                  stx   <$36        Make current offset our new one
09F3 3586             (/home/strick/go/s):02173                  puls  pc,d        Restore D and return
                      (/home/strick/go/s):02174         
                      (/home/strick/go/s):02175         * Make current GP buffer block & offset same as previous block & offset
                      (/home/strick/go/s):02176         *  (or map in new one and set it's header up if there is no previous one)
09F5 3422             (/home/strick/go/s):02177         L0A1C    pshs  y,a           Preserve regs
09F7 A684             (/home/strick/go/s):02178                  lda   Grf.Bck,x     get back block link #
09F9 10AE01           (/home/strick/go/s):02179                  ldy   Grf.Off,x     Get offset in back block to it's header
09FC 9E7E             (/home/strick/go/s):02180                  ldx   <$7E          Get previous blocks offset to buffer
09FE D67D             (/home/strick/go/s):02181                  ldb   <$7D          and it's block #
0A00 2607             (/home/strick/go/s):02182                  bne   L0A30         None mapped in, go map it in
0A02 9735             (/home/strick/go/s):02183                  sta   <$35          Make into current block & offset
0A04 109F36           (/home/strick/go/s):02184                  sty   <$36
0A07 35A2             (/home/strick/go/s):02185                  puls  pc,y,a        Restore regs & return
0A09 170E9A           (/home/strick/go/s):02186         L0A30    lbsr  L017C         Bring in 8K buffer block we need
0A0C A784             (/home/strick/go/s):02187                  sta   Grf.Bck,x     Set up GP block header
0A0E 10AF01           (/home/strick/go/s):02188                  sty   Grf.Off,x
0A11 35A2             (/home/strick/go/s):02189         L0A38    puls  pc,y,a
                      (/home/strick/go/s):02190         
                      (/home/strick/go/s):02191         * KillBuf entry point
0A13 C601             (/home/strick/go/s):02192         L0A3A    ldb   #$01          Set a temporary flag
0A15 D797             (/home/strick/go/s):02193                  stb   <$0097
0A17 17FEF4           (/home/strick/go/s):02194         L0A3E    lbsr  L0930         Go search for buffer (returns X=Buffer ptr)
0A1A 250A             (/home/strick/go/s):02195                  bcs   L0A4D         Couldn't find it, exit
0A1C 0F97             (/home/strick/go/s):02196                  clr   <$0097        Found it, clear flag
0A1E 8D0E             (/home/strick/go/s):02197                  bsr   L0A55
0A20 2509             (/home/strick/go/s):02198                  bcs   L0A52
0A22 D658             (/home/strick/go/s):02199                  ldb   <$0058
0A24 27F1             (/home/strick/go/s):02200                  beq   L0A3E
0A26 9697             (/home/strick/go/s):02201         L0A4D    lda   <$0097        Get flag
0A28 2601             (/home/strick/go/s):02202                  bne   L0A52         Didn't get killed, return to system with error
0A2A 5F               (/home/strick/go/s):02203                  clrb                No error
0A2B 7E5177           (/home/strick/go/s):02204         L0A52    jmp   >GrfStrt+SysRet  Return to system
                      (/home/strick/go/s):02205         
0A2E 3434             (/home/strick/go/s):02206         L0A55    pshs  y,x,b         Preserve regs (Window tbl ptr,gfx bffr ptr,block#)
0A30 A60F             (/home/strick/go/s):02207                  lda   Grf.NBlk,x    Get # blocks used
0A32 979F             (/home/strick/go/s):02208                  sta   <$009F        Save it
0A34 A684             (/home/strick/go/s):02209                  lda   Grf.Bck,x     Get back block #
0A36 10AE01           (/home/strick/go/s):02210                  ldy   Grf.Off,x     Get back block header offset
0A39 D67D             (/home/strick/go/s):02211                  ldb   <$007D        Get current buffer block #
0A3B 2607             (/home/strick/go/s):02212                  bne   L0A6B         There is one, continue
0A3D 9732             (/home/strick/go/s):02213                  sta   <$0032        Save back block as last block used
0A3F 109F33           (/home/strick/go/s):02214                  sty   <$0033        And it's offset
0A42 200A             (/home/strick/go/s):02215                  bra   L0A75
                      (/home/strick/go/s):02216         
0A44 170E5F           (/home/strick/go/s):02217         L0A6B    lbsr  L017C         Go map in GP Block
0A47 9E7E             (/home/strick/go/s):02218                  ldx   <$007E
0A49 A784             (/home/strick/go/s):02219                  sta   Grf.Bck,x
0A4B 10AF01           (/home/strick/go/s):02220                  sty   Grf.Off,x
0A4E E6E4             (/home/strick/go/s):02221         L0A75    ldb   ,s
0A50 969F             (/home/strick/go/s):02222                  lda   <$009F
0A52 8101             (/home/strick/go/s):02223                  cmpa  #$01
0A54 2E20             (/home/strick/go/s):02224                  bgt   L0A9E
0A56 1F98             (/home/strick/go/s):02225                  tfr   b,a
0A58 8D26             (/home/strick/go/s):02226                  bsr   L0AA8
0A5A 2411             (/home/strick/go/s):02227                  bcc   L0A94
0A5C 8E4AC6           (/home/strick/go/s):02228                  ldx   #GrfStrt+L0AF4
0A5F 9FA1             (/home/strick/go/s):02229                  stx   <$00A1
0A61 AE61             (/home/strick/go/s):02230                  ldx   1,s
0A63 8D40             (/home/strick/go/s):02231                  bsr   L0ACD
0A65 170E3E           (/home/strick/go/s):02232                  lbsr  L017C
0A68 17FF7A           (/home/strick/go/s):02233                  lbsr  L0A0C
0A6B 35B4             (/home/strick/go/s):02234                  puls  pc,y,x,b
                      (/home/strick/go/s):02235         
0A6D 8E4AF0           (/home/strick/go/s):02236         L0A94    ldx   #GrfStrt+L0B1E
0A70 9FA1             (/home/strick/go/s):02237                  stx   <$00A1
0A72 AE61             (/home/strick/go/s):02238                  ldx   1,s
0A74 8D2F             (/home/strick/go/s):02239                  bsr   L0ACD
0A76 4F               (/home/strick/go/s):02240         L0A9E    clra  
0A77 1F01             (/home/strick/go/s):02241                  tfr   d,x
0A79 D69F             (/home/strick/go/s):02242                  ldb   <$009F
0A7B 103F51           (/home/strick/go/s):02243                  os9   F$DelRAM       Deallocate the memory
0A7E 35B4             (/home/strick/go/s):02244         L0AA6    puls  pc,y,x,b
                      (/home/strick/go/s):02245         
0A80 3414             (/home/strick/go/s):02246         L0AA8    pshs  x,b
0A82 D632             (/home/strick/go/s):02247                  ldb   <$0032
0A84 2719             (/home/strick/go/s):02248                  beq   L0AC7
0A86 9132             (/home/strick/go/s):02249                  cmpa  <$0032
0A88 2718             (/home/strick/go/s):02250                  beq   L0ACA
0A8A 9E33             (/home/strick/go/s):02251                  ldx   <$0033
0A8C 200C             (/home/strick/go/s):02252                  bra   L0AC2
                      (/home/strick/go/s):02253         
0A8E A184             (/home/strick/go/s):02254         L0AB6    cmpa  Grf.Bck,x
0A90 2710             (/home/strick/go/s):02255                  beq   L0ACA
0A92 6D84             (/home/strick/go/s):02256                  tst   Grf.Bck,x
0A94 2709             (/home/strick/go/s):02257                  beq   L0AC7
0A96 E684             (/home/strick/go/s):02258                  ldb   Grf.Bck,x
0A98 AE01             (/home/strick/go/s):02259                  ldx   Grf.Off,x
0A9A 170E09           (/home/strick/go/s):02260         L0AC2    lbsr  L017C
0A9D 20EF             (/home/strick/go/s):02261                  bra   L0AB6
0A9F 5F               (/home/strick/go/s):02262         L0AC7    clrb  
0AA0 3594             (/home/strick/go/s):02263                  puls  pc,x,b
0AA2 53               (/home/strick/go/s):02264         L0ACA    comb  
0AA3 3594             (/home/strick/go/s):02265                  puls  pc,x,b
                      (/home/strick/go/s):02266         
                      (/home/strick/go/s):02267         * Subroutine called by L0975 (of DefGPB)
                      (/home/strick/go/s):02268         * Entry: Y=Size of buffer requested (including $20 byte header)
0AA5 3416             (/home/strick/go/s):02269         L0ACD    pshs  d,x          Preserve regs
0AA7 17FEA2           (/home/strick/go/s):02270         L0ACF    lbsr  L096E        initialize previous buffer ptrs to 0 ($7D-$7F)
0AAA D635             (/home/strick/go/s):02271                  ldb   <$35         get last buffer block #
0AAC 2759             (/home/strick/go/s):02272                  beq   L0B35        If 0, exit with carry set
0AAE 9E36             (/home/strick/go/s):02273                  ldx   <$36         get offset of last one into 8K block
0AB0 204E             (/home/strick/go/s):02274                  bra   L0B2E        Go map in get/put memory block & continue
                      (/home/strick/go/s):02275         
                      (/home/strick/go/s):02276         * <8K buffer define vector goes here
                      (/home/strick/go/s):02277         * Entry: X=Offset to current buffer being checked in current 8K block
                      (/home/strick/go/s):02278         *        Y=Size wanted
0AB2 10AC05           (/home/strick/go/s):02279         L0AE0    cmpy  Grf.BSz,x    Will requested size fit?
0AB5 223D             (/home/strick/go/s):02280                  bhi   L0B22        Too big, keep looking backwards
0AB7 2051             (/home/strick/go/s):02281                  bra   L0B38        Exit with carry clear & B=block #, X=offset
                      (/home/strick/go/s):02282         
0AB9 1F30             (/home/strick/go/s):02283         L0AE7    tfr   u,d
0ABB E345             (/home/strick/go/s):02284                  addd  Grf.BSz,u
0ABD C30020           (/home/strick/go/s):02285                  addd  #Grf.Siz
                      (/home/strick/go/s):02286                  IFNE  H6309
                      (/home/strick/go/s):02287                  cmpr  x,d
                      (/home/strick/go/s):02288                  ELSE
0AC0 3410             (/home/strick/go/s):02289                  pshs  x
0AC2 10A3E1           (/home/strick/go/s):02290                  cmpd  ,s++
                      (/home/strick/go/s):02291                  ENDC
0AC5 39               (/home/strick/go/s):02292                  rts   
                      (/home/strick/go/s):02293         
                      (/home/strick/go/s):02294         * A vectored routine (usually pointed to by $A1)
0AC6 E161             (/home/strick/go/s):02295         L0AF4    cmpb  1,s
0AC8 262A             (/home/strick/go/s):02296                  bne   L0B22
0ACA EE62             (/home/strick/go/s):02297                  ldu   2,s
0ACC E684             (/home/strick/go/s):02298                  ldb   Grf.Bck,x
0ACE E7C4             (/home/strick/go/s):02299                  stb   Grf.Bck,u
0AD0 EC01             (/home/strick/go/s):02300                  ldd   Grf.Off,x
0AD2 ED41             (/home/strick/go/s):02301                  std   Grf.Off,u
0AD4 1E13             (/home/strick/go/s):02302                  exg   x,u
0AD6 8DE1             (/home/strick/go/s):02303                  bsr   L0AE7
0AD8 2706             (/home/strick/go/s):02304                  beq   L0B0E
0ADA 1E13             (/home/strick/go/s):02305                  exg   x,u
0ADC 8DDB             (/home/strick/go/s):02306                  bsr   L0AE7
0ADE 2614             (/home/strick/go/s):02307                  bne   L0B22
0AE0 EF62             (/home/strick/go/s):02308         L0B0E    stu   2,s
0AE2 EC45             (/home/strick/go/s):02309                  ldd   Grf.BSz,u
0AE4 E305             (/home/strick/go/s):02310                  addd  Grf.BSz,x
0AE6 C30020           (/home/strick/go/s):02311                  addd  #Grf.Siz
0AE9 ED45             (/home/strick/go/s):02312                  std   Grf.BSz,u
0AEB 17FF07           (/home/strick/go/s):02313         L0B19    lbsr  L0A1C
0AEE 20B7             (/home/strick/go/s):02314                  bra   L0ACF
0AF0 E1E4             (/home/strick/go/s):02315         L0B1E    cmpb  ,s
0AF2 27F7             (/home/strick/go/s):02316                  beq   L0B19
                      (/home/strick/go/s):02317         * Search backwards through existing 8K blocks allocated for Get/Put buffers
                      (/home/strick/go/s):02318         * until we hit beginning
0AF4 D68A             (/home/strick/go/s):02319         L0B22    ldb   <$8A         Get GrfDrv MMU block # for get/put buffer block
0AF6 D77D             (/home/strick/go/s):02320                  stb   <$7D         Move to block #
0AF8 9F7E             (/home/strick/go/s):02321                  stx   <$7E         Save offset into block as well
0AFA E684             (/home/strick/go/s):02322                  ldb   Grf.Bck,x    Get back block link #
0AFC 2709             (/home/strick/go/s):02323                  beq   L0B35        None, exit with carry set
0AFE AE01             (/home/strick/go/s):02324                  ldx   Grf.Off,x    Get back block header offset
                      (/home/strick/go/s):02325         * Entry: X=offset into current 8K buffer/block # last used for buffer
0B00 170DA3           (/home/strick/go/s):02326         L0B2E    lbsr  L017C        Map in Get/Put buffer memory block
0B03 6E9F11A1         (/home/strick/go/s):02327                  jmp   [>GrfMem+gr00A1]     Jump to vector (can be AE0 below)
                      (/home/strick/go/s):02328         
0B07 53               (/home/strick/go/s):02329         L0B35    comb               Set carry, restore regs & return
0B08 3596             (/home/strick/go/s):02330                  puls  pc,x,d
                      (/home/strick/go/s):02331         
0B0A E761             (/home/strick/go/s):02332         L0B38    stb   1,s          Buffer fits, put block & offset into B & X
0B0C AF62             (/home/strick/go/s):02333                  stx   2,s
0B0E 5F               (/home/strick/go/s):02334                  clrb               No error
0B0F 3596             (/home/strick/go/s):02335                  puls  pc,x,d       Restore new regs and return
                      (/home/strick/go/s):02336         
                      (/home/strick/go/s):02337         * GPLoad entry point
0B11 17FDFA           (/home/strick/go/s):02338         L0B3F    lbsr  L0930        go look for group/buffer # requested
0B14 2511             (/home/strick/go/s):02339                  bcs   L0B52        Didn't find, go create one
                      (/home/strick/go/s):02340                  IFNE  H6309
                      (/home/strick/go/s):02341                  ldw   Wt.BLen,y    Get size requested
                      (/home/strick/go/s):02342                  cmpw  Grf.BSz,x    Will it fit in existing buffer?
                      (/home/strick/go/s):02343                  ELSE
0B16 3406             (/home/strick/go/s):02344                  pshs  d
0B18 ECA81F           (/home/strick/go/s):02345                  ldd   Wt.BLen,y    Get size requested
0B1B DDB5             (/home/strick/go/s):02346                  std   <$B5
0B1D 10A305           (/home/strick/go/s):02347                  cmpd  Grf.BSz,x    Will it fit in existing buffer?
0B20 3506             (/home/strick/go/s):02348                  puls  d
                      (/home/strick/go/s):02349                  ENDC
0B22 2311             (/home/strick/go/s):02350                  bls   L0B60        Yes, go do it
                      (/home/strick/go/s):02351                  IFNE  H6309
                      (/home/strick/go/s):02352                  bra   L0BE4        No, exit with buffer size too small error
                      (/home/strick/go/s):02353                  ELSE
0B24 16008B           (/home/strick/go/s):02354                  lbra  L0BE4
                      (/home/strick/go/s):02355                  ENDC
                      (/home/strick/go/s):02356                  
0B27 ECA81F           (/home/strick/go/s):02357         L0B52    ldd   Wt.BLen,y    Get size requested
0B2A DD80             (/home/strick/go/s):02358                  std   <$0080       Save in grfdrv mem
0B2C 17FD90           (/home/strick/go/s):02359                  lbsr  L08E1        Go define a get/put buffer for ourselves
0B2F 10250082         (/home/strick/go/s):02360                  lbcs   L0BE7        Couldn't find room, exit with error
0B33 D67D             (/home/strick/go/s):02361                  ldb   <$007D       Get buffer block #
0B35 E7A821           (/home/strick/go/s):02362         L0B60    stb   Wt.NBlk,y    Save buffer block # to GPLoad into
                      (/home/strick/go/s):02363                  IFNE  H6309
                      (/home/strick/go/s):02364                  clrd
                      (/home/strick/go/s):02365                  ELSE
0B38 4F               (/home/strick/go/s):02366                  clra
0B39 5F               (/home/strick/go/s):02367                  clrb
                      (/home/strick/go/s):02368                  ENDC
0B3A DD47             (/home/strick/go/s):02369                  std   <$47         Working X coord to 0?
0B3C D660             (/home/strick/go/s):02370                  ldb   <$60         Get screen type
                      (/home/strick/go/s):02371         * Possible bug: doesn't check if text screen first?
0B3E 170108           (/home/strick/go/s):02372                  lbsr  L0C2B        Directly into Graphics size calculation
0B41 170143           (/home/strick/go/s):02373                  lbsr  L0C69        Go setup the GP buffer header
0B44 308820           (/home/strick/go/s):02374                  leax  Grf.Siz,x    Point past GP header (to where data would go)
0B47 AFA822           (/home/strick/go/s):02375                  stx   Wt.NOff,y    Save ptr to where next GPLoad will go
0B4A 7E5176           (/home/strick/go/s):02376                  jmp   >GrfStrt+L0F78 no errors, and exit
                      (/home/strick/go/s):02377         
                      (/home/strick/go/s):02378         * Move buffer entry point (This ONLY gets called via the Move Buffer vector
                      (/home/strick/go/s):02379         *   from CoGRF or CoWin)
                      (/home/strick/go/s):02380         * It's used to do Get/Put buffer loads in small chunks since GRFDRV's memory
                      (/home/strick/go/s):02381         *   map can't fit a window's static mem
                      (/home/strick/go/s):02382         * Entry: F=Byte count (Maximum value=72 / $42)
                      (/home/strick/go/s):02383         *        Y=Window table ptr
0B4D E6A821           (/home/strick/go/s):02384         L0B79    ldb   Wt.NBlk,y    get block # for next graphic buffer
0B50 D797             (/home/strick/go/s):02385                  stb   <$0097       save it
0B52 170D51           (/home/strick/go/s):02386                  lbsr  L017C        go map it in
0B55 AEA822           (/home/strick/go/s):02387                  ldx   Wt.NOff,y    get offset into block
0B58 CE1200           (/home/strick/go/s):02388                  ldu   #$1200       Point to buffer of where GRFInt/CoWin put info
                      (/home/strick/go/s):02389                  IFNE  H6309
                      (/home/strick/go/s):02390                  clre               make 16 bit number in W
                      (/home/strick/go/s):02391                  tfr   w,d          dupe count into D
                      (/home/strick/go/s):02392                  addr  x,d          Point to current block offset+size of request
                      (/home/strick/go/s):02393                  ELSE
0B5B 4F               (/home/strick/go/s):02394                  clra
0B5C 97B5             (/home/strick/go/s):02395                  sta   <$B5
0B5E D6B6             (/home/strick/go/s):02396                  ldb   <$B6         loaded in CoWin
0B60 3410             (/home/strick/go/s):02397                  pshs  x
0B62 E3E1             (/home/strick/go/s):02398                  addd  ,s++         addr x,d
                      (/home/strick/go/s):02399                  ENDC 
0B64 8140             (/home/strick/go/s):02400                  cmpa  #$40         Past end of GP buffer's 8K block?
0B66 252A             (/home/strick/go/s):02401                  blo   MoveIt       No, go move whole thing in one shot
                      (/home/strick/go/s):02402         * Move data between 2 blocks of memory
0B68 CC4000           (/home/strick/go/s):02403                  ldd   #$4000       calculate how much will fit in first pass
                      (/home/strick/go/s):02404                  IFNE  H6309
                      (/home/strick/go/s):02405                  subr  x,d
                      (/home/strick/go/s):02406                  subr  d,w          move leftover to D
                      (/home/strick/go/s):02407                  exg   d,w          Move first chunk size to W
                      (/home/strick/go/s):02408                  tfm   u+,x+        move first chunk
                      (/home/strick/go/s):02409                  tfr   d,w          move leftover back to W
                      (/home/strick/go/s):02410                  ELSE
0B6B 3410             (/home/strick/go/s):02411                  pshs  x            save regX
0B6D A3E1             (/home/strick/go/s):02412                  subd  ,s++         subr x,d
0B6F 3426             (/home/strick/go/s):02413                  pshs  d,y          save regD regY
0B71 DCB5             (/home/strick/go/s):02414                  ldd   <$B5
0B73 A3E4             (/home/strick/go/s):02415                  subd  ,s           subr d,w
0B75 DDB5             (/home/strick/go/s):02416                  std   <$B5         this is the value of regW after tfm & tfr d,w
0B77 10AEE1           (/home/strick/go/s):02417                  ldy   ,s++         get counter regD after subr x,d & exg d,w
0B7A 2708             (/home/strick/go/s):02418                  beq   LMoveb
0B7C A6C0             (/home/strick/go/s):02419         LMove    lda   ,u+
0B7E A780             (/home/strick/go/s):02420                  sta   ,x+
0B80 313F             (/home/strick/go/s):02421                  leay  -1,y
0B82 26F8             (/home/strick/go/s):02422                  bne   LMove
0B84 3520             (/home/strick/go/s):02423         LMoveb   puls  y            restore regY
0B86 96B5             (/home/strick/go/s):02424                  lda   <$B5         may not be needed
                      (/home/strick/go/s):02425                  ENDC
0B88 0C97             (/home/strick/go/s):02426                  inc   <$0097       increment to next block #
0B8A D697             (/home/strick/go/s):02427                  ldb   <$0097       get new block #
0B8C 170D17           (/home/strick/go/s):02428                  lbsr  L017C        map it in
0B8F 8E2000           (/home/strick/go/s):02429                  ldx   #$2000       reset pointer to start of block
     0B92             (/home/strick/go/s):02430         MoveIt   equ   *
                      (/home/strick/go/s):02431                  IFNE  H6309
                      (/home/strick/go/s):02432                  tfm   u+,x+        Block copy buffer into GP buffer
                      (/home/strick/go/s):02433                  ELSE
0B92 3420             (/home/strick/go/s):02434                  pshs  y
0B94 109EB5           (/home/strick/go/s):02435                  ldy   <$B5 
0B97 270C             (/home/strick/go/s):02436                  beq   LMove2b
0B99 A6C0             (/home/strick/go/s):02437         LMove2   lda   ,u+
0B9B A780             (/home/strick/go/s):02438                  sta   ,x+
0B9D 5A               (/home/strick/go/s):02439                  decb
0B9E 313F             (/home/strick/go/s):02440                  leay  -1,y
0BA0 26F7             (/home/strick/go/s):02441                  bne   LMove2
0BA2 109FB5           (/home/strick/go/s):02442                  sty   <$B5
0BA5 3520             (/home/strick/go/s):02443         LMove2b  puls  y
                      (/home/strick/go/s):02444                  ENDC
0BA7 D697             (/home/strick/go/s):02445         L0BA2    ldb   <$0097       get the block #
0BA9 E7A821           (/home/strick/go/s):02446                  stb   Wt.NBlk,y    update it in table
0BAC AFA822           (/home/strick/go/s):02447                  stx   Wt.NOff,y    save next offset in table
0BAF 7E5176           (/home/strick/go/s):02448                  jmp   >GrfStrt+L0F78 no errors, and exit grfdrv
                      (/home/strick/go/s):02449         
0BB2 53               (/home/strick/go/s):02450         L0BE4    comb                 Buffer size too small error
0BB3 C6BF             (/home/strick/go/s):02451                  ldb   #E$BufSiz
0BB5 7E5177           (/home/strick/go/s):02452         L0BE7    jmp   >GrfStrt+SysRet
                      (/home/strick/go/s):02453         
                      (/home/strick/go/s):02454         * GetBlk entry point
0BB8 17165C           (/home/strick/go/s):02455         L0BAE    lbsr  L1DF6          Go scale X/Y coords @ <$47-$4A,check if in range
0BBB 25F8             (/home/strick/go/s):02456                  bcs   L0BE7          No, exit with error
                      (/home/strick/go/s):02457                  IFNE  H6309
                      (/home/strick/go/s):02458                  ldq   <$4f           Get X/Y sizes
                      (/home/strick/go/s):02459                  decd                 Bump down by 1 each since size, not coord
                      (/home/strick/go/s):02460                  decw
                      (/home/strick/go/s):02461                  stq   <$4f           Save
                      (/home/strick/go/s):02462                  ELSE
0BBD DC51             (/home/strick/go/s):02463                  ldd   <$51
0BBF 830001           (/home/strick/go/s):02464                  subd  #1
0BC2 DD51             (/home/strick/go/s):02465                  std   <$51
0BC4 DDB5             (/home/strick/go/s):02466                  std   <$B5
0BC6 DC4F             (/home/strick/go/s):02467                  ldd   <$4f
0BC8 830001           (/home/strick/go/s):02468                  subd  #1
0BCB DD4F             (/home/strick/go/s):02469                  std   <$4f
                      (/home/strick/go/s):02470                  ENDC
0BCD 17166D           (/home/strick/go/s):02471                  lbsr  L1E01          Go scale X/Y Sizes @ <$4f-$52,check if in range 
0BD0 25E3             (/home/strick/go/s):02472                  bcs   L0BE7          No, exit with error
                      (/home/strick/go/s):02473                  IFNE  H6309
                      (/home/strick/go/s):02474                  ldq   <$4f           Get X/Y sizes
                      (/home/strick/go/s):02475                  incd                 Bump back up
                      (/home/strick/go/s):02476                  incw
                      (/home/strick/go/s):02477                  stq   <$4f           Save
                      (/home/strick/go/s):02478                  ELSE
0BD2 DC51             (/home/strick/go/s):02479                  ldd   <$51
0BD4 C30001           (/home/strick/go/s):02480                  addd  #1
0BD7 DD51             (/home/strick/go/s):02481                  std   <$51
0BD9 DDB5             (/home/strick/go/s):02482                  std   <$B5
0BDB DC4F             (/home/strick/go/s):02483                  ldd   <$4f
0BDD C30001           (/home/strick/go/s):02484                  addd  #1
0BE0 DD4F             (/home/strick/go/s):02485                  std   <$4f
                      (/home/strick/go/s):02486                  ENDC
0BE2 17F57D           (/home/strick/go/s):02487                  lbsr  L0177          Map in window & setup some GRFDRV vars.
0BE5 8D47             (/home/strick/go/s):02488                  bsr   L0C0B          Calc width of buffer in bytes & next line offset
0BE7 17FD24           (/home/strick/go/s):02489                  lbsr  L0930          Go search for GP buffer
0BEA 2407             (/home/strick/go/s):02490                  bcc   L0BC9          Found it, skip ahead
0BEC 17FCD0           (/home/strick/go/s):02491                  lbsr  L08E1          Couldn't, create one
0BEF 240D             (/home/strick/go/s):02492                  bcc   L0BD4          Got one, skip ahead
0BF1 20C2             (/home/strick/go/s):02493                  bra   L0BE7          Otherwise, exit with error
                      (/home/strick/go/s):02494         
                      (/home/strick/go/s):02495         * Found GP buffer already defined
0BF3 D77D             (/home/strick/go/s):02496         L0BC9    stb   <$007D         Save block #
0BF5 9F7E             (/home/strick/go/s):02497                  stx   <$007E         Save offset into block
0BF7 DC80             (/home/strick/go/s):02498                  ldd   <$0080         Get buffer length
0BF9 10A305           (/home/strick/go/s):02499                  cmpd  Grf.BSz,x      Within range of buffer's current length?
0BFC 22B4             (/home/strick/go/s):02500                  bhi   L0BE4          No, exit with Buffer Size Too Small error
                      (/home/strick/go/s):02501         * GP buffer will fit requested data size
0BFE 170086           (/home/strick/go/s):02502         L0BD4    lbsr  L0C69          Go set up the GP buffer's header
0C01 170812           (/home/strick/go/s):02503                  lbsr  L1E9D          Go calculate addr. on screen to start GETting @
0C04 9F72             (/home/strick/go/s):02504                  stx   <$0072         Save it
0C06 9E7E             (/home/strick/go/s):02505                  ldx   <$007E         Get offset into GP buffer block
0C08 17009F           (/home/strick/go/s):02506                  lbsr  L0C8D          Go copy from screen into buffer
0C0B 7E5176           (/home/strick/go/s):02507         L0BE1    jmp   >GrfStrt+L0F78 exit with no errors
                      (/home/strick/go/s):02508         
                      (/home/strick/go/s):02509         * Save switch on- comes here to save screen contents under overlay window
                      (/home/strick/go/s):02510         * into a get/put buffer
                      (/home/strick/go/s):02511         * Entry: Y=Current (or current Overlay) window ptr
0C0E EC33             (/home/strick/go/s):02512         L0BEA    ldd   Wt.LStrt,y      Get screen logical start address
0C10 DD72             (/home/strick/go/s):02513                  std   <$72            Make it the overlay window save start
0C12 8D1A             (/home/strick/go/s):02514                  bsr   L0C0B           Calculate sizes in bytes, etc.
0C14 CCFFFF           (/home/strick/go/s):02515                  ldd   #$FFFF          Group & buffer # to $FF
0C17 DD57             (/home/strick/go/s):02516                  std   <$57
0C19 17FCA3           (/home/strick/go/s):02517                  lbsr  L08E1           Define get/put buffer for overlay window
0C1C 250F             (/home/strick/go/s):02518                  bcs   L0C0A           Error defining buffer;exit with it
0C1E D67D             (/home/strick/go/s):02519                  ldb   <$007D          Get MMU block # for overlay window copy
0C20 E7A811           (/home/strick/go/s):02520                  stb   Wt.OBlk,y       Save in window table
0C23 DC7E             (/home/strick/go/s):02521                  ldd   <$007E          Get offset into MMU block for overlay window copy
0C25 EDA812           (/home/strick/go/s):02522                  std   Wt.OOff,y       Save it in window table
0C28 8D5D             (/home/strick/go/s):02523                  bsr   L0C69           Set up get/put buffer header
0C2A 8D7E             (/home/strick/go/s):02524                  bsr   L0C8D           Preserve screen under overlay window
0C2C 5F               (/home/strick/go/s):02525                  clrb                  No error & return
0C2D 39               (/home/strick/go/s):02526         L0C0A    rts   
                      (/home/strick/go/s):02527         
                      (/home/strick/go/s):02528         * Setup # bytes wide overlay window is & offset to get to next line in overlay
                      (/home/strick/go/s):02529         *   window when saving/restoring
                      (/home/strick/go/s):02530         * Entry: Y=Current (or current Overlay) window ptr
0C2E D660             (/home/strick/go/s):02531         L0C0B    ldb   <$60            Get screen type
0C30 2A07             (/home/strick/go/s):02532                  bpl   L0C18           If gfx window, skip ahead
0C32 D650             (/home/strick/go/s):02533                  ldb   <$50            Get LSB of X size of overlay window
0C34 58               (/home/strick/go/s):02534                  lslb                  Multiply x2 (for attribute byte)
0C35 D709             (/home/strick/go/s):02535                  stb   <$09            Save width of window (in bytes)
0C37 2004             (/home/strick/go/s):02536                  bra   L0C1C           Skip ahead
                      (/home/strick/go/s):02537         
0C39 8D0E             (/home/strick/go/s):02538         L0C18    bsr   L0C2B           Calculate width info for Gfx windows
0C3B D609             (/home/strick/go/s):02539                  ldb   <$09            Get # bytes for width of window
0C3D 9652             (/home/strick/go/s):02540         L0C1C    lda   <$52            Get height of window in bytes
0C3F 3D               (/home/strick/go/s):02541                  mul                   Calculate total # bytes needed
0C40 DD80             (/home/strick/go/s):02542                  std   <$80            Preserve # bytes needed to hold saved area
0C42 D663             (/home/strick/go/s):02543                  ldb   <$63            Get # bytes per row on screen
0C44 D009             (/home/strick/go/s):02544                  subb  <$09            Subtract # bytes wide saved area will be
0C46 D70A             (/home/strick/go/s):02545                  stb   <$0A            Store # bytes to next line after current width is done
0C48 39               (/home/strick/go/s):02546                  rts                   Return
                      (/home/strick/go/s):02547         
                      (/home/strick/go/s):02548         * Calculate GP buffer width in bytes for graphics, & # pixels used in first &
                      (/home/strick/go/s):02549         *  last bytes of each GP buffer line
                      (/home/strick/go/s):02550         *   (Used by GetBlk, GPLoad, OWSet)
                      (/home/strick/go/s):02551         * Entry: B=Screen type
0C49 8607             (/home/strick/go/s):02552         L0C2B    lda   #%00000111      2 color divide by 8 mask
0C4B 5A               (/home/strick/go/s):02553                  decb  
0C4C 2708             (/home/strick/go/s):02554                  beq   L0C38           For 640x200x2 screens
0C4E 8601             (/home/strick/go/s):02555                  lda   #%00000001
0C50 C103             (/home/strick/go/s):02556                  cmpb  #$03            If 320x200x16, divide by 2 mask
0C52 2702             (/home/strick/go/s):02557                  beq   L0C38
0C54 8603             (/home/strick/go/s):02558                  lda   #%00000011      If any 4 color gfx window, divide by 4 mask
0C56 9797             (/home/strick/go/s):02559         L0C38    sta   <$97            Preserve mask for # pixels used in 1 byte
0C58 D648             (/home/strick/go/s):02560                  ldb   <$48            Get working X coordinate LSB (0 from OWSet)
0C5A 53               (/home/strick/go/s):02561                  comb                  Make 'hole' to calculate # pixels
0C5B D497             (/home/strick/go/s):02562                  andb  <$97            Use mask to calculate # pixels used
0C5D 5C               (/home/strick/go/s):02563                  incb                  Make base 1
0C5E D706             (/home/strick/go/s):02564                  stb   <$06            Preserve # pixels used in 1st byte of GP line
0C60 4F               (/home/strick/go/s):02565                  clra                  D=# pixels used in last byte
0C61 10934F           (/home/strick/go/s):02566                  cmpd  <$4F            More than # bytes on screen?
0C64 2C0B             (/home/strick/go/s):02567                  bge   L0C53           Yes, 
0C66 D650             (/home/strick/go/s):02568                  ldb   <$50            Otherwise, get LSB of X size in bytes
0C68 D006             (/home/strick/go/s):02569                  subb  <$06            Subtract # pixels used in first byte
0C6A D497             (/home/strick/go/s):02570                  andb  <$97            Calculate # pixels in last byte
0C6C 2603             (/home/strick/go/s):02571                  bne   L0C53           If not 0, it is legit
0C6E D697             (/home/strick/go/s):02572                  ldb   <$97            If it is 0, then use full byte's worth
0C70 5C               (/home/strick/go/s):02573                  incb
0C71 D707             (/home/strick/go/s):02574         L0C53    stb   <$07            Save # pixels used in last byte of GP line
0C73 4F               (/home/strick/go/s):02575                  clra                  D=# of pixels wide GP buffer is
0C74 D648             (/home/strick/go/s):02576                  ldb   <$48            Get LSB of 'working' X coordinate
0C76 D497             (/home/strick/go/s):02577                  andb  <$97            AND it with # pixels/byte
0C78 D34F             (/home/strick/go/s):02578                  addd  <$4F            Add value to X size (in bytes)
0C7A DB97             (/home/strick/go/s):02579                  addb  <$97            Add # pixels/byte
0C7C 8900             (/home/strick/go/s):02580                  adca  #$00            Make into D register
                      (/home/strick/go/s):02581         * Divide loop: Divide by 4 for 16 color, by 8 for 4 color & by 16 for 2 color
     0C7E             (/home/strick/go/s):02582         L0C60    equ   *
                      (/home/strick/go/s):02583                  IFNE  H6309
                      (/home/strick/go/s):02584                  lsrd                  Divide by 2
                      (/home/strick/go/s):02585                  ELSE
0C7E 44               (/home/strick/go/s):02586                  lsra
0C7F 56               (/home/strick/go/s):02587                  rorb
                      (/home/strick/go/s):02588                  ENDC
0C80 0497             (/home/strick/go/s):02589                  lsr   <$97            Shift right
0C82 26FA             (/home/strick/go/s):02590                  bne   L0C60           until we hit first 0 bit
0C84 D709             (/home/strick/go/s):02591                  stb   <$09            # bytes for width of overlay window
0C86 39               (/home/strick/go/s):02592                  rts   
                      (/home/strick/go/s):02593         
                      (/home/strick/go/s):02594         * Setup buffer header
     0C87             (/home/strick/go/s):02595         L0C69    equ   *
                      (/home/strick/go/s):02596                  IFNE  H6309
                      (/home/strick/go/s):02597                  ldq   <$004F       get X & Y sizes (in pixels)
                      (/home/strick/go/s):02598                  stq   Grf.XSz,x    save it in buffer header
                      (/home/strick/go/s):02599                  ELSE
0C87 DC51             (/home/strick/go/s):02600                  ldd   <$51
0C89 ED09             (/home/strick/go/s):02601                  std   Grf.XSz+2,x
0C8B DDB5             (/home/strick/go/s):02602                  std   <$B5 
0C8D DC4F             (/home/strick/go/s):02603                  ldd   <$4F
0C8F ED07             (/home/strick/go/s):02604                  std   Grf.XSz,x
                      (/home/strick/go/s):02605                  ENDC
0C91 D660             (/home/strick/go/s):02606                  ldb   <$0060       get screen type
0C93 E70E             (/home/strick/go/s):02607                  stb   Grf.STY,x    save it in header
0C95 DC06             (/home/strick/go/s):02608                  ldd   <$0006       Get start & end pixel masks (for uneven bytes)
0C97 ED0C             (/home/strick/go/s):02609                  std   Grf.LfPx,x   save them in header
0C99 D609             (/home/strick/go/s):02610                  ldb   <$0009       Get width of buffer in bytes?
0C9B E70B             (/home/strick/go/s):02611                  stb   Grf.XBSz,x   save it in header
0C9D 4F               (/home/strick/go/s):02612                  clra               D=B
0C9E DD4F             (/home/strick/go/s):02613                  std   <$004F       Save into working X coord
0CA0 39               (/home/strick/go/s):02614                  rts   
                      (/home/strick/go/s):02615         
                      (/home/strick/go/s):02616         * Move get/put buffer to screen
                      (/home/strick/go/s):02617         * Entry: Y=Ptr to GP buffer?
0CA1 1F21             (/home/strick/go/s):02618         L0C81    tfr   y,x          X=Ptr to GP buffer
0CA3 9697             (/home/strick/go/s):02619                  lda   <$0097       Get # bytes to start on next GP line on screen
0CA5 970A             (/home/strick/go/s):02620                  sta   <$000A       Save in another spot
0CA7 8601             (/home/strick/go/s):02621                  lda   #$01         flag we're going to screen
0CA9 21               (/home/strick/go/s):02622                  fcb   $21          skip 1 byte
                      (/home/strick/go/s):02623         
                      (/home/strick/go/s):02624         * Move get/put buffer to mem
0CAA 4F               (/home/strick/go/s):02625         L0C8D    clra               Flag we're going to memory
0CAB 9799             (/home/strick/go/s):02626                  sta   <$0099       save flag
                      (/home/strick/go/s):02627         * Move buffer to screen/mem
                      (/home/strick/go/s):02628         * Attempt reversing roles of D & W
0CAD 3420             (/home/strick/go/s):02629                  pshs  y            preserve y
0CAF 318820           (/home/strick/go/s):02630                  leay  Grf.Siz,x    get pointer to raw buffer data
0CB2 9E72             (/home/strick/go/s):02631                  ldx   <$0072       get address of screen
0CB4 D650             (/home/strick/go/s):02632         L0C96    ldb   <$0050       Get width count of buffer
0CB6 8D09             (/home/strick/go/s):02633                  bsr   PutOneL      put one line
0CB8 D60A             (/home/strick/go/s):02634                  ldb   <$000A       get width # bytes to start of next GP line on scrn
0CBA 3A               (/home/strick/go/s):02635                  abx                move to next line
0CBB 0A52             (/home/strick/go/s):02636                  dec   <$0052       done height?
0CBD 26F5             (/home/strick/go/s):02637                  bne   L0C96        no, go do next line
0CBF 35A0             (/home/strick/go/s):02638                  puls  pc,y         restore & return
                      (/home/strick/go/s):02639         
                      (/home/strick/go/s):02640         * put one line from a GP buffer onto the screen
0CC1 4F               (/home/strick/go/s):02641         PutOneL  clra               make 16-bit number of width of GP buffer
                      (/home/strick/go/s):02642                  IFNE  H6309
                      (/home/strick/go/s):02643                  tfr   d,w          copy it to W
                      (/home/strick/go/s):02644                  addr  y,d          check if we will need to get next GP 8k bank
                      (/home/strick/go/s):02645                  ELSE
0CC2 DDB5             (/home/strick/go/s):02646                  std   <$B5
0CC4 3420             (/home/strick/go/s):02647                  pshs  y
0CC6 E3E1             (/home/strick/go/s):02648                  addd  ,s++
                      (/home/strick/go/s):02649                  ENDC
0CC8 8140             (/home/strick/go/s):02650                  cmpa  #$40         do we?
0CCA 251A             (/home/strick/go/s):02651                  blo   L0C98        nope, go do it
0CCC CC4000           (/home/strick/go/s):02652                  ldd   #$4000       calculate # bytes we can do from this 8k bank
                      (/home/strick/go/s):02653                  IFNE  H6309
                      (/home/strick/go/s):02654                  subr  y,d
                      (/home/strick/go/s):02655                  subr  d,w          calculate leftover into W
                      (/home/strick/go/s):02656                  exg   d,w          Swap for copy
                      (/home/strick/go/s):02657                  ELSE
0CCF 3420             (/home/strick/go/s):02658                  pshs  y
0CD1 A3E1             (/home/strick/go/s):02659                  subd  ,s++         subr y,d
0CD3 3446             (/home/strick/go/s):02660                  pshs  d,u          save regD & regU
0CD5 DCB5             (/home/strick/go/s):02661                  ldd   <$B5         get regW
0CD7 A3E4             (/home/strick/go/s):02662                  subd  ,s           subr d,w regD now = regW
0CD9 EEE1             (/home/strick/go/s):02663                  ldu   ,s++         get regD
0CDB DFB5             (/home/strick/go/s):02664                  stu   <$B5         exg d,w
0CDD 3540             (/home/strick/go/s):02665                  puls  u
                      (/home/strick/go/s):02666                  ENDC
0CDF 8D05             (/home/strick/go/s):02667                  bsr   L0C98        move first chunk
                      (/home/strick/go/s):02668                  IFNE  H6309
                      (/home/strick/go/s):02669                  tfr   d,w          Move remainder to W
                      (/home/strick/go/s):02670                  ELSE
0CE1 DDB5             (/home/strick/go/s):02671                  std   <$B5
                      (/home/strick/go/s):02672                  ENDC
0CE3 170273           (/home/strick/go/s):02673                  lbsr  L0E70        go map in next block & reset buffer pointer
                      (/home/strick/go/s):02674         
                      (/home/strick/go/s):02675         * Move a graphics line of data
                      (/home/strick/go/s):02676         * Entry: W=# contigous bytes to move
0CE6 0D99             (/home/strick/go/s):02677         L0C98    tst   <$0099       going to screen or mem?
0CE8 2616             (/home/strick/go/s):02678                  bne   L0CA2        screen, go move it
                      (/home/strick/go/s):02679                  IFNE  H6309
                      (/home/strick/go/s):02680                  tfm   x+,y+        Copy from screen to mem
                      (/home/strick/go/s):02681                  rts
                      (/home/strick/go/s):02682                  ELSE
0CEA 3452             (/home/strick/go/s):02683                  pshs  a,x,u
0CEC 1F13             (/home/strick/go/s):02684                  tfr   x,u
0CEE 9EB5             (/home/strick/go/s):02685                  ldx   <$B5
0CF0 270C             (/home/strick/go/s):02686                  beq   LMove3b
0CF2 A6C0             (/home/strick/go/s):02687         LMove3   lda   ,u+
0CF4 A7A0             (/home/strick/go/s):02688                  sta   ,y+
0CF6 301F             (/home/strick/go/s):02689                  leax  -1,x
0CF8 26F8             (/home/strick/go/s):02690                  bne   LMove3
0CFA 9FB5             (/home/strick/go/s):02691                  stx   <$B5
0CFC EF61             (/home/strick/go/s):02692                  stu   1,s
0CFE 35D2             (/home/strick/go/s):02693         LMove3b  puls  a,x,u,pc
                      (/home/strick/go/s):02694                  ENDC
                      (/home/strick/go/s):02695         
     0D00             (/home/strick/go/s):02696         L0CA2    equ   *
                      (/home/strick/go/s):02697                  IFNE  H6309
                      (/home/strick/go/s):02698                  tfm   y+,x+        Copy from mem to screen
                      (/home/strick/go/s):02699                  rts
                      (/home/strick/go/s):02700                  ELSE
0D00 3452             (/home/strick/go/s):02701                  pshs  a,x,u
0D02 1F13             (/home/strick/go/s):02702                  tfr   x,u
0D04 9EB5             (/home/strick/go/s):02703                  ldx   <$B5
0D06 270C             (/home/strick/go/s):02704                  beq   LMove4b
0D08 A6A0             (/home/strick/go/s):02705         LMove4   lda   ,y+
0D0A A7C0             (/home/strick/go/s):02706                  sta   ,u+
0D0C 301F             (/home/strick/go/s):02707                  leax  -1,x
0D0E 26F8             (/home/strick/go/s):02708                  bne   LMove4
0D10 9FB5             (/home/strick/go/s):02709                  stx   <$B5
0D12 EF61             (/home/strick/go/s):02710                  stu   1,s
0D14 35D2             (/home/strick/go/s):02711         LMove4b  puls  a,x,u,pc
                      (/home/strick/go/s):02712                  ENDC
                      (/home/strick/go/s):02713         
                      (/home/strick/go/s):02714         * PutBlk entry point
                      (/home/strick/go/s):02715         * Entry from GRF/WINDInt:
                      (/home/strick/go/s):02716         * <$57=Group #
                      (/home/strick/go/s):02717         * <$58=Buffer #
                      (/home/strick/go/s):02718         * <$47=Upper left X coord
                      (/home/strick/go/s):02719         * <$49=Upper left Y coord
0D16 17F449           (/home/strick/go/s):02720         L0CBB    lbsr  L0177        Go map in window & setup some GRFDRV vars
0D19 17FBF2           (/home/strick/go/s):02721                  lbsr  L0930        search & map in get put buffer
0D1C 254A             (/home/strick/go/s):02722                  bcs   L0CF5        Error; exit with it
0D1E D77D             (/home/strick/go/s):02723                  stb   <$007D       save block # of buffer
0D20 9F7E             (/home/strick/go/s):02724                  stx   <$007E       save offset into block buffer starts at
                      (/home/strick/go/s):02725                  IFNE  H6309
                      (/home/strick/go/s):02726                  ldq   Grf.XSz,x    Get X&Y Sizes of buffer
                      (/home/strick/go/s):02727                  decd               Adjust since width, not coord
                      (/home/strick/go/s):02728                  decw
                      (/home/strick/go/s):02729                  stq   <$4F         Save them
                      (/home/strick/go/s):02730                  ELSE
0D22 EC09             (/home/strick/go/s):02731                  ldd   Grf.XSz+2,x
0D24 830001           (/home/strick/go/s):02732                  subd  #1
0D27 DD51             (/home/strick/go/s):02733                  std   <$51
0D29 DDB5             (/home/strick/go/s):02734                  std   <$B5
0D2B EC07             (/home/strick/go/s):02735                  ldd   Grf.XSz,x
0D2D 830001           (/home/strick/go/s):02736                  subd  #1
0D30 DD4F             (/home/strick/go/s):02737                  std   <$4f
                      (/home/strick/go/s):02738                  ENDC
0D32 1714E2           (/home/strick/go/s):02739                  lbsr  L1DF6        Check validity/scale starting X/Y coords
0D35 2531             (/home/strick/go/s):02740                  bcs   L0CF5        Error, exit with it
0D37 171503           (/home/strick/go/s):02741                  lbsr  L1E01        Check validity/scale X&Y sizes
0D3A 252C             (/home/strick/go/s):02742                  bcs   L0CF5        Error; exit with it
                      (/home/strick/go/s):02743                  IFNE  H6309
                      (/home/strick/go/s):02744                  ldq   <$4f         Adjust widths back
                      (/home/strick/go/s):02745                  incd
                      (/home/strick/go/s):02746                  incw
                      (/home/strick/go/s):02747                  stq   <$4f
                      (/home/strick/go/s):02748                  ELSE
0D3C DC51             (/home/strick/go/s):02749                  ldd   <$51
0D3E C30001           (/home/strick/go/s):02750                  addd  #1
0D41 DD51             (/home/strick/go/s):02751                  std   <$51
0D43 DDB5             (/home/strick/go/s):02752                  std   <$B5
0D45 DC4F             (/home/strick/go/s):02753                  ldd   <$4f
0D47 C30001           (/home/strick/go/s):02754                  addd  #1
0D4A DD4F             (/home/strick/go/s):02755                  std   <$4f
                      (/home/strick/go/s):02756                  ENDC
0D4C 1706C7           (/home/strick/go/s):02757                  lbsr  L1E9D        calculate screen address & start pixel mask
0D4F 9F72             (/home/strick/go/s):02758                  stx   <$0072       save screen address
0D51 D774             (/home/strick/go/s):02759                  stb   <$0074       Save start pixel mask
0D53 109E7E           (/home/strick/go/s):02760                  ldy   <$007E       get ptr to GP buffer
0D56 8601             (/home/strick/go/s):02761                  lda   #$01         Flag to indicate we have to check size vs. window
0D58 8D2D             (/home/strick/go/s):02762                  bsr   L0D14        Go set up start/end pixel masks & check scrn types
0D5A 2505             (/home/strick/go/s):02763                  bcs   L0CEE        If screen type different or has to be clipped, go
0D5C 1700D5           (/home/strick/go/s):02764                  lbsr  L0D9D        Screen types same & fits; do normal putting
0D5F 2006             (/home/strick/go/s):02765                  bra   L0CF4        return without error
                      (/home/strick/go/s):02766         * Get/put width buffer's original screen type being different from actual
                      (/home/strick/go/s):02767         *   screen type or will go ever edge of window go here
0D61 170177           (/home/strick/go/s):02768         L0CEE    lbsr  L0E03        ??? Do set up for screen type conversions
0D64 170219           (/home/strick/go/s):02769                  lbsr  L0E97        Do actual PUTting
0D67 5F               (/home/strick/go/s):02770         L0CF4    clrb               No error & return to system
0D68 7E5177           (/home/strick/go/s):02771         L0CF5    jmp   >GrfStrt+SysRet
                      (/home/strick/go/s):02772         
                      (/home/strick/go/s):02773         * Place Overlay window's original contents back on screen
0D6B 3420             (/home/strick/go/s):02774         L0CF8    pshs  y            Preserve window table ptr
0D6D EC33             (/home/strick/go/s):02775                  ldd   Wt.LStrt,y   get screen logical start address
0D6F DD72             (/home/strick/go/s):02776                  std   <$0072       Save it
                      (/home/strick/go/s):02777                  IFNE  H6309
                      (/home/strick/go/s):02778                  clrd
                      (/home/strick/go/s):02779                  ELSE
0D71 4F               (/home/strick/go/s):02780                  clra
0D72 5F               (/home/strick/go/s):02781                  clrb
                      (/home/strick/go/s):02782                  ENDC
0D73 DD47             (/home/strick/go/s):02783                  std   <$0047       'Working' X Coord to 0
0D75 109E7E           (/home/strick/go/s):02784                  ldy   <$007E       Get offset to buffer
0D78 8D0D             (/home/strick/go/s):02785                  bsr   L0D14        Go verify that overlay can fit back on screen
0D7A 2506             (/home/strick/go/s):02786                  bcs   L0D0F        Couldn't put, exit with error
0D7C 17FF22           (/home/strick/go/s):02787                  lbsr  L0C81        Move get/put buffer to screen (fast put)
0D7F 5F               (/home/strick/go/s):02788                  clrb               No error & return
0D80 35A0             (/home/strick/go/s):02789                  puls  pc,y
0D82 53               (/home/strick/go/s):02790         L0D0F    comb  
0D83 C6BE             (/home/strick/go/s):02791                  ldb   #$BE         get internal integrity check error
0D85 35A0             (/home/strick/go/s):02792                  puls  pc,y
                      (/home/strick/go/s):02793         
                      (/home/strick/go/s):02794         * Check for common screen type between window & buffer, and check if the
                      (/home/strick/go/s):02795         * PUT will need to be clipped. If screen types different or clipping
                      (/home/strick/go/s):02796         * required, exit with carry set
0D87 3410             (/home/strick/go/s):02797         L0D14    pshs  x            Save screen address
0D89 D660             (/home/strick/go/s):02798                  ldb   <$0060       get screen type
0D8B E12E             (/home/strick/go/s):02799                  cmpb  Grf.STY,y    Same as screen type of GP buffer's screen type?
0D8D 2711             (/home/strick/go/s):02800                  beq   GdTyp        Yes, no problem so far
                      (/home/strick/go/s):02801         * 03/03/93 mod: 4 color windows will count as same type
0D8F 5D               (/home/strick/go/s):02802                  tstb               (to properly check high bit)
0D90 2B68             (/home/strick/go/s):02803                  bmi   L0D63        If text, exit with carry set
0D92 C502             (/home/strick/go/s):02804                  bitb  #$02         Check 4 color mode bit
0D94 2764             (/home/strick/go/s):02805                  beq   L0D63        Not a 4 color mode, so set carry & exit
                      (/home/strick/go/s):02806                  IFNE  H6309
                      (/home/strick/go/s):02807                  tim   #$02,Grf.STY,y Check 4 color mode bit in buffer's screen type
                      (/home/strick/go/s):02808                  ELSE
0D96 3402             (/home/strick/go/s):02809                  pshs  a
0D98 A62E             (/home/strick/go/s):02810                  lda   Grf.STY,y 
0D9A 8502             (/home/strick/go/s):02811                  bita  #2
0D9C 3502             (/home/strick/go/s):02812                  puls  a
                      (/home/strick/go/s):02813                  ENDC
0D9E 275A             (/home/strick/go/s):02814                  beq   L0D63        It's no a 4 color mode, so set carry & exit
0DA0 5D               (/home/strick/go/s):02815         GdTyp    tstb               graphics window?
0DA1 2A08             (/home/strick/go/s):02816                  bpl   L0D27        yep, go on
0DA3 C6FF             (/home/strick/go/s):02817                  ldb   #$FF         Group # forced to $FF (overlay window)
0DA5 D700             (/home/strick/go/s):02818                  stb   <$0000       Set right based pixel mask to all
0DA7 D701             (/home/strick/go/s):02819                  stb   <$0001       Ditto for left based
0DA9 2044             (/home/strick/go/s):02820                  bra   L0D58        Skip ahead
                      (/home/strick/go/s):02821         * Process graphics put (A=1 if straight from PutBlk,0 if from OWEnd)
                      (/home/strick/go/s):02822         * If A=1, need to see if window fits (L0D27 routine)
                      (/home/strick/go/s):02823         * If A=0, we already know it did, so we can skip size checks
                      (/home/strick/go/s):02824         
                      (/home/strick/go/s):02825         * Should change CLIPPING checks so that it just changes some DP variables
                      (/home/strick/go/s):02826         *  for # bytes to print line, # bytes per line on screen & # bytes per line
                      (/home/strick/go/s):02827         *  in GP buffer. That way even byte/same color mode clipped GP buffers will go
                      (/home/strick/go/s):02828         *  full speed as well.
0DAB 8D7E             (/home/strick/go/s):02829         L0D27    bsr   L0D94        set up <$50 = X-count, <$52 = y-count
0DAD 4D               (/home/strick/go/s):02830                  tsta               Do we already know size is legit?
0DAE 2725             (/home/strick/go/s):02831                  beq   L0D3F        Yes, skip ahead
                      (/home/strick/go/s):02832         * don't bother for now to do clipping on X-boundaries, i.e. off rhs of the
                      (/home/strick/go/s):02833         * screen
0DB0 EC27             (/home/strick/go/s):02834                  ldd   Grf.XSz,y    size in pixels of the GP buffer
0DB2 DC47             (/home/strick/go/s):02835                  ldd   <$0047       Get upper left X coord of PUT
0DB4 E327             (/home/strick/go/s):02836                  addd  Grf.XSz,y    Add X size of GP buffer
0DB6 10936A           (/home/strick/go/s):02837                  cmpd  <$006A       past max X coord.?  (i.e. 319)
0DB9 2308             (/home/strick/go/s):02838                  bls   L0D30        no, don't clip it
                      (/home/strick/go/s):02839                  IFNE  H6309
                      (/home/strick/go/s):02840                  decd               are we overflowing by one pixel  (i.e.320)
                      (/home/strick/go/s):02841                  ELSE
0DBB 830001           (/home/strick/go/s):02842                  subd  #1
                      (/home/strick/go/s):02843                  ENDC
0DBE 10936A           (/home/strick/go/s):02844                  cmpd  <$006A       check against highest allowed X
0DC1 2637             (/home/strick/go/s):02845                  bne   L0D63        not the same, so we go clip it
0DC3 EC29             (/home/strick/go/s):02846         L0D30    ldd   Grf.YSz,y    Get Y size: ATD: 16-bit, so we can check for >256!
0DC5 D349             (/home/strick/go/s):02847                  addd  <$0049       add it to upper left Y coord. ( max 199)
0DC7 10936C           (/home/strick/go/s):02848                  cmpd  <$006C       past max Y coord.?
0DCA 2509             (/home/strick/go/s):02849                  blo   L0D3F        no, don't bother clipping it
                      (/home/strick/go/s):02850         * Y coord clipping added 03/10/96 by ATD
0DCC DC6C             (/home/strick/go/s):02851                  ldd   <$006C       get max. Y coord
0DCE 9349             (/home/strick/go/s):02852                  subd  <$0049       take out starting Y coord
                      (/home/strick/go/s):02853                  IFNE  H6309
                      (/home/strick/go/s):02854                  incd               make it PUT at least one line...
                      (/home/strick/go/s):02855                  ELSE
0DD0 C30001           (/home/strick/go/s):02856                  addd  #1
                      (/home/strick/go/s):02857                  ENDC
0DD3 D752             (/home/strick/go/s):02858                  stb   <$52         save y-count of pixels to do
                      (/home/strick/go/s):02859         
                      (/home/strick/go/s):02860         * Divide by # pixels / byte to see if even byte boundary
0DD5 D660             (/home/strick/go/s):02861         L0D3F    ldb   <$0060       get screen type
0DD7 8E4E06           (/home/strick/go/s):02862                  ldx   #GrfStrt+L0D70-1  Point to powers of 2 division table
0DDA 9648             (/home/strick/go/s):02863                  lda   <$0048       get LSB of X coord.
0DDC 43               (/home/strick/go/s):02864                  coma               invert it
0DDD A485             (/home/strick/go/s):02865                  anda  b,x          Get # ^2 divisions
0DDF 4C               (/home/strick/go/s):02866                  inca               Add 1
0DE0 A12C             (/home/strick/go/s):02867                  cmpa  Grf.LfPx,y   Same as # pixels used in 1st byte of GP buffer?
0DE2 2616             (/home/strick/go/s):02868                  bne   L0D63        No, set carry indicating non-even byte boundary
0DE4 8D17             (/home/strick/go/s):02869                  bsr   L0D66        Go get starting/ending pixel masks
0DE6 9700             (/home/strick/go/s):02870                  sta   <$0000       Save right-based mask
0DE8 EC2D             (/home/strick/go/s):02871                  ldd   Grf.RtPx,y   Get right based pixel mask & GP buffer type
0DEA 8D11             (/home/strick/go/s):02872                  bsr   L0D66        Go get starting/ending pixel masks
0DEC D701             (/home/strick/go/s):02873                  stb   <$0001       Save left-based pixel mask
0DEE 8C               (/home/strick/go/s):02874                  fcb   $8C          skip setting up
                      (/home/strick/go/s):02875         * Text put comes here with B=Group # ($FF) for overlay windows
                      (/home/strick/go/s):02876         * Entry: B=buffer block #
0DEF 8D3A             (/home/strick/go/s):02877         L0D58    bsr   L0D94        Move x-size to $50 y-size to $52
0DF1 D663             (/home/strick/go/s):02878                  ldb   <$0063       Get # bytes/row for screen
0DF3 D050             (/home/strick/go/s):02879                  subb  <$0050       subtract LSB of X size
0DF5 D797             (/home/strick/go/s):02880                  stb   <$0097       Save width of buffer
0DF7 5F               (/home/strick/go/s):02881                  clrb               No error, restore screen address & return
0DF8 3590             (/home/strick/go/s):02882                  puls  pc,x
0DFA 53               (/home/strick/go/s):02883         L0D63    comb               Different screen types or clipping required, set
0DFB 3590             (/home/strick/go/s):02884                  puls  pc,x          carry, restore screen address & return
                      (/home/strick/go/s):02885         
                      (/home/strick/go/s):02886         * Entry: B=Gfx screen type (1-4)
                      (/home/strick/go/s):02887         * A=# pixels to go in?
0DFD 8E4E0A           (/home/strick/go/s):02888         L0D66    ldx   #GrfStrt+L0D74-1  Point to table
0E00 E685             (/home/strick/go/s):02889                  ldb   b,x            Get vector offset to proper table
0E02 3A               (/home/strick/go/s):02890                  abx                  Calculate vector
0E03 48               (/home/strick/go/s):02891                  lsla                 2 bytes/entry
0E04 EC86             (/home/strick/go/s):02892                  ldd   a,x            Get both masks & return
0E06 39               (/home/strick/go/s):02893                  rts   
                      (/home/strick/go/s):02894         
                      (/home/strick/go/s):02895         * Some sort of bit mask table - appears to be used in a LSR loop after inverted
                      (/home/strick/go/s):02896         *   ,will continue loop until the carried bit changes to 0
0E07 07               (/home/strick/go/s):02897         L0D70    fcb   %00000111      640x200x2
0E08 03               (/home/strick/go/s):02898                  fcb   %00000011      320x200x4
0E09 03               (/home/strick/go/s):02899                  fcb   %00000011      640x200x4
0E0A 01               (/home/strick/go/s):02900                  fcb   %00000001      320x200x16
                      (/home/strick/go/s):02901         
                      (/home/strick/go/s):02902         * Vector table based on screen type (points to following 3 tables)
0E0B 03               (/home/strick/go/s):02903         L0D74    fcb   L0D78-(L0D74+1)   640x200x2
0E0C 13               (/home/strick/go/s):02904                  fcb   L0D88-(L0D74+1)   320x200x4
0E0D 13               (/home/strick/go/s):02905                  fcb   L0D88-(L0D74+1)   640x200x4
0E0E 1B               (/home/strick/go/s):02906                  fcb   L0D90-(L0D74+1)   320x200x16
                      (/home/strick/go/s):02907         
                      (/home/strick/go/s):02908         * 2 color masks (2 bytes/entry)
0E0F 0180             (/home/strick/go/s):02909         L0D78    fcb   %00000001,%10000000
0E11 03C0             (/home/strick/go/s):02910                  fcb   %00000011,%11000000
0E13 07E0             (/home/strick/go/s):02911                  fcb   %00000111,%11100000
0E15 0FF0             (/home/strick/go/s):02912                  fcb   %00001111,%11110000
0E17 1FF8             (/home/strick/go/s):02913                  fcb   %00011111,%11111000
0E19 3FFC             (/home/strick/go/s):02914                  fcb   %00111111,%11111100
0E1B 7FFE             (/home/strick/go/s):02915                  fcb   %01111111,%11111110
0E1D FFFF             (/home/strick/go/s):02916                  fcb   %11111111,%11111111
                      (/home/strick/go/s):02917                  
                      (/home/strick/go/s):02918         * 4 color masks
0E1F 03C0             (/home/strick/go/s):02919         L0D88    fcb   %00000011,%11000000
0E21 0FF0             (/home/strick/go/s):02920                  fcb   %00001111,%11110000
0E23 3FFC             (/home/strick/go/s):02921                  fcb   %00111111,%11111100
0E25 FFFF             (/home/strick/go/s):02922                  fcb   %11111111,%11111111
                      (/home/strick/go/s):02923         
                      (/home/strick/go/s):02924         * 16 color masks
0E27 0FF0             (/home/strick/go/s):02925         L0D90    fcb   %00001111,%11110000
0E29 FFFF             (/home/strick/go/s):02926                  fcb   %11111111,%11111111
                      (/home/strick/go/s):02927         
                      (/home/strick/go/s):02928         * Copy X Size & Y size from GP buffer header
                      (/home/strick/go/s):02929         * Entry: Y=GP buffer header ptr
0E2B E62B             (/home/strick/go/s):02930         L0D94    ldb   Grf.XBsz,y     Get X size of GP buffer in bytes
0E2D D750             (/home/strick/go/s):02931                  stb   <$50           Save X size of GP buffer in bytes
0E2F E62A             (/home/strick/go/s):02932                  ldb   Grf.YSz+1,y    Get Y size of GP buffer in bytes
0E31 D752             (/home/strick/go/s):02933                  stb   <$52           Save Y size of GP buffer in bytes (pixels)
0E33 39               (/home/strick/go/s):02934                  rts   
                      (/home/strick/go/s):02935         
                      (/home/strick/go/s):02936         * Put buffer with buffer's screen type matching actual screen type
0E34 D660             (/home/strick/go/s):02937         L0D9D    ldb   <$60           Get screen type
0E36 8E595E           (/home/strick/go/s):02938                  ldx   #GrfStrt+L16B1-1  Point to table
0E39 A685             (/home/strick/go/s):02939                  lda   b,x            Get # pixels per byte for this screen type
0E3B 1F89             (/home/strick/go/s):02940                  tfr   a,b            Dupe for D comparison
                      (/home/strick/go/s):02941         * no PSET?
0E3D 8E631E           (/home/strick/go/s):02942                  ldx   #GrfStrt+L1F9E  Point to 'normal' PSET vector
0E40 9C64             (/home/strick/go/s):02943                  cmpx  <$64           Is that the current one?
0E42 264E             (/home/strick/go/s):02944                  bne   L0DBE          No, use slow PUT
                      (/home/strick/go/s):02945         * no LSET?
0E44 8E58D7           (/home/strick/go/s):02946                  ldx   #GrfStrt+L1FA9  Point to 'normal' LSET vector
0E47 9C68             (/home/strick/go/s):02947                  cmpx  <$68           Is that the current one?
0E49 2647             (/home/strick/go/s):02948                  bne   L0DBE          Yes, can use TFM PUT
                      (/home/strick/go/s):02949         * no even byte boundary?
0E4B 10A32C           (/home/strick/go/s):02950                  cmpd  Grf.LfPx,y     Even byte boundary on both left & right sides?
0E4E 1027FE4F         (/home/strick/go/s):02951                  lbeq  L0C81        yes, go do fast TFM put
                      (/home/strick/go/s):02952         * odd pixel boundaries: do 1st pixel slow, use TFM for the rest
0E52 9799             (/home/strick/go/s):02953                  sta   <$0099       flag we're copying to the screen
0E54 DC00             (/home/strick/go/s):02954                  ldd   <$00         masks for pixels to keep from GP buffer
                      (/home/strick/go/s):02955                  IFNE  H6309
                      (/home/strick/go/s):02956                  comd
                      (/home/strick/go/s):02957                  ELSE
0E56 43               (/home/strick/go/s):02958                  coma
0E57 53               (/home/strick/go/s):02959                  comb
                      (/home/strick/go/s):02960                  ENDC
0E58 DD20             (/home/strick/go/s):02961                  std   <$20         masks for pixels to keep from screen
0E5A 9E72             (/home/strick/go/s):02962                  ldx   <$0072       get start address for PUT
0E5C 31A820           (/home/strick/go/s):02963                  leay  $20,y        skip GP buffer header
                      (/home/strick/go/s):02964         * do first byte of the line: almost a complete TFM
0E5F A684             (/home/strick/go/s):02965         Put.ATFM lda   ,x           grab first byte
0E61 9420             (/home/strick/go/s):02966                  anda  <$20         get only pixels we want to keep
0E63 E6A4             (/home/strick/go/s):02967                  ldb   ,y           grab pixels from GP buffer
0E65 D400             (/home/strick/go/s):02968                  andb  <$00         get the ones we want to keep
                      (/home/strick/go/s):02969                  IFNE  H6309
                      (/home/strick/go/s):02970                  orr   b,a          OR the pixels together
                      (/home/strick/go/s):02971                  ELSE
0E67 3404             (/home/strick/go/s):02972                  pshs  b
0E69 AAE0             (/home/strick/go/s):02973                  ora   ,s+
                      (/home/strick/go/s):02974                  ENDC
0E6B A7A4             (/home/strick/go/s):02975                  sta   ,y           save in the GP buffer
0E6D DC4F             (/home/strick/go/s):02976                  ldd   <$4F         get width of GP buffer in bytes
                      (/home/strick/go/s):02977                  IFNE  H6309
                      (/home/strick/go/s):02978                  decd               account for 0th byte
                      (/home/strick/go/s):02979                  ELSE
0E6F 830001           (/home/strick/go/s):02980                  subd  #1
                      (/home/strick/go/s):02981                  ENDC
0E72 A68B             (/home/strick/go/s):02982                  lda   d,x          get right hand byte from the screen
0E74 3402             (/home/strick/go/s):02983                  pshs  a            save end byte
                      (/home/strick/go/s):02984                  IFNE  H6309
                      (/home/strick/go/s):02985                  incd
                      (/home/strick/go/s):02986                  ELSE
0E76 C30001           (/home/strick/go/s):02987                  addd  #1
                      (/home/strick/go/s):02988                  ENDC
0E79 17FE45           (/home/strick/go/s):02989                  lbsr  PutOneL      blast it over using TFM
                      (/home/strick/go/s):02990         * do the last byte of the line
                      (/home/strick/go/s):02991         * this kludge is necessary because doing it the proper way would add a LOT
                      (/home/strick/go/s):02992         * of code to check for GP buffer 8k block boundaries.  It won't be noticed
                      (/home/strick/go/s):02993         * except for really large PutBlks.  Oh well.
0E7C 9601             (/home/strick/go/s):02994                  lda   <$0001       get end pixel mask
0E7E A41F             (/home/strick/go/s):02995                  anda  -1,x         keep only the pixels we want
0E80 D621             (/home/strick/go/s):02996                  ldb   <$0021       inverted mask
0E82 E4E0             (/home/strick/go/s):02997                  andb  ,s+          AND in with original screen data
                      (/home/strick/go/s):02998                  IFNE  H6309
                      (/home/strick/go/s):02999                  orr   b,a          OR in the pixel we put on the screen
                      (/home/strick/go/s):03000                  ELSE
0E84 3404             (/home/strick/go/s):03001                  pshs  b
0E86 AAE0             (/home/strick/go/s):03002                  ora   ,s+
                      (/home/strick/go/s):03003                  ENDC
0E88 A71F             (/home/strick/go/s):03004                  sta   -1,x         save it
0E8A D697             (/home/strick/go/s):03005                  ldb   <$0097       get width of the screen
0E8C 3A               (/home/strick/go/s):03006                  abx                go to the next line
0E8D 0A52             (/home/strick/go/s):03007                  dec   <$52         count down one line
0E8F 26CE             (/home/strick/go/s):03008                  bne   Put.ATFM
0E91 39               (/home/strick/go/s):03009                  rts
                      (/home/strick/go/s):03010         
                      (/home/strick/go/s):03011         * Either not even byte, or PSET/LSET or not defaults:use slow PUT
0E92 9705             (/home/strick/go/s):03012         L0DBE    sta   <$05           Save # pixels/byte
0E94 3420             (/home/strick/go/s):03013                  pshs  y              Save Get/Put buffer ptr
0E96 DE64             (/home/strick/go/s):03014                  ldu   <$64           Get PSET vector
                      (/home/strick/go/s):03015                  IFNE  H6309
                      (/home/strick/go/s):03016                  ldw   <$68           Get LSET vector (for PSET routine)
                      (/home/strick/go/s):03017                  ELSE
0E98 9E68             (/home/strick/go/s):03018                  ldx   <$68
0E9A 9FB5             (/home/strick/go/s):03019                  stx   <$B5
                      (/home/strick/go/s):03020                  ENDC
0E9C 31A820           (/home/strick/go/s):03021                  leay  <$20,y         Skip buffer header
0E9F 9E72             (/home/strick/go/s):03022                  ldx   <$72           Get address of where to start PUTting on scrn
0EA1 0C97             (/home/strick/go/s):03023                  inc   <$97           Save # bytes to start of next line GP buffer
0EA3 0A50             (/home/strick/go/s):03024                  dec   <$50           Adjust X byte count down for base 0
                      (/home/strick/go/s):03025         * Loop from here to end of L0DFA - Move Get/Put buffer onto screen using LSET
                      (/home/strick/go/s):03026         * logic.
                      (/home/strick/go/s):03027         * This outside part does the 1st byte's worth of pixels
                      (/home/strick/go/s):03028         * NOTE: X=ptr to current byte being done on screen
                      (/home/strick/go/s):03029         *       Y=ptr to current byte being done in GP buffer
0EA5 D600             (/home/strick/go/s):03030         L0DCB    ldb   <$00           Get pixel mask for 1st byte of 1st line in buffr
0EA7 9650             (/home/strick/go/s):03031                  lda   <$50           Get LSB of X size
0EA9 271A             (/home/strick/go/s):03032                  beq   L0DED          If 0, just 1 byte to do - use last byte routine
0EAB 9799             (/home/strick/go/s):03033                  sta   <$99           Save LSB of X size
                      (/home/strick/go/s):03034         * This part does all the full-byte pixels
0EAD C6FF             (/home/strick/go/s):03035         L0DD5    ldb   #$FF           Mask byte- all bits
0EAF A6A0             (/home/strick/go/s):03036         L0DD7    lda   ,y+            Get bits to set from GP buffer
0EB1 ADC4             (/home/strick/go/s):03037                  jsr   ,u             Put on screen
0EB3 C601             (/home/strick/go/s):03038                  ldb   #1             Screen ptr bump count
0EB5 3A               (/home/strick/go/s):03039                  abx                  Bump screen ptr
0EB6 108C4000         (/home/strick/go/s):03040                  cmpy  #$4000         Done current 8K block of Get/put buffer?
0EBA 2503             (/home/strick/go/s):03041                  blo   L0DE7          No, continue normally
0EBC 17009A           (/home/strick/go/s):03042                  lbsr  L0E70          Yes, go map in next block
0EBF 0A99             (/home/strick/go/s):03043         L0DE7    dec   <$99           Dec X byte count
0EC1 26EA             (/home/strick/go/s):03044                  bne   L0DD5          Continue moving until done X size
                      (/home/strick/go/s):03045         * This part does the last byte's worth of pixels
0EC3 D601             (/home/strick/go/s):03046                  ldb   <$01           Get pixel mask for last byte of last line
0EC5 A6A0             (/home/strick/go/s):03047         L0DED    lda   ,y+            Get last byte for current line in GP buffer
0EC7 ADC4             (/home/strick/go/s):03048                  jsr   ,u             Put it on screen
0EC9 108C4000         (/home/strick/go/s):03049                  cmpy  #$4000         Done 8K block yet?
0ECD 2503             (/home/strick/go/s):03050                  blo   L0DFA          No, skip ahead
0ECF 170087           (/home/strick/go/s):03051                  lbsr  L0E70          Yes, go map in next block
0ED2 D697             (/home/strick/go/s):03052         L0DFA    ldb   <$0097         Get # bytes to beginning of next line
0ED4 3A               (/home/strick/go/s):03053                  abx                  Point to start of next line
0ED5 0A52             (/home/strick/go/s):03054                  dec   <$0052         Dec # of lines counter
0ED7 26CC             (/home/strick/go/s):03055                  bne   L0DCB          Continue putting until done
0ED9 35A0             (/home/strick/go/s):03056                  puls  pc,y           Restore GP buffer ptr & return
                      (/home/strick/go/s):03057         
                      (/home/strick/go/s):03058         * Put buffer with buffer's screen type different than original
0EDB 3420             (/home/strick/go/s):03059         L0E03    pshs  y              Save GP buffer ptr?
0EDD DC6A             (/home/strick/go/s):03060                  ldd   <$006A         Get max. allowed X coordinate
0EDF 9347             (/home/strick/go/s):03061                  subd  <$0047         Subtract working X coordinate
                      (/home/strick/go/s):03062                  IFNE  H6309
                      (/home/strick/go/s):03063                  incd                 Base 1
                      (/home/strick/go/s):03064                  ELSE
0EE1 C30001           (/home/strick/go/s):03065                  addd  #1
                      (/home/strick/go/s):03066                  ENDC
0EE4 DD9B             (/home/strick/go/s):03067                  std   <$009B         Save width of some sort
0EE6 D66D             (/home/strick/go/s):03068                  ldb   <$006D         Get max. allowed Y coordinate
0EE8 D04A             (/home/strick/go/s):03069                  subb  <$004A         Calc height of some sort
0EEA 5C               (/home/strick/go/s):03070                  incb                 Make base 1
0EEB 201F             (/home/strick/go/s):03071                  bra   L0E2F          Save it
                      (/home/strick/go/s):03072         
0EED 53               (/home/strick/go/s):03073         i.iwtyp  comb
0EEE C6B7             (/home/strick/go/s):03074                  ldb   #E$IWTyp
0EF0 7E5177           (/home/strick/go/s):03075                  jmp   >GrfStrt+SysRet
                      (/home/strick/go/s):03076         
                      (/home/strick/go/s):03077         * Called from Mouse cursor routine @ L15FE
0EF3 3420             (/home/strick/go/s):03078         L0E14    pshs  y              Preserve GP buffer ptr
0EF5 CC0140           (/home/strick/go/s):03079                  ldd   #320           Default res to 320 (Base 1)
                      (/home/strick/go/s):03080                  IFNE  H6309
                      (/home/strick/go/s):03081                  tim   #$01,<$60      Get res bit from screen type
                      (/home/strick/go/s):03082                  ELSE
0EF8 3402             (/home/strick/go/s):03083                  pshs  a
0EFA 9660             (/home/strick/go/s):03084                  lda   <$60
0EFC 8501             (/home/strick/go/s):03085                  bita  #1
0EFE 3502             (/home/strick/go/s):03086                  puls  a
                      (/home/strick/go/s):03087                  ENDC
0F00 2702             (/home/strick/go/s):03088                  beq   L0E24          It is 320 mode, skip ahead
                      (/home/strick/go/s):03089                  IFNE  H6309
                      (/home/strick/go/s):03090                  lsld                 Multiply by 2 to get 640
                      (/home/strick/go/s):03091                  ELSE
0F02 58               (/home/strick/go/s):03092                  lslb
0F03 49               (/home/strick/go/s):03093                  rola
                      (/home/strick/go/s):03094                  ENDC
                      (/home/strick/go/s):03095         
0F04 933D             (/home/strick/go/s):03096         L0E24    subd  <$3D           Subtract last X coord Gfx cursor was ON at
0F06 DD9B             (/home/strick/go/s):03097                  std   <$009B         Save # pixels to end of screen
0F08 C6C7             (/home/strick/go/s):03098                  ldb   #MaxLine+1     Full height of screen
0F0A D040             (/home/strick/go/s):03099                  subb  <$0040         Calculate # pixels remaining
                      (/home/strick/go/s):03100         
0F0C D7A0             (/home/strick/go/s):03101         L0E2F    stb   <$00A0         Save it
0F0E 1713C1           (/home/strick/go/s):03102                  lbsr  L1EF1          Setup pix mask & shift vector ($79 & $7A)
0F11 17FF17           (/home/strick/go/s):03103                  lbsr  L0D94          Set up element X&Y sizes (in bytes)
                      (/home/strick/go/s):03104         * B=Height of GP buffer (also in <$52) in bytes
0F14 D1A0             (/home/strick/go/s):03105                  cmpb  <$00A0         Compare with room left on window Y axis
0F16 2304             (/home/strick/go/s):03106                  bls   FullSz
0F18 D6A0             (/home/strick/go/s):03107                  ldb   <$00A0         Get remaining # lines on window
0F1A D752             (/home/strick/go/s):03108                  stb   <$0052         Save as our single counter of lines left
0F1C EC2C             (/home/strick/go/s):03109         FullSz   ldd   Grf.LfPx,y     Get # pixels used in 1st byte & last byte
0F1E DD06             (/home/strick/go/s):03110                  std   <$0006         Save them
0F20 8E4772           (/home/strick/go/s):03111                  ldx   #GrfStrt+L075F-1  Point to color mask table index
0F23 D660             (/home/strick/go/s):03112                  ldb   <$0060         Get screen type
                      (/home/strick/go/s):03113         * ATD: Added to get around problem of GetBlk on text screen, and PutBlk
                      (/home/strick/go/s):03114         * on gfx screen crashing the system!
                      (/home/strick/go/s):03115         * We now allow GETBlk and PutBlk on text screens, too!
0F25 E82E             (/home/strick/go/s):03116                  eorb  Grf.STY,y    EOR with buffer sty type
0F27 2BC4             (/home/strick/go/s):03117                  bmi   i.iwtyp      exit IMMEDIATELY if mixing text and gfx puts
0F29 D660             (/home/strick/go/s):03118                  ldb   <$0060       get screen type again
0F2B E685             (/home/strick/go/s):03119                  ldb   b,x            Calc. offset to proper color mask table
0F2D 3A               (/home/strick/go/s):03120                  abx   
0F2E A680             (/home/strick/go/s):03121                  lda   ,x+            Get active bits mask (0001, 0011 or 1111)
0F30 9F02             (/home/strick/go/s):03122                  stx   <$0002         Save base of color mask table
0F32 8E4F64           (/home/strick/go/s):03123                  ldx   #GrfStrt+L0E7C-1  Point to index for pixel tables
0F35 E62E             (/home/strick/go/s):03124                  ldb   Grf.STY,y      Get GP buffers original screen type
0F37 E685             (/home/strick/go/s):03125                  ldb   b,x            Calc ptr to proper pixel table
0F39 3A               (/home/strick/go/s):03126                  abx   
0F3A E684             (/home/strick/go/s):03127                  ldb   ,x             Get offset for default shift?
0F3C 3185             (/home/strick/go/s):03128                  leay  b,x            Get vector for 4, 2 or 1 shift
0F3E 109FA3           (/home/strick/go/s):03129                  sty   <$00A3         Save it
0F41 A401             (/home/strick/go/s):03130                  anda  1,x            And bit mask from scrn with bit mask from GP bfr
0F43 9708             (/home/strick/go/s):03131                  sta   <$0008         Save it
0F45 E602             (/home/strick/go/s):03132                  ldb   2,x            Get # pixels/byte for GP buffer type
0F47 D705             (/home/strick/go/s):03133                  stb   <$0005         Save it
0F49 D606             (/home/strick/go/s):03134                  ldb   <$0006         Get # pixels used in 1st byte of GP buffer line
0F4B CB02             (/home/strick/go/s):03135                  addb  #$02           Adjust up to skip bit mask & # pixels/byte
0F4D E685             (/home/strick/go/s):03136                  ldb   b,x            Get offset
0F4F 3185             (/home/strick/go/s):03137                  leay  b,x            Save vectors for bit shifts
0F51 109FA1           (/home/strick/go/s):03138                  sty   <$00A1
0F54 109FA5           (/home/strick/go/s):03139                  sty   <$00A5
0F57 35A0             (/home/strick/go/s):03140                  puls  pc,y           Restore GP buffer ptr & return?
                      (/home/strick/go/s):03141         
                      (/home/strick/go/s):03142         * Get next 8K block of get/put buffers
                      (/home/strick/go/s):03143         * Exit: Y=Ptr to start of block ($2000)
0F59 0C7D             (/home/strick/go/s):03144         L0E70    inc   <$007D         Increment buffer block #
0F5B D67D             (/home/strick/go/s):03145                  ldb   <$007D         Get it
0F5D 170946           (/home/strick/go/s):03146                  lbsr  L017C          Go map in next block in get/put buffer
0F60 108E2000         (/home/strick/go/s):03147                  ldy   #$2000         Y=Ptr to start of GP buffer block
0F64 39               (/home/strick/go/s):03148                  rts   
                      (/home/strick/go/s):03149         
                      (/home/strick/go/s):03150         * Index to proper tables for GP buffer's original screen types
0F65 05               (/home/strick/go/s):03151         L0E7C    fcb   L0E80-(L0E7C-1) Type 5 (2 color)
0F66 10               (/home/strick/go/s):03152                  fcb   L0E8B-(L0E7C-1) Type 6 (4 color)
0F67 10               (/home/strick/go/s):03153                  fcb   L0E8B-(L0E7C-1) Type 7 (4 color)
0F68 17               (/home/strick/go/s):03154                  fcb   L0E92-(L0E7C-1) Type 8 (16 color)
                      (/home/strick/go/s):03155         * All of following tables' references to pixel # are based on 1 being the
                      (/home/strick/go/s):03156         *  far left pixel in the byte
                      (/home/strick/go/s):03157         * Vector table for GP buffer's taken from 2 color screens
0F69 66               (/home/strick/go/s):03158         L0E80    fcb   L0EE0-L0E80    <$00A3 vector
0F6A 01               (/home/strick/go/s):03159                  fcb   %00000001      Bit mask for 1 pixel
0F6B 08               (/home/strick/go/s):03160                  fcb   8              # pixels /byte
0F6C 67               (/home/strick/go/s):03161                  fcb   L0EE1-L0E80    Shift for 1st pixel
0F6D 60               (/home/strick/go/s):03162                  fcb   L0EDA-L0E80    Shift for 2nd pixel
0F6E 61               (/home/strick/go/s):03163                  fcb   L0EDB-L0E80    Shift for 3rd pixel
0F6F 62               (/home/strick/go/s):03164                  fcb   L0EDC-L0E80    Shift for 4th pixel
0F70 63               (/home/strick/go/s):03165                  fcb   L0EDD-L0E80    Shift for 5th pixel
0F71 64               (/home/strick/go/s):03166                  fcb   L0EDE-L0E80    Shift for 6th pixel
0F72 65               (/home/strick/go/s):03167                  fcb   L0EDF-L0E80    Shift for 7th pixel
0F73 66               (/home/strick/go/s):03168                  fcb   L0EE0-L0E80    Shift for 8th pixel
                      (/home/strick/go/s):03169         * Vector table for GP buffer's taken from 4 color screens
0F74 5A               (/home/strick/go/s):03170         L0E8B    fcb   L0EDF-L0E8B    <$00A3 vector
0F75 03               (/home/strick/go/s):03171                  fcb   %00000011      Bit mask for 1 pixel
0F76 04               (/home/strick/go/s):03172                  fcb   4              # pixels/byte
0F77 5C               (/home/strick/go/s):03173                  fcb   L0EE1-L0E8B    Shift for 1st pixel
0F78 56               (/home/strick/go/s):03174                  fcb   L0EDB-L0E8B    Shift for 2nd pixel
0F79 58               (/home/strick/go/s):03175                  fcb   L0EDD-L0E8B    Shift for 3rd pixel
0F7A 5A               (/home/strick/go/s):03176                  fcb   L0EDF-L0E8B    Shift for 4th pixel
                      (/home/strick/go/s):03177         * Vector table for GP buffer's taken from 16 color screens
0F7B 51               (/home/strick/go/s):03178         L0E92    fcb   L0EDD-L0E92    <$00A3 vector
0F7C 0F               (/home/strick/go/s):03179                  fcb   %00001111      Bit mask for 1 pixel
0F7D 02               (/home/strick/go/s):03180                  fcb   2              # pixels/byte
0F7E 55               (/home/strick/go/s):03181                  fcb   L0EE1-L0E92    Shift for 1st pixel
0F7F 51               (/home/strick/go/s):03182                  fcb   L0EDD-L0E92    Shift for 2nd pixel
                      (/home/strick/go/s):03183         
0F80 31A820           (/home/strick/go/s):03184         L0E97    leay  Grf.Siz,y      Skip GP buffer header
0F83 3420             (/home/strick/go/s):03185                  pshs  y              Save ptr to raw GP buffer data
0F85 9E72             (/home/strick/go/s):03186                  ldx   <$0072         Get ptr to start of buffer placement on screen
0F87 DE64             (/home/strick/go/s):03187                  ldu   <$64           Get PSET vector for main loop @ L0EE1
0F89 8C               (/home/strick/go/s):03188                  fcb   $8C          skip 2 bytes: same cycle time, 1 byte shorter
                      (/home/strick/go/s):03189         
0F8A 9F72             (/home/strick/go/s):03190         L0E9E    stx   <$0072         Save get/put screen start address
0F8C DC9B             (/home/strick/go/s):03191         L0EA0    ldd   <$009B         ??? x-count to do
0F8E DD9D             (/home/strick/go/s):03192                  std   <$009D         ???
0F90 9650             (/home/strick/go/s):03193                  lda   <$0050         Get LSB of X size (in bytes)
0F92 9704             (/home/strick/go/s):03194                  sta   <$0004         Save # bytes left in width (including partials)
0F94 D606             (/home/strick/go/s):03195                  ldb   <$0006         Get # of pixels used in 1st byte of GP line
0F96 D797             (/home/strick/go/s):03196                  stb   <$0097         Save as # pixels left to do in current byte
0F98 DCA5             (/home/strick/go/s):03197                  ldd   <$00A5         Get A5 vector
0F9A DDA1             (/home/strick/go/s):03198                  std   <$00A1         Save as A1 vector
0F9C D674             (/home/strick/go/s):03199                  ldb   <$0074         Get pixel mask for 1st byte of GP buffer on scrn
                      (/home/strick/go/s):03200                  IFNE  H6309
                      (/home/strick/go/s):03201                  ldw   <$68           Get LSET vector
                      (/home/strick/go/s):03202                  ELSE
0F9E 109E68           (/home/strick/go/s):03203                  ldy   <$68
0FA1 109FB5           (/home/strick/go/s):03204                  sty   <$B5
                      (/home/strick/go/s):03205                  ENDC
                      (/home/strick/go/s):03206         
0FA4 10AEE4           (/home/strick/go/s):03207         L0EB2    ldy   ,s             Get buffer data ptr
0FA7 108C4000         (/home/strick/go/s):03208                  cmpy  #$4000         At end of 8K block yet?
0FAB 2506             (/home/strick/go/s):03209                  blo   L0EC1          No, continue
0FAD D799             (/home/strick/go/s):03210                  stb   <$0099         Save B
0FAF 8DA8             (/home/strick/go/s):03211                  bsr   L0E70          Go map in next 8K block
0FB1 D699             (/home/strick/go/s):03212                  ldb   <$0099         Restore B
0FB3 A6A0             (/home/strick/go/s):03213         L0EC1    lda   ,y+            Get byte of data from GP buffer
0FB5 10AFE4           (/home/strick/go/s):03214                  sty   ,s             Save updated buffer ptr
0FB8 108E4FD0         (/home/strick/go/s):03215                  ldy   #GrfStrt+L0EE1  Check if <$A1 vector points here
0FBC 109CA1           (/home/strick/go/s):03216                  cmpy  <$00A1         no shifting of bits?
0FBF 2701             (/home/strick/go/s):03217                  beq   L0ED6          It does, call vector
0FC1 48               (/home/strick/go/s):03218                  lsla                 Doesn't, shift buffer data left 1 first
0FC2 109E02           (/home/strick/go/s):03219         L0ED6    ldy   <$0002         Get ptr to table of bit masks for colors
0FC5 6E9F11A1         (/home/strick/go/s):03220                  jmp   [>GrfMem+gr00A1]       Place byte from GP buffer on screen
                      (/home/strick/go/s):03221         
                      (/home/strick/go/s):03222         * Bit shifter for adjusting pixel placements in non-aligned, possible differ-
                      (/home/strick/go/s):03223         *  ent screen type, Get/put buffers
                      (/home/strick/go/s):03224         * Entry: W=LSET vector (for use with <$64,u vector)
0FC9 49               (/home/strick/go/s):03225         L0EDA    rola                 Adjust pixel to proper place in byte
0FCA 49               (/home/strick/go/s):03226         L0EDB    rola
0FCB 49               (/home/strick/go/s):03227         L0EDC    rola
0FCC 49               (/home/strick/go/s):03228         L0EDD    rola
0FCD 49               (/home/strick/go/s):03229         L0EDE    rola
0FCE 49               (/home/strick/go/s):03230         L0EDF    rola
0FCF 49               (/home/strick/go/s):03231         L0EE0    rola
0FD0 3407             (/home/strick/go/s):03232         L0EE1    pshs  cc,d           Save carry & pixel/color masks
0FD2 DC9D             (/home/strick/go/s):03233                  ldd   <$009D         ??? Get some sort of counter (X width?)
0FD4 2714             (/home/strick/go/s):03234                  beq   L0EFA          If 0, skip ahead
                      (/home/strick/go/s):03235                  IFNE  H6309
                      (/home/strick/go/s):03236                  decd                 Drop it down
                      (/home/strick/go/s):03237                  ELSE
0FD6 830001           (/home/strick/go/s):03238                  subd  #1
                      (/home/strick/go/s):03239                  ENDC
0FD9 DD9D             (/home/strick/go/s):03240                  std   <$009D         Save it
0FDB EC61             (/home/strick/go/s):03241                  ldd   1,s            Get pixel/color masks back
0FDD 9408             (/home/strick/go/s):03242                  anda  <$0008         Mask out all but common bits of screen/buffer types
0FDF A6A6             (/home/strick/go/s):03243                  lda   a,y            Get proper color bit mask
0FE1 ADC4             (/home/strick/go/s):03244                  jsr   ,u             Put pixel on screen
0FE3 E662             (/home/strick/go/s):03245                  ldb   2,s            Restore original pixel bit mask
0FE5 170A97           (/home/strick/go/s):03246                  lbsr  L1F0E          B=New pixel mask, X=new scrn addr. (if chng)
0FE8 E762             (/home/strick/go/s):03247                  stb   2,s            Save pixel mask for next pixel
0FEA 0A97             (/home/strick/go/s):03248         L0EFA    dec   <$0097         Dec # pixels left in current byte
0FEC 2706             (/home/strick/go/s):03249                  beq   L0F04          Done byte, skip ahead
0FEE 3507             (/home/strick/go/s):03250                  puls  d,cc           Restore pixel/color masks & carry
0FF0 6E9F11A3         (/home/strick/go/s):03251                  jmp   [>GrfMem+gr00A3]       Call vector
                      (/home/strick/go/s):03252         
                      (/home/strick/go/s):03253         * Current byte's worth of pixels done: set up next byte
0FF4 3263             (/home/strick/go/s):03254         L0F04    leas  3,s            Eat stack
0FF6 9604             (/home/strick/go/s):03255                  lda   <$0004         Get # bytes wide GP buffer is
0FF8 4A               (/home/strick/go/s):03256                  deca                 Decrement it
0FF9 2714             (/home/strick/go/s):03257                  beq   L0F20          If totally done buffer width, go to next line
0FFB 9704             (/home/strick/go/s):03258                  sta   <$0004         Save new total
0FFD 4A               (/home/strick/go/s):03259                  deca                 If only 1, set up for partially used last byte
0FFE 2703             (/home/strick/go/s):03260                  beq   L0F14
1000 9605             (/home/strick/go/s):03261                  lda   <$0005         Get # pixels/byte in GP buffer for full byte
1002 8C               (/home/strick/go/s):03262                  fcb   $8C          skip 2 bytes: same cycle time, 1 byte shorter
                      (/home/strick/go/s):03263         
1003 9607             (/home/strick/go/s):03264         L0F14    lda   <$0007         Get # pixels to do in last (partial) byte of bfr
1005 9797             (/home/strick/go/s):03265         L0F16    sta   <$0097         Save # pixels to do in next byte
1007 109EA3           (/home/strick/go/s):03266                  ldy   <$00A3         Move last byte partial vector to normal
100A 109FA1           (/home/strick/go/s):03267                  sty   <$00A1           so we can use same routines
100D 2095             (/home/strick/go/s):03268                  bra   L0EB2          Go finish off the last byte
                      (/home/strick/go/s):03269                  
                      (/home/strick/go/s):03270         * Done current line of GP buffer, set up for next line
100F 9E72             (/home/strick/go/s):03271         L0F20    ldx   <$0072         Get screen addr of current line in GP buffer
1011 D663             (/home/strick/go/s):03272                  ldb   <$0063         Get # bytes/row on screen
1013 3A               (/home/strick/go/s):03273                  abx                  Point to start of next line on screen
1014 0A52             (/home/strick/go/s):03274                  dec   <$0052         Dec # lines left on window / GP buffer
1016 1026FF70         (/home/strick/go/s):03275                  lbne  L0E9E          If not bottom, continue PUTting
101A 35A0             (/home/strick/go/s):03276                  puls  pc,y           As far as we can go, restore Y & return
                      (/home/strick/go/s):03277         
                      (/home/strick/go/s):03278         * Map GP buffer entry point
101C 17F8EF           (/home/strick/go/s):03279         L0F31    lbsr  L0930        find the buffer
101F 10250154         (/home/strick/go/s):03280                  lbcs  SysRet       If error, exit back to system with it
1023 D797             (/home/strick/go/s):03281                  stb   <$0097       save starting block number
1025 E60F             (/home/strick/go/s):03282                  ldb   Grf.NBlk,x   number of blocks in the buffer
1027 D799             (/home/strick/go/s):03283                  stb   <$0099       save count
1029 EC05             (/home/strick/go/s):03284                  ldd   Grf.BSz,x    size of data inside the buffer
102B DD9B             (/home/strick/go/s):03285                  std   <$009B       save size of the buffer
102D 308820           (/home/strick/go/s):03286                  leax  Grf.Siz,x    point to the start of the buffer data itself
1030 1F10             (/home/strick/go/s):03287                  tfr   x,d          move into math register
1032 841F             (/home/strick/go/s):03288                  anda  #$1F         keep offset within the block
1034 DD9D             (/home/strick/go/s):03289                  std   <$009D       save offset
1036 16013D           (/home/strick/go/s):03290                  lbra  L0F78        exit with no error
                      (/home/strick/go/s):03291         
                      (/home/strick/go/s):03292         * ATD: this special-purpose text routine results in gfx screens being
                      (/home/strick/go/s):03293         * marginally slower, but it saves ~170 clock cycles per character put
                      (/home/strick/go/s):03294         * on a gfx screen.
                      (/home/strick/go/s):03295         
1039 0A83             (/home/strick/go/s):03296         fast.set dec   <$0083       account for the first character we printed out
                      (/home/strick/go/s):03297         * reset the various parameters after falling off the rhs of the screen
103B 3540             (/home/strick/go/s):03298         fast.txt puls  u            restore pointer to our fast text
                      (/home/strick/go/s):03299                  IFNE  H6309
                      (/home/strick/go/s):03300                  ldw   Wt.CurX,y    move current X position into W
                      (/home/strick/go/s):03301                  ELSE
103D AE3E             (/home/strick/go/s):03302                  ldx   Wt.CurX,y
103F 9FB5             (/home/strick/go/s):03303                  stx   <$B5
                      (/home/strick/go/s):03304                  ENDC
1041 AE3B             (/home/strick/go/s):03305                  ldx   Wt.Cur,y     get current cursor address on the screen 
1043 E628             (/home/strick/go/s):03306                  ldb   Wt.Attr,y    grab current attributes
1045 A6C0             (/home/strick/go/s):03307         ftxt.lp  lda   ,u+          get a character
1047 170103           (/home/strick/go/s):03308                  lbsr  txt.fixa     fix A so it's printable
104A 170143           (/home/strick/go/s):03309                  lbsr  L0F7C.0      do more text screen fixes, and STD ,X++
                      (/home/strick/go/s):03310                  IFNE  H6309
                      (/home/strick/go/s):03311                  incw               right one character BEFORE counting down
                      (/home/strick/go/s):03312                  ELSE
104D 3410             (/home/strick/go/s):03313                  pshs  x
104F 9EB5             (/home/strick/go/s):03314                  ldx   <$B5
1051 3001             (/home/strick/go/s):03315                  leax  1,x
1053 9FB5             (/home/strick/go/s):03316                  stx   <$B5
1055 3510             (/home/strick/go/s):03317                  puls  x
                      (/home/strick/go/s):03318                  ENDC
1057 0A83             (/home/strick/go/s):03319                  dec   <$83         count down
1059 2712             (/home/strick/go/s):03320                  beq   ftxt.ex      exit if it's zero: we're done here
                      (/home/strick/go/s):03321                  IFNE  H6309
                      (/home/strick/go/s):03322                  cmpw  Wt.MaxX,y    are we at the rhs of the screen?
                      (/home/strick/go/s):03323                  ELSE
105B 3410             (/home/strick/go/s):03324                  pshs  x
105D 9EB5             (/home/strick/go/s):03325                  ldx   <$B5
105F ACA81B           (/home/strick/go/s):03326                  cmpx  Wt.MaxX,y
1062 3510             (/home/strick/go/s):03327                  puls  x
                      (/home/strick/go/s):03328                  ENDC
1064 23DF             (/home/strick/go/s):03329                  bls   ftxt.lp      no, continue doing fast text put
1066 3440             (/home/strick/go/s):03330                  pshs  u            save text pointer
1068 170453           (/home/strick/go/s):03331                  lbsr  L1238        zero out X coord, do scroll, etc
106B 20CE             (/home/strick/go/s):03332                  bra   fast.txt     and go reset out parameters
                      (/home/strick/go/s):03333         
     106D             (/home/strick/go/s):03334         ftxt.ex  equ   *
                      (/home/strick/go/s):03335                  IFNE  H6309
                      (/home/strick/go/s):03336                  cmpw  Wt.MaxX,y    Are we at the right hand side of the screen?
                      (/home/strick/go/s):03337                  ELSE
106D 3410             (/home/strick/go/s):03338                  pshs  x
106F 9EB5             (/home/strick/go/s):03339                  ldx   <$B5
1071 ACA81B           (/home/strick/go/s):03340                  cmpx  Wt.MaxX,y
1074 3510             (/home/strick/go/s):03341                  puls  x
                      (/home/strick/go/s):03342                  ENDC
1076 2307             (/home/strick/go/s):03343                  bls   NoScroll     No, exit normally
1078 170443           (/home/strick/go/s):03344                  lbsr  L1238        Do scroll stuff
                      (/home/strick/go/s):03345                  IFNE  H6309
                      (/home/strick/go/s):03346                  clrw               Zero out current X coord
                      (/home/strick/go/s):03347                  ELSE
107B 0FB5             (/home/strick/go/s):03348                  clr   <$B5
107D 0FB6             (/home/strick/go/s):03349                  clr   <$B6
                      (/home/strick/go/s):03350                  ENDC
     107F             (/home/strick/go/s):03351         NoScroll equ   *
                      (/home/strick/go/s):03352                  IFNE  H6309
                      (/home/strick/go/s):03353                  stw   Wt.CurX,y    save current X coordinate
                      (/home/strick/go/s):03354                  ELSE
107F 3410             (/home/strick/go/s):03355                  pshs  x
1081 9EB5             (/home/strick/go/s):03356                  ldx   <$B5
1083 AF3E             (/home/strick/go/s):03357                  stx   Wt.CurX,y
1085 3510             (/home/strick/go/s):03358                  puls  x
                      (/home/strick/go/s):03359                  ENDC
1087 1703CF           (/home/strick/go/s):03360                  lbsr  L11D1        set up for the next call
108A 1600E9           (/home/strick/go/s):03361                  lbra  L0F78        exit without error
                      (/home/strick/go/s):03362         
                      (/home/strick/go/s):03363         * entry: A = number of characters at $0180 to write
                      (/home/strick/go/s):03364         *        Y = window table pointer
108D 8E0180           (/home/strick/go/s):03365         fast.chr ldx   #$0180       where the data is located
                      (/home/strick/go/s):03366         * ATD: $83 is unused by anything as far as I can tell.
1090 9783             (/home/strick/go/s):03367                  sta   <$83         save count of characters to do for later
1092 A680             (/home/strick/go/s):03368                  lda   ,x+          get the first character
1094 3410             (/home/strick/go/s):03369                  pshs  x            save address of character
1096 17009C           (/home/strick/go/s):03370                  lbsr  L0F4B.1      ensure window is set up properly during 1st chr.
                      (/home/strick/go/s):03371         * perhaps the DEC <$83 could be here... remove FAST.SET, and fix f1.do
                      (/home/strick/go/s):03372         
1099 9660             (/home/strick/go/s):03373                  lda   <$60         is it a text screen?
109B 2B9C             (/home/strick/go/s):03374                  bmi   fast.set     yes, make it _really_ fast
                      (/home/strick/go/s):03375         
109D D66F             (/home/strick/go/s):03376                  ldb   <$006F       get X size of font
109F C108             (/home/strick/go/s):03377                  cmpb  #$08         Even byte wide size font?
                      (/home/strick/go/s):03378                  IFNE  H6309
                      (/home/strick/go/s):03379                  bne   f1.do        no, go setup for multi-color/shiftable screen
                      (/home/strick/go/s):03380                  ELSE
10A1 10260088         (/home/strick/go/s):03381                  lbne  f1.do
                      (/home/strick/go/s):03382                  ENDC
10A5 9EB0             (/home/strick/go/s):03383                  ldx   <$B0         get cached font pointer
                      (/home/strick/go/s):03384                  IFNE  H6309
                      (/home/strick/go/s):03385                  beq   f1.do        didn't find a font: skip ahead
                      (/home/strick/go/s):03386                  tim   #Prop,<$E    Proportional?
                      (/home/strick/go/s):03387                  ELSE
10A7 10270082         (/home/strick/go/s):03388                  lbeq  f1.do
10AB 3402             (/home/strick/go/s):03389                  pshs  a
10AD 960E             (/home/strick/go/s):03390                  lda   <$E 
10AF 8510             (/home/strick/go/s):03391                  bita  #Prop
10B1 3502             (/home/strick/go/s):03392                  puls  a
                      (/home/strick/go/s):03393                  ENDC
10B3 2678             (/home/strick/go/s):03394                  bne   f1.do        yes, use slow method
                      (/home/strick/go/s):03395         
                      (/home/strick/go/s):03396         * OK.  Now we have GFX screens only here, at least one character printed
                      (/home/strick/go/s):03397         * to ensure that the buffers etc. are set up and mapped in.  We can now go to
                      (/home/strick/go/s):03398         * special-purpose routine for fixed-width 8x8 fonts: ~15% speedup!
10B5 EC05             (/home/strick/go/s):03399                  ldd   Grf.BSz,x
10B7 308820           (/home/strick/go/s):03400                  leax  Grf.Siz,x    point X to the first character in the font
10BA 338B             (/home/strick/go/s):03401                  leau  d,x          point U to the absolute end-address of the font
                      (/home/strick/go/s):03402         * Moved the DP saves from $B2 to $B9; RG
10BC DFB9             (/home/strick/go/s):03403                  stu   <$B9         save the pointer for later
10BE 4F               (/home/strick/go/s):03404                  clra
10BF E623             (/home/strick/go/s):03405                  ldb   Wt.CWTmp,y   get bytes per font character
10C1 DDBB             (/home/strick/go/s):03406                  std   <$BB
10C3 ECA81B           (/home/strick/go/s):03407                  ldd   Wt.MaxX,y    get maximum X position (e.g. 319, 639)
                      (/home/strick/go/s):03408                  IFNE  H6309
                      (/home/strick/go/s):03409                  incd               count up one
                      (/home/strick/go/s):03410                  ELSE
10C6 C30001           (/home/strick/go/s):03411                  addd  #1
                      (/home/strick/go/s):03412                  ENDC
10C9 830008           (/home/strick/go/s):03413                  subd  #$0008       point D to the last X position possible for
10CC DDBD             (/home/strick/go/s):03414                  std   <$BD         a character, and save it
                      (/home/strick/go/s):03415         
                      (/home/strick/go/s):03416         * Note: W *SHOULD* be set up properly from the previous call to print one
                      (/home/strick/go/s):03417         * character, but that character might have caused the text to wrap, and thus
                      (/home/strick/go/s):03418         * destroy W
10CE CE5280           (/home/strick/go/s):03419                  ldu   #GrfStrt+Fast.pt-2  point to fast font put table
10D1 D660             (/home/strick/go/s):03420                  ldb   <$0060       get screen type
10D3 58               (/home/strick/go/s):03421                  aslb               2 bytes per entry
                      (/home/strick/go/s):03422                  IFNE  H6309
                      (/home/strick/go/s):03423                  ldw   b,u          grab pointer to routine to use
                      (/home/strick/go/s):03424                  ELSE
10D4 3410             (/home/strick/go/s):03425                  pshs  x
10D6 AEC5             (/home/strick/go/s):03426                  ldx   b,u
10D8 9FB5             (/home/strick/go/s):03427                  stx   <$B5
10DA 3510             (/home/strick/go/s):03428                  puls  x
                      (/home/strick/go/s):03429                  ENDC
10DC 3540             (/home/strick/go/s):03430                  puls  u            restore character pointer
10DE 2041             (/home/strick/go/s):03431                  bra   f2.do        jump to the middle of the loop
                      (/home/strick/go/s):03432         
                      (/home/strick/go/s):03433         * U = pointer to characters to print
                      (/home/strick/go/s):03434         * Y = window table pointer
                      (/home/strick/go/s):03435         * X = font GP buffer pointer
10E0 A6C0             (/home/strick/go/s):03436         f2.next  lda   ,u+          grab a character
10E2 3470             (/home/strick/go/s):03437                  pshs  x,y,u        save all sorts of registers
10E4 8D67             (/home/strick/go/s):03438                  bsr   txt.fixa     fix the character in A so it's printable
10E6 1F89             (/home/strick/go/s):03439                  tfr   a,b          move character to B
10E8 4F               (/home/strick/go/s):03440                  clra               make 16-bit offset
                      (/home/strick/go/s):03441                  IFNE  H6309
                      (/home/strick/go/s):03442                  lsld               ALL fonts are 8 pixels high
                      (/home/strick/go/s):03443                  lsld
                      (/home/strick/go/s):03444                  lsld
                      (/home/strick/go/s):03445                  addr  d,x          point to the font data
                      (/home/strick/go/s):03446                  ELSE
10E9 58               (/home/strick/go/s):03447                  lslb
10EA 49               (/home/strick/go/s):03448                  rola
10EB 58               (/home/strick/go/s):03449                  lslb
10EC 49               (/home/strick/go/s):03450                  rola
10ED 58               (/home/strick/go/s):03451                  lslb
10EE 49               (/home/strick/go/s):03452                  rola
10EF 308B             (/home/strick/go/s):03453                  leax  d,x
                      (/home/strick/go/s):03454                  ENDC
10F1 9CB9             (/home/strick/go/s):03455                  cmpx  <$B9         are we within the font's memory buffer?
10F3 2503             (/home/strick/go/s):03456                  blo   f2.fnt       yes, we're OK
10F5 8E51EF           (/home/strick/go/s):03457                  ldx   #GrfStrt+L0FFA  otherwise point to default font character '.'
                      (/home/strick/go/s):03458         
10F8 170154           (/home/strick/go/s):03459         f2.fnt   lbsr  L102F.1      go print the character on the screen
10FB 10AE62           (/home/strick/go/s):03460                  ldy   2,s          get window pointer again
10FE EC3B             (/home/strick/go/s):03461                  ldd   Wt.Cur,y     get current cursor address
1100 D3BB             (/home/strick/go/s):03462                  addd  <$BB         add in bytes per character
1102 ED3B             (/home/strick/go/s):03463                  std   Wt.Cur,y
1104 EC3E             (/home/strick/go/s):03464                  ldd   Wt.CurX,y     Get X coordinate
1106 C30008           (/home/strick/go/s):03465                  addd  #$0008        Add to X pixel count (1, 6 or 8?)
1109 ED3E             (/home/strick/go/s):03466                  std   Wt.CurX,y     Update value
110B 1093BD           (/home/strick/go/s):03467                  cmpd  <$BD          Compare with maximum X coordinate
110E 230F             (/home/strick/go/s):03468                  bls   f2.do1        If not past right hand side, leave
                      (/home/strick/go/s):03469                  IFNE  H6309
                      (/home/strick/go/s):03470                  pshsw              save pointer to which font-put routine to use
                      (/home/strick/go/s):03471                  ELSE
1110 3430             (/home/strick/go/s):03472                  pshs  x,y
1112 9EB5             (/home/strick/go/s):03473                  ldx   <$B5
1114 AF62             (/home/strick/go/s):03474                  stx   2,s
1116 3510             (/home/strick/go/s):03475                  puls  x
                      (/home/strick/go/s):03476                  ENDC
1118 1703A3           (/home/strick/go/s):03477                  lbsr  L1238        fix X,Y coordinate, scroll screen, set up bitmasks
                      (/home/strick/go/s):03478                  IFNE  H6309
                      (/home/strick/go/s):03479                  pulsw
                      (/home/strick/go/s):03480                  ELSE
111B AEE1             (/home/strick/go/s):03481                  ldx   ,s++
111D 9FB5             (/home/strick/go/s):03482                  stx   <$B5
                      (/home/strick/go/s):03483                  ENDC
111F 3570             (/home/strick/go/s):03484         f2.do1   puls  x,y,u        restore registers
1121 0A83             (/home/strick/go/s):03485         f2.do    dec   <$83         count down
1123 26BB             (/home/strick/go/s):03486                  bne   f2.next      continue
1125 204F             (/home/strick/go/s):03487                  bra   L0F78        and exit if we're all done
                      (/home/strick/go/s):03488         
1127 A680             (/home/strick/go/s):03489         f1.next  lda   ,x+
1129 3410             (/home/strick/go/s):03490                  pshs  x
112B 8D12             (/home/strick/go/s):03491                  bsr   L0F4B.2      put one character on the screen
112D 3510             (/home/strick/go/s):03492         f1.do    puls  x            restore count, pointer
112F 0A83             (/home/strick/go/s):03493                  dec   <$83         count down
1131 26F4             (/home/strick/go/s):03494                  bne   f1.next      continue
1133 2041             (/home/strick/go/s):03495                  bra   L0F78        and exit if we're all done
                      (/home/strick/go/s):03496         
                      (/home/strick/go/s):03497         * L0F4B.1 is now a subroutine to put one character on the screen...
                      (/home/strick/go/s):03498         * Alpha put entry point
                      (/home/strick/go/s):03499         * Entry: A = Character to write
                      (/home/strick/go/s):03500         *        Y = window table ptr
                      (/home/strick/go/s):03501         * 07/19/93: LBSR L0177 to L0175
1135 17F023           (/home/strick/go/s):03502         L0F4B.1  lbsr  L0175        Switch to the window we are writing to
1138 1700BF           (/home/strick/go/s):03503                  lbsr  L1002        set up character x,y sizes and font pointers
113B 109FA9           (/home/strick/go/s):03504                  sty   <$A9         Save window tbl ptr from this Alpha put
113E 4D               (/home/strick/go/s):03505                  tsta               Is the character ASCII 127 or less?
113F 8D0C             (/home/strick/go/s):03506         L0F4B.2  bsr   txt.fixa     fix A: adds 10 cycles for slow puts and gfx puts
                      (/home/strick/go/s):03507         
1141 D660             (/home/strick/go/s):03508                  ldb   <$0060       Get screen type
1143 2A03             (/home/strick/go/s):03509                  bpl   L0F73        If gfx  screen, go do it
1145 8D45             (/home/strick/go/s):03510                  bsr   L0F7C        go print it on-screen
1147 8C               (/home/strick/go/s):03511                  fcb   $8C          skip the next 2 bytes
1148 8D5E             (/home/strick/go/s):03512         L0F73    bsr   L0FAE        go print graphic font
114A 160360           (/home/strick/go/s):03513         L0F75    lbra  L121A        check for screen scroll and/or next line
                      (/home/strick/go/s):03514         
                      (/home/strick/go/s):03515         * L.C.B - Add a flag that signifies that we are doing a GFX font, and that the
                      (/home/strick/go/s):03516         *         font buffer size is $700 bytes. If this flag is set at entry to this
                      (/home/strick/go/s):03517         *         routine (after bpl), return to print it.
114D 2A24             (/home/strick/go/s):03518         txt.fixa bpl   L0F6B        Yes, go print it
114F 0DAB             (/home/strick/go/s):03519                  tst   <grBigFnt    Gfx mode with a 224 char font?
1151 2707             (/home/strick/go/s):03520                  beq   Norm         No, do normal remapping
1153 81E0             (/home/strick/go/s):03521                  cmpa  #$e0         Last 31 chars?
1155 2502             (/home/strick/go/s):03522                  blo   BigOut       No, exit
1157 80E0             (/home/strick/go/s):03523                  suba  #$e0         Point to 1st 31 chars in font
1159 39               (/home/strick/go/s):03524         BigOut   rts
                      (/home/strick/go/s):03525         
115A 81BF             (/home/strick/go/s):03526         Norm     cmpa  #$BF
115C 220B             (/home/strick/go/s):03527                  bhi   L0F61        Anything >=$C0 gets wrapped back
115E 84EF             (/home/strick/go/s):03528                  anda  #$EF         Mask out high bit
1160 8090             (/home/strick/go/s):03529                  suba  #$90
1162 811A             (/home/strick/go/s):03530                  cmpa  #$1A
1164 240D             (/home/strick/go/s):03531                  bhs   L0F6B        yes, go print it
1166 862E             (/home/strick/go/s):03532         L0F5D    lda   #'.          Change illegal character to a period
1168 39               (/home/strick/go/s):03533                  rts
                      (/home/strick/go/s):03534         
1169 84DF             (/home/strick/go/s):03535         L0F61    anda  #$DF
116B 80C1             (/home/strick/go/s):03536                  suba  #$C1
116D 2BF7             (/home/strick/go/s):03537                  bmi   L0F5D        yes, change it to a period
116F 8119             (/home/strick/go/s):03538                  cmpa  #$19
1171 22F3             (/home/strick/go/s):03539                  bhi   L0F5D        yes, change it to a period
1173 39               (/home/strick/go/s):03540         L0F6B    rts
                      (/home/strick/go/s):03541         
                      (/home/strick/go/s):03542         * this adds 10 cycles to any normal alpha put, but it should
                      (/home/strick/go/s):03543         * save us lots of cycles later!
1174 8DBF             (/home/strick/go/s):03544         L0F4B    bsr   L0F4B.1      do internal alpha-put routine
                      (/home/strick/go/s):03545         
                      (/home/strick/go/s):03546         * Return to the system without any errors
1176 5F               (/home/strick/go/s):03547         L0F78    clrb               No errors
                      (/home/strick/go/s):03548         
                      (/home/strick/go/s):03549         * Return to system (Jumps to [D.Flip0] with X=system stack ptr & A=CC status)
1177 1FA8             (/home/strick/go/s):03550         SysRet   tfr   cc,a         save IRQ status for os9p1
1179 1A50             (/home/strick/go/s):03551                  orcc  #IntMasks    Shut off interrupts
117B BE1007           (/home/strick/go/s):03552                  ldx   >WGlobal+G.GrfStk       Get system stack ptr
117E 7F1002           (/home/strick/go/s):03553                  clr   >WGlobal+G.GfBusy       Flag that Grfdrv will no longer be task 1
                      (/home/strick/go/s):03554                  IFNE  H6309
                      (/home/strick/go/s):03555                  tfr   0,dp         Restore system DP register for os9p1
                      (/home/strick/go/s):03556                  ELSE
1181 3402             (/home/strick/go/s):03557                  pshs  a
1183 4F               (/home/strick/go/s):03558                  clra
1184 1F8B             (/home/strick/go/s):03559                  tfr   a,dp
1186 3502             (/home/strick/go/s):03560                  puls  a
                      (/home/strick/go/s):03561                  ENDC
1188 6E9F00A9         (/home/strick/go/s):03562                  jmp   [>D.Flip0]   Return to system
                      (/home/strick/go/s):03563         
                      (/home/strick/go/s):03564         * Print text to hardware text - optimized for lowercase, then upper
                      (/home/strick/go/s):03565         * Can be switched around by swapping blo/bhi sections
118C E628             (/home/strick/go/s):03566         L0F7C    ldb   Wt.Attr,y
118E AE3B             (/home/strick/go/s):03567                  ldx   Wt.Cur,y
1190 8160             (/home/strick/go/s):03568         L0F7C.0  cmpa  #$60         Convert ASCII reverse apostrophe to apostrophe
1192 2211             (/home/strick/go/s):03569                  bhi   L0F8E        Above is safe, go straight to print
1194 2604             (/home/strick/go/s):03570                  bne   L0F88        No, try next
1196 8627             (/home/strick/go/s):03571                  lda   #$27         GIME apostrophe
1198 200B             (/home/strick/go/s):03572                  bra   L0F8E        Skip rest
119A 815E             (/home/strick/go/s):03573         L0F88    cmpa  #$5E         Convert ASCII carat to GIME carat
119C 2507             (/home/strick/go/s):03574                  blo   L0F8E        Below is safe, go straight to print
119E 2603             (/home/strick/go/s):03575                  bne   L0F82        No, has to be Underscore
11A0 8660             (/home/strick/go/s):03576                  lda   #$60         GIME carat
11A2 8C               (/home/strick/go/s):03577                  fcb   $8C          skip 2 bytes: same cycle time, 1 byte shorter
                      (/home/strick/go/s):03578         
11A3 867F             (/home/strick/go/s):03579         L0F82    lda   #$7F         Convert ASCII underscore to GIME underscore
                      (/home/strick/go/s):03580         * ATD: the back of the window OS-9 manual says that the transparent character
                      (/home/strick/go/s):03581         * switch is supported only on gfx screens, so we don't support it here!
                      (/home/strick/go/s):03582         *L0F8E    ldx   Wt.Cur,y     get cursor address on screen
                      (/home/strick/go/s):03583         *         ldb   Wt.Attr,y    get attributes from the window table
                      (/home/strick/go/s):03584         *         tst   Wt.BSW,y     transparent characters?
                      (/home/strick/go/s):03585         *         bmi   L0FA4        no, go on
                      (/home/strick/go/s):03586         *         IFNE  H6309
                      (/home/strick/go/s):03587         *         aim   #$07,1,x     mask off everything but background attributes
                      (/home/strick/go/s):03588         *         ELSE
                      (/home/strick/go/s):03589         *         pshs  a
                      (/home/strick/go/s):03590         *         lda   1,x
                      (/home/strick/go/s):03591         *         anda  #7
                      (/home/strick/go/s):03592         *         sta   1,x
                      (/home/strick/go/s):03593         *         puls  a
                      (/home/strick/go/s):03594         *         ENDC
                      (/home/strick/go/s):03595         *         andb  #$F8         get rid of background color
                      (/home/strick/go/s):03596         *         orb   1,x          merge in background color
11A5 ED81             (/home/strick/go/s):03597         L0F8E    std   ,x++         save character & attribute to screen
11A7 39               (/home/strick/go/s):03598                  rts                Check for screen scroll/new line
                      (/home/strick/go/s):03599         
                      (/home/strick/go/s):03600         * Print text to graphics window
                      (/home/strick/go/s):03601         * Note: $61 & $62 contain the bit masks for the foreground & background colors
                      (/home/strick/go/s):03602         *   for the whole width of the byte (ex. a 2 color would be a $00 or $ff)
11A8 3422             (/home/strick/go/s):03603         L0FAE    pshs  a,y          Preserve character to print & Window table ptr
11AA E629             (/home/strick/go/s):03604                  ldb   Wt.BSW,y     get current attributes
11AC D70E             (/home/strick/go/s):03605                  stb   <$000E       save 'em for quicker access
11AE C504             (/home/strick/go/s):03606                  bitb  #Invers      inverse on?
11B0 2706             (/home/strick/go/s):03607                  beq   L0FBE        no, go on
                      (/home/strick/go/s):03608         * 07/20/93 mod: Get colors from window table instead of GRFDRV mem for speedup
11B2 EC26             (/home/strick/go/s):03609                  ldd   Wt.Fore,y    Get fore/back colors
11B4 1E89             (/home/strick/go/s):03610                  exg   a,b          exchange 'em
11B6 DD61             (/home/strick/go/s):03611                  std   <$0061       save 'em back
11B8 9EB0             (/home/strick/go/s):03612         L0FBE    ldx   <$00B0       get cached font pointer
11BA 270E             (/home/strick/go/s):03613                  beq   L0FCC        if none, point to '.' font character
11BC E608             (/home/strick/go/s):03614                  ldb   Grf.XSz+1,x  get x-size of the font
11BE D76F             (/home/strick/go/s):03615                  stb   <$006F       save here again: proportional fonts destroy it
11C0 A6E4             (/home/strick/go/s):03616                  lda   ,s           grab again the character to print
                      (/home/strick/go/s):03617         * ATD: is this next line really necessary?  The code at L064A ENSURES that
                      (/home/strick/go/s):03618         * Grf.XBSz = Grf.YSz = $08, so this next line could be replaced by a LDB #8
11C2 E60B             (/home/strick/go/s):03619                  ldb   Grf.XBSz,x   get size of each buffer entry in bytes
11C4 3D               (/home/strick/go/s):03620                  mul                Calculate offset into buffer for character
11C5 10A305           (/home/strick/go/s):03621                  cmpd  Grf.BSz,x    Still in our buffer? (Not illegal character?)
11C8 2505             (/home/strick/go/s):03622                  blo   L0FD1        yes, go on
11CA 8E51EF           (/home/strick/go/s):03623         L0FCC    ldx   #GrfStrt+L0FFA  Point to default font char ('.')
11CD 2005             (/home/strick/go/s):03624                  bra   L0FD6
                      (/home/strick/go/s):03625         
11CF C30020           (/home/strick/go/s):03626         L0FD1    addd  #Grf.Siz     Add 32 (past header in Gfx buffer table?)
                      (/home/strick/go/s):03627                  IFNE  H6309
                      (/home/strick/go/s):03628                  addr  d,x          Point to the character within buffer we need
                      (/home/strick/go/s):03629                  ELSE
11D2 308B             (/home/strick/go/s):03630                  leax  d,x
                      (/home/strick/go/s):03631                  ENDC
11D4 D66F             (/home/strick/go/s):03632         L0FD6    ldb   <$006F       get X size of font
11D6 C108             (/home/strick/go/s):03633                  cmpb  #$08         Even byte wide size font?
11D8 260A             (/home/strick/go/s):03634                  bne   L0FEC        no, go setup for multi-color/shiftable screen
                      (/home/strick/go/s):03635                  IFNE  H6309
                      (/home/strick/go/s):03636                  tim   #Prop,<$E    Proportional?
                      (/home/strick/go/s):03637                  ELSE
11DA 3402             (/home/strick/go/s):03638                  pshs  a
11DC 960E             (/home/strick/go/s):03639                  lda   <$E 
11DE 8510             (/home/strick/go/s):03640                  bita  #Prop
11E0 3502             (/home/strick/go/s):03641                  puls  a
                      (/home/strick/go/s):03642                  ENDC
11E2 2759             (/home/strick/go/s):03643                  beq   L102F        no, use fast method
                      (/home/strick/go/s):03644         * Setup for multi-color/shiftable gfx text
11E4 CE5358           (/home/strick/go/s):03645         L0FEC    ldu   #GrfStrt+L10DF  Normal gfx text vector
11E7 10AE61           (/home/strick/go/s):03646                  ldy   1,s          get window table pointer back
11EA 170100           (/home/strick/go/s):03647                  lbsr  L106D        go print it
11ED 35A2             (/home/strick/go/s):03648         L0FF8    puls  a,y,pc       return
                      (/home/strick/go/s):03649         
                      (/home/strick/go/s):03650         * Default font character if no font buffer defined ('.')
11EF 00               (/home/strick/go/s):03651         L0FFA    fcb   %00000000
11F0 00               (/home/strick/go/s):03652                  fcb   %00000000
11F1 00               (/home/strick/go/s):03653                  fcb   %00000000
11F2 00               (/home/strick/go/s):03654                  fcb   %00000000
11F3 00               (/home/strick/go/s):03655                  fcb   %00000000
11F4 00               (/home/strick/go/s):03656                  fcb   %00000000
11F5 10               (/home/strick/go/s):03657                  fcb   %00010000
11F6 00               (/home/strick/go/s):03658                  fcb   %00000000
                      (/home/strick/go/s):03659         
                      (/home/strick/go/s):03660         * Check if font buffers defined?
11F7 17EF68           (/home/strick/go/s):03661         L0FFF    lbsr  L0177
11FA 3402             (/home/strick/go/s):03662         L1002    pshs  a            save character
11FC D660             (/home/strick/go/s):03663                  ldb   <$0060       get STY marker
11FE 2A0D             (/home/strick/go/s):03664                  bpl   L1011        graphics, go on
                      (/home/strick/go/s):03665         * Set text font H/W
1200 CC0001           (/home/strick/go/s):03666                  ldd   #$0001       get text font size
1203 DD6E             (/home/strick/go/s):03667                  std   <$006E
1205 DD70             (/home/strick/go/s):03668                  std   <$0070
                      (/home/strick/go/s):03669         * Added LCB 97/05/26 for 224 char font support
1207 97AB             (/home/strick/go/s):03670                  sta   <grBigFnt    Flag that this is not a 224 char font
1209 3582             (/home/strick/go/s):03671                  puls  a,pc         larger, but faster than LDQ/bra L1022
                      (/home/strick/go/s):03672         
                      (/home/strick/go/s):03673         * Set undefined graphics font H/W
                      (/home/strick/go/s):03674         * L100F is ONLY called from alpha put routine, above.
120B 3402             (/home/strick/go/s):03675         L100F    pshs  a            Preserve A (so PULS PC,A works)
120D E62B             (/home/strick/go/s):03676         L1011    ldb   Wt.FBlk,y    any font defined?
120F 260B             (/home/strick/go/s):03677                  bne   L101F        yes, go map it in & get X/Y sizes
1211 53               (/home/strick/go/s):03678                  comb               set carry
                      (/home/strick/go/s):03679                  IFNE  H6309
                      (/home/strick/go/s):03680                  ldq   #$00080008    get default width & height
                      (/home/strick/go/s):03681                  tfr   0,x          make garbage font ptr
                      (/home/strick/go/s):03682                  ELSE
1212 CC0008           (/home/strick/go/s):03683                  ldd   #8
1215 DDB5             (/home/strick/go/s):03684                  std   <$B5
1217 8E0000           (/home/strick/go/s):03685                  ldx   #0
                      (/home/strick/go/s):03686                  ENDC
121A 200C             (/home/strick/go/s):03687                  bra   L1020
                      (/home/strick/go/s):03688         
                      (/home/strick/go/s):03689         * Setup defined graphics font H/W
121C 170687           (/home/strick/go/s):03690         L101F    lbsr  L017C        map in font block
121F AE2C             (/home/strick/go/s):03691                  ldx   Wt.FOff,y    get offset of font in mem block
1221 5F               (/home/strick/go/s):03692                  clrb               clear carry
                      (/home/strick/go/s):03693                  IFNE  H6309
                      (/home/strick/go/s):03694                  ldq   Grf.XSz,x    Get width & height from window table
                      (/home/strick/go/s):03695                  ELSE
1222 EC09             (/home/strick/go/s):03696                  ldd   Grf.XSz+2,x
1224 DDB5             (/home/strick/go/s):03697                  std   <$B5
1226 EC07             (/home/strick/go/s):03698                  ldd   Grf.XSz,x
                      (/home/strick/go/s):03699                  ENDC
1228 9FB0             (/home/strick/go/s):03700         L1020    stx   <$B0         cache font pointer for later
     122A             (/home/strick/go/s):03701         L1022    equ   *
                      (/home/strick/go/s):03702                  IFNE  H6309
                      (/home/strick/go/s):03703                  stq   <$6e         Set working copies
                      (/home/strick/go/s):03704                  ELSE
122A DD6E             (/home/strick/go/s):03705                  std   <$6e
122C DCB5             (/home/strick/go/s):03706                  ldd   <$B5
122E DD70             (/home/strick/go/s):03707                  std   <$70
                      (/home/strick/go/s):03708                  ENDC
                      (/home/strick/go/s):03709         * LCB 05/25/97 - Added flag for 224 char fonts
1230 CC0700           (/home/strick/go/s):03710                  ldd   #$700        Size of font we are checking for
1233 10A305           (/home/strick/go/s):03711                  cmpd  Grf.BSz,x    Is this a big font?
1236 2601             (/home/strick/go/s):03712                  bne   NotBig
1238 5C               (/home/strick/go/s):03713                  incb               Flag it is a big font
1239 D7AB             (/home/strick/go/s):03714         NotBig   stb   <grBigFnt    Set flag for 224 char font
123B 3582             (/home/strick/go/s):03715                  puls  a,pc         return
                      (/home/strick/go/s):03716         
123D 8D02             (/home/strick/go/s):03717         L102F    bsr   L102F.2
123F 20AC             (/home/strick/go/s):03718                  bra   L0FF8
                      (/home/strick/go/s):03719         
                      (/home/strick/go/s):03720         * fast draw a graphic font character to a graphics window
                      (/home/strick/go/s):03721         * If inverse was selected, they have already been swapped
                      (/home/strick/go/s):03722         * Note: <$61 contains the foreground color mask, <$62 contains the background
                      (/home/strick/go/s):03723         *   color mask.
                      (/home/strick/go/s):03724         * Entry: Y=window table pointer
                      (/home/strick/go/s):03725         *        X=Ptr to char in font we are printing
1241 CE5280           (/home/strick/go/s):03726         L102F.2  ldu   #GrfStrt+Fast.pt-2  point to fast font put table
1244 D660             (/home/strick/go/s):03727                  ldb   <$0060       get screen type
1246 58               (/home/strick/go/s):03728                  aslb               2 bytes per entry
                      (/home/strick/go/s):03729                  IFNE  H6309
                      (/home/strick/go/s):03730                  ldw   b,u          grab pointer to routine to use
                      (/home/strick/go/s):03731                  ELSE
1247 3410             (/home/strick/go/s):03732                  pshs  x
1249 AEC5             (/home/strick/go/s):03733                  ldx   b,u
124B 9FB5             (/home/strick/go/s):03734                  stx   <$B5
124D 3510             (/home/strick/go/s):03735                  puls  x
                      (/home/strick/go/s):03736                  ENDC
                      (/home/strick/go/s):03737         
124F 10AE3B           (/home/strick/go/s):03738         L102F.1  ldy   Wt.Cur,y     get cursor address on screen
1252 1E12             (/home/strick/go/s):03739                  exg   x,y          Swap Cursor address & font address
                      (/home/strick/go/s):03740         
1254 CE52CE           (/home/strick/go/s):03741                  ldu   #GrfStrt+fast.tbl  point to table of expanded pixels
                      (/home/strick/go/s):03742         
1257 9671             (/home/strick/go/s):03743                  lda   <$71         get font height
1259 4A               (/home/strick/go/s):03744                  deca               adjust it for double branch compare
125A 9720             (/home/strick/go/s):03745                  sta   <$20         save in temp buffer for later
                      (/home/strick/go/s):03746         
125C A6A0             (/home/strick/go/s):03747         L1039    lda   ,y+          get a line of character (8 pixels)
                      (/home/strick/go/s):03748                  IFNE  H6309
                      (/home/strick/go/s):03749                  tim   #Bold,<$0E   Bold attribute on?
                      (/home/strick/go/s):03750                  ELSE
125E 3402             (/home/strick/go/s):03751                  pshs  a
1260 960E             (/home/strick/go/s):03752                  lda   <$0E 
1262 8520             (/home/strick/go/s):03753                  bita  #Bold
1264 3502             (/home/strick/go/s):03754                  puls  a
                      (/home/strick/go/s):03755                  ENDC
1266 2703             (/home/strick/go/s):03756                  beq   L1044        no, skip bold mask
1268 44               (/home/strick/go/s):03757                  lsra               shift pixel pattern
1269 AA3F             (/home/strick/go/s):03758                  ora   -1,y         merge it with original to double up pixels
     126B             (/home/strick/go/s):03759         L1044    equ   *
                      (/home/strick/go/s):03760                  IFNE  H6309
                      (/home/strick/go/s):03761                  jsr   ,w           do a full 8-pixel width of bytes
                      (/home/strick/go/s):03762                  ELSE
126B AD9F11B5         (/home/strick/go/s):03763                  jsr   [>GrfMem+$B5]
                      (/home/strick/go/s):03764                  ENDC
126F D663             (/home/strick/go/s):03765                  ldb   <$0063       get bytes per line
1271 3A               (/home/strick/go/s):03766                  abx                move screen address to next line
1272 0A20             (/home/strick/go/s):03767                  dec   <$20         done 7 or 8 lines?
1274 2EE6             (/home/strick/go/s):03768                  bgt   L1039        No, go do next line
1276 2B26             (/home/strick/go/s):03769                  bmi   L1052        yes, return
                      (/home/strick/go/s):03770                  IFNE  H6309
                      (/home/strick/go/s):03771                  tim   #Under,<$0E  Underline attribute on?
                      (/home/strick/go/s):03772                  ELSE
1278 960E             (/home/strick/go/s):03773                  lda   <$0E 
127A 8540             (/home/strick/go/s):03774                  bita  #Under
                      (/home/strick/go/s):03775                  ENDC
127C 27DE             (/home/strick/go/s):03776                  beq   L1039        No, go do last byte of font
127E 86FF             (/home/strick/go/s):03777                  lda   #$ff         Underline byte
1280 20E9             (/home/strick/go/s):03778                  bra   L1044        Go put it in instead
                      (/home/strick/go/s):03779         
1282 528A             (/home/strick/go/s):03780         fast.pt  fdb   GrfStrt+font.2    2 color font
1284 52AB             (/home/strick/go/s):03781                  fdb   GrfStrt+Font.4    4 color
1286 52AB             (/home/strick/go/s):03782                  fdb   GrfStrt+Font.4    4 color
1288 529F             (/home/strick/go/s):03783                  fdb   GrfStrt+Font.16   16 color
                      (/home/strick/go/s):03784         
                      (/home/strick/go/s):03785         * smaller than old method.  Perhaps slower, but it should get the right
                      (/home/strick/go/s):03786         * foreground/background colors
128A 1F89             (/home/strick/go/s):03787         font.2   tfr   a,b          move font character into mask
128C 53               (/home/strick/go/s):03788                  comb               invert it
128D 0D0E             (/home/strick/go/s):03789         ChkTChr  tst   <$0E         Transparent attribute on?
128F 2A03             (/home/strick/go/s):03790                  bpl   L1051        if transparent, do only foreground colors
1291 D462             (/home/strick/go/s):03791                  andb  <$0062         AND in background color: 0 or 1
1293 8C               (/home/strick/go/s):03792                  fcb   $8C          skip 2 bytes
                      (/home/strick/go/s):03793         
1294 E484             (/home/strick/go/s):03794         L1051    andb  ,x           AND in background
1296 9461             (/home/strick/go/s):03795                  anda  <$0061       AND in foreground color
                      (/home/strick/go/s):03796                  IFNE  H6309
                      (/home/strick/go/s):03797                  orr   b,a          OR in the background that's already there
                      (/home/strick/go/s):03798                  ELSE
1298 3404             (/home/strick/go/s):03799                  pshs  b
129A AAE0             (/home/strick/go/s):03800                  ora   ,s+
                      (/home/strick/go/s):03801                  ENDC
129C A784             (/home/strick/go/s):03802                  sta   ,x           save font to screen
129E 39               (/home/strick/go/s):03803         L1052    rts                and return
                      (/home/strick/go/s):03804         
129F 8D3D             (/home/strick/go/s):03805         font.16  bsr   get.font     expand it once
12A1 3412             (/home/strick/go/s):03806                  pshs  a,x          save low byte, and current X coordinate
12A3 1F98             (/home/strick/go/s):03807                  tfr   b,a          move right hand mask into A
12A5 3002             (/home/strick/go/s):03808                  leax  2,x          do the right side of the font first
12A7 8D02             (/home/strick/go/s):03809                  bsr   font.4       expand it again, and do another 2 bytes
12A9 3512             (/home/strick/go/s):03810                  puls  a,x          restore left hand byte and screen position
                      (/home/strick/go/s):03811         
12AB 8D31             (/home/strick/go/s):03812         font.4   bsr   get.font     get the font data into 2 bytes
12AD 3406             (/home/strick/go/s):03813                  pshs  d            save mask
                      (/home/strick/go/s):03814                  IFNE  H6309
                      (/home/strick/go/s):03815                  comd               invert it for background check
                      (/home/strick/go/s):03816                  ELSE
12AF 43               (/home/strick/go/s):03817                  coma
12B0 53               (/home/strick/go/s):03818                  comb
                      (/home/strick/go/s):03819                  ENDC
12B1 0D0E             (/home/strick/go/s):03820                  tst   <$0E         check transparent flag
12B3 2A06             (/home/strick/go/s):03821                  bpl   fast.for     if transparent, only do foreground colors
12B5 9462             (/home/strick/go/s):03822                  anda  <$62         AND in background color
12B7 D462             (/home/strick/go/s):03823                  andb  <$62         into both A and B
12B9 2004             (/home/strick/go/s):03824                  bra   fast.st
                      (/home/strick/go/s):03825         
     12BB             (/home/strick/go/s):03826         fast.for equ   *
                      (/home/strick/go/s):03827                  ifne  H6309
                      (/home/strick/go/s):03828                  andd  ,x           AND in background of screen if transparent
                      (/home/strick/go/s):03829                  ELSE
12BB A484             (/home/strick/go/s):03830                  anda  ,x
12BD E401             (/home/strick/go/s):03831                  andb  1,x
                      (/home/strick/go/s):03832                  ENDC
12BF ED84             (/home/strick/go/s):03833         fast.st  std   ,x           save new background of the screen
12C1 3506             (/home/strick/go/s):03834                  puls  d            restore the old pixel mask
12C3 9461             (/home/strick/go/s):03835                  anda  <$61         AND in foreground color
12C5 D461             (/home/strick/go/s):03836                  andb  <$61         B, too
                      (/home/strick/go/s):03837                  IFNE  H6309
                      (/home/strick/go/s):03838                  ord   ,x           OR in background that's already there
                      (/home/strick/go/s):03839                  ELSE
12C7 AA84             (/home/strick/go/s):03840                  ora   ,x
12C9 EA01             (/home/strick/go/s):03841                  orb   1,x
                      (/home/strick/go/s):03842                  ENDC
12CB ED84             (/home/strick/go/s):03843                  std   ,x           save it on-screen
12CD 39               (/home/strick/go/s):03844                  rts
                      (/home/strick/go/s):03845         
                      (/home/strick/go/s):03846         * convert a byte of font data into pixel data
                      (/home/strick/go/s):03847         * This table turns a 2-color nibble (4 pixels) into a 4-color byte (4 pixels)
                      (/home/strick/go/s):03848         * The llokup is done twice for 16-color screens
12CE 00030C0F         (/home/strick/go/s):03849         fast.tbl fcb   $00,$03,$0C,$0F
12D2 30333C3F         (/home/strick/go/s):03850                  fcb   $30,$33,$3C,$3F
12D6 C0C3CCCF         (/home/strick/go/s):03851                  fcb   $C0,$C3,$CC,$CF
12DA F0F3FCFF         (/home/strick/go/s):03852                  fcb   $F0,$F3,$FC,$FF
                      (/home/strick/go/s):03853         
                      (/home/strick/go/s):03854         * A = font byte data
                      (/home/strick/go/s):03855         * U = pointer to fast.tbl, above
                      (/home/strick/go/s):03856         * returns D = pixel mask for this byte for a 4-color screen
12DE 3402             (/home/strick/go/s):03857         get.font pshs  a
12E0 840F             (/home/strick/go/s):03858                  anda  #$0F
12E2 E6C6             (/home/strick/go/s):03859                  ldb   a,u          get rightmost byte
12E4 3502             (/home/strick/go/s):03860                  puls  a
12E6 44               (/home/strick/go/s):03861                  lsra
12E7 44               (/home/strick/go/s):03862                  lsra
12E8 44               (/home/strick/go/s):03863                  lsra
12E9 44               (/home/strick/go/s):03864                  lsra               move high nibble into low nibble
12EA A6C6             (/home/strick/go/s):03865                  lda   a,u          get leftmost byte
12EC 39               (/home/strick/go/s):03866                  rts
                      (/home/strick/go/s):03867         * ATD: end of new font routines
                      (/home/strick/go/s):03868         
                      (/home/strick/go/s):03869         * Draw a graphic font to multi color windows
                      (/home/strick/go/s):03870         * May want to change so E/F contains the byte from the font/screen mem to use
                      (/home/strick/go/s):03871         *   register to register AND/OR, etc.
12ED 3410             (/home/strick/go/s):03872         L106D    pshs  x            save font address
12EF CC534A           (/home/strick/go/s):03873                  ldd   #GrfStrt+L10CF  Point to default graphic plot routine
12F2 DD10             (/home/strick/go/s):03874                  std   <$0010       Save vector
                      (/home/strick/go/s):03875                  IFNE  H6309
                      (/home/strick/go/s):03876                  tim   #Prop,<$E    Proportional spacing?
                      (/home/strick/go/s):03877                  ELSE
12F4 960E             (/home/strick/go/s):03878                  lda   <$E          no need to preserve regA
12F6 8510             (/home/strick/go/s):03879                  bita  #Prop
                      (/home/strick/go/s):03880                  ENDC
12F8 2723             (/home/strick/go/s):03881                  beq   L10A4        no, skip finding font size
                      (/home/strick/go/s):03882         * Calc positioning for proportional spacing
12FA D671             (/home/strick/go/s):03883                  ldb   <$0071       Get Y pixel count
12FC 5A               (/home/strick/go/s):03884                  decb               dec by 1 (0-7?)
12FD 4F               (/home/strick/go/s):03885                  clra               Clear out byte for mask checking
                      (/home/strick/go/s):03886         * This goes through all 8 bytes of a font character, ORing them into A
                      (/home/strick/go/s):03887         * The resultant byte on completion of the loop has all bits set that will be
12FE AA85             (/home/strick/go/s):03888         L1080    ora   b,x          Mask in byte from font
1300 5A               (/home/strick/go/s):03889                  decb               Dec counter (& position in font)
1301 2AFB             (/home/strick/go/s):03890                  bpl   L1080        Still more to check, continue
1303 4D               (/home/strick/go/s):03891                  tsta               Check byte still clear?
1304 2604             (/home/strick/go/s):03892                  bne   L108E        No, skip ahead (B=$ff at this point)
1306 046F             (/home/strick/go/s):03893                  lsr   <$006F       Divide X pixel count by 2 if it is
1308 2013             (/home/strick/go/s):03894                  bra   L10A4        Start printing with normal vector
                      (/home/strick/go/s):03895         
                      (/home/strick/go/s):03896         * Non-blank char
130A 5A               (/home/strick/go/s):03897         L108E    decb               dec B (# active pixels counter)
130B 48               (/home/strick/go/s):03898                  lsla               Shift merged pixel mask byte left 1 bit
130C 24FC             (/home/strick/go/s):03899                  bcc   L108E        Pixel is unused in font char, keep looking
                      (/home/strick/go/s):03900         * Found pixel that will be needed, set up vector to shift char to be flush
                      (/home/strick/go/s):03901         * left
                      (/home/strick/go/s):03902         * Should move this table so that ABX can be used instead (move table to before
                      (/home/strick/go/s):03903         *   shift routines
130E 8E534C           (/home/strick/go/s):03904                  ldx   #GrfStrt+L10CF+2 Point to shifting gfx text plot routine
1311 3085             (/home/strick/go/s):03905                  leax  b,x
1313 9F10             (/home/strick/go/s):03906                  stx   <$0010       Save the vector
                      (/home/strick/go/s):03907         * Count # pixels that will be active
1315 C601             (/home/strick/go/s):03908                  ldb   #$01         Set up counter for #pixels to print (min.=2)
1317 5C               (/home/strick/go/s):03909         L109E    incb               Inc counter
1318 48               (/home/strick/go/s):03910                  lsla               Shift out merged pixel mask byte  
1319 25FC             (/home/strick/go/s):03911                  bcs   L109E        Until we either hit blank or run out
131B D76F             (/home/strick/go/s):03912                  stb   <$006F       Save # pixels to print in X pixel count
                      (/home/strick/go/s):03913         
                      (/home/strick/go/s):03914         * Main printing starts here - sets up for outside loop (at L10BB)
131D E63D             (/home/strick/go/s):03915         L10A4    ldb   Wt.FMsk,y    Get start pixel mask (may be into byte for prop.)
131F D70F             (/home/strick/go/s):03916                  stb   <$000F       Save in GrfDrv mem
1321 AE3B             (/home/strick/go/s):03917                  ldx   Wt.Cur,y     get address of cursor in screen mem
1323 3520             (/home/strick/go/s):03918                  puls  y            Get font address
1325 9671             (/home/strick/go/s):03919                  lda   <$0071       Get # bytes high char is
1327 4A               (/home/strick/go/s):03920                  deca               bump down by 1 (base 0)
1328 9799             (/home/strick/go/s):03921                  sta   <$0099       Save in temp (as counter)
132A 9F0C             (/home/strick/go/s):03922                  stx   <$000C       Save cursor address
132C 170FA3           (/home/strick/go/s):03923                  lbsr  L1EF1        Set up mask & vector to bit shift routine
132F 9E0C             (/home/strick/go/s):03924                  ldx   <$000C       Get cursor address
                      (/home/strick/go/s):03925         * Outside loop for Gfx font - A is byte of 2 color font data we are currently
                      (/home/strick/go/s):03926         * doing
1331 A6A0             (/home/strick/go/s):03927         L10BB    lda   ,y+          Get line of font data
                      (/home/strick/go/s):03928                  IFNE  H6309
                      (/home/strick/go/s):03929                  tim   #$20,<$E     Bold text?
                      (/home/strick/go/s):03930                  ELSE
1333 3402             (/home/strick/go/s):03931                  pshs  a
1335 960E             (/home/strick/go/s):03932                  lda   <$E 
1337 8520             (/home/strick/go/s):03933                  bita  #$20
1339 3502             (/home/strick/go/s):03934                  puls  a
                      (/home/strick/go/s):03935                  ENDC
133B 2703             (/home/strick/go/s):03936                  beq   L10C6        No, skip doubling up pixels
133D 44               (/home/strick/go/s):03937                  lsra               shift it right 1
133E AA3F             (/home/strick/go/s):03938                  ora   -1,y         merge with original to double up pixels
1340 6E9F1110         (/home/strick/go/s):03939         L10C6    jmp   [>GrfMem+gr0010]     Flush left the font data in byte
                      (/home/strick/go/s):03940         
                      (/home/strick/go/s):03941         * Bit shift offsets for proportional fonts
                      (/home/strick/go/s):03942         * Outside loop: A=byte from font data in 2 color format
                      (/home/strick/go/s):03943         * Will take byte of font data in A and make it flush left
1344 48               (/home/strick/go/s):03944         L10C9    lsla
1345 48               (/home/strick/go/s):03945         L10CA    lsla
1346 48               (/home/strick/go/s):03946         L10CB    lsla
1347 48               (/home/strick/go/s):03947         L10CC    lsla
1348 48               (/home/strick/go/s):03948         L10CD    lsla
1349 48               (/home/strick/go/s):03949         L10CE    lsla
                      (/home/strick/go/s):03950         * Entry point for non-proportional fonts - byte already flush left (6 or 8)
134A 970B             (/home/strick/go/s):03951         L10CF    sta   <$000B       Save flush left font byte, 1 bit/pixel
                      (/home/strick/go/s):03952                  IFNE  H6309
                      (/home/strick/go/s):03953                  lde   <$006F       get X width of font char in pixels
                      (/home/strick/go/s):03954                  ELSE
134C D66F             (/home/strick/go/s):03955                  ldb   <$6F
134E D7B5             (/home/strick/go/s):03956                  stb   <$B5
                      (/home/strick/go/s):03957                  ENDC
1350 D60F             (/home/strick/go/s):03958                  ldb   <$000F       Get bit mask for start pixel on screen
                      (/home/strick/go/s):03959         * NOTE: SHOULD TRY TO BUILD A WHOLE BYTE'S WORTH OF PIXELS INTO B TO PUT AS
                      (/home/strick/go/s):03960         * MANY PIXELS ONTO SCREEN AT ONCE - NEED TO KNOW HOW MANY PIXELS LEFT IN BYTE
                      (/home/strick/go/s):03961         * FROM START THOUGH (COULD USE F AS COUNTER)
1352 3404             (/home/strick/go/s):03962                  pshs  b            Save pixel mask on stack
1354 9F0C             (/home/strick/go/s):03963                  stx   <$000C       save screen address
1356 6EC4             (/home/strick/go/s):03964                  jmp   ,u           Put it on screen (calls 10DF or 10FA only)
                      (/home/strick/go/s):03965         
                      (/home/strick/go/s):03966         * Print line of font char onto screen
                      (/home/strick/go/s):03967         * Inside loop: does 1 pixel at a time from font byte (stored in $000B)
1358 080B             (/home/strick/go/s):03968         L10DF    lsl   <$000B       Shift pixel into carry from font byte
135A 250E             (/home/strick/go/s):03969                  bcs   L10EB        Pixel is set, put it on screen in foregrnd color
135C 960E             (/home/strick/go/s):03970                  lda   <$000E       Pixel is not used, transparent characters?
135E 2A19             (/home/strick/go/s):03971                  bpl   L10FE        No, skip this pixel entirely
1360 9662             (/home/strick/go/s):03972                  lda   <$0062       Transparent, get bckgrnd color full byte bit mast
1362 2008             (/home/strick/go/s):03973                  bra   L10ED        Go put it on screen
                      (/home/strick/go/s):03974         
                      (/home/strick/go/s):03975         * Used by Update Window Cursor updates (Inverse for cursor)
1364 E884             (/home/strick/go/s):03976         L10FA    eorb  ,x           Invert data on screen with bit data
1366 E784             (/home/strick/go/s):03977                  stb   ,x           Save it on screen (Invert for cursor)
1368 200F             (/home/strick/go/s):03978                  bra   L10FE        Check if we have more to do
                      (/home/strick/go/s):03979         
136A 9661             (/home/strick/go/s):03980         L10EB    lda   <$0061       get foreground color full byte bit mask
                      (/home/strick/go/s):03981         * Entry: B=Current pixel mask
                      (/home/strick/go/s):03982         *        A=Color mask (can be fore or background)
     136C             (/home/strick/go/s):03983         L10ED    equ   *
                      (/home/strick/go/s):03984                  IFNE  H6309
                      (/home/strick/go/s):03985                  andr  b,a          Keep only color data we can use
                      (/home/strick/go/s):03986                  ELSE
136C 3404             (/home/strick/go/s):03987                  pshs  b
136E A4E0             (/home/strick/go/s):03988                  anda  ,s+
                      (/home/strick/go/s):03989                  ENDC
1370 53               (/home/strick/go/s):03990                  comb               Make 'hole' with font data
1371 E484             (/home/strick/go/s):03991                  andb  ,x            & screen data
                      (/home/strick/go/s):03992                  IFNE  H6309
                      (/home/strick/go/s):03993                  orr   b,a          Merge font color onto existing screen byte
                      (/home/strick/go/s):03994                  ELSE
1373 3404             (/home/strick/go/s):03995                  pshs  b
1375 AAE0             (/home/strick/go/s):03996                  ora   ,s+
                      (/home/strick/go/s):03997                  ENDC
1377 A784             (/home/strick/go/s):03998                  sta   ,x           Save result onto screen
                      (/home/strick/go/s):03999         
     1379             (/home/strick/go/s):04000         L10FE    equ   *
                      (/home/strick/go/s):04001                  IFNE  H6309
                      (/home/strick/go/s):04002                  dece               Dec # pixels left on current font line
                      (/home/strick/go/s):04003                  ELSE
1379 0AB5             (/home/strick/go/s):04004                  dec   <$B5
                      (/home/strick/go/s):04005                  ENDC
137B 3504             (/home/strick/go/s):04006                  puls  b            Get current pixel mask again
137D 2707             (/home/strick/go/s):04007                  beq   L1109        Done current line, skip ahead
137F 1706FD           (/home/strick/go/s):04008                  lbsr  L1F0E        Move to next pixel position
1382 3404             (/home/strick/go/s):04009                  pshs  b            Save new pixel mask on stack
1384 6EC4             (/home/strick/go/s):04010                  jmp   ,u           Put it on screen (calls 10DF or 10FA only)
                      (/home/strick/go/s):04011         * End of inside loop (each pixel within font byte)
                      (/home/strick/go/s):04012         
1386 9E0C             (/home/strick/go/s):04013         L1109    ldx   <$000C       get start of char. screen address again
1388 D663             (/home/strick/go/s):04014                  ldb   <$0063       Get # bytes per row on screen
138A 3A               (/home/strick/go/s):04015                  abx                Point to next line on screen
138B 0A99             (/home/strick/go/s):04016                  dec   <$0099       Are we done whole char (or on last line)?
138D 2EA2             (/home/strick/go/s):04017                  bgt   L10BB        No, continue drawing char
138F 2B0A             (/home/strick/go/s):04018                  bmi   L1120        Totally done, exit
                      (/home/strick/go/s):04019         * on last line ($99=0)
                      (/home/strick/go/s):04020                  IFNE  H6309
                      (/home/strick/go/s):04021                  tim   #Under,<$0E  Underline requested?
                      (/home/strick/go/s):04022                  ELSE
1391 960E             (/home/strick/go/s):04023                  lda   <$0E 
1393 8540             (/home/strick/go/s):04024                  bita  #Under
                      (/home/strick/go/s):04025                  ENDC
1395 279A             (/home/strick/go/s):04026                  beq   L10BB        No, go draw last line
1397 86FF             (/home/strick/go/s):04027                  lda   #$FF         Underline code
1399 20AF             (/home/strick/go/s):04028                  bra   L10CF        Go draw it
                      (/home/strick/go/s):04029         * End of outside loop (for each line with font)
                      (/home/strick/go/s):04030         
139B 39               (/home/strick/go/s):04031         L1120    rts                Return
                      (/home/strick/go/s):04032         
                      (/home/strick/go/s):04033         * 2 color mode pixel mask table
139C 07               (/home/strick/go/s):04034         L1EE0    fcb   $07          Mask for pixel #'s we care about
139D 8040201008040201 (/home/strick/go/s):04035                  fcb   $80,$40,$20,$10,$08,$04,$02,$01
                      (/home/strick/go/s):04036         
                      (/home/strick/go/s):04037         * 4 color mode pixel mask table
13A5 03               (/home/strick/go/s):04038         L1EE9    fcb   $03          Mask for pixel #'s we care about
13A6 C0300C03         (/home/strick/go/s):04039                  fcb   $c0,$30,$0c,$03
                      (/home/strick/go/s):04040         
                      (/home/strick/go/s):04041         * 16 color mode pixel mask table
13AA 01               (/home/strick/go/s):04042         L1EEE    fcb   $01          Mask for pixel #'s we care about
13AB F00F             (/home/strick/go/s):04043                  fcb   $f0,$0f
                      (/home/strick/go/s):04044         
                      (/home/strick/go/s):04045         * Goto X/Y entry point
13AD 17FE47           (/home/strick/go/s):04046         L1186    lbsr  L0FFF          Set up font sizes (and font if on gfx screen)
13B0 D647             (/home/strick/go/s):04047                  ldb   <$0047         Get X coord
13B2 C020             (/home/strick/go/s):04048                  subb  #$20           Kill off ASCII part of it
13B4 966F             (/home/strick/go/s):04049                  lda   <$006F         Get # pixels wide each text char is
13B6 3D               (/home/strick/go/s):04050                  mul                  Calculate # pixels into screen to start at
13B7 DD47             (/home/strick/go/s):04051                  std   <$0047         Preserve Start pixel # as 'working' X coord
13B9 D36E             (/home/strick/go/s):04052                  addd  <$006E         Add width in pixels again (calculate end X coord)
                      (/home/strick/go/s):04053                  IFNE  H6309
                      (/home/strick/go/s):04054                  decd                 Adjust
                      (/home/strick/go/s):04055                  ELSE
13BB 830001           (/home/strick/go/s):04056                  subd  #1
                      (/home/strick/go/s):04057                  ENDC
13BE 10A3A81B         (/home/strick/go/s):04058                  cmpd  Wt.MaxX,y      Would we be past end of window?
13C2 2220             (/home/strick/go/s):04059                  bhi   L11CA          Yes, exit out of grfdrv
13C4 D649             (/home/strick/go/s):04060                  ldb   <$0049         Get Y coord
13C6 C020             (/home/strick/go/s):04061                  subb  #$20           Kill off ASCII part of it
13C8 9671             (/home/strick/go/s):04062                  lda   <$0071         Get Y size of font in bytes
13CA 3D               (/home/strick/go/s):04063                  mul                  Calculate # bytes from top of screen to start at
13CB DD49             (/home/strick/go/s):04064                  std   <$0049         Save it
13CD D370             (/home/strick/go/s):04065                  addd  <$0070         Bump down by 1 more text char Y size
                      (/home/strick/go/s):04066                  IFNE  H6309
                      (/home/strick/go/s):04067                  decd                 Adjust
                      (/home/strick/go/s):04068                  ELSE
13CF 830001           (/home/strick/go/s):04069                  subd  #1
                      (/home/strick/go/s):04070                  ENDC
13D2 10A3A81D         (/home/strick/go/s):04071                  cmpd  Wt.MaxY,y      Would end of char go past bottom of window?
13D6 220C             (/home/strick/go/s):04072                  bhi   L11CA          Yes, exit out of grfdrv
                      (/home/strick/go/s):04073                  IFNE  H6309
                      (/home/strick/go/s):04074                  ldq   <$0047         Get x & y coords
                      (/home/strick/go/s):04075                  stq   Wt.CurX,y      Move into window table (-2 to +1)
                      (/home/strick/go/s):04076                  ELSE
13D8 DC49             (/home/strick/go/s):04077                  ldd   <$49
13DA EDA4             (/home/strick/go/s):04078                  std   Wt.CurX+2,y
13DC DDB5             (/home/strick/go/s):04079                  std   <$B5
13DE DC47             (/home/strick/go/s):04080                  ldd   <$47
13E0 ED3E             (/home/strick/go/s):04081                  std   Wt.CurX,y
                      (/home/strick/go/s):04082                  ENDC
13E2 8D7D             (/home/strick/go/s):04083                  bsr   NewEnt         Originally bsr L11D1 (redundant)
13E4 7E5176           (/home/strick/go/s):04084         L11CA    jmp   >GrfStrt+L0F78
                      (/home/strick/go/s):04085         
                      (/home/strick/go/s):04086         * Control code processer
                      (/home/strick/go/s):04087         * ATD: 69 bytes old method, 47 new method
13E7 17FE0D           (/home/strick/go/s):04088         L1129    lbsr  L0FFF         Set up font sizes (and font if on gfx screen)
13EA 4A               (/home/strick/go/s):04089                  deca               make 1-D = 0-C
13EB 2B0C             (/home/strick/go/s):04090                  bmi   L1130        if 0 or smaller, exit
13ED 810D             (/home/strick/go/s):04091                  cmpa  #$0D         too high? (now 0-C instead of 1-D)
13EF 2408             (/home/strick/go/s):04092                  bhs   L1130        yes, exit
                      (/home/strick/go/s):04093         
13F1 8E53FC           (/home/strick/go/s):04094                  ldx   #GrfStrt+T.1133  point to offset table to use
13F4 48               (/home/strick/go/s):04095                  asla               2 bytes per entry
13F5 EC86             (/home/strick/go/s):04096                  ldd   a,x          get pointer to routine
13F7 AD8B             (/home/strick/go/s):04097                  jsr   d,x          call it
13F9 7E5176           (/home/strick/go/s):04098         L1130    jmp   >GrfStrt+L0F78 return to CoWin: No errors
                      (/home/strick/go/s):04099         
13FC 006C             (/home/strick/go/s):04100         T.1133   fdb   L11E1-T.1133 1 home cursor
13FE FFFD             (/home/strick/go/s):04101                  fdb   L1130-T.1133 2   GOTO X,Y: handled elsewhere
1400 01C5             (/home/strick/go/s):04102                  fdb   L1352-T.1133 3 erase current line
1402 01D2             (/home/strick/go/s):04103                  fdb   L135F-T.1133 4 erase to end of line
1404 FFFD             (/home/strick/go/s):04104                  fdb   L1130-T.1133 5   cursor on/off: handled elsewhere
1406 00B1             (/home/strick/go/s):04105                  fdb   L121A-T.1133 6 cursor right
1408 FFFD             (/home/strick/go/s):04106                  fdb   L1130-T.1133 7   BELL: handled elsewhere
140A 0085             (/home/strick/go/s):04107                  fdb   L11F9-T.1133 8 cursor left
140C 00A6             (/home/strick/go/s):04108                  fdb   L122F-T.1133 9 cursor up
140E 00C4             (/home/strick/go/s):04109                  fdb   L123A-T.1133 A cursor down (LF)
1410 01FE             (/home/strick/go/s):04110                  fdb   L138D-T.1133 B erase to end of screen
1412 01EA             (/home/strick/go/s):04111                  fdb   L1377-T.1133 C clear screen
1414 0059             (/home/strick/go/s):04112                  fdb   L11CD-T.1133 D cursor to LHS of the screen (CR)
                      (/home/strick/go/s):04113         
                      (/home/strick/go/s):04114         * Calculate screen logical address based on X/Y text coordinates
                      (/home/strick/go/s):04115         * Exit: X=Screen logical address pointing to X,Y text coordinate location
                      (/home/strick/go/s):04116         *       If graphics screen, B=Mask for specific pixel
1416 AE33             (/home/strick/go/s):04117         L1E9D    ldx   Wt.LStrt,y   get screen logical start
                      (/home/strick/go/s):04118         * Calculate offset for Y location
1418 964A             (/home/strick/go/s):04119         L1E9F    lda   <$004A       get Y coordinate (0-199)
141A D663             (/home/strick/go/s):04120                  ldb   <$0063       get bytes/row
141C 3D               (/home/strick/go/s):04121                  mul                Calculate # bytes into screen to go
                      (/home/strick/go/s):04122                  IFNE  H6309
                      (/home/strick/go/s):04123                  addr  d,x          Add to screen start
                      (/home/strick/go/s):04124                  ELSE
141D 308B             (/home/strick/go/s):04125                  leax  d,x
                      (/home/strick/go/s):04126                  ENDC
141F D660             (/home/strick/go/s):04127                  ldb   <$0060       get screen type
1421 2A05             (/home/strick/go/s):04128                  bpl   L1EB5        graphics screen, go adjust X coordinate
                      (/home/strick/go/s):04129         * Calculate offset for X location (text only)
1423 D648             (/home/strick/go/s):04130                  ldb   <$0048       Get X coordinate
1425 58               (/home/strick/go/s):04131                  lslb               account for attribute byte
1426 3A               (/home/strick/go/s):04132                  abx                point X to screen location & return
1427 39               (/home/strick/go/s):04133                  rts
                      (/home/strick/go/s):04134         
                      (/home/strick/go/s):04135         * Calculate offset for X location (gfx only)
                      (/home/strick/go/s):04136         * Fast horizontal and vertical lines call this after doing a LDW <$68 (LSET)
1428 3440             (/home/strick/go/s):04137         L1EB5    pshs  u            Preserve U
142A C104             (/home/strick/go/s):04138                  cmpb  #$04
142C 2607             (/home/strick/go/s):04139                  bne   L1EC0
                      (/home/strick/go/s):04140         * 16 color screens (2 pixels/byte)
142E DC47             (/home/strick/go/s):04141                  ldd   <$0047       get requested X coordinate
1430 CE53AA           (/home/strick/go/s):04142                  ldu   #GrfStrt+L1EEE  Point to 2 pixel/byte tables
1433 2014             (/home/strick/go/s):04143                  bra   L1ED4        Adjust screen address accordingly
                      (/home/strick/go/s):04144         
1435 C101             (/home/strick/go/s):04145         L1EC0    cmpb  #$01         640 2 color screen?
1437 2707             (/home/strick/go/s):04146                  beq   L1ECB        Yes, go process it
                      (/home/strick/go/s):04147         * 4 color screens go here (4 pixels/byte)
1439 DC47             (/home/strick/go/s):04148                  ldd   <$0047       Get requested X coordinate
143B CE53A5           (/home/strick/go/s):04149                  ldu   #GrfStrt+L1EE9  Point to 4 pixel/byte tables
143E 2007             (/home/strick/go/s):04150                  bra   L1ED2        Adjust Screen address accordingly
                      (/home/strick/go/s):04151         * 2 color screens go here (8 pixels/byte)
1440 DC47             (/home/strick/go/s):04152         L1ECB    ldd   <$0047       Get requested X coordinate
1442 CE539C           (/home/strick/go/s):04153                  ldu   #GrfStrt+L1EE0  Point to 8 pixel/byte tables
                      (/home/strick/go/s):04154                  IFNE  H6309
                      (/home/strick/go/s):04155                  lsrd               Divide by 8 for byte address
1445                  (/home/strick/go/s):04156         L1ED2    lsrd               divide by 4
1445                  (/home/strick/go/s):04157         L1ED4    lsrd               divide coordinate by 2 (to get Byte offest)
                      (/home/strick/go/s):04158                  addr  d,x          Point X to byte offset for pixel
                      (/home/strick/go/s):04159                  ELSE
1445 44               (/home/strick/go/s):04160                  lsra
1446 56               (/home/strick/go/s):04161                  rorb
1447 44               (/home/strick/go/s):04162         L1ED2    lsra
1448 56               (/home/strick/go/s):04163                  rorb
1449 44               (/home/strick/go/s):04164         L1ED4    lsra
144A 56               (/home/strick/go/s):04165                  rorb
144B 308B             (/home/strick/go/s):04166                  leax  d,x
                      (/home/strick/go/s):04167                  ENDC
144D D648             (/home/strick/go/s):04168                  ldb   <$0048       Get LSB of X coordinate requested
144F E4C0             (/home/strick/go/s):04169                  andb  ,u+          Mask out all but pixels we need to address
1451 E6C5             (/home/strick/go/s):04170                  ldb   b,u          Get mask for specific pixel we need
1453 35C0             (/home/strick/go/s):04171                  puls  pc,u         Restore Y & exit
                      (/home/strick/go/s):04172         
                      (/home/strick/go/s):04173         * Cursor to left margin (CR)
     1455             (/home/strick/go/s):04174         L11CD    equ   *
                      (/home/strick/go/s):04175                  IFNE  H6309
                      (/home/strick/go/s):04176                  clrd                 Set X coordinate to 0
                      (/home/strick/go/s):04177                  ELSE
1455 4F               (/home/strick/go/s):04178                  clra
1456 5F               (/home/strick/go/s):04179                  clrb
                      (/home/strick/go/s):04180                  ENDC
1457 ED3E             (/home/strick/go/s):04181                  std   Wt.CurX,y
     1459             (/home/strick/go/s):04182         L11D1    equ   *
                      (/home/strick/go/s):04183                  IFNE  H6309
                      (/home/strick/go/s):04184                  ldq   Wt.CurX,y      Copy window table x,y coord to grfdrv x,y
                      (/home/strick/go/s):04185                  stq   <$0047
                      (/home/strick/go/s):04186                  ELSE
1459 ECA4             (/home/strick/go/s):04187                  ldd   Wt.CurX+2,y
145B DD49             (/home/strick/go/s):04188                  std   <$49
145D EC3E             (/home/strick/go/s):04189                  ldd   Wt.CurX,y
145F DD47             (/home/strick/go/s):04190                  std   <$47
                      (/home/strick/go/s):04191                  ENDC
1461 8DB3             (/home/strick/go/s):04192         NewEnt   bsr   L1E9D          Go calculate screen logical address
1463 AF3B             (/home/strick/go/s):04193                  stx   Wt.Cur,y       Preserve screen location
1465 E73D             (/home/strick/go/s):04194                  stb   Wt.FMsk,y      Preserve x coord (adjusted by x2 for text attr
1467 39               (/home/strick/go/s):04195                  rts                    if needed)
                      (/home/strick/go/s):04196         
                      (/home/strick/go/s):04197         * Home cursor
1468 EC33             (/home/strick/go/s):04198         L11E1    ldd   Wt.LStrt,y  Make cursor address same as upper left of screen
146A ED3B             (/home/strick/go/s):04199                  std   Wt.Cur,y
146C 8E62DE           (/home/strick/go/s):04200                  ldx   #GrfStrt+L1F00-2  Point to bit mask/vector table
146F D660             (/home/strick/go/s):04201                  ldb   <$0060      Get screen type
1471 2B05             (/home/strick/go/s):04202                  bmi   L11F8       If text, exit
1473 58               (/home/strick/go/s):04203                  lslb              Multiply x2 to get table entry
1474 E685             (/home/strick/go/s):04204                  ldb   b,x         Get bit mask
1476 E73D             (/home/strick/go/s):04205                  stb   Wt.FMsk,y   Preserve it
     1478             (/home/strick/go/s):04206         L11F8    equ   *
                      (/home/strick/go/s):04207                  IFNE  H6309
                      (/home/strick/go/s):04208                  clrd              Clear out x & y coord's in window table
                      (/home/strick/go/s):04209                  clrw
                      (/home/strick/go/s):04210                  stq   Wt.CurX,y
                      (/home/strick/go/s):04211                  ELSE
1478 4F               (/home/strick/go/s):04212                  clra
1479 5F               (/home/strick/go/s):04213                  clrb
147A DDB5             (/home/strick/go/s):04214                  std   <$B5
147C ED3E             (/home/strick/go/s):04215                  std   Wt.CurX,y
147E EDA4             (/home/strick/go/s):04216                  std   Wt.CurX+2,y
                      (/home/strick/go/s):04217                  ENDC
1480 39               (/home/strick/go/s):04218                  rts   
                      (/home/strick/go/s):04219         
                      (/home/strick/go/s):04220         * Cursor left
1481 EC3E             (/home/strick/go/s):04221         L11F9    ldd   Wt.CurX,y
1483 936E             (/home/strick/go/s):04222                  subd  <$006E      Subtract X pixel count
1485 ED3E             (/home/strick/go/s):04223                  std   Wt.CurX,y
1487 2AD0             (/home/strick/go/s):04224                  bpl   L11D1       Didn't wrap into negative, leave
1489 ECA81B           (/home/strick/go/s):04225                  ldd   Wt.MaxX,y   Get Max X coordinate
148C 936E             (/home/strick/go/s):04226                  subd  <$006E      subtract X pixel count
                      (/home/strick/go/s):04227                  IFNE  H6309
                      (/home/strick/go/s):04228                  incd              Bump up by 1
                      (/home/strick/go/s):04229                  ELSE
148E C30001           (/home/strick/go/s):04230                  addd  #1
                      (/home/strick/go/s):04231                  ENDC
1491 ED3E             (/home/strick/go/s):04232                  std   Wt.CurX,y   Save new X coordinate
1493 ECA4             (/home/strick/go/s):04233                  ldd   ,y          Get Y coordinate
1495 9370             (/home/strick/go/s):04234                  subd  <$0070      Subtract Y pixel count
1497 EDA4             (/home/strick/go/s):04235                  std   Wt.CurY,y   Save updated Y coordinate
1499 2ABE             (/home/strick/go/s):04236                  bpl   L11D1       Didn't wrap into negative, leave
                      (/home/strick/go/s):04237                  IFNE  H6309
                      (/home/strick/go/s):04238                  clrd              Set coordinates to 0,0
                      (/home/strick/go/s):04239                  ELSE
149B 4F               (/home/strick/go/s):04240                  clra
149C 5F               (/home/strick/go/s):04241                  clrb
                      (/home/strick/go/s):04242                  ENDC
149D ED3E             (/home/strick/go/s):04243                  std   Wt.CurX,y   Save X coordinate
149F EDA4             (/home/strick/go/s):04244                  std   Wt.CurY,y   Save Y coordinate
14A1 39               (/home/strick/go/s):04245                  rts   
                      (/home/strick/go/s):04246         
                      (/home/strick/go/s):04247         * Cursor Up
14A2 ECA4             (/home/strick/go/s):04248         L122F    ldd   Wt.CurY,y     Get Y coordinate
14A4 9370             (/home/strick/go/s):04249                  subd  <$0070        Subtract Y pixel size
14A6 2A01             (/home/strick/go/s):04250                  bpl   GoodUp        If not at top, save coordinate
14A8 39               (/home/strick/go/s):04251                  rts                 Otherwise, exit
14A9 EDA4             (/home/strick/go/s):04252         GoodUp   std   Wt.CurY,y     Save new Y coordinate
14AB 20AC             (/home/strick/go/s):04253                  bra   L11D1         Leave
                      (/home/strick/go/s):04254         
                      (/home/strick/go/s):04255         * Cursor right
14AD EC3E             (/home/strick/go/s):04256         L121A    ldd   Wt.CurX,y     Get X coordinate
14AF D36E             (/home/strick/go/s):04257                  addd  <$006E        Add to X pixel count (1, 6 or 8?)
14B1 ED3E             (/home/strick/go/s):04258                  std   Wt.CurX,y     Update value
14B3 D36E             (/home/strick/go/s):04259                  addd  <$006E        Add to X pixel count again
                      (/home/strick/go/s):04260                  IFNE  H6309
                      (/home/strick/go/s):04261                  decd                Dec by 1
                      (/home/strick/go/s):04262                  ELSE
14B5 830001           (/home/strick/go/s):04263                  subd  #1
                      (/home/strick/go/s):04264                  ENDC
14B8 10A3A81B         (/home/strick/go/s):04265                  cmpd  Wt.MaxX,y     Compare with maximum X coordinate
14BC 239B             (/home/strick/go/s):04266                  bls   L11D1         If not past right hand side, leave
14BE 8D95             (/home/strick/go/s):04267         L1238    bsr   L11CD         Zero out X coordinate
                      (/home/strick/go/s):04268         
                      (/home/strick/go/s):04269         * Cursor Down (LF)
                      (/home/strick/go/s):04270         * Called by font change. Entry= Y=window table ptr, X=Screen addr, B=X coord
                      (/home/strick/go/s):04271         * on current line on physical screen
14C0 ECA4             (/home/strick/go/s):04272         L123A    ldd   Wt.CurY,y     Get current Y coord
14C2 D370             (/home/strick/go/s):04273                  addd  <$0070        Add to Y pixel count
14C4 1F01             (/home/strick/go/s):04274                  tfr   d,x           Move result to X
14C6 D370             (/home/strick/go/s):04275                  addd  <$0070        Add Y pixel count again
                      (/home/strick/go/s):04276                  IFNE  H6309
                      (/home/strick/go/s):04277                  decd                decrement by 1
                      (/home/strick/go/s):04278                  ELSE
14C8 830001           (/home/strick/go/s):04279                  subd  #1
                      (/home/strick/go/s):04280                  ENDC
14CB 10A3A81D         (/home/strick/go/s):04281                  cmpd  Wt.MaxY,y     compare with Maximum Y coordinate
14CF 2204             (/home/strick/go/s):04282                  bhi   L124F         If higher (scroll needed), skip ahead
14D1 AFA4             (/home/strick/go/s):04283                  stx   Wt.CurY,y     Store +1 Y coordinate
14D3 2084             (/home/strick/go/s):04284                  bra   L11D1         Update grfdrv's X&Y ptrs & leave
                      (/home/strick/go/s):04285         
                      (/home/strick/go/s):04286         * new Y coord+1 is >bottom of window goes here
14D5 3420             (/home/strick/go/s):04287         L124F    pshs  y             Preserve window table ptr
14D7 E622             (/home/strick/go/s):04288                  ldb   Wt.XBCnt,y    Get width of window in bytes
14D9 D797             (/home/strick/go/s):04289                  stb   <$0097        Save since Y will disappear
14DB 4F               (/home/strick/go/s):04290                  clra                Clear MSB of D
14DC D663             (/home/strick/go/s):04291                  ldb   <$0063        Get # bytes per row of screen
14DE DD99             (/home/strick/go/s):04292                  std   <$0099        preserve value (16 bit for proper ADDR)
14E0 ECA4             (/home/strick/go/s):04293                  ldd   Wt.CurY,y     Get current Y coord
14E2 DD9D             (/home/strick/go/s):04294                  std   <$009D        Preserve
14E4 A638             (/home/strick/go/s):04295                  lda   Wt.SZY,y      Get current Y size
14E6 4A               (/home/strick/go/s):04296                  deca                0 base
14E7 979B             (/home/strick/go/s):04297                  sta   <$009B        Preserve
14E9 2761             (/home/strick/go/s):04298                  beq   L128A         If window only 1 line high, then no scroll needed
14EB AE33             (/home/strick/go/s):04299                  ldx   Wt.LStrt,y    Get screen logical start addr. (top of screen)
14ED EC24             (/home/strick/go/s):04300                  ldd   Wt.BRow,y     Get # bytes/text row (8 pixel lines if gfx)
14EF 1F12             (/home/strick/go/s):04301                  tfr   x,y           Move screen start addr. to Y
                      (/home/strick/go/s):04302                  IFNE  H6309
                      (/home/strick/go/s):04303                  addr  d,x           X=Screen addr+1 text line
                      (/home/strick/go/s):04304                  ELSE
14F1 308B             (/home/strick/go/s):04305                  leax  d,x
                      (/home/strick/go/s):04306                  ENDC
14F3 969B             (/home/strick/go/s):04307                  lda   <$009B        Get Y size (0 base)
14F5 D660             (/home/strick/go/s):04308                  ldb   <$0060        Check screen type
14F7 2B05             (/home/strick/go/s):04309                  bmi   L1267         If text, skip ahead
14F9 48               (/home/strick/go/s):04310                  lsla                Multiply by 8 (# pixel lines/text line)
14FA 48               (/home/strick/go/s):04311                  lsla  
14FB 48               (/home/strick/go/s):04312                  lsla  
14FC 979B             (/home/strick/go/s):04313                  sta   <$009B        Y size into # pixel lines, not text lines
                      (/home/strick/go/s):04314         * Special check for full width windows
14FE D697             (/home/strick/go/s):04315         L1267    ldb   <$97          Get width of window in bytes
1500 D163             (/home/strick/go/s):04316                  cmpb  <$63          Same as screen width?
1502 2612             (/home/strick/go/s):04317                  bne   L127B         No, do normal scroll
1504 3D               (/home/strick/go/s):04318         L1267a   mul                 Calculate size of entire window to move
                      (/home/strick/go/s):04319         * Scroll entire window in one shot since full width of screen
                      (/home/strick/go/s):04320                  IFNE  H6309
                      (/home/strick/go/s):04321                  tfr   d,w           Move to TFM size reg.
                      (/home/strick/go/s):04322                  tfm   x+,y+         Move screen
                      (/home/strick/go/s):04323                  ELSE
                      (/home/strick/go/s):04324         * Note, the following code will work as long as D is an even number...
                      (/home/strick/go/s):04325         * Which it should be since all screen widths are even numbers (80, 40, etc)
1505 3440             (/home/strick/go/s):04326                  pshs  u
1507 1F13             (/home/strick/go/s):04327                  tfr   x,u
1509 3710             (/home/strick/go/s):04328         L1267b   pulu  x
150B AFA1             (/home/strick/go/s):04329                  stx   ,y++
150D 830002           (/home/strick/go/s):04330                  subd  #$0002
1510 2EF7             (/home/strick/go/s):04331                  bgt   L1267b
1512 3540             (/home/strick/go/s):04332                  puls  u
                      (/home/strick/go/s):04333                  ENDC
1514 2036             (/home/strick/go/s):04334                  bra   L128A         Exit scroll routine
                      (/home/strick/go/s):04335         
                      (/home/strick/go/s):04336         * Scroll window that is not full width of screen
     1516             (/home/strick/go/s):04337         L127B    equ   *
                      (/home/strick/go/s):04338                  IFNE  H6309
                      (/home/strick/go/s):04339                  ldd   <$0099        Get # bytes/row for screen
                      (/home/strick/go/s):04340                  ldf   <$0097        Get # bytes wide window is
                      (/home/strick/go/s):04341                  clre
                      (/home/strick/go/s):04342                  subr  w,d           Calc # bytes to next line
1516                  (/home/strick/go/s):04343         L127E    tfm   x+,y+         Block move the line
                      (/home/strick/go/s):04344                  ELSE
1516 DC99             (/home/strick/go/s):04345                  ldd   <$0099        Get # bytes/row for screen
1518 3406             (/home/strick/go/s):04346                  pshs  d
151A 4F               (/home/strick/go/s):04347                  clra
151B D697             (/home/strick/go/s):04348                  ldb   <$97
151D DDB5             (/home/strick/go/s):04349                  std   <$B5         regW loaded 
151F 3506             (/home/strick/go/s):04350                  puls  d 
1521 93B5             (/home/strick/go/s):04351                  subd  <$B5         subr w,d
1523 3456             (/home/strick/go/s):04352         L127E    pshs  d,x,u
1525 D6B6             (/home/strick/go/s):04353                  ldb   <$B6         get regW
1527 4F               (/home/strick/go/s):04354                  clra
1528 1F13             (/home/strick/go/s):04355                  tfr   x,u
152A 1F01             (/home/strick/go/s):04356                  tfr   d,x
152C A6C0             (/home/strick/go/s):04357         L127Eb   lda   ,u+
152E A7A0             (/home/strick/go/s):04358                  sta   ,y+
1530 301F             (/home/strick/go/s):04359                  leax  -1,x
1532 26F8             (/home/strick/go/s):04360                  bne   L127Eb
1534 9FB5             (/home/strick/go/s):04361                  stx   <$B5
1536 EF62             (/home/strick/go/s):04362                  stu   2,s
1538 3556             (/home/strick/go/s):04363                  puls  d,x,u
                      (/home/strick/go/s):04364                  ENDC
153A 0A9B             (/home/strick/go/s):04365                  dec   <$009B        Dec # lines to still copy
153C 270E             (/home/strick/go/s):04366                  beq   L128A         If done, exit
                      (/home/strick/go/s):04367                  IFNE  H6309
                      (/home/strick/go/s):04368                  addr  d,x           Bump start ptr by 1 line
                      (/home/strick/go/s):04369                  addr  d,y           Bump end ptr by 1 line
                      (/home/strick/go/s):04370                  ldf   <$0097        Get width of window in bytes
                      (/home/strick/go/s):04371                  ELSE
153E 308B             (/home/strick/go/s):04372                  leax  d,x
1540 31AB             (/home/strick/go/s):04373                  leay  d,y
1542 3404             (/home/strick/go/s):04374                  pshs  b
1544 D697             (/home/strick/go/s):04375                  ldb   <$97
1546 D7B6             (/home/strick/go/s):04376                  stb   <$B6
1548 3504             (/home/strick/go/s):04377                  puls  b
                      (/home/strick/go/s):04378                  ENDC
154A 20D7             (/home/strick/go/s):04379                  bra   L127E         Do until we have moved all the lines
                      (/home/strick/go/s):04380         
154C 3520             (/home/strick/go/s):04381         L128A    puls  y             Get back window table ptr
154E DC9D             (/home/strick/go/s):04382         L128C    ldd   <$009D        Get back current Y coord
1550 2071             (/home/strick/go/s):04383         L128E    bra   L1354         Go clear new line & exit
                      (/home/strick/go/s):04384         
                      (/home/strick/go/s):04385         * Insert line
1552 3420             (/home/strick/go/s):04386         L1291    pshs  y             Save window table ptr
1554 ECA4             (/home/strick/go/s):04387                  ldd   Wt.CurY,y     Get current Y coord
1556 DD9D             (/home/strick/go/s):04388                  std   <$009D        Preserve it
1558 E622             (/home/strick/go/s):04389                  ldb   Wt.XBCnt,y    Get width of window in bytes
155A D797             (/home/strick/go/s):04390                  stb   <$0097        Save in fast mem
155C 4F               (/home/strick/go/s):04391                  clra                Get # bytes/row into D
155D D663             (/home/strick/go/s):04392                  ldb   <$0063         (16 bit for ADDR)
                      (/home/strick/go/s):04393                  IFNE  H6309
                      (/home/strick/go/s):04394                  negd                Make negative (since scrolling down?)
                      (/home/strick/go/s):04395                  ELSE
155F 43               (/home/strick/go/s):04396                  coma
1560 53               (/home/strick/go/s):04397                  comb
1561 C30001           (/home/strick/go/s):04398                  addd  #1
                      (/home/strick/go/s):04399                  ENDC
1564 DD99             (/home/strick/go/s):04400                  std   <$0099        Preserve it
1566 E638             (/home/strick/go/s):04401                  ldb   Wt.SZY,y      Get current Y size
1568 5A               (/home/strick/go/s):04402                  decb                0 base
1569 9671             (/home/strick/go/s):04403                  lda   <$0071        Get Y pixel count
156B 3D               (/home/strick/go/s):04404                  mul                 Multiply by current Y size
156C 1F98             (/home/strick/go/s):04405                  tfr   b,a           Dupe result
156E 4A               (/home/strick/go/s):04406                  deca                Don't include line we are on
156F E021             (/home/strick/go/s):04407                  subb  Wt.CurY+1,y   Subtract Y coord of cursor
1571 D171             (/home/strick/go/s):04408                  cmpb  <$0071        Compare with Y pixel count
1573 25D7             (/home/strick/go/s):04409                  blo   L128A         If on bottom line, don't bother
1575 D79B             (/home/strick/go/s):04410                  stb   <$009B        Save # lines to leave alone
1577 D663             (/home/strick/go/s):04411                  ldb   <$0063        Get #bytes/row
1579 3D               (/home/strick/go/s):04412                  mul                 Calculate # bytes to skip scrolling
157A E333             (/home/strick/go/s):04413                  addd  Wt.LStrt,y    Add to screen start address
157C 1F01             (/home/strick/go/s):04414                  tfr   d,x           Move to top of scroll area reg. for TFM
157E E324             (/home/strick/go/s):04415                  addd  Wt.BRow,y     Add # bytes/text row
1580 1F02             (/home/strick/go/s):04416                  tfr   d,y           Move to bottom of scroll area reg. for TFM
1582 2092             (/home/strick/go/s):04417                  bra   L127B         Do insert scroll
                      (/home/strick/go/s):04418         
                      (/home/strick/go/s):04419         * Delete line
1584 3420             (/home/strick/go/s):04420         L12C5    pshs  y             Save window table ptr
1586 E622             (/home/strick/go/s):04421                  ldb   Wt.XBCnt,y    Get width of window in bytes
1588 D797             (/home/strick/go/s):04422                  stb   <$0097        Save it
158A 4F               (/home/strick/go/s):04423                  clra                Get # bytes/row on screen into D
158B D663             (/home/strick/go/s):04424                  ldb   <$0063
158D DD99             (/home/strick/go/s):04425                  std   <$0099        Save for ADDR loop
158F A638             (/home/strick/go/s):04426                  lda   Wt.SZY,y      Get current Y size
1591 4A               (/home/strick/go/s):04427                  deca                0 base
1592 D660             (/home/strick/go/s):04428                  ldb   <$0060        Check screen type
1594 2B03             (/home/strick/go/s):04429                  bmi   L12DC         If text, skip ahead
1596 48               (/home/strick/go/s):04430                  lsla                Multiply x8 (height of font)
1597 48               (/home/strick/go/s):04431                  lsla  
1598 48               (/home/strick/go/s):04432                  lsla  
1599 A021             (/home/strick/go/s):04433         L12DC    suba  Wt.CurY+1,y   Subtract current Y location
159B 2206             (/home/strick/go/s):04434                  bhi   L12E6         Not on bottom of screen, continue
159D 3520             (/home/strick/go/s):04435                  puls  y             On bottom, get back window table ptr
159F ECA4             (/home/strick/go/s):04436                  ldd   Wt.CurY,y     Get Y coord back
15A1 2020             (/home/strick/go/s):04437                  bra   L1354         Just clear the line & exit
                      (/home/strick/go/s):04438         
15A3 979B             (/home/strick/go/s):04439         L12E6    sta   <$009B        Save # lines to scroll
15A5 ECA81D           (/home/strick/go/s):04440                  ldd   Wt.MaxY,y     Get Maximum Y coordinate
15A8 9370             (/home/strick/go/s):04441                  subd  <$0070        Subtract Y pixel count
                      (/home/strick/go/s):04442                  IFNE  H6309
                      (/home/strick/go/s):04443                  incd                Base 1
                      (/home/strick/go/s):04444                  ELSE
15AA C30001           (/home/strick/go/s):04445                  addd  #1
                      (/home/strick/go/s):04446                  ENDC
15AD DD9D             (/home/strick/go/s):04447                  std   <$009D        Save size of area to scroll for delete
15AF 9663             (/home/strick/go/s):04448                  lda   <$0063        Get # bytes/row
15B1 E621             (/home/strick/go/s):04449                  ldb   Wt.CurY+1,y   Get Y coord of cursor
15B3 3D               (/home/strick/go/s):04450                  mul                 Calculate offset to top of area to scroll
15B4 E333             (/home/strick/go/s):04451                  addd  Wt.LStrt,y    Add to Screen logical start address
15B6 1F01             (/home/strick/go/s):04452                  tfr   d,x           Move to top of window reg. for TFM
15B8 EC24             (/home/strick/go/s):04453                  ldd   Wt.BRow,y     Get # bytes/text row
15BA 1F12             (/home/strick/go/s):04454                  tfr   x,y           Swap top of window to bottom since reverse scroll
                      (/home/strick/go/s):04455                  IFNE  H6309
                      (/home/strick/go/s):04456                  addr  d,x           Calculate top of window reg. for backwards TFM
                      (/home/strick/go/s):04457                  ELSE
15BC 308B             (/home/strick/go/s):04458                  leax  d,x
                      (/home/strick/go/s):04459                  ENDC
15BE 7E5516           (/home/strick/go/s):04460                  jmp   >GrfStrt+L127B Go delete the line
                      (/home/strick/go/s):04461         
                      (/home/strick/go/s):04462         * Erase current line
15C1 ECA4             (/home/strick/go/s):04463         L1352    ldd   Wt.CurY,y     Get Y coordinate
15C3 DD49             (/home/strick/go/s):04464         L1354    std   <$0049        Preserve 'working' Y coordinate
                      (/home/strick/go/s):04465                  IFNE  H6309
                      (/home/strick/go/s):04466                  clrd
                      (/home/strick/go/s):04467                  ELSE
15C5 4F               (/home/strick/go/s):04468                  clra
15C6 5F               (/home/strick/go/s):04469                  clrb
                      (/home/strick/go/s):04470                  ENDC
15C7 DD47             (/home/strick/go/s):04471                  std   <$0047        'Working' X coordinate to 0
15C9 ECA81B           (/home/strick/go/s):04472                  ldd   Wt.MaxX,y     Get maximum X coordinate
15CC 200D             (/home/strick/go/s):04473                  bra   L136C
                      (/home/strick/go/s):04474         
                      (/home/strick/go/s):04475         * Erase to end of line
     15CE             (/home/strick/go/s):04476         L135F    equ   *
                      (/home/strick/go/s):04477                  IFNE  H6309
                      (/home/strick/go/s):04478                  ldq   Wt.CurX,y     Get X & Y coordinates
                      (/home/strick/go/s):04479                  stq   <$0047        Save as 'working' copies
                      (/home/strick/go/s):04480                  ELSE
15CE ECA4             (/home/strick/go/s):04481                  ldd   Wt.CurX+2,y
15D0 DD49             (/home/strick/go/s):04482                  std   <$49
15D2 EC3E             (/home/strick/go/s):04483                  ldd   Wt.CurX,y
15D4 DD47             (/home/strick/go/s):04484                  std   <$47
                      (/home/strick/go/s):04485                  ENDC
15D6 ECA81B           (/home/strick/go/s):04486                  ldd   Wt.MaxX,y     Get maximum X coordinate
15D9 A33E             (/home/strick/go/s):04487                  subd  Wt.CurX,y     Subtract X coordinate
     15DB             (/home/strick/go/s):04488         L136C    equ   *
                      (/home/strick/go/s):04489                  IFNE  H6309
                      (/home/strick/go/s):04490                  incd                Add 1 to X size
                      (/home/strick/go/s):04491                  ELSE
15DB C30001           (/home/strick/go/s):04492                  addd  #1
                      (/home/strick/go/s):04493                  ENDC
15DE DD4F             (/home/strick/go/s):04494                  std   <$004F        New X size (in bytes)
15E0 DC70             (/home/strick/go/s):04495                  ldd   <$0070        Get Y pixel count
15E2 DD51             (/home/strick/go/s):04496                  std   <$0051        New Y size (in bytes)
15E4 2034             (/home/strick/go/s):04497                  bra   L13AD
                      (/home/strick/go/s):04498         
                      (/home/strick/go/s):04499         * CLS (Chr$(12))
15E6 17FE7F           (/home/strick/go/s):04500         L1377    lbsr  L11E1         Home cursor (D&W are 0 on exit)
                      (/home/strick/go/s):04501                  IFNE  H6309
                      (/home/strick/go/s):04502                  stq   <$0047
                      (/home/strick/go/s):04503                  ELSE
                      (/home/strick/go/s):04504         *         pshs  d            not needed because D=W=0
                      (/home/strick/go/s):04505         *         ldd   <$B5
15E9 DD49             (/home/strick/go/s):04506                  std   <$49
                      (/home/strick/go/s):04507         *         puls  d
15EB DD47             (/home/strick/go/s):04508                  std   <$47
                      (/home/strick/go/s):04509                  ENDC
15ED ECA81B           (/home/strick/go/s):04510                  ldd   Wt.MaxX,y     Get maximum X coordinate
                      (/home/strick/go/s):04511                  IFNE  H6309
                      (/home/strick/go/s):04512                  incd                Bump up by 1
                      (/home/strick/go/s):04513                  ELSE
15F0 C30001           (/home/strick/go/s):04514                  addd  #1
                      (/home/strick/go/s):04515                  ENDC
15F3 DD4F             (/home/strick/go/s):04516                  std   <$004F        New X size
15F5 ECA81D           (/home/strick/go/s):04517                  ldd   Wt.MaxY,y     Get maximum Y coordinate
15F8 201B             (/home/strick/go/s):04518                  bra   L13A8
                      (/home/strick/go/s):04519         
                      (/home/strick/go/s):04520         * Erase to end of screen
15FA 8DD2             (/home/strick/go/s):04521         L138D    bsr   L135F         Erase to end of current line first
                      (/home/strick/go/s):04522                  IFNE  H6309
                      (/home/strick/go/s):04523                  clrd                'working' X coordinate to 0
                      (/home/strick/go/s):04524                  ELSE
15FC 4F               (/home/strick/go/s):04525                  clra
15FD 5F               (/home/strick/go/s):04526                  clrb
                      (/home/strick/go/s):04527                  ENDC
15FE DD47             (/home/strick/go/s):04528                  std   <$0047
1600 ECA4             (/home/strick/go/s):04529                  ldd   Wt.CurY,y
1602 D370             (/home/strick/go/s):04530                  addd  <$0070        Add Y pixel count
1604 DD49             (/home/strick/go/s):04531                  std   <$0049        New Y coordinate
1606 ECA81B           (/home/strick/go/s):04532                  ldd   Wt.MaxX,y     Get maximum X coordinate
                      (/home/strick/go/s):04533                  IFNE  H6309
                      (/home/strick/go/s):04534                  incd                bump up by 1
                      (/home/strick/go/s):04535                  ELSE
1609 C30001           (/home/strick/go/s):04536                  addd  #1
                      (/home/strick/go/s):04537                  ENDC
160C DD4F             (/home/strick/go/s):04538                  std   <$004F        New X size
160E ECA81D           (/home/strick/go/s):04539                  ldd   Wt.MaxY,y     Get maximum Y coordinate
1611 9349             (/home/strick/go/s):04540                  subd  <$0049        Subtract Y coordinate
1613 2B35             (/home/strick/go/s):04541                  bmi   L13B7         If negative, skip
     1615             (/home/strick/go/s):04542         L13A8    equ   *
                      (/home/strick/go/s):04543                  IFNE  H6309
                      (/home/strick/go/s):04544                  incd                Bump up by 1
                      (/home/strick/go/s):04545                  ELSE
1615 C30001           (/home/strick/go/s):04546                  addd  #1
                      (/home/strick/go/s):04547                  ENDC
1618 DD51             (/home/strick/go/s):04548                  std   <$0051        Save Y size
                      (/home/strick/go/s):04549         * Erase to end of screen/line comes here too
161A 17FDF9           (/home/strick/go/s):04550         L13AD    lbsr  L1E9D        get screen logical start address into X
                      (/home/strick/go/s):04551         * and also the starting pixel mask into B.
161D 9660             (/home/strick/go/s):04552                  lda   <$0060        Get screen type
161F 2A3E             (/home/strick/go/s):04553                  bpl   L13E3         Do CLS on gfx screen & return
                      (/home/strick/go/s):04554         * Do the CLS on text screen
1621 8620             (/home/strick/go/s):04555                  lda   #$20          Space character
1623 E628             (/home/strick/go/s):04556                  ldb   Wt.Attr,y     Get default attributes
1625 C438             (/home/strick/go/s):04557                  andb  #$38          Mask out Flash/Underline & bckgrnd color
1627 DA62             (/home/strick/go/s):04558                  orb   <$0062        Mask in background color
                      (/home/strick/go/s):04559                  IFNE  H6309
                      (/home/strick/go/s):04560                  tfr   x,w          move pointer to faster index register
                      (/home/strick/go/s):04561                  ELSE
1629 9FB5             (/home/strick/go/s):04562                  stx   <$B5
                      (/home/strick/go/s):04563                  ENDC
162B 1F01             (/home/strick/go/s):04564                  tfr   d,x           Move into proper register for clear loop
162D D663             (/home/strick/go/s):04565                  ldb   <$0063        Get #bytes/row
162F D050             (/home/strick/go/s):04566                  subb  <$0050        Subtract width twice for char. & attribute
1631 D050             (/home/strick/go/s):04567                  subb  <$0050        B=# bytes to skip to go to next line
1633 2716             (/home/strick/go/s):04568                  beq   ClsFTxt       If full width screen, use optomized routine
                      (/home/strick/go/s):04569         
1635 9650             (/home/strick/go/s):04570         L13CF    lda   <$0050        Get width of line in chars?
                      (/home/strick/go/s):04571                  IFEQ  H6309
1637 3440             (/home/strick/go/s):04572                  pshs  u
1639 DEB5             (/home/strick/go/s):04573                  ldu   <$B5
                      (/home/strick/go/s):04574                  ENDC
     163B             (/home/strick/go/s):04575         L13D4    equ   *             * Only called as loop
                      (/home/strick/go/s):04576                  IFNE  H6309
                      (/home/strick/go/s):04577                  stx   ,w++          Put attr/char on screen
                      (/home/strick/go/s):04578                  ELSE
163B AFC1             (/home/strick/go/s):04579                  stx   ,u++
                      (/home/strick/go/s):04580                  ENDC
163D 4A               (/home/strick/go/s):04581                  deca                Dec counter of how many bytes this line
163E 26FB             (/home/strick/go/s):04582                  bne   L13D4         Do until line is done
                      (/home/strick/go/s):04583                  IFNE  H6309
                      (/home/strick/go/s):04584                  addr  d,w          after all, A=0
                      (/home/strick/go/s):04585                  ELSE
1640 33CB             (/home/strick/go/s):04586                  leau  d,u
1642 DFB5             (/home/strick/go/s):04587                  stu   <$B5
1644 3540             (/home/strick/go/s):04588                  puls  u 
                      (/home/strick/go/s):04589                  ENDC
1646 0A52             (/home/strick/go/s):04590                  dec   <$0052        Dec line count
1648 26EB             (/home/strick/go/s):04591                  bne   L13CF         Do until rest of screeen done
164A 39               (/home/strick/go/s):04592         L13B7    rts                 Restore window table ptr & return
                      (/home/strick/go/s):04593         
                      (/home/strick/go/s):04594         * Optomized routine for full width text screens
                      (/home/strick/go/s):04595         * Entry: W=attribute/char to fill with
164B D650             (/home/strick/go/s):04596         ClsFTxt  ldb   <$0050        Get # chars per line
164D 9652             (/home/strick/go/s):04597                  lda   <$0052        Get # of rows (lines)
164F 3D               (/home/strick/go/s):04598                  mul                 # chars till end of screen
                      (/home/strick/go/s):04599                  IFEQ  H6309
1650 3440             (/home/strick/go/s):04600                  pshs  u
1652 DEB5             (/home/strick/go/s):04601                  ldu   <$B5
                      (/home/strick/go/s):04602                  ENDC
     1654             (/home/strick/go/s):04603         FstClrT  equ   *
                      (/home/strick/go/s):04604                  IFNE  H6309
                      (/home/strick/go/s):04605                  stx   ,w++          Put attr/char on screen
                      (/home/strick/go/s):04606                  decd                Dec counter
                      (/home/strick/go/s):04607                  ELSE
1654 AFC1             (/home/strick/go/s):04608                  stx   ,u++
1656 830001           (/home/strick/go/s):04609                  subd  #1
                      (/home/strick/go/s):04610                  ENDC
1659 26F9             (/home/strick/go/s):04611                  bne   FstClrT       Do until done
                      (/home/strick/go/s):04612                  IFNE  H6309
                      (/home/strick/go/s):04613                  rts                 Restore window table ptr & return 
                      (/home/strick/go/s):04614                  ELSE
165B DFB5             (/home/strick/go/s):04615                  stu   <$B5
165D 35C0             (/home/strick/go/s):04616                  puls  u,pc
                      (/home/strick/go/s):04617                  ENDC
                      (/home/strick/go/s):04618         
                      (/home/strick/go/s):04619         * Part of CLS/Erase to end of screen/line - Gfx only
                      (/home/strick/go/s):04620         * all coords & sizes should be pixel based
                      (/home/strick/go/s):04621         *   the cmpx's at the bottom should be F or E (screen type)
                      (/home/strick/go/s):04622         * NOTE: <$48 contains a 0 when coming in here for CLS
                      (/home/strick/go/s):04623         *   If this is the only way to get here, may change lda/coma to lda #$ff
                      (/home/strick/go/s):04624         * <$4F=X size in pixels (1-640) to clear
                      (/home/strick/go/s):04625         * <$51=Y size in pixels (1-200) to clear
                      (/home/strick/go/s):04626         * This routine calculates the pixel mask if you are clearing from the middle
                      (/home/strick/go/s):04627         * of a byte to properly handle proportional chars or 6 pixel fonts
                      (/home/strick/go/s):04628         * ATD: OK, MOST clears are on 8x8 pixel boundaries, but for proportional, etc.
                      (/home/strick/go/s):04629         * fonts and clear to EOL, we may be in the middle of a byte.  In that case,
                      (/home/strick/go/s):04630         * do a BAR.  It's slower, but a lot smaller code.
                      (/home/strick/go/s):04631         * Entry: A=Screen type
                      (/home/strick/go/s):04632         *        B= starting pixel mask for this byte: important for pixel boundaries!
                      (/home/strick/go/s):04633         *        X=absolute address of the start of the screen
165F CE4E06           (/home/strick/go/s):04634         L13E3    ldu   #GrfStrt+L0D70-1  mask for pixels
1662 A6C6             (/home/strick/go/s):04635                  lda   a,u          grab mask (7,3,1)
1664 5D               (/home/strick/go/s):04636                  tstb               is the high bit of the pixel mask set?
1665 2B29             (/home/strick/go/s):04637                  bmi   L13F0        yes, we're starting on a byte boundary
1667 3412             (/home/strick/go/s):04638                  pshs  a,x          save X-coord mask, and screen ptr for later
1669 1F98             (/home/strick/go/s):04639                  tfr   b,a          get another copy of the pixel mask
                      (/home/strick/go/s):04640         
166B 54               (/home/strick/go/s):04641         L13E5    lsrb               move the mask one bit to the right
                      (/home/strick/go/s):04642                  IFNE  H6309
                      (/home/strick/go/s):04643                  orr   b,a          make A the right-most mask
                      (/home/strick/go/s):04644                  ELSE
166C 3404             (/home/strick/go/s):04645                  pshs  b
166E AAE0             (/home/strick/go/s):04646                  ora   ,s+
                      (/home/strick/go/s):04647                  ENDC
1670 24F9             (/home/strick/go/s):04648                  bcc   L13E5        the low bits of A will be the pixel mask
1672 1F89             (/home/strick/go/s):04649                  tfr   a,b          copy A to B again
1674 43               (/home/strick/go/s):04650                  coma
1675 D462             (/home/strick/go/s):04651                  andb  <$62         AND with full-byte background color mask
1677 DD97             (/home/strick/go/s):04652                  std   <$97         save screen mask, background color
                      (/home/strick/go/s):04653                  IFNE  H6309
                      (/home/strick/go/s):04654                  lde   <$52         get the lines to clear
                      (/home/strick/go/s):04655                  ELSE
1679 D652             (/home/strick/go/s):04656                  ldb   <$52
167B D7B5             (/home/strick/go/s):04657                  stb   <$B5
                      (/home/strick/go/s):04658                  ENDC
167D D663             (/home/strick/go/s):04659                  ldb   <$63         get the size of the screen
                      (/home/strick/go/s):04660         
167F A684             (/home/strick/go/s):04661         L13E8    lda   ,x           grab a byte off of the screen
1681 9497             (/home/strick/go/s):04662                  anda  <$97         AND in only the screen pixels we want
1683 9A98             (/home/strick/go/s):04663                  ora   <$98         OR in the background color
1685 A784             (/home/strick/go/s):04664                  sta   ,x           save the updated byte
1687 3A               (/home/strick/go/s):04665                  abx                go to the next screen line
                      (/home/strick/go/s):04666                  IFNE  H6309
                      (/home/strick/go/s):04667                  dece               count down
                      (/home/strick/go/s):04668                  ELSE
1688 0AB5             (/home/strick/go/s):04669                  dec   <$B5
                      (/home/strick/go/s):04670                  ENDC
168A 26F3             (/home/strick/go/s):04671                  bne   L13E8        continue until done
                      (/home/strick/go/s):04672         
168C 3512             (/home/strick/go/s):04673                  puls  a,x          restore X coord mask and screen ptr
168E 3001             (/home/strick/go/s):04674                  leax  1,x          we've done these bytes already
                      (/home/strick/go/s):04675         
1690 4C               (/home/strick/go/s):04676         L13F0    inca               now B=number of pixels per byte (8,4,2);A not B; RG
1691 D662             (/home/strick/go/s):04677                  ldb   <$62              Get backgrnd full-byte pixel mask
1693 3406             (/home/strick/go/s):04678                  pshs  d            save pixels/byte, color mask
1695 DC4F             (/home/strick/go/s):04679                  ldd   <$004F            Get X size (in pixels)
                      (/home/strick/go/s):04680                  IFNE  H6309
                      (/home/strick/go/s):04681                  divd  ,s+          divide by pixels/byte: B=bytes wide the window is
                      (/home/strick/go/s):04682         * PANIC if A<>0!!!          leave mask on stack for later use
                      (/home/strick/go/s):04683                  ELSE
1697 6FE2             (/home/strick/go/s):04684                  clr   ,-s
1699 6CE4             (/home/strick/go/s):04685         L13F0b   inc   ,s
169B E061             (/home/strick/go/s):04686                  subb  1,s
169D 8200             (/home/strick/go/s):04687                  sbca  #0
169F 24F8             (/home/strick/go/s):04688                  bcc   L13F0b
                      (/home/strick/go/s):04689         *         addb  1,s
                      (/home/strick/go/s):04690         *         tfr   b,a         don't care about remainder
16A1 3504             (/home/strick/go/s):04691                  puls  b
16A3 5A               (/home/strick/go/s):04692                  decb
16A4 3261             (/home/strick/go/s):04693                  leas  1,s
                      (/home/strick/go/s):04694                  ENDC
16A6 D163             (/home/strick/go/s):04695                  cmpb  <$0063            Get # bytes/row on screen
16A8 2721             (/home/strick/go/s):04696                  beq   ClsFGfx      full width of screen: do complete TFM
                      (/home/strick/go/s):04697         
16AA D797             (/home/strick/go/s):04698                  stb   <$97         save width of window for later
16AC D063             (/home/strick/go/s):04699                  subb  <$0063       subtract width of window from width of screen
16AE 50               (/home/strick/go/s):04700                  negb               now B=offset from X-end,Y to X-start,Y+1
                      (/home/strick/go/s):04701         
16AF 9652             (/home/strick/go/s):04702                  lda   <$52              Get # lines to clear
                      (/home/strick/go/s):04703                  IFNE  H6309
                      (/home/strick/go/s):04704                  clre                    W for TFM size
16B1                  (/home/strick/go/s):04705         L1450    ldf   <$97              Get width of window in bytes
                      (/home/strick/go/s):04706                  tfm   s,x+              Clear out line
                      (/home/strick/go/s):04707                  ELSE
16B1 3426             (/home/strick/go/s):04708         L1450    pshs  d,y
16B3 4F               (/home/strick/go/s):04709                  clra
16B4 D697             (/home/strick/go/s):04710                  ldb   <$97
16B6 1F02             (/home/strick/go/s):04711                  tfr   d,y
16B8 A664             (/home/strick/go/s):04712                  lda   4,s
16BA A780             (/home/strick/go/s):04713         L1450b   sta   ,x+
16BC 313F             (/home/strick/go/s):04714                  leay  -1,y
16BE 26FA             (/home/strick/go/s):04715                  bne   L1450b
16C0 109FB5           (/home/strick/go/s):04716                  sty   <$B5
16C3 3526             (/home/strick/go/s):04717                  puls  d,y
                      (/home/strick/go/s):04718                  ENDC
16C5 4A               (/home/strick/go/s):04719                  deca                    Dec line counter
16C6 271D             (/home/strick/go/s):04720                  beq   L146F             done, exit
16C8 3A               (/home/strick/go/s):04721                  abx                     Bump to start of next line
16C9 20E6             (/home/strick/go/s):04722                  bra   L1450             Keep clearing until done
                      (/home/strick/go/s):04723         
                      (/home/strick/go/s):04724         * Clearing Gfx screen/even byte start/full width window
                      (/home/strick/go/s):04725         * Entry: B=width of screen/window in bytes
16CB 9652             (/home/strick/go/s):04726         ClsFGfx  lda   <$52              Get # lines to clear
16CD 3D               (/home/strick/go/s):04727                  mul                     Calculate # bytes for remainder of screen
                      (/home/strick/go/s):04728                  IFNE  H6309
                      (/home/strick/go/s):04729                  tfr   d,w               Move to TFM size register
                      (/home/strick/go/s):04730                  tfm   s,x+              Clear out remainder of screen
                      (/home/strick/go/s):04731                  ELSE
16CE 10830000         (/home/strick/go/s):04732                  cmpd  #0
16D2 2711             (/home/strick/go/s):04733                  beq   L146F
16D4 3426             (/home/strick/go/s):04734                  pshs  d,y
16D6 1F02             (/home/strick/go/s):04735                  tfr   d,y         tfr d,w
16D8 A664             (/home/strick/go/s):04736                  lda   4,s         get ,s
16DA A780             (/home/strick/go/s):04737         L146Fb   sta   ,x+
16DC 313F             (/home/strick/go/s):04738                  leay  -1,y
16DE 26FA             (/home/strick/go/s):04739                  bne   L146Fb
16E0 109FB5           (/home/strick/go/s):04740                  sty   <$B5
16E3 3526             (/home/strick/go/s):04741                  puls  d,y
                      (/home/strick/go/s):04742                  ENDC
16E5 3582             (/home/strick/go/s):04743         L146F    puls  pc,a              Eat a & return
                      (/home/strick/go/s):04744         
                      (/home/strick/go/s):04745         * $1f code processor
                      (/home/strick/go/s):04746         *L1478    lbsr  L0177          Map in window/setup GRFDRV mem/update cursors
16E7 17FB0D           (/home/strick/go/s):04747         L1478    lbsr  L0FFF          Set up font info
16EA 8D03             (/home/strick/go/s):04748                  bsr   L1483          Perform $1F function
16EC 7E5176           (/home/strick/go/s):04749                  jmp   >GrfStrt+L0F78 Return to Grf/Wind Int: no errors
                      (/home/strick/go/s):04750         
16EF 8020             (/home/strick/go/s):04751         L1483    suba  #$20           Inverse on? (A=$20)
16F1 271B             (/home/strick/go/s):04752                  beq   L14A8        yes, go do it
16F3 4A               (/home/strick/go/s):04753                  deca               A=$21 Inverse off?
16F4 2732             (/home/strick/go/s):04754                  beq   L14C4
16F6 4A               (/home/strick/go/s):04755                  deca               A=$22 Underline on?
16F7 273B             (/home/strick/go/s):04756                  beq   L14D0
16F9 4A               (/home/strick/go/s):04757                  deca               A=$23 Underline off?
16FA 2749             (/home/strick/go/s):04758                  beq   L14D9
16FC 4A               (/home/strick/go/s):04759                  deca               A=$24 Blink on?
16FD 2757             (/home/strick/go/s):04760                  beq   L14E2
16FF 4A               (/home/strick/go/s):04761                  deca               A=$25 blink off?
1700 275F             (/home/strick/go/s):04762                  beq   L14E9
1702 800B             (/home/strick/go/s):04763                  suba  #$30-$25     A=$30 Insert line?
1704 1027FE4A         (/home/strick/go/s):04764                  lbeq  L1291
1708 4A               (/home/strick/go/s):04765                  deca               A=$31 Delete line?
1709 1027FE77         (/home/strick/go/s):04766                  lbeq  L12C5
170D 39               (/home/strick/go/s):04767                  rts   
                      (/home/strick/go/s):04768         
                      (/home/strick/go/s):04769         * Inverse ON
170E E629             (/home/strick/go/s):04770         L14A8    ldb   Wt.BSW,y       Get window bit flags
1710 C504             (/home/strick/go/s):04771                  bitb  #Invers        Inverse on?
1712 2613             (/home/strick/go/s):04772                  bne   L14C3          Already on, leave it alone
1714 CA04             (/home/strick/go/s):04773                  orb   #Invers        Set inverse on flag
1716 E729             (/home/strick/go/s):04774                  stb   Wt.BSW,y       Save new bit flags
                      (/home/strick/go/s):04775         
1718 A628             (/home/strick/go/s):04776         L14B2    lda   Wt.Attr,y      Get default attributes
171A 170107           (/home/strick/go/s):04777                  lbsr  L15B2          Go swap Fore/Background colors into A
171D E628             (/home/strick/go/s):04778                  ldb   Wt.Attr,y      Get default attributes again
171F C4C0             (/home/strick/go/s):04779                  andb  #$c0           Mask out all but Blink & underline
                      (/home/strick/go/s):04780                  IFNE  H6309
                      (/home/strick/go/s):04781                  orr   a,b            Mask in swapped colors
                      (/home/strick/go/s):04782                  ELSE
1721 3402             (/home/strick/go/s):04783                  pshs  a
1723 EAE0             (/home/strick/go/s):04784                  orb   ,s+
                      (/home/strick/go/s):04785                  ENDC
1725 E728             (/home/strick/go/s):04786                  stb   Wt.Attr,y      Save new default attribute byte & return
1727 39               (/home/strick/go/s):04787         L14C3    rts   
                      (/home/strick/go/s):04788         
                      (/home/strick/go/s):04789         * Inverse OFF
1728 E629             (/home/strick/go/s):04790         L14C4    ldb   Wt.BSW,y       Get window bit flags
172A C504             (/home/strick/go/s):04791                  bitb  #Invers        Inverse off?
172C 27F9             (/home/strick/go/s):04792                  beq   L14C3          Already off, leave
172E C4FB             (/home/strick/go/s):04793                  andb  #^Invers       Shut inverse bit flag off
1730 E729             (/home/strick/go/s):04794                  stb   Wt.BSW,y       Save updated bit flags
1732 20E4             (/home/strick/go/s):04795                  bra   L14B2          Go swap colors in attribute byte
                      (/home/strick/go/s):04796         
     1734             (/home/strick/go/s):04797         L14D0    equ   *
                      (/home/strick/go/s):04798                  IFNE  H6309
                      (/home/strick/go/s):04799                  oim   #Under,Wt.Attr,y
                      (/home/strick/go/s):04800                  oim   #Under,Wt.BSW,y
                      (/home/strick/go/s):04801                  ELSE
1734 3402             (/home/strick/go/s):04802                  pshs  a
1736 A628             (/home/strick/go/s):04803                  lda   Wt.Attr,y 
1738 8A40             (/home/strick/go/s):04804                  ora   #Under
173A A728             (/home/strick/go/s):04805                  sta   Wt.Attr,y
173C A629             (/home/strick/go/s):04806                  lda   Wt.BSW,y 
173E 8A40             (/home/strick/go/s):04807                  ora   #Under
1740 A729             (/home/strick/go/s):04808                  sta   Wt.BSW,y
1742 3502             (/home/strick/go/s):04809                  puls  a
                      (/home/strick/go/s):04810                  ENDC
1744 39               (/home/strick/go/s):04811                  rts
                      (/home/strick/go/s):04812         
     1745             (/home/strick/go/s):04813         L14D9    equ   *
                      (/home/strick/go/s):04814                  IFNE  H6309
                      (/home/strick/go/s):04815                  aim   #^Under,Wt.Attr,y
                      (/home/strick/go/s):04816                  aim   #^Under,Wt.BSW,y
                      (/home/strick/go/s):04817                  ELSE
1745 3402             (/home/strick/go/s):04818                  pshs  a
1747 A628             (/home/strick/go/s):04819                  lda   Wt.Attr,y 
1749 84BF             (/home/strick/go/s):04820                  anda  #^Under
174B A728             (/home/strick/go/s):04821                  sta   Wt.Attr,y
174D A629             (/home/strick/go/s):04822                  lda   Wt.BSW,y 
174F 84BF             (/home/strick/go/s):04823                  anda  #^Under
1751 A729             (/home/strick/go/s):04824                  sta   Wt.BSW,y
1753 3502             (/home/strick/go/s):04825                  puls  a
                      (/home/strick/go/s):04826                  ENDC
1755 39               (/home/strick/go/s):04827                  rts
                      (/home/strick/go/s):04828         
                      (/home/strick/go/s):04829         * Blink on
     1756             (/home/strick/go/s):04830         L14E2    equ   *
                      (/home/strick/go/s):04831                  IFNE  H6309
                      (/home/strick/go/s):04832                  oim   #TChr,Wt.Attr,y
                      (/home/strick/go/s):04833                  ELSE
1756 3402             (/home/strick/go/s):04834                  pshs  a
1758 A628             (/home/strick/go/s):04835                  lda   Wt.Attr,y 
175A 8A80             (/home/strick/go/s):04836                  ora   #TChr
175C A728             (/home/strick/go/s):04837                  sta   Wt.Attr,y
175E 3502             (/home/strick/go/s):04838                  puls  a
                      (/home/strick/go/s):04839                  ENDC
1760 39               (/home/strick/go/s):04840                  rts   
                      (/home/strick/go/s):04841         
                      (/home/strick/go/s):04842         * Blink off
     1761             (/home/strick/go/s):04843         L14E9    equ   *
                      (/home/strick/go/s):04844                  IFNE  H6309
                      (/home/strick/go/s):04845                  aim   #^TChr,Wt.Attr,y
                      (/home/strick/go/s):04846                  ELSE
1761 3402             (/home/strick/go/s):04847                  pshs  a
1763 A628             (/home/strick/go/s):04848                  lda   Wt.Attr,y 
1765 847F             (/home/strick/go/s):04849                  anda  #^TChr
1767 A728             (/home/strick/go/s):04850                  sta   Wt.Attr,y
1769 3502             (/home/strick/go/s):04851                  puls  a
                      (/home/strick/go/s):04852                  ENDC
176B 39               (/home/strick/go/s):04853                  rts   
                      (/home/strick/go/s):04854         
                      (/home/strick/go/s):04855         * Cursor On/Off entry point
176C 17FA88           (/home/strick/go/s):04856         L116E    lbsr  L0FFF          Set up font sizes (and font if on gfx screen)
176F 8D02             (/home/strick/go/s):04857                  bsr   L1179          Do appropriate action
1771 2010             (/home/strick/go/s):04858                  bra   L1508
                      (/home/strick/go/s):04859         
1773 8020             (/home/strick/go/s):04860         L1179    suba  #$20           A=$20  Cursor Off?
1775 276B             (/home/strick/go/s):04861                  beq   L14F8          Yes, go do it
1777 4A               (/home/strick/go/s):04862                  deca                 A=$21  Cursor on?
1778 275E             (/home/strick/go/s):04863                  beq   L14F0          Yes, go do it
177A 39               (/home/strick/go/s):04864                  rts                  Neither, return
                      (/home/strick/go/s):04865         
                      (/home/strick/go/s):04866         * Update Window entrypoint - Put txt & Gfx cursors back on scrn
177B 17E98B           (/home/strick/go/s):04867         L1500    lbsr  L0129          Map the window in & setup Grfdrv mem
177E 8D5E             (/home/strick/go/s):04868                  bsr   L1563          Put text cursor back on window
1780 1700B1           (/home/strick/go/s):04869         L1505    lbsr  L15BF          Put gfx cursor back on window
1783 7E5176           (/home/strick/go/s):04870         L1508    jmp   >GrfStrt+L0F78 no error & exit
                      (/home/strick/go/s):04871         
                      (/home/strick/go/s):04872         * This takes the gfx/txt cursors off the screen before returning to original
                      (/home/strick/go/s):04873         * Grfdrv call
1786 3436             (/home/strick/go/s):04874         L150C    pshs  y,x,d          Preserve regs
1788 8D5E             (/home/strick/go/s):04875                  bsr   L157A          Take text cursor off (restore original char)
178A 1700C9           (/home/strick/go/s):04876                  lbsr  L15E2          Take Gfx cursor off (restore original screen)
178D F61000           (/home/strick/go/s):04877                  ldb   >WGlobal+G.CurTik         Get restart counter for # clock interrupts per
1790 F71001           (/home/strick/go/s):04878                  stb   >WGlobal+G.CntTik          cursor update & make it current counter
1793 35B6             (/home/strick/go/s):04879                  puls  pc,y,x,d       Restore regs & return
                      (/home/strick/go/s):04880         
                      (/home/strick/go/s):04881         * PutGC entry point (Took out mapping in window since the CMPY only lets us
                      (/home/strick/go/s):04882         * do anything if it IS mapped in currently
1795 17E971           (/home/strick/go/s):04883         L151B    lbsr  L0129          Map in window & setup Grfdrv vars
1798 109C2E           (/home/strick/go/s):04884                  cmpy  <$002E         Are we the current active window (window tbl)?
179B 26E6             (/home/strick/go/s):04885                  bne   L1508          No, don't bother with PutGC
179D DC5B             (/home/strick/go/s):04886                  ldd   <$005B         Get Graphics cursor X coord
179F 10933D           (/home/strick/go/s):04887                  cmpd  <$003D         Same as last used graphics cursor coord?
17A2 2607             (/home/strick/go/s):04888                  bne   L1531          No, go draw new graphics cursor
17A4 DC5D             (/home/strick/go/s):04889                  ldd   <$005D         Get Graphics cursor Y coord
17A6 10933F           (/home/strick/go/s):04890                  cmpd  <$003F         Same as last used graphics cursor coord?
17A9 27D8             (/home/strick/go/s):04891                  beq   L1508          Yes, don't bother updating
17AB 1700A8           (/home/strick/go/s):04892         L1531    lbsr  L15E2          Put original data under cursor back to normal
17AE 8D02             (/home/strick/go/s):04893                  bsr   L153B          Update 'last gfx cursor' on position to new one
17B0 20CE             (/home/strick/go/s):04894                  bra   L1505        put gfx cursor back on screen, and exit: +3C:-3B
                      (/home/strick/go/s):04895         
17B2 DC47             (/home/strick/go/s):04896         L153B    ldd   <$0047         Get current 'working' X & Y coords
17B4 9E49             (/home/strick/go/s):04897                  ldx   <$0049
17B6 3416             (/home/strick/go/s):04898                  pshs  d,x            Save them on stack
                      (/home/strick/go/s):04899                  IFNE  H6309
                      (/home/strick/go/s):04900                  ldq   <$005b         Get new graphics cursor X & Y coords
                      (/home/strick/go/s):04901                  stq   <$0047         Save as working copies for Put routines
                      (/home/strick/go/s):04902                  stq   <$003d         Also, make them the new 'last position' coords
                      (/home/strick/go/s):04903                  ELSE
17B8 DC5D             (/home/strick/go/s):04904                  ldd   <$5d
17BA DDB5             (/home/strick/go/s):04905                  std   <$B5
17BC DD49             (/home/strick/go/s):04906                  std   <$49
17BE DD3F             (/home/strick/go/s):04907                  std   <$3f
17C0 DC5B             (/home/strick/go/s):04908                  ldd   <$5b
17C2 DD47             (/home/strick/go/s):04909                  std   <$47
17C4 DD3D             (/home/strick/go/s):04910                  std   <$3d
                      (/home/strick/go/s):04911                  ENDC
17C6 AE30             (/home/strick/go/s):04912                  ldx   Wt.STbl,y      Get screen table ptr
17C8 AE02             (/home/strick/go/s):04913                  ldx   St.LStrt,x     Get screen start address
17CA 17FC4B           (/home/strick/go/s):04914                  lbsr  L1E9F          Screen address to put=X, start pixel mask=B
17CD 9F41             (/home/strick/go/s):04915                  stx   <$0041         Save screen ptr
17CF D743             (/home/strick/go/s):04916                  stb   <$0043         Save start pixel mask
17D1 3516             (/home/strick/go/s):04917                  puls  d,x            Get back original 'working' coords
17D3 DD47             (/home/strick/go/s):04918                  std   <$0047
17D5 9F49             (/home/strick/go/s):04919                  stx   <$0049         Put them back for original GrfDrv function
17D7 39               (/home/strick/go/s):04920         L1579    rts
                      (/home/strick/go/s):04921         
                      (/home/strick/go/s):04922         * Cursor on
     17D8             (/home/strick/go/s):04923         L14F0    equ   *
                      (/home/strick/go/s):04924                  IFNE  H6309
                      (/home/strick/go/s):04925                  aim   #^NoCurs,Wt.BSW,y         Set cursor flag to on
                      (/home/strick/go/s):04926                  ELSE
17D8 A629             (/home/strick/go/s):04927                  lda   Wt.BSW,y 
17DA 84FD             (/home/strick/go/s):04928                  anda  #^NoCurs
17DC A729             (/home/strick/go/s):04929                  sta   Wt.BSW,y
                      (/home/strick/go/s):04930                  ENDC
                      (/home/strick/go/s):04931         * Update txt cursor (on gfx or txt screens) from UPDATE Window 'hidden' call
17DE 8601             (/home/strick/go/s):04932         L1563    lda   #$01         put the cursor on the screen
17E0 2007             (/home/strick/go/s):04933                  bra   L157B
                      (/home/strick/go/s):04934         
                      (/home/strick/go/s):04935         * Cursor off
     17E2             (/home/strick/go/s):04936         L14F8    equ   *
                      (/home/strick/go/s):04937                  IFNE  H6309
                      (/home/strick/go/s):04938                  oim   #NoCurs,Wt.BSW,y         Set cursor flag to off
                      (/home/strick/go/s):04939                  ELSE
17E2 A629             (/home/strick/go/s):04940                  lda   Wt.BSW,y 
17E4 8A02             (/home/strick/go/s):04941                  ora   #NoCurs
17E6 A729             (/home/strick/go/s):04942                  sta   Wt.BSW,y
                      (/home/strick/go/s):04943                  ENDC
                      (/home/strick/go/s):04944         * Update text cursor (on gfx or text screens) from within Grfdrv
17E8 4F               (/home/strick/go/s):04945         L157A    clra               take the cursor off of the screen
                      (/home/strick/go/s):04946         
17E9 109C2E           (/home/strick/go/s):04947         L157B    cmpy  <$002E         We on current window?
17EC 26E9             (/home/strick/go/s):04948                  bne   L1579          No, exit
                      (/home/strick/go/s):04949                  IFNE  H6309
                      (/home/strick/go/s):04950                  tim   #NoCurs,Wt.BSW,y Cursor enabled?
                      (/home/strick/go/s):04951                  ELSE
17EE 3402             (/home/strick/go/s):04952                  pshs  a
17F0 A629             (/home/strick/go/s):04953                  lda   Wt.BSW,y 
17F2 8502             (/home/strick/go/s):04954                  bita  #NoCurs
17F4 3502             (/home/strick/go/s):04955                  puls  a
                      (/home/strick/go/s):04956                  ENDC
17F6 26DF             (/home/strick/go/s):04957                  bne   L1579          No, exit
17F8 9139             (/home/strick/go/s):04958                  cmpa  <$0039       get cursor on screen flag
17FA 27DB             (/home/strick/go/s):04959                  beq   L1579        same state as last time, exit
17FC 9739             (/home/strick/go/s):04960                  sta   <$0039       cursor is ON the screen
17FE 17F9F9           (/home/strick/go/s):04961                  lbsr  L1002        Set up fonts, character sizes
1801 2000             (/home/strick/go/s):04962                  bra   L158B        go put the cursor on-screen
                      (/home/strick/go/s):04963         
                      (/home/strick/go/s):04964         * Cursor on
                      (/home/strick/go/s):04965         *L14F0    aim   #^NoCurs,Wt.BSW,y         Set cursor flag to on
                      (/home/strick/go/s):04966         * Update txt cursor (on gfx or txt screens) from UPDATE Window 'hidden' call
                      (/home/strick/go/s):04967         *L1563    cmpy  <$002E         We on current window?
                      (/home/strick/go/s):04968         *         bne   L1579          No, exit
                      (/home/strick/go/s):04969         *         tim   #NoCurs,Wt.BSW,y Cursor on?
                      (/home/strick/go/s):04970         *         bne   L1579          No, exit
                      (/home/strick/go/s):04971         *         ldb   <$0039       get GP buffer block number
                      (/home/strick/go/s):04972         *         bne   L1579        none, exit
                      (/home/strick/go/s):04973         *         lbsr  L1002          Set up font counts
                      (/home/strick/go/s):04974         *         bsr   L158B
                      (/home/strick/go/s):04975         *         inc   <$0039       cursor is ON the screen
                      (/home/strick/go/s):04976         *L1579    rts   
                      (/home/strick/go/s):04977         
                      (/home/strick/go/s):04978         * Cursor off
                      (/home/strick/go/s):04979         *L14F8    oim   #NoCurs,Wt.BSW,y         Set cursor flag to off
                      (/home/strick/go/s):04980         * Update text cursor (on gfx or text screens) from within Grfdrv
                      (/home/strick/go/s):04981         *L157A    cmpy  <$002E       We on current window?
                      (/home/strick/go/s):04982         *         bne   L158A        No, exit
                      (/home/strick/go/s):04983         *         ldb   <$0039
                      (/home/strick/go/s):04984         *         beq   L158A
                      (/home/strick/go/s):04985         *         lbsr  L1002        setup font counts
                      (/home/strick/go/s):04986         *         bsr   L158B
                      (/home/strick/go/s):04987         *         clr   <$0039       cursor is OFF of the screen
                      (/home/strick/go/s):04988         *L158A    rts   
                      (/home/strick/go/s):04989         
                      (/home/strick/go/s):04990         * Handle char. under cursor on Hware Text screen
                      (/home/strick/go/s):04991         * Entry: Y=window table ptr
                      (/home/strick/go/s):04992         * Exit: Attribute byte on screen has fore/bckground colors reversed
1803 AE3B             (/home/strick/go/s):04993         L158B    ldx   Wt.Cur,y     get cursor physical address
1805 D660             (/home/strick/go/s):04994                  ldb   <$0060       get screen type
1807 2A0F             (/home/strick/go/s):04995                  bpl   L15A5        Skip ahead if gfx screen
1809 A601             (/home/strick/go/s):04996                  lda   1,x          Get attribute byte of char. under cursor
180B 8D17             (/home/strick/go/s):04997                  bsr   L15B2        Get inversed fore/bck ground colors mask into A
180D E601             (/home/strick/go/s):04998                  ldb   1,x          Get original attribute byte back
180F C4C0             (/home/strick/go/s):04999                  andb  #%11000000   Mask out all but blink & underline
                      (/home/strick/go/s):05000                  IFNE  H6309
                      (/home/strick/go/s):05001                  orr   a,b          Merge in swapped colors mask
                      (/home/strick/go/s):05002                  ELSE
1811 3402             (/home/strick/go/s):05003                  pshs  a
1813 EAE0             (/home/strick/go/s):05004                  orb   ,s+
                      (/home/strick/go/s):05005                  ENDC
1815 E701             (/home/strick/go/s):05006                  stb   1,x          Set new attributes for this char
1817 39               (/home/strick/go/s):05007                  rts
                      (/home/strick/go/s):05008         
                      (/home/strick/go/s):05009         * Set attributes on Gfx screen
1818 3420             (/home/strick/go/s):05010         L15A5    pshs  y            Save window table ptr
181A CE5364           (/home/strick/go/s):05011                  ldu   #GrfStrt+L10FA  Setup vector for cursor on Gfx screen
181D 0F0E             (/home/strick/go/s):05012                  clr   <$000E       Shut off all attributes
181F 17FACB           (/home/strick/go/s):05013                  lbsr  L106D        Go put inversed char (under cursor) on screen
1822 35A0             (/home/strick/go/s):05014                  puls  pc,y         Restore window tbl ptr & return
                      (/home/strick/go/s):05015         
                      (/home/strick/go/s):05016         * Flip fore/background color masks for hardware text attribute byte
                      (/home/strick/go/s):05017         * Entry:A=attribute byte for h/ware text screen
                      (/home/strick/go/s):05018         * Exit: A=Reversed color masks
1824 5F               (/home/strick/go/s):05019         L15B2    clrb                no attributes here yet
1825 843F             (/home/strick/go/s):05020                  anda  #%00111111     Mask out blinking, underline bits
                      (/home/strick/go/s):05021                  IFNE  H6309
                      (/home/strick/go/s):05022                  lsrd               one byte smaller than old method
                      (/home/strick/go/s):05023                  lsrd               move foreground in A to background in A,
                      (/home/strick/go/s):05024                  lsrd               background in A to 3 high bits of B
                      (/home/strick/go/s):05025                  ELSE
1827 44               (/home/strick/go/s):05026                  lsra
1828 56               (/home/strick/go/s):05027                  rorb
1829 44               (/home/strick/go/s):05028                  lsra
182A 56               (/home/strick/go/s):05029                  rorb
182B 44               (/home/strick/go/s):05030                  lsra
182C 56               (/home/strick/go/s):05031                  rorb
                      (/home/strick/go/s):05032                  ENDC
182D 54               (/home/strick/go/s):05033                  lsrb               shift background in B 2 bits: blink & underline
182E 54               (/home/strick/go/s):05034                  lsrb               now background in A is in foreground in B
                      (/home/strick/go/s):05035                  IFNE  H6309
                      (/home/strick/go/s):05036                  orr   b,a          Merge two masks together in A
                      (/home/strick/go/s):05037                  ELSE
182F 3404             (/home/strick/go/s):05038                  pshs  b
1831 AAE0             (/home/strick/go/s):05039                  ora   ,s+
                      (/home/strick/go/s):05040                  ENDC
1833 39               (/home/strick/go/s):05041                  rts   
                      (/home/strick/go/s):05042         
                      (/home/strick/go/s):05043         * Update Gfx Cursor - UPDATE Window 'hidden' call version - Put it on scrn
1834 3430             (/home/strick/go/s):05044         L15BF    pshs  y,x            Preserve window & screen tbl ptrs
1836 AE30             (/home/strick/go/s):05045                  ldx   Wt.STbl,y      Get scrn tbl ptr from window tbl
1838 9C30             (/home/strick/go/s):05046                  cmpx  <$0030         Same as current screen?
183A 2618             (/home/strick/go/s):05047                  bne   L15E0          No, leave
183C D63A             (/home/strick/go/s):05048                  ldb   <$003A         Get Gfx cursor XOR'd on/off flag
183E 2614             (/home/strick/go/s):05049                  bne   L15E0          It's already on screen, exit
1840 E6A818           (/home/strick/go/s):05050                  ldb   Wt.GBlk,y      Get memory block # of gfx cursor
1843 D744             (/home/strick/go/s):05051                  stb   <$0044         Save in Grfdrv mem
1845 270D             (/home/strick/go/s):05052                  beq   L15E0          If there is no Gfx cursor defined, exit
1847 8D5D             (/home/strick/go/s):05053                  bsr   L017C          Map in Gfx cursor GP buffer block
1849 10AEA819         (/home/strick/go/s):05054                  ldy   Wt.GOff,y      Get ptr to actual shape in block
184D 109F45           (/home/strick/go/s):05055                  sty   <$0045         Save it in Grfdrv mem
1850 8D1F             (/home/strick/go/s):05056                  bsr   L15FE          XOR mouse cursor onto screen (put it on)
1852 0C3A             (/home/strick/go/s):05057                  inc   <$003A         Set Gfx cursor XOR flag to 'ON'
1854 35B0             (/home/strick/go/s):05058         L15E0    puls  pc,y,x         Restore regs & return
                      (/home/strick/go/s):05059         
                      (/home/strick/go/s):05060         * Update Gfx cursor - from within GRFDRV - Take old one off scrn
1856 3430             (/home/strick/go/s):05061         L15E2    pshs  y,x
1858 AE30             (/home/strick/go/s):05062                  ldx   Wt.STbl,y
185A 9C30             (/home/strick/go/s):05063                  cmpx  <$0030
185C 2611             (/home/strick/go/s):05064                  bne   L15FC
185E D63A             (/home/strick/go/s):05065                  ldb   <$003A       is the Gfx cursor on the screen?
1860 270D             (/home/strick/go/s):05066                  beq   L15FC        no, exit.
1862 D644             (/home/strick/go/s):05067                  ldb   <$0044       grab gfx cursor GP buffer number
1864 27EE             (/home/strick/go/s):05068                  beq   L15E0        if none, exit
1866 8D3E             (/home/strick/go/s):05069                  bsr   L017C        map in get/put buffer
1868 109E45           (/home/strick/go/s):05070                  ldy   <$0045       grab pointer to cursor in block
186B 8D04             (/home/strick/go/s):05071                  bsr   L15FE        XOR mouse cursor onto screen (take off old one)
186D 0F3A             (/home/strick/go/s):05072                  clr   <$003A       Set Gfx cursor XOR flag to 'OFF'
186F 35B0             (/home/strick/go/s):05073         L15FC    puls  pc,y,x
                      (/home/strick/go/s):05074         
                      (/home/strick/go/s):05075         * XOR mouse cursor onto screen
1871 D660             (/home/strick/go/s):05076         L15FE    ldb   <$0060         Get screen type
1873 2B30             (/home/strick/go/s):05077                  bmi   L1634          Text; exit
1875 DC4F             (/home/strick/go/s):05078                  ldd   <$004F         Get original X & Y sizes
1877 9E51             (/home/strick/go/s):05079                  ldx   <$0051
1879 3416             (/home/strick/go/s):05080                  pshs  x,d            Save them
187B DC64             (/home/strick/go/s):05081                  ldd   <$0064         Get original Pset & Lset vectors
187D 9E68             (/home/strick/go/s):05082                  ldx   <$0068
187F 3416             (/home/strick/go/s):05083                  pshs  x,d            Save them
1881 DC41             (/home/strick/go/s):05084                  ldd   <$0041         Get screen address of Gfx cursor
1883 DD72             (/home/strick/go/s):05085                  std   <$0072         Save as GP buffer start position
1885 D643             (/home/strick/go/s):05086                  ldb   <$0043         Get pixel mask for start of Gfx cursor
1887 D774             (/home/strick/go/s):05087                  stb   <$0074         Save as GP buffer pixel mask start
1889 8E631E           (/home/strick/go/s):05088                  ldx   #GrfStrt+L1F9E Force PSET to 'off'
188C 9F64             (/home/strick/go/s):05089                  stx   <$0064
188E 8E58D0           (/home/strick/go/s):05090                  ldx   #GrfStrt+L1FA3 For LSET to XOR
1891 9F68             (/home/strick/go/s):05091                  stx   <$0068
1893 17F65D           (/home/strick/go/s):05092                  lbsr  L0E14          set up for different STY in buffer/screen
1896 17F6E7           (/home/strick/go/s):05093                  lbsr  L0E97          go put the cursor on-screen
1899 3516             (/home/strick/go/s):05094                  puls  x,d            Restore original vectors
189B DD64             (/home/strick/go/s):05095                  std   <$0064
189D 9F68             (/home/strick/go/s):05096                  stx   <$0068
189F 3516             (/home/strick/go/s):05097                  puls  x,d            Restore original X/Y sizes
18A1 DD4F             (/home/strick/go/s):05098                  std   <$004F
18A3 9F51             (/home/strick/go/s):05099                  stx   <$0051
18A5 39               (/home/strick/go/s):05100         L1634    rts                  return
                      (/home/strick/go/s):05101         
                      (/home/strick/go/s):05102         * Bring in Get/Put buffer memory bank - put into GRFDRV DAT Img @ <$87
                      (/home/strick/go/s):05103         * Entry: B=MMU block # to get
18A6 0F89             (/home/strick/go/s):05104         L017C    clr   <$89         Make sure System Global is first
18A8 D78A             (/home/strick/go/s):05105                  stb   <$8A         Save Block number of Get/Put buffer
18AA F7FFA9           (/home/strick/go/s):05106                  stb   >$FFA9       Save it to MMU as well
18AD 39               (/home/strick/go/s):05107                  rts                Return
                      (/home/strick/go/s):05108         
                      (/home/strick/go/s):05109         * LSet entry point
18AE 8E58CC           (/home/strick/go/s):05110         L06A4    ldx   #GrfStrt+L06BC  Point to LSET vector table
18B1 E62A             (/home/strick/go/s):05111                  ldb   Wt.LSet,y    Get LSet type
18B3 C103             (/home/strick/go/s):05112                  cmpb  #$03         If higher than 3, error
18B5 2209             (/home/strick/go/s):05113                  bhi   L06B7
18B7 E685             (/home/strick/go/s):05114                  ldb   b,x          Get vector offset
18B9 3A               (/home/strick/go/s):05115                  abx                Calculate vector
18BA AFA814           (/home/strick/go/s):05116                  stx   Wt.LVec,y    Save LSet table vector
18BD 7E5176           (/home/strick/go/s):05117                  jmp   >GrfStrt+L0F78 Return to system without error
                      (/home/strick/go/s):05118         
18C0 53               (/home/strick/go/s):05119         L06B7    comb               Return to system with Illegal argument error
18C1 C6BB             (/home/strick/go/s):05120                  ldb   #E$IllArg
18C3 7E5177           (/home/strick/go/s):05121                  jmp   >GrfStrt+SysRet
                      (/home/strick/go/s):05122         
                      (/home/strick/go/s):05123         * Retain "magic" spacing
                      (/home/strick/go/s):05124                  IFEQ  H6309
     18C6             (/home/strick/go/s):05125         L1FA3b   equ   *
18C6 3402             (/home/strick/go/s):05126                  pshs  a
18C8 EAE0             (/home/strick/go/s):05127                  orb   ,s+
18CA 2011             (/home/strick/go/s):05128                  bra   L1FA3c
                      (/home/strick/go/s):05129                  ENDC 
                      (/home/strick/go/s):05130         
                      (/home/strick/go/s):05131         * LSet vector table
18CC 0B               (/home/strick/go/s):05132         L06BC    fcb   L1FA9-L06BC    Normal vector
18CD 09               (/home/strick/go/s):05133                  fcb   L1FA7-L06BC    AND logical vector
18CE 14               (/home/strick/go/s):05134                  fcb   L1FAE-L06BC    OR logical vector
18CF 04               (/home/strick/go/s):05135                  fcb   L1FA3-L06BC    XOR logical vector
                      (/home/strick/go/s):05136         * LSET routines here: affecting how pixels go on screen
                      (/home/strick/go/s):05137         * The proper vector is stored in the window table @ <$14,y
                      (/home/strick/go/s):05138         * Entry: X=address of pixel to change
                      (/home/strick/go/s):05139         *        B=Bit mask of specific pixel to change (1, 2 or 4 bits)
                      (/home/strick/go/s):05140         *        A=Bits to actually set (color palette #)
                      (/home/strick/go/s):05141         *        A&B are also both preserved on the stack by the calling routine
                      (/home/strick/go/s):05142         * XOR
18D0 A884             (/home/strick/go/s):05143         L1FA3    eora  ,x             EOR new bits onto what is on screen
18D2 A784             (/home/strick/go/s):05144                  sta   ,x             and save onto screen
18D4 39               (/home/strick/go/s):05145                  rts                5 bytes
                      (/home/strick/go/s):05146         * AND
18D5 A484             (/home/strick/go/s):05147         L1FA7    anda  ,x             AND new color onto what is on screen
                      (/home/strick/go/s):05148         * Normal
18D7 53               (/home/strick/go/s):05149         L1FA9    comb                 Make 'hole' for transparent putting
18D8 E484             (/home/strick/go/s):05150                  andb  ,x             Create mask of bits already on screen
                      (/home/strick/go/s):05151                  IFNE  H6309
                      (/home/strick/go/s):05152                  orr   a,b            Merge color & bit mask
                      (/home/strick/go/s):05153                  ELSE
18DA 12               (/home/strick/go/s):05154                  nop                  keep byte count the same
18DB 20E9             (/home/strick/go/s):05155                  bra   L1FA3b
                      (/home/strick/go/s):05156                  ENDC
18DD E784             (/home/strick/go/s):05157         L1FA3c   stb   ,x             Save new byte
18DF 39               (/home/strick/go/s):05158                  rts
                      (/home/strick/go/s):05159         * OR
18E0 AA84             (/home/strick/go/s):05160         L1FAE    ora   ,x             Merge new color onto screen
18E2 A784             (/home/strick/go/s):05161                  sta   ,x             and store them
18E4 39               (/home/strick/go/s):05162         L1FB2    rts                  return
                      (/home/strick/go/s):05163         
                      (/home/strick/go/s):05164         * do a word of pixels at one time
                      (/home/strick/go/s):05165         * This is an ALAN DEKOK MAGIC ROUTINE! Do NOT CHANGE ANYTHING
                      (/home/strick/go/s):05166         * Likewise, do NOT change any offsets at the normal pixel routines at
                      (/home/strick/go/s):05167         * L1FA3 and following!
     18E5             (/home/strick/go/s):05168         Pix.XOR  equ   *
                      (/home/strick/go/s):05169                  IFNE  H6309
                      (/home/strick/go/s):05170                  eord  ,x           offset 0
                      (/home/strick/go/s):05171                  ELSE
18E5 12               (/home/strick/go/s):05172                  nop
18E6 2015             (/home/strick/go/s):05173                  bra  PEOR         keep byte count same
                      (/home/strick/go/s):05174                  ENDC
18E8 ED81             (/home/strick/go/s):05175         PXOR2    std   ,x++
18EA 39               (/home/strick/go/s):05176                  rts
                      (/home/strick/go/s):05177         
     18EB             (/home/strick/go/s):05178         Pix.AND  equ   *
                      (/home/strick/go/s):05179                  IFNE  H6309
                      (/home/strick/go/s):05180                  andd  ,x           offset 6
                      (/home/strick/go/s):05181                  ELSE
18EB 12               (/home/strick/go/s):05182                  nop
18EC 2015             (/home/strick/go/s):05183                  bra  PAND
                      (/home/strick/go/s):05184                  ENDC
18EE ED81             (/home/strick/go/s):05185         PAND2    std   ,x++
18F0 39               (/home/strick/go/s):05186                  rts
                      (/home/strick/go/s):05187         
18F1 414C414E44       (/home/strick/go/s):05188                  fcc   /ALAND/      space fillers 
                      (/home/strick/go/s):05189         
     18F6             (/home/strick/go/s):05190         Pix.OR   equ   *
                      (/home/strick/go/s):05191                  IFNE  H6309
                      (/home/strick/go/s):05192                  ord   ,x           offset 17
                      (/home/strick/go/s):05193                  ELSE
18F6 AA84             (/home/strick/go/s):05194                  ora   ,x
18F8 EA01             (/home/strick/go/s):05195                  orb   1,x
                      (/home/strick/go/s):05196                  ENDC
18FA ED81             (/home/strick/go/s):05197                  std   ,x++
18FC 39               (/home/strick/go/s):05198                  rts
                      (/home/strick/go/s):05199         * End of ATD's magic routine!
                      (/home/strick/go/s):05200                  IFEQ  H6309
18FD A884             (/home/strick/go/s):05201         PEOR     eora  ,x
18FF E801             (/home/strick/go/s):05202                  eorb  1,x
1901 20E5             (/home/strick/go/s):05203                  bra   PXOR2
1903 A484             (/home/strick/go/s):05204         PAND     anda  ,x
1905 E401             (/home/strick/go/s):05205                  andb  1,x
1907 20E5             (/home/strick/go/s):05206                  bra   PAND2
                      (/home/strick/go/s):05207                  ENDC
                      (/home/strick/go/s):05208         
                      (/home/strick/go/s):05209         * Point entry point
1909 8D18             (/home/strick/go/s):05210         L1635    bsr   I.point      map screen and PSET block in, scale coordinates
190B 2541             (/home/strick/go/s):05211                  bcs   L1688          Error scaling, exit with it
190D 17FB06           (/home/strick/go/s):05212                  lbsr  L1E9D          Get:X=ptr to byte on screen,B=bit mask for pixel
1910 9661             (/home/strick/go/s):05213                  lda   <$0061         Get foreground color
                      (/home/strick/go/s):05214                  IFNE  H6309
                      (/home/strick/go/s):05215                  ldw   <$68           Get LSET vector
                      (/home/strick/go/s):05216                  ELSE
1912 3410             (/home/strick/go/s):05217                  pshs  x
1914 9E68             (/home/strick/go/s):05218                  ldx   <$68
1916 9FB5             (/home/strick/go/s):05219                  stx   <$B5
1918 3510             (/home/strick/go/s):05220                  puls  x
                      (/home/strick/go/s):05221                  ENDC
191A ADC4             (/home/strick/go/s):05222                  jsr   ,u             Put pixel on screen
191C 202F             (/home/strick/go/s):05223                  bra   L1687          Exit without error
                      (/home/strick/go/s):05224         
                      (/home/strick/go/s):05225         * Line entry point
                      (/home/strick/go/s):05226         * ATD: Line/bar/box set up screen: saves ~40 bytes, adds 6 clock cycles
191E 170918           (/home/strick/go/s):05227         I.line   lbsr  L1DFD        scale 2nd set of coordinates
1921 253B             (/home/strick/go/s):05228                  bcs   L16B0        error: exit to a convenient RTS
1923 1702CB           (/home/strick/go/s):05229         I.point  lbsr  L1884          map in window, and verify it's graphics
1926 DE64             (/home/strick/go/s):05230                  ldu   <$64           get PSET vector for line/bar/box routines
1928 1608EC           (/home/strick/go/s):05231                  lbra  L1DF6          Scale 1st set of coords
                      (/home/strick/go/s):05232         
                      (/home/strick/go/s):05233         * Line entry point
192B 8DF1             (/home/strick/go/s):05234         L1654    bsr   I.line       internal line set up routine
192D 251F             (/home/strick/go/s):05235                  bcs   L1688          Error; exit
                      (/home/strick/go/s):05236                  IFNE  H6309
                      (/home/strick/go/s):05237                  ldw   <$68           Get LSET vector
                      (/home/strick/go/s):05238                  ELSE
192F DC68             (/home/strick/go/s):05239                  ldd   <$68
1931 DDB5             (/home/strick/go/s):05240                  std   <$B5
                      (/home/strick/go/s):05241                  ENDC
1933 DC49             (/home/strick/go/s):05242                  ldd   <$0049         Get 'working' Y coordinate
1935 10934D           (/home/strick/go/s):05243                  cmpd  <$004D         Same as current Y coordinate?
1938 2604             (/home/strick/go/s):05244                  bne   L1679          No, check X
193A 8D27             (/home/strick/go/s):05245                  bsr   L168B          Do 'fast' horizontal line
193C 200F             (/home/strick/go/s):05246                  bra   L1687          Return to system without error
                      (/home/strick/go/s):05247         
193E DC47             (/home/strick/go/s):05248         L1679    ldd   <$0047         Get 'working' X coordinate
1940 10934B           (/home/strick/go/s):05249                  cmpd  <$004B         Same as current X coordinate?
1943 2605             (/home/strick/go/s):05250                  bne   L1684          No, use 'normal' line routine
1945 170102           (/home/strick/go/s):05251                  lbsr  L16F4          Do 'fast' vertical line
1948 2003             (/home/strick/go/s):05252                  bra   L1687          Return to system without error
                      (/home/strick/go/s):05253         
194A 170156           (/home/strick/go/s):05254         L1684    lbsr  L1724          Do 'normal' line routine
194D 5F               (/home/strick/go/s):05255         L1687    clrb                 No error
194E 7E5177           (/home/strick/go/s):05256         L1688    jmp   >GrfStrt+SysRet Return to system
                      (/home/strick/go/s):05257         
                      (/home/strick/go/s):05258         * Swap start & end X coords if backwards ($47=Start, $4B=End)
1951 DC4B             (/home/strick/go/s):05259         L16A3    ldd   <$004B         Get end X coord
1953 109347           (/home/strick/go/s):05260                  cmpd  <$0047         Compare with start X coord
1956 2C06             (/home/strick/go/s):05261                  bge   L16B0          Proper order, leave
1958 9E47             (/home/strick/go/s):05262         L16AA    ldx   <$0047         Swap the 2 X coord's around
195A DD47             (/home/strick/go/s):05263                  std   <$0047
195C 9F4B             (/home/strick/go/s):05264                  stx   <$004B
195E 39               (/home/strick/go/s):05265         L16B0    rts   
                      (/home/strick/go/s):05266         
                      (/home/strick/go/s):05267         * # of pixels/byte table
195F 08               (/home/strick/go/s):05268         L16B1    fcb   $08            640x200x2 color
1960 04               (/home/strick/go/s):05269                  fcb   $04            320x200x4 color
1961 04               (/home/strick/go/s):05270                  fcb   $04            640x200x4 color
1962 02               (/home/strick/go/s):05271                  fcb   $02            320x200x16 color
                      (/home/strick/go/s):05272         
                      (/home/strick/go/s):05273         * Fast horizontal line routine
1963 8DEC             (/home/strick/go/s):05274         L168B    bsr   L16A3          Make sure X coords in right order
1965 17096A           (/home/strick/go/s):05275         L168D    lbsr  L1EF1          <$79=Start of byte pixel mask, <$77=Shift vector
                      (/home/strick/go/s):05276         * Entry point from FFILL
1968 DC4B             (/home/strick/go/s):05277         L1690    ldd   <$004B         Get end X coord of line
196A 9347             (/home/strick/go/s):05278                  subd  <$0047         # pixels wide line is
                      (/home/strick/go/s):05279                  IFNE  H6309
                      (/home/strick/go/s):05280                  incd                 +1 (base 1)
                      (/home/strick/go/s):05281                  ELSE
196C C30001           (/home/strick/go/s):05282                  addd  #1
                      (/home/strick/go/s):05283                  ENDC
196F DD99             (/home/strick/go/s):05284                  std   <$0099         Save # of pixels left
1971 17FAA2           (/home/strick/go/s):05285                  lbsr  L1E9D          X=Mem ptr to 1st pixel, B=Mask for start pixel
1974 9661             (/home/strick/go/s):05286                  lda   <$0061         Get foreground color mask (full byte)
1976 109E99           (/home/strick/go/s):05287                  ldy   <$0099         Get # pixels to do
                      (/home/strick/go/s):05288         
                      (/home/strick/go/s):05289         * "Fast" horizontal line draw
                      (/home/strick/go/s):05290         * Entry: Y = # pixels left
                      (/home/strick/go/s):05291         *        A = Color bit mask
                      (/home/strick/go/s):05292         *        X = Screen address
                      (/home/strick/go/s):05293         *        B = mask for first pixel
                      (/home/strick/go/s):05294         *        W = address of LSET routine
                      (/home/strick/go/s):05295         *        U = address of PSET routine
1979 3476             (/home/strick/go/s):05296         L16B5    pshs  u,y,x,d        Preserve X & D, and reserve 4 bytes on stack
197B A766             (/home/strick/go/s):05297                  sta   6,s            Save Full byte color mask
197D 8E595E           (/home/strick/go/s):05298                  ldx   #GrfStrt+L16B1-1  Point to # pixels/byte table
1980 D660             (/home/strick/go/s):05299                  ldb   <$0060         Get screen type
1982 4F               (/home/strick/go/s):05300                  clra                 Clear high byte
1983 E685             (/home/strick/go/s):05301                  ldb   b,x            Get # pixels/byte for screen type
1985 ED64             (/home/strick/go/s):05302                  std   4,s            Save overtop original Y on stack
1987 3516             (/home/strick/go/s):05303                  puls  x,d            Restore Screen ptr & Color/pixel masks
1989 5D               (/home/strick/go/s):05304                  tstb               is the pixel mask at the high bit of the byte?
198A 2B14             (/home/strick/go/s):05305                  bmi   L16D5        yes, start off with a check for TFM
                      (/home/strick/go/s):05306         *         bra   L16C9          Start drawing
198C 8C               (/home/strick/go/s):05307                  fcb   $8C          skip 2 bytes: same cycle time, 1 byte shorter
                      (/home/strick/go/s):05308         
                      (/home/strick/go/s):05309         * Stack now has: 0,s = # pixels per byte (2,4 or 8, 16 bit # for Y compare)
                      (/home/strick/go/s):05310         *                2,s = Color mask
                      (/home/strick/go/s):05311         *                3,s = Garbage? (LSB of U)
                      (/home/strick/go/s):05312         *                Y   = # pixels left in line
                      (/home/strick/go/s):05313         * Put single pixels on the screen
198D D679             (/home/strick/go/s):05314         L16C7    ldb   <$0079         Get bit mask for 1st pixel in byte
198F DD97             (/home/strick/go/s):05315         L16C9    std   <$97           Save current color & bit masks
1991 ADC4             (/home/strick/go/s):05316                  jsr   ,u           put pixel on the screen
1993 313F             (/home/strick/go/s):05317                  leay  -1,y           Bump line pixel count down by 1
1995 102700AF         (/home/strick/go/s):05318                  lbeq  L16F2          Done line, exit
1999 DC97             (/home/strick/go/s):05319                  ldd   <$97           Get color & bit masks back
                      (/home/strick/go/s):05320         * Set up bit pattern for next pixel, including changing byte position
199B BD5A79           (/home/strick/go/s):05321                  jsr   >GrfStrt+L1F08  Set up for next pixel (scrn address & bit mask)
199E 2AEF             (/home/strick/go/s):05322                  bpl   L16C9          (1st bit would be set if next byte, keep going)
                      (/home/strick/go/s):05323         * If on last byte, Y<#pixels per byte, so will use above loop
                      (/home/strick/go/s):05324         * If not on last byte, Y>#pixels per byte, so can 'cheat' & do 1 byte at a
                      (/home/strick/go/s):05325         * time below
19A0 10ACE4           (/home/strick/go/s):05326         L16D5    cmpy  ,s             Done pixel count for current byte (or last byte)
19A3 25E8             (/home/strick/go/s):05327                  blo   L16C7          No, keep going
                      (/home/strick/go/s):05328         * Draw remainder of line 1 full byte (2,4 or 8 pixels) at a time
                      (/home/strick/go/s):05329         * ATD: GrfStrt+L1FA9 is the normal PUT (no fancy stuff) routine
19A5 1F20             (/home/strick/go/s):05330         L16D7    tfr   y,d          get number of pixels left into D
                      (/home/strick/go/s):05331                  IFNE  H6309
                      (/home/strick/go/s):05332                  divd  1,s          divide it by the number of pixels in 1 byte
                      (/home/strick/go/s):05333                  ELSE
19A7 6FE2             (/home/strick/go/s):05334                  clr   ,-s
19A9 6CE4             (/home/strick/go/s):05335         L16D7b   inc   ,s
19AB E062             (/home/strick/go/s):05336                  subb  2,s
19AD 8200             (/home/strick/go/s):05337                  sbca  #0
19AF 24F8             (/home/strick/go/s):05338                  bcc   L16d7b
19B1 EB62             (/home/strick/go/s):05339                  addb  2,s          
19B3 1F98             (/home/strick/go/s):05340                  tfr   b,a
19B5 3504             (/home/strick/go/s):05341                  puls  b
19B7 5A               (/home/strick/go/s):05342                  decb
                      (/home/strick/go/s):05343                  ENDC
19B8 3402             (/home/strick/go/s):05344                  pshs  a            save remainder for later
19BA 6FE2             (/home/strick/go/s):05345                  clr   ,-s          and make remainder on-stack 16-bit
19BC 3404             (/home/strick/go/s):05346                  pshs  b            save number of bytes to do
                      (/home/strick/go/s):05347         
                      (/home/strick/go/s):05348         * now we have: 
                      (/home/strick/go/s):05349         * B   = number of bytes to do a full byte at a time
                      (/home/strick/go/s):05350         * 0,S = number of bytes to do a full byte at a time
                      (/home/strick/go/s):05351         * 1,s = remainder of pixels in last byte to do
                      (/home/strick/go/s):05352         * 3,s = pixels per byte
                      (/home/strick/go/s):05353         * 5,s = color mask
                      (/home/strick/go/s):05354         
19BE 861E             (/home/strick/go/s):05355                  lda   #(GrfStrt+L1F9E)&$00FF  point to NO pset vector
19C0 9165             (/home/strick/go/s):05356                  cmpa  <$64+1       is it just a normal color routine?
19C2 266E             (/home/strick/go/s):05357                  bne   L16E2        no, it's a PSET, so go do it especially
                      (/home/strick/go/s):05358         
                      (/home/strick/go/s):05359                  IFNE  H6309
                      (/home/strick/go/s):05360                  cmpw  #GrfStrt+L1FA9  is it the normal PUT routine?
                      (/home/strick/go/s):05361                  ELSE
19C4 3410             (/home/strick/go/s):05362                  pshs  x
19C6 9EB5             (/home/strick/go/s):05363                  ldx   <$B5
19C8 8C58D7           (/home/strick/go/s):05364                  cmpx  #GrfStrt+L1FA9
19CB 3510             (/home/strick/go/s):05365                  puls  x
                      (/home/strick/go/s):05366                  ENDC
19CD 262C             (/home/strick/go/s):05367                  bne   L16E0        no, go use old method
                      (/home/strick/go/s):05368         
19CF 4F               (/home/strick/go/s):05369                  clra
                      (/home/strick/go/s):05370                  IFNE  H6309
                      (/home/strick/go/s):05371                  tfr   d,w          into TFM counter register
                      (/home/strick/go/s):05372                  ENDC
19D0 3165             (/home/strick/go/s):05373                  leay  5,s          point to full byte color mask
                      (/home/strick/go/s):05374                  IFNE  H6309
                      (/home/strick/go/s):05375                  tfm   y,x+         move everything else a byte at a time
                      (/home/strick/go/s):05376         * LDW MUST go before the call to L16F2!
                      (/home/strick/go/s):05377                  ldw   #GrfSTrt+L1FA9  and restore vector to normal PUT routine
                      (/home/strick/go/s):05378                  ELSE
19D2 3450             (/home/strick/go/s):05379                  pshs  x,u
19D4 1F13             (/home/strick/go/s):05380                  tfr   x,u
19D6 1F01             (/home/strick/go/s):05381                  tfr   d,x
19D8 A6A4             (/home/strick/go/s):05382                  lda   ,y
19DA A7C0             (/home/strick/go/s):05383         L16DEb   sta   ,u+
19DC 301F             (/home/strick/go/s):05384                  leax  -1,x
19DE 26FA             (/home/strick/go/s):05385                  bne   L16DEb
19E0 CC58D7           (/home/strick/go/s):05386                  ldd   #GrfSTrt+L1FA9
19E3 DDB5             (/home/strick/go/s):05387                  std   <$B5
19E5 EFE4             (/home/strick/go/s):05388                  stu   ,s
19E7 3550             (/home/strick/go/s):05389                  puls  x,u
                      (/home/strick/go/s):05390                  ENDC
19E9 3504             (/home/strick/go/s):05391         L16DE    puls  b            restore number of full bytes to do
19EB A663             (/home/strick/go/s):05392                  lda   3,s          get number of pixels per byte
19ED 3D               (/home/strick/go/s):05393                  mul                get number of pixels done
19EE D347             (/home/strick/go/s):05394                  addd  <$47         add to current X coordinate
19F0 DD47             (/home/strick/go/s):05395                  std   <$47         and save as current X coordinate
19F2 10AEE1           (/home/strick/go/s):05396         L16DF    ldy   ,s++         restore 16-bit remainder of pixels: GET CC.Z bit
19F5 2751             (/home/strick/go/s):05397                  beq   L16F2        exit quickly if done all of the bytes
19F7 A662             (/home/strick/go/s):05398                  lda   2,s          get pixel mask
19F9 2092             (/home/strick/go/s):05399                  bra   L16C7        and do the last few pixels of the line
                      (/home/strick/go/s):05400         
19FB 54               (/home/strick/go/s):05401         L16E0    lsrb               divide by 2
19FC 2734             (/home/strick/go/s):05402                  beq   L16E2        only 1 pixel to do, go do it.
                      (/home/strick/go/s):05403         
                      (/home/strick/go/s):05404         * here we have 2 or more pixels to do full-byte, so we go to a method
                      (/home/strick/go/s):05405         * using D: much magic here!
                      (/home/strick/go/s):05406         * W = pointer to LSET routine
                      (/home/strick/go/s):05407         * U = pointer to routine that does ANDR B,A  JMP ,W
                      (/home/strick/go/s):05408                  IFNE  H6309
                      (/home/strick/go/s):05409                  subw  #GrfStrt+L1FA3  point to start of LSET routines
                      (/home/strick/go/s):05410                  ELSE
19FE 3406             (/home/strick/go/s):05411                  pshs  d
1A00 DCB5             (/home/strick/go/s):05412                  ldd   <$B5
1A02 8358D0           (/home/strick/go/s):05413                  subd  #GrfSTrt+L1FA3
1A05 DDB5             (/home/strick/go/s):05414                  std   <$B5
1A07 3506             (/home/strick/go/s):05415                  puls  d
                      (/home/strick/go/s):05416                  ENDC
1A09 2702             (/home/strick/go/s):05417                  beq   pix.do       skip fancy stuff for XOR
                      (/home/strick/go/s):05418                  IFNE  H6309
                      (/home/strick/go/s):05419                  incf               go up by one byte
                      (/home/strick/go/s):05420                  ELSE
1A0B 0CB6             (/home/strick/go/s):05421                  inc   <$B6
                      (/home/strick/go/s):05422                  ENDC
1A0D CE58E5           (/home/strick/go/s):05423         pix.do   ldu   #GrfStrt+Pix.XOR  point to double-byte pixel routines
                      (/home/strick/go/s):05424                  IFNE  H6309
                      (/home/strick/go/s):05425                  leau  f,u          point U to the appropriate routine
                      (/home/strick/go/s):05426                  tfr   b,f          move counter to a register
                      (/home/strick/go/s):05427                  ELSE
1A10 3402             (/home/strick/go/s):05428                  pshs  a
1A12 96B6             (/home/strick/go/s):05429                  lda   <$B6
1A14 33C6             (/home/strick/go/s):05430                  leau  a,u
1A16 D7B6             (/home/strick/go/s):05431                  stb   <$B6
1A18 3502             (/home/strick/go/s):05432                  puls  a
                      (/home/strick/go/s):05433                  ENDC
1A1A A665             (/home/strick/go/s):05434         pix.next lda   5,s          grab full-byte color mask
1A1C 1F89             (/home/strick/go/s):05435                  tfr   a,b          make D=color mask
1A1E ADC4             (/home/strick/go/s):05436                  jsr   ,u           call 2-byte routine
                      (/home/strick/go/s):05437                  IFNE  H6309
                      (/home/strick/go/s):05438                  decf
                      (/home/strick/go/s):05439                  ELSE
1A20 0AB6             (/home/strick/go/s):05440                  dec   <$B6
                      (/home/strick/go/s):05441                  ENDC
1A22 26F6             (/home/strick/go/s):05442                  bne   pix.next
                      (/home/strick/go/s):05443                  IFNE  H6309
                      (/home/strick/go/s):05444                  ldw   <$68         get LSET vector
                      (/home/strick/go/s):05445                  ELSE
1A24 DE68             (/home/strick/go/s):05446                  ldu   <$68
1A26 DFB5             (/home/strick/go/s):05447                  stu   <$B5
                      (/home/strick/go/s):05448                  ENDC
1A28 DE64             (/home/strick/go/s):05449                  ldu   <$64         and PSET vector again
1A2A E6E4             (/home/strick/go/s):05450                  ldb   ,s           get number of bytes left to do: do NOT do PULS!
1A2C C401             (/home/strick/go/s):05451                  andb  #1           check for odd-numbered bytes
1A2E 27B9             (/home/strick/go/s):05452                  beq   L16DE        if done all the bytes, exit: does a PULS B
1A30 E7E4             (/home/strick/go/s):05453                  stb   ,s           save the count of bytes to do: =1, and do one byte
                      (/home/strick/go/s):05454         
                      (/home/strick/go/s):05455         * PSET+LSET full byte line draws come here
1A32 C6FF             (/home/strick/go/s):05456         L16E2    ldb   #$FF           Full byte bit mask
1A34 A665             (/home/strick/go/s):05457                  lda   5,s            Get color mask
1A36 ADC4             (/home/strick/go/s):05458                  jsr   ,u           put the pixel on the screen
1A38 3001             (/home/strick/go/s):05459                  leax  1,x            Bump screen ptr up by 1
1A3A EC63             (/home/strick/go/s):05460                  ldd   3,s          get number of pixels per byte
1A3C D347             (/home/strick/go/s):05461                  addd  <$0047         Update 'working' X-cord to reflect pixels we did
1A3E DD47             (/home/strick/go/s):05462                  std   <$0047         Save result
1A40 6AE4             (/home/strick/go/s):05463                  dec   ,s           decrement counter
1A42 26EE             (/home/strick/go/s):05464                  bne   L16E2        continue until done
1A44 3261             (/home/strick/go/s):05465                  leas  1,s          kill the counter off of the stack
1A46 20AA             (/home/strick/go/s):05466                  bra   L16DF        restore 16-bit pixel remainder, and do last byte
                      (/home/strick/go/s):05467         
1A48 3596             (/home/strick/go/s):05468         L16F2    puls  pc,x,d         Restore regs & return when done
                      (/home/strick/go/s):05469         
                      (/home/strick/go/s):05470         * Fast vertical line routine
1A4A 8D1F             (/home/strick/go/s):05471         L16F4    bsr   L1716          Make sure Y coords in right order
1A4C DC4D             (/home/strick/go/s):05472         L16F6    ldd   <$004D         Calculate height of line in pixels
1A4E D04A             (/home/strick/go/s):05473                  subb  <$004A
1A50 5C               (/home/strick/go/s):05474                  incb                 Base 1
1A51 DD99             (/home/strick/go/s):05475                  std   <$0099         Save height
1A53 17F9C0           (/home/strick/go/s):05476                  lbsr  L1E9D          Calculate screen address & pixel mask
1A56 9661             (/home/strick/go/s):05477                  lda   <$0061         Get color mask
1A58 DD97             (/home/strick/go/s):05478                  std   <$0097         Save color & pixel masks
1A5A 109E99           (/home/strick/go/s):05479                  ldy   <$0099         Get Y pixel counter
1A5D DC97             (/home/strick/go/s):05480         L1707    ldd   <$0097         Get color & pixel mask
1A5F ADC4             (/home/strick/go/s):05481                  jsr   ,u             Put pixel on screen
1A61 D663             (/home/strick/go/s):05482                  ldb   <$0063         Get # bytes to next line on screen
1A63 3A               (/home/strick/go/s):05483                  abx                  Point to it
1A64 0C4A             (/home/strick/go/s):05484                  inc   <$004A         Bump up working Y coord
1A66 313F             (/home/strick/go/s):05485                  leay  -1,y           Dec. Y counter
1A68 26F3             (/home/strick/go/s):05486                  bne   L1707          Do until done
1A6A 39               (/home/strick/go/s):05487                  rts   
                      (/home/strick/go/s):05488         
                      (/home/strick/go/s):05489         * Swap Y coords so lower is first
1A6B DC4D             (/home/strick/go/s):05490         L1716    ldd   <$004D         Get current Y coord
1A6D 109349           (/home/strick/go/s):05491                  cmpd  <$0049         Compare with destination Y coord
1A70 2C06             (/home/strick/go/s):05492                  bge   L1723          If higher or same, done
1A72 9E49             (/home/strick/go/s):05493         L171D    ldx   <$0049
1A74 DD49             (/home/strick/go/s):05494                  std   <$0049
1A76 9F4D             (/home/strick/go/s):05495                  stx   <$004D
1A78 39               (/home/strick/go/s):05496         L1723    rts   
                      (/home/strick/go/s):05497         
                      (/home/strick/go/s):05498         * Next pixel calcs - See if <$47 could not be done outside the loop by a
                      (/home/strick/go/s):05499         *  simple ADDD (if needed at all)
                      (/home/strick/go/s):05500         * If it is needed in loop for some, simply have the ones that don't need to
                      (/home/strick/go/s):05501         *  come in at L1F0E instead
                      (/home/strick/go/s):05502         * Called from Fast Horizontal Line L16C9, Normal Line L177D, Flood Fill L1CD4
                      (/home/strick/go/s):05503         * Entry: <$0047 = Working X coord
                      (/home/strick/go/s):05504         *   B=Bit mask for current pixel
                      (/home/strick/go/s):05505         *   X=Screen address
                      (/home/strick/go/s):05506         * Exit:
                      (/home/strick/go/s):05507         *   B=Bit mask for new pixel (high bit set if starting new byte)
                      (/home/strick/go/s):05508         *   X=New screen address (may not have changed)
                      (/home/strick/go/s):05509         * ATD: Could replace calls to L1F08 with jsr [>GrfMem+gr0077], and move 'lsrb's
                      (/home/strick/go/s):05510         * from L1F14 here, to the TOP of the routine.  That would convert a
                      (/home/strick/go/s):05511         * JSR >foo, JMP[>GrfMem+gr0077] to a jsr [>], saving 4 cycles, adding 2 bytes per call
                      (/home/strick/go/s):05512         * Also, the 'inc' does NOT affect the carry.
1A79 0C48             (/home/strick/go/s):05513         L1F08    inc   <$0048         Inc LSB of working X coord
1A7B 2602             (/home/strick/go/s):05514                  bne   L1F0E          Didn't wrap, skip ahead
1A7D 0C47             (/home/strick/go/s):05515                  inc   <$0047         Inc MSB of working X coord
1A7F 54               (/home/strick/go/s):05516         L1F0E    lsrb                 Shift to next bit mask
1A80 2504             (/home/strick/go/s):05517                  bcs   L1F18          Finished byte, reload for next
1A82 6E9F1177         (/home/strick/go/s):05518                  jmp   [>GrfMem+gr0077]       Shift B more (if needed) depending on scrn type
                      (/home/strick/go/s):05519         
1A86 C601             (/home/strick/go/s):05520         L1F18    ldb   #1             Bump screen address by 1
1A88 3A               (/home/strick/go/s):05521                  abx
1A89 D679             (/home/strick/go/s):05522                  ldb   <$0079         Get start single pixel mask (1,2 or 4 bits set)
1A8B 39               (/home/strick/go/s):05523                  rts   
                      (/home/strick/go/s):05524         
                      (/home/strick/go/s):05525         * Routine to move left for Normal Line L177D. Needed to get correct symmetry
1A8C 3406             (/home/strick/go/s):05526         LeftMV   pshs  d
1A8E DC47             (/home/strick/go/s):05527                  ldd   <$0047
1A90 830001           (/home/strick/go/s):05528                  subd  #1
1A93 DD47             (/home/strick/go/s):05529                  std   <$0047
1A95 3506             (/home/strick/go/s):05530                  puls  d
1A97 58               (/home/strick/go/s):05531         Lmore    lslb
1A98 2504             (/home/strick/go/s):05532                  bcs   Lmore2
1A9A 6E9F117A         (/home/strick/go/s):05533                  jmp   [>GrfMem+gr007A]
1A9E 301F             (/home/strick/go/s):05534         Lmore2   leax  -1,x
1AA0 D67C             (/home/strick/go/s):05535                  ldb   <$007C
1AA2 39               (/home/strick/go/s):05536                  rts
                      (/home/strick/go/s):05537         
                      (/home/strick/go/s):05538         * A dX or dY of 1 will step the line in the middle. The ends of the line
                      (/home/strick/go/s):05539         * are not swapped. The initial error is a function of dX or dY.
                      (/home/strick/go/s):05540         * A flag for left/right movement <$12 is used.
                      (/home/strick/go/s):05541         * Normal line routine
1AA3 0F12             (/home/strick/go/s):05542         L1724    clr   <$0012       flag for X swap
1AA5 DC4B             (/home/strick/go/s):05543                  ldd   <$004B       current X
1AA7 9347             (/home/strick/go/s):05544                  subd  <$0047       new X
1AA9 DD13             (/home/strick/go/s):05545                  std   <$0013       save dX
1AAB 2A08             (/home/strick/go/s):05546                  bpl   L1734
1AAD 0312             (/home/strick/go/s):05547                  com   <$0012       flag left movement
                      (/home/strick/go/s):05548                  IFNE  H6309
                      (/home/strick/go/s):05549                  negd               make change positive
                      (/home/strick/go/s):05550                  ELSE
1AAF 40               (/home/strick/go/s):05551                  nega
1AB0 50               (/home/strick/go/s):05552                  negb
1AB1 8200             (/home/strick/go/s):05553                  sbca  #0
                      (/home/strick/go/s):05554                  ENDC
1AB3 DD13             (/home/strick/go/s):05555                  std   <$0013       force dX>0
1AB5 D663             (/home/strick/go/s):05556         L1734    ldb   <$0063       BPL bytes/line
1AB7 4F               (/home/strick/go/s):05557                  clra  
1AB8 DD17             (/home/strick/go/s):05558                  std   <$0017       save 16-bit bytes per line
1ABA DC4D             (/home/strick/go/s):05559                  ldd   <$004D       current Y
1ABC 9349             (/home/strick/go/s):05560                  subd  <$0049       subtract working Y
1ABE DD15             (/home/strick/go/s):05561                  std   <$0015       save dY
1AC0 2A0E             (/home/strick/go/s):05562                  bpl   L1753        if positive
                      (/home/strick/go/s):05563                  IFNE  H6309
                      (/home/strick/go/s):05564                  negd               make change positive
                      (/home/strick/go/s):05565                  ELSE
1AC2 40               (/home/strick/go/s):05566                  nega
1AC3 50               (/home/strick/go/s):05567                  negb
1AC4 8200             (/home/strick/go/s):05568                  sbca  #0
                      (/home/strick/go/s):05569                  ENDC
1AC6 DD15             (/home/strick/go/s):05570                  std   <$0015       force dY>0
1AC8 DC17             (/home/strick/go/s):05571                  ldd   <$0017       up/down movement; up=+ down=-
                      (/home/strick/go/s):05572                  IFNE  H6309
                      (/home/strick/go/s):05573                  negd
                      (/home/strick/go/s):05574                  ELSE
1ACA 40               (/home/strick/go/s):05575                  nega
1ACB 50               (/home/strick/go/s):05576                  negb
1ACC 8200             (/home/strick/go/s):05577                  sbca  #0
                      (/home/strick/go/s):05578                  ENDC
1ACE DD17             (/home/strick/go/s):05579                  std   <$0017       now points the correct direction
                      (/home/strick/go/s):05580         
1AD0 DC13             (/home/strick/go/s):05581         L1753    ldd    <$0013      compare dX with dY to find larger
1AD2 109315           (/home/strick/go/s):05582                  cmpd   <$0015
1AD5 2504             (/home/strick/go/s):05583                  bcs    Ylarge
                      (/home/strick/go/s):05584                  IFNE   H6309
                      (/home/strick/go/s):05585                  asrd               error = dX/2
                      (/home/strick/go/s):05586                  bra    Lvector
1AD7                  (/home/strick/go/s):05587         Ylarge   ldd    <$0015
                      (/home/strick/go/s):05588                  negd
                      (/home/strick/go/s):05589                  asrd               error = -dY/2
                      (/home/strick/go/s):05590                  ELSE
1AD7 47               (/home/strick/go/s):05591                  asra
1AD8 56               (/home/strick/go/s):05592                  rorb
1AD9 2008             (/home/strick/go/s):05593                  bra    Lvector
1ADB DC15             (/home/strick/go/s):05594         Ylarge   ldd    <$0015
1ADD 40               (/home/strick/go/s):05595                  nega
1ADE 50               (/home/strick/go/s):05596                  negb
1ADF 8200             (/home/strick/go/s):05597                  sbca   #0
1AE1 47               (/home/strick/go/s):05598                  asra
1AE2 56               (/home/strick/go/s):05599                  rorb
                      (/home/strick/go/s):05600                  ENDC
1AE3 DD75             (/home/strick/go/s):05601         Lvector  std   <$0075       error term
1AE5 1707EA           (/home/strick/go/s):05602                  lbsr  L1EF1        Set up <$77 right bit shift vector & <$79 pixel mask
                      (/home/strick/go/s):05603         * for symmetry
1AE8 170569           (/home/strick/go/s):05604                  lbsr  L1F1D        Set up <$7A left bit shift vector & <$79 pixel mask
1AEB 17F928           (/home/strick/go/s):05605                  lbsr  L1E9D          Calculate screen addr into X & pixel mask into B
1AEE D774             (/home/strick/go/s):05606                  stb   <$0074         Save pixel mask
1AF0 D674             (/home/strick/go/s):05607         L1760    ldb   <$0074         Get pixel mask
1AF2 9661             (/home/strick/go/s):05608                  lda   <$0061         Get color mask
1AF4 ADC4             (/home/strick/go/s):05609                  jsr   ,u
1AF6 DC47             (/home/strick/go/s):05610         L1788    ldd   <$0047       finished with X movement?
1AF8 10934B           (/home/strick/go/s):05611                  cmpd  <$004B
1AFB 2608             (/home/strick/go/s):05612                  bne   L1788b
1AFD DC49             (/home/strick/go/s):05613                  ldd   <$0049       finished with Y movement?
1AFF 10934D           (/home/strick/go/s):05614                  cmpd  <$004D
1B02 2601             (/home/strick/go/s):05615                  bne   L1788b
1B04 39               (/home/strick/go/s):05616                  rts                finished fo leave
1B05 DC75             (/home/strick/go/s):05617         L1788b   ldd   <$0075       get error
1B07 2A12             (/home/strick/go/s):05618                  bpl   L177D        if >=0
1B09 D313             (/home/strick/go/s):05619                  addd  <$0013       add in dX
1B0B DD75             (/home/strick/go/s):05620                  std   <$0075       save new working error
1B0D DC17             (/home/strick/go/s):05621                  ldd   <$0017       get BPL
                      (/home/strick/go/s):05622                  IFNE  H6309
                      (/home/strick/go/s):05623                  addr  d,x
                      (/home/strick/go/s):05624                  bcs   L1779        test direction not result
                      (/home/strick/go/s):05625                  ELSE
1B0F 308B             (/home/strick/go/s):05626                  leax  d,x          will not change regCC N
1B11 2B04             (/home/strick/go/s):05627                  bmi   L1779
                      (/home/strick/go/s):05628                  ENDC       
1B13 0C4A             (/home/strick/go/s):05629                  inc   <$004A       go down one Y-line
1B15 20D9             (/home/strick/go/s):05630                  bra   L1760
                      (/home/strick/go/s):05631         
1B17 0A4A             (/home/strick/go/s):05632         L1779    dec   <$004A       decrement y-count
1B19 20D5             (/home/strick/go/s):05633                  bra   L1760
                      (/home/strick/go/s):05634         
1B1B 9315             (/home/strick/go/s):05635         L177D    subd  <$0015       take out one BPL
1B1D DD75             (/home/strick/go/s):05636                  std   <$0075       save new count
1B1F D674             (/home/strick/go/s):05637                  ldb   <$0074       grab pixel mask
1B21 0D12             (/home/strick/go/s):05638                  tst   <$12         flag for left/right movement
1B23 2607             (/home/strick/go/s):05639                  bne   L177D2
1B25 17FF51           (/home/strick/go/s):05640                  lbsr   L1F08       go right one pixel
1B28 D774             (/home/strick/go/s):05641         L177D3   stb   <$0074       save new pixel mask
1B2A 20C4             (/home/strick/go/s):05642                  bra   L1760        loop to draw it
1B2C 17FF5D           (/home/strick/go/s):05643         L177D2   lbsr  LeftMV       go left one pixel
1B2F 20F7             (/home/strick/go/s):05644                  bra   L177D3
                      (/home/strick/go/s):05645                    
                      (/home/strick/go/s):05646         * Box entry point
                      (/home/strick/go/s):05647         * The optimizations here work because the special-purpose horizintal and
                      (/home/strick/go/s):05648         * vertical line routines only check start X,Y and end X OR Y, not BOTH of
                      (/home/strick/go/s):05649         * the end X,Y.  We can use this behaviour to leave in end X or Y coordinates
                      (/home/strick/go/s):05650         * that we want to use later.
                      (/home/strick/go/s):05651         * Possible problem: If the normal line routine is fixed to work properly,
                      (/home/strick/go/s):05652         * there won't be much need for the fast vertical line routine, and we'll have
                      (/home/strick/go/s):05653         * to fix up the X coordinates here.
1B31 17FDEA           (/home/strick/go/s):05654         L1790    lbsr  I.Line       internal line/bar/box setup
1B34 2542             (/home/strick/go/s):05655                  bcs   L17F9         Error; exit
1B36 17FE18           (/home/strick/go/s):05656                  lbsr  L16A3         Make sure X coords in right order
1B39 17FF2F           (/home/strick/go/s):05657                  lbsr  L1716         Make sure Y coords in right order
1B3C 327C             (/home/strick/go/s):05658                  leas  -4,s         Make 4 byte buffer on stack
                      (/home/strick/go/s):05659                  IFNE  H6309
                      (/home/strick/go/s):05660                  ldq   <$47          Copy upper left coords: SX,SY
                      (/home/strick/go/s):05661                  stq   ,s           save on the stack
                      (/home/strick/go/s):05662                  ELSE
1B3E DC49             (/home/strick/go/s):05663                  ldd   <$49
1B40 ED62             (/home/strick/go/s):05664                  std   2,s
1B42 DC47             (/home/strick/go/s):05665                  ldd   <$47
1B44 EDE4             (/home/strick/go/s):05666                  std   ,s
                      (/home/strick/go/s):05667                  ENDC
1B46 3420             (/home/strick/go/s):05668                  pshs  y             Save window table ptr
                      (/home/strick/go/s):05669                  IFNE  H6309
                      (/home/strick/go/s):05670                  ldw   <$68          Get LSET vector
                      (/home/strick/go/s):05671                  ELSE
1B48 3410             (/home/strick/go/s):05672                  pshs  x
1B4A 9E68             (/home/strick/go/s):05673                  ldx   <$68
1B4C 9FB5             (/home/strick/go/s):05674                  stx   <$B5
1B4E 3510             (/home/strick/go/s):05675                  puls  x
                      (/home/strick/go/s):05676                  ENDC
                      (/home/strick/go/s):05677         * enters with SX,SY ; EX,EY
1B50 17FE12           (/home/strick/go/s):05678                  lbsr  L168D         Do fast horizontal line: 0,0 -> X,0
                      (/home/strick/go/s):05679         * leaves with $47-$4D = EX+1,SY ; EX,EY
1B53 DC4B             (/home/strick/go/s):05680                  ldd   <$4B         grab EX+1 (incremented after line)
1B55 DD47             (/home/strick/go/s):05681                  std   <$47         save proper EX
1B57 10AEE4           (/home/strick/go/s):05682                  ldy   ,s           grab window table pointer again: for L1E9D call
1B5A 17FEEF           (/home/strick/go/s):05683                  lbsr  L16F6        Do fast vertical line: X,0 -> X,Y
                      (/home/strick/go/s):05684         * leaves with $47-$4D = EX,EY+1 ; EX,EY
1B5D EC64             (/home/strick/go/s):05685                  ldd   4,s          get SY
1B5F DD49             (/home/strick/go/s):05686                  std   <$49         save SY again
1B61 EC62             (/home/strick/go/s):05687                  ldd   2,s          get SX
1B63 DD47             (/home/strick/go/s):05688                  std   <$47         save SX again
1B65 10AEE4           (/home/strick/go/s):05689                  ldy   ,s           get window table ptr
                      (/home/strick/go/s):05690         * enters with SX,SY ; EX,EY
1B68 17FEE1           (/home/strick/go/s):05691                  lbsr  L16F6         Do other fast vertical line 0,0 -> 0,Y
                      (/home/strick/go/s):05692         * leaves with $47-$4D = SX,EY ; EX,EY
1B6B 10AEE4           (/home/strick/go/s):05693                  ldy   ,s           restore window table pointer
1B6E DC4D             (/home/strick/go/s):05694                  ldd   <$4D         grab EY+1 (incremented after line)
1B70 DD49             (/home/strick/go/s):05695                  std   <$49         save EY
1B72 17FDF0           (/home/strick/go/s):05696                  lbsr  L168D         Do final fast horizontal line: 0,Y -> X,Y
1B75 3266             (/home/strick/go/s):05697                  leas   6,s          Eat stack buffer
1B77 5F               (/home/strick/go/s):05698                  clrb                No error & return
1B78 7E5177           (/home/strick/go/s):05699         L17F9    jmp   >GrfStrt+SysRet
                      (/home/strick/go/s):05700         
                      (/home/strick/go/s):05701         * Bar entry point
1B7B 17FDA0           (/home/strick/go/s):05702         L17FB    lbsr  I.Line       internal line/bar/box routine
1B7E 2542             (/home/strick/go/s):05703                  bcs   L1853
1B80 17FDCE           (/home/strick/go/s):05704                  lbsr  L16A3           Make sure X coords in right order
1B83 17FEE5           (/home/strick/go/s):05705                  lbsr  L1716           Make sure Y coords in right order
                      (/home/strick/go/s):05706                  IFNE  H6309
                      (/home/strick/go/s):05707                  ldw   <$68            Get LSET vector
                      (/home/strick/go/s):05708                  ELSE
1B86 DC68             (/home/strick/go/s):05709                  ldd   <$68
1B88 DDB5             (/home/strick/go/s):05710                  std   <$B5
                      (/home/strick/go/s):05711                  ENDC
                      (/home/strick/go/s):05712         
                      (/home/strick/go/s):05713         * internal BAR routine called from CLS for non-byte boundary clear to EOL
1B8A DC47             (/home/strick/go/s):05714         i.bar    ldd   <$0047       grab start X coordinate
1B8C DD99             (/home/strick/go/s):05715                  std   <$0099       save it for later
1B8E 934B             (/home/strick/go/s):05716                  subd  <$4B         take out end X coordinate
                      (/home/strick/go/s):05717                  IFNE  H6309
                      (/home/strick/go/s):05718                  negd               negate it
                      (/home/strick/go/s):05719                  incd               add one
                      (/home/strick/go/s):05720                  ELSE
1B90 43               (/home/strick/go/s):05721                  coma
1B91 53               (/home/strick/go/s):05722                  comb
1B92 C30002           (/home/strick/go/s):05723                  addd  #2
                      (/home/strick/go/s):05724                  ENDC
1B95 DD9B             (/home/strick/go/s):05725                  std   <$9B         save for later
1B97 170738           (/home/strick/go/s):05726                  lbsr  L1EF1           Set up <$79 bit mask & <$77 bit shft vector
1B9A 17F879           (/home/strick/go/s):05727                  lbsr  L1E9D           Calculate scrn ptr & 1st bit mask
1B9D 9661             (/home/strick/go/s):05728                  lda   <$0061          Get color mask
1B9F DD9D             (/home/strick/go/s):05729                  std   <$009D          Save color mask & pixel mask
1BA1 DC4D             (/home/strick/go/s):05730                  ldd   <$004D
1BA3 D04A             (/home/strick/go/s):05731                  subb  <$004A
1BA5 5C               (/home/strick/go/s):05732                  incb  
1BA6 1F02             (/home/strick/go/s):05733                  tfr   d,y             Move # horizontal lines to draw to Y
1BA8 3430             (/home/strick/go/s):05734         L1839    pshs  y,x             Preserve # lines left & screen ptr
1BAA 109E9B           (/home/strick/go/s):05735                  ldy   <$009B
1BAD DC9D             (/home/strick/go/s):05736                  ldd   <$009D          Get color & pixel masks
1BAF 17FDC7           (/home/strick/go/s):05737                  lbsr  L16B5           Do fast horizontal line
1BB2 3530             (/home/strick/go/s):05738                  puls  y,x             Get # lines left & screen ptr
1BB4 D663             (/home/strick/go/s):05739                  ldb   <$0063          Bump ptr to start of next line in bar
1BB6 3A               (/home/strick/go/s):05740                  abx   
1BB7 0C4A             (/home/strick/go/s):05741                  inc   <$004A          Bump up Y coord
1BB9 DC99             (/home/strick/go/s):05742                  ldd   <$0099       get saved starting X coordinate
1BBB DD47             (/home/strick/go/s):05743                  std   <$0047       save as current X coordinate
1BBD 313F             (/home/strick/go/s):05744                  leay  -1,y            Bump line counter
1BBF 26E7             (/home/strick/go/s):05745                  bne   L1839           Draw until done
1BC1 5F               (/home/strick/go/s):05746                  clrb                  No error & return
1BC2 7E5177           (/home/strick/go/s):05747         L1853    jmp   >GrfStrt+SysRet
                      (/home/strick/go/s):05748         
                      (/home/strick/go/s):05749         * Circle entry point
1BC5 8D2A             (/home/strick/go/s):05750         L1856    bsr   L1884          Make sure window is graphics
1BC7 DC53             (/home/strick/go/s):05751                  ldd   <$53           Get radius (horizontal)
                      (/home/strick/go/s):05752                  IFNE  H6309
                      (/home/strick/go/s):05753                  lsrd                 Calculate vertical radius for 'perfect circle'
                      (/home/strick/go/s):05754                  ELSE
1BC9 44               (/home/strick/go/s):05755                  lsra
1BCA 56               (/home/strick/go/s):05756                  rorb
                      (/home/strick/go/s):05757                  ENDC
1BCB DD55             (/home/strick/go/s):05758                  std   <$55           Vertical radius=Horizontal radius/2
1BCD 206C             (/home/strick/go/s):05759                  bra   L18BF          Go to appropriate place in ellipse routine
                      (/home/strick/go/s):05760         
                      (/home/strick/go/s):05761         * Arc entry point
1BCF 8D20             (/home/strick/go/s):05762         L1860    bsr   L1884          Make sure window is graphics
1BD1 17066D           (/home/strick/go/s):05763                  lbsr  L1E05          Go scale start 'clip' coords, check if legal
1BD4 25EC             (/home/strick/go/s):05764                  bcs   L1853          Illegal coordinate, exit with error
1BD6 170692           (/home/strick/go/s):05765                  lbsr  L1E24          Go scale end 'clip' coords, check if legal
1BD9 25E7             (/home/strick/go/s):05766                  bcs   L1853          Illegal coordinate, exit with error
1BDB DC20             (/home/strick/go/s):05767                  ldd   <$0020         Get start clip X coord
1BDD 109324           (/home/strick/go/s):05768                  cmpd  <$0024         Same as end clip X coord?
1BE0 261F             (/home/strick/go/s):05769                  bne   L188E          No, skip ahead
1BE2 8E5E5A           (/home/strick/go/s):05770                  ldx   #GrfStrt+L1A9D Point to vertical line clip vector
1BE5 DC22             (/home/strick/go/s):05771                  ldd   <$0022         Get start clip Y coord
1BE7 109326           (/home/strick/go/s):05772                  cmpd  <$0026         Same as end clip Y coord?
1BEA 2D52             (/home/strick/go/s):05773                  blt   L18B3          If lower, skip ahead
1BEC 8E5E61           (/home/strick/go/s):05774                  ldx   #GrfStrt+L1AA4 End X clip is to right of Start vector
1BEF 204D             (/home/strick/go/s):05775                  bra   L18B3          Go save vector & continue
                      (/home/strick/go/s):05776         
1BF1 17E56E           (/home/strick/go/s):05777         L1884    lbsr  L0177          Map in window
1BF4 D660             (/home/strick/go/s):05778                  ldb   <$60           Get screen type
1BF6 102BE9A0         (/home/strick/go/s):05779                  lbmi  L0569          If text, return with Error 192
1BFA E62E             (/home/strick/go/s):05780                  ldb   Wt.PBlk,y      Get Pattern memory block
1BFC 273A             (/home/strick/go/s):05781                  beq   L18BC          None, exit to a convenient RTS
1BFE 16FCA5           (/home/strick/go/s):05782                  lbra  L017C          Map that block in
                      (/home/strick/go/s):05783         
                      (/home/strick/go/s):05784         * Different X coord clip coords
1C01 9E22             (/home/strick/go/s):05785         L188E    ldx   <$0022         Get start Y coord
1C03 9C26             (/home/strick/go/s):05786                  cmpx  <$0026         Same as end Y coord?
1C05 260D             (/home/strick/go/s):05787                  bne   L18A3          No, skip ahead
1C07 8E5E68           (/home/strick/go/s):05788                  ldx   #GrfStrt+L1AAB Point to horizontal line clip vector
1C0A 109324           (/home/strick/go/s):05789                  cmpd  <$0024         Is start X coord left of end X coord?
1C0D 2D2F             (/home/strick/go/s):05790                  blt   L18B3          Yes, use this vector
1C0F 8E5E6E           (/home/strick/go/s):05791                  ldx   #GrfStrt+L1AB1 Point to horizontal line/to right vector
1C12 202A             (/home/strick/go/s):05792                  bra   L18B3          Go save the vector & continue
                      (/home/strick/go/s):05793         
                      (/home/strick/go/s):05794         * Different X & Y clip coords
1C14 8E5E74           (/home/strick/go/s):05795         L18A3    ldx   #GrfStrt+L1AB7 Point to 'normal' Arc Clip line vector
1C17 DC20             (/home/strick/go/s):05796                  ldd   <$0020         Get start X coord
1C19 9324             (/home/strick/go/s):05797                  subd  <$0024         Calculate X clip line width
1C1B DD97             (/home/strick/go/s):05798                  std   <$0097         Save it
1C1D DC22             (/home/strick/go/s):05799                  ldd   <$0022         Get start Y coord
1C1F 9326             (/home/strick/go/s):05800                  subd  <$0026         Calculate Y clip line height
1C21 DD99             (/home/strick/go/s):05801                  std   <$0099         Save it
1C23 2019             (/home/strick/go/s):05802                  bra   L18B3          Go save vector & continue
                      (/home/strick/go/s):05803         
1C25 1702ED           (/home/strick/go/s):05804         L18B7    lbsr  L1B3B          Copy 5 byte integer from ,Y to ,X
                      (/home/strick/go/s):05805         * Shift 5 byte number pointed to by X to the left 1 bit
1C28 6804             (/home/strick/go/s):05806         L1BDD    lsl   4,x            (four 7 cycles & one 6 cycle)
                      (/home/strick/go/s):05807                  IFNE  H6309
                      (/home/strick/go/s):05808                  ldq   ,x             Get rest of 5 byte #
                      (/home/strick/go/s):05809                  rolw                 Shift it all left
                      (/home/strick/go/s):05810                  rold
                      (/home/strick/go/s):05811                  stq   ,x             Store result
                      (/home/strick/go/s):05812                  ELSE
1C2A EC02             (/home/strick/go/s):05813                  ldd   2,x
1C2C 59               (/home/strick/go/s):05814                  rolb
1C2D 49               (/home/strick/go/s):05815                  rola
1C2E ED02             (/home/strick/go/s):05816                  std   2,x
1C30 DDB5             (/home/strick/go/s):05817                  std   <$B5
1C32 EC84             (/home/strick/go/s):05818                  ldd   ,x
1C34 59               (/home/strick/go/s):05819                  rolb
1C35 49               (/home/strick/go/s):05820                  rola
1C36 ED84             (/home/strick/go/s):05821                  std   ,x
                      (/home/strick/go/s):05822                  ENDC
1C38 39               (/home/strick/go/s):05823         L18BC    rts                  Exit
                      (/home/strick/go/s):05824         
                      (/home/strick/go/s):05825         * Ellipse entry point
1C39 8DB6             (/home/strick/go/s):05826         L18BD    bsr   L1884          Make sure we are on graphics screen
1C3B 8E5E78           (/home/strick/go/s):05827         L18BF    ldx   #GrfStrt+L1ABB Point to 'no clipping' routine
1C3E 9FA1             (/home/strick/go/s):05828         L18B3    stx   <$A1           Preserve clipping vector
                      (/home/strick/go/s):05829         * Clipping vector setup, start processing ARC
1C40 1705D4           (/home/strick/go/s):05830         L18C5    lbsr  L1DF6          Make sure coord's & scaling will work
1C43 2503             (/home/strick/go/s):05831                  bcs   L18D4          Error, return to system with error #
1C45 170627           (/home/strick/go/s):05832                  lbsr  L1E28          Go make sure X & Y Radius values are legit
1C48 10250182         (/home/strick/go/s):05833         L18D4    lbcs  L1A75          Nope, exit with error
                      (/home/strick/go/s):05834                  IFNE  H6309
                      (/home/strick/go/s):05835                  ldq   <$47           Get Draw pointer's X & Y Coordinates
                      (/home/strick/go/s):05836                  stq   <$18           Make working copies
                      (/home/strick/go/s):05837                  clrd                 Set some variable to 0
                      (/home/strick/go/s):05838                  ELSE
1C4C DC47             (/home/strick/go/s):05839                  ldd   <$47
1C4E DD18             (/home/strick/go/s):05840                  std   <$18
1C50 DC49             (/home/strick/go/s):05841                  ldd   <$49
1C52 DD1A             (/home/strick/go/s):05842                  std   <$1A
1C54 4F               (/home/strick/go/s):05843                  clra
1C55 5F               (/home/strick/go/s):05844                  clrb
                      (/home/strick/go/s):05845                  ENDC
1C56 DD1C             (/home/strick/go/s):05846                  std   <$1C           Store it
1C58 DC55             (/home/strick/go/s):05847                  ldd   <$55           Get Y radius value
1C5A DD1E             (/home/strick/go/s):05848                  std   <$1E           Move to working area
1C5C 32E8C2           (/home/strick/go/s):05849                  leas  <-$3E,s        Make a 62 byte working stack area
1C5F 10AFE83C         (/home/strick/go/s):05850                  sty   <$3C,s         Preserve Y in last 2 bytes of stack area
1C63 3065             (/home/strick/go/s):05851                  leax  $05,s          Point X into stack working area
1C65 DC53             (/home/strick/go/s):05852                  ldd   <$0053         Get horizontal radius
1C67 1702FA           (/home/strick/go/s):05853                  lbsr  L1BA1.0      ATD: lbsr L1B32 moved for size
1C6A 1F12             (/home/strick/go/s):05854                  tfr   x,y
1C6C 30E814           (/home/strick/go/s):05855                  leax  <$14,s
1C6F DC55             (/home/strick/go/s):05856                  ldd   <$0055
1C71 170302           (/home/strick/go/s):05857                  lbsr  L1BB1
1C74 306A             (/home/strick/go/s):05858                  leax  $0A,s
1C76 8DAD             (/home/strick/go/s):05859                  bsr   L18B7
1C78 1F12             (/home/strick/go/s):05860                  tfr   x,y
1C7A 306F             (/home/strick/go/s):05861                  leax  $0F,s
1C7C 8DA7             (/home/strick/go/s):05862                  bsr   L18B7
1C7E 30E819           (/home/strick/go/s):05863                  leax  <$19,s
1C81 DC55             (/home/strick/go/s):05864                  ldd   <$0055
1C83 1702DE           (/home/strick/go/s):05865                  lbsr  L1BA1.0      ATD: lbsr L1B32 moved for size
1C86 1F12             (/home/strick/go/s):05866                  tfr   x,y
1C88 30E81E           (/home/strick/go/s):05867                  leax  <$1E,s
1C8B 8D98             (/home/strick/go/s):05868                  bsr   L18B7
1C8D 1F12             (/home/strick/go/s):05869                  tfr   x,y
1C8F 30E823           (/home/strick/go/s):05870                  leax  <$23,s
1C92 8D91             (/home/strick/go/s):05871                  bsr   L18B7
1C94 30E828           (/home/strick/go/s):05872                  leax  <$28,s
1C97 17026A           (/home/strick/go/s):05873                  lbsr  L1B32.0      ATD: CLRD moved for size
1C9A 30E82D           (/home/strick/go/s):05874                  leax  <$2D,s
1C9D DC1E             (/home/strick/go/s):05875                  ldd   <$001E
1C9F 170264           (/home/strick/go/s):05876                  lbsr  L1B32
                      (/home/strick/go/s):05877                  IFNE  H6309
                      (/home/strick/go/s):05878                  decd                    Doesn't affect circle
                      (/home/strick/go/s):05879                  ELSE
1CA2 830001           (/home/strick/go/s):05880                  subd  #1
                      (/home/strick/go/s):05881                  ENDC
1CA5 1702BE           (/home/strick/go/s):05882                  lbsr  L1BA1
1CA8 316A             (/home/strick/go/s):05883                  leay  $0A,s
1CAA 1702CB           (/home/strick/go/s):05884                  lbsr  L1BB4
1CAD 3165             (/home/strick/go/s):05885                  leay  $05,s
1CAF 8D7B             (/home/strick/go/s):05886                  bsr   L19C3
1CB1 30E4             (/home/strick/go/s):05887                  leax  ,s
1CB3 8D7D             (/home/strick/go/s):05888                  bsr   L19C6
1CB5 17027A           (/home/strick/go/s):05889                  lbsr  L1B63        ATD: LDD moved for size
1CB8 31E81E           (/home/strick/go/s):05890                  leay  <$1E,s
1CBB 1702BA           (/home/strick/go/s):05891                  lbsr  L1BB4
1CBE 1F12             (/home/strick/go/s):05892                  tfr   x,y
1CC0 8D67             (/home/strick/go/s):05893                  bsr   L19C3.0      ATD: LEAX moved for size
1CC2 30E832           (/home/strick/go/s):05894                  leax  <$32,s
1CC5 8D68             (/home/strick/go/s):05895                  bsr   L19C6.0      ATD: LEAY moved for size
1CC7 8D5B             (/home/strick/go/s):05896                  bsr   L19C0.0      ATD: LDD moved for size
1CC9 30E837           (/home/strick/go/s):05897                  leax  <$37,s
1CCC 31E81E           (/home/strick/go/s):05898                  leay  <$1E,s
1CCF 170243           (/home/strick/go/s):05899                  lbsr  L1B3B
1CD2 30E814           (/home/strick/go/s):05900         L1970    leax  <$14,s
1CD5 31E828           (/home/strick/go/s):05901                  leay  <$28,s
1CD8 17030D           (/home/strick/go/s):05902                  lbsr  L1C2E
1CDB 2F5B             (/home/strick/go/s):05903                  ble   L19CC
1CDD 1700F1           (/home/strick/go/s):05904                  lbsr  L1A78
1CE0 6DE82D           (/home/strick/go/s):05905                  tst   <$2D,s
1CE3 2B22             (/home/strick/go/s):05906                  bmi   L19A0
1CE5 30E832           (/home/strick/go/s):05907                  leax  <$32,s
1CE8 316F             (/home/strick/go/s):05908                  leay  $0F,s
1CEA 8D40             (/home/strick/go/s):05909                  bsr   L19C3
1CEC 1F12             (/home/strick/go/s):05910                  tfr   x,y
1CEE 8D39             (/home/strick/go/s):05911                  bsr   L19C3.0      ATD: LEAX moved for size
1CF0 30E814           (/home/strick/go/s):05912                  leax  <$14,s
1CF3 3165             (/home/strick/go/s):05913                  leay  $05,s
                      (/home/strick/go/s):05914         
                      (/home/strick/go/s):05915         * [X] = [X] - [Y] : leave [Y] alone
                      (/home/strick/go/s):05916         * ONLY called once.  Moving it would save 1 byte (rts) (save LBSR, convert
                      (/home/strick/go/s):05917         * 3 BSRs to LBSRs), and save
                      (/home/strick/go/s):05918         * one LBSR/rts (11 cycles), and convert 3 BSR to LBSR (+3)
                      (/home/strick/go/s):05919         * can also get rid of superfluous exg x,y at the end of the routine
                      (/home/strick/go/s):05920         * used to be a stand-alone routine
1CF5 1702D1           (/home/strick/go/s):05921         L1B92    lbsr  L1C11.0      negate 5 byte [Y]: ATD: EXG X,Y moved for size
1CF8 1E12             (/home/strick/go/s):05922                  exg   x,y
1CFA 17024F           (/home/strick/go/s):05923                  lbsr  L1B7A        40 bit add: [X] = [X] + [Y]
1CFD 1702C9           (/home/strick/go/s):05924                  lbsr  L1C11.0      negate 5 byte int: ATD: EXG X,Y moved for size
1D00 DC1E             (/home/strick/go/s):05925                  ldd   <$001E
                      (/home/strick/go/s):05926                  IFNE  H6309
                      (/home/strick/go/s):05927                  decd                   Doesn't affect circle
                      (/home/strick/go/s):05928                  ELSE
1D02 830001           (/home/strick/go/s):05929                  subd  #1
                      (/home/strick/go/s):05930                  ENDC
1D05 DD1E             (/home/strick/go/s):05931                  std   <$001E
1D07 30E837           (/home/strick/go/s):05932         L19A0    leax  <$37,s
1D0A 31E823           (/home/strick/go/s):05933                  leay  <$23,s
1D0D 8D1D             (/home/strick/go/s):05934                  bsr   L19C3
1D0F 1F12             (/home/strick/go/s):05935                  tfr   x,y
1D11 8D16             (/home/strick/go/s):05936                  bsr   L19C3.0      ATD: LEAX moved for size
1D13 30E828           (/home/strick/go/s):05937                  leax  <$28,s
1D16 31E819           (/home/strick/go/s):05938                  leay  <$19,s
1D19 8D11             (/home/strick/go/s):05939                  bsr   L19C3
1D1B DC1C             (/home/strick/go/s):05940                  ldd   <$001C
                      (/home/strick/go/s):05941                  IFNE  H6309
                      (/home/strick/go/s):05942                  incd                   Doesn't affect circle
                      (/home/strick/go/s):05943                  ELSE
1D1D C30001           (/home/strick/go/s):05944                  addd  #1
                      (/home/strick/go/s):05945                  ENDC
1D20 DD1C             (/home/strick/go/s):05946                  std   <$001C
1D22 20AE             (/home/strick/go/s):05947                  bra   L1970
                      (/home/strick/go/s):05948         
1D24 DC1E             (/home/strick/go/s):05949         L19C0.0  ldd   <$001E       ATD: moved here for size
1D26 7E5F66           (/home/strick/go/s):05950         L19C0    jmp   >GrfStrt+L1BA1
                      (/home/strick/go/s):05951         
1D29 30E82F           (/home/strick/go/s):05952         L19C3.0  leax  <$2D+2,s       ATD: moved here for size
1D2C 7E5F4C           (/home/strick/go/s):05953         L19C3    jmp   >GrfStrt+L1B7A   add 40 bit [X] = [X] + [Y]
                      (/home/strick/go/s):05954         
1D2F 31E811           (/home/strick/go/s):05955         L19C6.0  leay  <$0F+2,s        ATD: moved here for size
1D32 1701E0           (/home/strick/go/s):05956         L19C6    lbsr  L1B3B
1D35 7E5FCB           (/home/strick/go/s):05957                  jmp   >GrfStrt+L1C11  negate 5-byte integer
                      (/home/strick/go/s):05958         
1D38 30E82D           (/home/strick/go/s):05959         L19CC    leax  <$2D,s
1D3B DC1C             (/home/strick/go/s):05960                  ldd   <$001C
1D3D 1701C6           (/home/strick/go/s):05961                  lbsr  L1B32
                      (/home/strick/go/s):05962                  IFNE  H6309
                      (/home/strick/go/s):05963                  incd                   Doesn't affect circle
                      (/home/strick/go/s):05964                  ELSE
1D40 C30001           (/home/strick/go/s):05965                  addd  #1
                      (/home/strick/go/s):05966                  ENDC
1D43 8DE1             (/home/strick/go/s):05967                  bsr   L19C0
1D45 31E81E           (/home/strick/go/s):05968                  leay  <$1E,s
1D48 17022D           (/home/strick/go/s):05969                  lbsr  L1BB4
1D4B 30E4             (/home/strick/go/s):05970                  leax  ,s
1D4D DC1E             (/home/strick/go/s):05971                  ldd   <$001E
1D4F 1701B4           (/home/strick/go/s):05972                  lbsr  L1B32
1D52 830002           (/home/strick/go/s):05973                  subd  #$0002
1D55 8DCF             (/home/strick/go/s):05974                  bsr   L19C0
1D57 1701D8           (/home/strick/go/s):05975                  lbsr  L1B63        ATD: LDD moved for size
1D5A 316A             (/home/strick/go/s):05976                  leay  $0A,s
1D5C 170219           (/home/strick/go/s):05977                  lbsr  L1BB4
1D5F 1F12             (/home/strick/go/s):05978                  tfr   x,y
1D61 8DC6             (/home/strick/go/s):05979                  bsr   L19C3.0      ATD: LEAX moved for size
1D63 30E4             (/home/strick/go/s):05980                  leax  ,s
1D65 316A             (/home/strick/go/s):05981                  leay  $0A,s
1D67 8DC9             (/home/strick/go/s):05982                  bsr   L19C6
1D69 1701C6           (/home/strick/go/s):05983                  lbsr  L1B63        ATD: LDD moved for size
1D6C 31E819           (/home/strick/go/s):05984                  leay  <$19,s
1D6F 170206           (/home/strick/go/s):05985                  lbsr  L1BB4
1D72 1F12             (/home/strick/go/s):05986                  tfr   x,y
1D74 8DB3             (/home/strick/go/s):05987                  bsr   L19C3.0      ATD: LEAX moved for size
1D76 30E832           (/home/strick/go/s):05988                  leax  <$32,s
1D79 31E823           (/home/strick/go/s):05989                  leay  <$23,s
1D7C 170196           (/home/strick/go/s):05990                  lbsr  L1B3B
1D7F DC1C             (/home/strick/go/s):05991                  ldd   <$001C
1D81 8DA3             (/home/strick/go/s):05992                  bsr   L19C0
1D83 30E837           (/home/strick/go/s):05993                  leax  <$37,s
1D86 8DA7             (/home/strick/go/s):05994                  bsr   L19C6.0      ATD: LEAY moved for size
1D88 8D9A             (/home/strick/go/s):05995                  bsr   L19C0.0      ATD: LDD moved for size
1D8A 316A             (/home/strick/go/s):05996                  leay  $0A,s
1D8C 8D9E             (/home/strick/go/s):05997                  bsr   L19C3
1D8E DC1E             (/home/strick/go/s):05998         L1A32    ldd   <$001E
1D90 1083FFFF         (/home/strick/go/s):05999                  cmpd  #$FFFF       change to INCD?
1D94 2734             (/home/strick/go/s):06000                  beq   L1A71        won't be affected by INCD: exit routine
1D96 8D39             (/home/strick/go/s):06001                  bsr   L1A78        draw pixel: shouldn't be affected by INCD
1D98 6DE82D           (/home/strick/go/s):06002                  tst   <$2D,s
1D9B 2A13             (/home/strick/go/s):06003                  bpl   L1A57
1D9D 30E832           (/home/strick/go/s):06004                  leax  <$32,s
1DA0 31E823           (/home/strick/go/s):06005                  leay  <$23,s
1DA3 8D22             (/home/strick/go/s):06006                  bsr   L1A6E
1DA5 1F12             (/home/strick/go/s):06007                  tfr   x,y
1DA7 8D1B             (/home/strick/go/s):06008                  bsr   L1A6E.0      ATD: LEAX moved for size
1DA9 DC1C             (/home/strick/go/s):06009                  ldd   <$001C
                      (/home/strick/go/s):06010                  IFNE  H6309
                      (/home/strick/go/s):06011                  incd                   Doesn't affect Circle
                      (/home/strick/go/s):06012                  ELSE
1DAB C30001           (/home/strick/go/s):06013                  addd  #1
                      (/home/strick/go/s):06014                  ENDC
1DAE DD1C             (/home/strick/go/s):06015                  std   <$001C
1DB0 30E837           (/home/strick/go/s):06016         L1A57    leax  <$37,s
1DB3 316F             (/home/strick/go/s):06017                  leay  $0F,s
1DB5 8D10             (/home/strick/go/s):06018                  bsr   L1A6E
1DB7 1F12             (/home/strick/go/s):06019                  tfr   x,y
1DB9 8D09             (/home/strick/go/s):06020                  bsr   L1A6E.0      ATD: LEAX moved for size
1DBB DC1E             (/home/strick/go/s):06021                  ldd   <$001E
                      (/home/strick/go/s):06022                  IFNE  H6309
                      (/home/strick/go/s):06023                  decd                   Doesn't affect circle
                      (/home/strick/go/s):06024                  ELSE
1DBD 830001           (/home/strick/go/s):06025                  subd  #1
                      (/home/strick/go/s):06026                  ENDC
1DC0 DD1E             (/home/strick/go/s):06027                  std   <$001E
1DC2 20CA             (/home/strick/go/s):06028                  bra   L1A32
                      (/home/strick/go/s):06029         
1DC4 30E82F           (/home/strick/go/s):06030         L1A6E.0  leax  <$2D+2,s       ATD: moved here for size
1DC7 7E5F4C           (/home/strick/go/s):06031         L1A6E    jmp   >GrfStrt+L1B7A
                      (/home/strick/go/s):06032         
1DCA 32E83E           (/home/strick/go/s):06033         L1A71    leas  <$3E,s
1DCD 5F               (/home/strick/go/s):06034                  clrb
1DCE 7E5177           (/home/strick/go/s):06035         L1A75    jmp   >GrfStrt+SysRet
                      (/home/strick/go/s):06036         
                      (/home/strick/go/s):06037         * Draw all 4 points that one calculation covers (opposite corners)
                      (/home/strick/go/s):06038         * (Ellipse & Circle)
1DD1 10AEE83E         (/home/strick/go/s):06039         L1A78    ldy   <$3E,s       Get window table ptr back (for [>GrfMem+gr00A1])
1DD5 DC1C             (/home/strick/go/s):06040                  ldd   <$001C       grab current X offset from center
1DD7 9E1E             (/home/strick/go/s):06041                  ldx   <$001E       grab current Y offset from center
                      (/home/strick/go/s):06042         * At this point, add check for filled flag. If set, put x,y pairs in
                      (/home/strick/go/s):06043         * for line command call (with bounds checking) & call line routine 2 times
                      (/home/strick/go/s):06044         * (once for top line, once for bottom line)
1DD9 0DB2             (/home/strick/go/s):06045                  tst   <$b2         We doing a Filled Ellipse/Circle?
1DDB 2761             (/home/strick/go/s):06046                  beq   NotFill      No, do normal
1DDD 8D40             (/home/strick/go/s):06047                  bsr   SetX         Do any adjustments to start X needed
1DDF DD47             (/home/strick/go/s):06048                  std   <$47         Save as start X
1DE1 DDAD             (/home/strick/go/s):06049                  std   <$AD         Save copy
1DE3 DC1C             (/home/strick/go/s):06050                  ldd   <$1C         Get current X offset again
                      (/home/strick/go/s):06051                  IFNE  H6309
                      (/home/strick/go/s):06052                  negd               Negate for coord on other side of radius
                      (/home/strick/go/s):06053                  ELSE
1DE5 43               (/home/strick/go/s):06054                  coma
1DE6 53               (/home/strick/go/s):06055                  comb
1DE7 C30001           (/home/strick/go/s):06056                  addd  #1
                      (/home/strick/go/s):06057                  ENDC
1DEA 8D33             (/home/strick/go/s):06058                  bsr   SetX         Do any adjustments
1DEC DD4B             (/home/strick/go/s):06059                  std   <$4b         Save end X coord
1DEE DDAF             (/home/strick/go/s):06060                  std   <$AF         Save Copy
1DF0 1F10             (/home/strick/go/s):06061                  tfr   x,d          Copy current Y offset into D
1DF2 3470             (/home/strick/go/s):06062                  pshs  x,y,u        Preserve regs for HLine call
1DF4 8D18             (/home/strick/go/s):06063                  bsr   DoHLine      Do line (if necessary)
1DF6 10AE62           (/home/strick/go/s):06064                  ldy   2,s          Get window table ptr back for checks
                      (/home/strick/go/s):06065                  IFNE  H6309
                      (/home/strick/go/s):06066                  ldq   <$AD         Get original X coords back
                      (/home/strick/go/s):06067                  std   <$47         Save Start X
                      (/home/strick/go/s):06068                  stw   <$4b         Save End X
                      (/home/strick/go/s):06069                  ELSE
1DF9 DCAF             (/home/strick/go/s):06070                  ldd   <$AF
1DFB DDB5             (/home/strick/go/s):06071                  std   <$B5
1DFD DD4B             (/home/strick/go/s):06072                  std   <$4b
1DFF DCAD             (/home/strick/go/s):06073                  ldd   <$AD
1E01 DD47             (/home/strick/go/s):06074                  std   <$47
                      (/home/strick/go/s):06075                  ENDC
1E03 ECE4             (/home/strick/go/s):06076                  ldd   ,s           Get Y coord back
                      (/home/strick/go/s):06077                  IFNE  H6309
                      (/home/strick/go/s):06078                  negd               Negate for coord on other side of radius
                      (/home/strick/go/s):06079                  ELSE
1E05 43               (/home/strick/go/s):06080                  coma
1E06 53               (/home/strick/go/s):06081                  comb
1E07 C30001           (/home/strick/go/s):06082                  addd  #1
                      (/home/strick/go/s):06083                  ENDC
1E0A 8D02             (/home/strick/go/s):06084                  bsr   DoHLine      Do line (if necessary)
1E0C 35F0             (/home/strick/go/s):06085                  puls  x,y,u,pc     Restore regs & return
                      (/home/strick/go/s):06086         
                      (/home/strick/go/s):06087         * NOTE: THIS WILL MODIFY <$47 AS IT GOES THROUGH THE LINE!
1E0E 8D20             (/home/strick/go/s):06088         DoHLine  bsr   SetY         Do Y adjustments
1E10 81FF             (/home/strick/go/s):06089                  cmpa  #$FF         Off window?
1E12 2718             (/home/strick/go/s):06090                  beq   SaveStrX     Yes, return without drawing
1E14 DD49             (/home/strick/go/s):06091                  std   <$49         Save Y coord for fast horizontal line
                      (/home/strick/go/s):06092                  IFNE  H6309
                      (/home/strick/go/s):06093                  ldw   <$68         Get LSET vector
                      (/home/strick/go/s):06094                  ELSE
1E16 DE68             (/home/strick/go/s):06095                  ldu   <$68
1E18 DFB5             (/home/strick/go/s):06096                  stu   <$B5
                      (/home/strick/go/s):06097                  ENDC
1E1A DE64             (/home/strick/go/s):06098                  ldu   <$64         Get PSET vector
1E1C 7E5963           (/home/strick/go/s):06099                  jmp   >GrfStrt+L168B Call fast horizontal line & return from there
                      (/home/strick/go/s):06100         
                      (/home/strick/go/s):06101         * Calc X coord & make sure in range
1E1F D318             (/home/strick/go/s):06102         SetX     addd  <$18         Add X center point
1E21 2B0A             (/home/strick/go/s):06103                  bmi   OffLeft      Off left hand side, use 0
1E23 10A3A81B         (/home/strick/go/s):06104                  cmpd  Wt.MaxX,y    Past right hand side?
1E27 2303             (/home/strick/go/s):06105                  bls   SaveStrX     No, save start X
1E29 ECA81B           (/home/strick/go/s):06106                  ldd   Wt.MaxX,y    Get right side of window
1E2C 39               (/home/strick/go/s):06107         SaveStrX rts
                      (/home/strick/go/s):06108         
     1E2D             (/home/strick/go/s):06109         OffLeft  equ   *
                      (/home/strick/go/s):06110                  IFNE  H6309
                      (/home/strick/go/s):06111                  clrd               0 X Coord start
                      (/home/strick/go/s):06112                  ELSE
1E2D 4F               (/home/strick/go/s):06113                  clra
1E2E 5F               (/home/strick/go/s):06114                  clrb
                      (/home/strick/go/s):06115                  ENDC
1E2F 39               (/home/strick/go/s):06116                  rts
                      (/home/strick/go/s):06117         
                      (/home/strick/go/s):06118         * Calc Y coord & make sure in range
1E30 D31A             (/home/strick/go/s):06119         SetY     addd  <$1a         Add Y center point
1E32 2B07             (/home/strick/go/s):06120                  bmi   OffTop       Off top, not drawable
1E34 10A3A81D         (/home/strick/go/s):06121                  cmpd  Wt.MaxY,y    Past bottom?
1E38 2201             (/home/strick/go/s):06122                  bhi   OffTop       Yes, not drawable
1E3A 39               (/home/strick/go/s):06123         SaveStrY rts
                      (/home/strick/go/s):06124         
1E3B 86FF             (/home/strick/go/s):06125         OffTop   lda   #$FF         Flag that it is off the window
1E3D 39               (/home/strick/go/s):06126                  rts
                      (/home/strick/go/s):06127         
                      (/home/strick/go/s):06128         * Not filled circle or ellipse
1E3E 8D14             (/home/strick/go/s):06129         NotFill  bsr   L1A97        Draw X,Y
                      (/home/strick/go/s):06130                  IFNE  H6309
                      (/home/strick/go/s):06131                  negd               invert X
                      (/home/strick/go/s):06132                  ELSE
1E40 43               (/home/strick/go/s):06133                  coma
1E41 53               (/home/strick/go/s):06134                  comb
1E42 C30001           (/home/strick/go/s):06135                  addd  #1
                      (/home/strick/go/s):06136                  ENDC
1E45 8D0D             (/home/strick/go/s):06137                  bsr   L1A97        Draw -X,Y
1E47 1E01             (/home/strick/go/s):06138                  exg   d,x          Invert Y
                      (/home/strick/go/s):06139                  IFNE  H6309
                      (/home/strick/go/s):06140                  negd               invert X
                      (/home/strick/go/s):06141                  ELSE
1E49 43               (/home/strick/go/s):06142                  coma
1E4A 53               (/home/strick/go/s):06143                  comb
1E4B C30001           (/home/strick/go/s):06144                  addd  #1
                      (/home/strick/go/s):06145                  ENDC
1E4E 1E01             (/home/strick/go/s):06146                  exg   d,x
1E50 8D02             (/home/strick/go/s):06147                  bsr   L1A97        Draw inverted X, inverted Y pixel
1E52 DC1C             (/home/strick/go/s):06148                  ldd   <$001C       Last, draw X,-Y
1E54 3416             (/home/strick/go/s):06149         L1A97    pshs  x,d          Preserve x,y coords
1E56 6E9F11A1         (/home/strick/go/s):06150                  jmp   [>GrfMem+gr00A1]     Draw point (L1ABB if circle/ellipse)
                      (/home/strick/go/s):06151         
                      (/home/strick/go/s):06152         * NOTE: THE FOLLOWING 6 LABELS (L1A9D, L1AA4, L1AAB, L1AB1, L1AB7 & L1ABB)
                      (/home/strick/go/s):06153         *   ARE POINTED TO BY >GrfMem+gr00A1, DEPENDING ON WHETHER ARC IS ON OR NOT, AND THE
                      (/home/strick/go/s):06154         *   COORDINATES ARE WITHIN CERTAIN BOUNDARIES. THE ENTRY CONDITIONS FOR ALL
                      (/home/strick/go/s):06155         *   6 OF THESE ARE:
                      (/home/strick/go/s):06156         * D=X coord offset from center point
                      (/home/strick/go/s):06157         * X=Y coord offset from center point
                      (/home/strick/go/s):06158         * (ARC) Vertical clip line, start Y > end Y coord vector
1E5A 109320           (/home/strick/go/s):06159         L1A9D    cmpd  <$0020       >= start clip X coord?
1E5D 2C19             (/home/strick/go/s):06160                  bge   L1ABB        Yes, go draw point
1E5F 3596             (/home/strick/go/s):06161                  puls  pc,x,d       No, return
                      (/home/strick/go/s):06162         
                      (/home/strick/go/s):06163         * (ARC) Vertical clip line, start Y < end Y coord vector
1E61 109320           (/home/strick/go/s):06164         L1AA4    cmpd  <$0020       <= start clip X coord?
1E64 2F12             (/home/strick/go/s):06165                  ble   L1ABB        Yes, go draw point
1E66 3596             (/home/strick/go/s):06166                  puls  pc,x,d       No, return
                      (/home/strick/go/s):06167         
                      (/home/strick/go/s):06168         * (ARC) Horizontal clip line, start X < end X coord vector
1E68 9C22             (/home/strick/go/s):06169         L1AAB    cmpx  <$0022       <= start clip Y coord?
1E6A 2F0C             (/home/strick/go/s):06170                  ble   L1ABB        Yes, go draw point
1E6C 3596             (/home/strick/go/s):06171                  puls  pc,x,d       No, return
                      (/home/strick/go/s):06172         
                      (/home/strick/go/s):06173         * (ARC) Horizontal clip line, start X > end X coord vector
1E6E 9C22             (/home/strick/go/s):06174         L1AB1    cmpx  <$0022       >= start clip Y coord?
1E70 2C06             (/home/strick/go/s):06175                  bge   L1ABB        Yes, go draw point
1E72 3596             (/home/strick/go/s):06176                  puls  pc,x,d       No, return
                      (/home/strick/go/s):06177         
                      (/home/strick/go/s):06178         * (ARC) Clip line is diagonal in some way
1E74 8D2F             (/home/strick/go/s):06179         L1AB7    bsr   L1ADF          Check if within range of diagonal clip line
1E76 2E2B             (/home/strick/go/s):06180                  bgt   L1ADD          If out of range, don't put pixel on screen
                      (/home/strick/go/s):06181         * Entry point for 'No clipping' routine pixel put
                      (/home/strick/go/s):06182         * Entry: D=X offset from center point
                      (/home/strick/go/s):06183         *        X=Y offset from center point
1E78 D318             (/home/strick/go/s):06184         L1ABB    addd  <$0018         Add X offset to center point X
1E7A 2B27             (/home/strick/go/s):06185                  bmi   L1ADD          Off of left side of window, don't bother
1E7C 10A3A81B         (/home/strick/go/s):06186                  cmpd  Wt.MaxX,y      Past right side of window?
1E80 2221             (/home/strick/go/s):06187                  bhi   L1ADD          Yes, don't bother
1E82 DD47             (/home/strick/go/s):06188                  std   <$0047         Save X for Point routine
1E84 1F10             (/home/strick/go/s):06189                  tfr   x,d            Move Y offset to D
1E86 D31A             (/home/strick/go/s):06190                  addd  <$001A         Add Y offset to center point Y
1E88 2B19             (/home/strick/go/s):06191                  bmi   L1ADD          Off of top of window, don't bother
1E8A 10A3A81D         (/home/strick/go/s):06192                  cmpd  Wt.MaxY,y      Past bottom of window?
1E8E 2213             (/home/strick/go/s):06193                  bhi   L1ADD          Yes, don't bother
1E90 DD49             (/home/strick/go/s):06194                  std   <$0049         Save Y coord for Point routine
1E92 17F581           (/home/strick/go/s):06195                  lbsr  L1E9D          Calculate scrn addr:X, bit mask into B
1E95 9661             (/home/strick/go/s):06196                  lda   <$0061         Get color mask
                      (/home/strick/go/s):06197                  IFNE  H6309
                      (/home/strick/go/s):06198                  ldw   <$68           Get LSET vector
                      (/home/strick/go/s):06199                  ELSE
1E97 3410             (/home/strick/go/s):06200                  pshs  x
1E99 9E68             (/home/strick/go/s):06201                  ldx   <$68
1E9B 9FB5             (/home/strick/go/s):06202                  stx   <$B5
1E9D 3510             (/home/strick/go/s):06203                  puls  x
                      (/home/strick/go/s):06204                  ENDC
1E9F AD9F1164         (/home/strick/go/s):06205                  jsr   [>GrfMem+gr0064]       Put pixel on screen
1EA3 3596             (/home/strick/go/s):06206         L1ADD    puls  pc,x,d         Restore regs & return
                      (/home/strick/go/s):06207         
                      (/home/strick/go/s):06208         * Uses signed 16x16 bit multiply
                      (/home/strick/go/s):06209         * Called by Arc (probably in clipping coordinates)
1EA5 3416             (/home/strick/go/s):06210         L1ADF    pshs  x,d
1EA7 327C             (/home/strick/go/s):06211                  leas  -4,s
1EA9 1F10             (/home/strick/go/s):06212                  tfr   x,d
1EAB 9326             (/home/strick/go/s):06213                  subd  <$26
                      (/home/strick/go/s):06214                  IFNE  H6309
                      (/home/strick/go/s):06215                  muld  <$97           Calculate 1st result
                      (/home/strick/go/s):06216                  stq   ,s             Save 24 bit result
                      (/home/strick/go/s):06217                  ELSE                 
1EAD 3470             (/home/strick/go/s):06218                  pshs  x,y,u
1EAF 9E97             (/home/strick/go/s):06219                  ldx   <$97
1EB1 8D26             (/home/strick/go/s):06220                  bsr   MUL16
1EB3 10AF66           (/home/strick/go/s):06221                  sty   6,s
1EB6 EF68             (/home/strick/go/s):06222                  stu   8,s
1EB8 DFB5             (/home/strick/go/s):06223                  stu   <$B5
1EBA 3570             (/home/strick/go/s):06224                  puls  x,y,u
                      (/home/strick/go/s):06225                  ENDC
1EBC EC64             (/home/strick/go/s):06226                  ldd   4,s
1EBE 9324             (/home/strick/go/s):06227                  subd  <$24
                      (/home/strick/go/s):06228                  IFNE  H6309
                      (/home/strick/go/s):06229                  muld  <$99           Calculate 2nd result
                      (/home/strick/go/s):06230                  ELSE
1EC0 3470             (/home/strick/go/s):06231                  pshs  x,y,u
1EC2 9E99             (/home/strick/go/s):06232                  ldx   <$99
1EC4 8D13             (/home/strick/go/s):06233                  bsr   MUL16
1EC6 DFB5             (/home/strick/go/s):06234                  stu   <$B5
1EC8 1F20             (/home/strick/go/s):06235                  tfr   y,d
1ECA 3570             (/home/strick/go/s):06236                  puls  x,y,u
                      (/home/strick/go/s):06237                  ENDC
1ECC E161             (/home/strick/go/s):06238                  cmpb  1,s            Compare high byte with original multiply
1ECE 2605             (/home/strick/go/s):06239                  bne   L1AF9          Not equal, exit with CC indicating that
                      (/home/strick/go/s):06240                  IFNE  H6309
                      (/home/strick/go/s):06241                  cmpw  2,s            Check rest of 24 bit #
                      (/home/strick/go/s):06242                  ELSE
1ED0 DCB5             (/home/strick/go/s):06243                  ldd   <$B5
1ED2 10A362           (/home/strick/go/s):06244                  cmpd  2,s
                      (/home/strick/go/s):06245                  ENDC
1ED5 3264             (/home/strick/go/s):06246         L1AF9    leas  4,s            Eat our buffer
1ED7 3596             (/home/strick/go/s):06247                  puls  pc,x,d         Restore regs & return
                      (/home/strick/go/s):06248         
                      (/home/strick/go/s):06249                  IFEQ  H6309
1ED9 3476             (/home/strick/go/s):06250         MUL16    pshs  d,x,y,u        XmulD returns Y&U
1EDB 6F64             (/home/strick/go/s):06251                  clr   4,s
1EDD A663             (/home/strick/go/s):06252                  lda   3,s
1EDF 3D               (/home/strick/go/s):06253                  mul
1EE0 ED66             (/home/strick/go/s):06254                  std   6,s
1EE2 EC61             (/home/strick/go/s):06255                  ldd   1,s
1EE4 3D               (/home/strick/go/s):06256                  mul
1EE5 EB66             (/home/strick/go/s):06257                  addb  6,s
1EE7 8900             (/home/strick/go/s):06258                  adca  #0
1EE9 ED65             (/home/strick/go/s):06259                  std   5,s
1EEB E6E4             (/home/strick/go/s):06260                  ldb   ,s
1EED A663             (/home/strick/go/s):06261                  lda   3,s
1EEF 3D               (/home/strick/go/s):06262                  mul
1EF0 E365             (/home/strick/go/s):06263                  addd  5,s
1EF2 ED65             (/home/strick/go/s):06264                  std   5,s
1EF4 2402             (/home/strick/go/s):06265                  bcc   MUL16b
1EF6 6C64             (/home/strick/go/s):06266                  inc   4,s
1EF8 A6E4             (/home/strick/go/s):06267         MUL16b   lda   ,s
1EFA E662             (/home/strick/go/s):06268                  ldb   2,s
1EFC 3D               (/home/strick/go/s):06269                  mul
1EFD E364             (/home/strick/go/s):06270                  addd  4,s
1EFF 4F               (/home/strick/go/s):06271                  clra
1F00 ED64             (/home/strick/go/s):06272                  std   4,s
1F02 35F6             (/home/strick/go/s):06273                  puls  d,x,y,u,pc
                      (/home/strick/go/s):06274                  ENDC
                      (/home/strick/go/s):06275         
     1F04             (/home/strick/go/s):06276         L1B32.0  equ   *
                      (/home/strick/go/s):06277                  IFNE  H6309
                      (/home/strick/go/s):06278                  clrd               ATD: moved here for size
1F04                  (/home/strick/go/s):06279         L1B32    clrw
                      (/home/strick/go/s):06280                  stw   ,x
                      (/home/strick/go/s):06281                  ste   2,x
                      (/home/strick/go/s):06282                  ELSE
1F04 4F               (/home/strick/go/s):06283                  clra
1F05 5F               (/home/strick/go/s):06284                  clrb
1F06 3406             (/home/strick/go/s):06285         L1B32    pshs  d
1F08 4F               (/home/strick/go/s):06286                  clra
1F09 5F               (/home/strick/go/s):06287                  clrb
1F0A DDB5             (/home/strick/go/s):06288                  std   <$B5
1F0C ED84             (/home/strick/go/s):06289                  std   ,x
1F0E A702             (/home/strick/go/s):06290                  sta   2,x
1F10 3506             (/home/strick/go/s):06291                  puls  d
                      (/home/strick/go/s):06292                  ENDC
1F12 ED03             (/home/strick/go/s):06293                  std   3,x
1F14 39               (/home/strick/go/s):06294                  rts   
                      (/home/strick/go/s):06295         
1F15 3406             (/home/strick/go/s):06296         L1B3B    pshs  d
                      (/home/strick/go/s):06297                  IFNE  H6309
                      (/home/strick/go/s):06298                  ldq   ,y
                      (/home/strick/go/s):06299                  stq   ,x
                      (/home/strick/go/s):06300                  ELSE
1F17 EC22             (/home/strick/go/s):06301                  ldd   2,y
1F19 DDB5             (/home/strick/go/s):06302                  std   <$B5
1F1B ED02             (/home/strick/go/s):06303                  std   2,x
1F1D ECA4             (/home/strick/go/s):06304                  ldd   ,y
1F1F ED84             (/home/strick/go/s):06305                  std   ,x
                      (/home/strick/go/s):06306                  ENDC
1F21 E624             (/home/strick/go/s):06307                  ldb   4,y
1F23 E704             (/home/strick/go/s):06308                  stb   4,x
1F25 3586             (/home/strick/go/s):06309                  puls  pc,d
                      (/home/strick/go/s):06310         
1F27 1E23             (/home/strick/go/s):06311         L1B52    exg   y,u
1F29 1E12             (/home/strick/go/s):06312                  exg   x,y
1F2B 8DE8             (/home/strick/go/s):06313                  bsr   L1B3B
1F2D 1E12             (/home/strick/go/s):06314                  exg   x,y
1F2F 1E23             (/home/strick/go/s):06315                  exg   y,u
1F31 39               (/home/strick/go/s):06316                  rts
                      (/home/strick/go/s):06317                  
                      (/home/strick/go/s):06318         * Called by ellipse
                      (/home/strick/go/s):06319         * Add 16 bit to 40 bit number @ X (but don't carry in 5th byte)
1F32 CC0001           (/home/strick/go/s):06320         L1B63    ldd   #$0001       for circle, etc. above
1F35 3406             (/home/strick/go/s):06321         L1B64    pshs  d
1F37 E303             (/home/strick/go/s):06322                  addd  3,x
1F39 ED03             (/home/strick/go/s):06323                  std   3,x
1F3B CC0000           (/home/strick/go/s):06324                  ldd   #$0000         For using carry
                      (/home/strick/go/s):06325                  IFNE  H6309
                      (/home/strick/go/s):06326                  adcd  1,x
                      (/home/strick/go/s):06327                  ELSE
1F3E E902             (/home/strick/go/s):06328                  adcb  2,x
1F40 A901             (/home/strick/go/s):06329                  adca  1,x
                      (/home/strick/go/s):06330                  ENDC
1F42 ED01             (/home/strick/go/s):06331                  std   1,x
1F44 C600             (/home/strick/go/s):06332                  ldb   #$00           *CHANGE: WAS CLRB, BUT THAT WOULD SCREW CARRY UP
1F46 E984             (/home/strick/go/s):06333                  adcb  ,x
1F48 E784             (/home/strick/go/s):06334                  stb   ,x
1F4A 3586             (/home/strick/go/s):06335                  puls  pc,d
                      (/home/strick/go/s):06336         
                      (/home/strick/go/s):06337         * Add 40 bit # @ X to 40 bit # @ Y; result into X
1F4C 3406             (/home/strick/go/s):06338         L1B7A    pshs  d
1F4E EC03             (/home/strick/go/s):06339                  ldd   3,x
1F50 E323             (/home/strick/go/s):06340                  addd  3,y
1F52 ED03             (/home/strick/go/s):06341                  std   3,x
1F54 EC01             (/home/strick/go/s):06342                  ldd   1,x
                      (/home/strick/go/s):06343                  IFNE  H6309
                      (/home/strick/go/s):06344                  adcd  1,y
                      (/home/strick/go/s):06345                  ELSE
1F56 E922             (/home/strick/go/s):06346                  adcb  2,y
1F58 A921             (/home/strick/go/s):06347                  adca  1,y
                      (/home/strick/go/s):06348                  ENDC
1F5A ED01             (/home/strick/go/s):06349                  std   1,x
1F5C E684             (/home/strick/go/s):06350                  ldb   ,x
1F5E E9A4             (/home/strick/go/s):06351                  adcb  ,y
1F60 E784             (/home/strick/go/s):06352                  stb   ,x
1F62 3586             (/home/strick/go/s):06353                  puls  pc,d
                      (/home/strick/go/s):06354         
1F64 8DA0             (/home/strick/go/s):06355         L1BA1.0  bsr   L1B32
1F66 3426             (/home/strick/go/s):06356         L1BA1    pshs  y,d
                      (/home/strick/go/s):06357                  IFNE  H6309
                      (/home/strick/go/s):06358                  clrd
                      (/home/strick/go/s):06359                  ELSE
1F68 4F               (/home/strick/go/s):06360                  clra
1F69 5F               (/home/strick/go/s):06361                  clrb
                      (/home/strick/go/s):06362                  ENDC
1F6A 3406             (/home/strick/go/s):06363                  pshs  d              Put 3 0's on stack
1F6C 3404             (/home/strick/go/s):06364                  pshs  b
1F6E 1F42             (/home/strick/go/s):06365                  tfr   s,y
1F70 8D06             (/home/strick/go/s):06366                  bsr   L1BB4
1F72 3263             (/home/strick/go/s):06367                  leas  3,s
1F74 35A6             (/home/strick/go/s):06368                  puls  pc,y,d
                      (/home/strick/go/s):06369         
1F76 8D8E             (/home/strick/go/s):06370         L1BB1    bsr   L1B32          Make 5 byte integer of D @ X
1F78 3466             (/home/strick/go/s):06371         L1BB4    pshs  u,y,d          Preserve regs on stack
1F7A 3276             (/home/strick/go/s):06372                  leas  -10,s          Make buffer for two 5 byte integers
1F7C 1F43             (/home/strick/go/s):06373                  tfr   s,u            Point U to first buffer
                      (/home/strick/go/s):06374         * Was subroutine 1B5D
1F7E 1E13             (/home/strick/go/s):06375                  exg   x,u            Swap temp ptr with X ptr
1F80 8D93             (/home/strick/go/s):06376                  bsr   L1B3B          Copy 5 byte # from Y to X (into 1st temp buffer)
1F82 1E13             (/home/strick/go/s):06377                  exg   x,u            Swap ptrs back
                      (/home/strick/go/s):06378         
1F84 1F32             (/home/strick/go/s):06379                  tfr   u,y            Move stack ptr to Y
1F86 3345             (/home/strick/go/s):06380                  leau  5,u            Point U to 2nd 5 byte buffer
1F88 8D9D             (/home/strick/go/s):06381                  bsr   L1B52
                      (/home/strick/go/s):06382                  IFNE  H6309
                      (/home/strick/go/s):06383                  bsr   L1B32.0      ATD: CLRD moved for size
                      (/home/strick/go/s):06384                  ELSE
1F8A 17FF77           (/home/strick/go/s):06385                  lbsr  L1B32.0
                      (/home/strick/go/s):06386                  ENDC
1F8D 200E             (/home/strick/go/s):06387                  bra   L1BCB
                      (/home/strick/go/s):06388         
1F8F 6824             (/home/strick/go/s):06389         L1BC9    lsl   4,y            Multiply 5 byte integer by 2
                      (/home/strick/go/s):06390                  IFNE  H6309
                      (/home/strick/go/s):06391                  ldq   ,y
                      (/home/strick/go/s):06392                  rolw
                      (/home/strick/go/s):06393                  rold
                      (/home/strick/go/s):06394                  stq   ,y
                      (/home/strick/go/s):06395                  ELSE
1F91 EC22             (/home/strick/go/s):06396                  ldd   2,y
1F93 59               (/home/strick/go/s):06397                  rolb
1F94 49               (/home/strick/go/s):06398                  rola
1F95 ED22             (/home/strick/go/s):06399                  std   2,y
1F97 ECA4             (/home/strick/go/s):06400                  ldd   ,y
1F99 59               (/home/strick/go/s):06401                  rolb
1F9A 49               (/home/strick/go/s):06402                  rola
1F9B EDA4             (/home/strick/go/s):06403                  std   ,y
                      (/home/strick/go/s):06404                  ENDC
                      (/home/strick/go/s):06405         
                      (/home/strick/go/s):06406         * Loop-Divide U by 2 until U=0 or uneven divide
                      (/home/strick/go/s):06407         *  (each time, multiply Y by 2)
                      (/home/strick/go/s):06408         * When U=0 & no remainder, exits
                      (/home/strick/go/s):06409         * When U=0 & remainder, 5 byte # @ X = that # + 5 byte # @ Y
                      (/home/strick/go/s):06410         * NOTE: If it works, change below & L1C06 to use LDQ/RORD/RORW/STQ
1F9D 64C4             (/home/strick/go/s):06411         L1BCB    lsr   ,u             Divide 5 byte integer by 2
1F9F 261E             (/home/strick/go/s):06412                  bne   L1C06          If any non-zero bytes, make sure to clear 0 flag
1FA1 6641             (/home/strick/go/s):06413                  ror   1,u
1FA3 261C             (/home/strick/go/s):06414                  bne   L1C08
1FA5 6642             (/home/strick/go/s):06415                  ror   2,u
1FA7 261A             (/home/strick/go/s):06416                  bne   L1C0A
1FA9 6643             (/home/strick/go/s):06417                  ror   3,u
1FAB 2618             (/home/strick/go/s):06418                  bne   L1C0C
1FAD 6644             (/home/strick/go/s):06419                  ror   4,u
                      (/home/strick/go/s):06420         * If it gets this far, the resulting 5 byte # is zero
1FAF 2706             (/home/strick/go/s):06421                  beq   L1BD5          If result=0, skip ahead
1FB1 24DC             (/home/strick/go/s):06422         NewLbl   bcc   L1BC9          If no remainder, multiply Y by 2 again
1FB3 8D97             (/home/strick/go/s):06423                  bsr   L1B7A          X=X+Y (5 byte #'s @ register names)
1FB5 20D8             (/home/strick/go/s):06424                  bra   L1BC9          Continue (multiply Y by 2 & divide U by 2 again)
                      (/home/strick/go/s):06425         
1FB7 2402             (/home/strick/go/s):06426         L1BD5    bcc   L1BD9          If result=0 & no remainder, done & return
1FB9 8D91             (/home/strick/go/s):06427                  bsr   L1B7A          X=X+Y (5 byte #'s @ register names)
1FBB 326A             (/home/strick/go/s):06428         L1BD9    leas  10,s           Eat 2 5 byte integers off of stack
1FBD 35E6             (/home/strick/go/s):06429                  puls  pc,u,y,d       Restore regs & return
                      (/home/strick/go/s):06430         
1FBF 6641             (/home/strick/go/s):06431         L1C06    ror   1,u            Finishes divide by 2 with non-zero result
1FC1 6642             (/home/strick/go/s):06432         L1C08    ror   2,u
1FC3 6643             (/home/strick/go/s):06433         L1C0A    ror   3,u
1FC5 6644             (/home/strick/go/s):06434         L1C0C    ror   4,u
1FC7 20E8             (/home/strick/go/s):06435                  bra   NewLbl         Continue
                      (/home/strick/go/s):06436         
                      (/home/strick/go/s):06437         * Negate 5 byte integer
1FC9 1E12             (/home/strick/go/s):06438         L1C11.0  exg   x,y          ATD: moved here for size
1FCB 6384             (/home/strick/go/s):06439         L1C11    com   ,x             Invert # @ X
1FCD 6301             (/home/strick/go/s):06440                  com   1,x
1FCF 6302             (/home/strick/go/s):06441                  com   2,x
1FD1 6303             (/home/strick/go/s):06442                  com   3,x
1FD3 6304             (/home/strick/go/s):06443                  com   4,x
                      (/home/strick/go/s):06444         
1FD5 6C04             (/home/strick/go/s):06445                  inc   4,x
1FD7 260E             (/home/strick/go/s):06446                  bne   L1C2D
1FD9 6C03             (/home/strick/go/s):06447                  inc   3,x
1FDB 260A             (/home/strick/go/s):06448                  bne   L1C2D
1FDD 6C02             (/home/strick/go/s):06449                  inc   2,x
1FDF 2606             (/home/strick/go/s):06450                  bne   L1C2D
1FE1 6C01             (/home/strick/go/s):06451                  inc   1,x
1FE3 2602             (/home/strick/go/s):06452                  bne   L1C2D
1FE5 6C84             (/home/strick/go/s):06453                  inc   ,x
1FE7 39               (/home/strick/go/s):06454         L1C2D    rts
                      (/home/strick/go/s):06455         
1FE8 3406             (/home/strick/go/s):06456         L1C2E    pshs  d
1FEA EC84             (/home/strick/go/s):06457                  ldd   ,x
1FEC 10A3A4           (/home/strick/go/s):06458                  cmpd  ,y
1FEF 2615             (/home/strick/go/s):06459                  bne   L1C4D
1FF1 EC02             (/home/strick/go/s):06460                  ldd   $02,x
1FF3 10A322           (/home/strick/go/s):06461                  cmpd  $02,y
1FF6 2606             (/home/strick/go/s):06462                  bne   L1C44
1FF8 E604             (/home/strick/go/s):06463                  ldb   $04,x
1FFA E124             (/home/strick/go/s):06464                  cmpb  $04,y
1FFC 2708             (/home/strick/go/s):06465                  beq   L1C4D
1FFE 2203             (/home/strick/go/s):06466         L1C44    bhi   L1C4A
2000 8608             (/home/strick/go/s):06467                  lda   #$08
2002 21               (/home/strick/go/s):06468                  fcb   $21          skip one byte: same cycle time, 1 byte smaller
2003 4F               (/home/strick/go/s):06469         L1C4A    clra
2004 1F8A             (/home/strick/go/s):06470         L1C4B    tfr   a,cc
2006 3586             (/home/strick/go/s):06471         L1C4D    puls  pc,d
                      (/home/strick/go/s):06472         
                      (/home/strick/go/s):06473         
                      (/home/strick/go/s):06474         * FFill entry point
2008 17FBE6           (/home/strick/go/s):06475         L1C4F    lbsr  L1884        ATD: +11C:-6B  exit if screen is text
200B C601             (/home/strick/go/s):06476                  ldb   #$01           Set flag that no error has occurred
200D D7B1             (/home/strick/go/s):06477                  stb   <$b1         LCB:Set flag that this is the 1st time through
200F D72A             (/home/strick/go/s):06478                  stb   <$002A
2011 170203           (/home/strick/go/s):06479                  lbsr  L1DF6          Check/calculate scaling
2014 102500A6         (/home/strick/go/s):06480                  lbcs  L1CBF          Illegal coordinate, exit
                      (/home/strick/go/s):06481                  IFNE  H6309
                      (/home/strick/go/s):06482                  ldq   <$47         Get original X,Y start (now scaled)
                      (/home/strick/go/s):06483                  stq   <$AD         Save them
                      (/home/strick/go/s):06484                  ELSE
2018 DC49             (/home/strick/go/s):06485                  ldd   <$49
201A DDB5             (/home/strick/go/s):06486                  std   <$B5
201C DDAF             (/home/strick/go/s):06487                  std   <$AF
201E DC47             (/home/strick/go/s):06488                  ldd   <$47
2020 DDAD             (/home/strick/go/s):06489                  std   <$AD
                      (/home/strick/go/s):06490                  ENDC
2022 17F3F1           (/home/strick/go/s):06491                  lbsr  L1E9D          Calculate screen address to start filling @
2025 9F72             (/home/strick/go/s):06492                  stx   <$0072         Save ptr to start pixel on physical screen
2027 D774             (/home/strick/go/s):06493                  stb   <$0074         Save bit mask for start pixel
                      (/home/strick/go/s):06494         * replaced the code above with this: slightly larger, but L1F4B is smaller,
                      (/home/strick/go/s):06495         * and this code is only executed once, while L1F4B is executed many times
                      (/home/strick/go/s):06496         * the additional benefit is that <$0028 is now the full-byte color mask
                      (/home/strick/go/s):06497         * instead of the single pixel mask, and we can do byte-by-byte checks!
2029 E484             (/home/strick/go/s):06498                  andb  ,x           get first pixel: somewhere in the byte...
202B 8E4772           (/home/strick/go/s):06499                  ldx   #GrfStrt+L075F-1   point to table of pixel masks
202E 9660             (/home/strick/go/s):06500                  lda   <$0060         Get screen type
2030 A686             (/home/strick/go/s):06501                  lda   a,x            Get subtable ptr
2032 3086             (/home/strick/go/s):06502                  leax  a,x            Point to proper screen table
2034 A602             (/home/strick/go/s):06503                  lda   2,x          skip mask, color 0, get color 1 full-byte mask
2036 3D               (/home/strick/go/s):06504                  mul                multiple color by $FF, $55, or $11 (1,4,16-color)
                      (/home/strick/go/s):06505                  IFNE  H6309
                      (/home/strick/go/s):06506                  orr   b,a          bits are all mixed up: OR them together
                      (/home/strick/go/s):06507                  ELSE
2037 3404             (/home/strick/go/s):06508                  pshs  b
2039 AAE0             (/home/strick/go/s):06509                  ora   ,s+
                      (/home/strick/go/s):06510                  ENDC
                      (/home/strick/go/s):06511         * now A = full-byte color mask for the color we want to FFILL on
203B 8E595E           (/home/strick/go/s):06512                  ldx   #GrfStrt+L16B1-1  point to pixels/byte table
203E D660             (/home/strick/go/s):06513                  ldb   <$0060       get screen type again
2040 E685             (/home/strick/go/s):06514                  ldb   b,x          get B=pixels per byte
2042 DD28             (/home/strick/go/s):06515                  std   <$0028       save full-byte color mask, pixels per byte
                      (/home/strick/go/s):06516         * end of inserted code: a bit larger, but MUCH faster in the end
2044 A126             (/home/strick/go/s):06517                  cmpa  Wt.Fore,y      background color as current foreground color?
2046 276E             (/home/strick/go/s):06518                  beq   L1CB7          Yes, exit if no stack overflow occurred
2048 6FE2             (/home/strick/go/s):06519                  clr   ,-s          save y-direction=0: done FFILLing
204A 170285           (/home/strick/go/s):06520                  lbsr  L1EF1          Setup start pixel mask & vector for right dir.
204D 8D05             (/home/strick/go/s):06521                  bsr   L1F1D
204F 9E72             (/home/strick/go/s):06522                  ldx   <$0072
2051 1600A9           (/home/strick/go/s):06523                  lbra  L1CC6
                      (/home/strick/go/s):06524         * Setup up bit mask & branch table for flood filling in the left direction
2054 9660             (/home/strick/go/s):06525         L1F1D    lda   <$0060         Get screen type
2056 8E6060           (/home/strick/go/s):06526                  ldx   #GrfStrt+L1F2C-2  Point to table
2059 48               (/home/strick/go/s):06527                  lsla                 x2 for table offset
205A EC86             (/home/strick/go/s):06528                  ldd   a,x            Get mask and branch offset
205C 977C             (/home/strick/go/s):06529                  sta   <$007C         Preserve bit mask
205E 3A               (/home/strick/go/s):06530                  abx                  Store vector to bit shift routine
205F 9F7A             (/home/strick/go/s):06531                  stx   <$007A         save for later
2061 39               (/home/strick/go/s):06532                  rts
                      (/home/strick/go/s):06533                  
                      (/home/strick/go/s):06534         * Bit shift table to shift to the left 3,1 or 0 times
                      (/home/strick/go/s):06535         * Used by FFill when filling to the left
2062 010D             (/home/strick/go/s):06536         L1F2C    fcb   $01,L1F45-(L1F2C-2)  $1b  640 2-color
2064 030C             (/home/strick/go/s):06537                  fcb   $03,L1F44-(L1F2C-2)  $1a  320 4-color
2066 030C             (/home/strick/go/s):06538                  fcb   $03,L1F44-(L1F2C-2)  $1a  640 4-color
2068 0F0A             (/home/strick/go/s):06539                  fcb   $0f,L1F42-(L1F2C-2)  $18  320 16-color
                      (/home/strick/go/s):06540         * Bit shifts based on screen type
206A 58               (/home/strick/go/s):06541         L1F42    lslb
206B 58               (/home/strick/go/s):06542                  lslb
206C 58               (/home/strick/go/s):06543         L1F44    lslb
206D 39               (/home/strick/go/s):06544         L1F45    rts
                      (/home/strick/go/s):06545         
206E 9628             (/home/strick/go/s):06546         X1F08    lda   <$0028       get full-byte background color mask
2070 A184             (/home/strick/go/s):06547                  cmpa  ,x           same as the byte we're on?
2072 2709             (/home/strick/go/s):06548                  beq   X1F16        yes, skip ahead
2074 3341             (/home/strick/go/s):06549                  leau  1,u          otherwise go to the right one pixel
2076 54               (/home/strick/go/s):06550         X1F0E    lsrb                 Shift to next bit mask
2077 2518             (/home/strick/go/s):06551                  bcs   X1F18          Finished byte, reload for next
2079 6E9F1177         (/home/strick/go/s):06552                  jmp   [>GrfMem+gr0077]       Shift B more (if needed) depending on scrn type
                      (/home/strick/go/s):06553         
                      (/home/strick/go/s):06554         * background is a byte value, but we don't know what the X coord is
207D 4F               (/home/strick/go/s):06555         X1F16    clra
207E D629             (/home/strick/go/s):06556                  ldb   <$29         pixels per byte
                      (/home/strick/go/s):06557                  IFNE  H6309
                      (/home/strick/go/s):06558                  addr  d,u          go to the right one byte
                      (/home/strick/go/s):06559                  ELSE
2080 33CB             (/home/strick/go/s):06560                  leau  d,u
                      (/home/strick/go/s):06561                  ENDC
2082 5A               (/home/strick/go/s):06562                  decb               make 2,4,8 into 1,3,7
                      (/home/strick/go/s):06563                  IFNE  H6309
                      (/home/strick/go/s):06564                  comd               get mask
                      (/home/strick/go/s):06565                  andr  d,u          force it to the left-most pixel of the byte
                      (/home/strick/go/s):06566                  ELSE
2083 43               (/home/strick/go/s):06567                  coma
2084 53               (/home/strick/go/s):06568                  comb
2085 3406             (/home/strick/go/s):06569                  pshs  d
2087 1F30             (/home/strick/go/s):06570                  tfr   u,d
2089 A4E4             (/home/strick/go/s):06571                  anda  ,s
208B E461             (/home/strick/go/s):06572                  andb  1,s
208D 1F03             (/home/strick/go/s):06573                  tfr   d,u
208F 3506             (/home/strick/go/s):06574                  puls  d
                      (/home/strick/go/s):06575                  ENDC
2091 C601             (/home/strick/go/s):06576         X1F18    ldb   #1             Bump screen address by 1
2093 3A               (/home/strick/go/s):06577                  abx
2094 D679             (/home/strick/go/s):06578                  ldb   <$0079         Get start single pixel mask (1,2 or 4 bits set)
2096 39               (/home/strick/go/s):06579                  rts
                      (/home/strick/go/s):06580         
                      (/home/strick/go/s):06581         * Switch to next line for FFill
2097 3264             (/home/strick/go/s):06582         L1CC2    leas  4,s          Eat last set of X start ($47), end ($9B)
                      (/home/strick/go/s):06583         * $101B is a counter counted down continuously by VTIO.
                      (/home/strick/go/s):06584         * this is DEBUG code... check out 1D28: if no NEW PIXEL is put down for
                      (/home/strick/go/s):06585         * 255 ticks (~4 seconds), exit with error.
                      (/home/strick/go/s):06586         * May have to add it back in for SnakeByte Pattern paint bug?
2099 E6E0             (/home/strick/go/s):06587         L1C93    ldb   ,s+          grab y-direction to travel
209B 2719             (/home/strick/go/s):06588                  beq   L1CB7        if zero, check if we're done
209D D72B             (/home/strick/go/s):06589                  stb   <$002B       save direction to travel in
209F EBE0             (/home/strick/go/s):06590                  addb  ,s+          add into saved Y-coordinate
20A1 E1A81E           (/home/strick/go/s):06591                  cmpb  <Wt.MaxY+1,y check against the maximum Y position
20A4 22F1             (/home/strick/go/s):06592                  bhi   L1CC2        too high, eat X start,end and go DOWN
20A6 D74A             (/home/strick/go/s):06593                  stb   <$004A       save current Y-position
20A8 3516             (/home/strick/go/s):06594                  puls  d,x          restore X start, X end
20AA DD47             (/home/strick/go/s):06595                  std   <$0047       save it for later
20AC 9F4B             (/home/strick/go/s):06596                  stx   <$004B       save that, too
20AE 17F365           (/home/strick/go/s):06597                  lbsr  L1E9D        get X=logical screen coordinates, B=pixel mask
20B1 D774             (/home/strick/go/s):06598                  stb   <$0074       save starting pixel mask
20B3 7E6188           (/home/strick/go/s):06599                  jmp   >GrfStrt+L1D40  go do some painting
                      (/home/strick/go/s):06600         
                      (/home/strick/go/s):06601         * Check if done filling or if error occurred
20B6 5F               (/home/strick/go/s):06602         L1CB7    clrb                 Clear carry as default (no error)
20B7 D62A             (/home/strick/go/s):06603                  ldb   <$002A         Get done/error flag
20B9 2603             (/home/strick/go/s):06604                  bne   L1CBF          Done flag, exit without error
20BB C6BA             (/home/strick/go/s):06605         L1CBC    ldb   #E$StkOvf      Stack overflow error
20BD 43               (/home/strick/go/s):06606                  coma
20BE 7E5177           (/home/strick/go/s):06607         L1CBF    jmp   >GrfStrt+SysRet
                      (/home/strick/go/s):06608         
                      (/home/strick/go/s):06609         * Move 1 pixel to left (for FFill)
                      (/home/strick/go/s):06610         * <$0028 = full-byte color mask to paint on
                      (/home/strick/go/s):06611         * <$0029 = pixels per byte
20C1 A684             (/home/strick/go/s):06612         L1F34    lda   ,x           get current byte
20C3 9128             (/home/strick/go/s):06613                  cmpa  <$0028       full-byte background color?
20C5 2709             (/home/strick/go/s):06614                  beq   L1F3C        yes, go do full-checks
20C7 335F             (/home/strick/go/s):06615                  leau  -1,u           drop down by 1
20C9 58               (/home/strick/go/s):06616                  lslb                 Move pixel mask to left by 1
20CA 2518             (/home/strick/go/s):06617                  bcs   L1F46          If finished byte, skip ahead
20CC 6E9F117A         (/home/strick/go/s):06618                  jmp   [>GrfMem+gr007A]       Adjust for proper screen type (further LSLB's)
                      (/home/strick/go/s):06619         
20D0 4F               (/home/strick/go/s):06620         L1F3C    clra               make A=0
20D1 D629             (/home/strick/go/s):06621                  ldb   <$0029       get 16-bit value of pixels per byte
20D3 5A               (/home/strick/go/s):06622                  decb               get 7,3,1 pixel mask
                      (/home/strick/go/s):06623                  IFNE  H6309
                      (/home/strick/go/s):06624                  comd               get pixel mask, with low bits cleared out,
                      (/home/strick/go/s):06625                  andr  d,u          i.e. ensure we're to the LEFT as far as possible
                      (/home/strick/go/s):06626                  ELSE
20D4 43               (/home/strick/go/s):06627                  coma
20D5 53               (/home/strick/go/s):06628                  comb
20D6 3406             (/home/strick/go/s):06629                  pshs  d
20D8 1F30             (/home/strick/go/s):06630                  tfr   u,d
20DA A4E4             (/home/strick/go/s):06631                  anda  ,s
20DC E461             (/home/strick/go/s):06632                  andb  1,s
20DE 1F03             (/home/strick/go/s):06633                  tfr   d,u
20E0 3506             (/home/strick/go/s):06634                  puls  d
                      (/home/strick/go/s):06635                  ENDC
20E2 335F             (/home/strick/go/s):06636                  leau  -1,u         go to the left one pixel
                      (/home/strick/go/s):06637         
20E4 D67C             (/home/strick/go/s):06638         L1F46    ldb   <$007C         Get start pixel mask (on right side)
20E6 301F             (/home/strick/go/s):06639                  leax  -1,x           Bump screen's pixel ptr left & return
20E8 39               (/home/strick/go/s):06640                  rts   
                      (/home/strick/go/s):06641         
                      (/home/strick/go/s):06642         * search until we find the left-most pixel which is NOT the paint on pixel,
                      (/home/strick/go/s):06643         * or the edge of the screen
                      (/home/strick/go/s):06644         * Exits with B=pixel mask
                      (/home/strick/go/s):06645         * W = current X position
                      (/home/strick/go/s):06646         * U = W
20E9 D674             (/home/strick/go/s):06647         FFILL.1  ldb   <$0074         Get pixel mask for pixel we are doing
20EB DE47             (/home/strick/go/s):06648                  ldu   <$0047
20ED 17008A           (/home/strick/go/s):06649         L1CC8 lbsr   L1F4B        check pixel
20F0 2608             (/home/strick/go/s):06650                  bne   L1CD4        backup if not the background color pixel
20F2 8DCD             (/home/strick/go/s):06651                  bsr   L1F34        exits with U = x-coord
                      (/home/strick/go/s):06652                  IFNE  H6309
                      (/home/strick/go/s):06653                  cmpr  0,u           has it filled to line position -1?
                      (/home/strick/go/s):06654                  ELSE
20F4 11830000         (/home/strick/go/s):06655                  cmpu  #0
                      (/home/strick/go/s):06656                  ENDC
20F8 2AF3             (/home/strick/go/s):06657                  bpl   L1CC8        we're still on the same color, continue
                      (/home/strick/go/s):06658         * we've found the left boundary, go to the right
     20FA             (/home/strick/go/s):06659         L1CD4    equ   *
                      (/home/strick/go/s):06660                  IFNE  H6309
                      (/home/strick/go/s):06661                  bra   X1F08        go to the right one pixel: account for extra DECW
                      (/home/strick/go/s):06662                  ELSE
20FA 16FF71           (/home/strick/go/s):06663                  lbra  X1F08
                      (/home/strick/go/s):06664                  ENDC
                      (/home/strick/go/s):06665         
20FD 8DEA             (/home/strick/go/s):06666         L1CC6    bsr   FFILL.1
20FF DF47             (/home/strick/go/s):06667                  stu   <$0047
2101 DF9B             (/home/strick/go/s):06668                  stu   <$009B       save for later
2103 8D0A             (/home/strick/go/s):06669                  bsr   FFILL.2      paint to the right, a pixel at a time
2105 86FF             (/home/strick/go/s):06670                  lda   #$FF         get a flag: go UP one line
2107 8D5F             (/home/strick/go/s):06671                  bsr   L1D05        set up for another fill
2109 8601             (/home/strick/go/s):06672                  lda   #$01         get a flag: go DOWN one line
210B 8D5B             (/home/strick/go/s):06673                  bsr   L1D05        save more things on the stack
210D 208A             (/home/strick/go/s):06674                  bra   L1C93        go do another line
                      (/home/strick/go/s):06675         
                      (/home/strick/go/s):06676         * paint to the right, a pixel at a time.
                      (/home/strick/go/s):06677         * Exits with B=pixel mask
                      (/home/strick/go/s):06678         * W = current X position
                      (/home/strick/go/s):06679         * U = W
210F DE47             (/home/strick/go/s):06680         FFILL.2  ldu   <$0047
2111 DF20             (/home/strick/go/s):06681                  stu   <$20         save X-start for this fill routine
2113 0F2C             (/home/strick/go/s):06682                  clr   <$2C         clear flag: no pixels done yet
2115 8D63             (/home/strick/go/s):06683         ffill.2a bsr   L1F4B          check if we hit color other than background
2117 260B             (/home/strick/go/s):06684                  bne   L1CEA          yes, skip ahead
2119 17FF52           (/home/strick/go/s):06685                  lbsr  X1F08        go to the right one pixel
211C D72C             (/home/strick/go/s):06686                  stb   <$2C
211E 11A3A81B         (/home/strick/go/s):06687                  cmpu  Wt.MaxX,y      Are we at right side of window?
2122 23F1             (/home/strick/go/s):06688                  bls   FFILL.2a       no, continue
                      (/home/strick/go/s):06689         * we've gone too far to the right
2124 8D9B             (/home/strick/go/s):06690         L1CEA    bsr   L1F34        back up one pixel
                      (/home/strick/go/s):06691         * ATD: New routine added.  Do a horizontal line from left to right!
                      (/home/strick/go/s):06692         * This is not substantially faster, perhaps, but it does look better.
2126 3406             (/home/strick/go/s):06693                  pshs  d
2128 962C             (/home/strick/go/s):06694                  lda   <$2C         check flag
212A 2738             (/home/strick/go/s):06695                  beq   L1D03        skip ahead: no pixels to draw
                      (/home/strick/go/s):06696         * LCB: New routine added to check if we are redoing the 1st pixel we started
                      (/home/strick/go/s):06697         * painting at. If we are exit (Helps fill certain PSET variations that allow
                      (/home/strick/go/s):06698         * infinite recursions (loops) that hang Grfdrv)
212C 96B1             (/home/strick/go/s):06699                  lda   <$B1         Get flag that we are on 1st line of FFill
212E 2704             (/home/strick/go/s):06700                  beq   DoChecks     Not 1st time, do checks
2130 0FB1             (/home/strick/go/s):06701                  clr   <$B1         Clear flag & do draw
2132 2019             (/home/strick/go/s):06702                  bra   Not1st
                      (/home/strick/go/s):06703         
2134 DCAF             (/home/strick/go/s):06704         DoChecks ldd   <$AF         Get Y value from 1st FFill line
2136 109349           (/home/strick/go/s):06705                  cmpd  <$49         Same as current?
2139 2612             (/home/strick/go/s):06706                  bne   Not1st       No, go draw
213B 1193AD           (/home/strick/go/s):06707                  cmpu  <$AD         right side X lower or same as original X?
213E 220D             (/home/strick/go/s):06708                  bhi   Not1st       No, draw it
2140 DC20             (/home/strick/go/s):06709                  ldd   <$20         Get left X coord
2142 1093AD           (/home/strick/go/s):06710                  cmpd  <$AD         left side X higher or same as original X?
2145 2506             (/home/strick/go/s):06711                  blo   Not1st       No, draw it
2147 3264             (/home/strick/go/s):06712                  leas  4,s          We already did this, eat stack & exit w/o error
2149 5F               (/home/strick/go/s):06713                  clrb
214A 7E5177           (/home/strick/go/s):06714                  jmp   >GrfStrt+SysRet
                      (/home/strick/go/s):06715         
214D DC4B             (/home/strick/go/s):06716         Not1st   ldd   <$4B         get old coordinate: U=<$0047 already
214F 3476             (/home/strick/go/s):06717                  pshs  d,x,y,u
2151 DF4B             (/home/strick/go/s):06718                  stu   <$4B         save as X-end
2153 DC20             (/home/strick/go/s):06719                  ldd   <$20         get LHS X coordinate
2155 DD47             (/home/strick/go/s):06720                  std   <$47         save for the line routine
                      (/home/strick/go/s):06721         * ATD: warning: This routine trashes W!
                      (/home/strick/go/s):06722                  IFNE  H6309
                      (/home/strick/go/s):06723                  ldw   <$68         get LSET vector
                      (/home/strick/go/s):06724                  ELSE
2157 DE68             (/home/strick/go/s):06725                  ldu   <$68
2159 DFB5             (/home/strick/go/s):06726                  stu   <$B5
                      (/home/strick/go/s):06727                  ENDC
215B DE64             (/home/strick/go/s):06728                  ldu   <$64         and PSET vector
215D BD5968           (/home/strick/go/s):06729                  jsr   >GrfStrt+L1690  do fast horizontal line
2160 3576             (/home/strick/go/s):06730                  puls  d,x,y,u      restore registers
2162 DD4B             (/home/strick/go/s):06731                  std   <$004B       save
2164 DF47             (/home/strick/go/s):06732         L1D03    stu   <$0047       save
2166 3586             (/home/strick/go/s):06733                  puls  d,pc
                      (/home/strick/go/s):06734         
2168 3540             (/home/strick/go/s):06735         L1D05    puls  u            restore PC of calling routine
216A D64A             (/home/strick/go/s):06736                  ldb   <$004A       get B=working Y coordinate
216C 3436             (/home/strick/go/s):06737                  pshs  y,x,d        save PC, and 4 junk bytes; ???RG
                      (/home/strick/go/s):06738                  IFNE  H6309
                      (/home/strick/go/s):06739                  ldw   <$0047         Get 'working' X coord
                      (/home/strick/go/s):06740                  ELSE
216E DC47             (/home/strick/go/s):06741                  ldd   <$47
2170 DDB5             (/home/strick/go/s):06742                  std   <$B5
2172 ED64             (/home/strick/go/s):06743                  std   4,s          see stq 2,s below
                      (/home/strick/go/s):06744                  ENDC
2174 DC9B             (/home/strick/go/s):06745                  ldd   <$009B       and left-most pixel we were at
                      (/home/strick/go/s):06746                  IFNE  H6309
                      (/home/strick/go/s):06747                  stq   2,s          save X start, end positions on the stack
                      (/home/strick/go/s):06748                  ELSE
2176 ED62             (/home/strick/go/s):06749                  std   2,s          see std 4,s above
                      (/home/strick/go/s):06750                  ENDC
2178 6EC4             (/home/strick/go/s):06751                  jmp   ,u           return to calling routine
                      (/home/strick/go/s):06752         
                      (/home/strick/go/s):06753         * ATD: mod: <$0028 is full-byte color mask
                      (/home/strick/go/s):06754         * Entry: X=ptr to current byte on screen
                      (/home/strick/go/s):06755         *        B=bit mask for current pixel
                      (/home/strick/go/s):06756         * Exit:  B=bit mask for current pixel
                      (/home/strick/go/s):06757         *        CC set to check if we hit border of FFill
217A 3404             (/home/strick/go/s):06758         L1F4B    pshs  b              Preserve pixel mask
217C 1F98             (/home/strick/go/s):06759                  tfr   b,a            Duplicate it
217E A484             (/home/strick/go/s):06760                  anda  ,x             Get common bits between screen/mask
2180 D428             (/home/strick/go/s):06761                  andb  <$0028       and common bits between full-byte color and mask
                      (/home/strick/go/s):06762                  IFNE  H6309
                      (/home/strick/go/s):06763                  cmpr  b,a          are the 2 colors the same?
                      (/home/strick/go/s):06764                  ELSE
2182 3404             (/home/strick/go/s):06765                  pshs  b
2184 A1E0             (/home/strick/go/s):06766                  cmpa  ,s+
                      (/home/strick/go/s):06767                  ENDC
2186 3584             (/home/strick/go/s):06768                  puls  pc,b           Restore pixel mask & return
                      (/home/strick/go/s):06769         
                      (/home/strick/go/s):06770         * start painting at a new position.
                      (/home/strick/go/s):06771         * <$47=start X, <$49=current Y,  <$4B=end X
                      (/home/strick/go/s):06772         * Check to the left for bounds
2188 DE47             (/home/strick/go/s):06773         L1D40    ldu   <$0047       get current X
218A 335E             (/home/strick/go/s):06774                  leau  -2,u         go to the left 2 pixels? : wrap around stop pixel
218C DF9B             (/home/strick/go/s):06775                  stu   <$009B       save position
218E 17FF58           (/home/strick/go/s):06776           lbsr   FFILL.1      search to the left
2191 2003             (/home/strick/go/s):06777                  bra   L1D58        skip ahead
                      (/home/strick/go/s):06778         
2193 17FED8           (/home/strick/go/s):06779         L1D55    lbsr  X1F08        go to the right one pixel
2196 DF47             (/home/strick/go/s):06780         L1D58    stu   <$0047       save X coordinate
2198 11934B           (/home/strick/go/s):06781                  cmpu  <$004B       check against X-end from previous line
219B 1022FEFA         (/home/strick/go/s):06782                  lbhi  L1C93        too far to the right, skip this line
219F 8DD9             (/home/strick/go/s):06783                  bsr   L1F4B        check the pixel
21A1 26F0             (/home/strick/go/s):06784                  bne   L1D55        not the same, go to the right
21A3 D774             (/home/strick/go/s):06785                  stb   <$0074       save starting pixel mask
21A5 11939B           (/home/strick/go/s):06786                  cmpu  <$009B       check current X against saved start (X-2)
21A8 2E11             (/home/strick/go/s):06787                  bgt   L1D87        higher, so we do a paint to the right
21AA 8D63             (/home/strick/go/s):06788                  bsr   L1DEE        check stack
21AC 270D             (/home/strick/go/s):06789                  beq   L1D87        if 0: stack is too low
21AE DE9B             (/home/strick/go/s):06790                  ldu   <$009B       grab X
21B0 DC47             (/home/strick/go/s):06791                  ldd   <$0047       grab current X
                      (/home/strick/go/s):06792         * ATD: removed check for X coord <0, as the above call to X1F08 ensures it's
                      (/home/strick/go/s):06793         * at least 0.
21B2 3446             (/home/strick/go/s):06794                  pshs  d,u          Save X start, X end coordinates
21B4 D64A             (/home/strick/go/s):06795                  ldb   <$004A       Get Y coord
21B6 962B             (/home/strick/go/s):06796                  lda   <$002B       Get save current Y-direction
21B8 40               (/home/strick/go/s):06797                  nega               Change direction
21B9 3406             (/home/strick/go/s):06798                  pshs  d            Save direction flag and Y coord
21BB DC47             (/home/strick/go/s):06799         L1D87    ldd   <$0047       Get current X coord
21BD DD9B             (/home/strick/go/s):06800                  std   <$009B       Save duplicate (for direction change???)
21BF D674             (/home/strick/go/s):06801                  ldb   <$0074       Get current pixel mask
                      (/home/strick/go/s):06802         
                      (/home/strick/go/s):06803         * Paint towards right side
21C1 17FF4B           (/home/strick/go/s):06804         L1D98    lbsr  FFILL.2
21C4 D774             (/home/strick/go/s):06805                  stb   <$0074         Save new start pixel mask
21C6 8D47             (/home/strick/go/s):06806                  bsr   L1DEE        check stack
21C8 2708             (/home/strick/go/s):06807                  beq   L1DAA        if 0: stack is too low
21CA 962B             (/home/strick/go/s):06808                  lda   <$002B       grab direction flag
21CC 8D9A             (/home/strick/go/s):06809                  bsr   L1D05        save current X start, end on-stack
21CE D674             (/home/strick/go/s):06810                  ldb   <$0074       grab starting pixel mask
21D0 DE47             (/home/strick/go/s):06811                  ldu   <$0047       restore current X-coord
                      (/home/strick/go/s):06812         
                      (/home/strick/go/s):06813         * Small loop
21D2 17FE99           (/home/strick/go/s):06814         L1DAA    lbsr  X1F08          Adjust for next pixel on the right
21D5 D774             (/home/strick/go/s):06815                  stb   <$0074         Save new pixel mask
21D7 DF47             (/home/strick/go/s):06816                  stu   <$0047         and new X-coord
21D9 11A3A81B         (/home/strick/go/s):06817                  cmpu  Wt.MaxX,y      Hit right side of window?
21DD 2E0B             (/home/strick/go/s):06818                  bgt   L1DC4          Yes, skip ahead
21DF 11934B           (/home/strick/go/s):06819                  cmpu  <$004B         Is current X coord going past Draw ptr X coord?
21E2 2E06             (/home/strick/go/s):06820                  bgt   L1DC4          Yes, skip ahead
21E4 8D94             (/home/strick/go/s):06821                  bsr   L1F4B          Check if we are hitting a drawn border
21E6 26EA             (/home/strick/go/s):06822                  bne   L1DAA          No, keep FFilling
21E8 20D1             (/home/strick/go/s):06823                  bra   L1D87          paint to RHS of the screen
                      (/home/strick/go/s):06824         
                      (/home/strick/go/s):06825         * could be subroutine call to L1DEE
                      (/home/strick/go/s):06826         * saves 6 bytes, adds 10 clock cycles
21EA 119C3B           (/home/strick/go/s):06827         L1DC4    cmps  <$003B         Stack about to get too big?
21ED 2202             (/home/strick/go/s):06828                  bhi   L1DCB          No, continue
21EF 0F2A             (/home/strick/go/s):06829                  clr   <$002A         Yes, set flag to indicate stack overflow
21F1 335F             (/home/strick/go/s):06830         L1DCB    leau  -1,u           go to the left one pixel
21F3 DF47             (/home/strick/go/s):06831                  stu   <$0047         Save X coord
21F5 DC4B             (/home/strick/go/s):06832                  ldd   <$004B         Get draw ptr X coord
21F7 C30002           (/home/strick/go/s):06833                  addd  #2             Bump up by 2
                      (/home/strick/go/s):06834                  IFNE  H6309
                      (/home/strick/go/s):06835                  cmpr  u,d            Past current X coord in FFill?
                      (/home/strick/go/s):06836                  ELSE
21FA 3440             (/home/strick/go/s):06837                  pshs  u
21FC 10A3E1           (/home/strick/go/s):06838                  cmpd  ,s++
                      (/home/strick/go/s):06839                  ENDC
21FF 1022FE96         (/home/strick/go/s):06840                  lbhi  L1C93          Yes, go change Y-direction
2203 3446             (/home/strick/go/s):06841                  pshs  d,u            Save draw ptrs X+2, current X coord
2205 D64A             (/home/strick/go/s):06842                  ldb   <$004A         Get working Y coord
2207 962B             (/home/strick/go/s):06843                  lda   <$002B         get y-direction flag
2209 40               (/home/strick/go/s):06844                  nega                 Change direction?
220A 3406             (/home/strick/go/s):06845                  pshs  d              Save direction flag and Y coord
220C 7E6099           (/home/strick/go/s):06846         L1DEB    jmp   >GrfStrt+L1C93  go do another direction
                      (/home/strick/go/s):06847         
220F 119C3B           (/home/strick/go/s):06848         L1DEE    cmps  <$003B       check against lowest possible stack
2212 2202             (/home/strick/go/s):06849                  bhi   L1DF5        Question:  Why not just an in-line check?
2214 0F2A             (/home/strick/go/s):06850                  clr   <$002A       clear flag: stack is too low
2216 39               (/home/strick/go/s):06851         L1DF5    rts   
                      (/home/strick/go/s):06852         
2217 C647             (/home/strick/go/s):06853         L1DF6    ldb   #$47         get offset in grfdrv mem to working X coord
2219 8D58             (/home/strick/go/s):06854         L1DF8    bsr   L1E2C
                      (/home/strick/go/s):06855         * Check requested X/Y co-ordinates to window table to see if they are in range
     221B             (/home/strick/go/s):06856         L1E86    equ   *
                      (/home/strick/go/s):06857                  IFNE  H6309
                      (/home/strick/go/s):06858                  ldq   ,x           Get requested X & Y coordinates
                      (/home/strick/go/s):06859                  ELSE
221B EC02             (/home/strick/go/s):06860                  ldd   2,x
221D DDB5             (/home/strick/go/s):06861                  std   <$B5
221F EC84             (/home/strick/go/s):06862                  ldd   ,x
                      (/home/strick/go/s):06863                  ENDC
2221 10A3A81B         (/home/strick/go/s):06864                  cmpd  Wt.MaxX,y    X within max. range of window?
2225 220E             (/home/strick/go/s):06865                  bhi   L1E99        No, return error
                      (/home/strick/go/s):06866                  IFNE  H6309
                      (/home/strick/go/s):06867                  cmpw  Wt.MaxY,y    Y within max. range of window? (keep it 16-bit)
                      (/home/strick/go/s):06868                  ELSE
2227 3410             (/home/strick/go/s):06869                  pshs  x
2229 9EB5             (/home/strick/go/s):06870                  ldx   <$B5
222B ACA81D           (/home/strick/go/s):06871                  cmpx  Wt.MaxY,y
222E 3510             (/home/strick/go/s):06872                  puls  x
                      (/home/strick/go/s):06873                  ENDC
2230 2203             (/home/strick/go/s):06874                  bhi   L1E99        No, return error
2232 1CFE             (/home/strick/go/s):06875                  andcc #^Carry      They work, return without error
2234 39               (/home/strick/go/s):06876                  rts
                      (/home/strick/go/s):06877         
2235 53               (/home/strick/go/s):06878         L1E99    comb               set carry
2236 C6BD             (/home/strick/go/s):06879                  ldb   #E$ICoord    get error code
2238 39               (/home/strick/go/s):06880                  rts                return
                      (/home/strick/go/s):06881         
2239 C64B             (/home/strick/go/s):06882         L1DFD    ldb   #$4B         Get offset in grfdrv mem to current X coord
223B 20DC             (/home/strick/go/s):06883                  bra   L1DF8
223D C64F             (/home/strick/go/s):06884         L1E01    ldb   #$4F         Get offset in Grfdrv mem to X size
223F 20D8             (/home/strick/go/s):06885                  bra   L1DF8
                      (/home/strick/go/s):06886         
2241 C620             (/home/strick/go/s):06887         L1E05    ldb   #$20         Point to Arc 'clip line' Start coordinate
                      (/home/strick/go/s):06888         * Check both X and Y coordinates and see if valid (negative #'s OK)
                      (/home/strick/go/s):06889         * Entry : B=Offset into GRFDRV mem to get X & Y (16 bit) coordinates
2243 8D2E             (/home/strick/go/s):06890         L1E07    bsr   L1E2C        Do offset of X into grfdrv space by B bytes
                      (/home/strick/go/s):06891                  IFNE  H6309
                      (/home/strick/go/s):06892                  ldw   #639         Maximum value allowed
                      (/home/strick/go/s):06893                  ELSE
2245 3410             (/home/strick/go/s):06894                  pshs  x
2247 8E027F           (/home/strick/go/s):06895                  ldx   #639
224A 9FB5             (/home/strick/go/s):06896                  stx   <$B5
224C 3510             (/home/strick/go/s):06897                  puls  x
                      (/home/strick/go/s):06898                  ENDC
224E 8D0B             (/home/strick/go/s):06899                  bsr   L1E13        Check if requested coordinate is max. or less
2250 2518             (/home/strick/go/s):06900                  bcs   L1E23        Error, exit
                      (/home/strick/go/s):06901                  IFNE  H6309
                      (/home/strick/go/s):06902                  ldw   #MaxLines*8-1 Maximum Y coord allowed; check it too
                      (/home/strick/go/s):06903                  ELSE
2252 3410             (/home/strick/go/s):06904                  pshs  x
2254 8E00C7           (/home/strick/go/s):06905                  ldx   #MaxLines*8-1
2257 9FB5             (/home/strick/go/s):06906                  stx   <$B5
2259 3510             (/home/strick/go/s):06907                  puls  x
                      (/home/strick/go/s):06908                  ENDC
                      (/home/strick/go/s):06909         * Make sure 16 bit coordinate is in range
                      (/home/strick/go/s):06910         * Entry: W=Maximum value allowed
                      (/home/strick/go/s):06911         *        X=Pointer to current 16 bit number to check
                      (/home/strick/go/s):06912         * Exit:  B=Error code (carry set if error)
                      (/home/strick/go/s):06913         
225B EC81             (/home/strick/go/s):06914         L1E13    ldd   ,x++         Get original value we are checking
225D 2A05             (/home/strick/go/s):06915                  bpl   L1E1D        Positive, do the compare
                      (/home/strick/go/s):06916                  IFNE  H6309
                      (/home/strick/go/s):06917                  negd               Flip a negative # to a positive #
225F                  (/home/strick/go/s):06918         L1E1D    cmpr  w,d          If beyond maximum, return with Illegal coord error
                      (/home/strick/go/s):06919                  ELSE
225F 43               (/home/strick/go/s):06920                  coma
2260 53               (/home/strick/go/s):06921                  comb
2261 C30001           (/home/strick/go/s):06922                  addd  #1
2264 1093B5           (/home/strick/go/s):06923         L1E1D    cmpd  <$B5
                      (/home/strick/go/s):06924                  ENDC
2267 2ECC             (/home/strick/go/s):06925                  bgt   L1E99
2269 5F               (/home/strick/go/s):06926                  clrb               In range, no error
226A 39               (/home/strick/go/s):06927         L1E23    rts   
                      (/home/strick/go/s):06928         
226B C624             (/home/strick/go/s):06929         L1E24    ldb   #$24         Point to Arc 'clip line' end coordinate
226D 20D4             (/home/strick/go/s):06930                  bra   L1E07
                      (/home/strick/go/s):06931         
226F C653             (/home/strick/go/s):06932         L1E28    ldb   #$53         Point to Horizontal Radius
2271 20D0             (/home/strick/go/s):06933                  bra   L1E07
                      (/home/strick/go/s):06934         
                      (/home/strick/go/s):06935         * Offset X into grfdrv mem by B bytes (to point to 2 byte coordinates)
2273 8E1100           (/home/strick/go/s):06936         L1E2C    ldx   #GrfMem      Point to GRFDRV mem
2276 3A               (/home/strick/go/s):06937                  abx                Point X to X,y coord pair we are working with
                      (/home/strick/go/s):06938                  IFNE  H6309
                      (/home/strick/go/s):06939                  tim   #Scale,Wt.BSW,y  Scaling flag on?
                      (/home/strick/go/s):06940                  ELSE
2277 3402             (/home/strick/go/s):06941                  pshs  a
2279 A629             (/home/strick/go/s):06942                  lda   Wt.BSW,y
227B 8508             (/home/strick/go/s):06943                  bita  #Scale
227D 3502             (/home/strick/go/s):06944                  puls  a
                      (/home/strick/go/s):06945                  ENDC
227F 2704             (/home/strick/go/s):06946                  beq   L1E39        no, return
2281 EC39             (/home/strick/go/s):06947                  ldd   Wt.SXFct,y   Get X & Y scaling values
2283 2601             (/home/strick/go/s):06948                  bne   L1E3A        If either <>0, scaling is required
2285 39               (/home/strick/go/s):06949         L1E39    rts                If both 0 (256), scaling not required
                      (/home/strick/go/s):06950         
                      (/home/strick/go/s):06951         * Scaling required - Scale both X & Y coords
                      (/home/strick/go/s):06952         * Change so ldb ,s/beq are both done before ldx ,y (will save time if that
                      (/home/strick/go/s):06953         * particular axis does not require scaling)
                      (/home/strick/go/s):06954         * Entry:X=Ptr to X,Y coordinate pair (2 bytes each)
                      (/home/strick/go/s):06955         *       Y=Window tble ptr
                      (/home/strick/go/s):06956         *       A=X scaling multiplier
                      (/home/strick/go/s):06957         *       B=Y scaling multiplier
2286 3402             (/home/strick/go/s):06958         L1E3A    pshs  a            Preserve X scaling value
2288 5D               (/home/strick/go/s):06959                  tstb               Y need scaling?
2289 2721             (/home/strick/go/s):06960                  beq   NoY          No, skip scaling it
                      (/home/strick/go/s):06961         * ATD: 10 bytes smaller, 20 cycles longer
                      (/home/strick/go/s):06962         * leax 2,x
                      (/home/strick/go/s):06963         * bsr L1E4A
                      (/home/strick/go/s):06964         * leax -2,s
228B 4F               (/home/strick/go/s):06965                  clra               D=Y scaling value
                      (/home/strick/go/s):06966                  IFNE  H6309
                      (/home/strick/go/s):06967                  muld  2,x          Multiply by Y coordinate
                      (/home/strick/go/s):06968                  tfr   b,a          Move 16 bit result we want to D
                      (/home/strick/go/s):06969                  tfr   e,b
                      (/home/strick/go/s):06970                  cmpf  #$cd         Round up if >=.8 leftover
                      (/home/strick/go/s):06971                  ELSE
228C 3470             (/home/strick/go/s):06972                  pshs  x,y,u
228E AE02             (/home/strick/go/s):06973                  ldx   2,x
2290 17FC46           (/home/strick/go/s):06974                  lbsr  MUL16
2293 1F20             (/home/strick/go/s):06975                  tfr   y,d
2295 DFB5             (/home/strick/go/s):06976                  stu   <$B5
2297 3570             (/home/strick/go/s):06977                  puls  x,y,u 
2299 1F98             (/home/strick/go/s):06978                  tfr   b,a
229B D6B6             (/home/strick/go/s):06979                  ldb   <$B6
229D C1CD             (/home/strick/go/s):06980                  cmpb  #$cd         cmpf #$cd
229F 3401             (/home/strick/go/s):06981                  pshs  cc           save result
22A1 D6B5             (/home/strick/go/s):06982                  ldb   <$B5         tfr e,b
22A3 3501             (/home/strick/go/s):06983                  puls  cc
                      (/home/strick/go/s):06984                  ENDC
22A5 2503             (/home/strick/go/s):06985                  blo   L1E48        Fine, store value & do X coord
                      (/home/strick/go/s):06986                  IFNE  H6309
                      (/home/strick/go/s):06987                  incd               Round up coordinate
                      (/home/strick/go/s):06988                  ELSE
22A7 C30001           (/home/strick/go/s):06989                  addd  #1
                      (/home/strick/go/s):06990                  ENDC
22AA ED02             (/home/strick/go/s):06991         L1E48    std   2,x          Save scaled Y coordinate
22AC E6E0             (/home/strick/go/s):06992         NoY      ldb   ,s+          Get X scaling value
22AE 2721             (/home/strick/go/s):06993                  beq   L1E52        None needed, exit
22B0 4F               (/home/strick/go/s):06994         L1E4A    clra               D=X scaling value
                      (/home/strick/go/s):06995                  IFNE  H6309
                      (/home/strick/go/s):06996                  muld  ,x           Multiply by X coordinate
                      (/home/strick/go/s):06997                  tfr   b,a          Move 16 bit result we want to D
                      (/home/strick/go/s):06998                  tfr   e,b
                      (/home/strick/go/s):06999                  cmpf  #$cd         Round up if >=.8 leftover
                      (/home/strick/go/s):07000                  ELSE
22B1 3470             (/home/strick/go/s):07001                  pshs  x,y,u
22B3 AE84             (/home/strick/go/s):07002                  ldx   ,x
22B5 17FC21           (/home/strick/go/s):07003                  lbsr  MUL16
22B8 DFB5             (/home/strick/go/s):07004                  stu   <$B5
22BA 1F20             (/home/strick/go/s):07005                  tfr   y,d
22BC 3570             (/home/strick/go/s):07006                  puls  x,y,u
22BE 1F98             (/home/strick/go/s):07007                  tfr   b,a
22C0 D6B6             (/home/strick/go/s):07008                  ldb   <$B6
22C2 C1CD             (/home/strick/go/s):07009                  cmpb  #$cd         cmpf #$cd
22C4 3401             (/home/strick/go/s):07010                  pshs  cc           save result
22C6 D6B5             (/home/strick/go/s):07011                  ldb   <$B5         tfr e,b
22C8 3501             (/home/strick/go/s):07012                  puls  cc
                      (/home/strick/go/s):07013                  ENDC
22CA 2503             (/home/strick/go/s):07014                  blo   L1E50        Fine, store value & return
                      (/home/strick/go/s):07015                  IFNE  H6309
                      (/home/strick/go/s):07016                  incd               Round up coordinate
                      (/home/strick/go/s):07017                  ELSE
22CC C30001           (/home/strick/go/s):07018                  addd  #1
                      (/home/strick/go/s):07019                  ENDC
22CF ED84             (/home/strick/go/s):07020         L1E50    std   ,x           Save new X coordinate
22D1 39               (/home/strick/go/s):07021         L1E52    rts                Return
                      (/home/strick/go/s):07022         
22D2 9660             (/home/strick/go/s):07023         L1EF1    lda   <$0060       get screen type
22D4 8E62DE           (/home/strick/go/s):07024                  ldx   #GrfStrt+L1F00-2  Point to mask & offset table
22D7 48               (/home/strick/go/s):07025                  lsla               account for 2 bytes entry
22D8 EC86             (/home/strick/go/s):07026                  ldd   a,x          get mask & offset
22DA 9779             (/home/strick/go/s):07027                  sta   <$0079       Preserve mask
22DC 3A               (/home/strick/go/s):07028                  abx                Point to bit shift routine
22DD 9F77             (/home/strick/go/s):07029                  stx   <$0077       Preserve vector to bit shift routine
22DF 39               (/home/strick/go/s):07030                  rts   
                      (/home/strick/go/s):07031         
                      (/home/strick/go/s):07032         * Bit shift table to shift to the right 3,2,1 or 0 times
22E0 800D             (/home/strick/go/s):07033         L1F00    fcb   $80,L1F17-(L1F00-2)   $19    640 2 color
22E2 C00C             (/home/strick/go/s):07034                  fcb   $c0,L1F16-(L1F00-2)   $18    320 4 color
22E4 C00C             (/home/strick/go/s):07035                  fcb   $c0,L1F16-(L1F00-2)   $18    640 4 color
22E6 F00A             (/home/strick/go/s):07036                  fcb   $f0,L1F14-(L1F00-2)   $16    320 16 color
                      (/home/strick/go/s):07037         
22E8 54               (/home/strick/go/s):07038         L1F14    lsrb
22E9 54               (/home/strick/go/s):07039                  lsrb  
22EA 54               (/home/strick/go/s):07040         L1F16    lsrb  
22EB 39               (/home/strick/go/s):07041         L1F17    rts   
                      (/home/strick/go/s):07042         
                      (/home/strick/go/s):07043         * PSET vector table - if PSET is on. Otherwise, it points to L1F9E, which
                      (/home/strick/go/s):07044         * does an AND to just keep the 1 pixel's worth of the color mask and calls
                      (/home/strick/go/s):07045         * the proper LSET routine
22EC 05               (/home/strick/go/s):07046         L1FB4    fcb   L1F60-(L1FB4-1)  640x200x2
22ED 13               (/home/strick/go/s):07047                  fcb   L1F6E-(L1FB4-1)  320x200x4
22EE 13               (/home/strick/go/s):07048                  fcb   L1F6E-(L1FB4-1)  640x200x4
22EF 21               (/home/strick/go/s):07049                  fcb   L1F7C-(L1FB4-1)  320x200x16
                      (/home/strick/go/s):07050         
                      (/home/strick/go/s):07051         * PSET vector ($16,y) routine - 2 color screens
22F0 3414             (/home/strick/go/s):07052         L1F60    pshs  x,b            Preserve scrn ptr & pixel mask
22F2 8D32             (/home/strick/go/s):07053                  bsr   L1F95          Calculate pixel offset into pattern buffer
22F4 3A               (/home/strick/go/s):07054                  abx                  Since 1 bit/pixel, that is address we need
22F5 D648             (/home/strick/go/s):07055                  ldb   <$0048         Get LSB of X coord
22F7 54               (/home/strick/go/s):07056                  lsrb                 Divide by 8 for byte offset into pattern buffer
22F8 54               (/home/strick/go/s):07057                  lsrb
22F9 54               (/home/strick/go/s):07058                  lsrb
22FA C403             (/home/strick/go/s):07059                  andb  #%00000011     MOD 4 since 2 color pattern buffer 4 bytes wide
22FC 201A             (/home/strick/go/s):07060                  bra   L1F88          Go merge pattern buffer with pixel mask
                      (/home/strick/go/s):07061         
                      (/home/strick/go/s):07062         * PSET vector ($16,y) routine - 4 color screens
22FE 3414             (/home/strick/go/s):07063         L1F6E    pshs  x,b            Preserve scrn ptr & pixel mask
2300 8D24             (/home/strick/go/s):07064                  bsr   L1F95          Calculate pixel offset into pattern buffer
2302 58               (/home/strick/go/s):07065                  lslb                 Since 2 bits/pixel, multiply vert. offset by 2
2303 3A               (/home/strick/go/s):07066                  abx
2304 D648             (/home/strick/go/s):07067                  ldb   <$0048         Get LSB of X coord
2306 54               (/home/strick/go/s):07068                  lsrb                 Divide by 4 for byte offset into pattern buffer
2307 54               (/home/strick/go/s):07069                  lsrb
2308 C407             (/home/strick/go/s):07070                  andb  #%00000111     MOD 8 since 4 color pattern buffer 8 bytes wide
230A 200C             (/home/strick/go/s):07071                  bra   L1F88          Go merge pattern buffer with pixel mask
                      (/home/strick/go/s):07072         
                      (/home/strick/go/s):07073         * PSET vector ($16,y) routine - 16 color screens
230C 3414             (/home/strick/go/s):07074         L1F7C    pshs  x,b            Preserve scrn ptr & pixel mask
230E 8D16             (/home/strick/go/s):07075                  bsr   L1F95          Calculate pixel offset into pattern buffer
2310 58               (/home/strick/go/s):07076                  lslb                 Since 4 bits/pixel, multiply vert. offset by 4
2311 58               (/home/strick/go/s):07077                  lslb
2312 3A               (/home/strick/go/s):07078                  abx
2313 D648             (/home/strick/go/s):07079                  ldb   <$0048         Get LSB of X coord
2315 54               (/home/strick/go/s):07080                  lsrb                 Divide by 2 for byte offset into pattern buffer
2316 C40F             (/home/strick/go/s):07081                  andb  #%00001111     MOD 16 since 16 color pattern buffer 16 bytes wide
2318 E685             (/home/strick/go/s):07082         L1F88    ldb   b,x            Get proper byte from pattern buffer
231A E4E0             (/home/strick/go/s):07083                  andb  ,s+            Only keep bits that are in pixel mask
231C 3510             (/home/strick/go/s):07084                  puls  x              Restore screen ptr
                      (/home/strick/go/s):07085         
                      (/home/strick/go/s):07086         * DEFAULT PSET ROUTINE IF NO PATTERN BUFFER IS CURRENTLY ACTIVE. POINTED TO
                      (/home/strick/go/s):07087         * BY [$64,u], usually called from L1F5B
     231E             (/home/strick/go/s):07088         L1F9E    equ   *
                      (/home/strick/go/s):07089                  IFNE  H6309
                      (/home/strick/go/s):07090                  andr  b,a            Only keep proper color from patterned pixel mask
                      (/home/strick/go/s):07091                  jmp   ,w             Call current LSET vector
                      (/home/strick/go/s):07092                  ELSE
231E 3404             (/home/strick/go/s):07093                  pshs  b
2320 A4E0             (/home/strick/go/s):07094                  anda  ,s+
2322 6E9F11B5         (/home/strick/go/s):07095                  jmp   [>GrfMem+$B5]
                      (/home/strick/go/s):07096                  ENDC
                      (/home/strick/go/s):07097         * Calculate pixel offset into pattern buffer (32x8 pixels only) from Y coord
                      (/home/strick/go/s):07098         * Exit: X=ptr to start of data in pattern buffer
                      (/home/strick/go/s):07099         *       B=Pixel offset within buffer to go to
2326 9E66             (/home/strick/go/s):07100         L1F95    ldx   <$0066         Get current pattern's buffer ptr
2328 D64A             (/home/strick/go/s):07101                  ldb   <$004A         Calculate MOD 8 the line number we want
232A C407             (/home/strick/go/s):07102                  andb  #%00000111     to get data from the Pattern buffer
232C 58               (/home/strick/go/s):07103                  lslb                 Multiply by 4 to calculate which line within
232D 58               (/home/strick/go/s):07104                  lslb                 Pattern buffer we want (since 32 pixels/line)
232E 39               (/home/strick/go/s):07105                  rts
                      (/home/strick/go/s):07106         
232F 05D712           (/home/strick/go/s):07107                  emod
     2332             (/home/strick/go/s):07108         eom      equ    *
                      (/home/strick/go/s):07109                  end
