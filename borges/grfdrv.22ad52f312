                      (/dd/sourcecode/as):00001         ********************************************************************
                      (/dd/sourcecode/as):00002         * GrfDrv - NitrOS-9 Windowing Driver
                      (/dd/sourcecode/as):00003         *
                      (/dd/sourcecode/as):00004         * $Id$
                      (/dd/sourcecode/as):00005         *
                      (/dd/sourcecode/as):00006         * Copyright (c) 1982 Microware Corporation
                      (/dd/sourcecode/as):00007         * Modified for 6309 Native mode by Bill Nobel - Gale Force Enterprises
                      (/dd/sourcecode/as):00008         * Also contains Kevin Darlings FstGrf patches & 1 meg routines
                      (/dd/sourcecode/as):00009         *
                      (/dd/sourcecode/as):00010         * Ed.    Comments                                       Who YY/MM/DD
                      (/dd/sourcecode/as):00011         * ------------------------------------------------------------------
                      (/dd/sourcecode/as):00012         ** 08/11/92 - Active in Native mode No apparent bugs
                      (/dd/sourcecode/as):00013         ** Additional bugfixes/optomizations by Bill Nobel & L. Curtis Boyle
                      (/dd/sourcecode/as):00014         **   09/01/92 - present
                      (/dd/sourcecode/as):00015         ** NitrOS9 V1.10
                      (/dd/sourcecode/as):00016         **   05/26/93 - 3 cycle speedup in hardware text alpha put @ L0F6B
                      (/dd/sourcecode/as):00017         ** NitrOS9 V1.11
                      (/dd/sourcecode/as):00018         **   07/14/93 - Eliminated useless LDB 8,Y @ L01B5
                      (/dd/sourcecode/as):00019         **   07/14/93 - Eliminated BMI's from L01D2; replace BGT's with BHI's
                      (/dd/sourcecode/as):00020         **   07/15/93 - Save 1 cycle/byte in Composite conversion in Select routine
                      (/dd/sourcecode/as):00021         **            - Changed some pixel calcs in L06xx to use LSLD instead of
                      (/dd/sourcecode/as):00022         **              MUL's by 8 (longer, but ends up being 12 cycles faster)
                      (/dd/sourcecode/as):00023         **            - Moved L017C routine to be near Gfx cursor updates (1 cycle
                      (/dd/sourcecode/as):00024         **              faster their and for Points with Pset buffers as well)
                      (/dd/sourcecode/as):00025         **            - Moved SysRet routine near Alpha Put area to speed text output
                      (/dd/sourcecode/as):00026         **              by 4 cycles (whether error or not)
                      (/dd/sourcecode/as):00027         **            - Modified routine @ L0F04 to save up to 2 cycles per line
                      (/dd/sourcecode/as):00028         **              of PutBlk
                      (/dd/sourcecode/as):00029         **            - Modified L0E2F & L0F20 routines to speed up checks for
                      (/dd/sourcecode/as):00030         **              stopping non-TFM PutBlk's
                      (/dd/sourcecode/as):00031         **            - Changed LEAX B,X to ABX in FFill @ L1C5F
                      (/dd/sourcecode/as):00032         **              Also change LEAS -2,s / PSHS D to PSHS X,D @ L1DCB (FFill)
                      (/dd/sourcecode/as):00033         **   07/16/93 - Changed L012B routine to LDX first, then PSHS, eliminating
                      (/dd/sourcecode/as):00034         **              the need for the STX 2,S (saves 2 bytes/6 cycles)
                      (/dd/sourcecode/as):00035         **            - Got rid of LEAY/PSHS Y/PULS Y in L012B since 8 bit addressing
                      (/dd/sourcecode/as):00036         **              is same speed as 5
                      (/dd/sourcecode/as):00037         **   07/20/93 - Modified Alpha Put to have a shortcut if writing to the
                      (/dd/sourcecode/as):00038         **              same window as GRFDRV wrote to the last time it was run
                      (/dd/sourcecode/as):00039         **            - Moved L1F08 & L1F18 routines closer to LINE to allow BSR's
                      (/dd/sourcecode/as):00040         **            - Removed redundant BRA L0FF8 in 2 color gfx text put routine
                      (/dd/sourcecode/as):00041         **            - Replaced 2 BRA L102D's with PULS A,PC (same size but saves
                      (/dd/sourcecode/as):00042         **              3 cycles)
                      (/dd/sourcecode/as):00043         **            - Replaced BRA L0A38 in L0A1C routine with PULS PC,Y,A
                      (/dd/sourcecode/as):00044         **            - Replaced BRA L0AA6 in L0A75 routine with PULS PC,Y,X,B
                      (/dd/sourcecode/as):00045         **            - Replaced BRA L0BE1 in L0BA2 routine with CLRB / LBRA SysRet
                      (/dd/sourcecode/as):00046         **            - Replaced BRA L1ADD's in L1A9D routines with PULS PC,X,D's
                      (/dd/sourcecode/as):00047         **              (In Ellipse/Circle/Arc routines)
                      (/dd/sourcecode/as):00048         **   07/28/93 - Modified L11CA routine to eliminate 1 LBRA (saves 4 cycles)
                      (/dd/sourcecode/as):00049         **            - Modified pixel XOR routine to save 3 cycles (used by Gfx
                      (/dd/sourcecode/as):00050         **              Cursor)
                      (/dd/sourcecode/as):00051         **            - Changed CMPW to CMPF when checking gfx coords @ L1E86
                      (/dd/sourcecode/as):00052         **   08/06/93 - Changed BSR Lxxxx / RTS to BRA Lxxxx in following locations:
                      (/dd/sourcecode/as):00053         **              L13AD (2), Just before L0516, L0798, Just before L1A97, L1D3C
                      (/dd/sourcecode/as):00054         ** NitrOS9 V1.16
                      (/dd/sourcecode/as):00055         **   08/30/93 - Took out DECD/DECB @ L0D27 (GPBuf wrap checks), changed BHI's
                      (/dd/sourcecode/as):00056         **              to BHS's
                      (/dd/sourcecode/as):00057         **   08/30/93 - L0E14 replaced LDA / ANDA with TIM
                      (/dd/sourcecode/as):00058         **   08/31/93 - L0B79 changed registers around for split or normal Move buffer
                      (/dd/sourcecode/as):00059         **              to shrink & speed up copy slightly
                      (/dd/sourcecode/as):00060         **   09/01/93 - L0C96 - change BLE in overwrap GP Buffer to BLO ($4000 is in
                      (/dd/sourcecode/as):00061         **              next block)
                      (/dd/sourcecode/as):00062         **   09/22/93 - Moved L1BE8 to eliminate BSR (only called once)
                      (/dd/sourcecode/as):00063         **            - Moved L1BDD to L18B7 (only called once)
                      (/dd/sourcecode/as):00064         **            - Optomized 1BC9 by 7 cycles (multiply 5 byte integer x2)
                      (/dd/sourcecode/as):00065         **   09/23/93 - Remarked out L1B4B (never called-for filled circle/ellipse?)
                      (/dd/sourcecode/as):00066         **            - Moved L1B5D to L1BB4 (only called once)
                      (/dd/sourcecode/as):00067         **   09/27/93 - Moved L1BF3 to L1BCB (only called once)
                      (/dd/sourcecode/as):00068         **   09/28/93 - Sped up/shrunk RGB color copy in Select routine with LDQ
                      (/dd/sourcecode/as):00069         **            - Sped up of 2 color text by 18 cycles/character (changed
                      (/dd/sourcecode/as):00070         **              branch compare order @ L1051
                      (/dd/sourcecode/as):00071         **            - Sped up of normal gfx text @ L10ED, and shortened code @
                      (/dd/sourcecode/as):00072         **              L10FE/L1109 by moving PULS B, and optomized L1109 branch
                      (/dd/sourcecode/as):00073         **              compare order (same as L1051)
                      (/dd/sourcecode/as):00074         **            - Changed <$A9,u vector to use ,W instead (<>2 color txt on gfx
                      (/dd/sourcecode/as):00075         **              (NOTE: Type 7 window (640x200x4) tests are over 8% faster)
                      (/dd/sourcecode/as):00076         **   10/04/93 - Shortened L0FD6 (changed BNE/BRA to a BEQ/fall through) so
                      (/dd/sourcecode/as):00077         **              Proportional & 2 color fonts are faster
                      (/dd/sourcecode/as):00078         **            - Moved L122F to before L121A (eliminate BRA for wrap to next
                      (/dd/sourcecode/as):00079         **              line)
                      (/dd/sourcecode/as):00080         **            - Did optomization @ L127E for non-full screen width screen
                      (/dd/sourcecode/as):00081         **              scrolls (also called by Insert line & Delete line)
                      (/dd/sourcecode/as):00082         **            - Took out redundant LDB <$60 @ L13E3 (clear to end of screen)
                      (/dd/sourcecode/as):00083         **            - Attempted opt of L10A4 to eliminate EXG X,Y
                      (/dd/sourcecode/as):00084         **            - Re-arranged L10FA (Gfx text, not 2 color/normal) so it is
                      (/dd/sourcecode/as):00085         **              optomized for actual text, not the cursor
                      (/dd/sourcecode/as):00086         **   10/08/93 - Changed L1E2C to use LEAX B,U (since B always <$80) since
                      (/dd/sourcecode/as):00087         **              same speed but shorter
                      (/dd/sourcecode/as):00088         **            - Changed BHI L1DEB @ L1DCB to LBHI L1C93 (1 byte longer but
                      (/dd/sourcecode/as):00089         **              2 cycles shorter)
                      (/dd/sourcecode/as):00090         **            - Changed L017C (map GP Buffer blocks, both in GRFDRV DAT &
                      (/dd/sourcecode/as):00091         **              immediate) to use DP instead of <xxxx,u vars.
                      (/dd/sourcecode/as):00092         **            - Changed L0E70 to not bother changing U because of L017C change
                      (/dd/sourcecode/as):00093         **            - Modified Gfx screen map-in routine @ MMUOnly to use
                      (/dd/sourcecode/as):00094         **              DP addressing instead of ,X (eliminates LEAX too), saving
                      (/dd/sourcecode/as):00095         **              mem & 11 cycles per map
                      (/dd/sourcecode/as):00096         **            - Also removed PSHSing X in above routine & calls to it since
                      (/dd/sourcecode/as):00097         **              not needed anymore
                      (/dd/sourcecode/as):00098         **            - Changed L01FB to use LDX #$1290 instead of LEAX >$190,u
                      (/dd/sourcecode/as):00099         **            - Changed all [...],u to use DP or immediate mode whenever
                      (/dd/sourcecode/as):00100         **              possible
                      (/dd/sourcecode/as):00101         **            - Changed EXG X,Y @ L03FF to TFR X,Y (since X immediately
                      (/dd/sourcecode/as):00102         **              destroyed) (part of DWEnd to check if last window on scrn)
                      (/dd/sourcecode/as):00103         **            - Eliminated useless BRA PutIt2 @ L0C96
                      (/dd/sourcecode/as):00104         **            - Removed PSHS/PULS of U in L0C8F (L0E70 no longer destroys U)
                      (/dd/sourcecode/as):00105         **   10/19/93 - Change L1F18 to use LDB #1/ABX instead of LEAX 1,X (2 cycles
                      (/dd/sourcecode/as):00106         **              faster)
                      (/dd/sourcecode/as):00107         **            - Removed LDU #$1100 @ L0EB2 since change to L0E70 (GP buffer)
                      (/dd/sourcecode/as):00108         **   10/20/93 - BUG FIX: Changed CMPF <$1E,Y @ L1E86 to CMPW <$1D,Y (otherwise
                      (/dd/sourcecode/as):00109         **              routines that use th 16 bit Y coord for calculations screwed
                      (/dd/sourcecode/as):00110         **              up on values >255) - MAY WANT TO TO CHANGE LATER TO HAVE HARD
                      (/dd/sourcecode/as):00111         **              CODED 0 BYTE AS MSB OF Y COORDS AND SWITCH ALL CALCS POSSIBLE
                      (/dd/sourcecode/as):00112         **              TO 8 BIT (OR LEAVE 16 BIT FOR VERTICAL SCROLLABLE SCREEN
                      (/dd/sourcecode/as):00113         **              OPTIONS)
                      (/dd/sourcecode/as):00114         **            - Moved L1E86 to L1DF8 (eliminates BRA from most X,Y coord pairs)
                      (/dd/sourcecode/as):00115         **            - Moved L1F1D/L1F2C/L1F42 (right direction FFill vectors) to
                      (/dd/sourcecode/as):00116         **              within FFill (only called once, eliminates LBSR/RTS)
                      (/dd/sourcecode/as):00117         **            - Moved L1CC2 to eliminate BRA (eats coords off of FFill stack?)
                      (/dd/sourcecode/as):00118         **            - L1D1E subroutine removed, embedded in places where called
                      (/dd/sourcecode/as):00119         **            - L1DAA: eliminated LDD <$47 & changed CMPD <$4B to CMPW <$4B
                      (/dd/sourcecode/as):00120         **            - L1DCB: changed to use both D & W to save code space & time
                      (/dd/sourcecode/as):00121         **   10/21/93 - L1D14 subroutine removed, embedded in 2 places where called
                      (/dd/sourcecode/as):00122         **            - Changed BHI L1D03 to LBHI L1C93 @ L1D55 & eliminated L1D03
                      (/dd/sourcecode/as):00123         **              label
                      (/dd/sourcecode/as):00124         **            - Changed BRA L1C93 at end of L1CF8 to LBRA L1CF8
                      (/dd/sourcecode/as):00125         **            - Moved L1186 (CurXY) to before L1129 (CTRL codes) to allow
                      (/dd/sourcecode/as):00126         **              3 LBEQ's to change to BEQ's (Cursor left,right & up) -
                      (/dd/sourcecode/as):00127         **              shrinks GRFDRV by 6 bytes
                      (/dd/sourcecode/as):00128         **            - Modified L158B (update cursor) to not PSHS/PULS Y unless on
                      (/dd/sourcecode/as):00129         **              Gfx screen (speeds text cursor updates by 9 cyc/1 byte)
                      (/dd/sourcecode/as):00130         **            - Changed LBSR to BSR (L15BF) in PutGC (L1531)
                      (/dd/sourcecode/as):00131         **            - Attempted to move L06A4-L1FB2 to just before Point (L1635)
                      (/dd/sourcecode/as):00132         **              & changed leax >L1FA3,pc to LEAX <L1FA3,pc in L15FE (saves
                      (/dd/sourcecode/as):00133         **              2 cycles & 2 bytes)
                      (/dd/sourcecode/as):00134         **   10/25/93 - Changed GRFDRV entry point to use LDX instead of LEAX
                      (/dd/sourcecode/as):00135         **              (2 cycles faster)
                      (/dd/sourcecode/as):00136         **            - Changed all LEA* xxxx,pc to use LDX #GrfStrt+xxxx (2 cyc fstr)
                      (/dd/sourcecode/as):00137         **            - Changed GRFDRV entry point to do LDX / JMP ,X (1 byte shorter &
                      (/dd/sourcecode/as):00138         **              2 cycles faster)
                      (/dd/sourcecode/as):00139         **   11/02/93 - Modified Init routine to be shorter & faster
                      (/dd/sourcecode/as):00140         **            - Took old 2 line L18B3 routine, put the label in front of
                      (/dd/sourcecode/as):00141         **              stx <$A1 just past L18BF
                      (/dd/sourcecode/as):00142         **   11/03/93 - Removed the last of [<$xx,u] labels, changed FFill to use
                      (/dd/sourcecode/as):00143         **              JSR ,U instead of JSR [$<64,U]
                      (/dd/sourcecode/as):00144         **            - Removed LDU 4,s from L0B2E, and remove PSHS/PULS U from
                      (/dd/sourcecode/as):00145         **              L0ACD, L0B35, L0B38
                      (/dd/sourcecode/as):00146         **            - In L0B79 (Move Buffer command), optimized to not PSHS/PULS
                      (/dd/sourcecode/as):00147         **              Y, use U instead for ptr (13 cyc faster/72 byte block, 5 bytes
                      (/dd/sourcecode/as):00148         **              shorter)
                      (/dd/sourcecode/as):00149         **            - Added LDU <$64 in L0E97, changed JSR [$>1164] in L0EE1 to
                      (/dd/sourcecode/as):00150         **              JSR ,U (PutBlk on different screen types)
                      (/dd/sourcecode/as):00151         **   11/04/93 - Change all LBRA xxxx to JMP GrfStrt+xxxx (1 cycle faster)
                      (/dd/sourcecode/as):00152         **   11/10/93 - Added window table references from cc3global.defs
                      (/dd/sourcecode/as):00153         **            - Added screen table references from cc3global.defs
                      (/dd/sourcecode/as):00154         **            - Added graphics table references from cc3global.defs
                      (/dd/sourcecode/as):00155         **            - Added graphics buffer references from cc3global.defs
                      (/dd/sourcecode/as):00156         **   11/12/93 - Removed code that has been moved to CoWin/CoGrf
                      (/dd/sourcecode/as):00157         **   12/15/93 - Changed TST Wt.BSW,y @ L0F8E to LDB Wt.BSW,y (cycle faster)
                      (/dd/sourcecode/as):00158         **   12/21/93 - Moved L1E9D to near next line routine to speed up some alpha
                      (/dd/sourcecode/as):00159         **              writes. Also used U instead of Y in L1E9D (smaller & a cycle
                      (/dd/sourcecode/as):00160         **              faster)
                      (/dd/sourcecode/as):00161         **   02/23/94 - Moved L0BE4 error routine earlier to allow short branch to it
                      (/dd/sourcecode/as):00162         **              from L0B3F (GPLoad), also optomized for no-error (5 cycles
                      (/dd/sourcecode/as):00163         **              faster, 2 bytes smaller)
                      (/dd/sourcecode/as):00164         **   02/24/94 - Changed lbcs L0BE7 @ L0B52 to BCS
                      (/dd/sourcecode/as):00165         **   04/14/94 - Changed CMPB >$FFAC to CMPB <$90 (saves 1 byte/cycle & poss-
                      (/dd/sourcecode/as):00166         **              ibly fixes bug for >512K machines) in L012B & L0173
                      (/dd/sourcecode/as):00167         **            - Got rid of CLR >$1003 @ L0177, changed BSR L012B to BSR L0129
                      (/dd/sourcecode/as):00168         **            - Changed CMPD #$4000 to CMPA #$40 @ L0B79 & L0C96 (also fixed
                      (/dd/sourcecode/as):00169         **              bug @ L0B79-changed BLS MoveIt to BLO MoveIt)
                      (/dd/sourcecode/as):00170         **   04/15/94 - Changed L0E14 & L0E24 to use 640/320 base to eliminate INCD,
                      (/dd/sourcecode/as):00171         **              also optomized by using LSRD instead of 2 separate LDD's
                      (/dd/sourcecode/as):00172         **            - Moved INCB from L0E2F to L0E03 to allow L0E24 to fall through
                      (/dd/sourcecode/as):00173         **              faster (by also changing LDB #MaxLine to LDB #MaxLine+1)
                      (/dd/sourcecode/as):00174         **   04/21/94 - Change all occurences of >$1003 (last window GRFDRV accessed)
                      (/dd/sourcecode/as):00175         **              to <$A9 (since now free) to speed up/shrink checks.
                      (/dd/sourcecode/as):00176         **            - Attempted mod for hware text screens: faster if >1 window
                      (/dd/sourcecode/as):00177         **              being written to at once
                      (/dd/sourcecode/as):00178         **   04/25/94 - Removed LDX #$FF90 from late in L08A4, changed STD 8,x to
                      (/dd/sourcecode/as):00179         **              STD >$FF98 (Select routine-saves 4 cycles/2 bytes
                      (/dd/sourcecode/as):00180         **            - Attempted mod @ L05C0: Changed 1st TST <$60 to LDE <$60, and
                      (/dd/sourcecode/as):00181         **              2nd to TSTE (also changed 3 LSLD's in Y coord to LSLB's)
                      (/dd/sourcecode/as):00182         **              (CWArea routine)
                      (/dd/sourcecode/as):00183         **   04/26/94 - Changed L11E1 (Home cursor) to move CLRD/CLRW/STQ Wt.CurX,y
                      (/dd/sourcecode/as):00184         **              to end (just before RTS) to allow removal of CLRD/CLRW @
                      (/dd/sourcecode/as):00185         **              L1377 (CLS)
                      (/dd/sourcecode/as):00186         **   04/27/94 - Changed GFX text routines (non-2 color) to use U as jump
                      (/dd/sourcecode/as):00187         **              vector instead of W (has changes @ L0FEC,L10D9,L10FE,L15A5)
                      (/dd/sourcecode/as):00188         **            - Changed pixel across counter from <$97 to E reg in Gfx text
                      (/dd/sourcecode/as):00189         **              routine (changes @ L10D1,L10FE)
                      (/dd/sourcecode/as):00190         **   05/04/94 - Attempted to remove PSHS X/PULS X from L0C0B (used by GetBlk
                      (/dd/sourcecode/as):00191         **              and Overlay window saves)
                      (/dd/sourcecode/as):00192         **              Also changed LBSR L0CBD to BSR @ L0BEA (part of OWSet save)
                      (/dd/sourcecode/as):00193         **   05/05/94 - Changed L0B79: Took out TFR A,B, changed CLRA to CLRE, changed
                      (/dd/sourcecode/as):00194         **              TFR D,W to TFR W,D (reflects change in CoWin)
                      (/dd/sourcecode/as):00195         **   05/08/94 - Eliminated LDB #$FF @ L108C, change BNE above it to go to
                      (/dd/sourcecode/as):00196         **              L108E instead (saves 2 cyc/bytes in proportional fonts)
                      (/dd/sourcecode/as):00197         **            - Change to L127E to move LDF to just before BRA (saves 3 cyc
                      (/dd/sourcecode/as):00198         **              on partial width screen scrolls)
                      (/dd/sourcecode/as):00199         **            - Changed TST <$60 @ L1260 to LDB <$60 (saves 1 cycle)
                      (/dd/sourcecode/as):00200         **   06/15/94 - Changed TST >$1038 @ L0080 to LDB >$1038 (saves 1 cycle)
                      (/dd/sourcecode/as):00201         **            - Changed TST St.Sty,x @ L0335 to LDB St.Sty,x (save 1 cyc)
                      (/dd/sourcecode/as):00202         **            - Eliminated LDA St.Sty,x @ L0343
                      (/dd/sourcecode/as):00203         **            - Changed TST <$59 to LDB <$59 @ L046A (OWSet)
                      (/dd/sourcecode/as):00204         **            - Changed TST Wt.FBlk,y @ L0662 to LDB Wt.FBlk,y (Font)
                      (/dd/sourcecode/as):00205         ** NitrOS9 V1.21 Changes
                      (/dd/sourcecode/as):00206         **   10/16/94 - Changed L0FBE to BSR L100F instead of L1002, added L100F (PSHS
                      (/dd/sourcecode/as):00207         **              A), saves 5 cycles per alpha put onto graphics screen
                      (/dd/sourcecode/as):00208         **   10/22/94 - Eliminated useles LDB <$60 @ L029B
                      (/dd/sourcecode/as):00209         **            - Eliminated PSHS X/PULS X @ L0366 by changing PSET/LSET vector
                      (/dd/sourcecode/as):00210         **              settings to use Q since immediate mode instead of indexed now
                      (/dd/sourcecode/as):00211         **              (saves 6 bytes/>12 cycles in Window Inits)
                      (/dd/sourcecode/as):00212         **            - Changed L106D: changed LDX/STX to use D, eliminated LDX ,S
                      (/dd/sourcecode/as):00213         **              (Part of font on multi-colored windows;saves 2 bytes/4 cyc)
                      (/dd/sourcecode/as):00214         **   10/30/94 - Changed L126B (full width screen scroll) by taking out label,
                      (/dd/sourcecode/as):00215         **              (as well as L1260), and taking out PSHS/PULS X
                      (/dd/sourcecode/as):00216         **            - Changed TST <$60 to LDB <$60 @ L12C5, changed BRA L128E @
                      (/dd/sourcecode/as):00217         **              L12DC to BRA L1354 (Saves 3 cycles when using Delete Line on
                      (/dd/sourcecode/as):00218         **              bottom line of window)
                      (/dd/sourcecode/as):00219         **            - Moved CLRE in L142A to just before L142A (saves 2 cycles per
                      (/dd/sourcecode/as):00220         **              run through loop) (same thing with CLRE @ L1450)
                      (/dd/sourcecode/as):00221         **            - Deleted L146F, moved label for it to PULS pc,a @ ClsFGfx
                      (/dd/sourcecode/as):00222         ** ATD:
                      (/dd/sourcecode/as):00223         **   12/23/95 - have SCF put text-only data at $0180, and have new call
                      (/dd/sourcecode/as):00224         **              to grfdrv to do a block PUT of the text data.
                      (/dd/sourcecode/as):00225         **              Added new L0F4B, and labels L0F4B.1 and L0F4B.2
                      (/dd/sourcecode/as):00226         **              cuts by 40% the time required for alpha screen writes!
                      (/dd/sourcecode/as):00227         **   12/26/95 - moved Line/Bar/Box common code to i.line routine
                      (/dd/sourcecode/as):00228         **              +6C:-40B, only called once per entry, so it's OK
                      (/dd/sourcecode/as):00229         **   12/28/95 - added LBSR L0177 just before font set up routine at L1002
                      (/dd/sourcecode/as):00230         **              changed lbsr L0177, lbsr L1002 to lbsr L0FFF: gets +0C:-3B
                      (/dd/sourcecode/as):00231         **              par call from L1478, L116E, L1186, L1129
                      (/dd/sourcecode/as):00232         **            - replaced 3 lines of code at L1641, i.line, L1C4F with
                      (/dd/sourcecode/as):00233         **              lbsr L1884: map in window and verify it's graphics
                      (/dd/sourcecode/as):00234         **              it's only called once per iteration, so we get 3 of +11C:-6B
                      (/dd/sourcecode/as):00235         **   02/08/96 - added fast fonts on byte boundaries to L102F
                      (/dd/sourcecode/as):00236         **            - added TFM for horizontal line if LSET=0 and no PSET
                      (/dd/sourcecode/as):00237         **            - removed most of graphics screen CLS code for non-byte
                      (/dd/sourcecode/as):00238         **              boundary windows.  They don't exist, the code is unnecessary.
                      (/dd/sourcecode/as):00239         **            - changed many ADDR D,r  to LEAr D,r where speed was unimportant
                      (/dd/sourcecode/as):00240         **   02/13/96 - fixed font.2 routine to properly handle changes in foreground
                      (/dd/sourcecode/as):00241         **              and background colors: ~13 bytes smaller. (other changes???)
                      (/dd/sourcecode/as):00242         **            - added special code to fast horizontal line routine at L16E0
                      (/dd/sourcecode/as):00243         **              to do the line byte by byte: saves a few cycles, but 2B larger
                      (/dd/sourcecode/as):00244         **   02/14/96 - added 'ldu <$64' U=pset vector to i.line, bar/box. -6 bytes,
                      (/dd/sourcecode/as):00245         **              and timed at -18 clock cycles/byte for XOR to full-screen
                      (/dd/sourcecode/as):00246         **              or 14/50 = 0.28 second faster per screen (iteration)
                      (/dd/sourcecode/as):00247         **  02/16/96  - shrunk code for $1F handler. Smaller and faster.
                      (/dd/sourcecode/as):00248         **  02/18/96  - Discovered that NitrOS-9 will allow GetBlk and PutBlk on
                      (/dd/sourcecode/as):00249         **              text screens!  Checked: GET on text and PUT on gfx crashes
                      (/dd/sourcecode/as):00250         **              the system, ditto for other way around.  Stock OS-9 does NOT
                      (/dd/sourcecode/as):00251         **              allow PutBlk or GetBlk on text! No error, but no work, either.
                      (/dd/sourcecode/as):00252         **            - Added code to PutBlk to output E$IWTyp if mixing txt and gfx
                      (/dd/sourcecode/as):00253         **              GetBlk/PutBlk, but we now allow Get and put on text screens.
                      (/dd/sourcecode/as):00254         **  02/20/96  - minor mods to update video hardware at L08A4: use U
                      (/dd/sourcecode/as):00255         **            - Added 'L1B63 LDD #1' to replace multiple LDD #1/lbsr L1B64
                      (/dd/sourcecode/as):00256         **            - moved code around to optimize for size in arc/ellipse/circle
                      (/dd/sourcecode/as):00257         **              without affecting speed at all.
                      (/dd/sourcecode/as):00258         **  02/24/96  - added special purpose code for LSET AND, OR, XOR and NO PSET
                      (/dd/sourcecode/as):00259         **              to put pixels 2 bytes at a time... full-screen BAR goes from
                      (/dd/sourcecode/as):00260         **              1.4 to .35 seconds, adds ~75 bytes.
                      (/dd/sourcecode/as):00261         **            - Added code to check for 24/25 line windows in video set code
                      (/dd/sourcecode/as):00262         **              from DWSET: Wt.DfSZY=24 uses old 192 line video defs
                      (/dd/sourcecode/as):00263         **  02/25/96  - removed 24/25-line check code, optimized video hardware update
                      (/dd/sourcecode/as):00264         **  02/26/96  - fixed fast TFM and XOR (double byte) horizontal line to
                      (/dd/sourcecode/as):00265         **              update <$47 properly
                      (/dd/sourcecode/as):00266         **            - rearranged BOX routine to cut out extra X,Y updates
                      (/dd/sourcecode/as):00267         **  02/29/96  - optimized BOX routine: smaller and marginally faster
                      (/dd/sourcecode/as):00268         **  03/05/96  - moved PSET setup routines to L1884 for Point, Line, Bar, Box
                      (/dd/sourcecode/as):00269         **              Arc, Circle, Ellipse, and FFill.
                      (/dd/sourcecode/as):00270         **            - modified FFILL to do left/right checking, and right painting
                      (/dd/sourcecode/as):00271         **              to do byte operations, if possible.  Speeds up FFILL by >20%
                      (/dd/sourcecode/as):00272         **  03/07/96  - modified FFILL to search (not paint) to the right, and to
                      (/dd/sourcecode/as):00273         **              call the fast horizontal line routine. 2-color screen FFILLs
                      (/dd/sourcecode/as):00274         **              take 1/10 the time of v1.22k: 16-color takes 1/2 of the time!
                      (/dd/sourcecode/as):00275         **  03/17/96  - added TFM and left/right pixel fixes so non-PSET/LSET odd
                      (/dd/sourcecode/as):00276         **              pixel boundary PutBlks can go full-speed.
                      (/dd/sourcecode/as):00277         **  03/18/96  - optimized the fast-font routine.  16-color screens ~5% faster
                      (/dd/sourcecode/as):00278         **  04/05/96  - addeed special-purpose hardware text screen alpha put routine
                      (/dd/sourcecode/as):00279         **              about 30% faster than before: 5 times over stock 'Xmas GrfDrv'
                      (/dd/sourcecode/as):00280         **            - merged cursor On/Off routines at L157A: smaller, ~10c slower
                      (/dd/sourcecode/as):00281         **            - saved 1 byte in invert attribute color routine
                      (/dd/sourcecode/as):00282         **            - moved FastHTxt routine (i.e. deleted it: smaller, 3C slower)
                      (/dd/sourcecode/as):00283         **            - L0516 and L0581: added 'xy.intoq' routine to set up X,Y size
                      (/dd/sourcecode/as):00284         **              for text/graphics screens
                      (/dd/sourcecode/as):00285         ** V2.00a changes (LCB)
                      (/dd/sourcecode/as):00286         ** 05/25/97-05/26/97 - added code to support 224 char fonts on graphics
                      (/dd/sourcecode/as):00287         **            screens
                      (/dd/sourcecode/as):00288         **          - Changed 3 LBSR's to BSR's (@ L01B5,L1BB4,L1D40)
                      (/dd/sourcecode/as):00289         ** 12/02/97 - Attempted to fix GetBlk, PutBlk & GPLoad to handle full width
                      (/dd/sourcecode/as):00290         **            lines @ L0BAE (GetBlk), L0CBB (PutBlk),
                      (/dd/sourcecode/as):00291         **            NOTE: TO SAVE SPACE GRFDRV, MAYBE HAVE CoWin DO THE INITIAL
                      (/dd/sourcecode/as):00292         **              DEC ADJUSTMENTS, AND JUST DO THE INC'S IN GRFDRV
                      (/dd/sourcecode/as):00293         ** 07/10/98 - Fixed OWSet/CWArea bug: changed DECB to DECD @ L05C0
                      (/dd/sourcecode/as):00294         ** 07/21/98 - Fixed screen wrap on CWAREA or Overlay window on hardware text
                      (/dd/sourcecode/as):00295         **            screens by adding check @ ftxt.ext
                      (/dd/sourcecode/as):00296         ** 07/28/98 - Fixed FFill "infinite loop" bug (See SnakeByte game), I think.
                      (/dd/sourcecode/as):00297         ** 07/30/98 - Filled Circle/Ellipse added ($1b53 & $1b54)
                      (/dd/sourcecode/as):00298         ** Repository changes (RG)
                      (/dd/sourcecode/as):00299         ** 09/17/03 - Added trap for windows overlapping 512K bank; RG.
                      (/dd/sourcecode/as):00300         **            Required changing a bsr L0306 to lbsr L0306 near L02A7
                      (/dd/sourcecode/as):00301         ** 09/25/03 - Many changes for 6809 only code. Use <$B5 to store regW
                      (/dd/sourcecode/as):00302         **            Probably could use some trimming. RG
                      (/dd/sourcecode/as):00303         ** 02/26/07 - Changed Line routine to improve symmetry. The changes will permit
                      (/dd/sourcecode/as):00304         **            the removal of the FastH and FastV routines if desired. The new
                      (/dd/sourcecode/as):00305         **            Normal Line will correctly draw horizontal or vertical lines. RG
                      (/dd/sourcecode/as):00306         **     NOTE: THIS CHANGE HAS CAUSED DISTORTIONS ON SOME PROGRAMS (NOTABLY, SHAWN
                      (/dd/sourcecode/as):00307         **           DRISCOLL'S GUIB Diamond
                      (/dd/sourcecode/as):00308         ** EOU Beta 1 changes - Hardware transparency re-enabled, as per Version 3.0 upgrade.
                      (/dd/sourcecode/as):00309         **            (allows using transparency switch to switch between current background
                      (/dd/sourcecode/as):00310         **             colour setting, and leaving background color currently at text printing
                      (/dd/sourcecode/as):00311         **             location.
                      (/dd/sourcecode/as):00312         ** EOU Beta 2 changes
                      (/dd/sourcecode/as):00313         ** 11/13/18 - Fixed (along with CoWin) to allow grfdrv loaded outside of system map (BN)
                      (/dd/sourcecode/as):00314         ** 11/21/18 - Started changes (mostly for 6809 version) to use new DP address <grScrtch
                      (/dd/sourcecode/as):00315         **            for immediate temp storage instead of stack (saves 4 cycles per save/restore
                      (/dd/sourcecode/as):00316         **            or save/manipulate/check (LCB). Done in get.font, L01E0, L01FB, L0206,L023A,
                      (/dd/sourcecode/as):00317         **            L0256
                      (/dd/sourcecode/as):00318         ** 11/21/18 - Implemented mini-stack blast clear routine (4 byte even version only so far)
                      (/dd/sourcecode/as):00319         **            used by screen clear (both text and graphics modes) in DWSet, and resetting
                      (/dd/sourcecode/as):00320         **            all palettes to black when DWEnding last window on a screen.
                      (/dd/sourcecode/as):00321         *****************************************************************************
                      (/dd/sourcecode/as):00322         * NOTE: The 'WHITE SCREEN' BUG MAY BE (IF WE'RE LUCKY) ALLEVIATED BY CLR'ING
                      (/dd/sourcecode/as):00323         * OFFSET 1E IN THE STATIC MEM FOR THE WINDOW, FORCING THE WINDOWING DRIVERS
                      (/dd/sourcecode/as):00324         * TO RESTART RIGHT FROM THE DEVICE DESCRIPTOR, INSTEAD OF ASSUMING THE DATA IN
                      (/dd/sourcecode/as):00325         * STATIC MEM TO BE CORRECT??
                      (/dd/sourcecode/as):00326         
                      (/dd/sourcecode/as):00327                  nam   GrfDrv
                      (/dd/sourcecode/as):00328                  ttl   NitrOS-9 Windowing Driver
                      (/dd/sourcecode/as):00329         
                      (/dd/sourcecode/as):00330                ifp1
                      (/dd/sourcecode/as):00331                  use   /dd/defs/deffile
     0002             ( /dd/defs/deffile):00001         Level    set     2
     0000             ( /dd/defs/deffile):00002         CoGrf    set     0
     0000             ( /dd/defs/deffile):00003         MATCHBOX set     0
     0000             ( /dd/defs/deffile):00004         H6309    set     0
                      ( /dd/defs/deffile):00005                  use   /dd/defs/os9.d
                      (   /dd/defs/os9.d):00001         ********************************************************************
                      (   /dd/defs/os9.d):00002         * os9.d - NitrOS-9 System Definitions
                      (   /dd/defs/os9.d):00003         *
                      (   /dd/defs/os9.d):00004         * $Id$
                      (   /dd/defs/os9.d):00005         *
                      (   /dd/defs/os9.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/os9.d):00007         * Comment
                      (   /dd/defs/os9.d):00008         * ------------------------------------------------------------------
                      (   /dd/defs/os9.d):00009         *          1985/08/29  KMZ
                      (   /dd/defs/os9.d):00010         * Fixed DT.SBF/NFM values to 3/4
                      (   /dd/defs/os9.d):00011         *
                      (   /dd/defs/os9.d):00012         *          1985/09/01  KMZ
                      (   /dd/defs/os9.d):00013         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (   /dd/defs/os9.d):00014         *
                      (   /dd/defs/os9.d):00015         *          1985/09/03  KMZ/Robert F. Doggett
                      (   /dd/defs/os9.d):00016         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (   /dd/defs/os9.d):00017         * 68000 compatability.
                      (   /dd/defs/os9.d):00018         *
                      (   /dd/defs/os9.d):00019         *          1986/04/15  Mark G. Hawkins
                      (   /dd/defs/os9.d):00020         * F$AlHRAM System call added for COCO.
                      (   /dd/defs/os9.d):00021         *
                      (   /dd/defs/os9.d):00022         *          1986/09/08  Mark G. Hawkins
                      (   /dd/defs/os9.d):00023         * F$Alarm for COCO Clock Module.
                      (   /dd/defs/os9.d):00024         *
                      (   /dd/defs/os9.d):00025         *          1986/09/17  Mark G. Hawkins
                      (   /dd/defs/os9.d):00026         * SS.Tone For COCO.
                      (   /dd/defs/os9.d):00027         *
                      (   /dd/defs/os9.d):00028         *          1986/09/23  Mark G. Hawkins
                      (   /dd/defs/os9.d):00029         * Added F$NMLink and F$NMLoad for COCO.
                      (   /dd/defs/os9.d):00030         *
                      (   /dd/defs/os9.d):00031         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00032         * Added Reserved User $70 to $7f in sytem calls.
                      (   /dd/defs/os9.d):00033         *
                      (   /dd/defs/os9.d):00034         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00035         * Created Color Computer 3 Version of OS9Defs.
                      (   /dd/defs/os9.d):00036         *
                      (   /dd/defs/os9.d):00037         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00038         * Consoldated Level 1/Level 2 os9defs.
                      (   /dd/defs/os9.d):00039         *
                      (   /dd/defs/os9.d):00040         *          2002/04/04  Boisy G. Pitre
                      (   /dd/defs/os9.d):00041         * Consoldated Level 2/Level 2 V3 os9defs.
                      (   /dd/defs/os9.d):00042         *
                      (   /dd/defs/os9.d):00043         *          2002/04/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00044         * Added NitrOS-9 definitions.
                      (   /dd/defs/os9.d):00045         *
                      (   /dd/defs/os9.d):00046         *          2003/05/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00047         * Added WD1002 sys vars to Level One section.
                      (   /dd/defs/os9.d):00048         *
                      (   /dd/defs/os9.d):00049         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/os9.d):00050         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (   /dd/defs/os9.d):00051         * changed the sizes from 2 to 3 bytes.
                      (   /dd/defs/os9.d):00052         * DT.NFM is now the same for both Level One and Level Two.
                      (   /dd/defs/os9.d):00053         * Added DT.CDFM type for future CD-ROM file manager
                      (   /dd/defs/os9.d):00054         *
                      (   /dd/defs/os9.d):00055         *          2003/11/05  Robert Gault
                      (   /dd/defs/os9.d):00056         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (   /dd/defs/os9.d):00057         *
                      (   /dd/defs/os9.d):00058         *              2005/11/02  P.Harvey-Smith
                      (   /dd/defs/os9.d):00059         * Added definitions for boot areas on Dragon computers.
                      (   /dd/defs/os9.d):00060         *
                      (   /dd/defs/os9.d):00061         *              2006/03/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00062         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (   /dd/defs/os9.d):00063         
                      (   /dd/defs/os9.d):00064                        NAM       os9.d
                      (   /dd/defs/os9.d):00065                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (   /dd/defs/os9.d):00066         
                      (   /dd/defs/os9.d):00067         * Common definitions
     0001             (   /dd/defs/os9.d):00068         true           EQU       1                   useful name
     0000             (   /dd/defs/os9.d):00069         false          EQU       0                   useful name
                      (   /dd/defs/os9.d):00070         
                      (   /dd/defs/os9.d):00071                        PAG       
                      (   /dd/defs/os9.d):00072         *****************************************
                      (   /dd/defs/os9.d):00073         * System Service Request Code Definitions
                      (   /dd/defs/os9.d):00074         *
                      (   /dd/defs/os9.d):00075                        ORG       0
0000                  (   /dd/defs/os9.d):00076         F$Link         RMB       1                   Link to Module
0001                  (   /dd/defs/os9.d):00077         F$Load         RMB       1                   Load Module from File
0002                  (   /dd/defs/os9.d):00078         F$UnLink       RMB       1                   Unlink Module
0003                  (   /dd/defs/os9.d):00079         F$Fork         RMB       1                   Start New Process
0004                  (   /dd/defs/os9.d):00080         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (   /dd/defs/os9.d):00081         F$Chain        RMB       1                   Chain Process to New Module
0006                  (   /dd/defs/os9.d):00082         F$Exit         RMB       1                   Terminate Process
0007                  (   /dd/defs/os9.d):00083         F$Mem          RMB       1                   Set Memory Size
0008                  (   /dd/defs/os9.d):00084         F$Send         RMB       1                   Send Signal to Process
0009                  (   /dd/defs/os9.d):00085         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (   /dd/defs/os9.d):00086         F$Sleep        RMB       1                   Suspend Process
000B                  (   /dd/defs/os9.d):00087         F$SSpd         RMB       1                   Suspend Process
000C                  (   /dd/defs/os9.d):00088         F$ID           RMB       1                   Return Process ID
000D                  (   /dd/defs/os9.d):00089         F$SPrior       RMB       1                   Set Process Priority
000E                  (   /dd/defs/os9.d):00090         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (   /dd/defs/os9.d):00091         F$PErr         RMB       1                   Print Error
0010                  (   /dd/defs/os9.d):00092         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (   /dd/defs/os9.d):00093         F$CmpNam       RMB       1                   Compare Two Names
0012                  (   /dd/defs/os9.d):00094         F$SchBit       RMB       1                   Search Bit Map
0013                  (   /dd/defs/os9.d):00095         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (   /dd/defs/os9.d):00096         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (   /dd/defs/os9.d):00097         F$Time         RMB       1                   Get Current Time
0016                  (   /dd/defs/os9.d):00098         F$STime        RMB       1                   Set Current Time
0017                  (   /dd/defs/os9.d):00099         F$CRC          RMB       1                   Generate CRC ($17)
                      (   /dd/defs/os9.d):00100         
                      (   /dd/defs/os9.d):00101         
                      (   /dd/defs/os9.d):00102         * NitrOS-9 Level 2 system calls
0018                  (   /dd/defs/os9.d):00103         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (   /dd/defs/os9.d):00104         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (   /dd/defs/os9.d):00105         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (   /dd/defs/os9.d):00106         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (   /dd/defs/os9.d):00107         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (   /dd/defs/os9.d):00108         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (   /dd/defs/os9.d):00109         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (   /dd/defs/os9.d):00110                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (   /dd/defs/os9.d):00111         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (   /dd/defs/os9.d):00112         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (   /dd/defs/os9.d):00113         
                      (   /dd/defs/os9.d):00114         
                      (   /dd/defs/os9.d):00115         * NitrOS-9 Level 1 system call padding
                      (   /dd/defs/os9.d):00116         
                      (   /dd/defs/os9.d):00117         
0023                  (   /dd/defs/os9.d):00118         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (   /dd/defs/os9.d):00119         
                      (   /dd/defs/os9.d):00120         
                      (   /dd/defs/os9.d):00121                        ORG       $25
0025                  (   /dd/defs/os9.d):00122         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (   /dd/defs/os9.d):00123         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (   /dd/defs/os9.d):00124         
                      (   /dd/defs/os9.d):00125         
                      (   /dd/defs/os9.d):00126                        ORG       $27                 Beginning of System Reserved Calls
                      (   /dd/defs/os9.d):00127         * NitrOS-9 common system calls
0027                  (   /dd/defs/os9.d):00128         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (   /dd/defs/os9.d):00129         F$SRqMem       RMB       1                   System Memory Request
0029                  (   /dd/defs/os9.d):00130         F$SRtMem       RMB       1                   System Memory Return
002A                  (   /dd/defs/os9.d):00131         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (   /dd/defs/os9.d):00132         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (   /dd/defs/os9.d):00133         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (   /dd/defs/os9.d):00134         F$NProc        RMB       1                   Start Next Process
002E                  (   /dd/defs/os9.d):00135         F$VModul       RMB       1                   Validate Module
002F                  (   /dd/defs/os9.d):00136         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (   /dd/defs/os9.d):00137         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (   /dd/defs/os9.d):00138         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (   /dd/defs/os9.d):00139         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (   /dd/defs/os9.d):00140         F$IODel        RMB       1                   Delete I/O Module
                      (   /dd/defs/os9.d):00141         
                      (   /dd/defs/os9.d):00142         
0034                  (   /dd/defs/os9.d):00143         F$SLink        RMB       1                   System Link
0035                  (   /dd/defs/os9.d):00144         F$Boot         RMB       1                   Bootstrap System
0036                  (   /dd/defs/os9.d):00145         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (   /dd/defs/os9.d):00146         F$GProcP       RMB       1                   Get Process ptr
0038                  (   /dd/defs/os9.d):00147         F$Move         RMB       1                   Move Data (low bound first)
0039                  (   /dd/defs/os9.d):00148         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (   /dd/defs/os9.d):00149         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (   /dd/defs/os9.d):00150         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (   /dd/defs/os9.d):00151         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (   /dd/defs/os9.d):00152         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (   /dd/defs/os9.d):00153         F$FreeHB       RMB       1                   Get Free High Block
003F                  (   /dd/defs/os9.d):00154         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (   /dd/defs/os9.d):00155         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (   /dd/defs/os9.d):00156         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (   /dd/defs/os9.d):00157         F$ResTsk       RMB       1                   Reserve Task number
0043                  (   /dd/defs/os9.d):00158         F$RelTsk       RMB       1                   Release Task number
0044                  (   /dd/defs/os9.d):00159         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (   /dd/defs/os9.d):00160         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (   /dd/defs/os9.d):00161         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (   /dd/defs/os9.d):00162         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (   /dd/defs/os9.d):00163         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (   /dd/defs/os9.d):00164         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (   /dd/defs/os9.d):00165         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (   /dd/defs/os9.d):00166         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (   /dd/defs/os9.d):00167         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (   /dd/defs/os9.d):00168         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (   /dd/defs/os9.d):00169         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (   /dd/defs/os9.d):00170         F$MapBlk       RMB       1                   Map Specific Block
0050                  (   /dd/defs/os9.d):00171         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (   /dd/defs/os9.d):00172         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (   /dd/defs/os9.d):00173         F$GCMDir       RMB       1                   Pack module directory
0053                  (   /dd/defs/os9.d):00174         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (   /dd/defs/os9.d):00175         
                      (   /dd/defs/os9.d):00176         * Alan DeKok additions
0054                  (   /dd/defs/os9.d):00177         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (   /dd/defs/os9.d):00178         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (   /dd/defs/os9.d):00179         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (   /dd/defs/os9.d):00180         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (   /dd/defs/os9.d):00181         
                      (   /dd/defs/os9.d):00182         
                      (   /dd/defs/os9.d):00183         *
                      (   /dd/defs/os9.d):00184         * Numbers $70 through $7F are reserved for user definitions
                      (   /dd/defs/os9.d):00185         *
                      (   /dd/defs/os9.d):00186                        ORG       $70
                      (   /dd/defs/os9.d):00187         
                      (   /dd/defs/os9.d):00188         
                      (   /dd/defs/os9.d):00189         
                      (   /dd/defs/os9.d):00190         
0070                  (   /dd/defs/os9.d):00191         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (   /dd/defs/os9.d):00192         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (   /dd/defs/os9.d):00193         
0072                  (   /dd/defs/os9.d):00194                        RMB       $80-.               Reserved for user definitions
                      (   /dd/defs/os9.d):00195         
                      (   /dd/defs/os9.d):00196                        PAG       
                      (   /dd/defs/os9.d):00197         **************************************
                      (   /dd/defs/os9.d):00198         * I/O Service Request Code Definitions
                      (   /dd/defs/os9.d):00199         *
                      (   /dd/defs/os9.d):00200                        ORG       $80
0080                  (   /dd/defs/os9.d):00201         I$Attach       RMB       1                   Attach I/O Device
0081                  (   /dd/defs/os9.d):00202         I$Detach       RMB       1                   Detach I/O Device
0082                  (   /dd/defs/os9.d):00203         I$Dup          RMB       1                   Duplicate Path
0083                  (   /dd/defs/os9.d):00204         I$Create       RMB       1                   Create New File
0084                  (   /dd/defs/os9.d):00205         I$Open         RMB       1                   Open Existing File
0085                  (   /dd/defs/os9.d):00206         I$MakDir       RMB       1                   Make Directory File
0086                  (   /dd/defs/os9.d):00207         I$ChgDir       RMB       1                   Change Default Directory
0087                  (   /dd/defs/os9.d):00208         I$Delete       RMB       1                   Delete File
0088                  (   /dd/defs/os9.d):00209         I$Seek         RMB       1                   Change Current Position
0089                  (   /dd/defs/os9.d):00210         I$Read         RMB       1                   Read Data
008A                  (   /dd/defs/os9.d):00211         I$Write        RMB       1                   Write Data
008B                  (   /dd/defs/os9.d):00212         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (   /dd/defs/os9.d):00213         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (   /dd/defs/os9.d):00214         I$GetStt       RMB       1                   Get Path Status
008E                  (   /dd/defs/os9.d):00215         I$SetStt       RMB       1                   Set Path Status
008F                  (   /dd/defs/os9.d):00216         I$Close        RMB       1                   Close Path
0090                  (   /dd/defs/os9.d):00217         I$DeletX       RMB       1                   Delete from current exec dir
                      (   /dd/defs/os9.d):00218         
                      (   /dd/defs/os9.d):00219         *******************
                      (   /dd/defs/os9.d):00220         * File Access Modes
                      (   /dd/defs/os9.d):00221         *
     0001             (   /dd/defs/os9.d):00222         READ.          EQU       %00000001
     0002             (   /dd/defs/os9.d):00223         WRITE.         EQU       %00000010
     0003             (   /dd/defs/os9.d):00224         UPDAT.         EQU       READ.+WRITE.
     0004             (   /dd/defs/os9.d):00225         EXEC.          EQU       %00000100
     0008             (   /dd/defs/os9.d):00226         PREAD.         EQU       %00001000
     0010             (   /dd/defs/os9.d):00227         PWRIT.         EQU       %00010000
     0020             (   /dd/defs/os9.d):00228         PEXEC.         EQU       %00100000
     0040             (   /dd/defs/os9.d):00229         SHARE.         EQU       %01000000
     0080             (   /dd/defs/os9.d):00230         DIR.           EQU       %10000000
     0020             (   /dd/defs/os9.d):00231         ISIZ.          EQU       %00100000
                      (   /dd/defs/os9.d):00232         
                      (   /dd/defs/os9.d):00233         **************
                      (   /dd/defs/os9.d):00234         * Signal Codes
                      (   /dd/defs/os9.d):00235         *
                      (   /dd/defs/os9.d):00236                        ORG       0
0000                  (   /dd/defs/os9.d):00237         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (   /dd/defs/os9.d):00238         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (   /dd/defs/os9.d):00239         S$Abort        RMB       1                   Keyboard Abort
0003                  (   /dd/defs/os9.d):00240         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (   /dd/defs/os9.d):00241         S$Window       RMB       1                   Window Change
     0004             (   /dd/defs/os9.d):00242         S$HUP          EQU       S$Window            Hang Up
0005                  (   /dd/defs/os9.d):00243         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (   /dd/defs/os9.d):00244         
                      (   /dd/defs/os9.d):00245                        PAG       
                      (   /dd/defs/os9.d):00246         **********************************
                      (   /dd/defs/os9.d):00247         * Status Codes for GetStat/GetStat
                      (   /dd/defs/os9.d):00248         *
                      (   /dd/defs/os9.d):00249                        ORG       0
0000                  (   /dd/defs/os9.d):00250         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (   /dd/defs/os9.d):00251         SS.Ready       RMB       1                   Check for Device Ready
0002                  (   /dd/defs/os9.d):00252         SS.Size        RMB       1                   Read/Write File Size
0003                  (   /dd/defs/os9.d):00253         SS.Reset       RMB       1                   Device Restore
0004                  (   /dd/defs/os9.d):00254         SS.WTrk        RMB       1                   Device Write Track
0005                  (   /dd/defs/os9.d):00255         SS.Pos         RMB       1                   Get File Current Position
0006                  (   /dd/defs/os9.d):00256         SS.EOF         RMB       1                   Test for End of File
0007                  (   /dd/defs/os9.d):00257         SS.Link        RMB       1                   Link to Status routines
0008                  (   /dd/defs/os9.d):00258         SS.ULink       RMB       1                   Unlink Status routines
0009                  (   /dd/defs/os9.d):00259         SS.Feed        RMB       1                   Issue form feed
000A                  (   /dd/defs/os9.d):00260         SS.Frz         RMB       1                   Freeze DD. information
000B                  (   /dd/defs/os9.d):00261         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (   /dd/defs/os9.d):00262         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (   /dd/defs/os9.d):00263         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (   /dd/defs/os9.d):00264         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (   /dd/defs/os9.d):00265         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (   /dd/defs/os9.d):00266         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (   /dd/defs/os9.d):00267         SS.Lock        RMB       1                   Lock/Release record
0012                  (   /dd/defs/os9.d):00268         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (   /dd/defs/os9.d):00269         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (   /dd/defs/os9.d):00270         SS.BlkRd       RMB       1                   Block Read
0015                  (   /dd/defs/os9.d):00271         SS.BlkWr       RMB       1                   Block Write
0016                  (   /dd/defs/os9.d):00272         SS.Reten       RMB       1                   Retension cycle
0017                  (   /dd/defs/os9.d):00273         SS.WFM         RMB       1                   Write File Mark
0018                  (   /dd/defs/os9.d):00274         SS.RFM         RMB       1                   Read past File Mark
0019                  (   /dd/defs/os9.d):00275         SS.ELog        RMB       1                   Read Error Log
001A                  (   /dd/defs/os9.d):00276         SS.SSig        RMB       1                   Send signal on data ready
001B                  (   /dd/defs/os9.d):00277         SS.Relea       RMB       1                   Release device
001C                  (   /dd/defs/os9.d):00278         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (   /dd/defs/os9.d):00279         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (   /dd/defs/os9.d):00280         SS.Break       RMB       1                   Send break signal out acia
001E                  (   /dd/defs/os9.d):00281         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (   /dd/defs/os9.d):00282                        RMB       1                   Reserved
     0020             (   /dd/defs/os9.d):00283         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (   /dd/defs/os9.d):00284         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (   /dd/defs/os9.d):00285                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (   /dd/defs/os9.d):00286         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (   /dd/defs/os9.d):00287         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (   /dd/defs/os9.d):00288         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (   /dd/defs/os9.d):00289         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (   /dd/defs/os9.d):00290         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (   /dd/defs/os9.d):00291         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (   /dd/defs/os9.d):00292         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (   /dd/defs/os9.d):00293         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (   /dd/defs/os9.d):00294         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (   /dd/defs/os9.d):00295         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (   /dd/defs/os9.d):00296         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (   /dd/defs/os9.d):00297         
                      (   /dd/defs/os9.d):00298         * System Specific and User defined codes above $80
                      (   /dd/defs/os9.d):00299                        ORG       $80
0080                  (   /dd/defs/os9.d):00300         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (   /dd/defs/os9.d):00301         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (   /dd/defs/os9.d):00302         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (   /dd/defs/os9.d):00303         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (   /dd/defs/os9.d):00304         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (   /dd/defs/os9.d):00305         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (   /dd/defs/os9.d):00306         
                      (   /dd/defs/os9.d):00307         *               IFGT      Level-1
                      (   /dd/defs/os9.d):00308         * Level 2 Windowing
0086                  (   /dd/defs/os9.d):00309         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (   /dd/defs/os9.d):00310         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (   /dd/defs/os9.d):00311         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (   /dd/defs/os9.d):00312         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (   /dd/defs/os9.d):00313         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (   /dd/defs/os9.d):00314         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (   /dd/defs/os9.d):00315         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (   /dd/defs/os9.d):00316         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (   /dd/defs/os9.d):00317         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (   /dd/defs/os9.d):00318         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (   /dd/defs/os9.d):00319                        RMB       1                   Reserved
0091                  (   /dd/defs/os9.d):00320         SS.Palet       RMB       1                   Return palette information
0092                  (   /dd/defs/os9.d):00321         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (   /dd/defs/os9.d):00322         SS.ScTyp       RMB       1                   Get screen type information
0094                  (   /dd/defs/os9.d):00323         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (   /dd/defs/os9.d):00324         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (   /dd/defs/os9.d):00325         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (   /dd/defs/os9.d):00326         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (   /dd/defs/os9.d):00327         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (   /dd/defs/os9.d):00328         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (   /dd/defs/os9.d):00329         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (   /dd/defs/os9.d):00330         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (   /dd/defs/os9.d):00331         
                      (   /dd/defs/os9.d):00332         * sc6551 defined
     0099             (   /dd/defs/os9.d):00333         SS.CDSta       EQU       SS.GIP2
     009A             (   /dd/defs/os9.d):00334         SS.CDSig       EQU       SS.AnPal
     009B             (   /dd/defs/os9.d):00335         SS.CDRel       EQU       SS.FndBf
                      (   /dd/defs/os9.d):00336         * These are wide open in Level 1
                      (   /dd/defs/os9.d):00337         
                      (   /dd/defs/os9.d):00338         * sc6551 defined
                      (   /dd/defs/os9.d):00339         
                      (   /dd/defs/os9.d):00340                        ORG       $A0
                      (   /dd/defs/os9.d):00341         *
                      (   /dd/defs/os9.d):00342         * New Default SCF input buffer Set status call
00A0                  (   /dd/defs/os9.d):00343         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (   /dd/defs/os9.d):00344         SS.Hist        RMB       1                   Enable command-line history easily
                      (   /dd/defs/os9.d):00345         
                      (   /dd/defs/os9.d):00346         
                      (   /dd/defs/os9.d):00347                        ORG       $B0
                      (   /dd/defs/os9.d):00348         *
                      (   /dd/defs/os9.d):00349         * New WDDisk get/set status calls
00B0                  (   /dd/defs/os9.d):00350         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (   /dd/defs/os9.d):00351         
                      (   /dd/defs/os9.d):00352         *
                      (   /dd/defs/os9.d):00353         
                      (   /dd/defs/os9.d):00354         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (   /dd/defs/os9.d):00355         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (   /dd/defs/os9.d):00356         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (   /dd/defs/os9.d):00357         
     0081             (   /dd/defs/os9.d):00358         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (   /dd/defs/os9.d):00359         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (   /dd/defs/os9.d):00360         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (   /dd/defs/os9.d):00361         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (   /dd/defs/os9.d):00362         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (   /dd/defs/os9.d):00363         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (   /dd/defs/os9.d):00364         
                      (   /dd/defs/os9.d):00365         * SDisk 3 Definition Equates
     0080             (   /dd/defs/os9.d):00366         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (   /dd/defs/os9.d):00367         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (   /dd/defs/os9.d):00368         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (   /dd/defs/os9.d):00369         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (   /dd/defs/os9.d):00370         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (   /dd/defs/os9.d):00371         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (   /dd/defs/os9.d):00372         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (   /dd/defs/os9.d):00373         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (   /dd/defs/os9.d):00374         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return ($86)
                      (   /dd/defs/os9.d):00375         
                      (   /dd/defs/os9.d):00376         
                      (   /dd/defs/os9.d):00377                        TTL       Direct Page Definitions
                      (   /dd/defs/os9.d):00378                        PAG       
                      (   /dd/defs/os9.d):00379         
                      (   /dd/defs/os9.d):00380         **********************************
                      (   /dd/defs/os9.d):00381         * Direct Page Variable Definitions
                      (   /dd/defs/os9.d):00382         *
                      (   /dd/defs/os9.d):00383                        ORG       $00
0000                  (   /dd/defs/os9.d):00384         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (   /dd/defs/os9.d):00385         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (   /dd/defs/os9.d):00386         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (   /dd/defs/os9.d):00387                        RMB       5
0009                  (   /dd/defs/os9.d):00388         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (   /dd/defs/os9.d):00389         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (   /dd/defs/os9.d):00390         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (   /dd/defs/os9.d):00391         D.DWStat       RMB       2                   DriveWire statics page
0010                  (   /dd/defs/os9.d):00392         D.DWSrvID      RMB       1                   DriveWire server ID
                      (   /dd/defs/os9.d):00393         
                      (   /dd/defs/os9.d):00394                        ORG       $20
                      (   /dd/defs/os9.d):00395         
                      (   /dd/defs/os9.d):00396         
                      (   /dd/defs/os9.d):00397         * Level 1 DP vars
                      (   /dd/defs/os9.d):00398         
                      (   /dd/defs/os9.d):00399         *D.XSWI3        RMB       3
                      (   /dd/defs/os9.d):00400         *D.XSWI2        RMB       3
                      (   /dd/defs/os9.d):00401         *D.XFIRQ        RMB       3
                      (   /dd/defs/os9.d):00402         *D.XIRQ         RMB       3
                      (   /dd/defs/os9.d):00403         *D.XSWI         RMB       3
                      (   /dd/defs/os9.d):00404         *D.XNMI         RMB       3
                      (   /dd/defs/os9.d):00405         
                      (   /dd/defs/os9.d):00406         
                      (   /dd/defs/os9.d):00407         * Table Sizes
                      (   /dd/defs/os9.d):00408         
                      (   /dd/defs/os9.d):00409         
                      (   /dd/defs/os9.d):00410         * Level 2 DP vars
0020                  (   /dd/defs/os9.d):00411         D.Tasks        RMB       2                   Task User Table
0022                  (   /dd/defs/os9.d):00412         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (   /dd/defs/os9.d):00413         D.Init         RMB       2                   Initialization Module ptr
0026                  (   /dd/defs/os9.d):00414         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (   /dd/defs/os9.d):00415         D.Time         EQU       .                   System Time
0028                  (   /dd/defs/os9.d):00416         D.Year         RMB       1
0029                  (   /dd/defs/os9.d):00417         D.Month        RMB       1
002A                  (   /dd/defs/os9.d):00418         D.Day          RMB       1
002B                  (   /dd/defs/os9.d):00419         D.Hour         RMB       1
002C                  (   /dd/defs/os9.d):00420         D.Min          RMB       1
002D                  (   /dd/defs/os9.d):00421         D.Sec          RMB       1
002E                  (   /dd/defs/os9.d):00422         D.Tick         RMB       1
002F                  (   /dd/defs/os9.d):00423         D.Slice        RMB       1                   current slice remaining
0030                  (   /dd/defs/os9.d):00424         D.TSlice       RMB       1                   Ticks per Slice
0031                  (   /dd/defs/os9.d):00425         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (   /dd/defs/os9.d):00426         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (   /dd/defs/os9.d):00427         D.ErrCod       RMB       1                   Reset Error Code
0034                  (   /dd/defs/os9.d):00428         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (   /dd/defs/os9.d):00429         D.TkCnt        RMB       1                   Tick Counter
0036                  (   /dd/defs/os9.d):00430         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (   /dd/defs/os9.d):00431         D.BtSz         RMB       2                   Size of Boot
                      (   /dd/defs/os9.d):00432         
003A                  (   /dd/defs/os9.d):00433                        RMB       1                   Currently unused in NitrOS-9/6809
                      (   /dd/defs/os9.d):00434         
003B                  (   /dd/defs/os9.d):00435         D.CRC          RMB       1                   CRC checking mode flag
                      (   /dd/defs/os9.d):00436         
003C                  (   /dd/defs/os9.d):00437         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (   /dd/defs/os9.d):00438         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (   /dd/defs/os9.d):00439         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (   /dd/defs/os9.d):00440         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (   /dd/defs/os9.d):00441         
                      (   /dd/defs/os9.d):00442                        ORG       $40
0040                  (   /dd/defs/os9.d):00443         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (   /dd/defs/os9.d):00444         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (   /dd/defs/os9.d):00445         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (   /dd/defs/os9.d):00446         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (   /dd/defs/os9.d):00447         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (   /dd/defs/os9.d):00448         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (   /dd/defs/os9.d):00449         D.Proc         RMB       2                   Current Process ptr
0052                  (   /dd/defs/os9.d):00450         D.AProcQ       RMB       2                   Active Process Queue
0054                  (   /dd/defs/os9.d):00451         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (   /dd/defs/os9.d):00452         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (   /dd/defs/os9.d):00453         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (   /dd/defs/os9.d):00454         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (   /dd/defs/os9.d):00455         D.CldRes       RMB       2                   Cold Restart vector
005E                  (   /dd/defs/os9.d):00456         D.BtBug        RMB       3                   Boot debug information
0061                  (   /dd/defs/os9.d):00457         D.Pipe         RMB       2
                      (   /dd/defs/os9.d):00458         
                      (   /dd/defs/os9.d):00459                        ORG       $6B
006B                  (   /dd/defs/os9.d):00460         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (   /dd/defs/os9.d):00461         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (   /dd/defs/os9.d):00462         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (   /dd/defs/os9.d):00463         
                      (   /dd/defs/os9.d):00464                        ORG       $80
0080                  (   /dd/defs/os9.d):00465         D.DevTbl       RMB       2                   I/O Device Table
0082                  (   /dd/defs/os9.d):00466         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (   /dd/defs/os9.d):00467                        RMB       4                   reserved
0088                  (   /dd/defs/os9.d):00468         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (   /dd/defs/os9.d):00469         D.DMAReq       RMB       1                   DMA Request flag
                      (   /dd/defs/os9.d):00470         
                      (   /dd/defs/os9.d):00471         ********
                      (   /dd/defs/os9.d):00472         * CoCo 3 STUFF COMES NEXT
                      (   /dd/defs/os9.d):00473         * This area is used for the CoCo Hardware Registers
                      (   /dd/defs/os9.d):00474         *
                      (   /dd/defs/os9.d):00475                        ORG       $90
0090                  (   /dd/defs/os9.d):00476         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (   /dd/defs/os9.d):00477         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (   /dd/defs/os9.d):00478         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (   /dd/defs/os9.d):00479         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (   /dd/defs/os9.d):00480         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (   /dd/defs/os9.d):00481         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (   /dd/defs/os9.d):00482         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (   /dd/defs/os9.d):00483         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (   /dd/defs/os9.d):00484         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (   /dd/defs/os9.d):00485         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (   /dd/defs/os9.d):00486         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (   /dd/defs/os9.d):00487         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (   /dd/defs/os9.d):00488         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (   /dd/defs/os9.d):00489         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (   /dd/defs/os9.d):00490         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (   /dd/defs/os9.d):00491         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (   /dd/defs/os9.d):00492         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (   /dd/defs/os9.d):00493         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (   /dd/defs/os9.d):00494         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (   /dd/defs/os9.d):00495         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (   /dd/defs/os9.d):00496         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (   /dd/defs/os9.d):00497         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (   /dd/defs/os9.d):00498         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (   /dd/defs/os9.d):00499         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (   /dd/defs/os9.d):00500         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (   /dd/defs/os9.d):00501         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (   /dd/defs/os9.d):00502         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (   /dd/defs/os9.d):00503         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (   /dd/defs/os9.d):00504         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (   /dd/defs/os9.d):00505         D.Clock2       RMB       2                   CC Clock2 entry address
                      (   /dd/defs/os9.d):00506                        ORG       $C0
00C0                  (   /dd/defs/os9.d):00507         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (   /dd/defs/os9.d):00508         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (   /dd/defs/os9.d):00509         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (   /dd/defs/os9.d):00510         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (   /dd/defs/os9.d):00511         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (   /dd/defs/os9.d):00512         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (   /dd/defs/os9.d):00513         D.SysStk       RMB       2                   System stack
00CE                  (   /dd/defs/os9.d):00514         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (   /dd/defs/os9.d):00515         D.SysTsk       RMB       1                   System Task number
                      (   /dd/defs/os9.d):00516                        ORG       $E0
00E0                  (   /dd/defs/os9.d):00517         D.Clock        RMB       2
00E2                  (   /dd/defs/os9.d):00518         D.XSWI3        RMB       2
00E4                  (   /dd/defs/os9.d):00519         D.XSWI2        RMB       2
00E6                  (   /dd/defs/os9.d):00520         D.XFIRQ        RMB       2
00E8                  (   /dd/defs/os9.d):00521         D.XIRQ         RMB       2
00EA                  (   /dd/defs/os9.d):00522         D.XSWI         RMB       2
00EC                  (   /dd/defs/os9.d):00523         D.XNMI         RMB       2
00EE                  (   /dd/defs/os9.d):00524         D.ErrRst       RMB       2
00F0                  (   /dd/defs/os9.d):00525         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (   /dd/defs/os9.d):00526         D.SWI3         RMB       2
00F4                  (   /dd/defs/os9.d):00527         D.SWI2         RMB       2
00F6                  (   /dd/defs/os9.d):00528         D.FIRQ         RMB       2
00F8                  (   /dd/defs/os9.d):00529         D.IRQ          RMB       2
00FA                  (   /dd/defs/os9.d):00530         D.SWI          RMB       2
00FC                  (   /dd/defs/os9.d):00531         D.NMI          RMB       2
                      (   /dd/defs/os9.d):00532         
                      (   /dd/defs/os9.d):00533         *************************
                      (   /dd/defs/os9.d):00534         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (   /dd/defs/os9.d):00535         * and for bytes in the system memory map at D.SysMem.
                      (   /dd/defs/os9.d):00536         * A value of 0 indicates an unused/unassigned block.
                      (   /dd/defs/os9.d):00537         * In the code, block assignment often involves incrementing a value
                      (   /dd/defs/os9.d):00538         * from 0 to 1 rather than explict use of RAMinUse.
                      (   /dd/defs/os9.d):00539         *
     0080             (   /dd/defs/os9.d):00540         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (   /dd/defs/os9.d):00541         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (   /dd/defs/os9.d):00542         ModBlock       EQU       %00000010           Module in Block
     0001             (   /dd/defs/os9.d):00543         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (   /dd/defs/os9.d):00544         *
                      (   /dd/defs/os9.d):00545         * Service Dispatch Table special entries
                      (   /dd/defs/os9.d):00546         *
     00FE             (   /dd/defs/os9.d):00547         IOEntry        EQU       254
                      (   /dd/defs/os9.d):00548         
                      (   /dd/defs/os9.d):00549         
                      (   /dd/defs/os9.d):00550                        TTL       Structure Formats
                      (   /dd/defs/os9.d):00551                        PAG       
                      (   /dd/defs/os9.d):00552         ************************************
                      (   /dd/defs/os9.d):00553         * Module Directory Entry Definitions
                      (   /dd/defs/os9.d):00554         *
                      (   /dd/defs/os9.d):00555                        ORG       0
0000                  (   /dd/defs/os9.d):00556         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (   /dd/defs/os9.d):00557         MD$MBSiz       RMB       2                   Memory Block size
0004                  (   /dd/defs/os9.d):00558         MD$MPtr        RMB       2                   Module ptr
0006                  (   /dd/defs/os9.d):00559         MD$Link        RMB       2                   Module Link count
     0008             (   /dd/defs/os9.d):00560         MD$ESize       EQU       .                   Module Directory Entry size
                      (   /dd/defs/os9.d):00561         
                      (   /dd/defs/os9.d):00562         ************************************
                      (   /dd/defs/os9.d):00563         * Module Definitions
                      (   /dd/defs/os9.d):00564         *
                      (   /dd/defs/os9.d):00565         * Universal Module Offsets
                      (   /dd/defs/os9.d):00566         *
                      (   /dd/defs/os9.d):00567                        ORG       0
0000                  (   /dd/defs/os9.d):00568         M$ID           RMB       2                   ID Code
0002                  (   /dd/defs/os9.d):00569         M$Size         RMB       2                   Module Size
0004                  (   /dd/defs/os9.d):00570         M$Name         RMB       2                   Module Name
0006                  (   /dd/defs/os9.d):00571         M$Type         RMB       1                   Type / Language
0007                  (   /dd/defs/os9.d):00572         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (   /dd/defs/os9.d):00573         M$Parity       RMB       1                   Header Parity
     0009             (   /dd/defs/os9.d):00574         M$IDSize       EQU       .                   Module ID Size
                      (   /dd/defs/os9.d):00575         *
                      (   /dd/defs/os9.d):00576         * Type-Dependent Module Offsets
                      (   /dd/defs/os9.d):00577         *
                      (   /dd/defs/os9.d):00578         * System, File Manager, Device Driver, Program Module
                      (   /dd/defs/os9.d):00579         *
0009                  (   /dd/defs/os9.d):00580         M$Exec         RMB       2                   Execution Entry Offset
                      (   /dd/defs/os9.d):00581         *
                      (   /dd/defs/os9.d):00582         * Device Driver, Program Module
                      (   /dd/defs/os9.d):00583         *
000B                  (   /dd/defs/os9.d):00584         M$Mem          RMB       2                   Stack Requirement
                      (   /dd/defs/os9.d):00585         *
                      (   /dd/defs/os9.d):00586         * Device Driver, Device Descriptor Module
                      (   /dd/defs/os9.d):00587         *
000D                  (   /dd/defs/os9.d):00588         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (   /dd/defs/os9.d):00589         *
                      (   /dd/defs/os9.d):00590         * Device Descriptor Module
                      (   /dd/defs/os9.d):00591         *
                      (   /dd/defs/os9.d):00592                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00593         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (   /dd/defs/os9.d):00594         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (   /dd/defs/os9.d):00595                        RMB       1                   M$Mode (defined above)
000E                  (   /dd/defs/os9.d):00596         M$Port         RMB       3                   Port Address
0011                  (   /dd/defs/os9.d):00597         M$Opt          RMB       1                   Device Default Options
0012                  (   /dd/defs/os9.d):00598         M$DTyp         RMB       1                   Device Type
     0012             (   /dd/defs/os9.d):00599         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (   /dd/defs/os9.d):00600         *
                      (   /dd/defs/os9.d):00601         * Configuration Module Entry Offsets
                      (   /dd/defs/os9.d):00602         *
                      (   /dd/defs/os9.d):00603                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00604         MaxMem         RMB       3                   Maximum Free Memory
000C                  (   /dd/defs/os9.d):00605         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (   /dd/defs/os9.d):00606         DevCnt         RMB       1                   Entries in Device Table
000E                  (   /dd/defs/os9.d):00607         InitStr        RMB       2                   Initial Module Name
0010                  (   /dd/defs/os9.d):00608         SysStr         RMB       2                   System Device Name
0012                  (   /dd/defs/os9.d):00609         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (   /dd/defs/os9.d):00610         BootStr        RMB       2                   Bootstrap Module name
0016                  (   /dd/defs/os9.d):00611         ProtFlag       RMB       1                   Write protect enable flag
                      (   /dd/defs/os9.d):00612         
0017                  (   /dd/defs/os9.d):00613         OSLevel        RMB       1                   OS level
0018                  (   /dd/defs/os9.d):00614         OSVer          RMB       1                   OS version
0019                  (   /dd/defs/os9.d):00615         OSMajor        RMB       1                   OS major
001A                  (   /dd/defs/os9.d):00616         OSMinor        RMB       1                   OS minor
001B                  (   /dd/defs/os9.d):00617         Feature1       RMB       1                   feature byte 1
001C                  (   /dd/defs/os9.d):00618         Feature2       RMB       1                   feature byte 2
001D                  (   /dd/defs/os9.d):00619         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (   /dd/defs/os9.d):00620         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (   /dd/defs/os9.d):00621                        RMB       4                   reserved for future use
                      (   /dd/defs/os9.d):00622         
                      (   /dd/defs/os9.d):00623         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (   /dd/defs/os9.d):00624         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (   /dd/defs/os9.d):00625         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (   /dd/defs/os9.d):00626         KeyRptS        RMB       1                   Key repeat start constant
0029                  (   /dd/defs/os9.d):00627         KeyRptD        RMB       1                   Key repeat delay constant
                      (   /dd/defs/os9.d):00628         
                      (   /dd/defs/os9.d):00629         * Feature1 byte definitions
     0001             (   /dd/defs/os9.d):00630         CRCOn          EQU       %00000001           CRC checking on
     0000             (   /dd/defs/os9.d):00631         CRCOff         EQU       %00000000           CRC checking off
     0000             (   /dd/defs/os9.d):00632         Proc6809       EQU       %00000000           6809 procesor
     0002             (   /dd/defs/os9.d):00633         Proc6309       EQU       %00000010           6309 procesor
                      (   /dd/defs/os9.d):00634         
                      (   /dd/defs/os9.d):00635                        PAG       
                      (   /dd/defs/os9.d):00636         **************************
                      (   /dd/defs/os9.d):00637         * Module Field Definitions
                      (   /dd/defs/os9.d):00638         *
                      (   /dd/defs/os9.d):00639         * ID Field - First two bytes of a NitrOS-9 module
                      (   /dd/defs/os9.d):00640         *
     0087             (   /dd/defs/os9.d):00641         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (   /dd/defs/os9.d):00642         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (   /dd/defs/os9.d):00643         M$ID12         EQU       M$ID1*256+M$ID2
                      (   /dd/defs/os9.d):00644         
                      (   /dd/defs/os9.d):00645         *
                      (   /dd/defs/os9.d):00646         * Module Type/Language Field Masks
                      (   /dd/defs/os9.d):00647         *
     00F0             (   /dd/defs/os9.d):00648         TypeMask       EQU       %11110000           Type Field
     000F             (   /dd/defs/os9.d):00649         LangMask       EQU       %00001111           Language Field
                      (   /dd/defs/os9.d):00650         
                      (   /dd/defs/os9.d):00651         *
                      (   /dd/defs/os9.d):00652         * Module Type Values
                      (   /dd/defs/os9.d):00653         *
     00F0             (   /dd/defs/os9.d):00654         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (   /dd/defs/os9.d):00655         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (   /dd/defs/os9.d):00656         FlMgr          EQU       $D0                 File Manager
     00C0             (   /dd/defs/os9.d):00657         Systm          EQU       $C0                 System Module
     0050             (   /dd/defs/os9.d):00658         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (   /dd/defs/os9.d):00659         Data           EQU       $40                 Data Module
     0030             (   /dd/defs/os9.d):00660         Multi          EQU       $30                 Multi-Module
     0020             (   /dd/defs/os9.d):00661         Sbrtn          EQU       $20                 Subroutine Module
     0010             (   /dd/defs/os9.d):00662         Prgrm          EQU       $10                 Program Module
                      (   /dd/defs/os9.d):00663         
                      (   /dd/defs/os9.d):00664         *
                      (   /dd/defs/os9.d):00665         * Module Language Values
                      (   /dd/defs/os9.d):00666         *
     0001             (   /dd/defs/os9.d):00667         Objct          EQU       1                   6809 Object Code Module
     0002             (   /dd/defs/os9.d):00668         ICode          EQU       2                   Basic09 I-code
     0003             (   /dd/defs/os9.d):00669         PCode          EQU       3                   Pascal P-code
     0004             (   /dd/defs/os9.d):00670         CCode          EQU       4                   C I-code
     0005             (   /dd/defs/os9.d):00671         CblCode        EQU       5                   Cobol I-code
     0006             (   /dd/defs/os9.d):00672         FrtnCode       EQU       6                   Fortran I-code
     0007             (   /dd/defs/os9.d):00673         Obj6309        EQU       7                   6309 object code
                      (   /dd/defs/os9.d):00674         *
                      (   /dd/defs/os9.d):00675         * Module Attributes / Revision byte
                      (   /dd/defs/os9.d):00676         *
                      (   /dd/defs/os9.d):00677         * Field Masks
                      (   /dd/defs/os9.d):00678         *
     00F0             (   /dd/defs/os9.d):00679         AttrMask       EQU       %11110000           Attributes Field
     000F             (   /dd/defs/os9.d):00680         RevsMask       EQU       %00001111           Revision Level Field
                      (   /dd/defs/os9.d):00681         *
                      (   /dd/defs/os9.d):00682         * Attribute Flags
                      (   /dd/defs/os9.d):00683         *
     0080             (   /dd/defs/os9.d):00684         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (   /dd/defs/os9.d):00685         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (   /dd/defs/os9.d):00686         ModNat         EQU       %00100000           6309 native mode attribute
                      (   /dd/defs/os9.d):00687         
                      (   /dd/defs/os9.d):00688         ********************
                      (   /dd/defs/os9.d):00689         * Device Type Values
                      (   /dd/defs/os9.d):00690         *
                      (   /dd/defs/os9.d):00691         * These values define various classes of devices, which are
                      (   /dd/defs/os9.d):00692         * managed by a file manager module.  The Device Type is embedded
                      (   /dd/defs/os9.d):00693         * in a device's device descriptor.
                      (   /dd/defs/os9.d):00694         *
     0000             (   /dd/defs/os9.d):00695         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (   /dd/defs/os9.d):00696         DT.RBF         EQU       1                   Random Block File Manager
     0002             (   /dd/defs/os9.d):00697         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (   /dd/defs/os9.d):00698         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (   /dd/defs/os9.d):00699         DT.NFM         EQU       4                   Network File Manager
     0005             (   /dd/defs/os9.d):00700         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (   /dd/defs/os9.d):00701         DT.RFM                  EQU             6                                       Remote File Manager
                      (   /dd/defs/os9.d):00702         
                      (   /dd/defs/os9.d):00703         *********************
                      (   /dd/defs/os9.d):00704         * CRC Result Constant
                      (   /dd/defs/os9.d):00705         *
     0080             (   /dd/defs/os9.d):00706         CRCCon1        EQU       $80
     0FE3             (   /dd/defs/os9.d):00707         CRCCon23       EQU       $0FE3
                      (   /dd/defs/os9.d):00708         
                      (   /dd/defs/os9.d):00709                        TTL       Process Information
                      (   /dd/defs/os9.d):00710                        PAG       
                      (   /dd/defs/os9.d):00711         ********************************
                      (   /dd/defs/os9.d):00712         * Process Descriptor Definitions
                      (   /dd/defs/os9.d):00713         *
                      (   /dd/defs/os9.d):00714         
                      (   /dd/defs/os9.d):00715         * Level 1 process descriptor defs
                      (   /dd/defs/os9.d):00716         
                      (   /dd/defs/os9.d):00717         
                      (   /dd/defs/os9.d):00718         *
                      (   /dd/defs/os9.d):00719         * Process State Flags
                      (   /dd/defs/os9.d):00720         *
                      (   /dd/defs/os9.d):00721         
                      (   /dd/defs/os9.d):00722         
                      (   /dd/defs/os9.d):00723         * Level 2 process descriptor defs
     0010             (   /dd/defs/os9.d):00724         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (   /dd/defs/os9.d):00725         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (   /dd/defs/os9.d):00726         NumPaths       EQU       16                  Number of Local Paths
                      (   /dd/defs/os9.d):00727         
                      (   /dd/defs/os9.d):00728                        ORG       0
0000                  (   /dd/defs/os9.d):00729         P$ID           RMB       1                   Process ID
0001                  (   /dd/defs/os9.d):00730         P$PID          RMB       1                   Parent's ID
0002                  (   /dd/defs/os9.d):00731         P$SID          RMB       1                   Sibling's ID
0003                  (   /dd/defs/os9.d):00732         P$CID          RMB       1                   Child's ID
0004                  (   /dd/defs/os9.d):00733         P$SP           RMB       2                   Stack ptr
0006                  (   /dd/defs/os9.d):00734         P$Task         RMB       1                   Task Number
0007                  (   /dd/defs/os9.d):00735         P$PagCnt       RMB       1                   Memory Page Count
0008                  (   /dd/defs/os9.d):00736         P$User         RMB       2                   User Index
000A                  (   /dd/defs/os9.d):00737         P$Prior        RMB       1                   Priority
000B                  (   /dd/defs/os9.d):00738         P$Age          RMB       1                   Age
000C                  (   /dd/defs/os9.d):00739         P$State        RMB       1                   Status
000D                  (   /dd/defs/os9.d):00740         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (   /dd/defs/os9.d):00741         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (   /dd/defs/os9.d):00742         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (   /dd/defs/os9.d):00743         P$PModul       RMB       2                   Primary Module
0013                  (   /dd/defs/os9.d):00744         P$SWI          RMB       2                   SWI Entry Point
0015                  (   /dd/defs/os9.d):00745         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (   /dd/defs/os9.d):00746         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (   /dd/defs/os9.d):00747         P$Signal       RMB       1                   Signal Code
001A                  (   /dd/defs/os9.d):00748         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (   /dd/defs/os9.d):00749         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (   /dd/defs/os9.d):00750         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (   /dd/defs/os9.d):00751                        RMB       $20-.               unused
0020                  (   /dd/defs/os9.d):00752         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (   /dd/defs/os9.d):00753         P$Path         RMB       NumPaths            I/O Path Table
0040                  (   /dd/defs/os9.d):00754         P$DATImg       RMB       64                  DAT Image
0080                  (   /dd/defs/os9.d):00755         P$Links        RMB       32                  Block Link counts
00A0                  (   /dd/defs/os9.d):00756         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (   /dd/defs/os9.d):00757         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (   /dd/defs/os9.d):00758         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (   /dd/defs/os9.d):00759         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (   /dd/defs/os9.d):00760         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (   /dd/defs/os9.d):00761         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (   /dd/defs/os9.d):00762         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (   /dd/defs/os9.d):00763         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (   /dd/defs/os9.d):00764         P$Alarm        RMB       6
00C9                  (   /dd/defs/os9.d):00765                        RMB       $200-.              Local stack
     0200             (   /dd/defs/os9.d):00766         P$Stack        EQU       .                   Top of Stack
     0200             (   /dd/defs/os9.d):00767         P$Size         EQU       .                   Size of Process Descriptor
                      (   /dd/defs/os9.d):00768         
                      (   /dd/defs/os9.d):00769         *
                      (   /dd/defs/os9.d):00770         * Process State Flags
                      (   /dd/defs/os9.d):00771         *
     0080             (   /dd/defs/os9.d):00772         SysState       EQU       %10000000
     0040             (   /dd/defs/os9.d):00773         TimSleep       EQU       %01000000
     0020             (   /dd/defs/os9.d):00774         TimOut         EQU       %00100000
     0010             (   /dd/defs/os9.d):00775         ImgChg         EQU       %00010000
     0008             (   /dd/defs/os9.d):00776         Suspend        EQU       %00001000
     0002             (   /dd/defs/os9.d):00777         Condem         EQU       %00000010
     0001             (   /dd/defs/os9.d):00778         Dead           EQU       %00000001
                      (   /dd/defs/os9.d):00779         
                      (   /dd/defs/os9.d):00780         
                      (   /dd/defs/os9.d):00781                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (   /dd/defs/os9.d):00782                        PAG       
                      (   /dd/defs/os9.d):00783         *************************
                      (   /dd/defs/os9.d):00784         * Path Descriptor Offsets
                      (   /dd/defs/os9.d):00785         *
                      (   /dd/defs/os9.d):00786                        ORG       0
0000                  (   /dd/defs/os9.d):00787         PD.PD          RMB       1                   Path Number
0001                  (   /dd/defs/os9.d):00788         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (   /dd/defs/os9.d):00789         PD.CNT         RMB       1                   Number of Open Images
0003                  (   /dd/defs/os9.d):00790         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (   /dd/defs/os9.d):00791         PD.CPR         RMB       1                   Current Process
0006                  (   /dd/defs/os9.d):00792         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (   /dd/defs/os9.d):00793         PD.BUF         RMB       2                   Buffer Address
000A                  (   /dd/defs/os9.d):00794         PD.FST         RMB       32-.                File Manager's Storage
     0020             (   /dd/defs/os9.d):00795         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (   /dd/defs/os9.d):00796         PD.DTP         RMB       1                   Device Type
0021                  (   /dd/defs/os9.d):00797                        RMB       64-.                Path options
     0040             (   /dd/defs/os9.d):00798         PDSIZE         EQU       .
                      (   /dd/defs/os9.d):00799         
                      (   /dd/defs/os9.d):00800         *
                      (   /dd/defs/os9.d):00801         * Pathlist Special Symbols
                      (   /dd/defs/os9.d):00802         *
     002F             (   /dd/defs/os9.d):00803         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (   /dd/defs/os9.d):00804         PDIR           EQU       '.                  Directory
     0040             (   /dd/defs/os9.d):00805         PENTIR         EQU       '@                  Entire Device
                      (   /dd/defs/os9.d):00806         
                      (   /dd/defs/os9.d):00807                        PAG       
                      (   /dd/defs/os9.d):00808         ****************************
                      (   /dd/defs/os9.d):00809         * File Manager Entry Offsets
                      (   /dd/defs/os9.d):00810         *
                      (   /dd/defs/os9.d):00811                        ORG       0
0000                  (   /dd/defs/os9.d):00812         FMCREA         RMB       3                   Create (Open New) File
0003                  (   /dd/defs/os9.d):00813         FMOPEN         RMB       3                   Open File
0006                  (   /dd/defs/os9.d):00814         FMMDIR         RMB       3                   Make Directory
0009                  (   /dd/defs/os9.d):00815         FMCDIR         RMB       3                   Change Directory
000C                  (   /dd/defs/os9.d):00816         FMDLET         RMB       3                   Delete File
000F                  (   /dd/defs/os9.d):00817         FMSEEK         RMB       3                   Position File
0012                  (   /dd/defs/os9.d):00818         FMREAD         RMB       3                   Read from File
0015                  (   /dd/defs/os9.d):00819         FMWRIT         RMB       3                   Write to File
0018                  (   /dd/defs/os9.d):00820         FMRDLN         RMB       3                   ReadLn
001B                  (   /dd/defs/os9.d):00821         FMWRLN         RMB       3                   WritLn
001E                  (   /dd/defs/os9.d):00822         FMGSTA         RMB       3                   Get File Status
0021                  (   /dd/defs/os9.d):00823         FMSSTA         RMB       3                   Set File Status
0024                  (   /dd/defs/os9.d):00824         FMCLOS         RMB       3                   Close File
                      (   /dd/defs/os9.d):00825         
                      (   /dd/defs/os9.d):00826         *****************************
                      (   /dd/defs/os9.d):00827         * Device Driver Entry Offsets
                      (   /dd/defs/os9.d):00828         *
                      (   /dd/defs/os9.d):00829                        ORG       0
0000                  (   /dd/defs/os9.d):00830         D$INIT         RMB       3                   Device Initialization
0003                  (   /dd/defs/os9.d):00831         D$READ         RMB       3                   Read from Device
0006                  (   /dd/defs/os9.d):00832         D$WRIT         RMB       3                   Write to Device
0009                  (   /dd/defs/os9.d):00833         D$GSTA         RMB       3                   Get Device Status
000C                  (   /dd/defs/os9.d):00834         D$PSTA         RMB       3                   Put Device Status
000F                  (   /dd/defs/os9.d):00835         D$TERM         RMB       3                   Device Termination
                      (   /dd/defs/os9.d):00836         
                      (   /dd/defs/os9.d):00837         *********************
                      (   /dd/defs/os9.d):00838         * Device Table Format
                      (   /dd/defs/os9.d):00839         *
                      (   /dd/defs/os9.d):00840                        ORG       0
0000                  (   /dd/defs/os9.d):00841         V$DRIV         RMB       2                   Device Driver module
0002                  (   /dd/defs/os9.d):00842         V$STAT         RMB       2                   Device Driver Static storage
0004                  (   /dd/defs/os9.d):00843         V$DESC         RMB       2                   Device Descriptor module
0006                  (   /dd/defs/os9.d):00844         V$FMGR         RMB       2                   File Manager module
0008                  (   /dd/defs/os9.d):00845         V$USRS         RMB       1                   use count
0009                  (   /dd/defs/os9.d):00846         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (   /dd/defs/os9.d):00847         V$FMGREX       RMB       2                   File Manager execution address
     000D             (   /dd/defs/os9.d):00848         DEVSIZ         EQU       .
                      (   /dd/defs/os9.d):00849         
                      (   /dd/defs/os9.d):00850         *******************************
                      (   /dd/defs/os9.d):00851         * Device Static Storage Offsets
                      (   /dd/defs/os9.d):00852         *
                      (   /dd/defs/os9.d):00853                        ORG       0
0000                  (   /dd/defs/os9.d):00854         V.PAGE         RMB       1                   Port Extended Address
0001                  (   /dd/defs/os9.d):00855         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (   /dd/defs/os9.d):00856         V.LPRC         RMB       1                   Last Active Process ID
0004                  (   /dd/defs/os9.d):00857         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (   /dd/defs/os9.d):00858         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (   /dd/defs/os9.d):00859         V.USER         EQU       .                   Driver Allocation Origin
                      (   /dd/defs/os9.d):00860         
                      (   /dd/defs/os9.d):00861         ********************************
                      (   /dd/defs/os9.d):00862         * Interrupt Polling Table Format
                      (   /dd/defs/os9.d):00863         *
                      (   /dd/defs/os9.d):00864                        ORG       0
0000                  (   /dd/defs/os9.d):00865         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (   /dd/defs/os9.d):00866         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (   /dd/defs/os9.d):00867         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (   /dd/defs/os9.d):00868         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (   /dd/defs/os9.d):00869         Q$STAT         RMB       2                   Static Storage Address
0008                  (   /dd/defs/os9.d):00870         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
0009                  (   /dd/defs/os9.d):00871         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
     000B             (   /dd/defs/os9.d):00872         POLSIZ         EQU       .
                      (   /dd/defs/os9.d):00873         
                      (   /dd/defs/os9.d):00874         ********************
                      (   /dd/defs/os9.d):00875         * VIRQ packet format
                      (   /dd/defs/os9.d):00876         *
                      (   /dd/defs/os9.d):00877                        ORG       0
0000                  (   /dd/defs/os9.d):00878         Vi.Cnt         RMB       2                   count down counter
0002                  (   /dd/defs/os9.d):00879         Vi.Rst         RMB       2                   reset value for counter
0004                  (   /dd/defs/os9.d):00880         Vi.Stat        RMB       1                   status byte
     0005             (   /dd/defs/os9.d):00881         Vi.PkSz        EQU       .
                      (   /dd/defs/os9.d):00882         
     0001             (   /dd/defs/os9.d):00883         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (   /dd/defs/os9.d):00884         
                      (   /dd/defs/os9.d):00885                        PAG       
                      (   /dd/defs/os9.d):00886         *************************************
                      (   /dd/defs/os9.d):00887         * Machine Characteristics Definitions
                      (   /dd/defs/os9.d):00888         *
     0000             (   /dd/defs/os9.d):00889         R$CC           EQU       0                   Condition Codes register
     0001             (   /dd/defs/os9.d):00890         R$A            EQU       1                   A Accumulator
     0002             (   /dd/defs/os9.d):00891         R$B            EQU       2                   B Accumulator
     0001             (   /dd/defs/os9.d):00892         R$D            EQU       R$A                 Combined A:B Accumulator
                      (   /dd/defs/os9.d):00893                        IFNE      H6309
0005                  (   /dd/defs/os9.d):00894         R$E            EQU       3
0005                  (   /dd/defs/os9.d):00895         R$F            EQU       4
0005                  (   /dd/defs/os9.d):00896         R$W            EQU       R$E
0005                  (   /dd/defs/os9.d):00897         R$Q            EQU       R$A
0005                  (   /dd/defs/os9.d):00898         R$DP           EQU       5
0005                  (   /dd/defs/os9.d):00899         R$X            EQU       6
0005                  (   /dd/defs/os9.d):00900         R$Y            EQU       8
0005                  (   /dd/defs/os9.d):00901         R$U            EQU       10
0005                  (   /dd/defs/os9.d):00902         R$PC           EQU       12
0005                  (   /dd/defs/os9.d):00903         R$Size         EQU       14
                      (   /dd/defs/os9.d):00904                        ELSE
     0003             (   /dd/defs/os9.d):00905         R$DP           EQU       3                   Direct Page register
     0004             (   /dd/defs/os9.d):00906         R$X            EQU       4                   X Index register
     0006             (   /dd/defs/os9.d):00907         R$Y            EQU       6                   Y Index register
     0008             (   /dd/defs/os9.d):00908         R$U            EQU       8                   User Stack register
     000A             (   /dd/defs/os9.d):00909         R$PC           EQU       10                  Program Counter register
     000C             (   /dd/defs/os9.d):00910         R$Size         EQU       12                  Total register package size
                      (   /dd/defs/os9.d):00911                        ENDC
                      (   /dd/defs/os9.d):00912         
                      (   /dd/defs/os9.d):00913         * MD register masks
                      (   /dd/defs/os9.d):00914         * 6309 definitions
     0080             (   /dd/defs/os9.d):00915         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (   /dd/defs/os9.d):00916         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (   /dd/defs/os9.d):00917         
     0080             (   /dd/defs/os9.d):00918         Entire         EQU       %10000000           Full Register Stack flag
     0040             (   /dd/defs/os9.d):00919         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (   /dd/defs/os9.d):00920         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (   /dd/defs/os9.d):00921         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (   /dd/defs/os9.d):00922         Negative       EQU       %00001000           Negative flag
     0004             (   /dd/defs/os9.d):00923         Zero           EQU       %00000100           Zero flag
     0002             (   /dd/defs/os9.d):00924         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (   /dd/defs/os9.d):00925         Carry          EQU       %00000001           Carry bit
     0050             (   /dd/defs/os9.d):00926         IntMasks       EQU       IRQMask+FIRQMask
     0080             (   /dd/defs/os9.d):00927         Sign           EQU       %10000000           sign bit
                      (   /dd/defs/os9.d):00928         
                      (   /dd/defs/os9.d):00929                        TTL       Error Code Definitions
                      (   /dd/defs/os9.d):00930                        PAG       
                      (   /dd/defs/os9.d):00931         ************************
                      (   /dd/defs/os9.d):00932         * Error Code Definitions
                      (   /dd/defs/os9.d):00933         *
                      (   /dd/defs/os9.d):00934         * Basic09 Error Codes
                      (   /dd/defs/os9.d):00935         *
                      (   /dd/defs/os9.d):00936                        ORG       10
000A                  (   /dd/defs/os9.d):00937         E$UnkSym       RMB       1                   Unknown symbol
000B                  (   /dd/defs/os9.d):00938         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (   /dd/defs/os9.d):00939         E$IllStC       RMB       1                   Illegal statement construction
000D                  (   /dd/defs/os9.d):00940         E$ICOvf        RMB       1                   I-code overflow
000E                  (   /dd/defs/os9.d):00941         E$IChRef       RMB       1                   Illegal channel reference
000F                  (   /dd/defs/os9.d):00942         E$IllMod       RMB       1                   Illegal mode
0010                  (   /dd/defs/os9.d):00943         E$IllNum       RMB       1                   Illegal number
0011                  (   /dd/defs/os9.d):00944         E$IllPrf       RMB       1                   Illegal prefix
0012                  (   /dd/defs/os9.d):00945         E$IllOpd       RMB       1                   Illegal operand
0013                  (   /dd/defs/os9.d):00946         E$IllOpr       RMB       1                   Illegal operator
0014                  (   /dd/defs/os9.d):00947         E$IllRFN       RMB       1                   Illegal record field name
0015                  (   /dd/defs/os9.d):00948         E$IllDim       RMB       1                   Illegal dimension
0016                  (   /dd/defs/os9.d):00949         E$IllLit       RMB       1                   Illegal literal
0017                  (   /dd/defs/os9.d):00950         E$IllRet       RMB       1                   Illegal relational
0018                  (   /dd/defs/os9.d):00951         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (   /dd/defs/os9.d):00952         E$DimLrg       RMB       1                   Dimension too large
001A                  (   /dd/defs/os9.d):00953         E$LinLrg       RMB       1                   Line number too large
001B                  (   /dd/defs/os9.d):00954         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (   /dd/defs/os9.d):00955         E$NoPath       RMB       1                   Missing path number
001D                  (   /dd/defs/os9.d):00956         E$NoComa       RMB       1                   Missing coma
001E                  (   /dd/defs/os9.d):00957         E$NoDim        RMB       1                   Missing dimension
001F                  (   /dd/defs/os9.d):00958         E$NoDO         RMB       1                   Missing DO statement
0020                  (   /dd/defs/os9.d):00959         E$MFull        RMB       1                   Memory full
0021                  (   /dd/defs/os9.d):00960         E$NoGoto       RMB       1                   Missing GOTO
0022                  (   /dd/defs/os9.d):00961         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (   /dd/defs/os9.d):00962         E$NoLRef       RMB       1                   Missing line reference
0024                  (   /dd/defs/os9.d):00963         E$NoOprd       RMB       1                   Missing operand
0025                  (   /dd/defs/os9.d):00964         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (   /dd/defs/os9.d):00965         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (   /dd/defs/os9.d):00966         E$NoTO         RMB       1                   Missing TO statement
0028                  (   /dd/defs/os9.d):00967         E$NoVRef       RMB       1                   Missing variable reference
0029                  (   /dd/defs/os9.d):00968         E$EndQou       RMB       1                   Missing end quote
002A                  (   /dd/defs/os9.d):00969         E$SubLrg       RMB       1                   Too many subscripts
002B                  (   /dd/defs/os9.d):00970         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (   /dd/defs/os9.d):00971         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (   /dd/defs/os9.d):00972         E$DivZer       RMB       1                   Divice by zero
002E                  (   /dd/defs/os9.d):00973         E$TypMis       RMB       1                   Operand type mismatch
002F                  (   /dd/defs/os9.d):00974         E$StrOvf       RMB       1                   String stack overflow
0030                  (   /dd/defs/os9.d):00975         E$NoRout       RMB       1                   Unimplemented routine
0031                  (   /dd/defs/os9.d):00976         E$UndVar       RMB       1                   Undefined variable
0032                  (   /dd/defs/os9.d):00977         E$FltOvf       RMB       1                   Floating Overflow
0033                  (   /dd/defs/os9.d):00978         E$LnComp       RMB       1                   Line with compiler error
0034                  (   /dd/defs/os9.d):00979         E$ValRng       RMB       1                   Value out of range for destination
0035                  (   /dd/defs/os9.d):00980         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (   /dd/defs/os9.d):00981         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (   /dd/defs/os9.d):00982         E$SubRng       RMB       1                   Subscript out of range
0038                  (   /dd/defs/os9.d):00983         E$ParmEr       RMB       1                   Paraemter error
0039                  (   /dd/defs/os9.d):00984         E$SysOvf       RMB       1                   System stack overflow
003A                  (   /dd/defs/os9.d):00985         E$IOMism       RMB       1                   I/O type mismatch
003B                  (   /dd/defs/os9.d):00986         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (   /dd/defs/os9.d):00987         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (   /dd/defs/os9.d):00988         E$IllInp       RMB       1                   Illegal input format
003E                  (   /dd/defs/os9.d):00989         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (   /dd/defs/os9.d):00990         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (   /dd/defs/os9.d):00991         E$IllPNm       RMB       1                   Illegal path number
0041                  (   /dd/defs/os9.d):00992         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (   /dd/defs/os9.d):00993         E$NonRcO       RMB       1                   Non-record type operand
0043                  (   /dd/defs/os9.d):00994         E$IllA         RMB       1                   Illegal argument
0044                  (   /dd/defs/os9.d):00995         E$IllCnt       RMB       1                   Illegal control structure
0045                  (   /dd/defs/os9.d):00996         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (   /dd/defs/os9.d):00997         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (   /dd/defs/os9.d):00998         E$IllExp       RMB       1                   Illegal expression type
0048                  (   /dd/defs/os9.d):00999         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (   /dd/defs/os9.d):01000         E$ArrOvf       RMB       1                   Array size overflow
004A                  (   /dd/defs/os9.d):01001         E$UndLin       RMB       1                   Undefined line number
004B                  (   /dd/defs/os9.d):01002         E$MltLin       RMB       1                   Multiply defined line number
004C                  (   /dd/defs/os9.d):01003         E$MltVar       RMB       1                   Multiply defined variable
004D                  (   /dd/defs/os9.d):01004         E$IllIVr       RMB       1                   Illegal input variable
004E                  (   /dd/defs/os9.d):01005         E$SeekRg       RMB       1                   Seek out of range
004F                  (   /dd/defs/os9.d):01006         E$NoData       RMB       1                   Missing data statement
                      (   /dd/defs/os9.d):01007         
                      (   /dd/defs/os9.d):01008         *
                      (   /dd/defs/os9.d):01009         * System Dependent Error Codes
                      (   /dd/defs/os9.d):01010         *
                      (   /dd/defs/os9.d):01011         
                      (   /dd/defs/os9.d):01012         * Level 2 windowing error codes
                      (   /dd/defs/os9.d):01013                        ORG       183
00B7                  (   /dd/defs/os9.d):01014         E$IWTyp        RMB       1                   Illegal window type
00B8                  (   /dd/defs/os9.d):01015         E$WADef        RMB       1                   Window already defined
00B9                  (   /dd/defs/os9.d):01016         E$NFont        RMB       1                   Font not found
00BA                  (   /dd/defs/os9.d):01017         E$StkOvf       RMB       1                   Stack overflow
00BB                  (   /dd/defs/os9.d):01018         E$IllArg       RMB       1                   Illegal argument
00BC                  (   /dd/defs/os9.d):01019                        RMB       1                   reserved
00BD                  (   /dd/defs/os9.d):01020         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (   /dd/defs/os9.d):01021         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (   /dd/defs/os9.d):01022         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (   /dd/defs/os9.d):01023         E$IllCmd       RMB       1                   Illegal command
00C1                  (   /dd/defs/os9.d):01024         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (   /dd/defs/os9.d):01025         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (   /dd/defs/os9.d):01026         E$IWDef        RMB       1                   Illegal window definition
00C4                  (   /dd/defs/os9.d):01027         E$WUndef       RMB       1                   Window undefined
                      (   /dd/defs/os9.d):01028         
00C5                  (   /dd/defs/os9.d):01029         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (   /dd/defs/os9.d):01030         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (   /dd/defs/os9.d):01031         E$Alias        RMB       1
                      (   /dd/defs/os9.d):01032         
                      (   /dd/defs/os9.d):01033         
                      (   /dd/defs/os9.d):01034         *
                      (   /dd/defs/os9.d):01035         * Standard NitrOS-9 Error Codes
                      (   /dd/defs/os9.d):01036         *
                      (   /dd/defs/os9.d):01037                        ORG       200
00C8                  (   /dd/defs/os9.d):01038         E$PthFul       RMB       1                   Path Table full
00C9                  (   /dd/defs/os9.d):01039         E$BPNum        RMB       1                   Bad Path Number
00CA                  (   /dd/defs/os9.d):01040         E$Poll         RMB       1                   Polling Table Full
00CB                  (   /dd/defs/os9.d):01041         E$BMode        RMB       1                   Bad Mode
00CC                  (   /dd/defs/os9.d):01042         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (   /dd/defs/os9.d):01043         E$BMID         RMB       1                   Bad Module ID
00CE                  (   /dd/defs/os9.d):01044         E$DirFul       RMB       1                   Module Directory Full
00CF                  (   /dd/defs/os9.d):01045         E$MemFul       RMB       1                   Process Memory Full
00D0                  (   /dd/defs/os9.d):01046         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (   /dd/defs/os9.d):01047         E$ModBsy       RMB       1                   Module Busy
00D2                  (   /dd/defs/os9.d):01048         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (   /dd/defs/os9.d):01049         E$EOF          RMB       1                   End of File
00D4                  (   /dd/defs/os9.d):01050                        RMB       1
00D5                  (   /dd/defs/os9.d):01051         E$NES          RMB       1                   Non-Existing Segment
00D6                  (   /dd/defs/os9.d):01052         E$FNA          RMB       1                   File Not Accesible
00D7                  (   /dd/defs/os9.d):01053         E$BPNam        RMB       1                   Bad Path Name
00D8                  (   /dd/defs/os9.d):01054         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (   /dd/defs/os9.d):01055         E$SLF          RMB       1                   Segment List Full
00DA                  (   /dd/defs/os9.d):01056         E$CEF          RMB       1                   Creating Existing File
00DB                  (   /dd/defs/os9.d):01057         E$IBA          RMB       1                   Illegal Block Address
00DC                  (   /dd/defs/os9.d):01058         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (   /dd/defs/os9.d):01059         E$MNF          RMB       1                   Module Not Found
00DE                  (   /dd/defs/os9.d):01060                        RMB       1
00DF                  (   /dd/defs/os9.d):01061         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (   /dd/defs/os9.d):01062         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (   /dd/defs/os9.d):01063         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (   /dd/defs/os9.d):01064                        RMB       1
00E2                  (   /dd/defs/os9.d):01065         E$NoChld       RMB       1                   No Children
00E3                  (   /dd/defs/os9.d):01066         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (   /dd/defs/os9.d):01067         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (   /dd/defs/os9.d):01068         E$PrcFul       RMB       1                   Process Table Full
00E6                  (   /dd/defs/os9.d):01069         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (   /dd/defs/os9.d):01070         E$KwnMod       RMB       1                   Known Module
00E8                  (   /dd/defs/os9.d):01071         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (   /dd/defs/os9.d):01072         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (   /dd/defs/os9.d):01073         E$NEMod        RMB       1                   Non Existing Module
00EB                  (   /dd/defs/os9.d):01074         E$BNam         RMB       1                   Bad Name
00EC                  (   /dd/defs/os9.d):01075         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (   /dd/defs/os9.d):01076         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (   /dd/defs/os9.d):01077         E$DNE          RMB       1                   Directory not empty
00EF                  (   /dd/defs/os9.d):01078         E$NoTask       RMB       1                   No available Task number
                      (   /dd/defs/os9.d):01079                        RMB       $F0-.               reserved
00F0                  (   /dd/defs/os9.d):01080         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (   /dd/defs/os9.d):01081         E$Sect         RMB       1                   Bad Sector number
00F2                  (   /dd/defs/os9.d):01082         E$WP           RMB       1                   Write Protect
00F3                  (   /dd/defs/os9.d):01083         E$CRC          RMB       1                   Bad Check Sum
00F4                  (   /dd/defs/os9.d):01084         E$Read         RMB       1                   Read Error
00F5                  (   /dd/defs/os9.d):01085         E$Write        RMB       1                   Write Error
00F6                  (   /dd/defs/os9.d):01086         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (   /dd/defs/os9.d):01087         E$Seek         RMB       1                   Seek Error
00F8                  (   /dd/defs/os9.d):01088         E$Full         RMB       1                   Media Full
00F9                  (   /dd/defs/os9.d):01089         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (   /dd/defs/os9.d):01090         E$DevBsy       RMB       1                   Device Busy
00FB                  (   /dd/defs/os9.d):01091         E$DIDC         RMB       1                   Disk ID Change
00FC                  (   /dd/defs/os9.d):01092         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (   /dd/defs/os9.d):01093         E$Share        RMB       1                   Non-sharable file busy
00FE                  (   /dd/defs/os9.d):01094         E$DeadLk       RMB       1                   I/O Deadlock error
                      (   /dd/defs/os9.d):01095         
                      (   /dd/defs/os9.d):01096         
                      (   /dd/defs/os9.d):01097         ***************************
                      (   /dd/defs/os9.d):01098         * Level 3 Defs
                      (   /dd/defs/os9.d):01099         *
                      (   /dd/defs/os9.d):01100         * These definitions apply to NitrOS-9 Level 3
                      (   /dd/defs/os9.d):01101         *
                      (   /dd/defs/os9.d):01102         
                      ( /dd/defs/deffile):00006                  use   /dd/defs/rbf.d
                      (   /dd/defs/rbf.d):00001         ********************************************************************
                      (   /dd/defs/rbf.d):00002         * rbf.d - Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00003         *
                      (   /dd/defs/rbf.d):00004         * $Id$
                      (   /dd/defs/rbf.d):00005         *
                      (   /dd/defs/rbf.d):00006         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (   /dd/defs/rbf.d):00007         * that define the logical structure of a disk and allows access to the files
                      (   /dd/defs/rbf.d):00008         * in that structure.
                      (   /dd/defs/rbf.d):00009         *
                      (   /dd/defs/rbf.d):00010         * The data structures in this file give RBF its 'personality' and are used
                      (   /dd/defs/rbf.d):00011         * by RBF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/rbf.d):00012         *
                      (   /dd/defs/rbf.d):00013         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/rbf.d):00014         * Comment
                      (   /dd/defs/rbf.d):00015         * ------------------------------------------------------------------
                      (   /dd/defs/rbf.d):00016         *          1982/07/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00017         * PD.Exten added to path descriptor and PE Entries defined.
                      (   /dd/defs/rbf.d):00018         *
                      (   /dd/defs/rbf.d):00019         *          1982/07/15  Robert F. Doggett
                      (   /dd/defs/rbf.d):00020         * V.FileHd inserted in driver static storage.
                      (   /dd/defs/rbf.d):00021         *
                      (   /dd/defs/rbf.d):00022         *          1982/09/10  WGP
                      (   /dd/defs/rbf.d):00023         * Level One/Level Two condionals added.
                      (   /dd/defs/rbf.d):00024         *
                      (   /dd/defs/rbf.d):00025         *          1982/09/17  WGP
                      (   /dd/defs/rbf.d):00026         *
                      (   /dd/defs/rbf.d):00027         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00028         * PD.SLE renamed to PD.Creat.
                      (   /dd/defs/rbf.d):00029         *
                      (   /dd/defs/rbf.d):00030         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00031         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (   /dd/defs/rbf.d):00032         *
                      (   /dd/defs/rbf.d):00033         *          1982/09/20  Robert F. Doggett
                      (   /dd/defs/rbf.d):00034         * Reserved areas added in static storage.
                      (   /dd/defs/rbf.d):00035         
                      (   /dd/defs/rbf.d):00036         *          1983/06/07  Robert F. Doggett
                      (   /dd/defs/rbf.d):00037         * Added InDriver flag in PD.SMF.
                      (   /dd/defs/rbf.d):00038         *
                      (   /dd/defs/rbf.d):00039         *          1983/06/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00040         * Added PE.Req tmp save for PE.Lock.
                      (   /dd/defs/rbf.d):00041         *
                      (   /dd/defs/rbf.d):00042         *          1983/08/08  Robert F. Doggett
                      (   /dd/defs/rbf.d):00043         * Reserved PD.SToff for Japanese.
                      (   /dd/defs/rbf.d):00044         *
                      (   /dd/defs/rbf.d):00045         *          1983/11/19  Robert F. Doggett
                      (   /dd/defs/rbf.d):00046         * Added V.ResBit in drive tables.
                      (   /dd/defs/rbf.d):00047         *
                      (   /dd/defs/rbf.d):00048         *          1983/12/12  Robert F. Doggett
                      (   /dd/defs/rbf.d):00049         * Added PE.Prior to save process priority.
                      (   /dd/defs/rbf.d):00050         *
                      (   /dd/defs/rbf.d):00051         *          1983/12/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00052         * Added BufBusy bit in state flag (PD.SMF).
                      (   /dd/defs/rbf.d):00053         *
                      (   /dd/defs/rbf.d):00054         *          1984/07/06  Mark G. Hawkins
                      (   /dd/defs/rbf.d):00055         * Added Bit Definitions for DD.FMT.
                      (   /dd/defs/rbf.d):00056         *
                      (   /dd/defs/rbf.d):00057         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/rbf.d):00058         * Updated with Dev Desc Info
                      (   /dd/defs/rbf.d):00059         *
                      (   /dd/defs/rbf.d):00060         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00061         * Updated comments for clarity.
                      (   /dd/defs/rbf.d):00062         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (   /dd/defs/rbf.d):00063         *
                      (   /dd/defs/rbf.d):00064         *          2004/04/14  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00065         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (   /dd/defs/rbf.d):00066         * addendum.  Pointed out by Rodney Hamilton.
                      (   /dd/defs/rbf.d):00067         *
                      (   /dd/defs/rbf.d):00068         *          2005/05/31  P.Harvey-Smith.
                      (   /dd/defs/rbf.d):00069         * Added defines for bit 2 of IT.DNS, which the format command uses to
                      (   /dd/defs/rbf.d):00070         * determine if a drive should have it's track 0 as single or double density
                      (   /dd/defs/rbf.d):00071         *
                      (   /dd/defs/rbf.d):00072         *          2005/11/23  Robert Gault
                      (   /dd/defs/rbf.d):00073         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (   /dd/defs/rbf.d):00074         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (   /dd/defs/rbf.d):00075         *
                      (   /dd/defs/rbf.d):00076         *          2005/12/11  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00077         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (   /dd/defs/rbf.d):00078         
                      (   /dd/defs/rbf.d):00079                        NAM       rbf.d
                      (   /dd/defs/rbf.d):00080                        TTL       Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00081         
                      (   /dd/defs/rbf.d):00082                        PAG
                      (   /dd/defs/rbf.d):00083         *******************************
                      (   /dd/defs/rbf.d):00084         * RBF Device Descriptor Offsets
                      (   /dd/defs/rbf.d):00085         *
                      (   /dd/defs/rbf.d):00086         * These definitions are for RBF device descriptors.
                      (   /dd/defs/rbf.d):00087         
                      (   /dd/defs/rbf.d):00088                        ORG       M$DTyp
0012                  (   /dd/defs/rbf.d):00089                        RMB       1                   Device type (DT.RBF)
0013                  (   /dd/defs/rbf.d):00090         IT.DRV         RMB       1                   Drive number
0014                  (   /dd/defs/rbf.d):00091         IT.STP         RMB       1                   Step rate
0015                  (   /dd/defs/rbf.d):00092         IT.TYP         RMB       1                   Disk device type information
0016                  (   /dd/defs/rbf.d):00093         IT.DNS         RMB       1                   Density capability
0017                  (   /dd/defs/rbf.d):00094         IT.CYL         RMB       2                   Number of cylinders
0019                  (   /dd/defs/rbf.d):00095         IT.SID         RMB       1                   Number of surfaces
001A                  (   /dd/defs/rbf.d):00096         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (   /dd/defs/rbf.d):00097         IT.SCT         RMB       2                   Default sectors/track
001D                  (   /dd/defs/rbf.d):00098         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (   /dd/defs/rbf.d):00099         IT.ILV         RMB       1                   Sector interleave offset
0020                  (   /dd/defs/rbf.d):00100         IT.SAS         RMB       1                   Segment allocation size
                      (   /dd/defs/rbf.d):00101         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (   /dd/defs/rbf.d):00102         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (   /dd/defs/rbf.d):00103         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (   /dd/defs/rbf.d):00104         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (   /dd/defs/rbf.d):00105         * The following fields are not copied to the path descriptor
0025                  (   /dd/defs/rbf.d):00106         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (   /dd/defs/rbf.d):00107         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (   /dd/defs/rbf.d):00108         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (   /dd/defs/rbf.d):00109         * These fields have been added because of SuperDriver.  They probably
                      (   /dd/defs/rbf.d):00110         * can be used in other drivers
                      (   /dd/defs/rbf.d):00111                        ORG       IT.WPC
0025                  (   /dd/defs/rbf.d):00112         IT.SOFF1       RMB       1
0026                  (   /dd/defs/rbf.d):00113         IT.SOFF2       RMB       1
0027                  (   /dd/defs/rbf.d):00114         IT.SOFF3       RMB       1
0028                  (   /dd/defs/rbf.d):00115         IT.LLDRV       RMB       2
002A                  (   /dd/defs/rbf.d):00116         IT.MPI         RMB       1
                      (   /dd/defs/rbf.d):00117         
                      (   /dd/defs/rbf.d):00118         
                      (   /dd/defs/rbf.d):00119         * IT.TYP Definitions
                      (   /dd/defs/rbf.d):00120         *
     0080             (   /dd/defs/rbf.d):00121         TYP.HARD       EQU       %10000000           Hard disk
     0000             (   /dd/defs/rbf.d):00122         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (   /dd/defs/rbf.d):00123         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (   /dd/defs/rbf.d):00124         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (   /dd/defs/rbf.d):00125         
                      (   /dd/defs/rbf.d):00126         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (   /dd/defs/rbf.d):00127         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (   /dd/defs/rbf.d):00128         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (   /dd/defs/rbf.d):00129         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (   /dd/defs/rbf.d):00130         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (   /dd/defs/rbf.d):00131         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (   /dd/defs/rbf.d):00132         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (   /dd/defs/rbf.d):00133         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (   /dd/defs/rbf.d):00134         
                      (   /dd/defs/rbf.d):00135         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00136         TYP.5          EQU       %00000000           5" media
     0001             (   /dd/defs/rbf.d):00137         TYP.3          EQU       %00000001           3.5" media
     0002             (   /dd/defs/rbf.d):00138         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (   /dd/defs/rbf.d):00139         TYP.256        EQU       %00000000           256 byte sector media
     0004             (   /dd/defs/rbf.d):00140         TYP.512        EQU       %00000100           512 byte sector media
     0020             (   /dd/defs/rbf.d):00141         TYP.CCF        EQU       %00100000           CoCo format
     0000             (   /dd/defs/rbf.d):00142         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (   /dd/defs/rbf.d):00143         
                      (   /dd/defs/rbf.d):00144         * IT.DNS Definitions
                      (   /dd/defs/rbf.d):00145         *
                      (   /dd/defs/rbf.d):00146         
                      (   /dd/defs/rbf.d):00147         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (   /dd/defs/rbf.d):00148         
                      (   /dd/defs/rbf.d):00149         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00150         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (   /dd/defs/rbf.d):00151         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (   /dd/defs/rbf.d):00152         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (   /dd/defs/rbf.d):00153         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (   /dd/defs/rbf.d):00154         
                      (   /dd/defs/rbf.d):00155         * Added PHS,2005-05-31, as format seems to use these
     0000             (   /dd/defs/rbf.d):00156         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (   /dd/defs/rbf.d):00157         DNS.MFM0       EQU       %00000100           Double density track 0
                      (   /dd/defs/rbf.d):00158         
                      (   /dd/defs/rbf.d):00159         * Floppy disk step rate definitions
     0000             (   /dd/defs/rbf.d):00160         STP.30ms       EQU       0                   30ms step rate
     0001             (   /dd/defs/rbf.d):00161         STP.20ms       EQU       1                   20ms step rate
     0002             (   /dd/defs/rbf.d):00162         STP.12ms       EQU       2                   12ms step rate
     0003             (   /dd/defs/rbf.d):00163         STP.6ms        EQU       3                   6ms step rate
                      (   /dd/defs/rbf.d):00164         
                      (   /dd/defs/rbf.d):00165                        PAG
                      (   /dd/defs/rbf.d):00166         *************************************
                      (   /dd/defs/rbf.d):00167         * Random Block Path Descriptor Format
                      (   /dd/defs/rbf.d):00168         *
                      (   /dd/defs/rbf.d):00169         * A path descriptor is created for every new path that is open
                      (   /dd/defs/rbf.d):00170         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/rbf.d):00171         * descriptors track state information of a path.
                      (   /dd/defs/rbf.d):00172         *
                      (   /dd/defs/rbf.d):00173                        ORG       PD.FST
000A                  (   /dd/defs/rbf.d):00174         PD.SMF         RMB       1                   State flags
000B                  (   /dd/defs/rbf.d):00175         PD.CP          RMB       4                   Current logical byte position
000F                  (   /dd/defs/rbf.d):00176         PD.SIZ         RMB       4                   File size
0013                  (   /dd/defs/rbf.d):00177         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (   /dd/defs/rbf.d):00178         PD.SBP         RMB       3                   Segment beginning psn
0019                  (   /dd/defs/rbf.d):00179         PD.SSZ         RMB       3                   Segment size
001C                  (   /dd/defs/rbf.d):00180         PD.DSK         RMB       2                   Disk id
001E                  (   /dd/defs/rbf.d):00181         PD.DTB         RMB       2                   Drive table ptr
                      (   /dd/defs/rbf.d):00182                        ORG       PD.OPT
0020                  (   /dd/defs/rbf.d):00183                        RMB       1                   Device type
0021                  (   /dd/defs/rbf.d):00184         PD.DRV         RMB       1                   Drive number
0022                  (   /dd/defs/rbf.d):00185         PD.STP         RMB       1                   Step rate
0023                  (   /dd/defs/rbf.d):00186         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (   /dd/defs/rbf.d):00187         PD.DNS         RMB       1                   Density capability
0025                  (   /dd/defs/rbf.d):00188         PD.CYL         RMB       2                   Number of cylinders
0027                  (   /dd/defs/rbf.d):00189         PD.SID         RMB       1                   Number of surfaces
0028                  (   /dd/defs/rbf.d):00190         PD.VFY         RMB       1                   0=verify disk writes
0029                  (   /dd/defs/rbf.d):00191         PD.SCT         RMB       2                   Default sectors/track
002B                  (   /dd/defs/rbf.d):00192         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (   /dd/defs/rbf.d):00193         PD.ILV         RMB       1                   Sector interleave offset
002E                  (   /dd/defs/rbf.d):00194         PD.SAS         RMB       1                   Segment allocation size
002F                  (   /dd/defs/rbf.d):00195         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (   /dd/defs/rbf.d):00196         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (   /dd/defs/rbf.d):00197         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (   /dd/defs/rbf.d):00198         PD.ATT         RMB       1                   File attributes
0034                  (   /dd/defs/rbf.d):00199         PD.FD          RMB       3                   File descriptor psn
0037                  (   /dd/defs/rbf.d):00200         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (   /dd/defs/rbf.d):00201         PD.DCP         RMB       4                   File directory entry ptr
003E                  (   /dd/defs/rbf.d):00202         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (   /dd/defs/rbf.d):00203         
                      (   /dd/defs/rbf.d):00204         * State Flags
     0001             (   /dd/defs/rbf.d):00205         BUFMOD         EQU       $01                 Buffer modified
     0002             (   /dd/defs/rbf.d):00206         SINBUF         EQU       $02                 Sector in buffer
     0004             (   /dd/defs/rbf.d):00207         FDBUF          EQU       $04                 File descriptor in buffer
                      (   /dd/defs/rbf.d):00208         *EOFSEC equ $08 End of file sector
                      (   /dd/defs/rbf.d):00209         *EOF equ $10 End of file
     0020             (   /dd/defs/rbf.d):00210         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (   /dd/defs/rbf.d):00211         BufBusy        EQU       $40                 Buffer is currently busy
                      (   /dd/defs/rbf.d):00212         
                      (   /dd/defs/rbf.d):00213         ************************************
                      (   /dd/defs/rbf.d):00214         * Random Block Path Extension Format
                      (   /dd/defs/rbf.d):00215         *
                      (   /dd/defs/rbf.d):00216         * RBF paths under Level Two have additional information that
                      (   /dd/defs/rbf.d):00217         * is referenced by the path extension area.
                      (   /dd/defs/rbf.d):00218         *
                      (   /dd/defs/rbf.d):00219                        ORG       0
0000                  (   /dd/defs/rbf.d):00220         PE.PE          RMB       1                   PE path number
0001                  (   /dd/defs/rbf.d):00221         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (   /dd/defs/rbf.d):00222         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (   /dd/defs/rbf.d):00223         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (   /dd/defs/rbf.d):00224         PE.Lock        RMB       1                   Path lockout status
0008                  (   /dd/defs/rbf.d):00225         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (   /dd/defs/rbf.d):00226         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (   /dd/defs/rbf.d):00227         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (   /dd/defs/rbf.d):00228         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (   /dd/defs/rbf.d):00229         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (   /dd/defs/rbf.d):00230         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (   /dd/defs/rbf.d):00231         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (   /dd/defs/rbf.d):00232         PE.SigSg       RMB       1                   Signal code to send
0018                  (   /dd/defs/rbf.d):00233         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (   /dd/defs/rbf.d):00234                        RMB       32-.                Reserved
0020                  (   /dd/defs/rbf.d):00235         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (   /dd/defs/rbf.d):00236         
                      (   /dd/defs/rbf.d):00237         * PE.Lock status codes
     0000             (   /dd/defs/rbf.d):00238         Unlocked       EQU       0                   No portion of file is locked
     0001             (   /dd/defs/rbf.d):00239         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (   /dd/defs/rbf.d):00240         FileLock       EQU       2                   Entire file locked
     0004             (   /dd/defs/rbf.d):00241         EofLock        EQU       4                   End of file is locked
                      (   /dd/defs/rbf.d):00242         
                      (   /dd/defs/rbf.d):00243         
                      (   /dd/defs/rbf.d):00244                        PAG
                      (   /dd/defs/rbf.d):00245         ***********************
                      (   /dd/defs/rbf.d):00246         * LSN0 Disk Data Format
                      (   /dd/defs/rbf.d):00247         *
                      (   /dd/defs/rbf.d):00248         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (   /dd/defs/rbf.d):00249         * and contains information about the device's size and format.
                      (   /dd/defs/rbf.d):00250         *
                      (   /dd/defs/rbf.d):00251                        ORG       0
0000                  (   /dd/defs/rbf.d):00252         DD.TOT         RMB       3                   Total number of sectors
0003                  (   /dd/defs/rbf.d):00253         DD.TKS         RMB       1                   Track size in sectors
0004                  (   /dd/defs/rbf.d):00254         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (   /dd/defs/rbf.d):00255         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (   /dd/defs/rbf.d):00256         DD.DIR         RMB       3                   Address of root directory fd
000B                  (   /dd/defs/rbf.d):00257         DD.OWN         RMB       2                   Owner
000D                  (   /dd/defs/rbf.d):00258         DD.ATT         RMB       1                   Attributes
000E                  (   /dd/defs/rbf.d):00259         DD.DSK         RMB       2                   Disk ID
0010                  (   /dd/defs/rbf.d):00260         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (   /dd/defs/rbf.d):00261         DD.SPT         RMB       2                   Sectors/track
0013                  (   /dd/defs/rbf.d):00262         DD.RES         RMB       2                   Reserved for future use
     0015             (   /dd/defs/rbf.d):00263         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (   /dd/defs/rbf.d):00264         DD.BT          RMB       3                   System bootstrap sector
0018                  (   /dd/defs/rbf.d):00265         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (   /dd/defs/rbf.d):00266         DD.DAT         RMB       5                   Creation date
001F                  (   /dd/defs/rbf.d):00267         DD.NAM         RMB       32                  Volume name
003F                  (   /dd/defs/rbf.d):00268         DD.OPT         RMB       32                  Option area
                      (   /dd/defs/rbf.d):00269         
                      (   /dd/defs/rbf.d):00270         *************************
                      (   /dd/defs/rbf.d):00271         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (   /dd/defs/rbf.d):00272                 ORG $60         More options from device descriptor
0060                  (   /dd/defs/rbf.d):00273         VD.STP      RMB 1   This is for the /sh and /ih virtual disks in HDBDOS
0061                  (   /dd/defs/rbf.d):00274         VD.OFS      RMB 3   This is DT.WPC and DT.OSF combined, might be more
                      (   /dd/defs/rbf.d):00275         
                      (   /dd/defs/rbf.d):00276         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (   /dd/defs/rbf.d):00277         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (   /dd/defs/rbf.d):00278         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (   /dd/defs/rbf.d):00279         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (   /dd/defs/rbf.d):00280         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (   /dd/defs/rbf.d):00281         
                      (   /dd/defs/rbf.d):00282         
                      (   /dd/defs/rbf.d):00283                        PAG
                      (   /dd/defs/rbf.d):00284         ************************
                      (   /dd/defs/rbf.d):00285         * File Descriptor Format
                      (   /dd/defs/rbf.d):00286         *
                      (   /dd/defs/rbf.d):00287         * The file descriptor is a sector that is present for every file
                      (   /dd/defs/rbf.d):00288         * on an RBF device.  It contains attributes, modification dates,
                      (   /dd/defs/rbf.d):00289         * and segment information on a file.
                      (   /dd/defs/rbf.d):00290         *
                      (   /dd/defs/rbf.d):00291                        ORG       0
0000                  (   /dd/defs/rbf.d):00292         FD.ATT         RMB       1                   Attributes
0001                  (   /dd/defs/rbf.d):00293         FD.OWN         RMB       2                   Owner
0003                  (   /dd/defs/rbf.d):00294         FD.DAT         RMB       5                   Date last modified
0008                  (   /dd/defs/rbf.d):00295         FD.LNK         RMB       1                   Link count
0009                  (   /dd/defs/rbf.d):00296         FD.SIZ         RMB       4                   File size
000D                  (   /dd/defs/rbf.d):00297         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (   /dd/defs/rbf.d):00298         FD.SEG         EQU       .                   Beginning of segment list
                      (   /dd/defs/rbf.d):00299         * Segment List Entry Format
                      (   /dd/defs/rbf.d):00300                        ORG       0
0000                  (   /dd/defs/rbf.d):00301         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (   /dd/defs/rbf.d):00302         FDSL.B         RMB       2                   Segment size
     0005             (   /dd/defs/rbf.d):00303         FDSL.S         EQU       .                   Segment list entry size
     00FB             (   /dd/defs/rbf.d):00304         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (   /dd/defs/rbf.d):00305         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (   /dd/defs/rbf.d):00306         MINSEC         SET       16
                      (   /dd/defs/rbf.d):00307         
                      (   /dd/defs/rbf.d):00308         
                      (   /dd/defs/rbf.d):00309                        PAG
                      (   /dd/defs/rbf.d):00310         ************************
                      (   /dd/defs/rbf.d):00311         * Directory Entry Format
                      (   /dd/defs/rbf.d):00312         *
                      (   /dd/defs/rbf.d):00313         * Directory entries are part of a directory and define the name
                      (   /dd/defs/rbf.d):00314         * of the file, as well as a pointer to its file descriptor.
                      (   /dd/defs/rbf.d):00315         *
                      (   /dd/defs/rbf.d):00316                        ORG       0
0000                  (   /dd/defs/rbf.d):00317         DIR.NM         RMB       29                  File name
001D                  (   /dd/defs/rbf.d):00318         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (   /dd/defs/rbf.d):00319         DIR.SZ         EQU       .                   Directory record size
                      (   /dd/defs/rbf.d):00320         
                      (   /dd/defs/rbf.d):00321         
                      (   /dd/defs/rbf.d):00322                        PAG
                      (   /dd/defs/rbf.d):00323         ********************
                      (   /dd/defs/rbf.d):00324         * RBF Static Storage
                      (   /dd/defs/rbf.d):00325         *
                      (   /dd/defs/rbf.d):00326         * Overall Disk Static Storage
                      (   /dd/defs/rbf.d):00327         *
                      (   /dd/defs/rbf.d):00328         * Note:  This does not reserve any memory for drive tables.  Each
                      (   /dd/defs/rbf.d):00329         *        driver is responsible for reserving sufficient memory for
                      (   /dd/defs/rbf.d):00330         *        the appropriate number of tables.
                      (   /dd/defs/rbf.d):00331         *
                      (   /dd/defs/rbf.d):00332                        ORG       V.USER              Reserve required           ($06)
0006                  (   /dd/defs/rbf.d):00333         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (   /dd/defs/rbf.d):00334                        RMB       8                   reserved                   ($08)
     000F             (   /dd/defs/rbf.d):00335         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (   /dd/defs/rbf.d):00336         
                      (   /dd/defs/rbf.d):00337                        PAG
                      (   /dd/defs/rbf.d):00338         ****************
                      (   /dd/defs/rbf.d):00339         * Global Storage For Disk Drive Tables
                      (   /dd/defs/rbf.d):00340         *
                      (   /dd/defs/rbf.d):00341         * Each table contains the first 'DD.SIZ' bytes from
                      (   /dd/defs/rbf.d):00342         * LSN 0, and the current track, stepping rate,
                      (   /dd/defs/rbf.d):00343         * bitmap use flag, and disk type.
                      (   /dd/defs/rbf.d):00344         *
                      (   /dd/defs/rbf.d):00345                        ORG       0
0000                  (   /dd/defs/rbf.d):00346                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (   /dd/defs/rbf.d):00347         V.TRAK         RMB       2                   Current track
0017                  (   /dd/defs/rbf.d):00348         V.BMB          RMB       1                   Bit-map use flag
0018                  (   /dd/defs/rbf.d):00349         V.FileHd       RMB       2                   Open file list for this drive
001A                  (   /dd/defs/rbf.d):00350         V.DiskID       RMB       2                   Disk ID
001C                  (   /dd/defs/rbf.d):00351         V.BMapSz       RMB       1                   Bitmap Size
001D                  (   /dd/defs/rbf.d):00352         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (   /dd/defs/rbf.d):00353         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (   /dd/defs/rbf.d):00354         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (   /dd/defs/rbf.d):00355         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (   /dd/defs/rbf.d):00356         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (   /dd/defs/rbf.d):00357                        RMB       4                   Reserved
     0026             (   /dd/defs/rbf.d):00358         DRVMEM         EQU       .
                      (   /dd/defs/rbf.d):00359         
                      (   /dd/defs/rbf.d):00360         
                      ( /dd/defs/deffile):00007                  use   /dd/defs/scf.d
                      (   /dd/defs/scf.d):00001         ********************************************************************
                      (   /dd/defs/scf.d):00002         * scf.d - Sequential Character File Manager Definitions
                      (   /dd/defs/scf.d):00003         *
                      (   /dd/defs/scf.d):00004         * $Id$
                      (   /dd/defs/scf.d):00005         *
                      (   /dd/defs/scf.d):00006         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (   /dd/defs/scf.d):00007         * that define the logical structure of a serial device.
                      (   /dd/defs/scf.d):00008         *
                      (   /dd/defs/scf.d):00009         * The data structures in this file give SCF its 'personality' and are used
                      (   /dd/defs/scf.d):00010         * by SCF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/scf.d):00011         *
                      (   /dd/defs/scf.d):00012         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/scf.d):00013         * Comment
                      (   /dd/defs/scf.d):00014         * ------------------------------------------------------------------
                      (   /dd/defs/scf.d):00015         *          1984/01/11  YO
                      (   /dd/defs/scf.d):00016         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (   /dd/defs/scf.d):00017         *
                      (   /dd/defs/scf.d):00018         *          1985/04/20  Mark G. Hawkins
                      (   /dd/defs/scf.d):00019         * Added V.PDLHd Path Descriptor List Head.
                      (   /dd/defs/scf.d):00020         *
                      (   /dd/defs/scf.d):00021         *          1985/04/21  Mark G. Hawkins
                      (   /dd/defs/scf.d):00022         * Added PD.PLP and PD.PST for modem handling.
                      (   /dd/defs/scf.d):00023         *
                      (   /dd/defs/scf.d):00024         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/scf.d):00025         * Updated with Dev Desc info.
                      (   /dd/defs/scf.d):00026         *
                      (   /dd/defs/scf.d):00027         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/scf.d):00028         * Consolidated L1/L2 scfdefs.
                      (   /dd/defs/scf.d):00029         *
                      (   /dd/defs/scf.d):00030         *          2003/01/21  Boisy G. Pitre
                      (   /dd/defs/scf.d):00031         * Added symbolics for enhanced SCF line editing.
                      (   /dd/defs/scf.d):00032         *
                      (   /dd/defs/scf.d):00033         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/scf.d):00034         * Updated comments for clarity.
                      (   /dd/defs/scf.d):00035         *
                      (   /dd/defs/scf.d):00036         *          2004/05/17  Boisy G. Pitre
                      (   /dd/defs/scf.d):00037         * Added higher baud rates.
                      (   /dd/defs/scf.d):00038         
                      (   /dd/defs/scf.d):00039                        NAM       scf.d
                      (   /dd/defs/scf.d):00040                        TTL       Sequential File Manager Definitions
                      (   /dd/defs/scf.d):00041         
                      (   /dd/defs/scf.d):00042                        PAG
                      (   /dd/defs/scf.d):00043         *******************************
                      (   /dd/defs/scf.d):00044         * SCF Device Descriptor Offsets
                      (   /dd/defs/scf.d):00045         *
                      (   /dd/defs/scf.d):00046         * These definitions are for SCF device descriptors.
                      (   /dd/defs/scf.d):00047         
                      (   /dd/defs/scf.d):00048                        ORG       M$DTyp
0012                  (   /dd/defs/scf.d):00049         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (   /dd/defs/scf.d):00050         IT.UPC         RMB       1                   Uppercase flag
0014                  (   /dd/defs/scf.d):00051         IT.BSO         RMB       1                   Backspace behavior
0015                  (   /dd/defs/scf.d):00052         IT.DLO         RMB       1                   Delete behavior
0016                  (   /dd/defs/scf.d):00053         IT.EKO         RMB       1                   Echo flag
0017                  (   /dd/defs/scf.d):00054         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (   /dd/defs/scf.d):00055         IT.NUL         RMB       1                   End-of-line null count
0019                  (   /dd/defs/scf.d):00056         IT.PAU         RMB       1                   Page pause flag
001A                  (   /dd/defs/scf.d):00057         IT.PAG         RMB       1                   Number of lines per page
001B                  (   /dd/defs/scf.d):00058         IT.BSP         RMB       1                   Backspace character
001C                  (   /dd/defs/scf.d):00059         IT.DEL         RMB       1                   Delete-line character
001D                  (   /dd/defs/scf.d):00060         IT.EOR         RMB       1                   End-of-record character
001E                  (   /dd/defs/scf.d):00061         IT.EOF         RMB       1                   End-of-file character
001F                  (   /dd/defs/scf.d):00062         IT.RPR         RMB       1                   Reprint-line character
0020                  (   /dd/defs/scf.d):00063         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (   /dd/defs/scf.d):00064         IT.PSC         RMB       1                   Pause character
0022                  (   /dd/defs/scf.d):00065         IT.INT         RMB       1                   Interrupt character
0023                  (   /dd/defs/scf.d):00066         IT.QUT         RMB       1                   Quit character
0024                  (   /dd/defs/scf.d):00067         IT.BSE         RMB       1                   Backspace echo character
0025                  (   /dd/defs/scf.d):00068         IT.OVF         RMB       1                   Bell character
0026                  (   /dd/defs/scf.d):00069         IT.PAR         RMB       1                   Parity
0027                  (   /dd/defs/scf.d):00070         IT.BAU         RMB       1                   Baud rate
0028                  (   /dd/defs/scf.d):00071         IT.D2P         RMB       2                   Attached device name string offset
002A                  (   /dd/defs/scf.d):00072         IT.XON         RMB       1                   X-ON character
002B                  (   /dd/defs/scf.d):00073         IT.XOFF        RMB       1                   X-OFF character
002C                  (   /dd/defs/scf.d):00074         IT.COL         RMB       1                   Number of columns for display
002D                  (   /dd/defs/scf.d):00075         IT.ROW         RMB       1                   Number of rows for display
002E                  (   /dd/defs/scf.d):00076         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (   /dd/defs/scf.d):00077         
                      (   /dd/defs/scf.d):00078         * Window Descriptor Additions
                      (   /dd/defs/scf.d):00079         * For CoCo window, where IT.PAR = $80
                      (   /dd/defs/scf.d):00080                        ORG       IT.ROW+1
002E                  (   /dd/defs/scf.d):00081         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (   /dd/defs/scf.d):00082         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (   /dd/defs/scf.d):00083         IT.STY         RMB       1                   Screen type default
0031                  (   /dd/defs/scf.d):00084         IT.CPX         RMB       1                   Column start default
0032                  (   /dd/defs/scf.d):00085         IT.CPY         RMB       1                   Row start default
0033                  (   /dd/defs/scf.d):00086         IT.FGC         RMB       1                   Foreground color default
0034                  (   /dd/defs/scf.d):00087         IT.BGC         RMB       1                   Background color default
0035                  (   /dd/defs/scf.d):00088         IT.BDC         RMB       1                   Border color default
                      (   /dd/defs/scf.d):00089         
                      (   /dd/defs/scf.d):00090         
                      (   /dd/defs/scf.d):00091                        PAG
                      (   /dd/defs/scf.d):00092         ********************
                      (   /dd/defs/scf.d):00093         * SCF Static Storage
                      (   /dd/defs/scf.d):00094         *
                      (   /dd/defs/scf.d):00095         * SCF devices must reserve this space for SCF
                      (   /dd/defs/scf.d):00096         *
                      (   /dd/defs/scf.d):00097                        ORG       V.USER
0006                  (   /dd/defs/scf.d):00098         V.TYPE         RMB       1                   Device type or parity
0007                  (   /dd/defs/scf.d):00099         V.LINE         RMB       1                   Lines left until end of page
0008                  (   /dd/defs/scf.d):00100         V.PAUS         RMB       1                   Immediate Pause request
0009                  (   /dd/defs/scf.d):00101         V.DEV2         RMB       2                   Attached device's static
000B                  (   /dd/defs/scf.d):00102         V.INTR         RMB       1                   Interrupt char
000C                  (   /dd/defs/scf.d):00103         V.QUIT         RMB       1                   Quit char
000D                  (   /dd/defs/scf.d):00104         V.PCHR         RMB       1                   Pause char
000E                  (   /dd/defs/scf.d):00105         V.ERR          RMB       1                   Accumulated errors
000F                  (   /dd/defs/scf.d):00106         V.XON          RMB       1                   X-On char
0010                  (   /dd/defs/scf.d):00107         V.XOFF         RMB       1                   X-Off char
0011                  (   /dd/defs/scf.d):00108         V.KANJI        RMB       1                   Kanji mode flag
0012                  (   /dd/defs/scf.d):00109         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (   /dd/defs/scf.d):00110         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (   /dd/defs/scf.d):00111         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (   /dd/defs/scf.d):00112         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (   /dd/defs/scf.d):00113         V.SCF          EQU       .                   Total SCF manager static overhead
                      (   /dd/defs/scf.d):00114         
                      (   /dd/defs/scf.d):00115         
                      (   /dd/defs/scf.d):00116                        PAG
                      (   /dd/defs/scf.d):00117         ***********************
                      (   /dd/defs/scf.d):00118         * Character Definitions
                      (   /dd/defs/scf.d):00119         *
     0000             (   /dd/defs/scf.d):00120         C$NULL         SET       0                   Null char
     0001             (   /dd/defs/scf.d):00121         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (   /dd/defs/scf.d):00122         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (   /dd/defs/scf.d):00123         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (   /dd/defs/scf.d):00124         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (   /dd/defs/scf.d):00125         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (   /dd/defs/scf.d):00126         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (   /dd/defs/scf.d):00127         C$RARR         SET       $09                 Right Arrow
     0005             (   /dd/defs/scf.d):00128         C$EL           SET       $05                 Erase Line
     000A             (   /dd/defs/scf.d):00129         C$LF           SET       $0A                 Line feed
     000B             (   /dd/defs/scf.d):00130         C$HOME         SET       $0B                 Home position Code
     0015             (   /dd/defs/scf.d):00131         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (   /dd/defs/scf.d):00132         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (   /dd/defs/scf.d):00133         C$CR           SET       $0D                 Carriage return
     000C             (   /dd/defs/scf.d):00134         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (   /dd/defs/scf.d):00135         C$SI           SET       $0F                 Shift IN Code
     000E             (   /dd/defs/scf.d):00136         C$SO           SET       $0E                 Shift OUT Code
     0010             (   /dd/defs/scf.d):00137         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (   /dd/defs/scf.d):00138         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (   /dd/defs/scf.d):00139         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (   /dd/defs/scf.d):00140         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (   /dd/defs/scf.d):00141         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (   /dd/defs/scf.d):00142         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (   /dd/defs/scf.d):00143         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (   /dd/defs/scf.d):00144         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (   /dd/defs/scf.d):00145         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (   /dd/defs/scf.d):00146         C$RGT          SET       $1C                 Cursor right
     001D             (   /dd/defs/scf.d):00147         C$LFT          SET       $1D                 Cursor left
     001E             (   /dd/defs/scf.d):00148         C$UP           SET       $1E                 Cursor up
     001F             (   /dd/defs/scf.d):00149         C$DWN          SET       $1F                 Cursor down
     0020             (   /dd/defs/scf.d):00150         C$SPAC         SET       $20                 Space
     002E             (   /dd/defs/scf.d):00151         C$PERD         SET       '.
     002C             (   /dd/defs/scf.d):00152         C$COMA         SET       ',
                      (   /dd/defs/scf.d):00153         
                      (   /dd/defs/scf.d):00154         
                      (   /dd/defs/scf.d):00155                        PAG
                      (   /dd/defs/scf.d):00156         *********************************************
                      (   /dd/defs/scf.d):00157         * Sequential Character Path Descriptor Format
                      (   /dd/defs/scf.d):00158         *
                      (   /dd/defs/scf.d):00159         * A path descriptor is created for every new path that is open
                      (   /dd/defs/scf.d):00160         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/scf.d):00161         * descriptors track state information of a path.
                      (   /dd/defs/scf.d):00162         *
                      (   /dd/defs/scf.d):00163                        ORG       PD.FST
000A                  (   /dd/defs/scf.d):00164         PD.DV2         RMB       2                   Output device table pointer
000C                  (   /dd/defs/scf.d):00165         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (   /dd/defs/scf.d):00166         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (   /dd/defs/scf.d):00167         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (   /dd/defs/scf.d):00168         PD.STS         RMB       2                   Status routine module addr
0012                  (   /dd/defs/scf.d):00169         PD.STM         RMB       2                   Reserved for status routine
                      (   /dd/defs/scf.d):00170                        ORG       PD.OPT
0020                  (   /dd/defs/scf.d):00171                        RMB       1                   Device type
0021                  (   /dd/defs/scf.d):00172         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (   /dd/defs/scf.d):00173         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (   /dd/defs/scf.d):00174         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (   /dd/defs/scf.d):00175         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (   /dd/defs/scf.d):00176         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (   /dd/defs/scf.d):00177         PD.NUL         RMB       1                   End of Line null count
0027                  (   /dd/defs/scf.d):00178         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (   /dd/defs/scf.d):00179         PD.PAG         RMB       1                   Lines per page
0029                  (   /dd/defs/scf.d):00180         PD.BSP         RMB       1                   Backspace character
002A                  (   /dd/defs/scf.d):00181         PD.DEL         RMB       1                   Delete Line character
002B                  (   /dd/defs/scf.d):00182         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (   /dd/defs/scf.d):00183         PD.EOF         RMB       1                   End of File character
002D                  (   /dd/defs/scf.d):00184         PD.RPR         RMB       1                   Repront Line character
002E                  (   /dd/defs/scf.d):00185         PD.DUP         RMB       1                   Dup Last Line character
002F                  (   /dd/defs/scf.d):00186         PD.PSC         RMB       1                   Pause character
0030                  (   /dd/defs/scf.d):00187         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (   /dd/defs/scf.d):00188         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (   /dd/defs/scf.d):00189         PD.BSE         RMB       1                   Backspace echo character
0033                  (   /dd/defs/scf.d):00190         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (   /dd/defs/scf.d):00191         PD.PAR         RMB       1                   Parity code
0035                  (   /dd/defs/scf.d):00192         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (   /dd/defs/scf.d):00193         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (   /dd/defs/scf.d):00194         PD.XON         RMB       1                   ACIA X-ON character
0039                  (   /dd/defs/scf.d):00195         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (   /dd/defs/scf.d):00196         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (   /dd/defs/scf.d):00197         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (   /dd/defs/scf.d):00198         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (   /dd/defs/scf.d):00199         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (   /dd/defs/scf.d):00200         PD.PST         RMB       1                   Current path status
                      (   /dd/defs/scf.d):00201         
                      (   /dd/defs/scf.d):00202         
                      (   /dd/defs/scf.d):00203         * PD.PST values Path Descriptor Status byte
                      (   /dd/defs/scf.d):00204         *
     0001             (   /dd/defs/scf.d):00205         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (   /dd/defs/scf.d):00206         
                      (   /dd/defs/scf.d):00207         
                      (   /dd/defs/scf.d):00208         * PD.PAR definitions
                      (   /dd/defs/scf.d):00209         *
                      (   /dd/defs/scf.d):00210         * Parity
     0000             (   /dd/defs/scf.d):00211         PARNONE        EQU       %00000000
     0020             (   /dd/defs/scf.d):00212         PARODD         EQU       %00100000
     0060             (   /dd/defs/scf.d):00213         PAREVEN        EQU       %01100000
     00A0             (   /dd/defs/scf.d):00214         PARMARK        EQU       %10100000
     00E0             (   /dd/defs/scf.d):00215         PARSPACE       EQU       %11100000
     00E0             (   /dd/defs/scf.d):00216         PARMASK        EQU       %11100000
                      (   /dd/defs/scf.d):00217         
                      (   /dd/defs/scf.d):00218         * PD.BAU definitions
                      (   /dd/defs/scf.d):00219         *
                      (   /dd/defs/scf.d):00220         * Baud rate
     0000             (   /dd/defs/scf.d):00221         B110           EQU       %00000000
     0001             (   /dd/defs/scf.d):00222         B300           EQU       %00000001
     0002             (   /dd/defs/scf.d):00223         B600           EQU       %00000010
     0003             (   /dd/defs/scf.d):00224         B1200          EQU       %00000011
     0004             (   /dd/defs/scf.d):00225         B2400          EQU       %00000100
     0005             (   /dd/defs/scf.d):00226         B4800          EQU       %00000101
     0006             (   /dd/defs/scf.d):00227         B9600          EQU       %00000110
     0007             (   /dd/defs/scf.d):00228         B19200         EQU       %00000111
     0008             (   /dd/defs/scf.d):00229         B38400         EQU       %00001000
     0009             (   /dd/defs/scf.d):00230         B57600         EQU       %00001001
     000A             (   /dd/defs/scf.d):00231         B115200        EQU       %00001010
                      (   /dd/defs/scf.d):00232         * Word size
     0000             (   /dd/defs/scf.d):00233         WORD8          EQU       %00000000
     0020             (   /dd/defs/scf.d):00234         WORD7          EQU       %00100000
                      (   /dd/defs/scf.d):00235         * Stop bits
     0000             (   /dd/defs/scf.d):00236         STOP1          EQU       %00000000
     0010             (   /dd/defs/scf.d):00237         STOP2          EQU       %00010000
                      (   /dd/defs/scf.d):00238         
                      ( /dd/defs/deffile):00008                  use   /dd/defs/coco.d
                      (  /dd/defs/coco.d):00001         ********************************************************************
                      (  /dd/defs/coco.d):00002         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (  /dd/defs/coco.d):00003         *
                      (  /dd/defs/coco.d):00004         * $Id$
                      (  /dd/defs/coco.d):00005         *
                      (  /dd/defs/coco.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (  /dd/defs/coco.d):00007         * Comment
                      (  /dd/defs/coco.d):00008         * ------------------------------------------------------------------
                      (  /dd/defs/coco.d):00009         *          1998/10/13  Boisy G. Pitre
                      (  /dd/defs/coco.d):00010         * Added defs by Bruce Isted from his Eliminator archive.
                      (  /dd/defs/coco.d):00011         *
                      (  /dd/defs/coco.d):00012         *          1998/10/31  Boisy G. Pitre
                      (  /dd/defs/coco.d):00013         * Merged cc3global.defs into this file.
                      (  /dd/defs/coco.d):00014         *
                      (  /dd/defs/coco.d):00015         *          2002/04/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00016         * Merged Level One and Level Two sysdefs.
                      (  /dd/defs/coco.d):00017         *
                      (  /dd/defs/coco.d):00018         *          2002/06/22  Boisy G. Pitre
                      (  /dd/defs/coco.d):00019         * Removed PIA.U4 and PIA.U8, improved comments
                      (  /dd/defs/coco.d):00020         *
                      (  /dd/defs/coco.d):00021         *          2003/11/05  Robert Gault
                      (  /dd/defs/coco.d):00022         * Made changes in window globals and grfdrv memory to handle regW
                      (  /dd/defs/coco.d):00023         * in 6809 systems.
                      (  /dd/defs/coco.d):00024         *
                      (  /dd/defs/coco.d):00025         *          2003/11/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00026         * Statics now are prefaced with V. to identify them easier in source.
                      (  /dd/defs/coco.d):00027         *
                      (  /dd/defs/coco.d):00028         *          2004/07/18  Boisy G. Pitre
                      (  /dd/defs/coco.d):00029         * Moved CoCo 3 Window stuff into cc3iodefs
                      (  /dd/defs/coco.d):00030         *
                      (  /dd/defs/coco.d):00031         *          2012/02/24  Boisy G. Pitre
                      (  /dd/defs/coco.d):00032         * Consolidated all CoCo-specific defs files into here.
                      (  /dd/defs/coco.d):00033         
                      (  /dd/defs/coco.d):00034                        NAM       CoCoDefs
                      (  /dd/defs/coco.d):00035                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (  /dd/defs/coco.d):00036         
                      (  /dd/defs/coco.d):00037         
                      (  /dd/defs/coco.d):00038         **********************
                      (  /dd/defs/coco.d):00039         * CPU Type Definitions
                      (  /dd/defs/coco.d):00040         *
     0001             (  /dd/defs/coco.d):00041         Color          SET       1
     0002             (  /dd/defs/coco.d):00042         Color3         SET       2
     0002             (  /dd/defs/coco.d):00043         CPUType        SET       Color3
                      (  /dd/defs/coco.d):00044         
                      (  /dd/defs/coco.d):00045         
                      (  /dd/defs/coco.d):00046         ******************************
                      (  /dd/defs/coco.d):00047         * Clock Speed Type Definitions
                      (  /dd/defs/coco.d):00048         *
     0001             (  /dd/defs/coco.d):00049         OneMHz         EQU       1
     0002             (  /dd/defs/coco.d):00050         TwoMHz         EQU       2
     0002             (  /dd/defs/coco.d):00051         CPUSpeed       SET       TwoMHz
                      (  /dd/defs/coco.d):00052         
                      (  /dd/defs/coco.d):00053         
                      (  /dd/defs/coco.d):00054         **********************************
                      (  /dd/defs/coco.d):00055         * Power Line Frequency Definitions
                      (  /dd/defs/coco.d):00056         *
     0001             (  /dd/defs/coco.d):00057         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (  /dd/defs/coco.d):00058         Hz60           EQU       2                   Assemble clock for 60 hz power
     0002             (  /dd/defs/coco.d):00059         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (  /dd/defs/coco.d):00060         
                      (  /dd/defs/coco.d):00061         
                      (  /dd/defs/coco.d):00062         **********************************
                      (  /dd/defs/coco.d):00063         * Ticks per second
                      (  /dd/defs/coco.d):00064         *
     003C             (  /dd/defs/coco.d):00065         TkPerSec       SET       60
                      (  /dd/defs/coco.d):00066         
                      (  /dd/defs/coco.d):00067         
                      (  /dd/defs/coco.d):00068         ******************
                      (  /dd/defs/coco.d):00069         * ACIA type set up
                      (  /dd/defs/coco.d):00070         *
                      (  /dd/defs/coco.d):00071                        ORG       1
0001                  (  /dd/defs/coco.d):00072         ACIA6850       RMB       1                   MC6850 acia.
0002                  (  /dd/defs/coco.d):00073         ACIA6551       RMB       1                   SY6551 acia.
0003                  (  /dd/defs/coco.d):00074         ACIA2661       RMB       1                   SC2661 acia.
     0002             (  /dd/defs/coco.d):00075         ACIATYPE       SET       ACIA6551
                      (  /dd/defs/coco.d):00076         
                      (  /dd/defs/coco.d):00077         
                      (  /dd/defs/coco.d):00078         ****************************************
                      (  /dd/defs/coco.d):00079         * Special character Bit position equates
                      (  /dd/defs/coco.d):00080         *
     0001             (  /dd/defs/coco.d):00081         SHIFTBIT       EQU       %00000001
     0002             (  /dd/defs/coco.d):00082         CNTRLBIT       EQU       %00000010
     0004             (  /dd/defs/coco.d):00083         ALTERBIT       EQU       %00000100
     0008             (  /dd/defs/coco.d):00084         UPBIT          EQU       %00001000
     0010             (  /dd/defs/coco.d):00085         DOWNBIT        EQU       %00010000
     0020             (  /dd/defs/coco.d):00086         LEFTBIT        EQU       %00100000
     0040             (  /dd/defs/coco.d):00087         RIGHTBIT       EQU       %01000000
     0080             (  /dd/defs/coco.d):00088         SPACEBIT       EQU       %10000000
                      (  /dd/defs/coco.d):00089         
                      (  /dd/defs/coco.d):00090         
                      (  /dd/defs/coco.d):00091         ******************
                      (  /dd/defs/coco.d):00092         * Device addresses for miscellaneous hardware
                      (  /dd/defs/coco.d):00093         *
     FF68             (  /dd/defs/coco.d):00094         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (  /dd/defs/coco.d):00095         A.ModP         SET       $FF6C               ModPak Address
     FF40             (  /dd/defs/coco.d):00096         DPort          SET       $FF40               Disk controller base address
     FF7F             (  /dd/defs/coco.d):00097         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (  /dd/defs/coco.d):00098         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (  /dd/defs/coco.d):00099         PIA0Base       EQU       $FF00
     FF20             (  /dd/defs/coco.d):00100         PIA1Base       EQU       $FF20
                      (  /dd/defs/coco.d):00101         
                      (  /dd/defs/coco.d):00102         
                      (  /dd/defs/coco.d):00103         ******************
                      (  /dd/defs/coco.d):00104         * VDG Devices
                      (  /dd/defs/coco.d):00105         *
     FFC0             (  /dd/defs/coco.d):00106         A.TermV        SET       $FFC0               VDG Term
     FFC1             (  /dd/defs/coco.d):00107         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (  /dd/defs/coco.d):00108         A.V2           SET       $FFC2
     FFC3             (  /dd/defs/coco.d):00109         A.V3           SET       $FFC3
     FFC4             (  /dd/defs/coco.d):00110         A.V4           SET       $FFC4
     FFC5             (  /dd/defs/coco.d):00111         A.V5           SET       $FFC5
     FFC6             (  /dd/defs/coco.d):00112         A.V6           SET       $FFC6
     FFC7             (  /dd/defs/coco.d):00113         A.V7           SET       $FFC7
                      (  /dd/defs/coco.d):00114         
                      (  /dd/defs/coco.d):00115         
                      (  /dd/defs/coco.d):00116         
                      (  /dd/defs/coco.d):00117         ********************************
                      (  /dd/defs/coco.d):00118         * Boot defs for NitrOS-9 Level 1
                      (  /dd/defs/coco.d):00119         *
                      (  /dd/defs/coco.d):00120         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00121         * system.
                      (  /dd/defs/coco.d):00122         *
                      (  /dd/defs/coco.d):00123         
                      (  /dd/defs/coco.d):00124         
                      (  /dd/defs/coco.d):00125         ******************************************
                      (  /dd/defs/coco.d):00126         * Boot defs for NitrOS-9 Level 2 and above
                      (  /dd/defs/coco.d):00127         *
                      (  /dd/defs/coco.d):00128         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00129         * system.
                      (  /dd/defs/coco.d):00130         *
     ED00             (  /dd/defs/coco.d):00131         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (  /dd/defs/coco.d):00132         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (  /dd/defs/coco.d):00133         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (  /dd/defs/coco.d):00134         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (  /dd/defs/coco.d):00135         
                      (  /dd/defs/coco.d):00136         
                      (  /dd/defs/coco.d):00137         * On the CoCo, the boot track is all of track 34
                      (  /dd/defs/coco.d):00138         
     0022             (  /dd/defs/coco.d):00139         Bt.Track       EQU       34                  Boot track
     0000             (  /dd/defs/coco.d):00140         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (  /dd/defs/coco.d):00141         
                      (  /dd/defs/coco.d):00142         
     1080             (  /dd/defs/coco.d):00143         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (  /dd/defs/coco.d):00144         
                      (  /dd/defs/coco.d):00145         
                      (  /dd/defs/coco.d):00146         
                      (  /dd/defs/coco.d):00147         *************************************************
                      (  /dd/defs/coco.d):00148         *
                      (  /dd/defs/coco.d):00149         * NitrOS-9 Level 1 Section
                      (  /dd/defs/coco.d):00150         *
                      (  /dd/defs/coco.d):00151         *************************************************
                      (  /dd/defs/coco.d):00152         
                      (  /dd/defs/coco.d):00153         
                      (  /dd/defs/coco.d):00154         
                      (  /dd/defs/coco.d):00155         *************************************************
                      (  /dd/defs/coco.d):00156         *
                      (  /dd/defs/coco.d):00157         * NitrOS-9 Level 2 Section
                      (  /dd/defs/coco.d):00158         *
                      (  /dd/defs/coco.d):00159         *************************************************
                      (  /dd/defs/coco.d):00160         
                      (  /dd/defs/coco.d):00161         ****************************************
                      (  /dd/defs/coco.d):00162         * Dynamic Address Translator Definitions
                      (  /dd/defs/coco.d):00163         *
     0008             (  /dd/defs/coco.d):00164         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (  /dd/defs/coco.d):00165         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (  /dd/defs/coco.d):00166         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (  /dd/defs/coco.d):00167         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (  /dd/defs/coco.d):00168         DAT.Task       EQU       $FF91               Task Register address
     0020             (  /dd/defs/coco.d):00169         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (  /dd/defs/coco.d):00170         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (  /dd/defs/coco.d):00171         DAT.Free       EQU       $333E               Free Block Number
     003F             (  /dd/defs/coco.d):00172         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (  /dd/defs/coco.d):00173         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (  /dd/defs/coco.d):00174         DAT.WrPr       EQU       0                   no write protect
     0000             (  /dd/defs/coco.d):00175         DAT.WrEn       EQU       0                   no write enable
     0000             (  /dd/defs/coco.d):00176         SysTask        EQU       0                   Coco System Task number
     003F             (  /dd/defs/coco.d):00177         IOBlock        EQU       $3F
     003F             (  /dd/defs/coco.d):00178         ROMBlock       EQU       $3F
     007F             (  /dd/defs/coco.d):00179         IOAddr         EQU       $7F
     0001             (  /dd/defs/coco.d):00180         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (  /dd/defs/coco.d):00181         RAMCount       EQU       1                   initial blocks of RAM
     0005             (  /dd/defs/coco.d):00182         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (  /dd/defs/coco.d):00183         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (  /dd/defs/coco.d):00184         ByteType       EQU       2                   chk entire block of RAM
     0001             (  /dd/defs/coco.d):00185         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (  /dd/defs/coco.d):00186         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (  /dd/defs/coco.d):00187         * NOTE: this check assumes any NotRAM with a module will
                      (  /dd/defs/coco.d):00188         *       always start with $87CD in first two bytes of block
     0001             (  /dd/defs/coco.d):00189         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (  /dd/defs/coco.d):00190         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (  /dd/defs/coco.d):00191         LastRAM        EQU       IOBlock             maximum RAM block number
                      (  /dd/defs/coco.d):00192         
                      (  /dd/defs/coco.d):00193         ***************************
                      (  /dd/defs/coco.d):00194         * Color Computer 3 Specific
                      (  /dd/defs/coco.d):00195         *
     0001             (  /dd/defs/coco.d):00196         MappedIO       EQU       true                (Actually False but it works better this way)
                      (  /dd/defs/coco.d):00197         
                      (  /dd/defs/coco.d):00198         ********************
                      (  /dd/defs/coco.d):00199         * Hardware addresses
                      (  /dd/defs/coco.d):00200         *
     FF00             (  /dd/defs/coco.d):00201         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (  /dd/defs/coco.d):00202         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (  /dd/defs/coco.d):00203         BordReg        EQU       $FF9A               Border color register
     FFB0             (  /dd/defs/coco.d):00204         PalAdr         EQU       $FFB0               Palette registers
                      (  /dd/defs/coco.d):00205         
     0007             (  /dd/defs/coco.d):00206         HW.Page        SET       $07                 Device descriptor hardware page
                      (  /dd/defs/coco.d):00207         
                      (  /dd/defs/coco.d):00208         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (  /dd/defs/coco.d):00209         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (  /dd/defs/coco.d):00210         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (  /dd/defs/coco.d):00211         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (  /dd/defs/coco.d):00212         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (  /dd/defs/coco.d):00213         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (  /dd/defs/coco.d):00214         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (  /dd/defs/coco.d):00215         * it will end up with its own block assigned for CPU address space $E000-
                      (  /dd/defs/coco.d):00216         * $FFFF but the top of the address space is unusable by the user process:
                      (  /dd/defs/coco.d):00217         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (  /dd/defs/coco.d):00218         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (  /dd/defs/coco.d):00219         * For the COCO GIME, it's always $3F.
     003F             (  /dd/defs/coco.d):00220         KrnBlk         SET       $3F
                      (  /dd/defs/coco.d):00221         
                      (  /dd/defs/coco.d):00222         
                      ( /dd/defs/deffile):00009                  use   /dd/defs/cocovtio.d
                      (/dd/defs/cocovtio):00001         ********************************************************************
                      (/dd/defs/cocovtio):00002         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00003         *
                      (/dd/defs/cocovtio):00004         * $Id$
                      (/dd/defs/cocovtio):00005         *
                      (/dd/defs/cocovtio):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocovtio):00007         * Comment
                      (/dd/defs/cocovtio):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocovtio):00009         *          2004/07/18  Boisy G. Pitre
                      (/dd/defs/cocovtio):00010         * Started from systype
                      (/dd/defs/cocovtio):00011         
                      (/dd/defs/cocovtio):00012                        NAM       VTIODefs
                      (/dd/defs/cocovtio):00013                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00014         
                      (/dd/defs/cocovtio):00015         * Max size of Get/Put buffer to copy between user and grfdrv. There is room for up to 128, but
                      (/dd/defs/cocovtio):00016         *   we may use some of that for other things. Leaving at OS-9 Level II default (72) for now.
                      (/dd/defs/cocovtio):00017         * May try increasing to higher (maybe 96?) to see if it makes a noticable difference GPLoading
                      (/dd/defs/cocovtio):00018         * fonts, etc. in EOU bootup.
                      (/dd/defs/cocovtio):00019         
     0048             (/dd/defs/cocovtio):00020         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (/dd/defs/cocovtio):00021         
                      (/dd/defs/cocovtio):00022         ****************
                      (/dd/defs/cocovtio):00023         * Window Devices
                      (/dd/defs/cocovtio):00024         *
                      (/dd/defs/cocovtio):00025                        ORG       $FF9F
FF9F                  (/dd/defs/cocovtio):00026         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (/dd/defs/cocovtio):00027         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (/dd/defs/cocovtio):00028         A.W1           RMB       1                   $FFA1
FFA2                  (/dd/defs/cocovtio):00029         A.W2           RMB       1                   $FFA2
FFA3                  (/dd/defs/cocovtio):00030         A.W3           RMB       1                   $FFA3
FFA4                  (/dd/defs/cocovtio):00031         A.W4           RMB       1                   $FFA4
FFA5                  (/dd/defs/cocovtio):00032         A.W5           RMB       1                   $FFA5
FFA6                  (/dd/defs/cocovtio):00033         A.W6           RMB       1                   $FFA6
FFA7                  (/dd/defs/cocovtio):00034         A.W7           RMB       1                   $FFA7
FFA8                  (/dd/defs/cocovtio):00035         A.W8           RMB       1                   $FFA8
FFA9                  (/dd/defs/cocovtio):00036         A.W9           RMB       1                   $FFA9
FFAA                  (/dd/defs/cocovtio):00037         A.W10          RMB       1                   $FFAA
FFAB                  (/dd/defs/cocovtio):00038         A.W11          RMB       1                   $FFAB
FFAC                  (/dd/defs/cocovtio):00039         A.W12          RMB       1                   $FFAC
FFAD                  (/dd/defs/cocovtio):00040         A.W13          RMB       1                   $FFAD
FFAE                  (/dd/defs/cocovtio):00041         A.W14          RMB       1                   $FFAE
FFAF                  (/dd/defs/cocovtio):00042         A.W15          RMB       1                   $FFAF
                      (/dd/defs/cocovtio):00043         
                      (/dd/defs/cocovtio):00044         **********************************
                      (/dd/defs/cocovtio):00045         * Pointer Device Packet Definition
                      (/dd/defs/cocovtio):00046         *
                      (/dd/defs/cocovtio):00047                        ORG       0
0000                  (/dd/defs/cocovtio):00048         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (/dd/defs/cocovtio):00049         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (/dd/defs/cocovtio):00050         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (/dd/defs/cocovtio):00051                        RMB       2                   reserved
0005                  (/dd/defs/cocovtio):00052         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (/dd/defs/cocovtio):00053         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (/dd/defs/cocovtio):00054         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (/dd/defs/cocovtio):00055         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (/dd/defs/cocovtio):00056         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (/dd/defs/cocovtio):00057         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (/dd/defs/cocovtio):00058         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (/dd/defs/cocovtio):00059         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (/dd/defs/cocovtio):00060         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (/dd/defs/cocovtio):00061         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (/dd/defs/cocovtio):00062                        RMB       2                   Reserved
0012                  (/dd/defs/cocovtio):00063         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (/dd/defs/cocovtio):00064         Pt.BDY         RMB       2                   Button down Y value
0016                  (/dd/defs/cocovtio):00065         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (/dd/defs/cocovtio):00066         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (/dd/defs/cocovtio):00067         Pt.AcX         RMB       2                   Actual X Value
001A                  (/dd/defs/cocovtio):00068         Pt.AcY         RMB       2                   Actual Y Value
001C                  (/dd/defs/cocovtio):00069         Pt.WRX         RMB       2                   Window Relative X
001E                  (/dd/defs/cocovtio):00070         Pt.WRY         RMB       2                   Window Relative Y
     0020             (/dd/defs/cocovtio):00071         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (/dd/defs/cocovtio):00072         
                      (/dd/defs/cocovtio):00073         **************************
                      (/dd/defs/cocovtio):00074         * window regions for mouse
                      (/dd/defs/cocovtio):00075         *
     0000             (/dd/defs/cocovtio):00076         WR.Cntnt       EQU       0                   content region
     0001             (/dd/defs/cocovtio):00077         WR.Cntrl       EQU       1                   control region
     0002             (/dd/defs/cocovtio):00078         WR.OfWin       EQU       2                   off window
                      (/dd/defs/cocovtio):00079         
                      (/dd/defs/cocovtio):00080         *************************************
                      (/dd/defs/cocovtio):00081         * Standard system get/put buffer defs
                      (/dd/defs/cocovtio):00082         *
                      (/dd/defs/cocovtio):00083         *
                      (/dd/defs/cocovtio):00084         * system group numbers
                      (/dd/defs/cocovtio):00085         *
                      (/dd/defs/cocovtio):00086                        ORG       200
00C8                  (/dd/defs/cocovtio):00087         Grp.Fnt        RMB       1                   font group
00C9                  (/dd/defs/cocovtio):00088         Grp.Clip       RMB       1                   clipboard group
00CA                  (/dd/defs/cocovtio):00089         Grp.Ptr        RMB       1                   pointer group
00CB                  (/dd/defs/cocovtio):00090         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (/dd/defs/cocovtio):00091         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (/dd/defs/cocovtio):00092         Grp.Pat6       RMB       1                   pattern group 16 color
                      (/dd/defs/cocovtio):00093         *
                      (/dd/defs/cocovtio):00094         * font buffer numbers
                      (/dd/defs/cocovtio):00095         *
                      (/dd/defs/cocovtio):00096                        ORG       1
0001                  (/dd/defs/cocovtio):00097         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (/dd/defs/cocovtio):00098         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (/dd/defs/cocovtio):00099         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (/dd/defs/cocovtio):00100         *
                      (/dd/defs/cocovtio):00101         * pattern buffer numbers
                      (/dd/defs/cocovtio):00102         *
                      (/dd/defs/cocovtio):00103                        ORG       1
0001                  (/dd/defs/cocovtio):00104         Pat.Dot        RMB       1
0002                  (/dd/defs/cocovtio):00105         Pat.Vrt        RMB       1
0003                  (/dd/defs/cocovtio):00106         Pat.Hrz        RMB       1
0004                  (/dd/defs/cocovtio):00107         Pat.XHtc       RMB       1
0005                  (/dd/defs/cocovtio):00108         Pat.LSnt       RMB       1
0006                  (/dd/defs/cocovtio):00109         Pat.RSnt       RMB       1
0007                  (/dd/defs/cocovtio):00110         Pat.SDot       RMB       1
0008                  (/dd/defs/cocovtio):00111         Pat.BDot       RMB       1
                      (/dd/defs/cocovtio):00112         *
                      (/dd/defs/cocovtio):00113         * pointer buffer numbers
                      (/dd/defs/cocovtio):00114         *
                      (/dd/defs/cocovtio):00115                        ORG       1
0001                  (/dd/defs/cocovtio):00116         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (/dd/defs/cocovtio):00117         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (/dd/defs/cocovtio):00118         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (/dd/defs/cocovtio):00119         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (/dd/defs/cocovtio):00120         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (/dd/defs/cocovtio):00121         Ptr.Txt        RMB       1                   Text pointer
0007                  (/dd/defs/cocovtio):00122         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (/dd/defs/cocovtio):00123         
                      (/dd/defs/cocovtio):00124         **********************
                      (/dd/defs/cocovtio):00125         * KeyDrv Entry Points
                      (/dd/defs/cocovtio):00126                        ORG       0
0000                  (/dd/defs/cocovtio):00127         K$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00128         K$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00129         K$FnKey        RMB       3                   get function key states
0009                  (/dd/defs/cocovtio):00130         K$RdKey        RMB       3                   get key states
                      (/dd/defs/cocovtio):00131         
                      (/dd/defs/cocovtio):00132         **********************
                      (/dd/defs/cocovtio):00133         * JoyDrv Entry Points
                      (/dd/defs/cocovtio):00134                        ORG       0
0000                  (/dd/defs/cocovtio):00135         J$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00136         J$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00137         J$MsBtn        RMB       3                   get mouse button states
0009                  (/dd/defs/cocovtio):00138         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (/dd/defs/cocovtio):00139         J$JyBtn        RMB       3                   get joystick button states
000F                  (/dd/defs/cocovtio):00140         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00141         
                      (/dd/defs/cocovtio):00142         **********************
                      (/dd/defs/cocovtio):00143         * SndDrv Entry Points
                      (/dd/defs/cocovtio):00144                        ORG       0
0000                  (/dd/defs/cocovtio):00145         S$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00146         S$GetStt       RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00147         S$SetStt       RMB       3                   joystick termination
0009                  (/dd/defs/cocovtio):00148         S$Term         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00149         
                      (/dd/defs/cocovtio):00150         ********************************
                      (/dd/defs/cocovtio):00151         * Window/Menu Bar Data Structure
                      (/dd/defs/cocovtio):00152         *
                      (/dd/defs/cocovtio):00153         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (/dd/defs/cocovtio):00154         * for use in the high level windowing package.
                      (/dd/defs/cocovtio):00155         *
     000A             (/dd/defs/cocovtio):00156         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (/dd/defs/cocovtio):00157         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (/dd/defs/cocovtio):00158         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (/dd/defs/cocovtio):00159         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (/dd/defs/cocovtio):00160         *
                      (/dd/defs/cocovtio):00161         * Menu Item Descriptor : (MN.ITEMS)
                      (/dd/defs/cocovtio):00162         * one required for each item within the menu
                      (/dd/defs/cocovtio):00163         *
                      (/dd/defs/cocovtio):00164                        ORG       0
0000                  (/dd/defs/cocovtio):00165         MI.TTL         RMB       MXTTLEN             item name
000F                  (/dd/defs/cocovtio):00166         MI.ENBL        RMB       1                   enable flag
0010                  (/dd/defs/cocovtio):00167         MI.RES         RMB       5                   reserved bytes
     0015             (/dd/defs/cocovtio):00168         MI.SIZ         EQU       .                   size of menu item descriptor
                      (/dd/defs/cocovtio):00169         *
                      (/dd/defs/cocovtio):00170         * Menu Descriptor :
                      (/dd/defs/cocovtio):00171         * one for each menu on the manu bar
                      (/dd/defs/cocovtio):00172         * each is pointed to by MB.MPTR below
                      (/dd/defs/cocovtio):00173         *
                      (/dd/defs/cocovtio):00174                        ORG       0
0000                  (/dd/defs/cocovtio):00175         MN.TTL         RMB       MXTTLEN             menu title
000F                  (/dd/defs/cocovtio):00176         MN.ID          RMB       1                   menu id number (1-255)
0010                  (/dd/defs/cocovtio):00177         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (/dd/defs/cocovtio):00178         MN.NITS        RMB       1                   number of items in menu
0012                  (/dd/defs/cocovtio):00179         MN.ENBL        RMB       1                   enable flag
0013                  (/dd/defs/cocovtio):00180         MN.RES         RMB       2                   reserved bytes
0015                  (/dd/defs/cocovtio):00181         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (/dd/defs/cocovtio):00182         MN.SIZ         EQU       .                   size of menu descriptor
                      (/dd/defs/cocovtio):00183         *
                      (/dd/defs/cocovtio):00184         * Window Descriptor:
                      (/dd/defs/cocovtio):00185         * one required for each application in a framed window
                      (/dd/defs/cocovtio):00186         *
                      (/dd/defs/cocovtio):00187                        ORG       0
0000                  (/dd/defs/cocovtio):00188         WN.TTL         RMB       20                  title of window for title bar
0014                  (/dd/defs/cocovtio):00189         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (/dd/defs/cocovtio):00190         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (/dd/defs/cocovtio):00191         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (/dd/defs/cocovtio):00192         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (/dd/defs/cocovtio):00193         WN.RES         RMB       7                   reserved bytes
0020                  (/dd/defs/cocovtio):00194         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (/dd/defs/cocovtio):00195         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (/dd/defs/cocovtio):00196         
                      (/dd/defs/cocovtio):00197         *************************
                      (/dd/defs/cocovtio):00198         * Window Type Definitions
                      (/dd/defs/cocovtio):00199         *
                      (/dd/defs/cocovtio):00200         * To be used in setting up the border of the window in
                      (/dd/defs/cocovtio):00201         * the SS.WnSel SETSTAT
                      (/dd/defs/cocovtio):00202         *
                      (/dd/defs/cocovtio):00203                        ORG       0
0000                  (/dd/defs/cocovtio):00204         WT.NBox        RMB       1                   No Box
0001                  (/dd/defs/cocovtio):00205         WT.FWin        RMB       1                   Framed Window
0002                  (/dd/defs/cocovtio):00206         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (/dd/defs/cocovtio):00207         WT.SBox        RMB       1                   Shadowed Box
0004                  (/dd/defs/cocovtio):00208         WT.DBox        RMB       1                   Double Box
0005                  (/dd/defs/cocovtio):00209         WT.PBox        RMB       1                   Plain Box
                      (/dd/defs/cocovtio):00210         
                      (/dd/defs/cocovtio):00211         *************************************
                      (/dd/defs/cocovtio):00212         * Pre-Defined Menu IDs for the system
                      (/dd/defs/cocovtio):00213         *
                      (/dd/defs/cocovtio):00214                        ORG       1
0001                  (/dd/defs/cocovtio):00215         MId.Mov        RMB       1                   move box
0002                  (/dd/defs/cocovtio):00216         MId.Cls        RMB       1                   close box
0003                  (/dd/defs/cocovtio):00217         MId.Grw        RMB       1                   grow box
0004                  (/dd/defs/cocovtio):00218         MId.SUp        RMB       1                   scroll up
0005                  (/dd/defs/cocovtio):00219         MId.SDn        RMB       1                   scroll down
0006                  (/dd/defs/cocovtio):00220         MId.SRt        RMB       1                   scroll right
0007                  (/dd/defs/cocovtio):00221         MId.SLt        RMB       1                   scroll left
0008                  (/dd/defs/cocovtio):00222         MId.Chr        RMB       1                   character was depressed
                      (/dd/defs/cocovtio):00223                        ORG       20
0014                  (/dd/defs/cocovtio):00224         MId.Tdy        RMB       1                   Tandy menu
0015                  (/dd/defs/cocovtio):00225         MId.Fil        RMB       1                   Files Menu
0016                  (/dd/defs/cocovtio):00226         MId.Edt        RMB       1                   Edit Menu
0017                  (/dd/defs/cocovtio):00227         MId.Sty        RMB       1                   Styles menu
0018                  (/dd/defs/cocovtio):00228         MId.Fnt        RMB       1                   Font menu
                      (/dd/defs/cocovtio):00229         
                      (/dd/defs/cocovtio):00230         
                      (/dd/defs/cocovtio):00231         ******************************************************************************
                      (/dd/defs/cocovtio):00232         ******************************************************************************
                      (/dd/defs/cocovtio):00233         **                                                                          **
                      (/dd/defs/cocovtio):00234         ** NitrOS-9 Windowing system Global data definitions                        **
                      (/dd/defs/cocovtio):00235         **                                                                          **
                      (/dd/defs/cocovtio):00236         ******************************************************************************
                      (/dd/defs/cocovtio):00237         ******************************************************************************
                      (/dd/defs/cocovtio):00238         **                                                                          **
                      (/dd/defs/cocovtio):00239         ** System memory block 0 layout:                                            **
                      (/dd/defs/cocovtio):00240         **                                                                          **
                      (/dd/defs/cocovtio):00241         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (/dd/defs/cocovtio):00242         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (/dd/defs/cocovtio):00243         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (/dd/defs/cocovtio):00244         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (/dd/defs/cocovtio):00245         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (/dd/defs/cocovtio):00246         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (/dd/defs/cocovtio):00247         ** $0010-$001F : unused (User definable)                                    **
                      (/dd/defs/cocovtio):00248         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (/dd/defs/cocovtio):00249         ** $0100-$011F : Task usage table                                           **
                      (/dd/defs/cocovtio):00250         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (/dd/defs/cocovtio):00251         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (/dd/defs/cocovtio):00252         ** $0300-$03FF : system's system call dispatch table                        **
                      (/dd/defs/cocovtio):00253         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (/dd/defs/cocovtio):00254         ** $0500-$05FF : process descriptor pointer table                           **
                      (/dd/defs/cocovtio):00255         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (/dd/defs/cocovtio):00256         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (/dd/defs/cocovtio):00257         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (/dd/defs/cocovtio):00258         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (/dd/defs/cocovtio):00259         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (/dd/defs/cocovtio):00260         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (/dd/defs/cocovtio):00261         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (/dd/defs/cocovtio):00262         ** $1248-$127F : ????  (unused)                                             **
                      (/dd/defs/cocovtio):00263         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (/dd/defs/cocovtio):00264         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (/dd/defs/cocovtio):00265         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (/dd/defs/cocovtio):00266         **                                                                          **
                      (/dd/defs/cocovtio):00267         ******************************************************************************
                      (/dd/defs/cocovtio):00268         ******************************************************************************
                      (/dd/defs/cocovtio):00269         
                      (/dd/defs/cocovtio):00270         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (/dd/defs/cocovtio):00271         MaxLines       EQU       25                  Max. Y coord text value
     0000             (/dd/defs/cocovtio):00272         Meg            SET       false               "true" if 1 or 2 meg machine
                      (/dd/defs/cocovtio):00273         
     0000             (/dd/defs/cocovtio):00274         COMP           EQU       0                   composite monitor
     0001             (/dd/defs/cocovtio):00275         RGB            EQU       1                   RGB Analog monitor 
     0002             (/dd/defs/cocovtio):00276         MONO           EQU       2                   monochrome monitor
                      (/dd/defs/cocovtio):00277         
     0001             (/dd/defs/cocovtio):00278         Monitor        SET       RGB
                      (/dd/defs/cocovtio):00279         
                      (/dd/defs/cocovtio):00280         * Global definitions
     0001             (/dd/defs/cocovtio):00281         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (/dd/defs/cocovtio):00282         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (/dd/defs/cocovtio):00283         CapsLck        EQU       %00000100           Capslock enabled
     0280             (/dd/defs/cocovtio):00284         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00285                      IFEQ      MaxLines-25
     00C6             (/dd/defs/cocovtio):00286         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00287                      ELSE      
0019                  (/dd/defs/cocovtio):00288         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00289                      ENDC      
                      (/dd/defs/cocovtio):00290         
                      (/dd/defs/cocovtio):00291         *****************************************************************************
                      (/dd/defs/cocovtio):00292         * Static memory area for each window (VTIO/TC9IO)
                      (/dd/defs/cocovtio):00293         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (/dd/defs/cocovtio):00294         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (/dd/defs/cocovtio):00295         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (/dd/defs/cocovtio):00296         * May have to have smaller limit for text to gfx screens, as it will run much
                      (/dd/defs/cocovtio):00297         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (/dd/defs/cocovtio):00298         *
                      (/dd/defs/cocovtio):00299         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (/dd/defs/cocovtio):00300         * V.SCF is to be resolved properly in pass 1!!
                      (/dd/defs/cocovtio):00301                        ORG       V.SCF
001D                  (/dd/defs/cocovtio):00302         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (/dd/defs/cocovtio):00303         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (/dd/defs/cocovtio):00304         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (/dd/defs/cocovtio):00305         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (/dd/defs/cocovtio):00306         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (/dd/defs/cocovtio):00307         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (/dd/defs/cocovtio):00308         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (/dd/defs/cocovtio):00309         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (/dd/defs/cocovtio):00310         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (/dd/defs/cocovtio):00311         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (/dd/defs/cocovtio):00312         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (/dd/defs/cocovtio):00313         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (/dd/defs/cocovtio):00314                        RMB       1                   unused                                       $2A
002B                  (/dd/defs/cocovtio):00315         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (/dd/defs/cocovtio):00316         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (/dd/defs/cocovtio):00317         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (/dd/defs/cocovtio):00318         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (/dd/defs/cocovtio):00319         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (/dd/defs/cocovtio):00320         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (/dd/defs/cocovtio):00321         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (/dd/defs/cocovtio):00322         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (/dd/defs/cocovtio):00323         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (/dd/defs/cocovtio):00324         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (/dd/defs/cocovtio):00325         CC3Parm        RMB       128-.               global parameter area
0080                  (/dd/defs/cocovtio):00326         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (/dd/defs/cocovtio):00327         CC3DSiz        EQU       .
                      (/dd/defs/cocovtio):00328         
                      (/dd/defs/cocovtio):00329         *****************************************************************************
                      (/dd/defs/cocovtio):00330         * GrfInt/WindInt global memory area
                      (/dd/defs/cocovtio):00331         * This area sits in system block 0 from $1000 to $10ff
     1000             (/dd/defs/cocovtio):00332         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (/dd/defs/cocovtio):00333                        ORG       0
0000                  (/dd/defs/cocovtio):00334         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (/dd/defs/cocovtio):00335         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (/dd/defs/cocovtio):00336         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (/dd/defs/cocovtio):00337         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (/dd/defs/cocovtio):00338         *g0003    rmb   2          NEW: UNUSED
0005                  (/dd/defs/cocovtio):00339         g0005          RMB       2                   Temp save in Windint RG
0007                  (/dd/defs/cocovtio):00340         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (/dd/defs/cocovtio):00341         G.MonTyp       RMB       1                   monitor type
     000A             (/dd/defs/cocovtio):00342         g000A          EQU       .                   Old label for compatibility
000A                  (/dd/defs/cocovtio):00343         G.CrDvFl       RMB       1                   Are we current device flag (only set when all
                      (/dd/defs/cocovtio):00344         *                           Parms have been moved to Dev Mem)
                      (/dd/defs/cocovtio):00345         *                           0=We are not on our device
                      (/dd/defs/cocovtio):00346         *                           1=We are the current device
                      (/dd/defs/cocovtio):00347         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (/dd/defs/cocovtio):00348         *                            whether or not to update GIME regs themselves
                      (/dd/defs/cocovtio):00349         *                            If not current device, they don't.)
000B                  (/dd/defs/cocovtio):00350         G.WinType      RMB       1                   current device's V.TYPE
000C                  (/dd/defs/cocovtio):00351         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (/dd/defs/cocovtio):00352         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (/dd/defs/cocovtio):00353         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (/dd/defs/cocovtio):00354         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (/dd/defs/cocovtio):00355         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (/dd/defs/cocovtio):00356         G.BelVec       RMB       2                   BELL routine vector
0019                  (/dd/defs/cocovtio):00357         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (/dd/defs/cocovtio):00358         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (/dd/defs/cocovtio):00359         G.BelTnF       RMB       1                   BELL tone flag
001D                  (/dd/defs/cocovtio):00360         g001D          RMB       3
0020                  (/dd/defs/cocovtio):00361         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (/dd/defs/cocovtio):00362         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (/dd/defs/cocovtio):00363         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (/dd/defs/cocovtio):00364         *                           00000010 : VDGInt found
                      (/dd/defs/cocovtio):00365         *                           10000000 : GrfDrv found
0025                  (/dd/defs/cocovtio):00366         g0025          RMB       1
0026                  (/dd/defs/cocovtio):00367         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (/dd/defs/cocovtio):00368         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00369         *CurLght  rmb   1          current keyboard light settings
                      (/dd/defs/cocovtio):00370         *         ELSE  
0027                  (/dd/defs/cocovtio):00371         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (/dd/defs/cocovtio):00372         *         ENDC  
0028                  (/dd/defs/cocovtio):00373         G.LKeyCd       RMB       1                   last keyboard code
0029                  (/dd/defs/cocovtio):00374         G.KyRept       RMB       1                   key repeat counter
                      (/dd/defs/cocovtio):00375         * A secondary 3 key table (same format as g002D below)
002A                  (/dd/defs/cocovtio):00376         G.2Key1        RMB       1                   $2A
002B                  (/dd/defs/cocovtio):00377         G.2Key2        RMB       1                   $2B
002C                  (/dd/defs/cocovtio):00378         G.2Key3        RMB       1
                      (/dd/defs/cocovtio):00379         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (/dd/defs/cocovtio):00380         * than 3 are hit, the last key is overwritten with the very last key down that
                      (/dd/defs/cocovtio):00381         * was checked. Format for all three is the same as the PIA column/row byte @
                      (/dd/defs/cocovtio):00382         * KeyFlag below.
002D                  (/dd/defs/cocovtio):00383         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (/dd/defs/cocovtio):00384         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (/dd/defs/cocovtio):00385         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (/dd/defs/cocovtio):00386         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (/dd/defs/cocovtio):00387         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (/dd/defs/cocovtio):00388         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (/dd/defs/cocovtio):00389         *                           %00000111-Column # (Output, 0-7)
                      (/dd/defs/cocovtio):00390         *                           %00111000-Row # (Input, 0-6)
0033                  (/dd/defs/cocovtio):00391         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (/dd/defs/cocovtio):00392         G.KySns        RMB       1                   key sense byte
0035                  (/dd/defs/cocovtio):00393         G.KySame       RMB       1                   same key flag
0036                  (/dd/defs/cocovtio):00394         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (/dd/defs/cocovtio):00395                        RMB       1
0038                  (/dd/defs/cocovtio):00396         g0038          RMB       1                   grfdrv initialized flag
0039                  (/dd/defs/cocovtio):00397                        RMB       2
003B                  (/dd/defs/cocovtio):00398         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (/dd/defs/cocovtio):00399         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (/dd/defs/cocovtio):00400         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (/dd/defs/cocovtio):00401         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (/dd/defs/cocovtio):00402         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (/dd/defs/cocovtio):00403         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (/dd/defs/cocovtio):00404         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (/dd/defs/cocovtio):00405         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00406         *KeyParm  rmb   1          keyboard command parameter byte
                      (/dd/defs/cocovtio):00407         *         ELSE  
0063                  (/dd/defs/cocovtio):00408         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (/dd/defs/cocovtio):00409         *         ENDC  
0064                  (/dd/defs/cocovtio):00410         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (/dd/defs/cocovtio):00411         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (/dd/defs/cocovtio):00412         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (/dd/defs/cocovtio):00413         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (/dd/defs/cocovtio):00414         G.CoTble       RMB       6                   co-module table ($68)
006E                  (/dd/defs/cocovtio):00415         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (/dd/defs/cocovtio):00416         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (/dd/defs/cocovtio):00417         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (/dd/defs/cocovtio):00418         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (/dd/defs/cocovtio):00419         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (/dd/defs/cocovtio):00420         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (/dd/defs/cocovtio):00421         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (/dd/defs/cocovtio):00422         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (/dd/defs/cocovtio):00423         g00BD          RMB       1                   Current screen type for work window table
00BE                  (/dd/defs/cocovtio):00424         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (/dd/defs/cocovtio):00425         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (/dd/defs/cocovtio):00426         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (/dd/defs/cocovtio):00427         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (/dd/defs/cocovtio):00428         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (/dd/defs/cocovtio):00429         G.MsSig        RMB       1                   mouse signal flag
00C7                  (/dd/defs/cocovtio):00430         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (/dd/defs/cocovtio):00431         g00D7          RMB       9
00E0                  (/dd/defs/cocovtio):00432         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (/dd/defs/cocovtio):00433         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (/dd/defs/cocovtio):00434         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (/dd/defs/cocovtio):00435         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (/dd/defs/cocovtio):00436         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (/dd/defs/cocovtio):00437         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (/dd/defs/cocovtio):00438         
                      (/dd/defs/cocovtio):00439         *****************************************************************************
                      (/dd/defs/cocovtio):00440         * GrfDrv global memory data definitions
                      (/dd/defs/cocovtio):00441         * This area sits in system block 0 from $1100 to $119E
     1100             (/dd/defs/cocovtio):00442         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (/dd/defs/cocovtio):00443                        ORG       0
0000                  (/dd/defs/cocovtio):00444         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (/dd/defs/cocovtio):00445         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (/dd/defs/cocovtio):00446         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (/dd/defs/cocovtio):00447         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (/dd/defs/cocovtio):00448         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (/dd/defs/cocovtio):00449         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (/dd/defs/cocovtio):00450         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (/dd/defs/cocovtio):00451         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (/dd/defs/cocovtio):00452         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (/dd/defs/cocovtio):00453         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (/dd/defs/cocovtio):00454         *                                              overlay width has been copied
000B                  (/dd/defs/cocovtio):00455         gr000B         RMB       1
000C                  (/dd/defs/cocovtio):00456         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (/dd/defs/cocovtio):00457         gr000E         RMB       1
000F                  (/dd/defs/cocovtio):00458         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (/dd/defs/cocovtio):00459         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (/dd/defs/cocovtio):00460         gr0012         RMB       6
0018                  (/dd/defs/cocovtio):00461         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (/dd/defs/cocovtio):00462         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (/dd/defs/cocovtio):00463         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (/dd/defs/cocovtio):00464         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (/dd/defs/cocovtio):00465         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (/dd/defs/cocovtio):00466         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (/dd/defs/cocovtio):00467         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (/dd/defs/cocovtio):00468         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (/dd/defs/cocovtio):00469         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (/dd/defs/cocovtio):00470         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (/dd/defs/cocovtio):00471         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (/dd/defs/cocovtio):00472         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (/dd/defs/cocovtio):00473         gr002C         RMB       2
002E                  (/dd/defs/cocovtio):00474         gr002E         RMB       2                   current window table entry
0030                  (/dd/defs/cocovtio):00475         gr0030         RMB       2                   current screen table ptr
0032                  (/dd/defs/cocovtio):00476         gr0032         RMB       1                   Last block # we used for buffers
0033                  (/dd/defs/cocovtio):00477         gr0033         RMB       2                   Last offset we used for buffers
0035                  (/dd/defs/cocovtio):00478         gr0035         RMB       1                   group
0036                  (/dd/defs/cocovtio):00479         gr0036         RMB       2                   offset
0038                  (/dd/defs/cocovtio):00480         gr0038         RMB       1                   group returned (new)
0039                  (/dd/defs/cocovtio):00481         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (/dd/defs/cocovtio):00482         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (/dd/defs/cocovtio):00483         gr003B         RMB       2                   end of vars ptr?
003D                  (/dd/defs/cocovtio):00484         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (/dd/defs/cocovtio):00485         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (/dd/defs/cocovtio):00486         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (/dd/defs/cocovtio):00487         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (/dd/defs/cocovtio):00488         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (/dd/defs/cocovtio):00489         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (/dd/defs/cocovtio):00490         gr0047         RMB       2                   'Working' X coordinate
0049                  (/dd/defs/cocovtio):00491         gr0049         RMB       2                   'Working' Y coordinate
004B                  (/dd/defs/cocovtio):00492         gr004B         RMB       2                   current X
004D                  (/dd/defs/cocovtio):00493         gr004D         RMB       2                   current Y
004F                  (/dd/defs/cocovtio):00494         gr004F         RMB       2                   X Size (in bytes)
0051                  (/dd/defs/cocovtio):00495         gr0051         RMB       2                   Y Size (in bytes)
0053                  (/dd/defs/cocovtio):00496         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (/dd/defs/cocovtio):00497         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (/dd/defs/cocovtio):00498         gr0057         RMB       1                   group
0058                  (/dd/defs/cocovtio):00499         gr0058         RMB       1                   buffer #
0059                  (/dd/defs/cocovtio):00500         gr0059         RMB       1                   save switch for overlay
005A                  (/dd/defs/cocovtio):00501         gr005A         RMB       1                   PRN
005B                  (/dd/defs/cocovtio):00502         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (/dd/defs/cocovtio):00503         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (/dd/defs/cocovtio):00504         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (/dd/defs/cocovtio):00505         Gr.STYMk       RMB       1                   STY marker
0061                  (/dd/defs/cocovtio):00506         gr0061         RMB       1                   foreground RGB data
0062                  (/dd/defs/cocovtio):00507         gr0062         RMB       1                   background RGB data
0063                  (/dd/defs/cocovtio):00508         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (/dd/defs/cocovtio):00509         gr0064         RMB       2                   PSet vector
0066                  (/dd/defs/cocovtio):00510         gr0066         RMB       2                   pset offset
0068                  (/dd/defs/cocovtio):00511         gr0068         RMB       2                   LSet vector
006A                  (/dd/defs/cocovtio):00512         gr006A         RMB       2                   max X co-ordinate
006C                  (/dd/defs/cocovtio):00513         gr006C         RMB       2                   max Y co-ordinate
006E                  (/dd/defs/cocovtio):00514         gr006E         RMB       2                   X pixel count
0070                  (/dd/defs/cocovtio):00515         gr0070         RMB       2                   Y pixel count
0072                  (/dd/defs/cocovtio):00516         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (/dd/defs/cocovtio):00517         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (/dd/defs/cocovtio):00518         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (/dd/defs/cocovtio):00519         gr0077         RMB       2                   Vector for right direction FFill
0079                  (/dd/defs/cocovtio):00520         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (/dd/defs/cocovtio):00521         gr007A         RMB       2                   Vector for left direction FFill
007C                  (/dd/defs/cocovtio):00522         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (/dd/defs/cocovtio):00523         gr007D         RMB       1                   buffer block #
007E                  (/dd/defs/cocovtio):00524         gr007E         RMB       2                   buffer offset #
0080                  (/dd/defs/cocovtio):00525         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (/dd/defs/cocovtio):00526         gr0082         RMB       3                   3 byte extended screen address
0085                  (/dd/defs/cocovtio):00527         gr0085         RMB       2                   temp
0087                  (/dd/defs/cocovtio):00528         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (/dd/defs/cocovtio):00529         gr0097         RMB       1                   temp
0098                  (/dd/defs/cocovtio):00530         gr0098         RMB       1                   temp
                      (/dd/defs/cocovtio):00531         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (/dd/defs/cocovtio):00532         gr0099         RMB       2                   temp
                      (/dd/defs/cocovtio):00533         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (/dd/defs/cocovtio):00534         gr009B         RMB       1                   counter temp
009C                  (/dd/defs/cocovtio):00535         gr009C         RMB       1
009D                  (/dd/defs/cocovtio):00536         gr009D         RMB       2                   offset to buffer in block
009F                  (/dd/defs/cocovtio):00537         gr009F         RMB       1
00A0                  (/dd/defs/cocovtio):00538         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (/dd/defs/cocovtio):00539         gr00A1         RMB       2                   vector routine for (changes lots)
                      (/dd/defs/cocovtio):00540         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (/dd/defs/cocovtio):00541         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (/dd/defs/cocovtio):00542         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (/dd/defs/cocovtio):00543         gr00A7         RMB       2
00A9                  (/dd/defs/cocovtio):00544         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (/dd/defs/cocovtio):00545         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (/dd/defs/cocovtio):00546         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (/dd/defs/cocovtio):00547         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (/dd/defs/cocovtio):00548         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (/dd/defs/cocovtio):00549         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (/dd/defs/cocovtio):00550         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (/dd/defs/cocovtio):00551         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (/dd/defs/cocovtio):00552         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (/dd/defs/cocovtio):00553         gr00B5         RMB       1                   regW for grfdrv
00B6                  (/dd/defs/cocovtio):00554         gr00B6         RMB       1
00B7                  (/dd/defs/cocovtio):00555         gr00B7         RMB       2
00B9                  (/dd/defs/cocovtio):00556         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (/dd/defs/cocovtio):00557         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (/dd/defs/cocovtio):00558         gr00BD         RMB       2                   previously used in grfdrv at $B6
                      (/dd/defs/cocovtio):00559         * EOU Beta 2 & up
00BF                  (/dd/defs/cocovtio):00560         grScrtch       RMB       2                   Scratch var for Grfdrv - use DP instead of stack for
                      (/dd/defs/cocovtio):00561         *                                            anything that does immediate calculations
00C1                  (/dd/defs/cocovtio):00562         gr00BF         RMB       256-.               Reserved for future use
                      (/dd/defs/cocovtio):00563         
                      (/dd/defs/cocovtio):00564         * GPLoad buffer - $1200 in system block    . Currently ends at $1247, and $1248-$127f is unused
     1200             (/dd/defs/cocovtio):00565         GPBuf          EQU       $1200               Usefull address (start of GP buffer copy memory)
0100                  (/dd/defs/cocovtio):00566         GPBufSz        RMB       gb0000              common move buffer for gpload/get/put (72 bytes default)
                      (/dd/defs/cocovtio):00567         
                      (/dd/defs/cocovtio):00568         *****************************************************************************
                      (/dd/defs/cocovtio):00569         * Window table entry structure
                      (/dd/defs/cocovtio):00570         * These tables sit in system block 0 and there is 1 for every window init'd
                      (/dd/defs/cocovtio):00571         * including any overlay windows.
     0020             (/dd/defs/cocovtio):00572         MaxWind        EQU       32                  maximum allowable window tables
     1290             (/dd/defs/cocovtio):00573         WinBase        EQU       $1290               base address to start of window tables
                      (/dd/defs/cocovtio):00574                        ORG       -$10
FFF0                  (/dd/defs/cocovtio):00575         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (/dd/defs/cocovtio):00576         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (/dd/defs/cocovtio):00577         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (/dd/defs/cocovtio):00578         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (/dd/defs/cocovtio):00579         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (/dd/defs/cocovtio):00580         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (/dd/defs/cocovtio):00581         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (/dd/defs/cocovtio):00582         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (/dd/defs/cocovtio):00583         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (/dd/defs/cocovtio):00584         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (/dd/defs/cocovtio):00585         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (/dd/defs/cocovtio):00586         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (/dd/defs/cocovtio):00587         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (/dd/defs/cocovtio):00588         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (/dd/defs/cocovtio):00589         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (/dd/defs/cocovtio):00590         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (/dd/defs/cocovtio):00591         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (/dd/defs/cocovtio):00592         Wt.Back        RMB       1                   background palette #                         $07
0008                  (/dd/defs/cocovtio):00593         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (/dd/defs/cocovtio):00594         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (/dd/defs/cocovtio):00595         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (/dd/defs/cocovtio):00596         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (/dd/defs/cocovtio):00597         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (/dd/defs/cocovtio):00598         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (/dd/defs/cocovtio):00599         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (/dd/defs/cocovtio):00600         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (/dd/defs/cocovtio):00601         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (/dd/defs/cocovtio):00602         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (/dd/defs/cocovtio):00603         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (/dd/defs/cocovtio):00604         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (/dd/defs/cocovtio):00605         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (/dd/defs/cocovtio):00606         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (/dd/defs/cocovtio):00607         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24/25,0-191/199)          $1D
001F                  (/dd/defs/cocovtio):00608         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (/dd/defs/cocovtio):00609         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (/dd/defs/cocovtio):00610         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (/dd/defs/cocovtio):00611         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (/dd/defs/cocovtio):00612         * NOTE: The following default settings are what the window was initialized
                      (/dd/defs/cocovtio):00613         *       with, and thus are the MAXIMUM start/size the window can handle
                      (/dd/defs/cocovtio):00614         *       until it is restarted (DWEnd & DWSet)
                      (/dd/defs/cocovtio):00615         *       They also appear to be used in WindInt to determine the coords &
                      (/dd/defs/cocovtio):00616         *       sizes for control+content regions
0026                  (/dd/defs/cocovtio):00617         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (/dd/defs/cocovtio):00618         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (/dd/defs/cocovtio):00619         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (/dd/defs/cocovtio):00620         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (/dd/defs/cocovtio):00621         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (/dd/defs/cocovtio):00622         Wt.Siz         EQU       .+$10
                      (/dd/defs/cocovtio):00623         
                      (/dd/defs/cocovtio):00624         *****************************************************************************
                      (/dd/defs/cocovtio):00625         * Screen table entrys
                      (/dd/defs/cocovtio):00626         * These tables sit in system block 0 base=$1A80
                      (/dd/defs/cocovtio):00627         
     0010             (/dd/defs/cocovtio):00628         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (/dd/defs/cocovtio):00629         STblBse        EQU       $1A80               base address of screen tables
                      (/dd/defs/cocovtio):00630                        ORG       0
0000                  (/dd/defs/cocovtio):00631         St.Sty         RMB       1                   Screen type                         $00
0001                  (/dd/defs/cocovtio):00632         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (/dd/defs/cocovtio):00633         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (/dd/defs/cocovtio):00634         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (/dd/defs/cocovtio):00635         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (/dd/defs/cocovtio):00636         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (/dd/defs/cocovtio):00637         St.Back        RMB       1                   Background palette register #       $07
0008                  (/dd/defs/cocovtio):00638         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (/dd/defs/cocovtio):00639         St.Res         RMB       7                   UNUSED???                           $09
                      (/dd/defs/cocovtio):00640         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (/dd/defs/cocovtio):00641         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (/dd/defs/cocovtio):00642         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (/dd/defs/cocovtio):00643         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
                      (/dd/defs/cocovtio):00644         * Other possibilities: Offset into screen to display (if we enable screens taller than
                      (/dd/defs/cocovtio):00645         *   a single screen), etc.
0010                  (/dd/defs/cocovtio):00646         St.Pals        RMB       16                  Palette register contents           $10
     0020             (/dd/defs/cocovtio):00647         St.Siz         EQU       .
                      (/dd/defs/cocovtio):00648         
                      (/dd/defs/cocovtio):00649         *****************************************************************************
                      (/dd/defs/cocovtio):00650         * Graphics buffer tables
                      (/dd/defs/cocovtio):00651         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (/dd/defs/cocovtio):00652         * data.
                      (/dd/defs/cocovtio):00653                        ORG       0
0000                  (/dd/defs/cocovtio):00654         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (/dd/defs/cocovtio):00655         Grf.Off        RMB       2                   back block header offset            $01
0003                  (/dd/defs/cocovtio):00656         Grf.Grp        RMB       1                   group #                             $03
0004                  (/dd/defs/cocovtio):00657         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (/dd/defs/cocovtio):00658         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (/dd/defs/cocovtio):00659         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (/dd/defs/cocovtio):00660         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (/dd/defs/cocovtio):00661         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (/dd/defs/cocovtio):00662         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (/dd/defs/cocovtio):00663         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (/dd/defs/cocovtio):00664         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (/dd/defs/cocovtio):00665         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (/dd/defs/cocovtio):00666         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (/dd/defs/cocovtio):00667         Grf.Siz        EQU       .                   $20
                      (/dd/defs/cocovtio):00668         
                      (/dd/defs/cocovtio):00669         *****************************************************************************
                      (/dd/defs/cocovtio):00670         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (/dd/defs/cocovtio):00671         * $1075-$0176
                      (/dd/defs/cocovtio):00672         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (/dd/defs/cocovtio):00673                        ORG       0
0000                  (/dd/defs/cocovtio):00674         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (/dd/defs/cocovtio):00675         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (/dd/defs/cocovtio):00676         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (/dd/defs/cocovtio):00677         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (/dd/defs/cocovtio):00678         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (/dd/defs/cocovtio):00679         Gt.BClr        RMB       1                   Background color                               $08
0009                  (/dd/defs/cocovtio):00680         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (/dd/defs/cocovtio):00681         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (/dd/defs/cocovtio):00682         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (/dd/defs/cocovtio):00683         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (/dd/defs/cocovtio):00684         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (/dd/defs/cocovtio):00685         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (/dd/defs/cocovtio):00686         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (/dd/defs/cocovtio):00687         GTabSz         EQU       .
                      (/dd/defs/cocovtio):00688         
                      (/dd/defs/cocovtio):00689         *****************************************************************************
                      (/dd/defs/cocovtio):00690         * This table is located in the graphics table memory and is offset from
                      (/dd/defs/cocovtio):00691         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (/dd/defs/cocovtio):00692         * WindInt.
                      (/dd/defs/cocovtio):00693         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (/dd/defs/cocovtio):00694         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (/dd/defs/cocovtio):00695         *  COMBINATION EVERY TIME
                      (/dd/defs/cocovtio):00696                        ORG       $0240
0240                  (/dd/defs/cocovtio):00697                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (/dd/defs/cocovtio):00698                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (/dd/defs/cocovtio):00699                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (/dd/defs/cocovtio):00700                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (/dd/defs/cocovtio):00701         
                      (/dd/defs/cocovtio):00702         *****************************************************************************
                      (/dd/defs/cocovtio):00703         * WindInt menu handling table entry definition
                      (/dd/defs/cocovtio):00704                        ORG       0
0000                  (/dd/defs/cocovtio):00705         MnuXNum        RMB       1                   menu #
0001                  (/dd/defs/cocovtio):00706         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (/dd/defs/cocovtio):00707         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (/dd/defs/cocovtio):00708                        RMB       1                   unused?
     0004             (/dd/defs/cocovtio):00709         MnuHSiz        EQU       .
                      (/dd/defs/cocovtio):00710         
                      (/dd/defs/cocovtio):00711         *****************************************************************************
                      (/dd/defs/cocovtio):00712         * Character binary switches
     0080             (/dd/defs/cocovtio):00713         Blink          EQU       %10000000           Blink characters (hardware text only)
     0080             (/dd/defs/cocovtio):00714         TChr           EQU       %10000000           transparent characters (both currently)
     0040             (/dd/defs/cocovtio):00715         Under          EQU       %01000000           underline characters (both)
     0020             (/dd/defs/cocovtio):00716         Bold           EQU       %00100000           bold characters (gfx only, maybe txt with color changes?)
     0010             (/dd/defs/cocovtio):00717         Prop           EQU       %00010000           proportional spacing of characters (gfx only)
     0008             (/dd/defs/cocovtio):00718         Scale          EQU       %00001000           automatic window scaling (gfx only)
     0004             (/dd/defs/cocovtio):00719         Invers         EQU       %00000100           inverse characters (both)
     0002             (/dd/defs/cocovtio):00720         NoCurs         EQU       %00000010           no cursor display (both)
     0001             (/dd/defs/cocovtio):00721         Protect        EQU       %00000001           device window protection (both)
                      (/dd/defs/cocovtio):00722         
                      (/dd/defs/cocovtio):00723         *****************************************************************************
                      (/dd/defs/cocovtio):00724         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (/dd/defs/cocovtio):00725         Current        EQU       $ff                 Current screen
                      (/dd/defs/cocovtio):00726         *         equ   1          640x200x2
                      (/dd/defs/cocovtio):00727         *         equ   2          320x200x4
                      (/dd/defs/cocovtio):00728         *         equ   3          640x200x4
                      (/dd/defs/cocovtio):00729         *         equ   4          320x200x16
                      (/dd/defs/cocovtio):00730         *         equ   $85        80 column text
                      (/dd/defs/cocovtio):00731         *         equ   $86        40 column text
                      (/dd/defs/cocovtio):00732         
                      (/dd/defs/cocovtio):00733         *************************************
                      (/dd/defs/cocovtio):00734         * Window default palette color codes
                      (/dd/defs/cocovtio):00735         *
                      (/dd/defs/cocovtio):00736                        ORG       0
0000                  (/dd/defs/cocovtio):00737         White.         RMB       1
0001                  (/dd/defs/cocovtio):00738         Blue.          RMB       1
0002                  (/dd/defs/cocovtio):00739         Black.         RMB       1
0003                  (/dd/defs/cocovtio):00740         Green.         RMB       1
0004                  (/dd/defs/cocovtio):00741         Red.           RMB       1
0005                  (/dd/defs/cocovtio):00742         Yellow.        RMB       1
0006                  (/dd/defs/cocovtio):00743         Magenta.       RMB       1
0007                  (/dd/defs/cocovtio):00744         Cyan.          RMB       1
                      (/dd/defs/cocovtio):00745         
                      ( /dd/defs/deffile):00010                  use   /dd/defs/cocosdc.d
                      (/dd/defs/cocosdc.):00001         ********************************************************************
                      (/dd/defs/cocosdc.):00002         * cocosdc.d - CoCo SDC definitions
                      (/dd/defs/cocosdc.):00003         *
                      (/dd/defs/cocosdc.):00004         * $Id$
                      (/dd/defs/cocosdc.):00005         *
                      (/dd/defs/cocosdc.):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocosdc.):00007         * Comment
                      (/dd/defs/cocosdc.):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocosdc.):00009         *          2014/05/02  Boisy G. Pitre
                      (/dd/defs/cocosdc.):00010         * Created
                      (/dd/defs/cocosdc.):00011         
                      (/dd/defs/cocosdc.):00012         
     FF4A             (/dd/defs/cocosdc.):00013         SDAddr         SET       $FF4A
                      (/dd/defs/cocosdc.):00014         
                      ( /dd/defs/deffile):00011                  use   /dd/defs/vdgdefs
                      ( /dd/defs/vdgdefs):00001                        IFNE      VDGDEFS-1
                      ( /dd/defs/vdgdefs):00002         
     0001             ( /dd/defs/vdgdefs):00003         VDGDEFS        SET       1
                      ( /dd/defs/vdgdefs):00004         
                      ( /dd/defs/vdgdefs):00005         ********************************************************************
                      ( /dd/defs/vdgdefs):00006         * VDGDefs - VDG Interface Definititions
                      ( /dd/defs/vdgdefs):00007         *
                      ( /dd/defs/vdgdefs):00008         * $Id$
                      ( /dd/defs/vdgdefs):00009         *
                      ( /dd/defs/vdgdefs):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      ( /dd/defs/vdgdefs):00011         * Comment
                      ( /dd/defs/vdgdefs):00012         * ------------------------------------------------------------------
                      ( /dd/defs/vdgdefs):00013         *          1991/05/07  Alan DeKok
                      ( /dd/defs/vdgdefs):00014         * Wrote original from VDGInt source.
                      ( /dd/defs/vdgdefs):00015         
                      ( /dd/defs/vdgdefs):00016                        NAM       VDGDefs
                      ( /dd/defs/vdgdefs):00017                        TTL       VDG Interface Definitions
                      ( /dd/defs/vdgdefs):00018         
                      ( /dd/defs/vdgdefs):00019         * Notes:
                      ( /dd/defs/vdgdefs):00020         *
                      ( /dd/defs/vdgdefs):00021         * All offsets from 'U' (address of device memory area)
                      ( /dd/defs/vdgdefs):00022         * (see p. 6-9, technical reference: U=start of driver data memory
                      ( /dd/defs/vdgdefs):00023         * NOTE: There is LOTS of stuff which is only used once, and some which
                      ( /dd/defs/vdgdefs):00024         * is not needed.  Here's a list of the un-needed, and un-used (other than
                      ( /dd/defs/vdgdefs):00025         * once)
                      ( /dd/defs/vdgdefs):00026         *
                      ( /dd/defs/vdgdefs):00027         * It would probably be benificial to patch VDGint to fix these problems,
                      ( /dd/defs/vdgdefs):00028         * unless anyone else has ideas as to why VDGint is doing things this way.
                      ( /dd/defs/vdgdefs):00029         *
                      ( /dd/defs/vdgdefs):00030         * Un-needed
                      ( /dd/defs/vdgdefs):00031         * VD.EPlt1  - (2) set to VD.NChar, and then read only
                      ( /dd/defs/vdgdefs):00032         * VD.EPlt2  - (2) set to same as VD.EPlt1, and then unused
                      ( /dd/defs/vdgdefs):00033         * VD.Chr1   - (1) set to same as VD.CChar, and then unused
                      ( /dd/defs/vdgdefs):00034         * VD.PlFlg  - (1) initialized to $08, and unused
                      ( /dd/defs/vdgdefs):00035         *
                      ( /dd/defs/vdgdefs):00036         * Un-used
                      ( /dd/defs/vdgdefs):00037         *
                      ( /dd/defs/vdgdefs):00038         * $1D       - (1) end of SCF memory requirements
                      ( /dd/defs/vdgdefs):00039         * VD.Strt1  - (2) CLRed, and then read (LDD) - left as $0000
                      ( /dd/defs/vdgdefs):00040         * $24-$2B   - (8)
                      ( /dd/defs/vdgdefs):00041         * $33-$34   - (2)
                      ( /dd/defs/vdgdefs):00042         * $7E-$FF   - (130)
                      ( /dd/defs/vdgdefs):00043         *
                      ( /dd/defs/vdgdefs):00044         * Total of 22 (150 in whole page) bytes unneeded or unused.
                      ( /dd/defs/vdgdefs):00045         
                      ( /dd/defs/vdgdefs):00046                        ORG       $1E
001E                  ( /dd/defs/vdgdefs):00047         VD.Start       RMB       1                   start of VD.XXXX data: number of VDG screens in use
001F                  ( /dd/defs/vdgdefs):00048         VD.Strt1       RMB       2                   (2) and another start
0021                  ( /dd/defs/vdgdefs):00049         VD.Caps        RMB       2                   caps lock info: $00=lower $FF=upper
0023                  ( /dd/defs/vdgdefs):00050         VD.DFlag       RMB       1                   0=current screen is valid, $01-$FF = update video
                      ( /dd/defs/vdgdefs):00051         * $24-$2B unused
0024                  ( /dd/defs/vdgdefs):00052                        RMB       8
002C                  ( /dd/defs/vdgdefs):00053         VD.NGChr       RMB       1                   number of additional characters to get
002D                  ( /dd/defs/vdgdefs):00054         VD.RTAdd       RMB       2                   (2) return address after getting characters
002F                  ( /dd/defs/vdgdefs):00055         VD.EPlt1       RMB       2                   (2) pointer to where to put next character
0031                  ( /dd/defs/vdgdefs):00056         VD.EPlt2       RMB       2                   (2) as above.
                      ( /dd/defs/vdgdefs):00057         * $33-$34 unused
0033                  ( /dd/defs/vdgdefs):00058                        RMB       2
0035                  ( /dd/defs/vdgdefs):00059         VD.CFlag       RMB       1                   true lowercase flag $10=true, $00=false
0036                  ( /dd/defs/vdgdefs):00060         VD.CFlg1       RMB       1                   VDG display code values
0037                  ( /dd/defs/vdgdefs):00061         VD.DGBuf       RMB       1                   number of currently displayed buffer
0038                  ( /dd/defs/vdgdefs):00062         VD.ScrnA       RMB       2                   (2) screen start address in system memory
003A                  ( /dd/defs/vdgdefs):00063         VD.ScrnE       RMB       2                   (2) address of end of screen
003C                  ( /dd/defs/vdgdefs):00064         VD.CrsrA       RMB       1                   (2) cursor address
003D                  ( /dd/defs/vdgdefs):00065         VD.CrsAL       RMB       1                   cursor address low
003E                  ( /dd/defs/vdgdefs):00066         VD.CChar       RMB       1                   value of character under cursor
003F                  ( /dd/defs/vdgdefs):00067         VD.Mode        RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0040                  ( /dd/defs/vdgdefs):00068         VD.Chr1        RMB       1                   same as under cursor character
0041                  ( /dd/defs/vdgdefs):00069         VD.CColr       RMB       1                   cursor color
0042                  ( /dd/defs/vdgdefs):00070         VD.Col         RMB       1                   number of columns for this screen
0043                  ( /dd/defs/vdgdefs):00071         VD.Row         RMB       1                   number of rows
0044                  ( /dd/defs/vdgdefs):00072         VD.TFlg1       RMB       1                   see WRITE ($0E)
0045                  ( /dd/defs/vdgdefs):00073         VD.Alpha       RMB       1                   0 when in alpha mode
0046                  ( /dd/defs/vdgdefs):00074         VD.Rdy         RMB       1                   device ready (see SS.DStat 0=not ready)
0047                  ( /dd/defs/vdgdefs):00075         VD.SBAdd       RMB       2                   (2) address of block screen is in
0049                  ( /dd/defs/vdgdefs):00076         VD.Blk         RMB       1                   Block number of screen
004A                  ( /dd/defs/vdgdefs):00077         VD.GBuff       RMB       1                   allocation for graphics buffers (block#)
004B                  ( /dd/defs/vdgdefs):00078         VD.AGBuf       RMB       2                   (2) additional graphics buffer
004D                  ( /dd/defs/vdgdefs):00079         VD.HiRes       RMB       1                   hi-res screen table (block value)
004E                  ( /dd/defs/vdgdefs):00080         VD.NBlk        RMB       1                   number of blocks in this screen
004F                  ( /dd/defs/vdgdefs):00081         VD.SType       RMB       1                   screen type -4
0050                  ( /dd/defs/vdgdefs):00082         VD.HR2         RMB       3                   (3) for screen number 2
0053                  ( /dd/defs/vdgdefs):00083         VD.HR3         RMB       3                   (3) for screen 3 (same 3 bytes as above)
0056                  ( /dd/defs/vdgdefs):00084         VD.FFMem       RMB       2                   (2) bottom of stack for flood fill
0058                  ( /dd/defs/vdgdefs):00085         VD.FFSPt       RMB       2                   (2) flood fill stack pointer
005A                  ( /dd/defs/vdgdefs):00086         VD.FFSTp       RMB       2                   (2) flood fill stack top pointer
005C                  ( /dd/defs/vdgdefs):00087         VD.FF6         RMB       1                   flood fill flag
005D                  ( /dd/defs/vdgdefs):00088         VD.MTabl       RMB       2                   (2) address of mask table for pixels in byte
005F                  ( /dd/defs/vdgdefs):00089         VD.PixBt       RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0060                  ( /dd/defs/vdgdefs):00090         VD.GCrsX       RMB       1                   graphics cursor X value
0061                  ( /dd/defs/vdgdefs):00091         VD.GCrsY       RMB       1                   graphics cursor Y
0062                  ( /dd/defs/vdgdefs):00092         VD.Msk1        RMB       1                   mask byte 1
0063                  ( /dd/defs/vdgdefs):00093         VD.Msk2        RMB       1                   mask byte 2 (00,55,AA,FF)
0064                  ( /dd/defs/vdgdefs):00094         VD.MCol        RMB       1                   color? (C003,8001)
0065                  ( /dd/defs/vdgdefs):00095         VD.MCol2       RMB       1                   color
0066                  ( /dd/defs/vdgdefs):00096         VD.PMask       RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0067                  ( /dd/defs/vdgdefs):00097         VD.FF1         RMB       1                   data for flood fill
0068                  ( /dd/defs/vdgdefs):00098         VD.FF2         RMB       1                   data for flood fill
0069                  ( /dd/defs/vdgdefs):00099         VD.FFMsk       RMB       1                   flood fill mask
006A                  ( /dd/defs/vdgdefs):00100         VD.FFFlg       RMB       1                   flood fill flag
006B                  ( /dd/defs/vdgdefs):00101         VD.Palet       RMB       16                  (16) current palette values
007B                  ( /dd/defs/vdgdefs):00102         VD.PlFlg       RMB       1                   initialized to $08 by L00DB, and then unused!
007C                  ( /dd/defs/vdgdefs):00103         VD.NChar       RMB       1                   character to process
007D                  ( /dd/defs/vdgdefs):00104         VD.NChr2       RMB       1                   and the next one
                      ( /dd/defs/vdgdefs):00105         
                      ( /dd/defs/vdgdefs):00106         * and RMB until we get 256 bytes reserved
                      ( /dd/defs/vdgdefs):00107         
                      ( /dd/defs/vdgdefs):00108                        ENDC      
                      ( /dd/defs/vdgdefs):00109         
                      (/dd/sourcecode/as):00332                endc
                      (/dd/sourcecode/as):00333         
     4000             (/dd/sourcecode/as):00334         GrfStrt  equ   $4000          Position of GRFDRV in it's own task
                      (/dd/sourcecode/as):00335         
     00C1             (/dd/sourcecode/as):00336         tylg     set   Systm+Objct
     0081             (/dd/sourcecode/as):00337         atrv     set   ReEnt+rev
     0001             (/dd/sourcecode/as):00338         rev      set   $01
     000E             (/dd/sourcecode/as):00339         edition  equ   14
                      (/dd/sourcecode/as):00340         
                      (/dd/sourcecode/as):00341         * NOTE: Following set has meaning only if 25 text line mode is selected
     0000             (/dd/sourcecode/as):00342         TV       set   $00            Set to 1 for 25 line TV res. (200 vs. 225)
                      (/dd/sourcecode/as):00343         
0000 87CD22AD000EC181 (/dd/sourcecode/as):00344                  mod   eom,name,tylg,atrv,entry,size
     7400150000
     0000             (/dd/sourcecode/as):00345         size     equ   .
                      (/dd/sourcecode/as):00346         
000D 07               (/dd/sourcecode/as):00347                  fcb   $07 
                      (/dd/sourcecode/as):00348         
000E 4772664472F6     (/dd/sourcecode/as):00349         name     fcs   /GrfDrv/
0014 0E               (/dd/sourcecode/as):00350                  fcb   edition
                      (/dd/sourcecode/as):00351         
                      (/dd/sourcecode/as):00352         ******************************
                      (/dd/sourcecode/as):00353         * Main entry point
                      (/dd/sourcecode/as):00354         *   Entry: B=Internal function code (from CoGRF or CoWin)
                      (/dd/sourcecode/as):00355         *          A=Character (for Write routine)
                      (/dd/sourcecode/as):00356         *          U=Pointer to GRFDRV memory area ($1100 in system)
                      (/dd/sourcecode/as):00357         *          Y=Current window Window Table Pointer
                      (/dd/sourcecode/as):00358         *    Stack area is from $1b80 to $1fff in block 0
                      (/dd/sourcecode/as):00359         *   When function call vector is executed via JMP ,X
                      (/dd/sourcecode/as):00360         *     DP has been set to $11 to allow direct page access to GRFDRV variables
                      (/dd/sourcecode/as):00361         
                      (/dd/sourcecode/as):00362         
     0015             (/dd/sourcecode/as):00363         entry    equ   *
                      (/dd/sourcecode/as):00364                IFNE  H6309
                      (/dd/sourcecode/as):00365                  lde   #GrfMem/256         Direct page for GrfDrv
                      (/dd/sourcecode/as):00366                  tfr   e,dp
                      (/dd/sourcecode/as):00367                ELSE
0015 3402             (/dd/sourcecode/as):00368                  pshs  a
0017 8611             (/dd/sourcecode/as):00369                  lda   #GrfMem/256
0019 1F8B             (/dd/sourcecode/as):00370                  tfr   a,dp
001B 3502             (/dd/sourcecode/as):00371                  puls  a
                      (/dd/sourcecode/as):00372                ENDC
001D 5D               (/dd/sourcecode/as):00373                  tstb               initialization?
001E 2602             (/dd/sourcecode/as):00374                  bne   grfdrv.1     no, do other stuff
0020 205D             (/dd/sourcecode/as):00375                  bra   L0080        do relative jump to the init routine
                      (/dd/sourcecode/as):00376         
0022 8E4027           (/dd/sourcecode/as):00377         grfdrv.1 ldx   #GrfStrt+L0028   Point to function vector table
0025 6E95             (/dd/sourcecode/as):00378                  jmp   [b,x]        Execute function
                      (/dd/sourcecode/as):00379         
                      (/dd/sourcecode/as):00380         * GrfDrv function code vector table
0027 407F             (/dd/sourcecode/as):00381         L0028    fdb   L0080+GrfStrt  Initialization ($00)
0029 408C             (/dd/sourcecode/as):00382                  fdb   L0104+GrfStrt  Terminate      ($02)
002B 40FF             (/dd/sourcecode/as):00383                  fdb   L019D+GrfStrt  DWSet          ($04)
002D 501E             (/dd/sourcecode/as):00384                  fdb   fast.chr+GrfStrt  buffered writes... ($06)
002F 43A5             (/dd/sourcecode/as):00385                  fdb   L03CB+GrfStrt  DWEnd          ($08)
0031 4448             (/dd/sourcecode/as):00386                  fdb   L046A+GrfStrt  OWSet          ($0A)
0033 4504             (/dd/sourcecode/as):00387                  fdb   L053A+GrfStrt  OWEnd          ($0C)
0035 4538             (/dd/sourcecode/as):00388                  fdb   L056E+GrfStrt  CWArea         ($0E)
0037 4740             (/dd/sourcecode/as):00389                  fdb   L07D7+GrfStrt  Select         ($10)
0039 4629             (/dd/sourcecode/as):00390                  fdb   L0611+GrfStrt  PSet           ($12)
003B 0000             (/dd/sourcecode/as):00391                  fdb   $0000          Border         ($14) NOW IN CoWin
003D 0000             (/dd/sourcecode/as):00392                  fdb   $0000          Palette        ($16) NOW IN CoWin
003F 464F             (/dd/sourcecode/as):00393                  fdb   L063C+GrfStrt  Font           ($18)
0041 469C             (/dd/sourcecode/as):00394                  fdb   L068B+GrfStrt  GCSet          ($1A)
0043 0000             (/dd/sourcecode/as):00395                  fdb   $0000          DefColor       ($1C) NOW IN CoWin
0045 5829             (/dd/sourcecode/as):00396                  fdb   L06A4+GrfStrt  LSet           ($1E)
0047 46B5             (/dd/sourcecode/as):00397                  fdb   L0707+GrfStrt  FColor         ($20)
0049 46D3             (/dd/sourcecode/as):00398                  fdb   L0726+GrfStrt  BColor         ($22)
004B 0000             (/dd/sourcecode/as):00399                  fdb   $0000          TChrSW         ($24) NOW IN CoWin
004D 0000             (/dd/sourcecode/as):00400                  fdb   $0000          PropSW         ($26) NOW IN CoWin
004F 0000             (/dd/sourcecode/as):00401                  fdb   $0000          Scale          ($28) NOW IN CoWin
0051 0000             (/dd/sourcecode/as):00402                  fdb   $0000          Bold           ($2A) NOW IN CoWin
0053 4851             (/dd/sourcecode/as):00403                  fdb   L08DC+GrfStrt  DefGB          ($2C)
0055 49A9             (/dd/sourcecode/as):00404                  fdb   L0A3A+GrfStrt  KillBuf        ($2E)
0057 4AA7             (/dd/sourcecode/as):00405                  fdb   L0B3F+GrfStrt  GPLoad         ($30)
0059 4AE0             (/dd/sourcecode/as):00406                  fdb   L0B79+GrfStrt  Move buffer    ($32)
005B 4B62             (/dd/sourcecode/as):00407                  fdb   L0BAE+GrfStrt  GetBlk         ($34)
005D 4CAA             (/dd/sourcecode/as):00408                  fdb   L0CBB+GrfStrt  PutBlk         ($36)
005F 4FB0             (/dd/sourcecode/as):00409                  fdb   L0F31+GrfStrt  Map GP buffer  ($38)
0061 50F4             (/dd/sourcecode/as):00410                  fdb   L0F4B+GrfStrt  Alpha put      ($3A)
0063 5378             (/dd/sourcecode/as):00411                  fdb   L1129+GrfStrt  Control codes  ($3C)
0065 56E7             (/dd/sourcecode/as):00412                  fdb   L116E+GrfStrt  Cursor on/off  ($3E)
0067 5662             (/dd/sourcecode/as):00413                  fdb   L1478+GrfStrt  $1f codes      ($40)
0069 533E             (/dd/sourcecode/as):00414                  fdb   L1186+GrfStrt  Goto X/Y       ($42)
006B 5710             (/dd/sourcecode/as):00415                  fdb   L151B+GrfStrt  PutGC          ($44)
006D 56F6             (/dd/sourcecode/as):00416                  fdb   L1500+GrfStrt  Update Cursors ($46)
006F 5884             (/dd/sourcecode/as):00417                  fdb   L1635+GrfStrt  Point          ($48)
0071 58A6             (/dd/sourcecode/as):00418                  fdb   L1654+GrfStrt  Line           ($4A)
0073 5AAC             (/dd/sourcecode/as):00419                  fdb   L1790+GrfStrt  Box            ($4C)
0075 5AF6             (/dd/sourcecode/as):00420                  fdb   L17FB+GrfStrt  Bar            ($4E)
0077 5B40             (/dd/sourcecode/as):00421                  fdb   L1856+GrfStrt  Circle         ($50)
0079 5BB4             (/dd/sourcecode/as):00422                  fdb   L18BD+GrfStrt  Ellipse        ($52)
007B 5B4A             (/dd/sourcecode/as):00423                  fdb   L1860+GrfStrt  Arc            ($54)
007D 5F83             (/dd/sourcecode/as):00424                  fdb   L1C4F+GrfStrt  FFill          ($56)
                      (/dd/sourcecode/as):00425         
                      (/dd/sourcecode/as):00426         * Initialization entry point
                      (/dd/sourcecode/as):00427         * Entry: U=$1100
                      (/dd/sourcecode/as):00428         *       DP=$11
                      (/dd/sourcecode/as):00429         *        B=$00
007F F61038           (/dd/sourcecode/as):00430         L0080    ldb   >WGlobal+g0038       have we been initialized?
0082 2B04             (/dd/sourcecode/as):00431                  bmi   L0102                yes, exit
0084 43               (/dd/sourcecode/as):00432                  coma 
0085 B71038           (/dd/sourcecode/as):00433                  sta   >WGlobal+g0038       Put it back
0088 4F               (/dd/sourcecode/as):00434         L0102    clra
0089 1F8B             (/dd/sourcecode/as):00435                  tfr   a,dp           Set DP to 0 for Wind/CoGrf, which need it there
008B 39               (/dd/sourcecode/as):00436                  rts                  Return
                      (/dd/sourcecode/as):00437         
                      (/dd/sourcecode/as):00438         * Termination routine
008C 0F38             (/dd/sourcecode/as):00439         L0104    clr   <$0038         Clear group #
008E 0F7D             (/dd/sourcecode/as):00440                  clr   <$007D         Clear buffer block #
0090 D632             (/dd/sourcecode/as):00441                  ldb   <$0032         Get last block used
0092 270A             (/dd/sourcecode/as):00442                  beq   L0115          If 0, return to system
0094 9E33             (/dd/sourcecode/as):00443                  ldx   <$0033         Get offset into last block we used
0096 17092B           (/dd/sourcecode/as):00444                  lbsr  L0A55          Deallocate that buffer
0099 24F1             (/dd/sourcecode/as):00445                  bcc   L0104          Keep doing until all are deallocated
009B 7E50F7           (/dd/sourcecode/as):00446                  jmp   >GrfStrt+SysRet Return to system with error if can't
                      (/dd/sourcecode/as):00447         
009E 7E50F6           (/dd/sourcecode/as):00448         L0115    jmp   >GrfStrt+L0F78 Exit system
                      (/dd/sourcecode/as):00449         
                      (/dd/sourcecode/as):00450         * Setup GrfDrv memory with data from current window table
                      (/dd/sourcecode/as):00451         * Entry: Y=Window table ptr
                      (/dd/sourcecode/as):00452         * Puts in following:
                      (/dd/sourcecode/as):00453         *   PSET/LSET vectors & offsets
                      (/dd/sourcecode/as):00454         *   Foreground/background palettes
                      (/dd/sourcecode/as):00455         *   Maximum X&Y coords for window
                      (/dd/sourcecode/as):00456         *   Screen type
                      (/dd/sourcecode/as):00457         *   Start block # of screen
                      (/dd/sourcecode/as):00458         *   # bytes / row of text
                      (/dd/sourcecode/as):00459         * NOTE: USING A 2 BYTE FREE MEMORY LOCATION SOMEWHERE IN BLOCK 0, KEEP A
                      (/dd/sourcecode/as):00460         *  'LAST WINDOW' ACCESSED COPY OF THE WINDOW TABLE PTR. IF IT HAS NOT CHANGED
                      (/dd/sourcecode/as):00461         *  WHEN IT GETS HERE (OR WHATEVER CALLS HERE) FROM THE 'LAST WINDOW' ACCESSED,
                      (/dd/sourcecode/as):00462         *  SKIP THIS ENTIRE ROUTINE
00A1 0FA9             (/dd/sourcecode/as):00463         L0129    clr   <$A9         Special entry pt for DWSet,Select,UpdtWin,PutGC
00A3 AE30             (/dd/sourcecode/as):00464         L012B    ldx   Wt.STbl,y    Get screen table ptr
00A5 3406             (/dd/sourcecode/as):00465                  pshs  d            Preserve register
00A7 ECA816           (/dd/sourcecode/as):00466                  ldd   Wt.PVec,y    Get PSet vector for this window
                      (/dd/sourcecode/as):00467                IFNE  H6309
                      (/dd/sourcecode/as):00468                  ldw   Wt.POff,y    Get PSet offset for this window
                      (/dd/sourcecode/as):00469                  stq   <$64         Save Pset vector & PSet offset
                      (/dd/sourcecode/as):00470                ELSE
00AA DD64             (/dd/sourcecode/as):00471                  std   <$64
00AC EC2F             (/dd/sourcecode/as):00472                  ldd   Wt.POff,y
00AE DD66             (/dd/sourcecode/as):00473                  std   <$66
                      (/dd/sourcecode/as):00474                ENDC
00B0 ECA814           (/dd/sourcecode/as):00475                  ldd   Wt.LVec,y    Get LSet vector
00B3 DD68             (/dd/sourcecode/as):00476                  std   <$68         Save it for this window
00B5 EC26             (/dd/sourcecode/as):00477                  ldd   Wt.Fore,y    Get Foreground/Background prn
00B7 DD61             (/dd/sourcecode/as):00478                  std   <$61         Save it for this window
                      (/dd/sourcecode/as):00479                IFNE  H6309
                      (/dd/sourcecode/as):00480                  ldq   Wt.MaxX,y    Get max. X & Y coords from table
                      (/dd/sourcecode/as):00481                  stq   <$6A         Save in Grfdrv mem
                      (/dd/sourcecode/as):00482                ELSE
00B9 ECA81B           (/dd/sourcecode/as):00483                  ldd   Wt.MaxX,y
00BC DD6A             (/dd/sourcecode/as):00484                  std   <$6A
00BE ECA81D           (/dd/sourcecode/as):00485                  ldd   Wt.MaxX+2,y
00C1 DD6C             (/dd/sourcecode/as):00486                  std   <$6C
00C3 DDB5             (/dd/sourcecode/as):00487                  std   <$B5
                      (/dd/sourcecode/as):00488                ENDC
00C5 A604             (/dd/sourcecode/as):00489                  lda   St.BRow,x    Get # bytes per row
00C7 9763             (/dd/sourcecode/as):00490                  sta   <$63         Save it for this window
00C9 EC84             (/dd/sourcecode/as):00491                  ldd   St.Sty,x     Get screen type & first block #
00CB 9760             (/dd/sourcecode/as):00492                  sta   <$60         Save screen type for this window
                      (/dd/sourcecode/as):00493         * Setup Task 1 MMU for Window: B=Start block # of window
                      (/dd/sourcecode/as):00494         *   As above, may check start block # to see if our 4 blocks are already
                      (/dd/sourcecode/as):00495         *   mapped in (just check block # in B with block # in 1st DAT entry).
                      (/dd/sourcecode/as):00496         *   Since 4 blocks are always mapped in, we know the rest is OK
                      (/dd/sourcecode/as):00497         * This routine always maps 4 blocks in even if it is only a text window
                      (/dd/sourcecode/as):00498         * which only has to map 1 block. Slight opt (2 cycles) done 03/01/93
                      (/dd/sourcecode/as):00499         * Attempted opt: cmpb/beq noneed 03/12/93
00CD D190             (/dd/sourcecode/as):00500         MMUOnly  cmpb  <$90         Is our screen block set already here?
00CF 271C             (/dd/sourcecode/as):00501                  beq   noneed       Yes, don't bother doing it again
00D1 4F               (/dd/sourcecode/as):00502                  clra               Get block type for DAT image
00D2 DD8F             (/dd/sourcecode/as):00503                  std   <$8f         Save screen start in my image
00D4 F7FFAC           (/dd/sourcecode/as):00504                  stb   >$FFAC       Save 1st screen block to MMU
00D7 0D60             (/dd/sourcecode/as):00505                  tst   <$60         Hardware text (only 1 block needed?)
00D9 2B12             (/dd/sourcecode/as):00506                  bmi   noneed       yes, no need to map in the rest of the blocks
00DB 5C               (/dd/sourcecode/as):00507                  incb               Get 2nd block
00DC DD91             (/dd/sourcecode/as):00508                  std   <$91         Save it in my image
00DE F7FFAD           (/dd/sourcecode/as):00509                  stb   >$FFAD       Save it to MMU
00E1 5C               (/dd/sourcecode/as):00510                  incb               Get 3rd block
00E2 DD93             (/dd/sourcecode/as):00511                  std   <$93         Save it to my image
00E4 F7FFAE           (/dd/sourcecode/as):00512                  stb   >$FFAE       Save it to MMU
00E7 5C               (/dd/sourcecode/as):00513                  incb               Get 4th block
00E8 DD95             (/dd/sourcecode/as):00514                  std   <$95         Save it to my image
00EA F7FFAF           (/dd/sourcecode/as):00515                  stb   >$FFAF       Save it to MMU
00ED 3586             (/dd/sourcecode/as):00516         noneed   puls  d,pc         Restore D & return
                      (/dd/sourcecode/as):00517         
                      (/dd/sourcecode/as):00518         * Setup the MMU only: called twice from the screen setup routines
                      (/dd/sourcecode/as):00519         * This could be just before MMUOnly, with a 'fcb $8C' just before the PSHS
                      (/dd/sourcecode/as):00520         * to save one more byte, but L0129 is called a lot more often than this is
00EF 3406             (/dd/sourcecode/as):00521         L0173    pshs  d            save our registers
00F1 20DA             (/dd/sourcecode/as):00522                  bra   MMUOnly      go set up the MMU registers, if necessary
                      (/dd/sourcecode/as):00523         
                      (/dd/sourcecode/as):00524         * Entry point for Alpha Put
00F3 109CA9           (/dd/sourcecode/as):00525         L0175    cmpy  <$A9         Same as previous window GRFDRV alpha putted to?
00F6 10271607         (/dd/sourcecode/as):00526                  lbeq  L150C        Yes, skip map/setup, update cursors
                      (/dd/sourcecode/as):00527         * Normal entry point
00FA 8DA5             (/dd/sourcecode/as):00528         L0177    bsr   L0129        Mark Tbl Ptr bad, map in window,set up GRFDRV vars for it
00FC 7E5701           (/dd/sourcecode/as):00529         L0179    jmp   >GrfStrt+L150C Update text & gfx cursors if needed
                      (/dd/sourcecode/as):00530         
                      (/dd/sourcecode/as):00531         * DWSet routine
                      (/dd/sourcecode/as):00532         * ATD: Next 9 lines added to support multiple-height screens.
                      (/dd/sourcecode/as):00533         * We MUST have a screen table in order to do St.ScSiz checks (24, 25, 28).
                      (/dd/sourcecode/as):00534         * GrfDrv is a kernel task (not task switched), so we point X to the possible
                      (/dd/sourcecode/as):00535         * screen table
00FF AE30             (/dd/sourcecode/as):00536         L019D    ldx   Wt.STbl,y    get screen table
0101 2A07             (/dd/sourcecode/as):00537                  bpl   L01A0        $FFFF is a flag saying it's unallocated
0103 170113           (/dd/sourcecode/as):00538                  lbsr  FScrTbl      find a screen table
0106 2528             (/dd/sourcecode/as):00539                  bcs   L01C5        exit on error
0108 6F08             (/dd/sourcecode/as):00540                  clr   St.ScSiz,x   clear screen size flag: not defined yet
010A 8D27             (/dd/sourcecode/as):00541         L01A0    bsr   L01C8        Check coordinates and size
010C 2522             (/dd/sourcecode/as):00542                  bcs   L01C5        Error, exit
010E 9660             (/dd/sourcecode/as):00543                  lda   <$60         Get screen type requested
0110 81FF             (/dd/sourcecode/as):00544                  cmpa  #$FF         Current screen?
0112 2609             (/dd/sourcecode/as):00545                  bne   L01B0        No, go create a new screen for the window
0114 8D5F             (/dd/sourcecode/as):00546                  bsr   L01FB        Make sure window can be fit on current screen
0116 2518             (/dd/sourcecode/as):00547                  bcs   L01C5        Nope, return with error
0118 1715E6           (/dd/sourcecode/as):00548                  lbsr  L150C        Update Text & Gfx cursors
011B 2005             (/dd/sourcecode/as):00549                  bra   L01B5        Do hardware setup for new window & return to system
                      (/dd/sourcecode/as):00550         
                      (/dd/sourcecode/as):00551         * Make window on new screen : have to change so it sets up defaults & colors
                      (/dd/sourcecode/as):00552         * BEFORE it clears the screen
011D 1700C9           (/dd/sourcecode/as):00553         L01B0    lbsr  L0268        Go set up a new screen table (INCLUDES CLR SCRN)
0120 250E             (/dd/sourcecode/as):00554                  bcs   L01C5        If error, return to system with that error
                      (/dd/sourcecode/as):00555         * All window creates come here
     0122             (/dd/sourcecode/as):00556         L01B5    equ   *
                      (/dd/sourcecode/as):00557                IFNE  H6309
                      (/dd/sourcecode/as):00558                  bsr   L0129        go setup data & MMU for new window
                      (/dd/sourcecode/as):00559                ELSE
0122 17FF7C           (/dd/sourcecode/as):00560                  lbsr  L0129
                      (/dd/sourcecode/as):00561                ENDC
0125 17022B           (/dd/sourcecode/as):00562                  lbsr  L0366        setup default values
0128 86FF             (/dd/sourcecode/as):00563                  lda   #$FF         Change back window# link to indicate there is none
012A A732             (/dd/sourcecode/as):00564                  sta   Wt.BLnk,y
                      (/dd/sourcecode/as):00565         * ATD: same next 3 lines as at L03F4
012C 171432           (/dd/sourcecode/as):00566                  lbsr  L1377        Call CLS (CHR$(12)) routine
012F 5F               (/dd/sourcecode/as):00567                  clrb               No errors
0130 7E50F7           (/dd/sourcecode/as):00568         L01C5    jmp   >GrfStrt+SysRet return to system
                      (/dd/sourcecode/as):00569         
                      (/dd/sourcecode/as):00570         * Check screen coordinates
                      (/dd/sourcecode/as):00571         * Entry: X = screen table pointer
0133 9660             (/dd/sourcecode/as):00572         L01C8    lda   <$60         get current window STY marker
0135 81FF             (/dd/sourcecode/as):00573                  cmpa  #$FF         current screen?
0137 2602             (/dd/sourcecode/as):00574                  bne   L01D2        no, go on
0139 A684             (/dd/sourcecode/as):00575                  lda   ,x           Get current screen type (from screen table ptr)
013B CE4173           (/dd/sourcecode/as):00576         L01D2    ldu   #GrfStrt+L01F9  Point to width table
013E 8401             (/dd/sourcecode/as):00577                  anda  #$01         only keep resolution bit (0=40 column, 1=80)
0140 E635             (/dd/sourcecode/as):00578                  ldb   Wt.CPX,y     get current X start
0142 EB37             (/dd/sourcecode/as):00579                  addb  Wt.SZX,y     calculate size
0144 2529             (/dd/sourcecode/as):00580                  bcs   L01F5        added line: exit if 8-bit overflow
0146 E1C6             (/dd/sourcecode/as):00581                  cmpb  a,u          still within range?
0148 2225             (/dd/sourcecode/as):00582                  bhi   L01F5        no, error out
                      (/dd/sourcecode/as):00583         * ATD: These lines added for screen size support
014A A608             (/dd/sourcecode/as):00584                  lda   St.ScSiz,x   get screen size
014C 2602             (/dd/sourcecode/as):00585                  bne   L01E0        skip ahead if already initialized
014E 8619             (/dd/sourcecode/as):00586                  lda   #MaxLines    get maximum screen size in A (25 by default)
0150 E636             (/dd/sourcecode/as):00587         L01E0    ldb   Wt.CPY,y     get current Y start
                      (/dd/sourcecode/as):00588                IFNE  H6309
                      (/dd/sourcecode/as):00589                  cmpr  a,b          within maximum?
                      (/dd/sourcecode/as):00590                ELSE
0152 97BF             (/dd/sourcecode/as):00591                  sta   <grScrtch
0154 D1BF             (/dd/sourcecode/as):00592                  cmpb  <grScrtch
                      (/dd/sourcecode/as):00593                ENDC
0156 2217             (/dd/sourcecode/as):00594                  bhi   L01F5        no, error out
0158 EB38             (/dd/sourcecode/as):00595                  addb  Wt.SZY,y     calculate size: Now B = maximum size of the window
015A 2513             (/dd/sourcecode/as):00596                  bcs   L01F5        added line: exit if 8-bit overflow
                      (/dd/sourcecode/as):00597                IFNE  H6309
                      (/dd/sourcecode/as):00598                  cmpr  a,b          still within maximum?
                      (/dd/sourcecode/as):00599                ELSE
015C 97BF             (/dd/sourcecode/as):00600                  sta   <grScrtch
015E D1BF             (/dd/sourcecode/as):00601                  cmpb  <grScrtch
                      (/dd/sourcecode/as):00602                ENDC
0160 220D             (/dd/sourcecode/as):00603                  bhi   L01F5        no, error out
0162 A108             (/dd/sourcecode/as):00604                  cmpa  St.ScSiz,x   do we have the current screen size?
0164 2707             (/dd/sourcecode/as):00605                  beq   L01F3        yes, skip ahead
0166 C118             (/dd/sourcecode/as):00606                  cmpb  #24          do we have a 24-line screen?
0168 2201             (/dd/sourcecode/as):00607                  bhi   L01F1        no, it's 25: skip ahead
016A 4A               (/dd/sourcecode/as):00608                  deca               25-1=24 line screen, if window <= 24 lines
016B A708             (/dd/sourcecode/as):00609         L01F1    sta   St.ScSiz,x   save the size of the screen
016D 5F               (/dd/sourcecode/as):00610         L01F3    clrb               clear carry
016E 39               (/dd/sourcecode/as):00611                  rts                return
                      (/dd/sourcecode/as):00612         
016F 53               (/dd/sourcecode/as):00613         L01F5    comb               Set carry
0170 C6BD             (/dd/sourcecode/as):00614                  ldb   #E$ICoord    Get error code for Illegal co-ordinate
0172 39               (/dd/sourcecode/as):00615                  rts                Return
                      (/dd/sourcecode/as):00616         
                      (/dd/sourcecode/as):00617         * Maximum widths of text & graphic windows table
0173 2850             (/dd/sourcecode/as):00618         L01F9    fcb   40,80
                      (/dd/sourcecode/as):00619         
                      (/dd/sourcecode/as):00620         * Check if Current screen DWSET request can be honored (carry set & b=error
                      (/dd/sourcecode/as):00621         *   # if we can't)
                      (/dd/sourcecode/as):00622         * Entry: Y=Ptr to our (new window) window table
                      (/dd/sourcecode/as):00623         * NOTE: It has to check all active windows. If it it fits without overlap
                      (/dd/sourcecode/as):00624         *         on all of them, then it will obviously fit with several on the same
                      (/dd/sourcecode/as):00625         *         screen.
0175 8E1290           (/dd/sourcecode/as):00626         L01FB    ldx   #WinBase     Point to start of window tables
                      (/dd/sourcecode/as):00627                IFNE  H6309
                      (/dd/sourcecode/as):00628                  lde   #MaxWind     Get maximum number of windows (32)
                      (/dd/sourcecode/as):00629                ELSE
0178 97BF             (/dd/sourcecode/as):00630                  sta   <grScrtch
017A 8620             (/dd/sourcecode/as):00631                  lda   #MaxWind
017C 97B5             (/dd/sourcecode/as):00632                  sta   <$B5
017E 96BF             (/dd/sourcecode/as):00633                  lda   <grScrtch
                      (/dd/sourcecode/as):00634                ENDC
     0180             (/dd/sourcecode/as):00635         L0206    equ   *
                      (/dd/sourcecode/as):00636                IFNE  H6309 
                      (/dd/sourcecode/as):00637                  cmpr  y,x          Is this our own window table entry?
                      (/dd/sourcecode/as):00638                ELSE
0180 109FBF           (/dd/sourcecode/as):00639                  sty   <grScrtch    Save current window table ptr
0183 9CBF             (/dd/sourcecode/as):00640                  cmpx  <grScrtch    Same as one we are currently checking?
                      (/dd/sourcecode/as):00641                ENDC
0185 2711             (/dd/sourcecode/as):00642                  beq   L021B        Yes, skip it (obviously)
0187 EC10             (/dd/sourcecode/as):00643                  ldd   Wt.STbl,x    Get screen table pointer of search window
0189 2B0D             (/dd/sourcecode/as):00644                  bmi   L021B        High bit set means not active, skip to next
018B 10A330           (/dd/sourcecode/as):00645                  cmpd  Wt.STbl,y    Same screen as ours?
018E 2608             (/dd/sourcecode/as):00646                  bne   L021B        No, skip to next
0190 A612             (/dd/sourcecode/as):00647                  lda   Wt.BLnk,x    Is this entry for an overlay window?
0192 2A04             (/dd/sourcecode/as):00648                  bpl   L021B        Yes, useless to us
0194 8D0B             (/dd/sourcecode/as):00649                  bsr   L0224        Go make sure we will fit
0196 2508             (/dd/sourcecode/as):00650                  bcs   L0223        Nope, return with error
0198 C640             (/dd/sourcecode/as):00651         L021B    ldb   #Wt.Siz      Move to next entry (originally leax $40,x, but
019A 3A               (/dd/sourcecode/as):00652                  abx                believe it or not, this is faster in native)
                      (/dd/sourcecode/as):00653                IFNE  H6309
                      (/dd/sourcecode/as):00654                  dece               Done?
                      (/dd/sourcecode/as):00655                ELSE
019B 0AB5             (/dd/sourcecode/as):00656                  dec   <$B5
                      (/dd/sourcecode/as):00657                ENDC
019D 26E1             (/dd/sourcecode/as):00658                  bne   L0206        No, go back
019F 5F               (/dd/sourcecode/as):00659                  clrb               Clear errors
01A0 39               (/dd/sourcecode/as):00660         L0223    rts                Return
                      (/dd/sourcecode/as):00661         
                      (/dd/sourcecode/as):00662         * Routine to make sure a 'current screen' DWSet window will fit with other
                      (/dd/sourcecode/as):00663         *   windows already on that screen
                      (/dd/sourcecode/as):00664         * Entry: X=Ptr to window table entry that is on same screen as us
                      (/dd/sourcecode/as):00665         *        Y=Ptr to our window table entry
                      (/dd/sourcecode/as):00666         * Exit: Carry clear if it will fit
                      (/dd/sourcecode/as):00667         
     01A1             (/dd/sourcecode/as):00668         L0224    equ   *
                      (/dd/sourcecode/as):00669                IFNE  H6309
                      (/dd/sourcecode/as):00670                  tim   #Protect,Wt.BSW,x Is this window protected?
                      (/dd/sourcecode/as):00671                ELSE
01A1 3404             (/dd/sourcecode/as):00672                  pshs  b 
01A3 E609             (/dd/sourcecode/as):00673                  ldb   Wt.BSW,x
01A5 C501             (/dd/sourcecode/as):00674                  bitb  #Protect
01A7 3504             (/dd/sourcecode/as):00675                  puls  b
                      (/dd/sourcecode/as):00676                ENDC
01A9 2738             (/dd/sourcecode/as):00677                  beq   L0262        No, window can overlap/write wherever it wants
01AB A635             (/dd/sourcecode/as):00678                  lda   Wt.CPX,y     get our new window's requested Left border
01AD A18826           (/dd/sourcecode/as):00679                  cmpa  Wt.DfCPX,x   Does it start on or past existing windows left border?
01B0 2C09             (/dd/sourcecode/as):00680                  bge   L023A        Yes, could still work - check width
01B2 AB37             (/dd/sourcecode/as):00681                  adda  Wt.SZX,y     add in our requested width
01B4 A18826           (/dd/sourcecode/as):00682                  cmpa  Wt.DfCPX,x   Does our right border go past existing's left border?
01B7 2E0E             (/dd/sourcecode/as):00683                  bgt   L0246        Yes, could still work if Y is somewhere empty(?)
01B9 5F               (/dd/sourcecode/as):00684                  clrb               No X coord conflict at all...will be fine
01BA 39               (/dd/sourcecode/as):00685                  rts
                      (/dd/sourcecode/as):00686         
                      (/dd/sourcecode/as):00687         * Comes here only if our window will start past left side of existing window
01BB E68826           (/dd/sourcecode/as):00688         L023A    ldb   Wt.DfCPX,x   Get existing windows left border value
01BE EB8828           (/dd/sourcecode/as):00689                  addb  Wt.DfSZX,x   Calculate existing window's right border
                      (/dd/sourcecode/as):00690                IFNE  H6309
                      (/dd/sourcecode/as):00691                  cmpr  b,a          Our X start greater than existing windows right border?
                      (/dd/sourcecode/as):00692                ELSE
01C1 D7BF             (/dd/sourcecode/as):00693                  stb   <grScrtch
01C3 91BF             (/dd/sourcecode/as):00694                  cmpa  <grScrtch
                      (/dd/sourcecode/as):00695                ENDC
01C5 2C1C             (/dd/sourcecode/as):00696                  bge   L0262        Yes, legal coordinate
                      (/dd/sourcecode/as):00697         * X is fine, start checking Y
01C7 A636             (/dd/sourcecode/as):00698         L0246    lda   Wt.CPY,y     Get our new window's requested top border value
01C9 A18827           (/dd/sourcecode/as):00699                  cmpa  Wt.DfCPY,x   Compare with existing window's top border
01CC 2C09             (/dd/sourcecode/as):00700         L024B    bge   L0256        If we are lower on screen, jump ahead
01CE AB38             (/dd/sourcecode/as):00701                  adda  Wt.SZY,y     Calculate our bottom border
01D0 A18827           (/dd/sourcecode/as):00702                  cmpa  Wt.DfCPY,x   Is it past the top border of existing window?
01D3 2E10             (/dd/sourcecode/as):00703                  bgt   L0264        Yes, illegal coordinate
01D5 5F               (/dd/sourcecode/as):00704                  clrb               Yes, window will fit legally, return with no error
01D6 39               (/dd/sourcecode/as):00705                  rts
                      (/dd/sourcecode/as):00706         
                      (/dd/sourcecode/as):00707         * Comes here only if our window will start below top of existing window
01D7 E68827           (/dd/sourcecode/as):00708         L0256    ldb   Wt.DfCPY,x   Get existing window's top border value
01DA EB8829           (/dd/sourcecode/as):00709                  addb  Wt.DfSZY,x   Calculate existing window's bottom border
                      (/dd/sourcecode/as):00710                IFNE  H6309
                      (/dd/sourcecode/as):00711                  cmpr  b,a          Our Y start less than bottom of existing?
                      (/dd/sourcecode/as):00712                ELSE
01DD D7BF             (/dd/sourcecode/as):00713                  stb   <grScrtch
01DF 91BF             (/dd/sourcecode/as):00714                  cmpa  <grScrtch
                      (/dd/sourcecode/as):00715                ENDC
01E1 2D02             (/dd/sourcecode/as):00716                  blt   L0264        Yes, would overlap, return error
01E3 5F               (/dd/sourcecode/as):00717         L0262    clrb               Yes, window will fit legally, return with no error
01E4 39               (/dd/sourcecode/as):00718                  rts
                      (/dd/sourcecode/as):00719         
01E5 53               (/dd/sourcecode/as):00720         L0264    comb               Window won't fit with existing windows
01E6 C6C3             (/dd/sourcecode/as):00721                  ldb   #E$IWDef
01E8 39               (/dd/sourcecode/as):00722         L0286    rts   
                      (/dd/sourcecode/as):00723         
                      (/dd/sourcecode/as):00724         * Setup a new screen table
                      (/dd/sourcecode/as):00725         *L0268    bsr   FScrTbl      search for a screen table
                      (/dd/sourcecode/as):00726         *         bcs   L0286        not available, return
                      (/dd/sourcecode/as):00727         * X=Screen tbl ptr, Y=Window tbl ptr
01E9 AF30             (/dd/sourcecode/as):00728         L0268    stx   Wt.STbl,y    save the pointer in window table
01EB D660             (/dd/sourcecode/as):00729                  ldb   <$60         get screen type
01ED E784             (/dd/sourcecode/as):00730                  stb   St.Sty,x     save it to screen table
01EF 8D3E             (/dd/sourcecode/as):00731                  bsr   L029B        go setup screen table (Block & addr #'s)
01F1 25F5             (/dd/sourcecode/as):00732                  bcs   L0286        couldn't do it, return
01F3 D65A             (/dd/sourcecode/as):00733                  ldb   <$5A         get border color
01F5 E705             (/dd/sourcecode/as):00734                  stb   St.Brdr,x    save it in screen table
                      (/dd/sourcecode/as):00735         * This line added
01F7 E627             (/dd/sourcecode/as):00736                  ldb   Wt.Back,y    Get background color from window table
01F9 17052B           (/dd/sourcecode/as):00737                  lbsr  L0791        get color mask for bckgrnd color (into B)
01FC 170105           (/dd/sourcecode/as):00738                  lbsr  L0335        clear the screen (with bckgrnd color)
01FF 308810           (/dd/sourcecode/as):00739                  leax  St.Pals,x    Point to palette regs in screen table
                      (/dd/sourcecode/as):00740         * 6809 - eventually change to use block copy vector (even 4 byte version), but for now, change to:
                      (/dd/sourcecode/as):00741         *      IFNE H6309
                      (/dd/sourcecode/as):00742         *         ldd   >WGlobal+G.DefPal       Get system default palette pointer
                      (/dd/sourcecode/as):00743         *         ldw   #16          16 palettes to copy
                      (/dd/sourcecode/as):00744         *         tfm   d+,x+        Copy into screen table
                      (/dd/sourcecode/as):00745         *       ELSE
                      (/dd/sourcecode/as):00746         *         pshs  u,y         Save regs
                      (/dd/sourcecode/as):00747         *         ldy   >WGlobal+G.DefPal  Get system default palette ptr
                      (/dd/sourcecode/as):00748         *         ldb   #8          8 double-bytes to copy
                      (/dd/sourcecode/as):00749         *L0287b   ldu   ,y++        Copy 2 palettes over
                      (/dd/sourcecode/as):00750         *         stu   ,x++
                      (/dd/sourcecode/as):00751         *         decb              Done all 8 chunks?
                      (/dd/sourcecode/as):00752         *         bne   L0287b      Keep doing until done
                      (/dd/sourcecode/as):00753         *         puls  y,u         Restore regs
                      (/dd/sourcecode/as):00754         *       ENDC
0202 FC1019           (/dd/sourcecode/as):00755                  ldd   >WGlobal+G.DefPal       Get system default palette pointer
                      (/dd/sourcecode/as):00756                IFNE  H6309
                      (/dd/sourcecode/as):00757                  ldw   #16          16 palettes to copy
                      (/dd/sourcecode/as):00758                  tfm   d+,x+        Copy into screen table
                      (/dd/sourcecode/as):00759                ELSE
0205 3424             (/dd/sourcecode/as):00760                  pshs  b,y 
0207 1F02             (/dd/sourcecode/as):00761                  tfr   d,y
0209 C608             (/dd/sourcecode/as):00762                  ldb   #8
020B E7E4             (/dd/sourcecode/as):00763                  stb   ,s
020D ECA1             (/dd/sourcecode/as):00764         L0287b   ldd   ,y++
020F ED81             (/dd/sourcecode/as):00765                  std   ,x++
0211 6AE4             (/dd/sourcecode/as):00766                  dec   ,s
0213 26F8             (/dd/sourcecode/as):00767                  bne   L0287b
0215 3524             (/dd/sourcecode/as):00768                  puls  b,y
                      (/dd/sourcecode/as):00769                ENDC
0217 5F               (/dd/sourcecode/as):00770                  clrb               No error & return
0218 39               (/dd/sourcecode/as):00771                  rts                Get back scrn tbl ptr & return
                      (/dd/sourcecode/as):00772         
                      (/dd/sourcecode/as):00773         * Search for a empty screen table
0219 8E1A81           (/dd/sourcecode/as):00774         FScrTbl  ldx   #STblBse+1   Point to screen tables+1
021C CC1020           (/dd/sourcecode/as):00775                  ldd   #16*256+St.Siz get # table entrys & entry size
021F 6D84             (/dd/sourcecode/as):00776         L028D    tst   ,x           already allocated a block?
0221 2604             (/dd/sourcecode/as):00777                  bne   Yes          Yes, go to next one
0223 301F             (/dd/sourcecode/as):00778                  leax  -1,x         Bump pointer back by $980 based
0225 5F               (/dd/sourcecode/as):00779                  clrb               No error & return
0226 39               (/dd/sourcecode/as):00780                  rts
                      (/dd/sourcecode/as):00781         
0227 3A               (/dd/sourcecode/as):00782         Yes      abx                move to next one
0228 4A               (/dd/sourcecode/as):00783                  deca               done?
0229 26F4             (/dd/sourcecode/as):00784                  bne   L028D        no, keep looking
022B 53               (/dd/sourcecode/as):00785                  comb               set carry for error
022C C6C1             (/dd/sourcecode/as):00786                  ldb   #E$TblFul    get error code
022E 39               (/dd/sourcecode/as):00787                  rts                return
                      (/dd/sourcecode/as):00788         
                      (/dd/sourcecode/as):00789         * Setup screen table
                      (/dd/sourcecode/as):00790         * Entry: Y=Window table ptr
                      (/dd/sourcecode/as):00791         *        B=screen type (flags still set based on it too)
022F 3420             (/dd/sourcecode/as):00792         L029B    pshs  y            preserve window table pointer
0231 2A1B             (/dd/sourcecode/as):00793                  bpl   L02BB        Screen type not text, go on
0233 108E1A80         (/dd/sourcecode/as):00794                  ldy   #STblBse     Point to screen tables
0237 8610             (/dd/sourcecode/as):00795                  lda   #$10         get # screen tables
                      (/dd/sourcecode/as):00796         * Search screen tables
0239 E6A4             (/dd/sourcecode/as):00797         L02A7    ldb   St.Sty,y     is it text?
023B 2A09             (/dd/sourcecode/as):00798                  bpl   L02B3        no, go to next one
023D E621             (/dd/sourcecode/as):00799                  ldb   St.SBlk,y    get memory block #
023F 2705             (/dd/sourcecode/as):00800                  beq   L02B3        don't exist, go to next one
0241 170091           (/dd/sourcecode/as):00801                  lbsr   L0306       search window block for a spot
0244 244B             (/dd/sourcecode/as):00802                  bcc   L02DE        found one, go initialize it
0246 31A820           (/dd/sourcecode/as):00803         L02B3    leay  St.Siz,y     move to next screen table
0249 4A               (/dd/sourcecode/as):00804                  deca               done?
024A 26ED             (/dd/sourcecode/as):00805                  bne   L02A7        no, keep going
                      (/dd/sourcecode/as):00806         * No screen available, get a new screen block
                      (/dd/sourcecode/as):00807         * NOTE: Should be able to change L02F1 loop to use W/CMPE to slightly
                      (/dd/sourcecode/as):00808         *       speed up/shrink
024C D660             (/dd/sourcecode/as):00809                  ldb   <$60         get STY marker
024E 86FF             (/dd/sourcecode/as):00810         L02BB    lda   #$FF         preset counter
0250 97B3             (/dd/sourcecode/as):00811                  sta   <$B3         unused grfdrv space
0252 108E42C8         (/dd/sourcecode/as):00812                  ldy   #GrfStrt+L02FA-1   Point to RAM block table 
0256 C40F             (/dd/sourcecode/as):00813                  andb  #$F          make it fit table
0258 E6A5             (/dd/sourcecode/as):00814                  ldb   b,y          get # blocks needed
025A D7B4             (/dd/sourcecode/as):00815                  stb   <$B4         save number of blocks, unused space
025C 0CB3             (/dd/sourcecode/as):00816         OVLAP    inc   <$B3         update counter, unused space
025E D6B4             (/dd/sourcecode/as):00817                  ldb   <$B4         get number of blocks needed
0260 103F53           (/dd/sourcecode/as):00818                  os9   F$AlHRAM     AlHRAM Allocate memory
0263 253E             (/dd/sourcecode/as):00819                  bcs   L02EF        no memory, return error
0265 3404             (/dd/sourcecode/as):00820                  pshs  b            save starting block #
0267 C43F             (/dd/sourcecode/as):00821                  andb  #$3F         modulo 512K
0269 3404             (/dd/sourcecode/as):00822                  pshs  b            save modulo starting block
026B D6B4             (/dd/sourcecode/as):00823                  ldb   <$B4         regB now # blocks requested
026D 5A               (/dd/sourcecode/as):00824                  decb               set to base 0
026E EBE4             (/dd/sourcecode/as):00825                  addb  ,s
0270 C43F             (/dd/sourcecode/as):00826                  andb  #$3F         final block # modulo 512K
0272 E1E0             (/dd/sourcecode/as):00827                  cmpb  ,s+          compare with first block
0274 25E6             (/dd/sourcecode/as):00828                  blo   OVLAP        overlapped 512K boundary so ask for more RAM
0276 8D2D             (/dd/sourcecode/as):00829                  bsr   DeMost 
0278 3504             (/dd/sourcecode/as):00830                  puls  b            get starting block #
027A 96B3             (/dd/sourcecode/as):00831                  lda   <$B3
027C 32E6             (/dd/sourcecode/as):00832                  leas  a,s          yank temps
027E 108E8000         (/dd/sourcecode/as):00833                  ldy   #$8000       get default screen start
0282 3424             (/dd/sourcecode/as):00834                  pshs  b,y          save that & start block #
0284 17FE68           (/dd/sourcecode/as):00835                  lbsr  L0173        setup MMU with screen
                      (/dd/sourcecode/as):00836         * Mark first byte of every possible screen in block with $FF
0287 C6FF             (/dd/sourcecode/as):00837                  ldb   #$FF
0289 E7A4             (/dd/sourcecode/as):00838         L02D6    stb   ,y           save marker
028B 8D33             (/dd/sourcecode/as):00839                  bsr   L02F1        move to next one
028D 25FA             (/dd/sourcecode/as):00840                  blo   L02D6        not done, keep going
028F 3524             (/dd/sourcecode/as):00841                  puls  b,y          restore block # & start address
                      (/dd/sourcecode/as):00842         * Initialize rest of screen table
0291 E701             (/dd/sourcecode/as):00843         L02DE    stb   St.SBlk,x    save block # to table
0293 10AF02           (/dd/sourcecode/as):00844                  sty   St.LStrt,x   save logical screen start
0296 9660             (/dd/sourcecode/as):00845                  lda   <$0060       get screen type
0298 840F             (/dd/sourcecode/as):00846                  anda  #$F          make it fit table
029A 108E42CE         (/dd/sourcecode/as):00847                  ldy   #GrfStrt+L0300-1  Point to width table
029E A6A6             (/dd/sourcecode/as):00848                  lda   a,y          get width
02A0 A704             (/dd/sourcecode/as):00849                  sta   St.BRow,x    save it to screen table
02A2 5F               (/dd/sourcecode/as):00850                  clrb               clear errors
02A3 35A0             (/dd/sourcecode/as):00851         L02EF    puls  y,pc         return
                      (/dd/sourcecode/as):00852         
                      (/dd/sourcecode/as):00853         * Get rid of allocated blocks that overflowed 512K bank; RG.
02A5 0DB3             (/dd/sourcecode/as):00854         DeMost   tst   <$B3         if none then return
02A7 2716             (/dd/sourcecode/as):00855                  beq   DA020
02A9 96B3             (/dd/sourcecode/as):00856                  lda   <$B3
02AB 3412             (/dd/sourcecode/as):00857                  pshs  a,x
02AD 3166             (/dd/sourcecode/as):00858                  leay  6,s          a,x,rts,b; point to first bad group
02AF 4F               (/dd/sourcecode/as):00859         DA010    clra
02B0 E6A0             (/dd/sourcecode/as):00860                  ldb   ,y+          get starting block number
02B2 1F01             (/dd/sourcecode/as):00861                  tfr   d,x
02B4 D6B4             (/dd/sourcecode/as):00862                  ldb   <$B4         number of blocks
02B6 103F51           (/dd/sourcecode/as):00863                  os9   F$DelRAM     de-allocate the blocks *** IGNORING ERRORS ***
02B9 6AE4             (/dd/sourcecode/as):00864                  dec   ,s           decrease count
02BB 26F2             (/dd/sourcecode/as):00865                  bne   DA010
02BD 3512             (/dd/sourcecode/as):00866                  puls  a,x
02BF 39               (/dd/sourcecode/as):00867         DA020    rts
                      (/dd/sourcecode/as):00868         
                      (/dd/sourcecode/as):00869         * Move to next text screen in memory block
02C0 31A90800         (/dd/sourcecode/as):00870         L02F1    leay  >$0800,y     move Y to next text screen start
02C4 108CA000         (/dd/sourcecode/as):00871                  cmpy  #$A000       set flags for completion check
02C8 39               (/dd/sourcecode/as):00872         L02F9    rts                return
                      (/dd/sourcecode/as):00873         
                      (/dd/sourcecode/as):00874         * Memory block requirement table (# of 8K banks)
02C9 02               (/dd/sourcecode/as):00875         L02FA    fcb   2            640 2 color
02CA 02               (/dd/sourcecode/as):00876                  fcb   2            320 4 color
02CB 04               (/dd/sourcecode/as):00877                  fcb   4            640 4 color
02CC 04               (/dd/sourcecode/as):00878                  fcb   4            320 16 color
02CD 01               (/dd/sourcecode/as):00879                  fcb   1            80 column text
02CE 01               (/dd/sourcecode/as):00880                  fcb   1            40 column text
                      (/dd/sourcecode/as):00881         
                      (/dd/sourcecode/as):00882         * Screen width in bytes table (# bytes/line)
02CF 50               (/dd/sourcecode/as):00883         L0300    fcb   80           640 2 color
02D0 50               (/dd/sourcecode/as):00884                  fcb   80           320 4 color
02D1 A0               (/dd/sourcecode/as):00885                  fcb   160          640 4 color
02D2 A0               (/dd/sourcecode/as):00886                  fcb   160          320 16 color
02D3 A0               (/dd/sourcecode/as):00887                  fcb   160          80 column
02D4 50               (/dd/sourcecode/as):00888                  fcb   80           40 column text
                      (/dd/sourcecode/as):00889         
                      (/dd/sourcecode/as):00890         * Look for a empty window in a text screen memory block
02D5 3436             (/dd/sourcecode/as):00891         L0306    pshs  d,x,y        Preserve regs
02D7 17FE15           (/dd/sourcecode/as):00892                  lbsr  L0173        go map in the screen
02DA 108E8000         (/dd/sourcecode/as):00893                  ldy   #$8000       get screen start address
02DE C6FF             (/dd/sourcecode/as):00894                  ldb   #$FF         get used marker flag
02E0 E1A4             (/dd/sourcecode/as):00895         L0311    cmpb  ,y           used?
02E2 2707             (/dd/sourcecode/as):00896                  beq   L031C        no, go see if it will fit
02E4 8DDA             (/dd/sourcecode/as):00897         L0315    bsr   L02F1        move to next screen
02E6 25F8             (/dd/sourcecode/as):00898                  bcs   L0311        keep looking if not outside of block
02E8 53               (/dd/sourcecode/as):00899         L0319    comb               set carry
02E9 35B6             (/dd/sourcecode/as):00900                  puls  d,x,y,pc     return
                      (/dd/sourcecode/as):00901         
02EB 9660             (/dd/sourcecode/as):00902         L031C    lda   <$0060       get screen type
02ED 8186             (/dd/sourcecode/as):00903                  cmpa  #$86         80 column text?
02EF 270D             (/dd/sourcecode/as):00904                  beq   L032F        yes, return
02F1 30A90800         (/dd/sourcecode/as):00905                  leax  $0800,y      move to next screen to check if it will fit
02F5 8CA000           (/dd/sourcecode/as):00906                  cmpx  #$A000       will it fit in block?
02F8 24EE             (/dd/sourcecode/as):00907                  bhs   L0319        no, return error
02FA E184             (/dd/sourcecode/as):00908                  cmpb  ,x           is it already used?
02FC 26E6             (/dd/sourcecode/as):00909                  bne   L0315        yes, return error
02FE 5F               (/dd/sourcecode/as):00910         L032F    clrb               clear error status
02FF 3516             (/dd/sourcecode/as):00911                  puls  d,x
0301 3262             (/dd/sourcecode/as):00912                  leas  2,s          dump screen table pointer to keep screen address
0303 39               (/dd/sourcecode/as):00913                  rts                return
                      (/dd/sourcecode/as):00914         
                      (/dd/sourcecode/as):00915         * Clear screen (not window, but whole screen)
                      (/dd/sourcecode/as):00916         * Entry: B=Background color mask byte (from $6,x in window table)
                      (/dd/sourcecode/as):00917         *        X=Ptr to screen table
                      (/dd/sourcecode/as):00918         * Currently comes in with foreground color though.
                      (/dd/sourcecode/as):00919         * ATD: only called once, from just above...
                      (/dd/sourcecode/as):00920         **** BEGINNING OF NEW CODE TO TEST (OR CRASH) ****
0304 3470             (/dd/sourcecode/as):00921         L0335    pshs  x,y,u        save regs
0306 8620             (/dd/sourcecode/as):00922                  lda   #C$SPAC      get a space code
0308 DD97             (/dd/sourcecode/as):00923                  std   <$0097       init screen clear value to color/attribute
030A E684             (/dd/sourcecode/as):00924                  ldb   St.Sty,x     Get screen type
030C EE02             (/dd/sourcecode/as):00925                  ldu   St.LStrt,x   get screen start address
030E C40F             (/dd/sourcecode/as):00926                  andb  #%00001111   Strip high nibble (gfx vs. txt)
0310 58               (/dd/sourcecode/as):00927                  lslb               adjust for 2 bytes entry
0311 8E432F           (/dd/sourcecode/as):00928                  ldx   #GrfStrt+L035A-2  Point to screen length table
0314 C108             (/dd/sourcecode/as):00929                  cmpb  #8           text mode (types 5 and up)?
0316 2325             (/dd/sourcecode/as):00930                  bls   ClrGfx       No, do graphics clear
                      (/dd/sourcecode/as):00931         * 6809/6309 will both use mini-blast for clearing text.
0318 EC85             (/dd/sourcecode/as):00932                  ldd   b,x          Get size to clear
031A 33CB             (/dd/sourcecode/as):00933                  leau  d,u          Point U to end of screen+1
031C 9E97             (/dd/sourcecode/as):00934                  ldx   <$0097       Get char/attribute byte pair to clear with
031E 44               (/dd/sourcecode/as):00935                  lsra               Divide by 4 since we are doing 4 bytes/time
031F 56               (/dd/sourcecode/as):00936                  rorb
0320 44               (/dd/sourcecode/as):00937                  lsra
0321 56               (/dd/sourcecode/as):00938                  rorb
0322 8D02             (/dd/sourcecode/as):00939                  bsr   Blst4Clr      Do mini stack blast clear
0324 35F0             (/dd/sourcecode/as):00940                  puls  x,y,u,pc      Restore regs & return
                      (/dd/sourcecode/as):00941         
                      (/dd/sourcecode/as):00942         * Mini Stack blast to clear contiguous mem (from end of mem+1) with a 16 bit value
                      (/dd/sourcecode/as):00943         * Eventually add odd byte count support before main loop, and make it a vector that
                      (/dd/sourcecode/as):00944         * will allow 1 byte copy values, etc. like CoVDG. Can then be called by some other
                      (/dd/sourcecode/as):00945         * routines as well (Clear window, clear to end of screen, clear to end of line)
                      (/dd/sourcecode/as):00946         * Entry: U=ptr to end of mem to clear+1
                      (/dd/sourcecode/as):00947         *        X=16 bit/2 byte value to clear with
                      (/dd/sourcecode/as):00948         *        A=# of 1K blocks to clear
                      (/dd/sourcecode/as):00949         *        B=# of 4 byte leftover blocks to clear
                      (/dd/sourcecode/as):00950         * Uses: Y
                      (/dd/sourcecode/as):00951         * Exit: D=0, U=ptr to start of memory clear, X/Y=copies of 2 byte pattern cleared with
                      (/dd/sourcecode/as):00952         * (You likely will preserve regs in calling routine)
0326 3184             (/dd/sourcecode/as):00953         Blst4Clr leay  ,x               Dupe copy bytes to Y
0328 3630             (/dd/sourcecode/as):00954         Clr4Lp   pshu  x,y              (8) Clear 4 bytes - 80x25=
032A 5A               (/dd/sourcecode/as):00955                  decb                   (1) Dec "leftover" 4 byte block counter
032B 26FB             (/dd/sourcecode/as):00956                  bne   Clr4Lp           (3) Keep doing until leftovers are done
032D 4A               (/dd/sourcecode/as):00957                  deca                   (1) Dec 1K counter
032E 2AF8             (/dd/sourcecode/as):00958                  bpl   Clr4Lp           (3) Do until done
0330 39               (/dd/sourcecode/as):00959                  rts
                      (/dd/sourcecode/as):00960         
                      (/dd/sourcecode/as):00961         * Screen length table - once we get mini-stackblast, 6809 version for sure (and hardware text
                      (/dd/sourcecode/as):00962         * for both) should be in 4 byte counts, or 1K blocks & leftover 4 byte blocks.
0331 3E80             (/dd/sourcecode/as):00963         L035A    fdb   80*MaxLines*8    640 2 color   (gfx are 1 byte counts)
0333 3E80             (/dd/sourcecode/as):00964                  fdb   80*MaxLines*8    320 4 color
0335 7D00             (/dd/sourcecode/as):00965                  fdb   160*MaxLines*8   640 4 color
0337 7D00             (/dd/sourcecode/as):00966                  fdb   160*MaxLines*8   320 16 color
0339 0FA0             (/dd/sourcecode/as):00967                  fdb   160*MaxLines     80 column text  (2 bytes/char because of attribute byte)
033B 07D0             (/dd/sourcecode/as):00968                  fdb   80*MaxLines      40 column text  (2 bytes/char because of attribute byte)
                      (/dd/sourcecode/as):00969         
                      (/dd/sourcecode/as):00970         * Clear a graphics screen. On 32,000 byte screen, TFM is <150 cycles faster than pshu, but
                      (/dd/sourcecode/as):00971         * takes less room to set up.
                      (/dd/sourcecode/as):00972         * Entry: X=ptr to screen table
                      (/dd/sourcecode/as):00973         *        B=offset into table for size of current screen type (in bytes)
                      (/dd/sourcecode/as):00974         *        U=ptr to screen start
                      (/dd/sourcecode/as):00975         *        <$98 = byte value to clear screen with
033D                  (/dd/sourcecode/as):00976         ClrGfx   
                      (/dd/sourcecode/as):00977                IFNE  H6309
                      (/dd/sourcecode/as):00978                  ldw   b,x          Get size of gfx screen to clear
                      (/dd/sourcecode/as):00979                  ldx   #$1098       Point to clear code char
                      (/dd/sourcecode/as):00980                  tfm   x,u+         Clear screen
                      (/dd/sourcecode/as):00981                  puls  u,x,y,pc     Restore regs & return
                      (/dd/sourcecode/as):00982                ELSE
033D EC85             (/dd/sourcecode/as):00983                  ldd   b,x          Get size of screen to clear (in bytes)
033F 33CB             (/dd/sourcecode/as):00984                  leau  d,u          Point U to end of screen+1
0341 44               (/dd/sourcecode/as):00985                  lsra               Divide by 4 (since we are doing 4 bytes at a time)
0342 56               (/dd/sourcecode/as):00986                  rorb
0343 44               (/dd/sourcecode/as):00987                  lsra
0344 56               (/dd/sourcecode/as):00988                  rorb
0345 DDBF             (/dd/sourcecode/as):00989                  std   <grScrtch    Save 4 byte loop ctr
0347 9698             (/dd/sourcecode/as):00990                  lda   <$98         Get value to clear with
0349 D698             (/dd/sourcecode/as):00991                  ldb   <$98         dupe into B
034B 1F01             (/dd/sourcecode/as):00992                  tfr   d,x          Move to X
034D DCBF             (/dd/sourcecode/as):00993                  ldd   <grScrtch    Get loop counters back
034F 8DD5             (/dd/sourcecode/as):00994                  bsr   Blst4Clr     stack blast clear graphics screen
0351 35F0             (/dd/sourcecode/as):00995                  puls  x,y,u,pc     Restore regs & return
                      (/dd/sourcecode/as):00996                ENDC
                      (/dd/sourcecode/as):00997         
                      (/dd/sourcecode/as):00998         **** END OF NEW TEST CODE ****
                      (/dd/sourcecode/as):00999         
                      (/dd/sourcecode/as):01000         * Part of window init routine
                      (/dd/sourcecode/as):01001         * Entry: Y=Window table ptr
                      (/dd/sourcecode/as):01002         *        X=Screen table ptr
0353 CC8900           (/dd/sourcecode/as):01003         L0366    ldd   #(TChr!Scale!Protect)*256 Transparency off & protect/Scale on
0356 E7A818           (/dd/sourcecode/as):01004                  stb   Wt.GBlk,y    Graphics cursor memory block #0
0359 ED29             (/dd/sourcecode/as):01005                  std   Wt.BSW,y     Character switch defaults & Lset type 0
035B E72E             (/dd/sourcecode/as):01006                  stb   Wt.PBlk,y    Pset block #0
                      (/dd/sourcecode/as):01007                IFNE  H6309
                      (/dd/sourcecode/as):01008         * Assembler can't do $10000x#
                      (/dd/sourcecode/as):01009         *         ldq   #(GrfStrt+L1FA9)*65536+(GrfStrt+L1F9E) Normal LSET/PSET vector
                      (/dd/sourcecode/as):01010                  fcb   $cd
                      (/dd/sourcecode/as):01011                  fdb   GrfStrt+L1FA9,GrfStrt+L1F9E
                      (/dd/sourcecode/as):01012                  stq   Wt.LVec,y    Save vectors
                      (/dd/sourcecode/as):01013                ELSE
035D CC6299           (/dd/sourcecode/as):01014                  ldd   #GrfStrt+L1F9E
0360 EDA816           (/dd/sourcecode/as):01015                  std   Wt.LVec+2,y
0363 DDB5             (/dd/sourcecode/as):01016                  std   <$B5
0365 CC5852           (/dd/sourcecode/as):01017                  ldd   #GrfStrt+L1FA9
0368 EDA814           (/dd/sourcecode/as):01018                  std   Wt.LVec,y
                      (/dd/sourcecode/as):01019                ENDC
036B E626             (/dd/sourcecode/as):01020                  ldb   Wt.Fore,y    Get foreground palette #
036D 170387           (/dd/sourcecode/as):01021                  lbsr  L074C        Get bit mask for this color
0370 E726             (/dd/sourcecode/as):01022                  stb   Wt.Fore,y    Store new foreground bit mask
0372 D761             (/dd/sourcecode/as):01023                  stb   <$0061       Store new foreground bit mask in GRFDRV's global
0374 E627             (/dd/sourcecode/as):01024                  ldb   Wt.Back,y    Get background palette #
0376 17037E           (/dd/sourcecode/as):01025                  lbsr  L074C        Get bit mask for this color
0379 E727             (/dd/sourcecode/as):01026                  stb   Wt.Back,y    Store new background bit mask
037B D762             (/dd/sourcecode/as):01027                  stb   <$0062       Store bckground bit mask in GRFDRV's global mem
037D 1703AE           (/dd/sourcecode/as):01028                  lbsr  L079B        Set default attributes to new colors
0380 EC02             (/dd/sourcecode/as):01029                  ldd   St.LStrt,x   Get screen logical start
0382 8D0C             (/dd/sourcecode/as):01030                  bsr   L03A9        Go copy scrn address/X&Y start to defaults area
0384 6F2B             (/dd/sourcecode/as):01031                  clr   Wt.FBlk,y    Font memory block to 0 (no font yet)
                      (/dd/sourcecode/as):01032         * get group & buffer for font
0386 CCC801           (/dd/sourcecode/as):01033                  ldd   #$C801       Default group/buffer number for font
0389 DD57             (/dd/sourcecode/as):01034                  std   <$0057
038B 1702C9           (/dd/sourcecode/as):01035                  lbsr  L0643        Go set up for font
038E 5F               (/dd/sourcecode/as):01036                  clrb               No error and return
038F 39               (/dd/sourcecode/as):01037                  rts   
                      (/dd/sourcecode/as):01038         
                      (/dd/sourcecode/as):01039         * Move screen start address, X & Y coordinate starts of screen to 'default'
                      (/dd/sourcecode/as):01040         *   areas.  The first set is for what the window is currently at (CWArea
                      (/dd/sourcecode/as):01041         *   changes, for example), and the second set is the maximums of the window
                      (/dd/sourcecode/as):01042         *   when it was initialized, and thusly the maximums that can be used until
                      (/dd/sourcecode/as):01043         *   it is DWEnd'ed and DWSet'ed again.
                      (/dd/sourcecode/as):01044         * Entry :x= Screen table ptr
                      (/dd/sourcecode/as):01045         *        y= Window table ptr
                      (/dd/sourcecode/as):01046         *        d= Screen logical start address
0390 1701D5           (/dd/sourcecode/as):01047         L03A9    lbsr  L0581             Go set up window/character sizes
                      (/dd/sourcecode/as):01048                IFNE  H6309
                      (/dd/sourcecode/as):01049                  ldq   Wt.LStrt,y        Get screen start addr. & X coord start
                      (/dd/sourcecode/as):01050                  stq   Wt.LStDf,y        Save as 'window init' values
                      (/dd/sourcecode/as):01051                ELSE
0393 EC33             (/dd/sourcecode/as):01052                  ldd   Wt.LStrt,y
0395 EDA824           (/dd/sourcecode/as):01053                  std   Wt.LStDf,y
0398 EC35             (/dd/sourcecode/as):01054                  ldd   Wt.LStrt+2,y
039A EDA826           (/dd/sourcecode/as):01055                  std   Wt.LStDf+2,y
039D DDB5             (/dd/sourcecode/as):01056                  std   <$B5
                      (/dd/sourcecode/as):01057                ENDC
039F EC37             (/dd/sourcecode/as):01058                  ldd   Wt.SZX,y          Get Y coord start
03A1 EDA828           (/dd/sourcecode/as):01059                  std   Wt.DfSZX,y        Set default Y coord start
03A4 39               (/dd/sourcecode/as):01060                  rts   
                      (/dd/sourcecode/as):01061         
                      (/dd/sourcecode/as):01062         * DWEnd entry point : NOTE: the LDD #$FFFF was a LDD #$FFFE from Kevin
                      (/dd/sourcecode/as):01063         *   Darling's 'christmas' patch. It is supposed to have something to do
                      (/dd/sourcecode/as):01064         *   with INIZ'ed but not screen allocated windows. Or maybe something with
                      (/dd/sourcecode/as):01065         *   overlapping windows?
03A5 17FD52           (/dd/sourcecode/as):01066         L03CB    lbsr  L0177          Go map in window
03A8 CCFFFF           (/dd/sourcecode/as):01067                  ldd   #$FFFF         Set screen table ptr to indicate not active
03AB ED30             (/dd/sourcecode/as):01068                  std   Wt.STbl,y
                      (/dd/sourcecode/as):01069         * This routine checks to see if we are the last window on the current screen
                      (/dd/sourcecode/as):01070         * Carry set if there is there is another window on our screen
                      (/dd/sourcecode/as):01071         * (Originally a subroutine...moved to save 2 bytes & 5 cycles
                      (/dd/sourcecode/as):01072         * Entry: Y=window table ptr
                      (/dd/sourcecode/as):01073         *        X=Screen table ptr?
03AD 3430             (/dd/sourcecode/as):01074         L03FF    pshs  y,x            Preserve window table & screen table ptrs
03AF 3184             (/dd/sourcecode/as):01075                  leay  ,x             Move for ABX
03B1 8E1290           (/dd/sourcecode/as):01076                  ldx   #WinBase       Point to window table entries
03B4 CC2040           (/dd/sourcecode/as):01077                  ldd   #MaxWind*256+Wt.Siz Get # entries & size
03B7 10AC10           (/dd/sourcecode/as):01078         L0407    cmpy  Wt.STbl,x      Keep looking until we find entry on our screen
03BA 2706             (/dd/sourcecode/as):01079                  beq   L0414          Found one, error
03BC 3A               (/dd/sourcecode/as):01080                  abx                  Bump to next one
03BD 4A               (/dd/sourcecode/as):01081                  deca                 Keep doing until all 32 window entries are done
03BE 26F7             (/dd/sourcecode/as):01082                  bne   L0407
03C0 5F               (/dd/sourcecode/as):01083                  clrb                 We were only window on screen, no error
03C1 21               (/dd/sourcecode/as):01084                  fcb   $21            BRN opcode=skip one byte, same speed 1 byte less
03C2 53               (/dd/sourcecode/as):01085         L0414    comb                 Set flag (there is another window on screen)
03C3 3530             (/dd/sourcecode/as):01086         L0415    puls  y,x            Restore window table & screen table ptrs
03C5 2524             (/dd/sourcecode/as):01087                  bcs   L03F4          Not only window, CLS our area before we exit
03C7 8D2C             (/dd/sourcecode/as):01088                  bsr   L0417          Only one, deallocate mem for screen if possible
03C9 109C2E           (/dd/sourcecode/as):01089                  cmpy  <$002E         Our window table ptr same as current ptr?
                      (/dd/sourcecode/as):01090         * Note: The following line was causing our screen to clear which wrote over
                      (/dd/sourcecode/as):01091         * the $FF value we wrote at the beginning to flag the screen memory as free.
                      (/dd/sourcecode/as):01092         * This caused a memory leak in certain situations, like:
                      (/dd/sourcecode/as):01093         * iniz w1 w4;echo>/w1;echo>/w4;deiniz w4 w1
                      (/dd/sourcecode/as):01094         *         bne   L03F4          No, Clear our screen & exit
03CC 2624             (/dd/sourcecode/as):01095                  bne   L03F5          No, just exit
                      (/dd/sourcecode/as):01096                IFNE  H6309
                      (/dd/sourcecode/as):01097                  clrd                 Yes, clear current window & screen table ptrs
                      (/dd/sourcecode/as):01098                  clrw
                      (/dd/sourcecode/as):01099                  stq   <$2E
                      (/dd/sourcecode/as):01100                ELSE
03CE 4F               (/dd/sourcecode/as):01101                  clra
03CF 5F               (/dd/sourcecode/as):01102                  clrb
03D0 DD2E             (/dd/sourcecode/as):01103                  std   <$2E
03D2 DD30             (/dd/sourcecode/as):01104                  std   <$30
03D4 DDB5             (/dd/sourcecode/as):01105                  std   <$B5
                      (/dd/sourcecode/as):01106                ENDC
                      (/dd/sourcecode/as):01107         * Clear palettes to black
03D6 B7FF9A           (/dd/sourcecode/as):01108                  sta   >$ff9a         Border
                      (/dd/sourcecode/as):01109                IFNE  H6309
                      (/dd/sourcecode/as):01110                  stq   >$ffb0         And all palette regs
                      (/dd/sourcecode/as):01111                  stq   >$ffb4
                      (/dd/sourcecode/as):01112                  stq   >$ffb8
                      (/dd/sourcecode/as):01113                  stq   >$ffbc
                      (/dd/sourcecode/as):01114                ELSE
                      (/dd/sourcecode/as):01115         * NEW CODE - 1 byte longer, but faster 
03D9 3470             (/dd/sourcecode/as):01116                  pshs  x,y,u          save regs
03DB 1F01             (/dd/sourcecode/as):01117                  tfr   d,x            X=0 (setting palettes to 0)
03DD CEFFC0           (/dd/sourcecode/as):01118                  ldu   #$FFB0+16      Point to end of palettes+1
03E0 CC0004           (/dd/sourcecode/as):01119                  ldd   #4             Doing 4 sets of 4 byte clears (A=1 to get out of loop)
03E3 17FF40           (/dd/sourcecode/as):01120                  lbsr  Blst4Clr       Clear all 16 to black
03E6 3570             (/dd/sourcecode/as):01121                  puls  x,y,u          2 restore regs=17 bytes
                      (/dd/sourcecode/as):01122                ENDC
03E8 7E50F7           (/dd/sourcecode/as):01123         L03FC    jmp   >GrfStrt+SysRet Return to system
                      (/dd/sourcecode/as):01124         
                      (/dd/sourcecode/as):01125         * CLS our old screen with background color & leave if we weren't only window
                      (/dd/sourcecode/as):01126         *   on the screen (for Multi-Vue, for example)
03EB E607             (/dd/sourcecode/as):01127         L03F4    ldb   St.Back,x      Get background palette reg from screen table
03ED D762             (/dd/sourcecode/as):01128                  stb   <$0062         Put into background RGB Data
03EF 17116F           (/dd/sourcecode/as):01129                  lbsr  L1377          CLS the area we were in
                      (/dd/sourcecode/as):01130         *         clrb                 No errors
03F2 7E50F6           (/dd/sourcecode/as):01131         L03F5     jmp   >GrfStrt+L0F78 Return to system
                      (/dd/sourcecode/as):01132         
                      (/dd/sourcecode/as):01133         * Called by DWEnd if we were only window on physical screen
                      (/dd/sourcecode/as):01134         * Entry: Y=window table ptr
                      (/dd/sourcecode/as):01135         *        X=screen table ptr
03F5 3420             (/dd/sourcecode/as):01136         L0417    pshs  y              Preserve window table pointer
03F7 A684             (/dd/sourcecode/as):01137                  lda   St.Sty,x       Get screen type
03F9 2A22             (/dd/sourcecode/as):01138                  bpl   L043F          Graphics screen, can definately de-allocate
                      (/dd/sourcecode/as):01139         * Text window - could be others still active in 8K block
03FB 10AE02           (/dd/sourcecode/as):01140                  ldy   St.LStrt,x     Get screen phys. addr from screen table
03FE C6FF             (/dd/sourcecode/as):01141                  ldb   #$FF           Mark this part of 8K block as unused
0400 E7A4             (/dd/sourcecode/as):01142                  stb   ,y
0402 8185             (/dd/sourcecode/as):01143                  cmpa  #$85           Is this an 80 column hardware text window?
0404 2606             (/dd/sourcecode/as):01144                  bne   L042E          No, 40 column so just mark the 1 half
0406 31A90800         (/dd/sourcecode/as):01145                  leay  >$0800,y       80 column so mark both halves as unused (since
040A E7A4             (/dd/sourcecode/as):01146                  stb   ,y               routine below checks for 40 column markers)
040C 108E8000         (/dd/sourcecode/as):01147         L042E    ldy   #$8000         Point to first of 4 possible windows in block
                      (/dd/sourcecode/as):01148         * Check if entire 8K block is empty... if it is, deallocate it
0410 E1A4             (/dd/sourcecode/as):01149         L0432    cmpb  ,y             Is this one already marked as unused?
0412 261F             (/dd/sourcecode/as):01150                  bne   L0455          No, can't deallocate block so skip ahead
0414 17FEA9           (/dd/sourcecode/as):01151                  lbsr  L02F1          Yes, move to next text screen start in block
0417 25F7             (/dd/sourcecode/as):01152                  blo   L0432          Not last one, keep checking
0419 C601             (/dd/sourcecode/as):01153                  ldb   #$01           # of memory blocks in this screen
041B 2006             (/dd/sourcecode/as):01154                  bra   L0445          Deallocate the block from used memory pool
                      (/dd/sourcecode/as):01155         * If a graphics screen, get # blocks to deallocate
041D 108E42C8         (/dd/sourcecode/as):01156         L043F    ldy   #GrfStrt+L02FA-1   Get # mem blocks for this screen
0421 E6A6             (/dd/sourcecode/as):01157                  ldb   a,y
                      (/dd/sourcecode/as):01158         * Deallocate memory block(s) from screen since they are now unused
0423 3414             (/dd/sourcecode/as):01159         L0445    pshs  x,b            Preserve screen table ptr & # blocks
0425 4F               (/dd/sourcecode/as):01160                  clra                 clear MSB of D
0426 E601             (/dd/sourcecode/as):01161                  ldb   St.SBlk,x      Get MMU start block # for screen
0428 1F01             (/dd/sourcecode/as):01162                  tfr   d,x            Move to X
042A 3504             (/dd/sourcecode/as):01163                  puls  b              Get back # blocks to deallocate
042C 103F51           (/dd/sourcecode/as):01164                  os9   F$DelRAM       Deallocate the memory
                      (/dd/sourcecode/as):01165         * 03/02/92 MOD: A BAD DELRAM CALL WOULD LEAVE X ON THE STACK WHEN IT BCS'ED
                      (/dd/sourcecode/as):01166         * TO L0458, SO THE PULS & BCS ARE SWAPPED TO SET THE STACK CORRECTLY
042F 3510             (/dd/sourcecode/as):01167                  puls  x              get screen table ptr back
0431 2503             (/dd/sourcecode/as):01168                  bcs   L0458          If error, return with error flags
0433 5F               (/dd/sourcecode/as):01169         L0455    clrb                 No error and set start block # to 0 (to indicate
0434 E701             (/dd/sourcecode/as):01170                  stb   St.SBlk,x       not used)
0436 35A0             (/dd/sourcecode/as):01171         L0458    puls  pc,y           Restore window table ptr & return
                      (/dd/sourcecode/as):01172         
                      (/dd/sourcecode/as):01173         * Part of OWSet
                      (/dd/sourcecode/as):01174         * Entry: Y=New overlay window table ptr
                      (/dd/sourcecode/as):01175         * Exit: Overlay window table ptr on stack, Y=Parent window table ptr
0438 3506             (/dd/sourcecode/as):01176         L045A    puls  d              Get RTS address
043A 3426             (/dd/sourcecode/as):01177                  pshs  y,d            Swap RTS address & Y on stack
043C E632             (/dd/sourcecode/as):01178                  ldb   Wt.BLnk,y      Get parent window #
043E 8640             (/dd/sourcecode/as):01179                  lda   #Wt.Siz        Size of window table entries
0440 3D               (/dd/sourcecode/as):01180                  mul   
0441 108E1290         (/dd/sourcecode/as):01181                  ldy   #WinBase       Point to start of window tables
0445 31AB             (/dd/sourcecode/as):01182                  leay  d,y            Point to parent window entry
0447 39               (/dd/sourcecode/as):01183                  rts   
                      (/dd/sourcecode/as):01184         
                      (/dd/sourcecode/as):01185         * OWSet Entry point
0448 8DEE             (/dd/sourcecode/as):01186         L046A    bsr   L045A          Get parent window table ptr
044A 17FCAD           (/dd/sourcecode/as):01187                  lbsr  L0177          Map in parent window & setup grfdrv mem from it
044D ECE4             (/dd/sourcecode/as):01188                  ldd   ,s             Y=parent, d=overlay
044F 1E20             (/dd/sourcecode/as):01189                  exg   y,d            d=parent, y=overlay
0451 EDE4             (/dd/sourcecode/as):01190                  std   ,s             Stack=Parent window ptr, Y=Overlay window ptr
0453 8D25             (/dd/sourcecode/as):01191                  bsr   L049D          Check legitamacy of overlay coords & size
0455 2520             (/dd/sourcecode/as):01192                  bcs   L049A          Illegal, exit with Illegal Coord error
0457 EC10             (/dd/sourcecode/as):01193                  ldd   Wt.STbl,x      Get root window's screen table ptr
0459 ED30             (/dd/sourcecode/as):01194                  std   Wt.STbl,y      Dupe into overlay window's screen table ptr
045B 8D4E             (/dd/sourcecode/as):01195                  bsr   L04CC          Set up overlay window table from root table
045D D659             (/dd/sourcecode/as):01196                  ldb   <$0059         Save switch on?
045F 270C             (/dd/sourcecode/as):01197                  beq   L0490          No, don't save original area (or clear it)
0461 17008C           (/dd/sourcecode/as):01198                  lbsr  L0516          Calculate sizes
0464 2511             (/dd/sourcecode/as):01199                  bcs   L049A          error, return to system
0466 E627             (/dd/sourcecode/as):01200                  ldb   Wt.Back,y      Get background color
0468 D762             (/dd/sourcecode/as):01201                  stb   <$62           Make current background color
046A 1710F4           (/dd/sourcecode/as):01202                  lbsr  L1377          CLS the overlay window area
046D 3510             (/dd/sourcecode/as):01203         L0490    puls  x              Get parent's window table ptr
046F 9C2E             (/dd/sourcecode/as):01204                  cmpx  <$002E         Is it the current window?
0471 2603             (/dd/sourcecode/as):01205                  bne   L0499          No, exit without error
0473 109F2E           (/dd/sourcecode/as):01206                  sty   <$002E         Make overlay window the current window
0476 5F               (/dd/sourcecode/as):01207         L0499    clrb                 No errors
0477 7E50F7           (/dd/sourcecode/as):01208         L049A    jmp   >GrfStrt+SysRet Return to system
                      (/dd/sourcecode/as):01209         
                      (/dd/sourcecode/as):01210         * Make sure overlay window coords & size are legit
047A 8D1F             (/dd/sourcecode/as):01211         L049D    bsr   L04BA          Get pointer to 'root' device window into X
047C E635             (/dd/sourcecode/as):01212         L049F    ldb   Wt.CPX,y       Get X coord start of overlay window
047E 2B18             (/dd/sourcecode/as):01213                  bmi   L04B7          If >=128 then exit with error
0480 EB37             (/dd/sourcecode/as):01214                  addb  Wt.SZX,y       Add current X size to X start
0482 2514             (/dd/sourcecode/as):01215                  bcs   L04B7          added line: exit if 8-bit overflow
0484 E18828           (/dd/sourcecode/as):01216                  cmpb  Wt.DfSZX,x     Compare with maximum X size allowed
0487 220F             (/dd/sourcecode/as):01217                  bhi   L04B7          Too wide, exit with error
0489 E636             (/dd/sourcecode/as):01218                  ldb   Wt.CPY,y       Get current Y coord start
048B 2B0B             (/dd/sourcecode/as):01219                  bmi   L04B7          If >=128 then exit with error
048D EB38             (/dd/sourcecode/as):01220                  addb  Wt.SZY,y       Add current Y size to Y start
048F 2507             (/dd/sourcecode/as):01221                  bcs   L04B7          added line: exit if 8-bit overflow
0491 E18829           (/dd/sourcecode/as):01222                  cmpb  Wt.DfSZY,x     Compare with maximum Y size allowed
0494 2202             (/dd/sourcecode/as):01223                  bhi   L04B7          Too high, exit with error
0496 5F               (/dd/sourcecode/as):01224                  clrb                 Will fit, exit without error
0497 39               (/dd/sourcecode/as):01225         L04CB    rts   
                      (/dd/sourcecode/as):01226         
0498 7E416F           (/dd/sourcecode/as):01227         L04B7    jmp   >GrfStrt+L01F5 Exit with illegal coordinate error
                      (/dd/sourcecode/as):01228         
                      (/dd/sourcecode/as):01229         * Search for device window entry at the bottom of this set of overlay windows
                      (/dd/sourcecode/as):01230         * Entry: Y=Current window ptr
                      (/dd/sourcecode/as):01231         * Exit:  X=Pointer to 'root' device window (in case of multiple overlays)
049B 30A4             (/dd/sourcecode/as):01232         L04BA    leax  ,y             Move current window ptr to X
049D E612             (/dd/sourcecode/as):01233         L04BC    ldb   Wt.BLnk,x      Get back window # link
049F 2BF6             (/dd/sourcecode/as):01234                  bmi   L04CB          If overlay window itself, skip ahead
04A1 8E1290           (/dd/sourcecode/as):01235                  ldx   #WinBase       Point to start of window tables
04A4 8640             (/dd/sourcecode/as):01236                  lda   #Wt.Siz        Size of each entry
04A6 3D               (/dd/sourcecode/as):01237                  mul                  Calculate address of back window table entry
                      (/dd/sourcecode/as):01238                IFNE  H6309
                      (/dd/sourcecode/as):01239                  addr  d,x
                      (/dd/sourcecode/as):01240                ELSE
04A7 308B             (/dd/sourcecode/as):01241                  leax  d,x
                      (/dd/sourcecode/as):01242                ENDC
04A9 20F2             (/dd/sourcecode/as):01243                  bra   L04BC          Keep looking back until device window is found
                      (/dd/sourcecode/as):01244         
                      (/dd/sourcecode/as):01245         * Set up new overlay window table based on root window information
                      (/dd/sourcecode/as):01246         * Entry: X=root window ptr, Y=overlay window ptr
04AB 6FA811           (/dd/sourcecode/as):01247         L04CC    clr   Wt.OBlk,y      Overlay memory block #=0
04AE 17027D           (/dd/sourcecode/as):01248                  lbsr  L079B          Go make default attribute byte from FG/BG colors
04B1 A608             (/dd/sourcecode/as):01249                  lda   Wt.Attr,x      Get the default attribute byte from root
04B3 84C0             (/dd/sourcecode/as):01250                  anda  #$C0           Mask out all but Blink & Underline
04B5 AA28             (/dd/sourcecode/as):01251                  ora   Wt.Attr,y      Merge with overlay window's colors
04B7 A728             (/dd/sourcecode/as):01252                  sta   Wt.Attr,y      Save new attribute byte
                      (/dd/sourcecode/as):01253                IFNE  H6309
                      (/dd/sourcecode/as):01254                  ldq   Wt.BSW,x       Set up other defaults in overlay based on root
                      (/dd/sourcecode/as):01255                  stq   Wt.BSW,y
                      (/dd/sourcecode/as):01256                  ldq   Wt.LVec,x
                      (/dd/sourcecode/as):01257                  stq   Wt.LVec,y
                      (/dd/sourcecode/as):01258                ELSE
04B9 EC09             (/dd/sourcecode/as):01259                  ldd   Wt.BSW,x
04BB ED29             (/dd/sourcecode/as):01260                  std   Wt.BSW,y
04BD EC0B             (/dd/sourcecode/as):01261                  ldd   Wt.BSW+2,x
04BF ED2B             (/dd/sourcecode/as):01262                  std   Wt.BSW+2,y
04C1 EC8814           (/dd/sourcecode/as):01263                  ldd   Wt.LVec,x
04C4 EDA814           (/dd/sourcecode/as):01264                  std   Wt.LVec,y
04C7 EC8816           (/dd/sourcecode/as):01265                  ldd   Wt.LVec+2,x
04CA EDA816           (/dd/sourcecode/as):01266                  std   Wt.LVec+2,y
                      (/dd/sourcecode/as):01267                ENDC
04CD EC0D             (/dd/sourcecode/as):01268                  ldd   Wt.FOff+1,x
04CF ED2D             (/dd/sourcecode/as):01269                  std   Wt.FOff+1,y
04D1 E68818           (/dd/sourcecode/as):01270                  ldb   Wt.GBlk,x
04D4 E7A818           (/dd/sourcecode/as):01271                  stb   Wt.GBlk,y
04D7 EC8819           (/dd/sourcecode/as):01272                  ldd   Wt.GOff,x
04DA EDA819           (/dd/sourcecode/as):01273                  std   Wt.GOff,y
04DD E626             (/dd/sourcecode/as):01274                  ldb   Wt.Fore,y      Get foreground palette
04DF 170215           (/dd/sourcecode/as):01275                  lbsr  L074C          Get bit mask if gfx window
04E2 E726             (/dd/sourcecode/as):01276                  stb   Wt.Fore,y      Store color or mask
04E4 E627             (/dd/sourcecode/as):01277                  ldb   Wt.Back,y      Get background palette
04E6 17020E           (/dd/sourcecode/as):01278                  lbsr  L074C          Get bit mask if gfx window
04E9 E727             (/dd/sourcecode/as):01279                  stb   Wt.Back,y      Store color or mask
04EB EC13             (/dd/sourcecode/as):01280                  ldd   Wt.LStrt,x     Get screen logical start address
04ED 7E4390           (/dd/sourcecode/as):01281                  jmp   >GrfStrt+L03A9 Set up rest of window table & return
                      (/dd/sourcecode/as):01282         
                      (/dd/sourcecode/as):01283         * Entry: X=root window table ptr
                      (/dd/sourcecode/as):01284         *        Y=Overlay window table ptr
                      (/dd/sourcecode/as):01285         * Exit:  <$4F=X screen size (chars if hware text, pixels if Gfx)
                      (/dd/sourcecode/as):01286         *        <$51=Y screen size (char lines if hware text, pixels if Gfx)
04F0 3410             (/dd/sourcecode/as):01287         L0516    pshs  x              Preserve root window table ptr
04F2 8D57             (/dd/sourcecode/as):01288                  bsr   xy.intoq       get X,Y size for text/gfx into Q
                      (/dd/sourcecode/as):01289                IFNE  H6309
                      (/dd/sourcecode/as):01290                  stq   <$4F           Save X and Y screen size (chars or pixels)
                      (/dd/sourcecode/as):01291                ELSE
04F4 DD4F             (/dd/sourcecode/as):01292                  std   <$4F           Save X screen size
04F6 DCB5             (/dd/sourcecode/as):01293                  ldd   <$B5           Get Y screen size
04F8 DD51             (/dd/sourcecode/as):01294                  std   <$51           Save Y screen size
04FA 964F             (/dd/sourcecode/as):01295                  lda   <$4F           Restore A
                      (/dd/sourcecode/as):01296                ENDC
04FC 5F               (/dd/sourcecode/as):01297                  clrb  
04FD DD47             (/dd/sourcecode/as):01298                  std   <$0047         Set current X coordinate to 0
04FF 1706B6           (/dd/sourcecode/as):01299                  lbsr  L0BEA          Calculate # bytes wide overlay is
0502 3590             (/dd/sourcecode/as):01300                  puls  pc,x           Restore root window table ptr & return
                      (/dd/sourcecode/as):01301         
                      (/dd/sourcecode/as):01302         * OWEnd entry point
0504 17FBF3           (/dd/sourcecode/as):01303         L053A    lbsr  L0177          Map in window & set up Grfdrv mem from it
0507 109C2E           (/dd/sourcecode/as):01304                  cmpy  <$2E           Is this the current interactive window?
050A 2608             (/dd/sourcecode/as):01305                  bne   L054A          No, skip ahead
050C 17FF29           (/dd/sourcecode/as):01306                  lbsr  L045A          Yes, get parent window tbl ptr into Y
050F 109F2E           (/dd/sourcecode/as):01307                  sty   <$002E         Make parent window the new interactive window
0512 3520             (/dd/sourcecode/as):01308                  puls  y              Get overlay window tbl ptr back
0514 E6A811           (/dd/sourcecode/as):01309         L054A    ldb   Wt.OBlk,y      Get MMU block # of overlay window
0517 2713             (/dd/sourcecode/as):01310                  beq   L0562          If none, save switch was off, so skip ahead
0519 171305           (/dd/sourcecode/as):01311                  lbsr  L017C          Map in get/put block
051C D77D             (/dd/sourcecode/as):01312                  stb   <$007D         Save block #
051E ECA812           (/dd/sourcecode/as):01313                  ldd   Wt.OOff,y      Get ptr to buffer start in block
0521 DD7E             (/dd/sourcecode/as):01314                  std   <$007E         Save that too
0523 1707D9           (/dd/sourcecode/as):01315                  lbsr  L0CF8          Go put it back on the screen
0526 170376           (/dd/sourcecode/as):01316                  lbsr  L092B          Hunt down the overlay window GP Buffer
0529 170498           (/dd/sourcecode/as):01317                  lbsr  L0A55          Kill the buffer (free it up)
052C CCFFFF           (/dd/sourcecode/as):01318         L0562    ldd   #$FFFF         Mark window table entry as unused
052F ED30             (/dd/sourcecode/as):01319                  std   Wt.STbl,y
0531 2014             (/dd/sourcecode/as):01320                  bra   L057D          Exit without error
                      (/dd/sourcecode/as):01321         
0533 53               (/dd/sourcecode/as):01322         L0569    comb  
0534 C6C0             (/dd/sourcecode/as):01323                  ldb   #E$IllCmd      Exit with Illegal Command error
0536 2010             (/dd/sourcecode/as):01324                  bra   L057E
                      (/dd/sourcecode/as):01325         
                      (/dd/sourcecode/as):01326         * CWArea entry point
0538 17FBBF           (/dd/sourcecode/as):01327         L056E    lbsr  L0177          Map in the window
053B 30A4             (/dd/sourcecode/as):01328                  leax  ,y             Move window tbl ptr to X
053D 17FF3C           (/dd/sourcecode/as):01329                  lbsr  L049F          Make sure coords will fit in orig. window sizes
0540 2506             (/dd/sourcecode/as):01330                  bcs   L057E          No, exit with error
0542 ECA824           (/dd/sourcecode/as):01331                  ldd   Wt.LStDf,y     get screen logical start
0545 8D21             (/dd/sourcecode/as):01332                  bsr   L0581          go do it
0547 5F               (/dd/sourcecode/as):01333         L057D    clrb                 No error
0548 7E50F7           (/dd/sourcecode/as):01334         L057E    jmp   >GrfStrt+SysRet return to system
                      (/dd/sourcecode/as):01335         
                      (/dd/sourcecode/as):01336         * This routine is ONLY called from L0516 (CWArea) and L0581 (OWSet)
                      (/dd/sourcecode/as):01337         * As these routines are not called too often, we can add 10 clock cycles
054B 4F               (/dd/sourcecode/as):01338         xy.intoq clra                 clear carry for ROLW, below
054C E638             (/dd/sourcecode/as):01339                  ldb   Wt.SZY,y       Get current Y size of overlay window into W
                      (/dd/sourcecode/as):01340                IFNE  H6309
                      (/dd/sourcecode/as):01341                  tfr   d,w            move Y-size into W
                      (/dd/sourcecode/as):01342                ELSE
054E DDB5             (/dd/sourcecode/as):01343                  std   <$B5
                      (/dd/sourcecode/as):01344                ENDC
0550 E637             (/dd/sourcecode/as):01345                  ldb   Wt.SZX,y       Get current X size of overlay window into D
0552 0D60             (/dd/sourcecode/as):01346                  tst   <$60           Test screen type
0554 2B11             (/dd/sourcecode/as):01347                  bmi   L0530          If hardware text, exit without doing more shifts
                      (/dd/sourcecode/as):01348                IFNE  H6309
                      (/dd/sourcecode/as):01349                  rolw                 multiply by 8 for # pixels down
                      (/dd/sourcecode/as):01350                  rolw
                      (/dd/sourcecode/as):01351                  rolw                 E=$00 and CC.C=0 from above,so this is really ASLW
                      (/dd/sourcecode/as):01352                  lslb                 Multiply by 8 for # pixels across
                      (/dd/sourcecode/as):01353                  lsld                 A=$00 from CLRA, above.  Max 80
                      (/dd/sourcecode/as):01354                  lsld
                      (/dd/sourcecode/as):01355                ELSE
0556 08B6             (/dd/sourcecode/as):01356                  lsl   <$B6
0558 09B5             (/dd/sourcecode/as):01357                  rol   <$B5
055A 08B6             (/dd/sourcecode/as):01358                  lsl   <$B6
055C 09B5             (/dd/sourcecode/as):01359                  rol   <$B5
055E 08B6             (/dd/sourcecode/as):01360                  lsl   <$B6
0560 09B5             (/dd/sourcecode/as):01361                  rol   <$B5
0562 58               (/dd/sourcecode/as):01362                  lslb
0563 58               (/dd/sourcecode/as):01363                  lslb
0564 49               (/dd/sourcecode/as):01364                  rola
0565 58               (/dd/sourcecode/as):01365                  lslb
0566 49               (/dd/sourcecode/as):01366                  rola
                      (/dd/sourcecode/as):01367                ENDC
0567 39               (/dd/sourcecode/as):01368         L0530    rts
                      (/dd/sourcecode/as):01369         
                      (/dd/sourcecode/as):01370         * Entry :x= Screen table ptr
                      (/dd/sourcecode/as):01371         *        y= Window table ptr
                      (/dd/sourcecode/as):01372         *        d= Screen logical start address
0568 3416             (/dd/sourcecode/as):01373         L0581    pshs  d,x          Preserve Screen start & screen tbl ptr
056A D660             (/dd/sourcecode/as):01374                  ldb   <$0060       get STY marker
056C C40F             (/dd/sourcecode/as):01375                  andb  #$0F         keep only first 4 bits
056E 8E45C2           (/dd/sourcecode/as):01376                  ldx   #GrfStrt+L05E1-1  Point to # bytes/text char table
0571 E685             (/dd/sourcecode/as):01377                  ldb   b,x          get number bytes/char
0573 E723             (/dd/sourcecode/as):01378                  stb   Wt.CWTmp,y   Preserve # bytes/char
0575 A637             (/dd/sourcecode/as):01379                  lda   Wt.SZX,y     get current X size (of window)
0577 3D               (/dd/sourcecode/as):01380                  mul                Calculate # bytes wide window is
0578 E722             (/dd/sourcecode/as):01381                  stb   Wt.XBCnt,y   Preserve #bytes wide window is
057A 4F               (/dd/sourcecode/as):01382                  clra               #bytes per row MSB to 0
057B D663             (/dd/sourcecode/as):01383                  ldb   <$0063       Get #bytes per row on screen
057D 0D60             (/dd/sourcecode/as):01384                  tst   <$0060       Text or graphics screen?
057F 2B06             (/dd/sourcecode/as):01385                  bmi   L05A1        If text, we already have # bytes per row
                      (/dd/sourcecode/as):01386                IFNE  H6309
                      (/dd/sourcecode/as):01387                  lsld               If graphics, multiply x 8 since each text row
                      (/dd/sourcecode/as):01388                  lsld               is 8 sets of lines
                      (/dd/sourcecode/as):01389                  lsld
                      (/dd/sourcecode/as):01390                ELSE
0581 58               (/dd/sourcecode/as):01391                  lslb
0582 49               (/dd/sourcecode/as):01392                  rola
0583 58               (/dd/sourcecode/as):01393                  lslb
0584 49               (/dd/sourcecode/as):01394                  rola
0585 58               (/dd/sourcecode/as):01395                  lslb
0586 49               (/dd/sourcecode/as):01396                  rola
                      (/dd/sourcecode/as):01397                ENDC
0587 ED24             (/dd/sourcecode/as):01398         L05A1    std   Wt.BRow,y    Preserve # bytes/text row (8 lines if gfx)
0589 4F               (/dd/sourcecode/as):01399                  clra
058A E636             (/dd/sourcecode/as):01400                  ldb   Wt.CPY,y     Get Upper left Y coord of window
                      (/dd/sourcecode/as):01401                IFNE  H6309
                      (/dd/sourcecode/as):01402                  muld  Wt.BRow,y    Calculate Y coordinate start
                      (/dd/sourcecode/as):01403                  stw   <$0097       save Y offset
                      (/dd/sourcecode/as):01404                ELSE
058C 3470             (/dd/sourcecode/as):01405                  pshs  x,y,u
058E AE24             (/dd/sourcecode/as):01406                  ldx   Wt.BRow,y
0590 1718C1           (/dd/sourcecode/as):01407                  lbsr  MUL16
0593 DF97             (/dd/sourcecode/as):01408                  stu   <$97
0595 DFB5             (/dd/sourcecode/as):01409                  stu   <$B5
0597 3570             (/dd/sourcecode/as):01410                  puls  x,y,u
                      (/dd/sourcecode/as):01411                ENDC
0599 A635             (/dd/sourcecode/as):01412                  lda   Wt.CPX,y     get X coordinate start
059B E623             (/dd/sourcecode/as):01413                  ldb   Wt.CWTmp,y   get # bytes per text character
059D 3D               (/dd/sourcecode/as):01414                  mul                calculate where X starts
059E E3E1             (/dd/sourcecode/as):01415                  addd  ,s++         add it to screen start address
05A0 D397             (/dd/sourcecode/as):01416                  addd  <$0097       add in Y offset
05A2 ED33             (/dd/sourcecode/as):01417                  std   Wt.LStrt,y   get screen logical start
05A4 170E52           (/dd/sourcecode/as):01418                  lbsr  L11E1        home cursor
05A7 D660             (/dd/sourcecode/as):01419                  ldb   <$0060       get STY marker
05A9 2B02             (/dd/sourcecode/as):01420                  bmi   L05C0        text, don't need scale factor
05AB 8D22             (/dd/sourcecode/as):01421                  bsr   L05E7        calculate scaling factor
                      (/dd/sourcecode/as):01422         * Calculate window X size in either pixels or characters
                      (/dd/sourcecode/as):01423         * Q is D:W  D=X size, W=Y size
05AD 8D9C             (/dd/sourcecode/as):01424         L05C0    bsr   xy.intoq     get X and Y for text/gfx into Q
                      (/dd/sourcecode/as):01425                IFNE  H6309
                      (/dd/sourcecode/as):01426                  decw               adjust Y to start at 0
                      (/dd/sourcecode/as):01427                  decd               adjust X to start at 0
                      (/dd/sourcecode/as):01428                  stq   Wt.MaxX,y    save maximum X co-ordinate
                      (/dd/sourcecode/as):01429                  puls  x,pc         restore & return
                      (/dd/sourcecode/as):01430                ELSE
05AF 830001           (/dd/sourcecode/as):01431                  subd  #1
05B2 EDA81B           (/dd/sourcecode/as):01432                  std   Wt.MaxX,y
05B5 3406             (/dd/sourcecode/as):01433                  pshs  d
05B7 DCB5             (/dd/sourcecode/as):01434                  ldd   <$B5
05B9 830001           (/dd/sourcecode/as):01435                  subd  #1
05BC DDB5             (/dd/sourcecode/as):01436                  std   <$B5
05BE EDA81D           (/dd/sourcecode/as):01437                  std   Wt.MaxX+2,y
05C1 3596             (/dd/sourcecode/as):01438                  puls  d,x,pc
                      (/dd/sourcecode/as):01439                ENDC
                      (/dd/sourcecode/as):01440         
                      (/dd/sourcecode/as):01441         * # bytes for each text char
05C3 01               (/dd/sourcecode/as):01442         L05E1    fcb   $01          640 2 color
05C4 02               (/dd/sourcecode/as):01443                  fcb   $02          320 4 color
05C5 02               (/dd/sourcecode/as):01444                  fcb   $02          640 4 color
05C6 04               (/dd/sourcecode/as):01445                  fcb   $04          320 16 color
05C7 02               (/dd/sourcecode/as):01446                  fcb   $02          80 column text (includes attribute byte)
05C8 02               (/dd/sourcecode/as):01447                  fcb   $02          40 column text (includes attribute byte)
                      (/dd/sourcecode/as):01448         
                      (/dd/sourcecode/as):01449         * Graphic window scaling constants (When multiplied by the maximum width/
                      (/dd/sourcecode/as):01450         * height of the screen in characters, they equal 256. The resulting figure
                      (/dd/sourcecode/as):01451         * is rounded up by 1 if the result has a fraction >=.8.
                      (/dd/sourcecode/as):01452         * The resulting rounded figure (1 byte long) is then used by multiplying
                      (/dd/sourcecode/as):01453         * it with the coordinate requested, and then dividing by 256 (dropping
                      (/dd/sourcecode/as):01454         * the least significiant byte). The resulting 2 byte number is the scaled
                      (/dd/sourcecode/as):01455         * coordinate to actually use.)
                      (/dd/sourcecode/as):01456         * The actual scaling factor is a 16x8 bit multiply (Scale factor by # of
                      (/dd/sourcecode/as):01457         * columns/rows) into a 3 byte #. If the LSB is >=$CD (.8), then round up
                      (/dd/sourcecode/as):01458         * the 2nd byte by 1 (MSB is unused). The 2nd byte is the scaling factor.
                      (/dd/sourcecode/as):01459         * X scaling constants for 640x screen
05C9 0333             (/dd/sourcecode/as):01460         XSclMSB  fdb   $0333          X Scaling factor (~3.2)
                      (/dd/sourcecode/as):01461         
                      (/dd/sourcecode/as):01462         * Y scaling constants (note: fractional part of 200 line has changed from
                      (/dd/sourcecode/as):01463         * $3f to $3e, since that is closer to get the 256 mod value)
05CB 0AAB             (/dd/sourcecode/as):01464         YScl192  fdb   $0AAB          Y Scaling factor for 192 row scrn (~10.668)
05CD 0A3E             (/dd/sourcecode/as):01465         YScl200  fdb   $0A3E          Y Scaling factor for 200 row scrn (~10.2422)
                      (/dd/sourcecode/as):01466         
                      (/dd/sourcecode/as):01467         * Calculate scaling factors for a graphics window (# row/columns*scale factor)
                      (/dd/sourcecode/as):01468         * Must be as close to 256 as possible
05CF 4F               (/dd/sourcecode/as):01469         L05E7    clra               D=# of columns
05D0 E637             (/dd/sourcecode/as):01470                  ldb   Wt.SZX,y
                      (/dd/sourcecode/as):01471                IFNE  H6309
                      (/dd/sourcecode/as):01472                  muld  <XSclMSB,pc  Multiply by X scaling factor
                      (/dd/sourcecode/as):01473                  cmpf  #$cd         Need to round it up if >=.8?
                      (/dd/sourcecode/as):01474                ELSE
05D2 3470             (/dd/sourcecode/as):01475                  pshs  x,y,u
05D4 AE8CF2           (/dd/sourcecode/as):01476                  ldx   <XSclMSB,pc
05D7 17187A           (/dd/sourcecode/as):01477                  lbsr  MUL16
05DA DFB5             (/dd/sourcecode/as):01478                  stu   <$B5
05DC 1F30             (/dd/sourcecode/as):01479                  tfr   u,d
05DE C1CD             (/dd/sourcecode/as):01480                  cmpb  #$cd         Need to round it up if >=/8?
05E0 1F20             (/dd/sourcecode/as):01481                  tfr   y,d
05E2 3570             (/dd/sourcecode/as):01482                  puls  x,y,u
                      (/dd/sourcecode/as):01483                ENDC
05E4 2502             (/dd/sourcecode/as):01484                  blo   saveXscl     No, save result
                      (/dd/sourcecode/as):01485                IFNE  H6309
                      (/dd/sourcecode/as):01486                  ince               Round it up
05E6                  (/dd/sourcecode/as):01487         saveXscl ste   Wt.SXFct,y   Save X scaling multiplier
                      (/dd/sourcecode/as):01488                ELSE
05E6 0CB5             (/dd/sourcecode/as):01489                  inc   <$B5
                      (/dd/sourcecode/as):01490         * 6809 - sta <grScrtch / lda <grSctch
05E8 97BF             (/dd/sourcecode/as):01491         saveXscl sta   <grScrtch
05EA 96B5             (/dd/sourcecode/as):01492                  lda   <$B5
05EC A739             (/dd/sourcecode/as):01493                  sta   Wt.SXFct,y
05EE 96BF             (/dd/sourcecode/as):01494                  lda   <grScrtch
                      (/dd/sourcecode/as):01495                ENDC
05F0 E638             (/dd/sourcecode/as):01496                  ldb   Wt.SZY,y     D=# of rows (A=0 from MULD already)
05F2 C119             (/dd/sourcecode/as):01497                  cmpb  #25          Is it the full 25 lines?
05F4 2510             (/dd/sourcecode/as):01498                  blo   useold       No, use old scaling factor for compatibility
                      (/dd/sourcecode/as):01499                IFNE  H6309
                      (/dd/sourcecode/as):01500                  muld  <YScl200,pc  Multiply by 200 line Y scaling factor
                      (/dd/sourcecode/as):01501                ELSE
05F6 3470             (/dd/sourcecode/as):01502                  pshs  x,y,u
05F8 AE8CD2           (/dd/sourcecode/as):01503                  ldx   <YScl200,pc
05FB 171856           (/dd/sourcecode/as):01504                  lbsr  MUL16
05FE DFB5             (/dd/sourcecode/as):01505                  stu   <$B5
0600 1F20             (/dd/sourcecode/as):01506                  tfr   y,d
0602 3570             (/dd/sourcecode/as):01507                  puls  x,y,u
                      (/dd/sourcecode/as):01508                ENDC
0604 200E             (/dd/sourcecode/as):01509                  bra   chkrnd
                      (/dd/sourcecode/as):01510         
     0606             (/dd/sourcecode/as):01511         useold   equ   *
                      (/dd/sourcecode/as):01512                IFNE  H6309
                      (/dd/sourcecode/as):01513                  muld  <YScl192,pc  Multiply by 192 line Y scaling factor
                      (/dd/sourcecode/as):01514                ELSE
0606 3470             (/dd/sourcecode/as):01515                  pshs  x,y,u
0608 AE8CC0           (/dd/sourcecode/as):01516                  ldx   <YScl192,pc
060B 171846           (/dd/sourcecode/as):01517                  lbsr  MUL16
060E DFB5             (/dd/sourcecode/as):01518                  stu   <$B5
0610 1F20             (/dd/sourcecode/as):01519                  tfr   y,d
0612 3570             (/dd/sourcecode/as):01520                  puls  x,y,u
                      (/dd/sourcecode/as):01521                ENDC
     0614             (/dd/sourcecode/as):01522         chkrnd   equ   *
                      (/dd/sourcecode/as):01523                IFNE  H6309
                      (/dd/sourcecode/as):01524                  cmpf  #$cd         Need to round it up if >=.8?
                      (/dd/sourcecode/as):01525                ELSE
0614 3404             (/dd/sourcecode/as):01526                  pshs  b
0616 D6B6             (/dd/sourcecode/as):01527                  ldb   <$B6
0618 C1CD             (/dd/sourcecode/as):01528                  cmpb  #$cd         Need to round it up if >=.8?
061A 3504             (/dd/sourcecode/as):01529                  puls  b
                      (/dd/sourcecode/as):01530                ENDC
061C 2502             (/dd/sourcecode/as):01531                  blo   saveYscl     No, save result
                      (/dd/sourcecode/as):01532                IFNE  H6309
                      (/dd/sourcecode/as):01533                  ince               Round it up
                      (/dd/sourcecode/as):01534                ELSE
061E 0CB5             (/dd/sourcecode/as):01535                  inc   <$B5
                      (/dd/sourcecode/as):01536                ENDC
     0620             (/dd/sourcecode/as):01537         saveYscl equ   *
                      (/dd/sourcecode/as):01538                IFNE  H6309
                      (/dd/sourcecode/as):01539                  ste   Wt.SYFct,y   Save Y scaling multiplier
                      (/dd/sourcecode/as):01540                ELSE
                      (/dd/sourcecode/as):01541         * 6809 - *MIGHT* be able to use sta <grScrtch / lda <grScrtch here
0620 3402             (/dd/sourcecode/as):01542                  pshs  a
0622 96B5             (/dd/sourcecode/as):01543                  lda   <$B5
0624 A73A             (/dd/sourcecode/as):01544                  sta   Wt.SYFct,y
0626 3502             (/dd/sourcecode/as):01545                  puls  a
                      (/dd/sourcecode/as):01546                ENDC
0628 39               (/dd/sourcecode/as):01547                  rts
                      (/dd/sourcecode/as):01548         
                      (/dd/sourcecode/as):01549         * PSet entry point - Change <$16,y vector to proper pattern drawing
0629 D657             (/dd/sourcecode/as):01550         L0611    ldb   <$0057       get group mem block #
062B 2607             (/dd/sourcecode/as):01551                  bne   L061D        If a pattern is wanted, go find it
062D E72E             (/dd/sourcecode/as):01552                  stb   Wt.PBlk,y    Set memory block # to 0 (PSET patterning off)
062F 8E6299           (/dd/sourcecode/as):01553                  ldx   #GrfStrt+L1F9E  Point to normal PSET vector
0632 2015             (/dd/sourcecode/as):01554                  bra   L0635        Go preserve vector & exit without error
                      (/dd/sourcecode/as):01555         
0634 17026D           (/dd/sourcecode/as):01556         L061D    lbsr  L0930        Go search buffers for the one we want
0637 251B             (/dd/sourcecode/as):01557                  bcs   L0639        If the buffer doesn't exist, exit with error
0639 E72E             (/dd/sourcecode/as):01558                  stb   Wt.PBlk,y    Save PSET block #
063B 308820           (/dd/sourcecode/as):01559                  leax  Grf.Siz,x    Skip Gfx buffer header
063E AF2F             (/dd/sourcecode/as):01560                  stx   Wt.POff,y    Save offset to actual graphics data
0640 E6B8F0           (/dd/sourcecode/as):01561                  ldb   [Wt.STbl,y]  Get screen type from screen table
0643 8E6266           (/dd/sourcecode/as):01562                  ldx   #GrfStrt+L1FB4-1  Point to table (-1 since scrn type 0 illegal)
0646 E685             (/dd/sourcecode/as):01563                  ldb   b,x          Get unsigned offset for vector calculation
0648 3A               (/dd/sourcecode/as):01564                  abx                Calculate address of vector
0649 AFA816           (/dd/sourcecode/as):01565         L0635    stx   Wt.PVec,y    Preserve PSET vector
064C 7E50F6           (/dd/sourcecode/as):01566         L0638    jmp   >GrfStrt+L0F78 Return to system, without any errors
                      (/dd/sourcecode/as):01567         
                      (/dd/sourcecode/as):01568         * Font entry point
064F 17FAA8           (/dd/sourcecode/as):01569         L063C    lbsr  L0177        Map in window
0652 8D03             (/dd/sourcecode/as):01570                  bsr   L0643        Go set font group #
0654 7E50F7           (/dd/sourcecode/as):01571         L0639    jmp   >GrfStrt+SysRet Return to system
                      (/dd/sourcecode/as):01572         
0657 D657             (/dd/sourcecode/as):01573         L0643    ldb   <$0057       get block number for font buffer
0659 2603             (/dd/sourcecode/as):01574                  bne   L064A        If there is one, go set it up
065B E72B             (/dd/sourcecode/as):01575                  stb   Wt.FBlk,y    Set font memory block # to 0 (no fonts)
065D 39               (/dd/sourcecode/as):01576                  rts   
                      (/dd/sourcecode/as):01577         
065E 170B2B           (/dd/sourcecode/as):01578         L064A    lbsr  L1002        Go set the font ('.' font default if none)
0661 170240           (/dd/sourcecode/as):01579                  lbsr  L0930        Search buffers for proper one
0664 252F             (/dd/sourcecode/as):01580                  bcs   L0684        Error, skip ahead
0666 3414             (/dd/sourcecode/as):01581                  pshs  x,b          Preserve graphics buffer table ptr & b
                      (/dd/sourcecode/as):01582         * 6809/6309 - Since we already have proportional fonts, we should be able to make this
                      (/dd/sourcecode/as):01583         *  more variable in width, using existing routines. Y is easy to implement, except do we
                      (/dd/sourcecode/as):01584         *  still force windows to be even sets of 8 high for other calcs (like window sizes for overlays)?
0668 EC07             (/dd/sourcecode/as):01585                  ldd   Grf.XSz,x    Get X size of buffer
066A 10830006         (/dd/sourcecode/as):01586                  cmpd  #6           6 pixel wide buffer?
066E 2706             (/dd/sourcecode/as):01587                  beq   L0662        Yes, go on
0670 10830008         (/dd/sourcecode/as):01588                  cmpd  #8           8 pixel wide buffer?
0674 2620             (/dd/sourcecode/as):01589                  bne   L0685        Not a font, report buffer # error
                      (/dd/sourcecode/as):01590         * It is a buffer size that matches those acceptable to fonts
0676 EC09             (/dd/sourcecode/as):01591         L0662    ldd   Grf.YSz,x    Get Y size of buffer
0678 10830008         (/dd/sourcecode/as):01592                  cmpd  #8           8 pixel high buffer?
067C 2618             (/dd/sourcecode/as):01593                  bne   L0685        No, report buffer # error
067E E70B             (/dd/sourcecode/as):01594                  stb   Grf.XBSz,x   Preserve font height
0680 EC07             (/dd/sourcecode/as):01595                  ldd   Grf.XSz,x    Get X size of buffer again
0682 10936E           (/dd/sourcecode/as):01596                  cmpd  <$006E       Get X pixel count
0685 2707             (/dd/sourcecode/as):01597                  beq   L067D        Same, set up normally
0687 E62B             (/dd/sourcecode/as):01598                  ldb   Wt.FBlk,y    Check font block #
0689 2703             (/dd/sourcecode/as):01599                  beq   L067D        If there is none, exit normally (pointing to '.')
068B 170D58           (/dd/sourcecode/as):01600                  lbsr  L11CD        If not, do CR & set up width of line
068E 3514             (/dd/sourcecode/as):01601         L067D    puls  x,b          Get back regs
0690 E72B             (/dd/sourcecode/as):01602                  stb   Wt.FBlk,y    Store block # where font is
0692 AF2C             (/dd/sourcecode/as):01603                  stx   Wt.FOff,y    Store offset to font within 8K block
0694 5F               (/dd/sourcecode/as):01604                  clrb               No error and return
0695 39               (/dd/sourcecode/as):01605         L0684    rts   
                      (/dd/sourcecode/as):01606         
                      (/dd/sourcecode/as):01607         * Can't do font
0696 3514             (/dd/sourcecode/as):01608         L0685    puls  x,b          Get block # and graphics table buffer ptr back
0698 C6C2             (/dd/sourcecode/as):01609                  ldb   #E$BadBuf    bad buffer # error
069A 43               (/dd/sourcecode/as):01610                  coma               Set error flag
069B 39               (/dd/sourcecode/as):01611                  rts   
                      (/dd/sourcecode/as):01612         
                      (/dd/sourcecode/as):01613         * GCSet entry point
069C 17FA5B           (/dd/sourcecode/as):01614         L068B    lbsr  L0177        Map in window
069F D657             (/dd/sourcecode/as):01615                  ldb   <$0057       Get group # for graphics cursor
06A1 2605             (/dd/sourcecode/as):01616                  bne   L0697        There is one, go process
06A3 E7A818           (/dd/sourcecode/as):01617                  stb   Wt.GBlk,y    Set to 0 to flag that graphics cursor is off
06A6 20AC             (/dd/sourcecode/as):01618                  bra   L0639        Return to system
06A8 1701F9           (/dd/sourcecode/as):01619         L0697    lbsr  L0930        Go search graphics buffers for the one we want
06AB 25A7             (/dd/sourcecode/as):01620                  bcs   L0639        Can't find, return to system with error
06AD E7A818           (/dd/sourcecode/as):01621                  stb   Wt.GBlk,y    Store block # of graphics cursor
06B0 AFA819           (/dd/sourcecode/as):01622                  stx   Wt.GOff,y    Store offset into block for graphics cursor
06B3 2097             (/dd/sourcecode/as):01623                  bra   L0638        Return to system with no errors
                      (/dd/sourcecode/as):01624         
                      (/dd/sourcecode/as):01625         * FColor entry point
06B5 E6B8F0           (/dd/sourcecode/as):01626         L0707    ldb   [Wt.STbl,y]   Get screen type from screen table
06B8 D760             (/dd/sourcecode/as):01627                  stb   <$0060        Save as current screen type
06BA D65A             (/dd/sourcecode/as):01628                  ldb   <$005A        Get palette number from user
06BC 8D39             (/dd/sourcecode/as):01629                  bsr   L074C         Go get mask for it
06BE E726             (/dd/sourcecode/as):01630                  stb   Wt.Fore,y     Save foreground palette #
                      (/dd/sourcecode/as):01631                IFNE  H6309
                      (/dd/sourcecode/as):01632                  tim   #Invers,Wt.BSW,y Inverse on?
                      (/dd/sourcecode/as):01633                ELSE
06C0 E629             (/dd/sourcecode/as):01634                  ldb   Wt.BSW,y      regB does not need to be preserved
06C2 C504             (/dd/sourcecode/as):01635                  bitb  #Invers
                      (/dd/sourcecode/as):01636                ENDC
06C4 261E             (/dd/sourcecode/as):01637                  bne   L0738         Yes, go process for that
06C6 D65A             (/dd/sourcecode/as):01638         L0719    ldb   <$005A        get palette register number
06C8 58               (/dd/sourcecode/as):01639                  lslb                Move into foreground of attribute byte
06C9 58               (/dd/sourcecode/as):01640                  lslb  
06CA 58               (/dd/sourcecode/as):01641                  lslb  
06CB C438             (/dd/sourcecode/as):01642                  andb  #$38          Clear out blink/underline & background
06CD A628             (/dd/sourcecode/as):01643                  lda   Wt.Attr,y     Get default attributes
06CF 84C7             (/dd/sourcecode/as):01644                  anda  #$C7          Mask out foreground
06D1 2019             (/dd/sourcecode/as):01645                  bra   L0742         OR in new foreground
                      (/dd/sourcecode/as):01646         
                      (/dd/sourcecode/as):01647         * BColor entry point
06D3 E6B8F0           (/dd/sourcecode/as):01648         L0726    ldb   [Wt.STbl,y]   Get screen type from screen table
06D6 D760             (/dd/sourcecode/as):01649                  stb   <$0060        save it in global
06D8 D65A             (/dd/sourcecode/as):01650                  ldb   <$005A        get palette register #
06DA 8D1B             (/dd/sourcecode/as):01651                  bsr   L074C
06DC E727             (/dd/sourcecode/as):01652                  stb   Wt.Back,y     save background into window table
                      (/dd/sourcecode/as):01653                IFNE  H6309
                      (/dd/sourcecode/as):01654                  tim   #Invers,Wt.BSW,y Inverse on?
                      (/dd/sourcecode/as):01655                ELSE
06DE E629             (/dd/sourcecode/as):01656                  ldb   Wt.BSW,y      regB does not need to be preserved
06E0 C504             (/dd/sourcecode/as):01657                  bitb  #Invers
                      (/dd/sourcecode/as):01658                ENDC
06E2 26E2             (/dd/sourcecode/as):01659                  bne   L0719        If set, do masking to switch fore/bck ground colors
                      (/dd/sourcecode/as):01660         
06E4 D65A             (/dd/sourcecode/as):01661         L0738    ldb   <$005A       Get palette register #
06E6 C407             (/dd/sourcecode/as):01662                  andb  #$07         Force to 0-7 only
06E8 A628             (/dd/sourcecode/as):01663                  lda   Wt.Attr,y    Get default attributes
06EA 84F8             (/dd/sourcecode/as):01664                  anda  #$F8         Mask out background
     06EC             (/dd/sourcecode/as):01665         L0742    equ   *
                      (/dd/sourcecode/as):01666                IFNE  H6309
                      (/dd/sourcecode/as):01667                  orr   b,a          Merge the color into attribute byte
                      (/dd/sourcecode/as):01668                ELSE
06EC D7BF             (/dd/sourcecode/as):01669                  stb   <grScrtch
06EE 9ABF             (/dd/sourcecode/as):01670                  ora   <grScrtch
                      (/dd/sourcecode/as):01671                ENDC
06F0 A728             (/dd/sourcecode/as):01672                  sta   Wt.Attr,y    Store new default attribute
06F2 0FA9             (/dd/sourcecode/as):01673         L0748    clr   <$A9         No error, clear flag & return to system
06F4 7E50F7           (/dd/sourcecode/as):01674                  jmp   >GrfStrt+SysRet
                      (/dd/sourcecode/as):01675         
                      (/dd/sourcecode/as):01676         * Convert color to allowable ones for screen type
                      (/dd/sourcecode/as):01677         * NOTE: see if we can swap a/b roles to allow ABX instead of LEAX A,X
                      (/dd/sourcecode/as):01678         * Entry: B=color # to get mask for
                      (/dd/sourcecode/as):01679         * Exit:  B=full byte mask for color (based on screen type)
06F7 3412             (/dd/sourcecode/as):01680         L074C    pshs  x,a          Preserve screen table ptr & a
06F9 9660             (/dd/sourcecode/as):01681                  lda   <$0060       get STY marker
06FB 2B0B             (/dd/sourcecode/as):01682                  bmi   L075D        text or same screen, return
06FD 8E4709           (/dd/sourcecode/as):01683                  ldx   #GrfStrt+L075F-1  Point to mask table
0700 A686             (/dd/sourcecode/as):01684                  lda   a,x          Get offset to proper mask set
0702 3086             (/dd/sourcecode/as):01685                  leax  a,x          Point to the mask table
0704 E480             (/dd/sourcecode/as):01686                  andb  ,x+          Mask out bits we can't use on this type screen
0706 E685             (/dd/sourcecode/as):01687                  ldb   b,x          Get bit mask for the foreground color
0708 3592             (/dd/sourcecode/as):01688         L075D    puls  pc,x,a       restore regs & return
                      (/dd/sourcecode/as):01689         
070A 05               (/dd/sourcecode/as):01690         L075F    fcb   L0763-(L075F-1)    $05   (640/2 color table offset)
070B 08               (/dd/sourcecode/as):01691                  fcb   L0766-(L075F-1)    $08   (320/4 color table offset)
070C 08               (/dd/sourcecode/as):01692                  fcb   L0766-(L075F-1)    $08   (640/4 color table offset)
070D 0D               (/dd/sourcecode/as):01693                  fcb   L076B-(L075F-1)    $0d   (320/16 color table offset)
                      (/dd/sourcecode/as):01694         
                      (/dd/sourcecode/as):01695         * Color masks for 640 2 color
070E 01               (/dd/sourcecode/as):01696         L0763    fcb   $01
070F 00FF             (/dd/sourcecode/as):01697                  fcb   $00,$ff
                      (/dd/sourcecode/as):01698         
                      (/dd/sourcecode/as):01699         * Color masks for 640 and 320 4 color
0711 03               (/dd/sourcecode/as):01700         L0766    fcb   $03
0712 0055AAFF         (/dd/sourcecode/as):01701                  fcb   $00,$55,$aa,$ff
                      (/dd/sourcecode/as):01702         
                      (/dd/sourcecode/as):01703         * Color masks for 320 16 color
0716 0F               (/dd/sourcecode/as):01704         L076B    fcb   $0f
0717 0011223344556677 (/dd/sourcecode/as):01705                  fcb   $00,$11,$22,$33,$44,$55,$66,$77
071F 8899AABBCCDDEEFF (/dd/sourcecode/as):01706                  fcb   $88,$99,$aa,$bb,$cc,$dd,$ee,$ff
                      (/dd/sourcecode/as):01707         
                      (/dd/sourcecode/as):01708         * Get color mask
                      (/dd/sourcecode/as):01709         * Entry: B=color code
                      (/dd/sourcecode/as):01710         * Exit:  B=color mask
0727 6D84             (/dd/sourcecode/as):01711         L0791    tst   ,x             Check screen type?
0729 2ACC             (/dd/sourcecode/as):01712                  bpl   L074C          If graphics, mask out values scrn type can't use
072B C407             (/dd/sourcecode/as):01713                  andb  #$07           Just least significiant 3 bits
072D 39               (/dd/sourcecode/as):01714                  rts
                      (/dd/sourcecode/as):01715         
                      (/dd/sourcecode/as):01716         * Make default attribute byte from current fore/background colors (blink &
                      (/dd/sourcecode/as):01717         *   underline forced off)
072E E626             (/dd/sourcecode/as):01718         L079B    ldb   Wt.Fore,y      Get foreground palette #
0730 C407             (/dd/sourcecode/as):01719                  andb  #$07           Use only 0-7
0732 58               (/dd/sourcecode/as):01720                  lslb                 Shift to foreground color position
0733 58               (/dd/sourcecode/as):01721                  lslb
0734 58               (/dd/sourcecode/as):01722                  lslb
0735 A627             (/dd/sourcecode/as):01723                  lda   Wt.Back,y      Get background palette #
0737 8407             (/dd/sourcecode/as):01724                  anda  #$07           Use only 0-7
                      (/dd/sourcecode/as):01725                IFNE  H6309
                      (/dd/sourcecode/as):01726                  orr   a,b            Merge foreground & background
                      (/dd/sourcecode/as):01727                ELSE
0739 97BF             (/dd/sourcecode/as):01728                  sta   <grScrtch
073B DABF             (/dd/sourcecode/as):01729                  orb   <grScrtch
                      (/dd/sourcecode/as):01730                ENDC
073D E728             (/dd/sourcecode/as):01731                  stb   Wt.Attr,y      Set new default attributes
073F 39               (/dd/sourcecode/as):01732                  rts   
                      (/dd/sourcecode/as):01733         
                      (/dd/sourcecode/as):01734         * Select entry point
                      (/dd/sourcecode/as):01735         * Entry: Y=Newly selected window pointer
                      (/dd/sourcecode/as):01736         * ATD: !! Save DP, too.
0740 3420             (/dd/sourcecode/as):01737         L07D7    pshs  y            save Window table ptr we will be going to
0742 109E2E           (/dd/sourcecode/as):01738                  ldy   <$002E       get window table ptr we are going from
0745 2703             (/dd/sourcecode/as):01739                  beq   L07E1        If none, skip ahead
0747 17F9B0           (/dd/sourcecode/as):01740                  lbsr  L0177        set variables/MMU & update cursors on old window
074A F61000           (/dd/sourcecode/as):01741         L07E1    ldb   >WGlobal+G.CurTik       Reload counter for # ticks/cursor updates
074D F71001           (/dd/sourcecode/as):01742                  stb   >WGlobal+G.CntTik
0750 10AEE4           (/dd/sourcecode/as):01743                  ldy   ,s           get 'to' window table pointer
0753 17F94B           (/dd/sourcecode/as):01744                  lbsr  L0129        Map in window & setup grfdrv mem for new window
0756 109F2E           (/dd/sourcecode/as):01745                  sty   <$002E       save it as current window entry
0759 9F30             (/dd/sourcecode/as):01746                  stx   <$0030       set current screen table pointer
                      (/dd/sourcecode/as):01747         * 6809/6309 - leay ,x
075B 1F12             (/dd/sourcecode/as):01748                  tfr   x,y          Move to Y reg
075D 8EFF90           (/dd/sourcecode/as):01749         L08DB    ldx   #$FF90       point to Gime registers
                      (/dd/sourcecode/as):01750         *ATD: Do a TFR 0,DP: larger but faster?
0760 CE0090           (/dd/sourcecode/as):01751                  ldu   #$0090       point to shadow RAM for GIME hardware
                      (/dd/sourcecode/as):01752                IFNE  H6309
                      (/dd/sourcecode/as):01753                  aim   #$7f,,u      remove Coco 1/2 compatibility bit: set from CoVDG
                      (/dd/sourcecode/as):01754                  ldb   ,u           get new value
                      (/dd/sourcecode/as):01755                ELSE
0763 E6C4             (/dd/sourcecode/as):01756                  ldb   ,u 
0765 C47F             (/dd/sourcecode/as):01757                  andb  #$7f
0767 E7C4             (/dd/sourcecode/as):01758                  stb   ,u
                      (/dd/sourcecode/as):01759                ENDC
0769 E784             (/dd/sourcecode/as):01760                  stb   ,x           save it to GIME
                      (/dd/sourcecode/as):01761         * Calculate extended screen address for 1 or 2 Meg upgrade
                      (/dd/sourcecode/as):01762         * Entry: X=$FF90 (start of GIME regs)
                      (/dd/sourcecode/as):01763         *        Y=Screen table ptr
                      (/dd/sourcecode/as):01764         * Exits: With GIME (and shadow regs) pointing to proper GIME screen address &
                      (/dd/sourcecode/as):01765         *        proper 512k bank (via Disto's DAT) that screen is in (0-3 for up to
                      (/dd/sourcecode/as):01766         *        2 Meg of RAM)
076B 4F               (/dd/sourcecode/as):01767                  clra
076C A70F             (/dd/sourcecode/as):01768                  sta   $0F,x      Set horizontal scroll to 0
076E A74F             (/dd/sourcecode/as):01769                  sta   $0F,u      And set it's shadow
0770 E621             (/dd/sourcecode/as):01770                  ldb   St.SBlk,y  Get block # of screen
                      (/dd/sourcecode/as):01771                IFNE  H6309
                      (/dd/sourcecode/as):01772                  lsld             Multiply by 4 (to shift which 512k bank into A)
                      (/dd/sourcecode/as):01773                  lsld
                      (/dd/sourcecode/as):01774                ELSE
0772 58               (/dd/sourcecode/as):01775                  lslb
0773 49               (/dd/sourcecode/as):01776                  rola
0774 58               (/dd/sourcecode/as):01777                  lslb
0775 49               (/dd/sourcecode/as):01778                  rola
                      (/dd/sourcecode/as):01779                ENDC
0776 D782             (/dd/sourcecode/as):01780                  stb   <$0082     Remainder is the block #(0-3F) in this 512k bank
                      (/dd/sourcecode/as):01781         *                         No, remainder is V.OFF1 of this block. RG.
0778 5F               (/dd/sourcecode/as):01782                  clrb               vertical scroll=0
0779 ED0B             (/dd/sourcecode/as):01783                  std   $0B,x      Set which of up to 4 512K banks video is from
077B ED4B             (/dd/sourcecode/as):01784                  std   $0B,u      And set it's shadow, along with vertical scroll
077D EC22             (/dd/sourcecode/as):01785                  ldd   St.LStrt,y Get screen logical start
077F 8080             (/dd/sourcecode/as):01786                  suba  #$80       Subtract $80 from MSB of that address
                      (/dd/sourcecode/as):01787                IFNE  H6309
                      (/dd/sourcecode/as):01788                  lsrd             Divide result by 8
                      (/dd/sourcecode/as):01789                  lsrd
                      (/dd/sourcecode/as):01790                  lsrd
                      (/dd/sourcecode/as):01791                ELSE
0781 44               (/dd/sourcecode/as):01792                  lsra
0782 56               (/dd/sourcecode/as):01793                  rorb
0783 44               (/dd/sourcecode/as):01794                  lsra
0784 56               (/dd/sourcecode/as):01795                  rorb
0785 44               (/dd/sourcecode/as):01796                  lsra
0786 56               (/dd/sourcecode/as):01797                  rorb
                      (/dd/sourcecode/as):01798                ENDC
0787 9B82             (/dd/sourcecode/as):01799                  adda  <$0082     Add to MSB of 24 bit extended screen address
0789 ED0D             (/dd/sourcecode/as):01800                  std   $0D,x      Store result into GIME's vertical offset register
078B ED4D             (/dd/sourcecode/as):01801                  std   $0D,u      and it's shadow
078D 8E4803           (/dd/sourcecode/as):01802                  ldx   #GrfStrt+L086A.24-2   GIME setup table for 24-line screens
0790 E628             (/dd/sourcecode/as):01803                  ldb   St.ScSiz,y   get screen size into B
0792 C118             (/dd/sourcecode/as):01804                  cmpb  #24          24-line screens?
0794 2703             (/dd/sourcecode/as):01805                  beq   L0840        if so: skip ahead; else get 25-line pointer
0796 8E47F7           (/dd/sourcecode/as):01806                  ldx   #GrfStrt+L086A.25-2   GIME setup table for 25-line screens
0799 E6A4             (/dd/sourcecode/as):01807         L0840    ldb   ,y           get screen type we need
079B C40F             (/dd/sourcecode/as):01808                  andb  #$0F         keep only first 4 bits
079D 58               (/dd/sourcecode/as):01809                  lslb               multiply by 2 (2 bytes per entry)
079E 3A               (/dd/sourcecode/as):01810                  abx                find entry
079F A648             (/dd/sourcecode/as):01811                  lda   $08,u        get current GIME video mode register
07A1 8478             (/dd/sourcecode/as):01812                  anda  #$78         keep only non video bits
07A3 AA84             (/dd/sourcecode/as):01813                  ora   ,x           bring in new video mode
07A5 E601             (/dd/sourcecode/as):01814                  ldb   1,x          get Video resolution
                      (/dd/sourcecode/as):01815         * ATD: for new 'garbage-less' CLRing, and new clock, save these values
                      (/dd/sourcecode/as):01816         * at $08,u, and set $06,u: The clock will clear the flag at $0096, and update
                      (/dd/sourcecode/as):01817         * the GIME video hardware at the _start_ of the IRQ process.
07A7 ED48             (/dd/sourcecode/as):01818                  std   $08,u        save new GIME shadow registers
07A9 FDFF98           (/dd/sourcecode/as):01819                  std   >$FF98       save it to GIME
                      (/dd/sourcecode/as):01820         * Set up colors on GIME for newly selected window
07AC E625             (/dd/sourcecode/as):01821                  ldb   St.Brdr,y    Get current border palette #
07AE 31A810           (/dd/sourcecode/as):01822                  leay  St.Pals,y    Point to palette register data in scrn tbl
                      (/dd/sourcecode/as):01823                IFNE  H6309
                      (/dd/sourcecode/as):01824                  ldf   >WGlobal+G.MonTyp       Get monitor type in F for faster translates
                      (/dd/sourcecode/as):01825                ENDC
07B1 E6A5             (/dd/sourcecode/as):01826                  ldb   b,y          Get border color
07B3 E74A             (/dd/sourcecode/as):01827                  stb   $0A,u        Save new border color to GIME shadow
                      (/dd/sourcecode/as):01828                IFNE  H6309
                      (/dd/sourcecode/as):01829                  tstf               Need to convert color?
                      (/dd/sourcecode/as):01830                ELSE
07B5 7D1009           (/dd/sourcecode/as):01831                  tst   >WGlobal+G.MonTyp 
                      (/dd/sourcecode/as):01832                ENDC
07B8 2605             (/dd/sourcecode/as):01833                  bne   DoBord       Nope
07BA 8E4811           (/dd/sourcecode/as):01834                  ldx   #GrfStrt+L0884   Point to translation table
07BD E685             (/dd/sourcecode/as):01835                  ldb   b,x          Get composite version
07BF F7FF9A           (/dd/sourcecode/as):01836         DoBord   stb   >$ff9a       Save it on GIME
07C2 CEFFB0           (/dd/sourcecode/as):01837                  ldu   #$FFB0       U=GIME palette reg. ptr
                      (/dd/sourcecode/as):01838                IFNE  H6309
                      (/dd/sourcecode/as):01839                  tstf               Rest of colors need translation?
                      (/dd/sourcecode/as):01840                ELSE
07C5 7D1009           (/dd/sourcecode/as):01841                  tst   >WGlobal+G.MonTyp 
                      (/dd/sourcecode/as):01842                ENDC
07C8 260D             (/dd/sourcecode/as):01843                  bne   FstRGB       No, use TFM
                      (/dd/sourcecode/as):01844         * Composite translate here
07CA 8610             (/dd/sourcecode/as):01845                  lda   #$10         A=# of colors
07CC E6A0             (/dd/sourcecode/as):01846         L0851    ldb   ,y+          Get RGB color
07CE E685             (/dd/sourcecode/as):01847                  ldb   b,x          Get composite version
07D0 E7C0             (/dd/sourcecode/as):01848                  stb   ,u+          Save it to GIME
07D2 4A               (/dd/sourcecode/as):01849                  deca               Done?
07D3 22F7             (/dd/sourcecode/as):01850                  bhi   L0851        No, keep going
07D5 2010             (/dd/sourcecode/as):01851                  bra   DnePaltt     Done, go do Gfx cursor
                      (/dd/sourcecode/as):01852         
     07D7             (/dd/sourcecode/as):01853         FstRGB   equ   *
                      (/dd/sourcecode/as):01854                IFNE  H6309
                      (/dd/sourcecode/as):01855                  ldw   #$0010       Palette register ptr & # palette regs
                      (/dd/sourcecode/as):01856                  tfm   y+,u+        Move them onto GIME
                      (/dd/sourcecode/as):01857                ELSE
                      (/dd/sourcecode/as):01858         * 6809 - eventually use mini-stack blast copy vector - 4 blocks of 4
                      (/dd/sourcecode/as):01859         * for now, could preserve X, and ldb #8 /ldx ,y++ / stx ,u++ for loop.
07D7 3406             (/dd/sourcecode/as):01860                  pshs  d
07D9 C610             (/dd/sourcecode/as):01861                  ldb   #16
07DB A6A0             (/dd/sourcecode/as):01862         FstRGB2  lda   ,y+
07DD A7C0             (/dd/sourcecode/as):01863                  sta   ,u+
07DF 5A               (/dd/sourcecode/as):01864                  decb
07E0 26F9             (/dd/sourcecode/as):01865                  bne   FstRGB2
07E2 4F               (/dd/sourcecode/as):01866                  clra
07E3 DDB5             (/dd/sourcecode/as):01867                  std   <$B5
07E5 3506             (/dd/sourcecode/as):01868                  puls  d
                      (/dd/sourcecode/as):01869                ENDC
                      (/dd/sourcecode/as):01870         
                      (/dd/sourcecode/as):01871         * ATD: PULS DP, too
07E7 3520             (/dd/sourcecode/as):01872         DnePaltt puls  y            Restore window entry
                      (/dd/sourcecode/as):01873                IFNE  H6309
                      (/dd/sourcecode/as):01874                  ldq   <$3D         Get last coords that Gfx cursor was ON at
                      (/dd/sourcecode/as):01875                  stq   <$5B         Save as current coords of Gfx cursor
                      (/dd/sourcecode/as):01876                ELSE
07E9 DC3F             (/dd/sourcecode/as):01877                  ldd   <$3F
07EB DD5D             (/dd/sourcecode/as):01878                  std   <$5D
07ED DDB5             (/dd/sourcecode/as):01879                  std   <$B5
07EF DC3D             (/dd/sourcecode/as):01880                  ldd   <$3D
07F1 DD5B             (/dd/sourcecode/as):01881                  std   <$5B
                      (/dd/sourcecode/as):01882                ENDC
07F3 170F37           (/dd/sourcecode/as):01883                  lbsr  L153B        Update 'last gfx cursor on' position to new one
07F6 7E50F6           (/dd/sourcecode/as):01884                  jmp   >GrfStrt+L0F78 return to system: no errors
                      (/dd/sourcecode/as):01885         
                      (/dd/sourcecode/as):01886         * GIME graphics register values
                      (/dd/sourcecode/as):01887         *     1st byte goes to $ff98
                      (/dd/sourcecode/as):01888         *     2nd byte goes to $ff99
                      (/dd/sourcecode/as):01889         * NOTE: To change to 25 line TV res (200 not 225), change $0475 & $0465 to
                      (/dd/sourcecode/as):01890         * $033D & $032D respectively (approx $825 in V1.15+)
                      (/dd/sourcecode/as):01891         *       ifeq MaxLines-25
07F9 8034             (/dd/sourcecode/as):01892         L086A.25 fdb   $8034        640x200 2 color
07FB 8035             (/dd/sourcecode/as):01893                  fdb   $8035        320x200 4 color
07FD 803D             (/dd/sourcecode/as):01894                  fdb   $803D        640x200 4 color
07FF 803E             (/dd/sourcecode/as):01895                  fdb   $803E        320x200 16 color
                      (/dd/sourcecode/as):01896                ifeq TV-1
                      (/dd/sourcecode/as):01897                  fdb   $033D        80x25, 200 line screen
                      (/dd/sourcecode/as):01898                  fdb   $032D        40x25, 200 line screen
                      (/dd/sourcecode/as):01899                else
0801 0475             (/dd/sourcecode/as):01900                  fdb   $0475        80x25, 225 line screen
0803 0465             (/dd/sourcecode/as):01901                  fdb   $0465        40x25, 225 line screen
                      (/dd/sourcecode/as):01902                endc
                      (/dd/sourcecode/as):01903         
                      (/dd/sourcecode/as):01904         *       else
0805 8014             (/dd/sourcecode/as):01905         L086A.24 fdb   $8014        640x192 2 color
0807 8015             (/dd/sourcecode/as):01906                  fdb   $8015        320x192 4 color
0809 801D             (/dd/sourcecode/as):01907                  fdb   $801D        640x192 4 color
080B 801E             (/dd/sourcecode/as):01908                  fdb   $801E        320x192 16 color
080D 0315             (/dd/sourcecode/as):01909                  fdb   $0315        80x24, 192 line screen
080F 0305             (/dd/sourcecode/as):01910                  fdb   $0305        40x24, 192 line screen
                      (/dd/sourcecode/as):01911         *       endc
                      (/dd/sourcecode/as):01912         
                      (/dd/sourcecode/as):01913         * 64 color translation table for RGB to composite monitor
0811 000C020E07090510 (/dd/sourcecode/as):01914         L0884    fcb   $00,$0c,$02,$0e,$07,$09,$05,$10
0819 1C2C0D1D0B1B0A2B (/dd/sourcecode/as):01915                  fcb   $1c,$2c,$0d,$1d,$0b,$1b,$0a,$2b
0821 2211122103011332 (/dd/sourcecode/as):01916                  fcb   $22,$11,$12,$21,$03,$01,$13,$32
0829 1E2D1F2E0F3C2F3D (/dd/sourcecode/as):01917                  fcb   $1e,$2d,$1f,$2e,$0f,$3c,$2f,$3d
0831 1708150627162636 (/dd/sourcecode/as):01918                  fcb   $17,$08,$15,$06,$27,$16,$26,$36
0839 192A1A3A18292838 (/dd/sourcecode/as):01919                  fcb   $19,$2a,$1a,$3a,$18,$29,$28,$38
0841 1404233325352434 (/dd/sourcecode/as):01920                  fcb   $14,$04,$23,$33,$25,$35,$24,$34
0849 203B313E37393F30 (/dd/sourcecode/as):01921                  fcb   $20,$3b,$31,$3e,$37,$39,$3f,$30
                      (/dd/sourcecode/as):01922         
                      (/dd/sourcecode/as):01923         * DefGPB entry point
0851 8D03             (/dd/sourcecode/as):01924         L08DC    bsr   L08E1        go do it
0853 7E50F7           (/dd/sourcecode/as):01925                  jmp   >GrfStrt+SysRet return to system
                      (/dd/sourcecode/as):01926         
                      (/dd/sourcecode/as):01927         * Entry point for internal DefGPB (Ex. Overlay window)
0856 DC80             (/dd/sourcecode/as):01928         L08E1    ldd   <$80         get buffer length requested
0858 C3001F           (/dd/sourcecode/as):01929                  addd  #$001F       round it up to even multiples of 32 bytes
085B C4E0             (/dd/sourcecode/as):01930                  andb  #$E0         (to allow for header)        
085D DD80             (/dd/sourcecode/as):01931                  std   <$80         Preserve new value
085F D657             (/dd/sourcecode/as):01932                  ldb   <$57         get group
0861 5C               (/dd/sourcecode/as):01933                  incb               Overlay window save (B was $FF)?
0862 2708             (/dd/sourcecode/as):01934                  beq   L08F8        yes, skip ahead
0864 0D32             (/dd/sourcecode/as):01935                  tst   <$32         No, has there been any buffers?
0866 2704             (/dd/sourcecode/as):01936                  beq   L08F8        no, go make one
0868 8D3A             (/dd/sourcecode/as):01937                  bsr   L0930        Yes, see if we can fit one in
086A 2472             (/dd/sourcecode/as):01938                  bcc   L096A        Return Bad/Undefined buffer error
086C DC80             (/dd/sourcecode/as):01939         L08F8    ldd   <$80         get requested length including header
086E 10832000         (/dd/sourcecode/as):01940                  cmpd  #$2000       over 8k?
0872 220A             (/dd/sourcecode/as):01941                  bhi   L090A        yes, skip ahead
0874 8D73             (/dd/sourcecode/as):01942                  bsr   L0975        Find block & offset to put it (new or old)
0876 2506             (/dd/sourcecode/as):01943                  bcs   L090A        If couldn't find/allocate, skip ahead
0878 8601             (/dd/sourcecode/as):01944                  lda   #$01         1 8K block used for this buffer
087A A70F             (/dd/sourcecode/as):01945                  sta   Grf.NBlk,x
087C 2005             (/dd/sourcecode/as):01946                  bra   L090F        Skip ahead
                      (/dd/sourcecode/as):01947         
                      (/dd/sourcecode/as):01948         * Couldn't find existing block that would fit it
087E 17009A           (/dd/sourcecode/as):01949         L090A    lbsr  L09A8        Go allocate blocks & map 1st one in
0881 251B             (/dd/sourcecode/as):01950                  bcs   L0928        Error, exit with it
0883 D77D             (/dd/sourcecode/as):01951         L090F    stb   <$007D       Save start block #
0885 9F7E             (/dd/sourcecode/as):01952                  stx   <$007E       Save offset into block
0887 1700E1           (/dd/sourcecode/as):01953                  lbsr  L09FC        Update get/put buffer header & last used in global
088A DC57             (/dd/sourcecode/as):01954                  ldd   <$0057       Get group & buffer #
088C ED03             (/dd/sourcecode/as):01955                  std   Grf.Grp,x    save group & buffer # into buffer header
088E DC80             (/dd/sourcecode/as):01956                  ldd   <$0080       Get buffer size (not including header)
0890 ED05             (/dd/sourcecode/as):01957                  std   Grf.BSz,x    save buffer size in buffer header
                      (/dd/sourcecode/as):01958                IFNE  H6309
                      (/dd/sourcecode/as):01959                  clrd
                      (/dd/sourcecode/as):01960                  clrw
                      (/dd/sourcecode/as):01961                  stq   Grf.XSz,x    Init X and Y sizes to 0
                      (/dd/sourcecode/as):01962                ELSE
0892 4F               (/dd/sourcecode/as):01963                  clra
0893 5F               (/dd/sourcecode/as):01964                  clrb
0894 ED07             (/dd/sourcecode/as):01965                  std   Grf.XSz,x
0896 ED09             (/dd/sourcecode/as):01966                  std   Grf.XSz+2,x
0898 DDB5             (/dd/sourcecode/as):01967                  std   <$B5
                      (/dd/sourcecode/as):01968                ENDC
089A ED0C             (/dd/sourcecode/as):01969                  std   Grf.LfPx,x   Init Pixel masks for 1st & last bytes in block
089C E70E             (/dd/sourcecode/as):01970                  stb   Grf.STY,x    set internal screen type marker
089E 39               (/dd/sourcecode/as):01971         L0928    rts   
                      (/dd/sourcecode/as):01972         
                      (/dd/sourcecode/as):01973         * Set vector for overlay window buffer search
089F 8E48B3           (/dd/sourcecode/as):01974         L092B    ldx   #GrfStrt+L093F  Point to overlay window bffr search routine
08A2 2003             (/dd/sourcecode/as):01975                  bra   L0933        set the vector & do search
                      (/dd/sourcecode/as):01976         
                      (/dd/sourcecode/as):01977         * Set vector for graphics buffer search
08A4 8E48BD           (/dd/sourcecode/as):01978         L0930    ldx   #GrfStrt+L0949  Point to normal buffer search routine
08A7 9FA1             (/dd/sourcecode/as):01979         L0933    stx   <$A1         save the search routine vector
08A9 8D37             (/dd/sourcecode/as):01980                  bsr   L096E        initialize previous table pointers
08AB D632             (/dd/sourcecode/as):01981                  ldb   <$32         get the last block # we used for buffers
08AD 272F             (/dd/sourcecode/as):01982                  beq   L096A        Wasn't one, return error
08AF 9E33             (/dd/sourcecode/as):01983                  ldx   <$33         get last offset
08B1 2022             (/dd/sourcecode/as):01984                  bra   L0961        go map it in & do search routine
                      (/dd/sourcecode/as):01985         
                      (/dd/sourcecode/as):01986         * Overlay window buffer search
08B3 E1A811           (/dd/sourcecode/as):01987         L093F    cmpb  Wt.OBlk,y    is this the right overlay?
08B6 2613             (/dd/sourcecode/as):01988                  bne   L0957        no, move to next one and come back again
08B8 ACA812           (/dd/sourcecode/as):01989                  cmpx  Wt.OOff,y    set conditions for offset match
08BB 200C             (/dd/sourcecode/as):01990                  bra   L0955        go check it
                      (/dd/sourcecode/as):01991         
                      (/dd/sourcecode/as):01992         * Graphics buffer search
08BD 9657             (/dd/sourcecode/as):01993         L0949    lda   <$0057       get group we're looking for
08BF A103             (/dd/sourcecode/as):01994                  cmpa  Grf.Grp,x    find it?
08C1 2608             (/dd/sourcecode/as):01995                  bne   L0957        nope, keep looking
08C3 9658             (/dd/sourcecode/as):01996                  lda   <$0058       get buffer #
08C5 2715             (/dd/sourcecode/as):01997                  beq   L0968        done, return
08C7 A104             (/dd/sourcecode/as):01998                  cmpa  Grf.Buff,x   match?
08C9 2711             (/dd/sourcecode/as):01999         L0955    beq   L0968        yes, return
08CB D77D             (/dd/sourcecode/as):02000         L0957    stb   <$007D       save it as previous block #
08CD 9F7E             (/dd/sourcecode/as):02001                  stx   <$007E       save previous offset
08CF E684             (/dd/sourcecode/as):02002                  ldb   Grf.Bck,x    get back block # link
08D1 270B             (/dd/sourcecode/as):02003                  beq   L096A        there isn't one, return
08D3 AE01             (/dd/sourcecode/as):02004                  ldx   Grf.Off,x    get offset
08D5 170F49           (/dd/sourcecode/as):02005         L0961    lbsr  L017C        go map it in
08D8 6E9F11A1         (/dd/sourcecode/as):02006                  jmp   [>GrfMem+gr00A1]     Do search again
08DC 4F               (/dd/sourcecode/as):02007         L0968    clra               No error & exit
08DD 39               (/dd/sourcecode/as):02008                  rts
                      (/dd/sourcecode/as):02009         
08DE 53               (/dd/sourcecode/as):02010         L096A    comb               Bad buffer # error & exit
08DF C6C2             (/dd/sourcecode/as):02011                  ldb   #E$BadBuf
08E1 39               (/dd/sourcecode/as):02012                  rts
                      (/dd/sourcecode/as):02013         
                      (/dd/sourcecode/as):02014         * Initialize previous buffer pointers
     08E2             (/dd/sourcecode/as):02015         L096E    equ   *
                      (/dd/sourcecode/as):02016                IFNE  H6309
                      (/dd/sourcecode/as):02017                  clrd
                      (/dd/sourcecode/as):02018                ELSE
08E2 4F               (/dd/sourcecode/as):02019                  clra
08E3 5F               (/dd/sourcecode/as):02020                  clrb
                      (/dd/sourcecode/as):02021                ENDC
08E4 D77D             (/dd/sourcecode/as):02022                  stb   <$7D         Buffer block #
08E6 DD7E             (/dd/sourcecode/as):02023                  std   <$7E         Buffer offset #
08E8 39               (/dd/sourcecode/as):02024                  rts   
                      (/dd/sourcecode/as):02025         
                      (/dd/sourcecode/as):02026         * Called by DefGPB
                      (/dd/sourcecode/as):02027         * Find get/put buffer & block # with room (or make new one)
                      (/dd/sourcecode/as):02028         * Exit: B=Block #, X=Ptr to where next GP buffer could go
08E9 3424             (/dd/sourcecode/as):02029         L0975    pshs  b,y          Preserve regs
08EB 109E80           (/dd/sourcecode/as):02030                  ldy   <$0080       get size of buffer requested
08EE 8E4A48           (/dd/sourcecode/as):02031                  ldx   #GrfStrt+L0AE0  Set vector to find empty space in a block big
08F1 9FA1             (/dd/sourcecode/as):02032                  stx   <$00A1         enough to fit the size we want
08F3 170145           (/dd/sourcecode/as):02033                  lbsr  L0ACD        Go find it
08F6 2521             (/dd/sourcecode/as):02034                  bcs   L09A6        Couldn't find, exit with carry set
08F8 E7E4             (/dd/sourcecode/as):02035                  stb   ,s           Change B on stack to block # we found
08FA EC05             (/dd/sourcecode/as):02036                  ldd   Grf.BSz,x    Get buffer size from GP header
08FC 9380             (/dd/sourcecode/as):02037                  subd  <$0080       Subtract the buffer size we need
08FE 260E             (/dd/sourcecode/as):02038                  bne   L099B        If not exact fit, skip ahead
0900 3410             (/dd/sourcecode/as):02039                  pshs  x            Preserve GP buffer ptr a sec
0902 170086           (/dd/sourcecode/as):02040                  lbsr  L0A1C        Map in previous block or new block?
0905 3510             (/dd/sourcecode/as):02041                  puls  x            Restore GP buffer ptr
0907 E6E4             (/dd/sourcecode/as):02042                  ldb   ,s           Get block # we found
0909 170F15           (/dd/sourcecode/as):02043                  lbsr  L017C        Go map it in
090C 200A             (/dd/sourcecode/as):02044                  bra   L09A5        exit without error
090E 830020           (/dd/sourcecode/as):02045         L099B    subd  #$0020       Don't include GP header in GP's buffer size
0911 ED05             (/dd/sourcecode/as):02046                  std   Grf.BSz,x    Store size into GP header's size
0913 308820           (/dd/sourcecode/as):02047                  leax  Grf.Siz,x    Point to start of actual GP buffer data
0916 308B             (/dd/sourcecode/as):02048                  leax  d,x          Point to where next GP buffer will go
0918 4F               (/dd/sourcecode/as):02049         L09A5    clra               No error
0919 35A4             (/dd/sourcecode/as):02050         L09A6    puls  pc,y,b       Restore regs and return
                      (/dd/sourcecode/as):02051         
                      (/dd/sourcecode/as):02052         * If initial search couldn't find/fit block, or if size>8K, go here
                      (/dd/sourcecode/as):02053         * Some of stack pushing/Temp storing could be done in E/F instead
                      (/dd/sourcecode/as):02054         * Particularily <$99
                      (/dd/sourcecode/as):02055         * Map in buffer needed (or 1st block of it if >8K)
091B DC80             (/dd/sourcecode/as):02056         L09A8    ldd   <$80         Get original size we wanted
091D C30020           (/dd/sourcecode/as):02057                  addd  #$0020       Add block header size
0920 DD97             (/dd/sourcecode/as):02058                  std   <$97         Preserve into temp area
0922 C31FFF           (/dd/sourcecode/as):02059                  addd  #$1FFF       Round up to 8K 
0925 44               (/dd/sourcecode/as):02060                  lsra               Divide by 32 for # blocks needed
0926 44               (/dd/sourcecode/as):02061                  lsra  
0927 44               (/dd/sourcecode/as):02062                  lsra  
0928 44               (/dd/sourcecode/as):02063                  lsra  
0929 44               (/dd/sourcecode/as):02064                  lsra  
092A 1F89             (/dd/sourcecode/as):02065                  tfr   a,b          Dupe into B
                      (/dd/sourcecode/as):02066                IFNE  H6309
                      (/dd/sourcecode/as):02067                  tfr   a,f          And into F
                      (/dd/sourcecode/as):02068                ELSE
092C 97B6             (/dd/sourcecode/as):02069                  sta   <$B6
                      (/dd/sourcecode/as):02070                ENDC
092E 103F39           (/dd/sourcecode/as):02071                  os9   F$AllRAM     Allocate memory
0931 2537             (/dd/sourcecode/as):02072                  bcs   L09FB        Couldn't allocate, return with error
                      (/dd/sourcecode/as):02073                IFNE  H6309
                      (/dd/sourcecode/as):02074                  tfr   b,e          Preserve start block #
                      (/dd/sourcecode/as):02075                  cmpf  #$01
                      (/dd/sourcecode/as):02076                ELSE
0933 D7B5             (/dd/sourcecode/as):02077                  stb   <$B5
0935 D6B6             (/dd/sourcecode/as):02078                  ldb   <$B6         regB does not need to be preserved
0937 C101             (/dd/sourcecode/as):02079                  cmpb  #1
                      (/dd/sourcecode/as):02080                ENDC
0939 2222             (/dd/sourcecode/as):02081                  bhi   L09EE        If more than 1 block requested, skip ahead
093B CC2000           (/dd/sourcecode/as):02082                  ldd   #$2000       8k
093E 9397             (/dd/sourcecode/as):02083                  subd  <$97         Calculate # bytes left in block after our buffer
0940 841F             (/dd/sourcecode/as):02084                  anda  #$1F         Round to within 8K
0942 DD9B             (/dd/sourcecode/as):02085                  std   <$9B         Store in another temp
0944 2717             (/dd/sourcecode/as):02086                  beq   L09EE        Exact size of 8K block, skip ahead
0946 CC2000           (/dd/sourcecode/as):02087                  ldd   #$2000       Size of block
0949 939B             (/dd/sourcecode/as):02088                  subd  <$9B         subtract rounded size left in block
094B 8B20             (/dd/sourcecode/as):02089                  adda  #$20         Add 8K so it points to address in GRFDRV's get/
094D 1F01             (/dd/sourcecode/as):02090                  tfr   d,x          put buffer block (which is where it will be)
                      (/dd/sourcecode/as):02091                IFNE  H6309
                      (/dd/sourcecode/as):02092                  tfr   e,b          B=Start block # of allocated RAM
                      (/dd/sourcecode/as):02093                ELSE
094F D6B5             (/dd/sourcecode/as):02094                  ldb   <$B5
                      (/dd/sourcecode/as):02095                ENDC
0951 170ECD           (/dd/sourcecode/as):02096                  lbsr  L017C        map it in
0954 8D25             (/dd/sourcecode/as):02097                  bsr   L0A0C        Set up new block hdr's back links & current
0956 DC9B             (/dd/sourcecode/as):02098                  ldd   <$9B         Get # bytes left in block
0958 830020           (/dd/sourcecode/as):02099                  subd  #$0020       Subtract header size
095B ED05             (/dd/sourcecode/as):02100                  std   Grf.BSz,x    Preserve buffer size in header
095D 8E2000           (/dd/sourcecode/as):02101         L09EE    ldx   #$2000       Start address of GRFDRV's get/put buffer block
                      (/dd/sourcecode/as):02102                IFNE  H6309
                      (/dd/sourcecode/as):02103                  tfr   e,b          Move start block # to proper register
                      (/dd/sourcecode/as):02104                ELSE
0960 D6B5             (/dd/sourcecode/as):02105                  ldb   <$B5
                      (/dd/sourcecode/as):02106                ENDC
0962 170EBC           (/dd/sourcecode/as):02107                  lbsr  L017C        Map it in
                      (/dd/sourcecode/as):02108                IFNE  H6309
                      (/dd/sourcecode/as):02109                  stf   Grf.NBlk,x   Save # of blocks needed for whole buffer
                      (/dd/sourcecode/as):02110                ELSE
0965 96B6             (/dd/sourcecode/as):02111                  lda   <$B6
0967 A70F             (/dd/sourcecode/as):02112                  sta   Grf.NBlk,x
                      (/dd/sourcecode/as):02113                ENDC
0969 4F               (/dd/sourcecode/as):02114                  clra               No error & return
096A 39               (/dd/sourcecode/as):02115         L09FB    rts   
                      (/dd/sourcecode/as):02116         
                      (/dd/sourcecode/as):02117         * Update last get/put buffer used info & Get/Put buffer header
                      (/dd/sourcecode/as):02118         * Updates $32 & $33-$34
                      (/dd/sourcecode/as):02119         * Entry: D=Size left in second block
096B 3406             (/dd/sourcecode/as):02120         L09FC    pshs  d           Preserve D
096D 9632             (/dd/sourcecode/as):02121                  lda   <$32        Get last mapped in block for Get/Put buffers
096F A784             (/dd/sourcecode/as):02122                  sta   Grf.Bck,x   Make that the block # for our header
0971 D732             (/dd/sourcecode/as):02123                  stb   <$32        Put our new last mapped block
0973 DC33             (/dd/sourcecode/as):02124                  ldd   <$33        Get last mapped offset
0975 ED01             (/dd/sourcecode/as):02125                  std   Grf.Off,x   Put that into our header
0977 9F33             (/dd/sourcecode/as):02126                  stx   <$33        Put our new offset into the last mapped offset
0979 3586             (/dd/sourcecode/as):02127                  puls  pc,d        restore D & return
                      (/dd/sourcecode/as):02128         
                      (/dd/sourcecode/as):02129         * Update current get/put buffer info & Get/Put Buffer header
                      (/dd/sourcecode/as):02130         * Updates $35 & $36-$37
                      (/dd/sourcecode/as):02131         *Entry: X=ptr to start of buffer header in GRFDRV's 2nd block (Get/put buffer)
097B 3406             (/dd/sourcecode/as):02132         L0A0C    pshs  d           Preserve D
097D 9635             (/dd/sourcecode/as):02133                  lda   <$35        Get current block/group #
097F A784             (/dd/sourcecode/as):02134                  sta   Grf.Bck,x   Make new block's back ptrs. point to it
0981 D735             (/dd/sourcecode/as):02135                  stb   <$35        Make current ptr to start block we just allocated
0983 DC36             (/dd/sourcecode/as):02136                  ldd   <$36        Get current offset
0985 ED01             (/dd/sourcecode/as):02137                  std   Grf.Off,x   Put into new block's offset
0987 9F36             (/dd/sourcecode/as):02138                  stx   <$36        Make current offset our new one
0989 3586             (/dd/sourcecode/as):02139                  puls  pc,d        Restore D and return
                      (/dd/sourcecode/as):02140         
                      (/dd/sourcecode/as):02141         * Make current GP buffer block & offset same as previous block & offset
                      (/dd/sourcecode/as):02142         *  (or map in new one and set it's header up if there is no previous one)
098B 3422             (/dd/sourcecode/as):02143         L0A1C    pshs  y,a           Preserve regs
098D A684             (/dd/sourcecode/as):02144                  lda   Grf.Bck,x     get back block link #
098F 10AE01           (/dd/sourcecode/as):02145                  ldy   Grf.Off,x     Get offset in back block to it's header
0992 9E7E             (/dd/sourcecode/as):02146                  ldx   <$7E          Get previous blocks offset to buffer
0994 D67D             (/dd/sourcecode/as):02147                  ldb   <$7D          and it's block #
0996 2607             (/dd/sourcecode/as):02148                  bne   L0A30         None mapped in, go map it in
0998 9735             (/dd/sourcecode/as):02149                  sta   <$35          Make into current block & offset
099A 109F36           (/dd/sourcecode/as):02150                  sty   <$36
099D 35A2             (/dd/sourcecode/as):02151                  puls  pc,y,a        Restore regs & return
                      (/dd/sourcecode/as):02152         
099F 170E7F           (/dd/sourcecode/as):02153         L0A30    lbsr  L017C         Bring in 8K buffer block we need
09A2 A784             (/dd/sourcecode/as):02154                  sta   Grf.Bck,x     Set up GP block header
09A4 10AF01           (/dd/sourcecode/as):02155                  sty   Grf.Off,x
09A7 35A2             (/dd/sourcecode/as):02156         L0A38    puls  pc,y,a
                      (/dd/sourcecode/as):02157         
                      (/dd/sourcecode/as):02158         * KillBuf entry point
09A9 C601             (/dd/sourcecode/as):02159         L0A3A    ldb   #$01          Set a temporary flag
09AB D797             (/dd/sourcecode/as):02160                  stb   <$0097
09AD 17FEF4           (/dd/sourcecode/as):02161         L0A3E    lbsr  L0930         Go search for buffer (returns X=Buffer ptr)
09B0 250A             (/dd/sourcecode/as):02162                  bcs   L0A4D         Couldn't find it, exit
09B2 0F97             (/dd/sourcecode/as):02163                  clr   <$0097        Found it, clear flag
09B4 8D0E             (/dd/sourcecode/as):02164                  bsr   L0A55
09B6 2509             (/dd/sourcecode/as):02165                  bcs   L0A52
09B8 D658             (/dd/sourcecode/as):02166                  ldb   <$0058
09BA 27F1             (/dd/sourcecode/as):02167                  beq   L0A3E
09BC 9697             (/dd/sourcecode/as):02168         L0A4D    lda   <$0097        Get flag
09BE 2601             (/dd/sourcecode/as):02169                  bne   L0A52         Didn't get killed, return to system with error
09C0 5F               (/dd/sourcecode/as):02170                  clrb                No error
09C1 7E50F7           (/dd/sourcecode/as):02171         L0A52    jmp   >GrfStrt+SysRet  Return to system
                      (/dd/sourcecode/as):02172         
09C4 3434             (/dd/sourcecode/as):02173         L0A55    pshs  y,x,b         Preserve regs (Window tbl ptr,gfx bffr ptr,block#)
09C6 A60F             (/dd/sourcecode/as):02174                  lda   Grf.NBlk,x    Get # blocks used
09C8 979F             (/dd/sourcecode/as):02175                  sta   <$009F        Save it
09CA A684             (/dd/sourcecode/as):02176                  lda   Grf.Bck,x     Get back block #
09CC 10AE01           (/dd/sourcecode/as):02177                  ldy   Grf.Off,x     Get back block header offset
09CF D67D             (/dd/sourcecode/as):02178                  ldb   <$007D        Get current buffer block #
09D1 2607             (/dd/sourcecode/as):02179                  bne   L0A6B         There is one, continue
09D3 9732             (/dd/sourcecode/as):02180                  sta   <$0032        Save back block as last block used
09D5 109F33           (/dd/sourcecode/as):02181                  sty   <$0033        And it's offset
09D8 200A             (/dd/sourcecode/as):02182                  bra   L0A75
                      (/dd/sourcecode/as):02183         
09DA 170E44           (/dd/sourcecode/as):02184         L0A6B    lbsr  L017C         Go map in GP Block
09DD 9E7E             (/dd/sourcecode/as):02185                  ldx   <$007E
09DF A784             (/dd/sourcecode/as):02186                  sta   Grf.Bck,x
09E1 10AF01           (/dd/sourcecode/as):02187                  sty   Grf.Off,x
09E4 E6E4             (/dd/sourcecode/as):02188         L0A75    ldb   ,s            Get block #
09E6 969F             (/dd/sourcecode/as):02189                  lda   <$009F        Get # of blocks used
09E8 8101             (/dd/sourcecode/as):02190                  cmpa  #$01          >1?
09EA 2E20             (/dd/sourcecode/as):02191                  bgt   L0A9E         Yes, go handle
09EC 1F98             (/dd/sourcecode/as):02192                  tfr   b,a           Just one, move block # to A
09EE 8D26             (/dd/sourcecode/as):02193                  bsr   L0AA8
09F0 2411             (/dd/sourcecode/as):02194                  bcc   L0A94
09F2 8E4A5C           (/dd/sourcecode/as):02195                  ldx   #GrfStrt+L0AF4
09F5 9FA1             (/dd/sourcecode/as):02196                  stx   <$00A1
09F7 AE61             (/dd/sourcecode/as):02197                  ldx   1,s
09F9 8D40             (/dd/sourcecode/as):02198                  bsr   L0ACD
09FB 170E23           (/dd/sourcecode/as):02199                  lbsr  L017C
09FE 17FF7A           (/dd/sourcecode/as):02200                  lbsr  L0A0C
0A01 35B4             (/dd/sourcecode/as):02201                  puls  pc,y,x,b
                      (/dd/sourcecode/as):02202         
0A03 8E4A86           (/dd/sourcecode/as):02203         L0A94    ldx   #GrfStrt+L0B1E
0A06 9FA1             (/dd/sourcecode/as):02204                  stx   <$00A1
0A08 AE61             (/dd/sourcecode/as):02205                  ldx   1,s
0A0A 8D2F             (/dd/sourcecode/as):02206                  bsr   L0ACD
0A0C 4F               (/dd/sourcecode/as):02207         L0A9E    clra  
0A0D 1F01             (/dd/sourcecode/as):02208                  tfr   d,x
0A0F D69F             (/dd/sourcecode/as):02209                  ldb   <$009F
0A11 103F51           (/dd/sourcecode/as):02210                  os9   F$DelRAM       Deallocate the memory
0A14 35B4             (/dd/sourcecode/as):02211         L0AA6    puls  pc,y,x,b
                      (/dd/sourcecode/as):02212         
                      (/dd/sourcecode/as):02213         * Entry: A=block #
0A16 3414             (/dd/sourcecode/as):02214         L0AA8    pshs  x,b
0A18 D632             (/dd/sourcecode/as):02215                  ldb   <$0032
0A1A 2719             (/dd/sourcecode/as):02216                  beq   L0AC7
0A1C 9132             (/dd/sourcecode/as):02217                  cmpa  <$0032
0A1E 2718             (/dd/sourcecode/as):02218                  beq   L0ACA
0A20 9E33             (/dd/sourcecode/as):02219                  ldx   <$0033
0A22 200C             (/dd/sourcecode/as):02220                  bra   L0AC2
                      (/dd/sourcecode/as):02221         
0A24 A184             (/dd/sourcecode/as):02222         L0AB6    cmpa  Grf.Bck,x
0A26 2710             (/dd/sourcecode/as):02223                  beq   L0ACA
0A28 6D84             (/dd/sourcecode/as):02224                  tst   Grf.Bck,x
0A2A 2709             (/dd/sourcecode/as):02225                  beq   L0AC7
0A2C E684             (/dd/sourcecode/as):02226                  ldb   Grf.Bck,x
0A2E AE01             (/dd/sourcecode/as):02227                  ldx   Grf.Off,x
0A30 170DEE           (/dd/sourcecode/as):02228         L0AC2    lbsr  L017C
0A33 20EF             (/dd/sourcecode/as):02229                  bra   L0AB6
                      (/dd/sourcecode/as):02230         
0A35 5F               (/dd/sourcecode/as):02231         L0AC7    clrb  
0A36 3594             (/dd/sourcecode/as):02232                  puls  pc,x,b
                      (/dd/sourcecode/as):02233         
0A38 53               (/dd/sourcecode/as):02234         L0ACA    comb  
0A39 3594             (/dd/sourcecode/as):02235                  puls  pc,x,b
                      (/dd/sourcecode/as):02236         
                      (/dd/sourcecode/as):02237         * Subroutine called by L0975 (of DefGPB)
                      (/dd/sourcecode/as):02238         * Entry: Y=Size of buffer requested (including $20 byte header)
0A3B 3416             (/dd/sourcecode/as):02239         L0ACD    pshs  d,x          Preserve regs
0A3D 17FEA2           (/dd/sourcecode/as):02240         L0ACF    lbsr  L096E        initialize previous buffer ptrs to 0 ($7D-$7F)
0A40 D635             (/dd/sourcecode/as):02241                  ldb   <$35         get last buffer block #
0A42 2759             (/dd/sourcecode/as):02242                  beq   L0B35        If 0, exit with carry set
0A44 9E36             (/dd/sourcecode/as):02243                  ldx   <$36         get offset of last one into 8K block
0A46 204E             (/dd/sourcecode/as):02244                  bra   L0B2E        Go map in get/put memory block & continue
                      (/dd/sourcecode/as):02245         
                      (/dd/sourcecode/as):02246         * <8K buffer define vector goes here
                      (/dd/sourcecode/as):02247         * Entry: X=Offset to current buffer being checked in current 8K block
                      (/dd/sourcecode/as):02248         *        Y=Size wanted
0A48 10AC05           (/dd/sourcecode/as):02249         L0AE0    cmpy  Grf.BSz,x    Will requested size fit?
0A4B 223D             (/dd/sourcecode/as):02250                  bhi   L0B22        Too big, keep looking backwards
0A4D 2051             (/dd/sourcecode/as):02251                  bra   L0B38        Exit with carry clear & B=block #, X=offset
                      (/dd/sourcecode/as):02252         
0A4F 1F30             (/dd/sourcecode/as):02253         L0AE7    tfr   u,d
0A51 E345             (/dd/sourcecode/as):02254                  addd  Grf.BSz,u
0A53 C30020           (/dd/sourcecode/as):02255                  addd  #Grf.Siz
                      (/dd/sourcecode/as):02256                IFNE  H6309
                      (/dd/sourcecode/as):02257                  cmpr  x,d
                      (/dd/sourcecode/as):02258                ELSE
0A56 9FBF             (/dd/sourcecode/as):02259                  stx    <grScrtch
0A58 1093BF           (/dd/sourcecode/as):02260                  cmpd   <grScrtch
                      (/dd/sourcecode/as):02261                ENDC
0A5B 39               (/dd/sourcecode/as):02262                  rts   
                      (/dd/sourcecode/as):02263         
                      (/dd/sourcecode/as):02264         * A vectored routine (usually pointed to by $A1)
0A5C E161             (/dd/sourcecode/as):02265         L0AF4    cmpb  1,s
0A5E 262A             (/dd/sourcecode/as):02266                  bne   L0B22
0A60 EE62             (/dd/sourcecode/as):02267                  ldu   2,s
0A62 E684             (/dd/sourcecode/as):02268                  ldb   Grf.Bck,x
0A64 E7C4             (/dd/sourcecode/as):02269                  stb   Grf.Bck,u
0A66 EC01             (/dd/sourcecode/as):02270                  ldd   Grf.Off,x
0A68 ED41             (/dd/sourcecode/as):02271                  std   Grf.Off,u
0A6A 1E13             (/dd/sourcecode/as):02272                  exg   x,u
0A6C 8DE1             (/dd/sourcecode/as):02273                  bsr   L0AE7
0A6E 2706             (/dd/sourcecode/as):02274                  beq   L0B0E
0A70 1E13             (/dd/sourcecode/as):02275                  exg   x,u
0A72 8DDB             (/dd/sourcecode/as):02276                  bsr   L0AE7
0A74 2614             (/dd/sourcecode/as):02277                  bne   L0B22
0A76 EF62             (/dd/sourcecode/as):02278         L0B0E    stu   2,s
0A78 EC45             (/dd/sourcecode/as):02279                  ldd   Grf.BSz,u
0A7A E305             (/dd/sourcecode/as):02280                  addd  Grf.BSz,x
0A7C C30020           (/dd/sourcecode/as):02281                  addd  #Grf.Siz
0A7F ED45             (/dd/sourcecode/as):02282                  std   Grf.BSz,u
0A81 17FF07           (/dd/sourcecode/as):02283         L0B19    lbsr  L0A1C
0A84 20B7             (/dd/sourcecode/as):02284                  bra   L0ACF
                      (/dd/sourcecode/as):02285         
0A86 E1E4             (/dd/sourcecode/as):02286         L0B1E    cmpb  ,s
0A88 27F7             (/dd/sourcecode/as):02287                  beq   L0B19
                      (/dd/sourcecode/as):02288         * Search backwards through existing 8K blocks allocated for Get/Put buffers
                      (/dd/sourcecode/as):02289         * until we hit beginning
0A8A D68A             (/dd/sourcecode/as):02290         L0B22    ldb   <$8A         Get GrfDrv MMU block # for get/put buffer block
0A8C D77D             (/dd/sourcecode/as):02291                  stb   <$7D         Move to block #
0A8E 9F7E             (/dd/sourcecode/as):02292                  stx   <$7E         Save offset into block as well
0A90 E684             (/dd/sourcecode/as):02293                  ldb   Grf.Bck,x    Get back block link #
0A92 2709             (/dd/sourcecode/as):02294                  beq   L0B35        None, exit with carry set
0A94 AE01             (/dd/sourcecode/as):02295                  ldx   Grf.Off,x    Get back block header offset
                      (/dd/sourcecode/as):02296         * Entry: X=offset into current 8K buffer/block # last used for buffer
0A96 170D88           (/dd/sourcecode/as):02297         L0B2E    lbsr  L017C        Map in Get/Put buffer memory block
0A99 6E9F11A1         (/dd/sourcecode/as):02298                  jmp   [>GrfMem+gr00A1]     Jump to vector (can be AE0 below)
                      (/dd/sourcecode/as):02299         
0A9D 53               (/dd/sourcecode/as):02300         L0B35    comb               Set carry, restore regs & return
0A9E 3596             (/dd/sourcecode/as):02301                  puls  pc,x,d
                      (/dd/sourcecode/as):02302         
0AA0 E761             (/dd/sourcecode/as):02303         L0B38    stb   1,s          Buffer fits, put block & offset into B & X
0AA2 AF62             (/dd/sourcecode/as):02304                  stx   2,s
0AA4 5F               (/dd/sourcecode/as):02305                  clrb               No error
0AA5 3596             (/dd/sourcecode/as):02306                  puls  pc,x,d       Restore new regs and return
                      (/dd/sourcecode/as):02307         
                      (/dd/sourcecode/as):02308         * GPLoad entry point
0AA7 17FDFA           (/dd/sourcecode/as):02309         L0B3F    lbsr  L0930        go look for group/buffer # requested
0AAA 2510             (/dd/sourcecode/as):02310                  bcs   L0B52        Didn't find, go create one
                      (/dd/sourcecode/as):02311                IFNE  H6309
                      (/dd/sourcecode/as):02312                  ldw   Wt.BLen,y    Get size requested
                      (/dd/sourcecode/as):02313                  cmpw  Grf.BSz,x    Will it fit in existing buffer?
                      (/dd/sourcecode/as):02314                ELSE
0AAC 3406             (/dd/sourcecode/as):02315                  pshs  d
0AAE ECA81F           (/dd/sourcecode/as):02316                  ldd   Wt.BLen,y    Get size requested
0AB1 DDB5             (/dd/sourcecode/as):02317                  std   <$B5
0AB3 10A305           (/dd/sourcecode/as):02318                  cmpd  Grf.BSz,x    Will it fit in existing buffer?
0AB6 3506             (/dd/sourcecode/as):02319                  puls  d
                      (/dd/sourcecode/as):02320                ENDC
0AB8 230E             (/dd/sourcecode/as):02321                  bls   L0B60        Yes, go do it
0ABA 207B             (/dd/sourcecode/as):02322                  bra   L0BE4        No, exit with buffer size too small error
                      (/dd/sourcecode/as):02323                  
0ABC ECA81F           (/dd/sourcecode/as):02324         L0B52    ldd   Wt.BLen,y    Get size requested
0ABF DD80             (/dd/sourcecode/as):02325                  std   <$0080       Save in grfdrv mem
0AC1 17FD92           (/dd/sourcecode/as):02326                  lbsr  L08E1        Go define a get/put buffer for ourselves
0AC4 2574             (/dd/sourcecode/as):02327                  bcs   L0BE7       Couldn't find room, exit with error
0AC6 D67D             (/dd/sourcecode/as):02328                  ldb   <$007D       Get buffer block #
0AC8 E7A821           (/dd/sourcecode/as):02329         L0B60    stb   Wt.NBlk,y    Save buffer block # to GPLoad into
                      (/dd/sourcecode/as):02330                IFNE  H6309
                      (/dd/sourcecode/as):02331                  clrd
                      (/dd/sourcecode/as):02332                ELSE
0ACB 4F               (/dd/sourcecode/as):02333                  clra
0ACC 5F               (/dd/sourcecode/as):02334                  clrb
                      (/dd/sourcecode/as):02335                ENDC
0ACD DD47             (/dd/sourcecode/as):02336                  std   <$47         Working X coord to 0?
0ACF D660             (/dd/sourcecode/as):02337                  ldb   <$60         Get screen type
                      (/dd/sourcecode/as):02338         * Possible bug: doesn't check if text screen first?
0AD1 17011F           (/dd/sourcecode/as):02339                  lbsr  L0C2B        Directly into Graphics size calculation
0AD4 170158           (/dd/sourcecode/as):02340                  lbsr  L0C69        Go setup the GP buffer header
0AD7 308820           (/dd/sourcecode/as):02341                  leax  Grf.Siz,x    Point past GP header (to where data would go)
0ADA AFA822           (/dd/sourcecode/as):02342                  stx   Wt.NOff,y    Save ptr to where next GPLoad will go
0ADD 7E50F6           (/dd/sourcecode/as):02343                  jmp   >GrfStrt+L0F78 no errors, and exit
                      (/dd/sourcecode/as):02344         
                      (/dd/sourcecode/as):02345         * Move buffer entry point (This ONLY gets called via the Move Buffer vector
                      (/dd/sourcecode/as):02346         *   from CoGRF or CoWin)
                      (/dd/sourcecode/as):02347         * It's used to do Get/Put buffer loads in small chunks since GRFDRV's memory
                      (/dd/sourcecode/as):02348         *   map can't fit a window's static mem
                      (/dd/sourcecode/as):02349         * Entry: F=Byte count (Maximum value=72 / $42 is in constant gb0000. Default 72, there is room for a little more
                      (/dd/sourcecode/as):02350         *        (On 6809, this value is at <$B6)
                      (/dd/sourcecode/as):02351         * Will be single pass of up to 72 bytes if we are not crossing an MMU boundary. Done in
                      (/dd/sourcecode/as):02352         * 2 chunks if we are crossing an MMU boundary
                      (/dd/sourcecode/as):02353         *        Y=Window table ptr
0AE0 E6A821           (/dd/sourcecode/as):02354         L0B79    ldb   Wt.NBlk,y    get block # for next graphic buffer
0AE3 D797             (/dd/sourcecode/as):02355                  stb   <$0097       save it
0AE5 170D39           (/dd/sourcecode/as):02356                  lbsr  L017C        go map it in (uses B only, does not modify registers)
0AE8 AEA822           (/dd/sourcecode/as):02357                  ldx   Wt.NOff,y    get offset into block (dest ptr)
0AEB CE1200           (/dd/sourcecode/as):02358                  ldu   #GPBuf       ($1200) Point to buffer of where GRFInt/CoWin put info (src ptr)
                      (/dd/sourcecode/as):02359                IFNE  H6309
                      (/dd/sourcecode/as):02360                  clre               make 16 bit number in W
                      (/dd/sourcecode/as):02361                  tfr   w,d          dupe count into D
                      (/dd/sourcecode/as):02362                  addr  x,d          Point to current block offset+size of request
                      (/dd/sourcecode/as):02363                ELSE
0AEE 4F               (/dd/sourcecode/as):02364                  clra               Make copy size 16 bits in both D and <$B5
0AEF 97B5             (/dd/sourcecode/as):02365                  sta   <$B5
0AF1 D6B6             (/dd/sourcecode/as):02366                  ldb   <$B6         This was set in CoWin (# bytes to copy - max 72)
0AF3 9FBF             (/dd/sourcecode/as):02367                  stx   <grScrtch    Add size to destination ptr
0AF5 D3BF             (/dd/sourcecode/as):02368                  addd  <grScrtch    
                      (/dd/sourcecode/as):02369                ENDC 
0AF7 8140             (/dd/sourcecode/as):02370                  cmpa  #$40         Past end of GP buffer's 8K block?
0AF9 2522             (/dd/sourcecode/as):02371                  blo   MoveIt       No, go move whole thing in one shot
                      (/dd/sourcecode/as):02372         * Move data between 2 blocks of memory
0AFB CC4000           (/dd/sourcecode/as):02373                  ldd   #$4000       calculate how much will fit in first pass
                      (/dd/sourcecode/as):02374                IFNE  H6309
                      (/dd/sourcecode/as):02375                  subr  x,d
                      (/dd/sourcecode/as):02376                  subr  d,w          move leftover to D
                      (/dd/sourcecode/as):02377                  exg   d,w          Move first chunk size to W
                      (/dd/sourcecode/as):02378                  tfm   u+,x+        move first chunk
                      (/dd/sourcecode/as):02379                  tfr   d,w          move leftover back to W
                      (/dd/sourcecode/as):02380                ELSE
0AFE 93BF             (/dd/sourcecode/as):02381                  subd  <grScrtch    Calculate how many bytes we are copying within current MMU block
0B00 3426             (/dd/sourcecode/as):02382                  pshs  d,y          save D (# bytes we can copy in current block) & Y (window tbl ptr)
0B02 DCB5             (/dd/sourcecode/as):02383                  ldd   <$B5         Get size of copy again
0B04 A3E4             (/dd/sourcecode/as):02384                  subd  ,s           Subtract # of bytes we can copy within current MMU block (subr d,w)
0B06 DDB5             (/dd/sourcecode/as):02385                  std   <$B5         Save # of bytes to do on 2nd pass (other MMU block) this is the value of W after tfm/tfr d,w
                      (/dd/sourcecode/as):02386         
0B08 ECE1             (/dd/sourcecode/as):02387                  ldd   ,s++         get # bytes to copy in 1ast pass
0B0A 2705             (/dd/sourcecode/as):02388                  beq   LMoveb       If none, skip to 2nd pass
0B0C 3184             (/dd/sourcecode/as):02389                  leay  ,x           Move dest ptr to Y for subroutine
0B0E 17002C           (/dd/sourcecode/as):02390                  lbsr  StkBlCpy     Copy chunk over (lbsr for when we move stkblcpy near scrolling)
0B11 3520             (/dd/sourcecode/as):02391         LMoveb   puls  y            restore window table ptr
                      (/dd/sourcecode/as):02392                ENDC
0B13 0C97             (/dd/sourcecode/as):02393                  inc   <$0097       increment to next block #
0B15 D697             (/dd/sourcecode/as):02394                  ldb   <$0097       get new block #
0B17 170D07           (/dd/sourcecode/as):02395                  lbsr  L017C        map it in (changes no registers), saves B only
0B1A 8E2000           (/dd/sourcecode/as):02396                  ldx   #$2000       reset dest pointer to start of block
                      (/dd/sourcecode/as):02397         * Entry: U=src ptr
                      (/dd/sourcecode/as):02398         *        X=dest ptr
                      (/dd/sourcecode/as):02399         *        W or <$B5=copy size (in bytes) for pass 2
     0B1D             (/dd/sourcecode/as):02400         MoveIt   equ   *
                      (/dd/sourcecode/as):02401                IFNE  H6309
                      (/dd/sourcecode/as):02402                  tfm   u+,x+        Block copy buffer into GP buffer
                      (/dd/sourcecode/as):02403                ELSE
                      (/dd/sourcecode/as):02404         * 6809 - s/b to move pshs y down past beq LMove2b, and change beq LMove2b to be beq L0BA2
0B1D DCB5             (/dd/sourcecode/as):02405                  ldd   <$B5         Get # of bytes to copy
0B1F 270B             (/dd/sourcecode/as):02406                  beq   L0BA2        None left, skip ahead
0B21 3420             (/dd/sourcecode/as):02407                  pshs  y            Preserve Window table ptr
0B23 3184             (/dd/sourcecode/as):02408                  leay  ,x           Move dest ptr to Y
0B25 170015           (/dd/sourcecode/as):02409                  lbsr  StkBlCpy     Copy chunk
0B28 30A4             (/dd/sourcecode/as):02410                  leax  ,y           Move dest ptr to X (to save below)
0B2A 3520             (/dd/sourcecode/as):02411                  puls  y            Get window table ptr back
                      (/dd/sourcecode/as):02412                ENDC
0B2C D697             (/dd/sourcecode/as):02413         L0BA2    ldb   <$0097       get the block #
0B2E E7A821           (/dd/sourcecode/as):02414                  stb   Wt.NBlk,y    update it in table
0B31 AFA822           (/dd/sourcecode/as):02415                  stx   Wt.NOff,y    save next offset in table
0B34 7E50F6           (/dd/sourcecode/as):02416                  jmp   >GrfStrt+L0F78 no errors, and exit grfdrv
                      (/dd/sourcecode/as):02417         
0B37 53               (/dd/sourcecode/as):02418         L0BE4    comb                 Buffer size too small error
0B38 C6BF             (/dd/sourcecode/as):02419                  ldb   #E$BufSiz
0B3A 7E50F7           (/dd/sourcecode/as):02420         L0BE7    jmp   >GrfStrt+SysRet
                      (/dd/sourcecode/as):02421         
                      (/dd/sourcecode/as):02422         * INSERT STACK BLAST COPY ROUTINE HERE - 6809 only
                      (/dd/sourcecode/as):02423         * NOTE: Once we have it working, will move to be near screen scrolling, so we can BSR
                      (/dd/sourcecode/as):02424         * from there. That will be used much more often then loading a GP buffer
                      (/dd/sourcecode/as):02425                IFEQ  H6309
                      (/dd/sourcecode/as):02426         * Mini stack blast copy - works on odd # of bytes. Will use stack pull 4 bytes/time when
                      (/dd/sourcecode/as):02427         * possible.
                      (/dd/sourcecode/as):02428         * If you know that you are doing even 4 byte multiple, you will need D & Y pushed to the stack
                      (/dd/sourcecode/as):02429         *   and enter with X being the end copy address (for source)
                      (/dd/sourcecode/as):02430         * Entry: D=size of copy
                      (/dd/sourcecode/as):02431         *        U=Source ptr
                      (/dd/sourcecode/as):02432         *        Y=Dest ptr
                      (/dd/sourcecode/as):02433         * Exit: U=ptr to end of source
                      (/dd/sourcecode/as):02434         *       Y=ptr to end of dest
                      (/dd/sourcecode/as):02435         * X not preserved!
0B3D 3426             (/dd/sourcecode/as):02436         StkBlCpy pshs  d,y            Save dest ptr & size
0B3F 30CB             (/dd/sourcecode/as):02437                  leax  d,u            Point to end of source copy
0B41 3410             (/dd/sourcecode/as):02438                  pshs  x              Save that as where to stop copying
0B43 C403             (/dd/sourcecode/as):02439                  andb  #$03           1st, check if non-even multiple of 4 bytes
0B45 270F             (/dd/sourcecode/as):02440                  beq   ChkBlst        Even multiple of 4, go straight to mini-stack blast
0B47 A6C0             (/dd/sourcecode/as):02441         OddCpy   lda   ,u+            Otherwise, copy 1-3 bytes 1 at at time until we line up with a 4 byte boundary
0B49 A7A0             (/dd/sourcecode/as):02442                  sta   ,y+            
0B4B 5A               (/dd/sourcecode/as):02443                  decb                 Done odd bytes?
0B4C 26F9             (/dd/sourcecode/as):02444                  bne   OddCpy         No, keep copying 1 at a time
0B4E 2006             (/dd/sourcecode/as):02445                  bra   ChkBlst        Yes, finish any remaining 4 bytes/time with stack blast*
                      (/dd/sourcecode/as):02446         
                      (/dd/sourcecode/as):02447         * Mini stack blast copy - does 4 byte stack blast for read, 4 byte 'normal' write
                      (/dd/sourcecode/as):02448         * 35 cycles/4 bytes copied
                      (/dd/sourcecode/as):02449         * Entry: U=ptr to src
                      (/dd/sourcecode/as):02450         *        Y=ptr to dest
                      (/dd/sourcecode/as):02451         *        0,s=ptr to stop at (for source)
0B50 3716             (/dd/sourcecode/as):02452         BlstCpy  pulu  d,x            (9 cyc) Get 4 bytes really quickly
0B52 EDA1             (/dd/sourcecode/as):02453                  std   ,y++           (8 cyc) Save them in output buffer. 
0B54 AFA1             (/dd/sourcecode/as):02454                  stx   ,y++           (8 cyc) 
0B56 11A3E4           (/dd/sourcecode/as):02455         ChkBlst  cmpu  ,s             (7 cyc) Are we done?
0B59 25F5             (/dd/sourcecode/as):02456                  blo   BlstCpy        (3 cyc)
0B5B 10AF64           (/dd/sourcecode/as):02457                  sty   4,s            Save new dest address (is this needed)
0B5E 3262             (/dd/sourcecode/as):02458                  leas  2,s            Eat stop address
0B60 35A6             (/dd/sourcecode/as):02459                  puls  d,y,pc         Restore regs & return
                      (/dd/sourcecode/as):02460                ENDC
                      (/dd/sourcecode/as):02461         
                      (/dd/sourcecode/as):02462         
                      (/dd/sourcecode/as):02463         * GetBlk entry point
0B62 17162D           (/dd/sourcecode/as):02464         L0BAE    lbsr  L1DF6          Go scale X/Y coords @ <$47-$4A,check if in range
0B65 25D3             (/dd/sourcecode/as):02465                  bcs   L0BE7          No, exit with error
                      (/dd/sourcecode/as):02466                IFNE  H6309
                      (/dd/sourcecode/as):02467                  ldq   <$4f           Get X/Y sizes
                      (/dd/sourcecode/as):02468                  decd                 Bump down by 1 each since size, not coord
                      (/dd/sourcecode/as):02469                  decw
                      (/dd/sourcecode/as):02470                  stq   <$4f           Save
                      (/dd/sourcecode/as):02471                ELSE
0B67 DC51             (/dd/sourcecode/as):02472                  ldd   <$51
0B69 830001           (/dd/sourcecode/as):02473                  subd  #1
0B6C DD51             (/dd/sourcecode/as):02474                  std   <$51
0B6E DDB5             (/dd/sourcecode/as):02475                  std   <$B5
0B70 DC4F             (/dd/sourcecode/as):02476                  ldd   <$4f
0B72 830001           (/dd/sourcecode/as):02477                  subd  #1
0B75 DD4F             (/dd/sourcecode/as):02478                  std   <$4f
                      (/dd/sourcecode/as):02479                ENDC
0B77 17163E           (/dd/sourcecode/as):02480                  lbsr  L1E01          Go scale X/Y Sizes @ <$4f-$52,check if in range 
0B7A 25BE             (/dd/sourcecode/as):02481                  bcs   L0BE7          No, exit with error
                      (/dd/sourcecode/as):02482                IFNE  H6309
                      (/dd/sourcecode/as):02483                  ldq   <$4f           Get X/Y sizes
                      (/dd/sourcecode/as):02484                  incd                 Bump back up
                      (/dd/sourcecode/as):02485                  incw
                      (/dd/sourcecode/as):02486                  stq   <$4f           Save
                      (/dd/sourcecode/as):02487                ELSE
0B7C DC51             (/dd/sourcecode/as):02488                  ldd   <$51
0B7E C30001           (/dd/sourcecode/as):02489                  addd  #1
0B81 DD51             (/dd/sourcecode/as):02490                  std   <$51
0B83 DDB5             (/dd/sourcecode/as):02491                  std   <$B5
0B85 DC4F             (/dd/sourcecode/as):02492                  ldd   <$4f
0B87 C30001           (/dd/sourcecode/as):02493                  addd  #1
0B8A DD4F             (/dd/sourcecode/as):02494                  std   <$4f
                      (/dd/sourcecode/as):02495                ENDC
0B8C 17F56B           (/dd/sourcecode/as):02496                  lbsr  L0177          Map in window & setup some GRFDRV vars.
0B8F 8D47             (/dd/sourcecode/as):02497                  bsr   L0C0B          Calc width of buffer in bytes & next line offset
0B91 17FD10           (/dd/sourcecode/as):02498                  lbsr  L0930          Go search for GP buffer
0B94 2407             (/dd/sourcecode/as):02499                  bcc   L0BC9          Found it, skip ahead
0B96 17FCBD           (/dd/sourcecode/as):02500                  lbsr  L08E1          Couldn't, create one
0B99 240D             (/dd/sourcecode/as):02501                  bcc   L0BD4          Got one, skip ahead
0B9B 209D             (/dd/sourcecode/as):02502                  bra   L0BE7          Otherwise, exit with error
                      (/dd/sourcecode/as):02503         
                      (/dd/sourcecode/as):02504         * Found GP buffer already defined
0B9D D77D             (/dd/sourcecode/as):02505         L0BC9    stb   <$007D         Save block #
0B9F 9F7E             (/dd/sourcecode/as):02506                  stx   <$007E         Save offset into block
0BA1 DC80             (/dd/sourcecode/as):02507                  ldd   <$0080         Get buffer length
0BA3 10A305           (/dd/sourcecode/as):02508                  cmpd  Grf.BSz,x      Within range of buffer's current length?
0BA6 228F             (/dd/sourcecode/as):02509                  bhi   L0BE4          No, exit with Buffer Size Too Small error
                      (/dd/sourcecode/as):02510         * GP buffer will fit requested data size
0BA8 170084           (/dd/sourcecode/as):02511         L0BD4    lbsr  L0C69          Go set up the GP buffer's header
0BAB 1707F9           (/dd/sourcecode/as):02512                  lbsr  L1E9D          Go calculate addr. on screen to start GETting @
0BAE 9F72             (/dd/sourcecode/as):02513                  stx   <$0072         Save it
0BB0 9E7E             (/dd/sourcecode/as):02514                  ldx   <$007E         Get offset into GP buffer block
0BB2 17009D           (/dd/sourcecode/as):02515                  lbsr  L0C8D          Go copy from screen into buffer
0BB5 7E50F6           (/dd/sourcecode/as):02516         L0BE1    jmp   >GrfStrt+L0F78 exit with no errors
                      (/dd/sourcecode/as):02517         
                      (/dd/sourcecode/as):02518         * Save switch on- comes here to save screen contents under overlay window
                      (/dd/sourcecode/as):02519         * into a get/put buffer
                      (/dd/sourcecode/as):02520         * Entry: Y=Current (or current Overlay) window ptr
0BB8 EC33             (/dd/sourcecode/as):02521         L0BEA    ldd   Wt.LStrt,y      Get screen logical start address
0BBA DD72             (/dd/sourcecode/as):02522                  std   <$72            Make it the overlay window save start
0BBC 8D1A             (/dd/sourcecode/as):02523                  bsr   L0C0B           Calculate sizes in bytes, etc.
0BBE CCFFFF           (/dd/sourcecode/as):02524                  ldd   #$FFFF          Group & buffer # to $FF
0BC1 DD57             (/dd/sourcecode/as):02525                  std   <$57
0BC3 17FC90           (/dd/sourcecode/as):02526                  lbsr  L08E1           Define get/put buffer for overlay window
0BC6 250F             (/dd/sourcecode/as):02527                  bcs   L0C0A           Error defining buffer;exit with it
0BC8 D67D             (/dd/sourcecode/as):02528                  ldb   <$007D          Get MMU block # for overlay window copy
0BCA E7A811           (/dd/sourcecode/as):02529                  stb   Wt.OBlk,y       Save in window table
0BCD DC7E             (/dd/sourcecode/as):02530                  ldd   <$007E          Get offset into MMU block for overlay window copy
0BCF EDA812           (/dd/sourcecode/as):02531                  std   Wt.OOff,y       Save it in window table
0BD2 8D5B             (/dd/sourcecode/as):02532                  bsr   L0C69           Set up get/put buffer header
0BD4 8D7C             (/dd/sourcecode/as):02533                  bsr   L0C8D           Preserve screen under overlay window
0BD6 5F               (/dd/sourcecode/as):02534                  clrb                  No error & return
0BD7 39               (/dd/sourcecode/as):02535         L0C0A    rts   
                      (/dd/sourcecode/as):02536         
                      (/dd/sourcecode/as):02537         * Setup # bytes wide overlay window is & offset to get to next line in overlay
                      (/dd/sourcecode/as):02538         *   window when saving/restoring
                      (/dd/sourcecode/as):02539         * Entry: Y=Current (or current Overlay) window ptr
0BD8 D660             (/dd/sourcecode/as):02540         L0C0B    ldb   <$60            Get screen type
0BDA 2A07             (/dd/sourcecode/as):02541                  bpl   L0C18           If gfx window, skip ahead
0BDC D650             (/dd/sourcecode/as):02542                  ldb   <$50            Get LSB of X size of overlay window
0BDE 58               (/dd/sourcecode/as):02543                  lslb                  Multiply x2 (for attribute byte)
0BDF D709             (/dd/sourcecode/as):02544                  stb   <$09            Save width of window (in bytes)
0BE1 2004             (/dd/sourcecode/as):02545                  bra   L0C1C           Skip ahead
                      (/dd/sourcecode/as):02546         
0BE3 8D0E             (/dd/sourcecode/as):02547         L0C18    bsr   L0C2B           Calculate width info for Gfx windows
0BE5 D609             (/dd/sourcecode/as):02548                  ldb   <$09            Get # bytes for width of window
0BE7 9652             (/dd/sourcecode/as):02549         L0C1C    lda   <$52            Get height of window in bytes
0BE9 3D               (/dd/sourcecode/as):02550                  mul                   Calculate total # bytes needed
0BEA DD80             (/dd/sourcecode/as):02551                  std   <$80            Preserve # bytes needed to hold saved area
0BEC D663             (/dd/sourcecode/as):02552                  ldb   <$63            Get # bytes per row on screen
0BEE D009             (/dd/sourcecode/as):02553                  subb  <$09            Subtract # bytes wide saved area will be
0BF0 D70A             (/dd/sourcecode/as):02554                  stb   <$0A            Store # bytes to next line after current width is done
0BF2 39               (/dd/sourcecode/as):02555                  rts                   Return
                      (/dd/sourcecode/as):02556         
                      (/dd/sourcecode/as):02557         * Calculate GP buffer width in bytes for graphics, & # pixels used in first &
                      (/dd/sourcecode/as):02558         *  last bytes of each GP buffer line
                      (/dd/sourcecode/as):02559         *   (Used by GetBlk, GPLoad, OWSet)
                      (/dd/sourcecode/as):02560         * Entry: B=Screen type
0BF3 8607             (/dd/sourcecode/as):02561         L0C2B    lda   #%00000111      2 color divide by 8 mask
0BF5 5A               (/dd/sourcecode/as):02562                  decb  
0BF6 2706             (/dd/sourcecode/as):02563                  beq   L0C38           For 640x200x2 screens
0BF8 44               (/dd/sourcecode/as):02564                  lsra                  %00000011 divide by 2 mask
0BF9 C103             (/dd/sourcecode/as):02565                  cmpb  #$03            16 color?
0BFB 2601             (/dd/sourcecode/as):02566                  bne   L0C38           No, leave as 4 color divide by 2 mask
0BFD 44               (/dd/sourcecode/as):02567                  lsra                  16 color divide by 2 mask
0BFE 9797             (/dd/sourcecode/as):02568         L0C38    sta   <$97            Preserve mask for # pixels used in 1 byte
0C00 D648             (/dd/sourcecode/as):02569                  ldb   <$48            Get working X coordinate LSB (0 from OWSet)
0C02 53               (/dd/sourcecode/as):02570                  comb                  Make 'hole' to calculate # pixels
0C03 D497             (/dd/sourcecode/as):02571                  andb  <$97            Use mask to calculate # pixels used
0C05 5C               (/dd/sourcecode/as):02572                  incb                  Make base 1
0C06 D706             (/dd/sourcecode/as):02573                  stb   <$06            Preserve # pixels used in 1st byte of GP line
0C08 4F               (/dd/sourcecode/as):02574                  clra                  D=# pixels used in last byte
0C09 10934F           (/dd/sourcecode/as):02575                  cmpd  <$4F            More than # bytes on screen?
0C0C 2C0B             (/dd/sourcecode/as):02576                  bge   L0C53           Yes, 
0C0E D650             (/dd/sourcecode/as):02577                  ldb   <$50            Otherwise, get LSB of X size in bytes
0C10 D006             (/dd/sourcecode/as):02578                  subb  <$06            Subtract # pixels used in first byte
0C12 D497             (/dd/sourcecode/as):02579                  andb  <$97            Calculate # pixels in last byte
0C14 2603             (/dd/sourcecode/as):02580                  bne   L0C53           If not 0, it is legit
0C16 D697             (/dd/sourcecode/as):02581                  ldb   <$97            If it is 0, then use full byte's worth
0C18 5C               (/dd/sourcecode/as):02582                  incb
0C19 D707             (/dd/sourcecode/as):02583         L0C53    stb   <$07            Save # pixels used in last byte of GP line
0C1B 4F               (/dd/sourcecode/as):02584                  clra                  D=# of pixels wide GP buffer is
0C1C D648             (/dd/sourcecode/as):02585                  ldb   <$48            Get LSB of 'working' X coordinate
0C1E D497             (/dd/sourcecode/as):02586                  andb  <$97            AND it with # pixels/byte
0C20 D34F             (/dd/sourcecode/as):02587                  addd  <$4F            Add value to X size (in bytes)
0C22 DB97             (/dd/sourcecode/as):02588                  addb  <$97            Add # pixels/byte
0C24 8900             (/dd/sourcecode/as):02589                  adca  #$00            Make into D register
                      (/dd/sourcecode/as):02590         * Divide loop: Divide by 4 for 16 color, by 8 for 4 color & by 16 for 2 color
     0C26             (/dd/sourcecode/as):02591         L0C60    equ   *
                      (/dd/sourcecode/as):02592                IFNE  H6309
                      (/dd/sourcecode/as):02593                  lsrd                  Divide by 2
                      (/dd/sourcecode/as):02594                ELSE
0C26 44               (/dd/sourcecode/as):02595                  lsra
0C27 56               (/dd/sourcecode/as):02596                  rorb
                      (/dd/sourcecode/as):02597                ENDC
0C28 0497             (/dd/sourcecode/as):02598                  lsr   <$97            Shift right
0C2A 26FA             (/dd/sourcecode/as):02599                  bne   L0C60           until we hit first 0 bit
0C2C D709             (/dd/sourcecode/as):02600                  stb   <$09            # bytes for width of overlay window
0C2E 39               (/dd/sourcecode/as):02601                  rts   
                      (/dd/sourcecode/as):02602         
                      (/dd/sourcecode/as):02603         * Setup buffer header
     0C2F             (/dd/sourcecode/as):02604         L0C69    equ   *
                      (/dd/sourcecode/as):02605                IFNE  H6309
                      (/dd/sourcecode/as):02606                  ldq   <$004F       get X & Y sizes (in pixels)
                      (/dd/sourcecode/as):02607                  stq   Grf.XSz,x    save it in buffer header
                      (/dd/sourcecode/as):02608                ELSE
0C2F DC51             (/dd/sourcecode/as):02609                  ldd   <$51
0C31 ED09             (/dd/sourcecode/as):02610                  std   Grf.XSz+2,x
0C33 DDB5             (/dd/sourcecode/as):02611                  std   <$B5 
0C35 DC4F             (/dd/sourcecode/as):02612                  ldd   <$4F
0C37 ED07             (/dd/sourcecode/as):02613                  std   Grf.XSz,x
                      (/dd/sourcecode/as):02614                ENDC
0C39 D660             (/dd/sourcecode/as):02615                  ldb   <$0060       get screen type
0C3B E70E             (/dd/sourcecode/as):02616                  stb   Grf.STY,x    save it in header
0C3D DC06             (/dd/sourcecode/as):02617                  ldd   <$0006       Get start & end pixel masks (for uneven bytes)
0C3F ED0C             (/dd/sourcecode/as):02618                  std   Grf.LfPx,x   save them in header
0C41 D609             (/dd/sourcecode/as):02619                  ldb   <$0009       Get width of buffer in bytes?
0C43 E70B             (/dd/sourcecode/as):02620                  stb   Grf.XBSz,x   save it in header
0C45 4F               (/dd/sourcecode/as):02621                  clra               D=B
0C46 DD4F             (/dd/sourcecode/as):02622                  std   <$004F       Save into working X coord
0C48 39               (/dd/sourcecode/as):02623                  rts   
                      (/dd/sourcecode/as):02624         
                      (/dd/sourcecode/as):02625         * Move get/put buffer to screen
                      (/dd/sourcecode/as):02626         * Entry: Y=Ptr to GP buffer?
0C49 30A4             (/dd/sourcecode/as):02627         L0C81    leax  ,y           X=Ptr to GP buffer
0C4B 9697             (/dd/sourcecode/as):02628                  lda   <$0097       Get # bytes to start on next GP line on screen
0C4D 970A             (/dd/sourcecode/as):02629                  sta   <$000A       Save in another spot
0C4F 8601             (/dd/sourcecode/as):02630                  lda   #$01         flag we're going to screen
0C51 21               (/dd/sourcecode/as):02631                  fcb   $21          skip 1 byte
                      (/dd/sourcecode/as):02632         * Move get/put buffer to mem
0C52 4F               (/dd/sourcecode/as):02633         L0C8D    clra               Flag we're going to memory
0C53 9799             (/dd/sourcecode/as):02634                  sta   <$0099       save flag
                      (/dd/sourcecode/as):02635         * Move buffer to screen/mem
                      (/dd/sourcecode/as):02636         * Attempt reversing roles of D & W
0C55 3420             (/dd/sourcecode/as):02637                  pshs  y            preserve y
0C57 318820           (/dd/sourcecode/as):02638                  leay  Grf.Siz,x    get pointer to raw buffer data
0C5A 9E72             (/dd/sourcecode/as):02639                  ldx   <$0072       get address of screen
0C5C D650             (/dd/sourcecode/as):02640         L0C96    ldb   <$0050       Get width count of buffer
0C5E 8D09             (/dd/sourcecode/as):02641                  bsr   PutOneL      put one line
0C60 D60A             (/dd/sourcecode/as):02642                  ldb   <$000A       get width # bytes to start of next GP line on scrn
0C62 3A               (/dd/sourcecode/as):02643                  abx                move to next line
0C63 0A52             (/dd/sourcecode/as):02644                  dec   <$0052       done height?
0C65 26F5             (/dd/sourcecode/as):02645                  bne   L0C96        no, go do next line
0C67 35A0             (/dd/sourcecode/as):02646                  puls  pc,y         restore & return
                      (/dd/sourcecode/as):02647         
                      (/dd/sourcecode/as):02648         * put one line from a GP buffer onto the screen
0C69 4F               (/dd/sourcecode/as):02649         PutOneL  clra               make 16-bit number of width of GP buffer
                      (/dd/sourcecode/as):02650                IFNE  H6309
                      (/dd/sourcecode/as):02651                  tfr   d,w          copy it to W
                      (/dd/sourcecode/as):02652                  addr  y,d          check if we will need to get next GP 8k bank
                      (/dd/sourcecode/as):02653                ELSE
0C6A DDB5             (/dd/sourcecode/as):02654                  std   <$B5
0C6C 109FBF           (/dd/sourcecode/as):02655                  sty   <grScrtch
0C6F D3BF             (/dd/sourcecode/as):02656                  addd  <grScrtch
                      (/dd/sourcecode/as):02657                ENDC
0C71 8140             (/dd/sourcecode/as):02658                  cmpa  #$40         do we?
0C73 251B             (/dd/sourcecode/as):02659                  blo   L0C98        nope, go do it
0C75 CC4000           (/dd/sourcecode/as):02660                  ldd   #$4000       calculate # bytes we can do from this 8k bank
                      (/dd/sourcecode/as):02661                IFNE  H6309
                      (/dd/sourcecode/as):02662                  subr  y,d
                      (/dd/sourcecode/as):02663                  subr  d,w          calculate leftover into W
                      (/dd/sourcecode/as):02664                  exg   d,w          Swap for copy
                      (/dd/sourcecode/as):02665                ELSE
0C78 109FBF           (/dd/sourcecode/as):02666                  sty   <grScrtch
0C7B 93BF             (/dd/sourcecode/as):02667                  subd  <grScrtch    D=D-Y
0C7D 3446             (/dd/sourcecode/as):02668                  pshs  d,u          save regD & regU
0C7F DCB5             (/dd/sourcecode/as):02669                  ldd   <$B5         get regW
0C81 A3E4             (/dd/sourcecode/as):02670                  subd  ,s           subr d,w regD now = regW
0C83 EEE1             (/dd/sourcecode/as):02671                  ldu   ,s++         get regD
0C85 DFB5             (/dd/sourcecode/as):02672                  stu   <$B5         exg d,w
0C87 3540             (/dd/sourcecode/as):02673                  puls  u
                      (/dd/sourcecode/as):02674                ENDC
0C89 8D05             (/dd/sourcecode/as):02675                  bsr   L0C98        move first chunk
                      (/dd/sourcecode/as):02676                IFNE  H6309
                      (/dd/sourcecode/as):02677                  tfr   d,w          Move remainder to W
                      (/dd/sourcecode/as):02678                ELSE
0C8B DDB5             (/dd/sourcecode/as):02679                  std   <$B5         Save size to copy in 2nd chunk
                      (/dd/sourcecode/as):02680                ENDC
0C8D 17025D           (/dd/sourcecode/as):02681                  lbsr  L0E70        go map in next block & reset buffer pointer
                      (/dd/sourcecode/as):02682         * Move a graphics line of data
                      (/dd/sourcecode/as):02683         * Entry: W=# contiguous bytes to move
0C90 0D99             (/dd/sourcecode/as):02684         L0C98    tst   <$0099       going to screen or mem?
0C92 260F             (/dd/sourcecode/as):02685                  bne   L0CA2        screen, go move it
                      (/dd/sourcecode/as):02686                IFNE  H6309
                      (/dd/sourcecode/as):02687                  tfm   x+,y+        Copy from screen to mem
                      (/dd/sourcecode/as):02688                  rts
                      (/dd/sourcecode/as):02689                  
                      (/dd/sourcecode/as):02690                ELSE
                      (/dd/sourcecode/as):02691         * Entry: X=src ptr
                      (/dd/sourcecode/as):02692         *        Y=Dest ptr
                      (/dd/sourcecode/as):02693         *        <$B5=# of bytes to copy
                      (/dd/sourcecode/as):02694         * Exit:  X=end src ptr
                      (/dd/sourcecode/as):02695         *        Y=end dest ptr
                      (/dd/sourcecode/as):02696         *        A,U is preserved
                      (/dd/sourcecode/as):02697         *      <$B5 zeroed out (this may not be necessary)
0C94 3456             (/dd/sourcecode/as):02698         CallCpy  pshs   d,x,u      Preserve size, X (src ptr), U
0C96 3384             (/dd/sourcecode/as):02699                  leau   ,x         U=src ptr
0C98 DCB5             (/dd/sourcecode/as):02700                  ldd    <$B5       D=# of bytes to copy
0C9A 2705             (/dd/sourcecode/as):02701                  beq    LMove3b    If none, restore regs & exit
0C9C 17FE9E           (/dd/sourcecode/as):02702                  lbsr   StkBlCpy   Go copy line
0C9F EF62             (/dd/sourcecode/as):02703                  stu    2,s        Save updated src ptr on stack to pull into X
0CA1 35D6             (/dd/sourcecode/as):02704         LMove3b  puls  d,x,u,pc
                      (/dd/sourcecode/as):02705                ENDC
                      (/dd/sourcecode/as):02706         
     0CA3             (/dd/sourcecode/as):02707         L0CA2    equ   *
                      (/dd/sourcecode/as):02708                IFNE  H6309
                      (/dd/sourcecode/as):02709                  tfm   y+,x+        Copy from mem to screen
                      (/dd/sourcecode/as):02710                  rts
                      (/dd/sourcecode/as):02711         
                      (/dd/sourcecode/as):02712                ELSE
                      (/dd/sourcecode/as):02713         * Change to use mem copy vector later
0CA3 1E12             (/dd/sourcecode/as):02714                   exg   x,y
0CA5 8DED             (/dd/sourcecode/as):02715                   bsr   CallCpy
0CA7 1E12             (/dd/sourcecode/as):02716                   exg   x,y
0CA9 39               (/dd/sourcecode/as):02717                   rts
                      (/dd/sourcecode/as):02718                ENDC
                      (/dd/sourcecode/as):02719         
                      (/dd/sourcecode/as):02720         * PutBlk entry point
                      (/dd/sourcecode/as):02721         * Entry from GRF/WINDInt:
                      (/dd/sourcecode/as):02722         * <$57=Group #
                      (/dd/sourcecode/as):02723         * <$58=Buffer #
                      (/dd/sourcecode/as):02724         * <$47=Upper left X coord
                      (/dd/sourcecode/as):02725         * <$49=Upper left Y coord
0CAA 17F44D           (/dd/sourcecode/as):02726         L0CBB    lbsr  L0177        Go map in window & setup some GRFDRV vars
0CAD 17FBF4           (/dd/sourcecode/as):02727                  lbsr  L0930        search & map in get put buffer
0CB0 254A             (/dd/sourcecode/as):02728                  bcs   L0CF5        Error; exit with it
0CB2 D77D             (/dd/sourcecode/as):02729                  stb   <$007D       save block # of buffer
0CB4 9F7E             (/dd/sourcecode/as):02730                  stx   <$007E       save offset into block buffer starts at
                      (/dd/sourcecode/as):02731                IFNE  H6309
                      (/dd/sourcecode/as):02732                  ldq   Grf.XSz,x    Get X&Y Sizes of buffer
                      (/dd/sourcecode/as):02733                  decd               Adjust since width, not coord
                      (/dd/sourcecode/as):02734                  decw
                      (/dd/sourcecode/as):02735                  stq   <$4F         Save them
                      (/dd/sourcecode/as):02736                ELSE
0CB6 EC09             (/dd/sourcecode/as):02737                  ldd   Grf.XSz+2,x
0CB8 830001           (/dd/sourcecode/as):02738                  subd  #1
0CBB DD51             (/dd/sourcecode/as):02739                  std   <$51
0CBD DDB5             (/dd/sourcecode/as):02740                  std   <$B5
0CBF EC07             (/dd/sourcecode/as):02741                  ldd   Grf.XSz,x
0CC1 830001           (/dd/sourcecode/as):02742                  subd  #1
0CC4 DD4F             (/dd/sourcecode/as):02743                  std   <$4f
                      (/dd/sourcecode/as):02744                ENDC
0CC6 1714C9           (/dd/sourcecode/as):02745                  lbsr  L1DF6        Check validity/scale starting X/Y coords
0CC9 2531             (/dd/sourcecode/as):02746                  bcs   L0CF5        Error, exit with it
0CCB 1714EA           (/dd/sourcecode/as):02747                  lbsr  L1E01        Check validity/scale X&Y sizes
0CCE 252C             (/dd/sourcecode/as):02748                  bcs   L0CF5        Error; exit with it
                      (/dd/sourcecode/as):02749                IFNE  H6309
                      (/dd/sourcecode/as):02750                  ldq   <$4f         Adjust widths back
                      (/dd/sourcecode/as):02751                  incd
                      (/dd/sourcecode/as):02752                  incw
                      (/dd/sourcecode/as):02753                  stq   <$4f
                      (/dd/sourcecode/as):02754                ELSE
0CD0 DC51             (/dd/sourcecode/as):02755                  ldd   <$51
0CD2 C30001           (/dd/sourcecode/as):02756                  addd  #1
0CD5 DD51             (/dd/sourcecode/as):02757                  std   <$51
0CD7 DDB5             (/dd/sourcecode/as):02758                  std   <$B5
0CD9 DC4F             (/dd/sourcecode/as):02759                  ldd   <$4f
0CDB C30001           (/dd/sourcecode/as):02760                  addd  #1
0CDE DD4F             (/dd/sourcecode/as):02761                  std   <$4f
                      (/dd/sourcecode/as):02762                ENDC
0CE0 1706C4           (/dd/sourcecode/as):02763                  lbsr  L1E9D        calculate screen address & start pixel mask
0CE3 9F72             (/dd/sourcecode/as):02764                  stx   <$0072       save screen address
0CE5 D774             (/dd/sourcecode/as):02765                  stb   <$0074       Save start pixel mask
0CE7 109E7E           (/dd/sourcecode/as):02766                  ldy   <$007E       get ptr to GP buffer
0CEA 8601             (/dd/sourcecode/as):02767                  lda   #$01         Flag to indicate we have to check size vs. window
0CEC 8D2D             (/dd/sourcecode/as):02768                  bsr   L0D14        Go set up start/end pixel masks & check scrn types
0CEE 2505             (/dd/sourcecode/as):02769                  bcs   L0CEE        If screen type different or has to be clipped, go
0CF0 1700D5           (/dd/sourcecode/as):02770                  lbsr  L0D9D        Screen types same & fits; do normal putting
0CF3 2006             (/dd/sourcecode/as):02771                  bra   L0CF4        return without error
                      (/dd/sourcecode/as):02772         * Get/put width buffer's original screen type being different from actual
                      (/dd/sourcecode/as):02773         *   screen type or will go ever edge of window go here
0CF5 170177           (/dd/sourcecode/as):02774         L0CEE    lbsr  L0E03        ??? Do set up for screen type conversions
0CF8 170219           (/dd/sourcecode/as):02775                  lbsr  L0E97        Do actual PUTting
0CFB 5F               (/dd/sourcecode/as):02776         L0CF4    clrb               No error & return to system
0CFC 7E50F7           (/dd/sourcecode/as):02777         L0CF5    jmp   >GrfStrt+SysRet
                      (/dd/sourcecode/as):02778         
                      (/dd/sourcecode/as):02779         * Place Overlay window's original contents back on screen
0CFF 3420             (/dd/sourcecode/as):02780         L0CF8    pshs  y            Preserve window table ptr
0D01 EC33             (/dd/sourcecode/as):02781                  ldd   Wt.LStrt,y   get screen logical start address
0D03 DD72             (/dd/sourcecode/as):02782                  std   <$0072       Save it
                      (/dd/sourcecode/as):02783                IFNE  H6309
                      (/dd/sourcecode/as):02784                  clrd
                      (/dd/sourcecode/as):02785                ELSE
0D05 4F               (/dd/sourcecode/as):02786                  clra
0D06 5F               (/dd/sourcecode/as):02787                  clrb
                      (/dd/sourcecode/as):02788                ENDC
0D07 DD47             (/dd/sourcecode/as):02789                  std   <$0047       'Working' X Coord to 0
0D09 109E7E           (/dd/sourcecode/as):02790                  ldy   <$007E       Get offset to buffer
0D0C 8D0D             (/dd/sourcecode/as):02791                  bsr   L0D14        Go verify that overlay can fit back on screen
0D0E 2506             (/dd/sourcecode/as):02792                  bcs   L0D0F        Couldn't put, exit with error
0D10 17FF36           (/dd/sourcecode/as):02793                  lbsr  L0C81        Move get/put buffer to screen (fast put)
0D13 5F               (/dd/sourcecode/as):02794                  clrb               No error & return
0D14 35A0             (/dd/sourcecode/as):02795                  puls  pc,y
                      (/dd/sourcecode/as):02796         
0D16 53               (/dd/sourcecode/as):02797         L0D0F    comb  
0D17 C6BE             (/dd/sourcecode/as):02798                  ldb   #$BE         get internal integrity check error
0D19 35A0             (/dd/sourcecode/as):02799                  puls  pc,y
                      (/dd/sourcecode/as):02800         
                      (/dd/sourcecode/as):02801         * Check for common screen type between window & buffer, and check if the
                      (/dd/sourcecode/as):02802         * PUT will need to be clipped. If screen types different or clipping
                      (/dd/sourcecode/as):02803         * required, exit with carry set
0D1B 3410             (/dd/sourcecode/as):02804         L0D14    pshs  x            Save screen address
0D1D D660             (/dd/sourcecode/as):02805                  ldb   <$0060       get screen type
0D1F E12E             (/dd/sourcecode/as):02806                  cmpb  Grf.STY,y    Same as screen type of GP buffer's screen type?
0D21 2711             (/dd/sourcecode/as):02807                  beq   GdTyp        Yes, no problem so far
                      (/dd/sourcecode/as):02808         * 03/03/93 mod: 4 color windows will count as same type
0D23 5D               (/dd/sourcecode/as):02809                  tstb               (to properly check high bit)
0D24 2B68             (/dd/sourcecode/as):02810                  bmi   L0D63        If text, exit with carry set
0D26 C502             (/dd/sourcecode/as):02811                  bitb  #$02         Check 4 color mode bit
0D28 2764             (/dd/sourcecode/as):02812                  beq   L0D63        Not a 4 color mode, so set carry & exit
                      (/dd/sourcecode/as):02813                IFNE  H6309
                      (/dd/sourcecode/as):02814                  tim   #$02,Grf.STY,y Check 4 color mode bit in buffer's screen type
                      (/dd/sourcecode/as):02815                ELSE
0D2A 3402             (/dd/sourcecode/as):02816                  pshs  a
0D2C A62E             (/dd/sourcecode/as):02817                  lda   Grf.STY,y 
0D2E 8502             (/dd/sourcecode/as):02818                  bita  #2
0D30 3502             (/dd/sourcecode/as):02819                  puls  a
                      (/dd/sourcecode/as):02820                ENDC
0D32 275A             (/dd/sourcecode/as):02821                  beq   L0D63        It's not a 4 color mode, so set carry & exit
0D34 5D               (/dd/sourcecode/as):02822         GdTyp    tstb               graphics window?
0D35 2A08             (/dd/sourcecode/as):02823                  bpl   L0D27        yep, go on
0D37 C6FF             (/dd/sourcecode/as):02824                  ldb   #$FF         Group # forced to $FF (overlay window)
0D39 D700             (/dd/sourcecode/as):02825                  stb   <$0000       Set right based pixel mask to all
0D3B D701             (/dd/sourcecode/as):02826                  stb   <$0001       Ditto for left based
0D3D 2044             (/dd/sourcecode/as):02827                  bra   L0D58        Skip ahead
                      (/dd/sourcecode/as):02828         
                      (/dd/sourcecode/as):02829         * Process graphics put (A=1 if straight from PutBlk,0 if from OWEnd)
                      (/dd/sourcecode/as):02830         * If A=1, need to see if window fits (L0D27 routine)
                      (/dd/sourcecode/as):02831         * If A=0, we already know it did, so we can skip size checks
                      (/dd/sourcecode/as):02832         
                      (/dd/sourcecode/as):02833         * Should change CLIPPING checks so that it just changes some DP variables
                      (/dd/sourcecode/as):02834         *  for # bytes to print line, # bytes per line on screen & # bytes per line
                      (/dd/sourcecode/as):02835         *  in GP buffer. That way even byte/same color mode clipped GP buffers will go
                      (/dd/sourcecode/as):02836         *  full speed as well.
0D3F 8D7E             (/dd/sourcecode/as):02837         L0D27    bsr   L0D94        set up <$50 = X-count, <$52 = y-count
0D41 4D               (/dd/sourcecode/as):02838                  tsta               Do we already know size is legit?
0D42 2725             (/dd/sourcecode/as):02839                  beq   L0D3F        Yes, skip ahead
                      (/dd/sourcecode/as):02840         * don't bother for now to do clipping on X-boundaries, i.e. off rhs of the
                      (/dd/sourcecode/as):02841         * screen
0D44 EC27             (/dd/sourcecode/as):02842                  ldd   Grf.XSz,y    size in pixels of the GP buffer
0D46 DC47             (/dd/sourcecode/as):02843                  ldd   <$0047       Get upper left X coord of PUT
0D48 E327             (/dd/sourcecode/as):02844                  addd  Grf.XSz,y    Add X size of GP buffer
0D4A 10936A           (/dd/sourcecode/as):02845                  cmpd  <$006A       past max X coord.?  (i.e. 319)
0D4D 2308             (/dd/sourcecode/as):02846                  bls   L0D30        no, don't clip it
                      (/dd/sourcecode/as):02847                IFNE  H6309
                      (/dd/sourcecode/as):02848                  decd               are we overflowing by one pixel  (i.e.320)
                      (/dd/sourcecode/as):02849                ELSE
0D4F 830001           (/dd/sourcecode/as):02850                  subd  #1
                      (/dd/sourcecode/as):02851                ENDC
0D52 10936A           (/dd/sourcecode/as):02852                  cmpd  <$006A       check against highest allowed X
0D55 2637             (/dd/sourcecode/as):02853                  bne   L0D63        not the same, so we go clip it
0D57 EC29             (/dd/sourcecode/as):02854         L0D30    ldd   Grf.YSz,y    Get Y size: ATD: 16-bit, so we can check for >256!
0D59 D349             (/dd/sourcecode/as):02855                  addd  <$0049       add it to upper left Y coord. ( max 199)
0D5B 10936C           (/dd/sourcecode/as):02856                  cmpd  <$006C       past max Y coord.?
0D5E 2509             (/dd/sourcecode/as):02857                  blo   L0D3F        no, don't bother clipping it
                      (/dd/sourcecode/as):02858         * Y coord clipping added 03/10/96 by ATD
0D60 DC6C             (/dd/sourcecode/as):02859                  ldd   <$006C       get max. Y coord
0D62 9349             (/dd/sourcecode/as):02860                  subd  <$0049       take out starting Y coord
                      (/dd/sourcecode/as):02861                IFNE  H6309
                      (/dd/sourcecode/as):02862                  incd               make it PUT at least one line...
                      (/dd/sourcecode/as):02863                ELSE
0D64 C30001           (/dd/sourcecode/as):02864                  addd  #1
                      (/dd/sourcecode/as):02865                ENDC
0D67 D752             (/dd/sourcecode/as):02866                  stb   <$52         save y-count of pixels to do
                      (/dd/sourcecode/as):02867         * Divide by # pixels / byte to see if even byte boundary
0D69 D660             (/dd/sourcecode/as):02868         L0D3F    ldb   <$0060       get screen type
0D6B 8E4D9A           (/dd/sourcecode/as):02869                  ldx   #GrfStrt+L0D70-1  Point to powers of 2 division table
0D6E 9648             (/dd/sourcecode/as):02870                  lda   <$0048       get LSB of X coord.
0D70 43               (/dd/sourcecode/as):02871                  coma               invert it
0D71 A485             (/dd/sourcecode/as):02872                  anda  b,x          Get # ^2 divisions
0D73 4C               (/dd/sourcecode/as):02873                  inca               Add 1
0D74 A12C             (/dd/sourcecode/as):02874                  cmpa  Grf.LfPx,y   Same as # pixels used in 1st byte of GP buffer?
0D76 2616             (/dd/sourcecode/as):02875                  bne   L0D63        No, set carry indicating non-even byte boundary
0D78 8D17             (/dd/sourcecode/as):02876                  bsr   L0D66        Go get starting/ending pixel masks
0D7A 9700             (/dd/sourcecode/as):02877                  sta   <$0000       Save right-based mask
0D7C EC2D             (/dd/sourcecode/as):02878                  ldd   Grf.RtPx,y   Get right based pixel mask & GP buffer type
0D7E 8D11             (/dd/sourcecode/as):02879                  bsr   L0D66        Go get starting/ending pixel masks
0D80 D701             (/dd/sourcecode/as):02880                  stb   <$0001       Save left-based pixel mask
0D82 8C               (/dd/sourcecode/as):02881                  fcb   $8C          skip setting up
                      (/dd/sourcecode/as):02882         * Text put comes here with B=Group # ($FF) for overlay windows
                      (/dd/sourcecode/as):02883         * Entry: B=buffer block #
0D83 8D3A             (/dd/sourcecode/as):02884         L0D58    bsr   L0D94        Move x-size to $50 y-size to $52
0D85 D663             (/dd/sourcecode/as):02885                  ldb   <$0063       Get # bytes/row for screen
0D87 D050             (/dd/sourcecode/as):02886                  subb  <$0050       subtract LSB of X size
0D89 D797             (/dd/sourcecode/as):02887                  stb   <$0097       Save width of buffer
0D8B 5F               (/dd/sourcecode/as):02888                  clrb               No error, restore screen address & return
0D8C 3590             (/dd/sourcecode/as):02889                  puls  pc,x
                      (/dd/sourcecode/as):02890         
0D8E 53               (/dd/sourcecode/as):02891         L0D63    comb               Different screen types or clipping required, set
0D8F 3590             (/dd/sourcecode/as):02892                  puls  pc,x          carry, restore screen address & return
                      (/dd/sourcecode/as):02893         
                      (/dd/sourcecode/as):02894         * Entry: B=Gfx screen type (1-4)
                      (/dd/sourcecode/as):02895         * A=# pixels to go in?
0D91 8E4D9E           (/dd/sourcecode/as):02896         L0D66    ldx   #GrfStrt+L0D74-1  Point to table
0D94 E685             (/dd/sourcecode/as):02897                  ldb   b,x            Get vector offset to proper table
0D96 3A               (/dd/sourcecode/as):02898                  abx                  Calculate vector
0D97 48               (/dd/sourcecode/as):02899                  lsla                 2 bytes/entry
0D98 EC86             (/dd/sourcecode/as):02900                  ldd   a,x            Get both masks & return
0D9A 39               (/dd/sourcecode/as):02901                  rts   
                      (/dd/sourcecode/as):02902         
                      (/dd/sourcecode/as):02903         * Some sort of bit mask table - appears to be used in a LSR loop after inverted
                      (/dd/sourcecode/as):02904         *   ,will continue loop until the carried bit changes to 0
0D9B 07               (/dd/sourcecode/as):02905         L0D70    fcb   %00000111      640x200x2
0D9C 03               (/dd/sourcecode/as):02906                  fcb   %00000011      320x200x4
0D9D 03               (/dd/sourcecode/as):02907                  fcb   %00000011      640x200x4
0D9E 01               (/dd/sourcecode/as):02908                  fcb   %00000001      320x200x16
                      (/dd/sourcecode/as):02909         
                      (/dd/sourcecode/as):02910         * Vector table based on screen type (points to following 3 tables)
0D9F 03               (/dd/sourcecode/as):02911         L0D74    fcb   L0D78-(L0D74+1)   640x200x2
0DA0 13               (/dd/sourcecode/as):02912                  fcb   L0D88-(L0D74+1)   320x200x4
0DA1 13               (/dd/sourcecode/as):02913                  fcb   L0D88-(L0D74+1)   640x200x4
0DA2 1B               (/dd/sourcecode/as):02914                  fcb   L0D90-(L0D74+1)   320x200x16
                      (/dd/sourcecode/as):02915         
                      (/dd/sourcecode/as):02916         * 2 color masks (2 bytes/entry)
0DA3 0180             (/dd/sourcecode/as):02917         L0D78    fcb   %00000001,%10000000
0DA5 03C0             (/dd/sourcecode/as):02918                  fcb   %00000011,%11000000
0DA7 07E0             (/dd/sourcecode/as):02919                  fcb   %00000111,%11100000
0DA9 0FF0             (/dd/sourcecode/as):02920                  fcb   %00001111,%11110000
0DAB 1FF8             (/dd/sourcecode/as):02921                  fcb   %00011111,%11111000
0DAD 3FFC             (/dd/sourcecode/as):02922                  fcb   %00111111,%11111100
0DAF 7FFE             (/dd/sourcecode/as):02923                  fcb   %01111111,%11111110
0DB1 FFFF             (/dd/sourcecode/as):02924                  fcb   %11111111,%11111111
                      (/dd/sourcecode/as):02925                  
                      (/dd/sourcecode/as):02926         * 4 color masks
0DB3 03C0             (/dd/sourcecode/as):02927         L0D88    fcb   %00000011,%11000000
0DB5 0FF0             (/dd/sourcecode/as):02928                  fcb   %00001111,%11110000
0DB7 3FFC             (/dd/sourcecode/as):02929                  fcb   %00111111,%11111100
0DB9 FFFF             (/dd/sourcecode/as):02930                  fcb   %11111111,%11111111
                      (/dd/sourcecode/as):02931         
                      (/dd/sourcecode/as):02932         * 16 color masks
0DBB 0FF0             (/dd/sourcecode/as):02933         L0D90    fcb   %00001111,%11110000
0DBD FFFF             (/dd/sourcecode/as):02934                  fcb   %11111111,%11111111
                      (/dd/sourcecode/as):02935         
                      (/dd/sourcecode/as):02936         * Copy X Size & Y size from GP buffer header
                      (/dd/sourcecode/as):02937         * Entry: Y=GP buffer header ptr
0DBF E62B             (/dd/sourcecode/as):02938         L0D94    ldb   Grf.XBSz,y     Get X size of GP buffer in bytes
0DC1 D750             (/dd/sourcecode/as):02939                  stb   <$50           Save X size of GP buffer in bytes
0DC3 E62A             (/dd/sourcecode/as):02940                  ldb   Grf.YSz+1,y    Get Y size of GP buffer in bytes
0DC5 D752             (/dd/sourcecode/as):02941                  stb   <$52           Save Y size of GP buffer in bytes (pixels)
0DC7 39               (/dd/sourcecode/as):02942                  rts   
                      (/dd/sourcecode/as):02943         
                      (/dd/sourcecode/as):02944         * Put buffer with buffer's screen type matching actual screen type
0DC8 D660             (/dd/sourcecode/as):02945         L0D9D    ldb   <$60           Get screen type
0DCA 8E58D9           (/dd/sourcecode/as):02946                  ldx   #GrfStrt+L16B1-1  Point to table
0DCD A685             (/dd/sourcecode/as):02947                  lda   b,x            Get # pixels per byte for this screen type
0DCF 1F89             (/dd/sourcecode/as):02948                  tfr   a,b            Dupe for D comparison
                      (/dd/sourcecode/as):02949         * no PSET?
0DD1 8E6299           (/dd/sourcecode/as):02950                  ldx   #GrfStrt+L1F9E  Point to 'normal' PSET vector
0DD4 9C64             (/dd/sourcecode/as):02951                  cmpx  <$64           Is that the current one?
0DD6 264E             (/dd/sourcecode/as):02952                  bne   L0DBE          No, use slow PUT
                      (/dd/sourcecode/as):02953         * no LSET?
0DD8 8E5852           (/dd/sourcecode/as):02954                  ldx   #GrfStrt+L1FA9  Point to 'normal' LSET vector
0DDB 9C68             (/dd/sourcecode/as):02955                  cmpx  <$68           Is that the current one?
0DDD 2647             (/dd/sourcecode/as):02956                  bne   L0DBE          Yes, can use TFM PUT
                      (/dd/sourcecode/as):02957         * no even byte boundary?
0DDF 10A32C           (/dd/sourcecode/as):02958                  cmpd  Grf.LfPx,y     Even byte boundary on both left & right sides?
0DE2 1027FE63         (/dd/sourcecode/as):02959                  lbeq  L0C81        yes, go do fast TFM put
                      (/dd/sourcecode/as):02960         * odd pixel boundaries: do 1st pixel slow, use TFM for the rest
0DE6 9799             (/dd/sourcecode/as):02961                  sta   <$0099       flag we're copying to the screen
0DE8 DC00             (/dd/sourcecode/as):02962                  ldd   <$00         masks for pixels to keep from GP buffer
                      (/dd/sourcecode/as):02963                IFNE  H6309
                      (/dd/sourcecode/as):02964                  comd
                      (/dd/sourcecode/as):02965                ELSE
0DEA 43               (/dd/sourcecode/as):02966                  coma
0DEB 53               (/dd/sourcecode/as):02967                  comb
                      (/dd/sourcecode/as):02968                ENDC
0DEC DD20             (/dd/sourcecode/as):02969                  std   <$20         masks for pixels to keep from screen
0DEE 9E72             (/dd/sourcecode/as):02970                  ldx   <$0072       get start address for PUT
0DF0 31A820           (/dd/sourcecode/as):02971                  leay  $20,y        skip GP buffer header
                      (/dd/sourcecode/as):02972         * do first byte of the line: almost a complete TFM
0DF3 A684             (/dd/sourcecode/as):02973         Put.ATFM lda   ,x           grab first byte
0DF5 9420             (/dd/sourcecode/as):02974                  anda  <$20         get only pixels we want to keep
0DF7 E6A4             (/dd/sourcecode/as):02975                  ldb   ,y           grab pixels from GP buffer
0DF9 D400             (/dd/sourcecode/as):02976                  andb  <$00         get the ones we want to keep
                      (/dd/sourcecode/as):02977                IFNE  H6309
                      (/dd/sourcecode/as):02978                  orr   b,a          OR the pixels together
                      (/dd/sourcecode/as):02979                ELSE
0DFB D7BF             (/dd/sourcecode/as):02980                  stb   <grScrtch
0DFD 9ABF             (/dd/sourcecode/as):02981                  ora   <grScrtch
                      (/dd/sourcecode/as):02982                ENDC
0DFF A7A4             (/dd/sourcecode/as):02983                  sta   ,y           save in the GP buffer
0E01 DC4F             (/dd/sourcecode/as):02984                  ldd   <$4F         get width of GP buffer in bytes
                      (/dd/sourcecode/as):02985                IFNE  H6309
                      (/dd/sourcecode/as):02986                  decd               account for 0th byte
                      (/dd/sourcecode/as):02987                ELSE
0E03 830001           (/dd/sourcecode/as):02988                  subd  #1
                      (/dd/sourcecode/as):02989                ENDC
0E06 A68B             (/dd/sourcecode/as):02990                  lda   d,x          get right hand byte from the screen
0E08 3402             (/dd/sourcecode/as):02991                  pshs  a            save end byte
                      (/dd/sourcecode/as):02992                IFNE  H6309
                      (/dd/sourcecode/as):02993                  incd
                      (/dd/sourcecode/as):02994                ELSE
0E0A C30001           (/dd/sourcecode/as):02995                  addd  #1
                      (/dd/sourcecode/as):02996                ENDC
0E0D 17FE59           (/dd/sourcecode/as):02997                  lbsr  PutOneL      blast it over using TFM
                      (/dd/sourcecode/as):02998         * do the last byte of the line
                      (/dd/sourcecode/as):02999         * this kludge is necessary because doing it the proper way would add a LOT
                      (/dd/sourcecode/as):03000         * of code to check for GP buffer 8k block boundaries.  It won't be noticed
                      (/dd/sourcecode/as):03001         * except for really large PutBlks.  Oh well.
0E10 9601             (/dd/sourcecode/as):03002                  lda   <$0001       get end pixel mask
0E12 A41F             (/dd/sourcecode/as):03003                  anda  -1,x         keep only the pixels we want
0E14 D621             (/dd/sourcecode/as):03004                  ldb   <$0021       inverted mask
0E16 E4E0             (/dd/sourcecode/as):03005                  andb  ,s+          AND in with original screen data
                      (/dd/sourcecode/as):03006                IFNE  H6309
                      (/dd/sourcecode/as):03007                  orr   b,a          OR in the pixel we put on the screen
                      (/dd/sourcecode/as):03008                ELSE
0E18 D7BF             (/dd/sourcecode/as):03009                  stb   <grScrtch
0E1A 9ABF             (/dd/sourcecode/as):03010                  ora   <grScrtch
                      (/dd/sourcecode/as):03011                ENDC
0E1C A71F             (/dd/sourcecode/as):03012                  sta   -1,x         save it
0E1E D697             (/dd/sourcecode/as):03013                  ldb   <$0097       get width of the screen
0E20 3A               (/dd/sourcecode/as):03014                  abx                go to the next line
0E21 0A52             (/dd/sourcecode/as):03015                  dec   <$52         count down one line
0E23 26CE             (/dd/sourcecode/as):03016                  bne   Put.ATFM
0E25 39               (/dd/sourcecode/as):03017                  rts
                      (/dd/sourcecode/as):03018         
                      (/dd/sourcecode/as):03019         * Either not even byte, or PSET/LSET or not defaults:use slow PUT
0E26 9705             (/dd/sourcecode/as):03020         L0DBE    sta   <$05           Save # pixels/byte
0E28 3420             (/dd/sourcecode/as):03021                  pshs  y              Save Get/Put buffer ptr
0E2A DE64             (/dd/sourcecode/as):03022                  ldu   <$64           Get PSET vector
                      (/dd/sourcecode/as):03023                IFNE  H6309
                      (/dd/sourcecode/as):03024                  ldw   <$68           Get LSET vector (for PSET routine)
                      (/dd/sourcecode/as):03025                ELSE
0E2C 9E68             (/dd/sourcecode/as):03026                  ldx   <$68
0E2E 9FB5             (/dd/sourcecode/as):03027                  stx   <$B5
                      (/dd/sourcecode/as):03028                ENDC
0E30 31A820           (/dd/sourcecode/as):03029                  leay  <$20,y         Skip buffer header
0E33 9E72             (/dd/sourcecode/as):03030                  ldx   <$72           Get address of where to start PUTting on scrn
0E35 0C97             (/dd/sourcecode/as):03031                  inc   <$97           Save # bytes to start of next line GP buffer
0E37 0A50             (/dd/sourcecode/as):03032                  dec   <$50           Adjust X byte count down for base 0
                      (/dd/sourcecode/as):03033         * Loop from here to end of L0DFA - Move Get/Put buffer onto screen using LSET
                      (/dd/sourcecode/as):03034         * logic.
                      (/dd/sourcecode/as):03035         * This outside part does the 1st byte's worth of pixels
                      (/dd/sourcecode/as):03036         * NOTE: X=ptr to current byte being done on screen
                      (/dd/sourcecode/as):03037         *       Y=ptr to current byte being done in GP buffer
0E39 D600             (/dd/sourcecode/as):03038         L0DCB    ldb   <$00           Get pixel mask for 1st byte of 1st line in buffr
0E3B 9650             (/dd/sourcecode/as):03039                  lda   <$50           Get LSB of X size
0E3D 271A             (/dd/sourcecode/as):03040                  beq   L0DED          If 0, just 1 byte to do - use last byte routine
0E3F 9799             (/dd/sourcecode/as):03041                  sta   <$99           Save LSB of X size
                      (/dd/sourcecode/as):03042         * This part does all the full-byte pixels
0E41 C6FF             (/dd/sourcecode/as):03043         L0DD5    ldb   #$FF           Mask byte- all bits
0E43 A6A0             (/dd/sourcecode/as):03044         L0DD7    lda   ,y+            Get bits to set from GP buffer
0E45 ADC4             (/dd/sourcecode/as):03045                  jsr   ,u             Put on screen
0E47 C601             (/dd/sourcecode/as):03046                  ldb   #1             Screen ptr bump count
0E49 3A               (/dd/sourcecode/as):03047                  abx                  Bump screen ptr
0E4A 108C4000         (/dd/sourcecode/as):03048                  cmpy  #$4000         Done current 8K block of Get/put buffer?
0E4E 2503             (/dd/sourcecode/as):03049                  blo   L0DE7          No, continue normally
0E50 17009A           (/dd/sourcecode/as):03050                  lbsr  L0E70          Yes, go map in next block
0E53 0A99             (/dd/sourcecode/as):03051         L0DE7    dec   <$99           Dec X byte count
0E55 26EA             (/dd/sourcecode/as):03052                  bne   L0DD5          Continue moving until done X size
                      (/dd/sourcecode/as):03053         * This part does the last byte's worth of pixels
0E57 D601             (/dd/sourcecode/as):03054                  ldb   <$01           Get pixel mask for last byte of last line
0E59 A6A0             (/dd/sourcecode/as):03055         L0DED    lda   ,y+            Get last byte for current line in GP buffer
0E5B ADC4             (/dd/sourcecode/as):03056                  jsr   ,u             Put it on screen
0E5D 108C4000         (/dd/sourcecode/as):03057                  cmpy  #$4000         Done 8K block yet?
0E61 2503             (/dd/sourcecode/as):03058                  blo   L0DFA          No, skip ahead
0E63 170087           (/dd/sourcecode/as):03059                  lbsr  L0E70          Yes, go map in next block
0E66 D697             (/dd/sourcecode/as):03060         L0DFA    ldb   <$0097         Get # bytes to beginning of next line
0E68 3A               (/dd/sourcecode/as):03061                  abx                  Point to start of next line
0E69 0A52             (/dd/sourcecode/as):03062                  dec   <$0052         Dec # of lines counter
0E6B 26CC             (/dd/sourcecode/as):03063                  bne   L0DCB          Continue putting until done
0E6D 35A0             (/dd/sourcecode/as):03064                  puls  pc,y           Restore GP buffer ptr & return
                      (/dd/sourcecode/as):03065         
                      (/dd/sourcecode/as):03066         * Put buffer with buffer's screen type different than original
0E6F 3420             (/dd/sourcecode/as):03067         L0E03    pshs  y              Save GP buffer ptr?
0E71 DC6A             (/dd/sourcecode/as):03068                  ldd   <$006A         Get max. allowed X coordinate
0E73 9347             (/dd/sourcecode/as):03069                  subd  <$0047         Subtract working X coordinate
                      (/dd/sourcecode/as):03070                IFNE  H6309
                      (/dd/sourcecode/as):03071                  incd                 Base 1
                      (/dd/sourcecode/as):03072                ELSE
0E75 C30001           (/dd/sourcecode/as):03073                  addd  #1
                      (/dd/sourcecode/as):03074                ENDC
0E78 DD9B             (/dd/sourcecode/as):03075                  std   <$009B         Save width of some sort
0E7A D66D             (/dd/sourcecode/as):03076                  ldb   <$006D         Get max. allowed Y coordinate
0E7C D04A             (/dd/sourcecode/as):03077                  subb  <$004A         Calc height of some sort
0E7E 5C               (/dd/sourcecode/as):03078                  incb                 Make base 1
0E7F 201F             (/dd/sourcecode/as):03079                  bra   L0E2F          Save it
                      (/dd/sourcecode/as):03080         
0E81 53               (/dd/sourcecode/as):03081         i.iwtyp  comb
0E82 C6B7             (/dd/sourcecode/as):03082                  ldb   #E$IWTyp
0E84 7E50F7           (/dd/sourcecode/as):03083                  jmp   >GrfStrt+SysRet
                      (/dd/sourcecode/as):03084         
                      (/dd/sourcecode/as):03085         * Called from Mouse cursor routine @ L15FE
0E87 3420             (/dd/sourcecode/as):03086         L0E14    pshs  y              Preserve GP buffer ptr
0E89 CC0140           (/dd/sourcecode/as):03087                  ldd   #320           Default res to 320 (Base 1)
                      (/dd/sourcecode/as):03088                IFNE  H6309
                      (/dd/sourcecode/as):03089                  tim   #$01,<$60      Get res bit from screen type
                      (/dd/sourcecode/as):03090                ELSE
0E8C 3402             (/dd/sourcecode/as):03091                  pshs  a
0E8E 9660             (/dd/sourcecode/as):03092                  lda   <$60
0E90 8501             (/dd/sourcecode/as):03093                  bita  #1
0E92 3502             (/dd/sourcecode/as):03094                  puls  a
                      (/dd/sourcecode/as):03095                ENDC
0E94 2702             (/dd/sourcecode/as):03096                  beq   L0E24          It is 320 mode, skip ahead
                      (/dd/sourcecode/as):03097                IFNE  H6309
                      (/dd/sourcecode/as):03098                  lsld                 Multiply by 2 to get 640
                      (/dd/sourcecode/as):03099                ELSE
0E96 58               (/dd/sourcecode/as):03100                  lslb
0E97 49               (/dd/sourcecode/as):03101                  rola
                      (/dd/sourcecode/as):03102                ENDC
0E98 933D             (/dd/sourcecode/as):03103         L0E24    subd  <$3D           Subtract last X coord Gfx cursor was ON at
0E9A DD9B             (/dd/sourcecode/as):03104                  std   <$009B         Save # pixels to end of screen
0E9C C6C7             (/dd/sourcecode/as):03105                  ldb   #MaxLine+1     Full height of screen
0E9E D040             (/dd/sourcecode/as):03106                  subb  <$0040         Calculate # pixels remaining
0EA0 D7A0             (/dd/sourcecode/as):03107         L0E2F    stb   <$00A0         Save it
0EA2 1713A8           (/dd/sourcecode/as):03108                  lbsr  L1EF1          Setup pix mask & shift vector ($79 & $7A)
0EA5 17FF17           (/dd/sourcecode/as):03109                  lbsr  L0D94          Set up element X&Y sizes (in bytes)
                      (/dd/sourcecode/as):03110         * B=Height of GP buffer (also in <$52) in bytes
0EA8 D1A0             (/dd/sourcecode/as):03111                  cmpb  <$00A0         Compare with room left on window Y axis
0EAA 2304             (/dd/sourcecode/as):03112                  bls   FullSz
0EAC D6A0             (/dd/sourcecode/as):03113                  ldb   <$00A0         Get remaining # lines on window
0EAE D752             (/dd/sourcecode/as):03114                  stb   <$0052         Save as our single counter of lines left
0EB0 EC2C             (/dd/sourcecode/as):03115         FullSz   ldd   Grf.LfPx,y     Get # pixels used in 1st byte & last byte
0EB2 DD06             (/dd/sourcecode/as):03116                  std   <$0006         Save them
0EB4 8E4709           (/dd/sourcecode/as):03117                  ldx   #GrfStrt+L075F-1  Point to color mask table index
0EB7 D660             (/dd/sourcecode/as):03118                  ldb   <$0060         Get screen type
                      (/dd/sourcecode/as):03119         * ATD: Added to get around problem of GetBlk on text screen, and PutBlk
                      (/dd/sourcecode/as):03120         * on gfx screen crashing the system!
                      (/dd/sourcecode/as):03121         * We now allow GETBlk and PutBlk on text screens, too!
0EB9 E82E             (/dd/sourcecode/as):03122                  eorb  Grf.STY,y    EOR with buffer sty type
0EBB 2BC4             (/dd/sourcecode/as):03123                  bmi   i.iwtyp      exit IMMEDIATELY if mixing text and gfx puts
0EBD D660             (/dd/sourcecode/as):03124                  ldb   <$0060       get screen type again
0EBF E685             (/dd/sourcecode/as):03125                  ldb   b,x            Calc. offset to proper color mask table
0EC1 3A               (/dd/sourcecode/as):03126                  abx   
0EC2 A680             (/dd/sourcecode/as):03127                  lda   ,x+            Get active bits mask (0001, 0011 or 1111)
0EC4 9F02             (/dd/sourcecode/as):03128                  stx   <$0002         Save base of color mask table
0EC6 8E4EF8           (/dd/sourcecode/as):03129                  ldx   #GrfStrt+L0E7C-1  Point to index for pixel tables
0EC9 E62E             (/dd/sourcecode/as):03130                  ldb   Grf.STY,y      Get GP buffers original screen type
0ECB E685             (/dd/sourcecode/as):03131                  ldb   b,x            Calc ptr to proper pixel table
0ECD 3A               (/dd/sourcecode/as):03132                  abx   
0ECE E684             (/dd/sourcecode/as):03133                  ldb   ,x             Get offset for default shift?
0ED0 3185             (/dd/sourcecode/as):03134                  leay  b,x            Get vector for 4, 2 or 1 shift
0ED2 109FA3           (/dd/sourcecode/as):03135                  sty   <$00A3         Save it
0ED5 A401             (/dd/sourcecode/as):03136                  anda  1,x            And bit mask from scrn with bit mask from GP bfr
0ED7 9708             (/dd/sourcecode/as):03137                  sta   <$0008         Save it
0ED9 E602             (/dd/sourcecode/as):03138                  ldb   2,x            Get # pixels/byte for GP buffer type
0EDB D705             (/dd/sourcecode/as):03139                  stb   <$0005         Save it
0EDD D606             (/dd/sourcecode/as):03140                  ldb   <$0006         Get # pixels used in 1st byte of GP buffer line
0EDF CB02             (/dd/sourcecode/as):03141                  addb  #$02           Adjust up to skip bit mask & # pixels/byte
0EE1 E685             (/dd/sourcecode/as):03142                  ldb   b,x            Get offset
0EE3 3185             (/dd/sourcecode/as):03143                  leay  b,x            Save vectors for bit shifts
0EE5 109FA1           (/dd/sourcecode/as):03144                  sty   <$00A1
0EE8 109FA5           (/dd/sourcecode/as):03145                  sty   <$00A5
0EEB 35A0             (/dd/sourcecode/as):03146                  puls  pc,y           Restore GP buffer ptr & return?
                      (/dd/sourcecode/as):03147         
                      (/dd/sourcecode/as):03148         * Get next 8K block of get/put buffers
                      (/dd/sourcecode/as):03149         * Exit: Y=Ptr to start of block ($2000)
0EED 0C7D             (/dd/sourcecode/as):03150         L0E70    inc   <$007D         Increment buffer block #
0EEF D67D             (/dd/sourcecode/as):03151                  ldb   <$007D         Get it
0EF1 17092D           (/dd/sourcecode/as):03152                  lbsr  L017C          Go map in next block in get/put buffer
0EF4 108E2000         (/dd/sourcecode/as):03153                  ldy   #$2000         Y=Ptr to start of GP buffer block
0EF8 39               (/dd/sourcecode/as):03154                  rts   
                      (/dd/sourcecode/as):03155         
                      (/dd/sourcecode/as):03156         * Index to proper tables for GP buffer's original screen types
0EF9 05               (/dd/sourcecode/as):03157         L0E7C    fcb   L0E80-(L0E7C-1) Type 5 (2 color)
0EFA 10               (/dd/sourcecode/as):03158                  fcb   L0E8B-(L0E7C-1) Type 6 (4 color)
0EFB 10               (/dd/sourcecode/as):03159                  fcb   L0E8B-(L0E7C-1) Type 7 (4 color)
0EFC 17               (/dd/sourcecode/as):03160                  fcb   L0E92-(L0E7C-1) Type 8 (16 color)
                      (/dd/sourcecode/as):03161         * All of following tables' references to pixel # are based on 1 being the
                      (/dd/sourcecode/as):03162         *  far left pixel in the byte
                      (/dd/sourcecode/as):03163         * Vector table for GP buffer's taken from 2 color screens
0EFD 66               (/dd/sourcecode/as):03164         L0E80    fcb   L0EE0-L0E80    <$00A3 vector
0EFE 01               (/dd/sourcecode/as):03165                  fcb   %00000001      Bit mask for 1 pixel
0EFF 08               (/dd/sourcecode/as):03166                  fcb   8              # pixels /byte
0F00 67               (/dd/sourcecode/as):03167                  fcb   L0EE1-L0E80    Shift for 1st pixel
0F01 60               (/dd/sourcecode/as):03168                  fcb   L0EDA-L0E80    Shift for 2nd pixel
0F02 61               (/dd/sourcecode/as):03169                  fcb   L0EDB-L0E80    Shift for 3rd pixel
0F03 62               (/dd/sourcecode/as):03170                  fcb   L0EDC-L0E80    Shift for 4th pixel
0F04 63               (/dd/sourcecode/as):03171                  fcb   L0EDD-L0E80    Shift for 5th pixel
0F05 64               (/dd/sourcecode/as):03172                  fcb   L0EDE-L0E80    Shift for 6th pixel
0F06 65               (/dd/sourcecode/as):03173                  fcb   L0EDF-L0E80    Shift for 7th pixel
0F07 66               (/dd/sourcecode/as):03174                  fcb   L0EE0-L0E80    Shift for 8th pixel
                      (/dd/sourcecode/as):03175         * Vector table for GP buffer's taken from 4 color screens
0F08 5A               (/dd/sourcecode/as):03176         L0E8B    fcb   L0EDF-L0E8B    <$00A3 vector
0F09 03               (/dd/sourcecode/as):03177                  fcb   %00000011      Bit mask for 1 pixel
0F0A 04               (/dd/sourcecode/as):03178                  fcb   4              # pixels/byte
0F0B 5C               (/dd/sourcecode/as):03179                  fcb   L0EE1-L0E8B    Shift for 1st pixel
0F0C 56               (/dd/sourcecode/as):03180                  fcb   L0EDB-L0E8B    Shift for 2nd pixel
0F0D 58               (/dd/sourcecode/as):03181                  fcb   L0EDD-L0E8B    Shift for 3rd pixel
0F0E 5A               (/dd/sourcecode/as):03182                  fcb   L0EDF-L0E8B    Shift for 4th pixel
                      (/dd/sourcecode/as):03183         * Vector table for GP buffer's taken from 16 color screens
0F0F 51               (/dd/sourcecode/as):03184         L0E92    fcb   L0EDD-L0E92    <$00A3 vector
0F10 0F               (/dd/sourcecode/as):03185                  fcb   %00001111      Bit mask for 1 pixel
0F11 02               (/dd/sourcecode/as):03186                  fcb   2              # pixels/byte
0F12 55               (/dd/sourcecode/as):03187                  fcb   L0EE1-L0E92    Shift for 1st pixel
0F13 51               (/dd/sourcecode/as):03188                  fcb   L0EDD-L0E92    Shift for 2nd pixel
                      (/dd/sourcecode/as):03189         
0F14 31A820           (/dd/sourcecode/as):03190         L0E97    leay  Grf.Siz,y      Skip GP buffer header
0F17 3420             (/dd/sourcecode/as):03191                  pshs  y              Save ptr to raw GP buffer data
0F19 9E72             (/dd/sourcecode/as):03192                  ldx   <$0072         Get ptr to start of buffer placement on screen
0F1B DE64             (/dd/sourcecode/as):03193                  ldu   <$64           Get PSET vector for main loop @ L0EE1
0F1D 8C               (/dd/sourcecode/as):03194                  fcb   $8C          skip 2 bytes: same cycle time, 1 byte shorter
                      (/dd/sourcecode/as):03195         
0F1E 9F72             (/dd/sourcecode/as):03196         L0E9E    stx   <$0072         Save get/put screen start address
0F20 DC9B             (/dd/sourcecode/as):03197         L0EA0    ldd   <$009B         ??? x-count to do
0F22 DD9D             (/dd/sourcecode/as):03198                  std   <$009D         ???
0F24 9650             (/dd/sourcecode/as):03199                  lda   <$0050         Get LSB of X size (in bytes)
0F26 9704             (/dd/sourcecode/as):03200                  sta   <$0004         Save # bytes left in width (including partials)
0F28 D606             (/dd/sourcecode/as):03201                  ldb   <$0006         Get # of pixels used in 1st byte of GP line
0F2A D797             (/dd/sourcecode/as):03202                  stb   <$0097         Save as # pixels left to do in current byte
0F2C DCA5             (/dd/sourcecode/as):03203                  ldd   <$00A5         Get A5 vector
0F2E DDA1             (/dd/sourcecode/as):03204                  std   <$00A1         Save as A1 vector
0F30 D674             (/dd/sourcecode/as):03205                  ldb   <$0074         Get pixel mask for 1st byte of GP buffer on scrn
                      (/dd/sourcecode/as):03206                IFNE  H6309
                      (/dd/sourcecode/as):03207                  ldw   <$68           Get LSET vector
                      (/dd/sourcecode/as):03208                ELSE
0F32 109E68           (/dd/sourcecode/as):03209                  ldy   <$68
0F35 109FB5           (/dd/sourcecode/as):03210                  sty   <$B5
                      (/dd/sourcecode/as):03211                ENDC
0F38 10AEE4           (/dd/sourcecode/as):03212         L0EB2    ldy   ,s             Get buffer data ptr
0F3B 108C4000         (/dd/sourcecode/as):03213                  cmpy  #$4000         At end of 8K block yet?
0F3F 2506             (/dd/sourcecode/as):03214                  blo   L0EC1          No, continue
0F41 D799             (/dd/sourcecode/as):03215                  stb   <$0099         Save B
0F43 8DA8             (/dd/sourcecode/as):03216                  bsr   L0E70          Go map in next 8K block
0F45 D699             (/dd/sourcecode/as):03217                  ldb   <$0099         Restore B
0F47 A6A0             (/dd/sourcecode/as):03218         L0EC1    lda   ,y+            Get byte of data from GP buffer
0F49 10AFE4           (/dd/sourcecode/as):03219                  sty   ,s             Save updated buffer ptr
0F4C 108E4F64         (/dd/sourcecode/as):03220                  ldy   #GrfStrt+L0EE1  Check if <$A1 vector points here
0F50 109CA1           (/dd/sourcecode/as):03221                  cmpy  <$00A1         no shifting of bits?
0F53 2701             (/dd/sourcecode/as):03222                  beq   L0ED6          It does, call vector
0F55 48               (/dd/sourcecode/as):03223                  lsla                 Doesn't, shift buffer data left 1 first
0F56 109E02           (/dd/sourcecode/as):03224         L0ED6    ldy   <$0002         Get ptr to table of bit masks for colors
0F59 6E9F11A1         (/dd/sourcecode/as):03225                  jmp   [>GrfMem+gr00A1]       Place byte from GP buffer on screen
                      (/dd/sourcecode/as):03226         
                      (/dd/sourcecode/as):03227         * Bit shifter for adjusting pixel placements in non-aligned, possible differ-
                      (/dd/sourcecode/as):03228         *  ent screen type, Get/put buffers
                      (/dd/sourcecode/as):03229         * Entry: W=LSET vector (for use with <$64,u vector)
0F5D 49               (/dd/sourcecode/as):03230         L0EDA    rola                 Adjust pixel to proper place in byte
0F5E 49               (/dd/sourcecode/as):03231         L0EDB    rola
0F5F 49               (/dd/sourcecode/as):03232         L0EDC    rola
0F60 49               (/dd/sourcecode/as):03233         L0EDD    rola
0F61 49               (/dd/sourcecode/as):03234         L0EDE    rola
0F62 49               (/dd/sourcecode/as):03235         L0EDF    rola
0F63 49               (/dd/sourcecode/as):03236         L0EE0    rola
0F64 3407             (/dd/sourcecode/as):03237         L0EE1    pshs  cc,d           Save carry & pixel/color masks
0F66 DC9D             (/dd/sourcecode/as):03238                  ldd   <$009D         ??? Get some sort of counter (X width?)
0F68 2714             (/dd/sourcecode/as):03239                  beq   L0EFA          If 0, skip ahead
                      (/dd/sourcecode/as):03240                IFNE  H6309
                      (/dd/sourcecode/as):03241                  decd                 Drop it down
                      (/dd/sourcecode/as):03242                ELSE
0F6A 830001           (/dd/sourcecode/as):03243                  subd  #1
                      (/dd/sourcecode/as):03244                ENDC
0F6D DD9D             (/dd/sourcecode/as):03245                  std   <$009D         Save it
0F6F EC61             (/dd/sourcecode/as):03246                  ldd   1,s            Get pixel/color masks back
0F71 9408             (/dd/sourcecode/as):03247                  anda  <$0008         Mask out all but common bits of screen/buffer types
0F73 A6A6             (/dd/sourcecode/as):03248                  lda   a,y            Get proper color bit mask
0F75 ADC4             (/dd/sourcecode/as):03249                  jsr   ,u             Put pixel on screen
0F77 E662             (/dd/sourcecode/as):03250                  ldb   2,s            Restore original pixel bit mask
0F79 170A7E           (/dd/sourcecode/as):03251                  lbsr  L1F0E          B=New pixel mask, X=new scrn addr. (if chng)
0F7C E762             (/dd/sourcecode/as):03252                  stb   2,s            Save pixel mask for next pixel
0F7E 0A97             (/dd/sourcecode/as):03253         L0EFA    dec   <$0097         Dec # pixels left in current byte
0F80 2706             (/dd/sourcecode/as):03254                  beq   L0F04          Done byte, skip ahead
0F82 3507             (/dd/sourcecode/as):03255                  puls  d,cc           Restore pixel/color masks & carry
0F84 6E9F11A3         (/dd/sourcecode/as):03256                  jmp   [>GrfMem+gr00A3]       Call vector
                      (/dd/sourcecode/as):03257         
                      (/dd/sourcecode/as):03258         * Current byte's worth of pixels done: set up next byte
0F88 3263             (/dd/sourcecode/as):03259         L0F04    leas  3,s            Eat stack
0F8A 9604             (/dd/sourcecode/as):03260                  lda   <$0004         Get # bytes wide GP buffer is
0F8C 4A               (/dd/sourcecode/as):03261                  deca                 Decrement it
0F8D 2714             (/dd/sourcecode/as):03262                  beq   L0F20          If totally done buffer width, go to next line
0F8F 9704             (/dd/sourcecode/as):03263                  sta   <$0004         Save new total
0F91 4A               (/dd/sourcecode/as):03264                  deca                 If only 1, set up for partially used last byte
0F92 2703             (/dd/sourcecode/as):03265                  beq   L0F14
0F94 9605             (/dd/sourcecode/as):03266                  lda   <$0005         Get # pixels/byte in GP buffer for full byte
0F96 8C               (/dd/sourcecode/as):03267                  fcb   $8C          skip 2 bytes: same cycle time, 1 byte shorter
0F97 9607             (/dd/sourcecode/as):03268         L0F14    lda   <$0007         Get # pixels to do in last (partial) byte of bfr
0F99 9797             (/dd/sourcecode/as):03269         L0F16    sta   <$0097         Save # pixels to do in next byte
0F9B 109EA3           (/dd/sourcecode/as):03270                  ldy   <$00A3         Move last byte partial vector to normal
0F9E 109FA1           (/dd/sourcecode/as):03271                  sty   <$00A1           so we can use same routines
0FA1 2095             (/dd/sourcecode/as):03272                  bra   L0EB2          Go finish off the last byte
                      (/dd/sourcecode/as):03273                  
                      (/dd/sourcecode/as):03274         * Done current line of GP buffer, set up for next line
0FA3 9E72             (/dd/sourcecode/as):03275         L0F20    ldx   <$0072         Get screen addr of current line in GP buffer
0FA5 D663             (/dd/sourcecode/as):03276                  ldb   <$0063         Get # bytes/row on screen
0FA7 3A               (/dd/sourcecode/as):03277                  abx                  Point to start of next line on screen
0FA8 0A52             (/dd/sourcecode/as):03278                  dec   <$0052         Dec # lines left on window / GP buffer
0FAA 1026FF70         (/dd/sourcecode/as):03279                  lbne  L0E9E          If not bottom, continue PUTting
0FAE 35A0             (/dd/sourcecode/as):03280                  puls  pc,y           As far as we can go, restore Y & return
                      (/dd/sourcecode/as):03281         
                      (/dd/sourcecode/as):03282         * Map GP buffer entry point
0FB0 17F8F1           (/dd/sourcecode/as):03283         L0F31    lbsr  L0930        find the buffer
0FB3 10250140         (/dd/sourcecode/as):03284                  lbcs  SysRet       If error, exit back to system with it
0FB7 D797             (/dd/sourcecode/as):03285                  stb   <$0097       save starting block number
0FB9 E60F             (/dd/sourcecode/as):03286                  ldb   Grf.NBlk,x   number of blocks in the buffer
0FBB D799             (/dd/sourcecode/as):03287                  stb   <$0099       save count
0FBD EC05             (/dd/sourcecode/as):03288                  ldd   Grf.BSz,x    size of data inside the buffer
0FBF DD9B             (/dd/sourcecode/as):03289                  std   <$009B       save size of the buffer
0FC1 308820           (/dd/sourcecode/as):03290                  leax  Grf.Siz,x    point to the start of the buffer data itself
0FC4 1F10             (/dd/sourcecode/as):03291                  tfr   x,d          move into math register
0FC6 841F             (/dd/sourcecode/as):03292                  anda  #$1F         keep offset within the block
0FC8 DD9D             (/dd/sourcecode/as):03293                  std   <$009D       save offset
0FCA 160129           (/dd/sourcecode/as):03294                  lbra  L0F78        exit with no error
                      (/dd/sourcecode/as):03295         
                      (/dd/sourcecode/as):03296         * ATD: this special-purpose text routine results in gfx screens being
                      (/dd/sourcecode/as):03297         * marginally slower, but it saves ~170 clock cycles per character put
                      (/dd/sourcecode/as):03298         * on a hardware text screen.
0FCD 0A83             (/dd/sourcecode/as):03299         fast.set dec   <$0083       account for the first character we printed out
                      (/dd/sourcecode/as):03300         * reset the various parameters after falling off the rhs of the screen
0FCF 3540             (/dd/sourcecode/as):03301         fast.txt puls  u            restore pointer to our fast text
                      (/dd/sourcecode/as):03302                IFNE  H6309
                      (/dd/sourcecode/as):03303                  ldw   Wt.CurX,y    move current X position into W
                      (/dd/sourcecode/as):03304                ELSE
0FD1 AE3E             (/dd/sourcecode/as):03305                  ldx   Wt.CurX,y
0FD3 9FB5             (/dd/sourcecode/as):03306                  stx   <$B5
                      (/dd/sourcecode/as):03307                ENDC
0FD5 AE3B             (/dd/sourcecode/as):03308                  ldx   Wt.Cur,y     get current cursor address on the screen 
0FD7 E628             (/dd/sourcecode/as):03309                  ldb   Wt.Attr,y    grab current attributes
0FD9 A6C0             (/dd/sourcecode/as):03310         ftxt.lp  lda   ,u+          get a character
0FDB 1700EF           (/dd/sourcecode/as):03311                  lbsr  txt.fixa     fix A so it's printable
0FDE 17012F           (/dd/sourcecode/as):03312                  lbsr  L0F7C.0      do more text screen fixes, and STD ,X++
                      (/dd/sourcecode/as):03313                IFNE  H6309
                      (/dd/sourcecode/as):03314                  incw               right one character BEFORE counting down
                      (/dd/sourcecode/as):03315                ELSE
                      (/dd/sourcecode/as):03316         * 6809 LCB - Use DP scratch var instead of pshs x/puls x, and also use D instead of X, so
                      (/dd/sourcecode/as):03317         *   we can do ADDD #1 instead of leax 1,x (1 byte longer, 1 cycle faster)
0FE1 DDBF             (/dd/sourcecode/as):03318                  std   <grScrtch     Preserve D
0FE3 DCB5             (/dd/sourcecode/as):03319                  ldd   <$B5          Get char X position
0FE5 C30001           (/dd/sourcecode/as):03320                  addd  #1            Increase by 1
0FE8 DDB5             (/dd/sourcecode/as):03321                  std   <$B5          Save new position
0FEA DCBF             (/dd/sourcecode/as):03322                  ldd   <grScrtch     Get original D back
                      (/dd/sourcecode/as):03323                ENDC
0FEC 0A83             (/dd/sourcecode/as):03324                  dec   <$83         count down
0FEE 2712             (/dd/sourcecode/as):03325                  beq   ftxt.ex      exit if it's zero: we're done here
                      (/dd/sourcecode/as):03326                IFNE  H6309
                      (/dd/sourcecode/as):03327                  cmpw  Wt.MaxX,y    are we at the rhs of the screen?
                      (/dd/sourcecode/as):03328                ELSE
0FF0 3410             (/dd/sourcecode/as):03329                  pshs  x
0FF2 9EB5             (/dd/sourcecode/as):03330                  ldx   <$B5
0FF4 ACA81B           (/dd/sourcecode/as):03331                  cmpx  Wt.MaxX,y
0FF7 3510             (/dd/sourcecode/as):03332                  puls  x
                      (/dd/sourcecode/as):03333                ENDC
0FF9 23DE             (/dd/sourcecode/as):03334                  bls   ftxt.lp      no, continue doing fast text put
0FFB 3440             (/dd/sourcecode/as):03335                  pshs  u            save text pointer
0FFD 17044F           (/dd/sourcecode/as):03336                  lbsr  L1238        zero out X coord, do scroll, etc
1000 20CD             (/dd/sourcecode/as):03337                  bra   fast.txt     and go reset out parameters
                      (/dd/sourcecode/as):03338         
     1002             (/dd/sourcecode/as):03339         ftxt.ex  equ   *
                      (/dd/sourcecode/as):03340                IFNE  H6309
                      (/dd/sourcecode/as):03341                  cmpw  Wt.MaxX,y    Are we at the right hand side of the screen?
                      (/dd/sourcecode/as):03342                ELSE
1002 3410             (/dd/sourcecode/as):03343                  pshs  x
1004 9EB5             (/dd/sourcecode/as):03344                  ldx   <$B5
1006 ACA81B           (/dd/sourcecode/as):03345                  cmpx  Wt.MaxX,y
1009 3510             (/dd/sourcecode/as):03346                  puls  x
                      (/dd/sourcecode/as):03347                ENDC
100B 2307             (/dd/sourcecode/as):03348                  bls   NoScroll     No, exit normally
100D 17043F           (/dd/sourcecode/as):03349                  lbsr  L1238        Do scroll stuff
                      (/dd/sourcecode/as):03350                IFNE  H6309
                      (/dd/sourcecode/as):03351                  clrw               Zero out current X coord
                      (/dd/sourcecode/as):03352                ELSE
1010 0FB5             (/dd/sourcecode/as):03353                  clr   <$B5
1012 0FB6             (/dd/sourcecode/as):03354                  clr   <$B6
                      (/dd/sourcecode/as):03355                ENDC
     1014             (/dd/sourcecode/as):03356         NoScroll equ   *
                      (/dd/sourcecode/as):03357                IFNE  H6309
                      (/dd/sourcecode/as):03358                  stw   Wt.CurX,y    save current X coordinate
                      (/dd/sourcecode/as):03359                ELSE
1014 DCB5             (/dd/sourcecode/as):03360                  ldd   <$B5         Save current X coordinate (D gets destroyed in L11D1)
1016 ED3E             (/dd/sourcecode/as):03361                  std   Wt.CurX,y
                      (/dd/sourcecode/as):03362                ENDC
1018 1703CF           (/dd/sourcecode/as):03363                  lbsr  L11D1        set up for the next call
101B 1600D8           (/dd/sourcecode/as):03364                  lbra  L0F78        exit without error
                      (/dd/sourcecode/as):03365         
                      (/dd/sourcecode/as):03366         * entry: A = number of characters at $0180 to write
                      (/dd/sourcecode/as):03367         *        Y = window table pointer
101E 8E0180           (/dd/sourcecode/as):03368         fast.chr ldx   #$0180       where the data is located
                      (/dd/sourcecode/as):03369         * ATD: $83 is unused by anything as far as I can tell.
1021 9783             (/dd/sourcecode/as):03370                  sta   <$83         save count of characters to do for later
1023 A680             (/dd/sourcecode/as):03371                  lda   ,x+          get the first character
1025 3410             (/dd/sourcecode/as):03372                  pshs  x            save address of character
1027 17008B           (/dd/sourcecode/as):03373                  lbsr  L0F4B.1      ensure window is set up properly during 1st chr.
                      (/dd/sourcecode/as):03374         * perhaps the DEC <$83 could be here... remove FAST.SET, and fix f1.do
102A 9660             (/dd/sourcecode/as):03375                  lda   <$60         is it a text screen?
102C 2B9F             (/dd/sourcecode/as):03376                  bmi   fast.set     yes, make it _really_ fast
102E D66F             (/dd/sourcecode/as):03377                  ldb   <$006F       get X size of font
1030 C108             (/dd/sourcecode/as):03378                  cmpb  #$08         Even byte wide size font?
1032 2679             (/dd/sourcecode/as):03379                  bne   f1.do        no, go setup for multi-color/shiftable screen
1034 9EB0             (/dd/sourcecode/as):03380                  ldx   <$B0         get cached font pointer
1036 2775             (/dd/sourcecode/as):03381                  beq   f1.do        didn't find a font: skip ahead
                      (/dd/sourcecode/as):03382                IFNE  H6309
                      (/dd/sourcecode/as):03383                  tim   #Prop,<$E    Proportional?
                      (/dd/sourcecode/as):03384                ELSE
1038 960E             (/dd/sourcecode/as):03385                  lda   <$E 
103A 8510             (/dd/sourcecode/as):03386                  bita  #Prop        Proportional?
                      (/dd/sourcecode/as):03387                ENDC
103C 266F             (/dd/sourcecode/as):03388                  bne   f1.do        yes, use slow method
                      (/dd/sourcecode/as):03389         * OK.  Now we have GFX screens only here, at least one character printed
                      (/dd/sourcecode/as):03390         * to ensure that the buffers etc. are set up and mapped in.  We can now go to
                      (/dd/sourcecode/as):03391         * special-purpose routine for fixed-width 8x8 fonts: ~15% speedup!
103E EC05             (/dd/sourcecode/as):03392                  ldd   Grf.BSz,x    Get size of font buffer (data only)
1040 308820           (/dd/sourcecode/as):03393                  leax  Grf.Siz,x    point X to the first character in the font
1043 338B             (/dd/sourcecode/as):03394                  leau  d,x          point U to the absolute end-address of the font
                      (/dd/sourcecode/as):03395         * Moved the DP saves from $B2 to $B9; RG
1045 DFB9             (/dd/sourcecode/as):03396                  stu   <$B9         save the pointer for later
1047 4F               (/dd/sourcecode/as):03397                  clra
1048 E623             (/dd/sourcecode/as):03398                  ldb   Wt.CWTmp,y   get bytes per font character
104A DDBB             (/dd/sourcecode/as):03399                  std   <$BB
104C ECA81B           (/dd/sourcecode/as):03400                  ldd   Wt.MaxX,y    get maximum X position (e.g. 319, 639)
104F 830007           (/dd/sourcecode/as):03401                  subd  #$0007       (D+1-8) point D to the last X position possible for
1052 DDBD             (/dd/sourcecode/as):03402                  std   <$BD         a character, and save it
                      (/dd/sourcecode/as):03403         * Note: W *SHOULD* be set up properly from the previous call to print one
                      (/dd/sourcecode/as):03404         * character, but that character might have caused the text to wrap, and thus
                      (/dd/sourcecode/as):03405         * destroy W
1054 CE5211           (/dd/sourcecode/as):03406                  ldu   #GrfStrt+Fast.pt-2  point to fast font put table
1057 D660             (/dd/sourcecode/as):03407                  ldb   <$0060       get screen type
1059 58               (/dd/sourcecode/as):03408                  aslb               2 bytes per entry
                      (/dd/sourcecode/as):03409                IFNE  H6309
                      (/dd/sourcecode/as):03410                  ldw   b,u          grab pointer to routine to use
                      (/dd/sourcecode/as):03411                  puls  u            restore character pointer
                      (/dd/sourcecode/as):03412                ELSE
105A 3410             (/dd/sourcecode/as):03413                  pshs  x            (7) Save X
105C AEC5             (/dd/sourcecode/as):03414                  ldx   b,u          (6) Get ptr to routine to use
105E 9FB5             (/dd/sourcecode/as):03415                  stx   <$B5         (5) Save it
1060 3550             (/dd/sourcecode/as):03416                  puls  x,u          (9) Restore X & character ptr
                      (/dd/sourcecode/as):03417                ENDC
1062 203D             (/dd/sourcecode/as):03418                  bra   f2.do        jump to the middle of the loop
                      (/dd/sourcecode/as):03419         
                      (/dd/sourcecode/as):03420         * U = pointer to characters to print
                      (/dd/sourcecode/as):03421         * Y = window table pointer
                      (/dd/sourcecode/as):03422         * X = font GP buffer pointer
1064 A6C0             (/dd/sourcecode/as):03423         f2.next  lda   ,u+          grab a character
1066 3470             (/dd/sourcecode/as):03424                  pshs  x,y,u        save all sorts of registers
1068 8D63             (/dd/sourcecode/as):03425                  bsr   txt.fixa     fix the character in A so it's printable (does not affect Y)
106A 1F89             (/dd/sourcecode/as):03426                  tfr   a,b          move character to B
106C 4F               (/dd/sourcecode/as):03427                  clra               make 16-bit offset
                      (/dd/sourcecode/as):03428                IFNE  H6309
                      (/dd/sourcecode/as):03429                  lsld               ALL fonts are 8 pixels high
                      (/dd/sourcecode/as):03430                  lsld
                      (/dd/sourcecode/as):03431                  lsld
                      (/dd/sourcecode/as):03432                  addr  d,x          point to the font data
                      (/dd/sourcecode/as):03433                ELSE
106D 58               (/dd/sourcecode/as):03434                  lslb
106E 49               (/dd/sourcecode/as):03435                  rola
106F 58               (/dd/sourcecode/as):03436                  lslb
1070 49               (/dd/sourcecode/as):03437                  rola
1071 58               (/dd/sourcecode/as):03438                  lslb
1072 49               (/dd/sourcecode/as):03439                  rola
1073 308B             (/dd/sourcecode/as):03440                  leax  d,x
                      (/dd/sourcecode/as):03441                ENDC
1075 9CB9             (/dd/sourcecode/as):03442                  cmpx  <$B9         are we within the font's memory buffer?
1077 2503             (/dd/sourcecode/as):03443                  blo   f2.fnt       yes, we're OK
1079 8E5181           (/dd/sourcecode/as):03444                  ldx   #GrfStrt+L0FFA  otherwise point to default font character '.'
107C 170162           (/dd/sourcecode/as):03445         f2.fnt   lbsr  L102F.1      go print the character on the screen
107F 10AE62           (/dd/sourcecode/as):03446                  ldy   2,s          get window pointer again
1082 EC3B             (/dd/sourcecode/as):03447                  ldd   Wt.Cur,y     get current cursor address
1084 D3BB             (/dd/sourcecode/as):03448                  addd  <$BB         add in bytes per character
1086 ED3B             (/dd/sourcecode/as):03449                  std   Wt.Cur,y
1088 EC3E             (/dd/sourcecode/as):03450                  ldd   Wt.CurX,y    Get X coordinate
108A C30008           (/dd/sourcecode/as):03451                  addd  #$0008       Add to X pixel count (1, 6 or 8?)
108D ED3E             (/dd/sourcecode/as):03452                  std   Wt.CurX,y    Update value
108F 1093BD           (/dd/sourcecode/as):03453                  cmpd  <$BD         Compare with maximum X coordinate
1092 230B             (/dd/sourcecode/as):03454                  bls   f2.do1       If not past right hand side, leave
                      (/dd/sourcecode/as):03455                IFNE  H6309
                      (/dd/sourcecode/as):03456                  pshsw              save pointer to which font-put routine to use
                      (/dd/sourcecode/as):03457                ELSE
1094 DCB5             (/dd/sourcecode/as):03458                  ldd   <$B5         Get ptr to which font-put routine to use
1096 3406             (/dd/sourcecode/as):03459                  pshs  d            Save before we call L1238
                      (/dd/sourcecode/as):03460                ENDC
1098 1703B4           (/dd/sourcecode/as):03461                  lbsr  L1238        fix X,Y coordinate, scroll screen, set up bitmasks (destroys D)
                      (/dd/sourcecode/as):03462                IFNE  H6309
                      (/dd/sourcecode/as):03463                  pulsw
                      (/dd/sourcecode/as):03464                ELSE
109B 3510             (/dd/sourcecode/as):03465                  puls  x
109D 9FB5             (/dd/sourcecode/as):03466                  stx   <$B5
                      (/dd/sourcecode/as):03467                ENDC
109F 3570             (/dd/sourcecode/as):03468         f2.do1   puls  x,y,u        restore registers
10A1 0A83             (/dd/sourcecode/as):03469         f2.do    dec   <$83         count down
10A3 26BF             (/dd/sourcecode/as):03470                  bne   f2.next      continue
10A5 204F             (/dd/sourcecode/as):03471                  bra   L0F78        and exit if we're all done
                      (/dd/sourcecode/as):03472         
10A7 A680             (/dd/sourcecode/as):03473         f1.next  lda   ,x+
10A9 3410             (/dd/sourcecode/as):03474                  pshs  x
10AB 8D12             (/dd/sourcecode/as):03475                  bsr   L0F4B.2      put one character on the screen
10AD 3510             (/dd/sourcecode/as):03476         f1.do    puls  x            restore count, pointer
10AF 0A83             (/dd/sourcecode/as):03477                  dec   <$83         count down
10B1 26F4             (/dd/sourcecode/as):03478                  bne   f1.next      continue
10B3 2041             (/dd/sourcecode/as):03479                  bra   L0F78        and exit if we're all done
                      (/dd/sourcecode/as):03480         
                      (/dd/sourcecode/as):03481         * L0F4B.1 is now a subroutine to put one character on the screen...
                      (/dd/sourcecode/as):03482         * Alpha put entry point
                      (/dd/sourcecode/as):03483         * Entry: A = Character to write
                      (/dd/sourcecode/as):03484         *        Y = window table ptr
                      (/dd/sourcecode/as):03485         * 07/19/93: LBSR L0177 to L0175
10B5 17F03B           (/dd/sourcecode/as):03486         L0F4B.1  lbsr  L0175        Switch to the window we are writing to
10B8 1700D1           (/dd/sourcecode/as):03487                  lbsr  L1002        set up character x,y sizes and font pointers
10BB 109FA9           (/dd/sourcecode/as):03488                  sty   <$A9         Save window tbl ptr from this Alpha put
10BE 4D               (/dd/sourcecode/as):03489                  tsta               Is the character ASCII 127 or less?
10BF 8D0C             (/dd/sourcecode/as):03490         L0F4B.2  bsr   txt.fixa     fix A: adds 10 cycles for slow puts and gfx puts
10C1 D660             (/dd/sourcecode/as):03491                  ldb   <$0060       Get screen type
10C3 2A03             (/dd/sourcecode/as):03492                  bpl   L0F73        If gfx  screen, go do it
10C5 8D45             (/dd/sourcecode/as):03493                  bsr   L0F7C        hardware text; go print it on-screen
10C7 8C               (/dd/sourcecode/as):03494                  fcb   $8C          skip the next 2 bytes
10C8 8D70             (/dd/sourcecode/as):03495         L0F73    bsr   L0FAE        go print graphic font
10CA 160371           (/dd/sourcecode/as):03496         L0F75    lbra  L121A        check for screen scroll and/or next line
                      (/dd/sourcecode/as):03497         
                      (/dd/sourcecode/as):03498         * LCB - Added a flag that signifies that we are doing a GFX font, and that the
                      (/dd/sourcecode/as):03499         *       font buffer size is $700 bytes. If this flag is set at entry to this
                      (/dd/sourcecode/as):03500         *       routine (after bpl), return to print it.
                      (/dd/sourcecode/as):03501         * Entry: A=ASCII character to print, and CC flags set from TSTA
10CD 2A24             (/dd/sourcecode/as):03502         txt.fixa bpl   L0F6B        Yes, go print it
10CF 0DAB             (/dd/sourcecode/as):03503                  tst   <grBigFnt    Gfx mode with a 224 char font?
10D1 2707             (/dd/sourcecode/as):03504                  beq   Norm         No, do normal remapping
10D3 81E0             (/dd/sourcecode/as):03505                  cmpa  #$e0         Last 31 chars?
10D5 2502             (/dd/sourcecode/as):03506                  blo   BigOut       No, exit
10D7 80E0             (/dd/sourcecode/as):03507                  suba  #$e0         Point to 1st 31 chars in font
10D9 39               (/dd/sourcecode/as):03508         BigOut   rts
                      (/dd/sourcecode/as):03509         
10DA 81BF             (/dd/sourcecode/as):03510         Norm     cmpa  #$BF
10DC 220B             (/dd/sourcecode/as):03511                  bhi   L0F61        Anything >=$C0 gets wrapped back
10DE 84EF             (/dd/sourcecode/as):03512                  anda  #$EF         Mask out high bit
10E0 8090             (/dd/sourcecode/as):03513                  suba  #$90
10E2 811A             (/dd/sourcecode/as):03514                  cmpa  #$1A
10E4 240D             (/dd/sourcecode/as):03515                  bhs   L0F6B        yes, go print it
10E6 862E             (/dd/sourcecode/as):03516         L0F5D    lda   #'.          Change illegal character to a period
10E8 39               (/dd/sourcecode/as):03517                  rts
                      (/dd/sourcecode/as):03518         
10E9 84DF             (/dd/sourcecode/as):03519         L0F61    anda  #$DF
10EB 80C1             (/dd/sourcecode/as):03520                  suba  #$C1
10ED 2BF7             (/dd/sourcecode/as):03521                  bmi   L0F5D        yes, change it to a period
10EF 8119             (/dd/sourcecode/as):03522                  cmpa  #$19
10F1 22F3             (/dd/sourcecode/as):03523                  bhi   L0F5D        yes, change it to a period
10F3 39               (/dd/sourcecode/as):03524         L0F6B    rts
                      (/dd/sourcecode/as):03525         
                      (/dd/sourcecode/as):03526         * this adds 10 cycles to any normal alpha put, but it should
                      (/dd/sourcecode/as):03527         * save us lots of cycles later!
10F4 8DBF             (/dd/sourcecode/as):03528         L0F4B    bsr   L0F4B.1      do internal alpha-put routine
                      (/dd/sourcecode/as):03529         * Return to the system without any errors
10F6 5F               (/dd/sourcecode/as):03530         L0F78    clrb               No errors
                      (/dd/sourcecode/as):03531         * Return to system (Jumps to [D.Flip0] with X=system stack ptr & A=CC status)
10F7 1FA8             (/dd/sourcecode/as):03532         SysRet   tfr   cc,a         save IRQ status for os9p1
10F9 1A50             (/dd/sourcecode/as):03533                  orcc  #IntMasks    Shut off interrupts
10FB BE1007           (/dd/sourcecode/as):03534                  ldx   >WGlobal+G.GrfStk       Get system stack ptr
10FE 7F1002           (/dd/sourcecode/as):03535                  clr   >WGlobal+G.GfBusy       Flag that Grfdrv will no longer be task 1
                      (/dd/sourcecode/as):03536                IFNE  H6309
                      (/dd/sourcecode/as):03537                  tfr   0,dp         Restore system DP register for os9p1
                      (/dd/sourcecode/as):03538                ELSE
1101 3402             (/dd/sourcecode/as):03539                  pshs  a
1103 4F               (/dd/sourcecode/as):03540                  clra
1104 1F8B             (/dd/sourcecode/as):03541                  tfr   a,dp
1106 3502             (/dd/sourcecode/as):03542                  puls  a
                      (/dd/sourcecode/as):03543                ENDC
1108 6E9F00A9         (/dd/sourcecode/as):03544                  jmp   [>D.Flip0]   Return to system
                      (/dd/sourcecode/as):03545         
                      (/dd/sourcecode/as):03546         * Print text to hardware text - optimized for lowercase, then upper
                      (/dd/sourcecode/as):03547         * Can be switched around by swapping blo/bhi sections. This does one char @ a time
                      (/dd/sourcecode/as):03548         *   and is called from L0F4B.2.
                      (/dd/sourcecode/as):03549         * Entry: Y=Window table ptr
                      (/dd/sourcecode/as):03550         *        A=character to print (pre-conversion)
                      (/dd/sourcecode/as):03551         * Exit: Character/attribute pair put on screen
                      (/dd/sourcecode/as):03552         *       X=updated cursor address
110C E628             (/dd/sourcecode/as):03553         L0F7C    ldb   Wt.Attr,y    Get current attribute byte
110E AE3B             (/dd/sourcecode/as):03554                  ldx   Wt.Cur,y     Get address of cursor on screen
                      (/dd/sourcecode/as):03555         * Print text to hardware text entry point from f.txt (fast text) loop
1110 8160             (/dd/sourcecode/as):03556         L0F7C.0  cmpa  #$60         Convert ASCII reverse apostrophe to apostrophe
1112 2211             (/dd/sourcecode/as):03557                  bhi   L0F8E        Above is safe, go straight to print
1114 2604             (/dd/sourcecode/as):03558                  bne   L0F88        No, try next
1116 8627             (/dd/sourcecode/as):03559                  lda   #$27         GIME apostrophe
1118 200B             (/dd/sourcecode/as):03560                  bra   L0F8E        Skip rest
                      (/dd/sourcecode/as):03561                  
111A 815E             (/dd/sourcecode/as):03562         L0F88    cmpa  #$5E         Convert ASCII carat to GIME carat
111C 2507             (/dd/sourcecode/as):03563                  blo   L0F8E        Below is safe, go straight to print
111E 2603             (/dd/sourcecode/as):03564                  bne   L0F82        No, has to be Underscore
1120 8660             (/dd/sourcecode/as):03565                  lda   #$60         GIME carat
1122 8C               (/dd/sourcecode/as):03566                  fcb   $8C          skip 2 bytes (CMPX opcode): same cycle time, 1 byte shorter
1123 867F             (/dd/sourcecode/as):03567         L0F82    lda   #$7F         Convert ASCII underscore to GIME underscore
                      (/dd/sourcecode/as):03568         * Hardware transparency added back in, as it is in version 3.0 upgrade as well
                      (/dd/sourcecode/as):03569         * This keeps the background color in the current character, only changing foreground
                      (/dd/sourcecode/as):03570         *  color, blink and underline attributes to current settings
1125 6D29             (/dd/sourcecode/as):03571         L0F8E    tst   Wt.BSW,y     transparent characters?
1127 2B0E             (/dd/sourcecode/as):03572                  bmi   L0FA4        no, go on
                      (/dd/sourcecode/as):03573                IFNE  H6309
                      (/dd/sourcecode/as):03574                  aim   #$07,1,x     mask off everything but background attributes
                      (/dd/sourcecode/as):03575                ELSE
1129 97BF             (/dd/sourcecode/as):03576                  sta   <grScrtch
112B A601             (/dd/sourcecode/as):03577                  lda   1,x
112D 8407             (/dd/sourcecode/as):03578                  anda  #7
112F A701             (/dd/sourcecode/as):03579                  sta   1,x
1131 96BF             (/dd/sourcecode/as):03580                  lda   <grScrtch
                      (/dd/sourcecode/as):03581                ENDC
1133 C4F8             (/dd/sourcecode/as):03582                  andb  #$F8         get rid of background color
1135 EA01             (/dd/sourcecode/as):03583                  orb   1,x          merge in background color
1137 ED81             (/dd/sourcecode/as):03584         L0FA4    std   ,x++         save character & attribute to screen
1139 39               (/dd/sourcecode/as):03585                  rts                Check for screen scroll/new line
                      (/dd/sourcecode/as):03586         
                      (/dd/sourcecode/as):03587         * Print text to graphics window
                      (/dd/sourcecode/as):03588         * Note: $61 & $62 contain the bit masks for the foreground & background colors
                      (/dd/sourcecode/as):03589         *   for the whole width of the byte (ex. a 2 color would be a $00 or $ff)
113A 3422             (/dd/sourcecode/as):03590         L0FAE    pshs  a,y          Preserve character to print & Window table ptr
113C E629             (/dd/sourcecode/as):03591                  ldb   Wt.BSW,y     get current attributes
113E D70E             (/dd/sourcecode/as):03592                  stb   <$000E       save 'em for quicker access
1140 C504             (/dd/sourcecode/as):03593                  bitb  #Invers      inverse on?
1142 2706             (/dd/sourcecode/as):03594                  beq   L0FBE        no, go on
                      (/dd/sourcecode/as):03595         * 07/20/93 mod: Get colors from window table instead of GRFDRV mem for speedup
1144 A627             (/dd/sourcecode/as):03596                  lda   Wt.Back,y    Get background color
1146 E626             (/dd/sourcecode/as):03597                  ldb   Wt.Fore,y    Get foreground color
1148 DD61             (/dd/sourcecode/as):03598                  std   <$0061       save 'em back
114A 9EB0             (/dd/sourcecode/as):03599         L0FBE    ldx   <$00B0       get cached font pointer
114C 270E             (/dd/sourcecode/as):03600                  beq   L0FCC        if none, point to '.' font character
114E E608             (/dd/sourcecode/as):03601                  ldb   Grf.XSz+1,x  get x-size of the font
1150 D76F             (/dd/sourcecode/as):03602                  stb   <$006F       save here again: proportional fonts destroy it
1152 A6E4             (/dd/sourcecode/as):03603                  lda   ,s           grab again the character to print
                      (/dd/sourcecode/as):03604         * ATD: is this next line really necessary?  The code at L064A ENSURES that
                      (/dd/sourcecode/as):03605         * Grf.XBSz = Grf.YSz = $08, so this next line could be replaced by a LDB #8
                      (/dd/sourcecode/as):03606         * LCB - leaving as is to allow for variable width fonts in future (can share
                      (/dd/sourcecode/as):03607         * some code with proportional fonts, which already have variable width up to 8)
1154 E60B             (/dd/sourcecode/as):03608                  ldb   Grf.XBSz,x   get size of each buffer entry in bytes
1156 3D               (/dd/sourcecode/as):03609                  mul                Calculate offset into buffer for character
1157 10A305           (/dd/sourcecode/as):03610                  cmpd  Grf.BSz,x    Still in our buffer? (Not illegal character?)
115A 2505             (/dd/sourcecode/as):03611                  blo   L0FD1        yes, go on
115C 8E5181           (/dd/sourcecode/as):03612         L0FCC    ldx   #GrfStrt+L0FFA  Point to default font char ('.')
115F 2005             (/dd/sourcecode/as):03613                  bra   L0FD6
                      (/dd/sourcecode/as):03614         
1161 C30020           (/dd/sourcecode/as):03615         L0FD1    addd  #Grf.Siz     Add 32 (past header in Gfx buffer table?)
                      (/dd/sourcecode/as):03616                IFNE  H6309
                      (/dd/sourcecode/as):03617                  addr  d,x          Point to the character within buffer we need
                      (/dd/sourcecode/as):03618                ELSE
1164 308B             (/dd/sourcecode/as):03619                  leax  d,x
                      (/dd/sourcecode/as):03620                ENDC
1166 D66F             (/dd/sourcecode/as):03621         L0FD6    ldb   <$006F       get X size of font
1168 C108             (/dd/sourcecode/as):03622                  cmpb  #$08         Even byte wide size font?
116A 260A             (/dd/sourcecode/as):03623                  bne   L0FEC        no, go setup for multi-color/shiftable screen
                      (/dd/sourcecode/as):03624                IFNE  H6309
                      (/dd/sourcecode/as):03625                  tim   #Prop,<$E    Proportional?
                      (/dd/sourcecode/as):03626                ELSE
116C 3402             (/dd/sourcecode/as):03627                  pshs  a
116E 960E             (/dd/sourcecode/as):03628                  lda   <$E 
1170 8510             (/dd/sourcecode/as):03629                  bita  #Prop
1172 3502             (/dd/sourcecode/as):03630                  puls  a
                      (/dd/sourcecode/as):03631                ENDC
1174 2759             (/dd/sourcecode/as):03632                  beq   L102F        no, use fast method
                      (/dd/sourcecode/as):03633         * Setup for multi-color/shiftable gfx text
1176 CE52E9           (/dd/sourcecode/as):03634         L0FEC    ldu   #GrfStrt+L10DF  Normal gfx text vector
1179 10AE61           (/dd/sourcecode/as):03635                  ldy   1,s          get window table pointer back
117C 1700FF           (/dd/sourcecode/as):03636                  lbsr  L106D        go print it
117F 35A2             (/dd/sourcecode/as):03637         L0FF8    puls  a,y,pc       return
                      (/dd/sourcecode/as):03638         
                      (/dd/sourcecode/as):03639         * Default font character if no font buffer defined ('.')
1181 00               (/dd/sourcecode/as):03640         L0FFA    fcb   %00000000
1182 00               (/dd/sourcecode/as):03641                  fcb   %00000000
1183 00               (/dd/sourcecode/as):03642                  fcb   %00000000
1184 00               (/dd/sourcecode/as):03643                  fcb   %00000000
1185 00               (/dd/sourcecode/as):03644                  fcb   %00000000
1186 00               (/dd/sourcecode/as):03645                  fcb   %00000000
1187 10               (/dd/sourcecode/as):03646                  fcb   %00010000
1188 00               (/dd/sourcecode/as):03647                  fcb   %00000000
                      (/dd/sourcecode/as):03648         
                      (/dd/sourcecode/as):03649         * Check if font buffers defined?
1189 17EF6E           (/dd/sourcecode/as):03650         L0FFF    lbsr  L0177
118C 3402             (/dd/sourcecode/as):03651         L1002    pshs  a            save character
118E D660             (/dd/sourcecode/as):03652                  ldb   <$0060       get STY marker
1190 2A0D             (/dd/sourcecode/as):03653                  bpl   L1011        graphics, go on
                      (/dd/sourcecode/as):03654         * Set text font H/W
1192 CC0001           (/dd/sourcecode/as):03655                  ldd   #$0001       get text font size
1195 DD6E             (/dd/sourcecode/as):03656                  std   <$006E
1197 DD70             (/dd/sourcecode/as):03657                  std   <$0070
                      (/dd/sourcecode/as):03658         * Added LCB 97/05/26 for 224 char font support
1199 97AB             (/dd/sourcecode/as):03659                  sta   <grBigFnt    Flag that this is not a 224 char font
119B 3582             (/dd/sourcecode/as):03660                  puls  a,pc         larger, but faster than LDQ/bra L1022
                      (/dd/sourcecode/as):03661         
                      (/dd/sourcecode/as):03662         * Set undefined graphics font H/W
                      (/dd/sourcecode/as):03663         * L100F is ONLY called from alpha put routine, above.
119D 3402             (/dd/sourcecode/as):03664         L100F    pshs  a            Preserve A (so PULS PC,A works)
119F E62B             (/dd/sourcecode/as):03665         L1011    ldb   Wt.FBlk,y    any font defined?
11A1 260B             (/dd/sourcecode/as):03666                  bne   L101F        yes, go map it in & get X/Y sizes
11A3 53               (/dd/sourcecode/as):03667                  comb               set carry
                      (/dd/sourcecode/as):03668                IFNE  H6309
                      (/dd/sourcecode/as):03669                  ldq   #$00080008   get default width & height
                      (/dd/sourcecode/as):03670                  tfr   0,x          make garbage font ptr
                      (/dd/sourcecode/as):03671                ELSE
11A4 CC0008           (/dd/sourcecode/as):03672                  ldd   #8
11A7 DDB5             (/dd/sourcecode/as):03673                  std   <$B5
11A9 8E0000           (/dd/sourcecode/as):03674                  ldx   #0
                      (/dd/sourcecode/as):03675                ENDC
11AC 200C             (/dd/sourcecode/as):03676                  bra   L1020
                      (/dd/sourcecode/as):03677         
                      (/dd/sourcecode/as):03678         * Setup defined graphics font H/W
11AE 170670           (/dd/sourcecode/as):03679         L101F    lbsr  L017C        map in font block
11B1 AE2C             (/dd/sourcecode/as):03680                  ldx   Wt.FOff,y    get offset of font in mem block
11B3 5F               (/dd/sourcecode/as):03681                  clrb               clear carry
                      (/dd/sourcecode/as):03682                IFNE  H6309
                      (/dd/sourcecode/as):03683                  ldq   Grf.XSz,x    Get width & height from window table
                      (/dd/sourcecode/as):03684                ELSE
11B4 EC09             (/dd/sourcecode/as):03685                  ldd   Grf.XSz+2,x
11B6 DDB5             (/dd/sourcecode/as):03686                  std   <$B5
11B8 EC07             (/dd/sourcecode/as):03687                  ldd   Grf.XSz,x
                      (/dd/sourcecode/as):03688                ENDC
11BA 9FB0             (/dd/sourcecode/as):03689         L1020    stx   <$B0         cache font pointer for later
     11BC             (/dd/sourcecode/as):03690         L1022    equ   *
                      (/dd/sourcecode/as):03691                IFNE  H6309
                      (/dd/sourcecode/as):03692                  stq   <$6e         Set working copies
                      (/dd/sourcecode/as):03693                ELSE
11BC DD6E             (/dd/sourcecode/as):03694                  std   <$6e
11BE DCB5             (/dd/sourcecode/as):03695                  ldd   <$B5
11C0 DD70             (/dd/sourcecode/as):03696                  std   <$70
                      (/dd/sourcecode/as):03697                ENDC
                      (/dd/sourcecode/as):03698         * LCB 05/25/97 - Added flag for 224 char fonts
11C2 CC0700           (/dd/sourcecode/as):03699                  ldd   #$700        Size of font we are checking for
11C5 10A305           (/dd/sourcecode/as):03700                  cmpd  Grf.BSz,x    Is this a big font?
11C8 2601             (/dd/sourcecode/as):03701                  bne   NotBig
11CA 5C               (/dd/sourcecode/as):03702                  incb               Flag it is a big font
11CB D7AB             (/dd/sourcecode/as):03703         NotBig   stb   <grBigFnt    Set flag for 224 char font
11CD 3582             (/dd/sourcecode/as):03704                  puls  a,pc         return
                      (/dd/sourcecode/as):03705         
11CF 8D02             (/dd/sourcecode/as):03706         L102F    bsr   L102F.2
11D1 20AC             (/dd/sourcecode/as):03707                  bra   L0FF8
                      (/dd/sourcecode/as):03708         
                      (/dd/sourcecode/as):03709         * fast draw a graphic font character to a graphics window
                      (/dd/sourcecode/as):03710         * If inverse was selected, they have already been swapped
                      (/dd/sourcecode/as):03711         * Note: <$61 contains the foreground color mask, <$62 contains the background
                      (/dd/sourcecode/as):03712         *   color mask.
                      (/dd/sourcecode/as):03713         * Entry: Y=window table pointer
                      (/dd/sourcecode/as):03714         *        X=Ptr to char in font we are printing
11D3 CE5211           (/dd/sourcecode/as):03715         L102F.2  ldu   #GrfStrt+Fast.pt-2  point to fast font put table
11D6 D660             (/dd/sourcecode/as):03716                  ldb   <$0060       get screen type
11D8 58               (/dd/sourcecode/as):03717                  aslb               2 bytes per entry
                      (/dd/sourcecode/as):03718                IFNE  H6309
                      (/dd/sourcecode/as):03719                  ldw   b,u          grab pointer to routine to use
                      (/dd/sourcecode/as):03720                ELSE
11D9 9FBF             (/dd/sourcecode/as):03721                  stx   <grScrtch
11DB AEC5             (/dd/sourcecode/as):03722                  ldx   b,u
11DD 9FB5             (/dd/sourcecode/as):03723                  stx   <$B5
11DF 9EBF             (/dd/sourcecode/as):03724                  ldx   <grScrtch
                      (/dd/sourcecode/as):03725                ENDC
11E1 10AE3B           (/dd/sourcecode/as):03726         L102F.1  ldy   Wt.Cur,y     get cursor address on screen
11E4 1E12             (/dd/sourcecode/as):03727                  exg   x,y          Swap Cursor address & font address
11E6 CE525F           (/dd/sourcecode/as):03728                  ldu   #GrfStrt+fast.tbl  point to table of expanded pixels
11E9 9671             (/dd/sourcecode/as):03729                  lda   <$71         get font height
11EB 4A               (/dd/sourcecode/as):03730                  deca               adjust it for double branch compare
11EC 9720             (/dd/sourcecode/as):03731                  sta   <$20         save in temp buffer for later
11EE A6A0             (/dd/sourcecode/as):03732         L1039    lda   ,y+          get a line of character (8 pixels)
                      (/dd/sourcecode/as):03733                IFNE  H6309
                      (/dd/sourcecode/as):03734                  tim   #Bold,<$0E   Bold attribute on?
                      (/dd/sourcecode/as):03735                ELSE
11F0 3402             (/dd/sourcecode/as):03736                  pshs  a
11F2 960E             (/dd/sourcecode/as):03737                  lda   <$0E 
11F4 8520             (/dd/sourcecode/as):03738                  bita  #Bold
11F6 3502             (/dd/sourcecode/as):03739                  puls  a
                      (/dd/sourcecode/as):03740                ENDC
11F8 2703             (/dd/sourcecode/as):03741                  beq   L1044        no, skip bold mask
11FA 44               (/dd/sourcecode/as):03742                  lsra               shift pixel pattern
11FB AA3F             (/dd/sourcecode/as):03743                  ora   -1,y         merge it with original to double up pixels
     11FD             (/dd/sourcecode/as):03744         L1044    equ   *
                      (/dd/sourcecode/as):03745                IFNE  H6309
                      (/dd/sourcecode/as):03746                  jsr   ,w           do a full 8-pixel width of bytes
                      (/dd/sourcecode/as):03747                ELSE
11FD AD9F11B5         (/dd/sourcecode/as):03748                  jsr   [>GrfMem+$B5]
                      (/dd/sourcecode/as):03749                ENDC
1201 D663             (/dd/sourcecode/as):03750                  ldb   <$0063       get bytes per line
1203 3A               (/dd/sourcecode/as):03751                  abx                move screen address to next line
1204 0A20             (/dd/sourcecode/as):03752                  dec   <$20         done 7 or 8 lines?
1206 2EE6             (/dd/sourcecode/as):03753                  bgt   L1039        No, go do next line
1208 2B25             (/dd/sourcecode/as):03754                  bmi   L1052        yes, return
                      (/dd/sourcecode/as):03755                IFNE  H6309
                      (/dd/sourcecode/as):03756                  tim   #Under,<$0E  Underline attribute on?
                      (/dd/sourcecode/as):03757                  beq   L1039        No, go do last byte of font
                      (/dd/sourcecode/as):03758                  lda   #$FF         Yes, set underline byte
                      (/dd/sourcecode/as):03759                ELSE
120A 960E             (/dd/sourcecode/as):03760                  lda   <$0E 
120C 8440             (/dd/sourcecode/as):03761                  anda  #Under       Underline attribute on?
120E 27DE             (/dd/sourcecode/as):03762                  beq   L1039        No, go do last byte of font
1210 43               (/dd/sourcecode/as):03763                  coma               Underline byte=$FF
                      (/dd/sourcecode/as):03764                ENDC
1211 20EA             (/dd/sourcecode/as):03765                  bra   L1044        Go put it in instead
                      (/dd/sourcecode/as):03766         
1213 521B             (/dd/sourcecode/as):03767         Fast.pt  fdb   GrfStrt+Font.2    2 color font
1215 523C             (/dd/sourcecode/as):03768                  fdb   GrfStrt+Font.4    4 color
1217 523C             (/dd/sourcecode/as):03769                  fdb   GrfStrt+Font.4    4 color
1219 5230             (/dd/sourcecode/as):03770                  fdb   GrfStrt+Font.16   16 color
                      (/dd/sourcecode/as):03771         
                      (/dd/sourcecode/as):03772         * smaller than old method.  Perhaps slower, but it should get the right
                      (/dd/sourcecode/as):03773         * foreground/background colors
121B 1F89             (/dd/sourcecode/as):03774         Font.2   tfr   a,b          move font character into mask
121D 53               (/dd/sourcecode/as):03775                  comb               invert it
121E 0D0E             (/dd/sourcecode/as):03776         ChkTChr  tst   <$0E         Transparent attribute on?
1220 2A03             (/dd/sourcecode/as):03777                  bpl   L1051        if transparent, do only foreground colors
1222 D462             (/dd/sourcecode/as):03778                  andb  <$0062       AND in background color: 0 or 1
1224 8C               (/dd/sourcecode/as):03779                  fcb   $8C          skip 2 bytes
1225 E484             (/dd/sourcecode/as):03780         L1051    andb  ,x           AND in background
1227 9461             (/dd/sourcecode/as):03781                  anda  <$0061       AND in foreground color
                      (/dd/sourcecode/as):03782                IFNE  H6309
                      (/dd/sourcecode/as):03783                  orr   b,a          OR in the background that's already there
                      (/dd/sourcecode/as):03784                ELSE
1229 D7BF             (/dd/sourcecode/as):03785                  stb   <grScrtch
122B 9ABF             (/dd/sourcecode/as):03786                  ora   <grScrtch
                      (/dd/sourcecode/as):03787                ENDC
122D A784             (/dd/sourcecode/as):03788                  sta   ,x           save font to screen
122F 39               (/dd/sourcecode/as):03789         L1052    rts                and return
                      (/dd/sourcecode/as):03790         
1230 8D3D             (/dd/sourcecode/as):03791         Font.16  bsr   get.font     expand it once
1232 3412             (/dd/sourcecode/as):03792                  pshs  a,x          save low byte, and current X coordinate
1234 1F98             (/dd/sourcecode/as):03793                  tfr   b,a          move right hand mask into A
1236 3002             (/dd/sourcecode/as):03794                  leax  2,x          do the right side of the font first
1238 8D02             (/dd/sourcecode/as):03795                  bsr   Font.4       expand it again, and do another 2 bytes
123A 3512             (/dd/sourcecode/as):03796                  puls  a,x          restore left hand byte and screen position
                      (/dd/sourcecode/as):03797         
123C 8D31             (/dd/sourcecode/as):03798         Font.4   bsr   get.font     get the font data into 2 bytes
123E 3406             (/dd/sourcecode/as):03799                  pshs  d            save mask
                      (/dd/sourcecode/as):03800                IFNE  H6309
                      (/dd/sourcecode/as):03801                  comd               invert it for background check
                      (/dd/sourcecode/as):03802                ELSE
1240 43               (/dd/sourcecode/as):03803                  coma
1241 53               (/dd/sourcecode/as):03804                  comb
                      (/dd/sourcecode/as):03805                ENDC
1242 0D0E             (/dd/sourcecode/as):03806                  tst   <$0E         check transparent flag
1244 2A06             (/dd/sourcecode/as):03807                  bpl   fast.for     if transparent, only do foreground colors
1246 9462             (/dd/sourcecode/as):03808                  anda  <$62         AND in background color
1248 D462             (/dd/sourcecode/as):03809                  andb  <$62         into both A and B
124A 2004             (/dd/sourcecode/as):03810                  bra   fast.st
                      (/dd/sourcecode/as):03811         
     124C             (/dd/sourcecode/as):03812         fast.for equ   *
                      (/dd/sourcecode/as):03813                IFNE  H6309
                      (/dd/sourcecode/as):03814                  andd  ,x           AND in background of screen if transparent
                      (/dd/sourcecode/as):03815                ELSE
124C A484             (/dd/sourcecode/as):03816                  anda  ,x
124E E401             (/dd/sourcecode/as):03817                  andb  1,x
                      (/dd/sourcecode/as):03818                ENDC
1250 ED84             (/dd/sourcecode/as):03819         fast.st  std   ,x           save new background of the screen
1252 3506             (/dd/sourcecode/as):03820                  puls  d            restore the old pixel mask
1254 9461             (/dd/sourcecode/as):03821                  anda  <$61         AND in foreground color
1256 D461             (/dd/sourcecode/as):03822                  andb  <$61         B, too
                      (/dd/sourcecode/as):03823                IFNE  H6309
                      (/dd/sourcecode/as):03824                  ord   ,x           OR in background that's already there
                      (/dd/sourcecode/as):03825                ELSE
1258 AA84             (/dd/sourcecode/as):03826                  ora   ,x
125A EA01             (/dd/sourcecode/as):03827                  orb   1,x
                      (/dd/sourcecode/as):03828                ENDC
125C ED84             (/dd/sourcecode/as):03829                  std   ,x           save it on-screen
125E 39               (/dd/sourcecode/as):03830                  rts
                      (/dd/sourcecode/as):03831         
                      (/dd/sourcecode/as):03832         * convert a byte of font data into pixel data
                      (/dd/sourcecode/as):03833         * This table turns a 2-color nibble (4 pixels) into a 4-color byte (4 pixels)
                      (/dd/sourcecode/as):03834         * The lookup is done twice for 16-color screens
125F 00030C0F         (/dd/sourcecode/as):03835         fast.tbl fcb   $00,$03,$0C,$0F
1263 30333C3F         (/dd/sourcecode/as):03836                  fcb   $30,$33,$3C,$3F
1267 C0C3CCCF         (/dd/sourcecode/as):03837                  fcb   $C0,$C3,$CC,$CF
126B F0F3FCFF         (/dd/sourcecode/as):03838                  fcb   $F0,$F3,$FC,$FF
                      (/dd/sourcecode/as):03839         
                      (/dd/sourcecode/as):03840         * A = font byte data
                      (/dd/sourcecode/as):03841         * U = pointer to fast.tbl, above
                      (/dd/sourcecode/as):03842         * returns D = pixel mask for this byte for a 4-color screen
126F 97BF             (/dd/sourcecode/as):03843         get.font sta   <grScrtch
1271 840F             (/dd/sourcecode/as):03844                  anda  #%00001111
1273 E6C6             (/dd/sourcecode/as):03845                  ldb   a,u          get rightmost byte
1275 96BF             (/dd/sourcecode/as):03846                  lda   <grScrtch
1277 44               (/dd/sourcecode/as):03847                  lsra
1278 44               (/dd/sourcecode/as):03848                  lsra
1279 44               (/dd/sourcecode/as):03849                  lsra
127A 44               (/dd/sourcecode/as):03850                  lsra               move high nibble into low nibble
127B A6C6             (/dd/sourcecode/as):03851                  lda   a,u          get leftmost byte
127D 39               (/dd/sourcecode/as):03852                  rts
                      (/dd/sourcecode/as):03853         * ATD: end of new font routines
                      (/dd/sourcecode/as):03854         
                      (/dd/sourcecode/as):03855         * Draw a graphic font to multi color windows
                      (/dd/sourcecode/as):03856         * May want to change so E/F contains the byte from the font/screen mem to use
                      (/dd/sourcecode/as):03857         *   register to register AND/OR, etc.
127E 3410             (/dd/sourcecode/as):03858         L106D    pshs  x            save font address
1280 CC52DB           (/dd/sourcecode/as):03859                  ldd   #GrfStrt+L10CF  Point to default graphic plot routine
1283 DD10             (/dd/sourcecode/as):03860                  std   <$0010       Save vector
                      (/dd/sourcecode/as):03861                IFNE  H6309
                      (/dd/sourcecode/as):03862                  tim   #Prop,<$E    Proportional spacing?
                      (/dd/sourcecode/as):03863                ELSE
1285 960E             (/dd/sourcecode/as):03864                  lda   <$E          no need to preserve regA
1287 8510             (/dd/sourcecode/as):03865                  bita  #Prop
                      (/dd/sourcecode/as):03866                ENDC
1289 2723             (/dd/sourcecode/as):03867                  beq   L10A4        no, skip finding font size
                      (/dd/sourcecode/as):03868         * Calc positioning for proportional spacing
128B D671             (/dd/sourcecode/as):03869                  ldb   <$0071       Get Y pixel count
128D 5A               (/dd/sourcecode/as):03870                  decb               dec by 1 (0-7?)
128E 4F               (/dd/sourcecode/as):03871                  clra               Clear out byte for mask checking
                      (/dd/sourcecode/as):03872         * This goes through all 8 bytes of a font character, ORing them into A
                      (/dd/sourcecode/as):03873         * The resultant byte on completion of the loop has all bits set that will be
128F AA85             (/dd/sourcecode/as):03874         L1080    ora   b,x          Mask in byte from font
1291 5A               (/dd/sourcecode/as):03875                  decb               Dec counter (& position in font)
1292 2AFB             (/dd/sourcecode/as):03876                  bpl   L1080        Still more to check, continue
1294 4D               (/dd/sourcecode/as):03877                  tsta               Check byte still clear?
1295 2604             (/dd/sourcecode/as):03878                  bne   L108E        No, skip ahead (B=$ff at this point)
1297 046F             (/dd/sourcecode/as):03879                  lsr   <$006F       Divide X pixel count by 2 if it is
1299 2013             (/dd/sourcecode/as):03880                  bra   L10A4        Start printing with normal vector
                      (/dd/sourcecode/as):03881         
                      (/dd/sourcecode/as):03882         * Non-blank char
129B 5A               (/dd/sourcecode/as):03883         L108E    decb               dec B (# active pixels counter)
129C 48               (/dd/sourcecode/as):03884                  lsla               Shift merged pixel mask byte left 1 bit
129D 24FC             (/dd/sourcecode/as):03885                  bcc   L108E        Pixel is unused in font char, keep looking
                      (/dd/sourcecode/as):03886         * Found pixel that will be needed, set up vector to shift char to be flush
                      (/dd/sourcecode/as):03887         * left
129F 8E52DD           (/dd/sourcecode/as):03888                  ldx   #GrfStrt+L10CF+2 Point to shifting gfx text plot routine
12A2 3085             (/dd/sourcecode/as):03889                  leax  b,x
12A4 9F10             (/dd/sourcecode/as):03890                  stx   <$0010       Save the vector
                      (/dd/sourcecode/as):03891         * Count # pixels that will be active
12A6 C601             (/dd/sourcecode/as):03892                  ldb   #$01         Set up counter for #pixels to print (min.=2)
12A8 5C               (/dd/sourcecode/as):03893         L109E    incb               Inc counter
12A9 48               (/dd/sourcecode/as):03894                  lsla               Shift out merged pixel mask byte  
12AA 25FC             (/dd/sourcecode/as):03895                  bcs   L109E        Until we either hit blank or run out
12AC D76F             (/dd/sourcecode/as):03896                  stb   <$006F       Save # pixels to print in X pixel count
                      (/dd/sourcecode/as):03897         * Main printing starts here - sets up for outside loop (at L10BB)
12AE E63D             (/dd/sourcecode/as):03898         L10A4    ldb   Wt.FMsk,y    Get start pixel mask (may be into byte for prop.)
12B0 D70F             (/dd/sourcecode/as):03899                  stb   <$000F       Save in GrfDrv mem
12B2 AE3B             (/dd/sourcecode/as):03900                  ldx   Wt.Cur,y     get address of cursor in screen mem
12B4 3520             (/dd/sourcecode/as):03901                  puls  y            Get font address
12B6 9671             (/dd/sourcecode/as):03902                  lda   <$0071       Get # bytes high char is
12B8 4A               (/dd/sourcecode/as):03903                  deca               bump down by 1 (base 0)
12B9 9799             (/dd/sourcecode/as):03904                  sta   <$0099       Save in temp (as counter)
12BB 9F0C             (/dd/sourcecode/as):03905                  stx   <$000C       Save cursor address
12BD 170F8D           (/dd/sourcecode/as):03906                  lbsr  L1EF1        Set up mask & vector to bit shift routine
12C0 9E0C             (/dd/sourcecode/as):03907                  ldx   <$000C       Get cursor address
                      (/dd/sourcecode/as):03908         * Outside loop for Gfx font - A is byte of 2 color font data we are currently
                      (/dd/sourcecode/as):03909         * doing
12C2 A6A0             (/dd/sourcecode/as):03910         L10BB    lda   ,y+          Get line of font data
                      (/dd/sourcecode/as):03911                IFNE  H6309
                      (/dd/sourcecode/as):03912                  tim   #$20,<$E     Bold text?
                      (/dd/sourcecode/as):03913                ELSE
12C4 3402             (/dd/sourcecode/as):03914                  pshs  a
12C6 960E             (/dd/sourcecode/as):03915                  lda   <$E 
12C8 8520             (/dd/sourcecode/as):03916                  bita  #$20
12CA 3502             (/dd/sourcecode/as):03917                  puls  a
                      (/dd/sourcecode/as):03918                ENDC
12CC 2703             (/dd/sourcecode/as):03919                  beq   L10C6        No, skip doubling up pixels
12CE 44               (/dd/sourcecode/as):03920                  lsra               shift it right 1
12CF AA3F             (/dd/sourcecode/as):03921                  ora   -1,y         merge with original to double up pixels
12D1 6E9F1110         (/dd/sourcecode/as):03922         L10C6    jmp   [>GrfMem+gr0010]     Flush left the font data in byte
                      (/dd/sourcecode/as):03923         
                      (/dd/sourcecode/as):03924         * Bit shift offsets for proportional fonts
                      (/dd/sourcecode/as):03925         * Outside loop: A=byte from font data in 2 color format
                      (/dd/sourcecode/as):03926         * Will take byte of font data in A and make it flush left
12D5 48               (/dd/sourcecode/as):03927         L10C9    lsla
12D6 48               (/dd/sourcecode/as):03928         L10CA    lsla
12D7 48               (/dd/sourcecode/as):03929         L10CB    lsla
12D8 48               (/dd/sourcecode/as):03930         L10CC    lsla
12D9 48               (/dd/sourcecode/as):03931         L10CD    lsla
12DA 48               (/dd/sourcecode/as):03932         L10CE    lsla
                      (/dd/sourcecode/as):03933         * Entry point for non-proportional fonts - byte already flush left (6 or 8)
12DB 970B             (/dd/sourcecode/as):03934         L10CF    sta   <$000B       Save flush left font byte, 1 bit/pixel
                      (/dd/sourcecode/as):03935                IFNE  H6309
                      (/dd/sourcecode/as):03936                  lde   <$006F       get X width of font char in pixels
                      (/dd/sourcecode/as):03937                ELSE
12DD D66F             (/dd/sourcecode/as):03938                  ldb   <$6F
12DF D7B5             (/dd/sourcecode/as):03939                  stb   <$B5
                      (/dd/sourcecode/as):03940                ENDC
12E1 D60F             (/dd/sourcecode/as):03941                  ldb   <$000F       Get bit mask for start pixel on screen
                      (/dd/sourcecode/as):03942         * NOTE: SHOULD TRY TO BUILD A WHOLE BYTE'S WORTH OF PIXELS INTO B TO PUT AS
                      (/dd/sourcecode/as):03943         * MANY PIXELS ONTO SCREEN AT ONCE - NEED TO KNOW HOW MANY PIXELS LEFT IN BYTE
                      (/dd/sourcecode/as):03944         * FROM START THOUGH (COULD USE F AS COUNTER)
12E3 3404             (/dd/sourcecode/as):03945                  pshs  b            Save pixel mask on stack
12E5 9F0C             (/dd/sourcecode/as):03946                  stx   <$000C       save screen address
12E7 6EC4             (/dd/sourcecode/as):03947                  jmp   ,u           Put it on screen (calls 10DF or 10FA only)
                      (/dd/sourcecode/as):03948         
                      (/dd/sourcecode/as):03949         * Print line of font char onto screen
                      (/dd/sourcecode/as):03950         * Inside loop: does 1 pixel at a time from font byte (stored in $000B)
12E9 080B             (/dd/sourcecode/as):03951         L10DF    lsl   <$000B       Shift pixel into carry from font byte
12EB 250E             (/dd/sourcecode/as):03952                  bcs   L10EB        Pixel is set, put it on screen in foregrnd color
12ED 960E             (/dd/sourcecode/as):03953                  lda   <$000E       Pixel is not used, transparent characters?
12EF 2A19             (/dd/sourcecode/as):03954                  bpl   L10FE        No, skip this pixel entirely
12F1 9662             (/dd/sourcecode/as):03955                  lda   <$0062       Transparent, get bckgrnd color full byte bit mask
12F3 2008             (/dd/sourcecode/as):03956                  bra   L10ED        Go put it on screen
                      (/dd/sourcecode/as):03957         
                      (/dd/sourcecode/as):03958         * Used by Update Window Cursor updates (Inverse for cursor)
12F5 E884             (/dd/sourcecode/as):03959         L10FA    eorb  ,x           Invert data on screen with bit data
12F7 E784             (/dd/sourcecode/as):03960                  stb   ,x           Save it on screen (Invert for cursor)
12F9 200F             (/dd/sourcecode/as):03961                  bra   L10FE        Check if we have more to do
                      (/dd/sourcecode/as):03962         
12FB 9661             (/dd/sourcecode/as):03963         L10EB    lda   <$0061       get foreground color full byte bit mask
                      (/dd/sourcecode/as):03964         * Entry: B=Current pixel mask
                      (/dd/sourcecode/as):03965         *        A=Color mask (can be fore or background)
     12FD             (/dd/sourcecode/as):03966         L10ED    equ   *
                      (/dd/sourcecode/as):03967                IFNE  H6309
                      (/dd/sourcecode/as):03968                  andr  b,a          Keep only color data we can use
                      (/dd/sourcecode/as):03969                ELSE
12FD D7BF             (/dd/sourcecode/as):03970                  stb   <grScrtch
12FF 94BF             (/dd/sourcecode/as):03971                  anda  <grScrtch
                      (/dd/sourcecode/as):03972                ENDC
1301 53               (/dd/sourcecode/as):03973                  comb               Make 'hole' with font data
1302 E484             (/dd/sourcecode/as):03974                  andb  ,x            & screen data
                      (/dd/sourcecode/as):03975                IFNE  H6309
                      (/dd/sourcecode/as):03976                  orr   b,a          Merge font color onto existing screen byte
                      (/dd/sourcecode/as):03977                ELSE
1304 D7BF             (/dd/sourcecode/as):03978                  stb   <grScrtch
1306 9ABF             (/dd/sourcecode/as):03979                  ora   <grScrtch
                      (/dd/sourcecode/as):03980                ENDC
1308 A784             (/dd/sourcecode/as):03981                  sta   ,x           Save result onto screen
     130A             (/dd/sourcecode/as):03982         L10FE    equ   *
                      (/dd/sourcecode/as):03983                IFNE  H6309
                      (/dd/sourcecode/as):03984                  dece               Dec # pixels left on current font line
                      (/dd/sourcecode/as):03985                ELSE
130A 0AB5             (/dd/sourcecode/as):03986                  dec   <$B5
                      (/dd/sourcecode/as):03987                ENDC
130C 3504             (/dd/sourcecode/as):03988                  puls  b            Get current pixel mask again
130E 2707             (/dd/sourcecode/as):03989                  beq   L1109        Done current line, skip ahead
1310 1706E7           (/dd/sourcecode/as):03990                  lbsr  L1F0E        Move to next pixel position
1313 3404             (/dd/sourcecode/as):03991                  pshs  b            Save new pixel mask on stack
1315 6EC4             (/dd/sourcecode/as):03992                  jmp   ,u           Put it on screen (calls 10DF or 10FA only)
                      (/dd/sourcecode/as):03993         * End of inside loop (each pixel within font byte)
                      (/dd/sourcecode/as):03994         
1317 9E0C             (/dd/sourcecode/as):03995         L1109    ldx   <$000C       get start of char. screen address again
1319 D663             (/dd/sourcecode/as):03996                  ldb   <$0063       Get # bytes per row on screen
131B 3A               (/dd/sourcecode/as):03997                  abx                Point to next line on screen
131C 0A99             (/dd/sourcecode/as):03998                  dec   <$0099       Are we done whole char (or on last line)?
131E 2EA2             (/dd/sourcecode/as):03999                  bgt   L10BB        No, continue drawing char
1320 2B0A             (/dd/sourcecode/as):04000                  bmi   L1120        Totally done, exit
                      (/dd/sourcecode/as):04001         * on last line ($99=0)
                      (/dd/sourcecode/as):04002                IFNE  H6309
                      (/dd/sourcecode/as):04003                  tim   #Under,<$0E  Underline requested?
                      (/dd/sourcecode/as):04004                ELSE
1322 960E             (/dd/sourcecode/as):04005                  lda   <$0E 
1324 8540             (/dd/sourcecode/as):04006                  bita  #Under
                      (/dd/sourcecode/as):04007                ENDC
1326 279A             (/dd/sourcecode/as):04008                  beq   L10BB        No, go draw last line
1328 86FF             (/dd/sourcecode/as):04009                  lda   #$FF         Underline code
132A 20AF             (/dd/sourcecode/as):04010                  bra   L10CF        Go draw it
                      (/dd/sourcecode/as):04011         * End of outside loop (for each line with font)
                      (/dd/sourcecode/as):04012         
132C 39               (/dd/sourcecode/as):04013         L1120    rts                Return
                      (/dd/sourcecode/as):04014         
                      (/dd/sourcecode/as):04015         * 2 color mode pixel mask table
132D 07               (/dd/sourcecode/as):04016         L1EE0    fcb   $07          Mask for pixel #'s we care about
132E 8040201008040201 (/dd/sourcecode/as):04017                  fcb   $80,$40,$20,$10,$08,$04,$02,$01
                      (/dd/sourcecode/as):04018         
                      (/dd/sourcecode/as):04019         * 4 color mode pixel mask table
1336 03               (/dd/sourcecode/as):04020         L1EE9    fcb   $03          Mask for pixel #'s we care about
1337 C0300C03         (/dd/sourcecode/as):04021                  fcb   $c0,$30,$0c,$03
                      (/dd/sourcecode/as):04022         
                      (/dd/sourcecode/as):04023         * 16 color mode pixel mask table
133B 01               (/dd/sourcecode/as):04024         L1EEE    fcb   $01          Mask for pixel #'s we care about
133C F00F             (/dd/sourcecode/as):04025                  fcb   $f0,$0f
                      (/dd/sourcecode/as):04026         
                      (/dd/sourcecode/as):04027         * Goto X/Y entry point
133E 17FE48           (/dd/sourcecode/as):04028         L1186    lbsr  L0FFF          Set up font sizes (and font if on gfx screen)
1341 D647             (/dd/sourcecode/as):04029                  ldb   <$0047         Get X coord
1343 C020             (/dd/sourcecode/as):04030                  subb  #$20           Kill off ASCII part of it
1345 966F             (/dd/sourcecode/as):04031                  lda   <$006F         Get # pixels wide each text char is
1347 3D               (/dd/sourcecode/as):04032                  mul                  Calculate # pixels into screen to start at
1348 DD47             (/dd/sourcecode/as):04033                  std   <$0047         Preserve Start pixel # as 'working' X coord
134A D36E             (/dd/sourcecode/as):04034                  addd  <$006E         Add width in pixels again (calculate end X coord)
                      (/dd/sourcecode/as):04035                IFNE  H6309
                      (/dd/sourcecode/as):04036                  decd                 Adjust
                      (/dd/sourcecode/as):04037                ELSE
134C 830001           (/dd/sourcecode/as):04038                  subd  #1
                      (/dd/sourcecode/as):04039                ENDC
134F 10A3A81B         (/dd/sourcecode/as):04040                  cmpd  Wt.MaxX,y      Would we be past end of window?
1353 2220             (/dd/sourcecode/as):04041                  bhi   L11CA          Yes, exit out of grfdrv
1355 D649             (/dd/sourcecode/as):04042                  ldb   <$0049         Get Y coord
1357 C020             (/dd/sourcecode/as):04043                  subb  #$20           Kill off ASCII part of it
1359 9671             (/dd/sourcecode/as):04044                  lda   <$0071         Get Y size of font in bytes
135B 3D               (/dd/sourcecode/as):04045                  mul                  Calculate # bytes from top of screen to start at
135C DD49             (/dd/sourcecode/as):04046                  std   <$0049         Save it
135E D370             (/dd/sourcecode/as):04047                  addd  <$0070         Bump down by 1 more text char Y size
                      (/dd/sourcecode/as):04048                IFNE  H6309
                      (/dd/sourcecode/as):04049                  decd                 Adjust
                      (/dd/sourcecode/as):04050                ELSE
1360 830001           (/dd/sourcecode/as):04051                  subd  #1
                      (/dd/sourcecode/as):04052                ENDC
1363 10A3A81D         (/dd/sourcecode/as):04053                  cmpd  Wt.MaxY,y      Would end of char go past bottom of window?
1367 220C             (/dd/sourcecode/as):04054                  bhi   L11CA          Yes, exit out of grfdrv
                      (/dd/sourcecode/as):04055                IFNE  H6309
                      (/dd/sourcecode/as):04056                  ldq   <$0047         Get x & y coords
                      (/dd/sourcecode/as):04057                  stq   Wt.CurX,y      Move into window table (-2 to +1)
                      (/dd/sourcecode/as):04058                ELSE
1369 DC49             (/dd/sourcecode/as):04059                  ldd   <$49
136B EDA4             (/dd/sourcecode/as):04060                  std   Wt.CurX+2,y
136D DDB5             (/dd/sourcecode/as):04061                  std   <$B5
136F DC47             (/dd/sourcecode/as):04062                  ldd   <$47
1371 ED3E             (/dd/sourcecode/as):04063                  std   Wt.CurX,y
                      (/dd/sourcecode/as):04064                ENDC
1373 8D7D             (/dd/sourcecode/as):04065                  bsr   NewEnt         Originally bsr L11D1 (redundant)
1375 7E50F6           (/dd/sourcecode/as):04066         L11CA    jmp   >GrfStrt+L0F78
                      (/dd/sourcecode/as):04067         
                      (/dd/sourcecode/as):04068         * Control code processor
                      (/dd/sourcecode/as):04069         * Entry: A=ctrl code
                      (/dd/sourcecode/as):04070         * ATD: 69 bytes old method, 47 new method
1378 17FE0E           (/dd/sourcecode/as):04071         L1129    lbsr  L0FFF        Set up font sizes (and font if on gfx screen)
137B 4A               (/dd/sourcecode/as):04072                  deca               make 1-D = 0-C
137C 2B0C             (/dd/sourcecode/as):04073                  bmi   L1130        if 0 or smaller, exit
137E 810D             (/dd/sourcecode/as):04074                  cmpa  #$0D         too high? (now 0-C instead of 1-D)
1380 2408             (/dd/sourcecode/as):04075                  bhs   L1130        yes, exit
1382 8E538D           (/dd/sourcecode/as):04076                  ldx   #GrfStrt+T.1133  point to offset table to use
1385 48               (/dd/sourcecode/as):04077                  asla               2 bytes per entry
1386 EC86             (/dd/sourcecode/as):04078                  ldd   a,x          get pointer to routine
1388 AD8B             (/dd/sourcecode/as):04079                  jsr   d,x          call it
138A 7E50F6           (/dd/sourcecode/as):04080         L1130    jmp   >GrfStrt+L0F78 return to CoWin: No errors
                      (/dd/sourcecode/as):04081         
138D 006C             (/dd/sourcecode/as):04082         T.1133   fdb   L11E1-T.1133 1 home cursor
138F FFFD             (/dd/sourcecode/as):04083                  fdb   L1130-T.1133 2   GOTO X,Y: handled elsewhere
1391 01AF             (/dd/sourcecode/as):04084                  fdb   L1352-T.1133 3 erase current line
1393 01BC             (/dd/sourcecode/as):04085                  fdb   L135F-T.1133 4 erase to end of line
1395 FFFD             (/dd/sourcecode/as):04086                  fdb   L1130-T.1133 5   cursor on/off: handled elsewhere
1397 00B1             (/dd/sourcecode/as):04087                  fdb   L121A-T.1133 6 cursor right
1399 FFFD             (/dd/sourcecode/as):04088                  fdb   L1130-T.1133 7   BELL: handled elsewhere
139B 0085             (/dd/sourcecode/as):04089                  fdb   L11F9-T.1133 8 cursor left
139D 00A6             (/dd/sourcecode/as):04090                  fdb   L122F-T.1133 9 cursor up
139F 00C4             (/dd/sourcecode/as):04091                  fdb   L123A-T.1133 A cursor down (LF)
13A1 01E8             (/dd/sourcecode/as):04092                  fdb   L138D-T.1133 B erase to end of screen
13A3 01D4             (/dd/sourcecode/as):04093                  fdb   L1377-T.1133 C clear screen
13A5 0059             (/dd/sourcecode/as):04094                  fdb   L11CD-T.1133 D cursor to LHS of the screen (CR)
                      (/dd/sourcecode/as):04095         
                      (/dd/sourcecode/as):04096         * Calculate screen logical address based on X/Y text coordinates
                      (/dd/sourcecode/as):04097         * Exit: X=Screen logical address pointing to X,Y text coordinate location
                      (/dd/sourcecode/as):04098         *       If graphics screen, B=Mask for specific pixel
13A7 AE33             (/dd/sourcecode/as):04099         L1E9D    ldx   Wt.LStrt,y   get screen logical start
                      (/dd/sourcecode/as):04100         * Calculate offset for Y location
13A9 964A             (/dd/sourcecode/as):04101         L1E9F    lda   <$004A       get Y coordinate (0-199)
13AB D663             (/dd/sourcecode/as):04102                  ldb   <$0063       get bytes/row
13AD 3D               (/dd/sourcecode/as):04103                  mul                Calculate # bytes into screen to go
                      (/dd/sourcecode/as):04104                IFNE  H6309
                      (/dd/sourcecode/as):04105                  addr  d,x          Add to screen start
                      (/dd/sourcecode/as):04106                ELSE
13AE 308B             (/dd/sourcecode/as):04107                  leax  d,x
                      (/dd/sourcecode/as):04108                ENDC
13B0 D660             (/dd/sourcecode/as):04109                  ldb   <$0060       get screen type
13B2 2A05             (/dd/sourcecode/as):04110                  bpl   L1EB5        graphics screen, go adjust X coordinate
                      (/dd/sourcecode/as):04111         * Calculate offset for X location (text only)
13B4 D648             (/dd/sourcecode/as):04112                  ldb   <$0048       Get X coordinate
13B6 58               (/dd/sourcecode/as):04113                  lslb               account for attribute byte
13B7 3A               (/dd/sourcecode/as):04114                  abx                point X to screen location & return
13B8 39               (/dd/sourcecode/as):04115                  rts
                      (/dd/sourcecode/as):04116         
                      (/dd/sourcecode/as):04117         * Calculate offset for X location (gfx only)
                      (/dd/sourcecode/as):04118         * Fast horizontal and vertical lines call this after doing a LDW <$68 (LSET)
13B9 3440             (/dd/sourcecode/as):04119         L1EB5    pshs  u            Preserve U
13BB C104             (/dd/sourcecode/as):04120                  cmpb  #$04         320 16 color screen?
13BD 2607             (/dd/sourcecode/as):04121                  bne   L1EC0        No, try next
                      (/dd/sourcecode/as):04122         * 16 color screens (2 pixels/byte)
13BF DC47             (/dd/sourcecode/as):04123                  ldd   <$0047       get requested X coordinate
13C1 CE533B           (/dd/sourcecode/as):04124                  ldu   #GrfStrt+L1EEE  Point to 2 pixel/byte tables
13C4 2014             (/dd/sourcecode/as):04125                  bra   L1ED4        Adjust screen address accordingly
                      (/dd/sourcecode/as):04126         
13C6 C101             (/dd/sourcecode/as):04127         L1EC0    cmpb  #$01         640 2 color screen?
13C8 2707             (/dd/sourcecode/as):04128                  beq   L1ECB        Yes, go process it
                      (/dd/sourcecode/as):04129         * 4 color screens go here (4 pixels/byte)
13CA DC47             (/dd/sourcecode/as):04130                  ldd   <$0047       Get requested X coordinate
13CC CE5336           (/dd/sourcecode/as):04131                  ldu   #GrfStrt+L1EE9  Point to 4 pixel/byte tables
13CF 2007             (/dd/sourcecode/as):04132                  bra   L1ED2        Adjust Screen address accordingly
                      (/dd/sourcecode/as):04133         
                      (/dd/sourcecode/as):04134         * 2 color screens go here (8 pixels/byte)
13D1 DC47             (/dd/sourcecode/as):04135         L1ECB    ldd   <$0047       Get requested X coordinate
13D3 CE532D           (/dd/sourcecode/as):04136                  ldu   #GrfStrt+L1EE0  Point to 8 pixel/byte tables
                      (/dd/sourcecode/as):04137                IFNE  H6309
                      (/dd/sourcecode/as):04138                  lsrd               Divide by 8 for byte address
13D6                  (/dd/sourcecode/as):04139         L1ED2    lsrd               divide by 4
13D6                  (/dd/sourcecode/as):04140         L1ED4    lsrd               divide coordinate by 2 (to get Byte offest)
                      (/dd/sourcecode/as):04141                  addr  d,x          Point X to byte offset for pixel
                      (/dd/sourcecode/as):04142                ELSE
13D6 44               (/dd/sourcecode/as):04143                  lsra
13D7 56               (/dd/sourcecode/as):04144                  rorb
13D8 44               (/dd/sourcecode/as):04145         L1ED2    lsra
13D9 56               (/dd/sourcecode/as):04146                  rorb
13DA 44               (/dd/sourcecode/as):04147         L1ED4    lsra
13DB 56               (/dd/sourcecode/as):04148                  rorb
13DC 308B             (/dd/sourcecode/as):04149                  leax  d,x
                      (/dd/sourcecode/as):04150                ENDC
13DE D648             (/dd/sourcecode/as):04151                  ldb   <$0048       Get LSB of X coordinate requested
13E0 E4C0             (/dd/sourcecode/as):04152                  andb  ,u+          Mask out all but pixels we need to address
13E2 E6C5             (/dd/sourcecode/as):04153                  ldb   b,u          Get mask for specific pixel we need
13E4 35C0             (/dd/sourcecode/as):04154                  puls  pc,u         Restore Y & exit
                      (/dd/sourcecode/as):04155         
                      (/dd/sourcecode/as):04156         * Cursor to left margin (CR)
     13E6             (/dd/sourcecode/as):04157         L11CD    equ   *
                      (/dd/sourcecode/as):04158                IFNE  H6309
                      (/dd/sourcecode/as):04159                  clrd                 Set X coordinate to 0
                      (/dd/sourcecode/as):04160                ELSE
13E6 4F               (/dd/sourcecode/as):04161                  clra
13E7 5F               (/dd/sourcecode/as):04162                  clrb
                      (/dd/sourcecode/as):04163                ENDC
13E8 ED3E             (/dd/sourcecode/as):04164                  std   Wt.CurX,y
     13EA             (/dd/sourcecode/as):04165         L11D1    equ   *
                      (/dd/sourcecode/as):04166                IFNE  H6309
                      (/dd/sourcecode/as):04167                  ldq   Wt.CurX,y      Copy window table x,y coord to grfdrv x,y
                      (/dd/sourcecode/as):04168                  stq   <$0047
                      (/dd/sourcecode/as):04169                ELSE
13EA EC3E             (/dd/sourcecode/as):04170                  ldd   Wt.CurX,y      Copy cursor X coord to grfdrv temp
13EC DD47             (/dd/sourcecode/as):04171         JustY    std   <$47
13EE ECA4             (/dd/sourcecode/as):04172                  ldd   Wt.CurY,y      Copy cursor Y coord to grfdrv temp
13F0 DD49             (/dd/sourcecode/as):04173                  std   <$49
                      (/dd/sourcecode/as):04174                ENDC
13F2 8DB3             (/dd/sourcecode/as):04175         NewEnt   bsr   L1E9D          Go calculate screen logical address
13F4 AF3B             (/dd/sourcecode/as):04176                  stx   Wt.Cur,y       Preserve screen location
13F6 E73D             (/dd/sourcecode/as):04177                  stb   Wt.FMsk,y      Preserve x coord (adjusted by x2 for text attr
13F8 39               (/dd/sourcecode/as):04178                  rts                    if needed)
                      (/dd/sourcecode/as):04179         
                      (/dd/sourcecode/as):04180         * Home cursor
13F9 EC33             (/dd/sourcecode/as):04181         L11E1    ldd   Wt.LStrt,y  Make cursor address same as upper left of screen
13FB ED3B             (/dd/sourcecode/as):04182                  std   Wt.Cur,y
13FD 8E6259           (/dd/sourcecode/as):04183                  ldx   #GrfStrt+L1F00-2  Point to bit mask/vector table
1400 D660             (/dd/sourcecode/as):04184                  ldb   <$0060      Get screen type
1402 2B05             (/dd/sourcecode/as):04185                  bmi   L11F8       If text, skip bit mask calculation
1404 58               (/dd/sourcecode/as):04186                  lslb              Multiply x2 to get table entry
1405 E685             (/dd/sourcecode/as):04187                  ldb   b,x         Get bit mask
1407 E73D             (/dd/sourcecode/as):04188                  stb   Wt.FMsk,y   Preserve it
     1409             (/dd/sourcecode/as):04189         L11F8    equ   *
                      (/dd/sourcecode/as):04190                IFNE  H6309
                      (/dd/sourcecode/as):04191                  clrd              Clear out x & y coord's in window table
                      (/dd/sourcecode/as):04192                  clrw
                      (/dd/sourcecode/as):04193                  stq   Wt.CurX,y
                      (/dd/sourcecode/as):04194                ELSE
1409 4F               (/dd/sourcecode/as):04195                  clra
140A 5F               (/dd/sourcecode/as):04196                  clrb
140B DDB5             (/dd/sourcecode/as):04197                  std   <$B5
140D ED3E             (/dd/sourcecode/as):04198                  std   Wt.CurX,y
140F EDA4             (/dd/sourcecode/as):04199                  std   Wt.CurY,y
                      (/dd/sourcecode/as):04200                ENDC
1411 39               (/dd/sourcecode/as):04201                  rts   
                      (/dd/sourcecode/as):04202         
                      (/dd/sourcecode/as):04203         * Cursor left
1412 EC3E             (/dd/sourcecode/as):04204         L11F9    ldd   Wt.CurX,y
1414 936E             (/dd/sourcecode/as):04205                  subd  <$006E      Subtract X pixel count
1416 ED3E             (/dd/sourcecode/as):04206                  std   Wt.CurX,y
                      (/dd/sourcecode/as):04207                  IFNE  H6309
                      (/dd/sourcecode/as):04208                    bpl  L11D1      Didn't wrap into negative, leave
                      (/dd/sourcecode/as):04209                  ELSE
1418 2AD2             (/dd/sourcecode/as):04210                    bpl   JustY     Didn't wrap into negative, leave
                      (/dd/sourcecode/as):04211                  ENDC
141A ECA81B           (/dd/sourcecode/as):04212                  ldd   Wt.MaxX,y   Get Max X coordinate
141D 936E             (/dd/sourcecode/as):04213                  subd  <$006E      subtract X pixel count
                      (/dd/sourcecode/as):04214                IFNE  H6309
                      (/dd/sourcecode/as):04215                  incd              Bump up by 1
                      (/dd/sourcecode/as):04216                ELSE
141F C30001           (/dd/sourcecode/as):04217                  addd  #1
                      (/dd/sourcecode/as):04218                ENDC
1422 ED3E             (/dd/sourcecode/as):04219                  std   Wt.CurX,y   Save new X coordinate
1424 ECA4             (/dd/sourcecode/as):04220                  ldd   ,y          Get Y coordinate
1426 9370             (/dd/sourcecode/as):04221                  subd  <$0070      Subtract Y pixel count
1428 EDA4             (/dd/sourcecode/as):04222                  std   Wt.CurY,y   Save updated Y coordinate
142A 2ABE             (/dd/sourcecode/as):04223                  bpl   L11D1       Didn't wrap into negative, leave
                      (/dd/sourcecode/as):04224                IFNE  H6309
                      (/dd/sourcecode/as):04225                  clrd              Set coordinates to 0,0
                      (/dd/sourcecode/as):04226                ELSE
142C 4F               (/dd/sourcecode/as):04227                  clra
142D 5F               (/dd/sourcecode/as):04228                  clrb
                      (/dd/sourcecode/as):04229                ENDC
142E ED3E             (/dd/sourcecode/as):04230                  std   Wt.CurX,y   Save X coordinate
1430 EDA4             (/dd/sourcecode/as):04231                  std   Wt.CurY,y   Save Y coordinate
1432 39               (/dd/sourcecode/as):04232                  rts   
                      (/dd/sourcecode/as):04233         
                      (/dd/sourcecode/as):04234         * Cursor Up
1433 ECA4             (/dd/sourcecode/as):04235         L122F    ldd   Wt.CurY,y     Get Y coordinate
1435 9370             (/dd/sourcecode/as):04236                  subd  <$0070        Subtract Y pixel size
1437 2A01             (/dd/sourcecode/as):04237                  bpl   GoodUp        If not at top, save coordinate
1439 39               (/dd/sourcecode/as):04238                  rts                 Otherwise, exit
                      (/dd/sourcecode/as):04239         
143A EDA4             (/dd/sourcecode/as):04240         GoodUp   std   Wt.CurY,y     Save new Y coordinate
143C 20AC             (/dd/sourcecode/as):04241                  bra   L11D1         Leave
                      (/dd/sourcecode/as):04242         
                      (/dd/sourcecode/as):04243         * Cursor right
143E EC3E             (/dd/sourcecode/as):04244         L121A    ldd   Wt.CurX,y     Get X coordinate
1440 D36E             (/dd/sourcecode/as):04245                  addd  <$006E        Add to X pixel count (1, 6 or 8?)
1442 ED3E             (/dd/sourcecode/as):04246                  std   Wt.CurX,y     Update value
1444 D36E             (/dd/sourcecode/as):04247                  addd  <$006E        Add to X pixel count again
                      (/dd/sourcecode/as):04248                IFNE  H6309
                      (/dd/sourcecode/as):04249                  decd                Dec by 1
                      (/dd/sourcecode/as):04250                ELSE
1446 830001           (/dd/sourcecode/as):04251                  subd  #1
                      (/dd/sourcecode/as):04252                ENDC
1449 10A3A81B         (/dd/sourcecode/as):04253                  cmpd  Wt.MaxX,y     Compare with maximum X coordinate
144D 239B             (/dd/sourcecode/as):04254                  bls   L11D1         If not past right hand side, leave
144F 8D95             (/dd/sourcecode/as):04255         L1238    bsr   L11CD         Zero out X coordinate
                      (/dd/sourcecode/as):04256         
                      (/dd/sourcecode/as):04257         * Cursor Down (LF)
                      (/dd/sourcecode/as):04258         * Called by font change. Entry= Y=window table ptr, X=Screen addr, B=X coord
                      (/dd/sourcecode/as):04259         * on current line on physical screen
1451 ECA4             (/dd/sourcecode/as):04260         L123A    ldd   Wt.CurY,y     Get current Y coord
1453 D370             (/dd/sourcecode/as):04261                  addd  <$0070        Add to Y pixel count
1455 1F01             (/dd/sourcecode/as):04262                  tfr   d,x           Move result to X
1457 D370             (/dd/sourcecode/as):04263                  addd  <$0070        Add Y pixel count again
                      (/dd/sourcecode/as):04264                IFNE  H6309
                      (/dd/sourcecode/as):04265                  decd                decrement by 1
                      (/dd/sourcecode/as):04266                ELSE
1459 830001           (/dd/sourcecode/as):04267                  subd  #1
                      (/dd/sourcecode/as):04268                ENDC
145C 10A3A81D         (/dd/sourcecode/as):04269                  cmpd  Wt.MaxY,y     compare with Maximum Y coordinate
1460 2204             (/dd/sourcecode/as):04270                  bhi   L124F         If higher (scroll needed), skip ahead
1462 AFA4             (/dd/sourcecode/as):04271                  stx   Wt.CurY,y     Store +1 Y coordinate
1464 2084             (/dd/sourcecode/as):04272                  bra   L11D1         Update grfdrv's X&Y ptrs & leave
                      (/dd/sourcecode/as):04273         
                      (/dd/sourcecode/as):04274         * new Y coord+1 is >bottom of window goes here
1466 3420             (/dd/sourcecode/as):04275         L124F    pshs  y             Preserve window table ptr
1468 E622             (/dd/sourcecode/as):04276                  ldb   Wt.XBCnt,y    Get width of window in bytes
146A D797             (/dd/sourcecode/as):04277                  stb   <$0097        Save since Y will disappear
146C 4F               (/dd/sourcecode/as):04278                  clra                Clear MSB of D
146D D663             (/dd/sourcecode/as):04279                  ldb   <$0063        Get # bytes per row of screen
146F DD99             (/dd/sourcecode/as):04280                  std   <$0099        preserve value (16 bit for proper ADDR)
1471 ECA4             (/dd/sourcecode/as):04281                  ldd   Wt.CurY,y     Get current Y coord
1473 DD9D             (/dd/sourcecode/as):04282                  std   <$009D        Preserve
1475 A638             (/dd/sourcecode/as):04283                  lda   Wt.SZY,y      Get current Y size
1477 4A               (/dd/sourcecode/as):04284                  deca                0 base
1478 979B             (/dd/sourcecode/as):04285                  sta   <$009B        Preserve
147A 274B             (/dd/sourcecode/as):04286                  beq   L128A         If window only 1 line high, then no scroll needed
147C AE33             (/dd/sourcecode/as):04287                  ldx   Wt.LStrt,y    Get screen logical start addr. (top of screen)
147E EC24             (/dd/sourcecode/as):04288                  ldd   Wt.BRow,y     Get # bytes/text row (8 pixel lines if gfx)
1480 3184             (/dd/sourcecode/as):04289                  leay  ,x            Move screen start addr. to Y
                      (/dd/sourcecode/as):04290                IFNE  H6309
                      (/dd/sourcecode/as):04291                  addr  d,x           X=Screen addr+1 text line
                      (/dd/sourcecode/as):04292                ELSE
1482 308B             (/dd/sourcecode/as):04293                  leax  d,x
                      (/dd/sourcecode/as):04294                ENDC
1484 969B             (/dd/sourcecode/as):04295                  lda   <$009B        Get Y size (0 base)
1486 D660             (/dd/sourcecode/as):04296                  ldb   <$0060        Check screen type
1488 2B05             (/dd/sourcecode/as):04297                  bmi   L1267         If text, skip ahead
148A 48               (/dd/sourcecode/as):04298                  lsla                Multiply by 8 (# pixel lines/text line)
148B 48               (/dd/sourcecode/as):04299                  lsla  
148C 48               (/dd/sourcecode/as):04300                  lsla  
148D 979B             (/dd/sourcecode/as):04301                  sta   <$009B        Y size into # pixel lines, not text lines
                      (/dd/sourcecode/as):04302         * Special check for full width windows
148F D697             (/dd/sourcecode/as):04303         L1267    ldb   <$97          Get width of window in bytes
1491 D163             (/dd/sourcecode/as):04304                  cmpb  <$63          Same as screen width?
1493 260C             (/dd/sourcecode/as):04305                  bne   L127B         No, do normal scroll
1495 3D               (/dd/sourcecode/as):04306         L1267a   mul                 Calculate size of entire window to move
                      (/dd/sourcecode/as):04307         * Scroll entire window in one shot since full width of screen
                      (/dd/sourcecode/as):04308                IFNE  H6309
                      (/dd/sourcecode/as):04309                  tfr   d,w           Move to TFM size reg.
                      (/dd/sourcecode/as):04310                  tfm   x+,y+         Move screen
                      (/dd/sourcecode/as):04311                ELSE
                      (/dd/sourcecode/as):04312         * Entry: D=size of copy (in bytes)
                      (/dd/sourcecode/as):04313         *        X=Src ptr
                      (/dd/sourcecode/as):04314         *        Y=Dest ptr        
1496 3440             (/dd/sourcecode/as):04315                  pshs  u             Save U register
1498 3384             (/dd/sourcecode/as):04316                  leau  ,x            Point U to src of copy
149A 17F6A0           (/dd/sourcecode/as):04317                  lbsr  StkBlCpy      Mini stack blast the scroll
149D 3540             (/dd/sourcecode/as):04318                  puls  u             Restore U
                      (/dd/sourcecode/as):04319                ENDC
149F 2026             (/dd/sourcecode/as):04320                  bra   L128A         Exit scroll routine
                      (/dd/sourcecode/as):04321         
                      (/dd/sourcecode/as):04322         * Scroll window that is not full width of screen. Can scroll either direction
                      (/dd/sourcecode/as):04323         * so some vars are signed.
                      (/dd/sourcecode/as):04324         * Used for scroll, delete line, and insert line
     14A1             (/dd/sourcecode/as):04325         L127B    equ   *
                      (/dd/sourcecode/as):04326                IFNE  H6309
                      (/dd/sourcecode/as):04327                  ldd   <$99         Get # bytes/row for screen
                      (/dd/sourcecode/as):04328                  ldf   <$97         Get # bytes wide window is
                      (/dd/sourcecode/as):04329                  clre
                      (/dd/sourcecode/as):04330                  subr  w,d          Calc # bytes to next line
                      (/dd/sourcecode/as):04331         * Entry: X=src ptr of copy
                      (/dd/sourcecode/as):04332         *        Y=dest ptr of copy
                      (/dd/sourcecode/as):04333         *  6809   
14A1                  (/dd/sourcecode/as):04334         L127E    tfm   x+,y+        Block move the line
                      (/dd/sourcecode/as):04335                ELSE
                      (/dd/sourcecode/as):04336         *** NEW 6809 VERSION ***
14A1 4F               (/dd/sourcecode/as):04337                  clra
14A2 D697             (/dd/sourcecode/as):04338                  ldb   <$97         D=# bytes wide window is
14A4 DDBF             (/dd/sourcecode/as):04339                  std   <grScrtch    Save copy
14A6 DC99             (/dd/sourcecode/as):04340                  ldd   <$99         Get # bytes/row to move (CAN BE SIGNED!)
14A8 93BF             (/dd/sourcecode/as):04341                  subd  <grScrtch    Subtract # bytes wide window is
14AA DDB5             (/dd/sourcecode/as):04342                  std   <$B5         Save # bytes to skip to next line after current line is done
14AC DCBF             (/dd/sourcecode/as):04343                  ldd   <grScrtch    Get # bytes wide to copy again
                      (/dd/sourcecode/as):04344                  
                      (/dd/sourcecode/as):04345                  
                      (/dd/sourcecode/as):04346         *         ldd   <$99         Get bytes per row to move (CAN BE SIGNED!)
                      (/dd/sourcecode/as):04347         *         subd  <$97         Subtract # bytes wide window is
                      (/dd/sourcecode/as):04348         *         std   <$B5         Save # bytes to skip to next line after current line done
                      (/dd/sourcecode/as):04349         *         clra
                      (/dd/sourcecode/as):04350         *         ldb   <$0097       D=# bytes to copy again
14AE 3440             (/dd/sourcecode/as):04351                  pshs  u            Save U
                      (/dd/sourcecode/as):04352         * Entry: D=size of copy
                      (/dd/sourcecode/as):04353         *        X=src ptr
                      (/dd/sourcecode/as):04354         *        Y=dest ptr
14B0 3384             (/dd/sourcecode/as):04355         L127E    leau  ,x           U=ptr to src of copy
14B2 17F688           (/dd/sourcecode/as):04356                  lbsr  StkBlCpy     Copy line
14B5 30C4             (/dd/sourcecode/as):04357                  leax  ,u           Move updated src ptr to X
                      (/dd/sourcecode/as):04358                ENDC
                      (/dd/sourcecode/as):04359         * Entry: D=# bytes to start of next line
                      (/dd/sourcecode/as):04360         *        X=updated src ptr,
                      (/dd/sourcecode/as):04361         *        Y=updated dest ptr
14B7 0A9B             (/dd/sourcecode/as):04362                  dec   <$9B          Dec # lines to still copy
                      (/dd/sourcecode/as):04363                IFNE  H6309
                      (/dd/sourcecode/as):04364                  beq   L128A         If done, exit
                      (/dd/sourcecode/as):04365                  addr  d,x           Bump start ptr by 1 line (might be signed)
                      (/dd/sourcecode/as):04366                  addr  d,y           Bump end ptr by 1 line
                      (/dd/sourcecode/as):04367                  ldf   <$97          Get width of window in bytes
                      (/dd/sourcecode/as):04368                ELSE
14B9 270A             (/dd/sourcecode/as):04369                  beq   L128A.2       If done, exit
14BB DCB5             (/dd/sourcecode/as):04370                  ldd   <$B5          Get # of bytes to skip for next line (signed)
14BD 308B             (/dd/sourcecode/as):04371                  leax  d,x           Bump src ptr (might be signed)
14BF 31AB             (/dd/sourcecode/as):04372                  leay  d,y           Bump dest ptr
14C1 DCBF             (/dd/sourcecode/as):04373                  ldd   <grScrtch     Get # bytes wide to copy again
                      (/dd/sourcecode/as):04374                ENDC
14C3 20EB             (/dd/sourcecode/as):04375                  bra   L127E         Do until we have moved all the lines
                      (/dd/sourcecode/as):04376                  
                      (/dd/sourcecode/as):04377                IFEQ  H6309
14C5 3540             (/dd/sourcecode/as):04378         L128A.2  puls  u             Restore U
                      (/dd/sourcecode/as):04379                ENDC
14C7 3520             (/dd/sourcecode/as):04380         L128A    puls  y             Get back window table ptr
14C9 DC9D             (/dd/sourcecode/as):04381         L128C    ldd   <$009D        Get back current Y coord
14CB 2071             (/dd/sourcecode/as):04382         L128E    bra   L1354         Go clear new line & exit
                      (/dd/sourcecode/as):04383         
                      (/dd/sourcecode/as):04384         * Insert line - currently not working with 6809
14CD 3420             (/dd/sourcecode/as):04385         L1291    pshs  y             Save window table ptr
14CF ECA4             (/dd/sourcecode/as):04386                  ldd   Wt.CurY,y     Get current Y coord
14D1 DD9D             (/dd/sourcecode/as):04387                  std   <$009D        Preserve it
14D3 E622             (/dd/sourcecode/as):04388                  ldb   Wt.XBCnt,y    Get width of window in bytes
14D5 D797             (/dd/sourcecode/as):04389                  stb   <$0097        Save in fast mem
14D7 4F               (/dd/sourcecode/as):04390                  clra                Get # bytes/row into D
14D8 D663             (/dd/sourcecode/as):04391                  ldb   <$0063         (16 bit for ADDR)
                      (/dd/sourcecode/as):04392                IFNE  H6309
                      (/dd/sourcecode/as):04393                  negd                Make negative (since scrolling down?)
                      (/dd/sourcecode/as):04394                ELSE
14DA 43               (/dd/sourcecode/as):04395                  coma
14DB 53               (/dd/sourcecode/as):04396                  comb
14DC C30001           (/dd/sourcecode/as):04397                  addd  #1
                      (/dd/sourcecode/as):04398                ENDC
14DF DD99             (/dd/sourcecode/as):04399                  std   <$0099        Preserve it
14E1 E638             (/dd/sourcecode/as):04400                  ldb   Wt.SZY,y      Get current Y size
14E3 5A               (/dd/sourcecode/as):04401                  decb                0 base
14E4 9671             (/dd/sourcecode/as):04402                  lda   <$0071        Get Y pixel count (1 or 8)
14E6 3D               (/dd/sourcecode/as):04403                  mul                 Multiply by current Y size
14E7 1F98             (/dd/sourcecode/as):04404                  tfr   b,a           Dupe result
14E9 4A               (/dd/sourcecode/as):04405                  deca                Don't include line we are on
14EA E021             (/dd/sourcecode/as):04406                  subb  Wt.CurY+1,y   Subtract Y coord of cursor
14EC D171             (/dd/sourcecode/as):04407                  cmpb  <$0071        Compare with Y pixel count
14EE 25D7             (/dd/sourcecode/as):04408                  blo   L128A         If on bottom line, don't bother
14F0 D79B             (/dd/sourcecode/as):04409                  stb   <$009B        Save # lines to leave alone
14F2 D663             (/dd/sourcecode/as):04410                  ldb   <$0063        Get #bytes/row
14F4 3D               (/dd/sourcecode/as):04411                  mul                 Calculate # bytes to skip scrolling
14F5 E333             (/dd/sourcecode/as):04412                  addd  Wt.LStrt,y    Add to screen start address
14F7 1F01             (/dd/sourcecode/as):04413                  tfr   d,x           Move to top of scroll area reg. for TFM
14F9 E324             (/dd/sourcecode/as):04414                  addd  Wt.BRow,y     Add # bytes/text row
14FB 1F02             (/dd/sourcecode/as):04415                  tfr   d,y           Move to bottom of scroll area reg. for TFM
14FD 20A2             (/dd/sourcecode/as):04416                  bra   L127B         Do insert scroll
                      (/dd/sourcecode/as):04417         
                      (/dd/sourcecode/as):04418         * Delete line - currently works properly on 6809 and 6309
14FF 3420             (/dd/sourcecode/as):04419         L12C5    pshs  y             Save window table ptr
1501 E622             (/dd/sourcecode/as):04420                  ldb   Wt.XBCnt,y    Get width of window in bytes
1503 D797             (/dd/sourcecode/as):04421                  stb   <$0097        Save it
1505 4F               (/dd/sourcecode/as):04422                  clra                Get # bytes/row on screen into D
1506 D663             (/dd/sourcecode/as):04423                  ldb   <$0063
1508 DD99             (/dd/sourcecode/as):04424                  std   <$0099        Save for ADDR loop
150A A638             (/dd/sourcecode/as):04425                  lda   Wt.SZY,y      Get current Y size
150C 4A               (/dd/sourcecode/as):04426                  deca                0 base
150D D660             (/dd/sourcecode/as):04427                  ldb   <$0060        Check screen type
150F 2B03             (/dd/sourcecode/as):04428                  bmi   L12DC         If text, skip ahead
1511 48               (/dd/sourcecode/as):04429                  lsla                Multiply x8 (height of font)
1512 48               (/dd/sourcecode/as):04430                  lsla  
1513 48               (/dd/sourcecode/as):04431                  lsla  
1514 A021             (/dd/sourcecode/as):04432         L12DC    suba  Wt.CurY+1,y   Subtract current Y location
1516 2206             (/dd/sourcecode/as):04433                  bhi   L12E6         Not on bottom of screen, continue
1518 3520             (/dd/sourcecode/as):04434                  puls  y             On bottom, get back window table ptr
151A ECA4             (/dd/sourcecode/as):04435                  ldd   Wt.CurY,y     Get Y coord back
151C 2020             (/dd/sourcecode/as):04436                  bra   L1354         Just clear the line & exit
                      (/dd/sourcecode/as):04437         
151E 979B             (/dd/sourcecode/as):04438         L12E6    sta   <$009B        Save # lines to scroll
1520 ECA81D           (/dd/sourcecode/as):04439                  ldd   Wt.MaxY,y     Get Maximum Y coordinate
1523 9370             (/dd/sourcecode/as):04440                  subd  <$0070        Subtract Y pixel count
                      (/dd/sourcecode/as):04441                IFNE  H6309
                      (/dd/sourcecode/as):04442                  incd                Base 1
                      (/dd/sourcecode/as):04443                ELSE
1525 C30001           (/dd/sourcecode/as):04444                  addd  #1
                      (/dd/sourcecode/as):04445                ENDC
1528 DD9D             (/dd/sourcecode/as):04446                  std   <$009D        Save size of area to scroll for delete
152A 9663             (/dd/sourcecode/as):04447                  lda   <$0063        Get # bytes/row
152C E621             (/dd/sourcecode/as):04448                  ldb   Wt.CurY+1,y   Get Y coord of cursor
152E 3D               (/dd/sourcecode/as):04449                  mul                 Calculate offset to top of area to scroll
152F E333             (/dd/sourcecode/as):04450                  addd  Wt.LStrt,y    Add to Screen logical start address
1531 1F01             (/dd/sourcecode/as):04451                  tfr   d,x           Move to top of window reg. for TFM
1533 EC24             (/dd/sourcecode/as):04452                  ldd   Wt.BRow,y     Get # bytes/text row
                      (/dd/sourcecode/as):04453         * 6809 - leay ,x
1535 3184             (/dd/sourcecode/as):04454                  leay  ,x            Swap top of window to bottom since reverse scroll
                      (/dd/sourcecode/as):04455         *         tfr   x,y           Swap top of window to bottom since reverse scroll
                      (/dd/sourcecode/as):04456                IFNE  H6309
                      (/dd/sourcecode/as):04457                  addr  d,x           Calculate top of window reg. for backwards TFM
                      (/dd/sourcecode/as):04458                ELSE
1537 308B             (/dd/sourcecode/as):04459                  leax  d,x
                      (/dd/sourcecode/as):04460                ENDC
1539 7E54A1           (/dd/sourcecode/as):04461                  jmp   >GrfStrt+L127B Go delete the line
                      (/dd/sourcecode/as):04462         
                      (/dd/sourcecode/as):04463         * Erase current line
153C ECA4             (/dd/sourcecode/as):04464         L1352    ldd   Wt.CurY,y     Get Y coordinate
153E DD49             (/dd/sourcecode/as):04465         L1354    std   <$0049        Preserve 'working' Y coordinate
                      (/dd/sourcecode/as):04466                IFNE  H6309
                      (/dd/sourcecode/as):04467                  clrd
                      (/dd/sourcecode/as):04468                ELSE
1540 4F               (/dd/sourcecode/as):04469                  clra
1541 5F               (/dd/sourcecode/as):04470                  clrb
                      (/dd/sourcecode/as):04471                ENDC
1542 DD47             (/dd/sourcecode/as):04472                  std   <$0047        'Working' X coordinate to 0
1544 ECA81B           (/dd/sourcecode/as):04473                  ldd   Wt.MaxX,y     Get maximum X coordinate
1547 200D             (/dd/sourcecode/as):04474                  bra   L136C
                      (/dd/sourcecode/as):04475         
                      (/dd/sourcecode/as):04476         * Erase to end of line
     1549             (/dd/sourcecode/as):04477         L135F    equ   *
                      (/dd/sourcecode/as):04478                IFNE  H6309
                      (/dd/sourcecode/as):04479                  ldq   Wt.CurX,y     Get X & Y coordinates
                      (/dd/sourcecode/as):04480                  stq   <$0047        Save as 'working' copies
                      (/dd/sourcecode/as):04481                ELSE
1549 ECA4             (/dd/sourcecode/as):04482                  ldd   Wt.CurX+2,y
154B DD49             (/dd/sourcecode/as):04483                  std   <$49
154D EC3E             (/dd/sourcecode/as):04484                  ldd   Wt.CurX,y
154F DD47             (/dd/sourcecode/as):04485                  std   <$47
                      (/dd/sourcecode/as):04486                ENDC
1551 ECA81B           (/dd/sourcecode/as):04487                  ldd   Wt.MaxX,y     Get maximum X coordinate
1554 A33E             (/dd/sourcecode/as):04488                  subd  Wt.CurX,y     Subtract X coordinate
     1556             (/dd/sourcecode/as):04489         L136C    equ   *
                      (/dd/sourcecode/as):04490                IFNE  H6309
                      (/dd/sourcecode/as):04491                  incd                Add 1 to X size
                      (/dd/sourcecode/as):04492                ELSE
1556 C30001           (/dd/sourcecode/as):04493                  addd  #1
                      (/dd/sourcecode/as):04494                ENDC
1559 DD4F             (/dd/sourcecode/as):04495                  std   <$004F        New X size (in bytes)
155B DC70             (/dd/sourcecode/as):04496                  ldd   <$0070        Get Y pixel count
155D DD51             (/dd/sourcecode/as):04497                  std   <$0051        New Y size (in bytes)
155F 2034             (/dd/sourcecode/as):04498                  bra   L13AD
                      (/dd/sourcecode/as):04499         
                      (/dd/sourcecode/as):04500         * CLS (Chr$(12))
1561 17FE95           (/dd/sourcecode/as):04501         L1377    lbsr  L11E1         Home cursor (D&W are 0 on exit)
                      (/dd/sourcecode/as):04502                IFNE  H6309
                      (/dd/sourcecode/as):04503                  stq   <$47
                      (/dd/sourcecode/as):04504                ELSE
1564 DD49             (/dd/sourcecode/as):04505                  std   <$49
1566 DD47             (/dd/sourcecode/as):04506                  std   <$47
                      (/dd/sourcecode/as):04507                ENDC
1568 ECA81B           (/dd/sourcecode/as):04508                  ldd   Wt.MaxX,y     Get maximum X coordinate
                      (/dd/sourcecode/as):04509                IFNE  H6309
                      (/dd/sourcecode/as):04510                  incd                Bump up by 1
                      (/dd/sourcecode/as):04511                ELSE
156B C30001           (/dd/sourcecode/as):04512                  addd  #1
                      (/dd/sourcecode/as):04513                ENDC
156E DD4F             (/dd/sourcecode/as):04514                  std   <$004F        New X size
1570 ECA81D           (/dd/sourcecode/as):04515                  ldd   Wt.MaxY,y     Get maximum Y coordinate
1573 201B             (/dd/sourcecode/as):04516                  bra   L13A8
                      (/dd/sourcecode/as):04517         
                      (/dd/sourcecode/as):04518         * Erase to end of screen
1575 8DD2             (/dd/sourcecode/as):04519         L138D    bsr   L135F         Erase to end of current line first
                      (/dd/sourcecode/as):04520                IFNE  H6309
                      (/dd/sourcecode/as):04521                  clrd                'working' X coordinate to 0
                      (/dd/sourcecode/as):04522                ELSE
1577 4F               (/dd/sourcecode/as):04523                  clra
1578 5F               (/dd/sourcecode/as):04524                  clrb
                      (/dd/sourcecode/as):04525                ENDC
1579 DD47             (/dd/sourcecode/as):04526                  std   <$0047
157B ECA4             (/dd/sourcecode/as):04527                  ldd   Wt.CurY,y
157D D370             (/dd/sourcecode/as):04528                  addd  <$0070        Add Y pixel count
157F DD49             (/dd/sourcecode/as):04529                  std   <$0049        New Y coordinate
1581 ECA81B           (/dd/sourcecode/as):04530                  ldd   Wt.MaxX,y     Get maximum X coordinate
                      (/dd/sourcecode/as):04531                IFNE  H6309
                      (/dd/sourcecode/as):04532                  incd                bump up by 1
                      (/dd/sourcecode/as):04533                ELSE
1584 C30001           (/dd/sourcecode/as):04534                  addd  #1
                      (/dd/sourcecode/as):04535                ENDC
1587 DD4F             (/dd/sourcecode/as):04536                  std   <$004F        New X size
1589 ECA81D           (/dd/sourcecode/as):04537                  ldd   Wt.MaxY,y     Get maximum Y coordinate
158C 9349             (/dd/sourcecode/as):04538                  subd  <$0049        Subtract Y coordinate
158E 2B35             (/dd/sourcecode/as):04539                  bmi   L13B7         If negative, skip
     1590             (/dd/sourcecode/as):04540         L13A8    equ   *
                      (/dd/sourcecode/as):04541                IFNE  H6309
                      (/dd/sourcecode/as):04542                  incd                Bump up by 1
                      (/dd/sourcecode/as):04543                ELSE
1590 C30001           (/dd/sourcecode/as):04544                  addd  #1
                      (/dd/sourcecode/as):04545                ENDC
1593 DD51             (/dd/sourcecode/as):04546                  std   <$0051        Save Y size
                      (/dd/sourcecode/as):04547         * Erase to end of screen/line comes here too
1595 17FE0F           (/dd/sourcecode/as):04548         L13AD    lbsr  L1E9D        get screen logical start address into X
                      (/dd/sourcecode/as):04549         * and also the starting pixel mask into B.
1598 9660             (/dd/sourcecode/as):04550                  lda   <$0060        Get screen type
159A 2A3E             (/dd/sourcecode/as):04551                  bpl   L13E3         Do CLS on gfx screen & return
                      (/dd/sourcecode/as):04552         * Do the CLS on text screen
159C 8620             (/dd/sourcecode/as):04553                  lda   #$20          Space character
159E E628             (/dd/sourcecode/as):04554                  ldb   Wt.Attr,y     Get default attributes
15A0 C438             (/dd/sourcecode/as):04555                  andb  #$38          Mask out Flash/Underline & bckgrnd color
15A2 DA62             (/dd/sourcecode/as):04556                  orb   <$0062        Mask in background color
                      (/dd/sourcecode/as):04557                IFNE  H6309
                      (/dd/sourcecode/as):04558                  tfr   x,w          move pointer to faster index register
                      (/dd/sourcecode/as):04559                ELSE
15A4 9FB5             (/dd/sourcecode/as):04560                  stx   <$B5
                      (/dd/sourcecode/as):04561                ENDC
15A6 1F01             (/dd/sourcecode/as):04562                  tfr   d,x           Move into proper register for clear loop
15A8 D663             (/dd/sourcecode/as):04563                  ldb   <$0063        Get #bytes/row
15AA D050             (/dd/sourcecode/as):04564                  subb  <$0050        Subtract width twice for char. & attribute
15AC D050             (/dd/sourcecode/as):04565                  subb  <$0050        B=# bytes to skip to go to next line
15AE 2716             (/dd/sourcecode/as):04566                  beq   ClsFTxt       If full width screen, use optomized routine
                      (/dd/sourcecode/as):04567         
15B0 9650             (/dd/sourcecode/as):04568         L13CF    lda   <$0050        Get width of line in chars?
                      (/dd/sourcecode/as):04569                IFEQ  H6309
15B2 3440             (/dd/sourcecode/as):04570                  pshs  u
15B4 DEB5             (/dd/sourcecode/as):04571                  ldu   <$B5
                      (/dd/sourcecode/as):04572                ENDC
     15B6             (/dd/sourcecode/as):04573         L13D4    equ   *             * Only called as loop
                      (/dd/sourcecode/as):04574                IFNE  H6309
                      (/dd/sourcecode/as):04575                  stx   ,w++          Put attr/char on screen
                      (/dd/sourcecode/as):04576                ELSE
15B6 AFC1             (/dd/sourcecode/as):04577                  stx   ,u++
                      (/dd/sourcecode/as):04578                ENDC
15B8 4A               (/dd/sourcecode/as):04579                  deca                Dec counter of how many bytes this line
15B9 26FB             (/dd/sourcecode/as):04580                  bne   L13D4         Do until line is done
                      (/dd/sourcecode/as):04581                IFNE  H6309
                      (/dd/sourcecode/as):04582                  addr  d,w          after all, A=0
                      (/dd/sourcecode/as):04583                ELSE
15BB 33CB             (/dd/sourcecode/as):04584                  leau  d,u
15BD DFB5             (/dd/sourcecode/as):04585                  stu   <$B5
15BF 3540             (/dd/sourcecode/as):04586                  puls  u 
                      (/dd/sourcecode/as):04587                ENDC
15C1 0A52             (/dd/sourcecode/as):04588                  dec   <$0052        Dec line count
15C3 26EB             (/dd/sourcecode/as):04589                  bne   L13CF         Do until rest of screeen done
15C5 39               (/dd/sourcecode/as):04590         L13B7    rts                 Restore window table ptr & return
                      (/dd/sourcecode/as):04591         
                      (/dd/sourcecode/as):04592         * Optimized routine for full width text screens
                      (/dd/sourcecode/as):04593         * Entry: W=attribute/char to fill with
                      (/dd/sourcecode/as):04594         * 6809/6309 - change to use mini-stack blast clear routine, with 2 byte data reg
                      (/dd/sourcecode/as):04595         *  pre-loaded and then duped. Use A/B as counters, like LCB did in CoVDG
15C6 D650             (/dd/sourcecode/as):04596         ClsFTxt  ldb   <$0050        Get # chars per line
15C8 9652             (/dd/sourcecode/as):04597                  lda   <$0052        Get # of rows (lines)
15CA 3D               (/dd/sourcecode/as):04598                  mul                 # chars till end of screen
                      (/dd/sourcecode/as):04599                IFEQ  H6309
15CB 3440             (/dd/sourcecode/as):04600                  pshs  u
15CD DEB5             (/dd/sourcecode/as):04601                  ldu   <$B5
                      (/dd/sourcecode/as):04602                ENDC
     15CF             (/dd/sourcecode/as):04603         FstClrT  equ   *
                      (/dd/sourcecode/as):04604                IFNE  H6309
                      (/dd/sourcecode/as):04605                  stx   ,w++          Put attr/char on screen
                      (/dd/sourcecode/as):04606                  decd                Dec counter
                      (/dd/sourcecode/as):04607                ELSE
15CF AFC1             (/dd/sourcecode/as):04608                  stx   ,u++
15D1 830001           (/dd/sourcecode/as):04609                  subd  #1
                      (/dd/sourcecode/as):04610                ENDC
15D4 26F9             (/dd/sourcecode/as):04611                  bne   FstClrT       Do until done
                      (/dd/sourcecode/as):04612                IFNE  H6309
                      (/dd/sourcecode/as):04613                  rts                 Restore window table ptr & return 
                      (/dd/sourcecode/as):04614                ELSE
15D6 DFB5             (/dd/sourcecode/as):04615                  stu   <$B5
15D8 35C0             (/dd/sourcecode/as):04616                  puls  u,pc
                      (/dd/sourcecode/as):04617                ENDC
                      (/dd/sourcecode/as):04618         
                      (/dd/sourcecode/as):04619         * Part of CLS/Erase to end of screen/line - Gfx only
                      (/dd/sourcecode/as):04620         * all coords & sizes should be pixel based
                      (/dd/sourcecode/as):04621         *   the cmpx's at the bottom should be F or E (screen type)
                      (/dd/sourcecode/as):04622         * NOTE: <$48 contains a 0 when coming in here for CLS
                      (/dd/sourcecode/as):04623         *   If this is the only way to get here, may change lda/coma to lda #$ff
                      (/dd/sourcecode/as):04624         * <$4F=X size in pixels (1-640) to clear
                      (/dd/sourcecode/as):04625         * <$51=Y size in pixels (1-200) to clear
                      (/dd/sourcecode/as):04626         * This routine calculates the pixel mask if you are clearing from the middle
                      (/dd/sourcecode/as):04627         * of a byte to properly handle proportional chars or 6 pixel fonts
                      (/dd/sourcecode/as):04628         * ATD: OK, MOST clears are on 8x8 pixel boundaries, but for proportional, etc.
                      (/dd/sourcecode/as):04629         * fonts and clear to EOL, we may be in the middle of a byte.  In that case,
                      (/dd/sourcecode/as):04630         * do a BAR.  It's slower, but a lot smaller code.
                      (/dd/sourcecode/as):04631         * Entry: A=Screen type
                      (/dd/sourcecode/as):04632         *        B= starting pixel mask for this byte: important for pixel boundaries!
                      (/dd/sourcecode/as):04633         *        X=absolute address of the start of the screen
15DA CE4D9A           (/dd/sourcecode/as):04634         L13E3    ldu   #GrfStrt+L0D70-1  mask for pixels
15DD A6C6             (/dd/sourcecode/as):04635                  lda   a,u          grab mask (7,3,1)
15DF 5D               (/dd/sourcecode/as):04636                  tstb               is the high bit of the pixel mask set?
15E0 2B29             (/dd/sourcecode/as):04637                  bmi   L13F0        yes, we're starting on a byte boundary
15E2 3412             (/dd/sourcecode/as):04638                  pshs  a,x          save X-coord mask, and screen ptr for later
15E4 1F98             (/dd/sourcecode/as):04639                  tfr   b,a          get another copy of the pixel mask
15E6 54               (/dd/sourcecode/as):04640         L13E5    lsrb               move the mask one bit to the right
                      (/dd/sourcecode/as):04641                IFNE  H6309
                      (/dd/sourcecode/as):04642                  orr   b,a          make A the right-most mask
                      (/dd/sourcecode/as):04643                ELSE
                      (/dd/sourcecode/as):04644         * 6809 - Use stb <grScrtch / ora <grSctrch
15E7 3404             (/dd/sourcecode/as):04645                  pshs  b
15E9 AAE0             (/dd/sourcecode/as):04646                  ora   ,s+
                      (/dd/sourcecode/as):04647                ENDC
15EB 24F9             (/dd/sourcecode/as):04648                  bcc   L13E5        the low bits of A will be the pixel mask
15ED 1F89             (/dd/sourcecode/as):04649                  tfr   a,b          copy A to B again
15EF 43               (/dd/sourcecode/as):04650                  coma
15F0 D462             (/dd/sourcecode/as):04651                  andb  <$62         AND with full-byte background color mask
15F2 DD97             (/dd/sourcecode/as):04652                  std   <$97         save screen mask, background color
                      (/dd/sourcecode/as):04653                IFNE  H6309
                      (/dd/sourcecode/as):04654                  lde   <$52         get the lines to clear
                      (/dd/sourcecode/as):04655                ELSE
15F4 D652             (/dd/sourcecode/as):04656                  ldb   <$52
15F6 D7B5             (/dd/sourcecode/as):04657                  stb   <$B5
                      (/dd/sourcecode/as):04658                ENDC
15F8 D663             (/dd/sourcecode/as):04659                  ldb   <$63         get the size of the screen
15FA A684             (/dd/sourcecode/as):04660         L13E8    lda   ,x           grab a byte off of the screen
15FC 9497             (/dd/sourcecode/as):04661                  anda  <$97         AND in only the screen pixels we want
15FE 9A98             (/dd/sourcecode/as):04662                  ora   <$98         OR in the background color
1600 A784             (/dd/sourcecode/as):04663                  sta   ,x           save the updated byte
1602 3A               (/dd/sourcecode/as):04664                  abx                go to the next screen line
                      (/dd/sourcecode/as):04665                IFNE  H6309
                      (/dd/sourcecode/as):04666                  dece               count down
                      (/dd/sourcecode/as):04667                ELSE
1603 0AB5             (/dd/sourcecode/as):04668                  dec   <$B5
                      (/dd/sourcecode/as):04669                ENDC
1605 26F3             (/dd/sourcecode/as):04670                  bne   L13E8        continue until done
1607 3512             (/dd/sourcecode/as):04671                  puls  a,x          restore X coord mask and screen ptr
1609 3001             (/dd/sourcecode/as):04672                  leax  1,x          we've done these bytes already
160B 4C               (/dd/sourcecode/as):04673         L13F0    inca               now B=number of pixels per byte (8,4,2);A not B; RG
160C D662             (/dd/sourcecode/as):04674                  ldb   <$62         Get backgrnd full-byte pixel mask
160E 3406             (/dd/sourcecode/as):04675                  pshs  d            save pixels/byte, color mask
1610 DC4F             (/dd/sourcecode/as):04676                  ldd   <$004F       Get X size (in pixels)
                      (/dd/sourcecode/as):04677                IFNE  H6309
                      (/dd/sourcecode/as):04678                  divd  ,s+          divide by pixels/byte: B=bytes wide the window is
                      (/dd/sourcecode/as):04679         * PANIC if A<>0!!!          leave mask on stack for later use
                      (/dd/sourcecode/as):04680                ELSE
                      (/dd/sourcecode/as):04681         * 6809 - Should be able to use <grScrtch & <grScrtch+1 for the answer and divisor
1612 6FE2             (/dd/sourcecode/as):04682                  clr   ,-s
1614 6CE4             (/dd/sourcecode/as):04683         L13F0b   inc   ,s
1616 E061             (/dd/sourcecode/as):04684                  subb  1,s
1618 8200             (/dd/sourcecode/as):04685                  sbca  #0
161A 24F8             (/dd/sourcecode/as):04686                  bcc   L13F0b
161C 3504             (/dd/sourcecode/as):04687                  puls  b            NOTE: We don't care about remainder
161E 5A               (/dd/sourcecode/as):04688                  decb
161F 3261             (/dd/sourcecode/as):04689                  leas  1,s
                      (/dd/sourcecode/as):04690                ENDC
1621 D163             (/dd/sourcecode/as):04691                  cmpb  <$0063       Get # bytes/row on screen
1623 2721             (/dd/sourcecode/as):04692                  beq   ClsFGfx      full width of screen: do complete TFM
1625 D797             (/dd/sourcecode/as):04693                  stb   <$97         save width of window for later
1627 D063             (/dd/sourcecode/as):04694                  subb  <$0063       subtract width of window from width of screen
1629 50               (/dd/sourcecode/as):04695                  negb               now B=offset from X-end,Y to X-start,Y+1
162A 9652             (/dd/sourcecode/as):04696                  lda   <$52         Get # lines to clear
                      (/dd/sourcecode/as):04697                IFNE  H6309
                      (/dd/sourcecode/as):04698                  clre               W for TFM size
162C                  (/dd/sourcecode/as):04699         L1450    ldf   <$97         Get width of window in bytes
                      (/dd/sourcecode/as):04700                  tfm   s,x+         Clear out line
                      (/dd/sourcecode/as):04701                ELSE
                      (/dd/sourcecode/as):04702         * 6809 - Since byte width of window always <=160, We can use B for the counter, using
                      (/dd/sourcecode/as):04703         * DECB instead of leay -1,y, eliminating the tfr d,y, etc.
162C 3426             (/dd/sourcecode/as):04704         L1450    pshs  d,y          Save regs (A=# lines left to clear),B=# bytes to start of next line)
162E 4F               (/dd/sourcecode/as):04705                  clra
162F D697             (/dd/sourcecode/as):04706                  ldb   <$97         Get # of bytes wide we are clearing
1631 1F02             (/dd/sourcecode/as):04707                  tfr   d,y          Move to Y for counter
1633 A664             (/dd/sourcecode/as):04708                  lda   4,s          Get full byte color mask
1635 A780             (/dd/sourcecode/as):04709         L1450b   sta   ,x+          Save on screen
1637 313F             (/dd/sourcecode/as):04710                  leay  -1,y         Done current line?
1639 26FA             (/dd/sourcecode/as):04711                  bne   L1450b       No, keep doing until done
163B 109FB5           (/dd/sourcecode/as):04712                  sty   <$B5         Save 0
163E 3526             (/dd/sourcecode/as):04713                  puls  d,y          Restore regs
                      (/dd/sourcecode/as):04714                ENDC
1640 4A               (/dd/sourcecode/as):04715                  deca                    Dec line counter
1641 271D             (/dd/sourcecode/as):04716                  beq   L146F             done, exit
1643 3A               (/dd/sourcecode/as):04717                  abx                     Bump to start of next line
1644 20E6             (/dd/sourcecode/as):04718                  bra   L1450             Keep clearing until done
                      (/dd/sourcecode/as):04719         
                      (/dd/sourcecode/as):04720         * Clearing Gfx screen/even byte start/full width window
                      (/dd/sourcecode/as):04721         * Entry: B=width of screen/window in bytes
                      (/dd/sourcecode/as):04722         * 6809 - eventually use mini stack blast clear vector
1646 9652             (/dd/sourcecode/as):04723         ClsFGfx  lda   <$52              Get # lines to clear
1648 3D               (/dd/sourcecode/as):04724                  mul                     Calculate # bytes for remainder of screen
                      (/dd/sourcecode/as):04725                IFNE  H6309
                      (/dd/sourcecode/as):04726                  tfr   d,w               Move to TFM size register
                      (/dd/sourcecode/as):04727                  tfm   s,x+              Clear out remainder of screen
                      (/dd/sourcecode/as):04728                ELSE
                      (/dd/sourcecode/as):04729         * 6809 - mul sets 0 flag on it's own, so cmpd #0 is redundant. Remove line
1649 10830000         (/dd/sourcecode/as):04730                  cmpd  #0
164D 2711             (/dd/sourcecode/as):04731                  beq   L146F
164F 3426             (/dd/sourcecode/as):04732                  pshs  d,y
1651 1F02             (/dd/sourcecode/as):04733                  tfr   d,y         tfr d,w
1653 A664             (/dd/sourcecode/as):04734                  lda   4,s         get ,s
1655 A780             (/dd/sourcecode/as):04735         L146Fb   sta   ,x+
1657 313F             (/dd/sourcecode/as):04736                  leay  -1,y
1659 26FA             (/dd/sourcecode/as):04737                  bne   L146Fb
165B 109FB5           (/dd/sourcecode/as):04738                  sty   <$B5
165E 3526             (/dd/sourcecode/as):04739                  puls  d,y
                      (/dd/sourcecode/as):04740                ENDC
1660 3582             (/dd/sourcecode/as):04741         L146F    puls  pc,a              Eat a & return
                      (/dd/sourcecode/as):04742         
                      (/dd/sourcecode/as):04743         * $1f code processor
                      (/dd/sourcecode/as):04744         *L1478    lbsr  L0177          Map in window/setup GRFDRV mem/update cursors
1662 17FB24           (/dd/sourcecode/as):04745         L1478    lbsr  L0FFF          Set up font info
1665 8D03             (/dd/sourcecode/as):04746                  bsr   L1483          Perform $1F function
1667 7E50F6           (/dd/sourcecode/as):04747                  jmp   >GrfStrt+L0F78 Return to Grf/Wind Int: no errors
                      (/dd/sourcecode/as):04748         
166A 8020             (/dd/sourcecode/as):04749         L1483    suba  #$20           Inverse on? (A=$20)
166C 271B             (/dd/sourcecode/as):04750                  beq   L14A8        yes, go do it
166E 4A               (/dd/sourcecode/as):04751                  deca               A=$21 Inverse off?
166F 2732             (/dd/sourcecode/as):04752                  beq   L14C4
1671 4A               (/dd/sourcecode/as):04753                  deca               A=$22 Underline on?
1672 273B             (/dd/sourcecode/as):04754                  beq   L14D0
1674 4A               (/dd/sourcecode/as):04755                  deca               A=$23 Underline off?
1675 2749             (/dd/sourcecode/as):04756                  beq   L14D9
1677 4A               (/dd/sourcecode/as):04757                  deca               A=$24 Blink on?
1678 2757             (/dd/sourcecode/as):04758                  beq   L14E2
167A 4A               (/dd/sourcecode/as):04759                  deca               A=$25 blink off?
167B 275F             (/dd/sourcecode/as):04760                  beq   L14E9
167D 800B             (/dd/sourcecode/as):04761                  suba  #$30-$25     A=$30 Insert line?
167F 1027FE4A         (/dd/sourcecode/as):04762                  lbeq  L1291
1683 4A               (/dd/sourcecode/as):04763                  deca               A=$31 Delete line?
1684 1027FE77         (/dd/sourcecode/as):04764                  lbeq  L12C5
1688 39               (/dd/sourcecode/as):04765                  rts   
                      (/dd/sourcecode/as):04766         
                      (/dd/sourcecode/as):04767         * Inverse ON
1689 E629             (/dd/sourcecode/as):04768         L14A8    ldb   Wt.BSW,y       Get window bit flags
168B C504             (/dd/sourcecode/as):04769                  bitb  #Invers        Inverse on?
168D 2613             (/dd/sourcecode/as):04770                  bne   L14C3          Already on, leave it alone
168F CA04             (/dd/sourcecode/as):04771                  orb   #Invers        Set inverse on flag
1691 E729             (/dd/sourcecode/as):04772                  stb   Wt.BSW,y       Save new bit flags
1693 A628             (/dd/sourcecode/as):04773         L14B2    lda   Wt.Attr,y      Get default attributes
1695 170107           (/dd/sourcecode/as):04774                  lbsr  L15B2          Go swap Fore/Background colors into A
1698 E628             (/dd/sourcecode/as):04775                  ldb   Wt.Attr,y      Get default attributes again
169A C4C0             (/dd/sourcecode/as):04776                  andb  #$c0           Mask out all but Blink & underline
                      (/dd/sourcecode/as):04777                IFNE  H6309
                      (/dd/sourcecode/as):04778                  orr   a,b            Mask in swapped colors
                      (/dd/sourcecode/as):04779                ELSE
                      (/dd/sourcecode/as):04780         * 6809 - Use sta <grScrtch / orb <grSctrch
169C 3402             (/dd/sourcecode/as):04781                  pshs  a
169E EAE0             (/dd/sourcecode/as):04782                  orb   ,s+
                      (/dd/sourcecode/as):04783                ENDC
16A0 E728             (/dd/sourcecode/as):04784                  stb   Wt.Attr,y      Save new default attribute byte & return
16A2 39               (/dd/sourcecode/as):04785         L14C3    rts   
                      (/dd/sourcecode/as):04786         
                      (/dd/sourcecode/as):04787         * Inverse OFF
16A3 E629             (/dd/sourcecode/as):04788         L14C4    ldb   Wt.BSW,y       Get window bit flags
16A5 C504             (/dd/sourcecode/as):04789                  bitb  #Invers        Inverse off?
16A7 27F9             (/dd/sourcecode/as):04790                  beq   L14C3          Already off, leave
16A9 C4FB             (/dd/sourcecode/as):04791                  andb  #^Invers       Shut inverse bit flag off
16AB E729             (/dd/sourcecode/as):04792                  stb   Wt.BSW,y       Save updated bit flags
16AD 20E4             (/dd/sourcecode/as):04793                  bra   L14B2          Go swap colors in attribute byte
                      (/dd/sourcecode/as):04794         
     16AF             (/dd/sourcecode/as):04795         L14D0    equ   *
                      (/dd/sourcecode/as):04796                IFNE  H6309
                      (/dd/sourcecode/as):04797                  oim   #Under,Wt.Attr,y
                      (/dd/sourcecode/as):04798                  oim   #Under,Wt.BSW,y
                      (/dd/sourcecode/as):04799                ELSE
                      (/dd/sourcecode/as):04800         * 6809 - Use sta <grScrtch / lda <grSctrch
16AF 3402             (/dd/sourcecode/as):04801                  pshs  a
16B1 A628             (/dd/sourcecode/as):04802                  lda   Wt.Attr,y 
16B3 8A40             (/dd/sourcecode/as):04803                  ora   #Under
16B5 A728             (/dd/sourcecode/as):04804                  sta   Wt.Attr,y
16B7 A629             (/dd/sourcecode/as):04805                  lda   Wt.BSW,y 
16B9 8A40             (/dd/sourcecode/as):04806                  ora   #Under
16BB A729             (/dd/sourcecode/as):04807                  sta   Wt.BSW,y
16BD 3502             (/dd/sourcecode/as):04808                  puls  a
                      (/dd/sourcecode/as):04809                ENDC
16BF 39               (/dd/sourcecode/as):04810                  rts
                      (/dd/sourcecode/as):04811         
     16C0             (/dd/sourcecode/as):04812         L14D9    equ   *
                      (/dd/sourcecode/as):04813                IFNE  H6309
                      (/dd/sourcecode/as):04814                  aim   #^Under,Wt.Attr,y
                      (/dd/sourcecode/as):04815                  aim   #^Under,Wt.BSW,y
                      (/dd/sourcecode/as):04816                ELSE
                      (/dd/sourcecode/as):04817         * 6809 - Use sta <grScrtch / lda <grSctrch
16C0 3402             (/dd/sourcecode/as):04818                  pshs  a
16C2 A628             (/dd/sourcecode/as):04819                  lda   Wt.Attr,y 
16C4 84BF             (/dd/sourcecode/as):04820                  anda  #^Under
16C6 A728             (/dd/sourcecode/as):04821                  sta   Wt.Attr,y
16C8 A629             (/dd/sourcecode/as):04822                  lda   Wt.BSW,y 
16CA 84BF             (/dd/sourcecode/as):04823                  anda  #^Under
16CC A729             (/dd/sourcecode/as):04824                  sta   Wt.BSW,y
16CE 3502             (/dd/sourcecode/as):04825                  puls  a
                      (/dd/sourcecode/as):04826                ENDC
16D0 39               (/dd/sourcecode/as):04827                  rts
                      (/dd/sourcecode/as):04828         
                      (/dd/sourcecode/as):04829         * Blink on
     16D1             (/dd/sourcecode/as):04830         L14E2    equ   *
                      (/dd/sourcecode/as):04831                IFNE  H6309
                      (/dd/sourcecode/as):04832                  oim   #TChr,Wt.Attr,y
                      (/dd/sourcecode/as):04833                ELSE
                      (/dd/sourcecode/as):04834         * 6809 - Use sta <grScrtch / lda <grSctrch
16D1 3402             (/dd/sourcecode/as):04835                  pshs  a
16D3 A628             (/dd/sourcecode/as):04836                  lda   Wt.Attr,y 
16D5 8A80             (/dd/sourcecode/as):04837                  ora   #TChr
16D7 A728             (/dd/sourcecode/as):04838                  sta   Wt.Attr,y
16D9 3502             (/dd/sourcecode/as):04839                  puls  a
                      (/dd/sourcecode/as):04840                ENDC
16DB 39               (/dd/sourcecode/as):04841                  rts   
                      (/dd/sourcecode/as):04842         
                      (/dd/sourcecode/as):04843         * Blink off
     16DC             (/dd/sourcecode/as):04844         L14E9    equ   *
                      (/dd/sourcecode/as):04845                IFNE  H6309
                      (/dd/sourcecode/as):04846                  aim   #^TChr,Wt.Attr,y
                      (/dd/sourcecode/as):04847                ELSE
                      (/dd/sourcecode/as):04848         * 6809 - Use sta <grScrtch / lda <grSctrch
16DC 3402             (/dd/sourcecode/as):04849                  pshs  a
16DE A628             (/dd/sourcecode/as):04850                  lda   Wt.Attr,y 
16E0 847F             (/dd/sourcecode/as):04851                  anda  #^TChr
16E2 A728             (/dd/sourcecode/as):04852                  sta   Wt.Attr,y
16E4 3502             (/dd/sourcecode/as):04853                  puls  a
                      (/dd/sourcecode/as):04854                ENDC
16E6 39               (/dd/sourcecode/as):04855                  rts   
                      (/dd/sourcecode/as):04856         
                      (/dd/sourcecode/as):04857         * Cursor On/Off entry point
16E7 17FA9F           (/dd/sourcecode/as):04858         L116E    lbsr  L0FFF          Set up font sizes (and font if on gfx screen)
16EA 8D02             (/dd/sourcecode/as):04859                  bsr   L1179          Do appropriate action
16EC 2010             (/dd/sourcecode/as):04860                  bra   L1508
                      (/dd/sourcecode/as):04861         
16EE 8020             (/dd/sourcecode/as):04862         L1179    suba  #$20           A=$20  Cursor Off?
16F0 276B             (/dd/sourcecode/as):04863                  beq   L14F8          Yes, go do it
16F2 4A               (/dd/sourcecode/as):04864                  deca                 A=$21  Cursor on?
16F3 275E             (/dd/sourcecode/as):04865                  beq   L14F0          Yes, go do it
16F5 39               (/dd/sourcecode/as):04866                  rts                  Neither, return
                      (/dd/sourcecode/as):04867         
                      (/dd/sourcecode/as):04868         * Update Window entrypoint - Put txt & Gfx cursors back on scrn
16F6 17E9A8           (/dd/sourcecode/as):04869         L1500    lbsr  L0129          Map the window in & setup Grfdrv mem
16F9 8D5E             (/dd/sourcecode/as):04870                  bsr   L1563          Put text cursor back on window
16FB 1700B1           (/dd/sourcecode/as):04871         L1505    lbsr  L15BF          Put gfx cursor back on window
16FE 7E50F6           (/dd/sourcecode/as):04872         L1508    jmp   >GrfStrt+L0F78 no error & exit
                      (/dd/sourcecode/as):04873         
                      (/dd/sourcecode/as):04874         * This takes the gfx/txt cursors off the screen before returning to original
                      (/dd/sourcecode/as):04875         * Grfdrv call
1701 3436             (/dd/sourcecode/as):04876         L150C    pshs  y,x,d          Preserve regs
1703 8D5E             (/dd/sourcecode/as):04877                  bsr   L157A          Take text cursor off (restore original char)
1705 1700C9           (/dd/sourcecode/as):04878                  lbsr  L15E2          Take Gfx cursor off (restore original screen)
1708 F61000           (/dd/sourcecode/as):04879                  ldb   >WGlobal+G.CurTik  Get restart counter for # clock interrupts per
170B F71001           (/dd/sourcecode/as):04880                  stb   >WGlobal+G.CntTik  cursor update & make it current counter
170E 35B6             (/dd/sourcecode/as):04881                  puls  pc,y,x,d       Restore regs & return
                      (/dd/sourcecode/as):04882         
                      (/dd/sourcecode/as):04883         * PutGC entry point (Took out mapping in window since the CMPY only lets us
                      (/dd/sourcecode/as):04884         * do anything if it IS mapped in currently
1710 17E98E           (/dd/sourcecode/as):04885         L151B    lbsr  L0129          Map in window & setup Grfdrv vars
1713 109C2E           (/dd/sourcecode/as):04886                  cmpy  <$002E         Are we the current active window (window tbl)?
1716 26E6             (/dd/sourcecode/as):04887                  bne   L1508          No, don't bother with PutGC
1718 DC5B             (/dd/sourcecode/as):04888                  ldd   <$005B         Get Graphics cursor X coord
171A 10933D           (/dd/sourcecode/as):04889                  cmpd  <$003D         Same as last used graphics cursor coord?
171D 2607             (/dd/sourcecode/as):04890                  bne   L1531          No, go draw new graphics cursor
171F DC5D             (/dd/sourcecode/as):04891                  ldd   <$005D         Get Graphics cursor Y coord
1721 10933F           (/dd/sourcecode/as):04892                  cmpd  <$003F         Same as last used graphics cursor coord?
1724 27D8             (/dd/sourcecode/as):04893                  beq   L1508          Yes, don't bother updating
1726 1700A8           (/dd/sourcecode/as):04894         L1531    lbsr  L15E2          Put original data under cursor back to normal
1729 8D02             (/dd/sourcecode/as):04895                  bsr   L153B          Update 'last gfx cursor' on position to new one
172B 20CE             (/dd/sourcecode/as):04896                  bra   L1505          put gfx cursor back on screen, and exit: +3C:-3B
                      (/dd/sourcecode/as):04897         
172D DC47             (/dd/sourcecode/as):04898         L153B    ldd   <$0047         Get current 'working' X & Y coords
172F 9E49             (/dd/sourcecode/as):04899                  ldx   <$0049
1731 3416             (/dd/sourcecode/as):04900                  pshs  d,x            Save them on stack
                      (/dd/sourcecode/as):04901                IFNE  H6309
                      (/dd/sourcecode/as):04902                  ldq   <$005b         Get new graphics cursor X & Y coords
                      (/dd/sourcecode/as):04903                  stq   <$0047         Save as working copies for Put routines
                      (/dd/sourcecode/as):04904                  stq   <$003d         Also, make them the new 'last position' coords
                      (/dd/sourcecode/as):04905                ELSE
1733 DC5D             (/dd/sourcecode/as):04906                  ldd   <$5d
1735 DDB5             (/dd/sourcecode/as):04907                  std   <$B5
1737 DD49             (/dd/sourcecode/as):04908                  std   <$49
1739 DD3F             (/dd/sourcecode/as):04909                  std   <$3f
173B DC5B             (/dd/sourcecode/as):04910                  ldd   <$5b
173D DD47             (/dd/sourcecode/as):04911                  std   <$47
173F DD3D             (/dd/sourcecode/as):04912                  std   <$3d
                      (/dd/sourcecode/as):04913                ENDC
1741 AE30             (/dd/sourcecode/as):04914                  ldx   Wt.STbl,y      Get screen table ptr
1743 AE02             (/dd/sourcecode/as):04915                  ldx   St.LStrt,x     Get screen start address
1745 17FC61           (/dd/sourcecode/as):04916                  lbsr  L1E9F          Screen address to put=X, start pixel mask=B
1748 9F41             (/dd/sourcecode/as):04917                  stx   <$0041         Save screen ptr
174A D743             (/dd/sourcecode/as):04918                  stb   <$0043         Save start pixel mask
174C 3516             (/dd/sourcecode/as):04919                  puls  d,x            Get back original 'working' coords
174E DD47             (/dd/sourcecode/as):04920                  std   <$0047
1750 9F49             (/dd/sourcecode/as):04921                  stx   <$0049         Put them back for original GrfDrv function
1752 39               (/dd/sourcecode/as):04922         L1579    rts
                      (/dd/sourcecode/as):04923         
                      (/dd/sourcecode/as):04924         * Cursor on
     1753             (/dd/sourcecode/as):04925         L14F0    equ   *
                      (/dd/sourcecode/as):04926                IFNE  H6309
                      (/dd/sourcecode/as):04927                  aim   #^NoCurs,Wt.BSW,y         Set cursor flag to on
                      (/dd/sourcecode/as):04928                ELSE
1753 A629             (/dd/sourcecode/as):04929                  lda   Wt.BSW,y 
1755 84FD             (/dd/sourcecode/as):04930                  anda  #^NoCurs
1757 A729             (/dd/sourcecode/as):04931                  sta   Wt.BSW,y
                      (/dd/sourcecode/as):04932                ENDC
                      (/dd/sourcecode/as):04933         * Update txt cursor (on gfx or txt screens) from UPDATE Window 'hidden' call
1759 8601             (/dd/sourcecode/as):04934         L1563    lda   #$01         put the cursor on the screen
175B 2007             (/dd/sourcecode/as):04935                  bra   L157B
                      (/dd/sourcecode/as):04936         
                      (/dd/sourcecode/as):04937         * Cursor off
     175D             (/dd/sourcecode/as):04938         L14F8    equ   *
                      (/dd/sourcecode/as):04939                IFNE  H6309
                      (/dd/sourcecode/as):04940                  oim   #NoCurs,Wt.BSW,y         Set cursor flag to off
                      (/dd/sourcecode/as):04941                ELSE
175D A629             (/dd/sourcecode/as):04942                  lda   Wt.BSW,y 
175F 8A02             (/dd/sourcecode/as):04943                  ora   #NoCurs
1761 A729             (/dd/sourcecode/as):04944                  sta   Wt.BSW,y
                      (/dd/sourcecode/as):04945                ENDC
                      (/dd/sourcecode/as):04946         * Update text cursor (on gfx or text screens) from within Grfdrv
1763 4F               (/dd/sourcecode/as):04947         L157A    clra               take the cursor off of the screen
1764 109C2E           (/dd/sourcecode/as):04948         L157B    cmpy  <$002E         We on current window?
1767 26E9             (/dd/sourcecode/as):04949                  bne   L1579          No, exit
                      (/dd/sourcecode/as):04950                IFNE  H6309
                      (/dd/sourcecode/as):04951                  tim   #NoCurs,Wt.BSW,y Cursor enabled?
                      (/dd/sourcecode/as):04952                ELSE
1769 3402             (/dd/sourcecode/as):04953                  pshs  a
176B A629             (/dd/sourcecode/as):04954                  lda   Wt.BSW,y 
176D 8502             (/dd/sourcecode/as):04955                  bita  #NoCurs
176F 3502             (/dd/sourcecode/as):04956                  puls  a
                      (/dd/sourcecode/as):04957                ENDC
1771 26DF             (/dd/sourcecode/as):04958                  bne   L1579          No, exit
1773 9139             (/dd/sourcecode/as):04959                  cmpa  <$0039       get cursor on screen flag
1775 27DB             (/dd/sourcecode/as):04960                  beq   L1579        same state as last time, exit
1777 9739             (/dd/sourcecode/as):04961                  sta   <$0039       cursor is ON the screen
1779 17FA10           (/dd/sourcecode/as):04962                  lbsr  L1002        Set up fonts, character sizes
177C 2000             (/dd/sourcecode/as):04963                  bra   L158B        go put the cursor on-screen
                      (/dd/sourcecode/as):04964         
                      (/dd/sourcecode/as):04965         * Handle char. under cursor on Hware Text screen
                      (/dd/sourcecode/as):04966         * Entry: Y=window table ptr
                      (/dd/sourcecode/as):04967         * Exit: Attribute byte on screen has fore/bckground colors reversed
177E AE3B             (/dd/sourcecode/as):04968         L158B    ldx   Wt.Cur,y     get cursor physical address
1780 D660             (/dd/sourcecode/as):04969                  ldb   <$0060       get screen type
1782 2A0F             (/dd/sourcecode/as):04970                  bpl   L15A5        Skip ahead if gfx screen
1784 A601             (/dd/sourcecode/as):04971                  lda   1,x          Get attribute byte of char. under cursor
1786 8D17             (/dd/sourcecode/as):04972                  bsr   L15B2        Get inversed fore/bck ground colors mask into A
1788 E601             (/dd/sourcecode/as):04973                  ldb   1,x          Get original attribute byte back
178A C4C0             (/dd/sourcecode/as):04974                  andb  #%11000000   Mask out all but blink & underline
                      (/dd/sourcecode/as):04975                IFNE  H6309
                      (/dd/sourcecode/as):04976                  orr   a,b          Merge in swapped colors mask
                      (/dd/sourcecode/as):04977                ELSE
                      (/dd/sourcecode/as):04978         * 6809 - Use sta <grScrtch / orb <grSctrch
178C 3402             (/dd/sourcecode/as):04979                  pshs  a
178E EAE0             (/dd/sourcecode/as):04980                  orb   ,s+
                      (/dd/sourcecode/as):04981                ENDC
1790 E701             (/dd/sourcecode/as):04982                  stb   1,x          Set new attributes for this char
1792 39               (/dd/sourcecode/as):04983                  rts
                      (/dd/sourcecode/as):04984         
                      (/dd/sourcecode/as):04985         * Set attributes on Gfx screen
1793 3420             (/dd/sourcecode/as):04986         L15A5    pshs  y            Save window table ptr
1795 CE52F5           (/dd/sourcecode/as):04987                  ldu   #GrfStrt+L10FA  Setup vector for cursor on Gfx screen
1798 0F0E             (/dd/sourcecode/as):04988                  clr   <$000E       Shut off all attributes
179A 17FAE1           (/dd/sourcecode/as):04989                  lbsr  L106D        Go put inversed char (under cursor) on screen
179D 35A0             (/dd/sourcecode/as):04990                  puls  pc,y         Restore window tbl ptr & return
                      (/dd/sourcecode/as):04991         
                      (/dd/sourcecode/as):04992         * Flip fore/background color masks for hardware text attribute byte
                      (/dd/sourcecode/as):04993         * Entry:A=attribute byte for h/ware text screen
                      (/dd/sourcecode/as):04994         * Exit: A=Reversed color masks
179F 5F               (/dd/sourcecode/as):04995         L15B2    clrb                no attributes here yet
17A0 843F             (/dd/sourcecode/as):04996                  anda  #%00111111     Mask out blinking, underline bits
                      (/dd/sourcecode/as):04997                IFNE  H6309
                      (/dd/sourcecode/as):04998                  lsrd               one byte smaller than old method
                      (/dd/sourcecode/as):04999                  lsrd               move foreground in A to background in A,
                      (/dd/sourcecode/as):05000                  lsrd               background in A to 3 high bits of B
                      (/dd/sourcecode/as):05001                ELSE
17A2 44               (/dd/sourcecode/as):05002                  lsra
17A3 56               (/dd/sourcecode/as):05003                  rorb
17A4 44               (/dd/sourcecode/as):05004                  lsra
17A5 56               (/dd/sourcecode/as):05005                  rorb
17A6 44               (/dd/sourcecode/as):05006                  lsra
17A7 56               (/dd/sourcecode/as):05007                  rorb
                      (/dd/sourcecode/as):05008                ENDC
17A8 54               (/dd/sourcecode/as):05009                  lsrb               shift background in B 2 bits: blink & underline
17A9 54               (/dd/sourcecode/as):05010                  lsrb               now background in A is in foreground in B
                      (/dd/sourcecode/as):05011                IFNE  H6309
                      (/dd/sourcecode/as):05012                  orr   b,a          Merge two masks together in A
                      (/dd/sourcecode/as):05013                ELSE
                      (/dd/sourcecode/as):05014         * 6809 - Use stb <grScrtch / ora <grSctrch
17AA 3404             (/dd/sourcecode/as):05015                  pshs  b
17AC AAE0             (/dd/sourcecode/as):05016                  ora   ,s+
                      (/dd/sourcecode/as):05017                ENDC
17AE 39               (/dd/sourcecode/as):05018                  rts   
                      (/dd/sourcecode/as):05019         
                      (/dd/sourcecode/as):05020         * Update Gfx Cursor - UPDATE Window 'hidden' call version - Put it on scrn
17AF 3430             (/dd/sourcecode/as):05021         L15BF    pshs  y,x            Preserve window & screen tbl ptrs
17B1 AE30             (/dd/sourcecode/as):05022                  ldx   Wt.STbl,y      Get scrn tbl ptr from window tbl
17B3 9C30             (/dd/sourcecode/as):05023                  cmpx  <$0030         Same as current screen?
17B5 2618             (/dd/sourcecode/as):05024                  bne   L15E0          No, leave
17B7 D63A             (/dd/sourcecode/as):05025                  ldb   <$003A         Get Gfx cursor XOR'd on/off flag
17B9 2614             (/dd/sourcecode/as):05026                  bne   L15E0          It's already on screen, exit
17BB E6A818           (/dd/sourcecode/as):05027                  ldb   Wt.GBlk,y      Get memory block # of gfx cursor
17BE D744             (/dd/sourcecode/as):05028                  stb   <$0044         Save in Grfdrv mem
17C0 270D             (/dd/sourcecode/as):05029                  beq   L15E0          If there is no Gfx cursor defined, exit
17C2 8D5D             (/dd/sourcecode/as):05030                  bsr   L017C          Map in Gfx cursor GP buffer block
17C4 10AEA819         (/dd/sourcecode/as):05031                  ldy   Wt.GOff,y      Get ptr to actual shape in block
17C8 109F45           (/dd/sourcecode/as):05032                  sty   <$0045         Save it in Grfdrv mem
17CB 8D1F             (/dd/sourcecode/as):05033                  bsr   L15FE          XOR mouse cursor onto screen (put it on)
17CD 0C3A             (/dd/sourcecode/as):05034                  inc   <$003A         Set Gfx cursor XOR flag to 'ON'
17CF 35B0             (/dd/sourcecode/as):05035         L15E0    puls  pc,y,x         Restore regs & return
                      (/dd/sourcecode/as):05036         
                      (/dd/sourcecode/as):05037         * Update Gfx cursor - from within GRFDRV - Take old one off scrn
17D1 3430             (/dd/sourcecode/as):05038         L15E2    pshs  y,x
17D3 AE30             (/dd/sourcecode/as):05039                  ldx   Wt.STbl,y
17D5 9C30             (/dd/sourcecode/as):05040                  cmpx  <$0030
17D7 2611             (/dd/sourcecode/as):05041                  bne   L15FC
17D9 D63A             (/dd/sourcecode/as):05042                  ldb   <$003A       is the Gfx cursor on the screen?
17DB 270D             (/dd/sourcecode/as):05043                  beq   L15FC        no, exit.
17DD D644             (/dd/sourcecode/as):05044                  ldb   <$0044       grab gfx cursor GP buffer number
17DF 27EE             (/dd/sourcecode/as):05045                  beq   L15E0        if none, exit
17E1 8D3E             (/dd/sourcecode/as):05046                  bsr   L017C        map in get/put buffer
17E3 109E45           (/dd/sourcecode/as):05047                  ldy   <$0045       grab pointer to cursor in block
17E6 8D04             (/dd/sourcecode/as):05048                  bsr   L15FE        XOR mouse cursor onto screen (take off old one)
17E8 0F3A             (/dd/sourcecode/as):05049                  clr   <$003A       Set Gfx cursor XOR flag to 'OFF'
17EA 35B0             (/dd/sourcecode/as):05050         L15FC    puls  pc,y,x
                      (/dd/sourcecode/as):05051         
                      (/dd/sourcecode/as):05052         * XOR mouse cursor onto screen
17EC D660             (/dd/sourcecode/as):05053         L15FE    ldb   <$0060         Get screen type
17EE 2B30             (/dd/sourcecode/as):05054                  bmi   L1634          Text; exit
17F0 DC4F             (/dd/sourcecode/as):05055                  ldd   <$004F         Get original X & Y sizes
17F2 9E51             (/dd/sourcecode/as):05056                  ldx   <$0051
17F4 3416             (/dd/sourcecode/as):05057                  pshs  x,d            Save them
17F6 DC64             (/dd/sourcecode/as):05058                  ldd   <$0064         Get original Pset & Lset vectors
17F8 9E68             (/dd/sourcecode/as):05059                  ldx   <$0068
17FA 3416             (/dd/sourcecode/as):05060                  pshs  x,d            Save them
17FC DC41             (/dd/sourcecode/as):05061                  ldd   <$0041         Get screen address of Gfx cursor
17FE DD72             (/dd/sourcecode/as):05062                  std   <$0072         Save as GP buffer start position
1800 D643             (/dd/sourcecode/as):05063                  ldb   <$0043         Get pixel mask for start of Gfx cursor
1802 D774             (/dd/sourcecode/as):05064                  stb   <$0074         Save as GP buffer pixel mask start
1804 8E6299           (/dd/sourcecode/as):05065                  ldx   #GrfStrt+L1F9E Force PSET to 'off'
1807 9F64             (/dd/sourcecode/as):05066                  stx   <$0064
1809 8E584B           (/dd/sourcecode/as):05067                  ldx   #GrfStrt+L1FA3 For LSET to XOR
180C 9F68             (/dd/sourcecode/as):05068                  stx   <$0068
180E 17F676           (/dd/sourcecode/as):05069                  lbsr  L0E14          set up for different STY in buffer/screen
1811 17F700           (/dd/sourcecode/as):05070                  lbsr  L0E97          go put the cursor on-screen
1814 3516             (/dd/sourcecode/as):05071                  puls  x,d            Restore original vectors
1816 DD64             (/dd/sourcecode/as):05072                  std   <$0064
1818 9F68             (/dd/sourcecode/as):05073                  stx   <$0068
181A 3516             (/dd/sourcecode/as):05074                  puls  x,d            Restore original X/Y sizes
181C DD4F             (/dd/sourcecode/as):05075                  std   <$004F
181E 9F51             (/dd/sourcecode/as):05076                  stx   <$0051
1820 39               (/dd/sourcecode/as):05077         L1634    rts                  return
                      (/dd/sourcecode/as):05078         
                      (/dd/sourcecode/as):05079         * Bring in Get/Put buffer memory bank - put into GRFDRV DAT Img @ <$87
                      (/dd/sourcecode/as):05080         * Entry: B=MMU block # to get
1821 0F89             (/dd/sourcecode/as):05081         L017C    clr   <$89         Make sure System Global is first
1823 D78A             (/dd/sourcecode/as):05082                  stb   <$8A         Save Block number of Get/Put buffer
1825 F7FFA9           (/dd/sourcecode/as):05083                  stb   >$FFA9       Save it to MMU as well
1828 39               (/dd/sourcecode/as):05084                  rts                Return
                      (/dd/sourcecode/as):05085         
                      (/dd/sourcecode/as):05086         * LSet entry point
1829 8E5847           (/dd/sourcecode/as):05087         L06A4    ldx   #GrfStrt+L06BC  Point to LSET vector table
182C E62A             (/dd/sourcecode/as):05088                  ldb   Wt.LSet,y    Get LSet type
182E C103             (/dd/sourcecode/as):05089                  cmpb  #$03         If higher than 3, error
1830 2209             (/dd/sourcecode/as):05090                  bhi   L06B7
1832 E685             (/dd/sourcecode/as):05091                  ldb   b,x          Get vector offset
1834 3A               (/dd/sourcecode/as):05092                  abx                Calculate vector
1835 AFA814           (/dd/sourcecode/as):05093                  stx   Wt.LVec,y    Save LSet table vector
1838 7E50F6           (/dd/sourcecode/as):05094                  jmp   >GrfStrt+L0F78 Return to system without error
                      (/dd/sourcecode/as):05095         
183B 53               (/dd/sourcecode/as):05096         L06B7    comb               Return to system with Illegal argument error
183C C6BB             (/dd/sourcecode/as):05097                  ldb   #E$IllArg
183E 7E50F7           (/dd/sourcecode/as):05098                  jmp   >GrfStrt+SysRet
                      (/dd/sourcecode/as):05099         
                      (/dd/sourcecode/as):05100         * Retain "magic" spacing
                      (/dd/sourcecode/as):05101                IFEQ  H6309
     1841             (/dd/sourcecode/as):05102         L1FA3b   equ   *
                      (/dd/sourcecode/as):05103         * 6809 - Use sta <grScrtch / orb <grSctrch
1841 3402             (/dd/sourcecode/as):05104                  pshs  a
1843 EAE0             (/dd/sourcecode/as):05105                  orb   ,s+
1845 2011             (/dd/sourcecode/as):05106                  bra   L1FA3c
                      (/dd/sourcecode/as):05107         * 6809 - since we already had to "break out" of magic spacing, just put the
                      (/dd/sourcecode/as):05108         * stb ,x / rts here, and leave the "duplicate" version @ L1FA3C, even though
                      (/dd/sourcecode/as):05109         * it won't be used. (or use those 3 bytes for a constant or something to be
                      (/dd/sourcecode/as):05110         * used from elsewhere)
                      (/dd/sourcecode/as):05111                ENDC 
                      (/dd/sourcecode/as):05112         
                      (/dd/sourcecode/as):05113         * LSet vector table
1847 0B               (/dd/sourcecode/as):05114         L06BC    fcb   L1FA9-L06BC    Normal vector
1848 09               (/dd/sourcecode/as):05115                  fcb   L1FA7-L06BC    AND logical vector
1849 14               (/dd/sourcecode/as):05116                  fcb   L1FAE-L06BC    OR logical vector
184A 04               (/dd/sourcecode/as):05117                  fcb   L1FA3-L06BC    XOR logical vector
                      (/dd/sourcecode/as):05118         * LSET routines here: affecting how pixels go on screen
                      (/dd/sourcecode/as):05119         * The proper vector is stored in the window table @ <$14,y
                      (/dd/sourcecode/as):05120         * Entry: X=address of pixel to change
                      (/dd/sourcecode/as):05121         *        B=Bit mask of specific pixel to change (1, 2 or 4 bits)
                      (/dd/sourcecode/as):05122         *        A=Bits to actually set (color palette #)
                      (/dd/sourcecode/as):05123         *        A&B are also both preserved on the stack by the calling routine
                      (/dd/sourcecode/as):05124         * XOR
184B A884             (/dd/sourcecode/as):05125         L1FA3    eora  ,x             EOR new bits onto what is on screen
184D A784             (/dd/sourcecode/as):05126                  sta   ,x             and save onto screen
184F 39               (/dd/sourcecode/as):05127                  rts                  5 bytes
                      (/dd/sourcecode/as):05128         * AND
1850 A484             (/dd/sourcecode/as):05129         L1FA7    anda  ,x             AND new color onto what is on screen
                      (/dd/sourcecode/as):05130         * Normal
1852 53               (/dd/sourcecode/as):05131         L1FA9    comb                 Make 'hole' for transparent putting
1853 E484             (/dd/sourcecode/as):05132                  andb  ,x             Create mask of bits already on screen
                      (/dd/sourcecode/as):05133                IFNE  H6309
                      (/dd/sourcecode/as):05134                  orr   a,b            Merge color & bit mask
                      (/dd/sourcecode/as):05135                ELSE
                      (/dd/sourcecode/as):05136         * 6809 - swap lines - do BRA, then NOP to keep spacing (so we don't blow 2 cycles executing
                      (/dd/sourcecode/as):05137         *   NOP). Also, see notes above (L1FA3b), since L1FA3c is only called from there.
1855 12               (/dd/sourcecode/as):05138                  nop                  keep byte count the same
1856 20E9             (/dd/sourcecode/as):05139                  bra   L1FA3b
                      (/dd/sourcecode/as):05140                ENDC
1858 E784             (/dd/sourcecode/as):05141         L1FA3c   stb   ,x             Save new byte
185A 39               (/dd/sourcecode/as):05142                  rts
                      (/dd/sourcecode/as):05143         * OR
185B AA84             (/dd/sourcecode/as):05144         L1FAE    ora   ,x             Merge new color onto screen
185D A784             (/dd/sourcecode/as):05145                  sta   ,x             and store them
185F 39               (/dd/sourcecode/as):05146         L1FB2    rts                  return
                      (/dd/sourcecode/as):05147         
                      (/dd/sourcecode/as):05148         * do a word of pixels at one time
                      (/dd/sourcecode/as):05149         * This is an ALAN DEKOK MAGIC ROUTINE! Do NOT CHANGE ANYTHING
                      (/dd/sourcecode/as):05150         * Likewise, do NOT change any offsets at the normal pixel routines at
                      (/dd/sourcecode/as):05151         * L1FA3 and following!
                      (/dd/sourcecode/as):05152         * NOTE: For 6809, some of these routines, when they exit the "magic area" because the
                      (/dd/sourcecode/as):05153         * code is longer, can stay out and finish without branching back in. The extra bytes
                      (/dd/sourcecode/as):05154         * can be padded, or used for constants. LCB
     1860             (/dd/sourcecode/as):05155         Pix.XOR  equ   *
                      (/dd/sourcecode/as):05156                IFNE  H6309
                      (/dd/sourcecode/as):05157                  eord  ,x           offset 0
                      (/dd/sourcecode/as):05158                ELSE
                      (/dd/sourcecode/as):05159         * 6809 - swap lines so byte count same, but we don't execute NOP to slow things down
1860 12               (/dd/sourcecode/as):05160                  nop
1861 2015             (/dd/sourcecode/as):05161                  bra  PEOR         keep byte count same
                      (/dd/sourcecode/as):05162                ENDC
1863 ED81             (/dd/sourcecode/as):05163         PXOR2    std   ,x++
1865 39               (/dd/sourcecode/as):05164                  rts
                      (/dd/sourcecode/as):05165         
     1866             (/dd/sourcecode/as):05166         Pix.AND  equ   *
                      (/dd/sourcecode/as):05167                IFNE  H6309
                      (/dd/sourcecode/as):05168                  andd  ,x           offset 6
                      (/dd/sourcecode/as):05169                ELSE
                      (/dd/sourcecode/as):05170         * 6809 - swap lines so byte count same, but we don't execute NOP to slow things down
1866 12               (/dd/sourcecode/as):05171                  nop
1867 2015             (/dd/sourcecode/as):05172                  bra  PAND
                      (/dd/sourcecode/as):05173                ENDC
1869 ED81             (/dd/sourcecode/as):05174         PAND2    std   ,x++
186B 39               (/dd/sourcecode/as):05175                  rts
                      (/dd/sourcecode/as):05176         
186C 414C414E44       (/dd/sourcecode/as):05177                  fcc   /ALAND/      space fillers 
                      (/dd/sourcecode/as):05178         
     1871             (/dd/sourcecode/as):05179         Pix.OR   equ   *
                      (/dd/sourcecode/as):05180                IFNE  H6309
                      (/dd/sourcecode/as):05181                  ord   ,x           offset 17
                      (/dd/sourcecode/as):05182                ELSE
1871 AA84             (/dd/sourcecode/as):05183                  ora   ,x
1873 EA01             (/dd/sourcecode/as):05184                  orb   1,x
                      (/dd/sourcecode/as):05185                ENDC
1875 ED81             (/dd/sourcecode/as):05186                  std   ,x++
1877 39               (/dd/sourcecode/as):05187                  rts
                      (/dd/sourcecode/as):05188         * End of ATD's magic routine!
                      (/dd/sourcecode/as):05189         
                      (/dd/sourcecode/as):05190                IFEQ  H6309
1878 A884             (/dd/sourcecode/as):05191         PEOR     eora  ,x
187A E801             (/dd/sourcecode/as):05192                  eorb  1,x
187C 20E5             (/dd/sourcecode/as):05193                  bra   PXOR2
                      (/dd/sourcecode/as):05194         
187E A484             (/dd/sourcecode/as):05195         PAND     anda  ,x
1880 E401             (/dd/sourcecode/as):05196                  andb  1,x
1882 20E5             (/dd/sourcecode/as):05197                  bra   PAND2
                      (/dd/sourcecode/as):05198                ENDC
                      (/dd/sourcecode/as):05199         
                      (/dd/sourcecode/as):05200         * Point entry point
1884 8D18             (/dd/sourcecode/as):05201         L1635    bsr   I.point      map screen and PSET block in, scale coordinates
1886 2541             (/dd/sourcecode/as):05202                  bcs   L1688          Error scaling, exit with it
1888 17FB1C           (/dd/sourcecode/as):05203                  lbsr  L1E9D          Get:X=ptr to byte on screen,B=bit mask for pixel
188B 9661             (/dd/sourcecode/as):05204                  lda   <$0061         Get foreground color
                      (/dd/sourcecode/as):05205                IFNE  H6309
                      (/dd/sourcecode/as):05206                  ldw   <$68           Get LSET vector
                      (/dd/sourcecode/as):05207                ELSE
                      (/dd/sourcecode/as):05208         * 6809 - stx <grScrtch / ldx <grScrtch
188D 3410             (/dd/sourcecode/as):05209                  pshs  x
188F 9E68             (/dd/sourcecode/as):05210                  ldx   <$68
1891 9FB5             (/dd/sourcecode/as):05211                  stx   <$B5
1893 3510             (/dd/sourcecode/as):05212                  puls  x
                      (/dd/sourcecode/as):05213                ENDC
1895 ADC4             (/dd/sourcecode/as):05214                  jsr   ,u             Put pixel on screen
1897 202F             (/dd/sourcecode/as):05215                  bra   L1687          Exit without error
                      (/dd/sourcecode/as):05216         
                      (/dd/sourcecode/as):05217         * Line entry point
                      (/dd/sourcecode/as):05218         * ATD: Line/bar/box set up screen: saves ~40 bytes, adds 6 clock cycles
1899 170918           (/dd/sourcecode/as):05219         I.Line   lbsr  L1DFD          scale 2nd set of coordinates
189C 253B             (/dd/sourcecode/as):05220                  bcs   L16B0          error: exit to a convenient RTS
189E 1702CB           (/dd/sourcecode/as):05221         I.point  lbsr  L1884          map in window, and verify it's graphics
18A1 DE64             (/dd/sourcecode/as):05222                  ldu   <$64           get PSET vector for line/bar/box routines
18A3 1608EC           (/dd/sourcecode/as):05223                  lbra  L1DF6          Scale 1st set of coords
                      (/dd/sourcecode/as):05224         
                      (/dd/sourcecode/as):05225         * Line entry point
18A6 8DF1             (/dd/sourcecode/as):05226         L1654    bsr   I.Line       internal line set up routine
18A8 251F             (/dd/sourcecode/as):05227                  bcs   L1688          Error; exit
                      (/dd/sourcecode/as):05228                IFNE  H6309
                      (/dd/sourcecode/as):05229                  ldw   <$68           Get LSET vector
                      (/dd/sourcecode/as):05230                ELSE
18AA DC68             (/dd/sourcecode/as):05231                  ldd   <$68
18AC DDB5             (/dd/sourcecode/as):05232                  std   <$B5
                      (/dd/sourcecode/as):05233                ENDC
18AE DC49             (/dd/sourcecode/as):05234                  ldd   <$0049         Get 'working' Y coordinate
18B0 10934D           (/dd/sourcecode/as):05235                  cmpd  <$004D         Same as current Y coordinate?
18B3 2604             (/dd/sourcecode/as):05236                  bne   L1679          No, check X
18B5 8D27             (/dd/sourcecode/as):05237                  bsr   L168B          Do 'fast' horizontal line
18B7 200F             (/dd/sourcecode/as):05238                  bra   L1687          Return to system without error
                      (/dd/sourcecode/as):05239         
18B9 DC47             (/dd/sourcecode/as):05240         L1679    ldd   <$0047         Get 'working' X coordinate
18BB 10934B           (/dd/sourcecode/as):05241                  cmpd  <$004B         Same as current X coordinate?
18BE 2605             (/dd/sourcecode/as):05242                  bne   L1684          No, use 'normal' line routine
18C0 170102           (/dd/sourcecode/as):05243                  lbsr  L16F4          Do 'fast' vertical line
18C3 2003             (/dd/sourcecode/as):05244                  bra   L1687          Return to system without error
                      (/dd/sourcecode/as):05245         
18C5 170156           (/dd/sourcecode/as):05246         L1684    lbsr  L1724          Do 'normal' line routine
18C8 5F               (/dd/sourcecode/as):05247         L1687    clrb                 No error
18C9 7E50F7           (/dd/sourcecode/as):05248         L1688    jmp   >GrfStrt+SysRet Return to system
                      (/dd/sourcecode/as):05249         
                      (/dd/sourcecode/as):05250         * Swap start & end X coords if backwards ($47=Start, $4B=End)
18CC DC4B             (/dd/sourcecode/as):05251         L16A3    ldd   <$004B         Get end X coord
18CE 109347           (/dd/sourcecode/as):05252                  cmpd  <$0047         Compare with start X coord
18D1 2C06             (/dd/sourcecode/as):05253                  bge   L16B0          Proper order, leave
18D3 9E47             (/dd/sourcecode/as):05254         L16AA    ldx   <$0047         Swap the 2 X coord's around
18D5 DD47             (/dd/sourcecode/as):05255                  std   <$0047
18D7 9F4B             (/dd/sourcecode/as):05256                  stx   <$004B
18D9 39               (/dd/sourcecode/as):05257         L16B0    rts   
                      (/dd/sourcecode/as):05258         
                      (/dd/sourcecode/as):05259         * # of pixels/byte table
18DA 08               (/dd/sourcecode/as):05260         L16B1    fcb   $08            640x200x2 color
18DB 04               (/dd/sourcecode/as):05261                  fcb   $04            320x200x4 color
18DC 04               (/dd/sourcecode/as):05262                  fcb   $04            640x200x4 color
18DD 02               (/dd/sourcecode/as):05263                  fcb   $02            320x200x16 color
                      (/dd/sourcecode/as):05264         
                      (/dd/sourcecode/as):05265         * Fast horizontal line routine
18DE 8DEC             (/dd/sourcecode/as):05266         L168B    bsr   L16A3          Make sure X coords in right order
18E0 17096A           (/dd/sourcecode/as):05267         L168D    lbsr  L1EF1          <$79=Start of byte pixel mask, <$77=Shift vector
                      (/dd/sourcecode/as):05268         * Entry point from FFILL
18E3 DC4B             (/dd/sourcecode/as):05269         L1690    ldd   <$004B         Get end X coord of line
18E5 9347             (/dd/sourcecode/as):05270                  subd  <$0047         # pixels wide line is
                      (/dd/sourcecode/as):05271                IFNE  H6309
                      (/dd/sourcecode/as):05272                  incd                 +1 (base 1)
                      (/dd/sourcecode/as):05273                ELSE
18E7 C30001           (/dd/sourcecode/as):05274                  addd  #1
                      (/dd/sourcecode/as):05275                ENDC
18EA DD99             (/dd/sourcecode/as):05276                  std   <$0099         Save # of pixels left
18EC 17FAB8           (/dd/sourcecode/as):05277                  lbsr  L1E9D          X=Mem ptr to 1st pixel, B=Mask for start pixel
18EF 9661             (/dd/sourcecode/as):05278                  lda   <$0061         Get foreground color mask (full byte)
18F1 109E99           (/dd/sourcecode/as):05279                  ldy   <$0099         Get # pixels to do
                      (/dd/sourcecode/as):05280         
                      (/dd/sourcecode/as):05281         * "Fast" horizontal line draw
                      (/dd/sourcecode/as):05282         * Entry: Y = # pixels left
                      (/dd/sourcecode/as):05283         *        A = Color bit mask
                      (/dd/sourcecode/as):05284         *        X = Screen address
                      (/dd/sourcecode/as):05285         *        B = mask for first pixel
                      (/dd/sourcecode/as):05286         *        W = address of LSET routine
                      (/dd/sourcecode/as):05287         *        U = address of PSET routine
18F4 3476             (/dd/sourcecode/as):05288         L16B5    pshs  u,y,x,d        Preserve X & D, and reserve 4 bytes on stack
18F6 A766             (/dd/sourcecode/as):05289                  sta   6,s            Save Full byte color mask
18F8 8E58D9           (/dd/sourcecode/as):05290                  ldx   #GrfStrt+L16B1-1  Point to # pixels/byte table
18FB D660             (/dd/sourcecode/as):05291                  ldb   <$0060         Get screen type
18FD 4F               (/dd/sourcecode/as):05292                  clra                 Clear high byte
18FE E685             (/dd/sourcecode/as):05293                  ldb   b,x            Get # pixels/byte for screen type
1900 ED64             (/dd/sourcecode/as):05294                  std   4,s            Save overtop original Y on stack
1902 3516             (/dd/sourcecode/as):05295                  puls  x,d            Restore Screen ptr & Color/pixel masks
1904 5D               (/dd/sourcecode/as):05296                  tstb                is the pixel mask at the high bit of the byte?
1905 2B14             (/dd/sourcecode/as):05297                  bmi   L16D5          yes, start off with a check for TFM
1907 8C               (/dd/sourcecode/as):05298                  fcb   $8C            skip 2 bytes: same cycle time, 1 byte shorter
                      (/dd/sourcecode/as):05299         * Stack now has: 0,s = # pixels per byte (2,4 or 8, 16 bit # for Y compare)
                      (/dd/sourcecode/as):05300         *                2,s = Color mask
                      (/dd/sourcecode/as):05301         *                3,s = Garbage? (LSB of U)
                      (/dd/sourcecode/as):05302         *                Y   = # pixels left in line
                      (/dd/sourcecode/as):05303         * Put single pixels on the screen
1908 D679             (/dd/sourcecode/as):05304         L16C7    ldb   <$0079         Get bit mask for 1st pixel in byte
190A DD97             (/dd/sourcecode/as):05305         L16C9    std   <$97           Save current color & bit masks
190C ADC4             (/dd/sourcecode/as):05306                  jsr   ,u             put pixel on the screen
190E 313F             (/dd/sourcecode/as):05307                  leay  -1,y           Bump line pixel count down by 1
1910 102700AF         (/dd/sourcecode/as):05308                  lbeq  L16F2          Done line, exit
1914 DC97             (/dd/sourcecode/as):05309                  ldd   <$97           Get color & bit masks back
                      (/dd/sourcecode/as):05310         * Set up bit pattern for next pixel, including changing byte position
1916 BD59F4           (/dd/sourcecode/as):05311                  jsr   >GrfStrt+L1F08  Set up for next pixel (scrn address & bit mask)
1919 2AEF             (/dd/sourcecode/as):05312                  bpl   L16C9          (1st bit would be set if next byte, keep going)
                      (/dd/sourcecode/as):05313         * If on last byte, Y<#pixels per byte, so will use above loop
                      (/dd/sourcecode/as):05314         * If not on last byte, Y>#pixels per byte, so can 'cheat' & do 1 byte at a
                      (/dd/sourcecode/as):05315         * time below
191B 10ACE4           (/dd/sourcecode/as):05316         L16D5    cmpy  ,s             Done pixel count for current byte (or last byte)
191E 25E8             (/dd/sourcecode/as):05317                  blo   L16C7          No, keep going
                      (/dd/sourcecode/as):05318         * Draw remainder of line 1 full byte (2,4 or 8 pixels) at a time
                      (/dd/sourcecode/as):05319         * ATD: GrfStrt+L1FA9 is the normal PUT (no fancy stuff) routine
1920 1F20             (/dd/sourcecode/as):05320         L16D7    tfr   y,d            get number of pixels left into D
                      (/dd/sourcecode/as):05321                IFNE  H6309
                      (/dd/sourcecode/as):05322                  divd  1,s            divide it by the number of pixels in 1 byte
                      (/dd/sourcecode/as):05323                ELSE
                      (/dd/sourcecode/as):05324         * 6809 - should be able to use <grScrtch and <grScrtch+1 for some of the stack stuff
1922 6FE2             (/dd/sourcecode/as):05325                  clr   ,-s
1924 6CE4             (/dd/sourcecode/as):05326         L16D7b   inc   ,s
1926 E062             (/dd/sourcecode/as):05327                  subb  2,s
1928 8200             (/dd/sourcecode/as):05328                  sbca  #0
192A 24F8             (/dd/sourcecode/as):05329                  bcc   L16D7b
192C EB62             (/dd/sourcecode/as):05330                  addb  2,s          
192E 1F98             (/dd/sourcecode/as):05331                  tfr   b,a
1930 3504             (/dd/sourcecode/as):05332                  puls  b
1932 5A               (/dd/sourcecode/as):05333                  decb
                      (/dd/sourcecode/as):05334                ENDC
1933 3402             (/dd/sourcecode/as):05335                  pshs  a              save remainder for later
1935 6FE2             (/dd/sourcecode/as):05336                  clr   ,-s            and make remainder on-stack 16-bit
1937 3404             (/dd/sourcecode/as):05337                  pshs  b              save number of bytes to do
                      (/dd/sourcecode/as):05338         * now we have: 
                      (/dd/sourcecode/as):05339         * B   = number of bytes to do a full byte at a time
                      (/dd/sourcecode/as):05340         * 0,S = number of bytes to do a full byte at a time
                      (/dd/sourcecode/as):05341         * 1,s = remainder of pixels in last byte to do
                      (/dd/sourcecode/as):05342         * 3,s = pixels per byte
                      (/dd/sourcecode/as):05343         * 5,s = color mask
1939 8699             (/dd/sourcecode/as):05344                  lda   #(GrfStrt+L1F9E)&$00FF  point to NO pset vector
193B 9165             (/dd/sourcecode/as):05345                  cmpa  <$64+1       is it just a normal color routine?
193D 266E             (/dd/sourcecode/as):05346                  bne   L16E2        no, it's a PSET, so go do it especially
                      (/dd/sourcecode/as):05347                IFNE  H6309
                      (/dd/sourcecode/as):05348                  cmpw  #GrfStrt+L1FA9  is it the normal PUT routine?
                      (/dd/sourcecode/as):05349                ELSE
193F 3410             (/dd/sourcecode/as):05350                  pshs  x
1941 9EB5             (/dd/sourcecode/as):05351                  ldx   <$B5
1943 8C5852           (/dd/sourcecode/as):05352                  cmpx  #GrfStrt+L1FA9
1946 3510             (/dd/sourcecode/as):05353                  puls  x
                      (/dd/sourcecode/as):05354                ENDC
1948 262C             (/dd/sourcecode/as):05355                  bne   L16E0        no, go use old method
194A 4F               (/dd/sourcecode/as):05356                  clra
                      (/dd/sourcecode/as):05357                IFNE  H6309
                      (/dd/sourcecode/as):05358                  tfr   d,w          into TFM counter register
                      (/dd/sourcecode/as):05359                ENDC
194B 3165             (/dd/sourcecode/as):05360                  leay  5,s          point to full byte color mask
                      (/dd/sourcecode/as):05361                IFNE  H6309
                      (/dd/sourcecode/as):05362                  tfm   y,x+         move everything else a byte at a time
                      (/dd/sourcecode/as):05363         * LDW MUST go before the call to L16F2!
                      (/dd/sourcecode/as):05364                  ldw   #GrfStrt+L1FA9  and restore vector to normal PUT routine
                      (/dd/sourcecode/as):05365                ELSE
194D 3450             (/dd/sourcecode/as):05366                  pshs  x,u
                      (/dd/sourcecode/as):05367         * 6809 - leau ,x
194F 1F13             (/dd/sourcecode/as):05368                  tfr   x,u
                      (/dd/sourcecode/as):05369         * 6809 - since line is always <=160 bytes wide, should be able to use B alone for DECB
                      (/dd/sourcecode/as):05370         *  instead of leax -1,x
1951 1F01             (/dd/sourcecode/as):05371                  tfr   d,x
1953 A6A4             (/dd/sourcecode/as):05372                  lda   ,y
1955 A7C0             (/dd/sourcecode/as):05373         L16DEb   sta   ,u+
1957 301F             (/dd/sourcecode/as):05374                  leax  -1,x
1959 26FA             (/dd/sourcecode/as):05375                  bne   L16DEb
195B CC5852           (/dd/sourcecode/as):05376                  ldd   #GrfStrt+L1FA9
195E DDB5             (/dd/sourcecode/as):05377                  std   <$B5
1960 EFE4             (/dd/sourcecode/as):05378                  stu   ,s
1962 3550             (/dd/sourcecode/as):05379                  puls  x,u
                      (/dd/sourcecode/as):05380                ENDC
1964 3504             (/dd/sourcecode/as):05381         L16DE    puls  b            restore number of full bytes to do
1966 A663             (/dd/sourcecode/as):05382                  lda   3,s          get number of pixels per byte
1968 3D               (/dd/sourcecode/as):05383                  mul                get number of pixels done
1969 D347             (/dd/sourcecode/as):05384                  addd  <$47         add to current X coordinate
196B DD47             (/dd/sourcecode/as):05385                  std   <$47         and save as current X coordinate
196D 10AEE1           (/dd/sourcecode/as):05386         L16DF    ldy   ,s++         restore 16-bit remainder of pixels: GET CC.Z bit
1970 2751             (/dd/sourcecode/as):05387                  beq   L16F2        exit quickly if done all of the bytes
1972 A662             (/dd/sourcecode/as):05388                  lda   2,s          get pixel mask
1974 2092             (/dd/sourcecode/as):05389                  bra   L16C7        and do the last few pixels of the line
                      (/dd/sourcecode/as):05390         
1976 54               (/dd/sourcecode/as):05391         L16E0    lsrb               divide by 2
1977 2734             (/dd/sourcecode/as):05392                  beq   L16E2        only 1 pixel to do, go do it.
                      (/dd/sourcecode/as):05393         * here we have 2 or more pixels to do full-byte, so we go to a method
                      (/dd/sourcecode/as):05394         * using D: much magic here!
                      (/dd/sourcecode/as):05395         * W = pointer to LSET routine
                      (/dd/sourcecode/as):05396         * U = pointer to routine that does ANDR B,A  JMP ,W
                      (/dd/sourcecode/as):05397                IFNE  H6309
                      (/dd/sourcecode/as):05398                  subw  #GrfStrt+L1FA3  point to start of LSET routines
                      (/dd/sourcecode/as):05399                ELSE
1979 3406             (/dd/sourcecode/as):05400                  pshs  d
197B DCB5             (/dd/sourcecode/as):05401                  ldd   <$B5
197D 83584B           (/dd/sourcecode/as):05402                  subd  #GrfStrt+L1FA3
1980 DDB5             (/dd/sourcecode/as):05403                  std   <$B5
1982 3506             (/dd/sourcecode/as):05404                  puls  d
                      (/dd/sourcecode/as):05405                ENDC
1984 2702             (/dd/sourcecode/as):05406                  beq   pix.do       skip fancy stuff for XOR
                      (/dd/sourcecode/as):05407                IFNE  H6309
                      (/dd/sourcecode/as):05408                  incf               go up by one byte
                      (/dd/sourcecode/as):05409                ELSE
1986 0CB6             (/dd/sourcecode/as):05410                  inc   <$B6
                      (/dd/sourcecode/as):05411                ENDC
1988 CE5860           (/dd/sourcecode/as):05412         pix.do   ldu   #GrfStrt+Pix.XOR  point to double-byte pixel routines
                      (/dd/sourcecode/as):05413                IFNE  H6309
                      (/dd/sourcecode/as):05414                  leau  f,u          point U to the appropriate routine
                      (/dd/sourcecode/as):05415                  tfr   b,f          move counter to a register
                      (/dd/sourcecode/as):05416                ELSE
                      (/dd/sourcecode/as):05417         * 6809 - remove pshs a / puls a - we immediately reload A the very line after anyways
198B 3402             (/dd/sourcecode/as):05418                  pshs  a
198D 96B6             (/dd/sourcecode/as):05419                  lda   <$B6
198F 33C6             (/dd/sourcecode/as):05420                  leau  a,u
1991 D7B6             (/dd/sourcecode/as):05421                  stb   <$B6
1993 3502             (/dd/sourcecode/as):05422                  puls  a
                      (/dd/sourcecode/as):05423                ENDC
1995 A665             (/dd/sourcecode/as):05424         pix.next lda   5,s          grab full-byte color mask
1997 1F89             (/dd/sourcecode/as):05425                  tfr   a,b          make D=color mask
1999 ADC4             (/dd/sourcecode/as):05426                  jsr   ,u           call 2-byte routine
                      (/dd/sourcecode/as):05427                IFNE  H6309
                      (/dd/sourcecode/as):05428                  decf
                      (/dd/sourcecode/as):05429                ELSE
199B 0AB6             (/dd/sourcecode/as):05430                  dec   <$B6
                      (/dd/sourcecode/as):05431                ENDC
199D 26F6             (/dd/sourcecode/as):05432                  bne   pix.next
                      (/dd/sourcecode/as):05433                IFNE  H6309
                      (/dd/sourcecode/as):05434                  ldw   <$68         get LSET vector
                      (/dd/sourcecode/as):05435                ELSE
199F DE68             (/dd/sourcecode/as):05436                  ldu   <$68
19A1 DFB5             (/dd/sourcecode/as):05437                  stu   <$B5
                      (/dd/sourcecode/as):05438                ENDC
19A3 DE64             (/dd/sourcecode/as):05439                  ldu   <$64         and PSET vector again
19A5 E6E4             (/dd/sourcecode/as):05440                  ldb   ,s           get number of bytes left to do: do NOT do PULS!
19A7 C401             (/dd/sourcecode/as):05441                  andb  #1           check for odd-numbered bytes
19A9 27B9             (/dd/sourcecode/as):05442                  beq   L16DE        if done all the bytes, exit: does a PULS B
19AB E7E4             (/dd/sourcecode/as):05443                  stb   ,s           save the count of bytes to do: =1, and do one byte
                      (/dd/sourcecode/as):05444         * PSET+LSET full byte line draws come here
19AD C6FF             (/dd/sourcecode/as):05445         L16E2    ldb   #$FF           Full byte bit mask
19AF A665             (/dd/sourcecode/as):05446                  lda   5,s            Get color mask
19B1 ADC4             (/dd/sourcecode/as):05447                  jsr   ,u           put the pixel on the screen
19B3 3001             (/dd/sourcecode/as):05448                  leax  1,x            Bump screen ptr up by 1
19B5 EC63             (/dd/sourcecode/as):05449                  ldd   3,s          get number of pixels per byte
19B7 D347             (/dd/sourcecode/as):05450                  addd  <$0047         Update 'working' X-cord to reflect pixels we did
19B9 DD47             (/dd/sourcecode/as):05451                  std   <$0047         Save result
19BB 6AE4             (/dd/sourcecode/as):05452                  dec   ,s           decrement counter
19BD 26EE             (/dd/sourcecode/as):05453                  bne   L16E2        continue until done
19BF 3261             (/dd/sourcecode/as):05454                  leas  1,s          kill the counter off of the stack
19C1 20AA             (/dd/sourcecode/as):05455                  bra   L16DF        restore 16-bit pixel remainder, and do last byte
                      (/dd/sourcecode/as):05456         
19C3 3596             (/dd/sourcecode/as):05457         L16F2    puls  pc,x,d         Restore regs & return when done
                      (/dd/sourcecode/as):05458         
                      (/dd/sourcecode/as):05459         * Fast vertical line routine
19C5 8D1F             (/dd/sourcecode/as):05460         L16F4    bsr   L1716          Make sure Y coords in right order
19C7 DC4D             (/dd/sourcecode/as):05461         L16F6    ldd   <$004D         Calculate height of line in pixels
19C9 D04A             (/dd/sourcecode/as):05462                  subb  <$004A
19CB 5C               (/dd/sourcecode/as):05463                  incb                 Base 1
19CC DD99             (/dd/sourcecode/as):05464                  std   <$0099         Save height
19CE 17F9D6           (/dd/sourcecode/as):05465                  lbsr  L1E9D          Calculate screen address & pixel mask
19D1 9661             (/dd/sourcecode/as):05466                  lda   <$0061         Get color mask
19D3 DD97             (/dd/sourcecode/as):05467                  std   <$0097         Save color & pixel masks
19D5 109E99           (/dd/sourcecode/as):05468                  ldy   <$0099         Get Y pixel counter
19D8 DC97             (/dd/sourcecode/as):05469         L1707    ldd   <$0097         Get color & pixel mask
19DA ADC4             (/dd/sourcecode/as):05470                  jsr   ,u             Put pixel on screen
19DC D663             (/dd/sourcecode/as):05471                  ldb   <$0063         Get # bytes to next line on screen
19DE 3A               (/dd/sourcecode/as):05472                  abx                  Point to it
19DF 0C4A             (/dd/sourcecode/as):05473                  inc   <$004A         Bump up working Y coord
19E1 313F             (/dd/sourcecode/as):05474                  leay  -1,y           Dec. Y counter
19E3 26F3             (/dd/sourcecode/as):05475                  bne   L1707          Do until done
19E5 39               (/dd/sourcecode/as):05476                  rts   
                      (/dd/sourcecode/as):05477         
                      (/dd/sourcecode/as):05478         * Swap Y coords so lower is first
19E6 DC4D             (/dd/sourcecode/as):05479         L1716    ldd   <$004D         Get current Y coord
19E8 109349           (/dd/sourcecode/as):05480                  cmpd  <$0049         Compare with destination Y coord
19EB 2C06             (/dd/sourcecode/as):05481                  bge   L1723          If higher or same, done
19ED 9E49             (/dd/sourcecode/as):05482         L171D    ldx   <$0049
19EF DD49             (/dd/sourcecode/as):05483                  std   <$0049
19F1 9F4D             (/dd/sourcecode/as):05484                  stx   <$004D
19F3 39               (/dd/sourcecode/as):05485         L1723    rts   
                      (/dd/sourcecode/as):05486         
                      (/dd/sourcecode/as):05487         * Next pixel calcs - See if <$47 could not be done outside the loop by a
                      (/dd/sourcecode/as):05488         *  simple ADDD (if needed at all)
                      (/dd/sourcecode/as):05489         * If it is needed in loop for some, simply have the ones that don't need to
                      (/dd/sourcecode/as):05490         *  come in at L1F0E instead
                      (/dd/sourcecode/as):05491         * Called from Fast Horizontal Line L16C9, Normal Line L177D, Flood Fill L1CD4
                      (/dd/sourcecode/as):05492         * Entry: <$0047 = Working X coord
                      (/dd/sourcecode/as):05493         *   B=Bit mask for current pixel
                      (/dd/sourcecode/as):05494         *   X=Screen address
                      (/dd/sourcecode/as):05495         * Exit:
                      (/dd/sourcecode/as):05496         *   B=Bit mask for new pixel (high bit set if starting new byte)
                      (/dd/sourcecode/as):05497         *   X=New screen address (may not have changed)
                      (/dd/sourcecode/as):05498         * ATD: Could replace calls to L1F08 with jsr [>GrfMem+gr0077], and move 'lsrb's
                      (/dd/sourcecode/as):05499         * from L1F14 here, to the TOP of the routine.  That would convert a
                      (/dd/sourcecode/as):05500         * JSR >foo, JMP[>GrfMem+gr0077] to a jsr [>], saving 4 cycles, adding 2 bytes per call
                      (/dd/sourcecode/as):05501         * Also, the 'inc' does NOT affect the carry.
19F4 0C48             (/dd/sourcecode/as):05502         L1F08    inc   <$0048         Inc LSB of working X coord
19F6 2602             (/dd/sourcecode/as):05503                  bne   L1F0E          Didn't wrap, skip ahead
19F8 0C47             (/dd/sourcecode/as):05504                  inc   <$0047         Inc MSB of working X coord
19FA 54               (/dd/sourcecode/as):05505         L1F0E    lsrb                 Shift to next bit mask
19FB 2504             (/dd/sourcecode/as):05506                  bcs   L1F18          Finished byte, reload for next
19FD 6E9F1177         (/dd/sourcecode/as):05507                  jmp   [>GrfMem+gr0077]   Shift B more (if needed) depending on scrn type
                      (/dd/sourcecode/as):05508         
1A01 C601             (/dd/sourcecode/as):05509         L1F18    ldb   #1             Bump screen address by 1
1A03 3A               (/dd/sourcecode/as):05510                  abx
1A04 D679             (/dd/sourcecode/as):05511                  ldb   <$0079         Get start single pixel mask (1,2 or 4 bits set)
1A06 39               (/dd/sourcecode/as):05512                  rts   
                      (/dd/sourcecode/as):05513         
                      (/dd/sourcecode/as):05514         * Routine to move left for Normal Line L177D. Needed to get correct symmetry
1A07 3406             (/dd/sourcecode/as):05515         LeftMV   pshs  d
1A09 DC47             (/dd/sourcecode/as):05516                  ldd   <$0047
1A0B 830001           (/dd/sourcecode/as):05517                  subd  #1
1A0E DD47             (/dd/sourcecode/as):05518                  std   <$0047
1A10 3506             (/dd/sourcecode/as):05519                  puls  d
1A12 58               (/dd/sourcecode/as):05520         Lmore    lslb
1A13 2504             (/dd/sourcecode/as):05521                  bcs   Lmore2
1A15 6E9F117A         (/dd/sourcecode/as):05522                  jmp   [>GrfMem+gr007A]
1A19 301F             (/dd/sourcecode/as):05523         Lmore2   leax  -1,x
1A1B D67C             (/dd/sourcecode/as):05524                  ldb   <$007C
1A1D 39               (/dd/sourcecode/as):05525                  rts
                      (/dd/sourcecode/as):05526         
                      (/dd/sourcecode/as):05527         * A dX or dY of 1 will step the line in the middle. The ends of the line
                      (/dd/sourcecode/as):05528         * are not swapped. The initial error is a function of dX or dY.
                      (/dd/sourcecode/as):05529         * A flag for left/right movement <$12 is used.
                      (/dd/sourcecode/as):05530         * Normal line routine
1A1E 0F12             (/dd/sourcecode/as):05531         L1724    clr   <$0012       flag for X swap
1A20 DC4B             (/dd/sourcecode/as):05532                  ldd   <$004B       current X
1A22 9347             (/dd/sourcecode/as):05533                  subd  <$0047       new X
1A24 DD13             (/dd/sourcecode/as):05534                  std   <$0013       save dX
1A26 2A08             (/dd/sourcecode/as):05535                  bpl   L1734
1A28 0312             (/dd/sourcecode/as):05536                  com   <$0012       flag left movement
                      (/dd/sourcecode/as):05537                IFNE  H6309
                      (/dd/sourcecode/as):05538                  negd               make change positive
                      (/dd/sourcecode/as):05539                ELSE
1A2A 40               (/dd/sourcecode/as):05540                  nega
1A2B 50               (/dd/sourcecode/as):05541                  negb
1A2C 8200             (/dd/sourcecode/as):05542                  sbca  #0
                      (/dd/sourcecode/as):05543                ENDC
1A2E DD13             (/dd/sourcecode/as):05544                  std   <$0013       force dX>0
1A30 D663             (/dd/sourcecode/as):05545         L1734    ldb   <$0063       BPL bytes/line
1A32 4F               (/dd/sourcecode/as):05546                  clra  
1A33 DD17             (/dd/sourcecode/as):05547                  std   <$0017       save 16-bit bytes per line
1A35 DC4D             (/dd/sourcecode/as):05548                  ldd   <$004D       current Y
1A37 9349             (/dd/sourcecode/as):05549                  subd  <$0049       subtract working Y
1A39 DD15             (/dd/sourcecode/as):05550                  std   <$0015       save dY
1A3B 2A0E             (/dd/sourcecode/as):05551                  bpl   L1753        if positive
                      (/dd/sourcecode/as):05552                IFNE  H6309
                      (/dd/sourcecode/as):05553                  negd               make change positive
                      (/dd/sourcecode/as):05554                ELSE
1A3D 40               (/dd/sourcecode/as):05555                  nega
1A3E 50               (/dd/sourcecode/as):05556                  negb
1A3F 8200             (/dd/sourcecode/as):05557                  sbca  #0
                      (/dd/sourcecode/as):05558                ENDC
1A41 DD15             (/dd/sourcecode/as):05559                  std   <$0015       force dY>0
1A43 DC17             (/dd/sourcecode/as):05560                  ldd   <$0017       up/down movement; up=+ down=-
                      (/dd/sourcecode/as):05561                IFNE  H6309
                      (/dd/sourcecode/as):05562                  negd
                      (/dd/sourcecode/as):05563                  ELSE
1A45 40               (/dd/sourcecode/as):05564                  nega
1A46 50               (/dd/sourcecode/as):05565                  negb
1A47 8200             (/dd/sourcecode/as):05566                  sbca  #0
                      (/dd/sourcecode/as):05567                ENDC
1A49 DD17             (/dd/sourcecode/as):05568                  std   <$0017       now points the correct direction
1A4B DC13             (/dd/sourcecode/as):05569         L1753    ldd    <$0013      compare dX with dY to find larger
1A4D 109315           (/dd/sourcecode/as):05570                  cmpd   <$0015
1A50 2504             (/dd/sourcecode/as):05571                  bcs    Ylarge
                      (/dd/sourcecode/as):05572                IFNE   H6309
                      (/dd/sourcecode/as):05573                  asrd               error = dX/2
                      (/dd/sourcecode/as):05574                  bra    Lvector
                      (/dd/sourcecode/as):05575         
1A52                  (/dd/sourcecode/as):05576         Ylarge   ldd    <$0015
                      (/dd/sourcecode/as):05577                  negd
                      (/dd/sourcecode/as):05578                  asrd               error = -dY/2
                      (/dd/sourcecode/as):05579                ELSE
1A52 47               (/dd/sourcecode/as):05580                  asra
1A53 56               (/dd/sourcecode/as):05581                  rorb
1A54 2008             (/dd/sourcecode/as):05582                  bra    Lvector
                      (/dd/sourcecode/as):05583                  
1A56 DC15             (/dd/sourcecode/as):05584         Ylarge   ldd    <$0015
1A58 40               (/dd/sourcecode/as):05585                  nega
1A59 50               (/dd/sourcecode/as):05586                  negb
1A5A 8200             (/dd/sourcecode/as):05587                  sbca   #0
1A5C 47               (/dd/sourcecode/as):05588                  asra
1A5D 56               (/dd/sourcecode/as):05589                  rorb
                      (/dd/sourcecode/as):05590                ENDC
1A5E DD75             (/dd/sourcecode/as):05591         Lvector  std   <$0075       error term
1A60 1707EA           (/dd/sourcecode/as):05592                  lbsr  L1EF1        Set up <$77 right bit shift vector & <$79 pixel mask
                      (/dd/sourcecode/as):05593         * for symmetry
1A63 170569           (/dd/sourcecode/as):05594                  lbsr  L1F1D        Set up <$7A left bit shift vector & <$79 pixel mask
1A66 17F93E           (/dd/sourcecode/as):05595                  lbsr  L1E9D        Calculate screen addr into X & pixel mask into B
1A69 D774             (/dd/sourcecode/as):05596                  stb   <$0074       Save pixel mask
1A6B D674             (/dd/sourcecode/as):05597         L1760    ldb   <$0074       Get pixel mask
1A6D 9661             (/dd/sourcecode/as):05598                  lda   <$0061       Get color mask
1A6F ADC4             (/dd/sourcecode/as):05599                  jsr   ,u
1A71 DC47             (/dd/sourcecode/as):05600         L1788    ldd   <$0047       finished with X movement?
1A73 10934B           (/dd/sourcecode/as):05601                  cmpd  <$004B
1A76 2608             (/dd/sourcecode/as):05602                  bne   L1788b
1A78 DC49             (/dd/sourcecode/as):05603                  ldd   <$0049       finished with Y movement?
1A7A 10934D           (/dd/sourcecode/as):05604                  cmpd  <$004D
1A7D 2601             (/dd/sourcecode/as):05605                  bne   L1788b
1A7F 39               (/dd/sourcecode/as):05606                  rts                finished fo leave
                      (/dd/sourcecode/as):05607         
1A80 DC75             (/dd/sourcecode/as):05608         L1788b   ldd   <$0075       get error
1A82 2A12             (/dd/sourcecode/as):05609                  bpl   L177D        if >=0
1A84 D313             (/dd/sourcecode/as):05610                  addd  <$0013       add in dX
1A86 DD75             (/dd/sourcecode/as):05611                  std   <$0075       save new working error
1A88 DC17             (/dd/sourcecode/as):05612                  ldd   <$0017       get BPL
                      (/dd/sourcecode/as):05613                IFNE  H6309
                      (/dd/sourcecode/as):05614                  addr  d,x
                      (/dd/sourcecode/as):05615                  bcs   L1779        test direction not result
                      (/dd/sourcecode/as):05616                ELSE
1A8A 308B             (/dd/sourcecode/as):05617                  leax  d,x          will not change regCC N
1A8C 2B04             (/dd/sourcecode/as):05618                  bmi   L1779
                      (/dd/sourcecode/as):05619                ENDC       
1A8E 0C4A             (/dd/sourcecode/as):05620                  inc   <$004A       go down one Y-line
1A90 20D9             (/dd/sourcecode/as):05621                  bra   L1760
                      (/dd/sourcecode/as):05622         
1A92 0A4A             (/dd/sourcecode/as):05623         L1779    dec   <$004A       decrement y-count
1A94 20D5             (/dd/sourcecode/as):05624                  bra   L1760
                      (/dd/sourcecode/as):05625         
1A96 9315             (/dd/sourcecode/as):05626         L177D    subd  <$0015       take out one BPL
1A98 DD75             (/dd/sourcecode/as):05627                  std   <$0075       save new count
1A9A D674             (/dd/sourcecode/as):05628                  ldb   <$0074       grab pixel mask
1A9C 0D12             (/dd/sourcecode/as):05629                  tst   <$12         flag for left/right movement
1A9E 2607             (/dd/sourcecode/as):05630                  bne   L177D2
1AA0 17FF51           (/dd/sourcecode/as):05631                  lbsr   L1F08       go right one pixel
1AA3 D774             (/dd/sourcecode/as):05632         L177D3   stb   <$0074       save new pixel mask
1AA5 20C4             (/dd/sourcecode/as):05633                  bra   L1760        loop to draw it
                      (/dd/sourcecode/as):05634         
1AA7 17FF5D           (/dd/sourcecode/as):05635         L177D2   lbsr  LeftMV       go left one pixel
1AAA 20F7             (/dd/sourcecode/as):05636                  bra   L177D3
                      (/dd/sourcecode/as):05637                    
                      (/dd/sourcecode/as):05638         * Box entry point
                      (/dd/sourcecode/as):05639         * The optimizations here work because the special-purpose horizintal and
                      (/dd/sourcecode/as):05640         * vertical line routines only check start X,Y and end X OR Y, not BOTH of
                      (/dd/sourcecode/as):05641         * the end X,Y.  We can use this behaviour to leave in end X or Y coordinates
                      (/dd/sourcecode/as):05642         * that we want to use later.
                      (/dd/sourcecode/as):05643         * Possible problem: If the normal line routine is fixed to work properly,
                      (/dd/sourcecode/as):05644         * there won't be much need for the fast vertical line routine, and we'll have
                      (/dd/sourcecode/as):05645         * to fix up the X coordinates here.
1AAC 17FDEA           (/dd/sourcecode/as):05646         L1790    lbsr  I.Line       internal line/bar/box setup
1AAF 2542             (/dd/sourcecode/as):05647                  bcs   L17F9         Error; exit
1AB1 17FE18           (/dd/sourcecode/as):05648                  lbsr  L16A3         Make sure X coords in right order
1AB4 17FF2F           (/dd/sourcecode/as):05649                  lbsr  L1716         Make sure Y coords in right order
1AB7 327C             (/dd/sourcecode/as):05650                  leas  -4,s         Make 4 byte buffer on stack
                      (/dd/sourcecode/as):05651                IFNE  H6309
                      (/dd/sourcecode/as):05652                  ldq   <$47          Copy upper left coords: SX,SY
                      (/dd/sourcecode/as):05653                  stq   ,s           save on the stack
                      (/dd/sourcecode/as):05654                ELSE
1AB9 DC49             (/dd/sourcecode/as):05655                  ldd   <$49
1ABB ED62             (/dd/sourcecode/as):05656                  std   2,s
1ABD DC47             (/dd/sourcecode/as):05657                  ldd   <$47
1ABF EDE4             (/dd/sourcecode/as):05658                  std   ,s
                      (/dd/sourcecode/as):05659                ENDC
1AC1 3420             (/dd/sourcecode/as):05660                  pshs  y             Save window table ptr
                      (/dd/sourcecode/as):05661                IFNE  H6309
                      (/dd/sourcecode/as):05662                  ldw   <$68          Get LSET vector
                      (/dd/sourcecode/as):05663                ELSE
                      (/dd/sourcecode/as):05664         * 6809 - stx <grScrtch / ldx <grScrtch
1AC3 3410             (/dd/sourcecode/as):05665                  pshs  x
1AC5 9E68             (/dd/sourcecode/as):05666                  ldx   <$68
1AC7 9FB5             (/dd/sourcecode/as):05667                  stx   <$B5
1AC9 3510             (/dd/sourcecode/as):05668                  puls  x
                      (/dd/sourcecode/as):05669                ENDC
                      (/dd/sourcecode/as):05670         * enters with SX,SY ; EX,EY
1ACB 17FE12           (/dd/sourcecode/as):05671                  lbsr  L168D         Do fast horizontal line: 0,0 -> X,0
                      (/dd/sourcecode/as):05672         * leaves with $47-$4D = EX+1,SY ; EX,EY
1ACE DC4B             (/dd/sourcecode/as):05673                  ldd   <$4B         grab EX+1 (incremented after line)
1AD0 DD47             (/dd/sourcecode/as):05674                  std   <$47         save proper EX
1AD2 10AEE4           (/dd/sourcecode/as):05675                  ldy   ,s           grab window table pointer again: for L1E9D call
1AD5 17FEEF           (/dd/sourcecode/as):05676                  lbsr  L16F6        Do fast vertical line: X,0 -> X,Y
                      (/dd/sourcecode/as):05677         * leaves with $47-$4D = EX,EY+1 ; EX,EY
1AD8 EC64             (/dd/sourcecode/as):05678                  ldd   4,s          get SY
1ADA DD49             (/dd/sourcecode/as):05679                  std   <$49         save SY again
1ADC EC62             (/dd/sourcecode/as):05680                  ldd   2,s          get SX
1ADE DD47             (/dd/sourcecode/as):05681                  std   <$47         save SX again
1AE0 10AEE4           (/dd/sourcecode/as):05682                  ldy   ,s           get window table ptr
                      (/dd/sourcecode/as):05683         * enters with SX,SY ; EX,EY
1AE3 17FEE1           (/dd/sourcecode/as):05684                  lbsr  L16F6         Do other fast vertical line 0,0 -> 0,Y
                      (/dd/sourcecode/as):05685         * leaves with $47-$4D = SX,EY ; EX,EY
1AE6 10AEE4           (/dd/sourcecode/as):05686                  ldy   ,s           restore window table pointer
1AE9 DC4D             (/dd/sourcecode/as):05687                  ldd   <$4D         grab EY+1 (incremented after line)
1AEB DD49             (/dd/sourcecode/as):05688                  std   <$49         save EY
1AED 17FDF0           (/dd/sourcecode/as):05689                  lbsr  L168D         Do final fast horizontal line: 0,Y -> X,Y
1AF0 3266             (/dd/sourcecode/as):05690                  leas   6,s          Eat stack buffer
1AF2 5F               (/dd/sourcecode/as):05691                  clrb                No error & return
1AF3 7E50F7           (/dd/sourcecode/as):05692         L17F9    jmp   >GrfStrt+SysRet
                      (/dd/sourcecode/as):05693         
                      (/dd/sourcecode/as):05694         * Bar entry point
1AF6 17FDA0           (/dd/sourcecode/as):05695         L17FB    lbsr  I.Line       internal line/bar/box routine
1AF9 2542             (/dd/sourcecode/as):05696                  bcs   L1853
1AFB 17FDCE           (/dd/sourcecode/as):05697                  lbsr  L16A3        Make sure X coords in right order
1AFE 17FEE5           (/dd/sourcecode/as):05698                  lbsr  L1716        Make sure Y coords in right order
                      (/dd/sourcecode/as):05699                IFNE  H6309
                      (/dd/sourcecode/as):05700                  ldw   <$68         Get LSET vector
                      (/dd/sourcecode/as):05701                ELSE
1B01 DC68             (/dd/sourcecode/as):05702                  ldd   <$68
1B03 DDB5             (/dd/sourcecode/as):05703                  std   <$B5
                      (/dd/sourcecode/as):05704                ENDC
                      (/dd/sourcecode/as):05705         * internal BAR routine called from CLS for non-byte boundary clear to EOL
1B05 DC47             (/dd/sourcecode/as):05706         i.bar    ldd   <$0047       grab start X coordinate
1B07 DD99             (/dd/sourcecode/as):05707                  std   <$0099       save it for later
1B09 934B             (/dd/sourcecode/as):05708                  subd  <$4B         take out end X coordinate
                      (/dd/sourcecode/as):05709                IFNE  H6309
                      (/dd/sourcecode/as):05710                  negd               negate it
                      (/dd/sourcecode/as):05711                  incd               add one
                      (/dd/sourcecode/as):05712                ELSE
1B0B 43               (/dd/sourcecode/as):05713                  coma
1B0C 53               (/dd/sourcecode/as):05714                  comb
1B0D C30002           (/dd/sourcecode/as):05715                  addd  #2
                      (/dd/sourcecode/as):05716                ENDC
1B10 DD9B             (/dd/sourcecode/as):05717                  std   <$9B         save for later
1B12 170738           (/dd/sourcecode/as):05718                  lbsr  L1EF1        Set up <$79 bit mask & <$77 bit shft vector
1B15 17F88F           (/dd/sourcecode/as):05719                  lbsr  L1E9D        Calculate scrn ptr & 1st bit mask
1B18 9661             (/dd/sourcecode/as):05720                  lda   <$0061       Get color mask
1B1A DD9D             (/dd/sourcecode/as):05721                  std   <$009D       Save color mask & pixel mask
1B1C DC4D             (/dd/sourcecode/as):05722                  ldd   <$004D
1B1E D04A             (/dd/sourcecode/as):05723                  subb  <$004A
1B20 5C               (/dd/sourcecode/as):05724                  incb  
1B21 1F02             (/dd/sourcecode/as):05725                  tfr   d,y          Move # horizontal lines to draw to Y
1B23 3430             (/dd/sourcecode/as):05726         L1839    pshs  y,x          Preserve # lines left & screen ptr
1B25 109E9B           (/dd/sourcecode/as):05727                  ldy   <$009B
1B28 DC9D             (/dd/sourcecode/as):05728                  ldd   <$009D       Get color & pixel masks
1B2A 17FDC7           (/dd/sourcecode/as):05729                  lbsr  L16B5        Do fast horizontal line
1B2D 3530             (/dd/sourcecode/as):05730                  puls  y,x          Get # lines left & screen ptr
1B2F D663             (/dd/sourcecode/as):05731                  ldb   <$0063       Bump ptr to start of next line in bar
1B31 3A               (/dd/sourcecode/as):05732                  abx   
1B32 0C4A             (/dd/sourcecode/as):05733                  inc   <$004A       Bump up Y coord
1B34 DC99             (/dd/sourcecode/as):05734                  ldd   <$0099       get saved starting X coordinate
1B36 DD47             (/dd/sourcecode/as):05735                  std   <$0047       save as current X coordinate
1B38 313F             (/dd/sourcecode/as):05736                  leay  -1,y         Bump line counter
1B3A 26E7             (/dd/sourcecode/as):05737                  bne   L1839        Draw until done
1B3C 5F               (/dd/sourcecode/as):05738                  clrb               No error & return
1B3D 7E50F7           (/dd/sourcecode/as):05739         L1853    jmp   >GrfStrt+SysRet
                      (/dd/sourcecode/as):05740         
                      (/dd/sourcecode/as):05741         * Circle entry point
1B40 8D2A             (/dd/sourcecode/as):05742         L1856    bsr   L1884          Make sure window is graphics
1B42 DC53             (/dd/sourcecode/as):05743                  ldd   <$53           Get radius (horizontal)
                      (/dd/sourcecode/as):05744                IFNE  H6309
                      (/dd/sourcecode/as):05745                  lsrd                 Calculate vertical radius for 'perfect circle'
                      (/dd/sourcecode/as):05746                ELSE
1B44 44               (/dd/sourcecode/as):05747                  lsra
1B45 56               (/dd/sourcecode/as):05748                  rorb
                      (/dd/sourcecode/as):05749                ENDC
1B46 DD55             (/dd/sourcecode/as):05750                  std   <$55           Vertical radius=Horizontal radius/2
1B48 206C             (/dd/sourcecode/as):05751                  bra   L18BF          Go to appropriate place in ellipse routine
                      (/dd/sourcecode/as):05752         
                      (/dd/sourcecode/as):05753         * Arc entry point
1B4A 8D20             (/dd/sourcecode/as):05754         L1860    bsr   L1884          Make sure window is graphics
1B4C 17066D           (/dd/sourcecode/as):05755                  lbsr  L1E05          Go scale start 'clip' coords, check if legal
1B4F 25EC             (/dd/sourcecode/as):05756                  bcs   L1853          Illegal coordinate, exit with error
1B51 170692           (/dd/sourcecode/as):05757                  lbsr  L1E24          Go scale end 'clip' coords, check if legal
1B54 25E7             (/dd/sourcecode/as):05758                  bcs   L1853          Illegal coordinate, exit with error
1B56 DC20             (/dd/sourcecode/as):05759                  ldd   <$0020         Get start clip X coord
1B58 109324           (/dd/sourcecode/as):05760                  cmpd  <$0024         Same as end clip X coord?
1B5B 261F             (/dd/sourcecode/as):05761                  bne   L188E          No, skip ahead
1B5D 8E5DD5           (/dd/sourcecode/as):05762                  ldx   #GrfStrt+L1A9D Point to vertical line clip vector
1B60 DC22             (/dd/sourcecode/as):05763                  ldd   <$0022         Get start clip Y coord
1B62 109326           (/dd/sourcecode/as):05764                  cmpd  <$0026         Same as end clip Y coord?
1B65 2D52             (/dd/sourcecode/as):05765                  blt   L18B3          If lower, skip ahead
1B67 8E5DDC           (/dd/sourcecode/as):05766                  ldx   #GrfStrt+L1AA4 End X clip is to right of Start vector
1B6A 204D             (/dd/sourcecode/as):05767                  bra   L18B3          Go save vector & continue
                      (/dd/sourcecode/as):05768         
1B6C 17E58B           (/dd/sourcecode/as):05769         L1884    lbsr  L0177          Map in window
1B6F D660             (/dd/sourcecode/as):05770                  ldb   <$60           Get screen type
1B71 102BE9BE         (/dd/sourcecode/as):05771                  lbmi  L0569          If text, return with Error 192
1B75 E62E             (/dd/sourcecode/as):05772                  ldb   Wt.PBlk,y      Get Pattern memory block
1B77 273A             (/dd/sourcecode/as):05773                  beq   L18BC          None, exit to a convenient RTS
1B79 16FCA5           (/dd/sourcecode/as):05774                  lbra  L017C          Map that block in
                      (/dd/sourcecode/as):05775         
                      (/dd/sourcecode/as):05776         * Different X coord clip coords
1B7C 9E22             (/dd/sourcecode/as):05777         L188E    ldx   <$0022         Get start Y coord
1B7E 9C26             (/dd/sourcecode/as):05778                  cmpx  <$0026         Same as end Y coord?
1B80 260D             (/dd/sourcecode/as):05779                  bne   L18A3          No, skip ahead
1B82 8E5DE3           (/dd/sourcecode/as):05780                  ldx   #GrfStrt+L1AAB Point to horizontal line clip vector
1B85 109324           (/dd/sourcecode/as):05781                  cmpd  <$0024         Is start X coord left of end X coord?
1B88 2D2F             (/dd/sourcecode/as):05782                  blt   L18B3          Yes, use this vector
1B8A 8E5DE9           (/dd/sourcecode/as):05783                  ldx   #GrfStrt+L1AB1 Point to horizontal line/to right vector
1B8D 202A             (/dd/sourcecode/as):05784                  bra   L18B3          Go save the vector & continue
                      (/dd/sourcecode/as):05785         
                      (/dd/sourcecode/as):05786         * Different X & Y clip coords
1B8F 8E5DEF           (/dd/sourcecode/as):05787         L18A3    ldx   #GrfStrt+L1AB7 Point to 'normal' Arc Clip line vector
1B92 DC20             (/dd/sourcecode/as):05788                  ldd   <$0020         Get start X coord
1B94 9324             (/dd/sourcecode/as):05789                  subd  <$0024         Calculate X clip line width
1B96 DD97             (/dd/sourcecode/as):05790                  std   <$0097         Save it
1B98 DC22             (/dd/sourcecode/as):05791                  ldd   <$0022         Get start Y coord
1B9A 9326             (/dd/sourcecode/as):05792                  subd  <$0026         Calculate Y clip line height
1B9C DD99             (/dd/sourcecode/as):05793                  std   <$0099         Save it
1B9E 2019             (/dd/sourcecode/as):05794                  bra   L18B3          Go save vector & continue
                      (/dd/sourcecode/as):05795         
1BA0 1702ED           (/dd/sourcecode/as):05796         L18B7    lbsr  L1B3B          Copy 5 byte integer from ,Y to ,X
                      (/dd/sourcecode/as):05797         * Shift 5 byte number pointed to by X to the left 1 bit
1BA3 6804             (/dd/sourcecode/as):05798         L1BDD    lsl   4,x            (four 7 cycles & one 6 cycle)
                      (/dd/sourcecode/as):05799                IFNE  H6309
                      (/dd/sourcecode/as):05800                  ldq   ,x             Get rest of 5 byte #
                      (/dd/sourcecode/as):05801                  rolw                 Shift it all left
                      (/dd/sourcecode/as):05802                  rold
                      (/dd/sourcecode/as):05803                  stq   ,x             Store result
                      (/dd/sourcecode/as):05804                ELSE
1BA5 EC02             (/dd/sourcecode/as):05805                  ldd   2,x
1BA7 59               (/dd/sourcecode/as):05806                  rolb
1BA8 49               (/dd/sourcecode/as):05807                  rola
1BA9 ED02             (/dd/sourcecode/as):05808                  std   2,x
1BAB DDB5             (/dd/sourcecode/as):05809                  std   <$B5
1BAD EC84             (/dd/sourcecode/as):05810                  ldd   ,x
1BAF 59               (/dd/sourcecode/as):05811                  rolb
1BB0 49               (/dd/sourcecode/as):05812                  rola
1BB1 ED84             (/dd/sourcecode/as):05813                  std   ,x
                      (/dd/sourcecode/as):05814                ENDC
1BB3 39               (/dd/sourcecode/as):05815         L18BC    rts                  Exit
                      (/dd/sourcecode/as):05816         
                      (/dd/sourcecode/as):05817         * Ellipse entry point
1BB4 8DB6             (/dd/sourcecode/as):05818         L18BD    bsr   L1884          Make sure we are on graphics screen
1BB6 8E5DF3           (/dd/sourcecode/as):05819         L18BF    ldx   #GrfStrt+L1ABB Point to 'no clipping' routine
1BB9 9FA1             (/dd/sourcecode/as):05820         L18B3    stx   <$A1           Preserve clipping vector
                      (/dd/sourcecode/as):05821         * Clipping vector setup, start processing ARC
1BBB 1705D4           (/dd/sourcecode/as):05822         L18C5    lbsr  L1DF6          Make sure coord's & scaling will work
1BBE 2503             (/dd/sourcecode/as):05823                  bcs   L18D4          Error, return to system with error #
1BC0 170627           (/dd/sourcecode/as):05824                  lbsr  L1E28          Go make sure X & Y Radius values are legit
1BC3 10250182         (/dd/sourcecode/as):05825         L18D4    lbcs  L1A75          Nope, exit with error
                      (/dd/sourcecode/as):05826                IFNE  H6309
                      (/dd/sourcecode/as):05827                  ldq   <$47           Get Draw pointer's X & Y Coordinates
                      (/dd/sourcecode/as):05828                  stq   <$18           Make working copies
                      (/dd/sourcecode/as):05829                  clrd                 Set some variable to 0
                      (/dd/sourcecode/as):05830                ELSE
1BC7 DC47             (/dd/sourcecode/as):05831                  ldd   <$47
1BC9 DD18             (/dd/sourcecode/as):05832                  std   <$18
1BCB DC49             (/dd/sourcecode/as):05833                  ldd   <$49
1BCD DD1A             (/dd/sourcecode/as):05834                  std   <$1A
1BCF 4F               (/dd/sourcecode/as):05835                  clra
1BD0 5F               (/dd/sourcecode/as):05836                  clrb
                      (/dd/sourcecode/as):05837                ENDC
1BD1 DD1C             (/dd/sourcecode/as):05838                  std   <$1C           Store it
1BD3 DC55             (/dd/sourcecode/as):05839                  ldd   <$55           Get Y radius value
1BD5 DD1E             (/dd/sourcecode/as):05840                  std   <$1E           Move to working area
1BD7 32E8C2           (/dd/sourcecode/as):05841                  leas  <-$3E,s        Make a 62 byte working stack area
1BDA 10AFE83C         (/dd/sourcecode/as):05842                  sty   <$3C,s         Preserve Y in last 2 bytes of stack area
1BDE 3065             (/dd/sourcecode/as):05843                  leax  $05,s          Point X into stack working area
1BE0 DC53             (/dd/sourcecode/as):05844                  ldd   <$0053         Get horizontal radius
1BE2 1702FA           (/dd/sourcecode/as):05845                  lbsr  L1BA1.0      ATD: lbsr L1B32 moved for size
                      (/dd/sourcecode/as):05846         * 6809/6309: leay ,x
1BE5 1F12             (/dd/sourcecode/as):05847                  tfr   x,y
1BE7 30E814           (/dd/sourcecode/as):05848                  leax  <$14,s
1BEA DC55             (/dd/sourcecode/as):05849                  ldd   <$0055
1BEC 170302           (/dd/sourcecode/as):05850                  lbsr  L1BB1
1BEF 306A             (/dd/sourcecode/as):05851                  leax  $0A,s
1BF1 8DAD             (/dd/sourcecode/as):05852                  bsr   L18B7
                      (/dd/sourcecode/as):05853         * 6809/6309: leay ,x
1BF3 1F12             (/dd/sourcecode/as):05854                  tfr   x,y
1BF5 306F             (/dd/sourcecode/as):05855                  leax  $0F,s
1BF7 8DA7             (/dd/sourcecode/as):05856                  bsr   L18B7
1BF9 30E819           (/dd/sourcecode/as):05857                  leax  <$19,s
1BFC DC55             (/dd/sourcecode/as):05858                  ldd   <$0055
1BFE 1702DE           (/dd/sourcecode/as):05859                  lbsr  L1BA1.0      ATD: lbsr L1B32 moved for size
                      (/dd/sourcecode/as):05860         * 6809/6309: leay ,x
1C01 1F12             (/dd/sourcecode/as):05861                  tfr   x,y
1C03 30E81E           (/dd/sourcecode/as):05862                  leax  <$1E,s
1C06 8D98             (/dd/sourcecode/as):05863                  bsr   L18B7
                      (/dd/sourcecode/as):05864         * 6809/6309: leay ,x
1C08 1F12             (/dd/sourcecode/as):05865                  tfr   x,y
1C0A 30E823           (/dd/sourcecode/as):05866                  leax  <$23,s
1C0D 8D91             (/dd/sourcecode/as):05867                  bsr   L18B7
1C0F 30E828           (/dd/sourcecode/as):05868                  leax  <$28,s
1C12 17026A           (/dd/sourcecode/as):05869                  lbsr  L1B32.0      ATD: CLRD moved for size
1C15 30E82D           (/dd/sourcecode/as):05870                  leax  <$2D,s
1C18 DC1E             (/dd/sourcecode/as):05871                  ldd   <$001E
1C1A 170264           (/dd/sourcecode/as):05872                  lbsr  L1B32
                      (/dd/sourcecode/as):05873                IFNE  H6309
                      (/dd/sourcecode/as):05874                  decd                    Doesn't affect circle
                      (/dd/sourcecode/as):05875                ELSE
1C1D 830001           (/dd/sourcecode/as):05876                  subd  #1
                      (/dd/sourcecode/as):05877                ENDC
1C20 1702BE           (/dd/sourcecode/as):05878                  lbsr  L1BA1
1C23 316A             (/dd/sourcecode/as):05879                  leay  $0A,s
1C25 1702CB           (/dd/sourcecode/as):05880                  lbsr  L1BB4
1C28 3165             (/dd/sourcecode/as):05881                  leay  $05,s
1C2A 8D7B             (/dd/sourcecode/as):05882                  bsr   L19C3
1C2C 30E4             (/dd/sourcecode/as):05883                  leax  ,s
1C2E 8D7D             (/dd/sourcecode/as):05884                  bsr   L19C6
1C30 17027A           (/dd/sourcecode/as):05885                  lbsr  L1B63        ATD: LDD moved for size
1C33 31E81E           (/dd/sourcecode/as):05886                  leay  <$1E,s
1C36 1702BA           (/dd/sourcecode/as):05887                  lbsr  L1BB4
                      (/dd/sourcecode/as):05888         * 6809/6309: leay ,x
1C39 1F12             (/dd/sourcecode/as):05889                  tfr   x,y
1C3B 8D67             (/dd/sourcecode/as):05890                  bsr   L19C3.0      ATD: LEAX moved for size
1C3D 30E832           (/dd/sourcecode/as):05891                  leax  <$32,s
1C40 8D68             (/dd/sourcecode/as):05892                  bsr   L19C6.0      ATD: LEAY moved for size
1C42 8D5B             (/dd/sourcecode/as):05893                  bsr   L19C0.0      ATD: LDD moved for size
1C44 30E837           (/dd/sourcecode/as):05894                  leax  <$37,s
1C47 31E81E           (/dd/sourcecode/as):05895                  leay  <$1E,s
1C4A 170243           (/dd/sourcecode/as):05896                  lbsr  L1B3B
1C4D 30E814           (/dd/sourcecode/as):05897         L1970    leax  <$14,s
1C50 31E828           (/dd/sourcecode/as):05898                  leay  <$28,s
1C53 17030D           (/dd/sourcecode/as):05899                  lbsr  L1C2E
1C56 2F5B             (/dd/sourcecode/as):05900                  ble   L19CC
1C58 1700F1           (/dd/sourcecode/as):05901                  lbsr  L1A78
1C5B 6DE82D           (/dd/sourcecode/as):05902                  tst   <$2D,s
1C5E 2B22             (/dd/sourcecode/as):05903                  bmi   L19A0
1C60 30E832           (/dd/sourcecode/as):05904                  leax  <$32,s
1C63 316F             (/dd/sourcecode/as):05905                  leay  $0F,s
1C65 8D40             (/dd/sourcecode/as):05906                  bsr   L19C3
                      (/dd/sourcecode/as):05907         * 6809/6309: leay ,x
1C67 1F12             (/dd/sourcecode/as):05908                  tfr   x,y
1C69 8D39             (/dd/sourcecode/as):05909                  bsr   L19C3.0      ATD: LEAX moved for size
1C6B 30E814           (/dd/sourcecode/as):05910                  leax  <$14,s
1C6E 3165             (/dd/sourcecode/as):05911                  leay  $05,s
                      (/dd/sourcecode/as):05912         
                      (/dd/sourcecode/as):05913         * [X] = [X] - [Y] : leave [Y] alone
                      (/dd/sourcecode/as):05914         * ONLY called once.  Moving it would save 1 byte (rts) (save LBSR, convert
                      (/dd/sourcecode/as):05915         * 3 BSRs to LBSRs), and save
                      (/dd/sourcecode/as):05916         * one LBSR/rts (11 cycles), and convert 3 BSR to LBSR (+3)
                      (/dd/sourcecode/as):05917         * can also get rid of superfluous exg x,y at the end of the routine
                      (/dd/sourcecode/as):05918         * used to be a stand-alone routine
1C70 1702D1           (/dd/sourcecode/as):05919         L1B92    lbsr  L1C11.0      negate 5 byte [Y]: ATD: EXG X,Y moved for size
1C73 1E12             (/dd/sourcecode/as):05920                  exg   x,y
1C75 17024F           (/dd/sourcecode/as):05921                  lbsr  L1B7A        40 bit add: [X] = [X] + [Y]
1C78 1702C9           (/dd/sourcecode/as):05922                  lbsr  L1C11.0      negate 5 byte int: ATD: EXG X,Y moved for size
1C7B DC1E             (/dd/sourcecode/as):05923                  ldd   <$001E
                      (/dd/sourcecode/as):05924                IFNE  H6309
                      (/dd/sourcecode/as):05925                  decd                   Doesn't affect circle
                      (/dd/sourcecode/as):05926                ELSE
1C7D 830001           (/dd/sourcecode/as):05927                  subd  #1
                      (/dd/sourcecode/as):05928                ENDC
1C80 DD1E             (/dd/sourcecode/as):05929                  std   <$001E
1C82 30E837           (/dd/sourcecode/as):05930         L19A0    leax  <$37,s
1C85 31E823           (/dd/sourcecode/as):05931                  leay  <$23,s
1C88 8D1D             (/dd/sourcecode/as):05932                  bsr   L19C3
                      (/dd/sourcecode/as):05933         * 6809/6309: leay ,x
1C8A 1F12             (/dd/sourcecode/as):05934                  tfr   x,y
1C8C 8D16             (/dd/sourcecode/as):05935                  bsr   L19C3.0      ATD: LEAX moved for size
1C8E 30E828           (/dd/sourcecode/as):05936                  leax  <$28,s
1C91 31E819           (/dd/sourcecode/as):05937                  leay  <$19,s
1C94 8D11             (/dd/sourcecode/as):05938                  bsr   L19C3
1C96 DC1C             (/dd/sourcecode/as):05939                  ldd   <$001C
                      (/dd/sourcecode/as):05940                IFNE  H6309
                      (/dd/sourcecode/as):05941                  incd                   Doesn't affect circle
                      (/dd/sourcecode/as):05942                ELSE
1C98 C30001           (/dd/sourcecode/as):05943                  addd  #1
                      (/dd/sourcecode/as):05944                ENDC
1C9B DD1C             (/dd/sourcecode/as):05945                  std   <$001C
1C9D 20AE             (/dd/sourcecode/as):05946                  bra   L1970
                      (/dd/sourcecode/as):05947         
1C9F DC1E             (/dd/sourcecode/as):05948         L19C0.0  ldd   <$001E       ATD: moved here for size
1CA1 7E5EE1           (/dd/sourcecode/as):05949         L19C0    jmp   >GrfStrt+L1BA1
                      (/dd/sourcecode/as):05950         
1CA4 30E82F           (/dd/sourcecode/as):05951         L19C3.0  leax  <$2D+2,s       ATD: moved here for size
1CA7 7E5EC7           (/dd/sourcecode/as):05952         L19C3    jmp   >GrfStrt+L1B7A   add 40 bit [X] = [X] + [Y]
                      (/dd/sourcecode/as):05953         
1CAA 31E811           (/dd/sourcecode/as):05954         L19C6.0  leay  <$0F+2,s        ATD: moved here for size
1CAD 1701E0           (/dd/sourcecode/as):05955         L19C6    lbsr  L1B3B
1CB0 7E5F46           (/dd/sourcecode/as):05956                  jmp   >GrfStrt+L1C11  negate 5-byte integer
                      (/dd/sourcecode/as):05957         
1CB3 30E82D           (/dd/sourcecode/as):05958         L19CC    leax  <$2D,s
1CB6 DC1C             (/dd/sourcecode/as):05959                  ldd   <$001C
1CB8 1701C6           (/dd/sourcecode/as):05960                  lbsr  L1B32
                      (/dd/sourcecode/as):05961                IFNE  H6309
                      (/dd/sourcecode/as):05962                  incd                   Doesn't affect circle
                      (/dd/sourcecode/as):05963                ELSE
1CBB C30001           (/dd/sourcecode/as):05964                  addd  #1
                      (/dd/sourcecode/as):05965                ENDC
1CBE 8DE1             (/dd/sourcecode/as):05966                  bsr   L19C0
1CC0 31E81E           (/dd/sourcecode/as):05967                  leay  <$1E,s
1CC3 17022D           (/dd/sourcecode/as):05968                  lbsr  L1BB4
1CC6 30E4             (/dd/sourcecode/as):05969                  leax  ,s
1CC8 DC1E             (/dd/sourcecode/as):05970                  ldd   <$001E
1CCA 1701B4           (/dd/sourcecode/as):05971                  lbsr  L1B32
1CCD 830002           (/dd/sourcecode/as):05972                  subd  #$0002
1CD0 8DCF             (/dd/sourcecode/as):05973                  bsr   L19C0
1CD2 1701D8           (/dd/sourcecode/as):05974                  lbsr  L1B63        ATD: LDD moved for size
1CD5 316A             (/dd/sourcecode/as):05975                  leay  $0A,s
1CD7 170219           (/dd/sourcecode/as):05976                  lbsr  L1BB4
                      (/dd/sourcecode/as):05977         * 6809/6309: leay ,x
1CDA 1F12             (/dd/sourcecode/as):05978                  tfr   x,y
1CDC 8DC6             (/dd/sourcecode/as):05979                  bsr   L19C3.0      ATD: LEAX moved for size
1CDE 30E4             (/dd/sourcecode/as):05980                  leax  ,s
1CE0 316A             (/dd/sourcecode/as):05981                  leay  $0A,s
1CE2 8DC9             (/dd/sourcecode/as):05982                  bsr   L19C6
1CE4 1701C6           (/dd/sourcecode/as):05983                  lbsr  L1B63        ATD: LDD moved for size
1CE7 31E819           (/dd/sourcecode/as):05984                  leay  <$19,s
1CEA 170206           (/dd/sourcecode/as):05985                  lbsr  L1BB4
                      (/dd/sourcecode/as):05986         * 6809/6309: leay ,x
1CED 1F12             (/dd/sourcecode/as):05987                  tfr   x,y
1CEF 8DB3             (/dd/sourcecode/as):05988                  bsr   L19C3.0      ATD: LEAX moved for size
1CF1 30E832           (/dd/sourcecode/as):05989                  leax  <$32,s
1CF4 31E823           (/dd/sourcecode/as):05990                  leay  <$23,s
1CF7 170196           (/dd/sourcecode/as):05991                  lbsr  L1B3B
1CFA DC1C             (/dd/sourcecode/as):05992                  ldd   <$001C
1CFC 8DA3             (/dd/sourcecode/as):05993                  bsr   L19C0
1CFE 30E837           (/dd/sourcecode/as):05994                  leax  <$37,s
1D01 8DA7             (/dd/sourcecode/as):05995                  bsr   L19C6.0      ATD: LEAY moved for size
1D03 8D9A             (/dd/sourcecode/as):05996                  bsr   L19C0.0      ATD: LDD moved for size
1D05 316A             (/dd/sourcecode/as):05997                  leay  $0A,s
1D07 8D9E             (/dd/sourcecode/as):05998                  bsr   L19C3
1D09 DC1E             (/dd/sourcecode/as):05999         L1A32    ldd   <$001E
1D0B 1083FFFF         (/dd/sourcecode/as):06000                  cmpd  #$FFFF       change to INCD?
1D0F 2734             (/dd/sourcecode/as):06001                  beq   L1A71        won't be affected by INCD: exit routine
1D11 8D39             (/dd/sourcecode/as):06002                  bsr   L1A78        draw pixel: shouldn't be affected by INCD
1D13 6DE82D           (/dd/sourcecode/as):06003                  tst   <$2D,s
1D16 2A13             (/dd/sourcecode/as):06004                  bpl   L1A57
1D18 30E832           (/dd/sourcecode/as):06005                  leax  <$32,s
1D1B 31E823           (/dd/sourcecode/as):06006                  leay  <$23,s
1D1E 8D22             (/dd/sourcecode/as):06007                  bsr   L1A6E
                      (/dd/sourcecode/as):06008         * 6809/6309: leay ,x
1D20 1F12             (/dd/sourcecode/as):06009                  tfr   x,y
1D22 8D1B             (/dd/sourcecode/as):06010                  bsr   L1A6E.0      ATD: LEAX moved for size
1D24 DC1C             (/dd/sourcecode/as):06011                  ldd   <$001C
                      (/dd/sourcecode/as):06012                IFNE  H6309
                      (/dd/sourcecode/as):06013                  incd                   Doesn't affect Circle
                      (/dd/sourcecode/as):06014                ELSE
1D26 C30001           (/dd/sourcecode/as):06015                  addd  #1
                      (/dd/sourcecode/as):06016                ENDC
1D29 DD1C             (/dd/sourcecode/as):06017                  std   <$001C
1D2B 30E837           (/dd/sourcecode/as):06018         L1A57    leax  <$37,s
1D2E 316F             (/dd/sourcecode/as):06019                  leay  $0F,s
1D30 8D10             (/dd/sourcecode/as):06020                  bsr   L1A6E
                      (/dd/sourcecode/as):06021         * 6809/6309: leay ,x
1D32 1F12             (/dd/sourcecode/as):06022                  tfr   x,y
1D34 8D09             (/dd/sourcecode/as):06023                  bsr   L1A6E.0      ATD: LEAX moved for size
1D36 DC1E             (/dd/sourcecode/as):06024                  ldd   <$001E
                      (/dd/sourcecode/as):06025                IFNE  H6309
                      (/dd/sourcecode/as):06026                  decd                   Doesn't affect circle
                      (/dd/sourcecode/as):06027                ELSE
1D38 830001           (/dd/sourcecode/as):06028                  subd  #1
                      (/dd/sourcecode/as):06029                ENDC
1D3B DD1E             (/dd/sourcecode/as):06030                  std   <$001E
1D3D 20CA             (/dd/sourcecode/as):06031                  bra   L1A32
                      (/dd/sourcecode/as):06032         
1D3F 30E82F           (/dd/sourcecode/as):06033         L1A6E.0  leax  <$2D+2,s       ATD: moved here for size
1D42 7E5EC7           (/dd/sourcecode/as):06034         L1A6E    jmp   >GrfStrt+L1B7A
                      (/dd/sourcecode/as):06035         
1D45 32E83E           (/dd/sourcecode/as):06036         L1A71    leas  <$3E,s
1D48 5F               (/dd/sourcecode/as):06037                  clrb
1D49 7E50F7           (/dd/sourcecode/as):06038         L1A75    jmp   >GrfStrt+SysRet
                      (/dd/sourcecode/as):06039         
                      (/dd/sourcecode/as):06040         * Draw all 4 points that one calculation covers (opposite corners)
                      (/dd/sourcecode/as):06041         * (Ellipse & Circle)
1D4C 10AEE83E         (/dd/sourcecode/as):06042         L1A78    ldy   <$3E,s       Get window table ptr back (for [>GrfMem+gr00A1])
1D50 DC1C             (/dd/sourcecode/as):06043                  ldd   <$001C       grab current X offset from center
1D52 9E1E             (/dd/sourcecode/as):06044                  ldx   <$001E       grab current Y offset from center
                      (/dd/sourcecode/as):06045         * At this point, add check for filled flag. If set, put x,y pairs in
                      (/dd/sourcecode/as):06046         * for line command call (with bounds checking) & call line routine 2 times
                      (/dd/sourcecode/as):06047         * (once for top line, once for bottom line)
1D54 0DB2             (/dd/sourcecode/as):06048                  tst   <$b2         We doing a Filled Ellipse/Circle?
1D56 2761             (/dd/sourcecode/as):06049                  beq   NotFill      No, do normal
1D58 8D40             (/dd/sourcecode/as):06050                  bsr   SetX         Do any adjustments to start X needed
1D5A DD47             (/dd/sourcecode/as):06051                  std   <$47         Save as start X
1D5C DDAD             (/dd/sourcecode/as):06052                  std   <$AD         Save copy
1D5E DC1C             (/dd/sourcecode/as):06053                  ldd   <$1C         Get current X offset again
                      (/dd/sourcecode/as):06054                IFNE  H6309
                      (/dd/sourcecode/as):06055                  negd               Negate for coord on other side of radius
                      (/dd/sourcecode/as):06056                ELSE
1D60 43               (/dd/sourcecode/as):06057                  coma
1D61 53               (/dd/sourcecode/as):06058                  comb
1D62 C30001           (/dd/sourcecode/as):06059                  addd  #1
                      (/dd/sourcecode/as):06060                ENDC
1D65 8D33             (/dd/sourcecode/as):06061                  bsr   SetX         Do any adjustments
1D67 DD4B             (/dd/sourcecode/as):06062                  std   <$4b         Save end X coord
1D69 DDAF             (/dd/sourcecode/as):06063                  std   <$AF         Save Copy
1D6B 1F10             (/dd/sourcecode/as):06064                  tfr   x,d          Copy current Y offset into D
1D6D 3470             (/dd/sourcecode/as):06065                  pshs  x,y,u        Preserve regs for HLine call
1D6F 8D18             (/dd/sourcecode/as):06066                  bsr   DoHLine      Do line (if necessary)
1D71 10AE62           (/dd/sourcecode/as):06067                  ldy   2,s          Get window table ptr back for checks
                      (/dd/sourcecode/as):06068                IFNE  H6309
                      (/dd/sourcecode/as):06069                  ldq   <$AD         Get original X coords back
                      (/dd/sourcecode/as):06070                  std   <$47         Save Start X
                      (/dd/sourcecode/as):06071                  stw   <$4b         Save End X
                      (/dd/sourcecode/as):06072                ELSE
1D74 DCAF             (/dd/sourcecode/as):06073                  ldd   <$AF
1D76 DDB5             (/dd/sourcecode/as):06074                  std   <$B5
1D78 DD4B             (/dd/sourcecode/as):06075                  std   <$4b
1D7A DCAD             (/dd/sourcecode/as):06076                  ldd   <$AD
1D7C DD47             (/dd/sourcecode/as):06077                  std   <$47
                      (/dd/sourcecode/as):06078                ENDC
1D7E ECE4             (/dd/sourcecode/as):06079                  ldd   ,s           Get Y coord back
                      (/dd/sourcecode/as):06080                IFNE  H6309
                      (/dd/sourcecode/as):06081                  negd               Negate for coord on other side of radius
                      (/dd/sourcecode/as):06082                ELSE
1D80 43               (/dd/sourcecode/as):06083                  coma
1D81 53               (/dd/sourcecode/as):06084                  comb
1D82 C30001           (/dd/sourcecode/as):06085                  addd  #1
                      (/dd/sourcecode/as):06086                ENDC
1D85 8D02             (/dd/sourcecode/as):06087                  bsr   DoHLine      Do line (if necessary)
1D87 35F0             (/dd/sourcecode/as):06088                  puls  x,y,u,pc     Restore regs & return
                      (/dd/sourcecode/as):06089         
                      (/dd/sourcecode/as):06090         * NOTE: THIS WILL MODIFY <$47 AS IT GOES THROUGH THE LINE!
1D89 8D20             (/dd/sourcecode/as):06091         DoHLine  bsr   SetY         Do Y adjustments
1D8B 81FF             (/dd/sourcecode/as):06092                  cmpa  #$FF         Off window?
1D8D 2718             (/dd/sourcecode/as):06093                  beq   SaveStrX     Yes, return without drawing
1D8F DD49             (/dd/sourcecode/as):06094                  std   <$49         Save Y coord for fast horizontal line
                      (/dd/sourcecode/as):06095                IFNE  H6309
                      (/dd/sourcecode/as):06096                  ldw   <$68         Get LSET vector
                      (/dd/sourcecode/as):06097                ELSE
1D91 DE68             (/dd/sourcecode/as):06098                  ldu   <$68
1D93 DFB5             (/dd/sourcecode/as):06099                  stu   <$B5
                      (/dd/sourcecode/as):06100                ENDC
1D95 DE64             (/dd/sourcecode/as):06101                  ldu   <$64         Get PSET vector
1D97 7E58DE           (/dd/sourcecode/as):06102                  jmp   >GrfStrt+L168B Call fast horizontal line & return from there
                      (/dd/sourcecode/as):06103         
                      (/dd/sourcecode/as):06104         * Calc X coord & make sure in range
1D9A D318             (/dd/sourcecode/as):06105         SetX     addd  <$18         Add X center point
1D9C 2B0A             (/dd/sourcecode/as):06106                  bmi   OffLeft      Off left hand side, use 0
1D9E 10A3A81B         (/dd/sourcecode/as):06107                  cmpd  Wt.MaxX,y    Past right hand side?
1DA2 2303             (/dd/sourcecode/as):06108                  bls   SaveStrX     No, save start X
1DA4 ECA81B           (/dd/sourcecode/as):06109                  ldd   Wt.MaxX,y    Get right side of window
1DA7 39               (/dd/sourcecode/as):06110         SaveStrX rts
                      (/dd/sourcecode/as):06111         
     1DA8             (/dd/sourcecode/as):06112         OffLeft  equ   *
                      (/dd/sourcecode/as):06113                IFNE  H6309
                      (/dd/sourcecode/as):06114                  clrd               0 X Coord start
                      (/dd/sourcecode/as):06115                ELSE
1DA8 4F               (/dd/sourcecode/as):06116                  clra
1DA9 5F               (/dd/sourcecode/as):06117                  clrb
                      (/dd/sourcecode/as):06118                ENDC
1DAA 39               (/dd/sourcecode/as):06119                  rts
                      (/dd/sourcecode/as):06120         
                      (/dd/sourcecode/as):06121         * Calc Y coord & make sure in range
1DAB D31A             (/dd/sourcecode/as):06122         SetY     addd  <$1a         Add Y center point
1DAD 2B07             (/dd/sourcecode/as):06123                  bmi   OffTop       Off top, not drawable
1DAF 10A3A81D         (/dd/sourcecode/as):06124                  cmpd  Wt.MaxY,y    Past bottom?
1DB3 2201             (/dd/sourcecode/as):06125                  bhi   OffTop       Yes, not drawable
1DB5 39               (/dd/sourcecode/as):06126         SaveStrY rts
                      (/dd/sourcecode/as):06127         
1DB6 86FF             (/dd/sourcecode/as):06128         OffTop   lda   #$FF         Flag that it is off the window
1DB8 39               (/dd/sourcecode/as):06129                  rts
                      (/dd/sourcecode/as):06130         
                      (/dd/sourcecode/as):06131         * Not filled circle or ellipse
1DB9 8D14             (/dd/sourcecode/as):06132         NotFill  bsr   L1A97        Draw X,Y
                      (/dd/sourcecode/as):06133                IFNE  H6309
                      (/dd/sourcecode/as):06134                  negd               invert X
                      (/dd/sourcecode/as):06135                ELSE
1DBB 43               (/dd/sourcecode/as):06136                  coma
1DBC 53               (/dd/sourcecode/as):06137                  comb
1DBD C30001           (/dd/sourcecode/as):06138                  addd  #1
                      (/dd/sourcecode/as):06139                ENDC
1DC0 8D0D             (/dd/sourcecode/as):06140                  bsr   L1A97        Draw -X,Y
1DC2 1E01             (/dd/sourcecode/as):06141                  exg   d,x          Invert Y
                      (/dd/sourcecode/as):06142                IFNE  H6309
                      (/dd/sourcecode/as):06143                  negd               invert X
                      (/dd/sourcecode/as):06144                ELSE
1DC4 43               (/dd/sourcecode/as):06145                  coma
1DC5 53               (/dd/sourcecode/as):06146                  comb
1DC6 C30001           (/dd/sourcecode/as):06147                  addd  #1
                      (/dd/sourcecode/as):06148                ENDC
1DC9 1E01             (/dd/sourcecode/as):06149                  exg   d,x
1DCB 8D02             (/dd/sourcecode/as):06150                  bsr   L1A97        Draw inverted X, inverted Y pixel
1DCD DC1C             (/dd/sourcecode/as):06151                  ldd   <$001C       Last, draw X,-Y
1DCF 3416             (/dd/sourcecode/as):06152         L1A97    pshs  x,d          Preserve x,y coords
1DD1 6E9F11A1         (/dd/sourcecode/as):06153                  jmp   [>GrfMem+gr00A1]     Draw point (L1ABB if circle/ellipse)
                      (/dd/sourcecode/as):06154         
                      (/dd/sourcecode/as):06155         * NOTE: THE FOLLOWING 6 LABELS (L1A9D, L1AA4, L1AAB, L1AB1, L1AB7 & L1ABB)
                      (/dd/sourcecode/as):06156         *   ARE POINTED TO BY >GrfMem+gr00A1, DEPENDING ON WHETHER ARC IS ON OR NOT, AND THE
                      (/dd/sourcecode/as):06157         *   COORDINATES ARE WITHIN CERTAIN BOUNDARIES. THE ENTRY CONDITIONS FOR ALL
                      (/dd/sourcecode/as):06158         *   6 OF THESE ARE:
                      (/dd/sourcecode/as):06159         * D=X coord offset from center point
                      (/dd/sourcecode/as):06160         * X=Y coord offset from center point
                      (/dd/sourcecode/as):06161         * (ARC) Vertical clip line, start Y > end Y coord vector
1DD5 109320           (/dd/sourcecode/as):06162         L1A9D    cmpd  <$0020       >= start clip X coord?
1DD8 2C19             (/dd/sourcecode/as):06163                  bge   L1ABB        Yes, go draw point
1DDA 3596             (/dd/sourcecode/as):06164                  puls  pc,x,d       No, return
                      (/dd/sourcecode/as):06165         
                      (/dd/sourcecode/as):06166         * (ARC) Vertical clip line, start Y < end Y coord vector
1DDC 109320           (/dd/sourcecode/as):06167         L1AA4    cmpd  <$0020       <= start clip X coord?
1DDF 2F12             (/dd/sourcecode/as):06168                  ble   L1ABB        Yes, go draw point
1DE1 3596             (/dd/sourcecode/as):06169                  puls  pc,x,d       No, return
                      (/dd/sourcecode/as):06170         
                      (/dd/sourcecode/as):06171         * (ARC) Horizontal clip line, start X < end X coord vector
1DE3 9C22             (/dd/sourcecode/as):06172         L1AAB    cmpx  <$0022       <= start clip Y coord?
1DE5 2F0C             (/dd/sourcecode/as):06173                  ble   L1ABB        Yes, go draw point
1DE7 3596             (/dd/sourcecode/as):06174                  puls  pc,x,d       No, return
                      (/dd/sourcecode/as):06175         
                      (/dd/sourcecode/as):06176         * (ARC) Horizontal clip line, start X > end X coord vector
1DE9 9C22             (/dd/sourcecode/as):06177         L1AB1    cmpx  <$0022       >= start clip Y coord?
1DEB 2C06             (/dd/sourcecode/as):06178                  bge   L1ABB        Yes, go draw point
1DED 3596             (/dd/sourcecode/as):06179                  puls  pc,x,d       No, return
                      (/dd/sourcecode/as):06180         
                      (/dd/sourcecode/as):06181         * (ARC) Clip line is diagonal in some way
1DEF 8D2F             (/dd/sourcecode/as):06182         L1AB7    bsr   L1ADF          Check if within range of diagonal clip line
1DF1 2E2B             (/dd/sourcecode/as):06183                  bgt   L1ADD          If out of range, don't put pixel on screen
                      (/dd/sourcecode/as):06184         * Entry point for 'No clipping' routine pixel put
                      (/dd/sourcecode/as):06185         * Entry: D=X offset from center point
                      (/dd/sourcecode/as):06186         *        X=Y offset from center point
1DF3 D318             (/dd/sourcecode/as):06187         L1ABB    addd  <$0018         Add X offset to center point X
1DF5 2B27             (/dd/sourcecode/as):06188                  bmi   L1ADD          Off of left side of window, don't bother
1DF7 10A3A81B         (/dd/sourcecode/as):06189                  cmpd  Wt.MaxX,y      Past right side of window?
1DFB 2221             (/dd/sourcecode/as):06190                  bhi   L1ADD          Yes, don't bother
1DFD DD47             (/dd/sourcecode/as):06191                  std   <$0047         Save X for Point routine
1DFF 1F10             (/dd/sourcecode/as):06192                  tfr   x,d            Move Y offset to D
1E01 D31A             (/dd/sourcecode/as):06193                  addd  <$001A         Add Y offset to center point Y
1E03 2B19             (/dd/sourcecode/as):06194                  bmi   L1ADD          Off of top of window, don't bother
1E05 10A3A81D         (/dd/sourcecode/as):06195                  cmpd  Wt.MaxY,y      Past bottom of window?
1E09 2213             (/dd/sourcecode/as):06196                  bhi   L1ADD          Yes, don't bother
1E0B DD49             (/dd/sourcecode/as):06197                  std   <$0049         Save Y coord for Point routine
1E0D 17F597           (/dd/sourcecode/as):06198                  lbsr  L1E9D          Calculate scrn addr:X, bit mask into B
1E10 9661             (/dd/sourcecode/as):06199                  lda   <$0061         Get color mask
                      (/dd/sourcecode/as):06200                IFNE  H6309
                      (/dd/sourcecode/as):06201                  ldw   <$68           Get LSET vector
                      (/dd/sourcecode/as):06202                ELSE
1E12 3410             (/dd/sourcecode/as):06203                  pshs  x
1E14 9E68             (/dd/sourcecode/as):06204                  ldx   <$68
1E16 9FB5             (/dd/sourcecode/as):06205                  stx   <$B5
1E18 3510             (/dd/sourcecode/as):06206                  puls  x
                      (/dd/sourcecode/as):06207                ENDC
1E1A AD9F1164         (/dd/sourcecode/as):06208                  jsr   [>GrfMem+gr0064]       Put pixel on screen
1E1E 3596             (/dd/sourcecode/as):06209         L1ADD    puls  pc,x,d         Restore regs & return
                      (/dd/sourcecode/as):06210         
                      (/dd/sourcecode/as):06211         * Uses signed 16x16 bit multiply
                      (/dd/sourcecode/as):06212         * Called by Arc (probably in clipping coordinates)
1E20 3416             (/dd/sourcecode/as):06213         L1ADF    pshs  x,d
1E22 327C             (/dd/sourcecode/as):06214                  leas  -4,s
1E24 1F10             (/dd/sourcecode/as):06215                  tfr   x,d
1E26 9326             (/dd/sourcecode/as):06216                  subd  <$26
                      (/dd/sourcecode/as):06217                IFNE  H6309
                      (/dd/sourcecode/as):06218                  muld  <$97           Calculate 1st result
                      (/dd/sourcecode/as):06219                  stq   ,s             Save 24 bit result
                      (/dd/sourcecode/as):06220                ELSE                 
1E28 3470             (/dd/sourcecode/as):06221                  pshs  x,y,u
1E2A 9E97             (/dd/sourcecode/as):06222                  ldx   <$97
1E2C 8D26             (/dd/sourcecode/as):06223                  bsr   MUL16
1E2E 10AF66           (/dd/sourcecode/as):06224                  sty   6,s
1E31 EF68             (/dd/sourcecode/as):06225                  stu   8,s
1E33 DFB5             (/dd/sourcecode/as):06226                  stu   <$B5
1E35 3570             (/dd/sourcecode/as):06227                  puls  x,y,u
                      (/dd/sourcecode/as):06228                ENDC
1E37 EC64             (/dd/sourcecode/as):06229                  ldd   4,s
1E39 9324             (/dd/sourcecode/as):06230                  subd  <$24
                      (/dd/sourcecode/as):06231                IFNE  H6309
                      (/dd/sourcecode/as):06232                  muld  <$99           Calculate 2nd result
                      (/dd/sourcecode/as):06233                ELSE
1E3B 3470             (/dd/sourcecode/as):06234                  pshs  x,y,u
1E3D 9E99             (/dd/sourcecode/as):06235                  ldx   <$99
1E3F 8D13             (/dd/sourcecode/as):06236                  bsr   MUL16
1E41 DFB5             (/dd/sourcecode/as):06237                  stu   <$B5
1E43 1F20             (/dd/sourcecode/as):06238                  tfr   y,d
1E45 3570             (/dd/sourcecode/as):06239                  puls  x,y,u
                      (/dd/sourcecode/as):06240                ENDC
1E47 E161             (/dd/sourcecode/as):06241                  cmpb  1,s            Compare high byte with original multiply
1E49 2605             (/dd/sourcecode/as):06242                  bne   L1AF9          Not equal, exit with CC indicating that
                      (/dd/sourcecode/as):06243                IFNE  H6309
                      (/dd/sourcecode/as):06244                  cmpw  2,s            Check rest of 24 bit #
                      (/dd/sourcecode/as):06245                ELSE
1E4B DCB5             (/dd/sourcecode/as):06246                  ldd   <$B5
1E4D 10A362           (/dd/sourcecode/as):06247                  cmpd  2,s
                      (/dd/sourcecode/as):06248                ENDC
1E50 3264             (/dd/sourcecode/as):06249         L1AF9    leas  4,s            Eat our buffer
1E52 3596             (/dd/sourcecode/as):06250                  puls  pc,x,d         Restore regs & return
                      (/dd/sourcecode/as):06251         
                      (/dd/sourcecode/as):06252                IFEQ  H6309
1E54 3476             (/dd/sourcecode/as):06253         MUL16    pshs  d,x,y,u        XmulD returns Y&U
1E56 6F64             (/dd/sourcecode/as):06254                  clr   4,s
1E58 A663             (/dd/sourcecode/as):06255                  lda   3,s
1E5A 3D               (/dd/sourcecode/as):06256                  mul
1E5B ED66             (/dd/sourcecode/as):06257                  std   6,s
1E5D EC61             (/dd/sourcecode/as):06258                  ldd   1,s
1E5F 3D               (/dd/sourcecode/as):06259                  mul
1E60 EB66             (/dd/sourcecode/as):06260                  addb  6,s
1E62 8900             (/dd/sourcecode/as):06261                  adca  #0
1E64 ED65             (/dd/sourcecode/as):06262                  std   5,s
1E66 E6E4             (/dd/sourcecode/as):06263                  ldb   ,s
1E68 A663             (/dd/sourcecode/as):06264                  lda   3,s
1E6A 3D               (/dd/sourcecode/as):06265                  mul
1E6B E365             (/dd/sourcecode/as):06266                  addd  5,s
1E6D ED65             (/dd/sourcecode/as):06267                  std   5,s
1E6F 2402             (/dd/sourcecode/as):06268                  bcc   MUL16b
1E71 6C64             (/dd/sourcecode/as):06269                  inc   4,s
1E73 A6E4             (/dd/sourcecode/as):06270         MUL16b   lda   ,s
1E75 E662             (/dd/sourcecode/as):06271                  ldb   2,s
1E77 3D               (/dd/sourcecode/as):06272                  mul
1E78 E364             (/dd/sourcecode/as):06273                  addd  4,s
1E7A 4F               (/dd/sourcecode/as):06274                  clra
1E7B ED64             (/dd/sourcecode/as):06275                  std   4,s
1E7D 35F6             (/dd/sourcecode/as):06276                  puls  d,x,y,u,pc
                      (/dd/sourcecode/as):06277                ENDC
                      (/dd/sourcecode/as):06278         
     1E7F             (/dd/sourcecode/as):06279         L1B32.0  equ   *
                      (/dd/sourcecode/as):06280                IFNE  H6309
                      (/dd/sourcecode/as):06281                  clrd               ATD: moved here for size
1E7F                  (/dd/sourcecode/as):06282         L1B32    clrw
                      (/dd/sourcecode/as):06283                  stw   ,x
                      (/dd/sourcecode/as):06284                  ste   2,x
                      (/dd/sourcecode/as):06285                ELSE
1E7F 4F               (/dd/sourcecode/as):06286                  clra
1E80 5F               (/dd/sourcecode/as):06287                  clrb
                      (/dd/sourcecode/as):06288         * 6809/6309: std <grScrtch / ldd <grScrtch
1E81 3406             (/dd/sourcecode/as):06289         L1B32    pshs  d
1E83 4F               (/dd/sourcecode/as):06290                  clra
1E84 5F               (/dd/sourcecode/as):06291                  clrb
1E85 DDB5             (/dd/sourcecode/as):06292                  std   <$B5
1E87 ED84             (/dd/sourcecode/as):06293                  std   ,x
1E89 A702             (/dd/sourcecode/as):06294                  sta   2,x
1E8B 3506             (/dd/sourcecode/as):06295                  puls  d
                      (/dd/sourcecode/as):06296                ENDC
1E8D ED03             (/dd/sourcecode/as):06297                  std   3,x
1E8F 39               (/dd/sourcecode/as):06298                  rts   
                      (/dd/sourcecode/as):06299         
1E90 3406             (/dd/sourcecode/as):06300         L1B3B    pshs  d
                      (/dd/sourcecode/as):06301                IFNE  H6309
                      (/dd/sourcecode/as):06302                  ldq   ,y
                      (/dd/sourcecode/as):06303                  stq   ,x
                      (/dd/sourcecode/as):06304                ELSE
1E92 EC22             (/dd/sourcecode/as):06305                  ldd   2,y
1E94 DDB5             (/dd/sourcecode/as):06306                  std   <$B5
1E96 ED02             (/dd/sourcecode/as):06307                  std   2,x
1E98 ECA4             (/dd/sourcecode/as):06308                  ldd   ,y
1E9A ED84             (/dd/sourcecode/as):06309                  std   ,x
                      (/dd/sourcecode/as):06310                ENDC
1E9C E624             (/dd/sourcecode/as):06311                  ldb   4,y
1E9E E704             (/dd/sourcecode/as):06312                  stb   4,x
1EA0 3586             (/dd/sourcecode/as):06313                  puls  pc,d
                      (/dd/sourcecode/as):06314         
1EA2 1E23             (/dd/sourcecode/as):06315         L1B52    exg   y,u
1EA4 1E12             (/dd/sourcecode/as):06316                  exg   x,y
1EA6 8DE8             (/dd/sourcecode/as):06317                  bsr   L1B3B
1EA8 1E12             (/dd/sourcecode/as):06318                  exg   x,y
1EAA 1E23             (/dd/sourcecode/as):06319                  exg   y,u
1EAC 39               (/dd/sourcecode/as):06320                  rts
                      (/dd/sourcecode/as):06321                  
                      (/dd/sourcecode/as):06322         * Called by ellipse
                      (/dd/sourcecode/as):06323         * Add 16 bit to 40 bit number @ X (but don't carry in 5th byte)
1EAD CC0001           (/dd/sourcecode/as):06324         L1B63    ldd   #$0001       for circle, etc. above
1EB0 3406             (/dd/sourcecode/as):06325         L1B64    pshs  d
1EB2 E303             (/dd/sourcecode/as):06326                  addd  3,x
1EB4 ED03             (/dd/sourcecode/as):06327                  std   3,x
1EB6 CC0000           (/dd/sourcecode/as):06328                  ldd   #$0000         For using carry
                      (/dd/sourcecode/as):06329                IFNE  H6309
                      (/dd/sourcecode/as):06330                  adcd  1,x
                      (/dd/sourcecode/as):06331                ELSE
1EB9 E902             (/dd/sourcecode/as):06332                  adcb  2,x
1EBB A901             (/dd/sourcecode/as):06333                  adca  1,x
                      (/dd/sourcecode/as):06334                ENDC
1EBD ED01             (/dd/sourcecode/as):06335                  std   1,x
1EBF C600             (/dd/sourcecode/as):06336                  ldb   #$00           *CHANGE: WAS CLRB, BUT THAT WOULD SCREW CARRY UP
1EC1 E984             (/dd/sourcecode/as):06337                  adcb  ,x
1EC3 E784             (/dd/sourcecode/as):06338                  stb   ,x
1EC5 3586             (/dd/sourcecode/as):06339                  puls  pc,d
                      (/dd/sourcecode/as):06340         
                      (/dd/sourcecode/as):06341         * Add 40 bit # @ X to 40 bit # @ Y; result into X
1EC7 3406             (/dd/sourcecode/as):06342         L1B7A    pshs  d
1EC9 EC03             (/dd/sourcecode/as):06343                  ldd   3,x
1ECB E323             (/dd/sourcecode/as):06344                  addd  3,y
1ECD ED03             (/dd/sourcecode/as):06345                  std   3,x
1ECF EC01             (/dd/sourcecode/as):06346                  ldd   1,x
                      (/dd/sourcecode/as):06347                IFNE  H6309
                      (/dd/sourcecode/as):06348                  adcd  1,y
                      (/dd/sourcecode/as):06349                ELSE
1ED1 E922             (/dd/sourcecode/as):06350                  adcb  2,y
1ED3 A921             (/dd/sourcecode/as):06351                  adca  1,y
                      (/dd/sourcecode/as):06352                ENDC
1ED5 ED01             (/dd/sourcecode/as):06353                  std   1,x
1ED7 E684             (/dd/sourcecode/as):06354                  ldb   ,x
1ED9 E9A4             (/dd/sourcecode/as):06355                  adcb  ,y
1EDB E784             (/dd/sourcecode/as):06356                  stb   ,x
1EDD 3586             (/dd/sourcecode/as):06357                  puls  pc,d
                      (/dd/sourcecode/as):06358         
1EDF 8DA0             (/dd/sourcecode/as):06359         L1BA1.0  bsr   L1B32
1EE1 3426             (/dd/sourcecode/as):06360         L1BA1    pshs  y,d
                      (/dd/sourcecode/as):06361                IFNE  H6309
                      (/dd/sourcecode/as):06362                  clrd
                      (/dd/sourcecode/as):06363                ELSE
1EE3 4F               (/dd/sourcecode/as):06364                  clra
1EE4 5F               (/dd/sourcecode/as):06365                  clrb
                      (/dd/sourcecode/as):06366                ENDC
1EE5 3406             (/dd/sourcecode/as):06367                  pshs  d              Put 3 0's on stack
1EE7 3404             (/dd/sourcecode/as):06368                  pshs  b
                      (/dd/sourcecode/as):06369         * 6809 - leay ,s
1EE9 1F42             (/dd/sourcecode/as):06370                  tfr   s,y            Point Y to the 3 0's
1EEB 8D06             (/dd/sourcecode/as):06371                  bsr   L1BB4
1EED 3263             (/dd/sourcecode/as):06372                  leas  3,s
1EEF 35A6             (/dd/sourcecode/as):06373                  puls  pc,y,d
                      (/dd/sourcecode/as):06374         
1EF1 8D8E             (/dd/sourcecode/as):06375         L1BB1    bsr   L1B32          Make 5 byte integer of D @ X
1EF3 3466             (/dd/sourcecode/as):06376         L1BB4    pshs  u,y,d          Preserve regs on stack
1EF5 3276             (/dd/sourcecode/as):06377                  leas  -10,s          Make buffer for two 5 byte integers
                      (/dd/sourcecode/as):06378         * 6809 - leau ,s
1EF7 1F43             (/dd/sourcecode/as):06379                  tfr   s,u            Point U to first buffer
                      (/dd/sourcecode/as):06380         * Was subroutine 1B5D
1EF9 1E13             (/dd/sourcecode/as):06381                  exg   x,u            Swap temp ptr with X ptr
1EFB 8D93             (/dd/sourcecode/as):06382                  bsr   L1B3B          Copy 5 byte # from Y to X (into 1st temp buffer)
1EFD 1E13             (/dd/sourcecode/as):06383                  exg   x,u            Swap ptrs back
                      (/dd/sourcecode/as):06384         * 6809 - leay ,u
1EFF 1F32             (/dd/sourcecode/as):06385                  tfr   u,y            Move stack ptr to Y
1F01 3345             (/dd/sourcecode/as):06386                  leau  5,u            Point U to 2nd 5 byte buffer
1F03 8D9D             (/dd/sourcecode/as):06387                  bsr   L1B52
                      (/dd/sourcecode/as):06388                IFNE  H6309
                      (/dd/sourcecode/as):06389                  bsr   L1B32.0      ATD: CLRD moved for size
                      (/dd/sourcecode/as):06390                ELSE
1F05 17FF77           (/dd/sourcecode/as):06391                  lbsr  L1B32.0
                      (/dd/sourcecode/as):06392                ENDC
1F08 200E             (/dd/sourcecode/as):06393                  bra   L1BCB
                      (/dd/sourcecode/as):06394         
1F0A 6824             (/dd/sourcecode/as):06395         L1BC9    lsl   4,y            Multiply 5 byte integer by 2
                      (/dd/sourcecode/as):06396                IFNE  H6309
                      (/dd/sourcecode/as):06397                  ldq   ,y
                      (/dd/sourcecode/as):06398                  rolw
                      (/dd/sourcecode/as):06399                  rold
                      (/dd/sourcecode/as):06400                  stq   ,y
                      (/dd/sourcecode/as):06401                ELSE
1F0C EC22             (/dd/sourcecode/as):06402                  ldd   2,y
1F0E 59               (/dd/sourcecode/as):06403                  rolb
1F0F 49               (/dd/sourcecode/as):06404                  rola
1F10 ED22             (/dd/sourcecode/as):06405                  std   2,y
1F12 ECA4             (/dd/sourcecode/as):06406                  ldd   ,y
1F14 59               (/dd/sourcecode/as):06407                  rolb
1F15 49               (/dd/sourcecode/as):06408                  rola
1F16 EDA4             (/dd/sourcecode/as):06409                  std   ,y
                      (/dd/sourcecode/as):06410                ENDC
                      (/dd/sourcecode/as):06411         
                      (/dd/sourcecode/as):06412         * Loop-Divide U by 2 until U=0 or uneven divide
                      (/dd/sourcecode/as):06413         *  (each time, multiply Y by 2)
                      (/dd/sourcecode/as):06414         * When U=0 & no remainder, exits
                      (/dd/sourcecode/as):06415         * When U=0 & remainder, 5 byte # @ X = that # + 5 byte # @ Y
                      (/dd/sourcecode/as):06416         * NOTE: 6309 - If it works, change below & L1C06 to use LDQ/RORD/RORW/STQ
1F18 64C4             (/dd/sourcecode/as):06417         L1BCB    lsr   ,u             Divide 5 byte integer by 2
1F1A 261E             (/dd/sourcecode/as):06418                  bne   L1C06          If any non-zero bytes, make sure to clear 0 flag
1F1C 6641             (/dd/sourcecode/as):06419                  ror   1,u
1F1E 261C             (/dd/sourcecode/as):06420                  bne   L1C08
1F20 6642             (/dd/sourcecode/as):06421                  ror   2,u
1F22 261A             (/dd/sourcecode/as):06422                  bne   L1C0A
1F24 6643             (/dd/sourcecode/as):06423                  ror   3,u
1F26 2618             (/dd/sourcecode/as):06424                  bne   L1C0C
1F28 6644             (/dd/sourcecode/as):06425                  ror   4,u
                      (/dd/sourcecode/as):06426         * If it gets this far, the resulting 5 byte # is zero
1F2A 2706             (/dd/sourcecode/as):06427                  beq   L1BD5          If result=0, skip ahead
1F2C 24DC             (/dd/sourcecode/as):06428         NewLbl   bcc   L1BC9          If no remainder, multiply Y by 2 again
1F2E 8D97             (/dd/sourcecode/as):06429                  bsr   L1B7A          X=X+Y (5 byte #'s @ register names)
1F30 20D8             (/dd/sourcecode/as):06430                  bra   L1BC9          Continue (multiply Y by 2 & divide U by 2 again)
                      (/dd/sourcecode/as):06431         
1F32 2402             (/dd/sourcecode/as):06432         L1BD5    bcc   L1BD9          If result=0 & no remainder, done & return
1F34 8D91             (/dd/sourcecode/as):06433                  bsr   L1B7A          X=X+Y (5 byte #'s @ register names)
1F36 326A             (/dd/sourcecode/as):06434         L1BD9    leas  10,s           Eat 2 5 byte integers off of stack
1F38 35E6             (/dd/sourcecode/as):06435                  puls  pc,u,y,d       Restore regs & return
                      (/dd/sourcecode/as):06436         
1F3A 6641             (/dd/sourcecode/as):06437         L1C06    ror   1,u            Finishes divide by 2 with non-zero result
1F3C 6642             (/dd/sourcecode/as):06438         L1C08    ror   2,u
1F3E 6643             (/dd/sourcecode/as):06439         L1C0A    ror   3,u
1F40 6644             (/dd/sourcecode/as):06440         L1C0C    ror   4,u
1F42 20E8             (/dd/sourcecode/as):06441                  bra   NewLbl         Continue
                      (/dd/sourcecode/as):06442         
                      (/dd/sourcecode/as):06443         * Negate 5 byte integer
1F44 1E12             (/dd/sourcecode/as):06444         L1C11.0  exg   x,y          ATD: moved here for size
1F46 6384             (/dd/sourcecode/as):06445         L1C11    com   ,x             Invert # @ X
1F48 6301             (/dd/sourcecode/as):06446                  com   1,x
1F4A 6302             (/dd/sourcecode/as):06447                  com   2,x
1F4C 6303             (/dd/sourcecode/as):06448                  com   3,x
1F4E 6304             (/dd/sourcecode/as):06449                  com   4,x
1F50 6C04             (/dd/sourcecode/as):06450                  inc   4,x
1F52 260E             (/dd/sourcecode/as):06451                  bne   L1C2D
1F54 6C03             (/dd/sourcecode/as):06452                  inc   3,x
1F56 260A             (/dd/sourcecode/as):06453                  bne   L1C2D
1F58 6C02             (/dd/sourcecode/as):06454                  inc   2,x
1F5A 2606             (/dd/sourcecode/as):06455                  bne   L1C2D
1F5C 6C01             (/dd/sourcecode/as):06456                  inc   1,x
1F5E 2602             (/dd/sourcecode/as):06457                  bne   L1C2D
1F60 6C84             (/dd/sourcecode/as):06458                  inc   ,x
1F62 39               (/dd/sourcecode/as):06459         L1C2D    rts
                      (/dd/sourcecode/as):06460         
                      (/dd/sourcecode/as):06461         * 5 byte compare ,x to ,y
1F63 3406             (/dd/sourcecode/as):06462         L1C2E    pshs  d
1F65 EC84             (/dd/sourcecode/as):06463                  ldd   ,x
1F67 10A3A4           (/dd/sourcecode/as):06464                  cmpd  ,y
1F6A 2615             (/dd/sourcecode/as):06465                  bne   L1C4D
1F6C EC02             (/dd/sourcecode/as):06466                  ldd   $02,x
1F6E 10A322           (/dd/sourcecode/as):06467                  cmpd  $02,y
1F71 2606             (/dd/sourcecode/as):06468                  bne   L1C44
1F73 E604             (/dd/sourcecode/as):06469                  ldb   $04,x
1F75 E124             (/dd/sourcecode/as):06470                  cmpb  $04,y
1F77 2708             (/dd/sourcecode/as):06471                  beq   L1C4D
1F79 2203             (/dd/sourcecode/as):06472         L1C44    bhi   L1C4A
1F7B 8608             (/dd/sourcecode/as):06473                  lda   #$08
1F7D 21               (/dd/sourcecode/as):06474                  fcb   $21          skip one byte: same cycle time, 1 byte smaller
1F7E 4F               (/dd/sourcecode/as):06475         L1C4A    clra
1F7F 1F8A             (/dd/sourcecode/as):06476         L1C4B    tfr   a,cc
1F81 3586             (/dd/sourcecode/as):06477         L1C4D    puls  pc,d
                      (/dd/sourcecode/as):06478         
                      (/dd/sourcecode/as):06479         
                      (/dd/sourcecode/as):06480         * FFill entry point
1F83 17FBE6           (/dd/sourcecode/as):06481         L1C4F    lbsr  L1884        ATD: +11C:-6B  exit if screen is text
1F86 C601             (/dd/sourcecode/as):06482                  ldb   #$01         Set flag that no error has occurred
1F88 D7B1             (/dd/sourcecode/as):06483                  stb   <$b1         LCB:Set flag that this is the 1st time through
1F8A D72A             (/dd/sourcecode/as):06484                  stb   <$002A
1F8C 170203           (/dd/sourcecode/as):06485                  lbsr  L1DF6        Check/calculate scaling
1F8F 102500A6         (/dd/sourcecode/as):06486                  lbcs  L1CBF        Illegal coordinate, exit
                      (/dd/sourcecode/as):06487                IFNE  H6309
                      (/dd/sourcecode/as):06488                  ldq   <$47         Get original X,Y start (now scaled)
                      (/dd/sourcecode/as):06489                  stq   <$AD         Save them
                      (/dd/sourcecode/as):06490                ELSE
1F93 DC49             (/dd/sourcecode/as):06491                  ldd   <$49
1F95 DDB5             (/dd/sourcecode/as):06492                  std   <$B5
1F97 DDAF             (/dd/sourcecode/as):06493                  std   <$AF
1F99 DC47             (/dd/sourcecode/as):06494                  ldd   <$47
1F9B DDAD             (/dd/sourcecode/as):06495                  std   <$AD
                      (/dd/sourcecode/as):06496                ENDC
1F9D 17F407           (/dd/sourcecode/as):06497                  lbsr  L1E9D          Calculate screen address to start filling @
1FA0 9F72             (/dd/sourcecode/as):06498                  stx   <$0072         Save ptr to start pixel on physical screen
1FA2 D774             (/dd/sourcecode/as):06499                  stb   <$0074         Save bit mask for start pixel
                      (/dd/sourcecode/as):06500         * replaced the code above with this: slightly larger, but L1F4B is smaller,
                      (/dd/sourcecode/as):06501         * and this code is only executed once, while L1F4B is executed many times
                      (/dd/sourcecode/as):06502         * the additional benefit is that <$0028 is now the full-byte color mask
                      (/dd/sourcecode/as):06503         * instead of the single pixel mask, and we can do byte-by-byte checks!
1FA4 E484             (/dd/sourcecode/as):06504                  andb  ,x           get first pixel: somewhere in the byte...
1FA6 8E4709           (/dd/sourcecode/as):06505                  ldx   #GrfStrt+L075F-1   point to table of pixel masks
1FA9 9660             (/dd/sourcecode/as):06506                  lda   <$0060         Get screen type
1FAB A686             (/dd/sourcecode/as):06507                  lda   a,x            Get subtable ptr
1FAD 3086             (/dd/sourcecode/as):06508                  leax  a,x            Point to proper screen table
1FAF A602             (/dd/sourcecode/as):06509                  lda   2,x            skip mask, color 0, get color 1 full-byte mask
1FB1 3D               (/dd/sourcecode/as):06510                  mul                  multiple color by $FF, $55, or $11 (1,4,16-color)
                      (/dd/sourcecode/as):06511                IFNE  H6309
                      (/dd/sourcecode/as):06512                  orr   b,a            bits are all mixed up: OR them together
                      (/dd/sourcecode/as):06513                ELSE
                      (/dd/sourcecode/as):06514         * 6809/6309: stb <grScrtch / ora <grScrtch
1FB2 3404             (/dd/sourcecode/as):06515                  pshs  b
1FB4 AAE0             (/dd/sourcecode/as):06516                  ora   ,s+
                      (/dd/sourcecode/as):06517                ENDC
                      (/dd/sourcecode/as):06518         * now A = full-byte color mask for the color we want to FFILL on
1FB6 8E58D9           (/dd/sourcecode/as):06519                  ldx   #GrfStrt+L16B1-1  point to pixels/byte table
1FB9 D660             (/dd/sourcecode/as):06520                  ldb   <$0060         get screen type again
1FBB E685             (/dd/sourcecode/as):06521                  ldb   b,x            get B=pixels per byte
1FBD DD28             (/dd/sourcecode/as):06522                  std   <$0028         save full-byte color mask, pixels per byte
                      (/dd/sourcecode/as):06523         * end of inserted code: a bit larger, but MUCH faster in the end
1FBF A126             (/dd/sourcecode/as):06524                  cmpa  Wt.Fore,y      background color as current foreground color?
1FC1 276E             (/dd/sourcecode/as):06525                  beq   L1CB7          Yes, exit if no stack overflow occurred
1FC3 6FE2             (/dd/sourcecode/as):06526                  clr   ,-s          save y-direction=0: done FFILLing
1FC5 170285           (/dd/sourcecode/as):06527                  lbsr  L1EF1          Setup start pixel mask & vector for right dir.
1FC8 8D05             (/dd/sourcecode/as):06528                  bsr   L1F1D
1FCA 9E72             (/dd/sourcecode/as):06529                  ldx   <$0072
1FCC 1600A9           (/dd/sourcecode/as):06530                  lbra  L1CC6
                      (/dd/sourcecode/as):06531         * Setup up bit mask & branch table for flood filling in the left direction
1FCF 9660             (/dd/sourcecode/as):06532         L1F1D    lda   <$0060         Get screen type
1FD1 8E5FDB           (/dd/sourcecode/as):06533                  ldx   #GrfStrt+L1F2C-2  Point to table
1FD4 48               (/dd/sourcecode/as):06534                  lsla                 x2 for table offset
1FD5 EC86             (/dd/sourcecode/as):06535                  ldd   a,x            Get mask and branch offset
1FD7 977C             (/dd/sourcecode/as):06536                  sta   <$007C         Preserve bit mask
1FD9 3A               (/dd/sourcecode/as):06537                  abx                  Store vector to bit shift routine
1FDA 9F7A             (/dd/sourcecode/as):06538                  stx   <$007A         save for later
1FDC 39               (/dd/sourcecode/as):06539                  rts
                      (/dd/sourcecode/as):06540                  
                      (/dd/sourcecode/as):06541         * Bit shift table to shift to the left 3,1 or 0 times
                      (/dd/sourcecode/as):06542         * Used by FFill when filling to the left
1FDD 010D             (/dd/sourcecode/as):06543         L1F2C    fcb   $01,L1F45-(L1F2C-2)  $1b  640 2-color
1FDF 030C             (/dd/sourcecode/as):06544                  fcb   $03,L1F44-(L1F2C-2)  $1a  320 4-color
1FE1 030C             (/dd/sourcecode/as):06545                  fcb   $03,L1F44-(L1F2C-2)  $1a  640 4-color
1FE3 0F0A             (/dd/sourcecode/as):06546                  fcb   $0f,L1F42-(L1F2C-2)  $18  320 16-color
                      (/dd/sourcecode/as):06547         * Bit shifts based on screen type
1FE5 58               (/dd/sourcecode/as):06548         L1F42    lslb
1FE6 58               (/dd/sourcecode/as):06549                  lslb
1FE7 58               (/dd/sourcecode/as):06550         L1F44    lslb
1FE8 39               (/dd/sourcecode/as):06551         L1F45    rts
                      (/dd/sourcecode/as):06552         
1FE9 9628             (/dd/sourcecode/as):06553         X1F08    lda   <$0028       get full-byte background color mask
1FEB A184             (/dd/sourcecode/as):06554                  cmpa  ,x           same as the byte we're on?
1FED 2709             (/dd/sourcecode/as):06555                  beq   X1F16        yes, skip ahead
1FEF 3341             (/dd/sourcecode/as):06556                  leau  1,u          otherwise go to the right one pixel
1FF1 54               (/dd/sourcecode/as):06557         X1F0E    lsrb                 Shift to next bit mask
1FF2 2518             (/dd/sourcecode/as):06558                  bcs   X1F18          Finished byte, reload for next
1FF4 6E9F1177         (/dd/sourcecode/as):06559                  jmp   [>GrfMem+gr0077]       Shift B more (if needed) depending on scrn type
                      (/dd/sourcecode/as):06560         
                      (/dd/sourcecode/as):06561         * background is a byte value, but we don't know what the X coord is
1FF8 4F               (/dd/sourcecode/as):06562         X1F16    clra
1FF9 D629             (/dd/sourcecode/as):06563                  ldb   <$29         D=pixels per byte
                      (/dd/sourcecode/as):06564                IFNE  H6309
                      (/dd/sourcecode/as):06565                  addr  d,u          go to the right one byte
                      (/dd/sourcecode/as):06566                ELSE
1FFB 33CB             (/dd/sourcecode/as):06567                  leau  d,u
                      (/dd/sourcecode/as):06568                ENDC
1FFD 5A               (/dd/sourcecode/as):06569                  decb               make 2,4,8 into 1,3,7
                      (/dd/sourcecode/as):06570                IFNE  H6309
                      (/dd/sourcecode/as):06571                  comd               get mask
                      (/dd/sourcecode/as):06572                  andr  d,u          force it to the left-most pixel of the byte
                      (/dd/sourcecode/as):06573                ELSE
1FFE 43               (/dd/sourcecode/as):06574                  coma
1FFF 53               (/dd/sourcecode/as):06575                  comb
                      (/dd/sourcecode/as):06576         * 6809: std <grScrtch / anda <grScrtch / andb <grScrtch+1 / ldd <grScrtch
2000 3406             (/dd/sourcecode/as):06577                  pshs  d
2002 1F30             (/dd/sourcecode/as):06578                  tfr   u,d
2004 A4E4             (/dd/sourcecode/as):06579                  anda  ,s
2006 E461             (/dd/sourcecode/as):06580                  andb  1,s
2008 1F03             (/dd/sourcecode/as):06581                  tfr   d,u
200A 3506             (/dd/sourcecode/as):06582                  puls  d
                      (/dd/sourcecode/as):06583                ENDC
200C C601             (/dd/sourcecode/as):06584         X1F18    ldb   #1             Bump screen address by 1
200E 3A               (/dd/sourcecode/as):06585                  abx
200F D679             (/dd/sourcecode/as):06586                  ldb   <$0079         Get start single pixel mask (1,2 or 4 bits set)
2011 39               (/dd/sourcecode/as):06587                  rts
                      (/dd/sourcecode/as):06588         
                      (/dd/sourcecode/as):06589         * Switch to next line for FFill
2012 3264             (/dd/sourcecode/as):06590         L1CC2    leas  4,s          Eat last set of X start ($47), end ($9B)
                      (/dd/sourcecode/as):06591         * $101B is a counter counted down continuously by VTIO.
                      (/dd/sourcecode/as):06592         * this is DEBUG code... check out 1D28: if no NEW PIXEL is put down for
                      (/dd/sourcecode/as):06593         * 255 ticks (~4 seconds), exit with error.
                      (/dd/sourcecode/as):06594         * May have to add it back in for SnakeByte Pattern paint bug?
2014 E6E0             (/dd/sourcecode/as):06595         L1C93    ldb   ,s+          grab y-direction to travel
2016 2719             (/dd/sourcecode/as):06596                  beq   L1CB7        if zero, check if we're done
2018 D72B             (/dd/sourcecode/as):06597                  stb   <$002B       save direction to travel in
201A EBE0             (/dd/sourcecode/as):06598                  addb  ,s+          add into saved Y-coordinate
201C E1A81E           (/dd/sourcecode/as):06599                  cmpb  <Wt.MaxY+1,y check against the maximum Y position
201F 22F1             (/dd/sourcecode/as):06600                  bhi   L1CC2        too high, eat X start,end and go DOWN
2021 D74A             (/dd/sourcecode/as):06601                  stb   <$004A       save current Y-position
2023 3516             (/dd/sourcecode/as):06602                  puls  d,x          restore X start, X end
2025 DD47             (/dd/sourcecode/as):06603                  std   <$0047       save it for later
2027 9F4B             (/dd/sourcecode/as):06604                  stx   <$004B       save that, too
2029 17F37B           (/dd/sourcecode/as):06605                  lbsr  L1E9D        get X=logical screen coordinates, B=pixel mask
202C D774             (/dd/sourcecode/as):06606                  stb   <$0074       save starting pixel mask
202E 7E6103           (/dd/sourcecode/as):06607                  jmp   >GrfStrt+L1D40  go do some painting
                      (/dd/sourcecode/as):06608         
                      (/dd/sourcecode/as):06609         * Check if done filling or if error occurred
2031 5F               (/dd/sourcecode/as):06610         L1CB7    clrb                 Clear carry as default (no error)
2032 D62A             (/dd/sourcecode/as):06611                  ldb   <$002A         Get done/error flag
2034 2603             (/dd/sourcecode/as):06612                  bne   L1CBF          Done flag, exit without error
2036 C6BA             (/dd/sourcecode/as):06613         L1CBC    ldb   #E$StkOvf      Stack overflow error
2038 43               (/dd/sourcecode/as):06614                  coma
2039 7E50F7           (/dd/sourcecode/as):06615         L1CBF    jmp   >GrfStrt+SysRet
                      (/dd/sourcecode/as):06616         
                      (/dd/sourcecode/as):06617         * Move 1 pixel to left (for FFill)
                      (/dd/sourcecode/as):06618         * <$0028 = full-byte color mask to paint on
                      (/dd/sourcecode/as):06619         * <$0029 = pixels per byte
203C A684             (/dd/sourcecode/as):06620         L1F34    lda   ,x           get current byte
203E 9128             (/dd/sourcecode/as):06621                  cmpa  <$0028       full-byte background color?
2040 2709             (/dd/sourcecode/as):06622                  beq   L1F3C        yes, go do full-checks
2042 335F             (/dd/sourcecode/as):06623                  leau  -1,u           drop down by 1
2044 58               (/dd/sourcecode/as):06624                  lslb                 Move pixel mask to left by 1
2045 2518             (/dd/sourcecode/as):06625                  bcs   L1F46          If finished byte, skip ahead
2047 6E9F117A         (/dd/sourcecode/as):06626                  jmp   [>GrfMem+gr007A]       Adjust for proper screen type (further LSLB's)
                      (/dd/sourcecode/as):06627         
204B 4F               (/dd/sourcecode/as):06628         L1F3C    clra               make A=0
204C D629             (/dd/sourcecode/as):06629                  ldb   <$0029       get 16-bit value of pixels per byte
204E 5A               (/dd/sourcecode/as):06630                  decb               get 7,3,1 pixel mask
                      (/dd/sourcecode/as):06631                IFNE  H6309
                      (/dd/sourcecode/as):06632                  comd               get pixel mask, with low bits cleared out,
                      (/dd/sourcecode/as):06633                  andr  d,u          i.e. ensure we're to the LEFT as far as possible
                      (/dd/sourcecode/as):06634                ELSE
204F 43               (/dd/sourcecode/as):06635                  coma
2050 53               (/dd/sourcecode/as):06636                  comb
                      (/dd/sourcecode/as):06637         * 6809: std <grScrtch / anda <grScrtch / andb <grScrtch+1 / ldd <grScrtch
2051 3406             (/dd/sourcecode/as):06638                  pshs  d
2053 1F30             (/dd/sourcecode/as):06639                  tfr   u,d
2055 A4E4             (/dd/sourcecode/as):06640                  anda  ,s
2057 E461             (/dd/sourcecode/as):06641                  andb  1,s
2059 1F03             (/dd/sourcecode/as):06642                  tfr   d,u
205B 3506             (/dd/sourcecode/as):06643                  puls  d
                      (/dd/sourcecode/as):06644                ENDC
205D 335F             (/dd/sourcecode/as):06645                  leau  -1,u         go to the left one pixel
205F D67C             (/dd/sourcecode/as):06646         L1F46    ldb   <$007C        Get start pixel mask (on right side)
2061 301F             (/dd/sourcecode/as):06647                  leax  -1,x           Bump screen's pixel ptr left & return
2063 39               (/dd/sourcecode/as):06648                  rts   
                      (/dd/sourcecode/as):06649         
                      (/dd/sourcecode/as):06650         * search until we find the left-most pixel which is NOT the paint on pixel,
                      (/dd/sourcecode/as):06651         * or the edge of the screen
                      (/dd/sourcecode/as):06652         * Exits with B=pixel mask
                      (/dd/sourcecode/as):06653         * W = current X position
                      (/dd/sourcecode/as):06654         * U = W
2064 D674             (/dd/sourcecode/as):06655         FFILL.1  ldb   <$0074        Get pixel mask for pixel we are doing
2066 DE47             (/dd/sourcecode/as):06656                  ldu   <$0047
2068 17008A           (/dd/sourcecode/as):06657         L1CC8    lbsr   L1F4B        check pixel
206B 2608             (/dd/sourcecode/as):06658                  bne   L1CD4         backup if not the background color pixel
206D 8DCD             (/dd/sourcecode/as):06659                  bsr   L1F34         exits with U = x-coord
                      (/dd/sourcecode/as):06660                IFNE  H6309
                      (/dd/sourcecode/as):06661                  cmpr  0,u           has it filled to line position -1?
                      (/dd/sourcecode/as):06662                ELSE
206F 11830000         (/dd/sourcecode/as):06663                  cmpu  #0
                      (/dd/sourcecode/as):06664                ENDC
2073 2AF3             (/dd/sourcecode/as):06665                  bpl   L1CC8        we're still on the same color, continue
                      (/dd/sourcecode/as):06666         * we've found the left boundary, go to the right
     2075             (/dd/sourcecode/as):06667         L1CD4    equ   *
                      (/dd/sourcecode/as):06668                IFNE  H6309
                      (/dd/sourcecode/as):06669                  bra   X1F08        go to the right one pixel: account for extra DECW
                      (/dd/sourcecode/as):06670         
                      (/dd/sourcecode/as):06671                ELSE
2075 16FF71           (/dd/sourcecode/as):06672                  lbra  X1F08
                      (/dd/sourcecode/as):06673                ENDC
                      (/dd/sourcecode/as):06674         
2078 8DEA             (/dd/sourcecode/as):06675         L1CC6    bsr   FFILL.1
207A DF47             (/dd/sourcecode/as):06676                  stu   <$0047
207C DF9B             (/dd/sourcecode/as):06677                  stu   <$009B       save for later
207E 8D0A             (/dd/sourcecode/as):06678                  bsr   FFILL.2      paint to the right, a pixel at a time
2080 86FF             (/dd/sourcecode/as):06679                  lda   #-1          ($FF) get a flag: go UP one line
2082 8D5F             (/dd/sourcecode/as):06680                  bsr   L1D05        set up for another fill
2084 8601             (/dd/sourcecode/as):06681                  lda   #$01         get a flag: go DOWN one line
2086 8D5B             (/dd/sourcecode/as):06682                  bsr   L1D05        save more things on the stack
2088 208A             (/dd/sourcecode/as):06683                  bra   L1C93        go do another line
                      (/dd/sourcecode/as):06684         
                      (/dd/sourcecode/as):06685         * paint to the right, a pixel at a time.
                      (/dd/sourcecode/as):06686         * Exits with B=pixel mask
                      (/dd/sourcecode/as):06687         * W = current X position
                      (/dd/sourcecode/as):06688         * U = W
208A DE47             (/dd/sourcecode/as):06689         FFILL.2  ldu   <$0047
208C DF20             (/dd/sourcecode/as):06690                  stu   <$20         save X-start for this fill routine
208E 0F2C             (/dd/sourcecode/as):06691                  clr   <$2C         clear flag: no pixels done yet
2090 8D63             (/dd/sourcecode/as):06692         FFILL.2a bsr   L1F4B          check if we hit color other than background
2092 260B             (/dd/sourcecode/as):06693                  bne   L1CEA          yes, skip ahead
2094 17FF52           (/dd/sourcecode/as):06694                  lbsr  X1F08        go to the right one pixel
2097 D72C             (/dd/sourcecode/as):06695                  stb   <$2C
2099 11A3A81B         (/dd/sourcecode/as):06696                  cmpu  Wt.MaxX,y      Are we at right side of window?
209D 23F1             (/dd/sourcecode/as):06697                  bls   FFILL.2a       no, continue
                      (/dd/sourcecode/as):06698         * we've gone too far to the right
209F 8D9B             (/dd/sourcecode/as):06699         L1CEA    bsr   L1F34        back up one pixel
                      (/dd/sourcecode/as):06700         * ATD: New routine added.  Do a horizontal line from left to right!
                      (/dd/sourcecode/as):06701         * This is not substantially faster, perhaps, but it does look better.
20A1 3406             (/dd/sourcecode/as):06702                  pshs  d
20A3 962C             (/dd/sourcecode/as):06703                  lda   <$2C         check flag
20A5 2738             (/dd/sourcecode/as):06704                  beq   L1D03        skip ahead: no pixels to draw
                      (/dd/sourcecode/as):06705         * LCB: New routine added to check if we are redoing the 1st pixel we started
                      (/dd/sourcecode/as):06706         * painting at. If we are, exit (Helps fill certain PSET variations that allow
                      (/dd/sourcecode/as):06707         * infinite recursions (loops) that hang Grfdrv - like in SnakeByte game)
20A7 96B1             (/dd/sourcecode/as):06708                  lda   <$B1         Get flag that we are on 1st line of FFill
20A9 2704             (/dd/sourcecode/as):06709                  beq   DoChecks     Not 1st time, do checks
20AB 0FB1             (/dd/sourcecode/as):06710                  clr   <$B1         Clear flag & do draw
20AD 2019             (/dd/sourcecode/as):06711                  bra   Not1st
                      (/dd/sourcecode/as):06712         
20AF DCAF             (/dd/sourcecode/as):06713         DoChecks ldd   <$AF         Get Y value from 1st FFill line
20B1 109349           (/dd/sourcecode/as):06714                  cmpd  <$49         Same as current?
20B4 2612             (/dd/sourcecode/as):06715                  bne   Not1st       No, go draw
20B6 1193AD           (/dd/sourcecode/as):06716                  cmpu  <$AD         right side X lower or same as original X?
20B9 220D             (/dd/sourcecode/as):06717                  bhi   Not1st       No, draw it
20BB DC20             (/dd/sourcecode/as):06718                  ldd   <$20         Get left X coord
20BD 1093AD           (/dd/sourcecode/as):06719                  cmpd  <$AD         left side X higher or same as original X?
20C0 2506             (/dd/sourcecode/as):06720                  blo   Not1st       No, draw it
20C2 3264             (/dd/sourcecode/as):06721                  leas  4,s          We already did this, eat stack & exit w/o error
20C4 5F               (/dd/sourcecode/as):06722                  clrb
20C5 7E50F7           (/dd/sourcecode/as):06723                  jmp   >GrfStrt+SysRet
                      (/dd/sourcecode/as):06724         
20C8 DC4B             (/dd/sourcecode/as):06725         Not1st   ldd   <$4B         get old coordinate: U=<$0047 already
20CA 3476             (/dd/sourcecode/as):06726                  pshs  d,x,y,u
20CC DF4B             (/dd/sourcecode/as):06727                  stu   <$4B         save as X-end
20CE DC20             (/dd/sourcecode/as):06728                  ldd   <$20         get LHS X coordinate
20D0 DD47             (/dd/sourcecode/as):06729                  std   <$47         save for the line routine
                      (/dd/sourcecode/as):06730         * ATD: warning: This routine trashes W!
                      (/dd/sourcecode/as):06731                IFNE  H6309
                      (/dd/sourcecode/as):06732                  ldw   <$68         get LSET vector
                      (/dd/sourcecode/as):06733                ELSE
20D2 DE68             (/dd/sourcecode/as):06734                  ldu   <$68
20D4 DFB5             (/dd/sourcecode/as):06735                  stu   <$B5
                      (/dd/sourcecode/as):06736                ENDC
20D6 DE64             (/dd/sourcecode/as):06737                  ldu   <$64         and PSET vector
20D8 BD58E3           (/dd/sourcecode/as):06738                  jsr   >GrfStrt+L1690  do fast horizontal line
20DB 3576             (/dd/sourcecode/as):06739                  puls  d,x,y,u      restore registers
20DD DD4B             (/dd/sourcecode/as):06740                  std   <$004B       save
20DF DF47             (/dd/sourcecode/as):06741         L1D03    stu   <$0047       save
20E1 3586             (/dd/sourcecode/as):06742                  puls  d,pc
                      (/dd/sourcecode/as):06743         
20E3 3540             (/dd/sourcecode/as):06744         L1D05    puls  u            restore PC of calling routine
20E5 D64A             (/dd/sourcecode/as):06745                  ldb   <$004A       get B=working Y coordinate
20E7 3436             (/dd/sourcecode/as):06746                  pshs  y,x,d        save PC, and 4 junk bytes; ???RG
                      (/dd/sourcecode/as):06747                IFNE  H6309
                      (/dd/sourcecode/as):06748                  ldw   <$0047         Get 'working' X coord
                      (/dd/sourcecode/as):06749                ELSE
20E9 DC47             (/dd/sourcecode/as):06750                  ldd   <$47
20EB DDB5             (/dd/sourcecode/as):06751                  std   <$B5
20ED ED64             (/dd/sourcecode/as):06752                  std   4,s          see stq 2,s below
                      (/dd/sourcecode/as):06753                ENDC
20EF DC9B             (/dd/sourcecode/as):06754                  ldd   <$009B       and left-most pixel we were at
                      (/dd/sourcecode/as):06755                IFNE  H6309
                      (/dd/sourcecode/as):06756                  stq   2,s          save X start, end positions on the stack
                      (/dd/sourcecode/as):06757                ELSE
20F1 ED62             (/dd/sourcecode/as):06758                  std   2,s          see std 4,s above
                      (/dd/sourcecode/as):06759                ENDC
20F3 6EC4             (/dd/sourcecode/as):06760                  jmp   ,u           return to calling routine
                      (/dd/sourcecode/as):06761         
                      (/dd/sourcecode/as):06762         * ATD: mod: <$0028 is full-byte color mask
                      (/dd/sourcecode/as):06763         * Entry: X=ptr to current byte on screen
                      (/dd/sourcecode/as):06764         *        B=bit mask for current pixel
                      (/dd/sourcecode/as):06765         * Exit:  B=bit mask for current pixel
                      (/dd/sourcecode/as):06766         *        CC set to check if we hit border of FFill
20F5 3404             (/dd/sourcecode/as):06767         L1F4B    pshs  b              Preserve pixel mask
20F7 1F98             (/dd/sourcecode/as):06768                  tfr   b,a            Duplicate it
20F9 A484             (/dd/sourcecode/as):06769                  anda  ,x             Get common bits between screen/mask
20FB D428             (/dd/sourcecode/as):06770                  andb  <$0028       and common bits between full-byte color and mask
                      (/dd/sourcecode/as):06771                IFNE  H6309
                      (/dd/sourcecode/as):06772                  cmpr  b,a          are the 2 colors the same?
                      (/dd/sourcecode/as):06773                ELSE
                      (/dd/sourcecode/as):06774         * 6809: stb <grScrtch / cmpa <grScrtch
20FD 3404             (/dd/sourcecode/as):06775                  pshs  b
20FF A1E0             (/dd/sourcecode/as):06776                  cmpa  ,s+
                      (/dd/sourcecode/as):06777                ENDC
2101 3584             (/dd/sourcecode/as):06778                  puls  pc,b           Restore pixel mask & return
                      (/dd/sourcecode/as):06779         
                      (/dd/sourcecode/as):06780         * start painting at a new position.
                      (/dd/sourcecode/as):06781         * <$47=start X, <$49=current Y,  <$4B=end X
                      (/dd/sourcecode/as):06782         * Check to the left for bounds
2103 DE47             (/dd/sourcecode/as):06783         L1D40    ldu   <$0047       get current X
2105 335E             (/dd/sourcecode/as):06784                  leau  -2,u         go to the left 2 pixels? : wrap around stop pixel
2107 DF9B             (/dd/sourcecode/as):06785                  stu   <$009B       save position
2109 17FF58           (/dd/sourcecode/as):06786                  lbsr  FFILL.1      search to the left
210C 2003             (/dd/sourcecode/as):06787                  bra   L1D58        skip ahead
                      (/dd/sourcecode/as):06788         
210E 17FED8           (/dd/sourcecode/as):06789         L1D55    lbsr  X1F08        go to the right one pixel
2111 DF47             (/dd/sourcecode/as):06790         L1D58    stu   <$0047       save X coordinate
2113 11934B           (/dd/sourcecode/as):06791                  cmpu  <$004B       check against X-end from previous line
2116 1022FEFA         (/dd/sourcecode/as):06792                  lbhi  L1C93        too far to the right, skip this line
211A 8DD9             (/dd/sourcecode/as):06793                  bsr   L1F4B        check the pixel
211C 26F0             (/dd/sourcecode/as):06794                  bne   L1D55        not the same, go to the right
211E D774             (/dd/sourcecode/as):06795                  stb   <$0074       save starting pixel mask
2120 11939B           (/dd/sourcecode/as):06796                  cmpu  <$009B       check current X against saved start (X-2)
2123 2E11             (/dd/sourcecode/as):06797                  bgt   L1D87        higher, so we do a paint to the right
2125 8D63             (/dd/sourcecode/as):06798                  bsr   L1DEE        check stack
2127 270D             (/dd/sourcecode/as):06799                  beq   L1D87        if 0: stack is too low
2129 DE9B             (/dd/sourcecode/as):06800                  ldu   <$009B       grab X
212B DC47             (/dd/sourcecode/as):06801                  ldd   <$0047       grab current X
                      (/dd/sourcecode/as):06802         * ATD: removed check for X coord <0, as the above call to X1F08 ensures it's
                      (/dd/sourcecode/as):06803         * at least 0.
212D 3446             (/dd/sourcecode/as):06804                  pshs  d,u          Save X start, X end coordinates
212F D64A             (/dd/sourcecode/as):06805                  ldb   <$004A       Get Y coord
2131 962B             (/dd/sourcecode/as):06806                  lda   <$002B       Get save current Y-direction
2133 40               (/dd/sourcecode/as):06807                  nega               Change direction
2134 3406             (/dd/sourcecode/as):06808                  pshs  d            Save direction flag and Y coord
2136 DC47             (/dd/sourcecode/as):06809         L1D87    ldd   <$0047       Get current X coord
2138 DD9B             (/dd/sourcecode/as):06810                  std   <$009B       Save duplicate (for direction change???)
213A D674             (/dd/sourcecode/as):06811                  ldb   <$0074       Get current pixel mask
                      (/dd/sourcecode/as):06812         * Paint towards right side
213C 17FF4B           (/dd/sourcecode/as):06813         L1D98    lbsr  FFILL.2
213F D774             (/dd/sourcecode/as):06814                  stb   <$0074       Save new start pixel mask
2141 8D47             (/dd/sourcecode/as):06815                  bsr   L1DEE        check stack
2143 2708             (/dd/sourcecode/as):06816                  beq   L1DAA        if 0: stack is too low
2145 962B             (/dd/sourcecode/as):06817                  lda   <$002B       grab direction flag
2147 8D9A             (/dd/sourcecode/as):06818                  bsr   L1D05        save current X start, end on-stack
2149 D674             (/dd/sourcecode/as):06819                  ldb   <$0074       grab starting pixel mask
214B DE47             (/dd/sourcecode/as):06820                  ldu   <$0047       restore current X-coord
                      (/dd/sourcecode/as):06821         * Small loop
214D 17FE99           (/dd/sourcecode/as):06822         L1DAA    lbsr  X1F08          Adjust for next pixel on the right
2150 D774             (/dd/sourcecode/as):06823                  stb   <$0074         Save new pixel mask
2152 DF47             (/dd/sourcecode/as):06824                  stu   <$0047         and new X-coord
2154 11A3A81B         (/dd/sourcecode/as):06825                  cmpu  Wt.MaxX,y      Hit right side of window?
2158 2E0B             (/dd/sourcecode/as):06826                  bgt   L1DC4          Yes, skip ahead
215A 11934B           (/dd/sourcecode/as):06827                  cmpu  <$004B         Is current X coord going past Draw ptr X coord?
215D 2E06             (/dd/sourcecode/as):06828                  bgt   L1DC4          Yes, skip ahead
215F 8D94             (/dd/sourcecode/as):06829                  bsr   L1F4B          Check if we are hitting a drawn border
2161 26EA             (/dd/sourcecode/as):06830                  bne   L1DAA          No, keep FFilling
2163 20D1             (/dd/sourcecode/as):06831                  bra   L1D87          paint to RHS of the screen
                      (/dd/sourcecode/as):06832         
                      (/dd/sourcecode/as):06833         * could be subroutine call to L1DEE
                      (/dd/sourcecode/as):06834         * saves 6 bytes, adds 10 clock cycles
2165 119C3B           (/dd/sourcecode/as):06835         L1DC4    cmps  <$003B         Stack about to get too big?
2168 2202             (/dd/sourcecode/as):06836                  bhi   L1DCB          No, continue
216A 0F2A             (/dd/sourcecode/as):06837                  clr   <$002A         Yes, set flag to indicate stack overflow
216C 335F             (/dd/sourcecode/as):06838         L1DCB    leau  -1,u           go to the left one pixel
216E DF47             (/dd/sourcecode/as):06839                  stu   <$0047         Save X coord
2170 DC4B             (/dd/sourcecode/as):06840                  ldd   <$004B         Get draw ptr X coord
2172 C30002           (/dd/sourcecode/as):06841                  addd  #2             Bump up by 2
                      (/dd/sourcecode/as):06842                IFNE  H6309
                      (/dd/sourcecode/as):06843                  cmpr  u,d            Past current X coord in FFill?
                      (/dd/sourcecode/as):06844                ELSE
                      (/dd/sourcecode/as):06845         * 6809: stu <grScrtch / cmpd <grScrtch
2175 3440             (/dd/sourcecode/as):06846                  pshs  u
2177 10A3E1           (/dd/sourcecode/as):06847                  cmpd  ,s++
                      (/dd/sourcecode/as):06848                ENDC
217A 1022FE96         (/dd/sourcecode/as):06849                  lbhi  L1C93          Yes, go change Y-direction
217E 3446             (/dd/sourcecode/as):06850                  pshs  d,u            Save draw ptrs X+2, current X coord
2180 D64A             (/dd/sourcecode/as):06851                  ldb   <$004A         Get working Y coord
2182 962B             (/dd/sourcecode/as):06852                  lda   <$002B         get y-direction flag
2184 40               (/dd/sourcecode/as):06853                  nega                 Change direction?
2185 3406             (/dd/sourcecode/as):06854                  pshs  d              Save direction flag and Y coord
2187 7E6014           (/dd/sourcecode/as):06855         L1DEB    jmp   >GrfStrt+L1C93  go do another direction
                      (/dd/sourcecode/as):06856         
                      (/dd/sourcecode/as):06857         * FFill stack overflow check - only called from two places; may want to inline CMPS/
                      (/dd/sourcecode/as):06858         * bhi to next non error line, with clr <$002A/bra L1D87 or bra L1DEE, since that won't happen often
                      (/dd/sourcecode/as):06859         *  and would speed up loops.
218A 119C3B           (/dd/sourcecode/as):06860         L1DEE    cmps  <$003B       check against lowest possible stack
218D 2202             (/dd/sourcecode/as):06861                  bhi   L1DF5        Question:  Why not just an in-line check?
218F 0F2A             (/dd/sourcecode/as):06862                  clr   <$002A       clear flag: stack is too low
2191 39               (/dd/sourcecode/as):06863         L1DF5    rts   
                      (/dd/sourcecode/as):06864         
2192 C647             (/dd/sourcecode/as):06865         L1DF6    ldb   #$47         get offset in grfdrv mem to working X coord
2194 8D58             (/dd/sourcecode/as):06866         L1DF8    bsr   L1E2C
                      (/dd/sourcecode/as):06867         * Check requested X/Y co-ordinates to window table to see if they are in range
     2196             (/dd/sourcecode/as):06868         L1E86    equ   *
                      (/dd/sourcecode/as):06869                IFNE  H6309
                      (/dd/sourcecode/as):06870                  ldq   ,x           Get requested X & Y coordinates
                      (/dd/sourcecode/as):06871                ELSE
2196 EC02             (/dd/sourcecode/as):06872                  ldd   2,x
2198 DDB5             (/dd/sourcecode/as):06873                  std   <$B5
219A EC84             (/dd/sourcecode/as):06874                  ldd   ,x
                      (/dd/sourcecode/as):06875                ENDC
219C 10A3A81B         (/dd/sourcecode/as):06876                  cmpd  Wt.MaxX,y    X within max. range of window?
21A0 220E             (/dd/sourcecode/as):06877                  bhi   L1E99        No, return error
                      (/dd/sourcecode/as):06878                IFNE  H6309
                      (/dd/sourcecode/as):06879                  cmpw  Wt.MaxY,y    Y within max. range of window? (keep it 16-bit)
                      (/dd/sourcecode/as):06880                ELSE
21A2 3410             (/dd/sourcecode/as):06881                  pshs  x
21A4 9EB5             (/dd/sourcecode/as):06882                  ldx   <$B5
21A6 ACA81D           (/dd/sourcecode/as):06883                  cmpx  Wt.MaxY,y
21A9 3510             (/dd/sourcecode/as):06884                  puls  x
                      (/dd/sourcecode/as):06885                ENDC
21AB 2203             (/dd/sourcecode/as):06886                  bhi   L1E99        No, return error
21AD 1CFE             (/dd/sourcecode/as):06887                  andcc #^Carry      They work, return without error
21AF 39               (/dd/sourcecode/as):06888                  rts
                      (/dd/sourcecode/as):06889         
21B0 53               (/dd/sourcecode/as):06890         L1E99    comb               set carry
21B1 C6BD             (/dd/sourcecode/as):06891                  ldb   #E$ICoord    get error code
21B3 39               (/dd/sourcecode/as):06892                  rts                return
                      (/dd/sourcecode/as):06893         
21B4 C64B             (/dd/sourcecode/as):06894         L1DFD    ldb   #$4B         Get offset in grfdrv mem to current X coord
21B6 20DC             (/dd/sourcecode/as):06895                  bra   L1DF8
                      (/dd/sourcecode/as):06896         
21B8 C64F             (/dd/sourcecode/as):06897         L1E01    ldb   #$4F         Get offset in Grfdrv mem to X size
21BA 20D8             (/dd/sourcecode/as):06898                  bra   L1DF8
                      (/dd/sourcecode/as):06899         
21BC C620             (/dd/sourcecode/as):06900         L1E05    ldb   #$20         Point to Arc 'clip line' Start coordinate
                      (/dd/sourcecode/as):06901         * Check both X and Y coordinates and see if valid (negative #'s OK)
                      (/dd/sourcecode/as):06902         * Entry : B=Offset into GRFDRV mem to get X & Y (16 bit) coordinates
21BE 8D2E             (/dd/sourcecode/as):06903         L1E07    bsr   L1E2C        Do offset of X into grfdrv space by B bytes
                      (/dd/sourcecode/as):06904                IFNE  H6309
                      (/dd/sourcecode/as):06905                  ldw   #639         Maximum value allowed
                      (/dd/sourcecode/as):06906                ELSE
                      (/dd/sourcecode/as):06907         * 6809: stx <grScrtch / ldx <grScrtch
21C0 3410             (/dd/sourcecode/as):06908                  pshs  x
21C2 8E027F           (/dd/sourcecode/as):06909                  ldx   #639
21C5 9FB5             (/dd/sourcecode/as):06910                  stx   <$B5
21C7 3510             (/dd/sourcecode/as):06911                  puls  x
                      (/dd/sourcecode/as):06912                ENDC
21C9 8D0B             (/dd/sourcecode/as):06913                  bsr   L1E13        Check if requested coordinate is max. or less
21CB 2518             (/dd/sourcecode/as):06914                  bcs   L1E23        Error, exit
                      (/dd/sourcecode/as):06915                IFNE  H6309
                      (/dd/sourcecode/as):06916                  ldw   #MaxLines*8-1 Maximum Y coord allowed; check it too
                      (/dd/sourcecode/as):06917                ELSE
                      (/dd/sourcecode/as):06918         * 6809: stx <grScrtch / ldx <grScrtch
21CD 3410             (/dd/sourcecode/as):06919                  pshs  x
21CF 8E00C7           (/dd/sourcecode/as):06920                  ldx   #MaxLines*8-1
21D2 9FB5             (/dd/sourcecode/as):06921                  stx   <$B5
21D4 3510             (/dd/sourcecode/as):06922                  puls  x
                      (/dd/sourcecode/as):06923                ENDC
                      (/dd/sourcecode/as):06924         * Make sure 16 bit coordinate is in range
                      (/dd/sourcecode/as):06925         * Entry: W=Maximum value allowed
                      (/dd/sourcecode/as):06926         *        X=Pointer to current 16 bit number to check
                      (/dd/sourcecode/as):06927         * Exit:  B=Error code (carry set if error)
21D6 EC81             (/dd/sourcecode/as):06928         L1E13    ldd   ,x++         Get original value we are checking
21D8 2A05             (/dd/sourcecode/as):06929                  bpl   L1E1D        Positive, do the compare
                      (/dd/sourcecode/as):06930                IFNE  H6309
                      (/dd/sourcecode/as):06931                  negd               Flip a negative # to a positive #
21DA                  (/dd/sourcecode/as):06932         L1E1D    cmpr  w,d          If beyond maximum, return with Illegal coord error
                      (/dd/sourcecode/as):06933                ELSE
21DA 43               (/dd/sourcecode/as):06934                  coma
21DB 53               (/dd/sourcecode/as):06935                  comb
21DC C30001           (/dd/sourcecode/as):06936                  addd  #1
21DF 1093B5           (/dd/sourcecode/as):06937         L1E1D    cmpd  <$B5
                      (/dd/sourcecode/as):06938                ENDC
21E2 2ECC             (/dd/sourcecode/as):06939                  bgt   L1E99
21E4 5F               (/dd/sourcecode/as):06940                  clrb               In range, no error
21E5 39               (/dd/sourcecode/as):06941         L1E23    rts   
                      (/dd/sourcecode/as):06942         
21E6 C624             (/dd/sourcecode/as):06943         L1E24    ldb   #$24         Point to Arc 'clip line' end coordinate
21E8 20D4             (/dd/sourcecode/as):06944                  bra   L1E07
                      (/dd/sourcecode/as):06945         
21EA C653             (/dd/sourcecode/as):06946         L1E28    ldb   #$53         Point to Horizontal Radius
21EC 20D0             (/dd/sourcecode/as):06947                  bra   L1E07
                      (/dd/sourcecode/as):06948         
                      (/dd/sourcecode/as):06949         * Offset X into grfdrv mem by B bytes (to point to 2 byte coordinates)
21EE 8E1100           (/dd/sourcecode/as):06950         L1E2C    ldx   #GrfMem      Point to GRFDRV mem
21F1 3A               (/dd/sourcecode/as):06951                  abx                Point X to X,y coord pair we are working with
                      (/dd/sourcecode/as):06952                IFNE  H6309
                      (/dd/sourcecode/as):06953                  tim   #Scale,Wt.BSW,y  Scaling flag on?
                      (/dd/sourcecode/as):06954                ELSE
21F2 3402             (/dd/sourcecode/as):06955                  pshs  a
21F4 A629             (/dd/sourcecode/as):06956                  lda   Wt.BSW,y
21F6 8508             (/dd/sourcecode/as):06957                  bita  #Scale
21F8 3502             (/dd/sourcecode/as):06958                  puls  a
                      (/dd/sourcecode/as):06959                ENDC
21FA 2704             (/dd/sourcecode/as):06960                  beq   L1E39        no, return
21FC EC39             (/dd/sourcecode/as):06961                  ldd   Wt.SXFct,y   Get X & Y scaling values
21FE 2601             (/dd/sourcecode/as):06962                  bne   L1E3A        If either <>0, scaling is required
2200 39               (/dd/sourcecode/as):06963         L1E39    rts                If both 0 (256), scaling not required
                      (/dd/sourcecode/as):06964         
                      (/dd/sourcecode/as):06965         * Scaling required - Scale both X & Y coords
                      (/dd/sourcecode/as):06966         * Change so ldb ,s/beq are both done before ldx ,y (will save time if that
                      (/dd/sourcecode/as):06967         * particular axis does not require scaling)
                      (/dd/sourcecode/as):06968         * Entry:X=Ptr to X,Y coordinate pair (2 bytes each)
                      (/dd/sourcecode/as):06969         *       Y=Window tble ptr
                      (/dd/sourcecode/as):06970         *       A=X scaling multiplier
                      (/dd/sourcecode/as):06971         *       B=Y scaling multiplier
2201 3402             (/dd/sourcecode/as):06972         L1E3A    pshs  a            Preserve X scaling value
2203 5D               (/dd/sourcecode/as):06973                  tstb               Y need scaling?
2204 2721             (/dd/sourcecode/as):06974                  beq   NoY          No, skip scaling it
                      (/dd/sourcecode/as):06975         * ATD: 10 bytes smaller, 20 cycles longer
                      (/dd/sourcecode/as):06976         * leax 2,x
                      (/dd/sourcecode/as):06977         * bsr L1E4A
                      (/dd/sourcecode/as):06978         * leax -2,s
2206 4F               (/dd/sourcecode/as):06979                  clra               D=Y scaling value
                      (/dd/sourcecode/as):06980                IFNE  H6309
                      (/dd/sourcecode/as):06981                  muld  2,x          Multiply by Y coordinate
                      (/dd/sourcecode/as):06982                  tfr   b,a          Move 16 bit result we want to D
                      (/dd/sourcecode/as):06983                  tfr   e,b
                      (/dd/sourcecode/as):06984                  cmpf  #$cd         Round up if >=.8 leftover
                      (/dd/sourcecode/as):06985                ELSE
2207 3470             (/dd/sourcecode/as):06986                  pshs  x,y,u
2209 AE02             (/dd/sourcecode/as):06987                  ldx   2,x
220B 17FC46           (/dd/sourcecode/as):06988                  lbsr  MUL16
220E 1F20             (/dd/sourcecode/as):06989                  tfr   y,d
2210 DFB5             (/dd/sourcecode/as):06990                  stu   <$B5
2212 3570             (/dd/sourcecode/as):06991                  puls  x,y,u 
2214 1F98             (/dd/sourcecode/as):06992                  tfr   b,a
2216 D6B6             (/dd/sourcecode/as):06993                  ldb   <$B6
2218 C1CD             (/dd/sourcecode/as):06994                  cmpb  #$cd         cmpf #$cd
221A 3401             (/dd/sourcecode/as):06995                  pshs  cc           save result
221C D6B5             (/dd/sourcecode/as):06996                  ldb   <$B5         tfr e,b
221E 3501             (/dd/sourcecode/as):06997                  puls  cc
                      (/dd/sourcecode/as):06998                ENDC
2220 2503             (/dd/sourcecode/as):06999                  blo   L1E48        Fine, store value & do X coord
                      (/dd/sourcecode/as):07000                IFNE  H6309
                      (/dd/sourcecode/as):07001                  incd               Round up coordinate
                      (/dd/sourcecode/as):07002                ELSE
2222 C30001           (/dd/sourcecode/as):07003                  addd  #1
                      (/dd/sourcecode/as):07004                ENDC
2225 ED02             (/dd/sourcecode/as):07005         L1E48    std   2,x          Save scaled Y coordinate
2227 E6E0             (/dd/sourcecode/as):07006         NoY      ldb   ,s+          Get X scaling value
2229 2721             (/dd/sourcecode/as):07007                  beq   L1E52        None needed, exit
222B 4F               (/dd/sourcecode/as):07008         L1E4A    clra               D=X scaling value
                      (/dd/sourcecode/as):07009                IFNE  H6309
                      (/dd/sourcecode/as):07010                  muld  ,x           Multiply by X coordinate
                      (/dd/sourcecode/as):07011                  tfr   b,a          Move 16 bit result we want to D
                      (/dd/sourcecode/as):07012                  tfr   e,b
                      (/dd/sourcecode/as):07013                  cmpf  #$cd         Round up if >=.8 leftover
                      (/dd/sourcecode/as):07014                ELSE
222C 3470             (/dd/sourcecode/as):07015                  pshs  x,y,u
222E AE84             (/dd/sourcecode/as):07016                  ldx   ,x
2230 17FC21           (/dd/sourcecode/as):07017                  lbsr  MUL16
2233 DFB5             (/dd/sourcecode/as):07018                  stu   <$B5
2235 1F20             (/dd/sourcecode/as):07019                  tfr   y,d
2237 3570             (/dd/sourcecode/as):07020                  puls  x,y,u
2239 1F98             (/dd/sourcecode/as):07021                  tfr   b,a
223B D6B6             (/dd/sourcecode/as):07022                  ldb   <$B6
223D C1CD             (/dd/sourcecode/as):07023                  cmpb  #$cd         cmpf #$cd
223F 3401             (/dd/sourcecode/as):07024                  pshs  cc           save result
2241 D6B5             (/dd/sourcecode/as):07025                  ldb   <$B5         tfr e,b
2243 3501             (/dd/sourcecode/as):07026                  puls  cc
                      (/dd/sourcecode/as):07027                ENDC
2245 2503             (/dd/sourcecode/as):07028                  blo   L1E50        Fine, store value & return
                      (/dd/sourcecode/as):07029                IFNE  H6309
                      (/dd/sourcecode/as):07030                  incd               Round up coordinate
                      (/dd/sourcecode/as):07031                ELSE
2247 C30001           (/dd/sourcecode/as):07032                  addd  #1
                      (/dd/sourcecode/as):07033                ENDC
224A ED84             (/dd/sourcecode/as):07034         L1E50    std   ,x           Save new X coordinate
224C 39               (/dd/sourcecode/as):07035         L1E52    rts                Return
                      (/dd/sourcecode/as):07036         
224D 9660             (/dd/sourcecode/as):07037         L1EF1    lda   <$0060       get screen type
224F 8E6259           (/dd/sourcecode/as):07038                  ldx   #GrfStrt+L1F00-2  Point to mask & offset table
2252 48               (/dd/sourcecode/as):07039                  lsla               account for 2 bytes entry
2253 EC86             (/dd/sourcecode/as):07040                  ldd   a,x          get mask & offset
2255 9779             (/dd/sourcecode/as):07041                  sta   <$0079       Preserve mask
2257 3A               (/dd/sourcecode/as):07042                  abx                Point to bit shift routine
2258 9F77             (/dd/sourcecode/as):07043                  stx   <$0077       Preserve vector to bit shift routine
225A 39               (/dd/sourcecode/as):07044                  rts   
                      (/dd/sourcecode/as):07045         
                      (/dd/sourcecode/as):07046         * Bit shift table to shift to the right 3,2,1 or 0 times
225B 800D             (/dd/sourcecode/as):07047         L1F00    fcb   %10000000,L1F17-(L1F00-2)   $19    640 2 color
225D C00C             (/dd/sourcecode/as):07048                  fcb   %11000000,L1F16-(L1F00-2)   $18    320 4 color
225F C00C             (/dd/sourcecode/as):07049                  fcb   %11000000,L1F16-(L1F00-2)   $18    640 4 color
2261 F00A             (/dd/sourcecode/as):07050                  fcb   %11110000,L1F14-(L1F00-2)   $16    320 16 color
                      (/dd/sourcecode/as):07051         
2263 54               (/dd/sourcecode/as):07052         L1F14    lsrb
2264 54               (/dd/sourcecode/as):07053                  lsrb  
2265 54               (/dd/sourcecode/as):07054         L1F16    lsrb  
2266 39               (/dd/sourcecode/as):07055         L1F17    rts   
                      (/dd/sourcecode/as):07056         
                      (/dd/sourcecode/as):07057         * PSET vector table - if PSET is on. Otherwise, it points to L1F9E, which
                      (/dd/sourcecode/as):07058         * does an AND to just keep the 1 pixel's worth of the color mask and calls
                      (/dd/sourcecode/as):07059         * the proper LSET routine
2267 05               (/dd/sourcecode/as):07060         L1FB4    fcb   L1F60-(L1FB4-1)  640x200x2
2268 13               (/dd/sourcecode/as):07061                  fcb   L1F6E-(L1FB4-1)  320x200x4
2269 13               (/dd/sourcecode/as):07062                  fcb   L1F6E-(L1FB4-1)  640x200x4
226A 21               (/dd/sourcecode/as):07063                  fcb   L1F7C-(L1FB4-1)  320x200x16
                      (/dd/sourcecode/as):07064         
                      (/dd/sourcecode/as):07065         * PSET vector ($16,y) routine - 2 color screens
226B 3414             (/dd/sourcecode/as):07066         L1F60    pshs  x,b            Preserve scrn ptr & pixel mask
226D 8D32             (/dd/sourcecode/as):07067                  bsr   L1F95          Calculate pixel offset into pattern buffer
226F 3A               (/dd/sourcecode/as):07068                  abx                  Since 1 bit/pixel, that is address we need
2270 D648             (/dd/sourcecode/as):07069                  ldb   <$0048         Get LSB of X coord
2272 54               (/dd/sourcecode/as):07070                  lsrb                 Divide by 8 for byte offset into pattern buffer
2273 54               (/dd/sourcecode/as):07071                  lsrb
2274 54               (/dd/sourcecode/as):07072                  lsrb
2275 C403             (/dd/sourcecode/as):07073                  andb  #%00000011     MOD 4 since 2 color pattern buffer 4 bytes wide
2277 201A             (/dd/sourcecode/as):07074                  bra   L1F88          Go merge pattern buffer with pixel mask
                      (/dd/sourcecode/as):07075         
                      (/dd/sourcecode/as):07076         * PSET vector ($16,y) routine - 4 color screens
2279 3414             (/dd/sourcecode/as):07077         L1F6E    pshs  x,b            Preserve scrn ptr & pixel mask
227B 8D24             (/dd/sourcecode/as):07078                  bsr   L1F95          Calculate pixel offset into pattern buffer
227D 58               (/dd/sourcecode/as):07079                  lslb                 Since 2 bits/pixel, multiply vert. offset by 2
227E 3A               (/dd/sourcecode/as):07080                  abx
227F D648             (/dd/sourcecode/as):07081                  ldb   <$0048         Get LSB of X coord
2281 54               (/dd/sourcecode/as):07082                  lsrb                 Divide by 4 for byte offset into pattern buffer
2282 54               (/dd/sourcecode/as):07083                  lsrb
2283 C407             (/dd/sourcecode/as):07084                  andb  #%00000111     MOD 8 since 4 color pattern buffer 8 bytes wide
2285 200C             (/dd/sourcecode/as):07085                  bra   L1F88          Go merge pattern buffer with pixel mask
                      (/dd/sourcecode/as):07086         
                      (/dd/sourcecode/as):07087         * PSET vector ($16,y) routine - 16 color screens
2287 3414             (/dd/sourcecode/as):07088         L1F7C    pshs  x,b            Preserve scrn ptr & pixel mask
2289 8D16             (/dd/sourcecode/as):07089                  bsr   L1F95          Calculate pixel offset into pattern buffer
228B 58               (/dd/sourcecode/as):07090                  lslb                 Since 4 bits/pixel, multiply vert. offset by 4
228C 58               (/dd/sourcecode/as):07091                  lslb
228D 3A               (/dd/sourcecode/as):07092                  abx
228E D648             (/dd/sourcecode/as):07093                  ldb   <$0048         Get LSB of X coord
2290 54               (/dd/sourcecode/as):07094                  lsrb                 Divide by 2 for byte offset into pattern buffer
2291 C40F             (/dd/sourcecode/as):07095                  andb  #%00001111     MOD 16 since 16 color pattern buffer 16 bytes wide
2293 E685             (/dd/sourcecode/as):07096         L1F88    ldb   b,x            Get proper byte from pattern buffer
2295 E4E0             (/dd/sourcecode/as):07097                  andb  ,s+            Only keep bits that are in pixel mask
2297 3510             (/dd/sourcecode/as):07098                  puls  x              Restore screen ptr
                      (/dd/sourcecode/as):07099         * DEFAULT PSET ROUTINE IF NO PATTERN BUFFER IS CURRENTLY ACTIVE. POINTED TO
                      (/dd/sourcecode/as):07100         * BY [$64,u], usually called from L1F5B
     2299             (/dd/sourcecode/as):07101         L1F9E    equ   *
                      (/dd/sourcecode/as):07102                IFNE  H6309
                      (/dd/sourcecode/as):07103                  andr  b,a            Only keep proper color from patterned pixel mask
                      (/dd/sourcecode/as):07104                  jmp   ,w             Call current LSET vector
                      (/dd/sourcecode/as):07105                ELSE
2299 3404             (/dd/sourcecode/as):07106                  pshs  b
229B A4E0             (/dd/sourcecode/as):07107                  anda  ,s+
229D 6E9F11B5         (/dd/sourcecode/as):07108                  jmp   [>GrfMem+$B5]
                      (/dd/sourcecode/as):07109                ENDC
                      (/dd/sourcecode/as):07110         * Calculate pixel offset into pattern buffer (32x8 pixels only) from Y coord
                      (/dd/sourcecode/as):07111         * Exit: X=ptr to start of data in pattern buffer
                      (/dd/sourcecode/as):07112         *       B=Pixel offset within buffer to go to
22A1 9E66             (/dd/sourcecode/as):07113         L1F95    ldx   <$0066         Get current pattern's buffer ptr
22A3 D64A             (/dd/sourcecode/as):07114                  ldb   <$004A         Calculate MOD 8 the line number we want
22A5 C407             (/dd/sourcecode/as):07115                  andb  #%00000111     to get data from the Pattern buffer
22A7 58               (/dd/sourcecode/as):07116                  lslb                 Multiply by 4 to calculate which line within
22A8 58               (/dd/sourcecode/as):07117                  lslb                 Pattern buffer we want (since 32 pixels/line)
22A9 39               (/dd/sourcecode/as):07118                  rts
                      (/dd/sourcecode/as):07119         
22AA 52F312           (/dd/sourcecode/as):07120                  emod
     22AD             (/dd/sourcecode/as):07121         eom      equ    *
                      (/dd/sourcecode/as):07122                  end
