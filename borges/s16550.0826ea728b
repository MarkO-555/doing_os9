                      ( s16550_large.asm):00001         ********************************************************************
                      ( s16550_large.asm):00002         * s16550_large - 16550 serial driver
                      ( s16550_large.asm):00003         *
                      ( s16550_large.asm):00004         * $Id$
                      ( s16550_large.asm):00005         *
                      ( s16550_large.asm):00006         * Ed.    Comments                                       Who YY/MM/DD
                      ( s16550_large.asm):00007         * ------------------------------------------------------------------
                      ( s16550_large.asm):00008         * 28     Patched by Bob Brose to fix IRQ poll table     BOB ??/??/??
                      ( s16550_large.asm):00009         *        duplication bug
                      ( s16550_large.asm):00010         
                      ( s16550_large.asm):00011                  nam   s16550
                      ( s16550_large.asm):00012                  ttl   os9 device driver    
                      ( s16550_large.asm):00013         
                      ( s16550_large.asm):00014         * Disassembled 02/04/02 22:41:55 by Disasm v1.6 (C) 1988 by RML
                      ( s16550_large.asm):00015         
                      ( s16550_large.asm):00016                  ifp1
                      ( s16550_large.asm):00017                  use   defsfile
     0002             (         defsfile):00001         Level  equ 2
                      (         defsfile):00002                use os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (         defsfile):00003                use scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      ( s16550_large.asm):00018                  endc
                      ( s16550_large.asm):00019         
     00E1             ( s16550_large.asm):00020         tylg     set   Drivr+Objct   
     0081             ( s16550_large.asm):00021         atrv     set   ReEnt+rev
     0001             ( s16550_large.asm):00022         rev      set   $01
                      ( s16550_large.asm):00023         
0000 87CD0826000EE181 ( s16550_large.asm):00024                  mod   eom,name,tylg,atrv,start,size
     F500160100
                      ( s16550_large.asm):00025         
0000.                 ( s16550_large.asm):00026         u0000    rmb   1
0001.                 ( s16550_large.asm):00027         u0001    rmb   2
0003.                 ( s16550_large.asm):00028         u0003    rmb   1
0004.                 ( s16550_large.asm):00029         u0004    rmb   1
0005.                 ( s16550_large.asm):00030         u0005    rmb   1
0006.                 ( s16550_large.asm):00031         u0006    rmb   2
0008.                 ( s16550_large.asm):00032         u0008    rmb   1
0009.                 ( s16550_large.asm):00033         u0009    rmb   1
000A.                 ( s16550_large.asm):00034         u000A    rmb   1
000B.                 ( s16550_large.asm):00035         u000B    rmb   1
000C.                 ( s16550_large.asm):00036         u000C    rmb   1
000D.                 ( s16550_large.asm):00037         u000D    rmb   1
000E.                 ( s16550_large.asm):00038         u000E    rmb   1
000F.                 ( s16550_large.asm):00039         u000F    rmb   1
0010.                 ( s16550_large.asm):00040         u0010    rmb   4
0014.                 ( s16550_large.asm):00041         u0014    rmb   2
0016.                 ( s16550_large.asm):00042         u0016    rmb   3
0019.                 ( s16550_large.asm):00043         u0019    rmb   2
001B.                 ( s16550_large.asm):00044         u001B    rmb   2
001D.                 ( s16550_large.asm):00045         u001D    rmb   1
001E.                 ( s16550_large.asm):00046         u001E    rmb   1
001F.                 ( s16550_large.asm):00047         u001F    rmb   1
0020.                 ( s16550_large.asm):00048         u0020    rmb   1
0021.                 ( s16550_large.asm):00049         u0021    rmb   1
0022.                 ( s16550_large.asm):00050         u0022    rmb   1
0023.                 ( s16550_large.asm):00051         u0023    rmb   2
0025.                 ( s16550_large.asm):00052         u0025    rmb   2
0027.                 ( s16550_large.asm):00053         u0027    rmb   1
0028.                 ( s16550_large.asm):00054         u0028    rmb   1
0029.                 ( s16550_large.asm):00055         u0029    rmb   1
002A.                 ( s16550_large.asm):00056         u002A    rmb   2
002C.                 ( s16550_large.asm):00057         u002C    rmb   2
002E.                 ( s16550_large.asm):00058         u002E    rmb   2
0030.                 ( s16550_large.asm):00059         u0030    rmb   2
0032.                 ( s16550_large.asm):00060         u0032    rmb   2
0034.                 ( s16550_large.asm):00061         u0034    rmb   1
0035.                 ( s16550_large.asm):00062         u0035    rmb   1
0036.                 ( s16550_large.asm):00063         u0036    rmb   2
0038.                 ( s16550_large.asm):00064         OutNxt   rmb   2
003A.                 ( s16550_large.asm):00065         u003A    rmb   1
003B.                 ( s16550_large.asm):00066         u003B    rmb   1
003C.                 ( s16550_large.asm):00067         u003C    rmb   2
003E.                 ( s16550_large.asm):00068         u003E    rmb   2
0040.                 ( s16550_large.asm):00069         u0040    rmb   1
0041.                 ( s16550_large.asm):00070         u0041    rmb   2
0043.                 ( s16550_large.asm):00071         u0043    rmb   1
0044.                 ( s16550_large.asm):00072         u0044    rmb   52
0078.                 ( s16550_large.asm):00073         u0078    rmb   8
0080.                 ( s16550_large.asm):00074         u0080    rmb   128
0100.                 ( s16550_large.asm):00075         U0100    rmb   0
     0100             ( s16550_large.asm):00076         size     equ   .
                      ( s16550_large.asm):00077         
000D 03               ( s16550_large.asm):00078                  fcb   $03 
                      ( s16550_large.asm):00079         
000E 7331363535B0     ( s16550_large.asm):00080         name     fcs   /s16550/
0014 1C               ( s16550_large.asm):00081                  fcb   28
                      ( s16550_large.asm):00082         
0015 03               ( s16550_large.asm):00083         L0015    fcb   $03 
                      ( s16550_large.asm):00084         
0016 16000F           ( s16550_large.asm):00085         start    lbra  Init
0019 16012F           ( s16550_large.asm):00086                  lbra  Read
001C 1600EE           ( s16550_large.asm):00087                  lbra  Write
001F 1601E2           ( s16550_large.asm):00088                  lbra  GetStat
0022 160334           ( s16550_large.asm):00089                  lbra  SetStat
0025 16051D           ( s16550_large.asm):00090                  lbra  Term
                      ( s16550_large.asm):00091         
                      ( s16550_large.asm):00092         * Init
                      ( s16550_large.asm):00093         *
                      ( s16550_large.asm):00094         * Entry:
                      ( s16550_large.asm):00095         *    Y  = address of device descriptor
                      ( s16550_large.asm):00096         *    U  = address of device memory area
                      ( s16550_large.asm):00097         *
                      ( s16550_large.asm):00098         * Exit:
                      ( s16550_large.asm):00099         *    CC = carry set on error
                      ( s16550_large.asm):00100         *    B  = error code
                      ( s16550_large.asm):00101         *
0028 5F               ( s16550_large.asm):00102         Init     clrb  
0029 340D             ( s16550_large.asm):00103                  pshs  dp,b,cc
002B 170595           ( s16550_large.asm):00104                  lbsr  GetDP
002E DC01             ( s16550_large.asm):00105                  ldd   <u0001
0030 C30002           ( s16550_large.asm):00106                  addd  #$0002
0033 3420             ( s16550_large.asm):00107                  pshs  y                save Y
0035 308D07A7         ( s16550_large.asm):00108                  leax  >IRQPkt,pcr
0039 318D059B         ( s16550_large.asm):00109                  leay  >IRQRtn,pcr
003D 103F2A           ( s16550_large.asm):00110                  os9   F$IRQ            install interrupt service routine
0040 3520             ( s16550_large.asm):00111                  puls  y                restore Y
0042 2406             ( s16550_large.asm):00112                  bcc   L004A            branch if ok
0044 3503             ( s16550_large.asm):00113                  puls  a,cc
0046 1A01             ( s16550_large.asm):00114                  orcc  #Carry           set error flag
0048 3588             ( s16550_large.asm):00115                  puls  pc,dp            exit with error
004A A6A811           ( s16550_large.asm):00116         L004A    lda   <M$Opt,y         get option count byte
004D 811C             ( s16550_large.asm):00117                  cmpa  #$1C             size of standard SCF?
004F 230E             ( s16550_large.asm):00118                  bls   L005F            branch if lower/same
0051 A6A82E           ( s16550_large.asm):00119                  lda   <$2E,y           else grab driver specific byte
0054 8410             ( s16550_large.asm):00120                  anda  #$10
0056 971F             ( s16550_large.asm):00121                  sta   <u001F
0058 A6A82E           ( s16550_large.asm):00122                  lda   <$2E,y
005B 840F             ( s16550_large.asm):00123                  anda  #$0F             mask out %00001111
005D 2602             ( s16550_large.asm):00124                  bne   L0061            if not zero, A holds number of 256 byte pages to allocate
005F 8601             ( s16550_large.asm):00125         L005F    lda   #$01             else allocate 1 256 byte page
0061 5F               ( s16550_large.asm):00126         L0061    clrb  
0062 3440             ( s16550_large.asm):00127                  pshs  u
0064 103F28           ( s16550_large.asm):00128                  os9   F$SRqMem         allocate memory
0067 1F31             ( s16550_large.asm):00129                  tfr   u,x              transfer buffer start to X
0069 3540             ( s16550_large.asm):00130                  puls  u
006B 241A             ( s16550_large.asm):00131                  bcc   L0087
                      ( s16550_large.asm):00132         * Code here is in case of alloc error -- cleanup and return with error
006D E761             ( s16550_large.asm):00133                  stb   $01,s
006F 8E0000           ( s16550_large.asm):00134                  ldx   #$0000
0072 DC01             ( s16550_large.asm):00135                  ldd   <u0001
0074 C30002           ( s16550_large.asm):00136                  addd  #$0002
0077 3420             ( s16550_large.asm):00137                  pshs  y
0079 318D055B         ( s16550_large.asm):00138                  leay  >IRQRtn,pcr
007D 103F2A           ( s16550_large.asm):00139                  os9   F$IRQ    
0080 3520             ( s16550_large.asm):00140                  puls  y
0082 350D             ( s16550_large.asm):00141                  puls  dp,b,cc
0084 1A01             ( s16550_large.asm):00142                  orcc  #Carry
0086 39               ( s16550_large.asm):00143                  rts   
                      ( s16550_large.asm):00144         
                      ( s16550_large.asm):00145         * D = size of allocated buffer in bytes
0087 9F32             ( s16550_large.asm):00146         L0087    stx   <u0032           store buffer start in several pointers
0089 9F2C             ( s16550_large.asm):00147                  stx   <u002C
008B 9F2E             ( s16550_large.asm):00148                  stx   <u002E
008D DD36             ( s16550_large.asm):00149                  std   <u0036
008F 308B             ( s16550_large.asm):00150                  leax  d,x              point at end of buffer
0091 9F30             ( s16550_large.asm):00151                  stx   <u0030           store
0093 1F89             ( s16550_large.asm):00152                  tfr   a,b              transfer size hi byte to B
0095 4F               ( s16550_large.asm):00153                  clra                   clear hi byte
0096 CA02             ( s16550_large.asm):00154                  orb   #$02             OR original hi byte with 2
0098 C40E             ( s16550_large.asm):00155                  andb  #$0E             clear bit 0 (b = %0000XXX0)
009A 58               ( s16550_large.asm):00156                  lslb  
009B 58               ( s16550_large.asm):00157                  lslb  
009C 58               ( s16550_large.asm):00158                  lslb  
009D 58               ( s16550_large.asm):00159                  lslb  
009E 5D               ( s16550_large.asm):00160                  tstb  
009F 2A02             ( s16550_large.asm):00161                  bpl   L00A3
00A1 C680             ( s16550_large.asm):00162                  ldb   #$80
00A3 3406             ( s16550_large.asm):00163         L00A3    pshs  b,a
00A5 DC36             ( s16550_large.asm):00164                  ldd   <u0036
00A7 A3E1             ( s16550_large.asm):00165                  subd  ,s++
00A9 DD2A             ( s16550_large.asm):00166                  std   <u002A
00AB 30C844           ( s16550_large.asm):00167                  leax  <u0044,u
00AE 9F3E             ( s16550_large.asm):00168                  stx   <u003E
00B0 9F38             ( s16550_large.asm):00169                  stx   <OutNxt
00B2 9F3A             ( s16550_large.asm):00170                  stx   <u003A
00B4 30C90100         ( s16550_large.asm):00171                  leax  >u0100,u
00B8 9F3C             ( s16550_large.asm):00172                  stx   <u003C
00BA CC00BC           ( s16550_large.asm):00173                  ldd   #$00BC
00BD DD41             ( s16550_large.asm):00174                  std   <u0041
00BF 0F34             ( s16550_large.asm):00175                  clr   <u0034
00C1 0F35             ( s16550_large.asm):00176                  clr   <u0035
00C3 0F40             ( s16550_large.asm):00177                  clr   <u0040
00C5 ECA826           ( s16550_large.asm):00178                  ldd   <$26,y
00C8 DD1D             ( s16550_large.asm):00179                  std   <u001D
00CA 17024B           ( s16550_large.asm):00180                  lbsr  L0318
00CD 9E01             ( s16550_large.asm):00181                  ldx   <u0001
00CF A605             ( s16550_large.asm):00182                  lda   $05,x
00D1 A684             ( s16550_large.asm):00183                  lda   ,x
00D3 A605             ( s16550_large.asm):00184                  lda   $05,x
00D5 A606             ( s16550_large.asm):00185                  lda   $06,x
00D7 84B0             ( s16550_large.asm):00186                  anda  #$B0
00D9 9720             ( s16550_large.asm):00187                  sta   <u0020
00DB 5F               ( s16550_large.asm):00188                  clrb  
00DC 8510             ( s16550_large.asm):00189                  bita  #$10
00DE 2602             ( s16550_large.asm):00190                  bne   L00E2
00E0 CA02             ( s16550_large.asm):00191                  orb   #$02
00E2 8520             ( s16550_large.asm):00192         L00E2    bita  #$20
00E4 2602             ( s16550_large.asm):00193                  bne   L00E8
00E6 CA01             ( s16550_large.asm):00194                  orb   #$01
00E8 D728             ( s16550_large.asm):00195         L00E8    stb   <u0028
00EA 1A50             ( s16550_large.asm):00196                  orcc  #IntMasks
00EC A68DFF25         ( s16550_large.asm):00197                  lda   >L0015,pcr
00F0 2B03             ( s16550_large.asm):00198                  bmi   L00F5
00F2 B7FF7F           ( s16550_large.asm):00199                  sta   >$FF7F
00F5 B6FF23           ( s16550_large.asm):00200         L00F5    lda   >$FF23
00F8 84FC             ( s16550_large.asm):00201                  anda  #$FC
00FA B7FF23           ( s16550_large.asm):00202                  sta   >$FF23
00FD B6FF22           ( s16550_large.asm):00203                  lda   >$FF22
0100 B60092           ( s16550_large.asm):00204                  lda   >$0092
0103 8A01             ( s16550_large.asm):00205                  ora   #$01
0105 B70092           ( s16550_large.asm):00206                  sta   >$0092
0108 B7FF92           ( s16550_large.asm):00207                  sta   >$FF92
010B 358D             ( s16550_large.asm):00208                  puls  pc,dp,b,cc
                      ( s16550_large.asm):00209         
010D 5F               ( s16550_large.asm):00210         Write    clrb  
010E 340D             ( s16550_large.asm):00211                  pshs  dp,b,cc
0110 1704B0           ( s16550_large.asm):00212                  lbsr  GetDP
0113 9E38             ( s16550_large.asm):00213                  ldx   <OutNxt          get address of next pos to save write char
0115 A780             ( s16550_large.asm):00214                  sta   ,x+              store char (A) at ,X and increment
0117 9C3C             ( s16550_large.asm):00215                  cmpx  <u003C           less than end of buffer?
0119 2502             ( s16550_large.asm):00216                  bcs   L011D
011B 9E3E             ( s16550_large.asm):00217                  ldx   <u003E
011D 1A50             ( s16550_large.asm):00218         L011D    orcc  #IntMasks        mask interrupts
011F 9C3A             ( s16550_large.asm):00219                  cmpx  <u003A           reached end of buffer?
0121 2615             ( s16550_large.asm):00220                  bne   L0138            nope, still more room
0123 3410             ( s16550_large.asm):00221                  pshs  x
0125 170485           ( s16550_large.asm):00222                  lbsr  L05AD
0128 3510             ( s16550_large.asm):00223                  puls  x
012A FE0050           ( s16550_large.asm):00224                  ldu   >D.Proc
012D E6C819           ( s16550_large.asm):00225                  ldb   <P$Signal,u      get pending signal, if any
0130 2704             ( s16550_large.asm):00226                  beq   L0136            branch if none
0132 C103             ( s16550_large.asm):00227                  cmpb  #S$Intrpt        interrupt?
0134 2308             ( s16550_large.asm):00228                  bls   L013E            branch if lower or same
0136 20E5             ( s16550_large.asm):00229         L0136    bra   L011D
0138 9F38             ( s16550_large.asm):00230         L0138    stx   <OutNxt          update next output position
013A 0C40             ( s16550_large.asm):00231                  inc   <u0040           increment output buffer size
013C 8D02             ( s16550_large.asm):00232                  bsr   L0140
013E 358D             ( s16550_large.asm):00233         L013E    puls  pc,dp,b,cc
0140 860F             ( s16550_large.asm):00234         L0140    lda   #$0F
0142 2002             ( s16550_large.asm):00235                  bra   L0146
0144 860D             ( s16550_large.asm):00236                  lda   #$0D
0146 9E01             ( s16550_large.asm):00237         L0146    ldx   <V.Port
0148 A701             ( s16550_large.asm):00238                  sta   $01,x
014A 39               ( s16550_large.asm):00239                  rts   
                      ( s16550_large.asm):00240         
014B 5F               ( s16550_large.asm):00241         Read     clrb  
014C 340D             ( s16550_large.asm):00242                  pshs  dp,b,cc
014E 170472           ( s16550_large.asm):00243                  lbsr  GetDP
0151 1A50             ( s16550_large.asm):00244                  orcc  #IntMasks
0153 DC34             ( s16550_large.asm):00245                  ldd   <u0034
0155 2712             ( s16550_large.asm):00246                  beq   L0169
0157 10830010         ( s16550_large.asm):00247                  cmpd  #$0010
015B 10260030         ( s16550_large.asm):00248                  lbne  L018F
015F 1CAF             ( s16550_large.asm):00249                  andcc #^IntMasks
0161 8D5A             ( s16550_large.asm):00250                  bsr   L01BD
0163 1A50             ( s16550_large.asm):00251         L0163    orcc  #IntMasks
0165 DC34             ( s16550_large.asm):00252                  ldd   <u0034
0167 2626             ( s16550_large.asm):00253                  bne   L018F
0169 170441           ( s16550_large.asm):00254         L0169    lbsr  L05AD
016C BE0050           ( s16550_large.asm):00255                  ldx   >$0050
016F E68819           ( s16550_large.asm):00256                  ldb   <$19,x
0172 2704             ( s16550_large.asm):00257                  beq   L0178
0174 C103             ( s16550_large.asm):00258                  cmpb  #$03
0176 2312             ( s16550_large.asm):00259                  bls   L018A
0178 E60C             ( s16550_large.asm):00260         L0178    ldb   $0C,x
017A C402             ( s16550_large.asm):00261                  andb  #$02
017C 260C             ( s16550_large.asm):00262                  bne   L018A
017E D60E             ( s16550_large.asm):00263                  ldb   <u000E
0180 2624             ( s16550_large.asm):00264                  bne   L01A6
0182 D605             ( s16550_large.asm):00265                  ldb   <u0005
0184 27DD             ( s16550_large.asm):00266                  beq   L0163
0186 1A50             ( s16550_large.asm):00267                  orcc  #IntMasks
0188 20DF             ( s16550_large.asm):00268                  bra   L0169
018A 350B             ( s16550_large.asm):00269         L018A    puls  dp,a,cc
018C 1A01             ( s16550_large.asm):00270                  orcc  #Carry
018E 39               ( s16550_large.asm):00271                  rts   
018F 830001           ( s16550_large.asm):00272         L018F    subd  #$0001
0192 DD34             ( s16550_large.asm):00273                  std   <u0034
0194 9E2E             ( s16550_large.asm):00274                  ldx   <u002E
0196 A680             ( s16550_large.asm):00275                  lda   ,x+
0198 9C30             ( s16550_large.asm):00276                  cmpx  <u0030
019A 2602             ( s16550_large.asm):00277                  bne   L019E
019C 9E32             ( s16550_large.asm):00278                  ldx   <u0032
019E 9F2E             ( s16550_large.asm):00279         L019E    stx   <u002E
01A0 1CAF             ( s16550_large.asm):00280                  andcc #^IntMasks
01A2 D60E             ( s16550_large.asm):00281                  ldb   <u000E
01A4 2715             ( s16550_large.asm):00282                  beq   L01BB
01A6 E7A83A           ( s16550_large.asm):00283         L01A6    stb   <$3A,y
01A9 0F0E             ( s16550_large.asm):00284                  clr   <u000E
01AB 350B             ( s16550_large.asm):00285                  puls  dp,a,cc
01AD C520             ( s16550_large.asm):00286                  bitb  #$20
01AF 2705             ( s16550_large.asm):00287                  beq   L01B6
01B1 C6F4             ( s16550_large.asm):00288                  ldb   #$F4
01B3 1A01             ( s16550_large.asm):00289                  orcc  #Carry
01B5 39               ( s16550_large.asm):00290                  rts   
01B6 C6DC             ( s16550_large.asm):00291         L01B6    ldb   #$DC
01B8 1A01             ( s16550_large.asm):00292                  orcc  #Carry
01BA 39               ( s16550_large.asm):00293                  rts   
01BB 358D             ( s16550_large.asm):00294         L01BB    puls  pc,dp,b,cc
01BD 3401             ( s16550_large.asm):00295         L01BD    pshs  cc
01BF 9E01             ( s16550_large.asm):00296                  ldx   <u0001
01C1 D628             ( s16550_large.asm):00297                  ldb   <u0028
01C3 C570             ( s16550_large.asm):00298                  bitb  #$70
01C5 2712             ( s16550_large.asm):00299                  beq   L01D9
01C7 C520             ( s16550_large.asm):00300                  bitb  #$20
01C9 2710             ( s16550_large.asm):00301                  beq   L01DB
01CB 1A50             ( s16550_large.asm):00302                  orcc  #IntMasks
01CD D628             ( s16550_large.asm):00303                  ldb   <u0028
01CF C4DF             ( s16550_large.asm):00304                  andb  #$DF
01D1 D728             ( s16550_large.asm):00305                  stb   <u0028
01D3 A604             ( s16550_large.asm):00306                  lda   $04,x
01D5 8A02             ( s16550_large.asm):00307                  ora   #$02
01D7 A704             ( s16550_large.asm):00308                  sta   $04,x
01D9 3581             ( s16550_large.asm):00309         L01D9    puls  pc,cc
01DB C510             ( s16550_large.asm):00310         L01DB    bitb  #$10
01DD 2710             ( s16550_large.asm):00311                  beq   L01EF
01DF 1A50             ( s16550_large.asm):00312                  orcc  #IntMasks
01E1 D628             ( s16550_large.asm):00313                  ldb   <u0028
01E3 C4EF             ( s16550_large.asm):00314                  andb  #$EF
01E5 D728             ( s16550_large.asm):00315                  stb   <u0028
01E7 A604             ( s16550_large.asm):00316                  lda   $04,x
01E9 8A01             ( s16550_large.asm):00317                  ora   #$01
01EB A704             ( s16550_large.asm):00318                  sta   $04,x
01ED 20EA             ( s16550_large.asm):00319                  bra   L01D9
01EF C540             ( s16550_large.asm):00320         L01EF    bitb  #$40
01F1 27E6             ( s16550_large.asm):00321                  beq   L01D9
01F3 D60F             ( s16550_large.asm):00322                  ldb   <u000F
01F5 1A50             ( s16550_large.asm):00323                  orcc  #IntMasks
01F7 D743             ( s16550_large.asm):00324                  stb   <u0043
01F9 17FF44           ( s16550_large.asm):00325                  lbsr  L0140
01FC D628             ( s16550_large.asm):00326                  ldb   <u0028
01FE C4BF             ( s16550_large.asm):00327                  andb  #$BF
0200 D728             ( s16550_large.asm):00328                  stb   <u0028
0202 20D5             ( s16550_large.asm):00329                  bra   L01D9
                      ( s16550_large.asm):00330         
0204 5F               ( s16550_large.asm):00331         GetStat  clrb  
0205 340D             ( s16550_large.asm):00332                  pshs  dp,b,cc
0207 1703B9           ( s16550_large.asm):00333                  lbsr  GetDP
020A 8101             ( s16550_large.asm):00334                  cmpa  #$01
020C 2618             ( s16550_large.asm):00335                  bne   L0226
020E DC34             ( s16550_large.asm):00336                  ldd   <u0034
0210 270C             ( s16550_large.asm):00337                  beq   L021E
0212 4D               ( s16550_large.asm):00338                  tsta  
0213 2702             ( s16550_large.asm):00339                  beq   L0217
0215 C6FF             ( s16550_large.asm):00340                  ldb   #$FF
0217 AE26             ( s16550_large.asm):00341         L0217    ldx   $06,y
0219 E702             ( s16550_large.asm):00342                  stb   $02,x
021B 1600F8           ( s16550_large.asm):00343                  lbra  L0316
021E 3505             ( s16550_large.asm):00344         L021E    puls  b,cc
0220 1A01             ( s16550_large.asm):00345                  orcc  #Carry
0222 C6F6             ( s16550_large.asm):00346                  ldb   #$F6
0224 3588             ( s16550_large.asm):00347                  puls  pc,dp
0226 8128             ( s16550_large.asm):00348         L0226    cmpa  #$28
0228 2624             ( s16550_large.asm):00349                  bne   L024E
022A DC1D             ( s16550_large.asm):00350                  ldd   <u001D
022C 0D1F             ( s16550_large.asm):00351                  tst   <u001F
022E 2706             ( s16550_large.asm):00352                  beq   L0236
0230 C504             ( s16550_large.asm):00353                  bitb  #$04
0232 2602             ( s16550_large.asm):00354                  bne   L0236
0234 C4F7             ( s16550_large.asm):00355                  andb  #$F7
0236 AE26             ( s16550_large.asm):00356         L0236    ldx   $06,y
0238 ED08             ( s16550_large.asm):00357                  std   $08,x
023A 5F               ( s16550_large.asm):00358                  clrb  
023B 9620             ( s16550_large.asm):00359                  lda   <u0020
023D 8580             ( s16550_large.asm):00360                  bita  #$80
023F 2602             ( s16550_large.asm):00361                  bne   L0243
0241 CA10             ( s16550_large.asm):00362                  orb   #$10
0243 8520             ( s16550_large.asm):00363         L0243    bita  #$20
0245 2602             ( s16550_large.asm):00364                  bne   L0249
0247 CA40             ( s16550_large.asm):00365                  orb   #$40
0249 E702             ( s16550_large.asm):00366         L0249    stb   $02,x
024B 1600C8           ( s16550_large.asm):00367                  lbra  L0316
024E 8106             ( s16550_large.asm):00368         L024E    cmpa  #$06
0250 2604             ( s16550_large.asm):00369                  bne   L0256
0252 5F               ( s16550_large.asm):00370                  clrb  
0253 1600C0           ( s16550_large.asm):00371                  lbra  L0316
0256 81C1             ( s16550_large.asm):00372         L0256    cmpa  #$C1
0258 2615             ( s16550_large.asm):00373                  bne   L026F
025A AE26             ( s16550_large.asm):00374                  ldx   $06,y
025C CC00BC           ( s16550_large.asm):00375                  ldd   #$00BC
025F ED06             ( s16550_large.asm):00376                  std   $06,x
0261 4F               ( s16550_large.asm):00377                  clra  
0262 D640             ( s16550_large.asm):00378                  ldb   <u0040
0264 ED08             ( s16550_large.asm):00379                  std   $08,x
0266 D628             ( s16550_large.asm):00380                  ldb   <u0028
0268 C407             ( s16550_large.asm):00381                  andb  #$07
026A E702             ( s16550_large.asm):00382                  stb   $02,x
026C 1600A7           ( s16550_large.asm):00383                  lbra  L0316
026F 81D0             ( s16550_large.asm):00384         L026F    cmpa  #$D0
0271 266A             ( s16550_large.asm):00385                  bne   L02DD
0273 D60E             ( s16550_large.asm):00386                  ldb   <u000E
0275 1026FF2D         ( s16550_large.asm):00387                  lbne  L01A6
0279 1A50             ( s16550_large.asm):00388                  orcc  #IntMasks
027B DC30             ( s16550_large.asm):00389                  ldd   <u0030
027D 932E             ( s16550_large.asm):00390                  subd  <u002E
027F 109334           ( s16550_large.asm):00391                  cmpd  <u0034
0282 2504             ( s16550_large.asm):00392                  bcs   L0288
0284 DC34             ( s16550_large.asm):00393                  ldd   <u0034
0286 2796             ( s16550_large.asm):00394                  beq   L021E
0288 1CAF             ( s16550_large.asm):00395         L0288    andcc #^IntMasks
028A EE26             ( s16550_large.asm):00396                  ldu   $06,y
028C 10A348           ( s16550_large.asm):00397                  cmpd  u0008,u
028F 2302             ( s16550_large.asm):00398                  bls   L0293
0291 EC48             ( s16550_large.asm):00399                  ldd   u0008,u
0293 ED48             ( s16550_large.asm):00400         L0293    std   u0008,u
0295 2744             ( s16550_large.asm):00401                  beq   L02DB
0297 3406             ( s16550_large.asm):00402                  pshs  b,a
0299 3470             ( s16550_large.asm):00403                  pshs  u,y,x
029B ED62             ( s16550_large.asm):00404                  std   $02,s
029D DC2E             ( s16550_large.asm):00405                  ldd   <u002E
029F EDE4             ( s16550_large.asm):00406                  std   ,s
02A1 EC46             ( s16550_large.asm):00407                  ldd   u0006,u
02A3 ED64             ( s16550_large.asm):00408                  std   $04,s
02A5 BE0050           ( s16550_large.asm):00409                  ldx   >$0050
02A8 E606             ( s16550_large.asm):00410                  ldb   $06,x
02AA B600D0           ( s16550_large.asm):00411                  lda   >$00D0
02AD 3570             ( s16550_large.asm):00412                  puls  u,y,x
02AF 1A50             ( s16550_large.asm):00413                  orcc  #IntMasks
02B1 103F38           ( s16550_large.asm):00414                  os9   F$Move   
02B4 DC34             ( s16550_large.asm):00415                  ldd   <u0034
02B6 A3E4             ( s16550_large.asm):00416                  subd  ,s
02B8 DD34             ( s16550_large.asm):00417                  std   <u0034
02BA 1CAF             ( s16550_large.asm):00418                  andcc #^IntMasks
02BC 10830010         ( s16550_large.asm):00419                  cmpd  #$0010
02C0 220B             ( s16550_large.asm):00420                  bhi   L02CD
02C2 E3E4             ( s16550_large.asm):00421                  addd  ,s
02C4 10830010         ( s16550_large.asm):00422                  cmpd  #$0010
02C8 2303             ( s16550_large.asm):00423                  bls   L02CD
02CA 17FEF0           ( s16550_large.asm):00424                  lbsr  L01BD
02CD 3506             ( s16550_large.asm):00425         L02CD    puls  b,a
02CF 9E2E             ( s16550_large.asm):00426                  ldx   <u002E
02D1 308B             ( s16550_large.asm):00427                  leax  d,x
02D3 9C30             ( s16550_large.asm):00428                  cmpx  <u0030
02D5 2602             ( s16550_large.asm):00429                  bne   L02D9
02D7 9E32             ( s16550_large.asm):00430                  ldx   <u0032
02D9 9F2E             ( s16550_large.asm):00431         L02D9    stx   <u002E
02DB 2039             ( s16550_large.asm):00432         L02DB    bra   L0316
02DD 81D2             ( s16550_large.asm):00433         L02DD    cmpa  #$D2
02DF 2614             ( s16550_large.asm):00434                  bne   L02F5
02E1 CC0B04           ( s16550_large.asm):00435                  ldd   #$0B04
02E4 10AE26           ( s16550_large.asm):00436                  ldy   $06,y
02E7 ED21             ( s16550_large.asm):00437                  std   $01,y
02E9 CC0077           ( s16550_large.asm):00438                  ldd   #$0077
02EC ED26             ( s16550_large.asm):00439                  std   $06,y
02EE CC0001           ( s16550_large.asm):00440                  ldd   #$0001
02F1 ED28             ( s16550_large.asm):00441                  std   $08,y
02F3 2021             ( s16550_large.asm):00442                  bra   L0316
02F5 8126             ( s16550_large.asm):00443         L02F5    cmpa  #$26
02F7 2615             ( s16550_large.asm):00444                  bne   L030E
02F9 AE26             ( s16550_large.asm):00445                  ldx   $06,y
02FB 10AE23           ( s16550_large.asm):00446                  ldy   $03,y
02FE 10AE24           ( s16550_large.asm):00447                  ldy   $04,y
0301 4F               ( s16550_large.asm):00448                  clra  
0302 E6A82C           ( s16550_large.asm):00449                  ldb   <$2C,y
0305 ED06             ( s16550_large.asm):00450                  std   $06,x
0307 E6A82D           ( s16550_large.asm):00451                  ldb   <$2D,y
030A ED08             ( s16550_large.asm):00452                  std   $08,x
030C 2008             ( s16550_large.asm):00453                  bra   L0316
030E 3505             ( s16550_large.asm):00454         L030E    puls  b,cc
0310 1A01             ( s16550_large.asm):00455                  orcc  #Carry
0312 C6D0             ( s16550_large.asm):00456                  ldb   #$D0
0314 3588             ( s16550_large.asm):00457                  puls  pc,dp
0316 358D             ( s16550_large.asm):00458         L0316    puls  pc,dp,b,cc
0318 3440             ( s16550_large.asm):00459         L0318    pshs  u
031A 1F98             ( s16550_large.asm):00460                  tfr   b,a
031C 338D04C3         ( s16550_large.asm):00461                  leau  >L07E3,pcr
0320 9E01             ( s16550_large.asm):00462                  ldx   <u0001
0322 C40F             ( s16550_large.asm):00463                  andb  #$0F
0324 58               ( s16550_large.asm):00464                  lslb  
0325 58               ( s16550_large.asm):00465                  lslb  
0326 33C5             ( s16550_large.asm):00466                  leau  b,u
0328 44               ( s16550_large.asm):00467                  lsra  
0329 44               ( s16550_large.asm):00468                  lsra  
032A 44               ( s16550_large.asm):00469                  lsra  
032B 44               ( s16550_large.asm):00470                  lsra  
032C 44               ( s16550_large.asm):00471                  lsra  
032D 8803             ( s16550_large.asm):00472                  eora  #$03
032F 8403             ( s16550_large.asm):00473                  anda  #$03
0331 3403             ( s16550_large.asm):00474                  pshs  a,cc
0333 961D             ( s16550_large.asm):00475                  lda   <u001D
0335 44               ( s16550_large.asm):00476                  lsra  
0336 44               ( s16550_large.asm):00477                  lsra  
0337 8438             ( s16550_large.asm):00478                  anda  #$38
0339 AA61             ( s16550_large.asm):00479                  ora   $01,s
033B A761             ( s16550_large.asm):00480                  sta   $01,s
033D 8A80             ( s16550_large.asm):00481                  ora   #$80
033F 1A50             ( s16550_large.asm):00482                  orcc  #IntMasks
0341 A703             ( s16550_large.asm):00483                  sta   $03,x
0343 ECC1             ( s16550_large.asm):00484                  ldd   ,u++
0345 1E89             ( s16550_large.asm):00485                  exg   a,b
0347 ED84             ( s16550_large.asm):00486                  std   ,x
0349 A661             ( s16550_large.asm):00487                  lda   $01,s
034B A703             ( s16550_large.asm):00488                  sta   $03,x
034D ECC4             ( s16550_large.asm):00489                  ldd   ,u
034F 9721             ( s16550_large.asm):00490                  sta   <u0021
0351 8A06             ( s16550_large.asm):00491                  ora   #$06
0353 A702             ( s16550_large.asm):00492                  sta   $02,x
0355 D729             ( s16550_large.asm):00493                  stb   <u0029
0357 35C3             ( s16550_large.asm):00494                  puls  pc,u,a,cc
                      ( s16550_large.asm):00495         
0359 5F               ( s16550_large.asm):00496         SetStat  clrb  
035A 340D             ( s16550_large.asm):00497                  pshs  dp,b,cc
035C 170264           ( s16550_large.asm):00498                  lbsr  GetDP
035F 81D1             ( s16550_large.asm):00499                  cmpa  #$D1
0361 10260090         ( s16550_large.asm):00500                  lbne  L03F5
0365 EE26             ( s16550_large.asm):00501                  ldu   $06,y
0367 AE46             ( s16550_large.asm):00502                  ldx   u0006,u
0369 EC48             ( s16550_large.asm):00503                  ldd   u0008,u
036B 3416             ( s16550_large.asm):00504                  pshs  x,b,a
036D 2764             ( s16550_large.asm):00505                  beq   L03D3
036F DC3A             ( s16550_large.asm):00506         L036F    ldd   <u003A
0371 10933E           ( s16550_large.asm):00507                  cmpd  <u003E
0374 2607             ( s16550_large.asm):00508                  bne   L037D
0376 DC3C             ( s16550_large.asm):00509                  ldd   <u003C
0378 830001           ( s16550_large.asm):00510                  subd  #$0001
037B 200A             ( s16550_large.asm):00511                  bra   L0387
037D 830001           ( s16550_large.asm):00512         L037D    subd  #$0001
0380 109338           ( s16550_large.asm):00513                  cmpd  <OutNxt
0383 2402             ( s16550_large.asm):00514                  bcc   L0387
0385 DC3C             ( s16550_large.asm):00515                  ldd   <u003C
0387 9338             ( s16550_large.asm):00516         L0387    subd  <OutNxt
0389 274D             ( s16550_large.asm):00517                  beq   L03D8
038B 10A3E4           ( s16550_large.asm):00518                  cmpd  ,s
038E 2302             ( s16550_large.asm):00519                  bls   L0392
0390 ECE4             ( s16550_large.asm):00520                  ldd   ,s
0392 3406             ( s16550_large.asm):00521         L0392    pshs  b,a
0394 BE0050           ( s16550_large.asm):00522                  ldx   >$0050
0397 A606             ( s16550_large.asm):00523                  lda   $06,x
0399 F600D0           ( s16550_large.asm):00524                  ldb   >$00D0
039C DE38             ( s16550_large.asm):00525                  ldu   <OutNxt
039E AE64             ( s16550_large.asm):00526                  ldx   $04,s
03A0 10AEE4           ( s16550_large.asm):00527                  ldy   ,s
03A3 1A50             ( s16550_large.asm):00528                  orcc  #IntMasks
03A5 103F38           ( s16550_large.asm):00529                  os9   F$Move   
03A8 ECE4             ( s16550_large.asm):00530                  ldd   ,s
03AA DE38             ( s16550_large.asm):00531                  ldu   <OutNxt
03AC 33CB             ( s16550_large.asm):00532                  leau  d,u
03AE 11933C           ( s16550_large.asm):00533                  cmpu  <u003C
03B1 2502             ( s16550_large.asm):00534                  bcs   L03B5
03B3 DE3E             ( s16550_large.asm):00535                  ldu   <u003E
03B5 DF38             ( s16550_large.asm):00536         L03B5    stu   <OutNxt
03B7 4F               ( s16550_large.asm):00537                  clra  
03B8 D640             ( s16550_large.asm):00538                  ldb   <u0040
03BA E3E4             ( s16550_large.asm):00539                  addd  ,s
03BC D740             ( s16550_large.asm):00540                  stb   <u0040
03BE 1CAF             ( s16550_large.asm):00541                  andcc #^IntMasks
03C0 ECE4             ( s16550_large.asm):00542                  ldd   ,s
03C2 AE64             ( s16550_large.asm):00543                  ldx   $04,s
03C4 308B             ( s16550_large.asm):00544                  leax  d,x
03C6 AF64             ( s16550_large.asm):00545                  stx   $04,s
03C8 EC62             ( s16550_large.asm):00546                  ldd   $02,s
03CA A3E1             ( s16550_large.asm):00547                  subd  ,s++
03CC EDE4             ( s16550_large.asm):00548                  std   ,s
03CE 269F             ( s16550_large.asm):00549                  bne   L036F
03D0 17FD6D           ( s16550_large.asm):00550                  lbsr  L0140
03D3 3264             ( s16550_large.asm):00551         L03D3    leas  $04,s
03D5 16016B           ( s16550_large.asm):00552                  lbra  L0543
03D8 1A50             ( s16550_large.asm):00553         L03D8    orcc  #IntMasks
03DA 17FD63           ( s16550_large.asm):00554                  lbsr  L0140
03DD 1701CD           ( s16550_large.asm):00555                  lbsr  L05AD
03E0 BE0050           ( s16550_large.asm):00556                  ldx   >$0050
03E3 E68819           ( s16550_large.asm):00557                  ldb   <$19,x
03E6 2704             ( s16550_large.asm):00558                  beq   L03EC
03E8 C103             ( s16550_large.asm):00559                  cmpb  #$03
03EA 23E7             ( s16550_large.asm):00560                  bls   L03D3
03EC E60C             ( s16550_large.asm):00561         L03EC    ldb   $0C,x
03EE C402             ( s16550_large.asm):00562                  andb  #$02
03F0 26E1             ( s16550_large.asm):00563                  bne   L03D3
03F2 16FF7A           ( s16550_large.asm):00564                  lbra  L036F
03F5 8128             ( s16550_large.asm):00565         L03F5    cmpa  #$28
03F7 262D             ( s16550_large.asm):00566                  bne   L0426
03F9 10AE26           ( s16550_large.asm):00567                  ldy   $06,y
03FC EC28             ( s16550_large.asm):00568                  ldd   $08,y
03FE 0D1F             ( s16550_large.asm):00569                  tst   <u001F
0400 2706             ( s16550_large.asm):00570                  beq   L0408
0402 C504             ( s16550_large.asm):00571                  bitb  #$04
0404 2602             ( s16550_large.asm):00572                  bne   L0408
0406 CA08             ( s16550_large.asm):00573                  orb   #$08
0408 DD1D             ( s16550_large.asm):00574         L0408    std   <u001D
040A 17FF0B           ( s16550_large.asm):00575                  lbsr  L0318
040D 0F22             ( s16550_large.asm):00576                  clr   <u0022
040F 0D0C             ( s16550_large.asm):00577                  tst   <u000C
0411 2610             ( s16550_large.asm):00578                  bne   L0423
0413 0D0B             ( s16550_large.asm):00579                  tst   <u000B
0415 260C             ( s16550_large.asm):00580                  bne   L0423
0417 0D0D             ( s16550_large.asm):00581                  tst   <u000D
0419 2608             ( s16550_large.asm):00582                  bne   L0423
041B D61D             ( s16550_large.asm):00583                  ldb   <u001D
041D C504             ( s16550_large.asm):00584                  bitb  #$04
041F 2602             ( s16550_large.asm):00585                  bne   L0423
0421 0C22             ( s16550_large.asm):00586                  inc   <u0022
0423 16011D           ( s16550_large.asm):00587         L0423    lbra  L0543
0426 812B             ( s16550_large.asm):00588         L0426    cmpa  #$2B
0428 2617             ( s16550_large.asm):00589                  bne   L0441
042A 9E01             ( s16550_large.asm):00590                  ldx   <u0001
042C A604             ( s16550_large.asm):00591                  lda   $04,x
042E 3412             ( s16550_large.asm):00592                  pshs  x,a
0430 84FE             ( s16550_large.asm):00593                  anda  #$FE
0432 A704             ( s16550_large.asm):00594                  sta   $04,x
0434 8E001E           ( s16550_large.asm):00595                  ldx   #$001E
0437 103F0A           ( s16550_large.asm):00596                  os9   F$Sleep  
043A 3512             ( s16550_large.asm):00597                  puls  x,a
043C A704             ( s16550_large.asm):00598                  sta   $04,x
043E 160102           ( s16550_large.asm):00599                  lbra  L0543
0441 811D             ( s16550_large.asm):00600         L0441    cmpa  #$1D
0443 264C             ( s16550_large.asm):00601                  bne   L0491
0445 1A50             ( s16550_large.asm):00602                  orcc  #IntMasks
0447 9E01             ( s16550_large.asm):00603                  ldx   <u0001
0449 9628             ( s16550_large.asm):00604                  lda   <u0028
044B 8A08             ( s16550_large.asm):00605                  ora   #$08
044D 9728             ( s16550_large.asm):00606                  sta   <u0028
044F 860D             ( s16550_large.asm):00607                  lda   #$0D
0451 A701             ( s16550_large.asm):00608                  sta   $01,x
0453 0F40             ( s16550_large.asm):00609                  clr   <u0040
0455 DC3E             ( s16550_large.asm):00610                  ldd   <u003E
0457 DD3A             ( s16550_large.asm):00611                  std   <u003A
0459 DD38             ( s16550_large.asm):00612                  std   <OutNxt
045B 9621             ( s16550_large.asm):00613                  lda   <u0021
045D 8A04             ( s16550_large.asm):00614                  ora   #$04
045F A702             ( s16550_large.asm):00615                  sta   $02,x
0461 4F               ( s16550_large.asm):00616                  clra  
0462 A784             ( s16550_large.asm):00617                  sta   ,x
0464 A605             ( s16550_large.asm):00618         L0464    lda   $05,x
0466 8440             ( s16550_large.asm):00619                  anda  #$40
0468 260C             ( s16550_large.asm):00620                  bne   L0476
046A 1CAF             ( s16550_large.asm):00621                  andcc #^IntMasks
046C 8E0001           ( s16550_large.asm):00622                  ldx   #$0001
046F 103F0A           ( s16550_large.asm):00623                  os9   F$Sleep  
0472 9E01             ( s16550_large.asm):00624                  ldx   <u0001
0474 20EE             ( s16550_large.asm):00625                  bra   L0464
0476 A603             ( s16550_large.asm):00626         L0476    lda   $03,x
0478 8A40             ( s16550_large.asm):00627                  ora   #$40
047A A703             ( s16550_large.asm):00628                  sta   $03,x
047C 8E001E           ( s16550_large.asm):00629                  ldx   #$001E
047F 103F0A           ( s16550_large.asm):00630                  os9   F$Sleep  
0482 9E01             ( s16550_large.asm):00631                  ldx   <u0001
0484 84BF             ( s16550_large.asm):00632                  anda  #$BF
0486 A703             ( s16550_large.asm):00633                  sta   $03,x
0488 9628             ( s16550_large.asm):00634                  lda   <u0028
048A 84F7             ( s16550_large.asm):00635                  anda  #$F7
048C 9728             ( s16550_large.asm):00636                  sta   <u0028
048E 1600B2           ( s16550_large.asm):00637                  lbra  L0543
0491 81C2             ( s16550_large.asm):00638         L0491    cmpa  #$C2
0493 2612             ( s16550_large.asm):00639                  bne   L04A7
0495 D628             ( s16550_large.asm):00640                  ldb   <u0028
0497 C4F8             ( s16550_large.asm):00641                  andb  #$F8
0499 D728             ( s16550_large.asm):00642                  stb   <u0028
049B 0D40             ( s16550_large.asm):00643                  tst   <u0040
049D 102700A2         ( s16550_large.asm):00644                  lbeq  L0543
04A1 17FC9C           ( s16550_large.asm):00645                  lbsr  L0140
04A4 16009C           ( s16550_large.asm):00646                  lbra  L0543
04A7 811A             ( s16550_large.asm):00647         L04A7    cmpa  #$1A
04A9 2619             ( s16550_large.asm):00648                  bne   L04C4
04AB A625             ( s16550_large.asm):00649                  lda   $05,y
04AD 10AE26           ( s16550_large.asm):00650                  ldy   $06,y
04B0 E627             ( s16550_large.asm):00651                  ldb   $07,y
04B2 1A50             ( s16550_large.asm):00652                  orcc  #IntMasks
04B4 9E34             ( s16550_large.asm):00653                  ldx   <u0034
04B6 2605             ( s16550_large.asm):00654                  bne   L04BD
04B8 DD25             ( s16550_large.asm):00655                  std   <u0025
04BA 160086           ( s16550_large.asm):00656                  lbra  L0543
04BD 3501             ( s16550_large.asm):00657         L04BD    puls  cc
04BF 103F08           ( s16550_large.asm):00658                  os9   F$Send   
04C2 358C             ( s16550_large.asm):00659                  puls  pc,dp,b
04C4 811B             ( s16550_large.asm):00660         L04C4    cmpa  #$1B
04C6 260D             ( s16550_large.asm):00661                  bne   L04D5
04C8 A625             ( s16550_large.asm):00662                  lda   $05,y
04CA 9125             ( s16550_large.asm):00663                  cmpa  <u0025
04CC 2604             ( s16550_large.asm):00664                  bne   L04D2
04CE 4F               ( s16550_large.asm):00665                  clra  
04CF 5F               ( s16550_large.asm):00666                  clrb  
04D0 DD25             ( s16550_large.asm):00667                  std   <u0025
04D2 16006E           ( s16550_large.asm):00668         L04D2    lbra  L0543
04D5 819A             ( s16550_large.asm):00669         L04D5    cmpa  #$9A
04D7 260B             ( s16550_large.asm):00670                  bne   L04E4
04D9 A625             ( s16550_large.asm):00671                  lda   $05,y
04DB 10AE26           ( s16550_large.asm):00672                  ldy   $06,y
04DE E627             ( s16550_large.asm):00673                  ldb   $07,y
04E0 DD23             ( s16550_large.asm):00674                  std   <u0023
04E2 205F             ( s16550_large.asm):00675                  bra   L0543
04E4 819B             ( s16550_large.asm):00676         L04E4    cmpa  #$9B
04E6 260E             ( s16550_large.asm):00677                  bne   L04F6
04E8 1A50             ( s16550_large.asm):00678                  orcc  #IntMasks
04EA A625             ( s16550_large.asm):00679                  lda   $05,y
04EC 9123             ( s16550_large.asm):00680                  cmpa  <u0023
04EE 2604             ( s16550_large.asm):00681                  bne   L04F4
04F0 4F               ( s16550_large.asm):00682                  clra  
04F1 5F               ( s16550_large.asm):00683                  clrb  
04F2 DD23             ( s16550_large.asm):00684                  std   <u0023
04F4 204D             ( s16550_large.asm):00685         L04F4    bra   L0543
04F6 812A             ( s16550_large.asm):00686         L04F6    cmpa  #$2A
04F8 10260015         ( s16550_large.asm):00687                  lbne  L0511
04FC 1A50             ( s16550_large.asm):00688                  orcc  #IntMasks
04FE A625             ( s16550_large.asm):00689                  lda   $05,y
0500 8E0000           ( s16550_large.asm):00690                  ldx   #$0000
0503 9125             ( s16550_large.asm):00691                  cmpa  <u0025
0505 2602             ( s16550_large.asm):00692                  bne   L0509
0507 9F25             ( s16550_large.asm):00693                  stx   <u0025
0509 9123             ( s16550_large.asm):00694         L0509    cmpa  <u0023
050B 2602             ( s16550_large.asm):00695                  bne   L050F
050D 9F23             ( s16550_large.asm):00696                  stx   <u0023
050F 2032             ( s16550_large.asm):00697         L050F    bra   L0543
0511 81C3             ( s16550_large.asm):00698         L0511    cmpa  #$C3
0513 2616             ( s16550_large.asm):00699                  bne   L052B
0515 1A50             ( s16550_large.asm):00700                  orcc  #IntMasks
0517 C60D             ( s16550_large.asm):00701                  ldb   #$0D
0519 E701             ( s16550_large.asm):00702                  stb   $01,x
051B DC3E             ( s16550_large.asm):00703                  ldd   <u003E
051D DD38             ( s16550_large.asm):00704                  std   <OutNxt
051F DD3A             ( s16550_large.asm):00705                  std   <u003A
0521 0F40             ( s16550_large.asm):00706                  clr   <u0040
0523 D621             ( s16550_large.asm):00707                  ldb   <u0021
0525 CA04             ( s16550_large.asm):00708                  orb   #$04
0527 E702             ( s16550_large.asm):00709                  stb   $02,x
0529 2018             ( s16550_large.asm):00710                  bra   L0543
052B 8129             ( s16550_large.asm):00711         L052B    cmpa  #$29
052D 260C             ( s16550_large.asm):00712                  bne   L053B
052F 9E01             ( s16550_large.asm):00713                  ldx   <u0001
0531 8603             ( s16550_large.asm):00714                  lda   #$03
0533 A704             ( s16550_large.asm):00715                  sta   $04,x
0535 C60F             ( s16550_large.asm):00716                  ldb   #$0F
0537 E701             ( s16550_large.asm):00717                  stb   $01,x
0539 2008             ( s16550_large.asm):00718                  bra   L0543
053B 3505             ( s16550_large.asm):00719         L053B    puls  b,cc
053D 1A01             ( s16550_large.asm):00720                  orcc  #Carry
053F C6D0             ( s16550_large.asm):00721                  ldb   #$D0
0541 3588             ( s16550_large.asm):00722                  puls  pc,dp
0543 358D             ( s16550_large.asm):00723         L0543    puls  pc,dp,b,cc
                      ( s16550_large.asm):00724         
0545 5F               ( s16550_large.asm):00725         Term     clrb  
0546 340D             ( s16550_large.asm):00726                  pshs  dp,b,cc
0548 170078           ( s16550_large.asm):00727                  lbsr  GetDP
054B 1A50             ( s16550_large.asm):00728                  orcc  #IntMasks
054D 4F               ( s16550_large.asm):00729                  clra  
054E 5F               ( s16550_large.asm):00730                  clrb  
054F DD34             ( s16550_large.asm):00731                  std   <u0034
0551 9E32             ( s16550_large.asm):00732                  ldx   <u0032
0553 9F2C             ( s16550_large.asm):00733                  stx   <u002C
0555 9F2E             ( s16550_large.asm):00734                  stx   <u002E
0557 3416             ( s16550_large.asm):00735                  pshs  x,b,a
0559 E664             ( s16550_large.asm):00736                  ldb   $04,s
055B 1F9A             ( s16550_large.asm):00737                  tfr   b,cc
055D BE0050           ( s16550_large.asm):00738                  ldx   >$0050
0560 A684             ( s16550_large.asm):00739                  lda   ,x
0562 9704             ( s16550_large.asm):00740                  sta   <u0004
0564 9703             ( s16550_large.asm):00741                  sta   <u0003
0566 1A50             ( s16550_large.asm):00742         L0566    orcc  #IntMasks
0568 0D40             ( s16550_large.asm):00743                  tst   <u0040
056A 260A             ( s16550_large.asm):00744                  bne   L0576
056C 9E01             ( s16550_large.asm):00745                  ldx   <u0001
056E E605             ( s16550_large.asm):00746                  ldb   $05,x
0570 C820             ( s16550_large.asm):00747                  eorb  #$20
0572 C420             ( s16550_large.asm):00748                  andb  #$20
0574 270F             ( s16550_large.asm):00749                  beq   L0585
0576 1A50             ( s16550_large.asm):00750         L0576    orcc  #IntMasks
0578 170032           ( s16550_large.asm):00751                  lbsr  L05AD
057B EC62             ( s16550_large.asm):00752                  ldd   $02,s
057D DD2C             ( s16550_large.asm):00753                  std   <u002C
057F ECE4             ( s16550_large.asm):00754                  ldd   ,s
0581 DD34             ( s16550_large.asm):00755                  std   <u0034
0583 20E1             ( s16550_large.asm):00756                  bra   L0566
0585 3264             ( s16550_large.asm):00757         L0585    leas  $04,s
0587 6F01             ( s16550_large.asm):00758                  clr   $01,x
0589 6F04             ( s16550_large.asm):00759                  clr   $04,x
058B 1CAF             ( s16550_large.asm):00760                  andcc #^IntMasks
058D DC36             ( s16550_large.asm):00761                  ldd   <u0036
058F 3440             ( s16550_large.asm):00762                  pshs  u
0591 DE32             ( s16550_large.asm):00763                  ldu   <u0032
0593 103F29           ( s16550_large.asm):00764                  os9   F$SRtMem 
0596 3540             ( s16550_large.asm):00765                  puls  u
0598 8E0000           ( s16550_large.asm):00766                  ldx   #$0000
059B DC01             ( s16550_large.asm):00767                  ldd   <u0001
059D C30002           ( s16550_large.asm):00768                  addd  #$0002
05A0 3420             ( s16550_large.asm):00769                  pshs  y
05A2 318D0032         ( s16550_large.asm):00770                  leay  >IRQRtn,pcr
05A6 103F2A           ( s16550_large.asm):00771                  os9   F$IRQ    
05A9 3520             ( s16550_large.asm):00772                  puls  y
05AB 358D             ( s16550_large.asm):00773                  puls  pc,dp,b,cc
05AD FC0050           ( s16550_large.asm):00774         L05AD    ldd   >$0050
05B0 9705             ( s16550_large.asm):00775                  sta   <u0005
05B2 1F01             ( s16550_large.asm):00776                  tfr   d,x
05B4 A60C             ( s16550_large.asm):00777                  lda   $0C,x
05B6 8A08             ( s16550_large.asm):00778                  ora   #$08
05B8 A70C             ( s16550_large.asm):00779                  sta   $0C,x
05BA 1CAF             ( s16550_large.asm):00780                  andcc #^IntMasks
05BC 8E0001           ( s16550_large.asm):00781                  ldx   #$0001
05BF 103F0A           ( s16550_large.asm):00782                  os9   F$Sleep  
05C2 39               ( s16550_large.asm):00783                  rts   
                      ( s16550_large.asm):00784         
                      ( s16550_large.asm):00785         * Transfer hi-byte of U to Direct Page
05C3 3440             ( s16550_large.asm):00786         GetDP    pshs  u
05C5 3508             ( s16550_large.asm):00787                  puls  dp
05C7 3261             ( s16550_large.asm):00788                  leas  $01,s
05C9 39               ( s16550_large.asm):00789                  rts   
                      ( s16550_large.asm):00790         
05CA 01600115001B01BB ( s16550_large.asm):00791         L05CA    fdb   $0160,$0115,$001b,$01bb,$0004,$0004,$002a
     00040004002A
                      ( s16550_large.asm):00792         
                      ( s16550_large.asm):00793         * IRQ Service Routine
05D8 5F               ( s16550_large.asm):00794         IRQRtn   fcb   $5f
05D9 340D             ( s16550_large.asm):00795         L05D8    pshs  dp,b,cc
05DB 8DE6             ( s16550_large.asm):00796                  bsr   GetDP
05DD 0F27             ( s16550_large.asm):00797                  clr   <u0027
05DF 109E01           ( s16550_large.asm):00798                  ldy   <u0001
05E2 E622             ( s16550_large.asm):00799                  ldb   $02,y
05E4 C501             ( s16550_large.asm):00800                  bitb  #$01
05E6 270C             ( s16550_large.asm):00801                  beq   L05F4
05E8 1F89             ( s16550_large.asm):00802                  tfr   a,b
05EA C40E             ( s16550_large.asm):00803                  andb  #$0E
05EC 2606             ( s16550_large.asm):00804                  bne   L05F4
05EE 3501             ( s16550_large.asm):00805                  puls  cc
05F0 1A01             ( s16550_large.asm):00806                  orcc  #Carry
05F2 3588             ( s16550_large.asm):00807                  puls  pc,dp
05F4 308DFFD2         ( s16550_large.asm):00808         L05F4    leax  >L05CA,pcr
05F8 C40E             ( s16550_large.asm):00809                  andb  #$0E
05FA 3A               ( s16550_large.asm):00810                  abx   
05FB 1F50             ( s16550_large.asm):00811                  tfr   pc,d
05FD E384             ( s16550_large.asm):00812                  addd  ,x
05FF 1F05             ( s16550_large.asm):00813                  tfr   d,pc
0601 E622             ( s16550_large.asm):00814         L0601    ldb   $02,y
0603 C501             ( s16550_large.asm):00815                  bitb  #$01
0605 27ED             ( s16550_large.asm):00816                  beq   L05F4
0607 9605             ( s16550_large.asm):00817                  lda   <u0005
0609 270B             ( s16550_large.asm):00818                  beq   L0616
060B 5F               ( s16550_large.asm):00819                  clrb  
060C D705             ( s16550_large.asm):00820                  stb   <u0005
060E 1F01             ( s16550_large.asm):00821                  tfr   d,x
0610 A60C             ( s16550_large.asm):00822                  lda   $0C,x
0612 84F7             ( s16550_large.asm):00823                  anda  #$F7
0614 A70C             ( s16550_large.asm):00824                  sta   $0C,x
0616 358D             ( s16550_large.asm):00825         L0616    puls  pc,dp,b,cc
0618 9E2C             ( s16550_large.asm):00826                  ldx   <u002C
061A A625             ( s16550_large.asm):00827                  lda   $05,y
061C 2B0D             ( s16550_large.asm):00828                  bmi   L062B
061E D629             ( s16550_large.asm):00829                  ldb   <u0029
0620 8D2F             ( s16550_large.asm):00830         L0620    bsr   L0651
0622 5A               ( s16550_large.asm):00831                  decb  
0623 26FB             ( s16550_large.asm):00832                  bne   L0620
0625 2002             ( s16550_large.asm):00833                  bra   L0629
0627 9E2C             ( s16550_large.asm):00834                  ldx   <u002C
0629 A625             ( s16550_large.asm):00835         L0629    lda   $05,y
062B 851E             ( s16550_large.asm):00836         L062B    bita  #$1E
062D 2705             ( s16550_large.asm):00837                  beq   L0634
062F 17018D           ( s16550_large.asm):00838                  lbsr  L07BF
0632 20F5             ( s16550_large.asm):00839                  bra   L0629
0634 8501             ( s16550_large.asm):00840         L0634    bita  #$01
0636 2704             ( s16550_large.asm):00841                  beq   L063C
0638 8D17             ( s16550_large.asm):00842         L0638    bsr   L0651
063A 20ED             ( s16550_large.asm):00843                  bra   L0629
063C 0D27             ( s16550_large.asm):00844         L063C    tst   <u0027
063E 260D             ( s16550_large.asm):00845                  bne   L064D
0640 DC25             ( s16550_large.asm):00846                  ldd   <u0025
0642 2709             ( s16550_large.asm):00847                  beq   L064D
0644 D727             ( s16550_large.asm):00848                  stb   <u0027
0646 103F08           ( s16550_large.asm):00849                  os9   F$Send   
0649 4F               ( s16550_large.asm):00850                  clra  
064A 5F               ( s16550_large.asm):00851                  clrb  
064B DD25             ( s16550_large.asm):00852                  std   <u0025
064D 9F2C             ( s16550_large.asm):00853         L064D    stx   <u002C
064F 20B0             ( s16550_large.asm):00854                  bra   L0601
0651 A6A4             ( s16550_large.asm):00855         L0651    lda   ,y
0653 2724             ( s16550_large.asm):00856                  beq   L0679
0655 0D22             ( s16550_large.asm):00857                  tst   <u0022
0657 2620             ( s16550_large.asm):00858                  bne   L0679
0659 910C             ( s16550_large.asm):00859                  cmpa  <u000C
065B 2605             ( s16550_large.asm):00860                  bne   L0662
065D 8602             ( s16550_large.asm):00861                  lda   #$02
065F 16009B           ( s16550_large.asm):00862                  lbra  L06FD
0662 910B             ( s16550_large.asm):00863         L0662    cmpa  <u000B
0664 2605             ( s16550_large.asm):00864                  bne   L066B
0666 8603             ( s16550_large.asm):00865                  lda   #$03
0668 160092           ( s16550_large.asm):00866                  lbra  L06FD
066B 910F             ( s16550_large.asm):00867         L066B    cmpa  <u000F
066D 2774             ( s16550_large.asm):00868                  beq   L06E3
066F 9110             ( s16550_large.asm):00869                  cmpa  <u0010
0671 277F             ( s16550_large.asm):00870                  beq   L06F2
0673 910D             ( s16550_large.asm):00871                  cmpa  <u000D
0675 10270091         ( s16550_large.asm):00872                  lbeq  L070A
0679 3404             ( s16550_large.asm):00873         L0679    pshs  b
067B A780             ( s16550_large.asm):00874                  sta   ,x+
067D 9C30             ( s16550_large.asm):00875                  cmpx  <u0030
067F 2602             ( s16550_large.asm):00876                  bne   L0683
0681 9E32             ( s16550_large.asm):00877                  ldx   <u0032
0683 9C2E             ( s16550_large.asm):00878         L0683    cmpx  <u002E
0685 2610             ( s16550_large.asm):00879                  bne   L0697
0687 C602             ( s16550_large.asm):00880                  ldb   #$02
0689 DA0E             ( s16550_large.asm):00881                  orb   <u000E
068B D70E             ( s16550_large.asm):00882                  stb   <u000E
068D 9C32             ( s16550_large.asm):00883                  cmpx  <u0032
068F 2602             ( s16550_large.asm):00884                  bne   L0693
0691 9E30             ( s16550_large.asm):00885                  ldx   <u0030
0693 301F             ( s16550_large.asm):00886         L0693    leax  -$01,x
0695 200E             ( s16550_large.asm):00887                  bra   L06A5
0697 9F2C             ( s16550_large.asm):00888         L0697    stx   <u002C
0699 DC34             ( s16550_large.asm):00889                  ldd   <u0034
069B C30001           ( s16550_large.asm):00890                  addd  #$0001
069E DD34             ( s16550_large.asm):00891                  std   <u0034
06A0 10932A           ( s16550_large.asm):00892                  cmpd  <u002A
06A3 2702             ( s16550_large.asm):00893                  beq   L06A7
06A5 3584             ( s16550_large.asm):00894         L06A5    puls  pc,b
06A7 D628             ( s16550_large.asm):00895         L06A7    ldb   <u0028
06A9 C570             ( s16550_large.asm):00896                  bitb  #$70
06AB 26F8             ( s16550_large.asm):00897                  bne   L06A5
06AD 961D             ( s16550_large.asm):00898                  lda   <u001D
06AF 8502             ( s16550_large.asm):00899                  bita  #$02
06B1 270C             ( s16550_large.asm):00900                  beq   L06BF
06B3 CA20             ( s16550_large.asm):00901                  orb   #$20
06B5 D728             ( s16550_large.asm):00902                  stb   <u0028
06B7 A624             ( s16550_large.asm):00903                  lda   $04,y
06B9 84FD             ( s16550_large.asm):00904                  anda  #$FD
06BB A724             ( s16550_large.asm):00905                  sta   $04,y
06BD 20E6             ( s16550_large.asm):00906                  bra   L06A5
06BF 8501             ( s16550_large.asm):00907         L06BF    bita  #$01
06C1 270C             ( s16550_large.asm):00908                  beq   L06CF
06C3 CA10             ( s16550_large.asm):00909                  orb   #$10
06C5 D728             ( s16550_large.asm):00910                  stb   <u0028
06C7 A624             ( s16550_large.asm):00911                  lda   $04,y
06C9 84FE             ( s16550_large.asm):00912                  anda  #$FE
06CB A724             ( s16550_large.asm):00913                  sta   $04,y
06CD 20D6             ( s16550_large.asm):00914                  bra   L06A5
06CF 8508             ( s16550_large.asm):00915         L06CF    bita  #$08
06D1 27D2             ( s16550_large.asm):00916                  beq   L06A5
06D3 CA40             ( s16550_large.asm):00917                  orb   #$40
06D5 D728             ( s16550_large.asm):00918                  stb   <u0028
06D7 9610             ( s16550_large.asm):00919                  lda   <u0010
06D9 27CA             ( s16550_large.asm):00920                  beq   L06A5
06DB 9743             ( s16550_large.asm):00921                  sta   <u0043
06DD C60F             ( s16550_large.asm):00922                  ldb   #$0F
06DF E721             ( s16550_large.asm):00923                  stb   $01,y
06E1 20C2             ( s16550_large.asm):00924                  bra   L06A5
06E3 9628             ( s16550_large.asm):00925         L06E3    lda   <u0028
06E5 84FB             ( s16550_large.asm):00926                  anda  #$FB
06E7 9728             ( s16550_large.asm):00927                  sta   <u0028
06E9 0D40             ( s16550_large.asm):00928                  tst   <u0040
06EB 2704             ( s16550_large.asm):00929                  beq   L06F1
06ED 860F             ( s16550_large.asm):00930                  lda   #$0F
06EF A721             ( s16550_large.asm):00931                  sta   $01,y
06F1 39               ( s16550_large.asm):00932         L06F1    rts   
06F2 9628             ( s16550_large.asm):00933         L06F2    lda   <u0028
06F4 8A04             ( s16550_large.asm):00934                  ora   #$04
06F6 9728             ( s16550_large.asm):00935                  sta   <u0028
06F8 860D             ( s16550_large.asm):00936                  lda   #$0D
06FA A721             ( s16550_large.asm):00937                  sta   $01,y
06FC 39               ( s16550_large.asm):00938                  rts   
06FD 3404             ( s16550_large.asm):00939         L06FD    pshs  b
06FF 1F89             ( s16550_large.asm):00940                  tfr   a,b
0701 9603             ( s16550_large.asm):00941                  lda   <u0003
0703 D727             ( s16550_large.asm):00942                  stb   <u0027
0705 103F08           ( s16550_large.asm):00943                  os9   F$Send   
0708 3584             ( s16550_large.asm):00944                  puls  pc,b
070A DE09             ( s16550_large.asm):00945         L070A    ldu   <u0009
070C 2703             ( s16550_large.asm):00946                  beq   L0711
070E A7C808           ( s16550_large.asm):00947                  sta   <u0008,u
0711 39               ( s16550_large.asm):00948         L0711    rts   
0712 9E3A             ( s16550_large.asm):00949                  ldx   <u003A
0714 9643             ( s16550_large.asm):00950                  lda   <u0043
0716 2F06             ( s16550_large.asm):00951                  ble   L071E
0718 A7A4             ( s16550_large.asm):00952                  sta   ,y
071A 8480             ( s16550_large.asm):00953                  anda  #$80
071C 9743             ( s16550_large.asm):00954                  sta   <u0043
071E 0D40             ( s16550_large.asm):00955         L071E    tst   <u0040
0720 2735             ( s16550_large.asm):00956                  beq   L0757
0722 D628             ( s16550_large.asm):00957                  ldb   <u0028
0724 C508             ( s16550_large.asm):00958                  bitb  #$08
0726 262F             ( s16550_large.asm):00959                  bne   L0757
0728 C407             ( s16550_large.asm):00960                  andb  #$07
072A D41D             ( s16550_large.asm):00961                  andb  <u001D
072C 2629             ( s16550_large.asm):00962                  bne   L0757
072E D63B             ( s16550_large.asm):00963                  ldb   <u003B
0730 50               ( s16550_large.asm):00964                  negb  
0731 C10F             ( s16550_large.asm):00965                  cmpb  #$0F
0733 2302             ( s16550_large.asm):00966                  bls   L0737
0735 C60F             ( s16550_large.asm):00967                  ldb   #$0F
0737 D140             ( s16550_large.asm):00968         L0737    cmpb  <u0040
0739 2302             ( s16550_large.asm):00969                  bls   L073D
073B D640             ( s16550_large.asm):00970                  ldb   <u0040
073D 3404             ( s16550_large.asm):00971         L073D    pshs  b
073F A680             ( s16550_large.asm):00972         L073F    lda   ,x+
0741 A7A4             ( s16550_large.asm):00973                  sta   ,y
0743 5A               ( s16550_large.asm):00974                  decb  
0744 26F9             ( s16550_large.asm):00975                  bne   L073F
0746 9C3C             ( s16550_large.asm):00976                  cmpx  <u003C
0748 2502             ( s16550_large.asm):00977                  bcs   L074C
074A 9E3E             ( s16550_large.asm):00978                  ldx   <u003E
074C 9F3A             ( s16550_large.asm):00979         L074C    stx   <u003A
074E D640             ( s16550_large.asm):00980                  ldb   <u0040
0750 E0E0             ( s16550_large.asm):00981                  subb  ,s+
0752 D740             ( s16550_large.asm):00982                  stb   <u0040
0754 16FEAA           ( s16550_large.asm):00983         L0754    lbra  L0601
0757 860D             ( s16550_large.asm):00984         L0757    lda   #$0D
0759 A721             ( s16550_large.asm):00985                  sta   $01,y
075B 20F7             ( s16550_large.asm):00986                  bra   L0754
075D A626             ( s16550_large.asm):00987                  lda   $06,y
075F 1F89             ( s16550_large.asm):00988                  tfr   a,b
0761 C4B0             ( s16550_large.asm):00989                  andb  #$B0
0763 D720             ( s16550_large.asm):00990                  stb   <u0020
0765 D628             ( s16550_large.asm):00991                  ldb   <u0028
0767 C4FC             ( s16550_large.asm):00992                  andb  #$FC
0769 8510             ( s16550_large.asm):00993                  bita  #$10
076B 2602             ( s16550_large.asm):00994                  bne   L076F
076D CA02             ( s16550_large.asm):00995                  orb   #$02
076F 8520             ( s16550_large.asm):00996         L076F    bita  #$20
0771 2602             ( s16550_large.asm):00997                  bne   L0775
0773 CA01             ( s16550_large.asm):00998                  orb   #$01
0775 8508             ( s16550_large.asm):00999         L0775    bita  #$08
0777 2736             ( s16550_large.asm):01000                  beq   L07AF
0779 8580             ( s16550_large.asm):01001                  bita  #$80
077B 261C             ( s16550_large.asm):01002                  bne   L0799
077D 961D             ( s16550_large.asm):01003                  lda   <u001D
077F 8510             ( s16550_large.asm):01004                  bita  #$10
0781 270E             ( s16550_large.asm):01005                  beq   L0791
0783 9E16             ( s16550_large.asm):01006                  ldx   <u0016
0785 270A             ( s16550_large.asm):01007                  beq   L0791
0787 8601             ( s16550_large.asm):01008                  lda   #$01
0789 A7883F           ( s16550_large.asm):01009         L0789    sta   <$3F,x
078C AE883D           ( s16550_large.asm):01010                  ldx   <$3D,x
078F 26F8             ( s16550_large.asm):01011                  bne   L0789
0791 8620             ( s16550_large.asm):01012         L0791    lda   #$20
0793 9A0E             ( s16550_large.asm):01013                  ora   <u000E
0795 970E             ( s16550_large.asm):01014                  sta   <u000E
0797 C4FB             ( s16550_large.asm):01015                  andb  #$FB
0799 0D27             ( s16550_large.asm):01016         L0799    tst   <u0027
079B 2612             ( s16550_large.asm):01017                  bne   L07AF
079D D728             ( s16550_large.asm):01018                  stb   <u0028
079F DC23             ( s16550_large.asm):01019                  ldd   <u0023
07A1 5D               ( s16550_large.asm):01020                  tstb  
07A2 270D             ( s16550_large.asm):01021                  beq   L07B1
07A4 103F08           ( s16550_large.asm):01022                  os9   F$Send   
07A7 D727             ( s16550_large.asm):01023                  stb   <u0027
07A9 4F               ( s16550_large.asm):01024                  clra  
07AA 5F               ( s16550_large.asm):01025                  clrb  
07AB DD23             ( s16550_large.asm):01026                  std   <u0023
07AD 2002             ( s16550_large.asm):01027                  bra   L07B1
07AF D728             ( s16550_large.asm):01028         L07AF    stb   <u0028
07B1 860F             ( s16550_large.asm):01029         L07B1    lda   #$0F
07B3 A721             ( s16550_large.asm):01030                  sta   $01,y
07B5 16FE49           ( s16550_large.asm):01031                  lbra  L0601
07B8 A625             ( s16550_large.asm):01032                  lda   $05,y
07BA 8D03             ( s16550_large.asm):01033                  bsr   L07BF
07BC 16FE42           ( s16550_large.asm):01034                  lbra  L0601
07BF 3404             ( s16550_large.asm):01035         L07BF    pshs  b
07C1 5F               ( s16550_large.asm):01036                  clrb  
07C2 8502             ( s16550_large.asm):01037                  bita  #$02
07C4 2702             ( s16550_large.asm):01038                  beq   L07C8
07C6 CA04             ( s16550_large.asm):01039                  orb   #$04
07C8 8504             ( s16550_large.asm):01040         L07C8    bita  #$04
07CA 2702             ( s16550_large.asm):01041                  beq   L07CE
07CC CA01             ( s16550_large.asm):01042                  orb   #$01
07CE 8508             ( s16550_large.asm):01043         L07CE    bita  #$08
07D0 2702             ( s16550_large.asm):01044                  beq   L07D4
07D2 CA02             ( s16550_large.asm):01045                  orb   #$02
07D4 8510             ( s16550_large.asm):01046         L07D4    bita  #$10
07D6 2606             ( s16550_large.asm):01047                  bne   L07DE
07D8 CA08             ( s16550_large.asm):01048                  orb   #$08
07DA DA0E             ( s16550_large.asm):01049                  orb   <u000E
07DC D70E             ( s16550_large.asm):01050                  stb   <u000E
07DE 3584             ( s16550_large.asm):01051         L07DE    puls  pc,b
                      ( s16550_large.asm):01052         
                      ( s16550_large.asm):01053         * IRQ Flip/Mask/Priority Bytes
07E0 010180           ( s16550_large.asm):01054         IRQPkt   fcb   $01,$01,$80
                      ( s16550_large.asm):01055         
07E3 28               ( s16550_large.asm):01056         L07E3    fcb   $28
07E4 E901010F00010107 ( s16550_large.asm):01057                  fdb   $e901,$010f,$0001,$0107,$8041,$0403
     80410403
07F0 C0810801E0C10E00 ( s16550_large.asm):01058                  fdb   $c081,$0801,$e0c1,$0e00,$f0c1,$0e00,$78c1,$0e00
     F0C10E0078C10E00
0800 3C8108001E810800 ( s16550_large.asm):01059                  fdb   $3c81,$0800,$1e81,$0800,$1481,$0800,$0f81,$0800
     148108000F810800
0810 0A8108000A810800 ( s16550_large.asm):01060                  fdb   $0a81,$0800,$0a81,$0800,$0a81,$0800,$0a81,$0800
     0A8108000A810800
0820 2581             ( s16550_large.asm):01061                  fdb   $2581
0822 08               ( s16550_large.asm):01062                  fcb   $08
                      ( s16550_large.asm):01063         
0823 EA728B           ( s16550_large.asm):01064                  emod
     0826             ( s16550_large.asm):01065         eom      equ   *
                      ( s16550_large.asm):01066                  end
