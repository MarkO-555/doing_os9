                      (/dd/sourcecode/as):00001         *******************************************************************
                      (/dd/sourcecode/as):00002         * CoGrf/CoWin - NitrOS-9 Text/Graphics Window Module
                      (/dd/sourcecode/as):00003         *
                      (/dd/sourcecode/as):00004         * $Id$
                      (/dd/sourcecode/as):00005         *
                      (/dd/sourcecode/as):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/sourcecode/as):00007         * Comment
                      (/dd/sourcecode/as):00008         * ------------------------------------------------------------------
                      (/dd/sourcecode/as):00009         *  19r0    2003/09/23  Robert Gault
                      (/dd/sourcecode/as):00010         * Many new patches for 6809 code use.
                      (/dd/sourcecode/as):00011         *
                      (/dd/sourcecode/as):00012         *  19r1    2003/11/14  Robert Gault
                      (/dd/sourcecode/as):00013         * Patches to scrollbar windows to recover arrows and markers.
                      (/dd/sourcecode/as):00014         * Includes new stdfonts with graphics added to the end.
                      (/dd/sourcecode/as):00015         *
                      (/dd/sourcecode/as):00016         *  1       2005/11/26  Boisy G. Pitre
                      (/dd/sourcecode/as):00017         * Renamed from WindInt/GrfInt, reset edition.
                      (/dd/sourcecode/as):00018         *
                      (/dd/sourcecode/as):00019         *          2006/01/09  Robert Gault
                      (/dd/sourcecode/as):00020         * Changed Select window routine so that it will work within a script and
                      (/dd/sourcecode/as):00021         * DWSet routine so that it will not require a [CLEAR] if the active window
                      (/dd/sourcecode/as):00022         * is killed with a display 1b 24 and restarted with a display 1b 20; ie
                      (/dd/sourcecode/as):00023         * DWSet. Changes are compatible with MultiVue and all test procedures
                      (/dd/sourcecode/as):00024         * tried. Short Sleep added to stabilize the screen change.
                      (/dd/sourcecode/as):00025         *
                      (/dd/sourcecode/as):00026         *  2       2007/08/22  Boisy G. Pitre
                      (/dd/sourcecode/as):00027         * Fixed crash bug in case where grfdrv wasn't loaded.  See comments at
                      (/dd/sourcecode/as):00028         * Term label.
                      (/dd/sourcecode/as):00029         *  EOU Beta 2
                      (/dd/sourcecode/as):00030         *  3       2018/11/13  Bill Nobel
                      (/dd/sourcecode/as):00031         * Change code (along with Grfdrv) so that loading Grfdrv takes place outside
                      (/dd/sourcecode/as):00032         *   of the 64K System workspace, which allows >8K grfdrv to boot properly on
                      (/dd/sourcecode/as):00033         *   systems with <16k free in the system memory map.
                      (/dd/sourcecode/as):00034         *  EOU Beta 3
                      (/dd/sourcecode/as):00035         *           2018/12/14  Bill Nobel
                      (/dd/sourcecode/as):00036         * Removed Robert Gault's modifications to Select (caused any Select call, even on windows
                      (/dd/sourcecode/as):00037         *  not currently viewed on screen, to take over the screen). 
                      (/dd/sourcecode/as):00038         *  Bill Nobel & Robert Gault confirmed that fixes Select bug.
                      (/dd/sourcecode/as):00039         * EOU Beta 5 - minor optimizations
                      (/dd/sourcecode/as):00040         *           2019/05/10  L. Curtis Boyle
                      (/dd/sourcecode/as):00041         
                      (/dd/sourcecode/as):00042         * Curtis planning on adding vectors for block copies and block clears (see level 1 CoVDG),
                      (/dd/sourcecode/as):00043         *   16 bit scratch var in static mem (can't use Grfdrv global, since IRQ's can switch between
                      (/dd/sourcecode/as):00044         * CoWin/Grf devices) (to use DP addressing instead of pshs (8 or 16 bit)
                      (/dd/sourcecode/as):00045         *   /puls to speed various routines up a little bit, like font expansion.
                      (/dd/sourcecode/as):00046         *   Eventually, Krn module will get the mini stack blast copy/clear routines
                      (/dd/sourcecode/as):00047         *   and set up the vectors to call them in direct page, so that all of the system process
                      (/dd/sourcecode/as):00048         *   can access them easily. Grfdrv, since it gets it's own 64k map, will have it's own
                      (/dd/sourcecode/as):00049         *   copies and vectors.
                      (/dd/sourcecode/as):00050          
                      (/dd/sourcecode/as):00051                  nam   CoGrf/CoWin
                      (/dd/sourcecode/as):00052                  ttl   NitrOS-9 Window Module
                      (/dd/sourcecode/as):00053         
                      (/dd/sourcecode/as):00054                  ifp1  
                      (/dd/sourcecode/as):00055                    use   /dd/defs/deffile
     0002             ( /dd/defs/deffile):00001         Level    set     2
     0000             ( /dd/defs/deffile):00002         CoGrf    set     0
     0000             ( /dd/defs/deffile):00003         MATCHBOX set     0
     0000             ( /dd/defs/deffile):00004         H6309    set     0
                      ( /dd/defs/deffile):00005                  use   /dd/defs/os9.d
                      (   /dd/defs/os9.d):00001         ********************************************************************
                      (   /dd/defs/os9.d):00002         * os9.d - NitrOS-9 System Definitions
                      (   /dd/defs/os9.d):00003         *
                      (   /dd/defs/os9.d):00004         * $Id$
                      (   /dd/defs/os9.d):00005         *
                      (   /dd/defs/os9.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/os9.d):00007         * Comment
                      (   /dd/defs/os9.d):00008         * ------------------------------------------------------------------
                      (   /dd/defs/os9.d):00009         *          1985/08/29  KMZ
                      (   /dd/defs/os9.d):00010         * Fixed DT.SBF/NFM values to 3/4
                      (   /dd/defs/os9.d):00011         *
                      (   /dd/defs/os9.d):00012         *          1985/09/01  KMZ
                      (   /dd/defs/os9.d):00013         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (   /dd/defs/os9.d):00014         *
                      (   /dd/defs/os9.d):00015         *          1985/09/03  KMZ/Robert F. Doggett
                      (   /dd/defs/os9.d):00016         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (   /dd/defs/os9.d):00017         * 68000 compatability.
                      (   /dd/defs/os9.d):00018         *
                      (   /dd/defs/os9.d):00019         *          1986/04/15  Mark G. Hawkins
                      (   /dd/defs/os9.d):00020         * F$AlHRAM System call added for COCO.
                      (   /dd/defs/os9.d):00021         *
                      (   /dd/defs/os9.d):00022         *          1986/09/08  Mark G. Hawkins
                      (   /dd/defs/os9.d):00023         * F$Alarm for COCO Clock Module.
                      (   /dd/defs/os9.d):00024         *
                      (   /dd/defs/os9.d):00025         *          1986/09/17  Mark G. Hawkins
                      (   /dd/defs/os9.d):00026         * SS.Tone For COCO.
                      (   /dd/defs/os9.d):00027         *
                      (   /dd/defs/os9.d):00028         *          1986/09/23  Mark G. Hawkins
                      (   /dd/defs/os9.d):00029         * Added F$NMLink and F$NMLoad for COCO.
                      (   /dd/defs/os9.d):00030         *
                      (   /dd/defs/os9.d):00031         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00032         * Added Reserved User $70 to $7f in sytem calls.
                      (   /dd/defs/os9.d):00033         *
                      (   /dd/defs/os9.d):00034         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00035         * Created Color Computer 3 Version of OS9Defs.
                      (   /dd/defs/os9.d):00036         *
                      (   /dd/defs/os9.d):00037         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00038         * Consoldated Level 1/Level 2 os9defs.
                      (   /dd/defs/os9.d):00039         *
                      (   /dd/defs/os9.d):00040         *          2002/04/04  Boisy G. Pitre
                      (   /dd/defs/os9.d):00041         * Consoldated Level 2/Level 2 V3 os9defs.
                      (   /dd/defs/os9.d):00042         *
                      (   /dd/defs/os9.d):00043         *          2002/04/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00044         * Added NitrOS-9 definitions.
                      (   /dd/defs/os9.d):00045         *
                      (   /dd/defs/os9.d):00046         *          2003/05/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00047         * Added WD1002 sys vars to Level One section.
                      (   /dd/defs/os9.d):00048         *
                      (   /dd/defs/os9.d):00049         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/os9.d):00050         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (   /dd/defs/os9.d):00051         * changed the sizes from 2 to 3 bytes.
                      (   /dd/defs/os9.d):00052         * DT.NFM is now the same for both Level One and Level Two.
                      (   /dd/defs/os9.d):00053         * Added DT.CDFM type for future CD-ROM file manager
                      (   /dd/defs/os9.d):00054         *
                      (   /dd/defs/os9.d):00055         *          2003/11/05  Robert Gault
                      (   /dd/defs/os9.d):00056         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (   /dd/defs/os9.d):00057         *
                      (   /dd/defs/os9.d):00058         *              2005/11/02  P.Harvey-Smith
                      (   /dd/defs/os9.d):00059         * Added definitions for boot areas on Dragon computers.
                      (   /dd/defs/os9.d):00060         *
                      (   /dd/defs/os9.d):00061         *              2006/03/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00062         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (   /dd/defs/os9.d):00063         
                      (   /dd/defs/os9.d):00064                        NAM       os9.d
                      (   /dd/defs/os9.d):00065                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (   /dd/defs/os9.d):00066         
                      (   /dd/defs/os9.d):00067         * Common definitions
     0001             (   /dd/defs/os9.d):00068         true           EQU       1                   useful name
     0000             (   /dd/defs/os9.d):00069         false          EQU       0                   useful name
                      (   /dd/defs/os9.d):00070         
                      (   /dd/defs/os9.d):00071                        PAG       
                      (   /dd/defs/os9.d):00072         *****************************************
                      (   /dd/defs/os9.d):00073         * System Service Request Code Definitions
                      (   /dd/defs/os9.d):00074         *
                      (   /dd/defs/os9.d):00075                        ORG       0
0000                  (   /dd/defs/os9.d):00076         F$Link         RMB       1                   Link to Module
0001                  (   /dd/defs/os9.d):00077         F$Load         RMB       1                   Load Module from File
0002                  (   /dd/defs/os9.d):00078         F$UnLink       RMB       1                   Unlink Module
0003                  (   /dd/defs/os9.d):00079         F$Fork         RMB       1                   Start New Process
0004                  (   /dd/defs/os9.d):00080         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (   /dd/defs/os9.d):00081         F$Chain        RMB       1                   Chain Process to New Module
0006                  (   /dd/defs/os9.d):00082         F$Exit         RMB       1                   Terminate Process
0007                  (   /dd/defs/os9.d):00083         F$Mem          RMB       1                   Set Memory Size
0008                  (   /dd/defs/os9.d):00084         F$Send         RMB       1                   Send Signal to Process
0009                  (   /dd/defs/os9.d):00085         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (   /dd/defs/os9.d):00086         F$Sleep        RMB       1                   Suspend Process
000B                  (   /dd/defs/os9.d):00087         F$SSpd         RMB       1                   Suspend Process
000C                  (   /dd/defs/os9.d):00088         F$ID           RMB       1                   Return Process ID
000D                  (   /dd/defs/os9.d):00089         F$SPrior       RMB       1                   Set Process Priority
000E                  (   /dd/defs/os9.d):00090         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (   /dd/defs/os9.d):00091         F$PErr         RMB       1                   Print Error
0010                  (   /dd/defs/os9.d):00092         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (   /dd/defs/os9.d):00093         F$CmpNam       RMB       1                   Compare Two Names
0012                  (   /dd/defs/os9.d):00094         F$SchBit       RMB       1                   Search Bit Map
0013                  (   /dd/defs/os9.d):00095         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (   /dd/defs/os9.d):00096         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (   /dd/defs/os9.d):00097         F$Time         RMB       1                   Get Current Time
0016                  (   /dd/defs/os9.d):00098         F$STime        RMB       1                   Set Current Time
0017                  (   /dd/defs/os9.d):00099         F$CRC          RMB       1                   Generate CRC ($17)
                      (   /dd/defs/os9.d):00100         
                      (   /dd/defs/os9.d):00101         
                      (   /dd/defs/os9.d):00102         * NitrOS-9 Level 2 system calls
0018                  (   /dd/defs/os9.d):00103         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (   /dd/defs/os9.d):00104         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (   /dd/defs/os9.d):00105         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (   /dd/defs/os9.d):00106         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (   /dd/defs/os9.d):00107         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (   /dd/defs/os9.d):00108         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (   /dd/defs/os9.d):00109         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (   /dd/defs/os9.d):00110                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (   /dd/defs/os9.d):00111         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (   /dd/defs/os9.d):00112         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (   /dd/defs/os9.d):00113         
                      (   /dd/defs/os9.d):00114         
                      (   /dd/defs/os9.d):00115         * NitrOS-9 Level 1 system call padding
                      (   /dd/defs/os9.d):00116         
                      (   /dd/defs/os9.d):00117         
0023                  (   /dd/defs/os9.d):00118         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (   /dd/defs/os9.d):00119         
                      (   /dd/defs/os9.d):00120         
                      (   /dd/defs/os9.d):00121                        ORG       $25
0025                  (   /dd/defs/os9.d):00122         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (   /dd/defs/os9.d):00123         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (   /dd/defs/os9.d):00124         
                      (   /dd/defs/os9.d):00125         
                      (   /dd/defs/os9.d):00126                        ORG       $27                 Beginning of System Reserved Calls
                      (   /dd/defs/os9.d):00127         * NitrOS-9 common system calls
0027                  (   /dd/defs/os9.d):00128         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (   /dd/defs/os9.d):00129         F$SRqMem       RMB       1                   System Memory Request
0029                  (   /dd/defs/os9.d):00130         F$SRtMem       RMB       1                   System Memory Return
002A                  (   /dd/defs/os9.d):00131         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (   /dd/defs/os9.d):00132         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (   /dd/defs/os9.d):00133         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (   /dd/defs/os9.d):00134         F$NProc        RMB       1                   Start Next Process
002E                  (   /dd/defs/os9.d):00135         F$VModul       RMB       1                   Validate Module
002F                  (   /dd/defs/os9.d):00136         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (   /dd/defs/os9.d):00137         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (   /dd/defs/os9.d):00138         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (   /dd/defs/os9.d):00139         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (   /dd/defs/os9.d):00140         F$IODel        RMB       1                   Delete I/O Module
                      (   /dd/defs/os9.d):00141         
                      (   /dd/defs/os9.d):00142         
0034                  (   /dd/defs/os9.d):00143         F$SLink        RMB       1                   System Link
0035                  (   /dd/defs/os9.d):00144         F$Boot         RMB       1                   Bootstrap System
0036                  (   /dd/defs/os9.d):00145         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (   /dd/defs/os9.d):00146         F$GProcP       RMB       1                   Get Process ptr
0038                  (   /dd/defs/os9.d):00147         F$Move         RMB       1                   Move Data (low bound first)
0039                  (   /dd/defs/os9.d):00148         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (   /dd/defs/os9.d):00149         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (   /dd/defs/os9.d):00150         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (   /dd/defs/os9.d):00151         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (   /dd/defs/os9.d):00152         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (   /dd/defs/os9.d):00153         F$FreeHB       RMB       1                   Get Free High Block
003F                  (   /dd/defs/os9.d):00154         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (   /dd/defs/os9.d):00155         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (   /dd/defs/os9.d):00156         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (   /dd/defs/os9.d):00157         F$ResTsk       RMB       1                   Reserve Task number
0043                  (   /dd/defs/os9.d):00158         F$RelTsk       RMB       1                   Release Task number
0044                  (   /dd/defs/os9.d):00159         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (   /dd/defs/os9.d):00160         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (   /dd/defs/os9.d):00161         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (   /dd/defs/os9.d):00162         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (   /dd/defs/os9.d):00163         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (   /dd/defs/os9.d):00164         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (   /dd/defs/os9.d):00165         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (   /dd/defs/os9.d):00166         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (   /dd/defs/os9.d):00167         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (   /dd/defs/os9.d):00168         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (   /dd/defs/os9.d):00169         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (   /dd/defs/os9.d):00170         F$MapBlk       RMB       1                   Map Specific Block
0050                  (   /dd/defs/os9.d):00171         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (   /dd/defs/os9.d):00172         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (   /dd/defs/os9.d):00173         F$GCMDir       RMB       1                   Pack module directory
0053                  (   /dd/defs/os9.d):00174         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (   /dd/defs/os9.d):00175         
                      (   /dd/defs/os9.d):00176         * Alan DeKok additions
0054                  (   /dd/defs/os9.d):00177         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (   /dd/defs/os9.d):00178         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (   /dd/defs/os9.d):00179         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (   /dd/defs/os9.d):00180         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (   /dd/defs/os9.d):00181         
                      (   /dd/defs/os9.d):00182         
                      (   /dd/defs/os9.d):00183         *
                      (   /dd/defs/os9.d):00184         * Numbers $70 through $7F are reserved for user definitions
                      (   /dd/defs/os9.d):00185         *
                      (   /dd/defs/os9.d):00186                        ORG       $70
                      (   /dd/defs/os9.d):00187         
                      (   /dd/defs/os9.d):00188         
                      (   /dd/defs/os9.d):00189         
                      (   /dd/defs/os9.d):00190         
0070                  (   /dd/defs/os9.d):00191         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (   /dd/defs/os9.d):00192         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (   /dd/defs/os9.d):00193         
0072                  (   /dd/defs/os9.d):00194                        RMB       $80-.               Reserved for user definitions
                      (   /dd/defs/os9.d):00195         
                      (   /dd/defs/os9.d):00196                        PAG       
                      (   /dd/defs/os9.d):00197         **************************************
                      (   /dd/defs/os9.d):00198         * I/O Service Request Code Definitions
                      (   /dd/defs/os9.d):00199         *
                      (   /dd/defs/os9.d):00200                        ORG       $80
0080                  (   /dd/defs/os9.d):00201         I$Attach       RMB       1                   Attach I/O Device
0081                  (   /dd/defs/os9.d):00202         I$Detach       RMB       1                   Detach I/O Device
0082                  (   /dd/defs/os9.d):00203         I$Dup          RMB       1                   Duplicate Path
0083                  (   /dd/defs/os9.d):00204         I$Create       RMB       1                   Create New File
0084                  (   /dd/defs/os9.d):00205         I$Open         RMB       1                   Open Existing File
0085                  (   /dd/defs/os9.d):00206         I$MakDir       RMB       1                   Make Directory File
0086                  (   /dd/defs/os9.d):00207         I$ChgDir       RMB       1                   Change Default Directory
0087                  (   /dd/defs/os9.d):00208         I$Delete       RMB       1                   Delete File
0088                  (   /dd/defs/os9.d):00209         I$Seek         RMB       1                   Change Current Position
0089                  (   /dd/defs/os9.d):00210         I$Read         RMB       1                   Read Data
008A                  (   /dd/defs/os9.d):00211         I$Write        RMB       1                   Write Data
008B                  (   /dd/defs/os9.d):00212         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (   /dd/defs/os9.d):00213         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (   /dd/defs/os9.d):00214         I$GetStt       RMB       1                   Get Path Status
008E                  (   /dd/defs/os9.d):00215         I$SetStt       RMB       1                   Set Path Status
008F                  (   /dd/defs/os9.d):00216         I$Close        RMB       1                   Close Path
0090                  (   /dd/defs/os9.d):00217         I$DeletX       RMB       1                   Delete from current exec dir
                      (   /dd/defs/os9.d):00218         
                      (   /dd/defs/os9.d):00219         *******************
                      (   /dd/defs/os9.d):00220         * File Access Modes
                      (   /dd/defs/os9.d):00221         *
     0001             (   /dd/defs/os9.d):00222         READ.          EQU       %00000001
     0002             (   /dd/defs/os9.d):00223         WRITE.         EQU       %00000010
     0003             (   /dd/defs/os9.d):00224         UPDAT.         EQU       READ.+WRITE.
     0004             (   /dd/defs/os9.d):00225         EXEC.          EQU       %00000100
     0008             (   /dd/defs/os9.d):00226         PREAD.         EQU       %00001000
     0010             (   /dd/defs/os9.d):00227         PWRIT.         EQU       %00010000
     0020             (   /dd/defs/os9.d):00228         PEXEC.         EQU       %00100000
     0040             (   /dd/defs/os9.d):00229         SHARE.         EQU       %01000000
     0080             (   /dd/defs/os9.d):00230         DIR.           EQU       %10000000
     0020             (   /dd/defs/os9.d):00231         ISIZ.          EQU       %00100000
                      (   /dd/defs/os9.d):00232         
                      (   /dd/defs/os9.d):00233         **************
                      (   /dd/defs/os9.d):00234         * Signal Codes
                      (   /dd/defs/os9.d):00235         *
                      (   /dd/defs/os9.d):00236                        ORG       0
0000                  (   /dd/defs/os9.d):00237         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (   /dd/defs/os9.d):00238         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (   /dd/defs/os9.d):00239         S$Abort        RMB       1                   Keyboard Abort
0003                  (   /dd/defs/os9.d):00240         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (   /dd/defs/os9.d):00241         S$Window       RMB       1                   Window Change
     0004             (   /dd/defs/os9.d):00242         S$HUP          EQU       S$Window            Hang Up
0005                  (   /dd/defs/os9.d):00243         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (   /dd/defs/os9.d):00244         
                      (   /dd/defs/os9.d):00245                        PAG       
                      (   /dd/defs/os9.d):00246         **********************************
                      (   /dd/defs/os9.d):00247         * Status Codes for GetStat/GetStat
                      (   /dd/defs/os9.d):00248         *
                      (   /dd/defs/os9.d):00249                        ORG       0
0000                  (   /dd/defs/os9.d):00250         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (   /dd/defs/os9.d):00251         SS.Ready       RMB       1                   Check for Device Ready
0002                  (   /dd/defs/os9.d):00252         SS.Size        RMB       1                   Read/Write File Size
0003                  (   /dd/defs/os9.d):00253         SS.Reset       RMB       1                   Device Restore
0004                  (   /dd/defs/os9.d):00254         SS.WTrk        RMB       1                   Device Write Track
0005                  (   /dd/defs/os9.d):00255         SS.Pos         RMB       1                   Get File Current Position
0006                  (   /dd/defs/os9.d):00256         SS.EOF         RMB       1                   Test for End of File
0007                  (   /dd/defs/os9.d):00257         SS.Link        RMB       1                   Link to Status routines
0008                  (   /dd/defs/os9.d):00258         SS.ULink       RMB       1                   Unlink Status routines
0009                  (   /dd/defs/os9.d):00259         SS.Feed        RMB       1                   Issue form feed
000A                  (   /dd/defs/os9.d):00260         SS.Frz         RMB       1                   Freeze DD. information
000B                  (   /dd/defs/os9.d):00261         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (   /dd/defs/os9.d):00262         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (   /dd/defs/os9.d):00263         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (   /dd/defs/os9.d):00264         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (   /dd/defs/os9.d):00265         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (   /dd/defs/os9.d):00266         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (   /dd/defs/os9.d):00267         SS.Lock        RMB       1                   Lock/Release record
0012                  (   /dd/defs/os9.d):00268         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (   /dd/defs/os9.d):00269         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (   /dd/defs/os9.d):00270         SS.BlkRd       RMB       1                   Block Read
0015                  (   /dd/defs/os9.d):00271         SS.BlkWr       RMB       1                   Block Write
0016                  (   /dd/defs/os9.d):00272         SS.Reten       RMB       1                   Retension cycle
0017                  (   /dd/defs/os9.d):00273         SS.WFM         RMB       1                   Write File Mark
0018                  (   /dd/defs/os9.d):00274         SS.RFM         RMB       1                   Read past File Mark
0019                  (   /dd/defs/os9.d):00275         SS.ELog        RMB       1                   Read Error Log
001A                  (   /dd/defs/os9.d):00276         SS.SSig        RMB       1                   Send signal on data ready
001B                  (   /dd/defs/os9.d):00277         SS.Relea       RMB       1                   Release device
001C                  (   /dd/defs/os9.d):00278         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (   /dd/defs/os9.d):00279         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (   /dd/defs/os9.d):00280         SS.Break       RMB       1                   Send break signal out acia
001E                  (   /dd/defs/os9.d):00281         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (   /dd/defs/os9.d):00282                        RMB       1                   Reserved
     0020             (   /dd/defs/os9.d):00283         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (   /dd/defs/os9.d):00284         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (   /dd/defs/os9.d):00285                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (   /dd/defs/os9.d):00286         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (   /dd/defs/os9.d):00287         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (   /dd/defs/os9.d):00288         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (   /dd/defs/os9.d):00289         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (   /dd/defs/os9.d):00290         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (   /dd/defs/os9.d):00291         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (   /dd/defs/os9.d):00292         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (   /dd/defs/os9.d):00293         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (   /dd/defs/os9.d):00294         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (   /dd/defs/os9.d):00295         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (   /dd/defs/os9.d):00296         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (   /dd/defs/os9.d):00297         
                      (   /dd/defs/os9.d):00298         * System Specific and User defined codes above $80
                      (   /dd/defs/os9.d):00299                        ORG       $80
0080                  (   /dd/defs/os9.d):00300         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (   /dd/defs/os9.d):00301         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (   /dd/defs/os9.d):00302         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (   /dd/defs/os9.d):00303         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (   /dd/defs/os9.d):00304         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (   /dd/defs/os9.d):00305         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (   /dd/defs/os9.d):00306         
                      (   /dd/defs/os9.d):00307         *               IFGT      Level-1
                      (   /dd/defs/os9.d):00308         * Level 2 Windowing
0086                  (   /dd/defs/os9.d):00309         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (   /dd/defs/os9.d):00310         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (   /dd/defs/os9.d):00311         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (   /dd/defs/os9.d):00312         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (   /dd/defs/os9.d):00313         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (   /dd/defs/os9.d):00314         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (   /dd/defs/os9.d):00315         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (   /dd/defs/os9.d):00316         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (   /dd/defs/os9.d):00317         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (   /dd/defs/os9.d):00318         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (   /dd/defs/os9.d):00319                        RMB       1                   Reserved
0091                  (   /dd/defs/os9.d):00320         SS.Palet       RMB       1                   Return palette information
0092                  (   /dd/defs/os9.d):00321         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (   /dd/defs/os9.d):00322         SS.ScTyp       RMB       1                   Get screen type information
0094                  (   /dd/defs/os9.d):00323         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (   /dd/defs/os9.d):00324         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (   /dd/defs/os9.d):00325         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (   /dd/defs/os9.d):00326         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (   /dd/defs/os9.d):00327         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (   /dd/defs/os9.d):00328         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (   /dd/defs/os9.d):00329         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (   /dd/defs/os9.d):00330         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (   /dd/defs/os9.d):00331         
                      (   /dd/defs/os9.d):00332         * sc6551 defined
     0099             (   /dd/defs/os9.d):00333         SS.CDSta       EQU       SS.GIP2
     009A             (   /dd/defs/os9.d):00334         SS.CDSig       EQU       SS.AnPal
     009B             (   /dd/defs/os9.d):00335         SS.CDRel       EQU       SS.FndBf
                      (   /dd/defs/os9.d):00336         * These are wide open in Level 1
                      (   /dd/defs/os9.d):00337         
                      (   /dd/defs/os9.d):00338         * sc6551 defined
                      (   /dd/defs/os9.d):00339         
                      (   /dd/defs/os9.d):00340                        ORG       $A0
                      (   /dd/defs/os9.d):00341         *
                      (   /dd/defs/os9.d):00342         * New Default SCF input buffer Set status call
00A0                  (   /dd/defs/os9.d):00343         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (   /dd/defs/os9.d):00344         SS.Hist        RMB       1                   Enable command-line history easily
                      (   /dd/defs/os9.d):00345         
                      (   /dd/defs/os9.d):00346         
                      (   /dd/defs/os9.d):00347                        ORG       $B0
                      (   /dd/defs/os9.d):00348         *
                      (   /dd/defs/os9.d):00349         * New WDDisk get/set status calls
00B0                  (   /dd/defs/os9.d):00350         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (   /dd/defs/os9.d):00351         
                      (   /dd/defs/os9.d):00352         *
                      (   /dd/defs/os9.d):00353         
                      (   /dd/defs/os9.d):00354         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (   /dd/defs/os9.d):00355         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (   /dd/defs/os9.d):00356         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (   /dd/defs/os9.d):00357         
     0081             (   /dd/defs/os9.d):00358         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (   /dd/defs/os9.d):00359         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (   /dd/defs/os9.d):00360         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (   /dd/defs/os9.d):00361         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (   /dd/defs/os9.d):00362         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (   /dd/defs/os9.d):00363         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (   /dd/defs/os9.d):00364         
                      (   /dd/defs/os9.d):00365         * SDisk 3 Definition Equates
     0080             (   /dd/defs/os9.d):00366         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (   /dd/defs/os9.d):00367         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (   /dd/defs/os9.d):00368         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (   /dd/defs/os9.d):00369         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (   /dd/defs/os9.d):00370         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (   /dd/defs/os9.d):00371         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (   /dd/defs/os9.d):00372         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (   /dd/defs/os9.d):00373         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (   /dd/defs/os9.d):00374         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return ($86)
                      (   /dd/defs/os9.d):00375         
                      (   /dd/defs/os9.d):00376         
                      (   /dd/defs/os9.d):00377                        TTL       Direct Page Definitions
                      (   /dd/defs/os9.d):00378                        PAG       
                      (   /dd/defs/os9.d):00379         
                      (   /dd/defs/os9.d):00380         **********************************
                      (   /dd/defs/os9.d):00381         * Direct Page Variable Definitions
                      (   /dd/defs/os9.d):00382         *
                      (   /dd/defs/os9.d):00383                        ORG       $00
0000                  (   /dd/defs/os9.d):00384         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (   /dd/defs/os9.d):00385         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (   /dd/defs/os9.d):00386         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (   /dd/defs/os9.d):00387                        RMB       5
0009                  (   /dd/defs/os9.d):00388         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (   /dd/defs/os9.d):00389         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (   /dd/defs/os9.d):00390         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (   /dd/defs/os9.d):00391         D.DWStat       RMB       2                   DriveWire statics page
0010                  (   /dd/defs/os9.d):00392         D.DWSrvID      RMB       1                   DriveWire server ID
                      (   /dd/defs/os9.d):00393         
                      (   /dd/defs/os9.d):00394                        ORG       $20
                      (   /dd/defs/os9.d):00395         
                      (   /dd/defs/os9.d):00396         
                      (   /dd/defs/os9.d):00397         * Level 1 DP vars
                      (   /dd/defs/os9.d):00398         
                      (   /dd/defs/os9.d):00399         *D.XSWI3        RMB       3
                      (   /dd/defs/os9.d):00400         *D.XSWI2        RMB       3
                      (   /dd/defs/os9.d):00401         *D.XFIRQ        RMB       3
                      (   /dd/defs/os9.d):00402         *D.XIRQ         RMB       3
                      (   /dd/defs/os9.d):00403         *D.XSWI         RMB       3
                      (   /dd/defs/os9.d):00404         *D.XNMI         RMB       3
                      (   /dd/defs/os9.d):00405         
                      (   /dd/defs/os9.d):00406         
                      (   /dd/defs/os9.d):00407         * Table Sizes
                      (   /dd/defs/os9.d):00408         
                      (   /dd/defs/os9.d):00409         
                      (   /dd/defs/os9.d):00410         * Level 2 DP vars
0020                  (   /dd/defs/os9.d):00411         D.Tasks        RMB       2                   Task User Table
0022                  (   /dd/defs/os9.d):00412         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (   /dd/defs/os9.d):00413         D.Init         RMB       2                   Initialization Module ptr
0026                  (   /dd/defs/os9.d):00414         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (   /dd/defs/os9.d):00415         D.Time         EQU       .                   System Time
0028                  (   /dd/defs/os9.d):00416         D.Year         RMB       1
0029                  (   /dd/defs/os9.d):00417         D.Month        RMB       1
002A                  (   /dd/defs/os9.d):00418         D.Day          RMB       1
002B                  (   /dd/defs/os9.d):00419         D.Hour         RMB       1
002C                  (   /dd/defs/os9.d):00420         D.Min          RMB       1
002D                  (   /dd/defs/os9.d):00421         D.Sec          RMB       1
002E                  (   /dd/defs/os9.d):00422         D.Tick         RMB       1
002F                  (   /dd/defs/os9.d):00423         D.Slice        RMB       1                   current slice remaining
0030                  (   /dd/defs/os9.d):00424         D.TSlice       RMB       1                   Ticks per Slice
0031                  (   /dd/defs/os9.d):00425         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (   /dd/defs/os9.d):00426         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (   /dd/defs/os9.d):00427         D.ErrCod       RMB       1                   Reset Error Code
0034                  (   /dd/defs/os9.d):00428         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (   /dd/defs/os9.d):00429         D.TkCnt        RMB       1                   Tick Counter
0036                  (   /dd/defs/os9.d):00430         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (   /dd/defs/os9.d):00431         D.BtSz         RMB       2                   Size of Boot
                      (   /dd/defs/os9.d):00432         
003A                  (   /dd/defs/os9.d):00433                        RMB       1                   Currently unused in NitrOS-9/6809
                      (   /dd/defs/os9.d):00434         
003B                  (   /dd/defs/os9.d):00435         D.CRC          RMB       1                   CRC checking mode flag
                      (   /dd/defs/os9.d):00436         
003C                  (   /dd/defs/os9.d):00437         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (   /dd/defs/os9.d):00438         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (   /dd/defs/os9.d):00439         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (   /dd/defs/os9.d):00440         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (   /dd/defs/os9.d):00441         
                      (   /dd/defs/os9.d):00442                        ORG       $40
0040                  (   /dd/defs/os9.d):00443         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (   /dd/defs/os9.d):00444         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (   /dd/defs/os9.d):00445         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (   /dd/defs/os9.d):00446         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (   /dd/defs/os9.d):00447         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (   /dd/defs/os9.d):00448         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (   /dd/defs/os9.d):00449         D.Proc         RMB       2                   Current Process ptr
0052                  (   /dd/defs/os9.d):00450         D.AProcQ       RMB       2                   Active Process Queue
0054                  (   /dd/defs/os9.d):00451         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (   /dd/defs/os9.d):00452         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (   /dd/defs/os9.d):00453         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (   /dd/defs/os9.d):00454         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (   /dd/defs/os9.d):00455         D.CldRes       RMB       2                   Cold Restart vector
005E                  (   /dd/defs/os9.d):00456         D.BtBug        RMB       3                   Boot debug information
0061                  (   /dd/defs/os9.d):00457         D.Pipe         RMB       2
                      (   /dd/defs/os9.d):00458         
                      (   /dd/defs/os9.d):00459                        ORG       $6B
006B                  (   /dd/defs/os9.d):00460         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (   /dd/defs/os9.d):00461         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (   /dd/defs/os9.d):00462         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (   /dd/defs/os9.d):00463         
                      (   /dd/defs/os9.d):00464                        ORG       $80
0080                  (   /dd/defs/os9.d):00465         D.DevTbl       RMB       2                   I/O Device Table
0082                  (   /dd/defs/os9.d):00466         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (   /dd/defs/os9.d):00467                        RMB       4                   reserved
0088                  (   /dd/defs/os9.d):00468         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (   /dd/defs/os9.d):00469         D.DMAReq       RMB       1                   DMA Request flag
                      (   /dd/defs/os9.d):00470         
                      (   /dd/defs/os9.d):00471         ********
                      (   /dd/defs/os9.d):00472         * CoCo 3 STUFF COMES NEXT
                      (   /dd/defs/os9.d):00473         * This area is used for the CoCo Hardware Registers
                      (   /dd/defs/os9.d):00474         *
                      (   /dd/defs/os9.d):00475                        ORG       $90
0090                  (   /dd/defs/os9.d):00476         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (   /dd/defs/os9.d):00477         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (   /dd/defs/os9.d):00478         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (   /dd/defs/os9.d):00479         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (   /dd/defs/os9.d):00480         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (   /dd/defs/os9.d):00481         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (   /dd/defs/os9.d):00482         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (   /dd/defs/os9.d):00483         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (   /dd/defs/os9.d):00484         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (   /dd/defs/os9.d):00485         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (   /dd/defs/os9.d):00486         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (   /dd/defs/os9.d):00487         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (   /dd/defs/os9.d):00488         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (   /dd/defs/os9.d):00489         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (   /dd/defs/os9.d):00490         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (   /dd/defs/os9.d):00491         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (   /dd/defs/os9.d):00492         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (   /dd/defs/os9.d):00493         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (   /dd/defs/os9.d):00494         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (   /dd/defs/os9.d):00495         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (   /dd/defs/os9.d):00496         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (   /dd/defs/os9.d):00497         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (   /dd/defs/os9.d):00498         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (   /dd/defs/os9.d):00499         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (   /dd/defs/os9.d):00500         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (   /dd/defs/os9.d):00501         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (   /dd/defs/os9.d):00502         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (   /dd/defs/os9.d):00503         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (   /dd/defs/os9.d):00504         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (   /dd/defs/os9.d):00505         D.Clock2       RMB       2                   CC Clock2 entry address
                      (   /dd/defs/os9.d):00506                        ORG       $C0
00C0                  (   /dd/defs/os9.d):00507         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (   /dd/defs/os9.d):00508         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (   /dd/defs/os9.d):00509         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (   /dd/defs/os9.d):00510         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (   /dd/defs/os9.d):00511         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (   /dd/defs/os9.d):00512         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (   /dd/defs/os9.d):00513         D.SysStk       RMB       2                   System stack
00CE                  (   /dd/defs/os9.d):00514         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (   /dd/defs/os9.d):00515         D.SysTsk       RMB       1                   System Task number
                      (   /dd/defs/os9.d):00516                        ORG       $E0
00E0                  (   /dd/defs/os9.d):00517         D.Clock        RMB       2
00E2                  (   /dd/defs/os9.d):00518         D.XSWI3        RMB       2
00E4                  (   /dd/defs/os9.d):00519         D.XSWI2        RMB       2
00E6                  (   /dd/defs/os9.d):00520         D.XFIRQ        RMB       2
00E8                  (   /dd/defs/os9.d):00521         D.XIRQ         RMB       2
00EA                  (   /dd/defs/os9.d):00522         D.XSWI         RMB       2
00EC                  (   /dd/defs/os9.d):00523         D.XNMI         RMB       2
00EE                  (   /dd/defs/os9.d):00524         D.ErrRst       RMB       2
00F0                  (   /dd/defs/os9.d):00525         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (   /dd/defs/os9.d):00526         D.SWI3         RMB       2
00F4                  (   /dd/defs/os9.d):00527         D.SWI2         RMB       2
00F6                  (   /dd/defs/os9.d):00528         D.FIRQ         RMB       2
00F8                  (   /dd/defs/os9.d):00529         D.IRQ          RMB       2
00FA                  (   /dd/defs/os9.d):00530         D.SWI          RMB       2
00FC                  (   /dd/defs/os9.d):00531         D.NMI          RMB       2
                      (   /dd/defs/os9.d):00532         
                      (   /dd/defs/os9.d):00533         *************************
                      (   /dd/defs/os9.d):00534         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (   /dd/defs/os9.d):00535         * and for bytes in the system memory map at D.SysMem.
                      (   /dd/defs/os9.d):00536         * A value of 0 indicates an unused/unassigned block.
                      (   /dd/defs/os9.d):00537         * In the code, block assignment often involves incrementing a value
                      (   /dd/defs/os9.d):00538         * from 0 to 1 rather than explict use of RAMinUse.
                      (   /dd/defs/os9.d):00539         *
     0080             (   /dd/defs/os9.d):00540         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (   /dd/defs/os9.d):00541         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (   /dd/defs/os9.d):00542         ModBlock       EQU       %00000010           Module in Block
     0001             (   /dd/defs/os9.d):00543         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (   /dd/defs/os9.d):00544         *
                      (   /dd/defs/os9.d):00545         * Service Dispatch Table special entries
                      (   /dd/defs/os9.d):00546         *
     00FE             (   /dd/defs/os9.d):00547         IOEntry        EQU       254
                      (   /dd/defs/os9.d):00548         
                      (   /dd/defs/os9.d):00549         
                      (   /dd/defs/os9.d):00550                        TTL       Structure Formats
                      (   /dd/defs/os9.d):00551                        PAG       
                      (   /dd/defs/os9.d):00552         ************************************
                      (   /dd/defs/os9.d):00553         * Module Directory Entry Definitions
                      (   /dd/defs/os9.d):00554         *
                      (   /dd/defs/os9.d):00555                        ORG       0
0000                  (   /dd/defs/os9.d):00556         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (   /dd/defs/os9.d):00557         MD$MBSiz       RMB       2                   Memory Block size
0004                  (   /dd/defs/os9.d):00558         MD$MPtr        RMB       2                   Module ptr
0006                  (   /dd/defs/os9.d):00559         MD$Link        RMB       2                   Module Link count
     0008             (   /dd/defs/os9.d):00560         MD$ESize       EQU       .                   Module Directory Entry size
                      (   /dd/defs/os9.d):00561         
                      (   /dd/defs/os9.d):00562         ************************************
                      (   /dd/defs/os9.d):00563         * Module Definitions
                      (   /dd/defs/os9.d):00564         *
                      (   /dd/defs/os9.d):00565         * Universal Module Offsets
                      (   /dd/defs/os9.d):00566         *
                      (   /dd/defs/os9.d):00567                        ORG       0
0000                  (   /dd/defs/os9.d):00568         M$ID           RMB       2                   ID Code
0002                  (   /dd/defs/os9.d):00569         M$Size         RMB       2                   Module Size
0004                  (   /dd/defs/os9.d):00570         M$Name         RMB       2                   Module Name
0006                  (   /dd/defs/os9.d):00571         M$Type         RMB       1                   Type / Language
0007                  (   /dd/defs/os9.d):00572         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (   /dd/defs/os9.d):00573         M$Parity       RMB       1                   Header Parity
     0009             (   /dd/defs/os9.d):00574         M$IDSize       EQU       .                   Module ID Size
                      (   /dd/defs/os9.d):00575         *
                      (   /dd/defs/os9.d):00576         * Type-Dependent Module Offsets
                      (   /dd/defs/os9.d):00577         *
                      (   /dd/defs/os9.d):00578         * System, File Manager, Device Driver, Program Module
                      (   /dd/defs/os9.d):00579         *
0009                  (   /dd/defs/os9.d):00580         M$Exec         RMB       2                   Execution Entry Offset
                      (   /dd/defs/os9.d):00581         *
                      (   /dd/defs/os9.d):00582         * Device Driver, Program Module
                      (   /dd/defs/os9.d):00583         *
000B                  (   /dd/defs/os9.d):00584         M$Mem          RMB       2                   Stack Requirement
                      (   /dd/defs/os9.d):00585         *
                      (   /dd/defs/os9.d):00586         * Device Driver, Device Descriptor Module
                      (   /dd/defs/os9.d):00587         *
000D                  (   /dd/defs/os9.d):00588         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (   /dd/defs/os9.d):00589         *
                      (   /dd/defs/os9.d):00590         * Device Descriptor Module
                      (   /dd/defs/os9.d):00591         *
                      (   /dd/defs/os9.d):00592                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00593         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (   /dd/defs/os9.d):00594         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (   /dd/defs/os9.d):00595                        RMB       1                   M$Mode (defined above)
000E                  (   /dd/defs/os9.d):00596         M$Port         RMB       3                   Port Address
0011                  (   /dd/defs/os9.d):00597         M$Opt          RMB       1                   Device Default Options
0012                  (   /dd/defs/os9.d):00598         M$DTyp         RMB       1                   Device Type
     0012             (   /dd/defs/os9.d):00599         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (   /dd/defs/os9.d):00600         *
                      (   /dd/defs/os9.d):00601         * Configuration Module Entry Offsets
                      (   /dd/defs/os9.d):00602         *
                      (   /dd/defs/os9.d):00603                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00604         MaxMem         RMB       3                   Maximum Free Memory
000C                  (   /dd/defs/os9.d):00605         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (   /dd/defs/os9.d):00606         DevCnt         RMB       1                   Entries in Device Table
000E                  (   /dd/defs/os9.d):00607         InitStr        RMB       2                   Initial Module Name
0010                  (   /dd/defs/os9.d):00608         SysStr         RMB       2                   System Device Name
0012                  (   /dd/defs/os9.d):00609         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (   /dd/defs/os9.d):00610         BootStr        RMB       2                   Bootstrap Module name
0016                  (   /dd/defs/os9.d):00611         ProtFlag       RMB       1                   Write protect enable flag
                      (   /dd/defs/os9.d):00612         
0017                  (   /dd/defs/os9.d):00613         OSLevel        RMB       1                   OS level
0018                  (   /dd/defs/os9.d):00614         OSVer          RMB       1                   OS version
0019                  (   /dd/defs/os9.d):00615         OSMajor        RMB       1                   OS major
001A                  (   /dd/defs/os9.d):00616         OSMinor        RMB       1                   OS minor
001B                  (   /dd/defs/os9.d):00617         Feature1       RMB       1                   feature byte 1
001C                  (   /dd/defs/os9.d):00618         Feature2       RMB       1                   feature byte 2
001D                  (   /dd/defs/os9.d):00619         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (   /dd/defs/os9.d):00620         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (   /dd/defs/os9.d):00621                        RMB       4                   reserved for future use
                      (   /dd/defs/os9.d):00622         
                      (   /dd/defs/os9.d):00623         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (   /dd/defs/os9.d):00624         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (   /dd/defs/os9.d):00625         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (   /dd/defs/os9.d):00626         KeyRptS        RMB       1                   Key repeat start constant
0029                  (   /dd/defs/os9.d):00627         KeyRptD        RMB       1                   Key repeat delay constant
                      (   /dd/defs/os9.d):00628         
                      (   /dd/defs/os9.d):00629         * Feature1 byte definitions
     0001             (   /dd/defs/os9.d):00630         CRCOn          EQU       %00000001           CRC checking on
     0000             (   /dd/defs/os9.d):00631         CRCOff         EQU       %00000000           CRC checking off
     0000             (   /dd/defs/os9.d):00632         Proc6809       EQU       %00000000           6809 procesor
     0002             (   /dd/defs/os9.d):00633         Proc6309       EQU       %00000010           6309 procesor
                      (   /dd/defs/os9.d):00634         
                      (   /dd/defs/os9.d):00635                        PAG       
                      (   /dd/defs/os9.d):00636         **************************
                      (   /dd/defs/os9.d):00637         * Module Field Definitions
                      (   /dd/defs/os9.d):00638         *
                      (   /dd/defs/os9.d):00639         * ID Field - First two bytes of a NitrOS-9 module
                      (   /dd/defs/os9.d):00640         *
     0087             (   /dd/defs/os9.d):00641         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (   /dd/defs/os9.d):00642         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (   /dd/defs/os9.d):00643         M$ID12         EQU       M$ID1*256+M$ID2
                      (   /dd/defs/os9.d):00644         
                      (   /dd/defs/os9.d):00645         *
                      (   /dd/defs/os9.d):00646         * Module Type/Language Field Masks
                      (   /dd/defs/os9.d):00647         *
     00F0             (   /dd/defs/os9.d):00648         TypeMask       EQU       %11110000           Type Field
     000F             (   /dd/defs/os9.d):00649         LangMask       EQU       %00001111           Language Field
                      (   /dd/defs/os9.d):00650         
                      (   /dd/defs/os9.d):00651         *
                      (   /dd/defs/os9.d):00652         * Module Type Values
                      (   /dd/defs/os9.d):00653         *
     00F0             (   /dd/defs/os9.d):00654         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (   /dd/defs/os9.d):00655         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (   /dd/defs/os9.d):00656         FlMgr          EQU       $D0                 File Manager
     00C0             (   /dd/defs/os9.d):00657         Systm          EQU       $C0                 System Module
     0050             (   /dd/defs/os9.d):00658         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (   /dd/defs/os9.d):00659         Data           EQU       $40                 Data Module
     0030             (   /dd/defs/os9.d):00660         Multi          EQU       $30                 Multi-Module
     0020             (   /dd/defs/os9.d):00661         Sbrtn          EQU       $20                 Subroutine Module
     0010             (   /dd/defs/os9.d):00662         Prgrm          EQU       $10                 Program Module
                      (   /dd/defs/os9.d):00663         
                      (   /dd/defs/os9.d):00664         *
                      (   /dd/defs/os9.d):00665         * Module Language Values
                      (   /dd/defs/os9.d):00666         *
     0001             (   /dd/defs/os9.d):00667         Objct          EQU       1                   6809 Object Code Module
     0002             (   /dd/defs/os9.d):00668         ICode          EQU       2                   Basic09 I-code
     0003             (   /dd/defs/os9.d):00669         PCode          EQU       3                   Pascal P-code
     0004             (   /dd/defs/os9.d):00670         CCode          EQU       4                   C I-code
     0005             (   /dd/defs/os9.d):00671         CblCode        EQU       5                   Cobol I-code
     0006             (   /dd/defs/os9.d):00672         FrtnCode       EQU       6                   Fortran I-code
     0007             (   /dd/defs/os9.d):00673         Obj6309        EQU       7                   6309 object code
                      (   /dd/defs/os9.d):00674         *
                      (   /dd/defs/os9.d):00675         * Module Attributes / Revision byte
                      (   /dd/defs/os9.d):00676         *
                      (   /dd/defs/os9.d):00677         * Field Masks
                      (   /dd/defs/os9.d):00678         *
     00F0             (   /dd/defs/os9.d):00679         AttrMask       EQU       %11110000           Attributes Field
     000F             (   /dd/defs/os9.d):00680         RevsMask       EQU       %00001111           Revision Level Field
                      (   /dd/defs/os9.d):00681         *
                      (   /dd/defs/os9.d):00682         * Attribute Flags
                      (   /dd/defs/os9.d):00683         *
     0080             (   /dd/defs/os9.d):00684         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (   /dd/defs/os9.d):00685         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (   /dd/defs/os9.d):00686         ModNat         EQU       %00100000           6309 native mode attribute
                      (   /dd/defs/os9.d):00687         
                      (   /dd/defs/os9.d):00688         ********************
                      (   /dd/defs/os9.d):00689         * Device Type Values
                      (   /dd/defs/os9.d):00690         *
                      (   /dd/defs/os9.d):00691         * These values define various classes of devices, which are
                      (   /dd/defs/os9.d):00692         * managed by a file manager module.  The Device Type is embedded
                      (   /dd/defs/os9.d):00693         * in a device's device descriptor.
                      (   /dd/defs/os9.d):00694         *
     0000             (   /dd/defs/os9.d):00695         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (   /dd/defs/os9.d):00696         DT.RBF         EQU       1                   Random Block File Manager
     0002             (   /dd/defs/os9.d):00697         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (   /dd/defs/os9.d):00698         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (   /dd/defs/os9.d):00699         DT.NFM         EQU       4                   Network File Manager
     0005             (   /dd/defs/os9.d):00700         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (   /dd/defs/os9.d):00701         DT.RFM                  EQU             6                                       Remote File Manager
                      (   /dd/defs/os9.d):00702         
                      (   /dd/defs/os9.d):00703         *********************
                      (   /dd/defs/os9.d):00704         * CRC Result Constant
                      (   /dd/defs/os9.d):00705         *
     0080             (   /dd/defs/os9.d):00706         CRCCon1        EQU       $80
     0FE3             (   /dd/defs/os9.d):00707         CRCCon23       EQU       $0FE3
                      (   /dd/defs/os9.d):00708         
                      (   /dd/defs/os9.d):00709                        TTL       Process Information
                      (   /dd/defs/os9.d):00710                        PAG       
                      (   /dd/defs/os9.d):00711         ********************************
                      (   /dd/defs/os9.d):00712         * Process Descriptor Definitions
                      (   /dd/defs/os9.d):00713         *
                      (   /dd/defs/os9.d):00714         
                      (   /dd/defs/os9.d):00715         * Level 1 process descriptor defs
                      (   /dd/defs/os9.d):00716         
                      (   /dd/defs/os9.d):00717         
                      (   /dd/defs/os9.d):00718         *
                      (   /dd/defs/os9.d):00719         * Process State Flags
                      (   /dd/defs/os9.d):00720         *
                      (   /dd/defs/os9.d):00721         
                      (   /dd/defs/os9.d):00722         
                      (   /dd/defs/os9.d):00723         * Level 2 process descriptor defs
     0010             (   /dd/defs/os9.d):00724         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (   /dd/defs/os9.d):00725         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (   /dd/defs/os9.d):00726         NumPaths       EQU       16                  Number of Local Paths
                      (   /dd/defs/os9.d):00727         
                      (   /dd/defs/os9.d):00728                        ORG       0
0000                  (   /dd/defs/os9.d):00729         P$ID           RMB       1                   Process ID
0001                  (   /dd/defs/os9.d):00730         P$PID          RMB       1                   Parent's ID
0002                  (   /dd/defs/os9.d):00731         P$SID          RMB       1                   Sibling's ID
0003                  (   /dd/defs/os9.d):00732         P$CID          RMB       1                   Child's ID
0004                  (   /dd/defs/os9.d):00733         P$SP           RMB       2                   Stack ptr
0006                  (   /dd/defs/os9.d):00734         P$Task         RMB       1                   Task Number
0007                  (   /dd/defs/os9.d):00735         P$PagCnt       RMB       1                   Memory Page Count
0008                  (   /dd/defs/os9.d):00736         P$User         RMB       2                   User Index
000A                  (   /dd/defs/os9.d):00737         P$Prior        RMB       1                   Priority
000B                  (   /dd/defs/os9.d):00738         P$Age          RMB       1                   Age
000C                  (   /dd/defs/os9.d):00739         P$State        RMB       1                   Status
000D                  (   /dd/defs/os9.d):00740         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (   /dd/defs/os9.d):00741         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (   /dd/defs/os9.d):00742         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (   /dd/defs/os9.d):00743         P$PModul       RMB       2                   Primary Module
0013                  (   /dd/defs/os9.d):00744         P$SWI          RMB       2                   SWI Entry Point
0015                  (   /dd/defs/os9.d):00745         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (   /dd/defs/os9.d):00746         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (   /dd/defs/os9.d):00747         P$Signal       RMB       1                   Signal Code
001A                  (   /dd/defs/os9.d):00748         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (   /dd/defs/os9.d):00749         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (   /dd/defs/os9.d):00750         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (   /dd/defs/os9.d):00751                        RMB       $20-.               unused
0020                  (   /dd/defs/os9.d):00752         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (   /dd/defs/os9.d):00753         P$Path         RMB       NumPaths            I/O Path Table
0040                  (   /dd/defs/os9.d):00754         P$DATImg       RMB       64                  DAT Image
0080                  (   /dd/defs/os9.d):00755         P$Links        RMB       32                  Block Link counts
00A0                  (   /dd/defs/os9.d):00756         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (   /dd/defs/os9.d):00757         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (   /dd/defs/os9.d):00758         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (   /dd/defs/os9.d):00759         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (   /dd/defs/os9.d):00760         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (   /dd/defs/os9.d):00761         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (   /dd/defs/os9.d):00762         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (   /dd/defs/os9.d):00763         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (   /dd/defs/os9.d):00764         P$Alarm        RMB       6
00C9                  (   /dd/defs/os9.d):00765                        RMB       $200-.              Local stack
     0200             (   /dd/defs/os9.d):00766         P$Stack        EQU       .                   Top of Stack
     0200             (   /dd/defs/os9.d):00767         P$Size         EQU       .                   Size of Process Descriptor
                      (   /dd/defs/os9.d):00768         
                      (   /dd/defs/os9.d):00769         *
                      (   /dd/defs/os9.d):00770         * Process State Flags
                      (   /dd/defs/os9.d):00771         *
     0080             (   /dd/defs/os9.d):00772         SysState       EQU       %10000000
     0040             (   /dd/defs/os9.d):00773         TimSleep       EQU       %01000000
     0020             (   /dd/defs/os9.d):00774         TimOut         EQU       %00100000
     0010             (   /dd/defs/os9.d):00775         ImgChg         EQU       %00010000
     0008             (   /dd/defs/os9.d):00776         Suspend        EQU       %00001000
     0002             (   /dd/defs/os9.d):00777         Condem         EQU       %00000010
     0001             (   /dd/defs/os9.d):00778         Dead           EQU       %00000001
                      (   /dd/defs/os9.d):00779         
                      (   /dd/defs/os9.d):00780         
                      (   /dd/defs/os9.d):00781                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (   /dd/defs/os9.d):00782                        PAG       
                      (   /dd/defs/os9.d):00783         *************************
                      (   /dd/defs/os9.d):00784         * Path Descriptor Offsets
                      (   /dd/defs/os9.d):00785         *
                      (   /dd/defs/os9.d):00786                        ORG       0
0000                  (   /dd/defs/os9.d):00787         PD.PD          RMB       1                   Path Number
0001                  (   /dd/defs/os9.d):00788         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (   /dd/defs/os9.d):00789         PD.CNT         RMB       1                   Number of Open Images
0003                  (   /dd/defs/os9.d):00790         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (   /dd/defs/os9.d):00791         PD.CPR         RMB       1                   Current Process
0006                  (   /dd/defs/os9.d):00792         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (   /dd/defs/os9.d):00793         PD.BUF         RMB       2                   Buffer Address
000A                  (   /dd/defs/os9.d):00794         PD.FST         RMB       32-.                File Manager's Storage
     0020             (   /dd/defs/os9.d):00795         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (   /dd/defs/os9.d):00796         PD.DTP         RMB       1                   Device Type
0021                  (   /dd/defs/os9.d):00797                        RMB       64-.                Path options
     0040             (   /dd/defs/os9.d):00798         PDSIZE         EQU       .
                      (   /dd/defs/os9.d):00799         
                      (   /dd/defs/os9.d):00800         *
                      (   /dd/defs/os9.d):00801         * Pathlist Special Symbols
                      (   /dd/defs/os9.d):00802         *
     002F             (   /dd/defs/os9.d):00803         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (   /dd/defs/os9.d):00804         PDIR           EQU       '.                  Directory
     0040             (   /dd/defs/os9.d):00805         PENTIR         EQU       '@                  Entire Device
                      (   /dd/defs/os9.d):00806         
                      (   /dd/defs/os9.d):00807                        PAG       
                      (   /dd/defs/os9.d):00808         ****************************
                      (   /dd/defs/os9.d):00809         * File Manager Entry Offsets
                      (   /dd/defs/os9.d):00810         *
                      (   /dd/defs/os9.d):00811                        ORG       0
0000                  (   /dd/defs/os9.d):00812         FMCREA         RMB       3                   Create (Open New) File
0003                  (   /dd/defs/os9.d):00813         FMOPEN         RMB       3                   Open File
0006                  (   /dd/defs/os9.d):00814         FMMDIR         RMB       3                   Make Directory
0009                  (   /dd/defs/os9.d):00815         FMCDIR         RMB       3                   Change Directory
000C                  (   /dd/defs/os9.d):00816         FMDLET         RMB       3                   Delete File
000F                  (   /dd/defs/os9.d):00817         FMSEEK         RMB       3                   Position File
0012                  (   /dd/defs/os9.d):00818         FMREAD         RMB       3                   Read from File
0015                  (   /dd/defs/os9.d):00819         FMWRIT         RMB       3                   Write to File
0018                  (   /dd/defs/os9.d):00820         FMRDLN         RMB       3                   ReadLn
001B                  (   /dd/defs/os9.d):00821         FMWRLN         RMB       3                   WritLn
001E                  (   /dd/defs/os9.d):00822         FMGSTA         RMB       3                   Get File Status
0021                  (   /dd/defs/os9.d):00823         FMSSTA         RMB       3                   Set File Status
0024                  (   /dd/defs/os9.d):00824         FMCLOS         RMB       3                   Close File
                      (   /dd/defs/os9.d):00825         
                      (   /dd/defs/os9.d):00826         *****************************
                      (   /dd/defs/os9.d):00827         * Device Driver Entry Offsets
                      (   /dd/defs/os9.d):00828         *
                      (   /dd/defs/os9.d):00829                        ORG       0
0000                  (   /dd/defs/os9.d):00830         D$INIT         RMB       3                   Device Initialization
0003                  (   /dd/defs/os9.d):00831         D$READ         RMB       3                   Read from Device
0006                  (   /dd/defs/os9.d):00832         D$WRIT         RMB       3                   Write to Device
0009                  (   /dd/defs/os9.d):00833         D$GSTA         RMB       3                   Get Device Status
000C                  (   /dd/defs/os9.d):00834         D$PSTA         RMB       3                   Put Device Status
000F                  (   /dd/defs/os9.d):00835         D$TERM         RMB       3                   Device Termination
                      (   /dd/defs/os9.d):00836         
                      (   /dd/defs/os9.d):00837         *********************
                      (   /dd/defs/os9.d):00838         * Device Table Format
                      (   /dd/defs/os9.d):00839         *
                      (   /dd/defs/os9.d):00840                        ORG       0
0000                  (   /dd/defs/os9.d):00841         V$DRIV         RMB       2                   Device Driver module
0002                  (   /dd/defs/os9.d):00842         V$STAT         RMB       2                   Device Driver Static storage
0004                  (   /dd/defs/os9.d):00843         V$DESC         RMB       2                   Device Descriptor module
0006                  (   /dd/defs/os9.d):00844         V$FMGR         RMB       2                   File Manager module
0008                  (   /dd/defs/os9.d):00845         V$USRS         RMB       1                   use count
0009                  (   /dd/defs/os9.d):00846         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (   /dd/defs/os9.d):00847         V$FMGREX       RMB       2                   File Manager execution address
     000D             (   /dd/defs/os9.d):00848         DEVSIZ         EQU       .
                      (   /dd/defs/os9.d):00849         
                      (   /dd/defs/os9.d):00850         *******************************
                      (   /dd/defs/os9.d):00851         * Device Static Storage Offsets
                      (   /dd/defs/os9.d):00852         *
                      (   /dd/defs/os9.d):00853                        ORG       0
0000                  (   /dd/defs/os9.d):00854         V.PAGE         RMB       1                   Port Extended Address
0001                  (   /dd/defs/os9.d):00855         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (   /dd/defs/os9.d):00856         V.LPRC         RMB       1                   Last Active Process ID
0004                  (   /dd/defs/os9.d):00857         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (   /dd/defs/os9.d):00858         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (   /dd/defs/os9.d):00859         V.USER         EQU       .                   Driver Allocation Origin
                      (   /dd/defs/os9.d):00860         
                      (   /dd/defs/os9.d):00861         ********************************
                      (   /dd/defs/os9.d):00862         * Interrupt Polling Table Format
                      (   /dd/defs/os9.d):00863         *
                      (   /dd/defs/os9.d):00864                        ORG       0
0000                  (   /dd/defs/os9.d):00865         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (   /dd/defs/os9.d):00866         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (   /dd/defs/os9.d):00867         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (   /dd/defs/os9.d):00868         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (   /dd/defs/os9.d):00869         Q$STAT         RMB       2                   Static Storage Address
0008                  (   /dd/defs/os9.d):00870         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
0009                  (   /dd/defs/os9.d):00871         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
     000B             (   /dd/defs/os9.d):00872         POLSIZ         EQU       .
                      (   /dd/defs/os9.d):00873         
                      (   /dd/defs/os9.d):00874         ********************
                      (   /dd/defs/os9.d):00875         * VIRQ packet format
                      (   /dd/defs/os9.d):00876         *
                      (   /dd/defs/os9.d):00877                        ORG       0
0000                  (   /dd/defs/os9.d):00878         Vi.Cnt         RMB       2                   count down counter
0002                  (   /dd/defs/os9.d):00879         Vi.Rst         RMB       2                   reset value for counter
0004                  (   /dd/defs/os9.d):00880         Vi.Stat        RMB       1                   status byte
     0005             (   /dd/defs/os9.d):00881         Vi.PkSz        EQU       .
                      (   /dd/defs/os9.d):00882         
     0001             (   /dd/defs/os9.d):00883         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (   /dd/defs/os9.d):00884         
                      (   /dd/defs/os9.d):00885                        PAG       
                      (   /dd/defs/os9.d):00886         *************************************
                      (   /dd/defs/os9.d):00887         * Machine Characteristics Definitions
                      (   /dd/defs/os9.d):00888         *
     0000             (   /dd/defs/os9.d):00889         R$CC           EQU       0                   Condition Codes register
     0001             (   /dd/defs/os9.d):00890         R$A            EQU       1                   A Accumulator
     0002             (   /dd/defs/os9.d):00891         R$B            EQU       2                   B Accumulator
     0001             (   /dd/defs/os9.d):00892         R$D            EQU       R$A                 Combined A:B Accumulator
                      (   /dd/defs/os9.d):00893                        IFNE      H6309
0005                  (   /dd/defs/os9.d):00894         R$E            EQU       3
0005                  (   /dd/defs/os9.d):00895         R$F            EQU       4
0005                  (   /dd/defs/os9.d):00896         R$W            EQU       R$E
0005                  (   /dd/defs/os9.d):00897         R$Q            EQU       R$A
0005                  (   /dd/defs/os9.d):00898         R$DP           EQU       5
0005                  (   /dd/defs/os9.d):00899         R$X            EQU       6
0005                  (   /dd/defs/os9.d):00900         R$Y            EQU       8
0005                  (   /dd/defs/os9.d):00901         R$U            EQU       10
0005                  (   /dd/defs/os9.d):00902         R$PC           EQU       12
0005                  (   /dd/defs/os9.d):00903         R$Size         EQU       14
                      (   /dd/defs/os9.d):00904                        ELSE
     0003             (   /dd/defs/os9.d):00905         R$DP           EQU       3                   Direct Page register
     0004             (   /dd/defs/os9.d):00906         R$X            EQU       4                   X Index register
     0006             (   /dd/defs/os9.d):00907         R$Y            EQU       6                   Y Index register
     0008             (   /dd/defs/os9.d):00908         R$U            EQU       8                   User Stack register
     000A             (   /dd/defs/os9.d):00909         R$PC           EQU       10                  Program Counter register
     000C             (   /dd/defs/os9.d):00910         R$Size         EQU       12                  Total register package size
                      (   /dd/defs/os9.d):00911                        ENDC
                      (   /dd/defs/os9.d):00912         
                      (   /dd/defs/os9.d):00913         * MD register masks
                      (   /dd/defs/os9.d):00914         * 6309 definitions
     0080             (   /dd/defs/os9.d):00915         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (   /dd/defs/os9.d):00916         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (   /dd/defs/os9.d):00917         
     0080             (   /dd/defs/os9.d):00918         Entire         EQU       %10000000           Full Register Stack flag
     0040             (   /dd/defs/os9.d):00919         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (   /dd/defs/os9.d):00920         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (   /dd/defs/os9.d):00921         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (   /dd/defs/os9.d):00922         Negative       EQU       %00001000           Negative flag
     0004             (   /dd/defs/os9.d):00923         Zero           EQU       %00000100           Zero flag
     0002             (   /dd/defs/os9.d):00924         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (   /dd/defs/os9.d):00925         Carry          EQU       %00000001           Carry bit
     0050             (   /dd/defs/os9.d):00926         IntMasks       EQU       IRQMask+FIRQMask
     0080             (   /dd/defs/os9.d):00927         Sign           EQU       %10000000           sign bit
                      (   /dd/defs/os9.d):00928         
                      (   /dd/defs/os9.d):00929                        TTL       Error Code Definitions
                      (   /dd/defs/os9.d):00930                        PAG       
                      (   /dd/defs/os9.d):00931         ************************
                      (   /dd/defs/os9.d):00932         * Error Code Definitions
                      (   /dd/defs/os9.d):00933         *
                      (   /dd/defs/os9.d):00934         * Basic09 Error Codes
                      (   /dd/defs/os9.d):00935         *
                      (   /dd/defs/os9.d):00936                        ORG       10
000A                  (   /dd/defs/os9.d):00937         E$UnkSym       RMB       1                   Unknown symbol
000B                  (   /dd/defs/os9.d):00938         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (   /dd/defs/os9.d):00939         E$IllStC       RMB       1                   Illegal statement construction
000D                  (   /dd/defs/os9.d):00940         E$ICOvf        RMB       1                   I-code overflow
000E                  (   /dd/defs/os9.d):00941         E$IChRef       RMB       1                   Illegal channel reference
000F                  (   /dd/defs/os9.d):00942         E$IllMod       RMB       1                   Illegal mode
0010                  (   /dd/defs/os9.d):00943         E$IllNum       RMB       1                   Illegal number
0011                  (   /dd/defs/os9.d):00944         E$IllPrf       RMB       1                   Illegal prefix
0012                  (   /dd/defs/os9.d):00945         E$IllOpd       RMB       1                   Illegal operand
0013                  (   /dd/defs/os9.d):00946         E$IllOpr       RMB       1                   Illegal operator
0014                  (   /dd/defs/os9.d):00947         E$IllRFN       RMB       1                   Illegal record field name
0015                  (   /dd/defs/os9.d):00948         E$IllDim       RMB       1                   Illegal dimension
0016                  (   /dd/defs/os9.d):00949         E$IllLit       RMB       1                   Illegal literal
0017                  (   /dd/defs/os9.d):00950         E$IllRet       RMB       1                   Illegal relational
0018                  (   /dd/defs/os9.d):00951         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (   /dd/defs/os9.d):00952         E$DimLrg       RMB       1                   Dimension too large
001A                  (   /dd/defs/os9.d):00953         E$LinLrg       RMB       1                   Line number too large
001B                  (   /dd/defs/os9.d):00954         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (   /dd/defs/os9.d):00955         E$NoPath       RMB       1                   Missing path number
001D                  (   /dd/defs/os9.d):00956         E$NoComa       RMB       1                   Missing coma
001E                  (   /dd/defs/os9.d):00957         E$NoDim        RMB       1                   Missing dimension
001F                  (   /dd/defs/os9.d):00958         E$NoDO         RMB       1                   Missing DO statement
0020                  (   /dd/defs/os9.d):00959         E$MFull        RMB       1                   Memory full
0021                  (   /dd/defs/os9.d):00960         E$NoGoto       RMB       1                   Missing GOTO
0022                  (   /dd/defs/os9.d):00961         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (   /dd/defs/os9.d):00962         E$NoLRef       RMB       1                   Missing line reference
0024                  (   /dd/defs/os9.d):00963         E$NoOprd       RMB       1                   Missing operand
0025                  (   /dd/defs/os9.d):00964         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (   /dd/defs/os9.d):00965         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (   /dd/defs/os9.d):00966         E$NoTO         RMB       1                   Missing TO statement
0028                  (   /dd/defs/os9.d):00967         E$NoVRef       RMB       1                   Missing variable reference
0029                  (   /dd/defs/os9.d):00968         E$EndQou       RMB       1                   Missing end quote
002A                  (   /dd/defs/os9.d):00969         E$SubLrg       RMB       1                   Too many subscripts
002B                  (   /dd/defs/os9.d):00970         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (   /dd/defs/os9.d):00971         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (   /dd/defs/os9.d):00972         E$DivZer       RMB       1                   Divice by zero
002E                  (   /dd/defs/os9.d):00973         E$TypMis       RMB       1                   Operand type mismatch
002F                  (   /dd/defs/os9.d):00974         E$StrOvf       RMB       1                   String stack overflow
0030                  (   /dd/defs/os9.d):00975         E$NoRout       RMB       1                   Unimplemented routine
0031                  (   /dd/defs/os9.d):00976         E$UndVar       RMB       1                   Undefined variable
0032                  (   /dd/defs/os9.d):00977         E$FltOvf       RMB       1                   Floating Overflow
0033                  (   /dd/defs/os9.d):00978         E$LnComp       RMB       1                   Line with compiler error
0034                  (   /dd/defs/os9.d):00979         E$ValRng       RMB       1                   Value out of range for destination
0035                  (   /dd/defs/os9.d):00980         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (   /dd/defs/os9.d):00981         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (   /dd/defs/os9.d):00982         E$SubRng       RMB       1                   Subscript out of range
0038                  (   /dd/defs/os9.d):00983         E$ParmEr       RMB       1                   Paraemter error
0039                  (   /dd/defs/os9.d):00984         E$SysOvf       RMB       1                   System stack overflow
003A                  (   /dd/defs/os9.d):00985         E$IOMism       RMB       1                   I/O type mismatch
003B                  (   /dd/defs/os9.d):00986         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (   /dd/defs/os9.d):00987         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (   /dd/defs/os9.d):00988         E$IllInp       RMB       1                   Illegal input format
003E                  (   /dd/defs/os9.d):00989         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (   /dd/defs/os9.d):00990         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (   /dd/defs/os9.d):00991         E$IllPNm       RMB       1                   Illegal path number
0041                  (   /dd/defs/os9.d):00992         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (   /dd/defs/os9.d):00993         E$NonRcO       RMB       1                   Non-record type operand
0043                  (   /dd/defs/os9.d):00994         E$IllA         RMB       1                   Illegal argument
0044                  (   /dd/defs/os9.d):00995         E$IllCnt       RMB       1                   Illegal control structure
0045                  (   /dd/defs/os9.d):00996         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (   /dd/defs/os9.d):00997         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (   /dd/defs/os9.d):00998         E$IllExp       RMB       1                   Illegal expression type
0048                  (   /dd/defs/os9.d):00999         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (   /dd/defs/os9.d):01000         E$ArrOvf       RMB       1                   Array size overflow
004A                  (   /dd/defs/os9.d):01001         E$UndLin       RMB       1                   Undefined line number
004B                  (   /dd/defs/os9.d):01002         E$MltLin       RMB       1                   Multiply defined line number
004C                  (   /dd/defs/os9.d):01003         E$MltVar       RMB       1                   Multiply defined variable
004D                  (   /dd/defs/os9.d):01004         E$IllIVr       RMB       1                   Illegal input variable
004E                  (   /dd/defs/os9.d):01005         E$SeekRg       RMB       1                   Seek out of range
004F                  (   /dd/defs/os9.d):01006         E$NoData       RMB       1                   Missing data statement
                      (   /dd/defs/os9.d):01007         
                      (   /dd/defs/os9.d):01008         *
                      (   /dd/defs/os9.d):01009         * System Dependent Error Codes
                      (   /dd/defs/os9.d):01010         *
                      (   /dd/defs/os9.d):01011         
                      (   /dd/defs/os9.d):01012         * Level 2 windowing error codes
                      (   /dd/defs/os9.d):01013                        ORG       183
00B7                  (   /dd/defs/os9.d):01014         E$IWTyp        RMB       1                   Illegal window type
00B8                  (   /dd/defs/os9.d):01015         E$WADef        RMB       1                   Window already defined
00B9                  (   /dd/defs/os9.d):01016         E$NFont        RMB       1                   Font not found
00BA                  (   /dd/defs/os9.d):01017         E$StkOvf       RMB       1                   Stack overflow
00BB                  (   /dd/defs/os9.d):01018         E$IllArg       RMB       1                   Illegal argument
00BC                  (   /dd/defs/os9.d):01019                        RMB       1                   reserved
00BD                  (   /dd/defs/os9.d):01020         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (   /dd/defs/os9.d):01021         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (   /dd/defs/os9.d):01022         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (   /dd/defs/os9.d):01023         E$IllCmd       RMB       1                   Illegal command
00C1                  (   /dd/defs/os9.d):01024         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (   /dd/defs/os9.d):01025         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (   /dd/defs/os9.d):01026         E$IWDef        RMB       1                   Illegal window definition
00C4                  (   /dd/defs/os9.d):01027         E$WUndef       RMB       1                   Window undefined
                      (   /dd/defs/os9.d):01028         
00C5                  (   /dd/defs/os9.d):01029         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (   /dd/defs/os9.d):01030         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (   /dd/defs/os9.d):01031         E$Alias        RMB       1
                      (   /dd/defs/os9.d):01032         
                      (   /dd/defs/os9.d):01033         
                      (   /dd/defs/os9.d):01034         *
                      (   /dd/defs/os9.d):01035         * Standard NitrOS-9 Error Codes
                      (   /dd/defs/os9.d):01036         *
                      (   /dd/defs/os9.d):01037                        ORG       200
00C8                  (   /dd/defs/os9.d):01038         E$PthFul       RMB       1                   Path Table full
00C9                  (   /dd/defs/os9.d):01039         E$BPNum        RMB       1                   Bad Path Number
00CA                  (   /dd/defs/os9.d):01040         E$Poll         RMB       1                   Polling Table Full
00CB                  (   /dd/defs/os9.d):01041         E$BMode        RMB       1                   Bad Mode
00CC                  (   /dd/defs/os9.d):01042         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (   /dd/defs/os9.d):01043         E$BMID         RMB       1                   Bad Module ID
00CE                  (   /dd/defs/os9.d):01044         E$DirFul       RMB       1                   Module Directory Full
00CF                  (   /dd/defs/os9.d):01045         E$MemFul       RMB       1                   Process Memory Full
00D0                  (   /dd/defs/os9.d):01046         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (   /dd/defs/os9.d):01047         E$ModBsy       RMB       1                   Module Busy
00D2                  (   /dd/defs/os9.d):01048         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (   /dd/defs/os9.d):01049         E$EOF          RMB       1                   End of File
00D4                  (   /dd/defs/os9.d):01050                        RMB       1
00D5                  (   /dd/defs/os9.d):01051         E$NES          RMB       1                   Non-Existing Segment
00D6                  (   /dd/defs/os9.d):01052         E$FNA          RMB       1                   File Not Accesible
00D7                  (   /dd/defs/os9.d):01053         E$BPNam        RMB       1                   Bad Path Name
00D8                  (   /dd/defs/os9.d):01054         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (   /dd/defs/os9.d):01055         E$SLF          RMB       1                   Segment List Full
00DA                  (   /dd/defs/os9.d):01056         E$CEF          RMB       1                   Creating Existing File
00DB                  (   /dd/defs/os9.d):01057         E$IBA          RMB       1                   Illegal Block Address
00DC                  (   /dd/defs/os9.d):01058         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (   /dd/defs/os9.d):01059         E$MNF          RMB       1                   Module Not Found
00DE                  (   /dd/defs/os9.d):01060                        RMB       1
00DF                  (   /dd/defs/os9.d):01061         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (   /dd/defs/os9.d):01062         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (   /dd/defs/os9.d):01063         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (   /dd/defs/os9.d):01064                        RMB       1
00E2                  (   /dd/defs/os9.d):01065         E$NoChld       RMB       1                   No Children
00E3                  (   /dd/defs/os9.d):01066         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (   /dd/defs/os9.d):01067         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (   /dd/defs/os9.d):01068         E$PrcFul       RMB       1                   Process Table Full
00E6                  (   /dd/defs/os9.d):01069         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (   /dd/defs/os9.d):01070         E$KwnMod       RMB       1                   Known Module
00E8                  (   /dd/defs/os9.d):01071         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (   /dd/defs/os9.d):01072         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (   /dd/defs/os9.d):01073         E$NEMod        RMB       1                   Non Existing Module
00EB                  (   /dd/defs/os9.d):01074         E$BNam         RMB       1                   Bad Name
00EC                  (   /dd/defs/os9.d):01075         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (   /dd/defs/os9.d):01076         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (   /dd/defs/os9.d):01077         E$DNE          RMB       1                   Directory not empty
00EF                  (   /dd/defs/os9.d):01078         E$NoTask       RMB       1                   No available Task number
                      (   /dd/defs/os9.d):01079                        RMB       $F0-.               reserved
00F0                  (   /dd/defs/os9.d):01080         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (   /dd/defs/os9.d):01081         E$Sect         RMB       1                   Bad Sector number
00F2                  (   /dd/defs/os9.d):01082         E$WP           RMB       1                   Write Protect
00F3                  (   /dd/defs/os9.d):01083         E$CRC          RMB       1                   Bad Check Sum
00F4                  (   /dd/defs/os9.d):01084         E$Read         RMB       1                   Read Error
00F5                  (   /dd/defs/os9.d):01085         E$Write        RMB       1                   Write Error
00F6                  (   /dd/defs/os9.d):01086         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (   /dd/defs/os9.d):01087         E$Seek         RMB       1                   Seek Error
00F8                  (   /dd/defs/os9.d):01088         E$Full         RMB       1                   Media Full
00F9                  (   /dd/defs/os9.d):01089         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (   /dd/defs/os9.d):01090         E$DevBsy       RMB       1                   Device Busy
00FB                  (   /dd/defs/os9.d):01091         E$DIDC         RMB       1                   Disk ID Change
00FC                  (   /dd/defs/os9.d):01092         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (   /dd/defs/os9.d):01093         E$Share        RMB       1                   Non-sharable file busy
00FE                  (   /dd/defs/os9.d):01094         E$DeadLk       RMB       1                   I/O Deadlock error
                      (   /dd/defs/os9.d):01095         
                      (   /dd/defs/os9.d):01096         
                      (   /dd/defs/os9.d):01097         ***************************
                      (   /dd/defs/os9.d):01098         * Level 3 Defs
                      (   /dd/defs/os9.d):01099         *
                      (   /dd/defs/os9.d):01100         * These definitions apply to NitrOS-9 Level 3
                      (   /dd/defs/os9.d):01101         *
                      (   /dd/defs/os9.d):01102         
                      ( /dd/defs/deffile):00006                  use   /dd/defs/rbf.d
                      (   /dd/defs/rbf.d):00001         ********************************************************************
                      (   /dd/defs/rbf.d):00002         * rbf.d - Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00003         *
                      (   /dd/defs/rbf.d):00004         * $Id$
                      (   /dd/defs/rbf.d):00005         *
                      (   /dd/defs/rbf.d):00006         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (   /dd/defs/rbf.d):00007         * that define the logical structure of a disk and allows access to the files
                      (   /dd/defs/rbf.d):00008         * in that structure.
                      (   /dd/defs/rbf.d):00009         *
                      (   /dd/defs/rbf.d):00010         * The data structures in this file give RBF its 'personality' and are used
                      (   /dd/defs/rbf.d):00011         * by RBF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/rbf.d):00012         *
                      (   /dd/defs/rbf.d):00013         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/rbf.d):00014         * Comment
                      (   /dd/defs/rbf.d):00015         * ------------------------------------------------------------------
                      (   /dd/defs/rbf.d):00016         *          1982/07/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00017         * PD.Exten added to path descriptor and PE Entries defined.
                      (   /dd/defs/rbf.d):00018         *
                      (   /dd/defs/rbf.d):00019         *          1982/07/15  Robert F. Doggett
                      (   /dd/defs/rbf.d):00020         * V.FileHd inserted in driver static storage.
                      (   /dd/defs/rbf.d):00021         *
                      (   /dd/defs/rbf.d):00022         *          1982/09/10  WGP
                      (   /dd/defs/rbf.d):00023         * Level One/Level Two condionals added.
                      (   /dd/defs/rbf.d):00024         *
                      (   /dd/defs/rbf.d):00025         *          1982/09/17  WGP
                      (   /dd/defs/rbf.d):00026         *
                      (   /dd/defs/rbf.d):00027         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00028         * PD.SLE renamed to PD.Creat.
                      (   /dd/defs/rbf.d):00029         *
                      (   /dd/defs/rbf.d):00030         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00031         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (   /dd/defs/rbf.d):00032         *
                      (   /dd/defs/rbf.d):00033         *          1982/09/20  Robert F. Doggett
                      (   /dd/defs/rbf.d):00034         * Reserved areas added in static storage.
                      (   /dd/defs/rbf.d):00035         
                      (   /dd/defs/rbf.d):00036         *          1983/06/07  Robert F. Doggett
                      (   /dd/defs/rbf.d):00037         * Added InDriver flag in PD.SMF.
                      (   /dd/defs/rbf.d):00038         *
                      (   /dd/defs/rbf.d):00039         *          1983/06/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00040         * Added PE.Req tmp save for PE.Lock.
                      (   /dd/defs/rbf.d):00041         *
                      (   /dd/defs/rbf.d):00042         *          1983/08/08  Robert F. Doggett
                      (   /dd/defs/rbf.d):00043         * Reserved PD.SToff for Japanese.
                      (   /dd/defs/rbf.d):00044         *
                      (   /dd/defs/rbf.d):00045         *          1983/11/19  Robert F. Doggett
                      (   /dd/defs/rbf.d):00046         * Added V.ResBit in drive tables.
                      (   /dd/defs/rbf.d):00047         *
                      (   /dd/defs/rbf.d):00048         *          1983/12/12  Robert F. Doggett
                      (   /dd/defs/rbf.d):00049         * Added PE.Prior to save process priority.
                      (   /dd/defs/rbf.d):00050         *
                      (   /dd/defs/rbf.d):00051         *          1983/12/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00052         * Added BufBusy bit in state flag (PD.SMF).
                      (   /dd/defs/rbf.d):00053         *
                      (   /dd/defs/rbf.d):00054         *          1984/07/06  Mark G. Hawkins
                      (   /dd/defs/rbf.d):00055         * Added Bit Definitions for DD.FMT.
                      (   /dd/defs/rbf.d):00056         *
                      (   /dd/defs/rbf.d):00057         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/rbf.d):00058         * Updated with Dev Desc Info
                      (   /dd/defs/rbf.d):00059         *
                      (   /dd/defs/rbf.d):00060         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00061         * Updated comments for clarity.
                      (   /dd/defs/rbf.d):00062         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (   /dd/defs/rbf.d):00063         *
                      (   /dd/defs/rbf.d):00064         *          2004/04/14  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00065         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (   /dd/defs/rbf.d):00066         * addendum.  Pointed out by Rodney Hamilton.
                      (   /dd/defs/rbf.d):00067         *
                      (   /dd/defs/rbf.d):00068         *          2005/05/31  P.Harvey-Smith.
                      (   /dd/defs/rbf.d):00069         * Added defines for bit 2 of IT.DNS, which the format command uses to
                      (   /dd/defs/rbf.d):00070         * determine if a drive should have it's track 0 as single or double density
                      (   /dd/defs/rbf.d):00071         *
                      (   /dd/defs/rbf.d):00072         *          2005/11/23  Robert Gault
                      (   /dd/defs/rbf.d):00073         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (   /dd/defs/rbf.d):00074         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (   /dd/defs/rbf.d):00075         *
                      (   /dd/defs/rbf.d):00076         *          2005/12/11  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00077         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (   /dd/defs/rbf.d):00078         
                      (   /dd/defs/rbf.d):00079                        NAM       rbf.d
                      (   /dd/defs/rbf.d):00080                        TTL       Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00081         
                      (   /dd/defs/rbf.d):00082                        PAG
                      (   /dd/defs/rbf.d):00083         *******************************
                      (   /dd/defs/rbf.d):00084         * RBF Device Descriptor Offsets
                      (   /dd/defs/rbf.d):00085         *
                      (   /dd/defs/rbf.d):00086         * These definitions are for RBF device descriptors.
                      (   /dd/defs/rbf.d):00087         
                      (   /dd/defs/rbf.d):00088                        ORG       M$DTyp
0012                  (   /dd/defs/rbf.d):00089                        RMB       1                   Device type (DT.RBF)
0013                  (   /dd/defs/rbf.d):00090         IT.DRV         RMB       1                   Drive number
0014                  (   /dd/defs/rbf.d):00091         IT.STP         RMB       1                   Step rate
0015                  (   /dd/defs/rbf.d):00092         IT.TYP         RMB       1                   Disk device type information
0016                  (   /dd/defs/rbf.d):00093         IT.DNS         RMB       1                   Density capability
0017                  (   /dd/defs/rbf.d):00094         IT.CYL         RMB       2                   Number of cylinders
0019                  (   /dd/defs/rbf.d):00095         IT.SID         RMB       1                   Number of surfaces
001A                  (   /dd/defs/rbf.d):00096         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (   /dd/defs/rbf.d):00097         IT.SCT         RMB       2                   Default sectors/track
001D                  (   /dd/defs/rbf.d):00098         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (   /dd/defs/rbf.d):00099         IT.ILV         RMB       1                   Sector interleave offset
0020                  (   /dd/defs/rbf.d):00100         IT.SAS         RMB       1                   Segment allocation size
                      (   /dd/defs/rbf.d):00101         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (   /dd/defs/rbf.d):00102         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (   /dd/defs/rbf.d):00103         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (   /dd/defs/rbf.d):00104         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (   /dd/defs/rbf.d):00105         * The following fields are not copied to the path descriptor
0025                  (   /dd/defs/rbf.d):00106         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (   /dd/defs/rbf.d):00107         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (   /dd/defs/rbf.d):00108         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (   /dd/defs/rbf.d):00109         * These fields have been added because of SuperDriver.  They probably
                      (   /dd/defs/rbf.d):00110         * can be used in other drivers
                      (   /dd/defs/rbf.d):00111                        ORG       IT.WPC
0025                  (   /dd/defs/rbf.d):00112         IT.SOFF1       RMB       1
0026                  (   /dd/defs/rbf.d):00113         IT.SOFF2       RMB       1
0027                  (   /dd/defs/rbf.d):00114         IT.SOFF3       RMB       1
0028                  (   /dd/defs/rbf.d):00115         IT.LLDRV       RMB       2
002A                  (   /dd/defs/rbf.d):00116         IT.MPI         RMB       1
                      (   /dd/defs/rbf.d):00117         
                      (   /dd/defs/rbf.d):00118         
                      (   /dd/defs/rbf.d):00119         * IT.TYP Definitions
                      (   /dd/defs/rbf.d):00120         *
     0080             (   /dd/defs/rbf.d):00121         TYP.HARD       EQU       %10000000           Hard disk
     0000             (   /dd/defs/rbf.d):00122         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (   /dd/defs/rbf.d):00123         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (   /dd/defs/rbf.d):00124         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (   /dd/defs/rbf.d):00125         
                      (   /dd/defs/rbf.d):00126         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (   /dd/defs/rbf.d):00127         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (   /dd/defs/rbf.d):00128         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (   /dd/defs/rbf.d):00129         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (   /dd/defs/rbf.d):00130         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (   /dd/defs/rbf.d):00131         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (   /dd/defs/rbf.d):00132         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (   /dd/defs/rbf.d):00133         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (   /dd/defs/rbf.d):00134         
                      (   /dd/defs/rbf.d):00135         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00136         TYP.5          EQU       %00000000           5" media
     0001             (   /dd/defs/rbf.d):00137         TYP.3          EQU       %00000001           3.5" media
     0002             (   /dd/defs/rbf.d):00138         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (   /dd/defs/rbf.d):00139         TYP.256        EQU       %00000000           256 byte sector media
     0004             (   /dd/defs/rbf.d):00140         TYP.512        EQU       %00000100           512 byte sector media
     0020             (   /dd/defs/rbf.d):00141         TYP.CCF        EQU       %00100000           CoCo format
     0000             (   /dd/defs/rbf.d):00142         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (   /dd/defs/rbf.d):00143         
                      (   /dd/defs/rbf.d):00144         * IT.DNS Definitions
                      (   /dd/defs/rbf.d):00145         *
                      (   /dd/defs/rbf.d):00146         
                      (   /dd/defs/rbf.d):00147         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (   /dd/defs/rbf.d):00148         
                      (   /dd/defs/rbf.d):00149         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00150         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (   /dd/defs/rbf.d):00151         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (   /dd/defs/rbf.d):00152         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (   /dd/defs/rbf.d):00153         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (   /dd/defs/rbf.d):00154         
                      (   /dd/defs/rbf.d):00155         * Added PHS,2005-05-31, as format seems to use these
     0000             (   /dd/defs/rbf.d):00156         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (   /dd/defs/rbf.d):00157         DNS.MFM0       EQU       %00000100           Double density track 0
                      (   /dd/defs/rbf.d):00158         
                      (   /dd/defs/rbf.d):00159         * Floppy disk step rate definitions
     0000             (   /dd/defs/rbf.d):00160         STP.30ms       EQU       0                   30ms step rate
     0001             (   /dd/defs/rbf.d):00161         STP.20ms       EQU       1                   20ms step rate
     0002             (   /dd/defs/rbf.d):00162         STP.12ms       EQU       2                   12ms step rate
     0003             (   /dd/defs/rbf.d):00163         STP.6ms        EQU       3                   6ms step rate
                      (   /dd/defs/rbf.d):00164         
                      (   /dd/defs/rbf.d):00165                        PAG
                      (   /dd/defs/rbf.d):00166         *************************************
                      (   /dd/defs/rbf.d):00167         * Random Block Path Descriptor Format
                      (   /dd/defs/rbf.d):00168         *
                      (   /dd/defs/rbf.d):00169         * A path descriptor is created for every new path that is open
                      (   /dd/defs/rbf.d):00170         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/rbf.d):00171         * descriptors track state information of a path.
                      (   /dd/defs/rbf.d):00172         *
                      (   /dd/defs/rbf.d):00173                        ORG       PD.FST
000A                  (   /dd/defs/rbf.d):00174         PD.SMF         RMB       1                   State flags
000B                  (   /dd/defs/rbf.d):00175         PD.CP          RMB       4                   Current logical byte position
000F                  (   /dd/defs/rbf.d):00176         PD.SIZ         RMB       4                   File size
0013                  (   /dd/defs/rbf.d):00177         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (   /dd/defs/rbf.d):00178         PD.SBP         RMB       3                   Segment beginning psn
0019                  (   /dd/defs/rbf.d):00179         PD.SSZ         RMB       3                   Segment size
001C                  (   /dd/defs/rbf.d):00180         PD.DSK         RMB       2                   Disk id
001E                  (   /dd/defs/rbf.d):00181         PD.DTB         RMB       2                   Drive table ptr
                      (   /dd/defs/rbf.d):00182                        ORG       PD.OPT
0020                  (   /dd/defs/rbf.d):00183                        RMB       1                   Device type
0021                  (   /dd/defs/rbf.d):00184         PD.DRV         RMB       1                   Drive number
0022                  (   /dd/defs/rbf.d):00185         PD.STP         RMB       1                   Step rate
0023                  (   /dd/defs/rbf.d):00186         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (   /dd/defs/rbf.d):00187         PD.DNS         RMB       1                   Density capability
0025                  (   /dd/defs/rbf.d):00188         PD.CYL         RMB       2                   Number of cylinders
0027                  (   /dd/defs/rbf.d):00189         PD.SID         RMB       1                   Number of surfaces
0028                  (   /dd/defs/rbf.d):00190         PD.VFY         RMB       1                   0=verify disk writes
0029                  (   /dd/defs/rbf.d):00191         PD.SCT         RMB       2                   Default sectors/track
002B                  (   /dd/defs/rbf.d):00192         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (   /dd/defs/rbf.d):00193         PD.ILV         RMB       1                   Sector interleave offset
002E                  (   /dd/defs/rbf.d):00194         PD.SAS         RMB       1                   Segment allocation size
002F                  (   /dd/defs/rbf.d):00195         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (   /dd/defs/rbf.d):00196         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (   /dd/defs/rbf.d):00197         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (   /dd/defs/rbf.d):00198         PD.ATT         RMB       1                   File attributes
0034                  (   /dd/defs/rbf.d):00199         PD.FD          RMB       3                   File descriptor psn
0037                  (   /dd/defs/rbf.d):00200         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (   /dd/defs/rbf.d):00201         PD.DCP         RMB       4                   File directory entry ptr
003E                  (   /dd/defs/rbf.d):00202         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (   /dd/defs/rbf.d):00203         
                      (   /dd/defs/rbf.d):00204         * State Flags
     0001             (   /dd/defs/rbf.d):00205         BUFMOD         EQU       $01                 Buffer modified
     0002             (   /dd/defs/rbf.d):00206         SINBUF         EQU       $02                 Sector in buffer
     0004             (   /dd/defs/rbf.d):00207         FDBUF          EQU       $04                 File descriptor in buffer
                      (   /dd/defs/rbf.d):00208         *EOFSEC equ $08 End of file sector
                      (   /dd/defs/rbf.d):00209         *EOF equ $10 End of file
     0020             (   /dd/defs/rbf.d):00210         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (   /dd/defs/rbf.d):00211         BufBusy        EQU       $40                 Buffer is currently busy
                      (   /dd/defs/rbf.d):00212         
                      (   /dd/defs/rbf.d):00213         ************************************
                      (   /dd/defs/rbf.d):00214         * Random Block Path Extension Format
                      (   /dd/defs/rbf.d):00215         *
                      (   /dd/defs/rbf.d):00216         * RBF paths under Level Two have additional information that
                      (   /dd/defs/rbf.d):00217         * is referenced by the path extension area.
                      (   /dd/defs/rbf.d):00218         *
                      (   /dd/defs/rbf.d):00219                        ORG       0
0000                  (   /dd/defs/rbf.d):00220         PE.PE          RMB       1                   PE path number
0001                  (   /dd/defs/rbf.d):00221         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (   /dd/defs/rbf.d):00222         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (   /dd/defs/rbf.d):00223         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (   /dd/defs/rbf.d):00224         PE.Lock        RMB       1                   Path lockout status
0008                  (   /dd/defs/rbf.d):00225         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (   /dd/defs/rbf.d):00226         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (   /dd/defs/rbf.d):00227         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (   /dd/defs/rbf.d):00228         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (   /dd/defs/rbf.d):00229         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (   /dd/defs/rbf.d):00230         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (   /dd/defs/rbf.d):00231         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (   /dd/defs/rbf.d):00232         PE.SigSg       RMB       1                   Signal code to send
0018                  (   /dd/defs/rbf.d):00233         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (   /dd/defs/rbf.d):00234                        RMB       32-.                Reserved
0020                  (   /dd/defs/rbf.d):00235         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (   /dd/defs/rbf.d):00236         
                      (   /dd/defs/rbf.d):00237         * PE.Lock status codes
     0000             (   /dd/defs/rbf.d):00238         Unlocked       EQU       0                   No portion of file is locked
     0001             (   /dd/defs/rbf.d):00239         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (   /dd/defs/rbf.d):00240         FileLock       EQU       2                   Entire file locked
     0004             (   /dd/defs/rbf.d):00241         EofLock        EQU       4                   End of file is locked
                      (   /dd/defs/rbf.d):00242         
                      (   /dd/defs/rbf.d):00243         
                      (   /dd/defs/rbf.d):00244                        PAG
                      (   /dd/defs/rbf.d):00245         ***********************
                      (   /dd/defs/rbf.d):00246         * LSN0 Disk Data Format
                      (   /dd/defs/rbf.d):00247         *
                      (   /dd/defs/rbf.d):00248         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (   /dd/defs/rbf.d):00249         * and contains information about the device's size and format.
                      (   /dd/defs/rbf.d):00250         *
                      (   /dd/defs/rbf.d):00251                        ORG       0
0000                  (   /dd/defs/rbf.d):00252         DD.TOT         RMB       3                   Total number of sectors
0003                  (   /dd/defs/rbf.d):00253         DD.TKS         RMB       1                   Track size in sectors
0004                  (   /dd/defs/rbf.d):00254         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (   /dd/defs/rbf.d):00255         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (   /dd/defs/rbf.d):00256         DD.DIR         RMB       3                   Address of root directory fd
000B                  (   /dd/defs/rbf.d):00257         DD.OWN         RMB       2                   Owner
000D                  (   /dd/defs/rbf.d):00258         DD.ATT         RMB       1                   Attributes
000E                  (   /dd/defs/rbf.d):00259         DD.DSK         RMB       2                   Disk ID
0010                  (   /dd/defs/rbf.d):00260         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (   /dd/defs/rbf.d):00261         DD.SPT         RMB       2                   Sectors/track
0013                  (   /dd/defs/rbf.d):00262         DD.RES         RMB       2                   Reserved for future use
     0015             (   /dd/defs/rbf.d):00263         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (   /dd/defs/rbf.d):00264         DD.BT          RMB       3                   System bootstrap sector
0018                  (   /dd/defs/rbf.d):00265         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (   /dd/defs/rbf.d):00266         DD.DAT         RMB       5                   Creation date
001F                  (   /dd/defs/rbf.d):00267         DD.NAM         RMB       32                  Volume name
003F                  (   /dd/defs/rbf.d):00268         DD.OPT         RMB       32                  Option area
                      (   /dd/defs/rbf.d):00269         
                      (   /dd/defs/rbf.d):00270         *************************
                      (   /dd/defs/rbf.d):00271         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (   /dd/defs/rbf.d):00272                 ORG $60         More options from device descriptor
0060                  (   /dd/defs/rbf.d):00273         VD.STP      RMB 1   This is for the /sh and /ih virtual disks in HDBDOS
0061                  (   /dd/defs/rbf.d):00274         VD.OFS      RMB 3   This is DT.WPC and DT.OSF combined, might be more
                      (   /dd/defs/rbf.d):00275         
                      (   /dd/defs/rbf.d):00276         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (   /dd/defs/rbf.d):00277         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (   /dd/defs/rbf.d):00278         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (   /dd/defs/rbf.d):00279         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (   /dd/defs/rbf.d):00280         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (   /dd/defs/rbf.d):00281         
                      (   /dd/defs/rbf.d):00282         
                      (   /dd/defs/rbf.d):00283                        PAG
                      (   /dd/defs/rbf.d):00284         ************************
                      (   /dd/defs/rbf.d):00285         * File Descriptor Format
                      (   /dd/defs/rbf.d):00286         *
                      (   /dd/defs/rbf.d):00287         * The file descriptor is a sector that is present for every file
                      (   /dd/defs/rbf.d):00288         * on an RBF device.  It contains attributes, modification dates,
                      (   /dd/defs/rbf.d):00289         * and segment information on a file.
                      (   /dd/defs/rbf.d):00290         *
                      (   /dd/defs/rbf.d):00291                        ORG       0
0000                  (   /dd/defs/rbf.d):00292         FD.ATT         RMB       1                   Attributes
0001                  (   /dd/defs/rbf.d):00293         FD.OWN         RMB       2                   Owner
0003                  (   /dd/defs/rbf.d):00294         FD.DAT         RMB       5                   Date last modified
0008                  (   /dd/defs/rbf.d):00295         FD.LNK         RMB       1                   Link count
0009                  (   /dd/defs/rbf.d):00296         FD.SIZ         RMB       4                   File size
000D                  (   /dd/defs/rbf.d):00297         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (   /dd/defs/rbf.d):00298         FD.SEG         EQU       .                   Beginning of segment list
                      (   /dd/defs/rbf.d):00299         * Segment List Entry Format
                      (   /dd/defs/rbf.d):00300                        ORG       0
0000                  (   /dd/defs/rbf.d):00301         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (   /dd/defs/rbf.d):00302         FDSL.B         RMB       2                   Segment size
     0005             (   /dd/defs/rbf.d):00303         FDSL.S         EQU       .                   Segment list entry size
     00FB             (   /dd/defs/rbf.d):00304         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (   /dd/defs/rbf.d):00305         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (   /dd/defs/rbf.d):00306         MINSEC         SET       16
                      (   /dd/defs/rbf.d):00307         
                      (   /dd/defs/rbf.d):00308         
                      (   /dd/defs/rbf.d):00309                        PAG
                      (   /dd/defs/rbf.d):00310         ************************
                      (   /dd/defs/rbf.d):00311         * Directory Entry Format
                      (   /dd/defs/rbf.d):00312         *
                      (   /dd/defs/rbf.d):00313         * Directory entries are part of a directory and define the name
                      (   /dd/defs/rbf.d):00314         * of the file, as well as a pointer to its file descriptor.
                      (   /dd/defs/rbf.d):00315         *
                      (   /dd/defs/rbf.d):00316                        ORG       0
0000                  (   /dd/defs/rbf.d):00317         DIR.NM         RMB       29                  File name
001D                  (   /dd/defs/rbf.d):00318         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (   /dd/defs/rbf.d):00319         DIR.SZ         EQU       .                   Directory record size
                      (   /dd/defs/rbf.d):00320         
                      (   /dd/defs/rbf.d):00321         
                      (   /dd/defs/rbf.d):00322                        PAG
                      (   /dd/defs/rbf.d):00323         ********************
                      (   /dd/defs/rbf.d):00324         * RBF Static Storage
                      (   /dd/defs/rbf.d):00325         *
                      (   /dd/defs/rbf.d):00326         * Overall Disk Static Storage
                      (   /dd/defs/rbf.d):00327         *
                      (   /dd/defs/rbf.d):00328         * Note:  This does not reserve any memory for drive tables.  Each
                      (   /dd/defs/rbf.d):00329         *        driver is responsible for reserving sufficient memory for
                      (   /dd/defs/rbf.d):00330         *        the appropriate number of tables.
                      (   /dd/defs/rbf.d):00331         *
                      (   /dd/defs/rbf.d):00332                        ORG       V.USER              Reserve required           ($06)
0006                  (   /dd/defs/rbf.d):00333         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (   /dd/defs/rbf.d):00334                        RMB       8                   reserved                   ($08)
     000F             (   /dd/defs/rbf.d):00335         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (   /dd/defs/rbf.d):00336         
                      (   /dd/defs/rbf.d):00337                        PAG
                      (   /dd/defs/rbf.d):00338         ****************
                      (   /dd/defs/rbf.d):00339         * Global Storage For Disk Drive Tables
                      (   /dd/defs/rbf.d):00340         *
                      (   /dd/defs/rbf.d):00341         * Each table contains the first 'DD.SIZ' bytes from
                      (   /dd/defs/rbf.d):00342         * LSN 0, and the current track, stepping rate,
                      (   /dd/defs/rbf.d):00343         * bitmap use flag, and disk type.
                      (   /dd/defs/rbf.d):00344         *
                      (   /dd/defs/rbf.d):00345                        ORG       0
0000                  (   /dd/defs/rbf.d):00346                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (   /dd/defs/rbf.d):00347         V.TRAK         RMB       2                   Current track
0017                  (   /dd/defs/rbf.d):00348         V.BMB          RMB       1                   Bit-map use flag
0018                  (   /dd/defs/rbf.d):00349         V.FileHd       RMB       2                   Open file list for this drive
001A                  (   /dd/defs/rbf.d):00350         V.DiskID       RMB       2                   Disk ID
001C                  (   /dd/defs/rbf.d):00351         V.BMapSz       RMB       1                   Bitmap Size
001D                  (   /dd/defs/rbf.d):00352         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (   /dd/defs/rbf.d):00353         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (   /dd/defs/rbf.d):00354         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (   /dd/defs/rbf.d):00355         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (   /dd/defs/rbf.d):00356         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (   /dd/defs/rbf.d):00357                        RMB       4                   Reserved
     0026             (   /dd/defs/rbf.d):00358         DRVMEM         EQU       .
                      (   /dd/defs/rbf.d):00359         
                      (   /dd/defs/rbf.d):00360         
                      ( /dd/defs/deffile):00007                  use   /dd/defs/scf.d
                      (   /dd/defs/scf.d):00001         ********************************************************************
                      (   /dd/defs/scf.d):00002         * scf.d - Sequential Character File Manager Definitions
                      (   /dd/defs/scf.d):00003         *
                      (   /dd/defs/scf.d):00004         * $Id$
                      (   /dd/defs/scf.d):00005         *
                      (   /dd/defs/scf.d):00006         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (   /dd/defs/scf.d):00007         * that define the logical structure of a serial device.
                      (   /dd/defs/scf.d):00008         *
                      (   /dd/defs/scf.d):00009         * The data structures in this file give SCF its 'personality' and are used
                      (   /dd/defs/scf.d):00010         * by SCF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/scf.d):00011         *
                      (   /dd/defs/scf.d):00012         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/scf.d):00013         * Comment
                      (   /dd/defs/scf.d):00014         * ------------------------------------------------------------------
                      (   /dd/defs/scf.d):00015         *          1984/01/11  YO
                      (   /dd/defs/scf.d):00016         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (   /dd/defs/scf.d):00017         *
                      (   /dd/defs/scf.d):00018         *          1985/04/20  Mark G. Hawkins
                      (   /dd/defs/scf.d):00019         * Added V.PDLHd Path Descriptor List Head.
                      (   /dd/defs/scf.d):00020         *
                      (   /dd/defs/scf.d):00021         *          1985/04/21  Mark G. Hawkins
                      (   /dd/defs/scf.d):00022         * Added PD.PLP and PD.PST for modem handling.
                      (   /dd/defs/scf.d):00023         *
                      (   /dd/defs/scf.d):00024         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/scf.d):00025         * Updated with Dev Desc info.
                      (   /dd/defs/scf.d):00026         *
                      (   /dd/defs/scf.d):00027         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/scf.d):00028         * Consolidated L1/L2 scfdefs.
                      (   /dd/defs/scf.d):00029         *
                      (   /dd/defs/scf.d):00030         *          2003/01/21  Boisy G. Pitre
                      (   /dd/defs/scf.d):00031         * Added symbolics for enhanced SCF line editing.
                      (   /dd/defs/scf.d):00032         *
                      (   /dd/defs/scf.d):00033         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/scf.d):00034         * Updated comments for clarity.
                      (   /dd/defs/scf.d):00035         *
                      (   /dd/defs/scf.d):00036         *          2004/05/17  Boisy G. Pitre
                      (   /dd/defs/scf.d):00037         * Added higher baud rates.
                      (   /dd/defs/scf.d):00038         
                      (   /dd/defs/scf.d):00039                        NAM       scf.d
                      (   /dd/defs/scf.d):00040                        TTL       Sequential File Manager Definitions
                      (   /dd/defs/scf.d):00041         
                      (   /dd/defs/scf.d):00042                        PAG
                      (   /dd/defs/scf.d):00043         *******************************
                      (   /dd/defs/scf.d):00044         * SCF Device Descriptor Offsets
                      (   /dd/defs/scf.d):00045         *
                      (   /dd/defs/scf.d):00046         * These definitions are for SCF device descriptors.
                      (   /dd/defs/scf.d):00047         
                      (   /dd/defs/scf.d):00048                        ORG       M$DTyp
0012                  (   /dd/defs/scf.d):00049         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (   /dd/defs/scf.d):00050         IT.UPC         RMB       1                   Uppercase flag
0014                  (   /dd/defs/scf.d):00051         IT.BSO         RMB       1                   Backspace behavior
0015                  (   /dd/defs/scf.d):00052         IT.DLO         RMB       1                   Delete behavior
0016                  (   /dd/defs/scf.d):00053         IT.EKO         RMB       1                   Echo flag
0017                  (   /dd/defs/scf.d):00054         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (   /dd/defs/scf.d):00055         IT.NUL         RMB       1                   End-of-line null count
0019                  (   /dd/defs/scf.d):00056         IT.PAU         RMB       1                   Page pause flag
001A                  (   /dd/defs/scf.d):00057         IT.PAG         RMB       1                   Number of lines per page
001B                  (   /dd/defs/scf.d):00058         IT.BSP         RMB       1                   Backspace character
001C                  (   /dd/defs/scf.d):00059         IT.DEL         RMB       1                   Delete-line character
001D                  (   /dd/defs/scf.d):00060         IT.EOR         RMB       1                   End-of-record character
001E                  (   /dd/defs/scf.d):00061         IT.EOF         RMB       1                   End-of-file character
001F                  (   /dd/defs/scf.d):00062         IT.RPR         RMB       1                   Reprint-line character
0020                  (   /dd/defs/scf.d):00063         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (   /dd/defs/scf.d):00064         IT.PSC         RMB       1                   Pause character
0022                  (   /dd/defs/scf.d):00065         IT.INT         RMB       1                   Interrupt character
0023                  (   /dd/defs/scf.d):00066         IT.QUT         RMB       1                   Quit character
0024                  (   /dd/defs/scf.d):00067         IT.BSE         RMB       1                   Backspace echo character
0025                  (   /dd/defs/scf.d):00068         IT.OVF         RMB       1                   Bell character
0026                  (   /dd/defs/scf.d):00069         IT.PAR         RMB       1                   Parity
0027                  (   /dd/defs/scf.d):00070         IT.BAU         RMB       1                   Baud rate
0028                  (   /dd/defs/scf.d):00071         IT.D2P         RMB       2                   Attached device name string offset
002A                  (   /dd/defs/scf.d):00072         IT.XON         RMB       1                   X-ON character
002B                  (   /dd/defs/scf.d):00073         IT.XOFF        RMB       1                   X-OFF character
002C                  (   /dd/defs/scf.d):00074         IT.COL         RMB       1                   Number of columns for display
002D                  (   /dd/defs/scf.d):00075         IT.ROW         RMB       1                   Number of rows for display
002E                  (   /dd/defs/scf.d):00076         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (   /dd/defs/scf.d):00077         
                      (   /dd/defs/scf.d):00078         * Window Descriptor Additions
                      (   /dd/defs/scf.d):00079         * For CoCo window, where IT.PAR = $80
                      (   /dd/defs/scf.d):00080                        ORG       IT.ROW+1
002E                  (   /dd/defs/scf.d):00081         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (   /dd/defs/scf.d):00082         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (   /dd/defs/scf.d):00083         IT.STY         RMB       1                   Screen type default
0031                  (   /dd/defs/scf.d):00084         IT.CPX         RMB       1                   Column start default
0032                  (   /dd/defs/scf.d):00085         IT.CPY         RMB       1                   Row start default
0033                  (   /dd/defs/scf.d):00086         IT.FGC         RMB       1                   Foreground color default
0034                  (   /dd/defs/scf.d):00087         IT.BGC         RMB       1                   Background color default
0035                  (   /dd/defs/scf.d):00088         IT.BDC         RMB       1                   Border color default
                      (   /dd/defs/scf.d):00089         
                      (   /dd/defs/scf.d):00090         
                      (   /dd/defs/scf.d):00091                        PAG
                      (   /dd/defs/scf.d):00092         ********************
                      (   /dd/defs/scf.d):00093         * SCF Static Storage
                      (   /dd/defs/scf.d):00094         *
                      (   /dd/defs/scf.d):00095         * SCF devices must reserve this space for SCF
                      (   /dd/defs/scf.d):00096         *
                      (   /dd/defs/scf.d):00097                        ORG       V.USER
0006                  (   /dd/defs/scf.d):00098         V.TYPE         RMB       1                   Device type or parity
0007                  (   /dd/defs/scf.d):00099         V.LINE         RMB       1                   Lines left until end of page
0008                  (   /dd/defs/scf.d):00100         V.PAUS         RMB       1                   Immediate Pause request
0009                  (   /dd/defs/scf.d):00101         V.DEV2         RMB       2                   Attached device's static
000B                  (   /dd/defs/scf.d):00102         V.INTR         RMB       1                   Interrupt char
000C                  (   /dd/defs/scf.d):00103         V.QUIT         RMB       1                   Quit char
000D                  (   /dd/defs/scf.d):00104         V.PCHR         RMB       1                   Pause char
000E                  (   /dd/defs/scf.d):00105         V.ERR          RMB       1                   Accumulated errors
000F                  (   /dd/defs/scf.d):00106         V.XON          RMB       1                   X-On char
0010                  (   /dd/defs/scf.d):00107         V.XOFF         RMB       1                   X-Off char
0011                  (   /dd/defs/scf.d):00108         V.KANJI        RMB       1                   Kanji mode flag
0012                  (   /dd/defs/scf.d):00109         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (   /dd/defs/scf.d):00110         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (   /dd/defs/scf.d):00111         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (   /dd/defs/scf.d):00112         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (   /dd/defs/scf.d):00113         V.SCF          EQU       .                   Total SCF manager static overhead
                      (   /dd/defs/scf.d):00114         
                      (   /dd/defs/scf.d):00115         
                      (   /dd/defs/scf.d):00116                        PAG
                      (   /dd/defs/scf.d):00117         ***********************
                      (   /dd/defs/scf.d):00118         * Character Definitions
                      (   /dd/defs/scf.d):00119         *
     0000             (   /dd/defs/scf.d):00120         C$NULL         SET       0                   Null char
     0001             (   /dd/defs/scf.d):00121         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (   /dd/defs/scf.d):00122         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (   /dd/defs/scf.d):00123         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (   /dd/defs/scf.d):00124         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (   /dd/defs/scf.d):00125         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (   /dd/defs/scf.d):00126         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (   /dd/defs/scf.d):00127         C$RARR         SET       $09                 Right Arrow
     0005             (   /dd/defs/scf.d):00128         C$EL           SET       $05                 Erase Line
     000A             (   /dd/defs/scf.d):00129         C$LF           SET       $0A                 Line feed
     000B             (   /dd/defs/scf.d):00130         C$HOME         SET       $0B                 Home position Code
     0015             (   /dd/defs/scf.d):00131         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (   /dd/defs/scf.d):00132         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (   /dd/defs/scf.d):00133         C$CR           SET       $0D                 Carriage return
     000C             (   /dd/defs/scf.d):00134         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (   /dd/defs/scf.d):00135         C$SI           SET       $0F                 Shift IN Code
     000E             (   /dd/defs/scf.d):00136         C$SO           SET       $0E                 Shift OUT Code
     0010             (   /dd/defs/scf.d):00137         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (   /dd/defs/scf.d):00138         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (   /dd/defs/scf.d):00139         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (   /dd/defs/scf.d):00140         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (   /dd/defs/scf.d):00141         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (   /dd/defs/scf.d):00142         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (   /dd/defs/scf.d):00143         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (   /dd/defs/scf.d):00144         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (   /dd/defs/scf.d):00145         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (   /dd/defs/scf.d):00146         C$RGT          SET       $1C                 Cursor right
     001D             (   /dd/defs/scf.d):00147         C$LFT          SET       $1D                 Cursor left
     001E             (   /dd/defs/scf.d):00148         C$UP           SET       $1E                 Cursor up
     001F             (   /dd/defs/scf.d):00149         C$DWN          SET       $1F                 Cursor down
     0020             (   /dd/defs/scf.d):00150         C$SPAC         SET       $20                 Space
     002E             (   /dd/defs/scf.d):00151         C$PERD         SET       '.
     002C             (   /dd/defs/scf.d):00152         C$COMA         SET       ',
                      (   /dd/defs/scf.d):00153         
                      (   /dd/defs/scf.d):00154         
                      (   /dd/defs/scf.d):00155                        PAG
                      (   /dd/defs/scf.d):00156         *********************************************
                      (   /dd/defs/scf.d):00157         * Sequential Character Path Descriptor Format
                      (   /dd/defs/scf.d):00158         *
                      (   /dd/defs/scf.d):00159         * A path descriptor is created for every new path that is open
                      (   /dd/defs/scf.d):00160         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/scf.d):00161         * descriptors track state information of a path.
                      (   /dd/defs/scf.d):00162         *
                      (   /dd/defs/scf.d):00163                        ORG       PD.FST
000A                  (   /dd/defs/scf.d):00164         PD.DV2         RMB       2                   Output device table pointer
000C                  (   /dd/defs/scf.d):00165         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (   /dd/defs/scf.d):00166         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (   /dd/defs/scf.d):00167         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (   /dd/defs/scf.d):00168         PD.STS         RMB       2                   Status routine module addr
0012                  (   /dd/defs/scf.d):00169         PD.STM         RMB       2                   Reserved for status routine
                      (   /dd/defs/scf.d):00170                        ORG       PD.OPT
0020                  (   /dd/defs/scf.d):00171                        RMB       1                   Device type
0021                  (   /dd/defs/scf.d):00172         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (   /dd/defs/scf.d):00173         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (   /dd/defs/scf.d):00174         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (   /dd/defs/scf.d):00175         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (   /dd/defs/scf.d):00176         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (   /dd/defs/scf.d):00177         PD.NUL         RMB       1                   End of Line null count
0027                  (   /dd/defs/scf.d):00178         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (   /dd/defs/scf.d):00179         PD.PAG         RMB       1                   Lines per page
0029                  (   /dd/defs/scf.d):00180         PD.BSP         RMB       1                   Backspace character
002A                  (   /dd/defs/scf.d):00181         PD.DEL         RMB       1                   Delete Line character
002B                  (   /dd/defs/scf.d):00182         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (   /dd/defs/scf.d):00183         PD.EOF         RMB       1                   End of File character
002D                  (   /dd/defs/scf.d):00184         PD.RPR         RMB       1                   Repront Line character
002E                  (   /dd/defs/scf.d):00185         PD.DUP         RMB       1                   Dup Last Line character
002F                  (   /dd/defs/scf.d):00186         PD.PSC         RMB       1                   Pause character
0030                  (   /dd/defs/scf.d):00187         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (   /dd/defs/scf.d):00188         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (   /dd/defs/scf.d):00189         PD.BSE         RMB       1                   Backspace echo character
0033                  (   /dd/defs/scf.d):00190         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (   /dd/defs/scf.d):00191         PD.PAR         RMB       1                   Parity code
0035                  (   /dd/defs/scf.d):00192         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (   /dd/defs/scf.d):00193         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (   /dd/defs/scf.d):00194         PD.XON         RMB       1                   ACIA X-ON character
0039                  (   /dd/defs/scf.d):00195         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (   /dd/defs/scf.d):00196         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (   /dd/defs/scf.d):00197         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (   /dd/defs/scf.d):00198         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (   /dd/defs/scf.d):00199         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (   /dd/defs/scf.d):00200         PD.PST         RMB       1                   Current path status
                      (   /dd/defs/scf.d):00201         
                      (   /dd/defs/scf.d):00202         
                      (   /dd/defs/scf.d):00203         * PD.PST values Path Descriptor Status byte
                      (   /dd/defs/scf.d):00204         *
     0001             (   /dd/defs/scf.d):00205         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (   /dd/defs/scf.d):00206         
                      (   /dd/defs/scf.d):00207         
                      (   /dd/defs/scf.d):00208         * PD.PAR definitions
                      (   /dd/defs/scf.d):00209         *
                      (   /dd/defs/scf.d):00210         * Parity
     0000             (   /dd/defs/scf.d):00211         PARNONE        EQU       %00000000
     0020             (   /dd/defs/scf.d):00212         PARODD         EQU       %00100000
     0060             (   /dd/defs/scf.d):00213         PAREVEN        EQU       %01100000
     00A0             (   /dd/defs/scf.d):00214         PARMARK        EQU       %10100000
     00E0             (   /dd/defs/scf.d):00215         PARSPACE       EQU       %11100000
     00E0             (   /dd/defs/scf.d):00216         PARMASK        EQU       %11100000
                      (   /dd/defs/scf.d):00217         
                      (   /dd/defs/scf.d):00218         * PD.BAU definitions
                      (   /dd/defs/scf.d):00219         *
                      (   /dd/defs/scf.d):00220         * Baud rate
     0000             (   /dd/defs/scf.d):00221         B110           EQU       %00000000
     0001             (   /dd/defs/scf.d):00222         B300           EQU       %00000001
     0002             (   /dd/defs/scf.d):00223         B600           EQU       %00000010
     0003             (   /dd/defs/scf.d):00224         B1200          EQU       %00000011
     0004             (   /dd/defs/scf.d):00225         B2400          EQU       %00000100
     0005             (   /dd/defs/scf.d):00226         B4800          EQU       %00000101
     0006             (   /dd/defs/scf.d):00227         B9600          EQU       %00000110
     0007             (   /dd/defs/scf.d):00228         B19200         EQU       %00000111
     0008             (   /dd/defs/scf.d):00229         B38400         EQU       %00001000
     0009             (   /dd/defs/scf.d):00230         B57600         EQU       %00001001
     000A             (   /dd/defs/scf.d):00231         B115200        EQU       %00001010
                      (   /dd/defs/scf.d):00232         * Word size
     0000             (   /dd/defs/scf.d):00233         WORD8          EQU       %00000000
     0020             (   /dd/defs/scf.d):00234         WORD7          EQU       %00100000
                      (   /dd/defs/scf.d):00235         * Stop bits
     0000             (   /dd/defs/scf.d):00236         STOP1          EQU       %00000000
     0010             (   /dd/defs/scf.d):00237         STOP2          EQU       %00010000
                      (   /dd/defs/scf.d):00238         
                      ( /dd/defs/deffile):00008                  use   /dd/defs/coco.d
                      (  /dd/defs/coco.d):00001         ********************************************************************
                      (  /dd/defs/coco.d):00002         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (  /dd/defs/coco.d):00003         *
                      (  /dd/defs/coco.d):00004         * $Id$
                      (  /dd/defs/coco.d):00005         *
                      (  /dd/defs/coco.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (  /dd/defs/coco.d):00007         * Comment
                      (  /dd/defs/coco.d):00008         * ------------------------------------------------------------------
                      (  /dd/defs/coco.d):00009         *          1998/10/13  Boisy G. Pitre
                      (  /dd/defs/coco.d):00010         * Added defs by Bruce Isted from his Eliminator archive.
                      (  /dd/defs/coco.d):00011         *
                      (  /dd/defs/coco.d):00012         *          1998/10/31  Boisy G. Pitre
                      (  /dd/defs/coco.d):00013         * Merged cc3global.defs into this file.
                      (  /dd/defs/coco.d):00014         *
                      (  /dd/defs/coco.d):00015         *          2002/04/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00016         * Merged Level One and Level Two sysdefs.
                      (  /dd/defs/coco.d):00017         *
                      (  /dd/defs/coco.d):00018         *          2002/06/22  Boisy G. Pitre
                      (  /dd/defs/coco.d):00019         * Removed PIA.U4 and PIA.U8, improved comments
                      (  /dd/defs/coco.d):00020         *
                      (  /dd/defs/coco.d):00021         *          2003/11/05  Robert Gault
                      (  /dd/defs/coco.d):00022         * Made changes in window globals and grfdrv memory to handle regW
                      (  /dd/defs/coco.d):00023         * in 6809 systems.
                      (  /dd/defs/coco.d):00024         *
                      (  /dd/defs/coco.d):00025         *          2003/11/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00026         * Statics now are prefaced with V. to identify them easier in source.
                      (  /dd/defs/coco.d):00027         *
                      (  /dd/defs/coco.d):00028         *          2004/07/18  Boisy G. Pitre
                      (  /dd/defs/coco.d):00029         * Moved CoCo 3 Window stuff into cc3iodefs
                      (  /dd/defs/coco.d):00030         *
                      (  /dd/defs/coco.d):00031         *          2012/02/24  Boisy G. Pitre
                      (  /dd/defs/coco.d):00032         * Consolidated all CoCo-specific defs files into here.
                      (  /dd/defs/coco.d):00033         
                      (  /dd/defs/coco.d):00034                        NAM       CoCoDefs
                      (  /dd/defs/coco.d):00035                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (  /dd/defs/coco.d):00036         
                      (  /dd/defs/coco.d):00037         
                      (  /dd/defs/coco.d):00038         **********************
                      (  /dd/defs/coco.d):00039         * CPU Type Definitions
                      (  /dd/defs/coco.d):00040         *
     0001             (  /dd/defs/coco.d):00041         Color          SET       1
     0002             (  /dd/defs/coco.d):00042         Color3         SET       2
     0002             (  /dd/defs/coco.d):00043         CPUType        SET       Color3
                      (  /dd/defs/coco.d):00044         
                      (  /dd/defs/coco.d):00045         
                      (  /dd/defs/coco.d):00046         ******************************
                      (  /dd/defs/coco.d):00047         * Clock Speed Type Definitions
                      (  /dd/defs/coco.d):00048         *
     0001             (  /dd/defs/coco.d):00049         OneMHz         EQU       1
     0002             (  /dd/defs/coco.d):00050         TwoMHz         EQU       2
     0002             (  /dd/defs/coco.d):00051         CPUSpeed       SET       TwoMHz
                      (  /dd/defs/coco.d):00052         
                      (  /dd/defs/coco.d):00053         
                      (  /dd/defs/coco.d):00054         **********************************
                      (  /dd/defs/coco.d):00055         * Power Line Frequency Definitions
                      (  /dd/defs/coco.d):00056         *
     0001             (  /dd/defs/coco.d):00057         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (  /dd/defs/coco.d):00058         Hz60           EQU       2                   Assemble clock for 60 hz power
     0002             (  /dd/defs/coco.d):00059         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (  /dd/defs/coco.d):00060         
                      (  /dd/defs/coco.d):00061         
                      (  /dd/defs/coco.d):00062         **********************************
                      (  /dd/defs/coco.d):00063         * Ticks per second
                      (  /dd/defs/coco.d):00064         *
     003C             (  /dd/defs/coco.d):00065         TkPerSec       SET       60
                      (  /dd/defs/coco.d):00066         
                      (  /dd/defs/coco.d):00067         
                      (  /dd/defs/coco.d):00068         ******************
                      (  /dd/defs/coco.d):00069         * ACIA type set up
                      (  /dd/defs/coco.d):00070         *
                      (  /dd/defs/coco.d):00071                        ORG       1
0001                  (  /dd/defs/coco.d):00072         ACIA6850       RMB       1                   MC6850 acia.
0002                  (  /dd/defs/coco.d):00073         ACIA6551       RMB       1                   SY6551 acia.
0003                  (  /dd/defs/coco.d):00074         ACIA2661       RMB       1                   SC2661 acia.
     0002             (  /dd/defs/coco.d):00075         ACIATYPE       SET       ACIA6551
                      (  /dd/defs/coco.d):00076         
                      (  /dd/defs/coco.d):00077         
                      (  /dd/defs/coco.d):00078         ****************************************
                      (  /dd/defs/coco.d):00079         * Special character Bit position equates
                      (  /dd/defs/coco.d):00080         *
     0001             (  /dd/defs/coco.d):00081         SHIFTBIT       EQU       %00000001
     0002             (  /dd/defs/coco.d):00082         CNTRLBIT       EQU       %00000010
     0004             (  /dd/defs/coco.d):00083         ALTERBIT       EQU       %00000100
     0008             (  /dd/defs/coco.d):00084         UPBIT          EQU       %00001000
     0010             (  /dd/defs/coco.d):00085         DOWNBIT        EQU       %00010000
     0020             (  /dd/defs/coco.d):00086         LEFTBIT        EQU       %00100000
     0040             (  /dd/defs/coco.d):00087         RIGHTBIT       EQU       %01000000
     0080             (  /dd/defs/coco.d):00088         SPACEBIT       EQU       %10000000
                      (  /dd/defs/coco.d):00089         
                      (  /dd/defs/coco.d):00090         
                      (  /dd/defs/coco.d):00091         ******************
                      (  /dd/defs/coco.d):00092         * Device addresses for miscellaneous hardware
                      (  /dd/defs/coco.d):00093         *
     FF68             (  /dd/defs/coco.d):00094         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (  /dd/defs/coco.d):00095         A.ModP         SET       $FF6C               ModPak Address
     FF40             (  /dd/defs/coco.d):00096         DPort          SET       $FF40               Disk controller base address
     FF7F             (  /dd/defs/coco.d):00097         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (  /dd/defs/coco.d):00098         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (  /dd/defs/coco.d):00099         PIA0Base       EQU       $FF00
     FF20             (  /dd/defs/coco.d):00100         PIA1Base       EQU       $FF20
                      (  /dd/defs/coco.d):00101         
                      (  /dd/defs/coco.d):00102         
                      (  /dd/defs/coco.d):00103         ******************
                      (  /dd/defs/coco.d):00104         * VDG Devices
                      (  /dd/defs/coco.d):00105         *
     FFC0             (  /dd/defs/coco.d):00106         A.TermV        SET       $FFC0               VDG Term
     FFC1             (  /dd/defs/coco.d):00107         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (  /dd/defs/coco.d):00108         A.V2           SET       $FFC2
     FFC3             (  /dd/defs/coco.d):00109         A.V3           SET       $FFC3
     FFC4             (  /dd/defs/coco.d):00110         A.V4           SET       $FFC4
     FFC5             (  /dd/defs/coco.d):00111         A.V5           SET       $FFC5
     FFC6             (  /dd/defs/coco.d):00112         A.V6           SET       $FFC6
     FFC7             (  /dd/defs/coco.d):00113         A.V7           SET       $FFC7
                      (  /dd/defs/coco.d):00114         
                      (  /dd/defs/coco.d):00115         
                      (  /dd/defs/coco.d):00116         
                      (  /dd/defs/coco.d):00117         ********************************
                      (  /dd/defs/coco.d):00118         * Boot defs for NitrOS-9 Level 1
                      (  /dd/defs/coco.d):00119         *
                      (  /dd/defs/coco.d):00120         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00121         * system.
                      (  /dd/defs/coco.d):00122         *
                      (  /dd/defs/coco.d):00123         
                      (  /dd/defs/coco.d):00124         
                      (  /dd/defs/coco.d):00125         ******************************************
                      (  /dd/defs/coco.d):00126         * Boot defs for NitrOS-9 Level 2 and above
                      (  /dd/defs/coco.d):00127         *
                      (  /dd/defs/coco.d):00128         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00129         * system.
                      (  /dd/defs/coco.d):00130         *
     ED00             (  /dd/defs/coco.d):00131         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (  /dd/defs/coco.d):00132         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (  /dd/defs/coco.d):00133         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (  /dd/defs/coco.d):00134         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (  /dd/defs/coco.d):00135         
                      (  /dd/defs/coco.d):00136         
                      (  /dd/defs/coco.d):00137         * On the CoCo, the boot track is all of track 34
                      (  /dd/defs/coco.d):00138         
     0022             (  /dd/defs/coco.d):00139         Bt.Track       EQU       34                  Boot track
     0000             (  /dd/defs/coco.d):00140         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (  /dd/defs/coco.d):00141         
                      (  /dd/defs/coco.d):00142         
     1080             (  /dd/defs/coco.d):00143         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (  /dd/defs/coco.d):00144         
                      (  /dd/defs/coco.d):00145         
                      (  /dd/defs/coco.d):00146         
                      (  /dd/defs/coco.d):00147         *************************************************
                      (  /dd/defs/coco.d):00148         *
                      (  /dd/defs/coco.d):00149         * NitrOS-9 Level 1 Section
                      (  /dd/defs/coco.d):00150         *
                      (  /dd/defs/coco.d):00151         *************************************************
                      (  /dd/defs/coco.d):00152         
                      (  /dd/defs/coco.d):00153         
                      (  /dd/defs/coco.d):00154         
                      (  /dd/defs/coco.d):00155         *************************************************
                      (  /dd/defs/coco.d):00156         *
                      (  /dd/defs/coco.d):00157         * NitrOS-9 Level 2 Section
                      (  /dd/defs/coco.d):00158         *
                      (  /dd/defs/coco.d):00159         *************************************************
                      (  /dd/defs/coco.d):00160         
                      (  /dd/defs/coco.d):00161         ****************************************
                      (  /dd/defs/coco.d):00162         * Dynamic Address Translator Definitions
                      (  /dd/defs/coco.d):00163         *
     0008             (  /dd/defs/coco.d):00164         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (  /dd/defs/coco.d):00165         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (  /dd/defs/coco.d):00166         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (  /dd/defs/coco.d):00167         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (  /dd/defs/coco.d):00168         DAT.Task       EQU       $FF91               Task Register address
     0020             (  /dd/defs/coco.d):00169         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (  /dd/defs/coco.d):00170         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (  /dd/defs/coco.d):00171         DAT.Free       EQU       $333E               Free Block Number
     003F             (  /dd/defs/coco.d):00172         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (  /dd/defs/coco.d):00173         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (  /dd/defs/coco.d):00174         DAT.WrPr       EQU       0                   no write protect
     0000             (  /dd/defs/coco.d):00175         DAT.WrEn       EQU       0                   no write enable
     0000             (  /dd/defs/coco.d):00176         SysTask        EQU       0                   Coco System Task number
     003F             (  /dd/defs/coco.d):00177         IOBlock        EQU       $3F
     003F             (  /dd/defs/coco.d):00178         ROMBlock       EQU       $3F
     007F             (  /dd/defs/coco.d):00179         IOAddr         EQU       $7F
     0001             (  /dd/defs/coco.d):00180         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (  /dd/defs/coco.d):00181         RAMCount       EQU       1                   initial blocks of RAM
     0005             (  /dd/defs/coco.d):00182         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (  /dd/defs/coco.d):00183         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (  /dd/defs/coco.d):00184         ByteType       EQU       2                   chk entire block of RAM
     0001             (  /dd/defs/coco.d):00185         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (  /dd/defs/coco.d):00186         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (  /dd/defs/coco.d):00187         * NOTE: this check assumes any NotRAM with a module will
                      (  /dd/defs/coco.d):00188         *       always start with $87CD in first two bytes of block
     0001             (  /dd/defs/coco.d):00189         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (  /dd/defs/coco.d):00190         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (  /dd/defs/coco.d):00191         LastRAM        EQU       IOBlock             maximum RAM block number
                      (  /dd/defs/coco.d):00192         
                      (  /dd/defs/coco.d):00193         ***************************
                      (  /dd/defs/coco.d):00194         * Color Computer 3 Specific
                      (  /dd/defs/coco.d):00195         *
     0001             (  /dd/defs/coco.d):00196         MappedIO       EQU       true                (Actually False but it works better this way)
                      (  /dd/defs/coco.d):00197         
                      (  /dd/defs/coco.d):00198         ********************
                      (  /dd/defs/coco.d):00199         * Hardware addresses
                      (  /dd/defs/coco.d):00200         *
     FF00             (  /dd/defs/coco.d):00201         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (  /dd/defs/coco.d):00202         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (  /dd/defs/coco.d):00203         BordReg        EQU       $FF9A               Border color register
     FFB0             (  /dd/defs/coco.d):00204         PalAdr         EQU       $FFB0               Palette registers
                      (  /dd/defs/coco.d):00205         
     0007             (  /dd/defs/coco.d):00206         HW.Page        SET       $07                 Device descriptor hardware page
                      (  /dd/defs/coco.d):00207         
                      (  /dd/defs/coco.d):00208         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (  /dd/defs/coco.d):00209         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (  /dd/defs/coco.d):00210         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (  /dd/defs/coco.d):00211         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (  /dd/defs/coco.d):00212         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (  /dd/defs/coco.d):00213         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (  /dd/defs/coco.d):00214         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (  /dd/defs/coco.d):00215         * it will end up with its own block assigned for CPU address space $E000-
                      (  /dd/defs/coco.d):00216         * $FFFF but the top of the address space is unusable by the user process:
                      (  /dd/defs/coco.d):00217         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (  /dd/defs/coco.d):00218         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (  /dd/defs/coco.d):00219         * For the COCO GIME, it's always $3F.
     003F             (  /dd/defs/coco.d):00220         KrnBlk         SET       $3F
                      (  /dd/defs/coco.d):00221         
                      (  /dd/defs/coco.d):00222         
                      ( /dd/defs/deffile):00009                  use   /dd/defs/cocovtio.d
                      (/dd/defs/cocovtio):00001         ********************************************************************
                      (/dd/defs/cocovtio):00002         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00003         *
                      (/dd/defs/cocovtio):00004         * $Id$
                      (/dd/defs/cocovtio):00005         *
                      (/dd/defs/cocovtio):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocovtio):00007         * Comment
                      (/dd/defs/cocovtio):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocovtio):00009         *          2004/07/18  Boisy G. Pitre
                      (/dd/defs/cocovtio):00010         * Started from systype
                      (/dd/defs/cocovtio):00011         
                      (/dd/defs/cocovtio):00012                        NAM       VTIODefs
                      (/dd/defs/cocovtio):00013                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00014         
                      (/dd/defs/cocovtio):00015         * Max size of Get/Put buffer to copy between user and grfdrv. There is room for up to 128, but
                      (/dd/defs/cocovtio):00016         *   we may use some of that for other things. Leaving at OS-9 Level II default (72) for now.
                      (/dd/defs/cocovtio):00017         * May try increasing to higher (maybe 96?) to see if it makes a noticable difference GPLoading
                      (/dd/defs/cocovtio):00018         * fonts, etc. in EOU bootup.
                      (/dd/defs/cocovtio):00019         
     0048             (/dd/defs/cocovtio):00020         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (/dd/defs/cocovtio):00021         
                      (/dd/defs/cocovtio):00022         ****************
                      (/dd/defs/cocovtio):00023         * Window Devices
                      (/dd/defs/cocovtio):00024         *
                      (/dd/defs/cocovtio):00025                        ORG       $FF9F
FF9F                  (/dd/defs/cocovtio):00026         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (/dd/defs/cocovtio):00027         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (/dd/defs/cocovtio):00028         A.W1           RMB       1                   $FFA1
FFA2                  (/dd/defs/cocovtio):00029         A.W2           RMB       1                   $FFA2
FFA3                  (/dd/defs/cocovtio):00030         A.W3           RMB       1                   $FFA3
FFA4                  (/dd/defs/cocovtio):00031         A.W4           RMB       1                   $FFA4
FFA5                  (/dd/defs/cocovtio):00032         A.W5           RMB       1                   $FFA5
FFA6                  (/dd/defs/cocovtio):00033         A.W6           RMB       1                   $FFA6
FFA7                  (/dd/defs/cocovtio):00034         A.W7           RMB       1                   $FFA7
FFA8                  (/dd/defs/cocovtio):00035         A.W8           RMB       1                   $FFA8
FFA9                  (/dd/defs/cocovtio):00036         A.W9           RMB       1                   $FFA9
FFAA                  (/dd/defs/cocovtio):00037         A.W10          RMB       1                   $FFAA
FFAB                  (/dd/defs/cocovtio):00038         A.W11          RMB       1                   $FFAB
FFAC                  (/dd/defs/cocovtio):00039         A.W12          RMB       1                   $FFAC
FFAD                  (/dd/defs/cocovtio):00040         A.W13          RMB       1                   $FFAD
FFAE                  (/dd/defs/cocovtio):00041         A.W14          RMB       1                   $FFAE
FFAF                  (/dd/defs/cocovtio):00042         A.W15          RMB       1                   $FFAF
                      (/dd/defs/cocovtio):00043         
                      (/dd/defs/cocovtio):00044         **********************************
                      (/dd/defs/cocovtio):00045         * Pointer Device Packet Definition
                      (/dd/defs/cocovtio):00046         *
                      (/dd/defs/cocovtio):00047                        ORG       0
0000                  (/dd/defs/cocovtio):00048         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (/dd/defs/cocovtio):00049         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (/dd/defs/cocovtio):00050         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (/dd/defs/cocovtio):00051                        RMB       2                   reserved
0005                  (/dd/defs/cocovtio):00052         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (/dd/defs/cocovtio):00053         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (/dd/defs/cocovtio):00054         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (/dd/defs/cocovtio):00055         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (/dd/defs/cocovtio):00056         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (/dd/defs/cocovtio):00057         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (/dd/defs/cocovtio):00058         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (/dd/defs/cocovtio):00059         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (/dd/defs/cocovtio):00060         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (/dd/defs/cocovtio):00061         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (/dd/defs/cocovtio):00062                        RMB       2                   Reserved
0012                  (/dd/defs/cocovtio):00063         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (/dd/defs/cocovtio):00064         Pt.BDY         RMB       2                   Button down Y value
0016                  (/dd/defs/cocovtio):00065         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (/dd/defs/cocovtio):00066         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (/dd/defs/cocovtio):00067         Pt.AcX         RMB       2                   Actual X Value
001A                  (/dd/defs/cocovtio):00068         Pt.AcY         RMB       2                   Actual Y Value
001C                  (/dd/defs/cocovtio):00069         Pt.WRX         RMB       2                   Window Relative X
001E                  (/dd/defs/cocovtio):00070         Pt.WRY         RMB       2                   Window Relative Y
     0020             (/dd/defs/cocovtio):00071         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (/dd/defs/cocovtio):00072         
                      (/dd/defs/cocovtio):00073         **************************
                      (/dd/defs/cocovtio):00074         * window regions for mouse
                      (/dd/defs/cocovtio):00075         *
     0000             (/dd/defs/cocovtio):00076         WR.Cntnt       EQU       0                   content region
     0001             (/dd/defs/cocovtio):00077         WR.Cntrl       EQU       1                   control region
     0002             (/dd/defs/cocovtio):00078         WR.OfWin       EQU       2                   off window
                      (/dd/defs/cocovtio):00079         
                      (/dd/defs/cocovtio):00080         *************************************
                      (/dd/defs/cocovtio):00081         * Standard system get/put buffer defs
                      (/dd/defs/cocovtio):00082         *
                      (/dd/defs/cocovtio):00083         *
                      (/dd/defs/cocovtio):00084         * system group numbers
                      (/dd/defs/cocovtio):00085         *
                      (/dd/defs/cocovtio):00086                        ORG       200
00C8                  (/dd/defs/cocovtio):00087         Grp.Fnt        RMB       1                   font group
00C9                  (/dd/defs/cocovtio):00088         Grp.Clip       RMB       1                   clipboard group
00CA                  (/dd/defs/cocovtio):00089         Grp.Ptr        RMB       1                   pointer group
00CB                  (/dd/defs/cocovtio):00090         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (/dd/defs/cocovtio):00091         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (/dd/defs/cocovtio):00092         Grp.Pat6       RMB       1                   pattern group 16 color
                      (/dd/defs/cocovtio):00093         *
                      (/dd/defs/cocovtio):00094         * font buffer numbers
                      (/dd/defs/cocovtio):00095         *
                      (/dd/defs/cocovtio):00096                        ORG       1
0001                  (/dd/defs/cocovtio):00097         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (/dd/defs/cocovtio):00098         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (/dd/defs/cocovtio):00099         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (/dd/defs/cocovtio):00100         *
                      (/dd/defs/cocovtio):00101         * pattern buffer numbers
                      (/dd/defs/cocovtio):00102         *
                      (/dd/defs/cocovtio):00103                        ORG       1
0001                  (/dd/defs/cocovtio):00104         Pat.Dot        RMB       1
0002                  (/dd/defs/cocovtio):00105         Pat.Vrt        RMB       1
0003                  (/dd/defs/cocovtio):00106         Pat.Hrz        RMB       1
0004                  (/dd/defs/cocovtio):00107         Pat.XHtc       RMB       1
0005                  (/dd/defs/cocovtio):00108         Pat.LSnt       RMB       1
0006                  (/dd/defs/cocovtio):00109         Pat.RSnt       RMB       1
0007                  (/dd/defs/cocovtio):00110         Pat.SDot       RMB       1
0008                  (/dd/defs/cocovtio):00111         Pat.BDot       RMB       1
                      (/dd/defs/cocovtio):00112         *
                      (/dd/defs/cocovtio):00113         * pointer buffer numbers
                      (/dd/defs/cocovtio):00114         *
                      (/dd/defs/cocovtio):00115                        ORG       1
0001                  (/dd/defs/cocovtio):00116         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (/dd/defs/cocovtio):00117         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (/dd/defs/cocovtio):00118         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (/dd/defs/cocovtio):00119         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (/dd/defs/cocovtio):00120         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (/dd/defs/cocovtio):00121         Ptr.Txt        RMB       1                   Text pointer
0007                  (/dd/defs/cocovtio):00122         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (/dd/defs/cocovtio):00123         
                      (/dd/defs/cocovtio):00124         **********************
                      (/dd/defs/cocovtio):00125         * KeyDrv Entry Points
                      (/dd/defs/cocovtio):00126                        ORG       0
0000                  (/dd/defs/cocovtio):00127         K$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00128         K$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00129         K$FnKey        RMB       3                   get function key states
0009                  (/dd/defs/cocovtio):00130         K$RdKey        RMB       3                   get key states
                      (/dd/defs/cocovtio):00131         
                      (/dd/defs/cocovtio):00132         **********************
                      (/dd/defs/cocovtio):00133         * JoyDrv Entry Points
                      (/dd/defs/cocovtio):00134                        ORG       0
0000                  (/dd/defs/cocovtio):00135         J$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00136         J$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00137         J$MsBtn        RMB       3                   get mouse button states
0009                  (/dd/defs/cocovtio):00138         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (/dd/defs/cocovtio):00139         J$JyBtn        RMB       3                   get joystick button states
000F                  (/dd/defs/cocovtio):00140         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00141         
                      (/dd/defs/cocovtio):00142         **********************
                      (/dd/defs/cocovtio):00143         * SndDrv Entry Points
                      (/dd/defs/cocovtio):00144                        ORG       0
0000                  (/dd/defs/cocovtio):00145         S$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00146         S$GetStt       RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00147         S$SetStt       RMB       3                   joystick termination
0009                  (/dd/defs/cocovtio):00148         S$Term         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00149         
                      (/dd/defs/cocovtio):00150         ********************************
                      (/dd/defs/cocovtio):00151         * Window/Menu Bar Data Structure
                      (/dd/defs/cocovtio):00152         *
                      (/dd/defs/cocovtio):00153         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (/dd/defs/cocovtio):00154         * for use in the high level windowing package.
                      (/dd/defs/cocovtio):00155         *
     000A             (/dd/defs/cocovtio):00156         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (/dd/defs/cocovtio):00157         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (/dd/defs/cocovtio):00158         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (/dd/defs/cocovtio):00159         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (/dd/defs/cocovtio):00160         *
                      (/dd/defs/cocovtio):00161         * Menu Item Descriptor : (MN.ITEMS)
                      (/dd/defs/cocovtio):00162         * one required for each item within the menu
                      (/dd/defs/cocovtio):00163         *
                      (/dd/defs/cocovtio):00164                        ORG       0
0000                  (/dd/defs/cocovtio):00165         MI.TTL         RMB       MXTTLEN             item name
000F                  (/dd/defs/cocovtio):00166         MI.ENBL        RMB       1                   enable flag
0010                  (/dd/defs/cocovtio):00167         MI.RES         RMB       5                   reserved bytes
     0015             (/dd/defs/cocovtio):00168         MI.SIZ         EQU       .                   size of menu item descriptor
                      (/dd/defs/cocovtio):00169         *
                      (/dd/defs/cocovtio):00170         * Menu Descriptor :
                      (/dd/defs/cocovtio):00171         * one for each menu on the manu bar
                      (/dd/defs/cocovtio):00172         * each is pointed to by MB.MPTR below
                      (/dd/defs/cocovtio):00173         *
                      (/dd/defs/cocovtio):00174                        ORG       0
0000                  (/dd/defs/cocovtio):00175         MN.TTL         RMB       MXTTLEN             menu title
000F                  (/dd/defs/cocovtio):00176         MN.ID          RMB       1                   menu id number (1-255)
0010                  (/dd/defs/cocovtio):00177         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (/dd/defs/cocovtio):00178         MN.NITS        RMB       1                   number of items in menu
0012                  (/dd/defs/cocovtio):00179         MN.ENBL        RMB       1                   enable flag
0013                  (/dd/defs/cocovtio):00180         MN.RES         RMB       2                   reserved bytes
0015                  (/dd/defs/cocovtio):00181         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (/dd/defs/cocovtio):00182         MN.SIZ         EQU       .                   size of menu descriptor
                      (/dd/defs/cocovtio):00183         *
                      (/dd/defs/cocovtio):00184         * Window Descriptor:
                      (/dd/defs/cocovtio):00185         * one required for each application in a framed window
                      (/dd/defs/cocovtio):00186         *
                      (/dd/defs/cocovtio):00187                        ORG       0
0000                  (/dd/defs/cocovtio):00188         WN.TTL         RMB       20                  title of window for title bar
0014                  (/dd/defs/cocovtio):00189         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (/dd/defs/cocovtio):00190         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (/dd/defs/cocovtio):00191         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (/dd/defs/cocovtio):00192         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (/dd/defs/cocovtio):00193         WN.RES         RMB       7                   reserved bytes
0020                  (/dd/defs/cocovtio):00194         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (/dd/defs/cocovtio):00195         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (/dd/defs/cocovtio):00196         
                      (/dd/defs/cocovtio):00197         *************************
                      (/dd/defs/cocovtio):00198         * Window Type Definitions
                      (/dd/defs/cocovtio):00199         *
                      (/dd/defs/cocovtio):00200         * To be used in setting up the border of the window in
                      (/dd/defs/cocovtio):00201         * the SS.WnSel SETSTAT
                      (/dd/defs/cocovtio):00202         *
                      (/dd/defs/cocovtio):00203                        ORG       0
0000                  (/dd/defs/cocovtio):00204         WT.NBox        RMB       1                   No Box
0001                  (/dd/defs/cocovtio):00205         WT.FWin        RMB       1                   Framed Window
0002                  (/dd/defs/cocovtio):00206         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (/dd/defs/cocovtio):00207         WT.SBox        RMB       1                   Shadowed Box
0004                  (/dd/defs/cocovtio):00208         WT.DBox        RMB       1                   Double Box
0005                  (/dd/defs/cocovtio):00209         WT.PBox        RMB       1                   Plain Box
                      (/dd/defs/cocovtio):00210         
                      (/dd/defs/cocovtio):00211         *************************************
                      (/dd/defs/cocovtio):00212         * Pre-Defined Menu IDs for the system
                      (/dd/defs/cocovtio):00213         *
                      (/dd/defs/cocovtio):00214                        ORG       1
0001                  (/dd/defs/cocovtio):00215         MId.Mov        RMB       1                   move box
0002                  (/dd/defs/cocovtio):00216         MId.Cls        RMB       1                   close box
0003                  (/dd/defs/cocovtio):00217         MId.Grw        RMB       1                   grow box
0004                  (/dd/defs/cocovtio):00218         MId.SUp        RMB       1                   scroll up
0005                  (/dd/defs/cocovtio):00219         MId.SDn        RMB       1                   scroll down
0006                  (/dd/defs/cocovtio):00220         MId.SRt        RMB       1                   scroll right
0007                  (/dd/defs/cocovtio):00221         MId.SLt        RMB       1                   scroll left
0008                  (/dd/defs/cocovtio):00222         MId.Chr        RMB       1                   character was depressed
                      (/dd/defs/cocovtio):00223                        ORG       20
0014                  (/dd/defs/cocovtio):00224         MId.Tdy        RMB       1                   Tandy menu
0015                  (/dd/defs/cocovtio):00225         MId.Fil        RMB       1                   Files Menu
0016                  (/dd/defs/cocovtio):00226         MId.Edt        RMB       1                   Edit Menu
0017                  (/dd/defs/cocovtio):00227         MId.Sty        RMB       1                   Styles menu
0018                  (/dd/defs/cocovtio):00228         MId.Fnt        RMB       1                   Font menu
                      (/dd/defs/cocovtio):00229         
                      (/dd/defs/cocovtio):00230         
                      (/dd/defs/cocovtio):00231         ******************************************************************************
                      (/dd/defs/cocovtio):00232         ******************************************************************************
                      (/dd/defs/cocovtio):00233         **                                                                          **
                      (/dd/defs/cocovtio):00234         ** NitrOS-9 Windowing system Global data definitions                        **
                      (/dd/defs/cocovtio):00235         **                                                                          **
                      (/dd/defs/cocovtio):00236         ******************************************************************************
                      (/dd/defs/cocovtio):00237         ******************************************************************************
                      (/dd/defs/cocovtio):00238         **                                                                          **
                      (/dd/defs/cocovtio):00239         ** System memory block 0 layout:                                            **
                      (/dd/defs/cocovtio):00240         **                                                                          **
                      (/dd/defs/cocovtio):00241         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (/dd/defs/cocovtio):00242         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (/dd/defs/cocovtio):00243         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (/dd/defs/cocovtio):00244         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (/dd/defs/cocovtio):00245         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (/dd/defs/cocovtio):00246         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (/dd/defs/cocovtio):00247         ** $0010-$001F : unused (User definable)                                    **
                      (/dd/defs/cocovtio):00248         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (/dd/defs/cocovtio):00249         ** $0100-$011F : Task usage table                                           **
                      (/dd/defs/cocovtio):00250         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (/dd/defs/cocovtio):00251         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (/dd/defs/cocovtio):00252         ** $0300-$03FF : system's system call dispatch table                        **
                      (/dd/defs/cocovtio):00253         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (/dd/defs/cocovtio):00254         ** $0500-$05FF : process descriptor pointer table                           **
                      (/dd/defs/cocovtio):00255         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (/dd/defs/cocovtio):00256         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (/dd/defs/cocovtio):00257         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (/dd/defs/cocovtio):00258         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (/dd/defs/cocovtio):00259         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (/dd/defs/cocovtio):00260         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (/dd/defs/cocovtio):00261         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (/dd/defs/cocovtio):00262         ** $1248-$127F : ????  (unused)                                             **
                      (/dd/defs/cocovtio):00263         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (/dd/defs/cocovtio):00264         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (/dd/defs/cocovtio):00265         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (/dd/defs/cocovtio):00266         **                                                                          **
                      (/dd/defs/cocovtio):00267         ******************************************************************************
                      (/dd/defs/cocovtio):00268         ******************************************************************************
                      (/dd/defs/cocovtio):00269         
                      (/dd/defs/cocovtio):00270         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (/dd/defs/cocovtio):00271         MaxLines       EQU       25                  Max. Y coord text value
     0000             (/dd/defs/cocovtio):00272         Meg            SET       false               "true" if 1 or 2 meg machine
                      (/dd/defs/cocovtio):00273         
     0000             (/dd/defs/cocovtio):00274         COMP           EQU       0                   composite monitor
     0001             (/dd/defs/cocovtio):00275         RGB            EQU       1                   RGB Analog monitor 
     0002             (/dd/defs/cocovtio):00276         MONO           EQU       2                   monochrome monitor
                      (/dd/defs/cocovtio):00277         
     0001             (/dd/defs/cocovtio):00278         Monitor        SET       RGB
                      (/dd/defs/cocovtio):00279         
                      (/dd/defs/cocovtio):00280         * Global definitions
     0001             (/dd/defs/cocovtio):00281         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (/dd/defs/cocovtio):00282         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (/dd/defs/cocovtio):00283         CapsLck        EQU       %00000100           Capslock enabled
     0280             (/dd/defs/cocovtio):00284         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00285                      IFEQ      MaxLines-25
     00C6             (/dd/defs/cocovtio):00286         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00287                      ELSE      
0019                  (/dd/defs/cocovtio):00288         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00289                      ENDC      
                      (/dd/defs/cocovtio):00290         
                      (/dd/defs/cocovtio):00291         *****************************************************************************
                      (/dd/defs/cocovtio):00292         * Static memory area for each window (VTIO/TC9IO)
                      (/dd/defs/cocovtio):00293         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (/dd/defs/cocovtio):00294         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (/dd/defs/cocovtio):00295         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (/dd/defs/cocovtio):00296         * May have to have smaller limit for text to gfx screens, as it will run much
                      (/dd/defs/cocovtio):00297         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (/dd/defs/cocovtio):00298         *
                      (/dd/defs/cocovtio):00299         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (/dd/defs/cocovtio):00300         * V.SCF is to be resolved properly in pass 1!!
                      (/dd/defs/cocovtio):00301                        ORG       V.SCF
001D                  (/dd/defs/cocovtio):00302         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (/dd/defs/cocovtio):00303         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (/dd/defs/cocovtio):00304         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (/dd/defs/cocovtio):00305         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (/dd/defs/cocovtio):00306         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (/dd/defs/cocovtio):00307         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (/dd/defs/cocovtio):00308         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (/dd/defs/cocovtio):00309         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (/dd/defs/cocovtio):00310         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (/dd/defs/cocovtio):00311         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (/dd/defs/cocovtio):00312         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (/dd/defs/cocovtio):00313         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (/dd/defs/cocovtio):00314                        RMB       1                   unused                                       $2A
002B                  (/dd/defs/cocovtio):00315         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (/dd/defs/cocovtio):00316         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (/dd/defs/cocovtio):00317         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (/dd/defs/cocovtio):00318         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (/dd/defs/cocovtio):00319         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (/dd/defs/cocovtio):00320         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (/dd/defs/cocovtio):00321         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (/dd/defs/cocovtio):00322         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (/dd/defs/cocovtio):00323         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (/dd/defs/cocovtio):00324         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (/dd/defs/cocovtio):00325         CC3Parm        RMB       128-.               global parameter area
0080                  (/dd/defs/cocovtio):00326         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (/dd/defs/cocovtio):00327         CC3DSiz        EQU       .
                      (/dd/defs/cocovtio):00328         
                      (/dd/defs/cocovtio):00329         *****************************************************************************
                      (/dd/defs/cocovtio):00330         * GrfInt/WindInt global memory area
                      (/dd/defs/cocovtio):00331         * This area sits in system block 0 from $1000 to $10ff
     1000             (/dd/defs/cocovtio):00332         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (/dd/defs/cocovtio):00333                        ORG       0
0000                  (/dd/defs/cocovtio):00334         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (/dd/defs/cocovtio):00335         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (/dd/defs/cocovtio):00336         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (/dd/defs/cocovtio):00337         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (/dd/defs/cocovtio):00338         *g0003    rmb   2          NEW: UNUSED
0005                  (/dd/defs/cocovtio):00339         g0005          RMB       2                   Temp save in Windint RG
0007                  (/dd/defs/cocovtio):00340         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (/dd/defs/cocovtio):00341         G.MonTyp       RMB       1                   monitor type
     000A             (/dd/defs/cocovtio):00342         g000A          EQU       .                   Old label for compatibility
000A                  (/dd/defs/cocovtio):00343         G.CrDvFl       RMB       1                   Are we current device flag (only set when all
                      (/dd/defs/cocovtio):00344         *                           Parms have been moved to Dev Mem)
                      (/dd/defs/cocovtio):00345         *                           0=We are not on our device
                      (/dd/defs/cocovtio):00346         *                           1=We are the current device
                      (/dd/defs/cocovtio):00347         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (/dd/defs/cocovtio):00348         *                            whether or not to update GIME regs themselves
                      (/dd/defs/cocovtio):00349         *                            If not current device, they don't.)
000B                  (/dd/defs/cocovtio):00350         G.WinType      RMB       1                   current device's V.TYPE
000C                  (/dd/defs/cocovtio):00351         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (/dd/defs/cocovtio):00352         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (/dd/defs/cocovtio):00353         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (/dd/defs/cocovtio):00354         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (/dd/defs/cocovtio):00355         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (/dd/defs/cocovtio):00356         G.BelVec       RMB       2                   BELL routine vector
0019                  (/dd/defs/cocovtio):00357         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (/dd/defs/cocovtio):00358         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (/dd/defs/cocovtio):00359         G.BelTnF       RMB       1                   BELL tone flag
001D                  (/dd/defs/cocovtio):00360         g001D          RMB       3
0020                  (/dd/defs/cocovtio):00361         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (/dd/defs/cocovtio):00362         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (/dd/defs/cocovtio):00363         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (/dd/defs/cocovtio):00364         *                           00000010 : VDGInt found
                      (/dd/defs/cocovtio):00365         *                           10000000 : GrfDrv found
0025                  (/dd/defs/cocovtio):00366         g0025          RMB       1
0026                  (/dd/defs/cocovtio):00367         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (/dd/defs/cocovtio):00368         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00369         *CurLght  rmb   1          current keyboard light settings
                      (/dd/defs/cocovtio):00370         *         ELSE  
0027                  (/dd/defs/cocovtio):00371         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (/dd/defs/cocovtio):00372         *         ENDC  
0028                  (/dd/defs/cocovtio):00373         G.LKeyCd       RMB       1                   last keyboard code
0029                  (/dd/defs/cocovtio):00374         G.KyRept       RMB       1                   key repeat counter
                      (/dd/defs/cocovtio):00375         * A secondary 3 key table (same format as g002D below)
002A                  (/dd/defs/cocovtio):00376         G.2Key1        RMB       1                   $2A
002B                  (/dd/defs/cocovtio):00377         G.2Key2        RMB       1                   $2B
002C                  (/dd/defs/cocovtio):00378         G.2Key3        RMB       1
                      (/dd/defs/cocovtio):00379         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (/dd/defs/cocovtio):00380         * than 3 are hit, the last key is overwritten with the very last key down that
                      (/dd/defs/cocovtio):00381         * was checked. Format for all three is the same as the PIA column/row byte @
                      (/dd/defs/cocovtio):00382         * KeyFlag below.
002D                  (/dd/defs/cocovtio):00383         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (/dd/defs/cocovtio):00384         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (/dd/defs/cocovtio):00385         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (/dd/defs/cocovtio):00386         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (/dd/defs/cocovtio):00387         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (/dd/defs/cocovtio):00388         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (/dd/defs/cocovtio):00389         *                           %00000111-Column # (Output, 0-7)
                      (/dd/defs/cocovtio):00390         *                           %00111000-Row # (Input, 0-6)
0033                  (/dd/defs/cocovtio):00391         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (/dd/defs/cocovtio):00392         G.KySns        RMB       1                   key sense byte
0035                  (/dd/defs/cocovtio):00393         G.KySame       RMB       1                   same key flag
0036                  (/dd/defs/cocovtio):00394         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (/dd/defs/cocovtio):00395                        RMB       1
0038                  (/dd/defs/cocovtio):00396         g0038          RMB       1                   grfdrv initialized flag
0039                  (/dd/defs/cocovtio):00397                        RMB       2
003B                  (/dd/defs/cocovtio):00398         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (/dd/defs/cocovtio):00399         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (/dd/defs/cocovtio):00400         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (/dd/defs/cocovtio):00401         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (/dd/defs/cocovtio):00402         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (/dd/defs/cocovtio):00403         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (/dd/defs/cocovtio):00404         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (/dd/defs/cocovtio):00405         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00406         *KeyParm  rmb   1          keyboard command parameter byte
                      (/dd/defs/cocovtio):00407         *         ELSE  
0063                  (/dd/defs/cocovtio):00408         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (/dd/defs/cocovtio):00409         *         ENDC  
0064                  (/dd/defs/cocovtio):00410         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (/dd/defs/cocovtio):00411         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (/dd/defs/cocovtio):00412         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (/dd/defs/cocovtio):00413         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (/dd/defs/cocovtio):00414         G.CoTble       RMB       6                   co-module table ($68)
006E                  (/dd/defs/cocovtio):00415         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (/dd/defs/cocovtio):00416         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (/dd/defs/cocovtio):00417         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (/dd/defs/cocovtio):00418         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (/dd/defs/cocovtio):00419         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (/dd/defs/cocovtio):00420         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (/dd/defs/cocovtio):00421         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (/dd/defs/cocovtio):00422         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (/dd/defs/cocovtio):00423         g00BD          RMB       1                   Current screen type for work window table
00BE                  (/dd/defs/cocovtio):00424         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (/dd/defs/cocovtio):00425         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (/dd/defs/cocovtio):00426         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (/dd/defs/cocovtio):00427         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (/dd/defs/cocovtio):00428         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (/dd/defs/cocovtio):00429         G.MsSig        RMB       1                   mouse signal flag
00C7                  (/dd/defs/cocovtio):00430         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (/dd/defs/cocovtio):00431         g00D7          RMB       9
00E0                  (/dd/defs/cocovtio):00432         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (/dd/defs/cocovtio):00433         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (/dd/defs/cocovtio):00434         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (/dd/defs/cocovtio):00435         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (/dd/defs/cocovtio):00436         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (/dd/defs/cocovtio):00437         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (/dd/defs/cocovtio):00438         
                      (/dd/defs/cocovtio):00439         *****************************************************************************
                      (/dd/defs/cocovtio):00440         * GrfDrv global memory data definitions
                      (/dd/defs/cocovtio):00441         * This area sits in system block 0 from $1100 to $119E
     1100             (/dd/defs/cocovtio):00442         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (/dd/defs/cocovtio):00443                        ORG       0
0000                  (/dd/defs/cocovtio):00444         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (/dd/defs/cocovtio):00445         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (/dd/defs/cocovtio):00446         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (/dd/defs/cocovtio):00447         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (/dd/defs/cocovtio):00448         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (/dd/defs/cocovtio):00449         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (/dd/defs/cocovtio):00450         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (/dd/defs/cocovtio):00451         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (/dd/defs/cocovtio):00452         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (/dd/defs/cocovtio):00453         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (/dd/defs/cocovtio):00454         *                                              overlay width has been copied
000B                  (/dd/defs/cocovtio):00455         gr000B         RMB       1
000C                  (/dd/defs/cocovtio):00456         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (/dd/defs/cocovtio):00457         gr000E         RMB       1
000F                  (/dd/defs/cocovtio):00458         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (/dd/defs/cocovtio):00459         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (/dd/defs/cocovtio):00460         gr0012         RMB       6
0018                  (/dd/defs/cocovtio):00461         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (/dd/defs/cocovtio):00462         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (/dd/defs/cocovtio):00463         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (/dd/defs/cocovtio):00464         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (/dd/defs/cocovtio):00465         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (/dd/defs/cocovtio):00466         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (/dd/defs/cocovtio):00467         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (/dd/defs/cocovtio):00468         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (/dd/defs/cocovtio):00469         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (/dd/defs/cocovtio):00470         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (/dd/defs/cocovtio):00471         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (/dd/defs/cocovtio):00472         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (/dd/defs/cocovtio):00473         gr002C         RMB       2
002E                  (/dd/defs/cocovtio):00474         gr002E         RMB       2                   current window table entry
0030                  (/dd/defs/cocovtio):00475         gr0030         RMB       2                   current screen table ptr
0032                  (/dd/defs/cocovtio):00476         gr0032         RMB       1                   Last block # we used for buffers
0033                  (/dd/defs/cocovtio):00477         gr0033         RMB       2                   Last offset we used for buffers
0035                  (/dd/defs/cocovtio):00478         gr0035         RMB       1                   group
0036                  (/dd/defs/cocovtio):00479         gr0036         RMB       2                   offset
0038                  (/dd/defs/cocovtio):00480         gr0038         RMB       1                   group returned (new)
0039                  (/dd/defs/cocovtio):00481         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (/dd/defs/cocovtio):00482         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (/dd/defs/cocovtio):00483         gr003B         RMB       2                   end of vars ptr?
003D                  (/dd/defs/cocovtio):00484         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (/dd/defs/cocovtio):00485         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (/dd/defs/cocovtio):00486         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (/dd/defs/cocovtio):00487         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (/dd/defs/cocovtio):00488         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (/dd/defs/cocovtio):00489         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (/dd/defs/cocovtio):00490         gr0047         RMB       2                   'Working' X coordinate
0049                  (/dd/defs/cocovtio):00491         gr0049         RMB       2                   'Working' Y coordinate
004B                  (/dd/defs/cocovtio):00492         gr004B         RMB       2                   current X
004D                  (/dd/defs/cocovtio):00493         gr004D         RMB       2                   current Y
004F                  (/dd/defs/cocovtio):00494         gr004F         RMB       2                   X Size (in bytes)
0051                  (/dd/defs/cocovtio):00495         gr0051         RMB       2                   Y Size (in bytes)
0053                  (/dd/defs/cocovtio):00496         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (/dd/defs/cocovtio):00497         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (/dd/defs/cocovtio):00498         gr0057         RMB       1                   group
0058                  (/dd/defs/cocovtio):00499         gr0058         RMB       1                   buffer #
0059                  (/dd/defs/cocovtio):00500         gr0059         RMB       1                   save switch for overlay
005A                  (/dd/defs/cocovtio):00501         gr005A         RMB       1                   PRN
005B                  (/dd/defs/cocovtio):00502         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (/dd/defs/cocovtio):00503         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (/dd/defs/cocovtio):00504         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (/dd/defs/cocovtio):00505         Gr.STYMk       RMB       1                   STY marker
0061                  (/dd/defs/cocovtio):00506         gr0061         RMB       1                   foreground RGB data
0062                  (/dd/defs/cocovtio):00507         gr0062         RMB       1                   background RGB data
0063                  (/dd/defs/cocovtio):00508         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (/dd/defs/cocovtio):00509         gr0064         RMB       2                   PSet vector
0066                  (/dd/defs/cocovtio):00510         gr0066         RMB       2                   pset offset
0068                  (/dd/defs/cocovtio):00511         gr0068         RMB       2                   LSet vector
006A                  (/dd/defs/cocovtio):00512         gr006A         RMB       2                   max X co-ordinate
006C                  (/dd/defs/cocovtio):00513         gr006C         RMB       2                   max Y co-ordinate
006E                  (/dd/defs/cocovtio):00514         gr006E         RMB       2                   X pixel count
0070                  (/dd/defs/cocovtio):00515         gr0070         RMB       2                   Y pixel count
0072                  (/dd/defs/cocovtio):00516         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (/dd/defs/cocovtio):00517         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (/dd/defs/cocovtio):00518         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (/dd/defs/cocovtio):00519         gr0077         RMB       2                   Vector for right direction FFill
0079                  (/dd/defs/cocovtio):00520         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (/dd/defs/cocovtio):00521         gr007A         RMB       2                   Vector for left direction FFill
007C                  (/dd/defs/cocovtio):00522         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (/dd/defs/cocovtio):00523         gr007D         RMB       1                   buffer block #
007E                  (/dd/defs/cocovtio):00524         gr007E         RMB       2                   buffer offset #
0080                  (/dd/defs/cocovtio):00525         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (/dd/defs/cocovtio):00526         gr0082         RMB       3                   3 byte extended screen address
0085                  (/dd/defs/cocovtio):00527         gr0085         RMB       2                   temp
0087                  (/dd/defs/cocovtio):00528         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (/dd/defs/cocovtio):00529         gr0097         RMB       1                   temp
0098                  (/dd/defs/cocovtio):00530         gr0098         RMB       1                   temp
                      (/dd/defs/cocovtio):00531         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (/dd/defs/cocovtio):00532         gr0099         RMB       2                   temp
                      (/dd/defs/cocovtio):00533         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (/dd/defs/cocovtio):00534         gr009B         RMB       1                   counter temp
009C                  (/dd/defs/cocovtio):00535         gr009C         RMB       1
009D                  (/dd/defs/cocovtio):00536         gr009D         RMB       2                   offset to buffer in block
009F                  (/dd/defs/cocovtio):00537         gr009F         RMB       1
00A0                  (/dd/defs/cocovtio):00538         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (/dd/defs/cocovtio):00539         gr00A1         RMB       2                   vector routine for (changes lots)
                      (/dd/defs/cocovtio):00540         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (/dd/defs/cocovtio):00541         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (/dd/defs/cocovtio):00542         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (/dd/defs/cocovtio):00543         gr00A7         RMB       2
00A9                  (/dd/defs/cocovtio):00544         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (/dd/defs/cocovtio):00545         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (/dd/defs/cocovtio):00546         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (/dd/defs/cocovtio):00547         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (/dd/defs/cocovtio):00548         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (/dd/defs/cocovtio):00549         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (/dd/defs/cocovtio):00550         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (/dd/defs/cocovtio):00551         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (/dd/defs/cocovtio):00552         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (/dd/defs/cocovtio):00553         gr00B5         RMB       1                   regW for grfdrv
00B6                  (/dd/defs/cocovtio):00554         gr00B6         RMB       1
00B7                  (/dd/defs/cocovtio):00555         gr00B7         RMB       2
00B9                  (/dd/defs/cocovtio):00556         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (/dd/defs/cocovtio):00557         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (/dd/defs/cocovtio):00558         gr00BD         RMB       2                   previously used in grfdrv at $B6
                      (/dd/defs/cocovtio):00559         * EOU Beta 2 & up
00BF                  (/dd/defs/cocovtio):00560         grScrtch       RMB       2                   Scratch var for Grfdrv - use DP instead of stack for
                      (/dd/defs/cocovtio):00561         *                                            anything that does immediate calculations
00C1                  (/dd/defs/cocovtio):00562         gr00BF         RMB       256-.               Reserved for future use
                      (/dd/defs/cocovtio):00563         
                      (/dd/defs/cocovtio):00564         * GPLoad buffer - $1200 in system block    . Currently ends at $1247, and $1248-$127f is unused
     1200             (/dd/defs/cocovtio):00565         GPBuf          EQU       $1200               Usefull address (start of GP buffer copy memory)
0100                  (/dd/defs/cocovtio):00566         GPBufSz        RMB       gb0000              common move buffer for gpload/get/put (72 bytes default)
                      (/dd/defs/cocovtio):00567         
                      (/dd/defs/cocovtio):00568         *****************************************************************************
                      (/dd/defs/cocovtio):00569         * Window table entry structure
                      (/dd/defs/cocovtio):00570         * These tables sit in system block 0 and there is 1 for every window init'd
                      (/dd/defs/cocovtio):00571         * including any overlay windows.
     0020             (/dd/defs/cocovtio):00572         MaxWind        EQU       32                  maximum allowable window tables
     1290             (/dd/defs/cocovtio):00573         WinBase        EQU       $1290               base address to start of window tables
                      (/dd/defs/cocovtio):00574                        ORG       -$10
FFF0                  (/dd/defs/cocovtio):00575         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (/dd/defs/cocovtio):00576         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (/dd/defs/cocovtio):00577         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (/dd/defs/cocovtio):00578         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (/dd/defs/cocovtio):00579         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (/dd/defs/cocovtio):00580         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (/dd/defs/cocovtio):00581         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (/dd/defs/cocovtio):00582         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (/dd/defs/cocovtio):00583         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (/dd/defs/cocovtio):00584         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (/dd/defs/cocovtio):00585         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (/dd/defs/cocovtio):00586         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (/dd/defs/cocovtio):00587         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (/dd/defs/cocovtio):00588         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (/dd/defs/cocovtio):00589         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (/dd/defs/cocovtio):00590         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (/dd/defs/cocovtio):00591         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (/dd/defs/cocovtio):00592         Wt.Back        RMB       1                   background palette #                         $07
0008                  (/dd/defs/cocovtio):00593         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (/dd/defs/cocovtio):00594         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (/dd/defs/cocovtio):00595         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (/dd/defs/cocovtio):00596         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (/dd/defs/cocovtio):00597         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (/dd/defs/cocovtio):00598         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (/dd/defs/cocovtio):00599         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (/dd/defs/cocovtio):00600         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (/dd/defs/cocovtio):00601         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (/dd/defs/cocovtio):00602         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (/dd/defs/cocovtio):00603         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (/dd/defs/cocovtio):00604         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (/dd/defs/cocovtio):00605         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (/dd/defs/cocovtio):00606         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (/dd/defs/cocovtio):00607         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24/25,0-191/199)          $1D
001F                  (/dd/defs/cocovtio):00608         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (/dd/defs/cocovtio):00609         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (/dd/defs/cocovtio):00610         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (/dd/defs/cocovtio):00611         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (/dd/defs/cocovtio):00612         * NOTE: The following default settings are what the window was initialized
                      (/dd/defs/cocovtio):00613         *       with, and thus are the MAXIMUM start/size the window can handle
                      (/dd/defs/cocovtio):00614         *       until it is restarted (DWEnd & DWSet)
                      (/dd/defs/cocovtio):00615         *       They also appear to be used in WindInt to determine the coords &
                      (/dd/defs/cocovtio):00616         *       sizes for control+content regions
0026                  (/dd/defs/cocovtio):00617         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (/dd/defs/cocovtio):00618         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (/dd/defs/cocovtio):00619         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (/dd/defs/cocovtio):00620         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (/dd/defs/cocovtio):00621         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (/dd/defs/cocovtio):00622         Wt.Siz         EQU       .+$10
                      (/dd/defs/cocovtio):00623         
                      (/dd/defs/cocovtio):00624         *****************************************************************************
                      (/dd/defs/cocovtio):00625         * Screen table entrys
                      (/dd/defs/cocovtio):00626         * These tables sit in system block 0 base=$1A80
                      (/dd/defs/cocovtio):00627         
     0010             (/dd/defs/cocovtio):00628         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (/dd/defs/cocovtio):00629         STblBse        EQU       $1A80               base address of screen tables
                      (/dd/defs/cocovtio):00630                        ORG       0
0000                  (/dd/defs/cocovtio):00631         St.Sty         RMB       1                   Screen type                         $00
0001                  (/dd/defs/cocovtio):00632         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (/dd/defs/cocovtio):00633         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (/dd/defs/cocovtio):00634         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (/dd/defs/cocovtio):00635         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (/dd/defs/cocovtio):00636         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (/dd/defs/cocovtio):00637         St.Back        RMB       1                   Background palette register #       $07
0008                  (/dd/defs/cocovtio):00638         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (/dd/defs/cocovtio):00639         St.Res         RMB       7                   UNUSED???                           $09
                      (/dd/defs/cocovtio):00640         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (/dd/defs/cocovtio):00641         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (/dd/defs/cocovtio):00642         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (/dd/defs/cocovtio):00643         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
                      (/dd/defs/cocovtio):00644         * Other possibilities: Offset into screen to display (if we enable screens taller than
                      (/dd/defs/cocovtio):00645         *   a single screen), etc.
0010                  (/dd/defs/cocovtio):00646         St.Pals        RMB       16                  Palette register contents           $10
     0020             (/dd/defs/cocovtio):00647         St.Siz         EQU       .
                      (/dd/defs/cocovtio):00648         
                      (/dd/defs/cocovtio):00649         *****************************************************************************
                      (/dd/defs/cocovtio):00650         * Graphics buffer tables
                      (/dd/defs/cocovtio):00651         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (/dd/defs/cocovtio):00652         * data.
                      (/dd/defs/cocovtio):00653                        ORG       0
0000                  (/dd/defs/cocovtio):00654         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (/dd/defs/cocovtio):00655         Grf.Off        RMB       2                   back block header offset            $01
0003                  (/dd/defs/cocovtio):00656         Grf.Grp        RMB       1                   group #                             $03
0004                  (/dd/defs/cocovtio):00657         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (/dd/defs/cocovtio):00658         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (/dd/defs/cocovtio):00659         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (/dd/defs/cocovtio):00660         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (/dd/defs/cocovtio):00661         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (/dd/defs/cocovtio):00662         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (/dd/defs/cocovtio):00663         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (/dd/defs/cocovtio):00664         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (/dd/defs/cocovtio):00665         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (/dd/defs/cocovtio):00666         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (/dd/defs/cocovtio):00667         Grf.Siz        EQU       .                   $20
                      (/dd/defs/cocovtio):00668         
                      (/dd/defs/cocovtio):00669         *****************************************************************************
                      (/dd/defs/cocovtio):00670         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (/dd/defs/cocovtio):00671         * $1075-$0176
                      (/dd/defs/cocovtio):00672         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (/dd/defs/cocovtio):00673                        ORG       0
0000                  (/dd/defs/cocovtio):00674         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (/dd/defs/cocovtio):00675         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (/dd/defs/cocovtio):00676         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (/dd/defs/cocovtio):00677         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (/dd/defs/cocovtio):00678         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (/dd/defs/cocovtio):00679         Gt.BClr        RMB       1                   Background color                               $08
0009                  (/dd/defs/cocovtio):00680         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (/dd/defs/cocovtio):00681         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (/dd/defs/cocovtio):00682         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (/dd/defs/cocovtio):00683         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (/dd/defs/cocovtio):00684         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (/dd/defs/cocovtio):00685         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (/dd/defs/cocovtio):00686         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (/dd/defs/cocovtio):00687         GTabSz         EQU       .
                      (/dd/defs/cocovtio):00688         
                      (/dd/defs/cocovtio):00689         *****************************************************************************
                      (/dd/defs/cocovtio):00690         * This table is located in the graphics table memory and is offset from
                      (/dd/defs/cocovtio):00691         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (/dd/defs/cocovtio):00692         * WindInt.
                      (/dd/defs/cocovtio):00693         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (/dd/defs/cocovtio):00694         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (/dd/defs/cocovtio):00695         *  COMBINATION EVERY TIME
                      (/dd/defs/cocovtio):00696                        ORG       $0240
0240                  (/dd/defs/cocovtio):00697                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (/dd/defs/cocovtio):00698                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (/dd/defs/cocovtio):00699                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (/dd/defs/cocovtio):00700                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (/dd/defs/cocovtio):00701         
                      (/dd/defs/cocovtio):00702         *****************************************************************************
                      (/dd/defs/cocovtio):00703         * WindInt menu handling table entry definition
                      (/dd/defs/cocovtio):00704                        ORG       0
0000                  (/dd/defs/cocovtio):00705         MnuXNum        RMB       1                   menu #
0001                  (/dd/defs/cocovtio):00706         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (/dd/defs/cocovtio):00707         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (/dd/defs/cocovtio):00708                        RMB       1                   unused?
     0004             (/dd/defs/cocovtio):00709         MnuHSiz        EQU       .
                      (/dd/defs/cocovtio):00710         
                      (/dd/defs/cocovtio):00711         *****************************************************************************
                      (/dd/defs/cocovtio):00712         * Character binary switches
     0080             (/dd/defs/cocovtio):00713         Blink          EQU       %10000000           Blink characters (hardware text only)
     0080             (/dd/defs/cocovtio):00714         TChr           EQU       %10000000           transparent characters (both currently)
     0040             (/dd/defs/cocovtio):00715         Under          EQU       %01000000           underline characters (both)
     0020             (/dd/defs/cocovtio):00716         Bold           EQU       %00100000           bold characters (gfx only, maybe txt with color changes?)
     0010             (/dd/defs/cocovtio):00717         Prop           EQU       %00010000           proportional spacing of characters (gfx only)
     0008             (/dd/defs/cocovtio):00718         Scale          EQU       %00001000           automatic window scaling (gfx only)
     0004             (/dd/defs/cocovtio):00719         Invers         EQU       %00000100           inverse characters (both)
     0002             (/dd/defs/cocovtio):00720         NoCurs         EQU       %00000010           no cursor display (both)
     0001             (/dd/defs/cocovtio):00721         Protect        EQU       %00000001           device window protection (both)
                      (/dd/defs/cocovtio):00722         
                      (/dd/defs/cocovtio):00723         *****************************************************************************
                      (/dd/defs/cocovtio):00724         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (/dd/defs/cocovtio):00725         Current        EQU       $ff                 Current screen
                      (/dd/defs/cocovtio):00726         *         equ   1          640x200x2
                      (/dd/defs/cocovtio):00727         *         equ   2          320x200x4
                      (/dd/defs/cocovtio):00728         *         equ   3          640x200x4
                      (/dd/defs/cocovtio):00729         *         equ   4          320x200x16
                      (/dd/defs/cocovtio):00730         *         equ   $85        80 column text
                      (/dd/defs/cocovtio):00731         *         equ   $86        40 column text
                      (/dd/defs/cocovtio):00732         
                      (/dd/defs/cocovtio):00733         *************************************
                      (/dd/defs/cocovtio):00734         * Window default palette color codes
                      (/dd/defs/cocovtio):00735         *
                      (/dd/defs/cocovtio):00736                        ORG       0
0000                  (/dd/defs/cocovtio):00737         White.         RMB       1
0001                  (/dd/defs/cocovtio):00738         Blue.          RMB       1
0002                  (/dd/defs/cocovtio):00739         Black.         RMB       1
0003                  (/dd/defs/cocovtio):00740         Green.         RMB       1
0004                  (/dd/defs/cocovtio):00741         Red.           RMB       1
0005                  (/dd/defs/cocovtio):00742         Yellow.        RMB       1
0006                  (/dd/defs/cocovtio):00743         Magenta.       RMB       1
0007                  (/dd/defs/cocovtio):00744         Cyan.          RMB       1
                      (/dd/defs/cocovtio):00745         
                      ( /dd/defs/deffile):00010                  use   /dd/defs/cocosdc.d
                      (/dd/defs/cocosdc.):00001         ********************************************************************
                      (/dd/defs/cocosdc.):00002         * cocosdc.d - CoCo SDC definitions
                      (/dd/defs/cocosdc.):00003         *
                      (/dd/defs/cocosdc.):00004         * $Id$
                      (/dd/defs/cocosdc.):00005         *
                      (/dd/defs/cocosdc.):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocosdc.):00007         * Comment
                      (/dd/defs/cocosdc.):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocosdc.):00009         *          2014/05/02  Boisy G. Pitre
                      (/dd/defs/cocosdc.):00010         * Created
                      (/dd/defs/cocosdc.):00011         
                      (/dd/defs/cocosdc.):00012         
     FF4A             (/dd/defs/cocosdc.):00013         SDAddr         SET       $FF4A
                      (/dd/defs/cocosdc.):00014         
                      ( /dd/defs/deffile):00011                  use   /dd/defs/vdgdefs
                      ( /dd/defs/vdgdefs):00001                        IFNE      VDGDEFS-1
                      ( /dd/defs/vdgdefs):00002         
     0001             ( /dd/defs/vdgdefs):00003         VDGDEFS        SET       1
                      ( /dd/defs/vdgdefs):00004         
                      ( /dd/defs/vdgdefs):00005         ********************************************************************
                      ( /dd/defs/vdgdefs):00006         * VDGDefs - VDG Interface Definititions
                      ( /dd/defs/vdgdefs):00007         *
                      ( /dd/defs/vdgdefs):00008         * $Id$
                      ( /dd/defs/vdgdefs):00009         *
                      ( /dd/defs/vdgdefs):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      ( /dd/defs/vdgdefs):00011         * Comment
                      ( /dd/defs/vdgdefs):00012         * ------------------------------------------------------------------
                      ( /dd/defs/vdgdefs):00013         *          1991/05/07  Alan DeKok
                      ( /dd/defs/vdgdefs):00014         * Wrote original from VDGInt source.
                      ( /dd/defs/vdgdefs):00015         
                      ( /dd/defs/vdgdefs):00016                        NAM       VDGDefs
                      ( /dd/defs/vdgdefs):00017                        TTL       VDG Interface Definitions
                      ( /dd/defs/vdgdefs):00018         
                      ( /dd/defs/vdgdefs):00019         * Notes:
                      ( /dd/defs/vdgdefs):00020         *
                      ( /dd/defs/vdgdefs):00021         * All offsets from 'U' (address of device memory area)
                      ( /dd/defs/vdgdefs):00022         * (see p. 6-9, technical reference: U=start of driver data memory
                      ( /dd/defs/vdgdefs):00023         * NOTE: There is LOTS of stuff which is only used once, and some which
                      ( /dd/defs/vdgdefs):00024         * is not needed.  Here's a list of the un-needed, and un-used (other than
                      ( /dd/defs/vdgdefs):00025         * once)
                      ( /dd/defs/vdgdefs):00026         *
                      ( /dd/defs/vdgdefs):00027         * It would probably be benificial to patch VDGint to fix these problems,
                      ( /dd/defs/vdgdefs):00028         * unless anyone else has ideas as to why VDGint is doing things this way.
                      ( /dd/defs/vdgdefs):00029         *
                      ( /dd/defs/vdgdefs):00030         * Un-needed
                      ( /dd/defs/vdgdefs):00031         * VD.EPlt1  - (2) set to VD.NChar, and then read only
                      ( /dd/defs/vdgdefs):00032         * VD.EPlt2  - (2) set to same as VD.EPlt1, and then unused
                      ( /dd/defs/vdgdefs):00033         * VD.Chr1   - (1) set to same as VD.CChar, and then unused
                      ( /dd/defs/vdgdefs):00034         * VD.PlFlg  - (1) initialized to $08, and unused
                      ( /dd/defs/vdgdefs):00035         *
                      ( /dd/defs/vdgdefs):00036         * Un-used
                      ( /dd/defs/vdgdefs):00037         *
                      ( /dd/defs/vdgdefs):00038         * $1D       - (1) end of SCF memory requirements
                      ( /dd/defs/vdgdefs):00039         * VD.Strt1  - (2) CLRed, and then read (LDD) - left as $0000
                      ( /dd/defs/vdgdefs):00040         * $24-$2B   - (8)
                      ( /dd/defs/vdgdefs):00041         * $33-$34   - (2)
                      ( /dd/defs/vdgdefs):00042         * $7E-$FF   - (130)
                      ( /dd/defs/vdgdefs):00043         *
                      ( /dd/defs/vdgdefs):00044         * Total of 22 (150 in whole page) bytes unneeded or unused.
                      ( /dd/defs/vdgdefs):00045         
                      ( /dd/defs/vdgdefs):00046                        ORG       $1E
001E                  ( /dd/defs/vdgdefs):00047         VD.Start       RMB       1                   start of VD.XXXX data: number of VDG screens in use
001F                  ( /dd/defs/vdgdefs):00048         VD.Strt1       RMB       2                   (2) and another start
0021                  ( /dd/defs/vdgdefs):00049         VD.Caps        RMB       2                   caps lock info: $00=lower $FF=upper
0023                  ( /dd/defs/vdgdefs):00050         VD.DFlag       RMB       1                   0=current screen is valid, $01-$FF = update video
                      ( /dd/defs/vdgdefs):00051         * $24-$2B unused
0024                  ( /dd/defs/vdgdefs):00052                        RMB       8
002C                  ( /dd/defs/vdgdefs):00053         VD.NGChr       RMB       1                   number of additional characters to get
002D                  ( /dd/defs/vdgdefs):00054         VD.RTAdd       RMB       2                   (2) return address after getting characters
002F                  ( /dd/defs/vdgdefs):00055         VD.EPlt1       RMB       2                   (2) pointer to where to put next character
0031                  ( /dd/defs/vdgdefs):00056         VD.EPlt2       RMB       2                   (2) as above.
                      ( /dd/defs/vdgdefs):00057         * $33-$34 unused
0033                  ( /dd/defs/vdgdefs):00058                        RMB       2
0035                  ( /dd/defs/vdgdefs):00059         VD.CFlag       RMB       1                   true lowercase flag $10=true, $00=false
0036                  ( /dd/defs/vdgdefs):00060         VD.CFlg1       RMB       1                   VDG display code values
0037                  ( /dd/defs/vdgdefs):00061         VD.DGBuf       RMB       1                   number of currently displayed buffer
0038                  ( /dd/defs/vdgdefs):00062         VD.ScrnA       RMB       2                   (2) screen start address in system memory
003A                  ( /dd/defs/vdgdefs):00063         VD.ScrnE       RMB       2                   (2) address of end of screen
003C                  ( /dd/defs/vdgdefs):00064         VD.CrsrA       RMB       1                   (2) cursor address
003D                  ( /dd/defs/vdgdefs):00065         VD.CrsAL       RMB       1                   cursor address low
003E                  ( /dd/defs/vdgdefs):00066         VD.CChar       RMB       1                   value of character under cursor
003F                  ( /dd/defs/vdgdefs):00067         VD.Mode        RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0040                  ( /dd/defs/vdgdefs):00068         VD.Chr1        RMB       1                   same as under cursor character
0041                  ( /dd/defs/vdgdefs):00069         VD.CColr       RMB       1                   cursor color
0042                  ( /dd/defs/vdgdefs):00070         VD.Col         RMB       1                   number of columns for this screen
0043                  ( /dd/defs/vdgdefs):00071         VD.Row         RMB       1                   number of rows
0044                  ( /dd/defs/vdgdefs):00072         VD.TFlg1       RMB       1                   see WRITE ($0E)
0045                  ( /dd/defs/vdgdefs):00073         VD.Alpha       RMB       1                   0 when in alpha mode
0046                  ( /dd/defs/vdgdefs):00074         VD.Rdy         RMB       1                   device ready (see SS.DStat 0=not ready)
0047                  ( /dd/defs/vdgdefs):00075         VD.SBAdd       RMB       2                   (2) address of block screen is in
0049                  ( /dd/defs/vdgdefs):00076         VD.Blk         RMB       1                   Block number of screen
004A                  ( /dd/defs/vdgdefs):00077         VD.GBuff       RMB       1                   allocation for graphics buffers (block#)
004B                  ( /dd/defs/vdgdefs):00078         VD.AGBuf       RMB       2                   (2) additional graphics buffer
004D                  ( /dd/defs/vdgdefs):00079         VD.HiRes       RMB       1                   hi-res screen table (block value)
004E                  ( /dd/defs/vdgdefs):00080         VD.NBlk        RMB       1                   number of blocks in this screen
004F                  ( /dd/defs/vdgdefs):00081         VD.SType       RMB       1                   screen type -4
0050                  ( /dd/defs/vdgdefs):00082         VD.HR2         RMB       3                   (3) for screen number 2
0053                  ( /dd/defs/vdgdefs):00083         VD.HR3         RMB       3                   (3) for screen 3 (same 3 bytes as above)
0056                  ( /dd/defs/vdgdefs):00084         VD.FFMem       RMB       2                   (2) bottom of stack for flood fill
0058                  ( /dd/defs/vdgdefs):00085         VD.FFSPt       RMB       2                   (2) flood fill stack pointer
005A                  ( /dd/defs/vdgdefs):00086         VD.FFSTp       RMB       2                   (2) flood fill stack top pointer
005C                  ( /dd/defs/vdgdefs):00087         VD.FF6         RMB       1                   flood fill flag
005D                  ( /dd/defs/vdgdefs):00088         VD.MTabl       RMB       2                   (2) address of mask table for pixels in byte
005F                  ( /dd/defs/vdgdefs):00089         VD.PixBt       RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0060                  ( /dd/defs/vdgdefs):00090         VD.GCrsX       RMB       1                   graphics cursor X value
0061                  ( /dd/defs/vdgdefs):00091         VD.GCrsY       RMB       1                   graphics cursor Y
0062                  ( /dd/defs/vdgdefs):00092         VD.Msk1        RMB       1                   mask byte 1
0063                  ( /dd/defs/vdgdefs):00093         VD.Msk2        RMB       1                   mask byte 2 (00,55,AA,FF)
0064                  ( /dd/defs/vdgdefs):00094         VD.MCol        RMB       1                   color? (C003,8001)
0065                  ( /dd/defs/vdgdefs):00095         VD.MCol2       RMB       1                   color
0066                  ( /dd/defs/vdgdefs):00096         VD.PMask       RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0067                  ( /dd/defs/vdgdefs):00097         VD.FF1         RMB       1                   data for flood fill
0068                  ( /dd/defs/vdgdefs):00098         VD.FF2         RMB       1                   data for flood fill
0069                  ( /dd/defs/vdgdefs):00099         VD.FFMsk       RMB       1                   flood fill mask
006A                  ( /dd/defs/vdgdefs):00100         VD.FFFlg       RMB       1                   flood fill flag
006B                  ( /dd/defs/vdgdefs):00101         VD.Palet       RMB       16                  (16) current palette values
007B                  ( /dd/defs/vdgdefs):00102         VD.PlFlg       RMB       1                   initialized to $08 by L00DB, and then unused!
007C                  ( /dd/defs/vdgdefs):00103         VD.NChar       RMB       1                   character to process
007D                  ( /dd/defs/vdgdefs):00104         VD.NChr2       RMB       1                   and the next one
                      ( /dd/defs/vdgdefs):00105         
                      ( /dd/defs/vdgdefs):00106         * and RMB until we get 256 bytes reserved
                      ( /dd/defs/vdgdefs):00107         
                      ( /dd/defs/vdgdefs):00108                        ENDC      
                      ( /dd/defs/vdgdefs):00109         
                      (/dd/sourcecode/as):00056                  endc
                      (/dd/sourcecode/as):00057           
     00C1             (/dd/sourcecode/as):00058         tylg     set   Systm+Objct
     0080             (/dd/sourcecode/as):00059         atrv     set   ReEnt+rev
     0000             (/dd/sourcecode/as):00060         rev      set   $00
     0002             (/dd/sourcecode/as):00061         edition  equ   2
                      (/dd/sourcecode/as):00062         
                      (/dd/sourcecode/as):00063         * Color table for 3D look stuff & others
                      (/dd/sourcecode/as):00064         * This should now match VIEW's color table (darkest to lightest for predictable
                      (/dd/sourcecode/as):00065         * brightness). Any color scheme following that rule shouldn't look bad.
     0000             (/dd/sourcecode/as):00066         WColor0  equ   0          black
     0002             (/dd/sourcecode/as):00067         WColor1  equ   2          dark grey (was lite grey)
     0001             (/dd/sourcecode/as):00068         WColor2  equ   1          light grey (dark grey)
     0003             (/dd/sourcecode/as):00069         WColor3  equ   3          (white)
                      (/dd/sourcecode/as):00070         
0000 87CD1F82000DC180 (/dd/sourcecode/as):00071                  mod   eom,name,tylg,atrv,entry,size
     6403130000
     0000             (/dd/sourcecode/as):00072         size     equ   .
                      (/dd/sourcecode/as):00073         
     000D             (/dd/sourcecode/as):00074         name     equ   *
                      (/dd/sourcecode/as):00075                IFEQ  CoGrf-1
                      (/dd/sourcecode/as):00076                  fcs   /CoGrf/
                      (/dd/sourcecode/as):00077                ELSE
000D 436F5769EE       (/dd/sourcecode/as):00078                  fcs   /CoWin/
                      (/dd/sourcecode/as):00079                ENDC
0012 02               (/dd/sourcecode/as):00080                  fcb   edition
                      (/dd/sourcecode/as):00081         
                      (/dd/sourcecode/as):00082         ****************************
                      (/dd/sourcecode/as):00083         * Escape code parameter vector table
                      (/dd/sourcecode/as):00084         * Format: Byte 1  : Length of parameters required (in bytes)
                      (/dd/sourcecode/as):00085         *         Byte 2  : Internal function code for GrfDrv
                      (/dd/sourcecode/as):00086         *         Byte 3-4: Vector offset of routine from Byte 1
                      (/dd/sourcecode/as):00087         
0013 0704             (/dd/sourcecode/as):00088         L0027    fcb   7,$04          DWSet
0015 03E2             (/dd/sourcecode/as):00089                  fdb   DWSet-*+2
0017 0010             (/dd/sourcecode/as):00090                  fcb   0,$10          Select
0019 058A             (/dd/sourcecode/as):00091                  fdb   Select-*+2
001B 070A             (/dd/sourcecode/as):00092                  fcb   7,$0A          OWSet
001D 04DE             (/dd/sourcecode/as):00093                  fdb   OWSet-*+2
001F 000C             (/dd/sourcecode/as):00094                  fcb   0,$0C          OWEnd
0021 0536             (/dd/sourcecode/as):00095                  fdb   OWEnd-*+2
0023 0008             (/dd/sourcecode/as):00096                  fcb   0,$08          DWEnd
0025 0480             (/dd/sourcecode/as):00097                  fdb   DWEnd-*+2
0027 040E             (/dd/sourcecode/as):00098                  fcb   4,$0E          CWArea
0029 05D4             (/dd/sourcecode/as):00099                  fdb   CWArea-*+2
002B FF00             (/dd/sourcecode/as):00100                  fcb   $ff,$00        Blank (free for new function)
002D 0000             (/dd/sourcecode/as):00101                  fdb   $0000
002F FF00             (/dd/sourcecode/as):00102                  fcb   $ff,$00        Blank (free for new function)
0031 0000             (/dd/sourcecode/as):00103                  fdb   $0000
0033 FF00             (/dd/sourcecode/as):00104                  fcb   $ff,$00        Blank (free for new function)
0035 0000             (/dd/sourcecode/as):00105                  fdb   $0000
0037 042C             (/dd/sourcecode/as):00106                  fcb   4,$2C          DefGPB
0039 086C             (/dd/sourcecode/as):00107                  fdb   DefGPB-*+2
003B 022E             (/dd/sourcecode/as):00108                  fcb   2,$2E          KillBuf
003D 06D0             (/dd/sourcecode/as):00109                  fdb   KillBuf-*+2
003F 0930             (/dd/sourcecode/as):00110                  fcb   9,$30          GPLoad
0041 08EB             (/dd/sourcecode/as):00111                  fdb   GPLoad-*+2
0043 0A34             (/dd/sourcecode/as):00112                  fcb   10,$34         GetBlk
0045 0895             (/dd/sourcecode/as):00113                  fdb   GetBlk-*+2
0047 0636             (/dd/sourcecode/as):00114                  fcb   6,$36          PutBlk
0049 08A5             (/dd/sourcecode/as):00115                  fdb   PutBlk-*+2
004B 0212             (/dd/sourcecode/as):00116                  fcb   2,$12          PSet
004D 06AD             (/dd/sourcecode/as):00117                  fdb   PSet-*+2
004F 011E             (/dd/sourcecode/as):00118                  fcb   1,$1E          LSet
0051 0644             (/dd/sourcecode/as):00119                  fdb   LSet-*+2
0053 001C             (/dd/sourcecode/as):00120                  fcb   0,$1C          DefPal
0055 0666             (/dd/sourcecode/as):00121                  fdb   DefPal-*+2
0057 0216             (/dd/sourcecode/as):00122                  fcb   2,$16          Palette
0059 0685             (/dd/sourcecode/as):00123                  fdb   Palette-*+2
005B 0120             (/dd/sourcecode/as):00124                  fcb   1,$20          FColor
005D 0652             (/dd/sourcecode/as):00125                  fdb   FColor-*+2
005F 0122             (/dd/sourcecode/as):00126                  fcb   1,$22          BColor
0061 064E             (/dd/sourcecode/as):00127                  fdb   BColor-*+2
0063 0114             (/dd/sourcecode/as):00128                  fcb   1,$14          Border
0065 063C             (/dd/sourcecode/as):00129                  fdb   Border-*+2
0067 0128             (/dd/sourcecode/as):00130                  fcb   1,$28          ScaleSw
0069 1E2E             (/dd/sourcecode/as):00131                  fdb   ScaleSw-*+2
006B 0106             (/dd/sourcecode/as):00132                  fcb   1,$06          DWProtSw
006D 1E2A             (/dd/sourcecode/as):00133                  fdb   DWProtSw-*+2
006F FF00             (/dd/sourcecode/as):00134                  fcb   $ff,$00        Blank (free for new function)
0071 0000             (/dd/sourcecode/as):00135                  fdb   $0000
0073 FF00             (/dd/sourcecode/as):00136                  fcb   $ff,$00        Blank (free for new function)
0075 0000             (/dd/sourcecode/as):00137                  fdb   $0000
0077 021A             (/dd/sourcecode/as):00138                  fcb   2,$1A          GCSet
0079 05FB             (/dd/sourcecode/as):00139                  fdb   L060C-*+2
007B 0218             (/dd/sourcecode/as):00140                  fcb   2,$18          Font
007D 067D             (/dd/sourcecode/as):00141                  fdb   Font-*+2
007F FF00             (/dd/sourcecode/as):00142                  fcb   $ff,$00        Blank (free for new function)
0081 0000             (/dd/sourcecode/as):00143                  fdb   $0000
0083 0124             (/dd/sourcecode/as):00144                  fcb   1,$24          TCharSw
0085 1E12             (/dd/sourcecode/as):00145                  fdb   TCharSw-*+2
0087 012A             (/dd/sourcecode/as):00146                  fcb   1,$2A          Bold
0089 1E0E             (/dd/sourcecode/as):00147                  fdb   BoldSw-*+2
008B FF00             (/dd/sourcecode/as):00148                  fcb   $ff,$00        Blank (free for new function)
008D 0000             (/dd/sourcecode/as):00149                  fdb   $0000
008F 0126             (/dd/sourcecode/as):00150                  fcb   1,$26          PropSw
0091 1E06             (/dd/sourcecode/as):00151                  fdb   PropSw-*+2
0093 0400             (/dd/sourcecode/as):00152                  fcb   4,$00          SetDP
0095 0948             (/dd/sourcecode/as):00153                  fdb   SetDPtr-*+2
0097 0400             (/dd/sourcecode/as):00154                  fcb   4,$00          RSetDPtr
0099 0965             (/dd/sourcecode/as):00155                  fdb   RSetDPtr-*+2
009B 0448             (/dd/sourcecode/as):00156                  fcb   4,$48          Point
009D 097D             (/dd/sourcecode/as):00157                  fdb   Point-*+2
009F 0448             (/dd/sourcecode/as):00158                  fcb   4,$48          RPoint
00A1 098E             (/dd/sourcecode/as):00159                  fdb   RPoint-*+2
00A3 044A             (/dd/sourcecode/as):00160                  fcb   4,$4A          Line
00A5 09A8             (/dd/sourcecode/as):00161                  fdb   Line-*+2
00A7 044A             (/dd/sourcecode/as):00162                  fcb   4,$4A          RLine
00A9 09BE             (/dd/sourcecode/as):00163                  fdb   RLine-*+2
00AB 044A             (/dd/sourcecode/as):00164                  fcb   4,$4A          LineM
00AD 09CC             (/dd/sourcecode/as):00165                  fdb   LineM-*+2
00AF 044A             (/dd/sourcecode/as):00166                  fcb   4,$4A          RLineM
00B1 09E7             (/dd/sourcecode/as):00167                  fdb   RLineM-*+2
00B3 044C             (/dd/sourcecode/as):00168                  fcb   4,$4C          Box
00B5 0998             (/dd/sourcecode/as):00169                  fdb   Box-*+2
00B7 044C             (/dd/sourcecode/as):00170                  fcb   4,$4C          RBox
00B9 09AE             (/dd/sourcecode/as):00171                  fdb   RBox-*+2
00BB 044E             (/dd/sourcecode/as):00172                  fcb   4,$4E          Bar
00BD 0990             (/dd/sourcecode/as):00173                  fdb   Bar-*+2
00BF 044E             (/dd/sourcecode/as):00174                  fcb   4,$4E          RBar
00C1 09A6             (/dd/sourcecode/as):00175                  fdb   RBar-*+2
00C3 FF00             (/dd/sourcecode/as):00176                  fcb   $ff,$00        Blank
00C5 0000             (/dd/sourcecode/as):00177                  fdb   $0000
00C7 FF00             (/dd/sourcecode/as):00178                  fcb   $ff,$00        Blank
00C9 0000             (/dd/sourcecode/as):00179                  fdb   $0000
00CB 0444             (/dd/sourcecode/as):00180                  fcb   4,$44          PutGC
00CD 08F9             (/dd/sourcecode/as):00181                  fdb   PutGC-*+2
00CF 0056             (/dd/sourcecode/as):00182                  fcb   0,$56          FFill
00D1 09E0             (/dd/sourcecode/as):00183                  fdb   FFill-*+2
00D3 0250             (/dd/sourcecode/as):00184                  fcb   2,$50          Circle
00D5 09DC             (/dd/sourcecode/as):00185                  fdb   Circle-*+2
00D7 0452             (/dd/sourcecode/as):00186                  fcb   4,$52          Ellipse
00D9 09D8             (/dd/sourcecode/as):00187                  fdb   Ellipse-*+2
00DB 0C54             (/dd/sourcecode/as):00188                  fcb   12,$54         Arc
00DD 09D4             (/dd/sourcecode/as):00189                  fdb   Arc-*+2
00DF 0250             (/dd/sourcecode/as):00190                  fcb   2,$50          Filled Circle (flag set to differentiate) $53
00E1 09C9             (/dd/sourcecode/as):00191                  fdb   Filled-*+2
00E3 0452             (/dd/sourcecode/as):00192                  fcb   4,$52          Filled Ellipse (flag set to differentiate) $54
00E5 09C5             (/dd/sourcecode/as):00193                  fdb   Filled-*+2
00E7 FF00             (/dd/sourcecode/as):00194                  fcb   $ff,$00        Blank (free for new function)
00E9 0000             (/dd/sourcecode/as):00195                  fdb   $0000
                      (/dd/sourcecode/as):00196         
00EB 2E2E2F434D44532F (/dd/sourcecode/as):00197         L0129    fcc   "../CMDS/"
00F3 6772666472F6     (/dd/sourcecode/as):00198         L0131    fcs   "grfdrv"
                      (/dd/sourcecode/as):00199         
                      (/dd/sourcecode/as):00200         ******************************
                      (/dd/sourcecode/as):00201         *
                      (/dd/sourcecode/as):00202         * Initialization routine
00F9 3460             (/dd/sourcecode/as):00203         Init     pshs  u,y            Preserve regs
00FB FC106E           (/dd/sourcecode/as):00204                  ldd   >WGlobal+G.GrfEnt     Grfdrv there?
00FE 10260114         (/dd/sourcecode/as):00205                  lbne  L01DB          Yes, go on
                      (/dd/sourcecode/as):00206         * Setup window allocation bit map table
                      (/dd/sourcecode/as):00207                IFNE  H6309
                      (/dd/sourcecode/as):00208                  clrd  
                      (/dd/sourcecode/as):00209                  clrw
                      (/dd/sourcecode/as):00210                  stq   >WGlobal+G.WUseTb     Set all 32 windows to be unused
                      (/dd/sourcecode/as):00211                ELSE
0102 4F               (/dd/sourcecode/as):00212                  clra
0103 5F               (/dd/sourcecode/as):00213                  clrb
0104 FD11B5           (/dd/sourcecode/as):00214                  std   >GrfMem+gr00B5
0107 FD1071           (/dd/sourcecode/as):00215                  std   >WGlobal+G.WUseTb
010A FD1073           (/dd/sourcecode/as):00216                  std   >WGlobal+G.WUseTb+2
                      (/dd/sourcecode/as):00217                ENDC
                      (/dd/sourcecode/as):00218         * Get grfdrv setup
010D 308CE3           (/dd/sourcecode/as):00219                  leax  <L0131,pc      Point to grfdrv module name
0110 170122           (/dd/sourcecode/as):00220                  lbsr  L01FB          Does it exist in memory?
0113 2417             (/dd/sourcecode/as):00221                  bcc   L0169          Yes, go on
0115 C1DD             (/dd/sourcecode/as):00222                  cmpb  #E$MNF         Module not found?
0117 2608             (/dd/sourcecode/as):00223                  bne   L0166          No, exit with error
0119 308CCF           (/dd/sourcecode/as):00224         L0159    leax  <L0129,pc      Point to full pathname
011C 170123           (/dd/sourcecode/as):00225                  lbsr  L021F          Load ok?
                      (/dd/sourcecode/as):00226         * Initialize grfdrv
011F 240B             (/dd/sourcecode/as):00227                  bcc   L0169          It's ok, go on
0121 43               (/dd/sourcecode/as):00228         L0166    coma                 Set carry
0122 35E0             (/dd/sourcecode/as):00229         L0167    puls  y,u,pc         Return
                      (/dd/sourcecode/as):00230         
                      (/dd/sourcecode/as):00231         * Default palette color settings
0124 3F090012         (/dd/sourcecode/as):00232         L02F3    fcb   $3f,$09,$00,$12 Colors 0-3 & 8-11 (white,blue,black,green)
0128 24362D1B         (/dd/sourcecode/as):00233         L02F7    fcb   $24,$36,$2d,$1b Colors 4-7 & 12-15 (red, yellow, magenta, cyan)
                      (/dd/sourcecode/as):00234         
                      (/dd/sourcecode/as):00235         * Execute Grfdrv's init routine
                      (/dd/sourcecode/as):00236         * Grfdrv will move itself over to task 1 & setup it's own memory map
012C 8647             (/dd/sourcecode/as):00237         L0169    lda     #'G          debug: signal that we are in GrfDrv Init
012E BD005E           (/dd/sourcecode/as):00238                  jsr     >D.BtBug     ---
                      (/dd/sourcecode/as):00239                IFNE  H6309
                      (/dd/sourcecode/as):00240                  lde   #GrfMem/256    Direct page for GrfDrv
                      (/dd/sourcecode/as):00241                  tfr   e,dp
                      (/dd/sourcecode/as):00242                ELSE
0131 3402             (/dd/sourcecode/as):00243                  pshs  a
0133 8611             (/dd/sourcecode/as):00244                  lda   #GrfMem/256
0135 1F8B             (/dd/sourcecode/as):00245                  tfr   a,dp
0137 3502             (/dd/sourcecode/as):00246                  puls  a
                      (/dd/sourcecode/as):00247                ENDC
0139 CE1100           (/dd/sourcecode/as):00248                  ldu   #GrfMem        Point to GRFDRV global mem
                      (/dd/sourcecode/as):00249         * Code moved from GrfDrv's Init routine.
013C 43               (/dd/sourcecode/as):00250                  coma 
013D B71038           (/dd/sourcecode/as):00251                  sta   >WGlobal+g0038 Put it back
                      (/dd/sourcecode/as):00252         * Initialize window entries
0140 8E1280           (/dd/sourcecode/as):00253                  ldx   #WinBase-$10   Point to start of window tbl entries
                      (/dd/sourcecode/as):00254                IFNE  H6309
                      (/dd/sourcecode/as):00255                  ldq   #$2040FFFF     Max # window/size of each entry/Table init code
0143                  (/dd/sourcecode/as):00256         L0097    stw   ,x             Initialize table pointer
                      (/dd/sourcecode/as):00257                  abx                  Move to next entry
                      (/dd/sourcecode/as):00258                  deca                 Done?
                      (/dd/sourcecode/as):00259                  bne   L0097          No keep going
                      (/dd/sourcecode/as):00260                ELSE
0143 3440             (/dd/sourcecode/as):00261                  pshs  u
0145 CC2040           (/dd/sourcecode/as):00262                  ldd   #$2040
0148 CEFFFF           (/dd/sourcecode/as):00263                  ldu   #$FFFF
014B EF84             (/dd/sourcecode/as):00264         L0097    stu   ,x
014D 3A               (/dd/sourcecode/as):00265                  abx
014E 4A               (/dd/sourcecode/as):00266                  deca
014F 26FA             (/dd/sourcecode/as):00267                  bne   L0097
0151 DFB5             (/dd/sourcecode/as):00268                  stu   <$B5
0153 3540             (/dd/sourcecode/as):00269                  puls  u
                      (/dd/sourcecode/as):00270                ENDC
                      (/dd/sourcecode/as):00271         * Initialize screen tables
0155 8E1A81           (/dd/sourcecode/as):00272                  ldx   #STblBse+1     Point to 2nd byte of scrn tbls - 1st block # used
0158 CC1020           (/dd/sourcecode/as):00273                  ldd   #$1020         smaller than the ldb/lde
                      (/dd/sourcecode/as):00274         * ATD: doing CLR is slightly slower than STA, but this code is executed only
                      (/dd/sourcecode/as):00275         * once, so we optimize for size, not speed
015B 6F84             (/dd/sourcecode/as):00276         L00A9    clr   ,x             Set first block # used (A=0 from L0097 loop)
015D 3A               (/dd/sourcecode/as):00277                  abx                  Move to next entry
015E 4A               (/dd/sourcecode/as):00278                  deca                 Done?
015F 26FA             (/dd/sourcecode/as):00279                  bne   L00A9          No, keep goin
                      (/dd/sourcecode/as):00280         * Initialize DAT image
0161 5F               (/dd/sourcecode/as):00281                  clrb                 Set System bank as first one (a already 0)
0162 DD87             (/dd/sourcecode/as):00282                  std   <$87
                      (/dd/sourcecode/as):00283                IFNE  H6309
                      (/dd/sourcecode/as):00284                  ldq   #$333E333E     Get blank image
                      (/dd/sourcecode/as):00285                  std   <$89           Save it in rest 
                      (/dd/sourcecode/as):00286         * NOTE: IF 16K GRFDRV DONE,CHANGE FOLLOWING LINE TO STD <$8F
                      (/dd/sourcecode/as):00287         * Set entire table as this will be reset below as needed. RG.
                      (/dd/sourcecode/as):00288                  stq   <$8D
                      (/dd/sourcecode/as):00289                  stq   <$91
                      (/dd/sourcecode/as):00290                  std   <$95
                      (/dd/sourcecode/as):00291                ELSE
0164 CC333E           (/dd/sourcecode/as):00292                  ldd   #$333E         Since 6809 version is >8K save some steps
0167 DD89             (/dd/sourcecode/as):00293                  std   <$89
0169 DD8F             (/dd/sourcecode/as):00294                  std   <$8F
016B DD91             (/dd/sourcecode/as):00295                  std   <$91
016D DD93             (/dd/sourcecode/as):00296                  std   <$93
016F DD95             (/dd/sourcecode/as):00297                  std   <$95
                      (/dd/sourcecode/as):00298                ENDC
                      (/dd/sourcecode/as):00299         * New code to find GrfDrv in memory and setup DAT - BN
0171 86C1             (/dd/sourcecode/as):00300                  lda   #Systm+Objct   Get module type
                      (/dd/sourcecode/as):00301                IFNE   H6309
                      (/dd/sourcecode/as):00302                  leax  <L0131,pc      Point to grfdrv name
                      (/dd/sourcecode/as):00303                ELSE
0173 308DFF7C         (/dd/sourcecode/as):00304                  leax  >L0131,pc      Point to grfdrv name
                      (/dd/sourcecode/as):00305                ENDC
0177 10BE004A         (/dd/sourcecode/as):00306                  ldy   >D.SysPrc      Get system process dsc. ptr.
017B 31A840           (/dd/sourcecode/as):00307                  leay  <P$DATImg,y    Point to the DAT image
017E 103F4E           (/dd/sourcecode/as):00308                  os9   F$FModul       Get module directory pointer to grfdrv
                      (/dd/sourcecode/as):00309         * End of new code
0181 259F             (/dd/sourcecode/as):00310                  bcs   L0167
0183 10AEC4           (/dd/sourcecode/as):00311                  ldy   MD$MPDAT,u     get DAT offset
0186 ECA4             (/dd/sourcecode/as):00312                  ldd   ,y
0188 DD8B             (/dd/sourcecode/as):00313                  std   <$8B           save first block
018A EC22             (/dd/sourcecode/as):00314                  ldd   2,y            is it >8K?
018C 2702             (/dd/sourcecode/as):00315                  beq   L0101a
018E DD8D             (/dd/sourcecode/as):00316                  std   <$8D
0190 10BE00A1         (/dd/sourcecode/as):00317         L0101a   ldy   >D.TskIPt      Get task image pointer
0194 8E1187           (/dd/sourcecode/as):00318                  ldx   #GrfMem+gr0087 Point to grfdrv DAT image tbl
0197 AF22             (/dd/sourcecode/as):00319                  stx   2,y            Save it as second task
                      (/dd/sourcecode/as):00320         * ATD: changed from $1C98 for more lee-way on the stack
0199 CC1CB0           (/dd/sourcecode/as):00321                  ldd   #$1CB0         low address for stack: L1DC4, L1DEE
019C DD3B             (/dd/sourcecode/as):00322                  std   <$3B           Save in GRFDRV mem
                      (/dd/sourcecode/as):00323                IFNE  H6309
                      (/dd/sourcecode/as):00324                  clrd                 Get screen table initialization
                      (/dd/sourcecode/as):00325                  clrw                 (CLRQ)
                      (/dd/sourcecode/as):00326                  stq   <$2e           Init current screen table ptr & window entry
                      (/dd/sourcecode/as):00327                  stq   <$3d           Init X/Y coords Gfx cursor was last ON at
                      (/dd/sourcecode/as):00328                ELSE
019E 4F               (/dd/sourcecode/as):00329                  clra
019F 5F               (/dd/sourcecode/as):00330                  clrb
01A0 DD2E             (/dd/sourcecode/as):00331                  std   <$2e
01A2 DD30             (/dd/sourcecode/as):00332                  std   <$30
01A4 DD3D             (/dd/sourcecode/as):00333                  std   <$3d
01A6 DD3F             (/dd/sourcecode/as):00334                  std   <$3f
                      (/dd/sourcecode/as):00335         *         std   <$B5
                      (/dd/sourcecode/as):00336                ENDC
01A8 D732             (/dd/sourcecode/as):00337                  stb   <$32           Clear out block #'s for G/P buffer (Current,
01AA D735             (/dd/sourcecode/as):00338                  stb   <$35            previous)
01AC DD39             (/dd/sourcecode/as):00339                  std   <$39           Text cursor & gfx cursors off
01AE 4F               (/dd/sourcecode/as):00340         L0102    clra
01AF 1F8B             (/dd/sourcecode/as):00341                  tfr   a,dp           Set DP to 0 for Wind/CoGrf, which need it there
01B1 6C47             (/dd/sourcecode/as):00342                  inc   MD$Link+1,u              Increment it's link count
                      (/dd/sourcecode/as):00343         * new code to get GrfDrv exec addr. BN
01B3 CC0000           (/dd/sourcecode/as):00344                  ldd   #0
01B6 8E0009           (/dd/sourcecode/as):00345                  ldx   #M$Exec
01B9 108E118B         (/dd/sourcecode/as):00346                  ldy   #$118B
01BD 103F48           (/dd/sourcecode/as):00347                  os9   F$LDDDXY
01C0 8A40             (/dd/sourcecode/as):00348                  ora   #$40
                      (/dd/sourcecode/as):00349         * end of new code
01C2 FD106E           (/dd/sourcecode/as):00350                  std   >WGlobal+G.GrfEnt     Save it
                      (/dd/sourcecode/as):00351                IFNE  H6309
                      (/dd/sourcecode/as):00352                  oim   #$80,>WGlobal+G.BCFFlg Indicate that Grfdrv has been found?
                      (/dd/sourcecode/as):00353                ELSE
01C5 B61024           (/dd/sourcecode/as):00354                  lda   >WGlobal+G.BCFFlg
01C8 8A80             (/dd/sourcecode/as):00355                  ora   #$80
01CA B71024           (/dd/sourcecode/as):00356                  sta   >WGlobal+G.BCFFlg
                      (/dd/sourcecode/as):00357                ENDC
                      (/dd/sourcecode/as):00358         * Initialize GFX tables.
01CD CC02FF           (/dd/sourcecode/as):00359                  ldd   #$02FF         Get how many bytes we need
01D0 103F28           (/dd/sourcecode/as):00360                  os9   F$SRqMem       Reserve it (note: only $2cf is used so far)
01D3 1025FF4A         (/dd/sourcecode/as):00361                  lbcs   L0166         Can't get memory, exit
01D7 FF1075           (/dd/sourcecode/as):00362                  stu   >WGlobal+G.GfxTbl  Save the pointer to GFX tables (NOT IN GLOBAL!)
                      (/dd/sourcecode/as):00363         * Later, when we make generic fast clear routine vector, have both sets of clears call it
                      (/dd/sourcecode/as):00364         * (both 6809 and 6309) LCB
                      (/dd/sourcecode/as):00365                IFNE  H6309
                      (/dd/sourcecode/as):00366                  tfr   d,w            Move mem size to W
                      (/dd/sourcecode/as):00367                  leay  <Nul0+2,pc     Clear them all to NUL's
                      (/dd/sourcecode/as):00368                  tfm   y,u+
                      (/dd/sourcecode/as):00369                  stw   >WGlobal+G.PrWMPt   initialize previous window table pointer to 0
                      (/dd/sourcecode/as):00370                  ldu   #WGlobal+G.WrkWTb   Point to work window table
01DA                  (/dd/sourcecode/as):00371         Nul0     ldw   #$0040
                      (/dd/sourcecode/as):00372                  tfm   y,u+
                      (/dd/sourcecode/as):00373                ELSE
01DA 6FC0             (/dd/sourcecode/as):00374         ClrLp1   clr   ,u+ 
01DC 830001           (/dd/sourcecode/as):00375                  subd  #$0001
01DF 26F9             (/dd/sourcecode/as):00376                  bne   ClrLp1
01E1 FD1022           (/dd/sourcecode/as):00377                  std   >WGlobal+G.PrWMPt   initialize previous window table pointer to 0
01E4 CE1077           (/dd/sourcecode/as):00378                  ldu   #WGlobal+G.WrkWTb   Point to work window table
01E7 C640             (/dd/sourcecode/as):00379                  ldb   #$0040
01E9 6FC0             (/dd/sourcecode/as):00380         ClrLp2   clr   ,u+
01EB 5A               (/dd/sourcecode/as):00381                  decb
01EC 26FB             (/dd/sourcecode/as):00382                  bne   ClrLp2 
                      (/dd/sourcecode/as):00383                ENDC
                      (/dd/sourcecode/as):00384         * Set default palettes. May be able to use stack blast copy vector here
                      (/dd/sourcecode/as):00385         * (once added). LCB. At the very least, use U as source ptr, and pulu a couple
                      (/dd/sourcecode/as):00386         * of 16 bit registers (d,x) to make it faster/smaller.
01EE 108E10C7         (/dd/sourcecode/as):00387                  ldy   #$10c7         Point to default palette register buffer
01F2 10BF1019         (/dd/sourcecode/as):00388                  sty   >WGlobal+G.DefPal     Save it
                      (/dd/sourcecode/as):00389                IFNE  H6309
                      (/dd/sourcecode/as):00390                  ldq   L02F3,pc       Get 4 of default palettes
                      (/dd/sourcecode/as):00391                  stq   ,y             Save 0-3
                      (/dd/sourcecode/as):00392                  stq   8,y            Save 8-11
                      (/dd/sourcecode/as):00393                  ldq   L02F7,pc       Get other 4 default palettes
                      (/dd/sourcecode/as):00394                  stq   4,y            Save 4-7
                      (/dd/sourcecode/as):00395                  stq   12,y           Save 12-15
                      (/dd/sourcecode/as):00396                ELSE
01F6 EC8DFF30         (/dd/sourcecode/as):00397                  ldd   L02F7+2,pc
01FA ED26             (/dd/sourcecode/as):00398                  std   6,y
01FC ED2E             (/dd/sourcecode/as):00399                  std   14,y
01FE EC8DFF24         (/dd/sourcecode/as):00400                  ldd   L02F3+2,pc
0202 ED22             (/dd/sourcecode/as):00401                  std   2,y
0204 ED2A             (/dd/sourcecode/as):00402                  std   10,y
0206 EC8DFF1A         (/dd/sourcecode/as):00403                  ldd   L02F3,pc
020A EDA4             (/dd/sourcecode/as):00404                  std   ,y
020C ED28             (/dd/sourcecode/as):00405                  std   8,y
020E EC8DFF16         (/dd/sourcecode/as):00406                  ldd   L02F7,pc
0212 ED24             (/dd/sourcecode/as):00407                  std   4,y
0214 ED2C             (/dd/sourcecode/as):00408                  std   12,y
                      (/dd/sourcecode/as):00409                ENDC
0216 EE62             (/dd/sourcecode/as):00410         L01DB    ldu   2,s            Get device static mem
0218 10AEE4           (/dd/sourcecode/as):00411                  ldy   ,s             Get path descriptor pointer
021B 30C838           (/dd/sourcecode/as):00412                  leax  CC3Parm,u      Point to parameters
021E AFC82F           (/dd/sourcecode/as):00413                  stx   V.PrmStrt,u    Save it as param start pointer
0221 AFC831           (/dd/sourcecode/as):00414                  stx   V.NxtPrm,u     Save it as pointer to next param
0224 E6A82E           (/dd/sourcecode/as):00415                  ldb   IT.WND,y       Get window # from device dsc
0227 E7C836           (/dd/sourcecode/as):00416                  stb   V.DWNum,u      Save it as window # in static mem
                      (/dd/sourcecode/as):00417         * If normal window # (0-31), mark as used in window bit table
                      (/dd/sourcecode/as):00418         * If high bit set (like /W's $FF), don't allocate, let SS.Open call use next
                      (/dd/sourcecode/as):00419         *  available one and let it mark which one it found
022A 2B03             (/dd/sourcecode/as):00420                  bmi   L01F4          Skip ahead if /w type (Wildcard)
022C 4F               (/dd/sourcecode/as):00421                  clra                 Clear MSB of window #
022D 8D37             (/dd/sourcecode/as):00422                  bsr   L024A          Allocate window in 32 bit window used table
022F 17060B           (/dd/sourcecode/as):00423         L01F4    lbsr  L07B0          Find empty window tbl entry & put in linked list
0232 5F               (/dd/sourcecode/as):00424                  clrb                 No error & return
0233 35E0             (/dd/sourcecode/as):00425                  puls  u,y,pc
                      (/dd/sourcecode/as):00426         
                      (/dd/sourcecode/as):00427         * Link to module
0235 327E             (/dd/sourcecode/as):00428         L01FB    leas  -2,s           Make buffer for current process dsc.
0237 8D19             (/dd/sourcecode/as):00429                  bsr   L0238          Swap to system process
0239 86C1             (/dd/sourcecode/as):00430                  lda   #Systm+Objct   Link module
023B 103F21           (/dd/sourcecode/as):00431                  os9   F$NMLink
023E 8D1E             (/dd/sourcecode/as):00432                  bsr   L0244          Swap back to current process
0240 200D             (/dd/sourcecode/as):00433                  bra   L022C          Return
                      (/dd/sourcecode/as):00434         
                      (/dd/sourcecode/as):00435         * Load a module
0242 327E             (/dd/sourcecode/as):00436         L021F    leas  -2,s           Make a buffer for current process ptr
0244 8D0C             (/dd/sourcecode/as):00437                  bsr   L0238          Switch to system process descriptor
0246 86C1             (/dd/sourcecode/as):00438                  lda   #Systm+Objct   Load module
0248 DE50             (/dd/sourcecode/as):00439                  ldu   <D.Proc
024A 103F22           (/dd/sourcecode/as):00440                  os9   F$NMLoad
024D 8D0F             (/dd/sourcecode/as):00441         L022A    bsr   L0244          Swap back to current process
024F 3262             (/dd/sourcecode/as):00442         L022C    leas  2,s            Purge stack & return
0251 39               (/dd/sourcecode/as):00443                  rts   
                      (/dd/sourcecode/as):00444         
                      (/dd/sourcecode/as):00445         * Switch to system process descriptor
0252 3406             (/dd/sourcecode/as):00446         L0238    pshs  d              Preserve D
0254 DC50             (/dd/sourcecode/as):00447                  ldd   <D.Proc        Get current process dsc. ptr
0256 ED64             (/dd/sourcecode/as):00448                  std   4,s            Preserve on stack
0258 DC4A             (/dd/sourcecode/as):00449                  ldd   <D.SysPrc      Get system process dsc. ptr
025A DD50             (/dd/sourcecode/as):00450                  std   <D.Proc        Make it the current process
025C 3586             (/dd/sourcecode/as):00451                  puls  d,pc           Restore D & return
                      (/dd/sourcecode/as):00452         
                      (/dd/sourcecode/as):00453         * Switch back to current process
025E 3406             (/dd/sourcecode/as):00454         L0244    pshs  d              Preserve D
0260 EC64             (/dd/sourcecode/as):00455                  ldd   4,s            Get current process ptr
0262 DD50             (/dd/sourcecode/as):00456                  std   <D.Proc        Make it the current process
0264 3586             (/dd/sourcecode/as):00457                  puls  d,pc           Restore D & return
                      (/dd/sourcecode/as):00458         
                      (/dd/sourcecode/as):00459         * Allocate a window
                      (/dd/sourcecode/as):00460         * Entry: D=Window # to allocate
0266 3446             (/dd/sourcecode/as):00461         L024A    pshs  d,u            Preserve U
0268 8DE8             (/dd/sourcecode/as):00462                  bsr   L0238          Swap to system process dsc
026A 8D23             (/dd/sourcecode/as):00463                  bsr   L0279          Get pointer to window allocation table
026C 103F13           (/dd/sourcecode/as):00464                  os9   F$AllBit       Allocate it
026F 8DED             (/dd/sourcecode/as):00465         L0255    bsr   L0244          Swap back to current process
0271 3262             (/dd/sourcecode/as):00466                  leas  2,s            Purge stack
0273 35C0             (/dd/sourcecode/as):00467                  puls  u,pc           Restore U & return
                      (/dd/sourcecode/as):00468         
                      (/dd/sourcecode/as):00469         * Search for a free window
                      (/dd/sourcecode/as):00470         * Entry: D=Starting window #
0275 3446             (/dd/sourcecode/as):00471         L025B    pshs  d,u            Preserve U
0277 8DD9             (/dd/sourcecode/as):00472                  bsr   L0238          Swap to system process dsc
0279 8D14             (/dd/sourcecode/as):00473                  bsr   L0279          Get ptr to window map
027B 3304             (/dd/sourcecode/as):00474                  leau  4,x            Point to end of map
027D 103F12           (/dd/sourcecode/as):00475                  os9   F$SchBit       Find it
0280 20ED             (/dd/sourcecode/as):00476                  bra   L0255          Return with it
                      (/dd/sourcecode/as):00477         
                      (/dd/sourcecode/as):00478         * De-Allocate a window
                      (/dd/sourcecode/as):00479         * Entry: D=Window # to delete
0282 2B12             (/dd/sourcecode/as):00480         L026A    bmi   L0282          Illegal window #
0284 3446             (/dd/sourcecode/as):00481                  pshs  d,u            Preserve U
0286 8DCA             (/dd/sourcecode/as):00482                  bsr   L0238          Swap to system process dsc
0288 8D05             (/dd/sourcecode/as):00483                  bsr   L0279          Get ptr to window map
028A 103F14           (/dd/sourcecode/as):00484                  os9   F$DelBit       Delete it & return
028D 20E0             (/dd/sourcecode/as):00485                  bra   L0255
                      (/dd/sourcecode/as):00486         
                      (/dd/sourcecode/as):00487         * Point to window allocation table
028F 8E1071           (/dd/sourcecode/as):00488         L0279    ldx   #WGlobal+G.WUseTb  Point to window bit table
0292 108E0001         (/dd/sourcecode/as):00489                  ldy   #1             Get # windows to allocate/de-allocate
0296 39               (/dd/sourcecode/as):00490         L0282    rts                  Return
                      (/dd/sourcecode/as):00491         
                      (/dd/sourcecode/as):00492         ******************************
                      (/dd/sourcecode/as):00493         * Terminate routine
                      (/dd/sourcecode/as):00494         * Entry: U=Static mem ptr
                      (/dd/sourcecode/as):00495         *        Y=Path dsc. ptr
0297                  (/dd/sourcecode/as):00496         Term
                      (/dd/sourcecode/as):00497         * Next two lines added by Boisy on 08/22/2007
                      (/dd/sourcecode/as):00498         * This test is necessary to prevent a crash in the case that grfdrv cannot be
                      (/dd/sourcecode/as):00499         * loaded.  If grfdrv isn't properly initialized, then the high bit of BCFFlg will
                      (/dd/sourcecode/as):00500         * be clear.  Without this check, the test for Wt.STbl,y to be equal to $FF would fail,
                      (/dd/sourcecode/as):00501         * and a DWEnd would be attempted.  Since grfdrv's init routine sets Wt.STBl,y to $FFFF
                      (/dd/sourcecode/as):00502         * for each window table entry, this wasn't getting done, and the call to DWEnd would
                      (/dd/sourcecode/as):00503         * be vectored to grfdrv, which wasn't to be found!
0297 7D1024           (/dd/sourcecode/as):00504                  tst   WGlobal+G.BCFFlg was Grfdrv found? (hi bit set if so)
029A 2A6F             (/dd/sourcecode/as):00505                  bpl   TermEx         if not, no nothing got initialized, so leave quietly
029C 4F               (/dd/sourcecode/as):00506                  clra                 Get start window # for de-allocate
029D E6C836           (/dd/sourcecode/as):00507                  ldb   V.DWNum,u      Get device window # from static mem
02A0 3460             (/dd/sourcecode/as):00508                  pshs  u,y            Preserve static mem & path dsc. ptrs
02A2 8DDE             (/dd/sourcecode/as):00509                  bsr   L026A          De-allocate it from window map
02A4 1704A2           (/dd/sourcecode/as):00510                  lbsr  L06AE          Get window table pointer
02A7 A630             (/dd/sourcecode/as):00511                  lda   Wt.STbl,y      Get MSB of screen table ptr
02A9 81FF             (/dd/sourcecode/as):00512                  cmpa  #$FF           Set?
02AB 2604             (/dd/sourcecode/as):00513                  bne   L0298          Yes, go on
02AD A731             (/dd/sourcecode/as):00514                  sta   Wt.STbl+1,y    Get rid of table ptr
02AF 200D             (/dd/sourcecode/as):00515                  bra   L02A5          Go on
                      (/dd/sourcecode/as):00516         
                      (/dd/sourcecode/as):00517         * Send DWEnd to grfdrv
02B1 10AEE4           (/dd/sourcecode/as):00518         L0298    ldy   ,s             Get path dsc. ptr
02B4 EE62             (/dd/sourcecode/as):00519                  ldu   2,s            Get static mem ptr
02B6 C608             (/dd/sourcecode/as):00520                  ldb   #$08           Get callcode for DWEnd
02B8 E7C837           (/dd/sourcecode/as):00521                  stb   V.CallCde,u    Save it in static mem area
02BB 1701F1           (/dd/sourcecode/as):00522                  lbsr  L0452          Go do it
                      (/dd/sourcecode/as):00523         * Clear out device static memory. 6809 Use Mini stack blast clear vector later
02BE 3560             (/dd/sourcecode/as):00524         L02A5    puls  u,y            Restore static mem & path dsc. ptrs
02C0 30C835           (/dd/sourcecode/as):00525                  leax  V.WinNum,u     Point to window entry #
                      (/dd/sourcecode/as):00526                IFNE  H6309
                      (/dd/sourcecode/as):00527                  leay  <Nul1+2,pc     Point to NUL byte
02C3                  (/dd/sourcecode/as):00528         Nul1     ldw   #CC3DSiz-V.WinNum   Size of block to clear
                      (/dd/sourcecode/as):00529                  tfm   y,x+
                      (/dd/sourcecode/as):00530                ELSE
02C3 CC00CB           (/dd/sourcecode/as):00531                  ldd   #CC3DSiz-V.WinNum
02C6 A780             (/dd/sourcecode/as):00532         Lp4      sta   ,x+
02C8 5A               (/dd/sourcecode/as):00533                  decb
02C9 26FB             (/dd/sourcecode/as):00534                  bne   Lp4
                      (/dd/sourcecode/as):00535                ENDC
02CB 6FC81E           (/dd/sourcecode/as):00536                  clr   V.InfVld,u     Clear 'rest of info valid' flag
                      (/dd/sourcecode/as):00537         * Scan window tables for a valid window
02CE 8E1290           (/dd/sourcecode/as):00538                  ldx   #WinBase       Point to base of window tables
02D1 CC2040           (/dd/sourcecode/as):00539                  ldd   #MaxWind*256+Wt.Siz   # of window tables & Size of each table
     02D4             (/dd/sourcecode/as):00540         L02B9    equ   *
                      (/dd/sourcecode/as):00541                IFNE  H6309
                      (/dd/sourcecode/as):00542                  ldw   Wt.STbl,x      Get screen table ptr
                      (/dd/sourcecode/as):00543                  cmpe  #$FF           MSB indicate unused?
                      (/dd/sourcecode/as):00544                  bne   L02F1          No, exit without error
                      (/dd/sourcecode/as):00545         * Just a guess, but if 2nd byte is $FE with 1st being $FF, could be a flag
                      (/dd/sourcecode/as):00546         *  for that this is a "copy" of a window to do overlapped device windows
                      (/dd/sourcecode/as):00547                  cmpf  #$FF           LSB indicate unused?
                      (/dd/sourcecode/as):00548                  bne   L02F1          No, exit without error 
                      (/dd/sourcecode/as):00549                ELSE
02D4 3406             (/dd/sourcecode/as):00550                  pshs  d
02D6 EC10             (/dd/sourcecode/as):00551                  ldd   Wt.STbl,x
02D8 FD11B5           (/dd/sourcecode/as):00552                  std   >GrfMem+gr00B5
02DB 81FF             (/dd/sourcecode/as):00553                  cmpa  #$FF
02DD 262E             (/dd/sourcecode/as):00554                  bne   L02F1B
02DF C1FF             (/dd/sourcecode/as):00555                  cmpb  #$FF
02E1 262A             (/dd/sourcecode/as):00556                  bne   L02F1B         No, exit without error
02E3 3506             (/dd/sourcecode/as):00557                  puls  d 
                      (/dd/sourcecode/as):00558                ENDC
02E5 3A               (/dd/sourcecode/as):00559                  abx                  Point to next window table
02E6 4A               (/dd/sourcecode/as):00560                  deca                 Decrement counter
02E7 26EB             (/dd/sourcecode/as):00561                  bne   L02B9          Do until all 32 entries are checked
                      (/dd/sourcecode/as):00562         * All windows are unallocated, terminate GRFDRV
02E9 1F12             (/dd/sourcecode/as):00563                  tfr   x,y            Move to proper register again
02EB C602             (/dd/sourcecode/as):00564                  ldb   #$02           get grfdrv terminate code
02ED 17009B           (/dd/sourcecode/as):00565                  lbsr  L0101          go do it
02F0 FC106E           (/dd/sourcecode/as):00566                  ldd   >WGlobal+G.GrfEnt   get grfdrv address
02F3 5F               (/dd/sourcecode/as):00567                  clrb                 Make it even page
02F4 1F03             (/dd/sourcecode/as):00568                  tfr   d,u            Move to proper reg for Unlink
02F6 103F02           (/dd/sourcecode/as):00569                  os9   F$UnLink       Unlink GRFDRV
02F9 2517             (/dd/sourcecode/as):00570                  bcs   L02F2          If error unlinking, exit
                      (/dd/sourcecode/as):00571                IFNE  H6309
                      (/dd/sourcecode/as):00572                  clrd  
                      (/dd/sourcecode/as):00573                ELSE
02FB 4F               (/dd/sourcecode/as):00574                  clra  
02FC 5F               (/dd/sourcecode/as):00575                  clrb  
                      (/dd/sourcecode/as):00576                ENDC
02FD FD106E           (/dd/sourcecode/as):00577                  std   >WGlobal+G.GrfEnt   GRFDRV address to non-existant
0300 FE1075           (/dd/sourcecode/as):00578                  ldu   >WGlobal+G.GfxTbl   Get ptr to gfx tables
0303 CC02FF           (/dd/sourcecode/as):00579                  ldd   #$02FF         Size of graphics tables
0306 103F29           (/dd/sourcecode/as):00580                  os9   F$SRtMem       Return graphics table memory to system
0309 2507             (/dd/sourcecode/as):00581                  bcs   L02F2          If error, exit with it
030B 5F               (/dd/sourcecode/as):00582         TermEx   clrb  
030C 39               (/dd/sourcecode/as):00583                  rts   
                      (/dd/sourcecode/as):00584         
                      (/dd/sourcecode/as):00585                IFEQ  H6309
030D 3506             (/dd/sourcecode/as):00586         L02F1B   puls  d
                      (/dd/sourcecode/as):00587                ENDC
030F 5F               (/dd/sourcecode/as):00588         L02F1    clrb                 No error & return
0310 1F12             (/dd/sourcecode/as):00589                  tfr   x,y            Move to proper register
0312 39               (/dd/sourcecode/as):00590         L02F2    rts   
                      (/dd/sourcecode/as):00591         
                      (/dd/sourcecode/as):00592         ****************************
                      (/dd/sourcecode/as):00593         * Main Entry point from VTIO
                      (/dd/sourcecode/as):00594         * Entry: U=Device memory pointer
                      (/dd/sourcecode/as):00595         *        Y=Path descriptor pointer
                      (/dd/sourcecode/as):00596         
0313 16FDE3           (/dd/sourcecode/as):00597         entry    lbra  Init           Initialization
0316 2011             (/dd/sourcecode/as):00598                  bra   Write          Write
0318 12               (/dd/sourcecode/as):00599                  nop   
0319 160842           (/dd/sourcecode/as):00600                  lbra  GetStt         Get status
031C 160901           (/dd/sourcecode/as):00601                  lbra  SetStt         Set status
031F 16FF75           (/dd/sourcecode/as):00602                  lbra  Term           Terminate
0322 160A3C           (/dd/sourcecode/as):00603                  lbra  L0C68          Window special processing
                      (/dd/sourcecode/as):00604         
0325 53               (/dd/sourcecode/as):00605         L0A96    comb                 Set error flag
0326 C6D0             (/dd/sourcecode/as):00606                  ldb   #E$UnkSvc      Unknown service error
0328 39               (/dd/sourcecode/as):00607                  rts   
                      (/dd/sourcecode/as):00608         
                      (/dd/sourcecode/as):00609         ****************************
                      (/dd/sourcecode/as):00610         * Write routine: Optimized for normal text
                      (/dd/sourcecode/as):00611         * Entry: A=Char to write
                      (/dd/sourcecode/as):00612         *        U=Device memory pointer
                      (/dd/sourcecode/as):00613         *        Y=Path descriptor pointer
0329 C63A             (/dd/sourcecode/as):00614         Write    ldb   #$3a           get grfdrv function for Alpha put as default
032B 8120             (/dd/sourcecode/as):00615                  cmpa  #C$SPAC        Space or higher?
032D 2453             (/dd/sourcecode/as):00616                  bhs   L03A1          Yes, do alpha put
032F 811B             (/dd/sourcecode/as):00617                  cmpa  #$1B           Escape code?
0331 263C             (/dd/sourcecode/as):00618                  bne   L0347          No, keep checking
0333 E6D82F           (/dd/sourcecode/as):00619                  ldb   [V.PrmStrt,u]  get first parameter from parameter area
0336 C155             (/dd/sourcecode/as):00620                  cmpb  #$55           Past maximum supported escape code?
0338 22EB             (/dd/sourcecode/as):00621                  bhi   L0A96          Yes, exit with error
033A C020             (/dd/sourcecode/as):00622                  subb  #$20           Adjust it down for table offset
033C 2BE7             (/dd/sourcecode/as):00623                  bmi   L0A96          Below minimum supported code, exit with error
033E 58               (/dd/sourcecode/as):00624                  lslb                 Adjust for 4 bytes/entry
033F 58               (/dd/sourcecode/as):00625                  lslb  
0340 308DFCCF         (/dd/sourcecode/as):00626                  leax  >L0027,pc      Point to ESC code vector table
0344 3A               (/dd/sourcecode/as):00627                  abx                  Point to 4 byte entry
                      (/dd/sourcecode/as):00628                IFNE  H6309
                      (/dd/sourcecode/as):00629                  ldq   ,x             A=# param bytes,B=GRFDRV code,W=vector offset
                      (/dd/sourcecode/as):00630                ELSE
0345 EC02             (/dd/sourcecode/as):00631                  ldd   2,x
0347 FD11B5           (/dd/sourcecode/as):00632                  std   >GrfMem+gr00B5
034A EC84             (/dd/sourcecode/as):00633                  ldd   ,x
                      (/dd/sourcecode/as):00634                ENDC
034C E7C837           (/dd/sourcecode/as):00635                  stb   V.CallCde,u    Save GRFDRV code in Static mem (need for L00F7)
034F 4D               (/dd/sourcecode/as):00636                  tsta                 Any parameter bytes needed?
0350 2712             (/dd/sourcecode/as):00637                  beq   L0339          No, just go do function
0352 2BD1             (/dd/sourcecode/as):00638                  bmi   L0A96          $FF=Empty, exit with error
0354 A7C82C           (/dd/sourcecode/as):00639                  sta   V.ParmCnt,u    Preserve for VTIO to get the rest
     0357             (/dd/sourcecode/as):00640         L032F    equ   *
                      (/dd/sourcecode/as):00641                IFNE  H6309
                      (/dd/sourcecode/as):00642                  addr  w,x            Point to vector
                      (/dd/sourcecode/as):00643                ELSE
                      (/dd/sourcecode/as):00644         * 6809 - might use DP scratch var here instead of pshs/puls b. LCB
0357 3404             (/dd/sourcecode/as):00645                  pshs  b
0359 EC02             (/dd/sourcecode/as):00646                  ldd   2,x
035B 308B             (/dd/sourcecode/as):00647                  leax  d,x
035D 3504             (/dd/sourcecode/as):00648                  puls  b
                      (/dd/sourcecode/as):00649                ENDC
035F AFC82D           (/dd/sourcecode/as):00650                  stx   V.ParmVct,u    Save vector for VTIO to call
0362 4F               (/dd/sourcecode/as):00651                  clra                 No error & return so VTIO can get rest of parms
0363 39               (/dd/sourcecode/as):00652                  rts   
                      (/dd/sourcecode/as):00653         
                      (/dd/sourcecode/as):00654         * No param calls go here
     0364             (/dd/sourcecode/as):00655         L0339    equ   *
                      (/dd/sourcecode/as):00656                IFNE  H6309
                      (/dd/sourcecode/as):00657                  jmp   w,x            Go execute function
                      (/dd/sourcecode/as):00658                ELSE
                      (/dd/sourcecode/as):00659         * 6809 - use DP scratch var here instead of pshs/puls d. LCB
0364 3406             (/dd/sourcecode/as):00660                  pshs  d
0366 FC11B5           (/dd/sourcecode/as):00661                  ldd   >GrfMem+gr00B5
0369 308B             (/dd/sourcecode/as):00662                  leax  d,x
036B 3506             (/dd/sourcecode/as):00663                  puls  d
036D 6E84             (/dd/sourcecode/as):00664                  jmp   ,x 
                      (/dd/sourcecode/as):00665                ENDC
                      (/dd/sourcecode/as):00666         
                      (/dd/sourcecode/as):00667         * Check special display codes
036F 811F             (/dd/sourcecode/as):00668         L0347    cmpa  #$1F           $1F codes?
0371 2774             (/dd/sourcecode/as):00669                  beq   L038D          Yes, go process them
0373 8102             (/dd/sourcecode/as):00670         L034D    cmpa  #$02           Cursor X,Y?
0375 2605             (/dd/sourcecode/as):00671                  bne   L0356          No, check next
0377 308C57           (/dd/sourcecode/as):00672                  leax  <L036E,pc      Point to Cursor X,Y routine
037A 204D             (/dd/sourcecode/as):00673                  bra   L0362          Let VTIO get rest of parms
                      (/dd/sourcecode/as):00674         
037C 8105             (/dd/sourcecode/as):00675         L0356    cmpa  #$05           Cursor On/Off?
037E 276E             (/dd/sourcecode/as):00676                  beq   L0396          Go to cursor on/off routine
0380 C63C             (/dd/sourcecode/as):00677         L039F    ldb   #$3C           Otherwise, GrfDrv function: Control codes
0382 3406             (/dd/sourcecode/as):00678         L03A1    pshs  d              Preserve write char & GrfDrv function code
0384 170391           (/dd/sourcecode/as):00679                  lbsr  L06A0          Get window table ptr & verify it
0387 253B             (/dd/sourcecode/as):00680                  bcs   UnDef          Couldn't, exit with Window Undefined error
0389 3506             (/dd/sourcecode/as):00681                  puls  d              Get back write char & GrfDrv function code
                      (/dd/sourcecode/as):00682         * Execute GrfDrv
                      (/dd/sourcecode/as):00683         * Entry: @ L0101 : B=Callcode for GRFDRV
                      (/dd/sourcecode/as):00684         * All regs are thrown onto stack for 'fake' RTI done by [D.Flip1] (in vector
                      (/dd/sourcecode/as):00685         * page RAM at the top of OS9p1) after switching to System Task #1 (GRFDRV)
                      (/dd/sourcecode/as):00686         * Added protection for regE; RG 2003/10/15
038B BE106E           (/dd/sourcecode/as):00687         L0101    ldx   >WGlobal+G.GrfEnt   Get GrfDrv entry address
038E 1A80             (/dd/sourcecode/as):00688                  orcc  #Entire        Set up 'pull all regs' for RTI
                      (/dd/sourcecode/as):00689                IFNE  H6309
                      (/dd/sourcecode/as):00690                  pshsw
                      (/dd/sourcecode/as):00691                  tfr   cc,e
                      (/dd/sourcecode/as):00692                  ste   >WGlobal+g0005
                      (/dd/sourcecode/as):00693                  pulsw
                      (/dd/sourcecode/as):00694                ELSE
                      (/dd/sourcecode/as):00695         * 6809 - use DP scratch var here instead of pshs/puls d. LCB
0390 3406             (/dd/sourcecode/as):00696                  pshs  d
0392 FC11B5           (/dd/sourcecode/as):00697                  ldd   >GrfMem+gr00B5
0395 FD11B5           (/dd/sourcecode/as):00698                  std   >GrfMem+gr00B5
0398 1FA8             (/dd/sourcecode/as):00699                  tfr   cc,a
039A B71005           (/dd/sourcecode/as):00700                  sta   >WGlobal+g0005
039D 3506             (/dd/sourcecode/as):00701                  puls  d
                      (/dd/sourcecode/as):00702                ENDC
039F 1A50             (/dd/sourcecode/as):00703                  orcc  #IntMasks      Disable IRQ's
03A1 10FF1007         (/dd/sourcecode/as):00704                  sts   >WGlobal+G.GrfStk   Save stack ptr for GRFDRV
03A5 10DEA7           (/dd/sourcecode/as):00705                  lds   <D.CCStk       Get new stack ptr
                      (/dd/sourcecode/as):00706         * Dump all registers to stack for fake RTI
03A8 34F8             (/dd/sourcecode/as):00707                  pshs  dp,x,y,u,pc    dump all registers to stack for fake RTI
                      (/dd/sourcecode/as):00708                IFNE  H6309
                      (/dd/sourcecode/as):00709                  pshsw                no register to push for 6809
                      (/dd/sourcecode/as):00710                  lde   >WGlobal+g0005   get back regDP 
                      (/dd/sourcecode/as):00711                ENDC
03AA 3407             (/dd/sourcecode/as):00712                  pshs  cc,d
03AC AF6A             (/dd/sourcecode/as):00713                  stx   R$PC,s         Save grfdrv entry address as the PC on stack
                      (/dd/sourcecode/as):00714                IFNE  H6309
                      (/dd/sourcecode/as):00715                  ste   R$CC,s         Save CC bitE into CC on stack
                      (/dd/sourcecode/as):00716                  ste   >WGlobal+G.GfBusy   Flag grfdrv busy
                      (/dd/sourcecode/as):00717                ELSE
03AE B61005           (/dd/sourcecode/as):00718                  lda   >WGlobal+g0005
03B1 A7E4             (/dd/sourcecode/as):00719                  sta   R$CC,s
03B3 B71002           (/dd/sourcecode/as):00720                  sta   >WGlobal+G.GfBusy   Flag grfdrv busy 
03B6 A661             (/dd/sourcecode/as):00721                  lda   R$A,s          may not be needed
                      (/dd/sourcecode/as):00722                ENDC
03B8 6E9F00AB         (/dd/sourcecode/as):00723                  jmp   [>D.Flip1] Flip to GRFDRV and execute it
                      (/dd/sourcecode/as):00724         
                      (/dd/sourcecode/as):00725         * GRFDRV will execute function, then call [D.Flip0] to switch back to here. It
                      (/dd/sourcecode/as):00726         * will use an RTS to return to the code here that called L00F7 or L0101 in the
                      (/dd/sourcecode/as):00727         * first place. Only SP,PC & CC are set up- ALL OTHER REGISTERS MAY BE MODIFIED
                      (/dd/sourcecode/as):00728         
                      (/dd/sourcecode/as):00729         * Entry point for GRFDRV for most GFX commands
03BC BE100C           (/dd/sourcecode/as):00730         L00F7    ldx   >WGlobal+G.CurDvM    Get current device memory ptr
03BF E68837           (/dd/sourcecode/as):00731                  ldb   V.CallCde,x    Get callcode from it
03C2 20C7             (/dd/sourcecode/as):00732                  bra   L0101          Go call GRFDRV
                      (/dd/sourcecode/as):00733         
03C4 3262             (/dd/sourcecode/as):00734         UnDef    leas  2,s            Eat stack
03C6 C6C4             (/dd/sourcecode/as):00735         UnDef2   ldb   #E$WUndef      Undefined Window error
03C8 39               (/dd/sourcecode/as):00736                  rts   
                      (/dd/sourcecode/as):00737         
                      (/dd/sourcecode/as):00738         * Set counts up for CC3/TC9IO to get rest of needed parms
03C9 A7C82C           (/dd/sourcecode/as):00739         L0362    sta   V.ParmCnt,u    Store # bytes to get for params in static mem
03CC AFC82D           (/dd/sourcecode/as):00740                  stx   V.ParmVct,u    Store vector to function in static mem
03CF 4F               (/dd/sourcecode/as):00741                  clra                 No error & return so VTIO can get rest of parms
03D0 39               (/dd/sourcecode/as):00742                  rts   
                      (/dd/sourcecode/as):00743         
                      (/dd/sourcecode/as):00744         * Process CurXY after parms are gotten
                      (/dd/sourcecode/as):00745         * Entry: U=Static mem ptr
03D1 3440             (/dd/sourcecode/as):00746         L036E    pshs  u              Save static mem ptr (in case DWSet modifies U)
03D3 170342           (/dd/sourcecode/as):00747                  lbsr  L06A0          Get window table ptr
03D6 3540             (/dd/sourcecode/as):00748                  puls  u              Get back static mem ptr
03D8 25EC             (/dd/sourcecode/as):00749                  bcs   UnDef2         Couldn't, exit with Window undefined error
03DA ECD82F           (/dd/sourcecode/as):00750                  ldd   [V.PrmStrt,u]  get the coords requested
03DD B71147           (/dd/sourcecode/as):00751         L0380    sta   >GrfMem+gr0047 Save X coord
03E0 F71149           (/dd/sourcecode/as):00752                  stb   >GrfMem+gr0049 Save Y coord
03E3 C642             (/dd/sourcecode/as):00753                  ldb   #$42           GrfDrv function: Goto X/Y
03E5 20A4             (/dd/sourcecode/as):00754         L038A    bra   L0101          Execute Grfdrv
                      (/dd/sourcecode/as):00755         
                      (/dd/sourcecode/as):00756         * Process $1f display codes
03E7 A6D82F           (/dd/sourcecode/as):00757         L038D    lda   [V.PrmStrt,u]  get type of $1f function
03EA C640             (/dd/sourcecode/as):00758                  ldb   #$40           GrfDrv function: $1F codes
03EC 2094             (/dd/sourcecode/as):00759                  bra   L03A1          Go get window tbl ptr & execute GRFDRV
                      (/dd/sourcecode/as):00760         
                      (/dd/sourcecode/as):00761         * Cursor on/off
03EE A6D82F           (/dd/sourcecode/as):00762         L0396    lda   [V.PrmStrt,u]  get cursor on/off parameter byte
03F1 C63E             (/dd/sourcecode/as):00763                  ldb   #$3E           GrfDrv function: Cursor on/off
03F3 208D             (/dd/sourcecode/as):00764                  bra   L03A1          Go get window tbl ptr & execute GRFDRV
                      (/dd/sourcecode/as):00765         
                      (/dd/sourcecode/as):00766         ******************************
                      (/dd/sourcecode/as):00767         * DWSet entry point
                      (/dd/sourcecode/as):00768         * Entry: U=Device static mem pointer
                      (/dd/sourcecode/as):00769         *        Y=Path descriptor
                      (/dd/sourcecode/as):00770         *        X=Param pointer
03F5 3460             (/dd/sourcecode/as):00771         DWSet    pshs  y,u            preserve static mem & path descriptor pointers
03F7 17034F           (/dd/sourcecode/as):00772                  lbsr  L06AE          get window table pointer for current window
                      (/dd/sourcecode/as):00773         * Window already defined?
03FA A630             (/dd/sourcecode/as):00774                  lda   Wt.STbl,y      Get MSB of screen table ptr
03FC 81FF             (/dd/sourcecode/as):00775                  cmpa  #$FF           Already defined?
03FE 2705             (/dd/sourcecode/as):00776                  beq   L03BF          No, skip ahead
0400 53               (/dd/sourcecode/as):00777                  comb                 Exit with Window Already Defined error
0401 C6B8             (/dd/sourcecode/as):00778                  ldb   #E$WADef       get window already defined error
0403 35E0             (/dd/sourcecode/as):00779                  puls  u,y,pc         Restore regs & return
                      (/dd/sourcecode/as):00780         
                      (/dd/sourcecode/as):00781         * Check screen type
0405 A680             (/dd/sourcecode/as):00782         L03BF    lda   ,x+            Get screen type from parameters
0407 170475           (/dd/sourcecode/as):00783                  lbsr  L07E0          Convert it to internal code
040A 2405             (/dd/sourcecode/as):00784                  bcc   L03CB          it's good, skip ahead
040C 3560             (/dd/sourcecode/as):00785                  puls  u,y            Exit with Illegal Window Definition error
040E 160334           (/dd/sourcecode/as):00786                  lbra  L0697          return illegal window definition error
                      (/dd/sourcecode/as):00787         
                      (/dd/sourcecode/as):00788         * Legal window type, make sure coords & size are at least reasonable
0411 F71160           (/dd/sourcecode/as):00789         L03CB    stb   >GrfMem+Gr.STYMk   Save screen type in Grfdrv Mem
0414 8D5A             (/dd/sourcecode/as):00790                  bsr   L0413          Move coord's, size & pals. to window table
0416 2404             (/dd/sourcecode/as):00791                  bcc   L03D7          Legal values, skip ahead
0418 C6C3             (/dd/sourcecode/as):00792                  ldb   #E$IWDef       Illegal Window Definition
041A 35E0             (/dd/sourcecode/as):00793                  puls  pc,u,y         restore regs & return with error
                      (/dd/sourcecode/as):00794         
                      (/dd/sourcecode/as):00795         * Coordinates & size are within 0-127, continue
041C C1FF             (/dd/sourcecode/as):00796         L03D7    cmpb  #$FF           is it same screen?
041E 2715             (/dd/sourcecode/as):00797                  beq   L03F2          yes, don't bother getting border color
0420 308C06           (/dd/sourcecode/as):00798                  leax  <L03E5,pc      point to processor for border color
0423 8601             (/dd/sourcecode/as):00799                  lda   #$01           get # bytes to get
0425 3560             (/dd/sourcecode/as):00800                  puls  u,y            purge stack
0427 20A0             (/dd/sourcecode/as):00801                  bra   L0362          let VTIO get it for me
                      (/dd/sourcecode/as):00802         
                      (/dd/sourcecode/as):00803         * If the window was not on the current screen grab the optional border color
0429 3460             (/dd/sourcecode/as):00804         L03E5    pshs  u,y            Preserve static mem & path dsc. ptrs
042B 17031B           (/dd/sourcecode/as):00805                  lbsr  L06AE          get window table pointer into Y
042E A684             (/dd/sourcecode/as):00806                  lda   ,x             get border color
0430 B7115A           (/dd/sourcecode/as):00807                  sta   >GrfMem+gr005A save it in grfdrv mem
0433 2007             (/dd/sourcecode/as):00808                  bra   L03F9          continue processing
                      (/dd/sourcecode/as):00809         
                      (/dd/sourcecode/as):00810         * Current displayed screen or current process screen goes here
0435 AEE4             (/dd/sourcecode/as):00811         L03F2    ldx   ,s             get path descriptor pointer
0437 1703B4           (/dd/sourcecode/as):00812                  lbsr  L075C          check validity of screen table
043A 252B             (/dd/sourcecode/as):00813                  bcs   L0408          error, return
                      (/dd/sourcecode/as):00814         * all parameters are moved, let grfdrv do the rest
043C 17FF7D           (/dd/sourcecode/as):00815         L03F9    lbsr  L00F7          let grfdrv take over
043F 2528             (/dd/sourcecode/as):00816                  bcs   L040A          grfdrv error, return
0441 EE62             (/dd/sourcecode/as):00817                  ldu   2,s            get static mem pointer
0443 6CC81E           (/dd/sourcecode/as):00818                  inc   V.InfVld,u     Set flag to indicate rest of static mem valid
                      (/dd/sourcecode/as):00819                IFNE  H6309
                      (/dd/sourcecode/as):00820                  ldw   >WGlobal+G.CurDev   Get current window ptr
                      (/dd/sourcecode/as):00821                ELSE
0446 10BE1020         (/dd/sourcecode/as):00822                  ldy   >WGlobal+G.CurDev
044A 10BF11B5         (/dd/sourcecode/as):00823                  sty   >GrfMem+gr00B5
                      (/dd/sourcecode/as):00824                ENDC
044E 2708             (/dd/sourcecode/as):00825                  beq   Nowin          None, skip ahead
                      (/dd/sourcecode/as):00826                IFNE  H6309
                      (/dd/sourcecode/as):00827                  lda   >V.ULCase,w    Get special keyflags
                      (/dd/sourcecode/as):00828                ELSE
0450 A6A90021         (/dd/sourcecode/as):00829                  lda   >V.ULCase,y
                      (/dd/sourcecode/as):00830                ENDC
0454 A7C90021         (/dd/sourcecode/as):00831                  sta   >V.ULCase,u    Save in new window
0458 10AEE4           (/dd/sourcecode/as):00832         Nowin    ldy   ,s             get path descriptor pointer
045B 8D36             (/dd/sourcecode/as):00833                  bsr   L0436          setup lines per page
                      (/dd/sourcecode/as):00834         
                      (/dd/sourcecode/as):00835         * 6809/6309 LCB NOTE: THE CHANGES HERE MAY BE RESPONSIBLE FOR "LOCKING" IN THE WINDOWING SYSTEM TO
                      (/dd/sourcecode/as):00836         * ALWAYS DISPLAYING THE SAME PROCESS'S WINDOWS IF IT IS PAGE FLIPPING (BOUNCING BALL
                      (/dd/sourcecode/as):00837         * DEMO, VIEWGIF, ETC.) AND MAY NEED TO BE REMOVED.
                      (/dd/sourcecode/as):00838         
                      (/dd/sourcecode/as):00839         * The following new lines permit a sequence like
                      (/dd/sourcecode/as):00840         * display 1b 24    kill window
                      (/dd/sourcecode/as):00841         * display 1b 20 2 0 0 50 18 0 1 2  change window format
                      (/dd/sourcecode/as):00842         * without requiring the additional line
                      (/dd/sourcecode/as):00843         * display 1b 21    display window
                      (/dd/sourcecode/as):00844         * which seems redundant. The change is compatible with MultiVue. RG
045D F61160           (/dd/sourcecode/as):00845                  ldb   >GrfMem+Gr.STYMk   get screen type from Grfdrv Mem
0460 C101             (/dd/sourcecode/as):00846                  cmpb  #1             Is it an overlay?
0462 2303             (/dd/sourcecode/as):00847                  bls   L0408          don't flag screen if overlay
0464 6CC823           (/dd/sourcecode/as):00848                  inc   V.ScrChg,u     Flag that screen has changed for AltIRQ routine
                      (/dd/sourcecode/as):00849         * End of change to Nowin. RG
0467 35E0             (/dd/sourcecode/as):00850         L0408    puls  pc,u,y         all done, return
                      (/dd/sourcecode/as):00851         
                      (/dd/sourcecode/as):00852         * DWSet didn't work, flag window table entry as free again
0469 CEFFFF           (/dd/sourcecode/as):00853         L040A    ldu   #$FFFF         get table free value
046C EF30             (/dd/sourcecode/as):00854                  stu   Wt.STbl,y      put it in window table
046E 35E0             (/dd/sourcecode/as):00855                  puls  y,u,pc         restore & return
                      (/dd/sourcecode/as):00856         
                      (/dd/sourcecode/as):00857         * Move co-ordinates/size & fore/back colors into window table
0470 3406             (/dd/sourcecode/as):00858         L0413    pshs  d              Preserve D
0472 8D0C             (/dd/sourcecode/as):00859                  bsr   L0423          Move coordinates & size
0474 2506             (/dd/sourcecode/as):00860                  bcs   L041F          Error in size, return the error
0476 EC81             (/dd/sourcecode/as):00861                  ldd   ,x++           Get foreground/background colors
0478 ED26             (/dd/sourcecode/as):00862                  std   Wt.Fore,y      Put it in window table
047A 3586             (/dd/sourcecode/as):00863         L041D    puls  d,pc           Restore D & return
                      (/dd/sourcecode/as):00864         
047C E761             (/dd/sourcecode/as):00865         L041F    stb   1,s            Save error code into B on stack
047E 3586             (/dd/sourcecode/as):00866                  puls  d,pc           Restore D & return
                      (/dd/sourcecode/as):00867         
                      (/dd/sourcecode/as):00868         * Move start coordinates & size into window table
                      (/dd/sourcecode/as):00869         * Entry: X=Pointer to co-rdinates
                      (/dd/sourcecode/as):00870         *        Y=Window table pointer
0480 EC81             (/dd/sourcecode/as):00871         L0423    ldd   ,x++           Get start coordinates
0482 ED35             (/dd/sourcecode/as):00872                  std   Wt.CPX,y       Save 'em
0484 A680             (/dd/sourcecode/as):00873                  lda   ,x+            Get X size
0486 2F04             (/dd/sourcecode/as):00874                  ble   L042F          Too big or 0, exit with error
0488 E680             (/dd/sourcecode/as):00875                  ldb   ,x+            Get Y size
048A 2E03             (/dd/sourcecode/as):00876                  bgt   L0432          Above 0, go on
048C 1602B6           (/dd/sourcecode/as):00877         L042F    lbra  L0697          Return error
                      (/dd/sourcecode/as):00878         
048F ED37             (/dd/sourcecode/as):00879         L0432    std   Wt.SZX,y       Save size to window table
0491 5F               (/dd/sourcecode/as):00880                  clrb                 Clear error & return
0492 39               (/dd/sourcecode/as):00881                  rts   
                      (/dd/sourcecode/as):00882         
                      (/dd/sourcecode/as):00883         * Setup lines/page variables
                      (/dd/sourcecode/as):00884         * Entry: Y=Path descriptor pointer
                      (/dd/sourcecode/as):00885         *        U=Device static mem pointer for new window
0493 3420             (/dd/sourcecode/as):00886         L0436    pshs  y              L06AE resets y
0495 1702B1           (/dd/sourcecode/as):00887                  lbsr  L06AE          get window table pointer
0498 E638             (/dd/sourcecode/as):00888                  ldb   Wt.SZY,y       Get Y size
049A 3520             (/dd/sourcecode/as):00889                  puls  y              restore reg
049C E747             (/dd/sourcecode/as):00890                  stb   V.LINE,u       save it in static mem for SCF
049E E7A828           (/dd/sourcecode/as):00891                  stb   PD.PAG,y       Save it as the default in path descriptor
04A1 5F               (/dd/sourcecode/as):00892                  clrb                 clear errors
04A2 39               (/dd/sourcecode/as):00893                  rts                  return
                      (/dd/sourcecode/as):00894         
                      (/dd/sourcecode/as):00895         ****************************
                      (/dd/sourcecode/as):00896         * DWEnd entry point
                      (/dd/sourcecode/as):00897         * Entry: U=Static memory pointer
                      (/dd/sourcecode/as):00898         *        Y=Path descriptor pointer
04A3 3440             (/dd/sourcecode/as):00899         DWEnd    pshs  u
04A5 8D08             (/dd/sourcecode/as):00900                  bsr   L0452          process it
04A7 3540             (/dd/sourcecode/as):00901                  puls  u
04A9 2503             (/dd/sourcecode/as):00902                  bcs   L0451          error, return
04AB 6FC81E           (/dd/sourcecode/as):00903                  clr   V.InfVld,u     clear flag - static mem no longer valid & return
04AE 39               (/dd/sourcecode/as):00904         L0451    rts
                      (/dd/sourcecode/as):00905         
                      (/dd/sourcecode/as):00906         * Check for legal screen table (PRESERVES U)
04AF 170297           (/dd/sourcecode/as):00907         L0452    lbsr  L06AE          get pointer to window table into Y
04B2 A630             (/dd/sourcecode/as):00908                  lda   Wt.STbl,y      screen table exist?
04B4 2A04             (/dd/sourcecode/as):00909                  bpl   L0461          screen table exists, skip ahead
04B6 53               (/dd/sourcecode/as):00910                  comb                 set carry for error
04B7 16025B           (/dd/sourcecode/as):00911                  lbra  L069D          return undefined window error
                      (/dd/sourcecode/as):00912         
                      (/dd/sourcecode/as):00913         * Window legal, Delete any overlays (PRESERVES U)
04BA A632             (/dd/sourcecode/as):00914         L0461    lda   Wt.BLnk,y      Any overlay windows?
04BC 2B13             (/dd/sourcecode/as):00915                  bmi   L0479          No, skip ahead
04BE 3442             (/dd/sourcecode/as):00916                  pshs  a,u            save parent window # & static mem
04C0 8D7E             (/dd/sourcecode/as):00917                  bsr   L04EA          Do a CWArea to full size
04C2 C60C             (/dd/sourcecode/as):00918                  ldb   #$0C           Grfdrv function: Overlay window end
04C4 17FEC4           (/dd/sourcecode/as):00919                  lbsr  L0101
04C7 3542             (/dd/sourcecode/as):00920                  puls  a,u            restore parent & static mem
04C9 A7C835           (/dd/sourcecode/as):00921                  sta   V.WinNum,u     save parent as current
04CC 17027A           (/dd/sourcecode/as):00922                  lbsr  L06AE          get it's window table pointer
04CF 20E9             (/dd/sourcecode/as):00923                  bra   L0461          keep going
                      (/dd/sourcecode/as):00924         
                      (/dd/sourcecode/as):00925         * Change to full window size & clear out the graphics table entry
                      (/dd/sourcecode/as):00926         *   clear out the current window & screen table ptrs
04D1 3440             (/dd/sourcecode/as):00927         L0479    pshs  u              save static mem pointer
04D3 8D6B             (/dd/sourcecode/as):00928                  bsr   L04EA          Do a CWArea to full size
                      (/dd/sourcecode/as):00929         * clear out gfx table entry
04D5 3540             (/dd/sourcecode/as):00930                  puls  u              Restore static mem ptr
04D7 17027B           (/dd/sourcecode/as):00931                  lbsr  L06B9          Point to gfx table entry for this window
                      (/dd/sourcecode/as):00932                IFNE  H6309
                      (/dd/sourcecode/as):00933                  leau  <Nul2+2,pc
04DA                  (/dd/sourcecode/as):00934         Nul2     ldw   #$0012
                      (/dd/sourcecode/as):00935                  tfm   u,x+
                      (/dd/sourcecode/as):00936                ELSE
                      (/dd/sourcecode/as):00937         * 6809 - use DP scratch var here instead of pshs/puls b. LCB
                      (/dd/sourcecode/as):00938         * Or, pshs  u, lda #9 / ldu #0 / stu ,x++ / deca / bne / puls u
04DA 3404             (/dd/sourcecode/as):00939                  pshs  b
04DC CC0012           (/dd/sourcecode/as):00940                  ldd   #$0012
04DF A780             (/dd/sourcecode/as):00941         Nul2     sta   ,x+
04E1 5A               (/dd/sourcecode/as):00942                  decb
04E2 26FB             (/dd/sourcecode/as):00943                  bne   Nul2
04E4 3504             (/dd/sourcecode/as):00944                  puls  b
                      (/dd/sourcecode/as):00945                ENDC
04E6 B6100B           (/dd/sourcecode/as):00946                  lda   >WGlobal+G.WinType   is this a window?
04E9 2B0B             (/dd/sourcecode/as):00947                  bmi   L0499      no, return
                      (/dd/sourcecode/as):00948                IFNE  H6309
                      (/dd/sourcecode/as):00949                  clrd  
                      (/dd/sourcecode/as):00950                  stq   >GrfMem+gr002E   clear window & screen table entrys
                      (/dd/sourcecode/as):00951                ELSE
04EB 4F               (/dd/sourcecode/as):00952                  clra
04EC 5F               (/dd/sourcecode/as):00953                  clrb
04ED FD11B5           (/dd/sourcecode/as):00954                  std   >GrfMem+gr00B5 
04F0 FD112E           (/dd/sourcecode/as):00955                  std   >GrfMem+gr002E   clear window & screen table entrys
04F3 FD1130           (/dd/sourcecode/as):00956                  std   >GrfMem+gr002E+2
                      (/dd/sourcecode/as):00957                ENDC
04F6 16FEC3           (/dd/sourcecode/as):00958         L0499    lbra  L00F7          let grfdrv do the rest
                      (/dd/sourcecode/as):00959         
                      (/dd/sourcecode/as):00960         *****************************
                      (/dd/sourcecode/as):00961         * OWSet entry point
                      (/dd/sourcecode/as):00962         * Entry: U=Device static mem pointer
                      (/dd/sourcecode/as):00963         *        Y=Path descriptor pointer
                      (/dd/sourcecode/as):00964         *        X=Parameter pointer
04F9 3460             (/dd/sourcecode/as):00965         OWSet    pshs  y,u            preserve path descriptor & static mem pointers
04FB 17021A           (/dd/sourcecode/as):00966                  lbsr  L06A0          verify window table
04FE 3560             (/dd/sourcecode/as):00967                  puls  u,y            restore pointers
0500 10250211         (/dd/sourcecode/as):00968                  lbcs  L069D          not a legal window, return undefined window error
0504 3460             (/dd/sourcecode/as):00969                  pshs  u,y            preserve path descriptor & static mem pointers
0506 170334           (/dd/sourcecode/as):00970                  lbsr  L07B0          get a blank window table pointer
0509 2406             (/dd/sourcecode/as):00971                  bcc   L04B6          we found one, skip ahead
050B 35E0             (/dd/sourcecode/as):00972                  puls  u,y,pc         purge stack & return
                      (/dd/sourcecode/as):00973         
050D 3560             (/dd/sourcecode/as):00974         L04B2    puls  u,y
050F 201C             (/dd/sourcecode/as):00975                  bra   L04D5
                      (/dd/sourcecode/as):00976         
                      (/dd/sourcecode/as):00977         * We have a new window table for overlay, so process parameters
0511 A680             (/dd/sourcecode/as):00978         L04B6    lda   ,x+            get save switch from parameters
0513 B71159           (/dd/sourcecode/as):00979                  sta   >GrfMem+gr0059 save it in grfdrv mem
0516 17FF57           (/dd/sourcecode/as):00980                  lbsr  L0413          move rest of parameters to grfdrv mem
0519 25F2             (/dd/sourcecode/as):00981                  bcs   L04B2          error, return
051B 3420             (/dd/sourcecode/as):00982                  pshs  y              preserve window table pointer
051D 17FE9C           (/dd/sourcecode/as):00983                  lbsr  L00F7          let grfdrv create overlay
0520 3520             (/dd/sourcecode/as):00984                  puls  y              restore window table pointer
0522 2505             (/dd/sourcecode/as):00985                  bcs   L04D1          error from grfdrv, return
0524 3560             (/dd/sourcecode/as):00986                  puls  u,y            restore path descriptor & static mem pointers
0526 16FF6A           (/dd/sourcecode/as):00987                  lbra  L0436          setup lines per page & return from there
                      (/dd/sourcecode/as):00988         
0529 3262             (/dd/sourcecode/as):00989         L04D1    leas  2,s            Eat path dsc. ptr
052B 3540             (/dd/sourcecode/as):00990                  puls  u              Get static mem ptr back
                      (/dd/sourcecode/as):00991         * Could not find a window table for overlay, get rid of links & return
052D A632             (/dd/sourcecode/as):00992         L04D5    lda   Wt.BLnk,y      Get back window # link
052F A7C835           (/dd/sourcecode/as):00993                  sta   V.WinNum,u     Store it as current window #
                      (/dd/sourcecode/as):00994                IFNE  H6309
                      (/dd/sourcecode/as):00995                  ldw   #$FFFF         Set screen table ptr to unused
                      (/dd/sourcecode/as):00996                  stw   Wt.STbl,y
                      (/dd/sourcecode/as):00997                ELSE
                      (/dd/sourcecode/as):00998         * 6809 - use DP scratch var here instead of pshs/puls x. LCB
0532 3410             (/dd/sourcecode/as):00999                  pshs  x
0534 8EFFFF           (/dd/sourcecode/as):01000                  ldx   #$FFFF
0537 BF11B5           (/dd/sourcecode/as):01001                  stx   >GrfMem+gr00B5
053A AF30             (/dd/sourcecode/as):01002                  stx   Wt.STbl,y
053C 3510             (/dd/sourcecode/as):01003                  puls  x
                      (/dd/sourcecode/as):01004                ENDC
053E 43               (/dd/sourcecode/as):01005                  coma                 Set carry for error
053F 39               (/dd/sourcecode/as):01006         L04E7    rts   
                      (/dd/sourcecode/as):01007         
                      (/dd/sourcecode/as):01008         * Change window to full size reported in window table
                      (/dd/sourcecode/as):01009         * Relocated lines and removed regW; regE bug; RG
0540 ECA828           (/dd/sourcecode/as):01010         L04EA    ldd   Wt.DfSZX,y     Get default size of window
0543 ED37             (/dd/sourcecode/as):01011                  std   Wt.CPX+2,y           Save current size
0545 FD11B5           (/dd/sourcecode/as):01012                  std   >GrfMem+gr00B5
                      (/dd/sourcecode/as):01013                IFNE  H6309 
                      (/dd/sourcecode/as):01014                  clrd                 set start coords to 0,0
                      (/dd/sourcecode/as):01015                ELSE
0548 4F               (/dd/sourcecode/as):01016                  clra
0549 5F               (/dd/sourcecode/as):01017                  clrb
                      (/dd/sourcecode/as):01018                ENDC
054A ED35             (/dd/sourcecode/as):01019                  std   Wt.CPX,y       Store coords
054C C60E             (/dd/sourcecode/as):01020                  ldb   #$0E           GrfDrv function: CWArea
054E 3420             (/dd/sourcecode/as):01021                  pshs  y              preserve window table ptr
0550 17FE38           (/dd/sourcecode/as):01022                  lbsr  L0101          Send it to GrfDrv
0553 35A0             (/dd/sourcecode/as):01023                  puls  y,pc           Restore reg & return
                      (/dd/sourcecode/as):01024         
                      (/dd/sourcecode/as):01025         ****************************
                      (/dd/sourcecode/as):01026         * OWEnd entry point
                      (/dd/sourcecode/as):01027         * Entry: U=Device static mem pointer
                      (/dd/sourcecode/as):01028         *        Y=Path descriptor pointer
0555 3460             (/dd/sourcecode/as):01029         OWEnd    pshs  u,y            preserve path descriptor & static mem pointers
0557 1701BE           (/dd/sourcecode/as):01030                  lbsr  L06A0          get pointer to window table & verify it
055A 2405             (/dd/sourcecode/as):01031                  bcc   L0508          went ok, skip ahead
055C 3560             (/dd/sourcecode/as):01032                  puls  u,y            Restore regs
055E 1601B4           (/dd/sourcecode/as):01033                  lbra  L069D          Exit with undefined window error
                      (/dd/sourcecode/as):01034         
0561 A632             (/dd/sourcecode/as):01035         L0508    lda   Wt.BLnk,y      is this an overlay?
0563 2A05             (/dd/sourcecode/as):01036                  bpl   L0511          yes, go remove it
0565 3560             (/dd/sourcecode/as):01037                  puls  u,y            purge stack
0567 1601DB           (/dd/sourcecode/as):01038                  lbra  L0697          return with illegal window definition error
                      (/dd/sourcecode/as):01039         
                      (/dd/sourcecode/as):01040         * We are in overlay, remove it
056A EE62             (/dd/sourcecode/as):01041         L0511    ldu   2,s            get static mem pointer
056C 1701E6           (/dd/sourcecode/as):01042                  lbsr  L06B9          get pointer to graphics table for this window
                      (/dd/sourcecode/as):01043                IFNE  H6309
                      (/dd/sourcecode/as):01044                  lde   ,x             get menuing system screen type
                      (/dd/sourcecode/as):01045                ELSE
056F A684             (/dd/sourcecode/as):01046                  lda   ,x
0571 B711B5           (/dd/sourcecode/as):01047                  sta   >GrfMem+gr00B5
                      (/dd/sourcecode/as):01048                ENDC
0574 A632             (/dd/sourcecode/as):01049                  lda   Wt.BLnk,y      get parent window # of this overlay
                      (/dd/sourcecode/as):01050         * We know this is a overlay window, continue
0576 A7C835           (/dd/sourcecode/as):01051                  sta   V.WinNum,u     save new window #
0579 8DC5             (/dd/sourcecode/as):01052                  bsr   L04EA          change to the full size window 
057B C60C             (/dd/sourcecode/as):01053                  ldb   #$0C           get grfdrv function for OWEnd
057D 17FE0B           (/dd/sourcecode/as):01054                  lbsr  L0101          let grfdrv do the rest
0580 2402             (/dd/sourcecode/as):01055                  bcc   L052E          grfdrv went ok, skip ahead
0582 35E0             (/dd/sourcecode/as):01056         L052C    puls  y,u,pc         restore & return
                      (/dd/sourcecode/as):01057         
                      (/dd/sourcecode/as):01058         * Overlay removed, check if we activate menu bar on parent window
0584 3560             (/dd/sourcecode/as):01059         L052E    puls  y,u            Restore static mem & path dsc. ptrs
0586 17FF0A           (/dd/sourcecode/as):01060                  lbsr  L0436          set lines per page in path descriptor
                      (/dd/sourcecode/as):01061              IFNE  CoGrf-1
                      (/dd/sourcecode/as):01062                IFNE  H6309
                      (/dd/sourcecode/as):01063                  tste                         is screen type a regular no box window?
                      (/dd/sourcecode/as):01064                ELSE
0589 7D11B5           (/dd/sourcecode/as):01065                  tst   >GrfMem+gr00B5
                      (/dd/sourcecode/as):01066                ENDC
058C 27B1             (/dd/sourcecode/as):01067                  beq   L04E7          yes, return
                      (/dd/sourcecode/as):01068                IFNE  H6309
                      (/dd/sourcecode/as):01069                  cmpe  #WT.FSWin      do we have a menu bar on window?
                      (/dd/sourcecode/as):01070                ELSE
                      (/dd/sourcecode/as):01071         * Can't use DP trick here - needs flags preserved
058E 3402             (/dd/sourcecode/as):01072                  pshs  a
0590 B611B5           (/dd/sourcecode/as):01073                  lda   >GrfMem+gr00B5
0593 8102             (/dd/sourcecode/as):01074                  cmpa  #WT.FSWin
0595 3502             (/dd/sourcecode/as):01075                  puls  a
                      (/dd/sourcecode/as):01076                ENDC
0597 22A6             (/dd/sourcecode/as):01077                  bhi   L04E7          no, return
0599 B6100A           (/dd/sourcecode/as):01078                  lda   >WGlobal+G.CrDvFl   Are we the current active window?
059C 274B             (/dd/sourcecode/as):01079                  beq   L0591          no, skip updating menu bar
059E 160EF4           (/dd/sourcecode/as):01080                  lbra  L13F5          set menu bar to active state
                      (/dd/sourcecode/as):01081              ELSE
                      (/dd/sourcecode/as):01082                  rts                  If just CoGrf, we didn't need to do any MultiVue checks
                      (/dd/sourcecode/as):01083              ENDC
                      (/dd/sourcecode/as):01084         
                      (/dd/sourcecode/as):01085         ****************************
                      (/dd/sourcecode/as):01086         * Select entry point
                      (/dd/sourcecode/as):01087         * Entry: U=Static memory pointer
                      (/dd/sourcecode/as):01088         *        Y=Path descriptor pointer
05A1 AE26             (/dd/sourcecode/as):01089         Select   ldx   PD.RGS,y       get register stack pointer
05A3 A601             (/dd/sourcecode/as):01090                  lda   R$A,x          get path # to new window
05A5 9E50             (/dd/sourcecode/as):01091                  ldx   <D.Proc        get current process pointer
05A7 A18900AC         (/dd/sourcecode/as):01092                  cmpa  P$SelP,x       Is path requested the same as current process' active path?
05AB 273C             (/dd/sourcecode/as):01093                  beq   L0591          yes, nothing to change so return
05AD E68900AC         (/dd/sourcecode/as):01094                  ldb   P$SelP,x       No, get the current processes' active window path
05B1 A78900AC         (/dd/sourcecode/as):01095                  sta   P$SelP,x       save new path (to window Selected)
05B5 3420             (/dd/sourcecode/as):01096                  pshs  y              save path descriptor pointer
05B7 8D31             (/dd/sourcecode/as):01097                  bsr   L0592          Get the device table ptr for current process 
05B9 AE22             (/dd/sourcecode/as):01098                  ldx   V$STAT,y       Get static mem ptr for current process
05BB BC1020           (/dd/sourcecode/as):01099                  cmpx  >WGlobal+G.CurDev   Same as current device? (same screen (not window))?
05BE 3520             (/dd/sourcecode/as):01100                  puls  y              restore path descriptor pointer
05C0 2626             (/dd/sourcecode/as):01101                  bne   L0590          no match on old device, return (don't update GIME if we aren't on same screen)
05C2 3404             (/dd/sourcecode/as):01102                  pshs  b              Same screen; save current processes' window path block #
05C4 30C4             (/dd/sourcecode/as):01103                  leax  ,u             point X to static mem ptr of window
05C6 17014F           (/dd/sourcecode/as):01104                  lbsr  L06A0          verify window table of new window
05C9 3504             (/dd/sourcecode/as):01105                  puls  b              restore old window path block #
05CB 2409             (/dd/sourcecode/as):01106                  bcc   L0582          window exists, skip ahead
05CD 9E50             (/dd/sourcecode/as):01107                  ldx   <D.Proc        Doesn't exist, get current process pointer back
05CF E78900AC         (/dd/sourcecode/as):01108                  stb   P$SelP,x       save old window path number back
05D3 16013F           (/dd/sourcecode/as):01109                  lbra  L069D          return undefined window error
                      (/dd/sourcecode/as):01110         
                      (/dd/sourcecode/as):01111         * New window exists, update screen to it
05D6 FE1020           (/dd/sourcecode/as):01112         L0582    ldu   >WGlobal+G.CurDev   Get current device mem ptr
05D9 FF1022           (/dd/sourcecode/as):01113                  stu   >WGlobal+G.PrWMPt   Save as previoius device mem ptr
05DC BF1020           (/dd/sourcecode/as):01114                  stx   >WGlobal+G.CurDev   Save new current device mem ptr
05DF 6C8823           (/dd/sourcecode/as):01115                  inc   V.ScrChg,x     Flag screen has changed for AltIRQ routine
                      (/dd/sourcecode/as):01116         * LCB - once we get clock to do such updates properly, we should be able to eliminate
                      (/dd/sourcecode/as):01117         *  this Sleep call. Grfdrv is non-reentrant, so it won't come back in here to change stuff while
                      (/dd/sourcecode/as):01118         *  it is changing, anyways.
                      (/dd/sourcecode/as):01119         
                      (/dd/sourcecode/as):01120         * Give system a chance to stabilize. RG
05E2 8E0002           (/dd/sourcecode/as):01121                  ldx   #2
05E5 103F0A           (/dd/sourcecode/as):01122                  os9   F$Sleep
05E8 5F               (/dd/sourcecode/as):01123         L0590    clrb                 clear errors
05E9 39               (/dd/sourcecode/as):01124         L0591    rts                  return
                      (/dd/sourcecode/as):01125         
                      (/dd/sourcecode/as):01126         * Get ptr to device table
                      (/dd/sourcecode/as):01127         * Entry: X=Pointer to process descriptor
                      (/dd/sourcecode/as):01128         *        B=Path block # to get 
                      (/dd/sourcecode/as):01129         * Exit : Y=Pointer to device table entry
05EA 308830           (/dd/sourcecode/as):01130         L0592    leax  P$Path,x       get pointer to path #'s
                      (/dd/sourcecode/as):01131         * Added next line to protect regB from os9 F$Find64 error report. RG
05ED 3404             (/dd/sourcecode/as):01132                  pshs  b
05EF A685             (/dd/sourcecode/as):01133                  lda   b,x            get path block
05F1 9E88             (/dd/sourcecode/as):01134                  ldx   <D.PthDBT      get pointer to descriptor block table
05F3 103F2F           (/dd/sourcecode/as):01135                  os9   F$Find64       get pointer to path descriptor
05F6 10AE23           (/dd/sourcecode/as):01136                  ldy   PD.DEV,y       get pointer to device table entry
05F9 3584             (/dd/sourcecode/as):01137                  puls  b,pc           return
                      (/dd/sourcecode/as):01138         
                      (/dd/sourcecode/as):01139         ****************************
                      (/dd/sourcecode/as):01140         * CWArea entry point
                      (/dd/sourcecode/as):01141         * Entry: U=Static memory pointer
                      (/dd/sourcecode/as):01142         *        Y=Path descriptor pointer
                      (/dd/sourcecode/as):01143         *        X=Pointer to parameters
05FB 3460             (/dd/sourcecode/as):01144         CWArea   pshs  y,u            Save device mem ptr & path dsc. ptr on stack
05FD 170118           (/dd/sourcecode/as):01145                  lbsr  L06A0          verify window table
                      (/dd/sourcecode/as):01146                IFNE  H6309
                      (/dd/sourcecode/as):01147                  ldq   Wt.CPX,y       get original start & size
                      (/dd/sourcecode/as):01148                  pshsw                preserve them on the stack
                      (/dd/sourcecode/as):01149                ELSE
0600 EC37             (/dd/sourcecode/as):01150                  ldd   Wt.CPX+2,y
0602 FD11B5           (/dd/sourcecode/as):01151                  std   >GrfMem+gr00B5
0605 3406             (/dd/sourcecode/as):01152                  pshs  d
0607 EC35             (/dd/sourcecode/as):01153                  ldd   Wt.CPX,y
                      (/dd/sourcecode/as):01154                ENDC
0609 3406             (/dd/sourcecode/as):01155                  pshs  d
060B 17FE72           (/dd/sourcecode/as):01156                  lbsr  L0423          move coords to window table
060E 2550             (/dd/sourcecode/as):01157                  bcs   L0609          didn't pan out, restore originals & return error
                      (/dd/sourcecode/as):01158         * The rest of this is unique to CoWin.  What it does is calculate the
                      (/dd/sourcecode/as):01159         * maximum allowable window sizes based on the window type defined in the
                      (/dd/sourcecode/as):01160         * menuing system.
                      (/dd/sourcecode/as):01161         * NOTE: MAY BE ABLE TO USE E & F FOR SOME OF THE ,S STUFF
0610 EE66             (/dd/sourcecode/as):01162                  ldu   6,s            get device static memory pointer
0612 170140           (/dd/sourcecode/as):01163                  lbsr  L06B9          get graphics table entry pointer for this window
                      (/dd/sourcecode/as):01164                IFNE  H6309
                      (/dd/sourcecode/as):01165                  clrd                 set starting X/Y coords to 0
                      (/dd/sourcecode/as):01166                ELSE
0615 4F               (/dd/sourcecode/as):01167                  clra
0616 5F               (/dd/sourcecode/as):01168                  clrb
                      (/dd/sourcecode/as):01169                ENDC
0617 3406             (/dd/sourcecode/as):01170                  pshs  d
0619 ECA828           (/dd/sourcecode/as):01171                  ldd   Wt.DfSZX,y     Get default X/Y sizes from window table
061C 3406             (/dd/sourcecode/as):01172                  pshs  d              Make them the ending X,Y coords
                      (/dd/sourcecode/as):01173                IFNE  CoGrf-1
                      (/dd/sourcecode/as):01174         * Beginning of CoWin only code
061E A684             (/dd/sourcecode/as):01175                  lda   ,x             get graphics table window type
0620 271C             (/dd/sourcecode/as):01176                  beq   L05E3          If normal window, skip all adjustments
0622 4A               (/dd/sourcecode/as):01177                  deca                 Is it a WT.FWin (framed window=1)?
0623 2606             (/dd/sourcecode/as):01178                  bne   L05CB          no, check for scroll bars
0625 6A61             (/dd/sourcecode/as):01179                  dec   1,s            Yes, subtract 1 from Y size
0627 6C63             (/dd/sourcecode/as):01180                  inc   3,s            Add 1 to Y start
0629 2013             (/dd/sourcecode/as):01181                  bra   L05E3
                      (/dd/sourcecode/as):01182         
062B 4A               (/dd/sourcecode/as):01183         L05CB    deca                 Is it a WT.FSWin (scroll barred window=2)?
062C 2604             (/dd/sourcecode/as):01184                  bne   L05D3          No, has to be Shadowed,double or plain, skip ahead
062E 6AE4             (/dd/sourcecode/as):01185                  dec   ,s             decrement X size by 1 for right scroll bar
0630 2006             (/dd/sourcecode/as):01186                  bra   L05DD          skip ahead
                      (/dd/sourcecode/as):01187         
                      (/dd/sourcecode/as):01188         * Shadowed, double & plain go here - 1 char border on all 4 sides
0632 6C62             (/dd/sourcecode/as):01189         L05D3    inc   2,s            add 1 to X start for left border
0634 6AE4             (/dd/sourcecode/as):01190                  dec   ,s             decrement X size by 2 for left & right borders
0636 6AE4             (/dd/sourcecode/as):01191                  dec   ,s
0638 6C63             (/dd/sourcecode/as):01192         L05DD    inc   3,s            add 1 to Y start for menu bar
063A 6A61             (/dd/sourcecode/as):01193                  dec   1,s            decrement Y size by 2 for menu & bottom borders
063C 6A61             (/dd/sourcecode/as):01194                  dec   1,s
                      (/dd/sourcecode/as):01195                  ENDC
                      (/dd/sourcecode/as):01196         
063E EC37             (/dd/sourcecode/as):01197         L05E3    ldd   Wt.SZX,y       get current X/Y sizes
0640 A1E4             (/dd/sourcecode/as):01198                  cmpa  ,s             will X size fit?
0642 221A             (/dd/sourcecode/as):01199                  bhi   L0606          no return error
0644 E161             (/dd/sourcecode/as):01200                  cmpb  1,s            will Y size fit?
0646 2216             (/dd/sourcecode/as):01201                  bhi   L0606          no, return error
0648 EC35             (/dd/sourcecode/as):01202                  ldd   Wt.CPX,y       get current X/Y start
064A A162             (/dd/sourcecode/as):01203                  cmpa  2,s            will X start fit?
064C 2510             (/dd/sourcecode/as):01204                  bcs   L0606          no, return error
064E E163             (/dd/sourcecode/as):01205                  cmpb  3,s            will Y start fit?
0650 250C             (/dd/sourcecode/as):01206                  blo   L0606          no, return error
0652 17FD67           (/dd/sourcecode/as):01207                  lbsr  L00F7          let grfdrv do the rest
0655 2507             (/dd/sourcecode/as):01208                  bcs   L0606          error from grfdrv, return
0657 3268             (/dd/sourcecode/as):01209                  leas  8,s            eat local data
0659 3560             (/dd/sourcecode/as):01210                  puls  y,u            Get back path dsc. ptr & device mem ptr
065B 16FE35           (/dd/sourcecode/as):01211                  lbra  L0436          setup lines per page
                      (/dd/sourcecode/as):01212         
065E 3264             (/dd/sourcecode/as):01213         L0606    leas  4,s            Eat stack buffer & return
     0660             (/dd/sourcecode/as):01214         L0609    equ   *
                      (/dd/sourcecode/as):01215                IFNE  H6309
                      (/dd/sourcecode/as):01216                  puls  d              Restore originals
                      (/dd/sourcecode/as):01217                  pulsw  
                      (/dd/sourcecode/as):01218                  stq   Wt.CPX,y
                      (/dd/sourcecode/as):01219                ELSE
0660 EC62             (/dd/sourcecode/as):01220                  ldd   2,s
0662 ED37             (/dd/sourcecode/as):01221                  std   Wt.CPX+2,y
0664 FD11B5           (/dd/sourcecode/as):01222                  std   >GrfMem+gr00B5
0667 ECE4             (/dd/sourcecode/as):01223                  ldd   ,s
0669 ED35             (/dd/sourcecode/as):01224                  std   Wt.CPX,y
066B 3264             (/dd/sourcecode/as):01225                  leas  4,s            eat the stack
                      (/dd/sourcecode/as):01226                ENDC
066D 53               (/dd/sourcecode/as):01227                  comb                 Illegal coordinates error
066E C6BD             (/dd/sourcecode/as):01228                  ldb   #E$ICoord
0670 35E0             (/dd/sourcecode/as):01229                  puls  y,u,pc
                      (/dd/sourcecode/as):01230         
                      (/dd/sourcecode/as):01231         ****************************
                      (/dd/sourcecode/as):01232         * GCSet entry point
                      (/dd/sourcecode/as):01233         * Entry: U=Static mem pointer
                      (/dd/sourcecode/as):01234         *        Y=path descriptor pointer
                      (/dd/sourcecode/as):01235         *        X=Parameter pointer
0672 3440             (/dd/sourcecode/as):01236         L060C    pshs  u              save static mem pointer
0674 1700A1           (/dd/sourcecode/as):01237                  lbsr  L06A0          verify window exists, or create it if it isn't
0677 10250098         (/dd/sourcecode/as):01238                  lbcs  L069B          couldn't create, exit with error
067B EC84             (/dd/sourcecode/as):01239                  ldd   ,x             get group/buffer from parameters
067D FD1157           (/dd/sourcecode/as):01240                  std   >GrfMem+gr0057 Save in Grfdrv mem
0680 17FD39           (/dd/sourcecode/as):01241                  lbsr  L00F7          let grfdrv do the rest
0683 3540             (/dd/sourcecode/as):01242                  puls  u              restore static mem pointer
0685 1700CD           (/dd/sourcecode/as):01243                  lbsr  L06B9          get graphics table pointer
0688 A6A818           (/dd/sourcecode/as):01244                  lda   Wt.GBlk,y      Get graphics cursor memory block #
068B A70B             (/dd/sourcecode/as):01245                  sta   Gt.GBlk,x      save it in graphics table
068D ECA819           (/dd/sourcecode/as):01246                  ldd   Wt.GOff,y      Get graphics cursor offset
0690 ED0C             (/dd/sourcecode/as):01247                  std   Gt.GOff,x      save it in graphics table & return
0692 39               (/dd/sourcecode/as):01248                  rts
                      (/dd/sourcecode/as):01249         
                      (/dd/sourcecode/as):01250         ****************************
                      (/dd/sourcecode/as):01251         * LSet entry point
     0693             (/dd/sourcecode/as):01252         LSet     equ   *
                      (/dd/sourcecode/as):01253                IFNE  H6309
                      (/dd/sourcecode/as):01254                  bsr   L06A0          verify window table
                      (/dd/sourcecode/as):01255                  bcs   L069D          no good, return error 
                      (/dd/sourcecode/as):01256                ELSE
0693 170082           (/dd/sourcecode/as):01257                  lbsr  L06A0
0696 257D             (/dd/sourcecode/as):01258                  bcs   L069D          no good, return error 
                      (/dd/sourcecode/as):01259                ENDC
0698 A684             (/dd/sourcecode/as):01260                  lda   ,x             Get LSET type from params
069A A72A             (/dd/sourcecode/as):01261                  sta   Wt.LSet,y      store it in window table
069C 16FD1D           (/dd/sourcecode/as):01262                  lbra  L00F7          let grfdrv do the rest
                      (/dd/sourcecode/as):01263         
                      (/dd/sourcecode/as):01264         ****************************
                      (/dd/sourcecode/as):01265         * Border entry point
069F 3440             (/dd/sourcecode/as):01266         Border   pshs  u              preserve static mem
06A1 8D75             (/dd/sourcecode/as):01267                  bsr   L06A0          verify window table
06A3 256E             (/dd/sourcecode/as):01268                  bcs   L069B          not good, return error
06A5 A684             (/dd/sourcecode/as):01269                  lda   ,x             Get border color from parm area
06A7 AE30             (/dd/sourcecode/as):01270                  ldx   Wt.STbl,y      Get screen table ptr
06A9 A705             (/dd/sourcecode/as):01271                  sta   St.Brdr,x      Save as border color in screen tbl
06AB 203F             (/dd/sourcecode/as):01272                  bra   L0669          Flag for GIME update & exit
                      (/dd/sourcecode/as):01273         
                      (/dd/sourcecode/as):01274         ****************************
                      (/dd/sourcecode/as):01275         * FColor/BColor entry point
06AD                  (/dd/sourcecode/as):01276         BColor
06AD 8D69             (/dd/sourcecode/as):01277         FColor   bsr   L06A0          verify window table
06AF 2564             (/dd/sourcecode/as):01278                  bcs   L069D          not good, return error
06B1 A684             (/dd/sourcecode/as):01279                  lda   ,x             Get palette # from param area
06B3 B7115A           (/dd/sourcecode/as):01280                  sta   >GrfMem+gr005A Put in GRFDRV's working palette #
06B6 16FD03           (/dd/sourcecode/as):01281         L064B    lbra  L00F7          Go into GrfDrv
                      (/dd/sourcecode/as):01282         
                      (/dd/sourcecode/as):01283         ****************************
                      (/dd/sourcecode/as):01284         * DefPal entry point
06B9 3440             (/dd/sourcecode/as):01285         DefPal   pshs  u              preserve static mem pointer
06BB 8D5B             (/dd/sourcecode/as):01286                  bsr   L06A0          verify window
06BD 2554             (/dd/sourcecode/as):01287                  bcs   L069B          not good, return error
06BF AE30             (/dd/sourcecode/as):01288                  ldx   Wt.STbl,y      Get ptr to screen table
06C1 308810           (/dd/sourcecode/as):01289                  leax  St.Pals,x      Point to palettes in screen table
06C4 FC1019           (/dd/sourcecode/as):01290                  ldd   >WGlobal+G.DefPal   Get ptr to system default palettes
                      (/dd/sourcecode/as):01291                IFNE  H6309
                      (/dd/sourcecode/as):01292                  ldw   #16            # palette registers to copy
                      (/dd/sourcecode/as):01293                  tfm   d+,x+          Copy into screen table
                      (/dd/sourcecode/as):01294                ELSE
                      (/dd/sourcecode/as):01295         * 6809 LCB NOTE: Change to use grfdrv copy vector later. Or at least use U to transfer
                      (/dd/sourcecode/as):01296         * 2 bytes at a time.
06C7 3420             (/dd/sourcecode/as):01297                  pshs  y
06C9 1F02             (/dd/sourcecode/as):01298                  tfr   d,y
06CB C610             (/dd/sourcecode/as):01299                  ldb   #16
06CD A6A0             (/dd/sourcecode/as):01300         L064Eb   lda   ,y+
06CF A780             (/dd/sourcecode/as):01301                  sta   ,x+
06D1 5A               (/dd/sourcecode/as):01302                  decb
06D2 26F9             (/dd/sourcecode/as):01303                  bne   L064Eb
06D4 4F               (/dd/sourcecode/as):01304                  clra
06D5 FD11B5           (/dd/sourcecode/as):01305                  std   >GrfMem+gr00B5
06D8 3520             (/dd/sourcecode/as):01306                  puls  y
                      (/dd/sourcecode/as):01307                ENDC   
06DA 2010             (/dd/sourcecode/as):01308                  bra   L0669          Flag for GIME update & exit
                      (/dd/sourcecode/as):01309         
                      (/dd/sourcecode/as):01310         ****************************
                      (/dd/sourcecode/as):01311         * Palette entry point
06DC 3440             (/dd/sourcecode/as):01312         Palette  pshs  u              preserve static mem pointer
06DE 8D38             (/dd/sourcecode/as):01313                  bsr   L06A0          verify window table
06E0 2531             (/dd/sourcecode/as):01314                  bcs   L069B          not good, return error
06E2 EC84             (/dd/sourcecode/as):01315                  ldd   ,x             Get palette # & color
06E4 AE30             (/dd/sourcecode/as):01316                  ldx   Wt.STbl,y      Get screen table ptr
06E6 840F             (/dd/sourcecode/as):01317                  anda  #$0f           Only allow palettes 0-15
06E8 8B10             (/dd/sourcecode/as):01318                  adda  #St.Pals       Palette tbl starts @ +$10
06EA E786             (/dd/sourcecode/as):01319                  stb   a,x            Save in scrn tbl's palette
06EC 5F               (/dd/sourcecode/as):01320         L0669    clrb                 No error
06ED 3540             (/dd/sourcecode/as):01321                  puls  u              restore static mem pointer
06EF B6100A           (/dd/sourcecode/as):01322                  lda   >WGlobal+G.CrDvFl   Are we the current device?
06F2 2703             (/dd/sourcecode/as):01323                  beq   L0673          No, we are done
06F4 6CC823           (/dd/sourcecode/as):01324                  inc   V.ScrChg,u     Yes, flag AltIRQ for screen update & return
06F7 39               (/dd/sourcecode/as):01325         L0673    rts
                      (/dd/sourcecode/as):01326         
                      (/dd/sourcecode/as):01327         ****************************
                      (/dd/sourcecode/as):01328         * PSet/Font entry point
06F8                  (/dd/sourcecode/as):01329         Font
06F8 8D1E             (/dd/sourcecode/as):01330         PSet     bsr   L06A0          verify window table
06FA 2519             (/dd/sourcecode/as):01331                  bcs   L069D          not good, return error
06FC EC84             (/dd/sourcecode/as):01332                  ldd   ,x             Get group & buffer #'s from parm area
06FE 2705             (/dd/sourcecode/as):01333                  beq   L0682          If caller wants to disable pattern set, skip
0700 5D               (/dd/sourcecode/as):01334                  tstb                 Is buffer=0?
0701 102701B3         (/dd/sourcecode/as):01335                  lbeq  L0812          Yes, illegal
0705 FD1157           (/dd/sourcecode/as):01336         L0682    std   >GrfMem+gr0057 Save group & buffer #'s
0708 16FCB1           (/dd/sourcecode/as):01337                  lbra  L00F7          Go to GrfDrv
                      (/dd/sourcecode/as):01338         
                      (/dd/sourcecode/as):01339         ****************************
                      (/dd/sourcecode/as):01340         * KillBuf entry point
070B 8D0B             (/dd/sourcecode/as):01341         KillBuf  bsr   L06A0          verify window table
070D 2506             (/dd/sourcecode/as):01342                  bcs   L069D          not good, return error
070F EC84             (/dd/sourcecode/as):01343                  ldd   ,x             Get buffer & group #
0711 20F2             (/dd/sourcecode/as):01344                  bra   L0682          Save them
                      (/dd/sourcecode/as):01345         
                      (/dd/sourcecode/as):01346         * Return undefined window error
0713 3262             (/dd/sourcecode/as):01347         L069B    leas  2,s            Eat stack
0715 C6C4             (/dd/sourcecode/as):01348         L069D    ldb   #E$WUndef      Window undefined error
0717 39               (/dd/sourcecode/as):01349                  rts   
                      (/dd/sourcecode/as):01350         
                      (/dd/sourcecode/as):01351         * Get window table pointer & verify it
                      (/dd/sourcecode/as):01352         * Entry: X=parm ptr
                      (/dd/sourcecode/as):01353         *        Y=Path dsc. ptr
                      (/dd/sourcecode/as):01354         *        U=Device mem ptr
                      (/dd/sourcecode/as):01355         * Exit: Y=Window tbl ptr
                      (/dd/sourcecode/as):01356         *       X=Parm ptr
0718 E6C835           (/dd/sourcecode/as):01357         L06A0    ldb   V.WinNum,u     Get window # from device mem
071B 8640             (/dd/sourcecode/as):01358                  lda   #Wt.Siz        Size of each entry
071D 3D               (/dd/sourcecode/as):01359                  mul                  Calculate window table offset
071E C31290           (/dd/sourcecode/as):01360                  addd  #WinBase       Point to specific window table entry
                      (/dd/sourcecode/as):01361                IFNE  H6309
                      (/dd/sourcecode/as):01362                  tfr   d,w            Move to W (has indexing mode)
                      (/dd/sourcecode/as):01363                  lda   Wt.STbl,w      Get MSB of scrn tbl ptr
                      (/dd/sourcecode/as):01364                ELSE
                      (/dd/sourcecode/as):01365         * Can't use DP scratch var since need flags preserved
0721 3420             (/dd/sourcecode/as):01366                  pshs  y
0723 1F02             (/dd/sourcecode/as):01367                  tfr   d,y
0725 FD11B5           (/dd/sourcecode/as):01368                  std   >GrfMem+gr00B5
0728 A630             (/dd/sourcecode/as):01369                  lda   Wt.STbl,y
072A 3520             (/dd/sourcecode/as):01370                  puls  y
                      (/dd/sourcecode/as):01371                ENDC
072C 2E11             (/dd/sourcecode/as):01372                  bgt   VerExit        If $01-$7f, should be ok
072E 81FF             (/dd/sourcecode/as):01373                  cmpa  #$ff           Unused?
0730 2613             (/dd/sourcecode/as):01374                  bne   L0697          No, in range of $80-$FE or $00, illegal
                      (/dd/sourcecode/as):01375                IFNE  H6309
                      (/dd/sourcecode/as):01376                  pshsw                Preserve window tbl ptr
                      (/dd/sourcecode/as):01377                  pshs  x              Preserve param ptr
                      (/dd/sourcecode/as):01378                  tfr   y,x            Move path dsc. ptr to X
                      (/dd/sourcecode/as):01379                  tfr   w,y            Move window tbl ptr to Y
                      (/dd/sourcecode/as):01380                ELSE
0732 3430             (/dd/sourcecode/as):01381                  pshs  x,y
0734 BE11B5           (/dd/sourcecode/as):01382                  ldx   >GrfMem+gr00B5
0737 AF62             (/dd/sourcecode/as):01383                  stx   2,s            pshsw
0739 1E21             (/dd/sourcecode/as):01384                  exg   y,x            tfr y,x; tfr w,y
                      (/dd/sourcecode/as):01385                ENDC
073B 8D27             (/dd/sourcecode/as):01386                  bsr   L06DD          Window doesn't exist, see if we can create
073D 35B0             (/dd/sourcecode/as):01387                  puls  x,y,pc         Get parm ptr, window tbl ptr & return
                      (/dd/sourcecode/as):01388         
                      (/dd/sourcecode/as):01389         * X still parm ptr, just move window tbl ptr & return
073F 4F               (/dd/sourcecode/as):01390         VerExit  clra                 No error
                      (/dd/sourcecode/as):01391                IFNE  H6309
                      (/dd/sourcecode/as):01392                  tfr   w,y            Move window tbl ptr to Y
                      (/dd/sourcecode/as):01393                ELSE
0740 10BE11B5         (/dd/sourcecode/as):01394                  ldy   >GrfMem+gr00B5
                      (/dd/sourcecode/as):01395                ENDC
0744 39               (/dd/sourcecode/as):01396                  rts
                      (/dd/sourcecode/as):01397         
                      (/dd/sourcecode/as):01398         * Return illegal window definition error
0745 53               (/dd/sourcecode/as):01399         L0697    comb                 set carry
0746 C6C3             (/dd/sourcecode/as):01400                  ldb   #E$IWDef       Illegal window definition error
0748 39               (/dd/sourcecode/as):01401                  rts
                      (/dd/sourcecode/as):01402         
                      (/dd/sourcecode/as):01403         * Get window table ptr for current window
                      (/dd/sourcecode/as):01404         * Entry: U=Static memory pointer
                      (/dd/sourcecode/as):01405         * Exit : Y=Window tbl ptr
0749 E6C835           (/dd/sourcecode/as):01406         L06AE    ldb   V.WinNum,u     Get window # from device mem
074C 8640             (/dd/sourcecode/as):01407                  lda   #Wt.Siz        Size of each entry
074E 3D               (/dd/sourcecode/as):01408                  mul                  Calculate window table offset
074F C31290           (/dd/sourcecode/as):01409                  addd  #WinBase       Point to specific window tbl entry
0752 1F02             (/dd/sourcecode/as):01410                  tfr   d,y            Put into Y & return
0754 39               (/dd/sourcecode/as):01411                  rts   
                      (/dd/sourcecode/as):01412         
                      (/dd/sourcecode/as):01413         * Get graphics table pointer for current window
                      (/dd/sourcecode/as):01414         * Entry: U=Static memory pointer
0755 3406             (/dd/sourcecode/as):01415         L06B9    pshs  d              Preserve D
0757 A6C835           (/dd/sourcecode/as):01416                  lda   V.WinNum,u     Get window #
075A C612             (/dd/sourcecode/as):01417                  ldb   #GTabSz        Size of each entry
075C 3D               (/dd/sourcecode/as):01418                  mul                  Calculate offset
075D BE1075           (/dd/sourcecode/as):01419                  ldx   >WGlobal+G.GfxTbl   Get ptr to GFX tables
                      (/dd/sourcecode/as):01420                IFNE  H6309
                      (/dd/sourcecode/as):01421                  addr  d,x            Point to table entry
                      (/dd/sourcecode/as):01422                ELSE
0760 308B             (/dd/sourcecode/as):01423                  leax  d,x            Point to table entry
                      (/dd/sourcecode/as):01424                ENDC
0762 3586             (/dd/sourcecode/as):01425                  puls  d,pc           Restore D & return
                      (/dd/sourcecode/as):01426         
                      (/dd/sourcecode/as):01427         * Verify window table
                      (/dd/sourcecode/as):01428         * Entry: Y=Window table ptr
                      (/dd/sourcecode/as):01429         * Unused window, check if device dsc. default is valid
0764 3410             (/dd/sourcecode/as):01430         L06DD    pshs  x              Preserve path dsc ptr
0766 AE03             (/dd/sourcecode/as):01431                  ldx   PD.DEV,x       Get device table ptr
0768 3410             (/dd/sourcecode/as):01432                  pshs  x              Preserve it
076A AE04             (/dd/sourcecode/as):01433                  ldx   V$DESC,x       Get device dsc ptr
076C E6882F           (/dd/sourcecode/as):01434                  ldb   IT.VAL,x       Window dsc contain a valid type?
076F 2604             (/dd/sourcecode/as):01435                  bne   L06EE          Yes, skip ahead
0771 43               (/dd/sourcecode/as):01436                  coma                 Otherwise, exit with error
0772 3264             (/dd/sourcecode/as):01437         L06EB    leas  4,s            Eat stack & return
0774 39               (/dd/sourcecode/as):01438                  rts   
                      (/dd/sourcecode/as):01439         
                      (/dd/sourcecode/as):01440         * Unused window with valid device dsc type
                      (/dd/sourcecode/as):01441         * X=Ptr to window's device dsc.
0775 A68830           (/dd/sourcecode/as):01442         L06EE    lda   IT.STY,x       Get descriptor's screen type
0778 170104           (/dd/sourcecode/as):01443                  lbsr  L07E0          Go get GrfDrv internal screen type
077B 2404             (/dd/sourcecode/as):01444                  bcc   L06FA          Good window type found, continue
077D 3264             (/dd/sourcecode/as):01445                  leas  4,s            Eat stack & exit with error
077F 20C4             (/dd/sourcecode/as):01446                  bra   L0697
                      (/dd/sourcecode/as):01447         
                      (/dd/sourcecode/as):01448         * Valid screen type
0781 F71160           (/dd/sourcecode/as):01449         L06FA    stb   >GrfMem+Gr.STYMk   Preserve GrfDrv window type
0784 C1FF             (/dd/sourcecode/as):01450                  cmpb  #$FF           Current screen?
0786 2708             (/dd/sourcecode/as):01451                  beq   L070B          Yes, skip ahead
0788 A68835           (/dd/sourcecode/as):01452                  lda   IT.BDC,x       Get default border color
078B B7115A           (/dd/sourcecode/as):01453                  sta   >GrfMem+gr005A Put into palette area in grfdrv mem
078E 200A             (/dd/sourcecode/as):01454                  bra   L070F
                      (/dd/sourcecode/as):01455         
                      (/dd/sourcecode/as):01456         * If window is supposed to be on same screen, do this
0790 3410             (/dd/sourcecode/as):01457         L070B    pshs  x              preserve device descriptor pointer
0792 AE64             (/dd/sourcecode/as):01458                  ldx   4,s            get path descriptor pointer
0794 8D58             (/dd/sourcecode/as):01459                  bsr   L075C          Set up screen table ptr in window table
0796 3510             (/dd/sourcecode/as):01460                  puls  x              restore device descriptor pointer
0798 25D8             (/dd/sourcecode/as):01461                  bcs   L06EB          If error, eat stack & leave
                      (/dd/sourcecode/as):01462         
079A EC8831           (/dd/sourcecode/as):01463         L070F    ldd   IT.CPX,x       Get start X coordinate from dsc
                      (/dd/sourcecode/as):01464                IFNE  H6309
                      (/dd/sourcecode/as):01465                  ldw   IT.COL,x
                      (/dd/sourcecode/as):01466                  stq   Wt.CPX,y       Put into window table
                      (/dd/sourcecode/as):01467                ELSE
079D ED35             (/dd/sourcecode/as):01468                  std   Wt.CPX,y
079F EC882C           (/dd/sourcecode/as):01469                  ldd   IT.COL,x
07A2 FD11B5           (/dd/sourcecode/as):01470                  std   >GrfMem+gr00B5
07A5 ED37             (/dd/sourcecode/as):01471                  std   Wt.CPX+2,y
                      (/dd/sourcecode/as):01472                ENDC
07A7 EC8833           (/dd/sourcecode/as):01473                  ldd   IT.FGC,x       Get foreground & background default colors
07AA ED26             (/dd/sourcecode/as):01474                  std   Wt.Fore,y      Save in window table
07AC C604             (/dd/sourcecode/as):01475                  ldb   #$04           GrfDrv function: DWSet
07AE 17FBDA           (/dd/sourcecode/as):01476                  lbsr  L0101          Go make the window
07B1 3510             (/dd/sourcecode/as):01477                  puls  x              Get device dsc. ptr back
07B3 2408             (/dd/sourcecode/as):01478                  bcc   L0730          no error, skip ahead
07B5 CCFFFF           (/dd/sourcecode/as):01479                  ldd   #$FFFF         Error, Reset window table entry as 'unused'
07B8 ED30             (/dd/sourcecode/as):01480                  std   Wt.STbl,y
07BA 3262             (/dd/sourcecode/as):01481                  leas  2,s            Eat stack & return
07BC 39               (/dd/sourcecode/as):01482         L075B    rts   
                      (/dd/sourcecode/as):01483         
                      (/dd/sourcecode/as):01484         * Last part of DWSet
07BD AE02             (/dd/sourcecode/as):01485         L0730    ldx   V$STAT,x       Get device's static mem ptr
07BF 6C881E           (/dd/sourcecode/as):01486                  inc   V.InfVld,x     Set flag indicating rest of table is valid
07C2 3384             (/dd/sourcecode/as):01487                  leau  ,x             Point U to static storage
07C4 1F20             (/dd/sourcecode/as):01488                  tfr   y,d            Move window table ptr to D
07C6 3520             (/dd/sourcecode/as):01489                  puls  y              Get path dsc. ptr back into Y
07C8 3406             (/dd/sourcecode/as):01490                  pshs  d              Save window table ptr on stack
07CA 17FCC6           (/dd/sourcecode/as):01491                  lbsr  L0436          Set up some default size values
07CD 3520             (/dd/sourcecode/as):01492                  puls  y              Get window table ptr back
07CF 7D100A           (/dd/sourcecode/as):01493                  tst   >WGlobal+G.CrDvFl Are we current device?
07D2 27E8             (/dd/sourcecode/as):01494                  beq   L075B          No, skip ahead
                      (/dd/sourcecode/as):01495                IFNE  H6309
                      (/dd/sourcecode/as):01496                  ldw   >WGlobal+G.CurDev  Get current device's static mem ptr
                      (/dd/sourcecode/as):01497                  stw   >WGlobal+G.PrWMPt  Move to old device's static mem ptr
                      (/dd/sourcecode/as):01498                  lda   >V.ULCase,w    Get old device's special keyboard flags
                      (/dd/sourcecode/as):01499                ELSE
                      (/dd/sourcecode/as):01500         * 6809 - use DP scratch var here instead of pshs/puls x. LCB
07D4 3410             (/dd/sourcecode/as):01501                  pshs  x
07D6 BE1020           (/dd/sourcecode/as):01502                  ldx   >WGlobal+G.CurDev   Get current device's static mem ptr 
07D9 BF1022           (/dd/sourcecode/as):01503                  stx   >WGlobal+G.PrWMPt   Move to old device's static mem ptr
07DC BF11B5           (/dd/sourcecode/as):01504                  stx   >GrfMem+gr00B5 
07DF A6890021         (/dd/sourcecode/as):01505                  lda   >V.ULCase,x    Get old device's special keyboard flags
07E3 3510             (/dd/sourcecode/as):01506                  puls  x
                      (/dd/sourcecode/as):01507                ENDC 
07E5 A78821           (/dd/sourcecode/as):01508                  sta   V.ULCase,x   Save in new device (kybrd mouse in Gshell)
07E8 BF1020           (/dd/sourcecode/as):01509                  stx   >WGlobal+G.CurDev     Make it the current device's static mem ptr
07EB 16058D           (/dd/sourcecode/as):01510                  lbra  L0C86      Select the window & do setmouse in VTIO
                      (/dd/sourcecode/as):01511         
                      (/dd/sourcecode/as):01512         * If current screen window, go here
                      (/dd/sourcecode/as):01513         * Entry: A=Screen type from caller
                      (/dd/sourcecode/as):01514         *        B=Internal screen type
                      (/dd/sourcecode/as):01515         *        X=Path descriptor ptr
                      (/dd/sourcecode/as):01516         *        Y=Window table ptr
                      (/dd/sourcecode/as):01517         * Exit: Screen table ptr in window dsc. table is set
07EE 81FF             (/dd/sourcecode/as):01518         L075C    cmpa  #$FF           Current displayed screen?
07F0 260C             (/dd/sourcecode/as):01519                  bne   L076D          No, must be process' current screen
07F2 FC1130           (/dd/sourcecode/as):01520                  ldd   >GrfMem+gr0030 Get current screen table ptr
07F5 2604             (/dd/sourcecode/as):01521                  bne   L076A          There is one, continue
07F7 53               (/dd/sourcecode/as):01522                  comb                 Otherwise, window undefined error
07F8 16FF1A           (/dd/sourcecode/as):01523                  lbra  L069D
                      (/dd/sourcecode/as):01524         
07FB ED30             (/dd/sourcecode/as):01525         L076A    std   Wt.STbl,y      Store screen table ptr in window table & return
07FD 39               (/dd/sourcecode/as):01526                  rts   
                      (/dd/sourcecode/as):01527         
                      (/dd/sourcecode/as):01528         * Verify that current process window is compatible with current window
                      (/dd/sourcecode/as):01529         * Entry: X=Path descriptor pointer
                      (/dd/sourcecode/as):01530         *        Y=Window table pointer of current window
07FE 3430             (/dd/sourcecode/as):01531         L076D    pshs  x,y            Preserve window table ptr & path dsc. ptr
0800 9E50             (/dd/sourcecode/as):01532                  ldx   <D.Proc        Get current process dsc. ptr
0802 E68900AC         (/dd/sourcecode/as):01533                  ldb   P$SelP,x       Get selected path for current window
0806 17FDE1           (/dd/sourcecode/as):01534                  lbsr  L0592          Get device table ptr for the path (into Y)
0809 AEE4             (/dd/sourcecode/as):01535                  ldx   ,s             Get back path dsc. ptr
080B AE03             (/dd/sourcecode/as):01536                  ldx   PD.DEV,x       Get device table entry address
080D EC84             (/dd/sourcecode/as):01537                  ldd   V$DRIV,x       drivers match?
080F 10A3A4           (/dd/sourcecode/as):01538                  cmpd  V$DRIV,y
0812 2624             (/dd/sourcecode/as):01539                  bne   L07AB          No, they aren't compatible, exit with error
0814 10AE22           (/dd/sourcecode/as):01540                  ldy   V$STAT,y       Get device driver static storage ptr
0817 A626             (/dd/sourcecode/as):01541                  lda   V.TYPE,y       Get device type
0819 2A1D             (/dd/sourcecode/as):01542                  bpl   L07AB          not a window, exit with error
081B A6A81D           (/dd/sourcecode/as):01543                  lda   V.WinType,y    Get type of window flag
081E 2618             (/dd/sourcecode/as):01544                  bne   L07AB          If not a Grf/CoWin window, error
0820 A6A81E           (/dd/sourcecode/as):01545                  lda   V.InfVld,y     Get 'device mem info is valid' flag
0823 2713             (/dd/sourcecode/as):01546                  beq   L07AB          If clear, error
0825 33A4             (/dd/sourcecode/as):01547                  leau  ,y             Point U to static mem
0827 17FF1F           (/dd/sourcecode/as):01548                  lbsr  L06AE          Get window table ptr for process window
082A A630             (/dd/sourcecode/as):01549                  lda   Wt.STbl,y      screen table active?
082C 2B0A             (/dd/sourcecode/as):01550                  bmi   L07AB          no, exit with illegal window def. error
082E 3262             (/dd/sourcecode/as):01551                  leas  2,s            Eat window device dsc. ptr
0830 EC30             (/dd/sourcecode/as):01552                  ldd   Wt.STbl,y      Get screen table ptr of process window
0832 3520             (/dd/sourcecode/as):01553                  puls  y              Get window tbl ptr
0834 ED30             (/dd/sourcecode/as):01554                  std   Wt.STbl,y      Put into current window's screen tbl ptr
0836 4F               (/dd/sourcecode/as):01555                  clra                 No error & return
0837 39               (/dd/sourcecode/as):01556                  rts
                      (/dd/sourcecode/as):01557         
0838 3530             (/dd/sourcecode/as):01558         L07AB    puls  y,x            Restore regs & illegal window definition error
083A 16FF08           (/dd/sourcecode/as):01559                  lbra  L0697
                      (/dd/sourcecode/as):01560         
                      (/dd/sourcecode/as):01561         * Search for empty window table & setup window links
                      (/dd/sourcecode/as):01562         * Entry: U=Device static mem ptr
                      (/dd/sourcecode/as):01563         * Exit : Y=New window table pointer
083D 3416             (/dd/sourcecode/as):01564         L07B0    pshs  d,x            Save regs used
083F 31C4             (/dd/sourcecode/as):01565                  leay  ,u             Point to device static storage
0841 8E1290           (/dd/sourcecode/as):01566                  ldx   #WinBase       swap it into X for ABX
0844 CC0040           (/dd/sourcecode/as):01567                  ldd   #Wt.Siz        A=Start entry #(0), B=Entry size
                      (/dd/sourcecode/as):01568                IFNE  H6309
0847                  (/dd/sourcecode/as):01569         L07B8    ldw   Wt.STbl,x      get screen table pointer
                      (/dd/sourcecode/as):01570                ELSE
                      (/dd/sourcecode/as):01571         * Can't use scratch var since need flags preserved
0847 3420             (/dd/sourcecode/as):01572         L07B8    pshs  y
0849 10AE10           (/dd/sourcecode/as):01573                  ldy   Wt.STbl,x
084C 10BF11B5         (/dd/sourcecode/as):01574                  sty   >GrfMem+gr00B5
0850 3520             (/dd/sourcecode/as):01575                  puls  y
                      (/dd/sourcecode/as):01576                ENDC
0852 2A1A             (/dd/sourcecode/as):01577                  bpl   L07CF          if high bit clear, table used, skip to next
                      (/dd/sourcecode/as):01578                IFNE  H6309
                      (/dd/sourcecode/as):01579                  cmpf  #$FF           if LSB not a $ff, then check next one
                      (/dd/sourcecode/as):01580                ELSE
                      (/dd/sourcecode/as):01581         * Can't use scratch var since need flags preserved
0854 3404             (/dd/sourcecode/as):01582                  pshs  b
0856 F611B6           (/dd/sourcecode/as):01583                  ldb   >GrfMem+gr00B5+1
0859 C1FF             (/dd/sourcecode/as):01584                  cmpb  #$FF
085B 3504             (/dd/sourcecode/as):01585                  puls  b
                      (/dd/sourcecode/as):01586                ENDC
085D 260F             (/dd/sourcecode/as):01587                  bne   L07CF
                      (/dd/sourcecode/as):01588         * Found empty entry, link it in & make current device (static mem) point to
                      (/dd/sourcecode/as):01589         * new table entry
085F E6A835           (/dd/sourcecode/as):01590                  ldb   V.WinNum,y     Get current window table #
0862 E712             (/dd/sourcecode/as):01591                  stb   Wt.BLnk,x      Save it as back link #
0864 A7A835           (/dd/sourcecode/as):01592                  sta   V.WinNum,y     Save new window table entry #
0867 6A11             (/dd/sourcecode/as):01593                  dec   Wt.STbl+1,x    make LSB of screen table ptr $fe
0869 1F12             (/dd/sourcecode/as):01594                  tfr   x,y            move window table pointer to Y
086B 5F               (/dd/sourcecode/as):01595                  clrb                 Clear carry
086C 3596             (/dd/sourcecode/as):01596                  puls  d,x,pc         Restore & return
                      (/dd/sourcecode/as):01597         
086E 4C               (/dd/sourcecode/as):01598         L07CF    inca                 Move to next table #
086F 8120             (/dd/sourcecode/as):01599                  cmpa  #$20           Past max table #?
0871 2203             (/dd/sourcecode/as):01600                  bhi   L07D9          Yes, exit with error
0873 3A               (/dd/sourcecode/as):01601                  abx                  Nope, point to next one
0874 20D1             (/dd/sourcecode/as):01602                  bra   L07B8          Go try again
                      (/dd/sourcecode/as):01603         
                      (/dd/sourcecode/as):01604         * BUG @ approx L1789, it calls this routine, but does NOT check for a window
                      (/dd/sourcecode/as):01605         * table full error... it just stores Y assuming it worked.
0876 1F12             (/dd/sourcecode/as):01606         L07D9    tfr   x,y            move window table pointer to Y
0878 53               (/dd/sourcecode/as):01607                  comb                 Set carry
0879 C6C1             (/dd/sourcecode/as):01608                  ldb   #E$TblFul      Get table full error code
087B E761             (/dd/sourcecode/as):01609                  stb   1,s            Save it in B on stack for restore
087D 3596             (/dd/sourcecode/as):01610                  puls  d,x,pc         Restore & return
                      (/dd/sourcecode/as):01611         
                      (/dd/sourcecode/as):01612         * Convert STY mark to internal type
                      (/dd/sourcecode/as):01613         * Entry: A=Requested screen type from parameters
                      (/dd/sourcecode/as):01614         * Exit : B=Internal screen type marker
087F 3422             (/dd/sourcecode/as):01615         L07E0    pshs  a,y            Preserve sty & window entry
0881 4C               (/dd/sourcecode/as):01616                  inca                 Bump up so $FF type is now 0
0882 8109             (/dd/sourcecode/as):01617                  cmpa  #9             Past maximum allowable?
0884 220C             (/dd/sourcecode/as):01618                  bhi   L07F5          Yes, exit with error
0886 318C0C           (/dd/sourcecode/as):01619                  leay  <L07F9,pc      Point to conversion table (base 0)
0889 E6A6             (/dd/sourcecode/as):01620                  ldb   a,y            Get internal code
088B C1FE             (/dd/sourcecode/as):01621                  cmpb  #$FE           Invalid?
088D 2703             (/dd/sourcecode/as):01622                  beq   L07F5          Yes, exit
088F 4F               (/dd/sourcecode/as):01623                  clra                 Clear carry
0890 35A2             (/dd/sourcecode/as):01624                  puls  a,y,pc         Restore & return
                      (/dd/sourcecode/as):01625         
0892 53               (/dd/sourcecode/as):01626         L07F5    comb                 Set carry
0893 35A2             (/dd/sourcecode/as):01627                  puls  y,a,pc         Restore regs & return
                      (/dd/sourcecode/as):01628         
                      (/dd/sourcecode/as):01629         * Screen type conversion table
0895 FF               (/dd/sourcecode/as):01630         L07F9    fcb   $ff            Current screen, sty=$ff
0896 FF               (/dd/sourcecode/as):01631                  fcb   $ff            Current screen, sty=$00
0897 86               (/dd/sourcecode/as):01632                  fcb   $86            40 column, sty=$01
0898 85               (/dd/sourcecode/as):01633                  fcb   $85            80 column, sty=$02
0899 FE               (/dd/sourcecode/as):01634                  fcb   $fe            Invalid, sty=$03
089A FE               (/dd/sourcecode/as):01635                  fcb   $fe            Invalid, sty=$04
089B 01               (/dd/sourcecode/as):01636                  fcb   $01            640 2 color, sty=$05
089C 02               (/dd/sourcecode/as):01637                  fcb   $02            320 4 color, sty=$06
089D 03               (/dd/sourcecode/as):01638                  fcb   $03            640 4 color, sty=$07
089E 04               (/dd/sourcecode/as):01639                  fcb   $04            320 16 color, sty=$08
                      (/dd/sourcecode/as):01640         
089F 53               (/dd/sourcecode/as):01641         BadDef   comb  
08A0 C6BB             (/dd/sourcecode/as):01642                  ldb   #E$IllArg
08A2 39               (/dd/sourcecode/as):01643                  rts   
                      (/dd/sourcecode/as):01644         
                      (/dd/sourcecode/as):01645         ****************************
                      (/dd/sourcecode/as):01646         * DefGPB entry point
                      (/dd/sourcecode/as):01647         * Entry: U=Static memory pointer
                      (/dd/sourcecode/as):01648         *        Y=Path descriptor pointer
                      (/dd/sourcecode/as):01649         *        X=Parameter pointer
08A3 17FE72           (/dd/sourcecode/as):01650         DefGPB   lbsr  L06A0          verify window table
08A6 1025FE6B         (/dd/sourcecode/as):01651                  lbcs  L069D          not good, return error
                      (/dd/sourcecode/as):01652                IFNE  H6309
                      (/dd/sourcecode/as):01653                  ldq   ,x             D=Group/Buffer W=Length
                      (/dd/sourcecode/as):01654                ELSE
08AA EC02             (/dd/sourcecode/as):01655                  ldd   2,x
08AC FD11B5           (/dd/sourcecode/as):01656                  std   >GrfMem+gr00B5
08AF EC84             (/dd/sourcecode/as):01657                  ldd   ,x
                      (/dd/sourcecode/as):01658                ENDC
08B1 4D               (/dd/sourcecode/as):01659                  tsta                 group a zero?
08B2 2704             (/dd/sourcecode/as):01660                  beq   L0812          yes, illegal return error
08B4 81FF             (/dd/sourcecode/as):01661                  cmpa  #$FF           Trying to use overlay group?
08B6 2604             (/dd/sourcecode/as):01662                  bne   L0816          no, go on
                      (/dd/sourcecode/as):01663         * Return bad buffer error
08B8 53               (/dd/sourcecode/as):01664         L0812    comb                 set carry
08B9 C6C2             (/dd/sourcecode/as):01665                  ldb   #E$BadBuf      get error code
08BB 39               (/dd/sourcecode/as):01666                  rts                  return to caller
                      (/dd/sourcecode/as):01667         
                      (/dd/sourcecode/as):01668         * check buffer #
08BC 5D               (/dd/sourcecode/as):01669         L0816    tstb                 buffer a zero?
08BD 27F9             (/dd/sourcecode/as):01670                  beq   L0812          yes, illegal return error
                      (/dd/sourcecode/as):01671                IFNE  H6309
                      (/dd/sourcecode/as):01672                  tstw                 length a zero?
                      (/dd/sourcecode/as):01673                ELSE
                      (/dd/sourcecode/as):01674         * Can't use scratch var since need flags preserved
08BF 3406             (/dd/sourcecode/as):01675                  pshs  d
08C1 FC11B5           (/dd/sourcecode/as):01676                  ldd   >GrfMem+gr00B5
08C4 3506             (/dd/sourcecode/as):01677                  puls  d
                      (/dd/sourcecode/as):01678                ENDC
08C6 27D7             (/dd/sourcecode/as):01679                  beq   BadDef         yes, return error
08C8 FD1157           (/dd/sourcecode/as):01680                  std   >GrfMem+gr0057 save group/buffer #'s in global mem
                      (/dd/sourcecode/as):01681                IFNE  H6309
                      (/dd/sourcecode/as):01682                  stw   >GrfMem+gr0080 save length in global mem
                      (/dd/sourcecode/as):01683                ELSE
                      (/dd/sourcecode/as):01684         * 6809 LCB - *Might* be able to use scratch DP var instead of pshs/puls D.
08CB 3406             (/dd/sourcecode/as):01685                  pshs  d
08CD FC11B5           (/dd/sourcecode/as):01686                  ldd   >GrfMem+gr00B5
08D0 FD1180           (/dd/sourcecode/as):01687                  std   >GrfMem+gr0080 save length in global mem
08D3 3506             (/dd/sourcecode/as):01688                  puls  d
                      (/dd/sourcecode/as):01689                ENDC 
08D5 16FAE4           (/dd/sourcecode/as):01690         L0822    lbra  L00F7          let grfdrv do the rest
                      (/dd/sourcecode/as):01691         
                      (/dd/sourcecode/as):01692         ****************************
                      (/dd/sourcecode/as):01693         * GetBlk entry point
                      (/dd/sourcecode/as):01694         * Entry: U=Static memory pointer
                      (/dd/sourcecode/as):01695         *        Y=Path descriptor pointer
                      (/dd/sourcecode/as):01696         *        X=Parameter pointer
08D8 17FE3D           (/dd/sourcecode/as):01697         GetBlk   lbsr  L06A0          verify window table
08DB 1025FE36         (/dd/sourcecode/as):01698                  lbcs  L069D          couldn't get it, return error
08DF 8D19             (/dd/sourcecode/as):01699                  bsr   L0849          check group/buffer #'s & move upper left coords
08E1 25D5             (/dd/sourcecode/as):01700                  bcs   L0812          error, return bad buffer
08E3 8D29             (/dd/sourcecode/as):01701                  bsr   L085C          get X/Y sizes
08E5 1024FAD3         (/dd/sourcecode/as):01702                  lbcc  L00F7          let grfdrv do the rest if no error
08E9 C6BF             (/dd/sourcecode/as):01703         SmlBuf   ldb   #E$BufSiz      get error code & return
08EB 39               (/dd/sourcecode/as):01704                  rts
                      (/dd/sourcecode/as):01705         
                      (/dd/sourcecode/as):01706         ****************************
                      (/dd/sourcecode/as):01707         * PutBlk entry point
08EC 17FE29           (/dd/sourcecode/as):01708         PutBlk   lbsr  L06A0          verify window table
08EF 1025FE22         (/dd/sourcecode/as):01709                  lbcs  L069D          exit if error
08F3 8D05             (/dd/sourcecode/as):01710                  bsr   L0849          get parameters
08F5 25C1             (/dd/sourcecode/as):01711                  bcs   L0812          exit if error
08F7 16FAC2           (/dd/sourcecode/as):01712                  lbra  L00F7          let grfdrv do rest
                      (/dd/sourcecode/as):01713         
                      (/dd/sourcecode/as):01714         * Check passed Group & buffer parameters and move start co-ordinates
08FA EC81             (/dd/sourcecode/as):01715         L0849    ldd   ,x++           get group/buffer #'s
08FC 4D               (/dd/sourcecode/as):01716                  tsta                 group a zero?
08FD 2729             (/dd/sourcecode/as):01717                  beq   L086E          yes, return error
08FF 81FF             (/dd/sourcecode/as):01718                  cmpa  #$FF           trying to use overlay?
0901 2725             (/dd/sourcecode/as):01719                  beq   L086E          yes, return error
0903 5D               (/dd/sourcecode/as):01720                  tstb                 buffer a zero?
0904 2722             (/dd/sourcecode/as):01721                  beq   L086E          yes, return error
0906 FD1157           (/dd/sourcecode/as):01722                  std   >GrfMem+gr0057 save group/buffer to global memory
0909 170208           (/dd/sourcecode/as):01723                  lbsr  L0A32          move start coords
090C 4F               (/dd/sourcecode/as):01724                  clra                 clear error & return
090D 39               (/dd/sourcecode/as):01725                  rts
                      (/dd/sourcecode/as):01726         
                      (/dd/sourcecode/as):01727         * Parse passed X/Y sizes & move if ok
                      (/dd/sourcecode/as):01728         * Entry: X=Parameter pointer
                      (/dd/sourcecode/as):01729         * Exit : X - Incremented by 4
                      (/dd/sourcecode/as):01730                IFNE  H6309
090E                  (/dd/sourcecode/as):01731         L085C    ldq   ,x             D=X Size, W=Y size
                      (/dd/sourcecode/as):01732                  tstd                 X size a zero?
                      (/dd/sourcecode/as):01733                ELSE
090E EC02             (/dd/sourcecode/as):01734         L085C    ldd   2,x
0910 FD11B5           (/dd/sourcecode/as):01735                  std   >GrfMem+gr00B5
0913 EC84             (/dd/sourcecode/as):01736                  ldd   ,x
                      (/dd/sourcecode/as):01737                ENDC
0915 2711             (/dd/sourcecode/as):01738                  beq   L086E          yes, return error
                      (/dd/sourcecode/as):01739                IFNE  H6309
                      (/dd/sourcecode/as):01740                  tstw                 Y size a zero?
                      (/dd/sourcecode/as):01741                ELSE
0917 EC02             (/dd/sourcecode/as):01742                  ldd   2,x
                      (/dd/sourcecode/as):01743                ENDC
0919 270D             (/dd/sourcecode/as):01744                  beq   L086E          yes, return error
                      (/dd/sourcecode/as):01745                IFNE  H6309
                      (/dd/sourcecode/as):01746                  stq   >GrfMem+gr004F save sizes into grfdrv mem
                      (/dd/sourcecode/as):01747                ELSE
091B FD1151           (/dd/sourcecode/as):01748                  std   >GrfMem+gr004F+2   save sizes into grfdrv mem
091E EC84             (/dd/sourcecode/as):01749                  ldd   ,x
0920 FD114F           (/dd/sourcecode/as):01750                  std   >GrfMem+gr004F save sizes into grfdrv mem
                      (/dd/sourcecode/as):01751                ENDC
0923 C604             (/dd/sourcecode/as):01752                  ldb   #4             adjust parameter pointer
0925 3A               (/dd/sourcecode/as):01753                  abx   
0926 4F               (/dd/sourcecode/as):01754         L086C    clra                 clear errors & return
0927 39               (/dd/sourcecode/as):01755                  rts
                      (/dd/sourcecode/as):01756         
0928 43               (/dd/sourcecode/as):01757         L086E    coma                 Flag error & return
0929 39               (/dd/sourcecode/as):01758                  rts
                      (/dd/sourcecode/as):01759         
                      (/dd/sourcecode/as):01760         ****************************
                      (/dd/sourcecode/as):01761         * GPLoad entry point
                      (/dd/sourcecode/as):01762         * Entry: U=Static memory pointer
                      (/dd/sourcecode/as):01763         *        Y=Path descriptor pointer
                      (/dd/sourcecode/as):01764         *        X=Parameter pointer
092A 3460             (/dd/sourcecode/as):01765         GPLoad   pshs  u,y            save regs
092C 17FE1A           (/dd/sourcecode/as):01766                  lbsr  L06AE          get window table pointer for this window
092F EC81             (/dd/sourcecode/as):01767                  ldd   ,x++           get group & buffer
0931 4D               (/dd/sourcecode/as):01768                  tsta                 group a zero?
0932 2704             (/dd/sourcecode/as):01769                  beq   L087D          yes, return error
0934 81FF             (/dd/sourcecode/as):01770                  cmpa  #$FF           Overlay window group?
0936 2605             (/dd/sourcecode/as):01771                  bne   L0881          no, so far so good
0938 3560             (/dd/sourcecode/as):01772         L087D    puls  u,y            Yes, not allowed for user group, purge stack
                      (/dd/sourcecode/as):01773                IFNE  H6309
                      (/dd/sourcecode/as):01774                  bra   L0812          return error
                      (/dd/sourcecode/as):01775                ELSE
093A 16FF7B           (/dd/sourcecode/as):01776                  lbra  L0812
                      (/dd/sourcecode/as):01777                ENDC
                      (/dd/sourcecode/as):01778         
                      (/dd/sourcecode/as):01779         * parse buffer & screen type parameters
093D 5D               (/dd/sourcecode/as):01780         L0881    tstb                 buffer a zero?
093E 27F8             (/dd/sourcecode/as):01781                  beq   L087D          yes, return error
0940 FD1157           (/dd/sourcecode/as):01782                  std   >GrfMem+gr0057 save it in grfdrv mem.
0943 A680             (/dd/sourcecode/as):01783                  lda   ,x+            get screen type
0945 17FF37           (/dd/sourcecode/as):01784                  lbsr  L07E0          convert it to internal screen type
0948 5D               (/dd/sourcecode/as):01785                  tstb                 is it a graphics screen?
0949 2A05             (/dd/sourcecode/as):01786                  bpl   L0894          yes, skip ahead
094B 3560             (/dd/sourcecode/as):01787                  puls  u,y            restore regs
094D 16FDF5           (/dd/sourcecode/as):01788                  lbra  L0697          return illegal window definition error
                      (/dd/sourcecode/as):01789         
                      (/dd/sourcecode/as):01790         * parse X/Y size & buffer size parameters
0950 F71160           (/dd/sourcecode/as):01791         L0894    stb   >GrfMem+Gr.STYMk   save screen type
0953 8DB9             (/dd/sourcecode/as):01792                  bsr   L085C          get X/Y sizes
0955 2404             (/dd/sourcecode/as):01793                  bcc   GdSiz          no error, skip ahead
0957 3264             (/dd/sourcecode/as):01794                  leas  4,s            eat stack
0959 208E             (/dd/sourcecode/as):01795                  bra   SmlBuf         return error
                      (/dd/sourcecode/as):01796         
095B EC81             (/dd/sourcecode/as):01797         GdSiz    ldd   ,x++           get size of buffer
095D EDA81F           (/dd/sourcecode/as):01798                  std   Wt.BLen,y      save it in window table as a counter
0960 3420             (/dd/sourcecode/as):01799                  pshs  y              preserve global mem & window table pointer
0962 17FA57           (/dd/sourcecode/as):01800                  lbsr  L00F7          let grfdrv do some work
0965 3520             (/dd/sourcecode/as):01801                  puls  y              restore pointers
0967 251D             (/dd/sourcecode/as):01802                  bcs   L08CA          error from grfdrv, eat stack & return
                      (/dd/sourcecode/as):01803         * get buffer count grfdrv made & start the move process
0969 ECA81F           (/dd/sourcecode/as):01804         L08A8    ldd   Wt.BLen,y      get buffer counter
096C 10830048         (/dd/sourcecode/as):01805                  cmpd  #gb0000        more than 72 bytes (get/put copy buffer size) left?
0970 2217             (/dd/sourcecode/as):01806                  bhi   L08CD          yes, go to multiple block copy routine
                      (/dd/sourcecode/as):01807         * last gpload buffer move
0972 F71070           (/dd/sourcecode/as):01808                  stb   >WGlobal+g0070 save LSB of count
0975 1F98             (/dd/sourcecode/as):01809                  tfr   b,a            copy count to A
0977 308C05           (/dd/sourcecode/as):01810                  leax  <L08BE,pc      get vector to buffer move processor
097A 3560             (/dd/sourcecode/as):01811         L08B9    puls  u,y            restore static mem & path descriptor pointers
097C 16FA4A           (/dd/sourcecode/as):01812                  lbra  L0362          save into parameter area of static mem.
                      (/dd/sourcecode/as):01813         
                      (/dd/sourcecode/as):01814         * last buffer move parameter processor
097F 3460             (/dd/sourcecode/as):01815         L08BE    pshs  u,y            preserve static mem & path descriptor pointers
0981 17FDC5           (/dd/sourcecode/as):01816                  lbsr  L06AE          get window table pointer
0984 8D1E             (/dd/sourcecode/as):01817                  bsr   L08EA          Move data to shared buffer & then Grfdrv
0986 3264             (/dd/sourcecode/as):01818         L08CA    leas  4,s            purge stack
0988 39               (/dd/sourcecode/as):01819                  rts                  return
                      (/dd/sourcecode/as):01820         
                      (/dd/sourcecode/as):01821         * multi gpload buffer move
0989 830048           (/dd/sourcecode/as):01822         L08CD    subd  #gb0000        subtract 72 (gp copy buffer size) from count
098C EDA81F           (/dd/sourcecode/as):01823                  std   Wt.BLen,y      save count
098F 8648             (/dd/sourcecode/as):01824                  lda   #gb0000        72
0991 B71070           (/dd/sourcecode/as):01825                  sta   >WGlobal+g0070
0994 308C02           (/dd/sourcecode/as):01826                  leax  <L08DD,pc      get vector
0997 20E1             (/dd/sourcecode/as):01827                  bra   L08B9          save into parameter area of static mem.
                      (/dd/sourcecode/as):01828         
                      (/dd/sourcecode/as):01829         * Place VTIO comes to for next gpload sub-buffer
0999 3460             (/dd/sourcecode/as):01830         L08DD    pshs  u,y            Preserve static & path dsc. ptrs
099B 17FDAB           (/dd/sourcecode/as):01831                  lbsr  L06AE          Get window tbl ptr
099E 8D04             (/dd/sourcecode/as):01832                  bsr   L08EA          Move data to shared buffer & then Grfdrv
09A0 24C7             (/dd/sourcecode/as):01833                  bcc   L08A8          Continue moving until whole GPLoad done
09A2 20E2             (/dd/sourcecode/as):01834                  bra   L08CA          Error from Grfdrv, exit with it
                      (/dd/sourcecode/as):01835         
                      (/dd/sourcecode/as):01836         * Move buffer to global area for GrfDrv
09A4 CE1200           (/dd/sourcecode/as):01837         L08EA    ldu   #GPBuf         $1200 Point to global move area
                      (/dd/sourcecode/as):01838                IFNE  H6309
                      (/dd/sourcecode/as):01839                  ldf   >WGlobal+g0070 get byte count
                      (/dd/sourcecode/as):01840                  clre  
                      (/dd/sourcecode/as):01841                  tfm   x+,u+          move it
                      (/dd/sourcecode/as):01842                ELSE
09A7 3402             (/dd/sourcecode/as):01843                  pshs  a
09A9 F61070           (/dd/sourcecode/as):01844                  ldb   >WGlobal+g0070 get byte count
09AC A680             (/dd/sourcecode/as):01845         L08EAb   lda   ,x+
09AE A7C0             (/dd/sourcecode/as):01846                  sta   ,u+
09B0 5A               (/dd/sourcecode/as):01847                  decb
09B1 26F9             (/dd/sourcecode/as):01848                  bne   L08EAb
09B3 4F               (/dd/sourcecode/as):01849                  clra
09B4 FD11B5           (/dd/sourcecode/as):01850                  std   >GrfMem+gr00B5
09B7 3502             (/dd/sourcecode/as):01851                  puls  a 
                      (/dd/sourcecode/as):01852                ENDC
                      (/dd/sourcecode/as):01853         * Send move buffer to GrfDrv
                      (/dd/sourcecode/as):01854         * Special problem. Seems to pass info via regF.
     09B9             (/dd/sourcecode/as):01855         L08FC    equ   *
                      (/dd/sourcecode/as):01856                IFNE  H6309
                      (/dd/sourcecode/as):01857                  ldf   >WGlobal+g0070 get count
                      (/dd/sourcecode/as):01858                ELSE
09B9 F61070           (/dd/sourcecode/as):01859                  ldb   >WGlobal+g0070
                      (/dd/sourcecode/as):01860         *         stb   >GrfMem+$B6    grfdrv regF
09BC F711B6           (/dd/sourcecode/as):01861                  stb   >GrfMem+gr00B5+1  cowin regF
                      (/dd/sourcecode/as):01862                ENDC
09BF C632             (/dd/sourcecode/as):01863                  ldb   #$32           get move buffer code
09C1 16F9C7           (/dd/sourcecode/as):01864                  lbra  L0101          send it to grfdrv & return from there
                      (/dd/sourcecode/as):01865         
                      (/dd/sourcecode/as):01866         ****************************
                      (/dd/sourcecode/as):01867         * PutGC entry point
09C4 17FD51           (/dd/sourcecode/as):01868         PutGC    lbsr  L06A0          verify window
09C7 1025FD4A         (/dd/sourcecode/as):01869                  lbcs  L069D
                      (/dd/sourcecode/as):01870                IFNE  H6309
                      (/dd/sourcecode/as):01871                  ldq   ,x             get position requested
                      (/dd/sourcecode/as):01872                  stq   >GrfMem+gr005B save in grfdrv mem
                      (/dd/sourcecode/as):01873                ELSE
09CB EC02             (/dd/sourcecode/as):01874                  ldd   2,x
09CD FD115D           (/dd/sourcecode/as):01875                  std   >GrfMem+gr005B+2  save in grfdrv mem
09D0 FD11B5           (/dd/sourcecode/as):01876                  std   >GrfMem+gr00B5
09D3 EC84             (/dd/sourcecode/as):01877                  ldd   ,x
09D5 FD115B           (/dd/sourcecode/as):01878                  std   >GrfMem+gr005B save in grfdrv mem
                      (/dd/sourcecode/as):01879                ENDC 
09D8 16F9E1           (/dd/sourcecode/as):01880                  lbra  L00F7          go do it
                      (/dd/sourcecode/as):01881         
                      (/dd/sourcecode/as):01882         ****************************
                      (/dd/sourcecode/as):01883         * SetDPtr entry point
09DB 3450             (/dd/sourcecode/as):01884         SetDPtr  pshs  x,u            preserve static mem & param pointers
09DD 17FD38           (/dd/sourcecode/as):01885                  lbsr  L06A0          Verify/Create window
09E0 2405             (/dd/sourcecode/as):01886                  bcc   L092A          Got window, continue
09E2 3550             (/dd/sourcecode/as):01887         L0925    puls  x,u            Restore regs & exit with error
09E4 16FD2E           (/dd/sourcecode/as):01888                  lbra  L069D
                      (/dd/sourcecode/as):01889         
09E7 3420             (/dd/sourcecode/as):01890         L092A    pshs  y              save window table pointer
09E9 8D70             (/dd/sourcecode/as):01891                  bsr   L098D          Get graphics table ptr into y
                      (/dd/sourcecode/as):01892                IFNE  H6309
                      (/dd/sourcecode/as):01893                  ldq   ,x             get co-ordinates from parameters
                      (/dd/sourcecode/as):01894                  stq   Gt.GXCur,y     put co-ordinates into graphics table
                      (/dd/sourcecode/as):01895                ELSE
09EB EC02             (/dd/sourcecode/as):01896                  ldd   2,x
09ED ED23             (/dd/sourcecode/as):01897                  std   Gt.GXCur+2,y   put co-ordinates into graphics table
09EF FD11B5           (/dd/sourcecode/as):01898                  std   >GrfMem+gr00B5
09F2 EC84             (/dd/sourcecode/as):01899                  ldd   ,x
09F4 ED21             (/dd/sourcecode/as):01900                  std   Gt.GXCur,y     put co-ordinates into graphics table
                      (/dd/sourcecode/as):01901                ENDC 
09F6 3520             (/dd/sourcecode/as):01902         L0934    puls  y
09F8 3264             (/dd/sourcecode/as):01903                  leas  4,s
09FA 5F               (/dd/sourcecode/as):01904                  clrb  
09FB 39               (/dd/sourcecode/as):01905                  rts   
                      (/dd/sourcecode/as):01906         
                      (/dd/sourcecode/as):01907         ****************************
                      (/dd/sourcecode/as):01908         * RSetDPtr
09FC 3450             (/dd/sourcecode/as):01909         RSetDPtr pshs  u,x
09FE 17FD17           (/dd/sourcecode/as):01910                  lbsr  L06A0          Verify/create window
0A01 25DF             (/dd/sourcecode/as):01911                  bcs   L0925
0A03 3420             (/dd/sourcecode/as):01912                  pshs  y
0A05 8D54             (/dd/sourcecode/as):01913                  bsr   L098D          Get graphics table ptr into y
                      (/dd/sourcecode/as):01914                IFNE  H6309
                      (/dd/sourcecode/as):01915                  ldq   ,x             Get graphics cursor coords
                      (/dd/sourcecode/as):01916                  addd  Gt.GXCur,y     Add to graphics cursor coords
                      (/dd/sourcecode/as):01917                  addw  Gt.GYCur,y
                      (/dd/sourcecode/as):01918                  stq   Gt.GXCur,y     Save update cursor coords
                      (/dd/sourcecode/as):01919                ELSE
0A07 EC02             (/dd/sourcecode/as):01920                  ldd   2,x
0A09 E323             (/dd/sourcecode/as):01921                  addd  Gt.GYCur,y
0A0B ED23             (/dd/sourcecode/as):01922                  std   Gt.GXCur+2,y
0A0D FD11B5           (/dd/sourcecode/as):01923                  std   >GrfMem+gr00B5 
0A10 EC84             (/dd/sourcecode/as):01924                  ldd   ,x
0A12 E321             (/dd/sourcecode/as):01925                  addd  Gt.GXCur,y
0A14 ED21             (/dd/sourcecode/as):01926                  std   Gt.GXCur,y
                      (/dd/sourcecode/as):01927                ENDC
0A16 20DE             (/dd/sourcecode/as):01928                  bra   L0934
                      (/dd/sourcecode/as):01929         
                      (/dd/sourcecode/as):01930         ****************************
                      (/dd/sourcecode/as):01931         * Point entry point
0A18 3450             (/dd/sourcecode/as):01932         Point    pshs  u,x
0A1A 17FCFB           (/dd/sourcecode/as):01933                  lbsr  L06A0
0A1D 25C3             (/dd/sourcecode/as):01934                  bcs   L0925
0A1F 3420             (/dd/sourcecode/as):01935                  pshs  y
0A21 8D38             (/dd/sourcecode/as):01936                  bsr   L098D
0A23 1700EE           (/dd/sourcecode/as):01937                  lbsr  L0A32
0A26 3520             (/dd/sourcecode/as):01938         L0961    puls  y
0A28 3264             (/dd/sourcecode/as):01939                  leas  4,s
0A2A 16F98F           (/dd/sourcecode/as):01940                  lbra  L00F7
                      (/dd/sourcecode/as):01941         
                      (/dd/sourcecode/as):01942         ****************************
                      (/dd/sourcecode/as):01943         * RPoint entry point
0A2D 3450             (/dd/sourcecode/as):01944         RPoint   pshs  u,x
0A2F 17FCE6           (/dd/sourcecode/as):01945                  lbsr  L06A0
0A32 25AE             (/dd/sourcecode/as):01946                  bcs   L0925
0A34 3420             (/dd/sourcecode/as):01947                  pshs  y
0A36 8D23             (/dd/sourcecode/as):01948                  bsr   L098D
                      (/dd/sourcecode/as):01949                IFNE  H6309
                      (/dd/sourcecode/as):01950                  ldq   ,x             Get coord offsets
                      (/dd/sourcecode/as):01951                  addd  Gt.GXCur,y Add to X
                      (/dd/sourcecode/as):01952                  addw  Gt.GYCur,y Add to Y
                      (/dd/sourcecode/as):01953                  stq   >GrfMem+gr0047  Save in GRFDRV mem
                      (/dd/sourcecode/as):01954                ELSE
0A38 EC02             (/dd/sourcecode/as):01955                  ldd   2,x
0A3A E323             (/dd/sourcecode/as):01956                  addd  Gt.GYCur,y
0A3C FD1149           (/dd/sourcecode/as):01957                  std   >GrfMem+gr0047+2
0A3F FD11B5           (/dd/sourcecode/as):01958                  std   >GrfMem+gr00B5
0A42 EC84             (/dd/sourcecode/as):01959                  ldd   ,x
0A44 E321             (/dd/sourcecode/as):01960                  addd  Gt.GXCur,y
0A46 FD1147           (/dd/sourcecode/as):01961                  std   >GrfMem+gr0047
                      (/dd/sourcecode/as):01962                ENDC
0A49 20DB             (/dd/sourcecode/as):01963                  bra   L0961
                      (/dd/sourcecode/as):01964         
                      (/dd/sourcecode/as):01965         ****************************
                      (/dd/sourcecode/as):01966         * Line/Box/Bar entry point
0A4B                  (/dd/sourcecode/as):01967         Line
0A4B                  (/dd/sourcecode/as):01968         Bar
0A4B 3450             (/dd/sourcecode/as):01969         Box      pshs  u,x
0A4D 17FCC8           (/dd/sourcecode/as):01970                  lbsr  L06A0
0A50 2590             (/dd/sourcecode/as):01971                  bcs   L0925
0A52 3420             (/dd/sourcecode/as):01972         L0984    pshs  y
0A54 8D05             (/dd/sourcecode/as):01973                  bsr   L098D
0A56 1700CC           (/dd/sourcecode/as):01974                  lbsr  L0A51
0A59 20CB             (/dd/sourcecode/as):01975         L098B    bra   L0961
                      (/dd/sourcecode/as):01976         
                      (/dd/sourcecode/as):01977         * Get graphics table pointer into Y
0A5B EE66             (/dd/sourcecode/as):01978         L098D    ldu   6,s            get static mem pointer
0A5D 17FCF5           (/dd/sourcecode/as):01979                  lbsr  L06B9          get graphics table pointer
0A60 3184             (/dd/sourcecode/as):01980                  leay  ,x             Move it to Y
0A62 AE64             (/dd/sourcecode/as):01981                  ldx   4,s            get parameter pointer
0A64 39               (/dd/sourcecode/as):01982                  rts                  return
                      (/dd/sourcecode/as):01983         
                      (/dd/sourcecode/as):01984         ****************************
                      (/dd/sourcecode/as):01985         * RLine/RBox/RBar entry point
                      (/dd/sourcecode/as):01986         * Entry: U=Static memory pointer
                      (/dd/sourcecode/as):01987         *        Y=Path descriptor pointer
                      (/dd/sourcecode/as):01988         *        X=Parameter pointer
0A65                  (/dd/sourcecode/as):01989         RLine
0A65                  (/dd/sourcecode/as):01990         RBox
0A65 3450             (/dd/sourcecode/as):01991         RBar     pshs  u,x            save static & parameter pointers
0A67 17FCAE           (/dd/sourcecode/as):01992                  lbsr  L06A0          get window table pointer
                      (/dd/sourcecode/as):01993                IFNE  H6309
                      (/dd/sourcecode/as):01994                  bcs   L0925
                      (/dd/sourcecode/as):01995                ELSE
0A6A 1025FF74         (/dd/sourcecode/as):01996                  lbcs  L0925
                      (/dd/sourcecode/as):01997                ENDC
0A6E 3420             (/dd/sourcecode/as):01998         L09A3    pshs  y              preserve window table pointer
0A70 8DE9             (/dd/sourcecode/as):01999                  bsr   L098D          get graphics table pointer
0A72 1700D2           (/dd/sourcecode/as):02000                  lbsr  L0A5E
0A75 20AF             (/dd/sourcecode/as):02001                  bra   L0961
                      (/dd/sourcecode/as):02002         
                      (/dd/sourcecode/as):02003         ****************************
                      (/dd/sourcecode/as):02004         * LineM entry point
0A77 3450             (/dd/sourcecode/as):02005         LineM    pshs  u,x
0A79 17FC9C           (/dd/sourcecode/as):02006                  lbsr  L06A0
0A7C 1025FF62         (/dd/sourcecode/as):02007                  lbcs  L0925
0A80 3420             (/dd/sourcecode/as):02008                  pshs  y
0A82 8DD7             (/dd/sourcecode/as):02009                  bsr   L098D
                      (/dd/sourcecode/as):02010                IFNE  H6309
                      (/dd/sourcecode/as):02011                  bsr   L0A51
                      (/dd/sourcecode/as):02012                ELSE
0A84 17009E           (/dd/sourcecode/as):02013                  lbsr  L0A51
                      (/dd/sourcecode/as):02014                ENDC
                      (/dd/sourcecode/as):02015         
     0A87             (/dd/sourcecode/as):02016         L09BC    equ   *
                      (/dd/sourcecode/as):02017                IFNE  H6309
                      (/dd/sourcecode/as):02018                  ldq   >GrfMem+gr004B
                      (/dd/sourcecode/as):02019                  stq   Gt.GXCur,y
                      (/dd/sourcecode/as):02020                ELSE
0A87 FC114D           (/dd/sourcecode/as):02021                  ldd   >GrfMem+gr004B+2
0A8A ED23             (/dd/sourcecode/as):02022                  std   Gt.GXCur+2,y
0A8C FD11B5           (/dd/sourcecode/as):02023                  std   >GrfMem+gr00B5
0A8F FC114B           (/dd/sourcecode/as):02024                  ldd   >GrfMem+gr004B
0A92 ED21             (/dd/sourcecode/as):02025                  std   Gt.GXCur,y
                      (/dd/sourcecode/as):02026                ENDC
0A94 2090             (/dd/sourcecode/as):02027                  bra   L0961
                      (/dd/sourcecode/as):02028         
                      (/dd/sourcecode/as):02029         ****************************
                      (/dd/sourcecode/as):02030         * RLineM entry point
0A96 3450             (/dd/sourcecode/as):02031         RLineM   pshs  u,x
0A98 17FC7D           (/dd/sourcecode/as):02032                  lbsr  L06A0
0A9B 1025FF43         (/dd/sourcecode/as):02033                  lbcs  L0925
0A9F 3420             (/dd/sourcecode/as):02034                  pshs  y
0AA1 8DB8             (/dd/sourcecode/as):02035                  bsr   L098D
                      (/dd/sourcecode/as):02036                IFNE  H6309
                      (/dd/sourcecode/as):02037                  bsr   L0A5E
                      (/dd/sourcecode/as):02038                ELSE
0AA3 1700A1           (/dd/sourcecode/as):02039                  lbsr  L0A5E
                      (/dd/sourcecode/as):02040                ENDC
0AA6 20DF             (/dd/sourcecode/as):02041                  bra   L09BC
                      (/dd/sourcecode/as):02042         
                      (/dd/sourcecode/as):02043         * Filled Circle/Ellipse entry point
0AA8 8601             (/dd/sourcecode/as):02044         Filled   lda   #1             Filled flag
0AAA B711B2           (/dd/sourcecode/as):02045                  sta   >GrfMem+gr00B2 Save flag
0AAD 2003             (/dd/sourcecode/as):02046                  bra   FlagSet        skip ahead
                      (/dd/sourcecode/as):02047         
                      (/dd/sourcecode/as):02048         * FFill/Circle/Ellipse/Arc entry point
0AAF                  (/dd/sourcecode/as):02049         Circle
0AAF                  (/dd/sourcecode/as):02050         Ellipse
0AAF                  (/dd/sourcecode/as):02051         Arc
0AAF 7F11B2           (/dd/sourcecode/as):02052         FFill    clr   >GrfMem+gr00B2 Clear filled flag
0AB2 3450             (/dd/sourcecode/as):02053         FlagSet  pshs  u,x            Preserve regs
0AB4 17FC61           (/dd/sourcecode/as):02054                  lbsr  L06A0          verify window table
0AB7 1025FF27         (/dd/sourcecode/as):02055                  lbcs  L0925          error, return
0ABB 3420             (/dd/sourcecode/as):02056                  pshs  y              preserve window table pointer
0ABD EE64             (/dd/sourcecode/as):02057                  ldu   4,s            get device static mem pointer
0ABF E6C837           (/dd/sourcecode/as):02058                  ldb   V.CallCde,u    get grfdrv call #
0AC2 3404             (/dd/sourcecode/as):02059                  pshs  b              save it
0AC4 17FC8E           (/dd/sourcecode/as):02060                  lbsr  L06B9          get graphics table pointer
0AC7 3184             (/dd/sourcecode/as):02061                  leay  ,x             move it to Y
0AC9 AE63             (/dd/sourcecode/as):02062                  ldx   3,s            get parameter pointer
                      (/dd/sourcecode/as):02063                IFNE  H6309
                      (/dd/sourcecode/as):02064                  ldq   Gt.GXCur,y     Get Current graphics cursor coords from graphics table
                      (/dd/sourcecode/as):02065                  stq   >GrfMem+gr0047 Save in GRFDRV mem
                      (/dd/sourcecode/as):02066                ELSE
0ACB EC23             (/dd/sourcecode/as):02067                  ldd   Gt.GXCur+2,y   Get current graphics cursor Y coord from graphics table
0ACD FD11B5           (/dd/sourcecode/as):02068                  std   >GrfMem+gr00B5 Save W dupe for 6809 (may not need?)
0AD0 FD1149           (/dd/sourcecode/as):02069                  std   >GrfMem+gr0047+2  Save in GRFDRV mem
0AD3 EC21             (/dd/sourcecode/as):02070                  ldd   Gt.GXCur,y     Get current graphics cursor X coord from graphics table
0AD5 FD1147           (/dd/sourcecode/as):02071                  std   >GrfMem+gr0047 Save in GRFDRV mem
                      (/dd/sourcecode/as):02072                ENDC
0AD8 3504             (/dd/sourcecode/as):02073                  puls  b              restore callcode
0ADA C156             (/dd/sourcecode/as):02074                  cmpb  #$56           is it flood fill?
0ADC 2733             (/dd/sourcecode/as):02075                  beq   L0A2D          yes, have all needed parms copied; let grfdrv do it
                      (/dd/sourcecode/as):02076                IFNE  H6309
                      (/dd/sourcecode/as):02077                  ldw   ,x++           get X radius from parameters
                      (/dd/sourcecode/as):02078                  stw   >GrfMem+gr0053 save it in grfdrv mem
                      (/dd/sourcecode/as):02079                ELSE
0ADE 10AE81           (/dd/sourcecode/as):02080                  ldy   ,x++           get X radius from parameters
0AE1 10BF1153         (/dd/sourcecode/as):02081                  sty   >GrfMem+gr0053 save it in grfdrv mem
0AE5 10BF11B5         (/dd/sourcecode/as):02082                  sty   >GrfMem+gr00B5
                      (/dd/sourcecode/as):02083                ENDC 
0AE9 C150             (/dd/sourcecode/as):02084                  cmpb  #$50           is it circle?
0AEB 2724             (/dd/sourcecode/as):02085                  beq   L0A2D          yes, have all need parms copied; let grfdrv do it
                      (/dd/sourcecode/as):02086                IFNE  H6309
                      (/dd/sourcecode/as):02087                  ldw   ,x++           get Y radius from parameters
                      (/dd/sourcecode/as):02088                  stw   >GrfMem+gr0055 save it in grfdrv mem
                      (/dd/sourcecode/as):02089                ELSE
0AED 10AE81           (/dd/sourcecode/as):02090                  ldy   ,x++           get Y radius from parameters
0AF0 10BF1155         (/dd/sourcecode/as):02091                  sty   >GrfMem+gr0055 save it in grfdrv mem
0AF4 10BF11B5         (/dd/sourcecode/as):02092                  sty   >GrfMem+gr00B5
                      (/dd/sourcecode/as):02093                ENDC
0AF8 C152             (/dd/sourcecode/as):02094                  cmpb  #$52           is it ellipse?
0AFA 2715             (/dd/sourcecode/as):02095                  beq   L0A2D          yes, have all need parms copied; let grfdrv do it
0AFC 108E1120         (/dd/sourcecode/as):02096                  ldy   #GrfMem+gr0020 Move rest of parameters for ARC
                      (/dd/sourcecode/as):02097                IFNE  H6309
                      (/dd/sourcecode/as):02098                  ldw   #8
                      (/dd/sourcecode/as):02099                  tfm   x+,y+
                      (/dd/sourcecode/as):02100                ELSE
                      (/dd/sourcecode/as):02101         * 6809 LCB - Could eventually call mini stack blast copy routine, but likely slower for that small of
                      (/dd/sourcecode/as):02102         *   a copy - probably better to do pshs b,u / ldb #4, ldu ,x++ / stu ,y++ loop / puls d,u instead
0B00 3406             (/dd/sourcecode/as):02103                  pshs  d
0B02 C608             (/dd/sourcecode/as):02104                  ldb   #8
0B04 A680             (/dd/sourcecode/as):02105         L0A2Db   lda   ,x+
0B06 A7A0             (/dd/sourcecode/as):02106                  sta   ,y+
0B08 5A               (/dd/sourcecode/as):02107                  decb
0B09 26F9             (/dd/sourcecode/as):02108                  bne   L0A2Db
0B0B 4F               (/dd/sourcecode/as):02109                  clra
0B0C FD11B5           (/dd/sourcecode/as):02110                  std   >GrfMem+gr00B5
0B0F 3506             (/dd/sourcecode/as):02111                  puls  d
                      (/dd/sourcecode/as):02112                ENDC
0B11 16FF12           (/dd/sourcecode/as):02113         L0A2D    lbra  L0961          let grfdrv do the rest (NOTE: L0961 immediately puls Y)
                      (/dd/sourcecode/as):02114         
                      (/dd/sourcecode/as):02115         * Move X/Y co-ordinates from parameters into GrfDrv memory
     0B14             (/dd/sourcecode/as):02116         L0A32    equ   *
                      (/dd/sourcecode/as):02117                IFNE  H6309
                      (/dd/sourcecode/as):02118                  ldq   ,x             Get X/Y coords
                      (/dd/sourcecode/as):02119                  stq   >GrfMem+gr0047 Save in GRFDRV mem
                      (/dd/sourcecode/as):02120                ELSE
0B14 EC02             (/dd/sourcecode/as):02121                  ldd   2,x            Get Y coord
0B16 FD11B5           (/dd/sourcecode/as):02122                  std   >GrfMem+gr00B5   Save in W copy
0B19 FD1149           (/dd/sourcecode/as):02123                  std   >GrfMem+gr0047+2 Save in GRFDRV mem 
0B1C EC84             (/dd/sourcecode/as):02124                  ldd   ,x             Get X coord
0B1E FD1147           (/dd/sourcecode/as):02125                  std   >GrfMem+gr0047 Save in GRFDRV mem
                      (/dd/sourcecode/as):02126                ENDC
0B21 C604             (/dd/sourcecode/as):02127                  ldb   #4             Bump param ptr up
0B23 3A               (/dd/sourcecode/as):02128                  abx   
0B24 39               (/dd/sourcecode/as):02129                  rts   
                      (/dd/sourcecode/as):02130         
                      (/dd/sourcecode/as):02131         * Move current draw pointer co-ordinates from graphics table 
                      (/dd/sourcecode/as):02132         * and destination co-ordinates from parameters into GrfDrv memory
                      (/dd/sourcecode/as):02133         * Entry: X=Parameter pointer
                      (/dd/sourcecode/as):02134         *        Y=Graphics table pointer
                      (/dd/sourcecode/as):02135                IFNE  H6309
0B25                  (/dd/sourcecode/as):02136         L0A51    ldq   Gt.GXCur,y     Get X/Y graphics cursor coords from graphics table
                      (/dd/sourcecode/as):02137                  stq   >GrfMem+gr0047 Save in GRFDRV mem
                      (/dd/sourcecode/as):02138                  ldq   ,x             Get X/Y coords from params
0B25                  (/dd/sourcecode/as):02139         L0A59    stq   >GrfMem+gr004B Save in GRFDRV mem
                      (/dd/sourcecode/as):02140                ELSE
0B25 EC21             (/dd/sourcecode/as):02141         L0A51    ldd   Gt.GXCur,y     Get X coord from graphics table
0B27 FD1147           (/dd/sourcecode/as):02142                  std   >GrfMem+gr0047 Save in GRFDRV mem 
0B2A EC23             (/dd/sourcecode/as):02143                  ldd   Gt.GXCur+2,y   Get Y coord from graphics table
0B2C FD1149           (/dd/sourcecode/as):02144                  std   >GrfMem+gr0047+2 Save in GRFDRV mem
0B2F EC02             (/dd/sourcecode/as):02145                  ldd   2,x            Get Y coord from params
                      (/dd/sourcecode/as):02146         * 6809 - should be able to optimize this. check external calls to L0A59 first.
0B31 FD11B5           (/dd/sourcecode/as):02147                  std   >GrfMem+gr00B5 Save in "W" register copy
0B34 EC84             (/dd/sourcecode/as):02148                  ldd   ,x             Get X coord from params
0B36 3406             (/dd/sourcecode/as):02149         L0A59    pshs  d              Save on stack
0B38 FC11B5           (/dd/sourcecode/as):02150                  ldd   >GrfMem+gr00B5 Get "W" register copy *Y coord)
0B3B FD114D           (/dd/sourcecode/as):02151                  std   >GrfMem+gr004B+2 Save in GRFDRV mem
0B3E 3506             (/dd/sourcecode/as):02152                  puls  d              Get X coord from parms back
0B40 FD114B           (/dd/sourcecode/as):02153                  std   >GrfMem+gr004B Save in GRFDRV mem
                      (/dd/sourcecode/as):02154                ENDC
0B43 C604             (/dd/sourcecode/as):02155                  ldb   #4             Bump param ptr past bytes we got
0B45 3A               (/dd/sourcecode/as):02156                  abx   
0B46 39               (/dd/sourcecode/as):02157                  rts   
                      (/dd/sourcecode/as):02158         
                      (/dd/sourcecode/as):02159         * Move current draw pointer co-ordinates from graphics table & calculate
                      (/dd/sourcecode/as):02160         * Destination draw pointer from parameters & move into GrfDrv memory
                      (/dd/sourcecode/as):02161         * Entry: X=Parameter pointer
                      (/dd/sourcecode/as):02162         *        Y=Graphics table pointer
                      (/dd/sourcecode/as):02163                IFNE  H6309
0B47                  (/dd/sourcecode/as):02164         L0A5E    ldq   Gt.GXCur,y     Get coords from graphics table
                      (/dd/sourcecode/as):02165                  stq   >GrfMem+gr0047 Save in GRFDRV mem
                      (/dd/sourcecode/as):02166                  ldq   ,x             Get X/Y coords from params
                      (/dd/sourcecode/as):02167                  addd  Gt.GXCur,y     Make relative
                      (/dd/sourcecode/as):02168                  addw  Gt.GYCur,y
                      (/dd/sourcecode/as):02169                ELSE
0B47 EC21             (/dd/sourcecode/as):02170         L0A5E    ldd   Gt.GXCur,y     Get X coord from graphics table 
0B49 FD1147           (/dd/sourcecode/as):02171                  std   >GrfMem+gr0047 Save in GRFDRV mem
0B4C EC23             (/dd/sourcecode/as):02172                  ldd   Gt.GXCur+2,y   Get Y coord from graphics table
0B4E FD1149           (/dd/sourcecode/as):02173                  std   >GrfMem+gr0047+2 Save in GRFDRV mem
0B51 EC02             (/dd/sourcecode/as):02174                  ldd   2,x            Get Y coord from parms
0B53 E323             (/dd/sourcecode/as):02175                  addd  Gt.GYCur,y     Add to current graphics cursor Y coord
0B55 FD11B5           (/dd/sourcecode/as):02176                  std   >GrfMem+gr00B5  Save "W" temp
0B58 EC84             (/dd/sourcecode/as):02177                  ldd   ,x             Get X coord from params
0B5A E321             (/dd/sourcecode/as):02178                  addd  Gt.GXCur,y     Add to current graphics cursor X coord
                      (/dd/sourcecode/as):02179                ENDC
0B5C 20D8             (/dd/sourcecode/as):02180                  bra   L0A59          Save & bump param ptr
                      (/dd/sourcecode/as):02181         
                      (/dd/sourcecode/as):02182         ****************************
                      (/dd/sourcecode/as):02183         * Get status entry point
                      (/dd/sourcecode/as):02184         * Entry: A=Function call #
0B5E 8126             (/dd/sourcecode/as):02185         GetStt   cmpa  #SS.ScSiz      get screen size?
0B60 2746             (/dd/sourcecode/as):02186                  beq   L0A9A          yes, go process
0B62 8191             (/dd/sourcecode/as):02187                  cmpa  #SS.Palet      get palettes?
0B64 274F             (/dd/sourcecode/as):02188                  beq   L0AA7          yes, go process
0B66 8193             (/dd/sourcecode/as):02189                  cmpa  #SS.ScTyp      get screen type?
0B68 2779             (/dd/sourcecode/as):02190                  beq   L0AD5          yes, go process
0B6A 8196             (/dd/sourcecode/as):02191                  cmpa  #SS.FBRgs      get colors?
0B6C 10270090         (/dd/sourcecode/as):02192                  lbeq  L0AF4          yes, go process
0B70 8197             (/dd/sourcecode/as):02193                  cmpa  #SS.DfPal      get default colors?
0B72 275D             (/dd/sourcecode/as):02194                  beq   L0AC3          yes, go process
                      (/dd/sourcecode/as):02195                IFNE  CoGrf-1
0B74 8187             (/dd/sourcecode/as):02196                  cmpa  #SS.MnSel      menu select?  (CoWin ONLY)
0B76 10270A37         (/dd/sourcecode/as):02197                  lbeq  L1515          yes, go process
                      (/dd/sourcecode/as):02198                ENDC
0B7A 818F             (/dd/sourcecode/as):02199                  cmpa  #SS.ScInf      screen info?
0B7C 2703             (/dd/sourcecode/as):02200                  beq   SS.SInf        yes, go process
0B7E 16F7A4           (/dd/sourcecode/as):02201                  lbra  L0A96          All others illegal
                      (/dd/sourcecode/as):02202         
                      (/dd/sourcecode/as):02203         * SS.ScInf processor ($8F)
                      (/dd/sourcecode/as):02204         * New call to get info on current screen for use with direct mapped video
                      (/dd/sourcecode/as):02205         *  Programmer can even handle non-full sized window
                      (/dd/sourcecode/as):02206         *  Programmer will still have to get screen type to determine # bytes/line &
                      (/dd/sourcecode/as):02207         *  # of rows
                      (/dd/sourcecode/as):02208         * Returns: X=Offset into first block of screen start
                      (/dd/sourcecode/as):02209         *          A=# 8k blocks required for screen
                      (/dd/sourcecode/as):02210         *          B=Start block #
                      (/dd/sourcecode/as):02211         *          Y=High byte=X start of window
                      (/dd/sourcecode/as):02212         *            Low byte= X size of window
                      (/dd/sourcecode/as):02213         *          U=High byte=Y start of window
                      (/dd/sourcecode/as):02214         *            Low byte= Y size of window
                      (/dd/sourcecode/as):02215         * It should be noted that these are the current working area, not the original
                      (/dd/sourcecode/as):02216         *  window start/sizes
                      (/dd/sourcecode/as):02217         
0B81 8D56             (/dd/sourcecode/as):02218         SS.SInf  bsr   L0ACB          get register & window table pointers
0B83 EC33             (/dd/sourcecode/as):02219                  ldd   Wt.LStrt,y     get current screen logical start
0B85 8080             (/dd/sourcecode/as):02220                  suba  #$80           make it a offset into 1st block
0B87 ED04             (/dd/sourcecode/as):02221                  std   R$X,x          save it to caller
                      (/dd/sourcecode/as):02222                IFNE  H6309
                      (/dd/sourcecode/as):02223                  ldq   Wt.CPX,y       Get X&Y coord starts & X/Y sizes
                      (/dd/sourcecode/as):02224                  exg   b,e            Swap so registers easier for programmer
                      (/dd/sourcecode/as):02225                  stq   R$Y,x          Save X values & Y values into callers Y & U
                      (/dd/sourcecode/as):02226                ELSE
0B89 EC35             (/dd/sourcecode/as):02227                  ldd   Wt.CPX,y       Get upper left X/Y coord start for window
0B8B A706             (/dd/sourcecode/as):02228                  sta   R$Y,x          Save X start in high byte of Y
0B8D E708             (/dd/sourcecode/as):02229                  stb   R$U,x          Save Y start in high byte of U
0B8F EC37             (/dd/sourcecode/as):02230                  ldd   Wt.SZX,y       Get X/Y sizes of window
0B91 A707             (/dd/sourcecode/as):02231                  sta   R$Y+1,x        Save X size in low byte of Y
0B93 E709             (/dd/sourcecode/as):02232                  stb   R$U+1,x        Save Y size in low byte of U
                      (/dd/sourcecode/as):02233                ENDC
0B95 ECB8F0           (/dd/sourcecode/as):02234                  ldd   [Wt.STbl,y]    get screen type & start block #
0B98 840F             (/dd/sourcecode/as):02235                  anda  #$0f           make it fit table (could anda #$07, I think, to make it safer)
0B9A 338C04           (/dd/sourcecode/as):02236                  leau  <NmBlks-1,pc   point to # blocks needed for screen type (-1 since base 1, not 0)
0B9D A6C6             (/dd/sourcecode/as):02237                  lda   a,u            get # blocks
0B9F ED01             (/dd/sourcecode/as):02238                  std   R$D,x          save it to caller
0BA1 39               (/dd/sourcecode/as):02239                  rts   
                      (/dd/sourcecode/as):02240         
0BA2 020204040101     (/dd/sourcecode/as):02241         NmBlks   fcb   2,2,4,4,1,1
                      (/dd/sourcecode/as):02242         
                      (/dd/sourcecode/as):02243         * SS.ScSiz processing - Current size (with CWArea's in effect), not DWSet size
0BA8 8D2F             (/dd/sourcecode/as):02244         L0A9A    bsr   L0ACB          get register stack pointer & window table pointer
0BAA 4F               (/dd/sourcecode/as):02245                  clra  
0BAB E637             (/dd/sourcecode/as):02246                  ldb   Wt.SZX,y       get X size
0BAD ED04             (/dd/sourcecode/as):02247                  std   R$X,x          save it to caller
0BAF E638             (/dd/sourcecode/as):02248                  ldb   Wt.SZY,y       get Y size
0BB1 ED06             (/dd/sourcecode/as):02249                  std   R$Y,x          save it to caller
0BB3 5F               (/dd/sourcecode/as):02250                  clrb                 No error and return
0BB4 39               (/dd/sourcecode/as):02251                  rts   
                      (/dd/sourcecode/as):02252         
                      (/dd/sourcecode/as):02253         * SS.Palet processing
0BB5 8D22             (/dd/sourcecode/as):02254         L0AA7    bsr   L0ACB          get register stack & window table pointers
0BB7 10AE30           (/dd/sourcecode/as):02255                  ldy   Wt.STbl,y      get screen table pointer
0BBA 31A810           (/dd/sourcecode/as):02256                  leay  St.Pals,y      point to palettes
0BBD EE04             (/dd/sourcecode/as):02257         L0AAF    ldu   R$X,x          get callers buffer pointer
0BBF 9E50             (/dd/sourcecode/as):02258                  ldx   <D.Proc        get task # of caller
0BC1 E606             (/dd/sourcecode/as):02259                  ldb   P$Task,x
0BC3 9E4A             (/dd/sourcecode/as):02260                  ldx   <D.SysPrc      get task # of system
0BC5 A606             (/dd/sourcecode/as):02261                  lda   P$Task,x
0BC7 1F21             (/dd/sourcecode/as):02262                  tfr   y,x
0BC9 108E0010         (/dd/sourcecode/as):02263         L0ABB    ldy   #16            get # bytes to move
0BCD 103F38           (/dd/sourcecode/as):02264                  os9   F$Move         move 'em
0BD0 39               (/dd/sourcecode/as):02265                  rts                  return
                      (/dd/sourcecode/as):02266         
                      (/dd/sourcecode/as):02267         * SS.DfPal processing
0BD1 AE26             (/dd/sourcecode/as):02268         L0AC3    ldx   PD.RGS,y       get register stack pointer
0BD3 10BE1019         (/dd/sourcecode/as):02269                  ldy   >WGlobal+G.DefPal  get pointer to default palettes
0BD7 20E4             (/dd/sourcecode/as):02270                  bra   L0AAF          go move 'em
                      (/dd/sourcecode/as):02271         
                      (/dd/sourcecode/as):02272         * Get register stack pointer into X, window table pointer into Y & global mem
0BD9 AE26             (/dd/sourcecode/as):02273         L0ACB    ldx   PD.RGS,y       Get ptr to caller's register stack
0BDB 17FB3A           (/dd/sourcecode/as):02274                  lbsr  L06A0          Go find window table entry
0BDE 1025FB31         (/dd/sourcecode/as):02275                  lbcs  L069B          Error, exit
0BE2 39               (/dd/sourcecode/as):02276                  rts                  Return
                      (/dd/sourcecode/as):02277         
                      (/dd/sourcecode/as):02278         * SS.ScTyp processing
0BE3 8DF4             (/dd/sourcecode/as):02279         L0AD5    bsr   L0ACB          get register stack & window table pointers
0BE5 E6B8F0           (/dd/sourcecode/as):02280                  ldb   [Wt.STbl,y]    get screen type
0BE8 2B04             (/dd/sourcecode/as):02281                  bmi   L0AE2          text, skip ahead
0BEA CB04             (/dd/sourcecode/as):02282                  addb  #$04           add 4 to make it a user screen type
0BEC 200A             (/dd/sourcecode/as):02283                  bra   L0AEC          go save it
                      (/dd/sourcecode/as):02284         
0BEE C186             (/dd/sourcecode/as):02285         L0AE2    cmpb  #$86           40 column text?
0BF0 2604             (/dd/sourcecode/as):02286                  bne   L0AEA          no, skip ahead
0BF2 C601             (/dd/sourcecode/as):02287                  ldb   #$01           get screen type for 40 column text
0BF4 2002             (/dd/sourcecode/as):02288                  bra   L0AEC          save it
                      (/dd/sourcecode/as):02289         
0BF6 C602             (/dd/sourcecode/as):02290         L0AEA    ldb   #$02           get screen type for 80 column text
0BF8 E701             (/dd/sourcecode/as):02291         L0AEC    stb   R$A,x          save it to caller
0BFA 5F               (/dd/sourcecode/as):02292                  clrb  
0BFB 39               (/dd/sourcecode/as):02293                  rts   
                      (/dd/sourcecode/as):02294         
                      (/dd/sourcecode/as):02295         * Color mask for fore/back palette registers
0BFC 01               (/dd/sourcecode/as):02296         L0AF0    fcb   %00000001      $01 2 color screens
0BFD 03               (/dd/sourcecode/as):02297                  fcb   %00000011      $03 4 color screens
0BFE 0F               (/dd/sourcecode/as):02298                  fcb   %00001111      $0f 16 color screens
0BFF 0F               (/dd/sourcecode/as):02299                  fcb   %00001111      $0f 16 color screens
                      (/dd/sourcecode/as):02300         
                      (/dd/sourcecode/as):02301         * SS.FBRgs processing
0C00 8DD7             (/dd/sourcecode/as):02302         L0AF4    bsr   L0ACB          get register stack & window table pointers
0C02 8D08             (/dd/sourcecode/as):02303                  bsr   L0B01          Go get fore/back ground colors
0C04 ED01             (/dd/sourcecode/as):02304                  std   R$D,x          Save in caller's D
0C06 E645             (/dd/sourcecode/as):02305                  ldb   St.Brdr,u      Get border register
0C08 4F               (/dd/sourcecode/as):02306                  clra                 D=border color
0C09 ED04             (/dd/sourcecode/as):02307                  std   R$X,x          Save in caller's X & return
0C0B 39               (/dd/sourcecode/as):02308                  rts   
                      (/dd/sourcecode/as):02309         
0C0C E6B8F0           (/dd/sourcecode/as):02310         L0B01    ldb   [Wt.STbl,y]    Get screen type from screen table
0C0F C407             (/dd/sourcecode/as):02311                  andb  #$07           Mask off text mode, etc.
0C11 54               (/dd/sourcecode/as):02312                  lsrb                 Divide by 2 (for similiar screens)
0C12 338CE7           (/dd/sourcecode/as):02313                  leau  <L0AF0,pc      Point to masking table
0C15 E6C5             (/dd/sourcecode/as):02314                  ldb   b,u            Get table entry
0C17 1F98             (/dd/sourcecode/as):02315                  tfr   b,a            Dupe for background color too
                      (/dd/sourcecode/as):02316                IFNE  H6309
                      (/dd/sourcecode/as):02317                  andd  Wt.Fore,y      Mask with fore/bckground colors from window tbl
                      (/dd/sourcecode/as):02318                ELSE
0C19 A426             (/dd/sourcecode/as):02319                  anda  Wt.Fore,y
0C1B E427             (/dd/sourcecode/as):02320                  andb  Wt.Fore+1,y
                      (/dd/sourcecode/as):02321                ENDC
0C1D EE30             (/dd/sourcecode/as):02322                  ldu   Wt.STbl,y      Get screen table ptr for border reg
0C1F 39               (/dd/sourcecode/as):02323                  rts   
                      (/dd/sourcecode/as):02324         
                      (/dd/sourcecode/as):02325         ****************************
                      (/dd/sourcecode/as):02326         * Set status entry point
                      (/dd/sourcecode/as):02327         * Entry: U=Static memory pointer
                      (/dd/sourcecode/as):02328         *        Y=Path descriptor pointer
                      (/dd/sourcecode/as):02329         *        A=SetStat call #
0C20 8129             (/dd/sourcecode/as):02330         SetStt   cmpa  #SS.Open       Open window call (for /W)
0C22 2731             (/dd/sourcecode/as):02331                  beq   L0B4B
0C24 8184             (/dd/sourcecode/as):02332                  cmpa  #SS.MpGPB      Map Get/Put buffer into callers program space
0C26 102700A2         (/dd/sourcecode/as):02333                  lbeq  L0BD1
0C2A 8197             (/dd/sourcecode/as):02334                  cmpa  #SS.DfPal      Set default palettes
0C2C 2715             (/dd/sourcecode/as):02335                  beq   L0B38
                      (/dd/sourcecode/as):02336                IFNE  CoGrf-1
                      (/dd/sourcecode/as):02337         * Remaining SetStat's are CoWin ONLY
0C2E 8186             (/dd/sourcecode/as):02338                  cmpa  #SS.WnSet
0C30 102701C7         (/dd/sourcecode/as):02339                  lbeq  L0D23
0C34 8188             (/dd/sourcecode/as):02340                  cmpa  #SS.SBar
0C36 10270F11         (/dd/sourcecode/as):02341                  lbeq  L1AB9
0C3A 8195             (/dd/sourcecode/as):02342                  cmpa  #SS.UMBar      Update menu bar
0C3C 10270855         (/dd/sourcecode/as):02343                  lbeq  L13F5
                      (/dd/sourcecode/as):02344                ENDC
0C40 16F6E2           (/dd/sourcecode/as):02345                  lbra  L0A96          Unknown SetStat, return with error
                      (/dd/sourcecode/as):02346         
                      (/dd/sourcecode/as):02347         * SS.DfPal entry point
0C43 AE26             (/dd/sourcecode/as):02348         L0B38    ldx   PD.RGS,y       get register stack pointer
0C45 AE04             (/dd/sourcecode/as):02349                  ldx   R$X,x          get pointer to palettes
0C47 DE50             (/dd/sourcecode/as):02350                  ldu   <D.Proc        get task # of caller
0C49 A646             (/dd/sourcecode/as):02351                  lda   P$Task,u
0C4B DE4A             (/dd/sourcecode/as):02352                  ldu   <D.SysPrc      get task # of system
0C4D E646             (/dd/sourcecode/as):02353                  ldb   P$Task,u
0C4F FE1019           (/dd/sourcecode/as):02354                  ldu   >WGlobal+G.DefPal  get pointer to destination of palettes
0C52 16FF74           (/dd/sourcecode/as):02355                  lbra  L0ABB          move 'em
                      (/dd/sourcecode/as):02356         
                      (/dd/sourcecode/as):02357         * SS.Open processor
                      (/dd/sourcecode/as):02358         * Entry: X=Register stack pointer
                      (/dd/sourcecode/as):02359         *        U=Static memory pointer
                      (/dd/sourcecode/as):02360         *        Y=Path descriptor pointer
0C55 3460             (/dd/sourcecode/as):02361         L0B4B    pshs  u,y            preserve registers
0C57 AE23             (/dd/sourcecode/as):02362                  ldx   PD.DEV,y       get pointer to device table entry
0C59 AE04             (/dd/sourcecode/as):02363                  ldx   V$DESC,x       get pointer to descriptor
0C5B E6882E           (/dd/sourcecode/as):02364                  ldb   IT.WND,x       get window # from descriptor
0C5E 2A69             (/dd/sourcecode/as):02365                  bpl   L0BCD          not a legal window descriptor, return
0C60 3410             (/dd/sourcecode/as):02366                  pshs  x              save device descriptor pointer
     0C62             (/dd/sourcecode/as):02367         L0B58    equ   *
                      (/dd/sourcecode/as):02368                IFNE  H6309
                      (/dd/sourcecode/as):02369                  clrd                 start window #=0
                      (/dd/sourcecode/as):02370                ELSE
0C62 4F               (/dd/sourcecode/as):02371                  clra
0C63 5F               (/dd/sourcecode/as):02372                  clrb
                      (/dd/sourcecode/as):02373                ENDC
0C64 17F60E           (/dd/sourcecode/as):02374                  lbsr  L025B          find a free window in bit map
0C67 2406             (/dd/sourcecode/as):02375                  bcc   L0B65          got one, skip ahead
0C69 3570             (/dd/sourcecode/as):02376                  puls  u,y,x          purge stack
0C6B 53               (/dd/sourcecode/as):02377                  comb                 set carry
0C6C C6DD             (/dd/sourcecode/as):02378                  ldb   #E$MNF         get module not found error
0C6E 39               (/dd/sourcecode/as):02379                  rts                  return
                      (/dd/sourcecode/as):02380         
                      (/dd/sourcecode/as):02381         * Found a free window
0C6F 3404             (/dd/sourcecode/as):02382         L0B65    pshs  b              save window # of free entry
0C71 17F5F2           (/dd/sourcecode/as):02383                  lbsr  L024A          allocate the window we found
0C74 108E1200         (/dd/sourcecode/as):02384                  ldy   #$1200         Point to a buffer area (GPLoad area)
0C78 C677             (/dd/sourcecode/as):02385                  ldb   #'w            get window name prefix
0C7A E7A0             (/dd/sourcecode/as):02386                  stb   ,y+            put it in buffer
0C7C E6E4             (/dd/sourcecode/as):02387                  ldb   ,s             get window # that was free
                      (/dd/sourcecode/as):02388         * Convert window # in B to ASCII equivalent with high bit set
                      (/dd/sourcecode/as):02389                IFNE  H6309
                      (/dd/sourcecode/as):02390                  divd  #10        divide it by 10
                      (/dd/sourcecode/as):02391                ELSE
0C7E 86FF             (/dd/sourcecode/as):02392                  lda   #-1
0C80 4C               (/dd/sourcecode/as):02393         L0B87b   inca
0C81 C00A             (/dd/sourcecode/as):02394                  subb  #10
0C83 24FB             (/dd/sourcecode/as):02395                  bcc   L0B87b
0C85 CB0A             (/dd/sourcecode/as):02396                  addb  #10
0C87 1E89             (/dd/sourcecode/as):02397                  exg   a,b
0C89 5D               (/dd/sourcecode/as):02398                  tstb
                      (/dd/sourcecode/as):02399                ENDC
0C8A 2704             (/dd/sourcecode/as):02400                  beq   L0B87          if answer is 0 there is only 1 digit, skip ahead 
0C8C CA30             (/dd/sourcecode/as):02401                  orb   #$30           make first digit ASCII
0C8E E7A0             (/dd/sourcecode/as):02402                  stb   ,y+            put it in buffer
0C90 8AB0             (/dd/sourcecode/as):02403         L0B87    ora   #$B0           make remainder ASCII with high bit set
0C92 A7A0             (/dd/sourcecode/as):02404                  sta   ,y+            put it in buffer
0C94 327E             (/dd/sourcecode/as):02405         L0B92    leas  -2,s           make a buffer for process decriptor pointer
0C96 17F5B9           (/dd/sourcecode/as):02406                  lbsr  L0238          switch to system process descriptor
0C99 8E1200           (/dd/sourcecode/as):02407                  ldx   #$1200         Point to calculated dsc. name
0C9C 86F1             (/dd/sourcecode/as):02408                  lda   #Devic+Objct   get module type
0C9E 103F00           (/dd/sourcecode/as):02409                  os9   F$Link         try & link it
0CA1 17F5BA           (/dd/sourcecode/as):02410                  lbsr  L0244          switch back to current process
0CA4 3262             (/dd/sourcecode/as):02411                  leas  2,s            purge stack
0CA6 2404             (/dd/sourcecode/as):02412                  bcc   L0BAB          it's linked, skip ahead
0CA8 3261             (/dd/sourcecode/as):02413         L0BA7    leas  1,s            purge window #
0CAA 20B6             (/dd/sourcecode/as):02414                  bra   L0B58          go look for another one
                      (/dd/sourcecode/as):02415         
                      (/dd/sourcecode/as):02416         * Got a device descriptor, put into device table & save window # into static
0CAC A6C826           (/dd/sourcecode/as):02417         L0BAB    lda   IT.PAR,u       valid window?
0CAF 2AF7             (/dd/sourcecode/as):02418                  bpl   L0BA7          no, go look for another one
0CB1 10AE63           (/dd/sourcecode/as):02419                  ldy   3,s            get path descriptor pointer
0CB4 AE23             (/dd/sourcecode/as):02420                  ldx   PD.DEV,y       get pointer to device table
0CB6 EF04             (/dd/sourcecode/as):02421                  stu   V$DESC,x       save pointer to descriptor into it
0CB8 E6E4             (/dd/sourcecode/as):02422                  ldb   ,s             get window #
0CBA EE65             (/dd/sourcecode/as):02423                  ldu   5,s            get static mem pointer
0CBC E7C836           (/dd/sourcecode/as):02424                  stb   V.DWNum,u      save window # as active window in static mem
0CBF EE61             (/dd/sourcecode/as):02425                  ldu   1,s            get pointer to descriptor
0CC1 103F02           (/dd/sourcecode/as):02426                  os9   F$UnLink       unlink it from system map
0CC4 EE65             (/dd/sourcecode/as):02427                  ldu   5,s            get static mem pointer
0CC6 3267             (/dd/sourcecode/as):02428                  leas  7,s            purge stack
0CC8 39               (/dd/sourcecode/as):02429                  rts                  Return with or without error
                      (/dd/sourcecode/as):02430         
0CC9 5F               (/dd/sourcecode/as):02431         L0BCD    clrb                 No error
0CCA 35E0             (/dd/sourcecode/as):02432                  puls  u,y,pc         Restore regs & return
                      (/dd/sourcecode/as):02433         
                      (/dd/sourcecode/as):02434         * SS.MpGPB (map get/put buffer)
                      (/dd/sourcecode/as):02435         * Parameters: X=Group/Buffer #'s
                      (/dd/sourcecode/as):02436         *             Y=Map/Un-Map flag, 0=Un-Map, 1+=Map
                      (/dd/sourcecode/as):02437         * Returns   : X=Start address of buffer in 64k user map
                      (/dd/sourcecode/as):02438         *             Y=Length of buffer
                      (/dd/sourcecode/as):02439         * Entry: U=Static memory pointer
                      (/dd/sourcecode/as):02440         *        Y=Path descriptor pointer
0CCC AE26             (/dd/sourcecode/as):02441         L0BD1    ldx   PD.RGS,y       get register stack pointer
0CCE 3410             (/dd/sourcecode/as):02442                  pshs  x              preserve it
0CD0 17FA45           (/dd/sourcecode/as):02443                  lbsr  L06A0          verify window table
0CD3 EC04             (/dd/sourcecode/as):02444                  ldd   R$X,x          get group/buffer #'s
0CD5 FD1157           (/dd/sourcecode/as):02445                  std   >GrfMem+gr0057 save it to grfdrv mem
0CD8 C638             (/dd/sourcecode/as):02446                  ldb   #$38           get grfdrv function call to map
0CDA 17F6AE           (/dd/sourcecode/as):02447                  lbsr  L0101          let grfdrv calculate block # & count
0CDD F61197           (/dd/sourcecode/as):02448                  ldb   >GrfMem+gr0097 get block #
0CE0 B61199           (/dd/sourcecode/as):02449                  lda   >GrfMem+gr0099 get # blocks long
0CE3 3510             (/dd/sourcecode/as):02450                  puls  x              Get register stack ptr back
0CE5 6D07             (/dd/sourcecode/as):02451                  tst   R$Y+1,x        mapping or un-mapping?
0CE7 2728             (/dd/sourcecode/as):02452                  beq   L0C1F          un-map, remove it from process space
                      (/dd/sourcecode/as):02453         * Map the get/put buffer into process space
0CE9 3456             (/dd/sourcecode/as):02454                  pshs  d,x,u          save block #/# of blocks, reg stack & global
0CEB 8D3B             (/dd/sourcecode/as):02455                  bsr   L0C31          Make sure all blocks needed are there
0CED 241E             (/dd/sourcecode/as):02456                  bcc   L0C1B          Yes, exit
0CEF 4F               (/dd/sourcecode/as):02457                  clra  
0CF0 E661             (/dd/sourcecode/as):02458                  ldb   1,s            get starting block #
0CF2 1F01             (/dd/sourcecode/as):02459                  tfr   d,x
0CF4 E6E4             (/dd/sourcecode/as):02460                  ldb   ,s             get # blocks
0CF6 103F4F           (/dd/sourcecode/as):02461                  os9   F$MapBlk       map blocks into process space
0CF9 E761             (/dd/sourcecode/as):02462                  stb   1,s            save error code if any
0CFB 250E             (/dd/sourcecode/as):02463                  bcs   L0C19          return if there was a error
0CFD 1F30             (/dd/sourcecode/as):02464                  tfr   u,d            copy start address to D
0CFF AE62             (/dd/sourcecode/as):02465                  ldx   2,s            get register stack pointer
0D01 F3119D           (/dd/sourcecode/as):02466                  addd  >GrfMem+gr009D add in offset to buffer
0D04 ED04             (/dd/sourcecode/as):02467                  std   R$X,x          save offset into block of buffer
0D06 FC119B           (/dd/sourcecode/as):02468                  ldd   >GrfMem+gr009B get length of buffer
0D09 ED06             (/dd/sourcecode/as):02469                  std   R$Y,x          save it into callers Y
0D0B 35D6             (/dd/sourcecode/as):02470         L0C19    puls  d,x,u,pc       restore regs & return
                      (/dd/sourcecode/as):02471         
0D0D 3262             (/dd/sourcecode/as):02472         L0C1B    leas  2,s            purge stack
0D0F 35D0             (/dd/sourcecode/as):02473                  puls  pc,u,x
                      (/dd/sourcecode/as):02474         
                      (/dd/sourcecode/as):02475         * Remove get/put buffer from process space
0D11 3432             (/dd/sourcecode/as):02476         L0C1F    pshs  a,x,y          preserve # blocks, register stack & window table
0D13 8D13             (/dd/sourcecode/as):02477                  bsr   L0C31          Go verify all blocks are correct & contiguous
0D15 250F             (/dd/sourcecode/as):02478                  bcs   L0C2E          Nope, exit with error
                      (/dd/sourcecode/as):02479                IFNE  H6309
                      (/dd/sourcecode/as):02480                  lde   ,s             Get counter back
                      (/dd/sourcecode/as):02481                ELSE
0D17 A6E4             (/dd/sourcecode/as):02482                  lda   ,s             Get counter back
0D19 B711B5           (/dd/sourcecode/as):02483                  sta   >GrfMem+gr00B5 Save "E" copy
                      (/dd/sourcecode/as):02484                ENDC
0D1C CC333E           (/dd/sourcecode/as):02485                  ldd   #DAT.Free      Empty DAT marker
0D1F ED81             (/dd/sourcecode/as):02486         L0C28    std   ,x++           Save them in DAT image
                      (/dd/sourcecode/as):02487                IFNE  H6309
                      (/dd/sourcecode/as):02488                  dece                 Keep marking unused blocks until done
                      (/dd/sourcecode/as):02489                ELSE
0D21 7A11B5           (/dd/sourcecode/as):02490                  dec   >GrfMem+gr00B5
                      (/dd/sourcecode/as):02491                ENDC
0D24 26F9             (/dd/sourcecode/as):02492                  bne   L0C28
0D26 35B2             (/dd/sourcecode/as):02493         L0C2E    puls  a,x,y,pc       Restore regs & return
                      (/dd/sourcecode/as):02494         
                      (/dd/sourcecode/as):02495         * Verify blocks in process DAT image
                      (/dd/sourcecode/as):02496         * Entry: A=# blocks in GP buffer
                      (/dd/sourcecode/as):02497         *        B=Start block #
                      (/dd/sourcecode/as):02498         *        X=Caller's register stack ptr
                      (/dd/sourcecode/as):02499         * Exit:  A=block #*16 in DAT image
                      (/dd/sourcecode/as):02500                IFNE  H6309
0D28                  (/dd/sourcecode/as):02501         L0C31    tfr   a,e            copy start block
                      (/dd/sourcecode/as):02502                  ldf   #8             get # DAT slots
                      (/dd/sourcecode/as):02503                ELSE
0D28 3404             (/dd/sourcecode/as):02504         L0C31    pshs  b
0D2A C608             (/dd/sourcecode/as):02505                  ldb   #8             get # of DAT slots
0D2C FD11B5           (/dd/sourcecode/as):02506                  std   >GrfMem+gr00B5 Save # of blocks in GP buffer & # DAT slots
0D2F 3504             (/dd/sourcecode/as):02507                  puls  b
                      (/dd/sourcecode/as):02508                ENDC
0D31 9E50             (/dd/sourcecode/as):02509                  ldx   <D.Proc        get current process pointer
0D33 308850           (/dd/sourcecode/as):02510                  leax  P$DATImg+16,x  point to end of DAT image
                      (/dd/sourcecode/as):02511                IFNE  H6309
                      (/dd/sourcecode/as):02512                  addr  e,b            Add # blocks to start block #
                      (/dd/sourcecode/as):02513                ELSE
0D36 FB11B5           (/dd/sourcecode/as):02514                  addb  >GrfMem+gr00B5
                      (/dd/sourcecode/as):02515                ENDC
0D39 4F               (/dd/sourcecode/as):02516                  clra                 Clear high byte of D 
0D3A 5A               (/dd/sourcecode/as):02517                  decb                 Adjust for zero based
0D3B 10A383           (/dd/sourcecode/as):02518         L0C40    cmpd  ,--x           Same block as DAT image?
0D3E 2709             (/dd/sourcecode/as):02519                  beq   L0C4B          yes, skip ahead
                      (/dd/sourcecode/as):02520                  IFNE  H6309
                      (/dd/sourcecode/as):02521                  decf                 No, dec block counter
                      (/dd/sourcecode/as):02522                  ELSE
0D40 7A11B6           (/dd/sourcecode/as):02523                  dec   >GrfMem+gr00B5+1
                      (/dd/sourcecode/as):02524                  ENDC
0D43 26F6             (/dd/sourcecode/as):02525                  bne   L0C40          Do until all 8 blocks are checked
0D45 53               (/dd/sourcecode/as):02526         L0C62    comb                 Exit with boundary (bad page address) error
0D46 C6D2             (/dd/sourcecode/as):02527                  ldb   #E$BPAddr
0D48 39               (/dd/sourcecode/as):02528                  rts   
                      (/dd/sourcecode/as):02529         
     0D49             (/dd/sourcecode/as):02530         L0C4B    equ   *
                      (/dd/sourcecode/as):02531                IFNE  H6309
                      (/dd/sourcecode/as):02532                  decf                 Dec block # counter
                      (/dd/sourcecode/as):02533                  dece                 Dec # blocks in buffer counter
                      (/dd/sourcecode/as):02534                ELSE
0D49 7A11B6           (/dd/sourcecode/as):02535                  dec   >GrfMem+gr00B5+1
0D4C 7A11B5           (/dd/sourcecode/as):02536                  dec   >GrfMem+gr00B5
                      (/dd/sourcecode/as):02537                ENDC
0D4F 2707             (/dd/sourcecode/as):02538                  beq   L0C58          Do until GP blocks are checked
0D51 5A               (/dd/sourcecode/as):02539                  decb                 Dec block #
0D52 E183             (/dd/sourcecode/as):02540                  cmpb  ,--x           Same as previous one in DAT image
0D54 27F3             (/dd/sourcecode/as):02541                  beq   L0C4B          Yes, keep going
0D56 20ED             (/dd/sourcecode/as):02542                  bra   L0C62          No, exit with bad page address error
                      (/dd/sourcecode/as):02543         
                      (/dd/sourcecode/as):02544                IFNE  H6309
0D58                  (/dd/sourcecode/as):02545         L0C58    tfr   f,a            Move block # within DAT to proper reg
                      (/dd/sourcecode/as):02546                ELSE
0D58 B611B6           (/dd/sourcecode/as):02547         L0C58    lda   >GrfMem+gr00B5+1  Move block # within DAT to proper reg
                      (/dd/sourcecode/as):02548                ENDC
0D5B 48               (/dd/sourcecode/as):02549                  lsla                 Multiply x 16
0D5C 48               (/dd/sourcecode/as):02550                  lsla  
0D5D 48               (/dd/sourcecode/as):02551                  lsla  
0D5E 48               (/dd/sourcecode/as):02552                  lsla  
0D5F 5F               (/dd/sourcecode/as):02553                  clrb  
0D60 39               (/dd/sourcecode/as):02554         L0CF1    rts                  return
                      (/dd/sourcecode/as):02555         
                      (/dd/sourcecode/as):02556         ******************************
                      (/dd/sourcecode/as):02557         * Special windowing processor (called from AltIRQ in VTIO)
                      (/dd/sourcecode/as):02558         * Entry: A=$00 - Screen has changed in some way
                      (/dd/sourcecode/as):02559         *          $01 - Update mouse packet window region (Pt.Stat)
                      (/dd/sourcecode/as):02560         *          $02 - Update text & graphics cursor
                      (/dd/sourcecode/as):02561         *          $03 - Update auto follow mouse
0D61 4D               (/dd/sourcecode/as):02562         L0C68    tsta                 Screen change?
0D62 2710             (/dd/sourcecode/as):02563                  beq   L0C7F          Yes, go do
0D64 4A               (/dd/sourcecode/as):02564                  deca                 Update mouse packet?
                      (/dd/sourcecode/as):02565         * TODO: Does update mouse packet go in CoGrf? YES, PRETTY SURE IT DID?
                      (/dd/sourcecode/as):02566                IFNE  CoGrf-1
0D65 102710A0         (/dd/sourcecode/as):02567                  lbeq  L1CC8          Yes, go do
                      (/dd/sourcecode/as):02568                ENDC
0D69 4A               (/dd/sourcecode/as):02569                  deca                 Update cursors?
0D6A 2761             (/dd/sourcecode/as):02570                  beq   L0CE7          Yes, go do
                      (/dd/sourcecode/as):02571         * TODO: Does auto-follow mouse go in CoGrf?
                      (/dd/sourcecode/as):02572                IFNE  CoGrf-1
0D6C 4A               (/dd/sourcecode/as):02573                  deca                 Update auto-follow mouse?
0D6D 10270E6B         (/dd/sourcecode/as):02574                  lbeq  L1B4D          Yes, go do
                      (/dd/sourcecode/as):02575                ENDC
0D71 16F5B1           (/dd/sourcecode/as):02576                  lbra  L0A96
                      (/dd/sourcecode/as):02577         
                      (/dd/sourcecode/as):02578         * Active window has changed, update everything
0D74 17F9D2           (/dd/sourcecode/as):02579         L0C7F    lbsr  L06AE          Get window table pointer
0D77 EC30             (/dd/sourcecode/as):02580                  ldd   Wt.STbl,y      Screen table active?
                      (/dd/sourcecode/as):02581         * NOTE: IS THIS THE WHITE SCREEN BUG???
0D79 2BE5             (/dd/sourcecode/as):02582                  bmi   L0CF1          No, return
                      (/dd/sourcecode/as):02583         * Check for de-activation of previous window
0D7B 6FE2             (/dd/sourcecode/as):02584         L0C86    clr   ,-s            clear activate/deactivate flag
0D7D BE1022           (/dd/sourcecode/as):02585                  ldx   >WGlobal+G.PrWMPt  get previous window static mem pointer
0D80 BC1020           (/dd/sourcecode/as):02586                  cmpx  >WGlobal+G.CurDev  Same as current device?
0D83 271D             (/dd/sourcecode/as):02587                  beq   L0CB3          Yes, activate current window
0D85 6CE4             (/dd/sourcecode/as):02588                  inc   ,s             flag de-activation of last used window
0D87 FE1022           (/dd/sourcecode/as):02589                  ldu   >WGlobal+G.PrWMPt  get previous device static mem pointer
0D8A 2716             (/dd/sourcecode/as):02590                  beq   L0CB3          nothing there, skip ahead
0D8C 3420             (/dd/sourcecode/as):02591                  pshs  y              preserve new window table pointer
0D8E 8D47             (/dd/sourcecode/as):02592                  bsr   L0CF2          any overlay windows or frames?
                      (/dd/sourcecode/as):02593                IFNE  CoGrf-1
0D90 2503             (/dd/sourcecode/as):02594                  bcs   L0CA3          no, skip ahead
0D92 17036C           (/dd/sourcecode/as):02595                  lbsr  L1034          set menu bar to in-active state
                      (/dd/sourcecode/as):02596                ENDC
0D95 B610BE           (/dd/sourcecode/as):02597         L0CA3    lda   >WGlobal+g00BE get new window table flag
0D98 2B06             (/dd/sourcecode/as):02598                  bmi   L0CB1          not used, skip ahead
0D9A FE1022           (/dd/sourcecode/as):02599                  ldu   >WGlobal+G.PrWMPt  get previous device static mem pointer
0D9D A7C835           (/dd/sourcecode/as):02600                  sta   V.WinNum,u     save window table # into it
0DA0 3520             (/dd/sourcecode/as):02601         L0CB1    puls  y              restore window table pointer
                      (/dd/sourcecode/as):02602         * Send select to grfdrv
0DA2 C610             (/dd/sourcecode/as):02603         L0CB3    ldb   #$10           Get select callcode
0DA4 17F5E4           (/dd/sourcecode/as):02604                  lbsr  L0101          Send it to grfdrv
0DA7 FE1020           (/dd/sourcecode/as):02605                  ldu   >WGlobal+G.CurDev  Get current device static mem pointer
                      (/dd/sourcecode/as):02606         * Check for activation of current window
0DAA 6DE4             (/dd/sourcecode/as):02607                  tst   ,s             did we de-activate last used window?
0DAC 2719             (/dd/sourcecode/as):02608                  beq   L0CE1          no, skip activate
0DAE 3460             (/dd/sourcecode/as):02609                  pshs  y,u            Preserve regs
0DB0 8D25             (/dd/sourcecode/as):02610                  bsr   L0CF2          any overlay or framed windows?
                      (/dd/sourcecode/as):02611                IFNE  CoGrf-1
0DB2 2503             (/dd/sourcecode/as):02612                  bcs   L0CCA          no, skip ahead
0DB4 1706D2           (/dd/sourcecode/as):02613                  lbsr  L13E9          set menu bar to active state
                      (/dd/sourcecode/as):02614                ENDC
0DB7 FE1020           (/dd/sourcecode/as):02615         L0CCA    ldu   >WGlobal+G.CurDev  get current device mem pointer
0DBA FF1022           (/dd/sourcecode/as):02616                  stu   >WGlobal+G.PrWMPt  save it as previous
0DBD 3560             (/dd/sourcecode/as):02617                  puls  u,y            Get Y & static mem ptr back for possible overlay
0DBF B610BE           (/dd/sourcecode/as):02618                  lda   >WGlobal+g00BE get overlay window #
0DC2 2B03             (/dd/sourcecode/as):02619                  bmi   L0CE1          Wasn't an overlay, skip ahead
0DC4 A7C835           (/dd/sourcecode/as):02620                  sta   V.WinNum,u     save it as current
0DC7 3261             (/dd/sourcecode/as):02621         L0CE1    leas  1,s            purge stack
0DC9 6E9F10C4         (/dd/sourcecode/as):02622                  jmp   [>WGlobal+G.MsInit]   initialize mouse & return
                      (/dd/sourcecode/as):02623         
                      (/dd/sourcecode/as):02624         * Update text & mouse cursors
0DCD 17F948           (/dd/sourcecode/as):02625         L0CE7    lbsr  L06A0          verify window table
0DD0 258E             (/dd/sourcecode/as):02626                  bcs   L0CF1          not good, return error
0DD2 C646             (/dd/sourcecode/as):02627         L0CEC    ldb   #$46           get set window code
0DD4 16F5B4           (/dd/sourcecode/as):02628                  lbra  L0101          send it to grfdrv
                      (/dd/sourcecode/as):02629         
                      (/dd/sourcecode/as):02630         * Checks for any overlay windows & framed or scroll barred windows
                      (/dd/sourcecode/as):02631         * Entry: U=Static mem pointer
                      (/dd/sourcecode/as):02632         * Exit : Carry set=No overlay windows & No framed/scroll barred window
                      (/dd/sourcecode/as):02633         *                  $BE in global mem will be $FF
                      (/dd/sourcecode/as):02634         *        Carry clear=There is 2 possibilitys here 1: Framed or scroll barred
                      (/dd/sourcecode/as):02635         *                    window or 2: Overlay window is present, $BE in global
                      (/dd/sourcecode/as):02636         *                    will contain the current window table # & $35 in static
                      (/dd/sourcecode/as):02637         *                    memory of current device will be switched to the
                      (/dd/sourcecode/as):02638         *                    parent window of the overlay
0DD7 86FF             (/dd/sourcecode/as):02639         L0CF2    lda   #$FF           initialize new window table flag
0DD9 B710BE           (/dd/sourcecode/as):02640                  sta   >WGlobal+g00BE
0DDC 17F96A           (/dd/sourcecode/as):02641         L0CFA    lbsr  L06AE          get window table pointer of this window
                      (/dd/sourcecode/as):02642                IFNE  CoGrf-1
0DDF 170138           (/dd/sourcecode/as):02643                  lbsr  L0E34          framed or scroll barred window?
0DE2 2501             (/dd/sourcecode/as):02644                  bcs   L0D06          no, skip ahead
0DE4 39               (/dd/sourcecode/as):02645                  rts   
                      (/dd/sourcecode/as):02646                ENDC
                      (/dd/sourcecode/as):02647         
                      (/dd/sourcecode/as):02648         * No framed or scroll barred window, check for overlay window
0DE5 A632             (/dd/sourcecode/as):02649         L0D06    lda   Wt.BLnk,y      is this a overlay window?
0DE7 2B10             (/dd/sourcecode/as):02650                  bmi   L0D20          no, return carry set
0DE9 E6C835           (/dd/sourcecode/as):02651                  ldb   V.WinNum,u     get current window table #
0DEC 7D10BE           (/dd/sourcecode/as):02652                  tst   >WGlobal+g00BE already have one?
0DEF 2A03             (/dd/sourcecode/as):02653                  bpl   L0D1B          yes, skip ahead
0DF1 F710BE           (/dd/sourcecode/as):02654                  stb   >WGlobal+g00BE save current window #
0DF4 A7C835           (/dd/sourcecode/as):02655         L0D1B    sta   V.WinNum,u     save back link as current window in static mem
0DF7 20E3             (/dd/sourcecode/as):02656                  bra   L0CFA          go check it out
                      (/dd/sourcecode/as):02657         
0DF9 43               (/dd/sourcecode/as):02658         L0D20    coma                 set carry & return
0DFA 39               (/dd/sourcecode/as):02659                  rts   
                      (/dd/sourcecode/as):02660         
                      (/dd/sourcecode/as):02661                IFNE  CoGrf-1
                      (/dd/sourcecode/as):02662         * SS.WnSet SetStt call processor
0DFB 17061D           (/dd/sourcecode/as):02663         L0D23    lbsr  L1358          setup the graphics table entry
0DFE AE26             (/dd/sourcecode/as):02664                  ldx   PD.RGS,y       get register stack pointer
0E00 E607             (/dd/sourcecode/as):02665                  ldb   R$Y+1,x        get requested window type
0E02 C105             (/dd/sourcecode/as):02666                  cmpb  #WT.PBox       past maximum?
0E04 1022F93D         (/dd/sourcecode/as):02667                  lbhi  L0697          yes, return error
0E08 58               (/dd/sourcecode/as):02668                  lslb                 adjust for 2 bytes/entry
0E09 308C04           (/dd/sourcecode/as):02669                  leax  <L0D3C,pc      point to vector table
0E0C EC85             (/dd/sourcecode/as):02670                  ldd   b,x            get offset
0E0E 6E8B             (/dd/sourcecode/as):02671                  jmp   d,x            continue from there
                      (/dd/sourcecode/as):02672         
0E10 01DC             (/dd/sourcecode/as):02673         L0D3C    fdb   L0F9A-L0D3C    No box
0E12 000C             (/dd/sourcecode/as):02674                  fdb   L0D48-L0D3C    Framed window
0E14 00BF             (/dd/sourcecode/as):02675                  fdb   L0DE8-L0D3C    Framed scroll barred window
0E16 013B             (/dd/sourcecode/as):02676                  fdb   L0E68-L0D3C    shadowed window
0E18 019F             (/dd/sourcecode/as):02677                  fdb   L0EFC-L0D3C    double box
0E1A 023B             (/dd/sourcecode/as):02678                  fdb   L0FF2-L0D3C    plain box
                      (/dd/sourcecode/as):02679         
                      (/dd/sourcecode/as):02680         * Process framed window setstat
0E1C 1700CD           (/dd/sourcecode/as):02681         L0D48    lbsr  L0E04          is this an overlay window?
0E1F 2408             (/dd/sourcecode/as):02682                  bcc   L0D55          no, skip ahead
0E21 7D100A           (/dd/sourcecode/as):02683                  tst   >WGlobal+G.CrDvFl  are we the active device?
0E24 2703             (/dd/sourcecode/as):02684                  beq   L0D55          No, skip ahead
0E26 1700D0           (/dd/sourcecode/as):02685                  lbsr  L0E13          de-activate parent window's menu bar
0E29 1703BA           (/dd/sourcecode/as):02686         L0D55    lbsr  L115F          copy window table & check for graphics screen
0E2C 8601             (/dd/sourcecode/as):02687                  lda   #WT.FWin       get window type
0E2E 8D20             (/dd/sourcecode/as):02688                  bsr   L0D80          get window descriptor & setup graphics table entry
0E30 240C             (/dd/sourcecode/as):02689                  bcc   L0D6A          went ok, skip ahead
                      (/dd/sourcecode/as):02690         * Error, re-draw parent window & return
0E32 3405             (/dd/sourcecode/as):02691         L0D5E    pshs  cc,b           Preserve error
0E34 7D100A           (/dd/sourcecode/as):02692                  tst   >WGlobal+G.CrDvFl  Are we active device?
0E37 2703             (/dd/sourcecode/as):02693                  beq   L0D68          No, exit with error
0E39 1700F5           (/dd/sourcecode/as):02694                  lbsr  L0E4B          activate parent window's menu bar
0E3C 3585             (/dd/sourcecode/as):02695         L0D68    puls  cc,b,pc        Exit with error
                      (/dd/sourcecode/as):02696         
                      (/dd/sourcecode/as):02697         * Window descriptor is good, print it according to active/in-active
0E3E 7D100A           (/dd/sourcecode/as):02698         L0D6A    tst   >WGlobal+G.CrDvFl  are we the active window?
0E41 2705             (/dd/sourcecode/as):02699                  beq   L0D74          no, skip ahead
0E43 170652           (/dd/sourcecode/as):02700                  lbsr  L13FA          print menu in active state
0E46 2003             (/dd/sourcecode/as):02701                  bra   L0D77          skip ahead
                      (/dd/sourcecode/as):02702         
0E48 1702B9           (/dd/sourcecode/as):02703         L0D74    lbsr  L1037          print menu in in-active state
0E4B 2573             (/dd/sourcecode/as):02704         L0D77    bcs   L0D7F          error on printing, return
0E4D 16041F           (/dd/sourcecode/as):02705                  lbra  L11F3          change window working size for frame & exit
                      (/dd/sourcecode/as):02706         
                      (/dd/sourcecode/as):02707         * Setup graphics table entry with window type & check sizes
                      (/dd/sourcecode/as):02708         * Entry: A=Window type (Not related to grfdrv, cowin specific)
                      (/dd/sourcecode/as):02709         *        X=Graphics table entry pointer
                      (/dd/sourcecode/as):02710         *        Y=Path descriptor pointer
0E50 32E8DE           (/dd/sourcecode/as):02711         L0D80    leas  -WN.SIZ,s      make a buffer to preserve current window desc.
0E53 A784             (/dd/sourcecode/as):02712                  sta   ,x             save window type
0E55 EE26             (/dd/sourcecode/as):02713                  ldu   PD.RGS,y       get pointer to register stack
0E57 EE44             (/dd/sourcecode/as):02714                  ldu   R$X,u          get pointer to window descriptor
0E59 EF05             (/dd/sourcecode/as):02715                  stu   Gt.DPtr,x      save it in graphics table
                      (/dd/sourcecode/as):02716                IFNE  H6309
                      (/dd/sourcecode/as):02717                  ldw   <D.Proc        get process ID of creator
                      (/dd/sourcecode/as):02718                  lda   P$ID,w
                      (/dd/sourcecode/as):02719                  sta   Gt.Proc,x      save it in graphics table
                      (/dd/sourcecode/as):02720                  ste   Gt.PBlk,x      Save process block # into graphics table
                      (/dd/sourcecode/as):02721                ELSE
0E5B 3420             (/dd/sourcecode/as):02722                  pshs  y
0E5D 109E50           (/dd/sourcecode/as):02723                  ldy   <D.Proc        get process ID of creator
0E60 10BF11B5         (/dd/sourcecode/as):02724                  sty   >GrfMem+gr00B5 Save "W" copy
0E64 9650             (/dd/sourcecode/as):02725                  lda   <D.Proc        Get process block #    
0E66 A70F             (/dd/sourcecode/as):02726                  sta   Gt.PBlk,x      ste  - Save process block # into graphics table
0E68 A6A4             (/dd/sourcecode/as):02727                  lda   P$ID,y         Get process ID # of creator
0E6A A70E             (/dd/sourcecode/as):02728                  sta   Gt.Proc,x      Save in graphics table
0E6C 3520             (/dd/sourcecode/as):02729                  puls  y
                      (/dd/sourcecode/as):02730                ENDC
0E6E 33E4             (/dd/sourcecode/as):02731                  leau  ,s             point to buffer
0E70 3410             (/dd/sourcecode/as):02732                  pshs  x              save graphics table pointer
0E72 BE1075           (/dd/sourcecode/as):02733                  ldx   >WGlobal+G.GfxTbl  get graphics table pointer
0E75 30890240         (/dd/sourcecode/as):02734                  leax  >$0240,x       point to window descriptor buffer
                      (/dd/sourcecode/as):02735                IFNE  H6309
                      (/dd/sourcecode/as):02736                  ldw   #WN.SIZ        Preserve window descriptor in stack buffer
                      (/dd/sourcecode/as):02737                  tfm   x+,u+
                      (/dd/sourcecode/as):02738                ELSE
                      (/dd/sourcecode/as):02739         * 6809 - eventually use mini stack blast copy (34 byte copy)
0E79 3406             (/dd/sourcecode/as):02740                  pshs  d
0E7B C622             (/dd/sourcecode/as):02741                  ldb   #WN.SIZ        Copy from window descriptor buffer to temp stack copy
0E7D A680             (/dd/sourcecode/as):02742         L0D80b   lda   ,x+
0E7F A7C0             (/dd/sourcecode/as):02743                  sta   ,u+
0E81 5A               (/dd/sourcecode/as):02744                  decb
0E82 26F9             (/dd/sourcecode/as):02745                  bne   L0D80b
0E84 FD11B5           (/dd/sourcecode/as):02746                  std   >GrfMem+gr00B5
0E87 3506             (/dd/sourcecode/as):02747                  puls  d
                      (/dd/sourcecode/as):02748                ENDC
0E89 AEE4             (/dd/sourcecode/as):02749                  ldx   ,s             restore graphics table entry pointer
0E8B 1705A6           (/dd/sourcecode/as):02750                  lbsr  L1371          get window descriptor from caller
0E8E 10BE10BB         (/dd/sourcecode/as):02751                  ldy   >WGlobal+g00BB Get ptr to work window table
0E92 3384             (/dd/sourcecode/as):02752                  leau  ,x             point to window descriptor
0E94 3510             (/dd/sourcecode/as):02753                  puls  x              restore graphics table entry pointer
                      (/dd/sourcecode/as):02754         * Check if window will fit
0E96 A637             (/dd/sourcecode/as):02755                  lda   Wt.SZX,y       get current X size from window table
0E98 A1C815           (/dd/sourcecode/as):02756                  cmpa  WN.XMIN,u      will it fit?
0E9B 2507             (/dd/sourcecode/as):02757                  blo   L0DC0          no, clear entry & return
0E9D A638             (/dd/sourcecode/as):02758                  lda   Wt.SZY,y       get current Y size from window table
0E9F A1C816           (/dd/sourcecode/as):02759                  cmpa  WN.YMIN,u      will it fit?
0EA2 241D             (/dd/sourcecode/as):02760                  bhs   L0DD6          yes, return
                      (/dd/sourcecode/as):02761         * Window descriptor won't fit on window, restore old & return
0EA4 6F84             (/dd/sourcecode/as):02762         L0DC0    clr   Gt.WTyp,x      clear graphics table entry
0EA6 FE1075           (/dd/sourcecode/as):02763                  ldu   >WGlobal+G.GfxTbl   get graphics table pointer
0EA9 33C90240         (/dd/sourcecode/as):02764                  leau  >$0240,u       point to working buffer
                      (/dd/sourcecode/as):02765                IFNE  H6309
                      (/dd/sourcecode/as):02766                  ldw   #WN.SIZ        Restore window descriptor from stack copy
                      (/dd/sourcecode/as):02767                  tfm   s+,u+
                      (/dd/sourcecode/as):02768                ELSE
                      (/dd/sourcecode/as):02769         * 6809 - use Mini stack blast copy here, then leas WN.SIZ,s to eat temp stack copy when done
0EAD 3402             (/dd/sourcecode/as):02770                  pshs  a              Restore window descriptor from stack copy
0EAF 8622             (/dd/sourcecode/as):02771                  lda   #WN.SIZ
0EB1 E6E0             (/dd/sourcecode/as):02772         L0DC0b   ldb   ,s+
0EB3 E7C0             (/dd/sourcecode/as):02773                  stb   ,u+
0EB5 4A               (/dd/sourcecode/as):02774                  deca
0EB6 26F9             (/dd/sourcecode/as):02775                  bne   L0DC0b
0EB8 B711B5           (/dd/sourcecode/as):02776                  sta   >GrfMem+gr00B5
0EBB 3502             (/dd/sourcecode/as):02777                  puls  a
                      (/dd/sourcecode/as):02778                ENDC
0EBD 53               (/dd/sourcecode/as):02779                  comb                 set carry
0EBE C6BD             (/dd/sourcecode/as):02780                  ldb   #E$ICoord      get illegal co-ordinates error
0EC0 39               (/dd/sourcecode/as):02781         L0D7F    rts                  return
                      (/dd/sourcecode/as):02782         
                      (/dd/sourcecode/as):02783         * Window table is good, return
0EC1 32E822           (/dd/sourcecode/as):02784         L0DD6    leas  WN.SIZ,s       purge stack
0EC4 A684             (/dd/sourcecode/as):02785                  lda   Gt.WTyp,x      get screen type
0EC6 8102             (/dd/sourcecode/as):02786                  cmpa  #WT.FSWin      scroll barred?
0EC8 102701B2         (/dd/sourcecode/as):02787                  lbeq  FSWin          yes, do 3D frame
0ECC 160185           (/dd/sourcecode/as):02788                  lbra  L0FFC          draw 3D frame & return
                      (/dd/sourcecode/as):02789         
                      (/dd/sourcecode/as):02790         * Process a framed scroll barred window
0ECF 8D1B             (/dd/sourcecode/as):02791         L0DE8    bsr   L0E04          is this a overlay window?
0ED1 2407             (/dd/sourcecode/as):02792                  bcc   L0DF3          no, skip ahead
0ED3 7D100A           (/dd/sourcecode/as):02793                  tst   >WGlobal+G.CrDvFl  current device?
0ED6 2702             (/dd/sourcecode/as):02794                  beq   L0DF3          no, skip ahead
0ED8 8D1F             (/dd/sourcecode/as):02795                  bsr   L0E13          de-activate menu bar on parent window
0EDA 170309           (/dd/sourcecode/as):02796         L0DF3    lbsr  L115F          setup window table & check if graphics screen
0EDD 8602             (/dd/sourcecode/as):02797                  lda   #WT.FSWin      get code for scroll barred window
                      (/dd/sourcecode/as):02798                IFNE  H6309
                      (/dd/sourcecode/as):02799                  bsr   L0D80          setup graphics table entry & check window desc.
                      (/dd/sourcecode/as):02800                ELSE
0EDF 17FF6E           (/dd/sourcecode/as):02801                  lbsr  L0D80
                      (/dd/sourcecode/as):02802                ENDC
0EE2 1025FF4C         (/dd/sourcecode/as):02803                  lbcs  L0D5E          error, return
0EE6 170251           (/dd/sourcecode/as):02804                  lbsr  L108C          go draw window
0EE9 16FF52           (/dd/sourcecode/as):02805                  lbra  L0D6A          finish up by drawing menu bar & return
                      (/dd/sourcecode/as):02806         
                      (/dd/sourcecode/as):02807         * Check if this is a overlay window
0EEC 3460             (/dd/sourcecode/as):02808         L0E04    pshs  y,u            preserve regs
0EEE 17F858           (/dd/sourcecode/as):02809                  lbsr  L06AE          get window table pointer
0EF1 43               (/dd/sourcecode/as):02810                  coma                 set carry
0EF2 A632             (/dd/sourcecode/as):02811                  lda   Wt.BLnk,y      any overlays?
0EF4 2A01             (/dd/sourcecode/as):02812                  bpl   L0E10          yes, return carry set
0EF6 4F               (/dd/sourcecode/as):02813                  clra                 clear carry
0EF7 35E0             (/dd/sourcecode/as):02814         L0E10    puls  y,u,pc         return
                      (/dd/sourcecode/as):02815         
                      (/dd/sourcecode/as):02816         * Place parent window in a in-active state if it's a framed or scroll barred
                      (/dd/sourcecode/as):02817         * window.
0EF9 3460             (/dd/sourcecode/as):02818         L0E13    pshs  y,u            preserve registers
0EFB 17F84B           (/dd/sourcecode/as):02819                  lbsr  L06AE          get pointer to window table entry
0EFE A632             (/dd/sourcecode/as):02820                  lda   Wt.BLnk,y      get overlay window back link
0F00 EE62             (/dd/sourcecode/as):02821                  ldu   2,s            get static mem pointer
0F02 10AEE4           (/dd/sourcecode/as):02822                  ldy   ,s             get path descriptor pointer
0F05 E6C835           (/dd/sourcecode/as):02823                  ldb   V.WinNum,u     get current window #
0F08 3404             (/dd/sourcecode/as):02824                  pshs  b              save it
0F0A A7C835           (/dd/sourcecode/as):02825                  sta   V.WinNum,u     make overlay back link current
0F0D 8D0B             (/dd/sourcecode/as):02826                  bsr   L0E34          framed or scroll barred?
0F0F 2503             (/dd/sourcecode/as):02827                  bcs   L0E2E          no, skip ahead
0F11 1701ED           (/dd/sourcecode/as):02828                  lbsr  L1034          set menu bar to inactive state
0F14 3564             (/dd/sourcecode/as):02829         L0E2E    puls  b,y,u          restore
0F16 E7C835           (/dd/sourcecode/as):02830                  stb   V.WinNum,u     restore active window & return
0F19 39               (/dd/sourcecode/as):02831                  rts
                      (/dd/sourcecode/as):02832         
                      (/dd/sourcecode/as):02833         * Check whether current window has a framed or framed scrolled barred window
                      (/dd/sourcecode/as):02834         * Entry: U=Static mem pointer
                      (/dd/sourcecode/as):02835         * Exit:  CC: Carry set if window is scroll barred or framed
0F1A 3412             (/dd/sourcecode/as):02836         L0E34    pshs  a,x            preserve registers
0F1C 6D46             (/dd/sourcecode/as):02837                  tst   V.TYPE,u       is this a window?
0F1E 2A0E             (/dd/sourcecode/as):02838                  bpl   L0E48          no, return with carry
0F20 17F832           (/dd/sourcecode/as):02839                  lbsr  L06B9          get graphics table pointer
0F23 A684             (/dd/sourcecode/as):02840                  lda   Gt.WTyp,x      get cowin screen type
0F25 2707             (/dd/sourcecode/as):02841                  beq   L0E48          if no box, return with carry set
0F27 8102             (/dd/sourcecode/as):02842                  cmpa  #WT.FSWin      scroll barred or framed?
0F29 2203             (/dd/sourcecode/as):02843                  bhi   L0E48          no, return carry set
0F2B 4F               (/dd/sourcecode/as):02844                  clra                 return with carry clear
0F2C 3592             (/dd/sourcecode/as):02845                  puls  a,x,pc
                      (/dd/sourcecode/as):02846         
0F2E 43               (/dd/sourcecode/as):02847         L0E48    coma                 return with carry set
0F2F 3592             (/dd/sourcecode/as):02848                  puls  a,x,pc
                      (/dd/sourcecode/as):02849         
                      (/dd/sourcecode/as):02850         * Place parent window in a active state if it's a framed or scroll barred
                      (/dd/sourcecode/as):02851         * window.
0F31 FE10B7           (/dd/sourcecode/as):02852         L0E4B    ldu   >WGlobal+g00B7 get static mem pointer
0F34 A632             (/dd/sourcecode/as):02853         L0E51    lda   Wt.BLnk,y      get overlay window link
0F36 E6C835           (/dd/sourcecode/as):02854                  ldb   V.WinNum,u     get current window #
0F39 3444             (/dd/sourcecode/as):02855                  pshs  b,u            save current window # & static mem
0F3B A7C835           (/dd/sourcecode/as):02856                  sta   V.WinNum,u     save back link as current
0F3E 8DDA             (/dd/sourcecode/as):02857                  bsr   L0E34          framed or scroll barred?
0F40 2503             (/dd/sourcecode/as):02858                  bcs   L0E62          no, skip ahead
0F42 170550           (/dd/sourcecode/as):02859                  lbsr  L13F5          update menu bar
0F45 3544             (/dd/sourcecode/as):02860         L0E62    puls  b,u            restore static mem & current window #
0F47 E7C835           (/dd/sourcecode/as):02861                  stb   V.WinNum,u     restore static mem to current window & return
0F4A 39               (/dd/sourcecode/as):02862                  rts
                      (/dd/sourcecode/as):02863         
                      (/dd/sourcecode/as):02864         * Process a shadowed window
0F4B 1700BA           (/dd/sourcecode/as):02865         L0E68    lbsr  L0FBB          update parent window if any
0F4E 170295           (/dd/sourcecode/as):02866                  lbsr  L115F          check for graphic window
0F51 8603             (/dd/sourcecode/as):02867                  lda   #WT.SBox       save window type in graphics table entry
0F53 A784             (/dd/sourcecode/as):02868                  sta   Gt.WTyp,x
0F55 10BE10BB         (/dd/sourcecode/as):02869                  ldy   >WGlobal+g00BB Get ptr to work window table
0F59 170456           (/dd/sourcecode/as):02870                  lbsr  L12BE          clear screen
0F5C 308C14           (/dd/sourcecode/as):02871                  leax  <SBox1,pc      point to draw table for 640 wide screen
                      (/dd/sourcecode/as):02872                IFNE  H6309
                      (/dd/sourcecode/as):02873                  tim   #$01,>WGlobal+g00BD 640 wide screen?
                      (/dd/sourcecode/as):02874                ELSE
0F5F B610BD           (/dd/sourcecode/as):02875                  lda   >WGlobal+g00BD 640 wide screen?
0F62 8401             (/dd/sourcecode/as):02876                  anda  #$01
                      (/dd/sourcecode/as):02877                ENDC
0F64 2603             (/dd/sourcecode/as):02878                  bne   L0E91          no, skip ahead
0F66 308C28           (/dd/sourcecode/as):02879                  leax  <SBox2,pc      point to draw table for 320 wide screen
0F69 8603             (/dd/sourcecode/as):02880         L0E91    lda   #$03           get # entrys in draw table
0F6B 170350           (/dd/sourcecode/as):02881                  lbsr  DrawBar        draw window
0F6E 1702FE           (/dd/sourcecode/as):02882                  lbsr  L11F3          change window to working size
0F71 5F               (/dd/sourcecode/as):02883                  clrb                 clear errors
0F72 39               (/dd/sourcecode/as):02884                  rts                  return
                      (/dd/sourcecode/as):02885         
                      (/dd/sourcecode/as):02886         * LCB - may want to tweak a tiny bit - I think it is drawing extra pixel on the upper
                      (/dd/sourcecode/as):02887         *   right and lower left corners (instead of leaving background). Will have to fiddle with
                      (/dd/sourcecode/as):02888         *   and see if it looks ok with varied fore/background colors
                      (/dd/sourcecode/as):02889         * Draw table for shadowed window on 640 wide screen
                      (/dd/sourcecode/as):02890         * Draw table for Light Grey Box
0F73 02               (/dd/sourcecode/as):02891         SBox1    fcb   WColor1        Color 1
0F74 0000             (/dd/sourcecode/as):02892                  fdb   0              Start X=0
0F76 0000             (/dd/sourcecode/as):02893                  fdb   0              Start Y=0
0F78 FFFD             (/dd/sourcecode/as):02894                  fdb   -3             End X=Width of window-3
0F7A FFFF             (/dd/sourcecode/as):02895                  fdb   -1             End Y=Height of window-1
0F7C 4C               (/dd/sourcecode/as):02896                  fcb   $4c            Box function in GRFDRV
                      (/dd/sourcecode/as):02897         
                      (/dd/sourcecode/as):02898         * Draw table for Dark Grey shadow on right side
0F7D 01               (/dd/sourcecode/as):02899                  fcb   WColor2        Color 2
0F7E FFFE             (/dd/sourcecode/as):02900                  fdb   -2             Start X=Width of window-2
0F80 0002             (/dd/sourcecode/as):02901                  fdb   2              Start Y=2
0F82 8000             (/dd/sourcecode/as):02902                  fdb   $8000          End X=Width of window
0F84 8000             (/dd/sourcecode/as):02903                  fdb   $8000          End Y=Height of window
0F86 4E               (/dd/sourcecode/as):02904                  fcb   $4e            Bar function in GRFDRV
                      (/dd/sourcecode/as):02905         
                      (/dd/sourcecode/as):02906         * Draw table for Dark Grey shadow on bottom
0F87 01               (/dd/sourcecode/as):02907                  fcb   WColor2        Color 2
0F88 0002             (/dd/sourcecode/as):02908                  fdb   2              Start X=2
0F8A 8000             (/dd/sourcecode/as):02909                  fdb   $8000          Start Y=Height of window
0F8C 8000             (/dd/sourcecode/as):02910                  fdb   $8000          End X=Width of window
0F8E 8000             (/dd/sourcecode/as):02911                  fdb   $8000          End Y=Height of window
0F90 4A               (/dd/sourcecode/as):02912                  fcb   $4a            Line function in GRFDRV
                      (/dd/sourcecode/as):02913         
                      (/dd/sourcecode/as):02914         * Draw table for shadowed window on 320 wide screen
                      (/dd/sourcecode/as):02915         * Draw table for Light Grey Box
0F91 02               (/dd/sourcecode/as):02916         SBox2    fcb   WColor1        Color 1
0F92 0000             (/dd/sourcecode/as):02917                  fdb   0              Start X=0
0F94 0000             (/dd/sourcecode/as):02918                  fdb   0              Start Y=0
0F96 FFFF             (/dd/sourcecode/as):02919                  fdb   -1             End X=Width of window-1
0F98 FFFF             (/dd/sourcecode/as):02920                  fdb   -1             End Y=Height of window-1
0F9A 4C               (/dd/sourcecode/as):02921                  fcb   $4c            Box function in GRFDRV
                      (/dd/sourcecode/as):02922         
                      (/dd/sourcecode/as):02923         * Draw table for Dark Grey shadow on right side
0F9B 01               (/dd/sourcecode/as):02924                  fcb   WColor2        Color 2
0F9C 8000             (/dd/sourcecode/as):02925                  fdb   $8000          Start X=Width of window
0F9E 0002             (/dd/sourcecode/as):02926                  fdb   2              Start Y=2
0FA0 8000             (/dd/sourcecode/as):02927                  fdb   $8000          End X=Width of window
0FA2 8000             (/dd/sourcecode/as):02928                  fdb   $8000          End Y=Height of window
0FA4 4A               (/dd/sourcecode/as):02929                  fcb   $4a            Line function in GRFDRV
                      (/dd/sourcecode/as):02930         
                      (/dd/sourcecode/as):02931         * Draw table for Dark Grey shadow on bottom
0FA5 01               (/dd/sourcecode/as):02932                  fcb   WColor2        Color 2
0FA6 0002             (/dd/sourcecode/as):02933                  fdb   2              Start X=2
0FA8 8000             (/dd/sourcecode/as):02934                  fdb   $8000          Start Y=Height of window
0FAA 8000             (/dd/sourcecode/as):02935                  fdb   $8000          End X=Width of window
0FAC 8000             (/dd/sourcecode/as):02936                  fdb   $8000          End Y=Height of window
0FAE 4A               (/dd/sourcecode/as):02937                  fcb   $4a            Line function in GRFDRV
                      (/dd/sourcecode/as):02938         
                      (/dd/sourcecode/as):02939         * Process a double box window
0FAF 8D57             (/dd/sourcecode/as):02940         L0EFC    bsr   L0FBB          update parent window if we have to
0FB1 170232           (/dd/sourcecode/as):02941                  lbsr  L115F          if this comes back it's a graphic window
0FB4 8604             (/dd/sourcecode/as):02942                  lda   #WT.DBox       get window type
0FB6 A784             (/dd/sourcecode/as):02943                  sta   Gt.WTyp,x      save it into graphics table entry
0FB8 10BE10BB         (/dd/sourcecode/as):02944                  ldy   >WGlobal+g00BB Get ptr to work window table
0FBC 1703F3           (/dd/sourcecode/as):02945                  lbsr  L12BE          clear screen
0FBF 8D7E             (/dd/sourcecode/as):02946                  bsr   L1257          set text co-ordinates to 0,0
0FC1 308C0A           (/dd/sourcecode/as):02947                  leax  <DBox,pc       point to draw table
0FC4 8603             (/dd/sourcecode/as):02948                  lda   #3             get # entrys
0FC6 1702F5           (/dd/sourcecode/as):02949                  lbsr  DrawBar        go draw it
0FC9 1702A3           (/dd/sourcecode/as):02950                  lbsr  L11F3          setup window working area & return
0FCC 5F               (/dd/sourcecode/as):02951                  clrb  
0FCD 39               (/dd/sourcecode/as):02952                  rts   
                      (/dd/sourcecode/as):02953         
                      (/dd/sourcecode/as):02954         * Draw table for double box window
                      (/dd/sourcecode/as):02955         * Outside Box
0FCE 01               (/dd/sourcecode/as):02956         DBox     fcb   WColor2        Color 2
0FCF 0000             (/dd/sourcecode/as):02957                  fdb   $0000          Start X=0
0FD1 0000             (/dd/sourcecode/as):02958                  fdb   $0000          Start Y=0
0FD3 8000             (/dd/sourcecode/as):02959                  fdb   $8000          End X=Width of window
0FD5 8000             (/dd/sourcecode/as):02960                  fdb   $8000          End Y=Height of window
0FD7 4C               (/dd/sourcecode/as):02961                  fcb   $4c            Box function in GRFDRV
                      (/dd/sourcecode/as):02962         
                      (/dd/sourcecode/as):02963         * Doubled up inside box - next 2
0FD8 01               (/dd/sourcecode/as):02964                  fcb   WColor2        Color 2
0FD9 0002             (/dd/sourcecode/as):02965                  fdb   $0002          Start X=2
0FDB 0002             (/dd/sourcecode/as):02966                  fdb   $0002          Start Y=2
0FDD FFFE             (/dd/sourcecode/as):02967                  fdb   -2             End X=Width of window-2
0FDF FFFE             (/dd/sourcecode/as):02968                  fdb   -2             End Y=Height of window-2
0FE1 4C               (/dd/sourcecode/as):02969                  fcb   $4c            Box function
                      (/dd/sourcecode/as):02970         
0FE2 01               (/dd/sourcecode/as):02971                  fcb   WColor2        Color 2
0FE3 0003             (/dd/sourcecode/as):02972                  fdb   $0003          Start X=3
0FE5 0003             (/dd/sourcecode/as):02973                  fdb   $0003          Start Y=3
0FE7 FFFD             (/dd/sourcecode/as):02974                  fdb   -3             End X=Width of window-3
0FE9 FFFD             (/dd/sourcecode/as):02975                  fdb   -3             End Y=Height of window-3
0FEB 4C               (/dd/sourcecode/as):02976                  fcb   $4c            Box function
                      (/dd/sourcecode/as):02977         
                      (/dd/sourcecode/as):02978         * Process a no box window
0FEC 8D1A             (/dd/sourcecode/as):02979         L0F9A    bsr   L0FBB          update parent window if we have to
0FEE 170202           (/dd/sourcecode/as):02980                  lbsr  L116C          copy window table to working buffer
0FF1 4F               (/dd/sourcecode/as):02981                  clra                 Wt.NBox =0
0FF2 A784             (/dd/sourcecode/as):02982                  sta   Gt.WTyp,x
0FF4 10BE10B9         (/dd/sourcecode/as):02983                  ldy   >WGlobal+g00B9 get pointer to window table
0FF8 5F               (/dd/sourcecode/as):02984                  clrb                 set start coord
0FF9 ED35             (/dd/sourcecode/as):02985                  std   Wt.CPX,y
0FFB ECA828           (/dd/sourcecode/as):02986                  ldd   Wt.DfSZX,y     get default size
0FFE 3460             (/dd/sourcecode/as):02987                  pshs  u,y
1000 17027B           (/dd/sourcecode/as):02988                  lbsr  L1204          set default size
1003 3560             (/dd/sourcecode/as):02989                  puls  u,y
1005 1603AA           (/dd/sourcecode/as):02990                  lbra  L12BE          clear screen & return from there
                      (/dd/sourcecode/as):02991         
                      (/dd/sourcecode/as):02992         * Check if we have to update a parent window
1008 3460             (/dd/sourcecode/as):02993         L0FBB    pshs  y,u            preserve registers
100A 17FEDF           (/dd/sourcecode/as):02994                  lbsr  L0E04          we an overlay window?
100D 242E             (/dd/sourcecode/as):02995                  bcc   L0FF0          no, return
100F 17F743           (/dd/sourcecode/as):02996                  lbsr  L06B9          get graphics table pointer
1012 A684             (/dd/sourcecode/as):02997                  lda   Gt.WTyp,x      get cowin screen type
1014 2727             (/dd/sourcecode/as):02998                  beq   L0FF0          it's a plain window, return
1016 8102             (/dd/sourcecode/as):02999                  cmpa  #WT.FSWin      framed or scroll barred window?
1018 2223             (/dd/sourcecode/as):03000                  bhi   L0FF0          no, return
101A 7D100A           (/dd/sourcecode/as):03001                  tst   >WGlobal+G.CrDvFl Are we the current active device?
101D 271E             (/dd/sourcecode/as):03002                  beq   L0FF0          no, return
101F EE62             (/dd/sourcecode/as):03003                  ldu   2,s            get static memory pointer
1021 17F725           (/dd/sourcecode/as):03004                  lbsr  L06AE          get window table pointer
1024 EE62             (/dd/sourcecode/as):03005                  ldu   2,s            get static memory pointer
1026 A6C835           (/dd/sourcecode/as):03006                  lda   V.WinNum,u     get window #
1029 3402             (/dd/sourcecode/as):03007                  pshs  a              save it
102B A632             (/dd/sourcecode/as):03008                  lda   Wt.BLnk,y      get back window link
102D A7C835           (/dd/sourcecode/as):03009                  sta   V.WinNum,u     save it as current
1030 17FEE7           (/dd/sourcecode/as):03010                  lbsr  L0E34          get framed or scroll barred window flag for this one
1033 3502             (/dd/sourcecode/as):03011                  puls  a              restore window #
1035 A7C835           (/dd/sourcecode/as):03012                  sta   V.WinNum,u     save it
1038 2503             (/dd/sourcecode/as):03013                  bcs   L0FF0          if not a framed or scroll barred window, return
103A 17FEF7           (/dd/sourcecode/as):03014                  lbsr  L0E51          place parent window into a active state
103D 35E0             (/dd/sourcecode/as):03015         L0FF0    puls  y,u,pc         restore & return
                      (/dd/sourcecode/as):03016         
                      (/dd/sourcecode/as):03017         * Set current X/Y draw pointer to 0,0
     103F             (/dd/sourcecode/as):03018         L1257    equ   *
                      (/dd/sourcecode/as):03019                IFNE  H6309
                      (/dd/sourcecode/as):03020                  clrd  
                      (/dd/sourcecode/as):03021                  clrw  
                      (/dd/sourcecode/as):03022                  stq   >GrfMem+gr0047 Save X&Y coords
                      (/dd/sourcecode/as):03023                ELSE
103F 4F               (/dd/sourcecode/as):03024                  clra  
1040 5F               (/dd/sourcecode/as):03025                  clrb  
1041 FD1147           (/dd/sourcecode/as):03026                  std   >GrfMem+gr0047 Save X&Y coords
1044 FD1149           (/dd/sourcecode/as):03027                  std   >GrfMem+gr0047+2
1047 FD11B5           (/dd/sourcecode/as):03028                  std   >GrfMem+gr00B5
                      (/dd/sourcecode/as):03029                ENDC
104A 39               (/dd/sourcecode/as):03030                  rts   
                      (/dd/sourcecode/as):03031         
                      (/dd/sourcecode/as):03032         * Process a plain box window
104B 8DBB             (/dd/sourcecode/as):03033         L0FF2    bsr   L0FBB
104D 170196           (/dd/sourcecode/as):03034                  lbsr  L115F
1050 8605             (/dd/sourcecode/as):03035                  lda   #WT.PBox       Plain box window type
1052 A784             (/dd/sourcecode/as):03036                  sta   Gt.WTyp,x
                      (/dd/sourcecode/as):03037         * Draw a frame around full window
1054 10BE10BB         (/dd/sourcecode/as):03038         L0FFC   ldy   >WGlobal+g00BB  Get ptr to work window table
1058 170357           (/dd/sourcecode/as):03039                  lbsr  L12BE          clear screen
105B 8DE2             (/dd/sourcecode/as):03040                  bsr   L1257          set text co-ordinates to 0,0
                      (/dd/sourcecode/as):03041                IFNE  H6309
                      (/dd/sourcecode/as):03042                  lde   Wt.Fore,y      get current foreground color mask
                      (/dd/sourcecode/as):03043                ELSE
105D A626             (/dd/sourcecode/as):03044                  lda   Wt.Fore,y      Get current foreground color mask
105F B711B5           (/dd/sourcecode/as):03045                  sta   >GrfMem+gr00B5
                      (/dd/sourcecode/as):03046                ENDC
1062 8601             (/dd/sourcecode/as):03047                  lda   #1
1064 1702B3           (/dd/sourcecode/as):03048                  lbsr  GetColr        convert it to mask
1067 A726             (/dd/sourcecode/as):03049                  sta   Wt.Fore,y
1069 17029E           (/dd/sourcecode/as):03050                  lbsr  L1013          calculate X size
106C FD114B           (/dd/sourcecode/as):03051                  std   >GrfMem+gr004B
106F 170294           (/dd/sourcecode/as):03052                  lbsr  L100F          calculate Y size
1072 17021C           (/dd/sourcecode/as):03053                  lbsr  L122B          draw the box
                      (/dd/sourcecode/as):03054                IFNE  H6309
                      (/dd/sourcecode/as):03055                  ste   Wt.Fore,y      Save foreground palette #
                      (/dd/sourcecode/as):03056                  rts
                      (/dd/sourcecode/as):03057         
                      (/dd/sourcecode/as):03058                ELSE
1075 3402             (/dd/sourcecode/as):03059                  pshs  a
1077 B611B5           (/dd/sourcecode/as):03060                  lda   >GrfMem+gr00B5
107A A726             (/dd/sourcecode/as):03061                  sta   Wt.Fore,y      Save foreground palette #
107C 3582             (/dd/sourcecode/as):03062                  puls  a,pc
                      (/dd/sourcecode/as):03063                ENDC
                      (/dd/sourcecode/as):03064         
                      (/dd/sourcecode/as):03065                IFNE  CoGrf-1
                      (/dd/sourcecode/as):03066         * Draw a 3D frame around window for scroll barred window
107E 10BE10BB         (/dd/sourcecode/as):03067         FSWin    ldy   >WGlobal+g00BB Get ptr to work window table
1082 17032D           (/dd/sourcecode/as):03068                  lbsr  L12BE          clear screen
1085 8DB8             (/dd/sourcecode/as):03069                  bsr   L1257          set text co-ordinates to 0,0
1087 3410             (/dd/sourcecode/as):03070                  pshs  x              preserve graphics table pointer
1089 860B             (/dd/sourcecode/as):03071                  lda   #11            get # entries
108B 308C05           (/dd/sourcecode/as):03072                  leax  <FSWinTbl,pc   point to draw table
108E 17022D           (/dd/sourcecode/as):03073                  lbsr  DrawBar
1091 3590             (/dd/sourcecode/as):03074                  puls  x,pc
                      (/dd/sourcecode/as):03075         
                      (/dd/sourcecode/as):03076         * Draw table for 3D Frame around window
1093 02               (/dd/sourcecode/as):03077         FSWinTbl fcb   WColor1        left bar (Color 1)
1094 0000             (/dd/sourcecode/as):03078                  fdb   0              From 0,8 to 7,bottom
1096 0008             (/dd/sourcecode/as):03079                  fdb   8
1098 0007             (/dd/sourcecode/as):03080                  fdb   7
109A 8000             (/dd/sourcecode/as):03081                  fdb   $8000
109C 4E               (/dd/sourcecode/as):03082                  fcb   $4e            Bar command for GRFDRV
                      (/dd/sourcecode/as):03083         
109D 02               (/dd/sourcecode/as):03084                  fcb   WColor1        bottom bar (Color 1)
109E 0008             (/dd/sourcecode/as):03085                  fdb   8              From 8,(bottom-7) to (Right-8),bottom
10A0 FFF9             (/dd/sourcecode/as):03086                  fdb   -7
10A2 FFF8             (/dd/sourcecode/as):03087                  fdb   -8
10A4 8000             (/dd/sourcecode/as):03088                  fdb   $8000
10A6 4E               (/dd/sourcecode/as):03089                  fcb   $4e
                      (/dd/sourcecode/as):03090         
10A7 02               (/dd/sourcecode/as):03091                  fcb   WColor1        right bar
10A8 FFF9             (/dd/sourcecode/as):03092                  fdb   -7
10AA 0008             (/dd/sourcecode/as):03093                  fdb   8
10AC 8000             (/dd/sourcecode/as):03094                  fdb   $8000
10AE 8000             (/dd/sourcecode/as):03095                  fdb   $8000
10B0 4E               (/dd/sourcecode/as):03096                  fcb   $4e
                      (/dd/sourcecode/as):03097         
10B1 03               (/dd/sourcecode/as):03098                  fcb   WColor3        left bar 3D look
10B2 0000             (/dd/sourcecode/as):03099                  fdb   0
10B4 0008             (/dd/sourcecode/as):03100                  fdb   8
10B6 0007             (/dd/sourcecode/as):03101                  fdb   7
10B8 0008             (/dd/sourcecode/as):03102                  fdb   8
10BA 4A               (/dd/sourcecode/as):03103                  fcb   $4a
                      (/dd/sourcecode/as):03104         
10BB 03               (/dd/sourcecode/as):03105                  fcb   WColor3        White - 0,8 to 0,bottom-1
10BC 0000             (/dd/sourcecode/as):03106                  fdb   0
10BE 0008             (/dd/sourcecode/as):03107                  fdb   8
10C0 0000             (/dd/sourcecode/as):03108                  fdb   0
10C2 FFFF             (/dd/sourcecode/as):03109                  fdb   -1
10C4 4A               (/dd/sourcecode/as):03110                  fcb   $4a
                      (/dd/sourcecode/as):03111         
10C5 01               (/dd/sourcecode/as):03112                  fcb   WColor2        Light grey - 7,9 to 7,bottom-7
10C6 0007             (/dd/sourcecode/as):03113                  fdb   7
10C8 0009             (/dd/sourcecode/as):03114                  fdb   9
10CA 0007             (/dd/sourcecode/as):03115                  fdb   7
10CC FFF9             (/dd/sourcecode/as):03116                  fdb   -7
10CE 4A               (/dd/sourcecode/as):03117                  fcb   $4a
                      (/dd/sourcecode/as):03118         
                      (/dd/sourcecode/as):03119         * Bottom bar 3D look
10CF 03               (/dd/sourcecode/as):03120                  fcb   WColor3        White
10D0 0009             (/dd/sourcecode/as):03121                  fdb   9              From 9,(bottom-7) to (right-7),(bottom-7)
10D2 FFF9             (/dd/sourcecode/as):03122                  fdb   -7
10D4 FFF9             (/dd/sourcecode/as):03123                  fdb   -7
10D6 FFF9             (/dd/sourcecode/as):03124                  fdb   -7
10D8 4A               (/dd/sourcecode/as):03125                  fcb   $4a            Line
                      (/dd/sourcecode/as):03126         
10D9 01               (/dd/sourcecode/as):03127                  fcb   WColor2        Light grey
10DA 0001             (/dd/sourcecode/as):03128                  fdb   1              From 1,(bottom-1) to Right,(bottom-1)
10DC FFFF             (/dd/sourcecode/as):03129                  fdb   -1
10DE 8000             (/dd/sourcecode/as):03130                  fdb   $8000
10E0 FFFF             (/dd/sourcecode/as):03131                  fdb   -1
10E2 4A               (/dd/sourcecode/as):03132                  fcb   $4a            Line
                      (/dd/sourcecode/as):03133         
10E3 03               (/dd/sourcecode/as):03134                  fcb   WColor3        right bar 3D look
10E4 FFF9             (/dd/sourcecode/as):03135                  fdb   -7             right-7,8 to right,8
10E6 0008             (/dd/sourcecode/as):03136                  fdb   8
10E8 8000             (/dd/sourcecode/as):03137                  fdb   $8000
10EA 0008             (/dd/sourcecode/as):03138                  fdb   8
10EC 4A               (/dd/sourcecode/as):03139                  fcb   $4a
                      (/dd/sourcecode/as):03140         
10ED 03               (/dd/sourcecode/as):03141                  fcb   WColor3
10EE FFF9             (/dd/sourcecode/as):03142                  fdb   -7             left+7,9 to left+7,bottom-8
10F0 0009             (/dd/sourcecode/as):03143                  fdb   9
10F2 FFF9             (/dd/sourcecode/as):03144                  fdb   -7
10F4 FFF8             (/dd/sourcecode/as):03145                  fdb   -8
10F6 4A               (/dd/sourcecode/as):03146                  fcb   $4a
                      (/dd/sourcecode/as):03147         
10F7 01               (/dd/sourcecode/as):03148                  fcb   WColor2
10F8 8000             (/dd/sourcecode/as):03149                  fdb   $8000          left,9 to right,bottom-1
10FA 0009             (/dd/sourcecode/as):03150                  fdb   9
10FC 8000             (/dd/sourcecode/as):03151                  fdb   $8000
10FE FFFF             (/dd/sourcecode/as):03152                  fdb   -1
1100 4A               (/dd/sourcecode/as):03153                  fcb   $4a
                      (/dd/sourcecode/as):03154         
                      (/dd/sourcecode/as):03155         * Set Menu bar to in-active state by printing the window title
1101 1700EF           (/dd/sourcecode/as):03156         L1034    lbsr  L116C          setup work window table
1104 1701A8           (/dd/sourcecode/as):03157         L1037    lbsr  L1240          draw 3D bar
                      (/dd/sourcecode/as):03158         * Swap foreground/background colors
1107 EC26             (/dd/sourcecode/as):03159                  ldd   Wt.Fore,y      Get fore/background colors
1109 A727             (/dd/sourcecode/as):03160                  sta   Wt.Back,y      Swap them
110B E726             (/dd/sourcecode/as):03161                  stb   Wt.Fore,y
110D 1701FA           (/dd/sourcecode/as):03162                  lbsr  L1013          calculate X size in pixels
                      (/dd/sourcecode/as):03163                IFNE  H6309
                      (/dd/sourcecode/as):03164                  decd                 take off 1 of X co-ordinate
                      (/dd/sourcecode/as):03165                ELSE
1110 830001           (/dd/sourcecode/as):03166                  subd  #$0001
                      (/dd/sourcecode/as):03167                ENDC
1113 17031E           (/dd/sourcecode/as):03168                  lbsr  L1371          get window descriptor pointer
1116 2621             (/dd/sourcecode/as):03169                  bne   L107A          Not valid dsc., exit
1118 CC0100           (/dd/sourcecode/as):03170                  ldd   #$0100         Valid, get X/Y text start coord
111B 17024E           (/dd/sourcecode/as):03171                  lbsr  L128E          place in grfdrv mem
                      (/dd/sourcecode/as):03172                IFNE  H6309
                      (/dd/sourcecode/as):03173                  aim   #^TChr,Wt.BSW,y Turn on transparency
                      (/dd/sourcecode/as):03174                  oim   #Prop,Wt.BSW,y Turn on proportional spacing
                      (/dd/sourcecode/as):03175                ELSE
111E E629             (/dd/sourcecode/as):03176                  ldb   Wt.BSW,y
1120 C47F             (/dd/sourcecode/as):03177                  andb  #^TChr         Turn on transparency
1122 CA10             (/dd/sourcecode/as):03178                  orb   #Prop          Turn on proportional spacing
1124 E729             (/dd/sourcecode/as):03179                  stb   Wt.BSW,y
                      (/dd/sourcecode/as):03180                ENDC
1126 170256           (/dd/sourcecode/as):03181                  lbsr  L12A2          calculate string length of menu title
1129 C002             (/dd/sourcecode/as):03182                  subb  #$02           subtract 2 to give 1 space on either side
112B E137             (/dd/sourcecode/as):03183                  cmpb  Wt.SZX,y       bigger than window?
112D 2305             (/dd/sourcecode/as):03184                  bls   L1075          no, skip ahead
112F E637             (/dd/sourcecode/as):03185                  ldb   Wt.SZX,y       Use X size of window as length
1131 160256           (/dd/sourcecode/as):03186                  lbra  L12AE          Print menu bar title & return from there
                      (/dd/sourcecode/as):03187         
1134 CB02             (/dd/sourcecode/as):03188         L1075    addb  #2             get length back
1136 160251           (/dd/sourcecode/as):03189                  lbra  L12AE          print menu bar title & return from there
                      (/dd/sourcecode/as):03190         
1139 39               (/dd/sourcecode/as):03191         L107A    rts                  return
                      (/dd/sourcecode/as):03192         
                      (/dd/sourcecode/as):03193         * Draw a framed scroll barred window
113A 10BE10BB         (/dd/sourcecode/as):03194         L108C    ldy   >WGlobal+g00BB Get ptr to work window table
                      (/dd/sourcecode/as):03195                IFNE  H6309
                      (/dd/sourcecode/as):03196                  aim   #^TChr,Wt.BSW,y Turn on transparency
                      (/dd/sourcecode/as):03197                ELSE
113E A629             (/dd/sourcecode/as):03198                  lda   Wt.BSW,y       Turn on transparency 
1140 847F             (/dd/sourcecode/as):03199                  anda  #^TChr
1142 A729             (/dd/sourcecode/as):03200                  sta   Wt.BSW,y
                      (/dd/sourcecode/as):03201                ENDC
1144 3410             (/dd/sourcecode/as):03202                  pshs  x              Preserve old X
1146 3276             (/dd/sourcecode/as):03203                  leas  -10,s          Make enough room for BS stack for R$X/Y
1148 30E4             (/dd/sourcecode/as):03204                  leax  ,s             Point X to stack
                      (/dd/sourcecode/as):03205                IFNE  H6309
                      (/dd/sourcecode/as):03206                  clrd                 get text co-ordinates
                      (/dd/sourcecode/as):03207                ELSE
114A 4F               (/dd/sourcecode/as):03208                  clra
114B 5F               (/dd/sourcecode/as):03209                  clrb
                      (/dd/sourcecode/as):03210                ENDC
114C ED04             (/dd/sourcecode/as):03211                  std   R$X,x
114E ED06             (/dd/sourcecode/as):03212                  std   R$Y,x
1150 170A01           (/dd/sourcecode/as):03213                  lbsr  DfltBar        Draw scroll bar markers
1153 8D0C             (/dd/sourcecode/as):03214                  bsr   DrawArr        draw the 4 arrows
1155 8607             (/dd/sourcecode/as):03215                  lda   #7             Draw 3D shading stuff
1157 308C46           (/dd/sourcecode/as):03216                  leax  <ScBar,pc      point to draw table
115A 170161           (/dd/sourcecode/as):03217                  lbsr  DrawBar
115D 326A             (/dd/sourcecode/as):03218                  leas  10,s           Restore stack to normal
115F 3590             (/dd/sourcecode/as):03219                  puls  x,pc           restore X
                      (/dd/sourcecode/as):03220         
                      (/dd/sourcecode/as):03221         * Draw scroll bar arrows
                      (/dd/sourcecode/as):03222         * Entry: Y=Window table pointer
                      (/dd/sourcecode/as):03223         *        U=Global mem pointer
                      (/dd/sourcecode/as):03224         * Exit : A=$00
                      (/dd/sourcecode/as):03225         *        All other regs. preserved
1161 8604             (/dd/sourcecode/as):03226         DrawArr  lda   #4             Get # arrows
1163 3412             (/dd/sourcecode/as):03227                  pshs  x,a            preserve X & arrow counter
1165 308C20           (/dd/sourcecode/as):03228                  leax  <ScArr,pc      point to table
1168 EC81             (/dd/sourcecode/as):03229         NxtArr   ldd   ,x++           get group/buffer
116A FD1157           (/dd/sourcecode/as):03230                  std   >GrfMem+gr0057 save it to grfdrv mem
116D 17017E           (/dd/sourcecode/as):03231                  lbsr  CalXCord       calculate X start co-ordinate
1170 FD1147           (/dd/sourcecode/as):03232                  std   >GrfMem+gr0047 save it in grfdrv mem.
1173 17017C           (/dd/sourcecode/as):03233                  lbsr  CalYCord       calculate Y start co-ordinate
1176 FD1149           (/dd/sourcecode/as):03234                  std   >GrfMem+gr0049 save it in grfdrv mem
1179 C636             (/dd/sourcecode/as):03235                  ldb   #$36           get grfdrv function code for PutBlk
                      (/dd/sourcecode/as):03236         * NOTE: SHOULDN'T NEED U PRESERVED
117B 3470             (/dd/sourcecode/as):03237                  pshs  x,y,u          preserve regs
117D 17F20B           (/dd/sourcecode/as):03238                  lbsr  L0101          let grfdrv do the rest
1180 3570             (/dd/sourcecode/as):03239                  puls  x,y,u          restore regs
1182 6AE4             (/dd/sourcecode/as):03240                  dec   ,s             done?
1184 26E2             (/dd/sourcecode/as):03241                  bne   NxtArr         keep going till we're done
1186 3592             (/dd/sourcecode/as):03242                  puls  a,x,pc
                      (/dd/sourcecode/as):03243         
                      (/dd/sourcecode/as):03244         * Draw table for scroll barred window arrows
                      (/dd/sourcecode/as):03245         * This seems a major error in group number. $CE does not exist. RG
                      (/dd/sourcecode/as):03246         * LCB - It did, but wasn't included in the NitrOS9 repository for some reason.
                      (/dd/sourcecode/as):03247         * $CE was reserved for the 4 color/3D look (thus leaving the original 2
                      (/dd/sourcecode/as):03248         * color, 2D ones alone for backwards compatibility with other programs)
                      (/dd/sourcecode/as):03249         * and was included in /dd/sys/stdwnd. It is properly there in the EOU.
1188 CE01             (/dd/sourcecode/as):03250         ScArr    fdb   $ce01          group/buffer for up arrow
118A FFF9             (/dd/sourcecode/as):03251                  fdb   -7
118C 0008             (/dd/sourcecode/as):03252                  fdb   8
                      (/dd/sourcecode/as):03253         
118E CE02             (/dd/sourcecode/as):03254                  fdb   $ce02          group/buffer for down arrow
1190 FFF9             (/dd/sourcecode/as):03255                  fdb   -7
1192 FFF1             (/dd/sourcecode/as):03256                  fdb   -15
                      (/dd/sourcecode/as):03257         
1194 CE03             (/dd/sourcecode/as):03258                  fdb   $ce03          group/buffer for left arrow
1196 0000             (/dd/sourcecode/as):03259                  fdb   0
1198 FFF9             (/dd/sourcecode/as):03260                  fdb   -7
                      (/dd/sourcecode/as):03261         
119A CE04             (/dd/sourcecode/as):03262                  fdb   $ce04          group/buffer for right arrow
119C FFF1             (/dd/sourcecode/as):03263                  fdb   -15
119E FFF9             (/dd/sourcecode/as):03264                  fdb   -7
                      (/dd/sourcecode/as):03265         
                      (/dd/sourcecode/as):03266         * Draw table for for various lines on a scroll barred window
11A0 03               (/dd/sourcecode/as):03267         ScBar    fcb   WColor3        white line below up arrow
11A1 FFF9             (/dd/sourcecode/as):03268                  fdb   -7
11A3 0010             (/dd/sourcecode/as):03269                  fdb   16
11A5 8000             (/dd/sourcecode/as):03270                  fdb   $8000
11A7 0010             (/dd/sourcecode/as):03271                  fdb   16
11A9 4A               (/dd/sourcecode/as):03272                  fcb   $4a
                      (/dd/sourcecode/as):03273         
11AA 01               (/dd/sourcecode/as):03274                  fcb   WColor2        gray line above down arrow
11AB FFF9             (/dd/sourcecode/as):03275                  fdb   -7
11AD FFF0             (/dd/sourcecode/as):03276                  fdb   -16
11AF 8000             (/dd/sourcecode/as):03277                  fdb   $8000
11B1 FFF0             (/dd/sourcecode/as):03278                  fdb   -16
11B3 4A               (/dd/sourcecode/as):03279                  fcb   $4a
                      (/dd/sourcecode/as):03280         
11B4 03               (/dd/sourcecode/as):03281                  fcb   WColor3        white line to the right of left arrow
11B5 0008             (/dd/sourcecode/as):03282                  fdb   8
11B7 FFF9             (/dd/sourcecode/as):03283                  fdb   -7
11B9 0008             (/dd/sourcecode/as):03284                  fdb   8
11BB FFFF             (/dd/sourcecode/as):03285                  fdb   -1
11BD 4A               (/dd/sourcecode/as):03286                  fcb   $4a
                      (/dd/sourcecode/as):03287         
11BE 01               (/dd/sourcecode/as):03288                  fcb   WColor2        gray line to the left of right arrow
11BF FFF0             (/dd/sourcecode/as):03289                  fdb   -16
11C1 FFF9             (/dd/sourcecode/as):03290                  fdb   -7
11C3 FFF0             (/dd/sourcecode/as):03291                  fdb   -16
11C5 FFFF             (/dd/sourcecode/as):03292                  fdb   -1
11C7 4A               (/dd/sourcecode/as):03293                  fcb   $4a
                      (/dd/sourcecode/as):03294         
11C8 01               (/dd/sourcecode/as):03295                  fcb   WColor2        gray line above left arrow
11C9 0000             (/dd/sourcecode/as):03296                  fdb   0
11CB FFF8             (/dd/sourcecode/as):03297                  fdb   -8
11CD 0007             (/dd/sourcecode/as):03298                  fdb   7
11CF FFF8             (/dd/sourcecode/as):03299                  fdb   -8
11D1 4A               (/dd/sourcecode/as):03300                  fcb   $4a
                      (/dd/sourcecode/as):03301         
11D2 03               (/dd/sourcecode/as):03302                  fcb   WColor3        white line to the right of right arrow
11D3 FFF9             (/dd/sourcecode/as):03303                  fdb   -7
11D5 FFF9             (/dd/sourcecode/as):03304                  fdb   -7
11D7 8000             (/dd/sourcecode/as):03305                  fdb   $8000
11D9 FFF9             (/dd/sourcecode/as):03306                  fdb   -7
11DB 4A               (/dd/sourcecode/as):03307                  fcb   $4a
                      (/dd/sourcecode/as):03308         
11DC 03               (/dd/sourcecode/as):03309                  fcb   WColor3        white line below the down arrow
11DD FFF9             (/dd/sourcecode/as):03310                  fdb   -7
11DF FFF9             (/dd/sourcecode/as):03311                  fdb   -7
11E1 FFF9             (/dd/sourcecode/as):03312                  fdb   -7
11E3 FFFF             (/dd/sourcecode/as):03313                  fdb   -1
11E5 4A               (/dd/sourcecode/as):03314                  fcb   $4a
                      (/dd/sourcecode/as):03315         
                      (/dd/sourcecode/as):03316                ENDC
                      (/dd/sourcecode/as):03317         
                      (/dd/sourcecode/as):03318         * Check if window is a graphic window
11E6 8D0B             (/dd/sourcecode/as):03319         L115F    bsr   L116C          copy window table to work table
11E8 B610BD           (/dd/sourcecode/as):03320                  lda   >WGlobal+g00BD Get current screen type
11EB 2A05             (/dd/sourcecode/as):03321                  bpl   L116B          graphics, skip ahead
11ED 3262             (/dd/sourcecode/as):03322                  leas  2,s            purge return address
11EF 53               (/dd/sourcecode/as):03323                  comb                 Exit with Illegal Window type error
11F0 C6B7             (/dd/sourcecode/as):03324                  ldb   #E$IWTyp
11F2 39               (/dd/sourcecode/as):03325         L116B    rts
                      (/dd/sourcecode/as):03326         
                      (/dd/sourcecode/as):03327         * Copy current window table into work table & set all default sizes in work
                      (/dd/sourcecode/as):03328         * table
11F3 3420             (/dd/sourcecode/as):03329         L116C    pshs  y              save path descriptor pointer
11F5 FF10B7           (/dd/sourcecode/as):03330                  stu   >WGlobal+g00B7 save device static in global
11F8 10BF10C0         (/dd/sourcecode/as):03331                  sty   >WGlobal+g00C0 save path descriptor in global
11FC 17F519           (/dd/sourcecode/as):03332                  lbsr  L06A0          verify window table
11FF 10BF10B9         (/dd/sourcecode/as):03333                  sty   >WGlobal+g00B9 save window table pointer
1203 A6B8F0           (/dd/sourcecode/as):03334                  lda   [Wt.STbl,y]    get screen type
1206 B710BD           (/dd/sourcecode/as):03335                  sta   >WGlobal+g00BD save it in global
1209 FE10B7           (/dd/sourcecode/as):03336                  ldu   >WGlobal+g00B7 get static mem back
120C 17F546           (/dd/sourcecode/as):03337                  lbsr  L06B9          get graphics table pointer for this window
120F 108E1087         (/dd/sourcecode/as):03338                  ldy   #WGlobal+G.WrkWTb+$10   Point to work window table
1213 10BF10BB         (/dd/sourcecode/as):03339                  sty   >WGlobal+g00BB save the pointer to work table
1217 FE10B9           (/dd/sourcecode/as):03340                  ldu   >WGlobal+g00B9 get pointer to current window table
                      (/dd/sourcecode/as):03341                IFNE  H6309
                      (/dd/sourcecode/as):03342                  ldq   Wt.LStDf,u     get default logical start address & start X/Y co-ordinates
                      (/dd/sourcecode/as):03343                  stq   Wt.LStrt,y     save it in window table as current values
                      (/dd/sourcecode/as):03344                ELSE
121A ECC826           (/dd/sourcecode/as):03345                  ldd   Wt.DfCPX,u     Get default X,Y coord start
121D ED35             (/dd/sourcecode/as):03346                  std   Wt.CPX,y       Save in work window table as current X,Y coord start
                      (/dd/sourcecode/as):03347         *         ldd   Wt.LStDf+2,u
                      (/dd/sourcecode/as):03348         *         std   Wt.LStrt+2,y
121F FD11B5           (/dd/sourcecode/as):03349                  std   >GrfMem+gr00B5 Save "W" copy (may not be needed)
1222 ECC824           (/dd/sourcecode/as):03350                  ldd   Wt.LStDf,u     Get screen logical start adress
1225 ED33             (/dd/sourcecode/as):03351                  std   Wt.LStrt,y     Save in work window table
                      (/dd/sourcecode/as):03352                ENDC
1227 ECC828           (/dd/sourcecode/as):03353                  ldd   Wt.DfSZX,u     get default X/Y sizes
122A ED37             (/dd/sourcecode/as):03354                  std   Wt.SZX,y       save as current working area
122C EC50             (/dd/sourcecode/as):03355                  ldd   Wt.STbl,u      get screen table pointer
122E ED30             (/dd/sourcecode/as):03356                  std   Wt.STbl,y      save it in new
1230 A652             (/dd/sourcecode/as):03357                  lda   Wt.BLnk,u      get overlay window link
1232 A732             (/dd/sourcecode/as):03358                  sta   Wt.BLnk,y      save it in new
1234 EC5B             (/dd/sourcecode/as):03359                  ldd   Wt.Cur,u       get cursor address
1236 ED3B             (/dd/sourcecode/as):03360                  std   Wt.Cur,y       save it
1238 EC5E             (/dd/sourcecode/as):03361                  ldd   Wt.CurX,u      get X/Y coord of cursor
123A ED3E             (/dd/sourcecode/as):03362                  std   Wt.CurX,y      save it
                      (/dd/sourcecode/as):03363                IFNE  H6309
                      (/dd/sourcecode/as):03364                  ldq   Wt.XBCnt,u     Get width of window in bytes, bytes wide per text char & bytes/text row
                      (/dd/sourcecode/as):03365                  stq   Wt.XBCnt,y     save it in new window table
                      (/dd/sourcecode/as):03366                ELSE
123C EC44             (/dd/sourcecode/as):03367                  ldd   Wt.BRow,u      Get # bytes/row
123E ED24             (/dd/sourcecode/as):03368                  std   Wt.BRow,y      save it
                      (/dd/sourcecode/as):03369         *         ldd   Wt.XBCnt+2,u
                      (/dd/sourcecode/as):03370         *         std   Wt.XBCnt+2,y
1240 FD11B5           (/dd/sourcecode/as):03371                  std   >GrfMem+gr00B5 Save "W" copy (may not be needed)
1243 EC42             (/dd/sourcecode/as):03372                  ldd   Wt.XBCnt,u     Get width of window in bytes & bytes wide each text chr is
1245 ED22             (/dd/sourcecode/as):03373                  std   Wt.XBCnt,y     Save in new
                      (/dd/sourcecode/as):03374                ENDC
1247 A64B             (/dd/sourcecode/as):03375                  lda   Wt.FBlk,u      get block # for font
1249 A72B             (/dd/sourcecode/as):03376                  sta   Wt.FBlk,y      save it
124B EC4C             (/dd/sourcecode/as):03377                  ldd   Wt.FOff,u      get offset for font
124D ED2C             (/dd/sourcecode/as):03378                  std   Wt.FOff,y
124F 6F29             (/dd/sourcecode/as):03379                  clr   Wt.BSW,y       clear window switches
1251 1701B3           (/dd/sourcecode/as):03380                  lbsr  L1337          set pattern to normal plot
1254 1701BB           (/dd/sourcecode/as):03381                  lbsr  L1342          set logic type to nothing
1257 E6C828           (/dd/sourcecode/as):03382                  ldb   Wt.DfSZX,u     get X size
125A 1700AF           (/dd/sourcecode/as):03383                  lbsr  L1015          multiply by 8
125D EDA81B           (/dd/sourcecode/as):03384                  std   Wt.MaxX,y      save max X coord
1260 E6C829           (/dd/sourcecode/as):03385                  ldb   Wt.DfSZY,u     get Y size
1263 1700A6           (/dd/sourcecode/as):03386                  lbsr  L1015          multiply by 8
1266 EDA81D           (/dd/sourcecode/as):03387                  std   Wt.MaxY,y      save max Y co-ordinate
1269 EC07             (/dd/sourcecode/as):03388                  ldd   Gt.FClr,x      get fore/back colors
126B ED26             (/dd/sourcecode/as):03389                  std   Wt.Fore,y      save 'em
126D 35A0             (/dd/sourcecode/as):03390                  puls  y,pc           restore path descriptor ptr & return
                      (/dd/sourcecode/as):03391         
                      (/dd/sourcecode/as):03392         * Change window size to leave a 1 character space on all 4 sides
126F 10BE10B9         (/dd/sourcecode/as):03393         L11F3    ldy   >WGlobal+g00B9 get current window table pointer
1273 CC0101           (/dd/sourcecode/as):03394                  ldd   #$0101         set X/Y start co-ordinate
1276 ED35             (/dd/sourcecode/as):03395                  std   Wt.CPX,y       save it
1278 ECA828           (/dd/sourcecode/as):03396                  ldd   Wt.DfSZX,y     get default X/Y sizes
                      (/dd/sourcecode/as):03397         * 6809/6309 - may be able to do SUBD #$0202 to replace 4 lines.
127B 830202           (/dd/sourcecode/as):03398         L1200    subd  #$0202         Subtract 2 from both
127E ED37             (/dd/sourcecode/as):03399         L1204    std   Wt.SZX,y       save X/Y size
1280 C60E             (/dd/sourcecode/as):03400                  ldb   #$0E           get grfdrv function for CWArea
1282 17F106           (/dd/sourcecode/as):03401                  lbsr  L0101
1285 2566             (/dd/sourcecode/as):03402                  bcs   L11F2
1287 FE10B7           (/dd/sourcecode/as):03403                  ldu   >WGlobal+g00B7 get static mem pointer
128A 10BE10C0         (/dd/sourcecode/as):03404                  ldy   >WGlobal+g00C0 get path descriptor pointer
128E 16F202           (/dd/sourcecode/as):03405                  lbra  L0436          go setup lines per page & return
                      (/dd/sourcecode/as):03406         
                      (/dd/sourcecode/as):03407         * NOTE: ALL OF THESE MAY NOT NEED U PRESERVED ANYMORE
                      (/dd/sourcecode/as):03408         * Draw a box
1291 FD114D           (/dd/sourcecode/as):03409         L122B    std   >GrfMem+gr004D
1294 3470             (/dd/sourcecode/as):03410                  pshs  u,y,x
1296 C64C             (/dd/sourcecode/as):03411                  ldb   #$4C           get code for box
1298 17F0F0           (/dd/sourcecode/as):03412         L1232    lbsr  L0101          Send code to grfdrv
129B 35F0             (/dd/sourcecode/as):03413                  puls  pc,u,y,x
                      (/dd/sourcecode/as):03414         
                      (/dd/sourcecode/as):03415         * Draw a line
129D FD114D           (/dd/sourcecode/as):03416         L1237    std   >GrfMem+gr004D save current Y coord
12A0 3470             (/dd/sourcecode/as):03417         L123A    pshs  u,y,x          preserve regs
12A2 C64A             (/dd/sourcecode/as):03418                  ldb   #$4A           get grfdrv function for line
12A4 20F2             (/dd/sourcecode/as):03419                  bra   L1232          send it to grfdrv
                      (/dd/sourcecode/as):03420         
                      (/dd/sourcecode/as):03421         * Draw a bar with current color
12A6 FD114D           (/dd/sourcecode/as):03422         L124E    std   >GrfMem+gr004D
12A9 3470             (/dd/sourcecode/as):03423                  pshs  u,y,x
12AB C64E             (/dd/sourcecode/as):03424                  ldb   #$4E           Code for Bar
12AD 20E9             (/dd/sourcecode/as):03425                  bra   L1232          Send it to grfdrv
                      (/dd/sourcecode/as):03426         
                      (/dd/sourcecode/as):03427         * Draw a 3D bar starting at 0,0 to 639,7 in current colors
12AF 10BE10BB         (/dd/sourcecode/as):03428         L1240    ldy   >WGlobal+g00BB Get ptr to work window table
12B3 3410             (/dd/sourcecode/as):03429                  pshs  x              preserve X
12B5 308C75           (/dd/sourcecode/as):03430                  leax  <TopBar,pc     point to draw table for top bar
12B8 8604             (/dd/sourcecode/as):03431                  lda   #4             get entry count
12BA 8D02             (/dd/sourcecode/as):03432                  bsr   DrawBar        draw the bar
12BC 3590             (/dd/sourcecode/as):03433                  puls  x,pc           restore & return
                      (/dd/sourcecode/as):03434         
                      (/dd/sourcecode/as):03435         * Draw a graphic sequence that requires start & end co-ordinates
                      (/dd/sourcecode/as):03436         * If the co-ordinate in draw table is negative, This will calculate the
                      (/dd/sourcecode/as):03437         * co-ordinate based on the size of the window in pixels.
                      (/dd/sourcecode/as):03438         * Entry: A=Number of draw table entrys
                      (/dd/sourcecode/as):03439         *        X=Pointer to draw table
                      (/dd/sourcecode/as):03440         *        Y=Pointer to window table
                      (/dd/sourcecode/as):03441         *        U=Global mem pointer
12BE E626             (/dd/sourcecode/as):03442         DrawBar  ldb   6,y            get current color
12C0 3406             (/dd/sourcecode/as):03443                  pshs  d              save it and entry count
12C2 A680             (/dd/sourcecode/as):03444         DrawNxt  lda   ,x+            get foreground color
12C4 8D54             (/dd/sourcecode/as):03445                  bsr   GetColr        get color mask
12C6 A726             (/dd/sourcecode/as):03446                  sta   Wt.Fore,y      put it in window table
12C8 8D24             (/dd/sourcecode/as):03447                  bsr   CalXCord       calculate X start co-ordinate
12CA FD1147           (/dd/sourcecode/as):03448                  std   >GrfMem+gr0047 save it in grfdrv mem.
12CD 8D23             (/dd/sourcecode/as):03449                  bsr   CalYCord       calculate Y start co-ordinate
12CF FD1149           (/dd/sourcecode/as):03450                  std   >GrfMem+gr0049 save it in grfdrv mem
12D2 8D1A             (/dd/sourcecode/as):03451                  bsr   CalXCord       calculate X end co-ordinate
12D4 FD114B           (/dd/sourcecode/as):03452                  std   >GrfMem+gr004B save it in grfdrv mem
12D7 8D19             (/dd/sourcecode/as):03453                  bsr   CalYCord       calculate Y end co-ordinate
12D9 FD114D           (/dd/sourcecode/as):03454                  std   >GrfMem+gr004D save it in grfdrv mem
12DC E680             (/dd/sourcecode/as):03455                  ldb   ,x+            get grfdrv function code
12DE 3470             (/dd/sourcecode/as):03456                  pshs  x,y,u          preserve regs
12E0 17F0A8           (/dd/sourcecode/as):03457                  lbsr  L0101          let grfdrv do the rest
12E3 3570             (/dd/sourcecode/as):03458                  puls  x,y,u          restore regs
12E5 6AE4             (/dd/sourcecode/as):03459                  dec   ,s             done?
12E7 26D9             (/dd/sourcecode/as):03460                  bne   DrawNxt        keep going till we're done
12E9 3506             (/dd/sourcecode/as):03461                  puls  d              restore current color & purge stack
12EB E726             (/dd/sourcecode/as):03462                  stb   Wt.Fore,y      put it back in window table
12ED 39               (/dd/sourcecode/as):03463         L11F2    rts   
                      (/dd/sourcecode/as):03464         
                      (/dd/sourcecode/as):03465         * Calculate X coord based on the size of window
12EE 8D1A             (/dd/sourcecode/as):03466         CalXCord bsr   L1013          get window X size in pixels
12F0 2002             (/dd/sourcecode/as):03467                  bra   CalCord
                      (/dd/sourcecode/as):03468         
                      (/dd/sourcecode/as):03469         * Calculate Y co-ordinate based on the size of window
12F2 8D12             (/dd/sourcecode/as):03470         CalYCord bsr   L100F          get window Y size in pixels
12F4 3406             (/dd/sourcecode/as):03471         CalCord  pshs  d              preserve size
12F6 EC81             (/dd/sourcecode/as):03472                  ldd   ,x++           get coord
12F8 2A09             (/dd/sourcecode/as):03473                  bpl   PosCord        it's positive, return coord
12FA 10838000         (/dd/sourcecode/as):03474                  cmpd  #$8000         use actual size?
12FE 2601             (/dd/sourcecode/as):03475                  bne   NegCord        no, skip ahead
1300 4F               (/dd/sourcecode/as):03476                  clra                 clear MSB to zero D
1301 E3E4             (/dd/sourcecode/as):03477         NegCord  addd  ,s             add it to the size (signed add!!)
1303 3262             (/dd/sourcecode/as):03478         PosCord  leas  2,s            purge size from stack
1305 39               (/dd/sourcecode/as):03479                  rts                  return
                      (/dd/sourcecode/as):03480         
                      (/dd/sourcecode/as):03481         * Get window Y size in pixels - NEED TO CHANGE TO ADJUST FOR 200 LINE ONLY
1306 E638             (/dd/sourcecode/as):03482         L100F    ldb   Wt.SZY,y       Get window Y size in chars
1308 2002             (/dd/sourcecode/as):03483                  bra   L1015
                      (/dd/sourcecode/as):03484         
                      (/dd/sourcecode/as):03485         * Get window X size in pixels
130A E637             (/dd/sourcecode/as):03486         L1013    ldb   Wt.SZX,y       Get window X size in chars
130C 4F               (/dd/sourcecode/as):03487         L1015    clra                 Clear MSB
                      (/dd/sourcecode/as):03488         * NOTE: HOW OFTEN WILL WE GET A WINDOW SIZE OF ZERO? SHOULD CHANGE TO NOT
                      (/dd/sourcecode/as):03489         * BOTHER WITH EITHER TSTB OR BEQ (UNLESS CALLING ROUTINE CHECKS FLAG)
130D 5D               (/dd/sourcecode/as):03490                  tstb                 0?
130E 2709             (/dd/sourcecode/as):03491                  beq   L101E          Yes, don't bother with multiply
                      (/dd/sourcecode/as):03492                IFNE  H6309
                      (/dd/sourcecode/as):03493                  lsld                 Multiply by 8
                      (/dd/sourcecode/as):03494                  lsld  
                      (/dd/sourcecode/as):03495                  lsld  
                      (/dd/sourcecode/as):03496                  decd                 0 base
                      (/dd/sourcecode/as):03497                ELSE
1310 58               (/dd/sourcecode/as):03498                  lslb
1311 49               (/dd/sourcecode/as):03499                  rola
1312 58               (/dd/sourcecode/as):03500                  lslb
1313 49               (/dd/sourcecode/as):03501                  rola
1314 58               (/dd/sourcecode/as):03502                  lslb
1315 49               (/dd/sourcecode/as):03503                  rola
1316 830001           (/dd/sourcecode/as):03504                  subd  #$0001
                      (/dd/sourcecode/as):03505                ENDC
1319 39               (/dd/sourcecode/as):03506         L101E    rts
                      (/dd/sourcecode/as):03507         
                      (/dd/sourcecode/as):03508         * Get color mask
131A 3414             (/dd/sourcecode/as):03509         GetColr  pshs  b,x            save color & table pointer
131C F610BD           (/dd/sourcecode/as):03510                  ldb   >WGlobal+g00BD get screen type
131F 308C06           (/dd/sourcecode/as):03511                  leax  <ColrMsk-1,pc  point to color mask table (-1 since base 0)
1322 E685             (/dd/sourcecode/as):03512                  ldb   b,x
1324 3D               (/dd/sourcecode/as):03513                  mul   
1325 1F98             (/dd/sourcecode/as):03514                  tfr   b,a
1327 3594             (/dd/sourcecode/as):03515                  puls  b,x,pc         restore & return
                      (/dd/sourcecode/as):03516         
1329 FF555511         (/dd/sourcecode/as):03517         ColrMsk  fcb   $ff,$55,$55,$11
                      (/dd/sourcecode/as):03518         
                      (/dd/sourcecode/as):03519         * Draw table for top menu bar
132D 02               (/dd/sourcecode/as):03520         TopBar   fcb   WColor1        Color 1- Draw Bar from 1,1 to (Right-1,6)
132E 0001             (/dd/sourcecode/as):03521                  fdb   1              (Changed from original 0,0-Right,7)
1330 0001             (/dd/sourcecode/as):03522                  fdb   1
1332 FFFF             (/dd/sourcecode/as):03523                  fdb   -1
1334 0006             (/dd/sourcecode/as):03524                  fdb   6
1336 4E               (/dd/sourcecode/as):03525                  fcb   $4e            Grfdrv BAR function code
                      (/dd/sourcecode/as):03526         
1337 03               (/dd/sourcecode/as):03527                  fcb   WColor3        Color 3-Draw Box from 0,0 to Right,7)
1338 0000             (/dd/sourcecode/as):03528                  fdb   0
133A 0000             (/dd/sourcecode/as):03529                  fdb   0
133C 8000             (/dd/sourcecode/as):03530                  fdb   $8000
133E 0007             (/dd/sourcecode/as):03531                  fdb   7
1340 4C               (/dd/sourcecode/as):03532                  fcb   $4c            Grfdrv BOX function code
                      (/dd/sourcecode/as):03533         
1341 01               (/dd/sourcecode/as):03534                  fcb   WColor2        Foreground color
1342 0000             (/dd/sourcecode/as):03535                  fdb   $0000          Start X co-ordinate
1344 0007             (/dd/sourcecode/as):03536                  fdb   $0007          Start Y co-ordinate
1346 8000             (/dd/sourcecode/as):03537                  fdb   $8000          End X
1348 0007             (/dd/sourcecode/as):03538                  fdb   $0007          End Y
134A 4A               (/dd/sourcecode/as):03539                  fcb   $4a            Grfdrv LINE function code
                      (/dd/sourcecode/as):03540         
134B 01               (/dd/sourcecode/as):03541                  fcb   WColor2        Foreground color
134C 8000             (/dd/sourcecode/as):03542                  fdb   $8000          Start X co-ordinate
134E 0000             (/dd/sourcecode/as):03543                  fdb   $0000          Start Y co-ordinate
1350 8000             (/dd/sourcecode/as):03544                  fdb   $8000          End X
1352 0007             (/dd/sourcecode/as):03545                  fdb   $0007          End Y
1354 4A               (/dd/sourcecode/as):03546                  fcb   $4a            Grfdrv LINE function code
                      (/dd/sourcecode/as):03547         
                      (/dd/sourcecode/as):03548         * Print close box
1355 86C7             (/dd/sourcecode/as):03549         L127B    lda   #$C7           CHR$ for Close box symbol
                      (/dd/sourcecode/as):03550         * Generic routine for calling graphics font (font $c803) & resetting to normal
1357 8D5D             (/dd/sourcecode/as):03551         L1271    bsr   L12C2          Go select graphics font
1359 8D08             (/dd/sourcecode/as):03552                  bsr   L1285          Print char on screen
135B 206E             (/dd/sourcecode/as):03553                  bra   L12D7          Revert to normal font, return from there.
                      (/dd/sourcecode/as):03554         
                      (/dd/sourcecode/as):03555         * Print tandy menu icon
135D 86CB             (/dd/sourcecode/as):03556         L127F    lda   #$CB           CHR$ for Tandy icon character
135F 20F6             (/dd/sourcecode/as):03557                  bra   L1271          Put on screen
                      (/dd/sourcecode/as):03558         
                      (/dd/sourcecode/as):03559         * Print a space
1361 8620             (/dd/sourcecode/as):03560         L1283    lda   #C$SPAC        Space char
                      (/dd/sourcecode/as):03561         * Print a single character
                      (/dd/sourcecode/as):03562         * Entry: A=character to print
1363 3476             (/dd/sourcecode/as):03563         L1285    pshs  d,x,y,u
1365 C63A             (/dd/sourcecode/as):03564                  ldb   #$3A           Regular alpha put grfdrv
1367 17F021           (/dd/sourcecode/as):03565         L1289    lbsr  L0101
136A 35F6             (/dd/sourcecode/as):03566                  puls  d,x,y,u,pc
                      (/dd/sourcecode/as):03567         
                      (/dd/sourcecode/as):03568         * Set cursor co-ordinates
                      (/dd/sourcecode/as):03569         * Entry: A=X co-ordinate
                      (/dd/sourcecode/as):03570         *        B=Y co-ordinate
136C C32020           (/dd/sourcecode/as):03571         L128E    addd  #$2020         Set up for GRFDRV CurXY call
136F 3470             (/dd/sourcecode/as):03572                  pshs  u,y,x
1371 17F069           (/dd/sourcecode/as):03573                  lbsr  L0380
1374 35F0             (/dd/sourcecode/as):03574                  puls  pc,u,y,x
                      (/dd/sourcecode/as):03575         
1376 8D07             (/dd/sourcecode/as):03576         L1299    bsr   L12A2          Calculate length of NUL terminated string @,X
1378 C10F             (/dd/sourcecode/as):03577                  cmpb  #15            >15 chars?
137A 2302             (/dd/sourcecode/as):03578                  bls   L12A1          No, return
137C C60F             (/dd/sourcecode/as):03579                  ldb   #15            Force to 15 chars
137E 39               (/dd/sourcecode/as):03580         L12A1    rts   
                      (/dd/sourcecode/as):03581         
                      (/dd/sourcecode/as):03582         * Get length of a NULL terminated text string (not greater than 128)
                      (/dd/sourcecode/as):03583         * Entry: X=Pointer to string
                      (/dd/sourcecode/as):03584         * Exit : B=Length of string
137F 3402             (/dd/sourcecode/as):03585         L12A2    pshs  a              preserve a
1381 C6FF             (/dd/sourcecode/as):03586                  ldb   #-1            Init count to -1 (loop entry will bump to 0)
1383 5C               (/dd/sourcecode/as):03587         L12A5    incb                 Bump char count up
1384 A685             (/dd/sourcecode/as):03588                  lda   b,x            Get char
1386 26FB             (/dd/sourcecode/as):03589                  bne   L12A5          Not end of string yet, keep looking
1388 3582             (/dd/sourcecode/as):03590         L12AC    puls  a,pc           restore a & return
                      (/dd/sourcecode/as):03591         
                      (/dd/sourcecode/as):03592         * Print a string of specific length
                      (/dd/sourcecode/as):03593         * NOTE: ASSUMES LENGTH NEVER >128 CHARS! NOTE: Grfdrv's buffered write is limited to 32 bytes
                      (/dd/sourcecode/as):03594         * Entry: B=Length of string
                      (/dd/sourcecode/as):03595         *        X=Pointer to string
138A 3476             (/dd/sourcecode/as):03596         L12AE    pshs  d,x,y,u        Save regs
                      (/dd/sourcecode/as):03597                IFNE  H6309
                      (/dd/sourcecode/as):03598                  clre  
                      (/dd/sourcecode/as):03599                  tfr   b,f            W=String length
                      (/dd/sourcecode/as):03600                  ldu   #$0180         Point to buffered write buffer
                      (/dd/sourcecode/as):03601                  tfm   x+,u+          Copy to GRFDRV buffer
                      (/dd/sourcecode/as):03602                ELSE
                      (/dd/sourcecode/as):03603         * 6809 - Change to mini stack blast copy eventually
138C 3404             (/dd/sourcecode/as):03604                  pshs  b
138E CE0180           (/dd/sourcecode/as):03605                  ldu   #$0180
1391 A680             (/dd/sourcecode/as):03606         L12AEb   lda   ,x+
1393 A7C0             (/dd/sourcecode/as):03607                  sta   ,u+
1395 5A               (/dd/sourcecode/as):03608                  decb
1396 26F9             (/dd/sourcecode/as):03609                  bne   L12AEb
1398 4F               (/dd/sourcecode/as):03610                  clra
1399 FD11B5           (/dd/sourcecode/as):03611                  std   >GrfMem+gr00B5
139C 3504             (/dd/sourcecode/as):03612                  puls  b
                      (/dd/sourcecode/as):03613                ENDC
139E CE0180           (/dd/sourcecode/as):03614                  ldu   #$0180         Point to buffered write buffer for GRFDRV
13A1 1F98             (/dd/sourcecode/as):03615                  tfr   b,a            Move size of buffer to A for GRFDRV
13A3 C606             (/dd/sourcecode/as):03616                  ldb   #$06           Buffered Write call code for GRFDRV
13A5 17EFE3           (/dd/sourcecode/as):03617                  lbsr  L0101          Call GRFDRV
13A8 35F6             (/dd/sourcecode/as):03618                  puls  d,x,y,u,pc Restore regs & return
                      (/dd/sourcecode/as):03619         
                      (/dd/sourcecode/as):03620         * Erase to end of line
13AA 8604             (/dd/sourcecode/as):03621         L12B6    lda   #$04
13AC 3476             (/dd/sourcecode/as):03622         L12B8    pshs  u,y,x,d
13AE C63C             (/dd/sourcecode/as):03623                  ldb   #$3C
13B0 20B5             (/dd/sourcecode/as):03624                  bra   L1289
                      (/dd/sourcecode/as):03625         
                      (/dd/sourcecode/as):03626         * Clear screen
13B2 860C             (/dd/sourcecode/as):03627         L12BE    lda   #$0C
13B4 20F6             (/dd/sourcecode/as):03628                  bra   L12B8
                      (/dd/sourcecode/as):03629         
13B6 3476             (/dd/sourcecode/as):03630         L12C2    pshs  u,y,x,d
13B8 BE1075           (/dd/sourcecode/as):03631                  ldx   >WGlobal+G.GfxTbl  Get graphics table ptr
13BB 308902B9         (/dd/sourcecode/as):03632                  leax  >$02B9,x       Offset into menu table ($240,x) + 121/$79 it???
13BF A684             (/dd/sourcecode/as):03633                  lda   Grf.Bck,x      DOUBT THIS IS RIGHT
13C1 271A             (/dd/sourcecode/as):03634                  beq   L12E9
13C3 A72B             (/dd/sourcecode/as):03635         L12CF    sta   Wt.FBlk,y
13C5 EC01             (/dd/sourcecode/as):03636                  ldd   Grf.Off,x
13C7 ED2C             (/dd/sourcecode/as):03637                  std   Wt.FOff,y
13C9 35F6             (/dd/sourcecode/as):03638                  puls  pc,u,y,x,d
                      (/dd/sourcecode/as):03639         
                      (/dd/sourcecode/as):03640         * Switch to text font
13CB 3476             (/dd/sourcecode/as):03641         L12D7    pshs  u,y,x,d
13CD BE1075           (/dd/sourcecode/as):03642                  ldx   >WGlobal+G.GfxTbl Get graphics tables ptr
13D0 308902B6         (/dd/sourcecode/as):03643                  leax  >$02B6,x       Offset to ???
13D4 A684             (/dd/sourcecode/as):03644                  lda   Grf.Bck,x      Get ???
13D6 26EB             (/dd/sourcecode/as):03645                  bne   L12CF          If non-0, copy 3 bytes back to original state
13D8 CCC827           (/dd/sourcecode/as):03646                  ldd   #$C827         Normal 8x8 text font (Actually, it's 8x8 size, but 8x7 in font data)
13DB 2003             (/dd/sourcecode/as):03647                  bra   L12EC          Call grfdrv to set font
                      (/dd/sourcecode/as):03648         
                      (/dd/sourcecode/as):03649         * Switch to graphic font
13DD CCC803           (/dd/sourcecode/as):03650         L12E9    ldd   #$C803         Graphics font/buffer #
13E0 3470             (/dd/sourcecode/as):03651         L12EC    pshs  u,y,x
13E2 FD1157           (/dd/sourcecode/as):03652                  std   >GrfMem+gr0057 Save in Grfdrv mem
13E5 C618             (/dd/sourcecode/as):03653                  ldb   #$18           Set font command
13E7 17EFA1           (/dd/sourcecode/as):03654                  lbsr  L0101          Set font in grfdrv
13EA 3570             (/dd/sourcecode/as):03655                  puls  u,y,x
13EC A62B             (/dd/sourcecode/as):03656                  lda   Wt.FBlk,y      Copy stuff back (Font MMU block)
13EE A784             (/dd/sourcecode/as):03657                  sta   Grf.Bck,x
13F0 EC2C             (/dd/sourcecode/as):03658                  ldd   Wt.FOff,y      (Offset into MMU block where font is)
13F2 ED01             (/dd/sourcecode/as):03659                  std   Grf.Off,x
13F4 35F6             (/dd/sourcecode/as):03660                  puls  pc,u,y,x,d     Restore & return
                      (/dd/sourcecode/as):03661         
                      (/dd/sourcecode/as):03662         * Turn inverse on
13F6 3470             (/dd/sourcecode/as):03663         L1329    pshs  u,y,x
13F8 CC2040           (/dd/sourcecode/as):03664                  ldd   #$2040         Inverse ON
13FB 17EF8D           (/dd/sourcecode/as):03665         L130D    lbsr  L0101          Go execute in grfdrv
13FE 35F0             (/dd/sourcecode/as):03666                  puls  pc,u,y,x
                      (/dd/sourcecode/as):03667         
                      (/dd/sourcecode/as):03668         * Turn inverse off
1400 3470             (/dd/sourcecode/as):03669         L1331    pshs  u,y,x
1402 CC2140           (/dd/sourcecode/as):03670                  ldd   #$2140         Inverse off
1405 20F4             (/dd/sourcecode/as):03671                  bra   L130D
                      (/dd/sourcecode/as):03672         
                      (/dd/sourcecode/as):03673         * Set pattern
1407 3470             (/dd/sourcecode/as):03674         L1337    pshs  u,y,x
                      (/dd/sourcecode/as):03675                IFNE  H6309
                      (/dd/sourcecode/as):03676                  clrd  
                      (/dd/sourcecode/as):03677                ELSE
1409 4F               (/dd/sourcecode/as):03678                  clra  
140A 5F               (/dd/sourcecode/as):03679                  clrb  
                      (/dd/sourcecode/as):03680                ENDC
140B FD1157           (/dd/sourcecode/as):03681                  std   >GrfMem+gr0057 Save in Grfdrv Mem
140E C612             (/dd/sourcecode/as):03682                  ldb   #$12
1410 20E9             (/dd/sourcecode/as):03683                  bra   L130D
                      (/dd/sourcecode/as):03684         
                      (/dd/sourcecode/as):03685         * Set logic type to 0 (normal gfx)
1412 3470             (/dd/sourcecode/as):03686         L1342    pshs  u,y,x
1414 4F               (/dd/sourcecode/as):03687                  clra  
1415 A72A             (/dd/sourcecode/as):03688                  sta   Wt.LSet,y
1417 C61E             (/dd/sourcecode/as):03689                  ldb   #$1E
1419 20E0             (/dd/sourcecode/as):03690                  bra   L130D
                      (/dd/sourcecode/as):03691         
                      (/dd/sourcecode/as):03692         * Setup graphics table entry
141B 3476             (/dd/sourcecode/as):03693         L1358    pshs  d,x,y,u
141D 17F2F8           (/dd/sourcecode/as):03694                  lbsr  L06A0          verify window table
1420 EE66             (/dd/sourcecode/as):03695                  ldu   6,s            get static memory pointer
1422 17F330           (/dd/sourcecode/as):03696                  lbsr  L06B9          get graphics table pointer
1425 EC26             (/dd/sourcecode/as):03697                  ldd   Wt.Fore,y      get current foreground/background colors
1427 ED07             (/dd/sourcecode/as):03698                  std   Gt.FClr,x      save it in graphics table
1429 17F7E0           (/dd/sourcecode/as):03699                  lbsr  L0B01          get mask value
142C ED09             (/dd/sourcecode/as):03700                  std   Gt.FMsk,x      save it into graphics table
                      (/dd/sourcecode/as):03701                IFNE  H6309
                      (/dd/sourcecode/as):03702                  clrd                 init pointer to window descriptor
                      (/dd/sourcecode/as):03703                ELSE
142E 4F               (/dd/sourcecode/as):03704                  clra
142F 5F               (/dd/sourcecode/as):03705                  clrb
                      (/dd/sourcecode/as):03706                ENDC
1430 ED05             (/dd/sourcecode/as):03707                  std   Gt.DPtr,x
1432 35F6             (/dd/sourcecode/as):03708                  puls  d,x,y,u,pc
                      (/dd/sourcecode/as):03709         
                      (/dd/sourcecode/as):03710         * Copy a window descriptor from caller's process area
                      (/dd/sourcecode/as):03711         * Entry: None
1434 3466             (/dd/sourcecode/as):03712         L1371    pshs  d,y,u          preserve regs
1436 8D27             (/dd/sourcecode/as):03713                  bsr   L139E          is it the owner of the window?
1438 2520             (/dd/sourcecode/as):03714                  bcs   L1397          no, return
143A AE05             (/dd/sourcecode/as):03715                  ldx   Gt.DPtr,x      get pointer to window descriptor
143C 33C90240         (/dd/sourcecode/as):03716                  leau  >$0240,u       point to a work buffer
1440 108E0022         (/dd/sourcecode/as):03717                  ldy   #WN.SIZ        get size of descriptor
1444 327E             (/dd/sourcecode/as):03718         L1381    leas  -2,s           make a buffer for current process
1446 17EE09           (/dd/sourcecode/as):03719                  lbsr  L0238          switch to system process
1449 103F1B           (/dd/sourcecode/as):03720                  os9   F$CpyMem       copy the window descriptor from process space
144C 17EE0F           (/dd/sourcecode/as):03721                  lbsr  L0244          switch back to current process
144F 3262             (/dd/sourcecode/as):03722                  leas  2,s            purge stack
1451 1F31             (/dd/sourcecode/as):03723                  tfr   u,x            move destination to X
1453 EC8817           (/dd/sourcecode/as):03724                  ldd   WN.SYNC,x      get sync bytes
1456 1083C0C0         (/dd/sourcecode/as):03725                  cmpd  #WINSYNC       set flags for compare
145A 35E6             (/dd/sourcecode/as):03726         L1397    puls  d,y,u,pc       restore & return
                      (/dd/sourcecode/as):03727         
                      (/dd/sourcecode/as):03728         * Entry:
                      (/dd/sourcecode/as):03729         * Exit : B=Offset to DAT image
145C 17F2F6           (/dd/sourcecode/as):03730         L139B    lbsr  L06B9          get pointer to graphics table entry
145F FE1075           (/dd/sourcecode/as):03731         L139E    ldu   >WGlobal+G.GfxTbl  get pointer to start of graphics table
1462 109E48           (/dd/sourcecode/as):03732                  ldy   <D.PrcDBT      get process descriptor block table pointer
1465 E60E             (/dd/sourcecode/as):03733                  ldb   Gt.Proc,x      get process number of owner
1467 A6A5             (/dd/sourcecode/as):03734                  lda   b,y            get process # of user
1469 A10F             (/dd/sourcecode/as):03735                  cmpa  Gt.PBlk,x      match?
146B 2605             (/dd/sourcecode/as):03736                  bne   L13B1          no, set carry & return
146D C640             (/dd/sourcecode/as):03737                  ldb   #P$DATImg      get offset to DAT image into D
146F 1CFE             (/dd/sourcecode/as):03738                  andcc  #^Carry       clear carry
1471 39               (/dd/sourcecode/as):03739         L13B0    rts                  return
                      (/dd/sourcecode/as):03740         
1472 1A01             (/dd/sourcecode/as):03741         L13B1    orcc  #Carry         set carry
1474 39               (/dd/sourcecode/as):03742                  rts                  return
                      (/dd/sourcecode/as):03743         
                      (/dd/sourcecode/as):03744         * Copy a menu descriptor from caller's process space
1475 3466             (/dd/sourcecode/as):03745         L13B5    pshs  u,y,d
1477 3410             (/dd/sourcecode/as):03746                  pshs  x
1479 8DE1             (/dd/sourcecode/as):03747                  bsr   L139B          Get DAT image offset to copy menu descriptor from
147B 3510             (/dd/sourcecode/as):03748                  puls  x
147D 25DB             (/dd/sourcecode/as):03749                  bcs   L1397
147F 33C90262         (/dd/sourcecode/as):03750                  leau  >$0262,u
1483 108E0017         (/dd/sourcecode/as):03751                  ldy   #MN.SIZ
1487 20BB             (/dd/sourcecode/as):03752                  bra   L1381          Copy the memory
                      (/dd/sourcecode/as):03753         
                      (/dd/sourcecode/as):03754         * Set the root window menu bar to active state (Called from VTIO special calls)
1489 17FD67           (/dd/sourcecode/as):03755         L13E9    lbsr  L116C          setup working window table
148C 3278             (/dd/sourcecode/as):03756                  leas  -8,s           make a buffer
148E 6F62             (/dd/sourcecode/as):03757                  clr   2,s            clear a flag?
1490 17FE1C           (/dd/sourcecode/as):03758                  lbsr  L1240          draw 3D bar
1493 200E             (/dd/sourcecode/as):03759                  bra   L1404          go print it
                      (/dd/sourcecode/as):03760         
                      (/dd/sourcecode/as):03761         * SS.UmBar enry point
1495 17FD5B           (/dd/sourcecode/as):03762         L13F5    lbsr  L116C          setup working window table
                      (/dd/sourcecode/as):03763         
                      (/dd/sourcecode/as):03764         * Called from SS.WnSet
1498 17FE14           (/dd/sourcecode/as):03765         L13FA    lbsr  L1240          draw a 3D bar
149B 3278             (/dd/sourcecode/as):03766                  leas  -8,s
149D 6F62             (/dd/sourcecode/as):03767                  clr   2,s
149F 10BE10BB         (/dd/sourcecode/as):03768                  ldy   >WGlobal+g00BB Get ptr to work window table
                      (/dd/sourcecode/as):03769         
                      (/dd/sourcecode/as):03770         * Print menu bar in active state
14A3 17FF50           (/dd/sourcecode/as):03771         L1404    lbsr  L1329          turn inverse on
                      (/dd/sourcecode/as):03772                IFNE  H6309
                      (/dd/sourcecode/as):03773                  aim   #^TChr,Wt.BSW,y Turn on transparency
                      (/dd/sourcecode/as):03774                ELSE
14A6 3402             (/dd/sourcecode/as):03775                  pshs  a
14A8 A629             (/dd/sourcecode/as):03776                  lda   Wt.BSW,y
14AA 847F             (/dd/sourcecode/as):03777                  anda  #^TChr
14AC A729             (/dd/sourcecode/as):03778                  sta   Wt.BSW,y
14AE 3502             (/dd/sourcecode/as):03779                  puls  a
                      (/dd/sourcecode/as):03780                ENDC
14B0 17FF18           (/dd/sourcecode/as):03781                  lbsr  L12D7          set to text font
                      (/dd/sourcecode/as):03782                IFNE  H6309
                      (/dd/sourcecode/as):03783                  clrd                 x,y both to 0
                      (/dd/sourcecode/as):03784                ELSE
14B3 4F               (/dd/sourcecode/as):03785                  clra
14B4 5F               (/dd/sourcecode/as):03786                  clrb
                      (/dd/sourcecode/as):03787                ENDC
14B5 A765             (/dd/sourcecode/as):03788                  sta   5,s
14B7 17FEB2           (/dd/sourcecode/as):03789                  lbsr  L128E          Set Text cursor to 0,0
14BA E637             (/dd/sourcecode/as):03790                  ldb   Wt.SZX,y       get current window X size
14BC C002             (/dd/sourcecode/as):03791                  subb  #2             take off 2 for space on either side of text
14BE E7E4             (/dd/sourcecode/as):03792                  stb   ,s             save it
14C0 C602             (/dd/sourcecode/as):03793                  ldb   #2             get current text size (just the spaces so far)
14C2 E761             (/dd/sourcecode/as):03794                  stb   1,s            save it in buffer
14C4 17FE9A           (/dd/sourcecode/as):03795                  lbsr  L1283          print leading space for menu
                      (/dd/sourcecode/as):03796                IFNE  H6309
                      (/dd/sourcecode/as):03797                  aim   #^Bold,Wt.BSW,y Turn off Bold print
                      (/dd/sourcecode/as):03798                ELSE
14C7 3402             (/dd/sourcecode/as):03799                  pshs  a
14C9 A629             (/dd/sourcecode/as):03800                  lda   Wt.BSW,y
14CB 84DF             (/dd/sourcecode/as):03801                  anda  #^Bold
14CD A729             (/dd/sourcecode/as):03802                  sta   Wt.BSW,y
14CF 3502             (/dd/sourcecode/as):03803                  puls  a
                      (/dd/sourcecode/as):03804                ENDC
14D1 17FE81           (/dd/sourcecode/as):03805                  lbsr  L127B          print close box
14D4 10BE1075         (/dd/sourcecode/as):03806                  ldy   >WGlobal+G.GfxTbl  Get graphics table ptr
14D8 31A9028E         (/dd/sourcecode/as):03807                  leay  >$028E,y       point to handling table
14DC 6FA4             (/dd/sourcecode/as):03808                  clr   MnuXNum,y      Menu entry number=0
14DE 17FF53           (/dd/sourcecode/as):03809                  lbsr  L1371          get window descriptor pointer
14E1 1026009B         (/dd/sourcecode/as):03810                  lbne  L14E3          valid?
14E5 A68814           (/dd/sourcecode/as):03811                  lda   WN.NMNS,x      yes, get number of menus in menu bar
14E8 10270094         (/dd/sourcecode/as):03812                  lbeq  L14E3          none to print, return
14EC 810A             (/dd/sourcecode/as):03813                  cmpa  #10            more than 10?
14EE 1022008E         (/dd/sourcecode/as):03814                  lbhi  L14E3          yes, return
14F2 A764             (/dd/sourcecode/as):03815                  sta   4,s            save count
14F4 AE8820           (/dd/sourcecode/as):03816                  ldx   WN.BAR,x       get pointer to menu descriptor
14F7 AF66             (/dd/sourcecode/as):03817         L144A    stx   6,s            save menu descriptor pointer
14F9 3440             (/dd/sourcecode/as):03818                  pshs  u
14FB FE10B7           (/dd/sourcecode/as):03819                  ldu   >WGlobal+g00B7 get pointer to static mem
                      (/dd/sourcecode/as):03820                IFNE  H6309
                      (/dd/sourcecode/as):03821                  bsr   L13B5          get menu descriptor
                      (/dd/sourcecode/as):03822                ELSE
14FE 17FF74           (/dd/sourcecode/as):03823                  lbsr  L13B5
                      (/dd/sourcecode/as):03824                ENDC
1501 3540             (/dd/sourcecode/as):03825                  puls  u
1503 10BE10BB         (/dd/sourcecode/as):03826                  ldy   >WGlobal+g00BB  Get ptr to work window table
1507 A68812           (/dd/sourcecode/as):03827                  lda   MN.ENBL,x      is menu enabled?
150A 2708             (/dd/sourcecode/as):03828                  beq   L1466          no, skip ahead
                      (/dd/sourcecode/as):03829                IFNE  H6309
                      (/dd/sourcecode/as):03830                  oim   #Bold,Wt.BSW,y Turn on Bold print
                      (/dd/sourcecode/as):03831                ELSE
150C A629             (/dd/sourcecode/as):03832                  lda   Wt.BSW,y
150E 8A20             (/dd/sourcecode/as):03833                  ora   #Bold
1510 A729             (/dd/sourcecode/as):03834                  sta   Wt.BSW,y
                      (/dd/sourcecode/as):03835                ENDC
1512 2006             (/dd/sourcecode/as):03836                  bra   L1469          skip ahead
                      (/dd/sourcecode/as):03837         
     1514             (/dd/sourcecode/as):03838         L1466    equ   *
                      (/dd/sourcecode/as):03839                IFNE  H6309
                      (/dd/sourcecode/as):03840                  aim   #^Bold,Wt.BSW,y Turn off Bold print
                      (/dd/sourcecode/as):03841                ELSE
1514 A629             (/dd/sourcecode/as):03842                  lda   Wt.BSW,y
1516 84DF             (/dd/sourcecode/as):03843                  anda  #^Bold
1518 A729             (/dd/sourcecode/as):03844                  sta   Wt.BSW,y
                      (/dd/sourcecode/as):03845                ENDC
151A A60F             (/dd/sourcecode/as):03846         L1469    lda   MN.ID,x        get ID number
151C 8114             (/dd/sourcecode/as):03847                  cmpa  #MId.Tdy       is it tandy menu?
151E 261F             (/dd/sourcecode/as):03848                  bne   L148D          no, skip ahead
                      (/dd/sourcecode/as):03849         * Print Tandy menu
                      (/dd/sourcecode/as):03850         * 6809/6309 note: Some of these multi char prints should be changed to use the FastChr multi-char
                      (/dd/sourcecode/as):03851         * Write that Alan added (like space/tandy/space below) to speed them up (like L12AE does for titles,
                      (/dd/sourcecode/as):03852         * etc.) as long as they are using 8x8 font
1520 10BE10BB         (/dd/sourcecode/as):03853                  ldy   >WGlobal+g00BB Get ptr to work window table
1524 17FE3A           (/dd/sourcecode/as):03854                  lbsr  L1283          print a space
1527 17FE33           (/dd/sourcecode/as):03855                  lbsr  L127F          print the tandy character
152A 17FE34           (/dd/sourcecode/as):03856                  lbsr  L1283          print a space
152D C601             (/dd/sourcecode/as):03857                  ldb   #1             get this menu's length
152F E763             (/dd/sourcecode/as):03858                  stb   3,s            save it
1531 3404             (/dd/sourcecode/as):03859                  pshs  b
1533 8D55             (/dd/sourcecode/as):03860                  bsr   L14EE          add it into handling table
1535 3261             (/dd/sourcecode/as):03861                  leas  1,s
1537 E6E4             (/dd/sourcecode/as):03862                  ldb   ,s             get window size
1539 C003             (/dd/sourcecode/as):03863                  subb  #3             take off length for tandy menu
153B E7E4             (/dd/sourcecode/as):03864                  stb   ,s             save it back
153D 2034             (/dd/sourcecode/as):03865                  bra   L14C6          go to next entry
                      (/dd/sourcecode/as):03866         
                      (/dd/sourcecode/as):03867         * Print normal menu entry
153F 3084             (/dd/sourcecode/as):03868         L148D    leax  MN.TTL,x       point to text
1541 17FE32           (/dd/sourcecode/as):03869                  lbsr  L1299          get length of it up to maximum of 15
1544 E763             (/dd/sourcecode/as):03870                  stb   3,s            save it
1546 E1E4             (/dd/sourcecode/as):03871                  cmpb  ,s             will it fit in window?
1548 2308             (/dd/sourcecode/as):03872                  bls   L14A4          yes, skip ahead
154A E6E4             (/dd/sourcecode/as):03873                  ldb   ,s             get window X size
154C C001             (/dd/sourcecode/as):03874                  subb  #1
154E 2330             (/dd/sourcecode/as):03875                  bls   L14E3          no, return
1550 6C62             (/dd/sourcecode/as):03876                  inc   2,s            flag only 1 space
                      (/dd/sourcecode/as):03877         * Print menu title text
1552 3404             (/dd/sourcecode/as):03878         L14A4    pshs  b              save length of text
1554 10BE10BB         (/dd/sourcecode/as):03879                  ldy   >WGlobal+g00BB Get ptr to work window table
1558 17FE06           (/dd/sourcecode/as):03880                  lbsr  L1283          print a space
155B 17FE2C           (/dd/sourcecode/as):03881                  lbsr  L12AE          print menu text
155E 6D63             (/dd/sourcecode/as):03882                  tst   3,s            was there anything to print?
1560 2603             (/dd/sourcecode/as):03883                  bne   L14B6          yes, skip ahead
1562 17FDFC           (/dd/sourcecode/as):03884                  lbsr  L1283          print a space
1565 8D23             (/dd/sourcecode/as):03885         L14B6    bsr   L14EE          add menu to handling table
1567 3502             (/dd/sourcecode/as):03886                  puls  a              get length of menu text
1569 8B02             (/dd/sourcecode/as):03887                  adda  #2             add 2 for space on each side
156B E6E4             (/dd/sourcecode/as):03888                  ldb   ,s             get size
                      (/dd/sourcecode/as):03889                IFNE  H6309
                      (/dd/sourcecode/as):03890                  subr  a,b            subtract width from size left
                      (/dd/sourcecode/as):03891                ELSE
156D 3402             (/dd/sourcecode/as):03892                  pshs  a
156F E0E0             (/dd/sourcecode/as):03893                  subb  ,s+
                      (/dd/sourcecode/as):03894                ENDC
1571 E7E4             (/dd/sourcecode/as):03895                  stb   ,s             save size left
                      (/dd/sourcecode/as):03896         * Move to next menu descriptor
1573 AE66             (/dd/sourcecode/as):03897         L14C6    ldx   6,s            get menu descriptor pointer
1575 308817           (/dd/sourcecode/as):03898                  leax  MN.SIZ,x       point to next menu descriptor
1578 6C65             (/dd/sourcecode/as):03899                  inc   5,s            add 1 to menu total
157A 6A64             (/dd/sourcecode/as):03900                  dec   4,s            done all descriptors?
157C 1026FF77         (/dd/sourcecode/as):03901                  lbne  L144A          no, go print next one
1580 10BE10BB         (/dd/sourcecode/as):03902         L14E3    ldy   >WGlobal+g00BB Get ptr to work window table
1584 17FE79           (/dd/sourcecode/as):03903                  lbsr  L1331          turn inverse off
1587 3268             (/dd/sourcecode/as):03904                  leas  8,s            purge stack & return
1589 39               (/dd/sourcecode/as):03905                  rts
                      (/dd/sourcecode/as):03906         
                      (/dd/sourcecode/as):03907         * Add menu entry to internal handling table.
                      (/dd/sourcecode/as):03908         * Entry: Stack buffer pre loaded
                      (/dd/sourcecode/as):03909         * This table is 4 bytes long for each entry and consists of:
                      (/dd/sourcecode/as):03910         *        $00 - Menu # (starts at 1)
                      (/dd/sourcecode/as):03911         *        $01 - X start co-ordinate
                      (/dd/sourcecode/as):03912         *        $02 - X End co-ordinate
                      (/dd/sourcecode/as):03913         *        $03 - Reserved as far as I can tell (possibly use for menu type
                      (/dd/sourcecode/as):03914         *              flag: 0=normal, 1="sticky", etc.)
158A 3416             (/dd/sourcecode/as):03915         L14EE    pshs  d,x
158C BE1075           (/dd/sourcecode/as):03916                  ldx   >WGlobal+G.GfxTbl   get pointer to special windowing table
158F 3089028E         (/dd/sourcecode/as):03917                  leax  >$028E,x       point to menu handling table
1593 E66C             (/dd/sourcecode/as):03918                  ldb   12,s           get menu number
1595 4F               (/dd/sourcecode/as):03919                  clra                 multiply it by 4 (size of handling table entries)
                      (/dd/sourcecode/as):03920                IFNE  H6309
                      (/dd/sourcecode/as):03921                  lsld  
                      (/dd/sourcecode/as):03922                  lsld  
                      (/dd/sourcecode/as):03923                  addr  d,x            add to handling table start
                      (/dd/sourcecode/as):03924                ELSE
1596 58               (/dd/sourcecode/as):03925                  lslb
1597 49               (/dd/sourcecode/as):03926                  rola
1598 58               (/dd/sourcecode/as):03927                  lslb
1599 49               (/dd/sourcecode/as):03928                  rola
159A 308B             (/dd/sourcecode/as):03929                  leax  d,x            add to handling table start
                      (/dd/sourcecode/as):03930                ENDC
159C E66C             (/dd/sourcecode/as):03931                  ldb   12,s           get menu number
159E 5C               (/dd/sourcecode/as):03932                  incb                 Bump up by 1
159F E784             (/dd/sourcecode/as):03933                  stb   MnuXNum,x      save menu number
15A1 E668             (/dd/sourcecode/as):03934                  ldb   8,s            get X start coord
15A3 E701             (/dd/sourcecode/as):03935                  stb   MnuXStrt,x     save it
15A5 EB6A             (/dd/sourcecode/as):03936                  addb  10,s           add length
15A7 5C               (/dd/sourcecode/as):03937                  incb                 add 1 for space
15A8 E702             (/dd/sourcecode/as):03938                  stb   MnuXEnd,x      save end X coord
15AA 5C               (/dd/sourcecode/as):03939                  incb  
15AB E768             (/dd/sourcecode/as):03940                  stb   8,s
15AD 6F04             (/dd/sourcecode/as):03941                  clr   MnuHSiz,x      make sure next entry is clear
15AF 3596             (/dd/sourcecode/as):03942                  puls  d,x,pc
                      (/dd/sourcecode/as):03943         
                      (/dd/sourcecode/as):03944         * SS.MnSel entry point
                      (/dd/sourcecode/as):03945         * Buffer breakdown:
                      (/dd/sourcecode/as):03946         * $00-$01,s : Static mem ptr
                      (/dd/sourcecode/as):03947         * $02-$17,s : ???
                      (/dd/sourcecode/as):03948         * $18-$19,s : Window table ptr
                      (/dd/sourcecode/as):03949         * $1A-$21,s : ???
                      (/dd/sourcecode/as):03950         * $22,s     : ??? (Flag of some sort)
                      (/dd/sourcecode/as):03951         * $23,s     : ???
15B1 32E8DD           (/dd/sourcecode/as):03952         L1515    leas  <-$23,s        make a buffer
15B4 EFE4             (/dd/sourcecode/as):03953                  stu   ,s             save static mem pointer
15B6 10AFE818         (/dd/sourcecode/as):03954                  sty   $18,s          save window table pointer
15BA 6FE822           (/dd/sourcecode/as):03955                  clr   $22,s          clear a flag
15BD 7D100A           (/dd/sourcecode/as):03956                  tst   >WGlobal+G.CrDvFl  Are we the current active device?
15C0 2758             (/dd/sourcecode/as):03957                  beq   L160A          No, return with nothing
15C2 8E103C           (/dd/sourcecode/as):03958                  ldx   #WGlobal+G.Mouse Get ptr to mouse packet
15C5 7F100E           (/dd/sourcecode/as):03959                  clr   >WGlobal+G.WIBusy  flag cowin free
15C8 6D08             (/dd/sourcecode/as):03960         L1530    tst   Pt.CBSA,x      button A still down?
15CA 26FC             (/dd/sourcecode/as):03961                  bne   L1530          yes, wait for release
15CC 7C100E           (/dd/sourcecode/as):03962                  inc   >WGlobal+G.WIBusy   flag cowin busy
15CF 17F146           (/dd/sourcecode/as):03963                  lbsr  L06A0          verify window
15D2 170899           (/dd/sourcecode/as):03964                  lbsr  L1D24          copy current mouse coords to work cords.
15D5 308820           (/dd/sourcecode/as):03965                  leax  Pt.Siz,x       point to my work coords (hidden outside packet)
15D8 170771           (/dd/sourcecode/as):03966                  lbsr  L1C19          mouse on full window?
15DB 253D             (/dd/sourcecode/as):03967                  bcs   L160A          no, return with nothing
15DD 1700CA           (/dd/sourcecode/as):03968                  lbsr  L161B          calculate window start & end coords in pixels
15E0 EC67             (/dd/sourcecode/as):03969                  ldd   7,s            get current mouse Y coord?
15E2 10830007         (/dd/sourcecode/as):03970                  cmpd  #7             is it in the menu bar?
15E6 2236             (/dd/sourcecode/as):03971                  bhi   L158B          no, skip ahead
15E8 E6E813           (/dd/sourcecode/as):03972                  ldb   <$13,s         get current mouse text X coord
15EB C101             (/dd/sourcecode/as):03973                  cmpb  #$01           past close box?
15ED 2E04             (/dd/sourcecode/as):03974                  bgt   L155E          yes, skip ahead
15EF 8602             (/dd/sourcecode/as):03975                  lda   #MId.Cls       No, menu id=Close box
15F1 204E             (/dd/sourcecode/as):03976                  bra   L160C          return menu info
                      (/dd/sourcecode/as):03977         
                      (/dd/sourcecode/as):03978         * It wasn't close box scan menu handling table
15F3 BE1075           (/dd/sourcecode/as):03979         L155E    ldx   >WGlobal+G.GfxTbl  get graphics table pointer
15F6 3089028E         (/dd/sourcecode/as):03980                  leax  >$028E,x       point to menu handling table
15FA A684             (/dd/sourcecode/as):03981         L1565    lda   MnuXNum,x      last entry?
15FC 271C             (/dd/sourcecode/as):03982                  beq   L160A          yes, return nothing
15FE E102             (/dd/sourcecode/as):03983                  cmpb  MnuXEnd,x      within max X range?
1600 2214             (/dd/sourcecode/as):03984                  bhi   L1587          no, point to next entry
1602 17017F           (/dd/sourcecode/as):03985                  lbsr  L16E6          process menu pulldown
1605 3442             (/dd/sourcecode/as):03986                  pshs  a,u            save menu ID & global mem
1607 EE63             (/dd/sourcecode/as):03987                  ldu   3,s            get static mem pointer
1609 A6E824           (/dd/sourcecode/as):03988                  lda   <$24,s         get mouse signal process #
160C A7C826           (/dd/sourcecode/as):03989                  sta   V.MSigID,u     save it in static mem
160F 7F10C6           (/dd/sourcecode/as):03990                  clr   >WGlobal+G.MsSig  Clear mouse signal flag
1612 3542             (/dd/sourcecode/as):03991                  puls  a,u
1614 202B             (/dd/sourcecode/as):03992                  bra   L160C          Return menu id # & entry # to caller
                      (/dd/sourcecode/as):03993         
1616 3004             (/dd/sourcecode/as):03994         L1587    leax  MnuHSiz,x      move to next entry in handling table
1618 20E0             (/dd/sourcecode/as):03995                  bra   L1565          keep looking
                      (/dd/sourcecode/as):03996         
                      (/dd/sourcecode/as):03997         * Return no menu information received
     161A             (/dd/sourcecode/as):03998         L160A    equ   *
                      (/dd/sourcecode/as):03999                IFNE  H6309
                      (/dd/sourcecode/as):04000                  clrd                 Menu # & ID # =0
                      (/dd/sourcecode/as):04001                ELSE
161A 4F               (/dd/sourcecode/as):04002                  clra                 Menu # & ID # =0
161B 5F               (/dd/sourcecode/as):04003                  clrb
                      (/dd/sourcecode/as):04004                ENDC
161C 2023             (/dd/sourcecode/as):04005                  bra   L160C
                      (/dd/sourcecode/as):04006         
                      (/dd/sourcecode/as):04007         * Mouse wasn't on menu bar check scroll bars
                      (/dd/sourcecode/as):04008         * NOTE: SHOULD ADD SO THAT IF MOUSE CLICKED BETWEEN SCROLL BARS, IT WILL
                      (/dd/sourcecode/as):04009         *       RETURN THE POSITION (IN TEXT CHARS) ACROSS OR UP/DOWN WITHIN SCROLL
                      (/dd/sourcecode/as):04010         *       BAR AREA
161E 3470             (/dd/sourcecode/as):04011         L158B    pshs  u,y,x
1620 EE66             (/dd/sourcecode/as):04012                  ldu   6,s            get static mem pointer
1622 17F130           (/dd/sourcecode/as):04013                  lbsr  L06B9          get graphics table entry pointer
1625 A684             (/dd/sourcecode/as):04014                  lda   ,x             get window type
1627 8102             (/dd/sourcecode/as):04015                  cmpa  #WT.FSWin      do we have scroll bars?
1629 3570             (/dd/sourcecode/as):04016                  puls  u,y,x
162B 26ED             (/dd/sourcecode/as):04017                  bne   L160A          no, no need to check more return nothing
                      (/dd/sourcecode/as):04018         * Check for left scroll bar arrow
162D EC65             (/dd/sourcecode/as):04019                  ldd   5,s            get mouse X coord
162F 10830007         (/dd/sourcecode/as):04020                  cmpd  #7             X in range for left scroll bar arrow?
1633 2219             (/dd/sourcecode/as):04021                  bhi   L15B0          no, check up arrow
1635 EC6F             (/dd/sourcecode/as):04022                  ldd   $0F,s
1637 830007           (/dd/sourcecode/as):04023                  subd  #7
163A 10A367           (/dd/sourcecode/as):04024                  cmpd  7,s
163D 220F             (/dd/sourcecode/as):04025                  bhi   L15B0
163F 8607             (/dd/sourcecode/as):04026                  lda   #MId.SLt       get menu ID for left scroll bar arrow
                      (/dd/sourcecode/as):04027         * Return menu ID & item to caller
                      (/dd/sourcecode/as):04028         * Entry: A=Menu ID
                      (/dd/sourcecode/as):04029         *        B=Menu item #
                      (/dd/sourcecode/as):04030         *        Y=Path descriptor pointer
1641 10AEE818         (/dd/sourcecode/as):04031         L160C    ldy   <$18,s         get path descriptor pointer
1645 AE26             (/dd/sourcecode/as):04032                  ldx   PD.RGS,y       get register stack pointer
1647 ED01             (/dd/sourcecode/as):04033                  std   R$D,x          save menu & item #
1649 32E823           (/dd/sourcecode/as):04034                  leas  <$23,s         Eat stack buffer
164C 5F               (/dd/sourcecode/as):04035                  clrb                 No error & return
164D 39               (/dd/sourcecode/as):04036                  rts   
                      (/dd/sourcecode/as):04037         
                      (/dd/sourcecode/as):04038         * Check for up scroll bar arrow
164E EC67             (/dd/sourcecode/as):04039         L15B0    ldd   7,s            get mouse Y coord
1650 1083000F         (/dd/sourcecode/as):04040                  cmpd  #15            in range of up arrow?
1654 220E             (/dd/sourcecode/as):04041                  bhi   L15C6          no, check right arrow
1656 EC6D             (/dd/sourcecode/as):04042                  ldd   $D,s           get window X end coord pixel
1658 830007           (/dd/sourcecode/as):04043                  subd  #7             subtract 7
165B 10A365           (/dd/sourcecode/as):04044                  cmpd  5,s            mouse X coord in range?
165E 2204             (/dd/sourcecode/as):04045                  bhi   L15C6          no, check right arrow
1660 8604             (/dd/sourcecode/as):04046                  lda   #MId.SUp       get menu ID for scroll up arrow
1662 20DD             (/dd/sourcecode/as):04047                  bra   L160C          return with menu ID
                      (/dd/sourcecode/as):04048         
                      (/dd/sourcecode/as):04049         * Check for right scroll bar arrow
1664 EC6F             (/dd/sourcecode/as):04050         L15C6    ldd   $0F,s          get window Y end co-ordinate pixel
1666 830007           (/dd/sourcecode/as):04051                  subd  #7             subtract 7
1669 10A367           (/dd/sourcecode/as):04052                  cmpd  7,s            mouse in range for Y
166C 2218             (/dd/sourcecode/as):04053                  bhi   L15E8          no, check down arrow
166E EC6D             (/dd/sourcecode/as):04054                  ldd   $0D,s          get window X end co-ordinate pixel
1670 830008           (/dd/sourcecode/as):04055                  subd  #8             subtract 8
1673 10A365           (/dd/sourcecode/as):04056                  cmpd  5,s            mouse below maximum range?
1676 250E             (/dd/sourcecode/as):04057                  blo   L15E8          no, check down arrow
1678 EC6D             (/dd/sourcecode/as):04058                  ldd   $0D,s
167A 83000F           (/dd/sourcecode/as):04059                  subd  #$000F
167D 10A365           (/dd/sourcecode/as):04060                  cmpd  5,s
1680 2204             (/dd/sourcecode/as):04061                  bhi   L15E8
1682 8606             (/dd/sourcecode/as):04062                  lda   #MId.SRt       get menu ID for right scroll arrow
1684 20BB             (/dd/sourcecode/as):04063                  bra   L160C
                      (/dd/sourcecode/as):04064         
                      (/dd/sourcecode/as):04065         * Check for down scroll bar arrow
1686 EC6D             (/dd/sourcecode/as):04066         L15E8    ldd   $0D,s
1688 830007           (/dd/sourcecode/as):04067                  subd  #$0007
168B 10A365           (/dd/sourcecode/as):04068                  cmpd  5,s
168E 228A             (/dd/sourcecode/as):04069                  bhi   L160A          no, not on scroll bars, so return nothing
1690 EC6F             (/dd/sourcecode/as):04070                  ldd   $0F,s
1692 830008           (/dd/sourcecode/as):04071                  subd  #$0008
1695 10A367           (/dd/sourcecode/as):04072                  cmpd  7,s
1698 2580             (/dd/sourcecode/as):04073                  blo   L160A
169A EC6F             (/dd/sourcecode/as):04074                  ldd   $0F,s
169C 83000F           (/dd/sourcecode/as):04075                  subd  #$000F
169F 10A367           (/dd/sourcecode/as):04076                  cmpd  7,s
16A2 1022FF74         (/dd/sourcecode/as):04077                  lbhi  L160A
16A6 8605             (/dd/sourcecode/as):04078                  lda   #MId.SDn       get menu ID for down scroll arrow
16A8 2097             (/dd/sourcecode/as):04079                  bra   L160C          save it to caller & return
                      (/dd/sourcecode/as):04080         
                      (/dd/sourcecode/as):04081         * Calculate window start & end coords in pixels
     16AA             (/dd/sourcecode/as):04082         L161B    equ   *
                      (/dd/sourcecode/as):04083                IFNE  H6309
                      (/dd/sourcecode/as):04084                  clrd
                      (/dd/sourcecode/as):04085                ELSE
16AA 4F               (/dd/sourcecode/as):04086                  clra
16AB 5F               (/dd/sourcecode/as):04087                  clrb
                      (/dd/sourcecode/as):04088                ENDC
16AC ED6D             (/dd/sourcecode/as):04089                  std   $0D,s
16AE 3406             (/dd/sourcecode/as):04090                  pshs  d
16B0 8D4C             (/dd/sourcecode/as):04091                  bsr   L1667          calculate coords
16B2 3506             (/dd/sourcecode/as):04092                  puls  d
16B4 E6A826           (/dd/sourcecode/as):04093                  ldb   Wt.DfCPX,y     get full window X start coord
16B7 EB6D             (/dd/sourcecode/as):04094                  addb  $0D,s          add it to
16B9 17FC50           (/dd/sourcecode/as):04095                  lbsr  L1015          calculate size in pixels
                      (/dd/sourcecode/as):04096                IFNE  H6309
                      (/dd/sourcecode/as):04097                  tfr   d,w            copy it to W
                      (/dd/sourcecode/as):04098                  ldd   ,x             get mouse X co-ordinate
                      (/dd/sourcecode/as):04099                  subr  w,d            calculate relative co-ordinate in window
                      (/dd/sourcecode/as):04100                ELSE
16BC FD11B5           (/dd/sourcecode/as):04101                  std   >GrfMem+gr00B5
16BF EC84             (/dd/sourcecode/as):04102                  ldd   ,x             get mouse X co-ordinate
16C1 B311B5           (/dd/sourcecode/as):04103                  subd  >GrfMem+gr00B5 calculate relative co-ordinate in window
                      (/dd/sourcecode/as):04104                ENDC
16C4 ED67             (/dd/sourcecode/as):04105                  std   7,s            save it on stack
16C6 8D59             (/dd/sourcecode/as):04106                  bsr   L1027          divide it by 8
16C8 E7E815           (/dd/sourcecode/as):04107                  stb   <$15,s         save it as mouse text X co-ordinate
16CB E6A827           (/dd/sourcecode/as):04108                  ldb   Wt.DfCPY,y     get window default Y start co-ordinate
16CE EB6E             (/dd/sourcecode/as):04109                  addb  $0E,s          add in size
16D0 17FC39           (/dd/sourcecode/as):04110                  lbsr  L1015          calculate window height in pixels
                      (/dd/sourcecode/as):04111                IFNE  H6309
                      (/dd/sourcecode/as):04112                  ldw   $02,x          get mouse Y co-ordinate
                      (/dd/sourcecode/as):04113                  subr  d,w            calculate relative co-ordinate within window
                      (/dd/sourcecode/as):04114                  stw   9,s            save it
                      (/dd/sourcecode/as):04115                ELSE
16D3 340E             (/dd/sourcecode/as):04116                  pshs  d,dp
16D5 A762             (/dd/sourcecode/as):04117                  sta   2,s
16D7 EC02             (/dd/sourcecode/as):04118                  ldd   2,x            get mouse Y co-ordinate
16D9 A3E1             (/dd/sourcecode/as):04119                  subd  ,s++           calculate relative co-ordinate within window
16DB ED6A             (/dd/sourcecode/as):04120                  std   10,s
16DD FD11B5           (/dd/sourcecode/as):04121                  std   >GrfMem+gr00B5
16E0 3502             (/dd/sourcecode/as):04122                  puls  a
                      (/dd/sourcecode/as):04123                ENDC
16E2 E6A826           (/dd/sourcecode/as):04124                  ldb   Wt.DfCPX,y     get window default X start co-ordinate
16E5 EB6D             (/dd/sourcecode/as):04125                  addb  $0D,s
16E7 EBA828           (/dd/sourcecode/as):04126                  addb  Wt.DfSZX,y
16EA 17FC1F           (/dd/sourcecode/as):04127                  lbsr  L1015          calculate size in pixels
16ED ED6F             (/dd/sourcecode/as):04128                  std   $0F,s
16EF E6A827           (/dd/sourcecode/as):04129                  ldb   Wt.DfCPY,y
16F2 EB6E             (/dd/sourcecode/as):04130                  addb  $0E,s
16F4 EBA829           (/dd/sourcecode/as):04131                  addb  Wt.DfSZY,y
16F7 17FC12           (/dd/sourcecode/as):04132                  lbsr  L1015          calculate size in pixels
16FA EDE811           (/dd/sourcecode/as):04133                  std   <$11,s
16FD 39               (/dd/sourcecode/as):04134                  rts   
                      (/dd/sourcecode/as):04135         
                      (/dd/sourcecode/as):04136         * Seems to hunt down root device window given overlay window?
                      (/dd/sourcecode/as):04137         * Entry: X=some sort of window tbl ptr
                      (/dd/sourcecode/as):04138         *        Y=Some sort of window tbl ptr
16FE 3430             (/dd/sourcecode/as):04139         L1667    pshs  y,x
1700 A632             (/dd/sourcecode/as):04140                  lda   Wt.BLnk,y      this a overlay window?
1702 2B1B             (/dd/sourcecode/as):04141         L166B    bmi   L1688          no, return
1704 1706F9           (/dd/sourcecode/as):04142                  lbsr  L1CBC          point X to the window table entry
1707 EC8826           (/dd/sourcecode/as):04143                  ldd   Wt.DfCPX,x     get window default start co-ordinates
170A E3E815           (/dd/sourcecode/as):04144                  addd  <$15,s
170D 10AE8824         (/dd/sourcecode/as):04145                  ldy   Wt.LStDf,x     get window logical start address
1711 10AC13           (/dd/sourcecode/as):04146                  cmpy  Wt.LStrt,x     match current?
1714 2702             (/dd/sourcecode/as):04147                  beq   L1681          yes, skip ahead
1716 E315             (/dd/sourcecode/as):04148                  addd  Wt.CPX,x       No, add current start co-ordinates
1718 EDE815           (/dd/sourcecode/as):04149         L1681    std   <$15,s
171B A612             (/dd/sourcecode/as):04150                  lda   Wt.BLnk,x      get back window link
171D 20E3             (/dd/sourcecode/as):04151                  bra   L166B          go calculate 
                      (/dd/sourcecode/as):04152         
171F 35B0             (/dd/sourcecode/as):04153         L1688    puls  pc,y,x
                      (/dd/sourcecode/as):04154         
                      (/dd/sourcecode/as):04155         * Signed Divide by 8
                      (/dd/sourcecode/as):04156         * ONLY CALLED TWICE...SHOULD EMBED
     1721             (/dd/sourcecode/as):04157         L1027    equ   *
                      (/dd/sourcecode/as):04158                IFNE  H6309
                      (/dd/sourcecode/as):04159                  asrd  
                      (/dd/sourcecode/as):04160                  asrd  
                      (/dd/sourcecode/as):04161                  asrd  
                      (/dd/sourcecode/as):04162                ELSE
1721 47               (/dd/sourcecode/as):04163                  asra
1722 56               (/dd/sourcecode/as):04164                  rorb
1723 47               (/dd/sourcecode/as):04165                  asra
1724 56               (/dd/sourcecode/as):04166                  rorb
1725 47               (/dd/sourcecode/as):04167                  asra
1726 56               (/dd/sourcecode/as):04168                  rorb
                      (/dd/sourcecode/as):04169                ENDC
1727 39               (/dd/sourcecode/as):04170                  rts   
                      (/dd/sourcecode/as):04171         
                      (/dd/sourcecode/as):04172         * Calculate the current mouse Y text coord within a overlay window
                      (/dd/sourcecode/as):04173         * used for menu pull down updates
1728 3450             (/dd/sourcecode/as):04174         L168A    pshs  x,u            preserve pointer to mouse coords & global mem
172A A632             (/dd/sourcecode/as):04175                  lda   Wt.BLnk,y      get parent window # of this overlay
172C 1706D1           (/dd/sourcecode/as):04176                  lbsr  L1CBC          point X to window table entry
172F A612             (/dd/sourcecode/as):04177                  lda   Wt.BLnk,x      parent window a overlay?
1731 2A08             (/dd/sourcecode/as):04178                  bpl   L169D          yes, skip ahead
1733 E6A827           (/dd/sourcecode/as):04179                  ldb   Wt.DfCPY,y     get current overlay window Y default start
1736 EB8827           (/dd/sourcecode/as):04180                  addb  Wt.DfCPY,x     add it to parent window default Y start
1739 2007             (/dd/sourcecode/as):04181                  bra   L16A6          skip ahead
                      (/dd/sourcecode/as):04182         
173B E6A827           (/dd/sourcecode/as):04183         L169D    ldb   Wt.DfCPY,y     get default Y co-ordinate of current window
173E 8D1A             (/dd/sourcecode/as):04184                  bsr   L16BC
1740 1F89             (/dd/sourcecode/as):04185                  tfr   a,b
1742 AEE4             (/dd/sourcecode/as):04186         L16A6    ldx   ,s             get mouse coordinate pointer
1744 17FBC5           (/dd/sourcecode/as):04187                  lbsr  L1015          calculate it in pixels
                      (/dd/sourcecode/as):04188                IFNE  H6309
                      (/dd/sourcecode/as):04189                  incd                 Add 1
                      (/dd/sourcecode/as):04190                  tfr   d,w            copy it to W
                      (/dd/sourcecode/as):04191                  ldd   2,x            get mouse Y co-ordinate
                      (/dd/sourcecode/as):04192                  subr  w,d            calculate the relative co-ordinate in window
                      (/dd/sourcecode/as):04193                ELSE
1747 C30001           (/dd/sourcecode/as):04194                  addd  #$0001         Add 1
174A FD11B5           (/dd/sourcecode/as):04195                  std   >GrfMem+gr00B5
174D 3406             (/dd/sourcecode/as):04196                  pshs  d
174F EC02             (/dd/sourcecode/as):04197                  ldd   2,x            get mouse Y co-ordinate
1751 A3E1             (/dd/sourcecode/as):04198                  subd  ,s++           calculate the relative co-ordinate in window
                      (/dd/sourcecode/as):04199                ENDC
1753 8DCC             (/dd/sourcecode/as):04200                  bsr   L1027          divide it by 8
1755 5A               (/dd/sourcecode/as):04201                  decb                 subtract 1
1756 1F98             (/dd/sourcecode/as):04202                  tfr   b,a            copy it to A
1758 35D0             (/dd/sourcecode/as):04203                  puls  x,u,pc         restore & return
                      (/dd/sourcecode/as):04204         
                      (/dd/sourcecode/as):04205         * Calculate the current mouse Y text co-ordinate
175A 3430             (/dd/sourcecode/as):04206         L16BC    pshs  x,y            preserve current & parent window table pointers
175C 5F               (/dd/sourcecode/as):04207                  clrb  
175D 3404             (/dd/sourcecode/as):04208                  pshs  b
175F 1F21             (/dd/sourcecode/as):04209                  tfr   y,x
1761 A612             (/dd/sourcecode/as):04210         L16C3    lda   Wt.BLnk,x      get window # of parent window
1763 2B0C             (/dd/sourcecode/as):04211                  bmi   L16D3          we're at the bottom, skip ahead
1765 170698           (/dd/sourcecode/as):04212                  lbsr  L1CBC          go calculate
1768 E68827           (/dd/sourcecode/as):04213                  ldb   Wt.DfCPY,x     get parent window default Y start
176B EBE4             (/dd/sourcecode/as):04214                  addb  ,s             add it to current
176D E7E4             (/dd/sourcecode/as):04215                  stb   ,s             save it
176F 20F0             (/dd/sourcecode/as):04216                  bra   L16C3          keep going
                      (/dd/sourcecode/as):04217         
1771 10AE8824         (/dd/sourcecode/as):04218         L16D3    ldy   Wt.LStDf,x     Get screen logical start address when it was initialized
1775 10AC13           (/dd/sourcecode/as):04219                  cmpy  Wt.LStrt,x     Same as current logical start address?
1778 2706             (/dd/sourcecode/as):04220                  beq   L16E2          Yes, skip ahead
177A E616             (/dd/sourcecode/as):04221                  ldb   Wt.CPY,x       No, get current Y coord start of window
177C EBE4             (/dd/sourcecode/as):04222                  addb  ,s             Add to Y value
177E E7E4             (/dd/sourcecode/as):04223                  stb   ,s
1780 6CE4             (/dd/sourcecode/as):04224         L16E2    inc   ,s             Bump up Y value
1782 35B2             (/dd/sourcecode/as):04225                  puls  a,x,y,pc
                      (/dd/sourcecode/as):04226         
                      (/dd/sourcecode/as):04227         * Process a selected menu item on menu bar
                      (/dd/sourcecode/as):04228         * Entry: A=Menu # from menu handling table
                      (/dd/sourcecode/as):04229         *        X=Pointer to menu handling entry
1784 AF6B             (/dd/sourcecode/as):04230         L16E6    stx   $0B,s          save current menu handling entry pointer
1786 10AEE81A         (/dd/sourcecode/as):04231                  ldy   <$1A,s         get path descriptor pointer
178A EE62             (/dd/sourcecode/as):04232                  ldu   $02,s          get static mem pointer
178C E6C826           (/dd/sourcecode/as):04233                  ldb   V.MSigID,u     get process ID of mouse signal reciever
178F E7E823           (/dd/sourcecode/as):04234                  stb   <$23,s         save it
1792 6FC826           (/dd/sourcecode/as):04235                  clr   V.MSigID,u     clear it in device mem
1795 170330           (/dd/sourcecode/as):04236                  lbsr  L1A3C          copy window table
1798 AFE81E           (/dd/sourcecode/as):04237                  stx   <$1E,s         save pointer to graphics table entry
179B 10AFE813         (/dd/sourcecode/as):04238                  sty   <$13,s         save pointer to window table
179F BE1075           (/dd/sourcecode/as):04239                  ldx   >WGlobal+G.GfxTbl  get graphics table pointer
17A2 30890240         (/dd/sourcecode/as):04240                  leax  >$0240,x       point to working window descriptor
17A6 AE8820           (/dd/sourcecode/as):04241                  ldx   WN.BAR,x       get pointer to array of menu descriptors
17A9 4A               (/dd/sourcecode/as):04242                  deca                 adjust current menu # to start at 0
17AA C617             (/dd/sourcecode/as):04243                  ldb   #MN.SIZ        get size of menu descriptor
17AC 3D               (/dd/sourcecode/as):04244                  mul                  calculate offset
                      (/dd/sourcecode/as):04245                IFNE  H6309
                      (/dd/sourcecode/as):04246                  addr  d,x            add it to menu array pointer
                      (/dd/sourcecode/as):04247                ELSE
17AD 308B             (/dd/sourcecode/as):04248                  leax  d,x            add it to menu array pointer
                      (/dd/sourcecode/as):04249                ENDC
17AF EE62             (/dd/sourcecode/as):04250                  ldu   2,s            get static mem pointer
17B1 17FCC1           (/dd/sourcecode/as):04251                  lbsr  L13B5          copy menu descriptor from user space
17B4 AF65             (/dd/sourcecode/as):04252                  stx   5,s            save menu entry pointer
17B6 A68812           (/dd/sourcecode/as):04253                  lda   MN.ENBL,x      menu enabled?
17B9 2605             (/dd/sourcecode/as):04254                  bne   L1728          yes, process pulldown
                      (/dd/sourcecode/as):04255                IFNE  H6309
                      (/dd/sourcecode/as):04256                  clrd                 clear menu ID & item #
                      (/dd/sourcecode/as):04257                ELSE
17BB 4F               (/dd/sourcecode/as):04258                  clra                 clear menu ID & item #
17BC 5F               (/dd/sourcecode/as):04259                  clrb
                      (/dd/sourcecode/as):04260                ENDC
17BD 160204           (/dd/sourcecode/as):04261                  lbra  L193A          restore window table & return
                      (/dd/sourcecode/as):04262         
                      (/dd/sourcecode/as):04263         * Print selected menu text
17C0 EE6B             (/dd/sourcecode/as):04264         L1728    ldu   $0B,s          get menu handling entry pointer
17C2 10AEE813         (/dd/sourcecode/as):04265                  ldy   <$13,s         get window table pointer
17C6 A641             (/dd/sourcecode/as):04266                  lda   MnuXStrt,u     get start X co-ordinate
17C8 5F               (/dd/sourcecode/as):04267                  clrb                 get start Y co-ordinate
17C9 3430             (/dd/sourcecode/as):04268                  pshs  y,x            preserve regs
17CB 17FBFD           (/dd/sourcecode/as):04269                  lbsr  L12D7          switch to text font
17CE 17FB9B           (/dd/sourcecode/as):04270                  lbsr  L128E          set text coords
                      (/dd/sourcecode/as):04271                IFNE  H6309
                      (/dd/sourcecode/as):04272                  oim   #Bold+TChr,Wt.BSW,y Turn Bold ON/Transparency OFF
                      (/dd/sourcecode/as):04273                ELSE
17D1 3402             (/dd/sourcecode/as):04274                  pshs  a
17D3 A629             (/dd/sourcecode/as):04275                  lda   Wt.BSW,y       Turn Bold ON/Transparency OFF
17D5 8AA0             (/dd/sourcecode/as):04276                  ora   #Bold+TChr
17D7 A729             (/dd/sourcecode/as):04277                  sta   Wt.BSW,y
17D9 3502             (/dd/sourcecode/as):04278                  puls  a
                      (/dd/sourcecode/as):04279                ENDC
17DB 3530             (/dd/sourcecode/as):04280                  puls  y,x            restore regs
17DD 17FB96           (/dd/sourcecode/as):04281                  lbsr  L1299          get length of text to a maximum of 15
17E0 170333           (/dd/sourcecode/as):04282                  lbsr  L1A88          calculate if we can print a space after menu text
17E3 17FB7B           (/dd/sourcecode/as):04283                  lbsr  L1283          print a space
17E6 A60F             (/dd/sourcecode/as):04284                  lda   MN.ID,x        get menu ID
17E8 8114             (/dd/sourcecode/as):04285                  cmpa  #MId.Tdy       is it tandy menu?
17EA 2605             (/dd/sourcecode/as):04286                  bne   L1757          no, skip ahead
17EC 17FB6E           (/dd/sourcecode/as):04287                  lbsr  L127F          Yes, print tandy icon
17EF 2003             (/dd/sourcecode/as):04288                  bra   L175A          skip ahead
                      (/dd/sourcecode/as):04289         
17F1 17FB96           (/dd/sourcecode/as):04290         L1757    lbsr  L12AE          print menu text
17F4 6DE819           (/dd/sourcecode/as):04291         L175A    tst   <$19,s         can we print a space here?
17F7 2603             (/dd/sourcecode/as):04292                  bne   L1762          no, skip ahead
17F9 17FB65           (/dd/sourcecode/as):04293                  lbsr  L1283          print a space
     17FC             (/dd/sourcecode/as):04294         L1762    equ   *
                      (/dd/sourcecode/as):04295                IFNE  H6309
                      (/dd/sourcecode/as):04296                  aim   #^Bold,Wt.BSW,y Turn BOLD OFF
                      (/dd/sourcecode/as):04297                ELSE
17FC A629             (/dd/sourcecode/as):04298                  lda   Wt.BSW,y       Turn BOLD OFF
17FE 84DF             (/dd/sourcecode/as):04299                  anda  #^Bold
1800 A729             (/dd/sourcecode/as):04300                  sta   Wt.BSW,y
                      (/dd/sourcecode/as):04301                ENDC
1802 AE65             (/dd/sourcecode/as):04302                  ldx   $05,s          get pointer to menu descriptor
1804 A68811           (/dd/sourcecode/as):04303                  lda   MN.NITS,x      any items to print?
1807 2606             (/dd/sourcecode/as):04304                  bne   L1772          yes, skip ahead
1809 A60F             (/dd/sourcecode/as):04305                  lda   MN.ID,x        get menu ID
180B 5F               (/dd/sourcecode/as):04306                  clrb                 clear item
180C 1601B5           (/dd/sourcecode/as):04307                  lbra  L193A          return with menu info
                      (/dd/sourcecode/as):04308         
                      (/dd/sourcecode/as):04309         * Calculate X start position and size of pull down
180F A68810           (/dd/sourcecode/as):04310         L1772    lda   MN.XSIZ,x      get horizontal size of pull down
1812 8B02             (/dd/sourcecode/as):04311                  adda  #$02           add 2 for the borders
1814 3402             (/dd/sourcecode/as):04312                  pshs  a              save window width
1816 EE6C             (/dd/sourcecode/as):04313                  ldu   $0C,s          get pointer to handling entry
1818 AB41             (/dd/sourcecode/as):04314                  adda  MnuXStrt,u     add in the start coord to get end coord
181A A137             (/dd/sourcecode/as):04315                  cmpa  Wt.SZX,y       will it fit in current window?
181C 2404             (/dd/sourcecode/as):04316                  bhs   L1785          no, skip ahead
181E A641             (/dd/sourcecode/as):04317                  lda   MnuXStrt,u     Yes, get start coord
1820 2004             (/dd/sourcecode/as):04318                  bra   L1789
                      (/dd/sourcecode/as):04319         
1822 A637             (/dd/sourcecode/as):04320         L1785    lda   Wt.SZX,y       get current window size
1824 A0E4             (/dd/sourcecode/as):04321                  suba  ,s             subtract calculated width
1826 3504             (/dd/sourcecode/as):04322         L1789    puls  b              restore width of pull down
1828 EE62             (/dd/sourcecode/as):04323                  ldu   2,s            get static mem pointer
182A 17F010           (/dd/sourcecode/as):04324                  lbsr  L07B0          find a new window table & link it to current
182D 10AFE81C         (/dd/sourcecode/as):04325                  sty   <$1C,s         save the pointer to new window table
1831 3420             (/dd/sourcecode/as):04326                  pshs  y              preserve new window table pointer
1833 10AEE815         (/dd/sourcecode/as):04327                  ldy   <$15,s         get old window table pointer
1837 6D32             (/dd/sourcecode/as):04328                  tst   Wt.BLnk,y      Is it an overlay window?
1839 2B03             (/dd/sourcecode/as):04329                  bmi   L17A5          No, skip ahead
183B ABA826           (/dd/sourcecode/as):04330         L17A2    adda  Wt.DfCPX,y     Yes, add to Default X coord start
183E 3520             (/dd/sourcecode/as):04331         L17A5    puls  y              Get new window table ptr back
1840 A735             (/dd/sourcecode/as):04332                  sta   Wt.CPX,y       Save new current X coord start
1842 E737             (/dd/sourcecode/as):04333                  stb   Wt.SZX,y       Save new current X size
1844 3420             (/dd/sourcecode/as):04334                  pshs  y              Save new window table ptr again
1846 10AEE815         (/dd/sourcecode/as):04335                  ldy   <$15,s         get working window table pointer?
184A 6D32             (/dd/sourcecode/as):04336                  tst   Wt.BLnk,y      this a overlay window?
184C 2A04             (/dd/sourcecode/as):04337                  bpl   L17B9          yes, skip ahead
184E 3520             (/dd/sourcecode/as):04338                  puls  y
1850 2008             (/dd/sourcecode/as):04339                  bra   L17C1
                      (/dd/sourcecode/as):04340         
1852 A6A827           (/dd/sourcecode/as):04341         L17B9    lda   Wt.DfCPY,y     get full window Y start
1855 4C               (/dd/sourcecode/as):04342                  inca                 add 1
1856 3520             (/dd/sourcecode/as):04343                  puls  y              restore
1858 2002             (/dd/sourcecode/as):04344                  bra   L17C3          skip ahead
                      (/dd/sourcecode/as):04345         
                      (/dd/sourcecode/as):04346         * Calculate Y start & size of pull down
185A 8601             (/dd/sourcecode/as):04347         L17C1    lda   #$01           get Y co-ordinate start
185C A736             (/dd/sourcecode/as):04348         L17C3    sta   Wt.CPY,y       save it as current window Y start
185E B71159           (/dd/sourcecode/as):04349                  sta   >GrfMem+gr0059 save it as save switch too
1861 A68811           (/dd/sourcecode/as):04350                  lda   MN.NITS,x      get # items in this menu
1864 8B02             (/dd/sourcecode/as):04351                  adda  #$02           add 2 to put a blank line on top & bottom
1866 3410             (/dd/sourcecode/as):04352                  pshs  x              save pointer to menu descriptor
1868 AEE815           (/dd/sourcecode/as):04353                  ldx   <$15,s         Get ptr to window table
186B A118             (/dd/sourcecode/as):04354                  cmpa  Wt.SZY,x       lower than current Y size of window?
186D 2D0E             (/dd/sourcecode/as):04355                  blt   L17E5          Yes, skip ahead
186F A618             (/dd/sourcecode/as):04356                  lda   Wt.SZY,x       No, get current Y size
1871 4A               (/dd/sourcecode/as):04357                  deca                 drop by 1
1872 A738             (/dd/sourcecode/as):04358                  sta   Wt.SZY,y       Save it back as new current Y size
1874 8002             (/dd/sourcecode/as):04359                  suba  #2             Subtract two more
1876 3510             (/dd/sourcecode/as):04360                  puls  x              restore menu descriptor pointer
1878 A78811           (/dd/sourcecode/as):04361                  sta   MN.NITS,x      save as # items in menu descriptor
187B 2004             (/dd/sourcecode/as):04362                  bra   L17E9
                      (/dd/sourcecode/as):04363         
187D 3510             (/dd/sourcecode/as):04364         L17E5    puls  x              restore menu descriptor pointer
187F A738             (/dd/sourcecode/as):04365                  sta   Wt.SZY,y       save overlay window size
                      (/dd/sourcecode/as):04366         * Place pull down on screen
1881 AEE81E           (/dd/sourcecode/as):04367         L17E9    ldx   <$1E,s         get graphics table pointer
1884 EC09             (/dd/sourcecode/as):04368                  ldd   Gt.FMsk,x      get the foreground/background masks
1886 ED26             (/dd/sourcecode/as):04369                  std   Wt.Fore,y      set foreground/background masks in window table
1888 3420             (/dd/sourcecode/as):04370                  pshs  y              Preserve window tbl ptr
188A C60A             (/dd/sourcecode/as):04371                  ldb   #$0A           get code for OWSet
188C 17EAFC           (/dd/sourcecode/as):04372                  lbsr  L0101          do a overlay window
188F 3520             (/dd/sourcecode/as):04373                  puls  y              Get window tbl ptr back
1891 2430             (/dd/sourcecode/as):04374                  bcc   L181D          no errors on OWSet, print menu items
1893 A632             (/dd/sourcecode/as):04375                  lda   Wt.BLnk,y      Error, get parent window #
1895 EE62             (/dd/sourcecode/as):04376                  ldu   2,s            Get static mem ptr
1897 A7C835           (/dd/sourcecode/as):04377                  sta   V.WinNum,u     Save parent window
189A CCFFFF           (/dd/sourcecode/as):04378                  ldd   #$FFFF         Mark window table as unused
189D ED30             (/dd/sourcecode/as):04379                  std   Wt.STbl,y
189F 1701E1           (/dd/sourcecode/as):04380                  lbsr  L19F1          Print menu descriptor text
                      (/dd/sourcecode/as):04381                IFNE  H6309
                      (/dd/sourcecode/as):04382                  clrd
                      (/dd/sourcecode/as):04383                ELSE
18A2 4F               (/dd/sourcecode/as):04384                  clra
18A3 5F               (/dd/sourcecode/as):04385                  clrb
                      (/dd/sourcecode/as):04386                ENDC
18A4 16011D           (/dd/sourcecode/as):04387                  lbra  L193A          Something involving copying a window table
                      (/dd/sourcecode/as):04388         
                      (/dd/sourcecode/as):04389         * Move a menu item descriptor from caller
                      (/dd/sourcecode/as):04390         * Exit: X=Ptr to destination
18A7 3464             (/dd/sourcecode/as):04391         L13C9    pshs  b,y,u          preserve regs
18A9 DE50             (/dd/sourcecode/as):04392                  ldu   <D.Proc        get source task #
18AB A646             (/dd/sourcecode/as):04393                  lda   P$Task,u
18AD DE4A             (/dd/sourcecode/as):04394                  ldu   <D.SysPrc      get system task #
18AF E646             (/dd/sourcecode/as):04395                  ldb   P$Task,u
18B1 FE1075           (/dd/sourcecode/as):04396                  ldu   >WGlobal+G.GfxTbl get destination pointer
18B4 33C90279         (/dd/sourcecode/as):04397                  leau  >$0279,u
18B8 108E0015         (/dd/sourcecode/as):04398                  ldy   #MI.SIZ        get size of item descriptor
18BC 103F38           (/dd/sourcecode/as):04399                  os9   F$Move         move it
18BF 1F31             (/dd/sourcecode/as):04400                  tfr   u,x            make X point to destination
18C1 35E4             (/dd/sourcecode/as):04401                  puls  b,y,u,pc
                      (/dd/sourcecode/as):04402         
                      (/dd/sourcecode/as):04403         * Setup for printing the item text in the pull down
18C3 EE62             (/dd/sourcecode/as):04404         L181D    ldu   $02,s          get static memory pointer
18C5 17FB53           (/dd/sourcecode/as):04405                  lbsr  L1358          setup graphics table entry
18C8 10AEE81A         (/dd/sourcecode/as):04406                  ldy   <$1A,s         get working window table pointer
18CC 17F67C           (/dd/sourcecode/as):04407                  lbsr  L0E68          do a shadowed window on this overlay
18CF 102500EC         (/dd/sourcecode/as):04408                  lbcs  L1935          error, return nothing
18D3 10AEE81C         (/dd/sourcecode/as):04409                  ldy   <$1C,s         get window table pointer
18D7 3420             (/dd/sourcecode/as):04410                  pshs  y
18D9 CC203E           (/dd/sourcecode/as):04411                  ldd   #$203E         turn cursor off
18DC 17EAAC           (/dd/sourcecode/as):04412                  lbsr  L0101
18DF 3520             (/dd/sourcecode/as):04413                  puls  y
18E1 AE65             (/dd/sourcecode/as):04414                  ldx   $05,s          get pointer to menu descriptor
18E3 E68811           (/dd/sourcecode/as):04415                  ldb   MN.NITS,x      get # items in menu
18E6 E7E818           (/dd/sourcecode/as):04416                  stb   <$18,s         save it as a counter
18E9 4F               (/dd/sourcecode/as):04417                  clra  
18EA A7E817           (/dd/sourcecode/as):04418                  sta   <$17,s
18ED AE8815           (/dd/sourcecode/as):04419                  ldx   MN.ITEMS,x     get pointer to item descriptor
18F0 17FAD8           (/dd/sourcecode/as):04420                  lbsr  L12D7          switch to text font
                      (/dd/sourcecode/as):04421         * Print all items in the pull down
18F3 AFE820           (/dd/sourcecode/as):04422         L1852    stx   <$20,s         save pointer to item descriptor
18F6 8DAF             (/dd/sourcecode/as):04423                  bsr   L13C9          get item descriptor from caller
18F8 6D0F             (/dd/sourcecode/as):04424                  tst   MI.ENBL,x      item enabled?
18FA 2608             (/dd/sourcecode/as):04425                  bne   L1861          yes, turn bold on
                      (/dd/sourcecode/as):04426                IFNE  H6309
                      (/dd/sourcecode/as):04427                  aim   #^Bold,Wt.BSW,y Turn BOLD OFF
                      (/dd/sourcecode/as):04428                ELSE
18FC A629             (/dd/sourcecode/as):04429                  lda   Wt.BSW,y       Turn BOLD OFF
18FE 84DF             (/dd/sourcecode/as):04430                  anda  #^Bold
1900 A729             (/dd/sourcecode/as):04431                  sta   Wt.BSW,y
                      (/dd/sourcecode/as):04432                ENDC
1902 2006             (/dd/sourcecode/as):04433                  bra   L1864          skip to printing
                      (/dd/sourcecode/as):04434         
     1904             (/dd/sourcecode/as):04435         L1861    equ   *
                      (/dd/sourcecode/as):04436                IFNE  H6309
                      (/dd/sourcecode/as):04437                  oim   #Bold,Wt.BSW,y Turn BOLD ON
                      (/dd/sourcecode/as):04438                ELSE
1904 A629             (/dd/sourcecode/as):04439                  lda   Wt.BSW,y       Turn BOLD ON
1906 8A20             (/dd/sourcecode/as):04440                  ora   #Bold
1908 A729             (/dd/sourcecode/as):04441                  sta   Wt.BSW,y
                      (/dd/sourcecode/as):04442                ENDC
190A 4F               (/dd/sourcecode/as):04443         L1864    clra                 set X co-ordinate
190B E6E817           (/dd/sourcecode/as):04444                  ldb   <$17,s         get Y co-ordinate
190E 3410             (/dd/sourcecode/as):04445                  pshs  x              preserve item pointer
1910 17FA59           (/dd/sourcecode/as):04446                  lbsr  L128E          set text co-ordinate
1913 3510             (/dd/sourcecode/as):04447                  puls  x              restore item pointer
1915 17FA5E           (/dd/sourcecode/as):04448                  lbsr  L1299          get length of text to a maximum of 15
1918 17FA6F           (/dd/sourcecode/as):04449                  lbsr  L12AE          print item text
191B AEE820           (/dd/sourcecode/as):04450                  ldx   <$20,s         get pointer to item descriptor
191E 308815           (/dd/sourcecode/as):04451                  leax  MI.SIZ,x       move to next item
1921 6CE817           (/dd/sourcecode/as):04452                  inc   <$17,s         add another item
1924 6AE818           (/dd/sourcecode/as):04453                  dec   <$18,s         done all items?
1927 26CA             (/dd/sourcecode/as):04454                  bne   L1852          no, keep going
                      (/dd/sourcecode/as):04455         * Setup some variables
1929 86FF             (/dd/sourcecode/as):04456                  lda   #$FF           set current selected item state
192B A764             (/dd/sourcecode/as):04457                  sta   $04,s
192D B710BF           (/dd/sourcecode/as):04458                  sta   >WGlobal+g00BF
1930 B61060           (/dd/sourcecode/as):04459                  lda   >WGlobal+G.MSmpRV   get current mouse scan rate
1933 A7E822           (/dd/sourcecode/as):04460                  sta   <$22,s         preserve it
1936 8602             (/dd/sourcecode/as):04461                  lda   #$02           set new mouse scan rate in global mem
1938 B71060           (/dd/sourcecode/as):04462                  sta   >WGlobal+G.MSmpRV
193B B7103B           (/dd/sourcecode/as):04463                  sta   >WGlobal+G.MSmpRt
                      (/dd/sourcecode/as):04464         * Main pointer processing loop for a pulldown
                      (/dd/sourcecode/as):04465         * waits for either a keypress or a mouse button click while updating
                      (/dd/sourcecode/as):04466         * item text in pull down
193E 7F100E           (/dd/sourcecode/as):04467         L18A5    clr   >WGlobal+G.WIBusy  flag cowin not busy
1941 8E0001           (/dd/sourcecode/as):04468                  ldx   #1             let VTIO scan keyboard & update mouse pointer
1944 103F0A           (/dd/sourcecode/as):04469                  os9   F$Sleep
1947 7C100E           (/dd/sourcecode/as):04470                  inc   >WGlobal+G.WIBusy  flag cowin busy
194A B610BF           (/dd/sourcecode/as):04471                  lda   >WGlobal+g00BF was a key pressed?
194D 2B09             (/dd/sourcecode/as):04472                  bmi   L18CB          no, skip ahead
194F 277C             (/dd/sourcecode/as):04473                  beq   L1943          already processed, remove pull down & return
1951 7F10BF           (/dd/sourcecode/as):04474                  clr   >WGlobal+g00BF clear key press flag
1954 8608             (/dd/sourcecode/as):04475                  lda   #MId.Chr       get menu ID for key press
1956 2069             (/dd/sourcecode/as):04476                  bra   L1937          remove pull down & return
                      (/dd/sourcecode/as):04477         
1958 8E103C           (/dd/sourcecode/as):04478         L18CB    ldx   #WGlobal+G.Mouse Point to mouse packet
195B 6D08             (/dd/sourcecode/as):04479                  tst   Pt.CBSA,x      button A down?
195D 263C             (/dd/sourcecode/as):04480                  bne   L1911          yes, go check out where it is
                      (/dd/sourcecode/as):04481         * No mouse button, check if mouse is in window
195F 17050C           (/dd/sourcecode/as):04482                  lbsr  L1D24          copy mouse co-ordinates to system co-ordinates
1962 308820           (/dd/sourcecode/as):04483                  leax  Pt.Siz,x       point to 'em
1965 1703F0           (/dd/sourcecode/as):04484                  lbsr  L1C25          mouse in current working area?
1968 241C             (/dd/sourcecode/as):04485                  bcc   L18FC          yes, check for item update
196A 8D68             (/dd/sourcecode/as):04486                  bsr   L194A          print current item in non-inverse state
196C 8E105C           (/dd/sourcecode/as):04487                  ldx   #WGlobal+g005C Get ptr to work mouse coords
196F 1703DA           (/dd/sourcecode/as):04488                  lbsr  L1C19          mouse in current window?
1972 250B             (/dd/sourcecode/as):04489                  bcs   L18F5          no, skip ahead
1974 8601             (/dd/sourcecode/as):04490                  lda   #$01           set mouse in pulldown flag
1976 A7E824           (/dd/sourcecode/as):04491                  sta   <$24,s
1979 86FF             (/dd/sourcecode/as):04492                  lda   #$FF           flag no current item selected
197B A764             (/dd/sourcecode/as):04493                  sta   $04,s
197D 20BF             (/dd/sourcecode/as):04494                  bra   L18A5          go back & wait
                      (/dd/sourcecode/as):04495         
197F 6DE824           (/dd/sourcecode/as):04496         L18F5    tst   <$24,s         mouse still in pull down?
1982 263B             (/dd/sourcecode/as):04497                  bne   L1935          no, remove pulldown & return nothing
1984 20B8             (/dd/sourcecode/as):04498                  bra   L18A5          go back & wait
                      (/dd/sourcecode/as):04499         
                      (/dd/sourcecode/as):04500         * Check if we update current item text
1986 8601             (/dd/sourcecode/as):04501         L18FC    lda   #$01           set mouse in pull down flag
1988 A7E824           (/dd/sourcecode/as):04502                  sta   <$24,s
198B 17FD9A           (/dd/sourcecode/as):04503                  lbsr  L168A          calculate text Y co-ordinate from mouse
198E A7E816           (/dd/sourcecode/as):04504                  sta   <$16,s         save current Y co-ordinate
1991 A164             (/dd/sourcecode/as):04505                  cmpa  $04,s          match current item?
1993 27A9             (/dd/sourcecode/as):04506                  beq   L18A5          yes, go back & wait
1995 8D3D             (/dd/sourcecode/as):04507                  bsr   L194A          print item text
1997 8D69             (/dd/sourcecode/as):04508                  bsr   L1972          print next item in inverse state
1999 20A3             (/dd/sourcecode/as):04509                  bra   L18A5          go back & wait
                      (/dd/sourcecode/as):04510         
                      (/dd/sourcecode/as):04511         * Mouse button down but not released, check if it's a menu item
199B 170121           (/dd/sourcecode/as):04512         L1911    lbsr  L1A33          wait for button release
199E 1704CD           (/dd/sourcecode/as):04513                  lbsr  L1D24          get current mouse co-ordinates
19A1 308820           (/dd/sourcecode/as):04514                  leax  Pt.Siz,x       point to 'em
19A4 1703B1           (/dd/sourcecode/as):04515                  lbsr  L1C25          mouse still in current working area?
19A7 2516             (/dd/sourcecode/as):04516                  bcs   L1935          no, return nothing
19A9 A664             (/dd/sourcecode/as):04517                  lda   $04,s          get current item #
19AB 327E             (/dd/sourcecode/as):04518                  leas  -2,s
                      (/dd/sourcecode/as):04519                IFNE  H6309
                      (/dd/sourcecode/as):04520                  bsr   L19A8          get item descriptor from caller
                      (/dd/sourcecode/as):04521                ELSE
19AD 17008F           (/dd/sourcecode/as):04522                  lbsr  L19A8          get item descriptor from caller
                      (/dd/sourcecode/as):04523                ENDC
19B0 3262             (/dd/sourcecode/as):04524                  leas  2,s
19B2 A60F             (/dd/sourcecode/as):04525                  lda   MI.ENBL,x      item enabled?
19B4 2709             (/dd/sourcecode/as):04526                  beq   L1935          no, return nothing
19B6 AE65             (/dd/sourcecode/as):04527                  ldx   $05,s          get menu descriptor pointer
19B8 A60F             (/dd/sourcecode/as):04528                  lda   MN.ID,x        get ID
19BA E664             (/dd/sourcecode/as):04529                  ldb   $04,s          get item #
19BC 5C               (/dd/sourcecode/as):04530                  incb                 add 1 to it (can't use zero)
19BD 2002             (/dd/sourcecode/as):04531                  bra   L1937          return with ID & item #
                      (/dd/sourcecode/as):04532         
     19BF             (/dd/sourcecode/as):04533         L1935    equ   *
                      (/dd/sourcecode/as):04534                IFNE  H6309
                      (/dd/sourcecode/as):04535                  clrd                 clear menu ID & item #
                      (/dd/sourcecode/as):04536                ELSE
19BF 4F               (/dd/sourcecode/as):04537                  clra
19C0 5F               (/dd/sourcecode/as):04538                  clrb
                      (/dd/sourcecode/as):04539                ENDC
     19C1             (/dd/sourcecode/as):04540         L1937    equ   *
                      (/dd/sourcecode/as):04541                IFNE  H6309
                      (/dd/sourcecode/as):04542                  bsr   L19B9          remove pulldown & redraw menu bar
                      (/dd/sourcecode/as):04543                ELSE
19C1 170088           (/dd/sourcecode/as):04544                  lbsr  L19B9          remove pulldown & redraw menu bar
                      (/dd/sourcecode/as):04545                ENDC
19C4 3406             (/dd/sourcecode/as):04546         L193A    pshs  d              preserve menu id & item #
19C6 EE64             (/dd/sourcecode/as):04547                  ldu   $04,s          get static mem pointer
19C8 170125           (/dd/sourcecode/as):04548                  lbsr  L1A61          copy the window table
19CB 3586             (/dd/sourcecode/as):04549                  puls  d,pc           restore & return
                      (/dd/sourcecode/as):04550         
     19CD             (/dd/sourcecode/as):04551         L1943    equ   *
                      (/dd/sourcecode/as):04552                IFNE  H6309
                      (/dd/sourcecode/as):04553                  clrd
                      (/dd/sourcecode/as):04554                  bsr   L19CA          Remove pulldown menu
                      (/dd/sourcecode/as):04555                ELSE
19CD 4F               (/dd/sourcecode/as):04556                  clra
19CE 5F               (/dd/sourcecode/as):04557                  clrb
19CF 170089           (/dd/sourcecode/as):04558                  lbsr  L19CA          Remove pulldown menu
                      (/dd/sourcecode/as):04559                ENDC
19D2 20F0             (/dd/sourcecode/as):04560                  bra   L193A
                      (/dd/sourcecode/as):04561         
                      (/dd/sourcecode/as):04562         * Print non-inversed item text
19D4 A666             (/dd/sourcecode/as):04563         L194A    lda   $06,s          get current item #
19D6 2B66             (/dd/sourcecode/as):04564                  bmi   L1971          no item, return
19D8 3402             (/dd/sourcecode/as):04565                  pshs  a              preserve it
19DA 17FA23           (/dd/sourcecode/as):04566                  lbsr  L1331          turn inverse off
19DD 3502             (/dd/sourcecode/as):04567                  puls  a              restore item #
19DF 8D5E             (/dd/sourcecode/as):04568                  bsr   L19A8          get item descriptor from caller
19E1 6D0F             (/dd/sourcecode/as):04569                  tst   MI.ENBL,x      enabled?
19E3 2759             (/dd/sourcecode/as):04570                  beq   L1971          no, return
                      (/dd/sourcecode/as):04571                IFNE  H6309
                      (/dd/sourcecode/as):04572                  oim   #Bold,Wt.BSW,y Turn BOLD ON
                      (/dd/sourcecode/as):04573                ELSE
19E5 3402             (/dd/sourcecode/as):04574                  pshs  a
19E7 A629             (/dd/sourcecode/as):04575                  lda   Wt.BSW,y       Turn BOLD ON
19E9 8A20             (/dd/sourcecode/as):04576                  ora   #Bold
19EB A729             (/dd/sourcecode/as):04577                  sta   Wt.BSW,y
19ED 3502             (/dd/sourcecode/as):04578                  puls  a
                      (/dd/sourcecode/as):04579                ENDC
19EF 17F984           (/dd/sourcecode/as):04580                  lbsr  L1299          get length of item text
19F2 3404             (/dd/sourcecode/as):04581                  pshs  b              save length
19F4 4F               (/dd/sourcecode/as):04582                  clra                 get text X co-ordinate
19F5 E667             (/dd/sourcecode/as):04583                  ldb   $07,s          get text Y co-ordinate of item
19F7 17F972           (/dd/sourcecode/as):04584                  lbsr  L128E          set them
19FA 17F9AD           (/dd/sourcecode/as):04585                  lbsr  L12B6          erase to end of line
19FD 3504             (/dd/sourcecode/as):04586                  puls  b              restore item text length
19FF 16F988           (/dd/sourcecode/as):04587                  lbra  L12AE          print item text & return from there
                      (/dd/sourcecode/as):04588         
                      (/dd/sourcecode/as):04589         * Print inversed item text
1A02 17F9F1           (/dd/sourcecode/as):04590         L1972    lbsr  L1329          turn inverse on
1A05 A6E818           (/dd/sourcecode/as):04591                  lda   <$18,s         get item #
1A08 8D35             (/dd/sourcecode/as):04592                  bsr   L19A8          get item descriptor from caller
1A0A 6D0F             (/dd/sourcecode/as):04593                  tst   MI.ENBL,x      enabled?
1A0C 272B             (/dd/sourcecode/as):04594                  beq   L19A2          no, return
                      (/dd/sourcecode/as):04595                IFNE  H6309
                      (/dd/sourcecode/as):04596                  oim   #Bold,Wt.BSW,y Turn BOLD ON
                      (/dd/sourcecode/as):04597                ELSE
1A0E 3402             (/dd/sourcecode/as):04598                  pshs  a
1A10 A629             (/dd/sourcecode/as):04599                  lda   Wt.BSW,y       Turn BOLD ON
1A12 8A20             (/dd/sourcecode/as):04600                  ora   #Bold
1A14 A729             (/dd/sourcecode/as):04601                  sta   Wt.BSW,y
1A16 3502             (/dd/sourcecode/as):04602                  puls  a
                      (/dd/sourcecode/as):04603                ENDC
1A18 17F95B           (/dd/sourcecode/as):04604                  lbsr  L1299          calculate length
1A1B 3404             (/dd/sourcecode/as):04605                  pshs  b              save it
1A1D 4F               (/dd/sourcecode/as):04606                  clra                 get X coord of item
1A1E E6E819           (/dd/sourcecode/as):04607                  ldb   <$19,s         get Y coord of item
1A21 17F948           (/dd/sourcecode/as):04608                  lbsr  L128E          set cursor
1A24 E6E4             (/dd/sourcecode/as):04609                  ldb   ,s             get length
1A26 17F961           (/dd/sourcecode/as):04610                  lbsr  L12AE          print item text
1A29 AE68             (/dd/sourcecode/as):04611                  ldx   $08,s          get menu descriptor pointer
1A2B E68810           (/dd/sourcecode/as):04612                  ldb   MN.XSIZ,x      get width of pull down
1A2E E0E0             (/dd/sourcecode/as):04613                  subb  ,s+            subtract from text length
1A30 5A               (/dd/sourcecode/as):04614                  decb                 take one off
1A31 5A               (/dd/sourcecode/as):04615         L199A    decb                 done printing?
1A32 2B05             (/dd/sourcecode/as):04616                  bmi   L19A2          yes, return
1A34 17F92A           (/dd/sourcecode/as):04617                  lbsr  L1283          print a space
1A37 20F8             (/dd/sourcecode/as):04618                  bra   L199A          keep going till done
                      (/dd/sourcecode/as):04619         
1A39 A6E818           (/dd/sourcecode/as):04620         L19A2    lda   <$18,s         get new item #
1A3C A766             (/dd/sourcecode/as):04621                  sta   6,s            save as current & return
1A3E 39               (/dd/sourcecode/as):04622         L1971    rts
                      (/dd/sourcecode/as):04623         
                      (/dd/sourcecode/as):04624         * Get a item descriptor from caller
                      (/dd/sourcecode/as):04625         * Entry: A=Item #
1A3F AE69             (/dd/sourcecode/as):04626         L19A8    ldx   $09,s          get menu descriptor pointer
1A41 AE8815           (/dd/sourcecode/as):04627                  ldx   MN.ITEMS,x     get pointer to item descriptor array
1A44 C615             (/dd/sourcecode/as):04628                  ldb   #MI.SIZ        get size of item descriptor
1A46 3D               (/dd/sourcecode/as):04629                  mul                  calculate offset
                      (/dd/sourcecode/as):04630                IFNE  H6309
                      (/dd/sourcecode/as):04631                  addr  d,x            add it to pointer
                      (/dd/sourcecode/as):04632                ELSE
1A47 308B             (/dd/sourcecode/as):04633                  leax  d,x            add it to pointer
                      (/dd/sourcecode/as):04634                ENDC
1A49 16FE5B           (/dd/sourcecode/as):04635                  lbra  L13C9          get item descriptor from caller & return
                      (/dd/sourcecode/as):04636         
                      (/dd/sourcecode/as):04637         * Remove pull down menu & redraw menu bar
1A4C 3406             (/dd/sourcecode/as):04638         L19B9    pshs  d              preserve menu ID and item number
1A4E 8D11             (/dd/sourcecode/as):04639                  bsr   L19D0          remove pull down overlay
1A50 A6E826           (/dd/sourcecode/as):04640                  lda   <$26,s         restore mouse sample rate
1A53 B71060           (/dd/sourcecode/as):04641                  sta   >WGlobal+G.MSmpRV  Save in global (Reset default # ticks till next read)
1A56 B7103B           (/dd/sourcecode/as):04642                  sta   >WGlobal+G.MSmpRt  And reset tick counter for next read
1A59 202A             (/dd/sourcecode/as):04643                  bra   L19F3          redo menu text
                      (/dd/sourcecode/as):04644         
1A5B 3406             (/dd/sourcecode/as):04645         L19CA    pshs  d              preserve menu ID & item #
1A5D 8D02             (/dd/sourcecode/as):04646                  bsr   L19D0          remove pull down
1A5F 3586             (/dd/sourcecode/as):04647                  puls  d,pc
                      (/dd/sourcecode/as):04648         
                      (/dd/sourcecode/as):04649         * Remove menu bar pull down
1A61 10AEE822         (/dd/sourcecode/as):04650         L19D0    ldy   <$22,s         get window table pointer
1A65 EE68             (/dd/sourcecode/as):04651                  ldu   $08,s          get static mem pointer
1A67 A632             (/dd/sourcecode/as):04652                  lda   Wt.BLnk,y      get window back link #
1A69 A7C835           (/dd/sourcecode/as):04653                  sta   V.WinNum,u     save as current window
1A6C ECA824           (/dd/sourcecode/as):04654                  ldd   Wt.LStDf,y     get screen logical start of full window
1A6F ED33             (/dd/sourcecode/as):04655                  std   Wt.LStrt,y     save it as current
                      (/dd/sourcecode/as):04656                IFNE  H6309
                      (/dd/sourcecode/as):04657                  ldq   Wt.DfCPX,y     get init'ed window start co-ordinates & sizes
                      (/dd/sourcecode/as):04658                  stq   Wt.CPX,y       save 'em as current
                      (/dd/sourcecode/as):04659                ELSE
                      (/dd/sourcecode/as):04660         * changed from original Wt.DfCPX+2 and Wt.CPX+2 for clarity LCB
1A71 ECA828           (/dd/sourcecode/as):04661                  ldd   Wt.DfSZX,y
1A74 ED37             (/dd/sourcecode/as):04662                  std   Wt.SZX,y
1A76 FD11B5           (/dd/sourcecode/as):04663                  std   >GrfMem+gr00B5
1A79 ECA826           (/dd/sourcecode/as):04664                  ldd   Wt.DfCPX,y
1A7C ED35             (/dd/sourcecode/as):04665                  std   Wt.CPX,y
                      (/dd/sourcecode/as):04666                ENDC
1A7E C60C             (/dd/sourcecode/as):04667                  ldb   #$0C           get code for OWEnd
1A80 16E908           (/dd/sourcecode/as):04668                  lbra  L0101
                      (/dd/sourcecode/as):04669         
                      (/dd/sourcecode/as):04670         * Print menu descriptor text
                      (/dd/sourcecode/as):04671         * ENTRY: X=ptr to NUL terminated menu text
1A83 3406             (/dd/sourcecode/as):04672         L19F1    pshs  d              preserve menu ID & item #
1A85 EE6F             (/dd/sourcecode/as):04673         L19F3    ldu   $F,s           get pointer to menu handling entry
1A87 10AEE817         (/dd/sourcecode/as):04674                  ldy   <$17,s         get window table pointer
1A8B AE69             (/dd/sourcecode/as):04675                  ldx   $9,s           get menu text pointer
1A8D A641             (/dd/sourcecode/as):04676                  lda   MnuXStrt,u     get start X coord
1A8F 5F               (/dd/sourcecode/as):04677                  clrb                 Y coord=0
1A90 17F8D9           (/dd/sourcecode/as):04678                  lbsr  L128E          Do CurXY (preserves u,y,x)
                      (/dd/sourcecode/as):04679         * Shut scaling off so it works properly (may be able to use A or B instead)
                      (/dd/sourcecode/as):04680                IFNE  H6309
                      (/dd/sourcecode/as):04681                  oim   #Bold,Wt.BSW,y BOLD ON
                      (/dd/sourcecode/as):04682                  aim   #^(TChr+Scale),Wt.BSW,y Transparency on / Scaling off
                      (/dd/sourcecode/as):04683                ELSE
1A93 A629             (/dd/sourcecode/as):04684                  lda   Wt.BSW,y       Get current switch settings
1A95 8A20             (/dd/sourcecode/as):04685                  ora   #Bold          BOLD ON
1A97 8477             (/dd/sourcecode/as):04686                  anda  #^(TChr+Scale) Transparency/Scaling both off
1A99 A729             (/dd/sourcecode/as):04687                  sta   Wt.BSW,y       Save new settings
                      (/dd/sourcecode/as):04688                ENDC
1A9B 17F958           (/dd/sourcecode/as):04689                  lbsr  L1329          turn inverse on (preserves u,y,x)
1A9E 17F8D5           (/dd/sourcecode/as):04690                  lbsr  L1299          get length of text (up to 15) into B
1AA1 8D7A             (/dd/sourcecode/as):04691                  bsr   L1A8F          Get size that we print into A/U=menu table ptr
1AA3 170472           (/dd/sourcecode/as):04692                  lbsr  FixMenu        Draw the graphics under current menu option
1AA6 17F8B8           (/dd/sourcecode/as):04693                  lbsr  L1283          print a space
1AA9 A60F             (/dd/sourcecode/as):04694                  lda   MN.ID,x        get menu ID
1AAB 8114             (/dd/sourcecode/as):04695                  cmpa  #MId.Tdy       tandy menu?
1AAD 2605             (/dd/sourcecode/as):04696                  bne   L1A23          no, print normal text
1AAF 17F8AB           (/dd/sourcecode/as):04697                  lbsr  L127F          print tandy icon (no spaces)
1AB2 2003             (/dd/sourcecode/as):04698                  bra   L1A2E          return
                      (/dd/sourcecode/as):04699         
1AB4 17F8D3           (/dd/sourcecode/as):04700         L1A23    lbsr  L12AE          print menu text
     1AB7             (/dd/sourcecode/as):04701         L1A2E    equ   *
                      (/dd/sourcecode/as):04702                IFNE  H6309
                      (/dd/sourcecode/as):04703                  aim   #^Bold,Wt.BSW,y turn BOLD OFF
                      (/dd/sourcecode/as):04704                ELSE
1AB7 A629             (/dd/sourcecode/as):04705                  lda   Wt.BSW,y       turn BOLD OFF
1AB9 84DF             (/dd/sourcecode/as):04706                  anda  #^Bold
1ABB A729             (/dd/sourcecode/as):04707                  sta   Wt.BSW,y
                      (/dd/sourcecode/as):04708                ENDC
1ABD 3586             (/dd/sourcecode/as):04709                  puls  d,pc
                      (/dd/sourcecode/as):04710         
                      (/dd/sourcecode/as):04711         * Wait for mouse button release
1ABF 6D08             (/dd/sourcecode/as):04712         L1A33    tst   Pt.CBSA,x      button A down?
1AC1 26FC             (/dd/sourcecode/as):04713                  bne   L1A33          yes, wait for release
1AC3 6F0A             (/dd/sourcecode/as):04714                  clr   Pt.CCtA,x      clear click count
1AC5 6F0C             (/dd/sourcecode/as):04715                  clr   Pt.TTSA,x      clear time this state
1AC7 39               (/dd/sourcecode/as):04716                  rts                  return
                      (/dd/sourcecode/as):04717         
                      (/dd/sourcecode/as):04718         * Copy window table into a buffer for preservation while cowin is processing
                      (/dd/sourcecode/as):04719         * the menu bar selections. It does this for ease of restoration of window
                      (/dd/sourcecode/as):04720         * to do overlays & such
1AC8 3406             (/dd/sourcecode/as):04721         L1A3C    pshs  d              preserve registers
1ACA 17EC7C           (/dd/sourcecode/as):04722                  lbsr  L06AE          get window table pointer
1ACD BE1075           (/dd/sourcecode/as):04723                  ldx   >WGlobal+G.GfxTbl  point to a buffer for window table
1AD0 308902CF         (/dd/sourcecode/as):04724                  leax  >$02CF,x       Point to buffer to preserve original window tbl
1AD4 8D27             (/dd/sourcecode/as):04725                  bsr   L1A6E          copy current window table into buffer
1AD6 17EA67           (/dd/sourcecode/as):04726                  lbsr  L04EA          change window to full size
1AD9 EE66             (/dd/sourcecode/as):04727                  ldu   6,s
1ADB 17EC77           (/dd/sourcecode/as):04728                  lbsr  L06B9          get graphics table pointer
1ADE EC07             (/dd/sourcecode/as):04729                  ldd   Gt.FClr,x
1AE0 ED26             (/dd/sourcecode/as):04730                  std   Wt.Fore,y      save it into window table
                      (/dd/sourcecode/as):04731                IFNE  H6309
                      (/dd/sourcecode/as):04732                  aim   #^Prop,Wt.BSW,y Proportional OFF
                      (/dd/sourcecode/as):04733                ELSE
1AE2 A629             (/dd/sourcecode/as):04734                  lda   Wt.BSW,y
1AE4 84EF             (/dd/sourcecode/as):04735                  anda  #^Prop
1AE6 A729             (/dd/sourcecode/as):04736                  sta   Wt.BSW,y
                      (/dd/sourcecode/as):04737                ENDC
1AE8 17F91C           (/dd/sourcecode/as):04738                  lbsr  L1337          set draw pattern to nothing
1AEB 17F924           (/dd/sourcecode/as):04739                  lbsr  L1342          set logic type to nothing
1AEE 3586             (/dd/sourcecode/as):04740                  puls  d,pc           restore & return
                      (/dd/sourcecode/as):04741         
                      (/dd/sourcecode/as):04742         * Restore window table to original state
1AF0 17EC56           (/dd/sourcecode/as):04743         L1A61    lbsr  L06AE
1AF3 30A4             (/dd/sourcecode/as):04744                  leax  ,y
1AF5 10BE1075         (/dd/sourcecode/as):04745                  ldy   >WGlobal+G.GfxTbl  Get ptr to CoWin graphics tables
1AF9 31A902CF         (/dd/sourcecode/as):04746                  leay  >$02CF,y       Point to "temp" entry
                      (/dd/sourcecode/as):04747         * Copy a window table
                      (/dd/sourcecode/as):04748         * Entry: Y=Source pointer
                      (/dd/sourcecode/as):04749         *        X=Destination pointer
                      (/dd/sourcecode/as):04750         * Exit:  X,Y preserved
1AFD 3430             (/dd/sourcecode/as):04751         L1A6E    pshs  x,y
1AFF 3010             (/dd/sourcecode/as):04752                  leax  Wt.STbl,x      Point X to beginning of destination window table entry (-$10,x)
1B01 3130             (/dd/sourcecode/as):04753                  leay  Wt.STbl,y      Point Y to beginning of destination window table entry (-$10,y)
                      (/dd/sourcecode/as):04754                IFNE  H6309
                      (/dd/sourcecode/as):04755                  ldw   #Wt.Siz
                      (/dd/sourcecode/as):04756                  tfm   y+,x+
                      (/dd/sourcecode/as):04757                ELSE
                      (/dd/sourcecode/as):04758         * 6809 - Eventually use StkBlCpy vector (64 byte copy)
1B03 3406             (/dd/sourcecode/as):04759                  pshs  d
1B05 C640             (/dd/sourcecode/as):04760                  ldb   #Wt.Siz
1B07 A6A0             (/dd/sourcecode/as):04761         L1A6Eb   lda   ,y+
1B09 A780             (/dd/sourcecode/as):04762                  sta   ,x+
1B0B 5A               (/dd/sourcecode/as):04763                  decb
1B0C 26F9             (/dd/sourcecode/as):04764                  bne   L1A6Eb
1B0E 4F               (/dd/sourcecode/as):04765                  clra
1B0F FD11B5           (/dd/sourcecode/as):04766                  std   >GrfMem+gr00B5
1B12 3506             (/dd/sourcecode/as):04767                  puls  d
                      (/dd/sourcecode/as):04768                ENDC
1B14 35B0             (/dd/sourcecode/as):04769                  puls  x,y,pc
                      (/dd/sourcecode/as):04770         
1B16 327E             (/dd/sourcecode/as):04771         L1A88    leas  -2,s           adjust stack for L1a8f routine
1B18 8D03             (/dd/sourcecode/as):04772                  bsr   L1A8F          Calc End X coord for menu entry
1B1A 3262             (/dd/sourcecode/as):04773                  leas  2,s            restore stack & return
1B1C 39               (/dd/sourcecode/as):04774                  rts   
                      (/dd/sourcecode/as):04775         
                      (/dd/sourcecode/as):04776         * Calculate what size of text we will write (preferably with 1 space in
                      (/dd/sourcecode/as):04777         *   front & back). Set flag @ <$1d on stack as to whether spaces fit or not.
                      (/dd/sourcecode/as):04778         * Entry: B=Size of text entry
                      (/dd/sourcecode/as):04779         * Exit: <$1d,s (after puls a,pc) = 0 if fits with lead & trailing spaces
                      (/dd/sourcecode/as):04780         *       <$1d,s = 1 if did not fit
                      (/dd/sourcecode/as):04781         *       A=End X coord on menu bar of TEXT ONLY, NOT INCLUDING SPACES
                      (/dd/sourcecode/as):04782         *       B=Maximum size of text to write (IF CAN'T FIT WITH 2 SPACES)
                      (/dd/sourcecode/as):04783         *       U=menu table ptr
                      (/dd/sourcecode/as):04784         *       E=End X coord including spaces
                      (/dd/sourcecode/as):04785         * NOTE: A does calculate real end in the routine, but only to set flag on
                      (/dd/sourcecode/as):04786         *       stack. It destroys the result before exiting.
1B1D EEE811           (/dd/sourcecode/as):04787         L1A8F    ldu   <$11,s         get menu table pointer
1B20 A641             (/dd/sourcecode/as):04788                  lda   MnuXStrt,u     get X start co-ordinate
                      (/dd/sourcecode/as):04789                IFNE  H6309
                      (/dd/sourcecode/as):04790                  addr  b,a            add size of text to it
                      (/dd/sourcecode/as):04791                ELSE
1B22 3404             (/dd/sourcecode/as):04792                  pshs  b
1B24 ABE0             (/dd/sourcecode/as):04793                  adda  ,s+            add size of text to it
                      (/dd/sourcecode/as):04794                ENDC
1B26 3402             (/dd/sourcecode/as):04795                  pshs  a              save result (end coord)
1B28 4C               (/dd/sourcecode/as):04796                  inca                 add 2 for space on either side
1B29 4C               (/dd/sourcecode/as):04797                  inca  
                      (/dd/sourcecode/as):04798         * Changed to use E
                      (/dd/sourcecode/as):04799                IFNE  H6309
                      (/dd/sourcecode/as):04800                  tfr   a,e            Move to register we can preserve
                      (/dd/sourcecode/as):04801                  cmpe  Wt.SZX,y       still fit in window?
                      (/dd/sourcecode/as):04802                  bls   L1AB0          yes, skip ahead
                      (/dd/sourcecode/as):04803                  dece                 Subtract one of the 2 spaces
                      (/dd/sourcecode/as):04804                  cmpe  Wt.SZX,y       fit in window now?
                      (/dd/sourcecode/as):04805                ELSE
1B2A B711B5           (/dd/sourcecode/as):04806                  sta   >GrfMem+gr00B5
1B2D A137             (/dd/sourcecode/as):04807                  cmpa  Wt.SZX,y       still fit in window?
1B2F 2314             (/dd/sourcecode/as):04808                  bls   L1AB0          Yes, skip ahead
1B31 4A               (/dd/sourcecode/as):04809                  deca                 Subtract one of the 2 spaces
1B32 B711B5           (/dd/sourcecode/as):04810                  sta   >GrfMem+gr00B5
1B35 A137             (/dd/sourcecode/as):04811                  cmpa  Wt.SZX,y       Fit in window now?
                      (/dd/sourcecode/as):04812                ENDC
1B37 2308             (/dd/sourcecode/as):04813                  bls   L1AAC          yes, skip ahead
1B39 E637             (/dd/sourcecode/as):04814                  ldb   Wt.SZX,y       get window size
1B3B E041             (/dd/sourcecode/as):04815                  subb  MnuXStrt,u     take off start coord
1B3D 5A               (/dd/sourcecode/as):04816                  decb                 take off another for space in front
                      (/dd/sourcecode/as):04817                IFNE  H6309
                      (/dd/sourcecode/as):04818                  tfr   b,e
                      (/dd/sourcecode/as):04819                ELSE
1B3E F711B5           (/dd/sourcecode/as):04820                  stb   >GrfMem+gr00B5
                      (/dd/sourcecode/as):04821                ENDC
1B41 8601             (/dd/sourcecode/as):04822         L1AAC    lda   #$01           Set flag that it doesn't fit
1B43 2001             (/dd/sourcecode/as):04823                  bra   L1AB1
                      (/dd/sourcecode/as):04824         
1B45 4F               (/dd/sourcecode/as):04825         L1AB0    clra                 Flag that it fits
1B46 A7E820           (/dd/sourcecode/as):04826         L1AB1    sta   <$20,s
1B49 3582             (/dd/sourcecode/as):04827                  puls  a,pc           restore new X coord & return
                      (/dd/sourcecode/as):04828         
                      (/dd/sourcecode/as):04829         * SS.SBar entry point
1B4B 17F6A5           (/dd/sourcecode/as):04830         L1AB9    lbsr  L116C          setup working window table
1B4E AE26             (/dd/sourcecode/as):04831                  ldx   PD.RGS,y       get register stack pointer
1B50 10BE10BB         (/dd/sourcecode/as):04832                  ldy   >WGlobal+g00BB Get ptr to work window table
                      (/dd/sourcecode/as):04833         * Theoretically, this is where setting up a FSWIN should draw the scroll bars
1B54 3410             (/dd/sourcecode/as):04834         DfltBar  pshs  x              preserve register stack pointer
1B56 8602             (/dd/sourcecode/as):04835                  lda   #2             point to draw table to erase old markers
1B58 308C6D           (/dd/sourcecode/as):04836                  leax  <SBarErs,pc
1B5B 17F760           (/dd/sourcecode/as):04837                  lbsr  DrawBar        erase old markers
1B5E 3510             (/dd/sourcecode/as):04838                  puls  x
                      (/dd/sourcecode/as):04839         * Draw horizontal scroll bar marker
1B60 E605             (/dd/sourcecode/as):04840                  ldb   R$X+1,x        get requested coord
1B62 CB05             (/dd/sourcecode/as):04841                  addb  #$05           Add 5 to it (min. size of horiz. scroll bar)
1B64 E137             (/dd/sourcecode/as):04842                  cmpb  Wt.SZX,y       Still within X size of window?
1B66 2F06             (/dd/sourcecode/as):04843                  ble   L1B1E          Yes, bump X pos. back by 4 & go draw it
1B68 E637             (/dd/sourcecode/as):04844                  ldb   Wt.SZX,y       No, get X size of Window
1B6A C003             (/dd/sourcecode/as):04845                  subb  #$03           Bump down by 3
1B6C 2002             (/dd/sourcecode/as):04846                  bra   L1B20          Go draw it
                      (/dd/sourcecode/as):04847         
1B6E C004             (/dd/sourcecode/as):04848         L1B1E    subb  #$04
1B70 4F               (/dd/sourcecode/as):04849         L1B20    clra                 Multiply x 8
                      (/dd/sourcecode/as):04850                IFNE  H6309
                      (/dd/sourcecode/as):04851                  lsld  
                      (/dd/sourcecode/as):04852                  lsld  
                      (/dd/sourcecode/as):04853                  lsld  
                      (/dd/sourcecode/as):04854                ELSE
1B71 58               (/dd/sourcecode/as):04855                  lslb  
1B72 49               (/dd/sourcecode/as):04856                  rola  
1B73 58               (/dd/sourcecode/as):04857                  lslb  
1B74 49               (/dd/sourcecode/as):04858                  rola  
1B75 58               (/dd/sourcecode/as):04859                  lslb  
1B76 49               (/dd/sourcecode/as):04860                  rola  
                      (/dd/sourcecode/as):04861                ENDC
1B77 FD1147           (/dd/sourcecode/as):04862                  std   >GrfMem+gr0047 save X coord
1B7A E638             (/dd/sourcecode/as):04863                  ldb   Wt.SZY,y       get window Y size
1B7C 5A               (/dd/sourcecode/as):04864                  decb                 subtract 1 to start at 0
1B7D 4F               (/dd/sourcecode/as):04865                  clra                 Multiply x 8
                      (/dd/sourcecode/as):04866                IFNE  H6309
                      (/dd/sourcecode/as):04867                  lsld  
                      (/dd/sourcecode/as):04868                  lsld  
                      (/dd/sourcecode/as):04869                  lsld  
                      (/dd/sourcecode/as):04870                  incd                 Bump down for new marker size
                      (/dd/sourcecode/as):04871                ELSE
1B7E 58               (/dd/sourcecode/as):04872                  lslb  
1B7F 49               (/dd/sourcecode/as):04873                  rola  
1B80 58               (/dd/sourcecode/as):04874                  lslb  
1B81 49               (/dd/sourcecode/as):04875                  rola  
1B82 58               (/dd/sourcecode/as):04876                  lslb  
1B83 49               (/dd/sourcecode/as):04877                  rola  
1B84 C30001           (/dd/sourcecode/as):04878                  addd   #$0001        Bump down for new marker size
                      (/dd/sourcecode/as):04879                ENDC
1B87 FD1149           (/dd/sourcecode/as):04880                  std   >GrfMem+gr0049
1B8A CCCE06           (/dd/sourcecode/as):04881                  ldd   #$ce06         get group/buffer
1B8D 8D2D             (/dd/sourcecode/as):04882                  bsr   DrawScrl       Go PutBlk on screen
                      (/dd/sourcecode/as):04883         * Draw vertical scroll bar marker
1B8F E637             (/dd/sourcecode/as):04884                  ldb   Wt.SZX,y       get window X size
1B91 5A               (/dd/sourcecode/as):04885                  decb                 subtract 1 to start at 0
1B92 4F               (/dd/sourcecode/as):04886                  clra                 Multiply x 8
                      (/dd/sourcecode/as):04887                IFNE  H6309
                      (/dd/sourcecode/as):04888                  lsld  
                      (/dd/sourcecode/as):04889                  lsld  
                      (/dd/sourcecode/as):04890                  lsld
                      (/dd/sourcecode/as):04891                  incd                 added RG
                      (/dd/sourcecode/as):04892                ELSE
1B93 58               (/dd/sourcecode/as):04893                  lslb  
1B94 49               (/dd/sourcecode/as):04894                  rola  
1B95 58               (/dd/sourcecode/as):04895                  lslb  
1B96 49               (/dd/sourcecode/as):04896                  rola  
1B97 58               (/dd/sourcecode/as):04897                  lslb  
1B98 49               (/dd/sourcecode/as):04898                  rola
1B99 C30001           (/dd/sourcecode/as):04899                  addd  #1             added RG
                      (/dd/sourcecode/as):04900                ENDC
1B9C FD1147           (/dd/sourcecode/as):04901                  std   >GrfMem+gr0047
1B9F E607             (/dd/sourcecode/as):04902                  ldb   R$Y+1,x        get requested Y position
1BA1 CB06             (/dd/sourcecode/as):04903                  addb  #$06
1BA3 E138             (/dd/sourcecode/as):04904                  cmpb  Wt.SZY,y       will it fit in window?
1BA5 2F06             (/dd/sourcecode/as):04905                  ble   L1B3D
1BA7 E638             (/dd/sourcecode/as):04906                  ldb   Wt.SZY,y
1BA9 C003             (/dd/sourcecode/as):04907                  subb  #$03
1BAB 2002             (/dd/sourcecode/as):04908                  bra   L1B3F
                      (/dd/sourcecode/as):04909         
1BAD C004             (/dd/sourcecode/as):04910         L1B3D    subb  #4
1BAF 4F               (/dd/sourcecode/as):04911         L1B3F    clra                 Multiply x 8
                      (/dd/sourcecode/as):04912                IFNE  H6309
                      (/dd/sourcecode/as):04913                  lsld  
                      (/dd/sourcecode/as):04914                  lsld  
                      (/dd/sourcecode/as):04915                  lsld  
                      (/dd/sourcecode/as):04916                ELSE
1BB0 58               (/dd/sourcecode/as):04917                  lslb  
1BB1 49               (/dd/sourcecode/as):04918                  rola  
1BB2 58               (/dd/sourcecode/as):04919                  lslb  
1BB3 49               (/dd/sourcecode/as):04920                  rola  
1BB4 58               (/dd/sourcecode/as):04921                  lslb  
1BB5 49               (/dd/sourcecode/as):04922                  rola  
                      (/dd/sourcecode/as):04923                ENDC
1BB6 FD1149           (/dd/sourcecode/as):04924                  std   >GrfMem+gr0049
1BB9 CCCE05           (/dd/sourcecode/as):04925                  ldd   #$ce05         get group/buffer
1BBC FD1157           (/dd/sourcecode/as):04926         DrawScrl std   >GrfMem+gr0057
1BBF C636             (/dd/sourcecode/as):04927                  ldb   #$36           get grfdrv funtion for putblk
1BC1 3430             (/dd/sourcecode/as):04928                  pshs  x,y
1BC3 17E7C5           (/dd/sourcecode/as):04929                  lbsr  L0101
1BC6 35B0             (/dd/sourcecode/as):04930                  puls  x,y,pc
                      (/dd/sourcecode/as):04931         
                      (/dd/sourcecode/as):04932         * Draw table for erasing scroll bars
1BC8 02               (/dd/sourcecode/as):04933         SBarErs  fcb   WColor1        Background of bar color
1BC9 0009             (/dd/sourcecode/as):04934                  fdb   9              9,(bottom+6) to (Right-17),(Bottom -1)
1BCB FFFA             (/dd/sourcecode/as):04935                  fdb   -6
1BCD FFEF             (/dd/sourcecode/as):04936                  fdb   -17
1BCF FFFE             (/dd/sourcecode/as):04937                  fdb   -2
1BD1 4E               (/dd/sourcecode/as):04938                  fcb   $4e
                      (/dd/sourcecode/as):04939         
1BD2 02               (/dd/sourcecode/as):04940                  fcb   WColor1        Background of bar color
1BD3 FFFA             (/dd/sourcecode/as):04941                  fdb   -6             (Right-6),17 to (Right-1),(Bottom-17)
1BD5 0011             (/dd/sourcecode/as):04942                  fdb   17
1BD7 FFFF             (/dd/sourcecode/as):04943                  fdb   -1
1BD9 FFEF             (/dd/sourcecode/as):04944                  fdb   -17
1BDB 4E               (/dd/sourcecode/as):04945                  fcb   $4e
                      (/dd/sourcecode/as):04946         
                      (/dd/sourcecode/as):04947         * Update auto follow mouse cursor - ADD CHECK FOR MOUSE BUTTON DOWN ON AREA
                      (/dd/sourcecode/as):04948         *  NOT IN OUR WINDOW, DO SELECT IF IN ANOTHER WINDOW
                      (/dd/sourcecode/as):04949         * NOTE: THE AUTO-FOLLOW MOUSE FLAG REMAINS SET _EVEN_ IF WE END UP ON A TEXT
                      (/dd/sourcecode/as):04950         *    WINDOW!!!
                      (/dd/sourcecode/as):04951         * Theoretically, entry is:
                      (/dd/sourcecode/as):04952         *   U=static mem ptr for current active window
                      (/dd/sourcecode/as):04953         *   Y=Path descriptor (64 bytes) ptr for current active window
1BDC 327B             (/dd/sourcecode/as):04954         L1B4D    leas  -5,s           make a buffer for flag & current mouse coords
1BDE 6F64             (/dd/sourcecode/as):04955                  clr   4,s            clear a flag (for different gfx cursor required)
1BE0 8E1054           (/dd/sourcecode/as):04956                  ldx   #WGlobal+G.Mouse+Pt.AcX Point to mouse current coords
1BE3 FE1020           (/dd/sourcecode/as):04957                  ldu   >WGlobal+G.CurDev  get current device static mem pointer
1BE6 17EB2F           (/dd/sourcecode/as):04958                  lbsr  L06A0          Go point to & verify window dsc. (preserves X)
                      (/dd/sourcecode/as):04959                IFNE  H6309
                      (/dd/sourcecode/as):04960                  ldq   ,x             Get current X&Y Coords
                      (/dd/sourcecode/as):04961                  tim   #$01,[Wt.STbl,y] 320 or 640 pixel wide screen?
                      (/dd/sourcecode/as):04962                ELSE
1BE9 EC02             (/dd/sourcecode/as):04963                  ldd   2,x
1BEB FD11B5           (/dd/sourcecode/as):04964                  std   >GrfMem+gr00B5
1BEE EC84             (/dd/sourcecode/as):04965                  ldd   ,x
1BF0 3402             (/dd/sourcecode/as):04966                  pshs  a
1BF2 A6B8F0           (/dd/sourcecode/as):04967                  lda   [Wt.STbl,y]    320 or 640 pixel wide screen?
1BF5 8501             (/dd/sourcecode/as):04968                  bita  #$01
1BF7 3502             (/dd/sourcecode/as):04969                  puls  a
                      (/dd/sourcecode/as):04970                ENDC
1BF9 2602             (/dd/sourcecode/as):04971                  bne   L1B72          640, skip ahead
                      (/dd/sourcecode/as):04972                IFNE  H6309
                      (/dd/sourcecode/as):04973                  lsrd                 Divide X coord by 2
1BFB                  (/dd/sourcecode/as):04974         L1B72    stq   ,s             Save current mouse coords
                      (/dd/sourcecode/as):04975                ELSE
1BFB 44               (/dd/sourcecode/as):04976                  lsra                 Divide X coord by 2
1BFC 56               (/dd/sourcecode/as):04977                  rorb
1BFD EDE4             (/dd/sourcecode/as):04978         L1B72    std   ,s             Save current mouse coords
1BFF FC11B5           (/dd/sourcecode/as):04979                  ldd   >GrfMem+gr00B5
1C02 ED62             (/dd/sourcecode/as):04980                  std   2,s
1C04 ECE4             (/dd/sourcecode/as):04981                  ldd   ,s
                      (/dd/sourcecode/as):04982                ENDC
1C06 30E4             (/dd/sourcecode/as):04983                  leax  ,s             point to coord info
                      (/dd/sourcecode/as):04984         *  1ST TRY - NEW ROUTINE
1C08 170141           (/dd/sourcecode/as):04985                  lbsr  L1C19          Check if mouse coord in current window at all
1C0B 251C             (/dd/sourcecode/as):04986                  bcs   L1B8D          No, check to see if we switch windows
                      (/dd/sourcecode/as):04987         * Mouse cursor within current physical window
1C0D 170148           (/dd/sourcecode/as):04988                  lbsr  L1C25          Check if mouse coord in CWArea of current window
1C10 102500B3         (/dd/sourcecode/as):04989                  lbcs  AdjstCrs       No, must be in control region, adjust gfx cursor
1C14 FE1020           (/dd/sourcecode/as):04990                  ldu   >WGlobal+G.CurDev  get current device static mem
1C17 17EB3B           (/dd/sourcecode/as):04991                  lbsr  L06B9          get gfx table pointer for this window
1C1A EC0C             (/dd/sourcecode/as):04992                  ldd   Gt.GOff,x      get offset into block of graphics cursor
1C1C 10A3A819         (/dd/sourcecode/as):04993                  cmpd  Wt.GOff,y      Same as ptr in window table itself?
1C20 102700EA         (/dd/sourcecode/as):04994                  lbeq  L1BD8          Yes, skip ahead
1C24 6C64             (/dd/sourcecode/as):04995                  inc   4,s            No, set flag & then skip ahead
1C26 1600E5           (/dd/sourcecode/as):04996                  lbra  L1BD8
                      (/dd/sourcecode/as):04997         
                      (/dd/sourcecode/as):04998         * Mouse cursor not within current window's CWArea. Please note that if running
                      (/dd/sourcecode/as):04999         *   in a bordered window, this means it could be in the menu bar or scroll bar
                      (/dd/sourcecode/as):05000         *   areas (within DWSet range, but not CWArea)
                      (/dd/sourcecode/as):05001         * Gets here ok when cursor on different window
                      (/dd/sourcecode/as):05002         * REQUIRES VTIO TO SET MSEMOVE FLAG WHEN BUTTON PRESSED (DONE IN TC9IO)
                      (/dd/sourcecode/as):05003         * May want to change to send MsSig here in CoWin instead - then we can leave
                      (/dd/sourcecode/as):05004         * Tc9/CC3 IO alone.
                      (/dd/sourcecode/as):05005         * NOTE: WE _WILL_ HAVE TO MAKE SURE IT IS A WINDOW LINKED WITH A PROCESS IN
                      (/dd/sourcecode/as):05006         *   SOME WAY (AS TC9IO'S CLEAR ROUTINE DOES), AS IT WILL SELECT "GHOST"
                      (/dd/sourcecode/as):05007         *   WINDOWS FOR GSHELL (I THINK)
1C29 FC1044           (/dd/sourcecode/as):05008         L1B8D    ldd   >Pt.CBSA+G.Mouse+WGlobal Get both buttons
1C2C 10270097         (/dd/sourcecode/as):05009                  lbeq  AdjstCrs       Neither down, continue normally
                      (/dd/sourcecode/as):05010         * Search through window tables looking for ones on the same screen (NO overlay
1C30 EE30             (/dd/sourcecode/as):05011                  ldu   Wt.STbl,y      Get our screen table for comparison purposes
1C32 8E1290           (/dd/sourcecode/as):05012                  ldx   #WinBase       Point to start of internal window tables
1C35 CC2040           (/dd/sourcecode/as):05013                  ldd   #$2040         32 windows to check, $40 bytes/table entry
                      (/dd/sourcecode/as):05014                IFNE  H6309
1C38                  (/dd/sourcecode/as):05015         SrchLoop ldw   Wt.STbl,x      Get screen tbl ptr
                      (/dd/sourcecode/as):05016                  cmpw  #$FFFF         unused, skip
                      (/dd/sourcecode/as):05017                  beq   TryNext
                      (/dd/sourcecode/as):05018                  cmpr  x,y            Our own ptr?
                      (/dd/sourcecode/as):05019                  beq   TryNext
                      (/dd/sourcecode/as):05020                  cmpr  w,u            On same screen?
                      (/dd/sourcecode/as):05021                ELSE
1C38 3410             (/dd/sourcecode/as):05022         SrchLoop pshs  x
1C3A AE10             (/dd/sourcecode/as):05023                  ldx   Wt.STbl,x      Get screen tbl ptr
1C3C BF11B5           (/dd/sourcecode/as):05024                  stx   >GrfMem+gr00B5
1C3F 8CFFFF           (/dd/sourcecode/as):05025                  cmpx  #-1            Unused, skip
1C42 3510             (/dd/sourcecode/as):05026                  puls  x
1C44 270D             (/dd/sourcecode/as):05027                  beq   TryNext
1C46 3410             (/dd/sourcecode/as):05028                  pshs  x
1C48 10ACE1           (/dd/sourcecode/as):05029                  cmpy  ,s++           Our own ptr?
1C4B 2706             (/dd/sourcecode/as):05030                  beq   TryNext
1C4D 11B311B5         (/dd/sourcecode/as):05031                  cmpu   >GrfMem+gr00B5  On same screen?
                      (/dd/sourcecode/as):05032                ENDC
1C51 2706             (/dd/sourcecode/as):05033                  beq   CheckScn       Yes, check if mouse clicked on it.
                      (/dd/sourcecode/as):05034         * inc >BordReg        Debug code to see if we got here
1C53 3A               (/dd/sourcecode/as):05035         TryNext  abx                  No, bump ptr up
1C54 4A               (/dd/sourcecode/as):05036                  deca                 Dec # windows left to check
1C55 26E1             (/dd/sourcecode/as):05037                  bne   SrchLoop
1C57 206E             (/dd/sourcecode/as):05038                  bra   AdjstCrs
                      (/dd/sourcecode/as):05039         
     1C59             (/dd/sourcecode/as):05040         CheckScn equ   *
                      (/dd/sourcecode/as):05041                IFNE  H6309
                      (/dd/sourcecode/as):05042                  lde   Wt.BLnk,x      Is this an overlay window?
                      (/dd/sourcecode/as):05043                ELSE
1C59 3402             (/dd/sourcecode/as):05044                  pshs  a
1C5B A612             (/dd/sourcecode/as):05045                  lda   Wt.BLnk,x      Is this an overlay window?
1C5D B711B5           (/dd/sourcecode/as):05046                  sta   >GrfMem+gr00B5
1C60 3502             (/dd/sourcecode/as):05047                  puls  a
                      (/dd/sourcecode/as):05048                ENDC
1C62 2AEF             (/dd/sourcecode/as):05049                  bpl   TryNext        Yes, don't bother with it (MAY BE WRONG?)
1C64 3476             (/dd/sourcecode/as):05050                  pshs  u,y,x,d        Preserve regs
1C66 3068             (/dd/sourcecode/as):05051                  leax  8,s            Point to mouse packet
                      (/dd/sourcecode/as):05052         *         ldx   #WGlobal+G.Mouse+Pt.AcX   Point to mouse current coords
1C68 1700E1           (/dd/sourcecode/as):05053                  lbsr  L1C19          See if mouse on this window
1C6B 3576             (/dd/sourcecode/as):05054                  puls  u,y,x,d        Restore regs
1C6D 25E4             (/dd/sourcecode/as):05055                  bcs   TryNext        Not on this window either, continue through table
                      (/dd/sourcecode/as):05056         * Found window mouse was clicked on. Now, we must find the ptr to _this_
                      (/dd/sourcecode/as):05057         *   windows' device mem ptr, load it into X, lbsr L0582 & bra L1C16
                      (/dd/sourcecode/as):05058         * See TC9IO source, but basically, get Device Table ptr, get # of devices max,
                      (/dd/sourcecode/as):05059         *   use that as range, Get our V$DRIV, check for match (going through Device
                      (/dd/sourcecode/as):05060         *   table), if match, get V$STAT for static storage. Go in there, make sure
                      (/dd/sourcecode/as):05061         *   $1d indicates GRFDRV/CoWin, $1e >0 (Valid window). If so, we found our
                      (/dd/sourcecode/as):05062         *   ptr. If not, skip to AdjstCrs. Do NOT have to go back in loop, as only
                      (/dd/sourcecode/as):05063         *   one window can be in same area (at this time... until movable/resizable
                      (/dd/sourcecode/as):05064         *   windows are implemented in 16K grfdrv)
                      (/dd/sourcecode/as):05065         * This routine should preserve Y (window table ptr)
                      (/dd/sourcecode/as):05066         * SEEMS TO WORK TO HERE NOW.
                      (/dd/sourcecode/as):05067         * Entry: A=32-window entry #
                      (/dd/sourcecode/as):05068         * NOTE: IF IT ALLOWS SELECTING THE UNDERLYING GSHELL "GHOST" WINDOW, WE ALSO
                      (/dd/sourcecode/as):05069         *   HAVE TO ADD CODE TO MAKE SURE A PROCESS IS ACTIVE FOR THE WINDOW... WHICH
                      (/dd/sourcecode/as):05070         *   MEANS RE-SEARCHING (PAST LAST FOUND POINT) THE WINDOW TABLE ITSELF
1C6F C620             (/dd/sourcecode/as):05071                  ldb   #$20           Invert window entry #
                      (/dd/sourcecode/as):05072                IFNE  H6309
                      (/dd/sourcecode/as):05073                  subr  a,b
                      (/dd/sourcecode/as):05074                ELSE
1C71 3402             (/dd/sourcecode/as):05075                  pshs  a
1C73 E0E0             (/dd/sourcecode/as):05076                  subb  ,s+
                      (/dd/sourcecode/as):05077                ENDC
1C75 3424             (/dd/sourcecode/as):05078                  pshs  b,y            Preserve window entry # & Window table ptr
1C77 BE1020           (/dd/sourcecode/as):05079                  ldx   >WGlobal+G.CurDev  Get ptr to current device static mem
1C7A AE01             (/dd/sourcecode/as):05080                  ldx   V.PORT,x       Get ptr to our device table entry
                      (/dd/sourcecode/as):05081                IFNE  H6309
                      (/dd/sourcecode/as):05082                  ldw   V$DRIV,x       Get original window's driver ptr
                      (/dd/sourcecode/as):05083                ELSE
1C7C AE84             (/dd/sourcecode/as):05084                  ldx   V$DRIV,x       Get original window's driver ptr
1C7E BF11B5           (/dd/sourcecode/as):05085                  stx   >GrfMem+gr00B5
                      (/dd/sourcecode/as):05086                ENDC
1C81 C60D             (/dd/sourcecode/as):05087                  ldb   #DEVSIZ        Size of each device table entry
1C83 9E24             (/dd/sourcecode/as):05088                  ldx   <D.Init        Get ptr to INIT module
1C85 A60D             (/dd/sourcecode/as):05089                  lda   DevCnt,x       Get # of entries allowed in device table
1C87 9E80             (/dd/sourcecode/as):05090                  ldx   <D.DevTbl      Get start of device table
1C89 3D               (/dd/sourcecode/as):05091                  mul                  Calculate offset to end of device table
1C8A 318B             (/dd/sourcecode/as):05092                  leay  d,x            Point Y to end of Device table
1C8C C60D             (/dd/sourcecode/as):05093                  ldb   #DEVSIZ        Get device table entry size again
1C8E EE84             (/dd/sourcecode/as):05094         DevLoop  ldu   V$DRIV,x       Get driver ptr for device we are checking
                      (/dd/sourcecode/as):05095                IFNE  H6309
                      (/dd/sourcecode/as):05096                  cmpr  u,w            Same as original window?
                      (/dd/sourcecode/as):05097                ELSE
1C90 11B311B5         (/dd/sourcecode/as):05098                  cmpu  >GrfMem+gr00B5
                      (/dd/sourcecode/as):05099                ENDC
1C94 2628             (/dd/sourcecode/as):05100                  bne   NextEnt        No, skip to next entry
1C96 EE02             (/dd/sourcecode/as):05101                  ldu   V$STAT,x       Get static mem ptr for CC3/TC9IO device
1C98 A6C81D           (/dd/sourcecode/as):05102                  lda   V.WinType,u    Is this a Windint/Grfint window?
1C9B 2621             (/dd/sourcecode/as):05103                  bne   NextEnt        No, VDGINT so skip
1C9D A6C81E           (/dd/sourcecode/as):05104                  lda   V.InfVld,u     Is this static mem properly initialized?
1CA0 271C             (/dd/sourcecode/as):05105                  beq   NextEnt        No, skip
1CA2 A6C835           (/dd/sourcecode/as):05106                  lda   V.WinNum,u     Get window table entry #
1CA5 A1E4             (/dd/sourcecode/as):05107                  cmpa  ,s             Same as one we are looking for?
1CA7 2615             (/dd/sourcecode/as):05108                  bne   NextEnt        No, wrong window
                      (/dd/sourcecode/as):05109         * In some cases, it DOES deactivate the original window
1CA9 FC1020           (/dd/sourcecode/as):05110                  ldd   >WGlobal+G.CurDev Copy old static mem ptr to previous
1CAC FD1022           (/dd/sourcecode/as):05111                  std   >WGlobal+G.PrWMPt
1CAF FF1020           (/dd/sourcecode/as):05112                  stu   >WGlobal+G.CurDev Found it, save as current device
1CB2 6CC823           (/dd/sourcecode/as):05113                  inc   V.ScrChg,u     Flag that screen update needed
1CB5 7F100A           (/dd/sourcecode/as):05114                  clr   >WGlobal+g000A Flag that we are not active device anymore
1CB8 7F10BF           (/dd/sourcecode/as):05115                  clr   >WGlobal+g00BF Clear Windint's key pressed flag
1CBB 3268             (/dd/sourcecode/as):05116                  leas  8,s            Eat temp vars
1CBD 39               (/dd/sourcecode/as):05117                  rts   
                      (/dd/sourcecode/as):05118         
1CBE 3A               (/dd/sourcecode/as):05119         NextEnt  abx                  Point to next entry in device table
                      (/dd/sourcecode/as):05120                IFNE  H6309
                      (/dd/sourcecode/as):05121                  cmpr  y,x            Past end of table?
                      (/dd/sourcecode/as):05122                ELSE
1CBF 3420             (/dd/sourcecode/as):05123                  pshs  y              Past end of table?
1CC1 ACE1             (/dd/sourcecode/as):05124                  cmpx  ,s++
                      (/dd/sourcecode/as):05125                ENDC
1CC3 25C9             (/dd/sourcecode/as):05126                  blo   DevLoop        No, keep trying
1CC5 3524             (/dd/sourcecode/as):05127         NoGo     puls  b,y            Yes, restore window table ptr
1CC7 BE1075           (/dd/sourcecode/as):05128         AdjstCrs ldx   >WGlobal+G.GfxTbl  get pointer to graphics table
1CCA EC8902BC         (/dd/sourcecode/as):05129                  ldd   >$02BC,x       graphics cursor been initialized?
1CCE 261F             (/dd/sourcecode/as):05130                  bne   L1BB5          yes, skip ahead
1CD0 CCCA01           (/dd/sourcecode/as):05131                  ldd   #$CA01         get default group/buffer for arrow
1CD3 FD1157           (/dd/sourcecode/as):05132                  std   >GrfMem+gr0057 Save in Grfdrv mem
1CD6 3430             (/dd/sourcecode/as):05133                  pshs  y,x
1CD8 C61A             (/dd/sourcecode/as):05134                  ldb   #$1A           get function call for GCSet
1CDA 17E6AE           (/dd/sourcecode/as):05135                  lbsr  L0101          let grfdrv do it
1CDD 3530             (/dd/sourcecode/as):05136                  puls  y,x
1CDF A6A818           (/dd/sourcecode/as):05137                  lda   Wt.GBlk,y      get graphics cursor block #
1CE2 A78902BC         (/dd/sourcecode/as):05138                  sta   >$02BC,x       save it in Gfx table mem
1CE6 ECA819           (/dd/sourcecode/as):05139                  ldd   Wt.GOff,y      get offset in block to graphics cursor
1CE9 ED8902BD         (/dd/sourcecode/as):05140                  std   >$02BD,x       save it
1CED 2018             (/dd/sourcecode/as):05141                  bra   L1BD1
                      (/dd/sourcecode/as):05142         
                      (/dd/sourcecode/as):05143         * Change mouse cursor if necessary
1CEF 3402             (/dd/sourcecode/as):05144         L1BB5    pshs  a              save gcursor block #
1CF1 ECA819           (/dd/sourcecode/as):05145                  ldd   Wt.GOff,y      get offset into block
1CF4 10A38902BD       (/dd/sourcecode/as):05146                  cmpd  >$02BD,x       match current?
1CF9 3502             (/dd/sourcecode/as):05147                  puls  a              restore block #
1CFB 2711             (/dd/sourcecode/as):05148                  beq   L1BD8          Yes, skip next bit
1CFD A7A818           (/dd/sourcecode/as):05149         L1BC5    sta   Wt.GBlk,y      save it into window table
1D00 EC8902BD         (/dd/sourcecode/as):05150                  ldd   >$02BD,x       get offset from global mem
1D04 EDA819           (/dd/sourcecode/as):05151                  std   Wt.GOff,y      save it as offset in window table
1D07 3430             (/dd/sourcecode/as):05152         L1BD1    pshs  y,x            Preserve regs
1D09 17F0C6           (/dd/sourcecode/as):05153                  lbsr  L0CEC          Update cursors in Grfdrv
1D0C 3530             (/dd/sourcecode/as):05154                  puls  y,x            Restore regs
                      (/dd/sourcecode/as):05155         
     1D0E             (/dd/sourcecode/as):05156         L1BD8    equ   *
                      (/dd/sourcecode/as):05157                IFNE  H6309
                      (/dd/sourcecode/as):05158                  ldq   ,s             get X&Y coords
                      (/dd/sourcecode/as):05159                  stq   >GrfMem+gr005B save them in grfdrv mem
                      (/dd/sourcecode/as):05160                ELSE
1D0E EC62             (/dd/sourcecode/as):05161                  ldd   2,s            get X&Y coords & save them in grfdrv mem
1D10 FD115D           (/dd/sourcecode/as):05162                  std   >GrfMem+gr005B+2
1D13 FD11B5           (/dd/sourcecode/as):05163                  std   >GrfMem+gr00B5
1D16 ECE4             (/dd/sourcecode/as):05164                  ldd   ,s
1D18 FD115B           (/dd/sourcecode/as):05165                  std   >GrfMem+gr005B 
                      (/dd/sourcecode/as):05166                ENDC
1D1B C644             (/dd/sourcecode/as):05167                  ldb   #$44           get function call for PutGC
1D1D 3420             (/dd/sourcecode/as):05168                  pshs  y              Preserve regs
1D1F 17E669           (/dd/sourcecode/as):05169                  lbsr  L0101          Put mouse cursor on screen
1D22 3520             (/dd/sourcecode/as):05170                  puls  y              Restore regs
1D24 6D64             (/dd/sourcecode/as):05171                  tst   4,s            Was gfx cursor in window same as in gfx table?
1D26 2721             (/dd/sourcecode/as):05172                  beq   L1C16          Yes, skip ahead
1D28 FE1020           (/dd/sourcecode/as):05173                  ldu   >WGlobal+G.CurDev  No, get ptr to current device
1D2B 17EA27           (/dd/sourcecode/as):05174                  lbsr  L06B9          get pointer to graphics tables for this window
1D2E A60B             (/dd/sourcecode/as):05175                  lda   Gt.GBlk,x      Get gfx table block # for gfx cursor
1D30 260C             (/dd/sourcecode/as):05176                  bne   L1C07          There is one, make the it the same in window table
1D32 A6A818           (/dd/sourcecode/as):05177                  lda   Wt.GBlk,y      Isn't one, copy from window table to gfx table
1D35 A70B             (/dd/sourcecode/as):05178                  sta   Gt.GBlk,x
1D37 ECA819           (/dd/sourcecode/as):05179                  ldd   Wt.GOff,y
1D3A ED0C             (/dd/sourcecode/as):05180                  std   Gt.GOff,x
1D3C 2008             (/dd/sourcecode/as):05181                  bra   L1C11          Go update the cursors on screen
                      (/dd/sourcecode/as):05182         
1D3E A7A818           (/dd/sourcecode/as):05183         L1C07    sta   Wt.GBlk,y      set block # of graphics cursor in window table
1D41 EC0C             (/dd/sourcecode/as):05184                  ldd   Gt.GOff,x      get offset into block
1D43 EDA819           (/dd/sourcecode/as):05185                  std   Wt.GOff,y
1D46 17F089           (/dd/sourcecode/as):05186         L1C11    lbsr  L0CEC          Update cursors in GrfDrv
1D49 3265             (/dd/sourcecode/as):05187         L1C16    leas  5,s            Eat stack & return
1D4B 39               (/dd/sourcecode/as):05188                  rts   
                      (/dd/sourcecode/as):05189         
                      (/dd/sourcecode/as):05190         * Check if mouse is in current window (DWSet area)
                      (/dd/sourcecode/as):05191         * Entry: X=pointer to current mouse coordinates in mouse packet
                      (/dd/sourcecode/as):05192         *        Y=Pointer to window table
                      (/dd/sourcecode/as):05193         * Stack use: 0,s   current window table pointer
                      (/dd/sourcecode/as):05194         *            2,s   window start cords.
                      (/dd/sourcecode/as):05195         *            4,s   window size
1D4C 327A             (/dd/sourcecode/as):05196         L1C19    leas  -6,s           make a buffer
1D4E 10AFE4           (/dd/sourcecode/as):05197                  sty   ,s             save window table pointer
1D51 31A826           (/dd/sourcecode/as):05198                  leay  Wt.DfCPX,y     point to window default co-ordinates
1D54 8D73             (/dd/sourcecode/as):05199                  bsr   L1C84          calculate co-ordinates
1D56 2009             (/dd/sourcecode/as):05200                  bra   L1C2E          go calculate it
                      (/dd/sourcecode/as):05201         
                      (/dd/sourcecode/as):05202         * Check if mouse is in current working area (CWArea)
                      (/dd/sourcecode/as):05203         * Entry: X=pointer to current mouse coordinates in mouse packet
                      (/dd/sourcecode/as):05204         *        Y=Pointer to window table
                      (/dd/sourcecode/as):05205         * Stack use: 0,s   current window table pointer
                      (/dd/sourcecode/as):05206         *            2,s   window start cords.
                      (/dd/sourcecode/as):05207         *            4,s   window size
                      (/dd/sourcecode/as):05208         * Exit: Carry clear - on current window area
                      (/dd/sourcecode/as):05209         *       Carry set, off of current window area
                      (/dd/sourcecode/as):05210         * Preserves X
1D58 327A             (/dd/sourcecode/as):05211         L1C25    leas  -6,s           make a buffer
1D5A 10AFE4           (/dd/sourcecode/as):05212                  sty   ,s             save window table pointer
1D5D 3135             (/dd/sourcecode/as):05213                  leay  Wt.CPX,y       point to current window co-ordinates
1D5F 8D46             (/dd/sourcecode/as):05214                  bsr   L1C64          (preserves X)
1D61 E662             (/dd/sourcecode/as):05215         L1C2E    ldb   2,s            get window X co-ordinate max.
1D63 4F               (/dd/sourcecode/as):05216                  clra                 Multiply x 8
                      (/dd/sourcecode/as):05217                IFNE  H6309
                      (/dd/sourcecode/as):05218                  lsld  
                      (/dd/sourcecode/as):05219                  lsld  
                      (/dd/sourcecode/as):05220                  lsld  
                      (/dd/sourcecode/as):05221                ELSE
1D64 58               (/dd/sourcecode/as):05222                  lslb  
1D65 49               (/dd/sourcecode/as):05223                  rola  
1D66 58               (/dd/sourcecode/as):05224                  lslb  
1D67 49               (/dd/sourcecode/as):05225                  rola  
1D68 58               (/dd/sourcecode/as):05226                  lslb  
1D69 49               (/dd/sourcecode/as):05227                  rola  
                      (/dd/sourcecode/as):05228                ENDC
1D6A 10A384           (/dd/sourcecode/as):05229                  cmpd  ,x             higher or lower than current mouse X co-ordinate
1D6D 2231             (/dd/sourcecode/as):05230                  bhi   L1C5D          higher not in window, return carry set
1D6F E662             (/dd/sourcecode/as):05231                  ldb   $02,s          get window X co-ordinate
1D71 EB64             (/dd/sourcecode/as):05232                  addb  $04,s          add it to size
1D73 4F               (/dd/sourcecode/as):05233                  clra                 Multiply x 8
                      (/dd/sourcecode/as):05234                IFNE  H6309
                      (/dd/sourcecode/as):05235                  lsld  
                      (/dd/sourcecode/as):05236                  lsld  
                      (/dd/sourcecode/as):05237                  lsld  
                      (/dd/sourcecode/as):05238                ELSE
1D74 58               (/dd/sourcecode/as):05239                  lslb  
1D75 49               (/dd/sourcecode/as):05240                  rola  
1D76 58               (/dd/sourcecode/as):05241                  lslb  
1D77 49               (/dd/sourcecode/as):05242                  rola  
1D78 58               (/dd/sourcecode/as):05243                  lslb  
1D79 49               (/dd/sourcecode/as):05244                  rola  
                      (/dd/sourcecode/as):05245                ENDC
1D7A 10A384           (/dd/sourcecode/as):05246                  cmpd  ,x             within range?
1D7D 2321             (/dd/sourcecode/as):05247                  bls   L1C5D
                      (/dd/sourcecode/as):05248         * Check if mouse is within range of maximum Y co-ordinate of window
1D7F E663             (/dd/sourcecode/as):05249                  ldb   $03,s          get 
1D81 4F               (/dd/sourcecode/as):05250                  clra                 Multiply x 8
                      (/dd/sourcecode/as):05251                IFNE  H6309
                      (/dd/sourcecode/as):05252                  lsld  
                      (/dd/sourcecode/as):05253                  lsld  
                      (/dd/sourcecode/as):05254                  lsld  
                      (/dd/sourcecode/as):05255                ELSE
1D82 58               (/dd/sourcecode/as):05256                  lslb  
1D83 49               (/dd/sourcecode/as):05257                  rola  
1D84 58               (/dd/sourcecode/as):05258                  lslb  
1D85 49               (/dd/sourcecode/as):05259                  rola  
1D86 58               (/dd/sourcecode/as):05260                  lslb  
1D87 49               (/dd/sourcecode/as):05261                  rola  
                      (/dd/sourcecode/as):05262                ENDC
1D88 10A302           (/dd/sourcecode/as):05263                  cmpd  $02,x
1D8B 2213             (/dd/sourcecode/as):05264                  bhi   L1C5D
                      (/dd/sourcecode/as):05265         * Check if mouse is within Y lower range of window
1D8D E663             (/dd/sourcecode/as):05266                  ldb   $03,s          get Y co-ordinate of window
1D8F EB65             (/dd/sourcecode/as):05267                  addb  $05,s          add in the size
1D91 4F               (/dd/sourcecode/as):05268                  clra                 Multiply x 8
                      (/dd/sourcecode/as):05269                IFNE  H6309
                      (/dd/sourcecode/as):05270                  lsld  
                      (/dd/sourcecode/as):05271                  lsld  
                      (/dd/sourcecode/as):05272                  lsld  
                      (/dd/sourcecode/as):05273                ELSE
1D92 58               (/dd/sourcecode/as):05274                  lslb  
1D93 49               (/dd/sourcecode/as):05275                  rola  
1D94 58               (/dd/sourcecode/as):05276                  lslb  
1D95 49               (/dd/sourcecode/as):05277                  rola  
1D96 58               (/dd/sourcecode/as):05278                  lslb  
1D97 49               (/dd/sourcecode/as):05279                  rola  
                      (/dd/sourcecode/as):05280                ENDC
1D98 10A302           (/dd/sourcecode/as):05281                  cmpd  $02,x          higher or lower than current mouse Y co-ordinate?
1D9B 2303             (/dd/sourcecode/as):05282                  bls   L1C5D          lower, return mouse off window
1D9D 4F               (/dd/sourcecode/as):05283                  clra                 flag mouse pointer is on this window
1D9E 2001             (/dd/sourcecode/as):05284                  bra   L1C5E          return
                      (/dd/sourcecode/as):05285         
1DA0 43               (/dd/sourcecode/as):05286         L1C5D    coma                 flag pointer is off this window
1DA1 10AEE4           (/dd/sourcecode/as):05287         L1C5E    ldy   ,s             restore window table pointer
1DA4 3266             (/dd/sourcecode/as):05288                  leas  6,s            purge stack
1DA6 39               (/dd/sourcecode/as):05289                  rts                  return
                      (/dd/sourcecode/as):05290         
1DA7 3410             (/dd/sourcecode/as):05291         L1C64    pshs  x              preserve pointer to mouse working co-ordinates
1DA9 3420             (/dd/sourcecode/as):05292                  pshs  y              save pointer to window X/Y start co-ordinates
1DAB 10AE66           (/dd/sourcecode/as):05293                  ldy   6,s            get window table pointer
1DAE EC35             (/dd/sourcecode/as):05294                  ldd   Wt.CPX,y       get current X & Y start co-ordinates
                      (/dd/sourcecode/as):05295                IFNE  H6309
                      (/dd/sourcecode/as):05296                  ldw   Wt.LStDf,y     get screen logical start of full window
                      (/dd/sourcecode/as):05297                  cmpw  Wt.LStrt,y     match current working area?
                      (/dd/sourcecode/as):05298                ELSE
1DB0 3410             (/dd/sourcecode/as):05299                  pshs  x
1DB2 AEA824           (/dd/sourcecode/as):05300                  ldx   Wt.LStDf,y     get screen logical start of full window
1DB5 BF11B5           (/dd/sourcecode/as):05301                  stx   >GrfMem+gr00B5
1DB8 AC33             (/dd/sourcecode/as):05302                  cmpx  Wt.LStrt,y     match current working area?
1DBA 3510             (/dd/sourcecode/as):05303                  puls  x
                      (/dd/sourcecode/as):05304                ENDC
1DBC 2707             (/dd/sourcecode/as):05305                  beq   L1C80          yes, skip ahead
1DBE E3A826           (/dd/sourcecode/as):05306                  addd  Wt.DfCPX,y     add current X/Y start to actual X/Y start
1DC1 3520             (/dd/sourcecode/as):05307                  puls  y
1DC3 2008             (/dd/sourcecode/as):05308                  bra   L1C88
                      (/dd/sourcecode/as):05309         
1DC5 3520             (/dd/sourcecode/as):05310         L1C80    puls  y              restore pointer to window X/Y start coords
1DC7 2002             (/dd/sourcecode/as):05311                  bra   L1C86          skip ahead
                      (/dd/sourcecode/as):05312         
1DC9 3410             (/dd/sourcecode/as):05313         L1C84    pshs  x              preserve pointer to mouse working coords
1DCB ECA4             (/dd/sourcecode/as):05314         L1C86    ldd   ,y             get active window start X/Y default coords
1DCD ED66             (/dd/sourcecode/as):05315         L1C88    std   6,s            save 'em
1DCF EC22             (/dd/sourcecode/as):05316                  ldd   2,y            get active window default sizes
1DD1 ED68             (/dd/sourcecode/as):05317                  std   8,s            save 'em
1DD3 AE64             (/dd/sourcecode/as):05318                  ldx   4,s            get current window table pointer
1DD5 A612             (/dd/sourcecode/as):05319                  lda   Wt.BLnk,x      this a overlay window?
1DD7 2B25             (/dd/sourcecode/as):05320                  bmi   L1CBA          no we are the only window, return
1DD9 8D25             (/dd/sourcecode/as):05321         L1C94    bsr   L1CBC          get window table pointer to the parent window
1DDB A612             (/dd/sourcecode/as):05322                  lda   Wt.BLnk,x      we at the bottom of the pile?
1DDD 2AFA             (/dd/sourcecode/as):05323                  bpl   L1C94          no, keep going
1DDF EC66             (/dd/sourcecode/as):05324                  ldd   $06,s          get active window start coords
                      (/dd/sourcecode/as):05325                IFNE  H6309
                      (/dd/sourcecode/as):05326                  ldw   Wt.LStDf,x     get window logical start
                      (/dd/sourcecode/as):05327                  cmpw  Wt.LStrt,x     same as current working area?
                      (/dd/sourcecode/as):05328                ELSE
1DE1 3420             (/dd/sourcecode/as):05329                  pshs  y
1DE3 10AE8824         (/dd/sourcecode/as):05330                  ldy   Wt.LStDf,x     get window logical start
1DE7 10BF11B5         (/dd/sourcecode/as):05331                  sty   >GrfMem+gr00B5
1DEB 10AC13           (/dd/sourcecode/as):05332                  cmpy  Wt.LStrt,x     same as current working area?
1DEE 3520             (/dd/sourcecode/as):05333                  puls  y
                      (/dd/sourcecode/as):05334                ENDC
1DF0 2605             (/dd/sourcecode/as):05335                  bne   L1CB1          no, skip ahead
1DF2 E38826           (/dd/sourcecode/as):05336                  addd  Wt.DfCPX,x     add the start coord defaults of parent window
1DF5 2005             (/dd/sourcecode/as):05337                  bra   L1CB8          save & return
                      (/dd/sourcecode/as):05338         
1DF7 E38826           (/dd/sourcecode/as):05339         L1CB1    addd  Wt.DfCPX,x     Add to original window default X,Y coord start
1DFA E315             (/dd/sourcecode/as):05340                  addd  Wt.CPX,x       add current window X,Y start coords of parent window
1DFC ED66             (/dd/sourcecode/as):05341         L1CB8    std   $06,s          save window start coords
1DFE 3590             (/dd/sourcecode/as):05342         L1CBA    puls  x,pc           restore & return
                      (/dd/sourcecode/as):05343         
                      (/dd/sourcecode/as):05344         * Get pointer to window table entry
                      (/dd/sourcecode/as):05345         * Entry: A=Window table entry #
                      (/dd/sourcecode/as):05346         * Exit : X=Pointer to window table entry
1E00 C640             (/dd/sourcecode/as):05347         L1CBC    ldb   #Wt.Siz        get size of entrys
1E02 3D               (/dd/sourcecode/as):05348                  mul                  calculate offset
1E03 8E1290           (/dd/sourcecode/as):05349                  ldx   #WinBase       Point X to window table start
                      (/dd/sourcecode/as):05350                IFNE  H6309
                      (/dd/sourcecode/as):05351                  addr  d,x            add offset
                      (/dd/sourcecode/as):05352                ELSE
1E06 308B             (/dd/sourcecode/as):05353                  leax  d,x            add offset
                      (/dd/sourcecode/as):05354                ENDC
1E08 39               (/dd/sourcecode/as):05355                  rts                  return
                      (/dd/sourcecode/as):05356         
                      (/dd/sourcecode/as):05357         * Update mouse packet pointer status based on where it is (called from VTIO)
                      (/dd/sourcecode/as):05358         * Entry: None
1E09 17E90C           (/dd/sourcecode/as):05359         L1CC8    lbsr  L06A0          verify window (don't care about errors)
1E0C 8D60             (/dd/sourcecode/as):05360                  bsr   L1D24          copy current mouse coords to work area
1E0E 3410             (/dd/sourcecode/as):05361                  pshs  x              save pointer to mouse packet
1E10 308820           (/dd/sourcecode/as):05362                  leax  Pt.Siz,x       point to working coord copies
1E13 17FF42           (/dd/sourcecode/as):05363                  lbsr  L1C25          mouse in menu bar area?
1E16 250A             (/dd/sourcecode/as):05364                  bcs   L1CE2          yes, clear relative coords from mouse packet
1E18 8D1B             (/dd/sourcecode/as):05365                  bsr   L1CFA          update window relative mouse coords
1E1A 4F               (/dd/sourcecode/as):05366                  clra                 get code for content region
1E1B 3510             (/dd/sourcecode/as):05367         L1CDD    puls  x              restore mouse packet pointer
1E1D A78816           (/dd/sourcecode/as):05368                  sta   Pt.Stat,x      save pointer type
1E20 5F               (/dd/sourcecode/as):05369                  clrb                 clear errors
1E21 39               (/dd/sourcecode/as):05370                  rts   
                      (/dd/sourcecode/as):05371         
                      (/dd/sourcecode/as):05372         * Mouse is either in control region or off window, calculate which
     1E22             (/dd/sourcecode/as):05373         L1CE2    equ   *
                      (/dd/sourcecode/as):05374                IFNE  H6309
                      (/dd/sourcecode/as):05375                  clrd
                      (/dd/sourcecode/as):05376                  clrw  
                      (/dd/sourcecode/as):05377                  stq   -4,x           clear out relative coords in mouse packet
                      (/dd/sourcecode/as):05378                ELSE
1E22 4F               (/dd/sourcecode/as):05379                  clra
1E23 5F               (/dd/sourcecode/as):05380                  clrb
1E24 FD11B5           (/dd/sourcecode/as):05381                  std   >GrfMem+gr00B5 clear out relative coords in mouse packet
1E27 ED1C             (/dd/sourcecode/as):05382                  std   -4,x
1E29 ED1E             (/dd/sourcecode/as):05383                  std   -2,x
                      (/dd/sourcecode/as):05384                ENDC
1E2B 17FF1E           (/dd/sourcecode/as):05385                  lbsr  L1C19          mouse on window?
1E2E 8601             (/dd/sourcecode/as):05386                  lda   #WR.Cntrl      Default to Control Region (doesn't affect carry)
1E30 24E9             (/dd/sourcecode/as):05387                  bcc   L1CDD          Yes, leave flag alone
1E32 4C               (/dd/sourcecode/as):05388                  inca                 Not on window, change flag to 2
1E33 20E6             (/dd/sourcecode/as):05389                  bra   L1CDD
                      (/dd/sourcecode/as):05390         
                      (/dd/sourcecode/as):05391         * Update window relative coords in mouse packet
                      (/dd/sourcecode/as):05392         * Entry: X=Ptr to mouse working coords
                      (/dd/sourcecode/as):05393         *        Y=Ptr to current window table
1E35 327A             (/dd/sourcecode/as):05394         L1CFA    leas  -6,s           make a buffer
1E37 10AFE4           (/dd/sourcecode/as):05395                  sty   ,s             save window table pointer
1E3A 3135             (/dd/sourcecode/as):05396                  leay  Wt.CPX,y       point to current window start coords
1E3C 17FF68           (/dd/sourcecode/as):05397                  lbsr  L1C64          calculate window 
1E3F E662             (/dd/sourcecode/as):05398                  ldb   2,s            get window X size
1E41 4F               (/dd/sourcecode/as):05399                  clra                 Multiply x 8
                      (/dd/sourcecode/as):05400                IFNE  H6309
                      (/dd/sourcecode/as):05401                  lsld  
                      (/dd/sourcecode/as):05402                  lsld  
                      (/dd/sourcecode/as):05403                  lsld  
                      (/dd/sourcecode/as):05404                  ldw   ,x             get current mouse X coord
                      (/dd/sourcecode/as):05405                  subr  d,w            subtract it from size
                      (/dd/sourcecode/as):05406                  stw   -4,x           save window relative X coord in mouse packet
                      (/dd/sourcecode/as):05407                ELSE
1E42 58               (/dd/sourcecode/as):05408                  lslb  
1E43 49               (/dd/sourcecode/as):05409                  rola  
1E44 58               (/dd/sourcecode/as):05410                  lslb  
1E45 49               (/dd/sourcecode/as):05411                  rola  
1E46 58               (/dd/sourcecode/as):05412                  lslb  
1E47 49               (/dd/sourcecode/as):05413                  rola  
1E48 3406             (/dd/sourcecode/as):05414                  pshs  d
1E4A EC84             (/dd/sourcecode/as):05415                  ldd   ,x             get current mouse X coord
1E4C A3E4             (/dd/sourcecode/as):05416                  subd  ,s             subtract it from size
1E4E ED1C             (/dd/sourcecode/as):05417                  std   -4,x           save window relative X coord in mouse packet
1E50 3506             (/dd/sourcecode/as):05418                  puls  d
                      (/dd/sourcecode/as):05419                ENDC
1E52 E663             (/dd/sourcecode/as):05420                  ldb   3,s            get window Y size
1E54 4F               (/dd/sourcecode/as):05421                  clra                 Multiply x 8
                      (/dd/sourcecode/as):05422                IFNE  H6309
                      (/dd/sourcecode/as):05423                  lsld  
                      (/dd/sourcecode/as):05424                  lsld  
                      (/dd/sourcecode/as):05425                  lsld  
                      (/dd/sourcecode/as):05426                  ldw   2,x            get current mouse Y coord
                      (/dd/sourcecode/as):05427                  subr  d,w            subtract it from size
                      (/dd/sourcecode/as):05428                  stw   -2,x           save window relative Y coord in mouse packet
                      (/dd/sourcecode/as):05429                ELSE
1E55 58               (/dd/sourcecode/as):05430                  lslb  
1E56 49               (/dd/sourcecode/as):05431                  rola  
1E57 58               (/dd/sourcecode/as):05432                  lslb  
1E58 49               (/dd/sourcecode/as):05433                  rola  
1E59 58               (/dd/sourcecode/as):05434                  lslb  
1E5A 49               (/dd/sourcecode/as):05435                  rola  
1E5B 3406             (/dd/sourcecode/as):05436                  pshs  d
1E5D EC02             (/dd/sourcecode/as):05437                  ldd   2,x            get current mouse Y coord
1E5F A3E4             (/dd/sourcecode/as):05438                  subd  ,s             subtract it from size
1E61 FD11B5           (/dd/sourcecode/as):05439                  std   >GrfMem+gr00B5
1E64 ED1E             (/dd/sourcecode/as):05440                  std   -2,x           save window relative Y coord in mouse packet
1E66 3506             (/dd/sourcecode/as):05441                  puls  d
                      (/dd/sourcecode/as):05442                ENDC
1E68 10AEE4           (/dd/sourcecode/as):05443                  ldy   ,s             get window table pointer
1E6B 3266             (/dd/sourcecode/as):05444                  leas  6,s            purge stack & return
1E6D 39               (/dd/sourcecode/as):05445                  rts
                      (/dd/sourcecode/as):05446         
                      (/dd/sourcecode/as):05447         * Copy current mouse coords to working area
1E6E 8E103C           (/dd/sourcecode/as):05448         L1D24    ldx   #WGlobal+G.Mouse Point to mouse packet in global mem
                      (/dd/sourcecode/as):05449                IFNE  H6309
                      (/dd/sourcecode/as):05450                  ldq   Pt.AcX,x       get current mouse coords
                      (/dd/sourcecode/as):05451                  tim   #$01,[Wt.STbl,y] 640 pixel wide screen?
                      (/dd/sourcecode/as):05452                ELSE
1E71 EC881A           (/dd/sourcecode/as):05453                  ldd   Pt.AcY,x       Copy current mouse Y coord 
1E74 FD11B5           (/dd/sourcecode/as):05454                  std   >GrfMem+gr00B5
1E77 EC8818           (/dd/sourcecode/as):05455                  ldd   Pt.AcX,x       Get current mouse X coord
1E7A 3402             (/dd/sourcecode/as):05456                  pshs  a
1E7C A6B8F0           (/dd/sourcecode/as):05457                  lda   [Wt.STbl,y]    640 pixel wide screen?
1E7F 8401             (/dd/sourcecode/as):05458                  anda  #$01
1E81 3502             (/dd/sourcecode/as):05459                  puls  a
                      (/dd/sourcecode/as):05460                ENDC
1E83 2602             (/dd/sourcecode/as):05461                  bne   L1D47          yes, skip ahead
                      (/dd/sourcecode/as):05462                IFNE  H6309
                      (/dd/sourcecode/as):05463                  lsrd                 320, divide X coord by 2
1E85                  (/dd/sourcecode/as):05464         L1D47    stq   Pt.Siz,x       Save X&Y coords in working area (g005C/g005E)
                      (/dd/sourcecode/as):05465                ELSE
1E85 44               (/dd/sourcecode/as):05466                  lsra                 320, divide X coord by 2
1E86 56               (/dd/sourcecode/as):05467                  rorb
1E87 3406             (/dd/sourcecode/as):05468         L1D47    pshs  d
1E89 FC11B5           (/dd/sourcecode/as):05469                  ldd   >GrfMem+gr00B5
1E8C ED8822           (/dd/sourcecode/as):05470                  std   Pt.Siz+2,x     Save Y coord in working area (g005E)
1E8F 3506             (/dd/sourcecode/as):05471                  puls  d
1E91 ED8820           (/dd/sourcecode/as):05472                  std   Pt.Siz,x       Save X coord in working area (g005C)
                      (/dd/sourcecode/as):05473                ENDC
1E94 39               (/dd/sourcecode/as):05474                  rts              return
                      (/dd/sourcecode/as):05475         
                      (/dd/sourcecode/as):05476                  ENDC
                      (/dd/sourcecode/as):05477         
                      (/dd/sourcecode/as):05478         ****************************
                      (/dd/sourcecode/as):05479         * Scale/DWProtSw/TCharSw/BoldSw
1E95                  (/dd/sourcecode/as):05480         DWProtSw
1E95                  (/dd/sourcecode/as):05481         TCharSw
1E95                  (/dd/sourcecode/as):05482         BoldSw
1E95                  (/dd/sourcecode/as):05483         PropSw
1E95 17E880           (/dd/sourcecode/as):05484         ScaleSw  lbsr  L06A0          verify window table
1E98 2517             (/dd/sourcecode/as):05485                  bcs   NoWind         not good, return error
1E9A A684             (/dd/sourcecode/as):05486                  lda   ,x             Get switch
1E9C BE100C           (/dd/sourcecode/as):05487                  ldx   >WGlobal+G.CurDvM   Get current devices' static mem ptr
1E9F E68837           (/dd/sourcecode/as):05488                  ldb   V.CallCde,x    Get which switch we will be setting
1EA2 C022             (/dd/sourcecode/as):05489                  subb  #$22           Bump down to 0-8 range
1EA4 2A01             (/dd/sourcecode/as):05490                  bpl   doswitch       If anything but DWProtSW, skip ahead
1EA6 5F               (/dd/sourcecode/as):05491                  clrb                 0=DWProtSW
1EA7 308C0A           (/dd/sourcecode/as):05492         doswitch leax  <SwtchTbl,pc   Point to switch table
1EAA 4D               (/dd/sourcecode/as):05493                  tsta                 On or Off?
1EAB 2602             (/dd/sourcecode/as):05494                  bne   SwOn           On, go do
1EAD 300A             (/dd/sourcecode/as):05495                  leax  10,x           Off, adjust for 2nd table
1EAF 6E85             (/dd/sourcecode/as):05496         SwOn     jmp   b,x            Go set/reset bit flag
                      (/dd/sourcecode/as):05497         
1EB1 C6C4             (/dd/sourcecode/as):05498         NoWind   ldb   #E$WUndef      Window Undefined error
1EB3 39               (/dd/sourcecode/as):05499                  rts   
                      (/dd/sourcecode/as):05500         
                      (/dd/sourcecode/as):05501         * Table for switches
1EB4 2012             (/dd/sourcecode/as):05502         SwtchTbl bra   DProtOn        Device window protect On
1EB6 2028             (/dd/sourcecode/as):05503                  bra   TChrOn         Transparent chars On
1EB8 202E             (/dd/sourcecode/as):05504                  bra   PropOn         Proportional On
1EBA 203C             (/dd/sourcecode/as):05505                  bra   ScaleOn        Scaling On
1EBC 204A             (/dd/sourcecode/as):05506                  bra   BoldOn         Bold On
1EBE 2010             (/dd/sourcecode/as):05507                  bra   DProtOff       Device window protect Off
1EC0 2016             (/dd/sourcecode/as):05508                  bra   TChrOff        Transparent chars Off
1EC2 202C             (/dd/sourcecode/as):05509                  bra   PropOff        Proportional Off
1EC4 203A             (/dd/sourcecode/as):05510                  bra   ScaleOff       Scaling Off
1EC6 2048             (/dd/sourcecode/as):05511                  bra   BoldOff        Bold Off
                      (/dd/sourcecode/as):05512         
     1EC8             (/dd/sourcecode/as):05513         DProtOn  equ    *
                      (/dd/sourcecode/as):05514                IFNE  H6309
                      (/dd/sourcecode/as):05515                  oim   #Protect,Wt.BSW,y Turn Device window protect on
                      (/dd/sourcecode/as):05516                ELSE
1EC8 E629             (/dd/sourcecode/as):05517                  ldb   Wt.BSW,y       Turn Device window protect on
1ECA CA01             (/dd/sourcecode/as):05518                  orb   #Protect
1ECC E729             (/dd/sourcecode/as):05519                  stb   Wt.BSW,y
                      (/dd/sourcecode/as):05520                ENDC
1ECE 5F               (/dd/sourcecode/as):05521                  clrb                 No error & return
1ECF 39               (/dd/sourcecode/as):05522                  rts   
                      (/dd/sourcecode/as):05523         
     1ED0             (/dd/sourcecode/as):05524         DProtOff equ    *
                      (/dd/sourcecode/as):05525                IFNE  H6309
                      (/dd/sourcecode/as):05526                  aim   #^Protect,Wt.BSW,y Turn Device window protect off
                      (/dd/sourcecode/as):05527                ELSE
1ED0 E629             (/dd/sourcecode/as):05528                  ldb   Wt.BSW,y       Turn Device window protect off
1ED2 C4FE             (/dd/sourcecode/as):05529                  andb  #^Protect
1ED4 E729             (/dd/sourcecode/as):05530                  stb   Wt.BSW,y
                      (/dd/sourcecode/as):05531                ENDC
1ED6 5F               (/dd/sourcecode/as):05532                  clrb                 No error & return
1ED7 39               (/dd/sourcecode/as):05533                  rts   
                      (/dd/sourcecode/as):05534         
     1ED8             (/dd/sourcecode/as):05535         TChrOff  equ    *
                      (/dd/sourcecode/as):05536                IFNE  H6309
                      (/dd/sourcecode/as):05537                  oim   #TChr,Wt.BSW,y Turn Transparency off
                      (/dd/sourcecode/as):05538                ELSE
1ED8 E629             (/dd/sourcecode/as):05539                  ldb   Wt.BSW,y       Turn Transparency off
1EDA CA80             (/dd/sourcecode/as):05540                  orb   #TChr
1EDC E729             (/dd/sourcecode/as):05541                  stb   Wt.BSW,y
                      (/dd/sourcecode/as):05542                ENDC
1EDE 5F               (/dd/sourcecode/as):05543                  clrb                 No error & return
1EDF 39               (/dd/sourcecode/as):05544                  rts   
                      (/dd/sourcecode/as):05545         
     1EE0             (/dd/sourcecode/as):05546         TChrOn   equ    *
                      (/dd/sourcecode/as):05547                IFNE  H6309
                      (/dd/sourcecode/as):05548                  aim   #^TChr,Wt.BSW,y Turn Transparency on
                      (/dd/sourcecode/as):05549                ELSE
1EE0 E629             (/dd/sourcecode/as):05550                  ldb   Wt.BSW,y       Turn Transparency on
1EE2 C47F             (/dd/sourcecode/as):05551                  andb  #^TChr
1EE4 E729             (/dd/sourcecode/as):05552                  stb   Wt.BSW,y
                      (/dd/sourcecode/as):05553                ENDC
1EE6 5F               (/dd/sourcecode/as):05554                  clrb                 No error & return
1EE7 39               (/dd/sourcecode/as):05555                  rts   
                      (/dd/sourcecode/as):05556         
     1EE8             (/dd/sourcecode/as):05557         PropOn   equ    *
                      (/dd/sourcecode/as):05558                IFNE  H6309
                      (/dd/sourcecode/as):05559                  oim   #Prop,Wt.BSW,y Turn Proportional on
                      (/dd/sourcecode/as):05560                ELSE
1EE8 E629             (/dd/sourcecode/as):05561                  ldb   Wt.BSW,y       Turn Proportional on
1EEA CA10             (/dd/sourcecode/as):05562                  orb   #Prop
1EEC E729             (/dd/sourcecode/as):05563                  stb   Wt.BSW,y
                      (/dd/sourcecode/as):05564                ENDC
1EEE 5F               (/dd/sourcecode/as):05565                  clrb                 No error & return
1EEF 39               (/dd/sourcecode/as):05566                  rts   
                      (/dd/sourcecode/as):05567         
     1EF0             (/dd/sourcecode/as):05568         PropOff  equ    *
                      (/dd/sourcecode/as):05569                IFNE  H6309
                      (/dd/sourcecode/as):05570                  aim   #^Prop,Wt.BSW,y Turn Proportional off
                      (/dd/sourcecode/as):05571                ELSE
1EF0 E629             (/dd/sourcecode/as):05572                  ldb   Wt.BSW,y       Turn Proportional off
1EF2 C4EF             (/dd/sourcecode/as):05573                  andb  #^Prop
1EF4 E729             (/dd/sourcecode/as):05574                  stb   Wt.BSW,y
                      (/dd/sourcecode/as):05575                ENDC
1EF6 5F               (/dd/sourcecode/as):05576                  clrb                 No error & return
1EF7 39               (/dd/sourcecode/as):05577                  rts   
                      (/dd/sourcecode/as):05578         
     1EF8             (/dd/sourcecode/as):05579         ScaleOn  equ    *
                      (/dd/sourcecode/as):05580                IFNE  H6309
                      (/dd/sourcecode/as):05581                  oim   #Scale,Wt.BSW,y Turn Scaling on
                      (/dd/sourcecode/as):05582                ELSE
1EF8 E629             (/dd/sourcecode/as):05583                  ldb   Wt.BSW,y       Turn Scaling on
1EFA CA08             (/dd/sourcecode/as):05584                  orb   #Scale
1EFC E729             (/dd/sourcecode/as):05585                  stb   Wt.BSW,y
                      (/dd/sourcecode/as):05586                ENDC
1EFE 5F               (/dd/sourcecode/as):05587                  clrb                 No error & return
1EFF 39               (/dd/sourcecode/as):05588                  rts   
                      (/dd/sourcecode/as):05589         
     1F00             (/dd/sourcecode/as):05590         ScaleOff equ    *
                      (/dd/sourcecode/as):05591                IFNE  H6309
                      (/dd/sourcecode/as):05592                  aim   #^Scale,Wt.BSW,y Turn Scaling off
                      (/dd/sourcecode/as):05593                ELSE
1F00 E629             (/dd/sourcecode/as):05594                  ldb   Wt.BSW,y       Turn Scaling off
1F02 C4F7             (/dd/sourcecode/as):05595                  andb  #^Scale
1F04 E729             (/dd/sourcecode/as):05596                  stb   Wt.BSW,y
                      (/dd/sourcecode/as):05597                ENDC
1F06 5F               (/dd/sourcecode/as):05598                  clrb                 No error & return
1F07 39               (/dd/sourcecode/as):05599                  rts   
                      (/dd/sourcecode/as):05600         
     1F08             (/dd/sourcecode/as):05601         BoldOn   equ    *
                      (/dd/sourcecode/as):05602                IFNE  H6309
                      (/dd/sourcecode/as):05603                  oim   #Bold,Wt.BSW,y Turn Bold on
                      (/dd/sourcecode/as):05604                ELSE
1F08 E629             (/dd/sourcecode/as):05605                  ldb   Wt.BSW,y       Turn Bold on
1F0A CA20             (/dd/sourcecode/as):05606                  orb   #Bold
1F0C E729             (/dd/sourcecode/as):05607                  stb   Wt.BSW,y
                      (/dd/sourcecode/as):05608                ENDC
1F0E 5F               (/dd/sourcecode/as):05609                  clrb                 No error & return
1F0F 39               (/dd/sourcecode/as):05610                  rts   
                      (/dd/sourcecode/as):05611         
     1F10             (/dd/sourcecode/as):05612         BoldOff  equ    *
                      (/dd/sourcecode/as):05613                IFNE  H6309
                      (/dd/sourcecode/as):05614                  aim   #^Bold,Wt.BSW,y Turn Bold off
                      (/dd/sourcecode/as):05615                ELSE
1F10 E629             (/dd/sourcecode/as):05616                  ldb   Wt.BSW,y       Turn Bold off
1F12 C4DF             (/dd/sourcecode/as):05617                  andb  #^Bold
1F14 E729             (/dd/sourcecode/as):05618                  stb   Wt.BSW,y
                      (/dd/sourcecode/as):05619                ENDC
1F16 5F               (/dd/sourcecode/as):05620                  clrb                 No error & return
1F17 39               (/dd/sourcecode/as):05621                  rts   
                      (/dd/sourcecode/as):05622         
                      (/dd/sourcecode/as):05623                IFNE  CoGrf-1
                      (/dd/sourcecode/as):05624         * FIXMENU - redos the graphics on the menu bar affected by menu pulldown
                      (/dd/sourcecode/as):05625         * Entry: X=Ptr to menu text (NUL terminated)
                      (/dd/sourcecode/as):05626         *        Y=Window table ptr
                      (/dd/sourcecode/as):05627         *        U=Ptr to menu handling table entry (4 byte packets)
                      (/dd/sourcecode/as):05628         *        B=Size of text to write (dont' need here)
                      (/dd/sourcecode/as):05629         *        A=End X coord of menu entry
                      (/dd/sourcecode/as):05630         * Exit: preserves x,y,u registers
                      (/dd/sourcecode/as):05631         * Stack offsets for temp stack:
     0000             (/dd/sourcecode/as):05632         fixcolor equ   0
     0001             (/dd/sourcecode/as):05633         fixstrtx equ   1
     0003             (/dd/sourcecode/as):05634         fixstrty equ   3
     0005             (/dd/sourcecode/as):05635         fixendx  equ   5
     0007             (/dd/sourcecode/as):05636         fixendy  equ   7
     0009             (/dd/sourcecode/as):05637         fixcode  equ   9
                      (/dd/sourcecode/as):05638         
                      (/dd/sourcecode/as):05639         * 1st, redo background
1F18 3416             (/dd/sourcecode/as):05640         FixMenu  pshs  d,x            Save # of chars & menu text ptr
1F1A 3276             (/dd/sourcecode/as):05641                  leas  -10,s          Make room on stack for graphics "chunk"
                      (/dd/sourcecode/as):05642                IFNE  H6309
                      (/dd/sourcecode/as):05643                  tfr   e,b            Move calculated End X coord to D
                      (/dd/sourcecode/as):05644                ELSE
1F1C F611B5           (/dd/sourcecode/as):05645                  ldb   >GrfMem+gr00B5 Move calculated End X coord to D
                      (/dd/sourcecode/as):05646                ENDC
1F1F A60F             (/dd/sourcecode/as):05647                  lda   MN.ID,x        Get menu ID #
1F21 8114             (/dd/sourcecode/as):05648                  cmpa  #MId.Tdy       Tandy menu (in which case E is fried)
1F23 2603             (/dd/sourcecode/as):05649                  bne   normalmn
1F25 E642             (/dd/sourcecode/as):05650                  ldb   MnuXEnd,u      Get real end coord
1F27 5C               (/dd/sourcecode/as):05651                  incb                 For space between it & next coord
                      (/dd/sourcecode/as):05652         * Draw 6 pixel high bar in middle
1F28 4F               (/dd/sourcecode/as):05653         normalmn clra  
                      (/dd/sourcecode/as):05654                IFNE  H6309
                      (/dd/sourcecode/as):05655                  lsld                 D=D*8 (for graphics X coord)
                      (/dd/sourcecode/as):05656                  lsld  
                      (/dd/sourcecode/as):05657                  lsld  
                      (/dd/sourcecode/as):05658                ELSE
1F29 58               (/dd/sourcecode/as):05659                  lslb                 D=D*8 (for graphics X coord)
1F2A 49               (/dd/sourcecode/as):05660                  rola
1F2B 58               (/dd/sourcecode/as):05661                  lslb
1F2C 49               (/dd/sourcecode/as):05662                  rola
1F2D 58               (/dd/sourcecode/as):05663                  lslb
1F2E 49               (/dd/sourcecode/as):05664                  rola
                      (/dd/sourcecode/as):05665                ENDC
1F2F ED65             (/dd/sourcecode/as):05666                  std   fixendx,s      Save End X Coord
                      (/dd/sourcecode/as):05667         * 6809/6309 LCB - This should be LDB #WColor1, since A not stored and reloaded with #1 anyways
1F31 C602             (/dd/sourcecode/as):05668                  ldb   #WColor1       Color 1
                      (/dd/sourcecode/as):05669         *         ldd   #WColor1       Color 1
1F33 E7E4             (/dd/sourcecode/as):05670                  stb   fixcolor,s     Save it
1F35 CC0001           (/dd/sourcecode/as):05671                  ldd   #1             Y Pix start=1 (added since WColor now changeable)
1F38 ED63             (/dd/sourcecode/as):05672                  std   fixstrty,s
1F3A C606             (/dd/sourcecode/as):05673                  ldb   #6             Save Y pixel end
1F3C ED67             (/dd/sourcecode/as):05674                  std   fixendy,s
1F3E E641             (/dd/sourcecode/as):05675                  ldb   MnuXStrt,u     Get start X coord
                      (/dd/sourcecode/as):05676                IFNE  H6309
                      (/dd/sourcecode/as):05677                  lsld                 D=X coord in pixels
                      (/dd/sourcecode/as):05678                  lsld  
                      (/dd/sourcecode/as):05679                  lsld  
                      (/dd/sourcecode/as):05680                ELSE
1F40 58               (/dd/sourcecode/as):05681                  lslb                 D=X coord in pixels
1F41 49               (/dd/sourcecode/as):05682                  rola
1F42 58               (/dd/sourcecode/as):05683                  lslb
1F43 49               (/dd/sourcecode/as):05684                  rola
1F44 58               (/dd/sourcecode/as):05685                  lslb
1F45 49               (/dd/sourcecode/as):05686                  rola
                      (/dd/sourcecode/as):05687                ENDC
1F46 ED61             (/dd/sourcecode/as):05688                  std   fixstrtx,s     Save X pixel start
1F48 CC014E           (/dd/sourcecode/as):05689                  ldd   #$014e         1 function & GRFDRV Bar function code
1F4B E769             (/dd/sourcecode/as):05690                  stb   fixcode,s
1F4D 30E4             (/dd/sourcecode/as):05691                  leax  ,s             Point to our "chunk"
1F4F 17F36C           (/dd/sourcecode/as):05692                  lbsr  DrawBar        Draw the top line again
                      (/dd/sourcecode/as):05693         * Now redo top line
1F52 8603             (/dd/sourcecode/as):05694                  lda   #WColor3       Color 3
1F54 A7E4             (/dd/sourcecode/as):05695                  sta   fixcolor,s
                      (/dd/sourcecode/as):05696                  IFNE  H6309
                      (/dd/sourcecode/as):05697                  clrd                 Y coord=0
                      (/dd/sourcecode/as):05698                  ELSE
1F56 4F               (/dd/sourcecode/as):05699                  clra
1F57 5F               (/dd/sourcecode/as):05700                  clrb
                      (/dd/sourcecode/as):05701                  ENDC
1F58 ED63             (/dd/sourcecode/as):05702                  std   fixstrty,s
1F5A ED67             (/dd/sourcecode/as):05703                  std   fixendy,s
1F5C CC014A           (/dd/sourcecode/as):05704                  ldd   #$014a         1 function & Draw line GRFDRV function code
1F5F E769             (/dd/sourcecode/as):05705                  stb   fixcode,s
1F61 30E4             (/dd/sourcecode/as):05706                  leax  ,s             Point to our "chunk"
1F63 17F358           (/dd/sourcecode/as):05707                  lbsr  DrawBar
                      (/dd/sourcecode/as):05708         * Now redo bottom line
1F66 8601             (/dd/sourcecode/as):05709                  lda   #WColor2       Color 2
1F68 A7E4             (/dd/sourcecode/as):05710                  sta   fixcolor,s
1F6A CC0007           (/dd/sourcecode/as):05711                  ldd   #7             Y coord=7
1F6D ED63             (/dd/sourcecode/as):05712                  std   fixstrty,s
1F6F ED67             (/dd/sourcecode/as):05713                  std   fixendy,s
1F71 CC014A           (/dd/sourcecode/as):05714                  ldd   #$014a         1 function & GRFDRV Draw Line function code
1F74 E769             (/dd/sourcecode/as):05715                  stb   fixcode,s
1F76 30E4             (/dd/sourcecode/as):05716                  leax  ,s             Point to our "chunk"
1F78 17F343           (/dd/sourcecode/as):05717                  lbsr  DrawBar
1F7B 326A             (/dd/sourcecode/as):05718                  leas  10,s           Restore stack
1F7D 3596             (/dd/sourcecode/as):05719                  puls  d,x,pc         Restore regs & return
                      (/dd/sourcecode/as):05720                  ENDC
                      (/dd/sourcecode/as):05721         
1F7F 46BD2B           (/dd/sourcecode/as):05722                  emod  
     1F82             (/dd/sourcecode/as):05723         eom      equ   *
                      (/dd/sourcecode/as):05724                  end
