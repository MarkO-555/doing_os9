                      (/home/strick/go/s):00001         ********************************************************************
                      (/home/strick/go/s):00002         * RBF - Random Block File Manager
                      (/home/strick/go/s):00003         *
                      (/home/strick/go/s):00004         * $Id$
                      (/home/strick/go/s):00005         *
                      (/home/strick/go/s):00006         * Modified for 6309 Native mode by Bill Nobel, L. Curtis Boyle & Wes Gale
                      (/home/strick/go/s):00007         *
                      (/home/strick/go/s):00008         * This also contains the patch for un-deleting files
                      (/home/strick/go/s):00009         *
                      (/home/strick/go/s):00010         * Undocumented SetStt/GetStt calls:
                      (/home/strick/go/s):00011         *
                      (/home/strick/go/s):00012         *     GetStt:
                      (/home/strick/go/s):00013         *         SS.FD ($0F) - Returns a file descriptor
                      (/home/strick/go/s):00014         *                          Entry: R$A=Path #
                      (/home/strick/go/s):00015         *                                 R$B=SS.FD ($0F)
                      (/home/strick/go/s):00016         *                                 R$X=Pointer to a 256 byte buffer
                      (/home/strick/go/s):00017         *                                 R$Y=# bytes of FD required
                      (/home/strick/go/s):00018         *         SS.FDInf ($20) - Directly reads a file descriptor from anywhere
                      (/home/strick/go/s):00019         *                          on drive.
                      (/home/strick/go/s):00020         *                          Entry: R$A=Path #
                      (/home/strick/go/s):00021         *                                 R$B=SS.FDInf ($20)
                      (/home/strick/go/s):00022         *                                 R$X=Pointer to a 256 byte buffer
                      (/home/strick/go/s):00023         *                                 R$Y= MSB - Length of read
                      (/home/strick/go/s):00024         *                                      LSB - MSB of logical sector #
                      (/home/strick/go/s):00025         *                                 R$U= LSW of logical sector #
                      (/home/strick/go/s):00026         *     SetStt:
                      (/home/strick/go/s):00027         *         SS.FD ($0F) - Writes a file descriptor
                      (/home/strick/go/s):00028         *                          Entry: R$A=Path #
                      (/home/strick/go/s):00029         *                                 R$B=SS.FD ($0F)
                      (/home/strick/go/s):00030         *                                 R$X=Pointer to a maximum 256 byte buffer
                      (/home/strick/go/s):00031         *                                 R$Y=# bytes of FD to write
                      (/home/strick/go/s):00032         *         SS.Ticks ($10) - Set # ticks to wait for record lock release
                      (/home/strick/go/s):00033         *                          Entry: R$A=Path #
                      (/home/strick/go/s):00034         *                                 R$B=SS.Ticks ($10)
                      (/home/strick/go/s):00035         *                                 R$X=# Ticks to wait
                      (/home/strick/go/s):00036         *         SS.Lock ($11) - Force Lock/Release of a file.
                      (/home/strick/go/s):00037         *                         Locks from current position to a specified size
                      (/home/strick/go/s):00038         *                          Entry: R$A=Path #
                      (/home/strick/go/s):00039         *                                 R$B=SS.Lock ($11)
                      (/home/strick/go/s):00040         *                                 R$X=LSW of end byte position
                      (/home/strick/go/s):00041         *                                 R$U=MSW of end byte position
                      (/home/strick/go/s):00042         *         SS.Attr ($1C) - Allows changing of file/directory attributes
                      (/home/strick/go/s):00043         *                         If changing directory attribute it scans to
                      (/home/strick/go/s):00044         *                         see if directory is empty.
                      (/home/strick/go/s):00045         *                          Entry: R$A=Path #
                      (/home/strick/go/s):00046         *                                 R$B=SS.Attr ($1C)
                      (/home/strick/go/s):00047         *                                 R$X= LSB - File attributes
                      (/home/strick/go/s):00048         *         SS.RsBit ($1E) - Reserve bitmap sector (doesn't allocate)
                      (/home/strick/go/s):00049         *                          Locks the bitmap sector from other programs
                      (/home/strick/go/s):00050         *                          so they cannot allocate in it.
                      (/home/strick/go/s):00051         *                          Useful when working in allocation map.
                      (/home/strick/go/s):00052         *                          Entry: R$A=Path #
                      (/home/strick/go/s):00053         *                                 R$B=SS.RsBit ($1E)
                      (/home/strick/go/s):00054         *                                 R$X= LSB - Sector # of bitmap
                      (/home/strick/go/s):00055         *
                      (/home/strick/go/s):00056         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/go/s):00057         * Comment
                      (/home/strick/go/s):00058         * ------------------------------------------------------------------
                      (/home/strick/go/s):00059         *          1993/09/19  ???
                      (/home/strick/go/s):00060         * Started putting in comments from buggy 1.09 code, fixed WP error
                      (/home/strick/go/s):00061         * bug on file delete, fixed FD read error bug in delete.
                      (/home/strick/go/s):00062         *
                      (/home/strick/go/s):00063         *          1994/07/15  ???
                      (/home/strick/go/s):00064         * Fixed long overdue LHA bug; modified M$Exec driver calls @ L11EB
                      (/home/strick/go/s):00065         * to use V$DRIVEX.
                      (/home/strick/go/s):00066         *
                      (/home/strick/go/s):00067         *          1994/07/27  ???
                      (/home/strick/go/s):00068         * Changed L11EB to just PSHS/PULS A,X,PC instead of D,X,PC (saves
                      (/home/strick/go/s):00069         * 2 cycles per driver call); changed BRA L12C6 @ L128E to PULS PC,U,X
                      (/home/strick/go/s):00070         *
                      (/home/strick/go/s):00071         *          ????/??/??  ???
                      (/home/strick/go/s):00072         * NitrOS-9 2.00 distribution.
                      (/home/strick/go/s):00073         *
                      (/home/strick/go/s):00074         *  35      ????/??/??  Gene Heskett
                      (/home/strick/go/s):00075         * Fixed FD.SEG bug.
                      (/home/strick/go/s):00076         *
                      (/home/strick/go/s):00077         *          2003/04/21  Boisy G. Pitre
                      (/home/strick/go/s):00078         * Folded RBF 30 comments into this version.
                      (/home/strick/go/s):00079         *
                      (/home/strick/go/s):00080         *  36      2003/05/01  Rodney V. Hamilton
                      (/home/strick/go/s):00081         * Fix for LSN0 DD.TOT=0 lockout problem
                      (/home/strick/go/s):00082         *
                      (/home/strick/go/s):00083         *  37      2004/06/18  Boisy G. Pitre
                      (/home/strick/go/s):00084         * Added call to driver's SS.VarSect GetStat in order to obtain the
                      (/home/strick/go/s):00085         * sector size of the media.
                      (/home/strick/go/s):00086         *
                      (/home/strick/go/s):00087         *  37r2    2004/07/18  Boisy G. Pitre
                      (/home/strick/go/s):00088         * RBF checks error code on return from SS.VarSect and only returns
                      (/home/strick/go/s):00089         * error if error code is != E$UnkSvc (fixes problems with drivers
                      (/home/strick/go/s):00090         * which do not support SS.VarSect and return E$UnkSvc in their GetStat
                      (/home/strick/go/s):00091         * routines after evaluating an unknown service code.)
                      (/home/strick/go/s):00092         *
                      (/home/strick/go/s):00093         *  37r3    2009/12/26  Boisy G. Pitre
                      (/home/strick/go/s):00094         * Moved SS.VarSect code down to fix a problem where code to call driver
                      (/home/strick/go/s):00095         * expected PD.Exten to be allocated when it wasn't, and that caused
                      (/home/strick/go/s):00096         * a write to PE.Prior to go into the system globals area (address $0016).
                      (/home/strick/go/s):00097         
                      (/home/strick/go/s):00098                  nam   RBF
                      (/home/strick/go/s):00099                  ttl   Random Block File Manager
                      (/home/strick/go/s):00100         
                      (/home/strick/go/s):00101                  ifp1  
                      (/home/strick/go/s):00102                  use   defsfile
                      (         defsfile):00001                  use   ../defsfile
     0002             (      ../defsfile):00001         Level    equ   2
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (            os9.d):00637         * and for bytes in the system memory map at D.SysMem.
                      (            os9.d):00638         * A value of 0 indicates an unused/unassigned block.
                      (            os9.d):00639         * In the code, block assignment often involves incrementing a value
                      (            os9.d):00640         * from 0 to 1 rather than explict use of RAMinUse.
                      (            os9.d):00641         *
     0080             (            os9.d):00642         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00643         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00644         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00645         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00646         *
                      (            os9.d):00647         * Service Dispatch Table special entries
                      (            os9.d):00648         *
     00FE             (            os9.d):00649         IOEntry        EQU       254
                      (            os9.d):00650         
                      (            os9.d):00651                        ENDC      
                      (            os9.d):00652         
                      (            os9.d):00653                        TTL       Structure Formats
                      (            os9.d):00654                        PAG       
                      (            os9.d):00655         ************************************
                      (            os9.d):00656         * Module Directory Entry Definitions
                      (            os9.d):00657         *
                      (            os9.d):00658                        ORG       0
                      (            os9.d):00659                        IFGT      Level-1
0000                  (            os9.d):00660         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00661         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00662                        ENDC      
0004                  (            os9.d):00663         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00664         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00665         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00666         
                      (            os9.d):00667         ************************************
                      (            os9.d):00668         * Module Definitions
                      (            os9.d):00669         *
                      (            os9.d):00670         * Universal Module Offsets
                      (            os9.d):00671         *
                      (            os9.d):00672                        ORG       0
0000                  (            os9.d):00673         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00674         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00675         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00676         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00677         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00678         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00679         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00680         *
                      (            os9.d):00681         * Type-Dependent Module Offsets
                      (            os9.d):00682         *
                      (            os9.d):00683         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00684         *
0009                  (            os9.d):00685         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Program Module
                      (            os9.d):00688         *
000B                  (            os9.d):00689         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Driver, Device Descriptor Module
                      (            os9.d):00692         *
000D                  (            os9.d):00693         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00694         *
                      (            os9.d):00695         * Device Descriptor Module
                      (            os9.d):00696         *
                      (            os9.d):00697                        ORG       M$IDSize
0009                  (            os9.d):00698         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00699         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00700                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00701         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00702         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00703         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00704         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00705         *
                      (            os9.d):00706         * Configuration Module Entry Offsets
                      (            os9.d):00707         *
                      (            os9.d):00708                        ORG       M$IDSize
0009                  (            os9.d):00709         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00710         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00711         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00712         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00713         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00714         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00715         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00716         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00717         
0017                  (            os9.d):00718         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00719         OSVer          RMB       1                   OS version
0019                  (            os9.d):00720         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00721         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00722         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00723         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00724         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00725         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00726                        RMB       4                   reserved for future use
                      (            os9.d):00727         
                      (            os9.d):00728                        IFGT      Level-1
                      (            os9.d):00729         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00730         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00731         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00732         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00733         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00734                        ENDC      
                      (            os9.d):00735         
                      (            os9.d):00736         * Feature1 byte definitions
     0001             (            os9.d):00737         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00738         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00739         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00740         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00741         
                      (            os9.d):00742                        PAG       
                      (            os9.d):00743         **************************
                      (            os9.d):00744         * Module Field Definitions
                      (            os9.d):00745         *
                      (            os9.d):00746         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00747         *
     0087             (            os9.d):00748         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00749         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00750         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00751         
                      (            os9.d):00752         *
                      (            os9.d):00753         * Module Type/Language Field Masks
                      (            os9.d):00754         *
     00F0             (            os9.d):00755         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00756         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00757         
                      (            os9.d):00758         *
                      (            os9.d):00759         * Module Type Values
                      (            os9.d):00760         *
     00F0             (            os9.d):00761         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00762         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00763         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00764         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00765         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00766         Data           EQU       $40                 Data Module
     0030             (            os9.d):00767         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00768         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00769         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00770         
                      (            os9.d):00771         *
                      (            os9.d):00772         * Module Language Values
                      (            os9.d):00773         *
     0001             (            os9.d):00774         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00775         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00776         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00777         CCode          EQU       4                   C I-code
     0005             (            os9.d):00778         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00779         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00780         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00781         *
                      (            os9.d):00782         * Module Attributes / Revision byte
                      (            os9.d):00783         *
                      (            os9.d):00784         * Field Masks
                      (            os9.d):00785         *
     00F0             (            os9.d):00786         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00787         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00788         *
                      (            os9.d):00789         * Attribute Flags
                      (            os9.d):00790         *
     0080             (            os9.d):00791         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00792         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00793         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00794         
                      (            os9.d):00795         ********************
                      (            os9.d):00796         * Device Type Values
                      (            os9.d):00797         *
                      (            os9.d):00798         * These values define various classes of devices, which are
                      (            os9.d):00799         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00800         * in a device's device descriptor.
                      (            os9.d):00801         *
     0000             (            os9.d):00802         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00803         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00804         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00805         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00806         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00807         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00808         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00809         
                      (            os9.d):00810         *********************
                      (            os9.d):00811         * CRC Result Constant
                      (            os9.d):00812         *
     0080             (            os9.d):00813         CRCCon1        EQU       $80
     0FE3             (            os9.d):00814         CRCCon23       EQU       $0FE3
                      (            os9.d):00815         
                      (            os9.d):00816                        TTL       Process Information
                      (            os9.d):00817                        PAG       
                      (            os9.d):00818         ********************************
                      (            os9.d):00819         * Process Descriptor Definitions
                      (            os9.d):00820         *
                      (            os9.d):00821                        IFEQ      Level-1
                      (            os9.d):00822         
                      (            os9.d):00823         * Level 1 process descriptor defs
002A                  (            os9.d):00824         DefIOSiz       EQU       12
002A                  (            os9.d):00825         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00826         
                      (            os9.d):00827                        ORG       0
002A                  (            os9.d):00828         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00829         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00830         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00831         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00832         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00833         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00834         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00835         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00836         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00837         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00838         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00839         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00840         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00841         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00842         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00843         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00844         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00845         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00846         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00847         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00848         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00849         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00850         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00851         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00852         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00853                        RMB       $40-.               unused
002A                  (            os9.d):00854         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00855         
                      (            os9.d):00856         *
                      (            os9.d):00857         * Process State Flags
                      (            os9.d):00858         *
002A                  (            os9.d):00859         SysState       EQU       %10000000
002A                  (            os9.d):00860         TimSleep       EQU       %01000000
002A                  (            os9.d):00861         TimOut         EQU       %00100000
002A                  (            os9.d):00862         ImgChg         EQU       %00010000
002A                  (            os9.d):00863         Condem         EQU       %00000010
002A                  (            os9.d):00864         Dead           EQU       %00000001
                      (            os9.d):00865         
                      (            os9.d):00866                        ELSE      
                      (            os9.d):00867         
                      (            os9.d):00868         * Level 2 process descriptor defs
     0010             (            os9.d):00869         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00870         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00871         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00872         
                      (            os9.d):00873                        ORG       0
0000                  (            os9.d):00874         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00875         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00876         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00877         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00878         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00879         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00880         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00881         P$User         RMB       2                   User Index
000A                  (            os9.d):00882         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00883         P$Age          RMB       1                   Age
000C                  (            os9.d):00884         P$State        RMB       1                   Status
000D                  (            os9.d):00885         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00886         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00887         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00888         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00889         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00890         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00891         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00892         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00893         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00894         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00895         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00896                        RMB       $20-.               unused
0020                  (            os9.d):00897         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00898         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00899         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00900         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00901         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00902         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00903         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00904         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00905         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00906         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00907         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00908         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00909         P$Alarm        RMB       6
00C9                  (            os9.d):00910                        RMB       $200-.              Local stack
     0200             (            os9.d):00911         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00912         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00913         
                      (            os9.d):00914         *
                      (            os9.d):00915         * Process State Flags
                      (            os9.d):00916         *
     0080             (            os9.d):00917         SysState       EQU       %10000000
     0040             (            os9.d):00918         TimSleep       EQU       %01000000
     0020             (            os9.d):00919         TimOut         EQU       %00100000
     0010             (            os9.d):00920         ImgChg         EQU       %00010000
     0008             (            os9.d):00921         Suspend        EQU       %00001000
     0002             (            os9.d):00922         Condem         EQU       %00000010
     0001             (            os9.d):00923         Dead           EQU       %00000001
                      (            os9.d):00924         
                      (            os9.d):00925                        ENDC      
                      (            os9.d):00926         
                      (            os9.d):00927                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00928                        PAG       
                      (            os9.d):00929         *************************
                      (            os9.d):00930         * Path Descriptor Offsets
                      (            os9.d):00931         *
                      (            os9.d):00932                        ORG       0
0000                  (            os9.d):00933         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00934         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00935         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00936         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00937         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00938         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00939         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00940         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00941         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00942         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00943                        RMB       64-.                Path options
     0040             (            os9.d):00944         PDSIZE         EQU       .
                      (            os9.d):00945         
                      (            os9.d):00946         *
                      (            os9.d):00947         * Pathlist Special Symbols
                      (            os9.d):00948         *
     002F             (            os9.d):00949         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00950         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00951         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00952         
                      (            os9.d):00953                        PAG       
                      (            os9.d):00954         ****************************
                      (            os9.d):00955         * File Manager Entry Offsets
                      (            os9.d):00956         *
                      (            os9.d):00957                        ORG       0
0000                  (            os9.d):00958         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00959         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00960         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00961         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00962         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00963         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00964         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00965         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00966         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00967         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00968         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00969         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00970         FMCLOS         RMB       3                   Close File
                      (            os9.d):00971         
                      (            os9.d):00972         *****************************
                      (            os9.d):00973         * Device Driver Entry Offsets
                      (            os9.d):00974         *
                      (            os9.d):00975                        ORG       0
0000                  (            os9.d):00976         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00977         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00978         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00979         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00980         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00981         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00982         
                      (            os9.d):00983         *********************
                      (            os9.d):00984         * Device Table Format
                      (            os9.d):00985         *
                      (            os9.d):00986                        ORG       0
0000                  (            os9.d):00987         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00988         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00989         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00990         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00991         V$USRS         RMB       1                   use count
                      (            os9.d):00992                        IFGT      Level-1
0009                  (            os9.d):00993         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00994         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00995                        ENDC      
     000D             (            os9.d):00996         DEVSIZ         EQU       .
                      (            os9.d):00997         
                      (            os9.d):00998         *******************************
                      (            os9.d):00999         * Device Static Storage Offsets
                      (            os9.d):01000         *
                      (            os9.d):01001                        ORG       0
0000                  (            os9.d):01002         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):01003         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01004         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01005         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01006         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01007         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01008         
                      (            os9.d):01009         ********************************
                      (            os9.d):01010         * Interrupt Polling Table Format
                      (            os9.d):01011         *
                      (            os9.d):01012                        ORG       0
0000                  (            os9.d):01013         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01014         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01015         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01016         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01017         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01018         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01019                        IFGT      Level-1
0009                  (            os9.d):01020         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01021                        ENDC      
     000B             (            os9.d):01022         POLSIZ         EQU       .
                      (            os9.d):01023         
                      (            os9.d):01024         ********************
                      (            os9.d):01025         * VIRQ packet format
                      (            os9.d):01026         *
                      (            os9.d):01027                        ORG       0
0000                  (            os9.d):01028         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01029         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01030         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01031         Vi.PkSz        EQU       .
                      (            os9.d):01032         
     0001             (            os9.d):01033         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01034         
                      (            os9.d):01035                        PAG       
                      (            os9.d):01036         *************************************
                      (            os9.d):01037         * Machine Characteristics Definitions
                      (            os9.d):01038         *
     0000             (            os9.d):01039         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01040         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01041         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01042         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01043                        IFNE      H6309
0005                  (            os9.d):01044         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01045         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01046         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01047         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01048         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01049         R$X            EQU       6                   X Index register
0005                  (            os9.d):01050         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01051         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01052         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01053         R$Size         EQU       14                  Total register package size
                      (            os9.d):01054                        ELSE      
     0003             (            os9.d):01055         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01056         R$X            EQU       4                   X Index register
     0006             (            os9.d):01057         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01058         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01059         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01060         R$Size         EQU       12                  Total register package size
                      (            os9.d):01061                        ENDC      
                      (            os9.d):01062         
                      (            os9.d):01063         * MD register masks
                      (            os9.d):01064         * 6309 definitions
     0080             (            os9.d):01065         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01066         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01067         
     0080             (            os9.d):01068         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01069         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01070         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01071         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01072         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01073         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01074         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01075         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01076         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01077         Sign           EQU       %10000000           sign bit
                      (            os9.d):01078         
                      (            os9.d):01079                        TTL       Error Code Definitions
                      (            os9.d):01080                        PAG       
                      (            os9.d):01081         ************************
                      (            os9.d):01082         * Error Code Definitions
                      (            os9.d):01083         *
                      (            os9.d):01084         * Basic09 Error Codes
                      (            os9.d):01085         *
                      (            os9.d):01086                        ORG       10
000A                  (            os9.d):01087         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01088         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01089         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01090         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01091         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01092         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01093         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01094         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01095         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01096         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01097         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01098         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01099         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01100         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01101         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01102         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01103         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01104         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01105         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01106         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01107         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01108         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01109         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01110         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01111         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01112         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01113         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01114         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01115         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01116         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01117         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01118         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01119         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01120         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01121         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01122         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01123         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01124         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01125         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01126         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01127         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01128         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01129         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01130         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01131         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01132         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01133         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01134         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01135         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01136         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01137         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01138         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01139         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01140         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01141         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01142         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01143         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01144         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01145         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01146         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01147         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01148         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01149         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01150         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01151         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01152         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01153         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01154         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01155         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01156         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01157         
                      (            os9.d):01158         *
                      (            os9.d):01159         * System Dependent Error Codes
                      (            os9.d):01160         *
                      (            os9.d):01161         
                      (            os9.d):01162         * Level 2 windowing error codes
                      (            os9.d):01163                        ORG       183
00B7                  (            os9.d):01164         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01165         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01166         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01167         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01168         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01169                        RMB       1                   reserved
00BD                  (            os9.d):01170         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01171         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01172         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01173         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01174         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01175         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01176         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01177         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01178         
00C5                  (            os9.d):01179         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01180         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01181         E$Alias        RMB       1
                      (            os9.d):01182         
                      (            os9.d):01183         
                      (            os9.d):01184         *
                      (            os9.d):01185         * Standard NitrOS-9 Error Codes
                      (            os9.d):01186         *
                      (            os9.d):01187                        ORG       200
00C8                  (            os9.d):01188         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01189         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01190         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01191         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01192         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01193         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01194         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01195         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01196         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01197         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01198         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01199         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01200                        RMB       1
00D5                  (            os9.d):01201         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01202         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01203         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01204         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01205         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01206         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01207         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01208         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01209         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01210                        RMB       1
00DF                  (            os9.d):01211         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01212         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01213         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01214                        RMB       1
00E2                  (            os9.d):01215         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01216         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01217         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01218         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01219         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01220         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01221         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01222         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01223         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01224         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01225         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01226         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01227         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01228         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01229                        RMB       $F0-.               reserved
00F0                  (            os9.d):01230         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01231         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01232         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01233         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01234         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01235         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01236         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01237         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01238         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01239         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01240         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01241         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01242         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01243         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01244         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01245         
                      (            os9.d):01246         
                      (            os9.d):01247                        IFGT      Level-2
                      (            os9.d):01248         ***************************
                      (            os9.d):01249         * Level 3 Defs
                      (            os9.d):01250         *
                      (            os9.d):01251         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01252         *
00FF                  (            os9.d):01253         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01254         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01255         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01256         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01257         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01258         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01259                        ENDC      
                      (            os9.d):01260         
                      (            os9.d):01261                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
     00E0             (            scf.d):00222         PARMASK        EQU       %11100000
                      (            scf.d):00223         
                      (            scf.d):00224         * PD.BAU definitions
                      (            scf.d):00225         *
                      (            scf.d):00226         * Baud rate
     0000             (            scf.d):00227         B110           EQU       %00000000
     0001             (            scf.d):00228         B300           EQU       %00000001
     0002             (            scf.d):00229         B600           EQU       %00000010
     0003             (            scf.d):00230         B1200          EQU       %00000011
     0004             (            scf.d):00231         B2400          EQU       %00000100
     0005             (            scf.d):00232         B4800          EQU       %00000101
     0006             (            scf.d):00233         B9600          EQU       %00000110
     0007             (            scf.d):00234         B19200         EQU       %00000111
     0008             (            scf.d):00235         B38400         EQU       %00001000
     0009             (            scf.d):00236         B57600         EQU       %00001001
     000A             (            scf.d):00237         B115200        EQU       %00001010
                      (            scf.d):00238         * Word size
     0000             (            scf.d):00239         WORD8          EQU       %00000000
     0020             (            scf.d):00240         WORD7          EQU       %00100000
                      (            scf.d):00241         * Stop bits
     0000             (            scf.d):00242         STOP1          EQU       %00000000
     0010             (            scf.d):00243         STOP2          EQU       %00010000
                      (            scf.d):00244         
                      (            scf.d):00245                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         ********************************
                      (           coco.d):00148         * Boot defs for NitrOS-9 Level 1
                      (           coco.d):00149         *
                      (           coco.d):00150         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00151         * system.
                      (           coco.d):00152         *
0004                  (           coco.d):00153         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE
                      (           coco.d):00156         
                      (           coco.d):00157         ******************************************
                      (           coco.d):00158         * Boot defs for NitrOS-9 Level 2 and above
                      (           coco.d):00159         *
                      (           coco.d):00160         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00161         * system.
                      (           coco.d):00162         *
     ED00             (           coco.d):00163         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (           coco.d):00164         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (           coco.d):00165         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (           coco.d):00166         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (           coco.d):00167         
                      (           coco.d):00168                        ENDC
                      (           coco.d):00169         
                      (           coco.d):00170         * On the CoCo, the boot track is all of track 34
                      (           coco.d):00171         
     0022             (           coco.d):00172         Bt.Track       EQU       34                  Boot track
     0000             (           coco.d):00173         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (           coco.d):00174         
                      (           coco.d):00175         
     1080             (           coco.d):00176         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (           coco.d):00177         
                      (           coco.d):00178         
                      (           coco.d):00179                        IFEQ      Level-1
                      (           coco.d):00180         
                      (           coco.d):00181         *************************************************
                      (           coco.d):00182         *
                      (           coco.d):00183         * NitrOS-9 Level 1 Section
                      (           coco.d):00184         *
                      (           coco.d):00185         *************************************************
                      (           coco.d):00186         
0004                  (           coco.d):00187         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00188         
                      (           coco.d):00189                        ELSE      
                      (           coco.d):00190         
                      (           coco.d):00191         *************************************************
                      (           coco.d):00192         *
                      (           coco.d):00193         * NitrOS-9 Level 2 Section
                      (           coco.d):00194         *
                      (           coco.d):00195         *************************************************
                      (           coco.d):00196         
                      (           coco.d):00197         ****************************************
                      (           coco.d):00198         * Dynamic Address Translator Definitions
                      (           coco.d):00199         *
     0008             (           coco.d):00200         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00201         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00202         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00203         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00204         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00205         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00206         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00207         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00208         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00209         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00210         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00211         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00212         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00213         IOBlock        EQU       $3F
     003F             (           coco.d):00214         ROMBlock       EQU       $3F
     007F             (           coco.d):00215         IOAddr         EQU       $7F
     0001             (           coco.d):00216         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00217         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00218         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00219         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00220         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00221         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00222         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00223         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00224         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00225         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00226         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00227         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00228         
                      (           coco.d):00229         ***************************
                      (           coco.d):00230         * Color Computer 3 Specific
                      (           coco.d):00231         *
     0001             (           coco.d):00232         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00233         
                      (           coco.d):00234         ********************
                      (           coco.d):00235         * Hardware addresses
                      (           coco.d):00236         *
     FF00             (           coco.d):00237         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00238         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00239         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00240         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00241         
     0007             (           coco.d):00242         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00243         
                      (           coco.d):00244         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (           coco.d):00245         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (           coco.d):00246         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (           coco.d):00247         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (           coco.d):00248         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (           coco.d):00249         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (           coco.d):00250         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (           coco.d):00251         * it will end up with its own block assigned for CPU address space $E000-
                      (           coco.d):00252         * $FFFF but the top of the address space is unusable by the user process:
                      (           coco.d):00253         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (           coco.d):00254         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (           coco.d):00255         * For the COCO GIME, it's always $3F.
     003F             (           coco.d):00256         KrnBlk         SET       $3F
                      (           coco.d):00257         
                      (           coco.d):00258                        ENDC
                      (           coco.d):00259                        ENDC
                      (           coco.d):00260         
                      (/home/strick/go/s):00103                  endc  
                      (/home/strick/go/s):00104         
     0003             (/home/strick/go/s):00105         rev      set   $03
     00D0             (/home/strick/go/s):00106         ty       set   FlMgr
                      (/home/strick/go/s):00107                  IFNE  H6309
0004                  (/home/strick/go/s):00108         lg       set   Obj6309
                      (/home/strick/go/s):00109                  ELSE
     0001             (/home/strick/go/s):00110         lg       set   Objct
                      (/home/strick/go/s):00111                  ENDC
     00D1             (/home/strick/go/s):00112         tylg     set   ty+lg
     0083             (/home/strick/go/s):00113         atrv     set   ReEnt+rev
     0025             (/home/strick/go/s):00114         edition  set   37
                      (/home/strick/go/s):00115         
                      (/home/strick/go/s):00116                  org   $00
     0000             (/home/strick/go/s):00117         size     equ   .
                      (/home/strick/go/s):00118         
0000 87CD12EE000DD183 (/home/strick/go/s):00119                  mod   eom,name,tylg,atrv,start,size
     1600110000
                      (/home/strick/go/s):00120         
000D 5242C6           (/home/strick/go/s):00121         name     fcs   /RBF/
0010 25               (/home/strick/go/s):00122                  fcb   edition
                      (/home/strick/go/s):00123         
                      (/home/strick/go/s):00124         *L0012    fcb   DRVMEM
                      (/home/strick/go/s):00125         
                      (/home/strick/go/s):00126         
                      (/home/strick/go/s):00127         ****************************
                      (/home/strick/go/s):00128         *
                      (/home/strick/go/s):00129         * Main entry point for RBF
                      (/home/strick/go/s):00130         *
                      (/home/strick/go/s):00131         * Entry: Y = Path descriptor pointer
                      (/home/strick/go/s):00132         *        U = Register stack pointer
                      (/home/strick/go/s):00133         
0011 2025             (/home/strick/go/s):00134         start    bra   Create
0013 12               (/home/strick/go/s):00135                  nop   
0014 160169           (/home/strick/go/s):00136                  lbra  Open
0017 160204           (/home/strick/go/s):00137                  lbra  MakDir
001A 1602CD           (/home/strick/go/s):00138                  lbra  ChgDir
001D 1602FD           (/home/strick/go/s):00139                  lbra  Delete
0020 1603DF           (/home/strick/go/s):00140                  lbra  Seek
0023 160485           (/home/strick/go/s):00141                  lbra  Read
0026 160538           (/home/strick/go/s):00142                  lbra  Write
0029 1603F8           (/home/strick/go/s):00143                  lbra  ReadLn
002C 16050B           (/home/strick/go/s):00144                  lbra  WriteLn
002F 1605AC           (/home/strick/go/s):00145                  lbra  GetStat
0032 160613           (/home/strick/go/s):00146                  lbra  SetStat
0035 16024E           (/home/strick/go/s):00147                  lbra  Close
                      (/home/strick/go/s):00148         
                      (/home/strick/go/s):00149         
                      (/home/strick/go/s):00150         *
                      (/home/strick/go/s):00151         * I$Create Entry Point
                      (/home/strick/go/s):00152         *
                      (/home/strick/go/s):00153         * Entry: A = access mode desired
                      (/home/strick/go/s):00154         *        B = file attributes
                      (/home/strick/go/s):00155         *        X = address of the pathlist
                      (/home/strick/go/s):00156         *
                      (/home/strick/go/s):00157         * Exit:  A = pathnum
                      (/home/strick/go/s):00158         *        X = last byte of pathlist address
                      (/home/strick/go/s):00159         *
                      (/home/strick/go/s):00160         * Error: CC Carry set
                      (/home/strick/go/s):00161         *        B = errcode
                      (/home/strick/go/s):00162         *
0038                  (/home/strick/go/s):00163         Create   
0038 3420             (/home/strick/go/s):00164                  pshs  y                Preserve path desc ptr
003A 327B             (/home/strick/go/s):00165                  leas  -$05,s           Make 5 byte buffer on stack
                      (/home/strick/go/s):00166                  IFNE  H6309
                      (/home/strick/go/s):00167                  aim   #^DIR.,R$B,u
                      (/home/strick/go/s):00168                  ELSE
003C A642             (/home/strick/go/s):00169                  lda   R$B,u            force directory bit off
003E 847F             (/home/strick/go/s):00170                  anda  #^DIR.
0040 A742             (/home/strick/go/s):00171                  sta   R$B,u
                      (/home/strick/go/s):00172                  ENDC
0042 17076F           (/home/strick/go/s):00173                  lbsr  FindFile         try & find it in directory
0045 2502             (/home/strick/go/s):00174                  bcs   Creat47          branch if doesn't exist
                      (/home/strick/go/s):00175         
                      (/home/strick/go/s):00176         * File already exists
0047 C6DA             (/home/strick/go/s):00177                  ldb   #E$CEF           else exists error
0049 C1D8             (/home/strick/go/s):00178         Creat47  cmpb  #E$PNNF          not found?
004B 2634             (/home/strick/go/s):00179                  bne   Creat7E
                      (/home/strick/go/s):00180         
                      (/home/strick/go/s):00181         * File doesn't exist, create it
004D 812F             (/home/strick/go/s):00182                  cmpa  #PDELIM          full path?
004F 2730             (/home/strick/go/s):00183                  beq   Creat7E          yes, return
0051 3410             (/home/strick/go/s):00184                  pshs  x                preserve filename pointer
0053 AE26             (/home/strick/go/s):00185                  ldx   PD.RGS,y         get register stack pointer
0055 EF04             (/home/strick/go/s):00186                  stu   R$X,x            save updated pathname pointer
                      (/home/strick/go/s):00187         * These 4 did have < in front, made 3 byte cmnds but some are 2!
0057 E6A816           (/home/strick/go/s):00188                  ldb   PD.SBP,y         get physical sector # of segment list
005A AEA817           (/home/strick/go/s):00189                  ldx   PD.SBP+1,y
005D A6A819           (/home/strick/go/s):00190                  lda   PD.SSZ,y         get size of segment list in bytes
0060 EEA81A           (/home/strick/go/s):00191                  ldu   PD.SSZ+1,y
0063 3456             (/home/strick/go/s):00192                  pshs  u,x,b,a          preserve it all
0065 AE26             (/home/strick/go/s):00193                  ldx   PD.RGS,y         get register stack pointer
                      (/home/strick/go/s):00194         * Calculate default file size, if enabled
                      (/home/strick/go/s):00195         * This sets D to 0 if bit 5 of R$A is NOT set.  If bit 5 of R$A is set
                      (/home/strick/go/s):00196         * when called, register Y will contain a default file size
0067 A601             (/home/strick/go/s):00197                  lda   R$A,x            get file mode (read/write/update)
0069 5F               (/home/strick/go/s):00198                  clrb  
006A 8420             (/home/strick/go/s):00199                  anda  #PEXEC.          bit 5 set?
006C 2702             (/home/strick/go/s):00200                  beq   Creat6E          no, skip ahead
006E EC06             (/home/strick/go/s):00201                  ldd   R$Y,x            get default file size
                      (/home/strick/go/s):00202         * account for FD sector, I think.
                      (/home/strick/go/s):00203         * changed from addd #1, bcc, ldd #$FFFF.
                      (/home/strick/go/s):00204         * The INCD gets D=$0000 (and CC.Z set) if it overflows from $FFFF->$0000
                      (/home/strick/go/s):00205         * then if it's zero, a DECD forces it to be $FFFF
0070 C30001           (/home/strick/go/s):00206         Creat6E  addd  #1               above 64k in size? (bug fix, thanks Gene K.)
0073 2403             (/home/strick/go/s):00207                  bcc   Creat75          no, skip ahead: changed from BCC
0075 CCFFFF           (/home/strick/go/s):00208                  ldd   #$FFFF           force it to 64k
0078 170D5C           (/home/strick/go/s):00209         Creat75  lbsr  FatScan          find the space in the allocation map
007B 2409             (/home/strick/go/s):00210                  bcc   Creat83          got it, skip ahead
007D 3266             (/home/strick/go/s):00211                  leas  6,s              purge segment sizes from stack
                      (/home/strick/go/s):00212         * and fall through to routine which returns with an error.
                      (/home/strick/go/s):00213         
007F 3262             (/home/strick/go/s):00214         Creat7C  leas  2,s              purge user's pathname pointer
0081 3265             (/home/strick/go/s):00215         Creat7E  leas  5,s              purge local data
0083 160229           (/home/strick/go/s):00216                  lbra  ErMemRtn         return with error
                      (/home/strick/go/s):00217         
                      (/home/strick/go/s):00218         * Create the file
0086 ED6B             (/home/strick/go/s):00219         Creat83  std   $0B,s            save segment size
0088 E6A816           (/home/strick/go/s):00220                  ldb   PD.SBP,y         save segment physical sector # in path desc.
008B AEA817           (/home/strick/go/s):00221                  ldx   PD.SBP+1,y       starting LSN
008E E768             (/home/strick/go/s):00222                  stb   $08,s            on stack too
0090 AF69             (/home/strick/go/s):00223                  stx   $09,s
0092 3556             (/home/strick/go/s):00224                  puls  u,x,b,a          restore segment physical sector # & sizes
0094 E7A816           (/home/strick/go/s):00225                  stb   PD.SBP,y         save it as current
0097 AFA817           (/home/strick/go/s):00226                  stx   PD.SBP+1,y
009A A7A819           (/home/strick/go/s):00227                  sta   PD.SSZ,y
009D EFA81A           (/home/strick/go/s):00228                  stu   PD.SSZ+1,y
                      (/home/strick/go/s):00229         * Find empty slot in directory sector for new file
                      (/home/strick/go/s):00230                  IFNE  H6309
                      (/home/strick/go/s):00231                  ldq   PD.DCP,y         get directory entry pointer for new file
                      (/home/strick/go/s):00232                  stq   PD.CP,y          save it as current file pointer
                      (/home/strick/go/s):00233                  ELSE
00A0 ECA83A           (/home/strick/go/s):00234                  ldd   PD.DCP,y
00A3 ED2B             (/home/strick/go/s):00235                  std   PD.CP,y
00A5 ECA83C           (/home/strick/go/s):00236                  ldd   PD.DCP+2,y
00A8 ED2D             (/home/strick/go/s):00237                  std   PD.CP+2,y
                      (/home/strick/go/s):00238                  ENDC
00AA 1708C8           (/home/strick/go/s):00239                  lbsr  L0957            move entry into sector buffer
00AD 2509             (/home/strick/go/s):00240                  bcs   CreatB5
00AF 6D84             (/home/strick/go/s):00241         CreatAC  tst   ,x               file exist here already?
00B1 2717             (/home/strick/go/s):00242                  beq   CreatC7          no, found empty slot, skip ahead
00B3 1708AA           (/home/strick/go/s):00243                  lbsr  L0942            point to next entry
00B6 24F7             (/home/strick/go/s):00244                  bcc   CreatAC          try again
00B8 C1D3             (/home/strick/go/s):00245         CreatB5  cmpb  #E$EOF           end of directory?
00BA 26C3             (/home/strick/go/s):00246                  bne   Creat7C          no, return error
                      (/home/strick/go/s):00247         * Create the directory entry for new file
00BC CC0020           (/home/strick/go/s):00248                  ldd   #DIR.SZ          get size of directory entry
00BF 1704DC           (/home/strick/go/s):00249                  lbsr  Writ599          add it to size of directory
00C2 25BB             (/home/strick/go/s):00250                  bcs   Creat7C          out of alloc?
00C4 1701AC           (/home/strick/go/s):00251                  lbsr  MDir263          set file size in file descriptor
00C7 1708AB           (/home/strick/go/s):00252                  lbsr  L0957            read in a directory sector
00CA 3384             (/home/strick/go/s):00253         CreatC7  leau  ,x               point to directory entry
00CC 1700A3           (/home/strick/go/s):00254                  lbsr  Creat169         clear it out
00CF 3510             (/home/strick/go/s):00255                  puls  x                restore pathname pointer
00D1 103F10           (/home/strick/go/s):00256                  os9   F$PrsNam         parse it to get filename
00D4 25AB             (/home/strick/go/s):00257                  bcs   Creat7E
00D6 C11D             (/home/strick/go/s):00258                  cmpb  #29              length of name right size?
00D8 2302             (/home/strick/go/s):00259                  bls   CreatD9          yes, skip ahead
00DA C61D             (/home/strick/go/s):00260                  ldb   #29              else force it to 29 chars
00DC 4F               (/home/strick/go/s):00261         CreatD9  clra                   move length to Y
00DD 1F02             (/home/strick/go/s):00262                  tfr   d,y
00DF 1704EE           (/home/strick/go/s):00263                  lbsr  Writ5CB          move name of file to directory entry
00E2 1F20             (/home/strick/go/s):00264                  tfr   y,d              move length of name to D
00E4 10AE65           (/home/strick/go/s):00265                  ldy   $05,s            restore PDpointer
00E7 5A               (/home/strick/go/s):00266                  decb                   subtract 1 off length
                      (/home/strick/go/s):00267                  IFNE  H6309
                      (/home/strick/go/s):00268                  oim   #$80,b,u         set high bit on last char of name
                      (/home/strick/go/s):00269                  ELSE
00E8 A6C5             (/home/strick/go/s):00270                  lda   b,u
00EA 8A80             (/home/strick/go/s):00271                  ora   #$80
00EC A7C5             (/home/strick/go/s):00272                  sta   b,u
                      (/home/strick/go/s):00273                  ENDC
00EE E6E4             (/home/strick/go/s):00274                  ldb   ,s               get logical sector # of file desc
00F0 AE61             (/home/strick/go/s):00275                  ldx   $01,s
00F2 E7C81D           (/home/strick/go/s):00276                  stb   DIR.FD,u         save it into directory entry
00F5 AFC81E           (/home/strick/go/s):00277                  stx   DIR.FD+1,u
00F8 171129           (/home/strick/go/s):00278                  lbsr  L1205            flush sector to disk
00FB 255D             (/home/strick/go/s):00279                  bcs   Creat151
                      (/home/strick/go/s):00280         * Setup file descriptor
00FD EE28             (/home/strick/go/s):00281                  ldu   PD.BUF,y         get sector buffer pointer
00FF 8D75             (/home/strick/go/s):00282                  bsr   Creat170         clear it out
0101 8604             (/home/strick/go/s):00283                  lda   #FDBUF           get file descriptor in buffer flag
0103 A72A             (/home/strick/go/s):00284                  sta   PD.SMF,y         save it as current sector buffer state
0105 AE26             (/home/strick/go/s):00285                  ldx   PD.RGS,y         get register stack pointer
0107 A602             (/home/strick/go/s):00286                  lda   R$B,x            get file attributes
0109 A7C4             (/home/strick/go/s):00287                  sta   FD.ATT,u         save it as current attributes
010B 9E50             (/home/strick/go/s):00288                  ldx   <D.Proc          get process pointer
010D EC08             (/home/strick/go/s):00289                  ldd   P$User,x         get user #
010F ED41             (/home/strick/go/s):00290                  std   FD.OWN,u         save creation user
0111 1701BB           (/home/strick/go/s):00291                  lbsr  L02D1            place date & time into file descriptor
0114 EC43             (/home/strick/go/s):00292                  ldd   FD.DAT,u         get date last modified
0116 ED4D             (/home/strick/go/s):00293                  std   FD.Creat,u       save it as creation date (since we just made it)
0118 E645             (/home/strick/go/s):00294                  ldb   FD.DAT+2,u
011A E74F             (/home/strick/go/s):00295                  stb   FD.Creat+2,u
011C C601             (/home/strick/go/s):00296                  ldb   #$01             get link count
011E E748             (/home/strick/go/s):00297                  stb   FD.LNK,u
0120 EC63             (/home/strick/go/s):00298                  ldd   3,s              get segment size in sectors
                      (/home/strick/go/s):00299                  IFNE  H6309
                      (/home/strick/go/s):00300                  decd                   is it 1?
                      (/home/strick/go/s):00301                  ELSE
0122 830001           (/home/strick/go/s):00302                  subd  #$0001
                      (/home/strick/go/s):00303                  ENDC
0125 2712             (/home/strick/go/s):00304                  beq   Creat131         yes, skip ahead
0127 30C810           (/home/strick/go/s):00305                  leax  FD.SEG,u         point to the start of the segment list
012A ED03             (/home/strick/go/s):00306                  std   FDSL.B,x         save segment size
012C EC61             (/home/strick/go/s):00307                  ldd   1,s              get LSW of physical sector # of seg start
012E C30001           (/home/strick/go/s):00308                  addd  #1               we need to carry below, fr the adcb! (bug fix, thanks Gene K.)
0131 ED01             (/home/strick/go/s):00309                  std   FDSL.A+1,x       save LSW
0133 E6E4             (/home/strick/go/s):00310                  ldb   ,s               get MSB of physical sector # of segment start
0135 C900             (/home/strick/go/s):00311                  adcb  #$00             need carry status of addd above
0137 E784             (/home/strick/go/s):00312                  stb   FDSL.A,x         save MSB
0139 E6E4             (/home/strick/go/s):00313         Creat131 ldb   ,s               get p hysical sector # of segment start
013B AE61             (/home/strick/go/s):00314                  ldx   1,s
013D 1710E6           (/home/strick/go/s):00315                  lbsr  L1207            flush file descriptor to disk
0140 2518             (/home/strick/go/s):00316                  bcs   Creat151
0142 170969           (/home/strick/go/s):00317                  lbsr  L0A90            sort out any conflict for this sector
0145 E7A834           (/home/strick/go/s):00318                  stb   PD.FD,y          save file descriptor physical sector # to pd
0148 AFA835           (/home/strick/go/s):00319                  stx   PD.FD+1,y
014B 1708FA           (/home/strick/go/s):00320                  lbsr  L0A2A            update file/record lock for this sector
014E 3265             (/home/strick/go/s):00321                  leas  $05,s            purge sector buffer from stack
                      (/home/strick/go/s):00322                  IFGT  Level-1
0150 AEA830           (/home/strick/go/s):00323                  ldx   PD.Exten,y       get path extension pointer
0153 8604             (/home/strick/go/s):00324                  lda   #EofLock         set the file to EOF lock
0155 A707             (/home/strick/go/s):00325                  sta   PE.Lock,x
                      (/home/strick/go/s):00326                  ENDC
0157 16007F           (/home/strick/go/s):00327                  lbra  Open1CC
                      (/home/strick/go/s):00328         * Error on FD write to disk
015A 3552             (/home/strick/go/s):00329         Creat151 puls  u,x,a            restore segment start & size
015C A7A816           (/home/strick/go/s):00330                  sta   PD.SBP,y         put it into path descriptor
015F AFA817           (/home/strick/go/s):00331                  stx   PD.SBP+1,y
0162 6FA819           (/home/strick/go/s):00332                  clr   PD.SSZ,y
0165 EFA81A           (/home/strick/go/s):00333                  stu   PD.SSZ+1,y
0168 3404             (/home/strick/go/s):00334                  pshs  b                save error code
016A 170E81           (/home/strick/go/s):00335                  lbsr  ClrFBits
016D 3504             (/home/strick/go/s):00336                  puls  b                restore error code
016F 16013D           (/home/strick/go/s):00337         RtnMemry lbra  ErMemRtn         return with error
                      (/home/strick/go/s):00338         
                      (/home/strick/go/s):00339         * Clear out directory entry
                      (/home/strick/go/s):00340         * Entry: U = Directory entry pointer
0172                  (/home/strick/go/s):00341         Creat169 
                      (/home/strick/go/s):00342                  IFNE  H6309
                      (/home/strick/go/s):00343                  ldw   #DIR.SZ          get size of directory entry (name & LSN of FD)
                      (/home/strick/go/s):00344                  ELSE
0172 C620             (/home/strick/go/s):00345                  ldb   #DIR.SZ
                      (/home/strick/go/s):00346                  ENDC
0174 2001             (/home/strick/go/s):00347                  bra   Creat174         clear it out
                      (/home/strick/go/s):00348         
                      (/home/strick/go/s):00349         * Clear out sector buffer
                      (/home/strick/go/s):00350         * Entry: U = Sector buffer pointer
0176                  (/home/strick/go/s):00351         Creat170 
                      (/home/strick/go/s):00352                  IFNE  H6309
                      (/home/strick/go/s):00353                  ldw   #$0100           get size of sector buffer
                      (/home/strick/go/s):00354                  ELSE
0176 5F               (/home/strick/go/s):00355                  clrb
                      (/home/strick/go/s):00356                  ENDC
0177 3450             (/home/strick/go/s):00357         Creat174 pshs  u,x              preserve regs
                      (/home/strick/go/s):00358                  IFNE  H6309
                      (/home/strick/go/s):00359                  leax  <Creat170+3,pcr  point to NULL byte
                      (/home/strick/go/s):00360                  tfm   x,u+             clear buffer
                      (/home/strick/go/s):00361                  ELSE
0179 6FC0             (/home/strick/go/s):00362         l1       clr   ,u+
017B 5A               (/home/strick/go/s):00363                  decb
017C 26FB             (/home/strick/go/s):00364                  bne   l1 
                      (/home/strick/go/s):00365                  ENDC
017E 35D0             (/home/strick/go/s):00366                  puls  pc,u,x           restore & return
                      (/home/strick/go/s):00367         
                      (/home/strick/go/s):00368         
                      (/home/strick/go/s):00369         *
                      (/home/strick/go/s):00370         * I$Open Entry Point
                      (/home/strick/go/s):00371         *
                      (/home/strick/go/s):00372         * Entry: A = access mode desired
                      (/home/strick/go/s):00373         *        X = address of the pathlist
                      (/home/strick/go/s):00374         *
                      (/home/strick/go/s):00375         * Exit:  A = pathnum
                      (/home/strick/go/s):00376         *        X = last byte of pathlist address
                      (/home/strick/go/s):00377         *
                      (/home/strick/go/s):00378         * Error: CC Carry set
                      (/home/strick/go/s):00379         *        B = errcode
                      (/home/strick/go/s):00380         *
0180                  (/home/strick/go/s):00381         Open     
0180 3420             (/home/strick/go/s):00382                  pshs  y                preserve path descriptor pointer
0182 17062F           (/home/strick/go/s):00383                  lbsr  FindFile         try & find the file in current directory
0185 25E8             (/home/strick/go/s):00384                  bcs   RtnMemry         couldn't find it, return error
0187 EE26             (/home/strick/go/s):00385                  ldu   PD.RGS,y         get register stack pointer
0189 AF44             (/home/strick/go/s):00386                  stx   R$X,u            save updated pathname pointer
018B ECA835           (/home/strick/go/s):00387                  ldd   PD.FD+1,y        do we have a file descriptor?
018E 2638             (/home/strick/go/s):00388                  bne   Open1BB
0190 A6A834           (/home/strick/go/s):00389                  lda   PD.FD,y
0193 2633             (/home/strick/go/s):00390                  bne   Open1BB          yes, skip ahead
                      (/home/strick/go/s):00391         * File descriptor doesn't exist
0195 E621             (/home/strick/go/s):00392                  ldb   PD.MOD,y         get current file mode
0197 C480             (/home/strick/go/s):00393                  andb  #DIR.            is it a directory?
0199 10260110         (/home/strick/go/s):00394                  lbne  Clos29D          yes, return not accessible eror
019D EDA816           (/home/strick/go/s):00395                  std   PD.SBP,y         set segment physical start to 0
01A0 A7A818           (/home/strick/go/s):00396                  sta   PD.SBP+2,y
01A3 EDA813           (/home/strick/go/s):00397                  std   PD.SBL,y         do logical as well
01A6 A7A815           (/home/strick/go/s):00398                  sta   PD.SBL+2,y
01A9 AEA81E           (/home/strick/go/s):00399                  ldx   PD.DTB,y         get pointer to drive table
01AC A602             (/home/strick/go/s):00400                  lda   DD.TOT+2,x       get total # sectors on drive
                      (/home/strick/go/s):00401         * resave nonzero DD.TOT here and recopy
     01AE             (/home/strick/go/s):00402         OpenFix  equ   *
01AE EDA811           (/home/strick/go/s):00403                  std   PD.SIZ+2,y       copy it to file size (B=0)
01B1 A7A81B           (/home/strick/go/s):00404                  sta   PD.SSZ+2,y       copy it to segment size as well
01B4 EC84             (/home/strick/go/s):00405                  ldd   DD.TOT,x
01B6 ED2F             (/home/strick/go/s):00406                  std   PD.SIZ,y
01B8 EDA819           (/home/strick/go/s):00407                  std   PD.SSZ,y
                      (/home/strick/go/s):00408         * BUG FIX: handle special case of DD.TOT=0 in LSN0 which blocks
                      (/home/strick/go/s):00409         * all subsequent accesses.  NOTE: since we can only access LSN0
                      (/home/strick/go/s):00410         * for any non-zero value, set DD.TOT=1 to avoid NOT READY error.
01BB 2609             (/home/strick/go/s):00411                  bne   OpenRet          MSW nonzero, OK
01BD A602             (/home/strick/go/s):00412                  lda   DD.TOT+2,x       MSW=0, check LSB
01BF 2605             (/home/strick/go/s):00413                  bne   OpenRet          LSB nonzero, OK
01C1 4C               (/home/strick/go/s):00414                  inca                   DD.TOT=0, make it 1
01C2 A702             (/home/strick/go/s):00415                  sta   DD.TOT+2,x       fix drive table
01C4 20E8             (/home/strick/go/s):00416                  bra   OpenFix          and resave (B=0)
01C6 35A0             (/home/strick/go/s):00417         OpenRet  puls  pc,y             restore & return
                      (/home/strick/go/s):00418         
01C8 A621             (/home/strick/go/s):00419         Open1BB  lda   PD.MOD,y         get file mode
01CA 17082E           (/home/strick/go/s):00420                  lbsr  ChkAttrs         can user access file?
01CD 25A0             (/home/strick/go/s):00421                  bcs   RtnMemry         no, return no permission error
01CF 8502             (/home/strick/go/s):00422                  bita  #WRITE.          open for write?
01D1 2706             (/home/strick/go/s):00423                  beq   Open1CC          no, skip ahead
01D3 1700F9           (/home/strick/go/s):00424                  lbsr  L02D1            update last date modified to current
01D6 171043           (/home/strick/go/s):00425                  lbsr  L11FD            update file descriptor on disk
01D9 3520             (/home/strick/go/s):00426         Open1CC  puls  y                restore path descriptor pointer
                      (/home/strick/go/s):00427         
                      (/home/strick/go/s):00428         * Update the path descriptor from the FD sector pointed to by U
01DB                  (/home/strick/go/s):00429         Open1CE  
                      (/home/strick/go/s):00430                  IFNE  H6309
                      (/home/strick/go/s):00431                  clrd                   get a 16 bit zero value
                      (/home/strick/go/s):00432                  ELSE
01DB 4F               (/home/strick/go/s):00433                  clra  
01DC 5F               (/home/strick/go/s):00434                  clrb  
                      (/home/strick/go/s):00435                  ENDC
01DD ED2D             (/home/strick/go/s):00436                  std   PD.CP+2,y        set seek pointer to start of file
01DF ED2B             (/home/strick/go/s):00437                  std   PD.CP,y
01E1 EDA813           (/home/strick/go/s):00438                  std   PD.SBL,y         set segment start
01E4 A7A815           (/home/strick/go/s):00439                  sta   PD.SBL+2,y
01E7 A7A819           (/home/strick/go/s):00440                  sta   PD.SSZ,y         set segment size
01EA A6C4             (/home/strick/go/s):00441                  lda   FD.ATT,u         get file attributes
01EC A7A833           (/home/strick/go/s):00442                  sta   PD.ATT,y         put it into path descriptor
01EF ECC810           (/home/strick/go/s):00443                  ldd   FD.SEG,u         get the file's segment start sector #
01F2 EDA816           (/home/strick/go/s):00444                  std   PD.SBP,y
01F5 A6C812           (/home/strick/go/s):00445                  lda   FD.SEG+2,u
01F8 A7A818           (/home/strick/go/s):00446                  sta   PD.SBP+2,y
01FB ECC813           (/home/strick/go/s):00447                  ldd   FD.SEG+FDSL.B,u
01FE EDA81A           (/home/strick/go/s):00448                  std   PD.SSZ+1,y
                      (/home/strick/go/s):00449         * ldq   FD.SIZ,u
0201 EC49             (/home/strick/go/s):00450                  ldd   FD.SIZ,u         get file size
0203 AE4B             (/home/strick/go/s):00451                  ldx   FD.SIZ+2,u
0205 EEA830           (/home/strick/go/s):00452                  ldu   PD.Exten,y       get path extension pointer
                      (/home/strick/go/s):00453                  IFGT  Level-1
0208 11A345           (/home/strick/go/s):00454                  cmpu  PE.Confl,u       head of the conflict tree?
020B 2709             (/home/strick/go/s):00455                  beq   Open209          yes, skip ahead
020D EE45             (/home/strick/go/s):00456                  ldu   PE.Confl,u       get the conflicting path ext. pointer
020F EE41             (/home/strick/go/s):00457                  ldu   PE.PDptr,u       get back pointer to the PD of conflicting process
                      (/home/strick/go/s):00458         * ldq PD.SIZ,u
0211 EC4F             (/home/strick/go/s):00459                  ldd   PD.SIZ,u         get his size instead
0213 AEC811           (/home/strick/go/s):00460                  ldx   PD.SIZ+2,u
                      (/home/strick/go/s):00461                  ENDC
                      (/home/strick/go/s):00462         * stq PD.SIZ,y
0216 ED2F             (/home/strick/go/s):00463         Open209  std   PD.SIZ,y         set file size in path descriptor of caller
0218 AFA811           (/home/strick/go/s):00464                  stx   PD.SIZ+2,y
021B 6F2A             (/home/strick/go/s):00465                  clr   PD.SMF,y         clear the state flags
021D 39               (/home/strick/go/s):00466         ex       rts                    return
                      (/home/strick/go/s):00467         
                      (/home/strick/go/s):00468         
                      (/home/strick/go/s):00469         *
                      (/home/strick/go/s):00470         * I$MakDir Entry Point
                      (/home/strick/go/s):00471         *
                      (/home/strick/go/s):00472         * Entry: X = address of the pathlist
                      (/home/strick/go/s):00473         *
                      (/home/strick/go/s):00474         * Exit:  X = last byte of pathlist address
                      (/home/strick/go/s):00475         *
                      (/home/strick/go/s):00476         * Error: CC Carry set
                      (/home/strick/go/s):00477         *        B = errcode
                      (/home/strick/go/s):00478         *
021E 17FE17           (/home/strick/go/s):00479         MakDir   lbsr  Create           create a file descriptor
0221 254E             (/home/strick/go/s):00480                  bcs   MDir261          problem, return error
0223 A6A833           (/home/strick/go/s):00481                  lda   PD.ATT,y         get attributes
0226 8A40             (/home/strick/go/s):00482                  ora   #SHARE.          set shareable bit
0228 1707D0           (/home/strick/go/s):00483                  lbsr  ChkAttrs         can user access directory?
022B 2544             (/home/strick/go/s):00484                  bcs   MDir261          no, return error
022D CC0040           (/home/strick/go/s):00485                  ldd   #DIR.SZ*2        get default directory size (for '.' & '..')
0230 EDA811           (/home/strick/go/s):00486                  std   PD.SIZ+2,y       save it in path descriptor (MSW set to 0)
0233 8D4E             (/home/strick/go/s):00487                  bsr   MDir273          write out file descriptor
0235 253A             (/home/strick/go/s):00488                  bcs   MDir261          error, return
0237 170A55           (/home/strick/go/s):00489                  lbsr  L0C6F
023A 2535             (/home/strick/go/s):00490                  bcs   MDir261
023C 170F06           (/home/strick/go/s):00491                  lbsr  RdFlDscr         read in file descriptor
023F EE28             (/home/strick/go/s):00492                  ldu   PD.BUF,y         get pointer to file descriptor
                      (/home/strick/go/s):00493                  IFNE  H6309
                      (/home/strick/go/s):00494                  oim   #DIR.,FD.ATT,u   set directory bit in attributes
                      (/home/strick/go/s):00495                  ELSE
0241 A6C4             (/home/strick/go/s):00496                  lda   FD.ATT,u
0243 8A80             (/home/strick/go/s):00497                  ora   #DIR.
0245 A7C4             (/home/strick/go/s):00498                  sta   FD.ATT,u
                      (/home/strick/go/s):00499                  ENDC
0247 8D2D             (/home/strick/go/s):00500                  bsr   MDir266
0249 2526             (/home/strick/go/s):00501                  bcs   MDir261
024B 17FF28           (/home/strick/go/s):00502                  lbsr  Creat170         clear out sector
024E CC2EAE           (/home/strick/go/s):00503                  ldd   #$2EAE           get directory entry name for current & parent dir
0251 EDC4             (/home/strick/go/s):00504                  std   ,u               save parent name
0253 E7C820           (/home/strick/go/s):00505                  stb   DIR.SZ,u         save current name
                      (/home/strick/go/s):00506         * This is smaller and faster than the old method
                      (/home/strick/go/s):00507         *         ldq   PD.DFD-1,y      get directory FD pointer into low 24-bits of Q
                      (/home/strick/go/s):00508         *         clra                  make sure high byte is zero
                      (/home/strick/go/s):00509         *         stq   DIR.FD-1,u      save in the dir: '.' and '..' have <28 char names
0256 A6A837           (/home/strick/go/s):00510                  lda   PD.DFD,y
0259 A7C81D           (/home/strick/go/s):00511                  sta   DIR.FD,u
025C ECA838           (/home/strick/go/s):00512                  ldd   PD.DFD+1,y
025F EDC81E           (/home/strick/go/s):00513                  std   DIR.FD+1,u
                      (/home/strick/go/s):00514         *         ldq   PD.FD-1,y       get current FD into lower 24-bits of Q
                      (/home/strick/go/s):00515         *         clra                  ensure high byte is zero
                      (/home/strick/go/s):00516         *         stq   DIR.SZ+DIR.FD-1,u       save in the directory
0262 A6A834           (/home/strick/go/s):00517                  lda   PD.FD,y
0265 A7C83D           (/home/strick/go/s):00518                  sta   DIR.SZ+DIR.FD,u
0268 ECA835           (/home/strick/go/s):00519                  ldd   PD.FD+1,y
026B EDC83E           (/home/strick/go/s):00520                  std   DIR.SZ+DIR.FD+1,u
                      (/home/strick/go/s):00521         
026E 170FB3           (/home/strick/go/s):00522                  lbsr  L1205            flush new directory ssector to disk
0271 203F             (/home/strick/go/s):00523         MDir261  bra   Rt100Mem         return to system all ok
                      (/home/strick/go/s):00524         
                      (/home/strick/go/s):00525         * Set new file size in file descriptor
                      (/home/strick/go/s):00526         * Entry: None
                      (/home/strick/go/s):00527         * Exit : New file size set in file descriptor on disk
0273 170ECF           (/home/strick/go/s):00528         MDir263  lbsr  RdFlDscr         read in file descriptor
0276 AE28             (/home/strick/go/s):00529         MDir266  ldx   PD.BUF,y         get sector pointer
                      (/home/strick/go/s):00530                  IFNE  H6309
                      (/home/strick/go/s):00531                  ldq   PD.SIZ,y         get current file size
                      (/home/strick/go/s):00532                  stq   FD.SIZ,x         save it in file descriptor
                      (/home/strick/go/s):00533                  ELSE
0278 EC2F             (/home/strick/go/s):00534                  ldd   PD.SIZ,y
027A ED09             (/home/strick/go/s):00535                  std   FD.SIZ,x
027C ECA811           (/home/strick/go/s):00536                  ldd   PD.SIZ+2,y
027F ED0B             (/home/strick/go/s):00537                  std   FD.SIZ+2,x
                      (/home/strick/go/s):00538                  ENDC
0281 6F2A             (/home/strick/go/s):00539                  clr   PD.SMF,y         clear state flags
0283 160F96           (/home/strick/go/s):00540         MDir273  lbra  L11FD
                      (/home/strick/go/s):00541         
                      (/home/strick/go/s):00542         
                      (/home/strick/go/s):00543         *
                      (/home/strick/go/s):00544         * I$Close Entry Point
                      (/home/strick/go/s):00545         *
                      (/home/strick/go/s):00546         * Entry: A = path number
                      (/home/strick/go/s):00547         *
                      (/home/strick/go/s):00548         * Exit:
                      (/home/strick/go/s):00549         *
                      (/home/strick/go/s):00550         * Error: CC Carry set
                      (/home/strick/go/s):00551         *        B = errcode
                      (/home/strick/go/s):00552         *
0286 4F               (/home/strick/go/s):00553         Close    clra  
0287 6D22             (/home/strick/go/s):00554                  tst   PD.CNT,y         any open paths?
0289 2621             (/home/strick/go/s):00555                  bne   Clos29C          yes, return
028B 170FC8           (/home/strick/go/s):00556                  lbsr  L1237            flush current sector of needed
028E 2522             (/home/strick/go/s):00557                  bcs   Rt100Mem         error, skip ahead
0290 E621             (/home/strick/go/s):00558                  ldb   PD.MOD,y         get access mode
0292 C502             (/home/strick/go/s):00559                  bitb  #WRITE.          is it write?
0294 271C             (/home/strick/go/s):00560                  beq   Rt100Mem         no, skip ahead
0296 ECA834           (/home/strick/go/s):00561                  ldd   PD.FD,y
0299 2605             (/home/strick/go/s):00562                  bne   Clos290
029B A6A836           (/home/strick/go/s):00563                  lda   PD.FD+2,y
029E 2712             (/home/strick/go/s):00564                  beq   Rt100Mem
02A0 8DD1             (/home/strick/go/s):00565         Clos290  bsr   MDir263          set new file size in file descriptor
02A2 170343           (/home/strick/go/s):00566                  lbsr  Gst5E5           reached EOF?
02A5 240B             (/home/strick/go/s):00567                  bcc   Rt100Mem         no, skip ahead
02A7 170C76           (/home/strick/go/s):00568                  lbsr  L0EFE
02AA 2006             (/home/strick/go/s):00569                  bra   Rt100Mem         skip ahead
02AC 39               (/home/strick/go/s):00570         Clos29C  rts                    return
                      (/home/strick/go/s):00571         * Return file not accessible error
02AD C6D6             (/home/strick/go/s):00572         Clos29D  ldb   #E$FNA
02AF 43               (/home/strick/go/s):00573         ErMemRtn coma  
02B0 3520             (/home/strick/go/s):00574         Clos2A0  puls  y
                      (/home/strick/go/s):00575         
                      (/home/strick/go/s):00576         * Generalized return to system
02B2 3405             (/home/strick/go/s):00577         Rt100Mem pshs  b,cc             preserve error status
02B4 EE28             (/home/strick/go/s):00578                  ldu   PD.BUF,y         get sector buffer pointer
02B6 2715             (/home/strick/go/s):00579                  beq   RtMem2CF         none, skip ahead
02B8 CC0100           (/home/strick/go/s):00580                  ldd   #$0100           get size of sector buffer
02BB 103F29           (/home/strick/go/s):00581                  os9   F$SRtMem         return the memory to system
02BE AEA830           (/home/strick/go/s):00582                  ldx   PD.Exten,y       get path extension pointer
02C1 270A             (/home/strick/go/s):00583                  beq   RtMem2CF         none, return
02C3 1707E8           (/home/strick/go/s):00584                  lbsr  L0A90            scan conflict list?
                      (/home/strick/go/s):00585                  IFGT  Level-1
02C6 A684             (/home/strick/go/s):00586                  lda   PE.PE,x          return path extension to system
02C8 9E88             (/home/strick/go/s):00587                  ldx   <D.PthDBT
02CA 103F31           (/home/strick/go/s):00588                  os9   F$Ret64
                      (/home/strick/go/s):00589                  ENDC
02CD 3585             (/home/strick/go/s):00590         RtMem2CF puls  pc,b,cc          restore error status & return
                      (/home/strick/go/s):00591         
                      (/home/strick/go/s):00592         * Place date & time into file descriptor
02CF 170E73           (/home/strick/go/s):00593         L02D1    lbsr  RdFlDscr         read in file descriptor sector
02D2 EE28             (/home/strick/go/s):00594                  ldu   PD.BUF,y         get pointer to it
02D4 A648             (/home/strick/go/s):00595                  lda   FD.LNK,u         get link count
02D6 9E50             (/home/strick/go/s):00596                  ldx   <D.Proc          get current process pointer
02D8 3412             (/home/strick/go/s):00597                  pshs  x,a              preserve 'em
                      (/home/strick/go/s):00598                  IFGT  Level-1
02DA 9E4A             (/home/strick/go/s):00599                  ldx   <D.SysPrc        switch to system process descriptor
02DC 9F50             (/home/strick/go/s):00600                  stx   <D.Proc
                      (/home/strick/go/s):00601                  ENDC
02DE 3043             (/home/strick/go/s):00602                  leax  FD.DAT,u         point to date last modified
02E0 103F15           (/home/strick/go/s):00603                  os9   F$Time           put currenttime there
                      (/home/strick/go/s):00604         * Gene Heskett's STUPID "LDA #$01, STA $00FF,u" CRAP went here. DAMN DAMN DAMN
                      (/home/strick/go/s):00605         * He's NEVER getting the RBF source again!
02E3 3512             (/home/strick/go/s):00606                  puls  x,a              restore link count & current process
                      (/home/strick/go/s):00607                  IFGT  Level-1
02E5 9F50             (/home/strick/go/s):00608                  stx   <D.Proc
                      (/home/strick/go/s):00609                  ENDC
02E7 A748             (/home/strick/go/s):00610                  sta   FD.LNK,u
02E9 39               (/home/strick/go/s):00611                  rts                    return
                      (/home/strick/go/s):00612         
                      (/home/strick/go/s):00613         
                      (/home/strick/go/s):00614         *
                      (/home/strick/go/s):00615         * I$ChgDir Entry Point
                      (/home/strick/go/s):00616         *
                      (/home/strick/go/s):00617         * Entry:
                      (/home/strick/go/s):00618         *
                      (/home/strick/go/s):00619         * Exit:
                      (/home/strick/go/s):00620         *
                      (/home/strick/go/s):00621         * Error: CC Carry set
                      (/home/strick/go/s):00622         *        B = errcode
                      (/home/strick/go/s):00623         *
02EA 3420             (/home/strick/go/s):00624         ChgDir   pshs  y                preserve path descriptor pointer
                      (/home/strick/go/s):00625                  IFNE  H6309
                      (/home/strick/go/s):00626                  oim   #$80,PD.MOD,y    ensure the directory bit is set
                      (/home/strick/go/s):00627                  ELSE
02EC A621             (/home/strick/go/s):00628                  lda   PD.MOD,y
02EE 8A80             (/home/strick/go/s):00629                  ora   #$80
02F0 A721             (/home/strick/go/s):00630                  sta   PD.MOD,y
                      (/home/strick/go/s):00631                  ENDC
02F2 17FE8B           (/home/strick/go/s):00632                  lbsr  Open             go open the directory
02F5 25B9             (/home/strick/go/s):00633                  bcs   Clos2A0          exit on error
02F7 9E50             (/home/strick/go/s):00634                  ldx   <D.Proc          get current process pointer
02F9 EEA835           (/home/strick/go/s):00635                  ldu   PD.FD+1,y        get LSW of file descriptor sector #
02FC E621             (/home/strick/go/s):00636                  ldb   PD.MOD,y         get current file mode
02FE C503             (/home/strick/go/s):00637                  bitb  #UPDAT.          read or write mode?
0300 2709             (/home/strick/go/s):00638                  beq   CD30D            no, skip ahead
                      (/home/strick/go/s):00639         * Change current data dir
0302 E6A834           (/home/strick/go/s):00640                  ldb   PD.FD,y
0305 E78823           (/home/strick/go/s):00641                  stb   P$DIO+3,x
0308 EF8824           (/home/strick/go/s):00642                  stu   P$DIO+4,x
030B E621             (/home/strick/go/s):00643         CD30D    ldb   PD.MOD,y         get current file mode
030D C504             (/home/strick/go/s):00644                  bitb  #EXEC.           is it execution dir?
030F 2709             (/home/strick/go/s):00645                  beq   CD31C            no, skip ahead
                      (/home/strick/go/s):00646         * Change current execution directory
0311 E6A834           (/home/strick/go/s):00647                  ldb   PD.FD,y
0314 E78829           (/home/strick/go/s):00648                  stb   P$DIO+9,x
0317 EF882A           (/home/strick/go/s):00649                  stu   P$DIO+10,x
031A 5F               (/home/strick/go/s):00650         CD31C    clrb                   clear errors
031B 2093             (/home/strick/go/s):00651                  bra   Clos2A0          return to system
                      (/home/strick/go/s):00652         
                      (/home/strick/go/s):00653         
                      (/home/strick/go/s):00654         *
                      (/home/strick/go/s):00655         * I$Delete Entry Point
                      (/home/strick/go/s):00656         *
                      (/home/strick/go/s):00657         * Entry:
                      (/home/strick/go/s):00658         *
                      (/home/strick/go/s):00659         * Exit:
                      (/home/strick/go/s):00660         *
                      (/home/strick/go/s):00661         * Error: CC Carry set
                      (/home/strick/go/s):00662         *        B = errcode
                      (/home/strick/go/s):00663         *
                      (/home/strick/go/s):00664         * NOTE: Bug for write protected disk has been fixed - 93/09/19
                      (/home/strick/go/s):00665         *
031D                  (/home/strick/go/s):00666         Delete   
031D 3420             (/home/strick/go/s):00667                  pshs  y                preserve path descriptor pointer
031F 170492           (/home/strick/go/s):00668                  lbsr  FindFile         does the file exist?
0322 258C             (/home/strick/go/s):00669                  bcs   Clos2A0          no, return error
0324 ECA835           (/home/strick/go/s):00670                  ldd   PD.FD+1,y        do we have a file descriptor?
0327 2607             (/home/strick/go/s):00671                  bne   Del332           yes, skip ahead
0329 6DA834           (/home/strick/go/s):00672                  tst   PD.FD,y
032C 1027FF7D         (/home/strick/go/s):00673                  lbeq  Clos29D
0330 8642             (/home/strick/go/s):00674         Del332   lda   #SHARE.+WRITE.   get attributes to check
0332 1706C6           (/home/strick/go/s):00675                  lbsr  ChkAttrs         can user delete ths file?
0335 1025FF77         (/home/strick/go/s):00676                  lbcs  Clos2A0          no, return error
0339 EE26             (/home/strick/go/s):00677                  ldu   PD.RGS,y         get registered stack pointer
033B AF44             (/home/strick/go/s):00678                  stx   R$X,u            save updated pathname pointer
033D 170E05           (/home/strick/go/s):00679                  lbsr  RdFlDscr         read in file descriptor
                      (/home/strick/go/s):00680         * BUG FIX: Below used to read 'lbcs L03D4' which expects the file descriptor
                      (/home/strick/go/s):00681         *          sector # & a temporary buffer to be stored on the stack but it
                      (/home/strick/go/s):00682         *          isn't there yet.  Restored back to RBF 28 error handling
                      (/home/strick/go/s):00683         *         lbcs  L02B2           error, return to system (FD read error fix)
0340 10250090         (/home/strick/go/s):00684                  lbcs  Del3D4           error, rturn to system (FD read error fix)
0344 AE28             (/home/strick/go/s):00685                  ldx   PD.BUF,y         get pointer to the file descriptor
0346 6A08             (/home/strick/go/s):00686                  dec   FD.LNK,x         decrement link count
0348 270B             (/home/strick/go/s):00687                  beq   Del358           down to zero, delete the file descriptor
034A 170ECF           (/home/strick/go/s):00688                  lbsr  L11FD            write updated file descriptor
034D 3454             (/home/strick/go/s):00689                  pshs  u,x,b
                      (/home/strick/go/s):00690                  IFNE  H6309
                      (/home/strick/go/s):00691                  clrd  
                      (/home/strick/go/s):00692                  ELSE
034F 4F               (/home/strick/go/s):00693                  clra  
0350 5F               (/home/strick/go/s):00694                  clrb  
                      (/home/strick/go/s):00695                  ENDC
0351 ED63             (/home/strick/go/s):00696                  std   $03,s
0353 204A             (/home/strick/go/s):00697                  bra   Del39F
                      (/home/strick/go/s):00698         
                      (/home/strick/go/s):00699         * RBF30 start
0355 E6A834           (/home/strick/go/s):00700         Del358   ldb   PD.FD,y          get LSN of file descriptor
0358 AEA835           (/home/strick/go/s):00701                  ldx   PD.FD+1,y
035B 3454             (/home/strick/go/s):00702                  pshs  u,x,b            preserve 'em
035D CC0100           (/home/strick/go/s):00703                  ldd   #$0100           allocate a temporary sector buffer
0360 103F28           (/home/strick/go/s):00704                  os9   F$SRqMem
0363 2404             (/home/strick/go/s):00705                  bcc   Del36C           got it, skip ahead
                      (/home/strick/go/s):00706                  IFNE  H6309
                      (/home/strick/go/s):00707                  clrd  
                      (/home/strick/go/s):00708                  ELSE
0365 4F               (/home/strick/go/s):00709                  clra  
0366 5F               (/home/strick/go/s):00710                  clrb  
                      (/home/strick/go/s):00711                  ENDC
0367 200E             (/home/strick/go/s):00712                  bra   Del37A           return with eror
                      (/home/strick/go/s):00713         
0369 EF63             (/home/strick/go/s):00714         Del36C   stu   $03,s            save pointer to sector buffer
036B AE28             (/home/strick/go/s):00715                  ldx   PD.BUF,y
                      (/home/strick/go/s):00716                  IFNE  H6309
                      (/home/strick/go/s):00717                  ldw   #$0100
                      (/home/strick/go/s):00718                  tfm   x+,u+            copy the sector
                      (/home/strick/go/s):00719                  ELSE
036D 5F               (/home/strick/go/s):00720                  clrb
036E A680             (/home/strick/go/s):00721         DelLoop  lda   ,x+
0370 A7C0             (/home/strick/go/s):00722                  sta   ,u+
0372 5A               (/home/strick/go/s):00723                  decb
0373 26F9             (/home/strick/go/s):00724                  bne   DelLoop
                      (/home/strick/go/s):00725                  ENDC
0375 EC63             (/home/strick/go/s):00726                  ldd   $03,s
0377 ED63             (/home/strick/go/s):00727         Del37A   std   $03,s            save buffer pointer to U on stack
                      (/home/strick/go/s):00728         * Start back into RBF28 code again
                      (/home/strick/go/s):00729                  IFNE  H6309
                      (/home/strick/go/s):00730                  clrd  
                      (/home/strick/go/s):00731                  ELSE
0379 4F               (/home/strick/go/s):00732                  clra  
037A 5F               (/home/strick/go/s):00733                  clrb  
                      (/home/strick/go/s):00734                  ENDC
037B ED2F             (/home/strick/go/s):00735                  std   PD.SIZ,y         set file size to zero
037D EDA811           (/home/strick/go/s):00736                  std   PD.SIZ+2,y
0380 170B9D           (/home/strick/go/s):00737                  lbsr  L0EFE            set the file size to PD.SIZ
0383 256A             (/home/strick/go/s):00738                  bcs   Del3EF
0385 E6A834           (/home/strick/go/s):00739                  ldb   PD.FD,y          grab file descriptor sector number
0388 AEA835           (/home/strick/go/s):00740                  ldx   PD.FD+1,y
038B E7A816           (/home/strick/go/s):00741                  stb   PD.SBP,y         copy it to the segment beginning sector number
038E AFA817           (/home/strick/go/s):00742                  stx   PD.SBP+1,y
0391 AE28             (/home/strick/go/s):00743                  ldx   PD.BUF,y         point to the buffer
                      (/home/strick/go/s):00744         * RBF34
                      (/home/strick/go/s):00745         * LDD $13,X    : FD.SEG+3, grab the size of the FIRST segment of the file
                      (/home/strick/go/s):00746         * addd #$0001
                      (/home/strick/go/s):00747         * THEN std PD.SSZ+1,y
                      (/home/strick/go/s):00748         *
                      (/home/strick/go/s):00749         * Why?  RBF automatically makes the FIRST SEGMENT of the file fill the rest
                      (/home/strick/go/s):00750         * of the cluster that was allocated for the file descriptor.
                      (/home/strick/go/s):00751         * Why not LDX PD.DTB,y  LDD DD.BIT,x  ???
                      (/home/strick/go/s):00752         *
                      (/home/strick/go/s):00753         * Gene H: My problem with this fix from rbf28 is in proving to me
                      (/home/strick/go/s):00754         * $13,x is the correct location to read! I can't seem to find
                      (/home/strick/go/s):00755         * the defines to match the $13,x address.
                      (/home/strick/go/s):00756         *         ldd   FD.SEG+FDSL.B,x grab the size of the first segment
0393 EC8813           (/home/strick/go/s):00757                  ldd   <$13,x           this code is REQUIRED for multiple
                      (/home/strick/go/s):00758                  IFNE  H6309
                      (/home/strick/go/s):00759                  incd                   sector/cluster operation, don't remove!
                      (/home/strick/go/s):00760                  ELSE
0396 C30001           (/home/strick/go/s):00761                  addd  #$0001 sector cluster operation, DO NOT REMOVE!
                      (/home/strick/go/s):00762                  ENDC
0399 EDA81A           (/home/strick/go/s):00763                  std   PD.SSZ+1,y
039C 170C4F           (/home/strick/go/s):00764                  lbsr  ClrFBits         delete a segment
039F 254E             (/home/strick/go/s):00765         Del39F   bcs   Del3EF
03A1 170EB2           (/home/strick/go/s):00766                  lbsr  L1237            flush the sector
03A4 170707           (/home/strick/go/s):00767                  lbsr  L0A90
03A7 A6A837           (/home/strick/go/s):00768                  lda   PD.DFD,y
03AA A7A834           (/home/strick/go/s):00769                  sta   PD.FD,y
03AD ECA838           (/home/strick/go/s):00770                  ldd   PD.DFD+1,y
03B0 EDA835           (/home/strick/go/s):00771                  std   PD.FD+1,y
03B3 170D8F           (/home/strick/go/s):00772                  lbsr  RdFlDscr         get the file descriptor
03B6 2537             (/home/strick/go/s):00773                  bcs   Del3EF
03B8 17068D           (/home/strick/go/s):00774                  lbsr  L0A2A
03BB EE28             (/home/strick/go/s):00775                  ldu   PD.BUF,y
03BD 17FE1B           (/home/strick/go/s):00776                  lbsr  Open1CE          update PD entries from FD entries
                      (/home/strick/go/s):00777                  IFNE  H6309
                      (/home/strick/go/s):00778                  ldq   PD.DCP,y         get current directory entry pointer
                      (/home/strick/go/s):00779                  stq   PD.CP,y          save it as current pointer
                      (/home/strick/go/s):00780                  ELSE
03C0 ECA83A           (/home/strick/go/s):00781                  ldd   PD.DCP,y
03C3 ED2B             (/home/strick/go/s):00782                  std   PD.CP,y
03C5 ECA83C           (/home/strick/go/s):00783                  ldd   PD.DCP+2,y
03C8 ED2D             (/home/strick/go/s):00784                  std   PD.CP+2,y
                      (/home/strick/go/s):00785                  ENDC
03CA 1705A8           (/home/strick/go/s):00786                  lbsr  L0957            read in the directory sector
03CD 2520             (/home/strick/go/s):00787                  bcs   Del3EF
03CF 6F84             (/home/strick/go/s):00788                  clr   ,x               clear first byte of filename in directory entry
03D1 170E50           (/home/strick/go/s):00789                  lbsr  L1205            flush the sector to disk
                      (/home/strick/go/s):00790         * RBF30 start
03D4 EE63             (/home/strick/go/s):00791         Del3D4   ldu   $03,s            get temporary sector buffer pointer
                      (/home/strick/go/s):00792         * the patch at Del3EF-3F9 munged the stack for this one - GH
03D6 2725             (/home/strick/go/s):00793                  beq   Del3F9           none allocated, return to process
03D8 E6E4             (/home/strick/go/s):00794                  ldb   ,s               get the old file descriptor logical sector #
03DA AE61             (/home/strick/go/s):00795                  ldx   $01,s
03DC E7A834           (/home/strick/go/s):00796                  stb   PD.FD,y          put it back into path descriptor
03DF AFA835           (/home/strick/go/s):00797                  stx   PD.FD+1,y
03E2 AE28             (/home/strick/go/s):00798                  ldx   PD.BUF,y         get current sector buffer pointer
03E4 AF61             (/home/strick/go/s):00799                  stx   1,s              save it a sec
03E6 EF28             (/home/strick/go/s):00800                  stu   PD.BUF,y         put original sector pointer into path descriptor
03E8 170E31           (/home/strick/go/s):00801                  lbsr  L11FD            write the old file descriptor to disk
03EB EE61             (/home/strick/go/s):00802                  ldu   1,s              get temporary sector pointer
03ED EF28             (/home/strick/go/s):00803                  stu   PD.BUF,y         save it as current
03EF 3405             (/home/strick/go/s):00804         Del3EF   pshs  b,cc             preserve rror status & code if any (WP bug fix - raises stack offsets+2)
03F1 EE65             (/home/strick/go/s):00805                  ldu   $05,s            get temporary sector buffer pointer (this was a 3)
03F3 2706             (/home/strick/go/s):00806                  beq   Del3F5           didn't allocate one, skip ahead (different, new label! no mem to return)
03F5 CC0100           (/home/strick/go/s):00807                  ldd   #$0100           get size of it
03F8 103F29           (/home/strick/go/s):00808                  os9   F$SRtMem         return the memory back to the system
03FB 3505             (/home/strick/go/s):00809         Del3F5   puls  b,cc             restore error status & code (WP bug fix)
03FD 3265             (/home/strick/go/s):00810         Del3F9   leas  5,s              purge stack
                      (/home/strick/go/s):00811         * Start back into RBF28 code
03FF 16FEAE           (/home/strick/go/s):00812                  lbra  Clos2A0          return to system
                      (/home/strick/go/s):00813         
                      (/home/strick/go/s):00814         
                      (/home/strick/go/s):00815         *
                      (/home/strick/go/s):00816         * I$Seek Entry Point
                      (/home/strick/go/s):00817         *
                      (/home/strick/go/s):00818         * Entry:
                      (/home/strick/go/s):00819         *
                      (/home/strick/go/s):00820         * Exit:
                      (/home/strick/go/s):00821         *
                      (/home/strick/go/s):00822         * Error: CC Carry set
                      (/home/strick/go/s):00823         *        B = errcode
                      (/home/strick/go/s):00824         *
0402 E62A             (/home/strick/go/s):00825         Seek     ldb   PD.SMF,y         get state flags
0404 C502             (/home/strick/go/s):00826                  bitb  #SINBUF          do we have a sector in buffer?
0406 2713             (/home/strick/go/s):00827                  beq   Seek417          no, skip ahead
0408 A645             (/home/strick/go/s):00828                  lda   R$X+1,u          calculate if we need a new sector
040A E648             (/home/strick/go/s):00829                  ldb   R$U,u
040C A32C             (/home/strick/go/s):00830                  subd  PD.CP+1,y
040E 2606             (/home/strick/go/s):00831                  bne   Seek412
0410 A644             (/home/strick/go/s):00832                  lda   R$X,u
0412 A22B             (/home/strick/go/s):00833                  sbca  PD.CP,y
0414 2709             (/home/strick/go/s):00834                  beq   Seek41B          no need to get another sector, skip ahead
0416 170E3D           (/home/strick/go/s):00835         Seek412  lbsr  L1237            flush the current sector to disk
0419 2508             (/home/strick/go/s):00836                  bcs   Seek41F
041B EC44             (/home/strick/go/s):00837         Seek417  ldd   R$X,u            get & set new file pointer
041D ED2B             (/home/strick/go/s):00838                  std   PD.CP,y
041F EC48             (/home/strick/go/s):00839         Seek41B  ldd   R$U,u
0421 ED2D             (/home/strick/go/s):00840                  std   PD.CP+2,y
0423 39               (/home/strick/go/s):00841         Seek41F  rts                    return
                      (/home/strick/go/s):00842         
                      (/home/strick/go/s):00843         
                      (/home/strick/go/s):00844         *
                      (/home/strick/go/s):00845         * I$ReadLn Entry Point
                      (/home/strick/go/s):00846         *
                      (/home/strick/go/s):00847         * Entry:
                      (/home/strick/go/s):00848         *
                      (/home/strick/go/s):00849         * Exit:
                      (/home/strick/go/s):00850         *
                      (/home/strick/go/s):00851         * Error: CC Carry set
                      (/home/strick/go/s):00852         *        B = errcode
                      (/home/strick/go/s):00853         *
0424 8D3F             (/home/strick/go/s):00854         ReadLn   bsr   RdLn463          check if record locked for amount to be read
0426 2722             (/home/strick/go/s):00855                  beq   RdLn446          zero bytes to read, return
0428 8D21             (/home/strick/go/s):00856                  bsr   RdLn447
042A 3476             (/home/strick/go/s):00857                  pshs  u,y,x,b,a
042C 1E13             (/home/strick/go/s):00858                  exg   x,u
                      (/home/strick/go/s):00859                  IFNE  H6309
                      (/home/strick/go/s):00860                  tfr   0,y              smaller, same speed as LDY #$0000
                      (/home/strick/go/s):00861                  ELSE
042E 108E0000         (/home/strick/go/s):00862                  ldy   #$0000
                      (/home/strick/go/s):00863                  ENDC
0432 860D             (/home/strick/go/s):00864                  lda   #$0D             a carriage return
0434 3121             (/home/strick/go/s):00865         RdLn430  leay  1,y              go up one byte
0436 A180             (/home/strick/go/s):00866                  cmpa  ,x+              is it a CR?
0438 2703             (/home/strick/go/s):00867                  beq   RdLn439          yes, we're done
043A 5A               (/home/strick/go/s):00868                  decb                   count down
043B 26F7             (/home/strick/go/s):00869                  bne   RdLn430          until done one sector, at least
043D                  (/home/strick/go/s):00870         RdLn439
043D AE66             (/home/strick/go/s):00871                  ldx   6,s              get old U
                      (/home/strick/go/s):00872                  IFGT  Level-1
043F 8D5C             (/home/strick/go/s):00873                  bsr   RdLn49B          move bytes from the system to user
0441 10AF6A           (/home/strick/go/s):00874                  sty   $0A,s            save Y on-stack, above calling routine????
0444 3576             (/home/strick/go/s):00875                  puls  u,y,x,b,a        restore registers
                      (/home/strick/go/s):00876                  ENDC
0446 EC62             (/home/strick/go/s):00877                  ldd   $02,s            get old saved Y from above
                      (/home/strick/go/s):00878         *         addr  d,x
0448 308B             (/home/strick/go/s):00879                  leax  d,x              point to how many bytes we've read
044A 39               (/home/strick/go/s):00880         RdLn446  rts                    and exit
                      (/home/strick/go/s):00881         
044B 170086           (/home/strick/go/s):00882         RdLn447  lbsr  Read4D3          do reading, calling this routine back again
044E 301F             (/home/strick/go/s):00883                  leax  -1,x             back up a byte
                      (/home/strick/go/s):00884                  IFGT  Level-1
0450 17054A           (/home/strick/go/s):00885                  lbsr  L097F            get a byte from another task (F$LDABX)
                      (/home/strick/go/s):00886                  ELSE
                      (/home/strick/go/s):00887                  lda   b,x
                      (/home/strick/go/s):00888                  ENDC
0453 810D             (/home/strick/go/s):00889                  cmpa  #$0D             is it a CR?
0455 2704             (/home/strick/go/s):00890                  beq   RdLn459          yes, skip ahead
0457 EC62             (/home/strick/go/s):00891                  ldd   $02,s            check data saved on-stack???
0459 267F             (/home/strick/go/s):00892                  bne   Read4D9          if not zero, skip ahead
045B EE26             (/home/strick/go/s):00893         RdLn459  ldu   PD.RGS,y         grab caller's register stack
045D EC46             (/home/strick/go/s):00894                  ldd   R$Y,u            get number of bytes to read
045F A362             (/home/strick/go/s):00895                  subd  $02,s            take out data read last sector??
0461 ED46             (/home/strick/go/s):00896                  std   R$Y,u            save as data bytes to read
0463 205D             (/home/strick/go/s):00897                  bra   Read4C0          skip ahead
                      (/home/strick/go/s):00898         
                      (/home/strick/go/s):00899         * Calculate if read will be record locked with another process
                      (/home/strick/go/s):00900         * Entry: U=Register stack pointer
0465 EC46             (/home/strick/go/s):00901         RdLn463  ldd   R$Y,u            get requested read length
0467 1706C0           (/home/strick/go/s):00902                  lbsr  L0B0C            record locked with somebody else?
046A 252D             (/home/strick/go/s):00903                  bcs   RdLn497          yes, return deadlock error
046C EC46             (/home/strick/go/s):00904                  ldd   R$Y,u            get requested read length
046E 8D05             (/home/strick/go/s):00905                  bsr   RdLn473          calculate if we will have an EOF error
0470 2527             (/home/strick/go/s):00906                  bcs   RdLn497          we did, return error
0472 ED46             (/home/strick/go/s):00907                  std   R$Y,u            save # bytes available
0474 39               (/home/strick/go/s):00908                  rts                    return
                      (/home/strick/go/s):00909         
                      (/home/strick/go/s):00910         * Calculate if read length will overrun file length
                      (/home/strick/go/s):00911         * Entry: D=Requested # bytes to read from file
                      (/home/strick/go/s):00912         * Exit : D=# bytes available
0475 3406             (/home/strick/go/s):00913         RdLn473  pshs  d                preserve length
                      (/home/strick/go/s):00914                  IFNE  H6309
                      (/home/strick/go/s):00915                  ldq   PD.SIZ,y         get current file size
                      (/home/strick/go/s):00916                  subw  PD.CP+2,y        subtract off LSW of current byte pointer
                      (/home/strick/go/s):00917                  tfr   w,x              save it in the old register
                      (/home/strick/go/s):00918                  sbcd  PD.CP,y          subtract off current byte pointer
                      (/home/strick/go/s):00919                  ELSE
0477 ECA811           (/home/strick/go/s):00920                  ldd   PD.SIZ+2,y
047A A32D             (/home/strick/go/s):00921                  subd  PD.CP+2,y
047C 1F01             (/home/strick/go/s):00922                  tfr   d,x
047E EC2F             (/home/strick/go/s):00923                  ldd   PD.SIZ,y
0480 E22C             (/home/strick/go/s):00924                  sbcb  PD.CP+1,y
0482 A22B             (/home/strick/go/s):00925                  sbca  PD.CP,y
                      (/home/strick/go/s):00926                  ENDC
0484 2510             (/home/strick/go/s):00927                  bcs   RdLn494          it will overrun, return EOF error
0486 260B             (/home/strick/go/s):00928                  bne   RdLn491          some bytes left, return OK
0488 5D               (/home/strick/go/s):00929                  tstb  
0489 2608             (/home/strick/go/s):00930                  bne   RdLn491
048B ACE4             (/home/strick/go/s):00931                  cmpx  ,s               do we have enough bytes?
048D 2404             (/home/strick/go/s):00932                  bhs   RdLn491          yes, return OK
048F AFE4             (/home/strick/go/s):00933                  stx   ,s               save # bytes available
0491 2703             (/home/strick/go/s):00934                  beq   RdLn494          it's 0, return EOF error
0493 5F               (/home/strick/go/s):00935         RdLn491  clrb                   clear error status
0494 3586             (/home/strick/go/s):00936                  puls  pc,b,a           retrieve # bytes & return
                      (/home/strick/go/s):00937         * Return EOF error
0496 53               (/home/strick/go/s):00938         RdLn494  comb                   set carry for error
0497 C6D3             (/home/strick/go/s):00939                  ldb   #E$EOF           get error code
0499 3262             (/home/strick/go/s):00940         RdLn497  leas  $02,s            purge length off stack
049B 202A             (/home/strick/go/s):00941                  bra   Read4C5          return
                      (/home/strick/go/s):00942         
                      (/home/strick/go/s):00943                  IFGT  Level-1
                      (/home/strick/go/s):00944         * Move bytes from system to user
                      (/home/strick/go/s):00945         * Entry: X=Source pointer
                      (/home/strick/go/s):00946         *        Y=Byte count
                      (/home/strick/go/s):00947         *        U=Destination pointer
049D                  (/home/strick/go/s):00948         RdLn49B
049D 3410             (/home/strick/go/s):00949                  pshs  x
049F 9E50             (/home/strick/go/s):00950                  ldx   <D.Proc          get current process pointer
04A1 96D0             (/home/strick/go/s):00951                  lda   <D.SysTsk        get source task #
04A3 E606             (/home/strick/go/s):00952                  ldb   P$Task,x         get destination task #
04A5 3510             (/home/strick/go/s):00953                  puls  x
04A7 103F38           (/home/strick/go/s):00954                  os9   F$Move           move 'em
04AA 39               (/home/strick/go/s):00955                  rts                    return
                      (/home/strick/go/s):00956                  ENDC
                      (/home/strick/go/s):00957                  
                      (/home/strick/go/s):00958         
                      (/home/strick/go/s):00959         *
                      (/home/strick/go/s):00960         * I$Read Entry Point
                      (/home/strick/go/s):00961         *
                      (/home/strick/go/s):00962         * Entry:
                      (/home/strick/go/s):00963         *
                      (/home/strick/go/s):00964         * Exit:
                      (/home/strick/go/s):00965         *
                      (/home/strick/go/s):00966         * Error: CC Carry set
                      (/home/strick/go/s):00967         *        B = errcode
                      (/home/strick/go/s):00968         *
04AB 8DB8             (/home/strick/go/s):00969         Read     bsr   RdLn463          record locked?
04AD 270E             (/home/strick/go/s):00970                  beq   Read4BB          no, allow it
04AF 8D0D             (/home/strick/go/s):00971                  bsr   Read4BC          do reading
04B1                  (/home/strick/go/s):00972         Read4AF
                      (/home/strick/go/s):00973                  IFGT  Level-1
04B1 3476             (/home/strick/go/s):00974                  pshs  u,y,x,b,a        save data on the stack
04B3 1E13             (/home/strick/go/s):00975                  exg   x,u
04B5 1F02             (/home/strick/go/s):00976                  tfr   d,y
04B7 8DE4             (/home/strick/go/s):00977                  bsr   RdLn49B          move bytes from system to user
04B9 3576             (/home/strick/go/s):00978                  puls  u,y,x,b,a        restore registers
                      (/home/strick/go/s):00979                  ENDC
                      (/home/strick/go/s):00980         *         addr  d,x
04BB 308B             (/home/strick/go/s):00981                  leax  d,x              point to end of data copied?
04BD 39               (/home/strick/go/s):00982         Read4BB  rts   
                      (/home/strick/go/s):00983         
04BE 8D14             (/home/strick/go/s):00984         Read4BC  bsr   Read4D3          do some reading/writing
04C0 2618             (/home/strick/go/s):00985                  bne   Read4D9          not done, continue
04C2 5F               (/home/strick/go/s):00986         Read4C0  clrb  
04C3 327E             (/home/strick/go/s):00987         Read4C1  leas  -2,s             clear out crap on the stack
04C5 326A             (/home/strick/go/s):00988         Read4C3  leas  $0A,s
                      (/home/strick/go/s):00989         * Error processor for read & write
04C7 3405             (/home/strick/go/s):00990         Read4C5  pshs  b,cc             preserve error status
04C9 A621             (/home/strick/go/s):00991                  lda   PD.MOD,y         get file mode
04CB 8502             (/home/strick/go/s):00992                  bita  #WRITE.          was it write?
04CD 2603             (/home/strick/go/s):00993                  bne   Read4D0          yes, return
                      (/home/strick/go/s):00994                  IFGT  Level-1
04CF 17064E           (/home/strick/go/s):00995                  lbsr  L0B02            clear lock status, and send signals
                      (/home/strick/go/s):00996                  ENDC
04D2 3585             (/home/strick/go/s):00997         Read4D0  puls  b,cc,pc          restore & return
                      (/home/strick/go/s):00998         
                      (/home/strick/go/s):00999         * do reading/writing
04D4 EC44             (/home/strick/go/s):01000         Read4D3  ldd   R$X,u            get caller's buffer pointer
04D6 AE46             (/home/strick/go/s):01001                  ldx   R$Y,u            get length of read
04D8 3416             (/home/strick/go/s):01002                  pshs  x,b,a            preserve 'em
04DA A62A             (/home/strick/go/s):01003         Read4D9  lda   PD.SMF,y         get stat flags
04DC 8502             (/home/strick/go/s):01004                  bita  #SINBUF          sector in buffer/
04DE 261A             (/home/strick/go/s):01005                  bne   Read4F9          yes, read it
04E0 6D2E             (/home/strick/go/s):01006                  tst   PD.CP+3,y        read pointer on even sector?
04E2 2611             (/home/strick/go/s):01007                  bne   Read4F4          no, skip ahead
04E4 6D62             (/home/strick/go/s):01008                  tst   $02,s            MSB of length have anything?
04E6 270D             (/home/strick/go/s):01009                  beq   Read4F4          no, skip ahead
04E8 308D0086         (/home/strick/go/s):01010                  leax  >Writ571,pcr     WritLn or ReadLn?
04EC AC66             (/home/strick/go/s):01011                  cmpx  $06,s            check the stack
04EE 2605             (/home/strick/go/s):01012                  bne   Read4F4          skipahead
04F0 170BC7           (/home/strick/go/s):01013                  lbsr  L1098            find a segment
04F3 2003             (/home/strick/go/s):01014                  bra   Read4F7
                      (/home/strick/go/s):01015         
04F5 170D7D           (/home/strick/go/s):01016         Read4F4  lbsr  L1256
04F8 25C9             (/home/strick/go/s):01017         Read4F7  bcs   Read4C1
04FA EE28             (/home/strick/go/s):01018         Read4F9  ldu   PD.BUF,y         get sector buffer pointer
04FC 4F               (/home/strick/go/s):01019                  clra  
04FD E62E             (/home/strick/go/s):01020                  ldb   PD.CP+3,y
                      (/home/strick/go/s):01021         *         addr  d,u
04FF 33CB             (/home/strick/go/s):01022                  leau  d,u              point to offset within the buffer
0501 50               (/home/strick/go/s):01023                  negb                   get D=number of byte left to read in the sector?
0502 82FF             (/home/strick/go/s):01024                  sbca  #$FF             not quite sure what this is...
0504 AEE4             (/home/strick/go/s):01025                  ldx   ,s               grab caller's buffer pointer
0506 10A362           (/home/strick/go/s):01026                  cmpd  $02,s            check bytes left in sector against number to read
0509 2302             (/home/strick/go/s):01027                  bls   Read50C          lower, OK
050B EC62             (/home/strick/go/s):01028                  ldd   $02,s            grab number of bytes to read
050D 3406             (/home/strick/go/s):01029         Read50C  pshs  b,a              save
050F ADF808           (/home/strick/go/s):01030                  jsr   [$08,s]          call our calling routine!
0512 AF62             (/home/strick/go/s):01031                  stx   $02,s            save new address to write to on-stack
                      (/home/strick/go/s):01032                  IFNE  H6309
                      (/home/strick/go/s):01033                  aim   #^BufBusy,PD.SMF,y
                      (/home/strick/go/s):01034                  ELSE
0514 E62A             (/home/strick/go/s):01035                  ldb   PD.SMF,y
0516 C4BF             (/home/strick/go/s):01036                  andb  #^BufBusy
0518 E72A             (/home/strick/go/s):01037                  stb   PD.SMF,y
                      (/home/strick/go/s):01038                  ENDC
051A E661             (/home/strick/go/s):01039                  ldb   $01,s            get LSB of bytes read
051C EB2E             (/home/strick/go/s):01040                  addb  PD.CP+3,y        add it to current pointer
051E E72E             (/home/strick/go/s):01041                  stb   PD.CP+3,y        save new file position
0520 260F             (/home/strick/go/s):01042                  bne   Read530          didn't grab whole sector, skip ahead
0522 170D31           (/home/strick/go/s):01043                  lbsr  L1237            flush the sector
0525 6C2D             (/home/strick/go/s):01044                  inc   PD.CP+2,y        add
0527 2606             (/home/strick/go/s):01045                  bne   Read52E
0529 6C2C             (/home/strick/go/s):01046                  inc   PD.CP+1,y
052B 2602             (/home/strick/go/s):01047                  bne   Read52E
052D 6C2B             (/home/strick/go/s):01048                  inc   PD.CP,y
052F 2594             (/home/strick/go/s):01049         Read52E  bcs   Read4C3
0531 EC64             (/home/strick/go/s):01050         Read530  ldd   $04,s            grab number of bytes to read/write
0533 A3E1             (/home/strick/go/s):01051                  subd  ,s++             take out number we've read/written
0535 ED62             (/home/strick/go/s):01052                  std   $02,s            save on-stack
0537 6EF804           (/home/strick/go/s):01053                  jmp   [$04,s]          go back to calling routine with D,X on-stack
                      (/home/strick/go/s):01054         
                      (/home/strick/go/s):01055         
                      (/home/strick/go/s):01056         *
                      (/home/strick/go/s):01057         * I$WritLn Entry Point
                      (/home/strick/go/s):01058         *
                      (/home/strick/go/s):01059         * Entry:
                      (/home/strick/go/s):01060         *
                      (/home/strick/go/s):01061         * Exit:
                      (/home/strick/go/s):01062         *
                      (/home/strick/go/s):01063         * Error: CC Carry set
                      (/home/strick/go/s):01064         *        B = errcode
                      (/home/strick/go/s):01065         *
053A 3420             (/home/strick/go/s):01066         WriteLn  pshs  y                save PD pointer
053C 5F               (/home/strick/go/s):01067                  clrb  
053D 10AE46           (/home/strick/go/s):01068                  ldy   R$Y,u            grab size of data to write
0540 271D             (/home/strick/go/s):01069                  beq   WtLn55E          exit if none
                      (/home/strick/go/s):01070                  IFGT  Level-1
0542 9E50             (/home/strick/go/s):01071                  ldx   <D.Proc          get process descriptor pointer
0544 E606             (/home/strick/go/s):01072                  ldb   P$Task,x         grab task number
0546 AE44             (/home/strick/go/s):01073                  ldx   R$X,u            and where to get data from
                      (/home/strick/go/s):01074         * ATD: Could make this quite a bit larger, and probably faster, by doing the
                      (/home/strick/go/s):01075         * PipeMan-style copy 32 bytes onto the stack via F$Move, and check that.
                      (/home/strick/go/s):01076         * Doing F$LDABX for a lot of data is _really_ slow.  PipeMan test indicate
                      (/home/strick/go/s):01077         * that it could probably double in speed...
                      (/home/strick/go/s):01078                  ENDC
0548 313F             (/home/strick/go/s):01079         WtLn547  leay  -$01,y           back up one byte
054A 2713             (/home/strick/go/s):01080                  beq   WtLn55E          if done, exit
                      (/home/strick/go/s):01081                  IFGT  Level-1
054C 103F49           (/home/strick/go/s):01082                  os9   F$LDABX          grab one byte from the user
054F 3001             (/home/strick/go/s):01083                  leax  $01,x            go up a byte
                      (/home/strick/go/s):01084                  ELSE
                      (/home/strick/go/s):01085                  lda   ,x+
                      (/home/strick/go/s):01086                  ENDC
0551 810D             (/home/strick/go/s):01087                  cmpa  #$0D             is it a CR?
0553 26F3             (/home/strick/go/s):01088                  bne   WtLn547          no, keep it up until done
0555 1F20             (/home/strick/go/s):01089                  tfr   y,d              get number of bytes left
0557 40               (/home/strick/go/s):01090                  nega             \
                      (/home/strick/go/s):01091         * a negd was tried here, but may have caused runaway writes>64k
0558 50               (/home/strick/go/s):01092                  negb             /     invert it
0559 8200             (/home/strick/go/s):01093                  sbca  #$00
055B E346             (/home/strick/go/s):01094                  addd  R$Y,u            add to bytes to write
055D ED46             (/home/strick/go/s):01095                  std   R$Y,u            save new number of bytes to write
055F 3520             (/home/strick/go/s):01096         WtLn55E  puls  y                restore PD pointer, and fall through to Write
                      (/home/strick/go/s):01097         
                      (/home/strick/go/s):01098         
                      (/home/strick/go/s):01099         *
                      (/home/strick/go/s):01100         * I$Write Entry Point
                      (/home/strick/go/s):01101         *
                      (/home/strick/go/s):01102         * Entry:
                      (/home/strick/go/s):01103         *
                      (/home/strick/go/s):01104         * Exit:
                      (/home/strick/go/s):01105         *
                      (/home/strick/go/s):01106         * Error: CC Carry set
                      (/home/strick/go/s):01107         *        B = errcode
                      (/home/strick/go/s):01108         *
0561 EC46             (/home/strick/go/s):01109         Write    ldd   R$Y,u            get size of write
0563 1705C4           (/home/strick/go/s):01110                  lbsr  L0B0C            wait for I/O lock
0566 2535             (/home/strick/go/s):01111                  bcs   Writ598          error, return
0568 EC46             (/home/strick/go/s):01112                  ldd   R$Y,u            get size again
056A 2730             (/home/strick/go/s):01113                  beq   Writ597          zero, nothing to write so return
056C 8D30             (/home/strick/go/s):01114                  bsr   Writ599          expand the file if needed
056E 252D             (/home/strick/go/s):01115                  bcs   Writ598          error on expand, return
0570 8D15             (/home/strick/go/s):01116                  bsr   Writ582
0572                  (/home/strick/go/s):01117         Writ571
0572 3426             (/home/strick/go/s):01118                  pshs  y,b,a
0574 1F02             (/home/strick/go/s):01119                  tfr   d,y
0576 8D58             (/home/strick/go/s):01120                  bsr   Writ5CB
0578 3526             (/home/strick/go/s):01121                  puls  y,b,a
057A 308B             (/home/strick/go/s):01122                  leax  d,x
                      (/home/strick/go/s):01123                  IFNE  H6309
                      (/home/strick/go/s):01124                  oim   #(BUFMOD!SINBUF),PD.SMF,y
                      (/home/strick/go/s):01125                  ELSE
057C 3402             (/home/strick/go/s):01126                  pshs  a
057E A62A             (/home/strick/go/s):01127                  lda   PD.SMF,y
0580 8A03             (/home/strick/go/s):01128                  ora   #(BUFMOD!SINBUF)
0582 A72A             (/home/strick/go/s):01129                  sta   PD.SMF,y
0584 3502             (/home/strick/go/s):01130                  puls  a
                      (/home/strick/go/s):01131                  ENDC
0586 39               (/home/strick/go/s):01132                  rts   
                      (/home/strick/go/s):01133         
0587 17FF4A           (/home/strick/go/s):01134         Writ582  lbsr  Read4D3          go read stuff
058A 1026FF4C         (/home/strick/go/s):01135                  lbne  Read4D9
058E 3268             (/home/strick/go/s):01136                  leas  $08,s            skip stuff on stack
0590 10AEA830         (/home/strick/go/s):01137                  ldy   PD.Exten,y
0594 8601             (/home/strick/go/s):01138                  lda   #$01
0596 170556           (/home/strick/go/s):01139                  lbsr  L0AD1
0599 10AE21           (/home/strick/go/s):01140                  ldy   PE.PDptr,y
059C 5F               (/home/strick/go/s):01141         Writ597  clrb  
059D 39               (/home/strick/go/s):01142         Writ598  rts   
                      (/home/strick/go/s):01143         
                      (/home/strick/go/s):01144         * Add bytes to current file position with file length extension
                      (/home/strick/go/s):01145         * Entry: D=# bytes to add
059E E32D             (/home/strick/go/s):01146         Writ599  addd  PD.CP+2,y        add length to LSW of current pointer
05A0 1F01             (/home/strick/go/s):01147                  tfr   d,x              copy it
05A2 EC2B             (/home/strick/go/s):01148                  ldd   PD.CP,y          get MSW
                      (/home/strick/go/s):01149                  IFNE  H6309
                      (/home/strick/go/s):01150                  adcd  #0               add in any carry from above
                      (/home/strick/go/s):01151                  ELSE
05A4 C900             (/home/strick/go/s):01152                  adcb  #0
05A6 8900             (/home/strick/go/s):01153                  adca  #0
                      (/home/strick/go/s):01154                  ENDC
05A8 10A32F           (/home/strick/go/s):01155         Writ5A3  cmpd  PD.SIZ,y         MSW past eof?
05AB 25EF             (/home/strick/go/s):01156                  bcs   Writ597          no, return
05AD 2205             (/home/strick/go/s):01157                  bhi   Writ5AF          yes, add a sector
05AF ACA811           (/home/strick/go/s):01158                  cmpx  PD.SIZ+2,y       LSW past eof?
05B2 23E8             (/home/strick/go/s):01159                  bls   Writ597          no, return
05B4 3440             (/home/strick/go/s):01160         Writ5AF  pshs  u                preserve U
05B6 EEA811           (/home/strick/go/s):01161                  ldu   PD.SIZ+2,y       get LSW of current size
05B9 AFA811           (/home/strick/go/s):01162                  stx   PD.SIZ+2,y       save new size
05BC AE2F             (/home/strick/go/s):01163                  ldx   PD.SIZ,y         get MSW of new size
05BE ED2F             (/home/strick/go/s):01164                  std   PD.SIZ,y         save new size
                      (/home/strick/go/s):01165         * ATD: L0C6F looks like it already saves U and X, so saving them here is
                      (/home/strick/go/s):01166         * unnecessary.
05C0 3450             (/home/strick/go/s):01167                  pshs  u,x              preserve old size
05C2 1706CA           (/home/strick/go/s):01168                  lbsr  L0C6F            allocate new size of file
05C5 3550             (/home/strick/go/s):01169                  puls  u,x              restore old size
05C7 2405             (/home/strick/go/s):01170                  bcc   Writ5C9          no error from allocate, return
05C9 AF2F             (/home/strick/go/s):01171                  stx   PD.SIZ,y         put old size back
05CB EFA811           (/home/strick/go/s):01172                  stu   PD.SIZ+2,y
05CE 35C0             (/home/strick/go/s):01173         Writ5C9  puls  pc,u             restore U & return
                      (/home/strick/go/s):01174         
                      (/home/strick/go/s):01175         * Move bytes from user to system
                      (/home/strick/go/s):01176         * Entry: X=Source pointer
                      (/home/strick/go/s):01177         *        Y=Byte count
                      (/home/strick/go/s):01178         *        U=Destination pointer
05D0                  (/home/strick/go/s):01179         Writ5CB
                      (/home/strick/go/s):01180                  IFGT  Level-1
05D0 3410             (/home/strick/go/s):01181                  pshs  x
05D2 9E50             (/home/strick/go/s):01182                  ldx   <D.Proc          get source task #
05D4 A606             (/home/strick/go/s):01183                  lda   P$Task,x
05D6 D6D0             (/home/strick/go/s):01184                  ldb   <D.SysTsk        get destination task #
05D8 3510             (/home/strick/go/s):01185                  puls  x
05DA 103F38           (/home/strick/go/s):01186                  os9   F$Move           move 'em
                      (/home/strick/go/s):01187                  ENDC
05DD 39               (/home/strick/go/s):01188                  rts                    return
                      (/home/strick/go/s):01189         
                      (/home/strick/go/s):01190         *
                      (/home/strick/go/s):01191         * I$GetStat Entry Point
                      (/home/strick/go/s):01192         *
                      (/home/strick/go/s):01193         * Entry:
                      (/home/strick/go/s):01194         *
                      (/home/strick/go/s):01195         * Exit:
                      (/home/strick/go/s):01196         *
                      (/home/strick/go/s):01197         * Error: CC Carry set
                      (/home/strick/go/s):01198         *        B = errcode
                      (/home/strick/go/s):01199         *
05DE E642             (/home/strick/go/s):01200         GetStat  ldb   R$B,u            get function code
05E0 2720             (/home/strick/go/s):01201                  beq   Gst5FF           it's SS.Opt, go process
05E2 C106             (/home/strick/go/s):01202                  cmpb  #SS.EOF          EOF check?
05E4 2608             (/home/strick/go/s):01203                  bne   Gst5EB           no, skip ahead
05E6 6F42             (/home/strick/go/s):01204                  clr   R$B,u            default to no EOF
05E8 4F               (/home/strick/go/s):01205         Gst5E5   clra                   get length & clear carry
05E9 C601             (/home/strick/go/s):01206                  ldb   #$01
05EB 16FE87           (/home/strick/go/s):01207                  lbra  RdLn473          go calculate EOF status & return
                      (/home/strick/go/s):01208         
                      (/home/strick/go/s):01209         * SS.Ready
                      (/home/strick/go/s):01210         * check for data avail on dev
                      (/home/strick/go/s):01211         * Entry A=path number
                      (/home/strick/go/s):01212         *       B=$01
05EE C101             (/home/strick/go/s):01213         Gst5EB   cmpb  #SS.Ready        is it SS.Ready?
05F0 2603             (/home/strick/go/s):01214                  bne   Gst5F2           no, keep checking
05F2 6F42             (/home/strick/go/s):01215                  clr   R$B,u            always mark no data ready
05F4 39               (/home/strick/go/s):01216                  rts   
                      (/home/strick/go/s):01217         
                      (/home/strick/go/s):01218         * SS.SIZ
                      (/home/strick/go/s):01219         * Entry A=path num
                      (/home/strick/go/s):01220         *       B=$02
                      (/home/strick/go/s):01221         * Exit  X=msw of files size
                      (/home/strick/go/s):01222         *       U=lsw of files size
05F5 C102             (/home/strick/go/s):01223         Gst5F2   cmpb  #SS.Size         is it SS.Size?
05F7 260A             (/home/strick/go/s):01224                  bne   Gst600           no, keep checking
                      (/home/strick/go/s):01225                  IFNE  H6309
                      (/home/strick/go/s):01226         * faster and smaller than 2 LDD's, PD.SIZ+2 >$0F, so we can't use short n,R
                      (/home/strick/go/s):01227                  ldq   PD.SIZ,y         get current file size
05F9                  (/home/strick/go/s):01228         Gst5F8   std   R$X,u            save to the user
                      (/home/strick/go/s):01229                  stw   R$U,u            save LSW
                      (/home/strick/go/s):01230                  ELSE
05F9 EC2F             (/home/strick/go/s):01231                  ldd   PD.SIZ,y
05FB ED44             (/home/strick/go/s):01232                  std   R$X,u
05FD ECA811           (/home/strick/go/s):01233                  ldd   PD.SIZ+2,y
0600 ED48             (/home/strick/go/s):01234                  std   R$U,u
                      (/home/strick/go/s):01235                  ENDC
0602 39               (/home/strick/go/s):01236         Gst5FF   rts                    return
                      (/home/strick/go/s):01237         
                      (/home/strick/go/s):01238         * SS.Pos
                      (/home/strick/go/s):01239         * Entry A=path num
                      (/home/strick/go/s):01240         *       B=$05
                      (/home/strick/go/s):01241         * Exit  X=msw of pos
                      (/home/strick/go/s):01242         *       U=lsw of pos
0603 C105             (/home/strick/go/s):01243         Gst600   cmpb  #SS.Pos          is it SS.Pos?
0605 2609             (/home/strick/go/s):01244                  bne   Gst60D           no, keep checking
                      (/home/strick/go/s):01245                  IFNE  H6309
                      (/home/strick/go/s):01246         * use 2 LDD, STD, same size as ldq/std/stw, PD.CP+2 <$0F, we can use short n,R
                      (/home/strick/go/s):01247                  ldq   PD.CP,y          get current file pointer
                      (/home/strick/go/s):01248                  bra   Gst5F8
                      (/home/strick/go/s):01249                  ELSE
0607 EC2B             (/home/strick/go/s):01250                  ldd   PD.CP,y          get current file pointer
0609 ED44             (/home/strick/go/s):01251                  std   R$X,u            save MSW
060B EC2D             (/home/strick/go/s):01252                  ldd   PD.CP+2,y        get current file pointer
060D ED48             (/home/strick/go/s):01253                  std   R$U,u            save LSW
060F 39               (/home/strick/go/s):01254                  rts
                      (/home/strick/go/s):01255                  ENDC
                      (/home/strick/go/s):01256         
                      (/home/strick/go/s):01257         * Getstt(SS.FD)
                      (/home/strick/go/s):01258         * Entry: R$A = Path #
                      (/home/strick/go/s):01259         *        R$B = SS.FD ($0F)
                      (/home/strick/go/s):01260         *        R$X = ptr to 256 byte buffer
                      (/home/strick/go/s):01261         *        R$Y = # of bytes of FD required
0610 C10F             (/home/strick/go/s):01262         Gst60D   cmpb  #SS.FD           is it SS.FD?
0612 2616             (/home/strick/go/s):01263                  bne   Gst627           no, keep checking
0614 170B2E           (/home/strick/go/s):01264                  lbsr  RdFlDscr         go get file descriptor
0617 25E9             (/home/strick/go/s):01265                  bcs   Gst5FF           exit on error
0619 EE26             (/home/strick/go/s):01266                  ldu   PD.RGS,y         get register stack pointer
061B EC46             (/home/strick/go/s):01267                  ldd   R$Y,u            get # bytesof FD he wants
061D 4D               (/home/strick/go/s):01268                  tsta                   legal value?
061E 2703             (/home/strick/go/s):01269                  beq   Gst620           yes, skip ahead
0620 CC0100           (/home/strick/go/s):01270                  ldd   #$0100           get max size of FD
0623 AE44             (/home/strick/go/s):01271         Gst620   ldx   R$X,u            get pointer
0625 EE28             (/home/strick/go/s):01272                  ldu   PD.BUF,y         get pointer to FD
0627 16FE87           (/home/strick/go/s):01273                  lbra  Read4AF          move it to user space
                      (/home/strick/go/s):01274         
                      (/home/strick/go/s):01275         * Getstt(SS.FDInf)
                      (/home/strick/go/s):01276         * Entry: R$A = Path #
                      (/home/strick/go/s):01277         *        R$B = SS.FDInf ($20)
                      (/home/strick/go/s):01278         *        R$X = ptr to 256 byte buffer
                      (/home/strick/go/s):01279         *        R$Y = msb - Length of read
                      (/home/strick/go/s):01280         *              lsb - MSB of LSN
                      (/home/strick/go/s):01281         *        R$U = LSW of LSN
062A C120             (/home/strick/go/s):01282         Gst627   cmpb  #SS.FDInf        SS.FDInf?
062C 2615             (/home/strick/go/s):01283                  bne   Gst640           no, let driver handle it
062E 170C25           (/home/strick/go/s):01284                  lbsr  L1237            check for sector flush
0631 25CF             (/home/strick/go/s):01285                  bcs   Gst5FF
0633 E646             (/home/strick/go/s):01286                  ldb   R$Y,u            get MSB of sector #
0635 AE48             (/home/strick/go/s):01287                  ldx   R$U,u            get LSW of sector #
0637 170B22           (/home/strick/go/s):01288                  lbsr  L113A            read the sector
063A 25C6             (/home/strick/go/s):01289                  bcs   Gst5FF           error, return
063C EE26             (/home/strick/go/s):01290                  ldu   PD.RGS,y         get register stack pointer
063E EC46             (/home/strick/go/s):01291                  ldd   R$Y,u            get length of data to move
0640 4F               (/home/strick/go/s):01292                  clra                   clear MSB
0641 20E0             (/home/strick/go/s):01293                  bra   Gst620           move it to user
                      (/home/strick/go/s):01294         
                      (/home/strick/go/s):01295         * Let driver handle the rest
0643 8609             (/home/strick/go/s):01296         Gst640   lda   #D$GSTA          get getstat function offset
0645 160B16           (/home/strick/go/s):01297                  lbra  L113C            send it to driver
                      (/home/strick/go/s):01298         
                      (/home/strick/go/s):01299         
                      (/home/strick/go/s):01300         *
                      (/home/strick/go/s):01301         * I$SetStat Entry Point
                      (/home/strick/go/s):01302         *
                      (/home/strick/go/s):01303         * Entry:
                      (/home/strick/go/s):01304         *
                      (/home/strick/go/s):01305         * Exit:
                      (/home/strick/go/s):01306         *
                      (/home/strick/go/s):01307         * Error: CC Carry set
                      (/home/strick/go/s):01308         *        B = errcode
                      (/home/strick/go/s):01309         *
0648 E642             (/home/strick/go/s):01310         SetStat  ldb   R$B,u            get function code
                      (/home/strick/go/s):01311         * TODO: remove next line since SS.Opt is 0
064A C100             (/home/strick/go/s):01312                  cmpb  #SS.Opt
064C 260E             (/home/strick/go/s):01313                  bne   Sst659           not SS.Opt, skip ahead
064E AE44             (/home/strick/go/s):01314                  ldx   R$X,u            get pointer to option packet
0650 3002             (/home/strick/go/s):01315                  leax  $02,x            skip device type and drive #
0652 33A822           (/home/strick/go/s):01316                  leau  PD.STP,y         get pointer to start of data
0655 108E000D         (/home/strick/go/s):01317                  ldy   #(PD.TFM-PD.STP) get # bytes to move (not including PD.TFM)
0659 16FF74           (/home/strick/go/s):01318                  lbra  Writ5CB          move 'em & return
                      (/home/strick/go/s):01319         
                      (/home/strick/go/s):01320         * SS.Size
065C C102             (/home/strick/go/s):01321         Sst659   cmpb  #SS.Size         is it SS.Size?
065E 263E             (/home/strick/go/s):01322                  bne   Sst69B
0660 ECA835           (/home/strick/go/s):01323                  ldd   PD.FD+1,y        is there a file descriptor?
0663 2607             (/home/strick/go/s):01324                  bne   Sst669
0665 6DA834           (/home/strick/go/s):01325                  tst   PD.FD,y
0668 10270144         (/home/strick/go/s):01326                  lbeq  Sst7A8           no, return error
066C A621             (/home/strick/go/s):01327         Sst669   lda   PD.MOD,y         get file mode
066E 8502             (/home/strick/go/s):01328                  bita  #WRITE.          is it write?
0670 2728             (/home/strick/go/s):01329                  beq   Sst697           no, return error
0672 EC44             (/home/strick/go/s):01330                  ldd   R$X,u            get MSW of new size
0674 AE48             (/home/strick/go/s):01331                  ldx   R$U,u            get LSW of new size
0676 10A32F           (/home/strick/go/s):01332                  cmpd  PD.SIZ,y
0679 250A             (/home/strick/go/s):01333                  bcs   Sst682
067B 2605             (/home/strick/go/s):01334                  bne   Sst67F
067D ACA811           (/home/strick/go/s):01335                  cmpx  PD.SIZ+2,y
0680 2503             (/home/strick/go/s):01336                  bcs   Sst682
                      (/home/strick/go/s):01337         * New size is larger
0682 16FF23           (/home/strick/go/s):01338         Sst67F   lbra  Writ5A3          add new size to file
                      (/home/strick/go/s):01339         * New size is smaller
0685 ED2F             (/home/strick/go/s):01340         Sst682   std   PD.SIZ,y
0687 AFA811           (/home/strick/go/s):01341                  stx   PD.SIZ+2,y
068A EC2B             (/home/strick/go/s):01342                  ldd   PD.CP,y
068C AE2D             (/home/strick/go/s):01343                  ldx   PD.CP+2,y
068E 3416             (/home/strick/go/s):01344                  pshs  x,b,a
0690 17088D           (/home/strick/go/s):01345                  lbsr  L0EFE            delete from end of the file
0693 3550             (/home/strick/go/s):01346                  puls  u,x
0695 AF2B             (/home/strick/go/s):01347                  stx   PD.CP,y          restore current position
0697 EF2D             (/home/strick/go/s):01348                  stu   PD.CP+2,y
0699 39               (/home/strick/go/s):01349                  rts   
                      (/home/strick/go/s):01350         * Return bad mode error
069A 53               (/home/strick/go/s):01351         Sst697   comb                   set carry
069B C6CB             (/home/strick/go/s):01352                  ldb   #E$BMode         get bad mod error
069D 39               (/home/strick/go/s):01353         Sst69A   rts                    return
                      (/home/strick/go/s):01354         
                      (/home/strick/go/s):01355         * SetStt(SS.FD) #$0F - returns FD to disk
                      (/home/strick/go/s):01356         * Entry: R$A = Path #
                      (/home/strick/go/s):01357         *        R$B = SS.FD ($0F)
                      (/home/strick/go/s):01358         *        R$X = ptr to 256 byte buffer
                      (/home/strick/go/s):01359         *        R$Y = # bytes to write
069E C10F             (/home/strick/go/s):01360         Sst69B   cmpb  #SS.FD           is it SS.FD?
06A0 263F             (/home/strick/go/s):01361                  bne   Sst6D9           no, keep checking
06A2 170AA0           (/home/strick/go/s):01362                  lbsr  RdFlDscr         read in file descriptor
06A5 25F6             (/home/strick/go/s):01363                  bcs   Sst69A           error, return
06A7 3420             (/home/strick/go/s):01364                  pshs  y                preserve path descriptor pointer
06A9 AE44             (/home/strick/go/s):01365                  ldx   R$X,u            get pointer to caller's buffer
06AB EE28             (/home/strick/go/s):01366                  ldu   PD.BUF,y         get pointer to FD
06AD A621             (/home/strick/go/s):01367                  lda   PD.MOD,y
06AF 8502             (/home/strick/go/s):01368                  bita  #WRITE.          is it write mode?
06B1 2716             (/home/strick/go/s):01369                  beq   Sst6BF           no, only change attrs
06B3 109E50           (/home/strick/go/s):01370                  ldy   <D.Proc          get current process pointer
06B6 EC28             (/home/strick/go/s):01371                  ldd   P$User,y         get user #
06B8 2605             (/home/strick/go/s):01372                  bne   Sst6BC           not super user, skip ahead
                      (/home/strick/go/s):01373         * Change owner of file
06BA CC0102           (/home/strick/go/s):01374                  ldd   #$0102           get offset & # of bytes to move
06BD 8D14             (/home/strick/go/s):01375                  bsr   Sst6CB
                      (/home/strick/go/s):01376         * Change date last modified
06BF CC0305           (/home/strick/go/s):01377         Sst6BC   ldd   #$0305
06C2 8D0F             (/home/strick/go/s):01378                  bsr   Sst6CB
                      (/home/strick/go/s):01379         * Change creation date
06C4 CC0D03           (/home/strick/go/s):01380                  ldd   #$0D03
06C7 8D0A             (/home/strick/go/s):01381                  bsr   Sst6CB
                      (/home/strick/go/s):01382         * Change attrs
06C9 CC0001           (/home/strick/go/s):01383         Sst6BF   ldd   #$0001
06CC 8D05             (/home/strick/go/s):01384                  bsr   Sst6CB
06CE 3520             (/home/strick/go/s):01385                  puls  y
06D0 160B49           (/home/strick/go/s):01386                  lbra  L11FD
                      (/home/strick/go/s):01387         * Offset into FD sector
                      (/home/strick/go/s):01388         * Entry: A=# bytes to offset
                      (/home/strick/go/s):01389         *        B=# bytes to put
06D3 3450             (/home/strick/go/s):01390         Sst6CB   pshs  u,x
06D5 3086             (/home/strick/go/s):01391                  leax  a,x
06D7 33C6             (/home/strick/go/s):01392                  leau  a,u
06D9 4F               (/home/strick/go/s):01393                  clra  
06DA 1F02             (/home/strick/go/s):01394                  tfr   d,y
06DC 17FEF1           (/home/strick/go/s):01395                  lbsr  Writ5CB
06DF 35D0             (/home/strick/go/s):01396                  puls  pc,u,x
                      (/home/strick/go/s):01397         
06E1 C111             (/home/strick/go/s):01398         Sst6D9   cmpb  #SS.Lock         is it SS.Lock?
06E3 261B             (/home/strick/go/s):01399                  bne   Sst6F8           no, keep checking
06E5 EC48             (/home/strick/go/s):01400                  ldd   R$U,u            get MSW of size
06E7 AE44             (/home/strick/go/s):01401                  ldx   R$X,u            get LSW of size
06E9 8CFFFF           (/home/strick/go/s):01402                  cmpx  #$FFFF           lock whole file?
06EC 260F             (/home/strick/go/s):01403                  bne   Sst6F5           no, skip ahead
06EE AC48             (/home/strick/go/s):01404                  cmpx  R$U,u
06F0 260B             (/home/strick/go/s):01405                  bne   Sst6F5           after this line, we're SURE that D=$FFFF
06F2 EEA830           (/home/strick/go/s):01406                  ldu   PD.Exten,y
                      (/home/strick/go/s):01407                  IFNE  H6309
                      (/home/strick/go/s):01408                  oim   #FileLock,PE.Lock,u
                      (/home/strick/go/s):01409                  ELSE
06F5 A647             (/home/strick/go/s):01410                  lda   PE.Lock,u
06F7 8A02             (/home/strick/go/s):01411                  ora   #FileLock
06F9 A747             (/home/strick/go/s):01412                  sta   PE.Lock,u
                      (/home/strick/go/s):01413                  ENDC
                      (/home/strick/go/s):01414         * ATD: This next line is unnecessary after the check done, above
06FB 86FF             (/home/strick/go/s):01415                  lda   #$FF             ?? if X=$FFFF, then D=$FFFF too.
06FD 160439           (/home/strick/go/s):01416         Sst6F5   lbra  L0B1B
                      (/home/strick/go/s):01417         
                      (/home/strick/go/s):01418         * SS.Ticks
0700 C110             (/home/strick/go/s):01419         Sst6F8   cmpb  #SS.Ticks        is it SS.Ticks?
0702 2609             (/home/strick/go/s):01420                  bne   Sst705           no, keep checking
0704 EC44             (/home/strick/go/s):01421                  ldd   R$X,u            get # of ticks
0706 AEA830           (/home/strick/go/s):01422                  ldx   PD.Exten,y       put it into path extension
0709 ED8812           (/home/strick/go/s):01423                  std   PE.TmOut,x
070C 39               (/home/strick/go/s):01424                  rts                    return
                      (/home/strick/go/s):01425         
                      (/home/strick/go/s):01426         * SS.RsBit 
070D C11E             (/home/strick/go/s):01427         Sst705   cmpb  #SS.RsBit        reserve bitmap sector?
070F 260C             (/home/strick/go/s):01428                  bne   Sst715           no, keep checking
0711 AEA81E           (/home/strick/go/s):01429                  ldx   PD.DTB,y         get drive table pointer
0714 A645             (/home/strick/go/s):01430                  lda   R$X+1,u          get sector #
0716 A7881E           (/home/strick/go/s):01431                  sta   V.ResBit,x       put it into drive table
0719 6F881D           (/home/strick/go/s):01432                  clr   V.MapSct,x       clear mapped sector
071C 39               (/home/strick/go/s):01433         Sst714   rts                    return
                      (/home/strick/go/s):01434         
                      (/home/strick/go/s):01435         * SS.Attr 
071D C11C             (/home/strick/go/s):01436         Sst715   cmpb  #SS.Attr         is it SS.Attr?
071F 266C             (/home/strick/go/s):01437                  bne   Sst784           no, keep checking
0721 170A21           (/home/strick/go/s):01438                  lbsr  RdFlDscr         get the file descriptor from drive
0724 25F6             (/home/strick/go/s):01439                  bcs   Sst714           error, return
0726 9E50             (/home/strick/go/s):01440                  ldx   <D.Proc          get pointer to current process
                      (/home/strick/go/s):01441         * Note, should'nt this be lda?  User number is 8 bits, not 16
0728 EC08             (/home/strick/go/s):01442                  ldd   P$User,x         get user number
072A 2707             (/home/strick/go/s):01443                  beq   Sst72A           it's super user, skip ahead
072C AE28             (/home/strick/go/s):01444                  ldx   PD.BUF,y         get pointer to FD
072E 10A301           (/home/strick/go/s):01445                  cmpd  FD.OWN,x         user # match owner of file?
0731 2656             (/home/strick/go/s):01446                  bne   Sst780           no, return not accessible error
0733 A645             (/home/strick/go/s):01447         Sst72A   lda   R$X+1,u          get attributes from caller
0735 1F89             (/home/strick/go/s):01448                  tfr   a,b              copy it
0737 EE28             (/home/strick/go/s):01449                  ldu   PD.BUF,y         get pointer to FD
0739 E8C4             (/home/strick/go/s):01450                  eorb  FD.ATT,u         directory bit set?
073B 2A47             (/home/strick/go/s):01451                  bpl   Sst77B           no, save new attributes & return
073D 4D               (/home/strick/go/s):01452                  tsta                   is user setting directory bit?
073E 2B2D             (/home/strick/go/s):01453                  bmi   Sst764           yes, return directory not empty error
                      (/home/strick/go/s):01454         * Directory attributes changing, check if it's root dir
0740 AEA81E           (/home/strick/go/s):01455                  ldx   PD.DTB,y         get pointer to drive table
0743 EC08             (/home/strick/go/s):01456                  ldd   DD.DIR,x         get MSW of sector # to root directory
0745 10A3A834         (/home/strick/go/s):01457                  cmpd  PD.FD,y          match current FD sector #?
0749 2607             (/home/strick/go/s):01458                  bne   Sst749           no, skip ahead
074B E60A             (/home/strick/go/s):01459                  ldb   DD.DIR+2,x       get LSB of sector # to root directory
074D E1A836           (/home/strick/go/s):01460                  cmpb  PD.FD+2,y        match current FD sector #?
0750 2737             (/home/strick/go/s):01461                  beq   Sst780           yes, return not accessible error
                      (/home/strick/go/s):01462         * Scan directory to see if there's any files and/or directories
0752 E62B             (/home/strick/go/s):01463         Sst749   ldb   PD.CP,y          get current directory entry pointer
0754 AE2C             (/home/strick/go/s):01464                  ldx   PD.CP+1,y
0756 3414             (/home/strick/go/s):01465                  pshs  x,b              preserve it
                      (/home/strick/go/s):01466         * ATD: there should be a CLRD here
0758 ED2B             (/home/strick/go/s):01467                  std   PD.CP,y          ??? This code doesn't look correct...
                      (/home/strick/go/s):01468         * ATD: should be DIR.SZ*2: so we skip '..' and '.'
075A C620             (/home/strick/go/s):01469                  ldb   #DIR.SZ
075C ED2D             (/home/strick/go/s):01470                  std   PD.CP+2,y
075E 1701FF           (/home/strick/go/s):01471         Sst755   lbsr  L0942            move to next filename in directory
0761 250E             (/home/strick/go/s):01472                  bcs   Sst768           error in read, check for EOF
0763 6D84             (/home/strick/go/s):01473                  tst   ,x               filename exist?
0765 27F7             (/home/strick/go/s):01474                  beq   Sst755           no, keep looking
0767 3514             (/home/strick/go/s):01475                  puls  x,b              restore current pointer
0769 E72B             (/home/strick/go/s):01476                  stb   PD.CP,y
076B AF2C             (/home/strick/go/s):01477                  stx   PD.CP+1,y
                      (/home/strick/go/s):01478         * Report directory not empty error
076D C6EE             (/home/strick/go/s):01479         Sst764   ldb   #E$DNE           get directory not empty error
076F 201A             (/home/strick/go/s):01480                  bra   Sst782           return
0771 3512             (/home/strick/go/s):01481         Sst768   puls  x,a              restore current pointer
0773 A72B             (/home/strick/go/s):01482                  sta   PD.CP,y
0775 AF2C             (/home/strick/go/s):01483                  stx   PD.CP+1,y
0777 C1D3             (/home/strick/go/s):01484                  cmpb  #E$EOF           at the end of directory?
0779 2610             (/home/strick/go/s):01485                  bne   Sst782           no, some other error
077B 1709C7           (/home/strick/go/s):01486                  lbsr  RdFlDscr         get file descriptor from drive
077E EE28             (/home/strick/go/s):01487                  ldu   PD.BUF,y         get sector pointer
0780 AE26             (/home/strick/go/s):01488                  ldx   PD.RGS,y         get register stack pointer
0782 A605             (/home/strick/go/s):01489                  lda   R$X+1,x          get attributes
0784 A7C4             (/home/strick/go/s):01490         Sst77B   sta   FD.ATT,u         set 'em
0786 160A93           (/home/strick/go/s):01491                  lbra  L11FD            write FD to disk & return
                      (/home/strick/go/s):01492         * Return file not accessible
0789 C6D6             (/home/strick/go/s):01493         Sst780   ldb   #E$FNA           get file not accessible error
078B 43               (/home/strick/go/s):01494         Sst782   coma                   set carry
078C 39               (/home/strick/go/s):01495                  rts                    return
                      (/home/strick/go/s):01496         
                      (/home/strick/go/s):01497         * SetStt(SS.FSig)
078D C12C             (/home/strick/go/s):01498         Sst784   cmpb  #SS.FSig         SS.FSig send signal on write
078F 261A             (/home/strick/go/s):01499                  bne   Sst7A3
0791 A6A833           (/home/strick/go/s):01500                  lda   PD.ATT,y
0794 8540             (/home/strick/go/s):01501                  bita  #SHARE.
0796 1026030F         (/home/strick/go/s):01502                  lbne  L0A8B
079A AEA830           (/home/strick/go/s):01503                  ldx   PD.Exten,y
079D A645             (/home/strick/go/s):01504                  lda   R$X+1,u
079F A78817           (/home/strick/go/s):01505                  sta   PE.SigSg,x
07A2 DE50             (/home/strick/go/s):01506                  ldu   <D.Proc
07A4 A6C4             (/home/strick/go/s):01507                  lda   P$ID,u           was <P$ID,u
07A6 A78818           (/home/strick/go/s):01508                  sta   PE.SigID,x
07A9 5F               (/home/strick/go/s):01509                  clrb  
07AA 39               (/home/strick/go/s):01510                  rts   
                      (/home/strick/go/s):01511         
07AB 860C             (/home/strick/go/s):01512         Sst7A3   lda   #D$PSTA          call the driver SetStt routine
07AD 1609AE           (/home/strick/go/s):01513                  lbra  L113C
                      (/home/strick/go/s):01514         
07B0 53               (/home/strick/go/s):01515         Sst7A8   comb  
07B1 C6D0             (/home/strick/go/s):01516                  ldb   #E$UnkSvc        unknown service request
07B3 39               (/home/strick/go/s):01517         Sst7AB   rts   
                      (/home/strick/go/s):01518         
                      (/home/strick/go/s):01519         
                      (/home/strick/go/s):01520         * Find a file in current data/execution directory
                      (/home/strick/go/s):01521         * Called by Create/Open & Delete
                      (/home/strick/go/s):01522         *
                      (/home/strick/go/s):01523         * Entry: U=caller's stack reg. ptr
                      (/home/strick/go/s):01524         *        Y=Path dsc. ptr
07B4                  (/home/strick/go/s):01525         FindFile 
07B4 CC0100           (/home/strick/go/s):01526                  ldd   #$0100           get size of sector
                      (/home/strick/go/s):01527         * Note, following line is stb PD.SMF,y in v30!
                      (/home/strick/go/s):01528                  IFGT  Level-1
07B7 E72A             (/home/strick/go/s):01529                  stb   PD.FST,y         clear state flags??
                      (/home/strick/go/s):01530                  ENDC
07B9 103F28           (/home/strick/go/s):01531                  os9   F$SRqMem         request a 256 byte sector buffer
07BC 25F5             (/home/strick/go/s):01532                  bcs   Sst7AB           couldn't get memory, return with error
07BE EF28             (/home/strick/go/s):01533                  stu   PD.BUF,y         save ptr to sector buffer
                      (/home/strick/go/s):01534                  IFGT  Level-1
07C0 33A4             (/home/strick/go/s):01535                  leau  ,y               point U to path descriptor
07C2 9E88             (/home/strick/go/s):01536                  ldx   <D.PthDBT        get ptr to path descriptor block tables
07C4 103F30           (/home/strick/go/s):01537                  os9   F$All64          allocate path descriptor
07C7 1E23             (/home/strick/go/s):01538                  exg   y,u              exchange pointers
07C9 25E8             (/home/strick/go/s):01539                  bcs   Sst7AB           couldn't get path descriptor, return error
07CB EFA830           (/home/strick/go/s):01540                  stu   PD.Exten,y       save pointer to path extension
07CE 6FC818           (/home/strick/go/s):01541                  clr   PE.SigID,u       clear send signal proc. ID
07D1 10AF41           (/home/strick/go/s):01542                  sty   PE.PDptr,u       save back pointer to path descriptor
07D4 EFC810           (/home/strick/go/s):01543                  stu   PE.Wait,u        init waiting extension to myself
                      (/home/strick/go/s):01544                  ENDC
                      (/home/strick/go/s):01545         
                      (/home/strick/go/s):01546         
                      (/home/strick/go/s):01547         **** ADDED 06/19/2004 ****
                      (/home/strick/go/s):01548         **** MOVED 12/26/2009 due to issue with PD.Exten not being allocated and
                      (/home/strick/go/s):01549         **** causing a write into system direct page memory
                      (/home/strick/go/s):01550         * Call to SS.VarSect in Driver:
                      (/home/strick/go/s):01551         *
                      (/home/strick/go/s):01552         * This code calls the driver's SS.VarSect GetStat, which will
                      (/home/strick/go/s):01553         * update the PD.TYP byte in the path descriptor to the sector
                      (/home/strick/go/s):01554         * size of the media to which this path references.
                      (/home/strick/go/s):01555         * If the driver doesn't support the GetStat, it will return
                      (/home/strick/go/s):01556         * an error, and won't touch the PD.TYP anyway, so we ignore it.
07D7 AE26             (/home/strick/go/s):01557                  ldx   PD.RGS,y         get caller's regs
07D9 A602             (/home/strick/go/s):01558                  lda   R$B,x            get caller's B
07DB 3412             (/home/strick/go/s):01559                  pshs  x,a              save PD.RGS ptr and caller's original B
07DD CC0912           (/home/strick/go/s):01560                  ldd   #D$GSTA*256+SS.VarSect   getstat function/SS.VarSect GetStat
07E0 E702             (/home/strick/go/s):01561                  stb   R$B,x            put SS.VarSect into caller's B
07E2 170979           (/home/strick/go/s):01562                  lbsr  L113C            send it to driver
07E5 3512             (/home/strick/go/s):01563                  puls  a,x              get caller's original B and saved PD.RGS
07E7 A702             (/home/strick/go/s):01564                  sta   R$B,x            restore caller's original B
07E9 2404             (/home/strick/go/s):01565                  bcc   ok@              branch if no error on GetStat
07EB C1D0             (/home/strick/go/s):01566                  cmpb  #E$UnkSvc        Unknown Service call error?
07ED 269C             (/home/strick/go/s):01567                  bne   Sst782           if not, return with error
07EF                  (/home/strick/go/s):01568         ok@
                      (/home/strick/go/s):01569         ****
07EF AE26             (/home/strick/go/s):01570                  ldx   PD.RGS,y         get register stack pointer
07F1 AE04             (/home/strick/go/s):01571                  ldx   R$X,x            get pointer to pathname
07F3 3470             (/home/strick/go/s):01572                  pshs  u,y,x
07F5 327C             (/home/strick/go/s):01573                  leas  -$04,s           make a buffer
                      (/home/strick/go/s):01574                  IFNE  H6309
                      (/home/strick/go/s):01575                  clrd
                      (/home/strick/go/s):01576                  ELSE
07F7 4F               (/home/strick/go/s):01577                  clra  
07F8 5F               (/home/strick/go/s):01578                  clrb  
                      (/home/strick/go/s):01579                  ENDC
07F9 A7A834           (/home/strick/go/s):01580                  sta   PD.FD,y          init file descriptor logical sector #
07FC EDA835           (/home/strick/go/s):01581                  std   PD.FD+1,y
07FF EDA81C           (/home/strick/go/s):01582                  std   PD.DSK,y         init disk ID
                      (/home/strick/go/s):01583                  IFGT  Level-1
0802 170198           (/home/strick/go/s):01584                  lbsr  L097F            get a byte from caller's X
                      (/home/strick/go/s):01585                  ELSE
                      (/home/strick/go/s):01586                  lda   b,x
                      (/home/strick/go/s):01587                  ENDC
0805 A7E4             (/home/strick/go/s):01588                  sta   ,s               save it
0807 812F             (/home/strick/go/s):01589                  cmpa  #PDELIM          is it a device?
0809 2610             (/home/strick/go/s):01590                  bne   Sst7FB           no, skip ahead
080B 17019A           (/home/strick/go/s):01591                  lbsr  GtDvcNam         go parse it
080E A7E4             (/home/strick/go/s):01592                  sta   ,s               save last character
0810 10250117         (/home/strick/go/s):01593                  lbcs  L090D            error in parse, return
0814 30A4             (/home/strick/go/s):01594                  leax  ,y               point X to last character
0816 10AE66           (/home/strick/go/s):01595                  ldy   $06,s            get path descriptor pointer
0819 2023             (/home/strick/go/s):01596                  bra   Sst81E           skip ahead
081B 847F             (/home/strick/go/s):01597         Sst7FB   anda  #$7F             strip high bit
081D 8140             (/home/strick/go/s):01598                  cmpa  #PENTIR          entire device flag?
081F 271D             (/home/strick/go/s):01599                  beq   Sst81E           yes, go process
0821 862F             (/home/strick/go/s):01600                  lda   #PDELIM          place delimiter as last char
0823 A7E4             (/home/strick/go/s):01601                  sta   ,s
0825 301F             (/home/strick/go/s):01602                  leax  -$01,x           bump path pointer back 1
0827 A621             (/home/strick/go/s):01603                  lda   PD.MOD,y         get file mode
0829 DE50             (/home/strick/go/s):01604                  ldu   <D.Proc          get pointer to current process
082B 33C820           (/home/strick/go/s):01605                  leau  P$DIO,u          point to default data directory FD sector #
082E 8504             (/home/strick/go/s):01606                  bita  #EXEC.           does he want execution dir?
0830 2702             (/home/strick/go/s):01607                  beq   Sst814           no, skip ahead
0832 3346             (/home/strick/go/s):01608                  leau  $06,u            point to execution dir
0834 E643             (/home/strick/go/s):01609         Sst814   ldb   $03,u            get LSB of logical sector # of FD to dir
0836 E7A834           (/home/strick/go/s):01610                  stb   PD.FD,y          put it in path descriptor
0839 EC44             (/home/strick/go/s):01611                  ldd   $04,u            get MSW of logical sector # of FD to dir
083B EDA835           (/home/strick/go/s):01612                  std   PD.FD+1,y
083E EE23             (/home/strick/go/s):01613         Sst81E   ldu   PD.DEV,y         get pointer to device table
0840 EFA83E           (/home/strick/go/s):01614                  stu   PD.DVT,y         copy it for user
0843 A6A821           (/home/strick/go/s):01615                  lda   PD.DRV,y         get drive #
0846 C626             (/home/strick/go/s):01616                  ldb   #DRVMEM          get sizeof drive tables
                      (/home/strick/go/s):01617         * confusion reigns supreme here - NO MORE!
                      (/home/strick/go/s):01618         * The data stored at L0012 *IS* the drive table sizeof.
                      (/home/strick/go/s):01619         * MY question is why this RBF constant is stored as a variable.
                      (/home/strick/go/s):01620         * Why would it need to be changed, and by who?
0848 3D               (/home/strick/go/s):01621                  mul                    calculate offset into drive tables
0849 E342             (/home/strick/go/s):01622                  addd  V$STAT,u         add start of static memory
084B C3000F           (/home/strick/go/s):01623                  addd  #DRVBEG          add offset to drive tables
084E EDA81E           (/home/strick/go/s):01624                  std   PD.DTB,y         save pointer to drive table
0851 A6E4             (/home/strick/go/s):01625                  lda   ,s               get character back
0853 847F             (/home/strick/go/s):01626                  anda  #$7F             strip high bit
0855 8140             (/home/strick/go/s):01627                  cmpa  #PENTIR          was it entire flag?
0857 2604             (/home/strick/go/s):01628                  bne   Sst83F           no, keep going
0859 3001             (/home/strick/go/s):01629                  leax  $01,x            move to next character
085B 2022             (/home/strick/go/s):01630                  bra   Sst861           go on
                      (/home/strick/go/s):01631         
085D 1708D2           (/home/strick/go/s):01632         Sst83F   lbsr  L1110            read in LSN0
0860 102500CF         (/home/strick/go/s):01633                  lbcs  L0915            error, return
0864 EE28             (/home/strick/go/s):01634                  ldu   PD.BUF,y         get sector buffer pointer from the read-in sector
                      (/home/strick/go/s):01635         * otherwise use the pointer from PD.DTB
0866 EC4E             (/home/strick/go/s):01636                  ldd   DD.DSK,u         get disk ID
0868 EDA81C           (/home/strick/go/s):01637                  std   PD.DSK,y         put it in path descriptor
086B ECA835           (/home/strick/go/s):01638                  ldd   PD.FD+1,y        does it have a file descriptor?
086E 260F             (/home/strick/go/s):01639                  bne   Sst861           yes, skip ahead
0870 A6A834           (/home/strick/go/s):01640                  lda   PD.FD,y
0873 260A             (/home/strick/go/s):01641                  bne   Sst861
0875 A648             (/home/strick/go/s):01642                  lda   DD.DIR,u         get LSN of root directory
0877 A7A834           (/home/strick/go/s):01643                  sta   PD.FD,y          put it in path descriptor
087A EC49             (/home/strick/go/s):01644                  ldd   DD.DIR+1,u
087C EDA835           (/home/strick/go/s):01645                  std   PD.FD+1,y
087F AF64             (/home/strick/go/s):01646         Sst861   stx   $04,s            save pointer to pathname
0881 AF68             (/home/strick/go/s):01647                  stx   $08,s
                      (/home/strick/go/s):01648         
0883 1709D0           (/home/strick/go/s):01649         Sst865   lbsr  L1237            flush sector buffer
0886 102500A9         (/home/strick/go/s):01650                  lbcs  L0915            error, exit
088A A6E4             (/home/strick/go/s):01651                  lda   ,s               get last character of pathname
088C 847F             (/home/strick/go/s):01652                  anda  #$7F             mask off high bit
088E 8140             (/home/strick/go/s):01653                  cmpa  #PENTIR          entire device flag?
0890 2707             (/home/strick/go/s):01654                  beq   Sst87B           yes, skip ahead
0892 1708B0           (/home/strick/go/s):01655                  lbsr  RdFlDscr         read in file descriptor
0895 1025009A         (/home/strick/go/s):01656                  lbcs  L0915            error, return
0899 1701AC           (/home/strick/go/s):01657         Sst87B   lbsr  L0A2A            check if directory is busy
089C A6E4             (/home/strick/go/s):01658                  lda   ,s
089E 812F             (/home/strick/go/s):01659                  cmpa  #PDELIM          was the trailing character a slash?
08A0 266B             (/home/strick/go/s):01660                  bne   L08EF            no, skip ahead
08A2 6F62             (/home/strick/go/s):01661                  clr   $02,s
08A4 6F63             (/home/strick/go/s):01662                  clr   $03,s
08A6 A621             (/home/strick/go/s):01663                  lda   PD.MOD,y         get file mode
08A8 8A80             (/home/strick/go/s):01664                  ora   #DIR.            mask in directory bit
08AA 17014E           (/home/strick/go/s):01665                  lbsr  ChkAttrs         can user access directory?
08AD 257C             (/home/strick/go/s):01666                  bcs   L090D            no, return
08AF 17F929           (/home/strick/go/s):01667                  lbsr  Open1CE          setup path descriptor & start scan
08B2 AE68             (/home/strick/go/s):01668                  ldx   $08,s            get pathname pointer
08B4 3001             (/home/strick/go/s):01669                  leax  $01,x            bump to next character
08B6 1700EF           (/home/strick/go/s):01670                  lbsr  GtDvcNam         check for valid name
08B9 EDE4             (/home/strick/go/s):01671                  std   ,s               save length of name
08BB AF64             (/home/strick/go/s):01672                  stx   $04,s            save updated name pointer
08BD 10AF68           (/home/strick/go/s):01673                  sty   $08,s
08C0 10AE66           (/home/strick/go/s):01674                  ldy   $06,s            get path descriptor pointer
08C3 2566             (/home/strick/go/s):01675                  bcs   L090D            error in pathname, return
                      (/home/strick/go/s):01676                  IFGT  Level-1
08C5 3460             (/home/strick/go/s):01677                  pshs  u,y
08C7 EEA830           (/home/strick/go/s):01678                  ldu   PD.Exten,y       get pointer to path extension
08CA 33C820           (/home/strick/go/s):01679                  leau  PE.FilNm,u       point to filename buffer
08CD 4F               (/home/strick/go/s):01680                  clra                   clear MSB of name length
08CE 1F02             (/home/strick/go/s):01681                  tfr   d,y              move it to Y
08D0 17FCFD           (/home/strick/go/s):01682                  lbsr  Writ5CB          move filename to temp area
08D3 3560             (/home/strick/go/s):01683                  puls  u,y
                      (/home/strick/go/s):01684                  ENDC
08D5 17009D           (/home/strick/go/s):01685                  lbsr  L0957            read in a directory sector
08D8 2005             (/home/strick/go/s):01686                  bra   L08C1
                      (/home/strick/go/s):01687         
                      (/home/strick/go/s):01688         * Scan diretory for name
08DA 8D5A             (/home/strick/go/s):01689         L08BC    bsr   L0918            get file descriptor
                      (/home/strick/go/s):01690                  IFNE  H6309
08DC                  (/home/strick/go/s):01691         L08BE    bsr   L0942            get next directory entry from drive
                      (/home/strick/go/s):01692                  ELSE
08DC 170081           (/home/strick/go/s):01693         L08BE    lbsr  L0942
                      (/home/strick/go/s):01694                  ENDC
08DF 254A             (/home/strick/go/s):01695         L08C1    bcs   L090D            error,
08E1 6D84             (/home/strick/go/s):01696                  tst   ,x               filename exists?
08E3 27F5             (/home/strick/go/s):01697                  beq   L08BC            no, get next entry
08E5 4F               (/home/strick/go/s):01698                  clra  
08E6 E661             (/home/strick/go/s):01699                  ldb   $01,s
08E8 1E12             (/home/strick/go/s):01700                  exg   x,y
08EA AE8830           (/home/strick/go/s):01701                  ldx   PD.Exten,x       get path extension pointer
08ED 308820           (/home/strick/go/s):01702                  leax  PE.FilNm,x       point to user's filename
08F0 1700EA           (/home/strick/go/s):01703                  lbsr  L09BF            compare the names
08F3 AE66             (/home/strick/go/s):01704                  ldx   $06,s            get pointer to path descriptor
08F5 1E12             (/home/strick/go/s):01705                  exg   x,y
08F7 25E3             (/home/strick/go/s):01706                  bcs   L08BE            names don't match, skip to next
08F9 8D49             (/home/strick/go/s):01707                  bsr   L0926            cop this DIR file descriptor to path descriptor
08FB A6881D           (/home/strick/go/s):01708                  lda   DIR.FD,x
08FE A7A834           (/home/strick/go/s):01709                  sta   PD.FD,y
0901 EC881E           (/home/strick/go/s):01710                  ldd   DIR.FD+1,x
0904 EDA835           (/home/strick/go/s):01711                  std   PD.FD+1,y
0907 1701A4           (/home/strick/go/s):01712                  lbsr  L0A90            check record lock?
090A 16FF76           (/home/strick/go/s):01713                  lbra  Sst865           go try again
                      (/home/strick/go/s):01714         
090D AE68             (/home/strick/go/s):01715         L08EF    ldx   $08,s
090F 4D               (/home/strick/go/s):01716                  tsta                   last character?
0910 2B08             (/home/strick/go/s):01717                  bmi   L08FC            yes, skip ahead
0912 103F10           (/home/strick/go/s):01718                  os9   F$PrsNam         parse the name
0915 30A4             (/home/strick/go/s):01719                  leax  ,y               go to the next part of the name
0917 10AE66           (/home/strick/go/s):01720                  ldy   $06,s
091A AF64             (/home/strick/go/s):01721         L08FC    stx   $04,s
091C 4F               (/home/strick/go/s):01722                  clra  
091D A6E4             (/home/strick/go/s):01723         L08FF    lda   ,s
091F 3264             (/home/strick/go/s):01724                  leas  $04,s
0921 3407             (/home/strick/go/s):01725                  pshs  b,a,cc
                      (/home/strick/go/s):01726                  IFNE  H6309
                      (/home/strick/go/s):01727                  aim   #^BufBusy,PD.SMF,y
                      (/home/strick/go/s):01728                  ELSE
0923 A62A             (/home/strick/go/s):01729                  lda   PD.SMF,y
0925 84BF             (/home/strick/go/s):01730                  anda  #^BufBusy
0927 A72A             (/home/strick/go/s):01731                  sta   PD.SMF,y
                      (/home/strick/go/s):01732                  ENDC
0929 35F7             (/home/strick/go/s):01733                  puls  pc,u,y,x,b,a,cc
                      (/home/strick/go/s):01734         
092B C1D3             (/home/strick/go/s):01735         L090D    cmpb  #E$EOF
092D 2604             (/home/strick/go/s):01736                  bne   L0915
092F 8D05             (/home/strick/go/s):01737                  bsr   L0918
0931 C6D8             (/home/strick/go/s):01738                  ldb   #E$PNNF
0933 43               (/home/strick/go/s):01739         L0915    coma  
0934 20E7             (/home/strick/go/s):01740                  bra   L08FF
                      (/home/strick/go/s):01741         
0936 3406             (/home/strick/go/s):01742         L0918    pshs  d
0938 A664             (/home/strick/go/s):01743                  lda   $04,s
093A 812F             (/home/strick/go/s):01744                  cmpa  #PDELIM
093C 2720             (/home/strick/go/s):01745                  beq   L0940
093E EC66             (/home/strick/go/s):01746                  ldd   $06,s
0940 261C             (/home/strick/go/s):01747                  bne   L0940
0942 2002             (/home/strick/go/s):01748                  bra   L0928            fewer clock cycles
0944 3406             (/home/strick/go/s):01749         L0926    pshs  d
0946 AF66             (/home/strick/go/s):01750         L0928    stx   $06,s
0948 A6A834           (/home/strick/go/s):01751                  lda   PD.FD,y
094B A7A837           (/home/strick/go/s):01752                  sta   PD.DFD,y
094E ECA835           (/home/strick/go/s):01753                  ldd   PD.FD+1,y
0951 EDA838           (/home/strick/go/s):01754                  std   PD.DFD+1,y
                      (/home/strick/go/s):01755                  IFNE  H6309
                      (/home/strick/go/s):01756                  ldq   PD.CP,y
                      (/home/strick/go/s):01757                  stq   PD.DCP,y
                      (/home/strick/go/s):01758                  ELSE
0954 EC2B             (/home/strick/go/s):01759                  ldd   PD.CP,y
0956 EDA83A           (/home/strick/go/s):01760                  std   PD.DCP,y
0959 EC2D             (/home/strick/go/s):01761                  ldd   PD.CP+2,y
095B EDA83C           (/home/strick/go/s):01762                  std   PD.DCP+2,y
                      (/home/strick/go/s):01763                  ENDC
095E 3586             (/home/strick/go/s):01764         L0940    puls  pc,b,a
                      (/home/strick/go/s):01765         
                      (/home/strick/go/s):01766         * Move to next directory entry
0960 E62E             (/home/strick/go/s):01767         L0942    ldb   PD.CP+3,y        get current byte pointer
0962 CB20             (/home/strick/go/s):01768                  addb  #DIR.SZ          add in diretory entry size
0964 E72E             (/home/strick/go/s):01769                  stb   PD.CP+3,y        save it back
0966 240D             (/home/strick/go/s):01770                  bcc   L0957            didn't wrap, skip ahead (need new sector)
0968 1708EB           (/home/strick/go/s):01771                  lbsr  L1237            check for sector flush
096B 6C2D             (/home/strick/go/s):01772                  inc   PD.CP+2,y
096D 2606             (/home/strick/go/s):01773                  bne   L0957
096F 6C2C             (/home/strick/go/s):01774                  inc   PD.CP+1,y
0971 2602             (/home/strick/go/s):01775                  bne   L0957
0973 6C2B             (/home/strick/go/s):01776                  inc   PD.CP,y
0975 CC0020           (/home/strick/go/s):01777         L0957    ldd   #DIR.SZ          get directory entry size
0978 17FAFA           (/home/strick/go/s):01778                  lbsr  RdLn473          end of directory?
097B 251F             (/home/strick/go/s):01779                  bcs   L097E            yes, return
097D CC0020           (/home/strick/go/s):01780                  ldd   #DIR.SZ          get directory entry size
0980 1701A7           (/home/strick/go/s):01781                  lbsr  L0B0C
0983 2517             (/home/strick/go/s):01782                  bcs   L097E            yes, return
0985 A62A             (/home/strick/go/s):01783                  lda   PD.SMF,y         get state flags
0987 8502             (/home/strick/go/s):01784                  bita  #SINBUF          sector in buffer?
0989 260A             (/home/strick/go/s):01785                  bne   L0977            yes, skip ahead
098B 17072C           (/home/strick/go/s):01786                  lbsr  L1098
098E 250C             (/home/strick/go/s):01787                  bcs   L097E
0990 1708E2           (/home/strick/go/s):01788                  lbsr  L1256
0993 2507             (/home/strick/go/s):01789                  bcs   L097E
0995 E62E             (/home/strick/go/s):01790         L0977    ldb   PD.CP+3,y        get offset into sector
0997 A628             (/home/strick/go/s):01791                  lda   PD.BUF,y         get MSB of sector buffer pointer
0999 1F01             (/home/strick/go/s):01792                  tfr   d,x              move it to X
099B 5F               (/home/strick/go/s):01793                  clrb                   clear error status
099C 39               (/home/strick/go/s):01794         L097E    rts                    return
                      (/home/strick/go/s):01795         
                      (/home/strick/go/s):01796                  IFGT  Level-1
                      (/home/strick/go/s):01797         * Get a byte from other task
099D 3454             (/home/strick/go/s):01798         L097F    pshs  u,x,b
099F DE50             (/home/strick/go/s):01799                  ldu   <D.Proc
09A1 E646             (/home/strick/go/s):01800                  ldb   P$Task,u
09A3 103F49           (/home/strick/go/s):01801                  os9   F$LDABX
09A6 35D4             (/home/strick/go/s):01802                  puls  pc,u,x,b
                      (/home/strick/go/s):01803                  ENDC
                      (/home/strick/go/s):01804         
09A8 103F10           (/home/strick/go/s):01805         GtDvcNam os9   F$PrsNam         parse the filename
09AB 3410             (/home/strick/go/s):01806                  pshs  x                preserve pointer to name
09AD 2426             (/home/strick/go/s):01807                  bcc   L09B7            no error, check name length & return
09AF 5F               (/home/strick/go/s):01808                  clrb                   clear a counter flag
09B0 3402             (/home/strick/go/s):01809         L0992    pshs  a                preserve last character
09B2 847F             (/home/strick/go/s):01810                  anda  #$7F             clear high bit of last character
09B4 812E             (/home/strick/go/s):01811                  cmpa  #'.              is it current data directory?
09B6 3502             (/home/strick/go/s):01812                  puls  a                restore last character
09B8 2611             (/home/strick/go/s):01813                  bne   L09AD            no, skip ahead
09BA 5C               (/home/strick/go/s):01814                  incb                   flag it's a dir
09BB 3001             (/home/strick/go/s):01815                  leax  1,x
09BD 4D               (/home/strick/go/s):01816                  tsta                   is it the last character of pathname?
09BE 2B0B             (/home/strick/go/s):01817                  bmi   L09AD            yes, skip ahead
                      (/home/strick/go/s):01818                  IFGT  Level-1
09C0 8DDB             (/home/strick/go/s):01819                  bsr   L097F            get next character
                      (/home/strick/go/s):01820                  ELSE
                      (/home/strick/go/s):01821                  lda   b,x
                      (/home/strick/go/s):01822                  ENDC
09C2 C103             (/home/strick/go/s):01823                  cmpb  #$03             third character of DIR?
09C4 25EA             (/home/strick/go/s):01824                  bcs   L0992            no, try again
09C6 862F             (/home/strick/go/s):01825                  lda   #PDELIM
09C8 5A               (/home/strick/go/s):01826                  decb  
09C9 301D             (/home/strick/go/s):01827                  leax  -3,x
09CB 5D               (/home/strick/go/s):01828         L09AD    tstb  
09CC 2605             (/home/strick/go/s):01829                  bne   L09B5
09CE 53               (/home/strick/go/s):01830         L09B0    comb  
09CF C6D7             (/home/strick/go/s):01831                  ldb   #E$BPNam
09D1 3590             (/home/strick/go/s):01832                  puls  pc,x
                      (/home/strick/go/s):01833         
09D3 3184             (/home/strick/go/s):01834         L09B5    leay  ,x
09D5 C11D             (/home/strick/go/s):01835         L09B7    cmpb  #DIR.FD-DIR.NM   past maximum size of name?
09D7 22F5             (/home/strick/go/s):01836                  bhi   L09B0            yes, return error
09D9 1CFE             (/home/strick/go/s):01837                  andcc  #^Carry         clear error status
09DB 3590             (/home/strick/go/s):01838                  puls  pc,x             return
                      (/home/strick/go/s):01839         
                      (/home/strick/go/s):01840         * Check for a match of 2 names, ignoring case.
                      (/home/strick/go/s):01841         * Entry: Y=Pointer to high bit terminated string #1
                      (/home/strick/go/s):01842         *        X=Pointer to string #2
                      (/home/strick/go/s):01843         *        B=Length of string #1
09DD 3436             (/home/strick/go/s):01844         L09BF    pshs  y,x,b,a
09DF A6A0             (/home/strick/go/s):01845         L09C1    lda   ,y+              get a byte from #2
09E1 2B0C             (/home/strick/go/s):01846                  bmi   L09D1            last one, skip ahead
09E3 5A               (/home/strick/go/s):01847                  decb                   done length?
09E4 2706             (/home/strick/go/s):01848                  beq   L09CE            yes, return no match
09E6 A880             (/home/strick/go/s):01849                  eora  ,x+
09E8 84DF             (/home/strick/go/s):01850                  anda  #$DF             match from #1?
09EA 27F3             (/home/strick/go/s):01851                  beq   L09C1            yes, check next char
09EC 53               (/home/strick/go/s):01852         L09CE    comb                   set carry
09ED 35B6             (/home/strick/go/s):01853                  puls  pc,y,x,b,a       return
                      (/home/strick/go/s):01854         
09EF 5A               (/home/strick/go/s):01855         L09D1    decb                   decrement length
09F0 26FA             (/home/strick/go/s):01856                  bne   L09CE            not done, return no match
09F2 A884             (/home/strick/go/s):01857                  eora  ,x
09F4 845F             (/home/strick/go/s):01858                  anda  #$5F
09F6 26F4             (/home/strick/go/s):01859                  bne   L09CE
09F8 5F               (/home/strick/go/s):01860                  clrb                   clear carry for match
09F9 35B6             (/home/strick/go/s):01861                  puls  pc,y,x,b,a
                      (/home/strick/go/s):01862         
                      (/home/strick/go/s):01863         * Check if user can access file/directory
                      (/home/strick/go/s):01864         * Entry: A=Attributes of file/directory to check
                      (/home/strick/go/s):01865         * Exit : Carry set - User cannot access otherwise clear 
09FB 1F89             (/home/strick/go/s):01866         ChkAttrs tfr   a,b              copy attributes
09FD 8407             (/home/strick/go/s):01867                  anda  #(EXEC.!UPDAT.)  keep only file related junk
09FF C4C0             (/home/strick/go/s):01868                  andb  #(DIR.!SHARE.)   ...and directory related junk
0A01 3416             (/home/strick/go/s):01869                  pshs  x,b,a            preserve
0A03 17073F           (/home/strick/go/s):01870                  lbsr  RdFlDscr         get file descriptor
0A06 2522             (/home/strick/go/s):01871                  bcs   L0A0C            error, return
0A08 EE28             (/home/strick/go/s):01872                  ldu   PD.BUF,y         get pointer to FD
0A0A 9E50             (/home/strick/go/s):01873                  ldx   <D.Proc          get current process pointer
0A0C EC08             (/home/strick/go/s):01874                  ldd   P$User,x         get user #
0A0E 2703             (/home/strick/go/s):01875                  beq   L09F5            super user, skp ahead
0A10 10A341           (/home/strick/go/s):01876                  cmpd  FD.OWN,u         match owner of file?
0A13 3502             (/home/strick/go/s):01877         L09F5    puls  a                restore owner attributes
0A15 2703             (/home/strick/go/s):01878                  beq   L09FC            got owner, skip ahead
0A17 48               (/home/strick/go/s):01879                  lsla                   shift attributes to public area
0A18 48               (/home/strick/go/s):01880                  lsla  
0A19 48               (/home/strick/go/s):01881                  lsla  
0A1A AAE4             (/home/strick/go/s):01882         L09FC    ora   ,s               merge with directory bits
0A1C 84BF             (/home/strick/go/s):01883                  anda  #^SHARE.         strip off shareable bit
0A1E 3402             (/home/strick/go/s):01884                  pshs  a                save it
0A20 8A80             (/home/strick/go/s):01885                  ora   #DIR.            set directory bit
0A22 A4C4             (/home/strick/go/s):01886                  anda  FD.ATT,u         keep only bits we want from attributes
0A24 A1E4             (/home/strick/go/s):01887                  cmpa  ,s               can he access it?
0A26 270B             (/home/strick/go/s):01888                  beq   L0A15            yes, check directory bits
0A28 C6D6             (/home/strick/go/s):01889                  ldb   #E$FNA           get error code
0A2A 3262             (/home/strick/go/s):01890         L0A0C    leas  $02,s            purge attributes from stack
0A2C 43               (/home/strick/go/s):01891                  coma                   set carry
0A2D 3590             (/home/strick/go/s):01892                  puls  pc,x             restore & return
                      (/home/strick/go/s):01893         
0A2F C6FD             (/home/strick/go/s):01894         L0A11    ldb   #E$Share         get shareable file error
0A31 20F7             (/home/strick/go/s):01895                  bra   L0A0C            return
                      (/home/strick/go/s):01896         
0A33 E661             (/home/strick/go/s):01897         L0A15    ldb   1,s              get directory bits
0A35 EAC4             (/home/strick/go/s):01898                  orb   FD.ATT,u         mask in with current
0A37 C540             (/home/strick/go/s):01899                  bitb  #SHARE.          shareable bit set?
0A39 270B             (/home/strick/go/s):01900                  beq   L0A28            no, return
0A3B AEA830           (/home/strick/go/s):01901                  ldx   PD.Exten,y       get path extension
0A3E AC05             (/home/strick/go/s):01902                  cmpx  PE.Confl,x       conflicting with anyone?
0A40 26ED             (/home/strick/go/s):01903                  bne   L0A11            yes, return error
0A42 8602             (/home/strick/go/s):01904                  lda   #FileLock
0A44 A707             (/home/strick/go/s):01905                  sta   PE.Lock,x
0A46 3596             (/home/strick/go/s):01906         L0A28    puls  pc,x,b,a
                      (/home/strick/go/s):01907         
                      (/home/strick/go/s):01908         
0A48 3470             (/home/strick/go/s):01909         L0A2A    pshs  u,y,x
                      (/home/strick/go/s):01910                  IFNE  H6309
                      (/home/strick/go/s):01911                  clrd
                      (/home/strick/go/s):01912                  ELSE
0A4A 4F               (/home/strick/go/s):01913                  clra  
0A4B 5F               (/home/strick/go/s):01914                  clrb  
                      (/home/strick/go/s):01915                  ENDC
0A4C ED2B             (/home/strick/go/s):01916                  std   PD.CP,y          init current byte pointer
0A4E ED2D             (/home/strick/go/s):01917                  std   PD.CP+2,y        smaller than STQ
0A50 A7A819           (/home/strick/go/s):01918                  sta   PD.SSZ,y         init segment size
0A53 EDA81A           (/home/strick/go/s):01919                  std   PD.SSZ+1,y
0A56 E6A834           (/home/strick/go/s):01920                  ldb   PD.FD,y          get current FD sector #
0A59 AEA835           (/home/strick/go/s):01921                  ldx   PD.FD+1,y
0A5C 3414             (/home/strick/go/s):01922                  pshs  x,b              preserve it
0A5E EEA81E           (/home/strick/go/s):01923                  ldu   PD.DTB,y         get drive table pointer
0A61 10AEA830         (/home/strick/go/s):01924                  ldy   PD.Exten,y       get drive extension pointer
0A65 10AF25           (/home/strick/go/s):01925                  sty   PE.Confl,y       make it conflict with myself
0A68 33C815           (/home/strick/go/s):01926                  leau  DD.SIZ,u         point to local data
0A6B 2002             (/home/strick/go/s):01927                  bra   L0A51
                      (/home/strick/go/s):01928         * Sort file conflict list???
0A6D EE43             (/home/strick/go/s):01929         L0A4F    ldu   V.FileHd-DD.SIZ,u
0A6F AE43             (/home/strick/go/s):01930         L0A51    ldx   V.FileHd-DD.SIZ,u        get open file list extension pointer
0A71 272A             (/home/strick/go/s):01931                  beq   L0A7F            none, skip return
0A73 AE01             (/home/strick/go/s):01932                  ldx   PE.PDptr,x       get pointer to its path descriptor
0A75 EC8834           (/home/strick/go/s):01933                  ldd   PD.FD,x          get the file descriptor LSN
0A78 10A3E4           (/home/strick/go/s):01934                  cmpd  ,s               sector lower than mine?
0A7B 25F0             (/home/strick/go/s):01935                  bcs   L0A4F            yes, skip to next
0A7D 221E             (/home/strick/go/s):01936                  bhi   L0A7F            no, return
0A7F E68836           (/home/strick/go/s):01937                  ldb   PD.FD+2,x
0A82 E162             (/home/strick/go/s):01938                  cmpb  2,s
0A84 25E7             (/home/strick/go/s):01939                  blo   L0A4F            yes, skip to next
0A86 2215             (/home/strick/go/s):01940                  bhi   L0A7F            no, return
0A88 AE8830           (/home/strick/go/s):01941                  ldx   PD.Exten,x       get the path extension pointer
                      (/home/strick/go/s):01942                  IFNE  H6309
                      (/home/strick/go/s):01943                  tim   #FileLock,PE.Lock,y      entire file locked?
                      (/home/strick/go/s):01944                  ELSE
0A8B E627             (/home/strick/go/s):01945                  ldb   PE.Lock,y
0A8D C502             (/home/strick/go/s):01946                  bitb  #FileLock
                      (/home/strick/go/s):01947                  ENDC
0A8F 2618             (/home/strick/go/s):01948                  bne   L0A8B            yes, return error
0A91 10AF23           (/home/strick/go/s):01949                  sty   PE.NxFil,y       terminate list with pointer to myself
0A94 EC05             (/home/strick/go/s):01950                  ldd   PE.Confl,x
0A96 ED25             (/home/strick/go/s):01951                  std   PE.Confl,y
0A98 10AF05           (/home/strick/go/s):01952                  sty   PE.Confl,x
0A9B 2007             (/home/strick/go/s):01953                  bra   L0A86
                      (/home/strick/go/s):01954         
0A9D AE43             (/home/strick/go/s):01955         L0A7F    ldx   PE.NxFil,u
0A9F AF23             (/home/strick/go/s):01956                  stx   PE.NxFil,y
0AA1 10AF43           (/home/strick/go/s):01957                  sty   PE.NxFil,u
                      (/home/strick/go/s):01958         
0AA4 5F               (/home/strick/go/s):01959         L0A86    clrb  
0AA5 3263             (/home/strick/go/s):01960         L0A87    leas  $03,s
0AA7 35F0             (/home/strick/go/s):01961                  puls  pc,u,y,x
                      (/home/strick/go/s):01962         
0AA9 53               (/home/strick/go/s):01963         L0A8B    comb  
0AAA C6FD             (/home/strick/go/s):01964                  ldb   #E$Share
0AAC 20F7             (/home/strick/go/s):01965                  bra   L0A87
                      (/home/strick/go/s):01966         
0AAE 3476             (/home/strick/go/s):01967         L0A90    pshs  u,y,x,b,a
0AB0 EEA81E           (/home/strick/go/s):01968                  ldu   PD.DTB,y
0AB3 33C815           (/home/strick/go/s):01969                  leau  DD.SIZ,u
0AB6 AEA830           (/home/strick/go/s):01970                  ldx   PD.Exten,y
0AB9 3184             (/home/strick/go/s):01971                  leay  ,x
0ABB 8D30             (/home/strick/go/s):01972                  bsr   L0ACF
0ABD 2004             (/home/strick/go/s):01973                  bra   L0AA5
0ABF AE05             (/home/strick/go/s):01974         L0AA1    ldx   PE.Confl,x
0AC1 2725             (/home/strick/go/s):01975                  beq   L0ACA
0AC3 10AC05           (/home/strick/go/s):01976         L0AA5    cmpy  PE.Confl,x
0AC6 26F7             (/home/strick/go/s):01977                  bne   L0AA1
0AC8 EC25             (/home/strick/go/s):01978                  ldd   PE.Confl,y
0ACA ED05             (/home/strick/go/s):01979                  std   PE.Confl,x
0ACC 2002             (/home/strick/go/s):01980                  bra   L0AB2
0ACE EE43             (/home/strick/go/s):01981         L0AB0    ldu   PE.NxFil,u
0AD0 EC43             (/home/strick/go/s):01982         L0AB2    ldd   PE.NxFil,u
0AD2 2714             (/home/strick/go/s):01983                  beq   L0ACA            end of list, store end & return
0AD4 10AC43           (/home/strick/go/s):01984                  cmpy  PE.NxFil,u       find myself/
0AD7 26F5             (/home/strick/go/s):01985                  bne   L0AB0            no, keep looking
0AD9 AE23             (/home/strick/go/s):01986                  ldx   PE.NxFil,y       get next in line from me
0ADB 10AC25           (/home/strick/go/s):01987                  cmpy  PE.Confl,y       end of conflict list?
0ADE 2706             (/home/strick/go/s):01988                  beq   L0AC8            yes, skip ahead
0AE0 AE25             (/home/strick/go/s):01989                  ldx   PE.Confl,y       get conflicting path extension
0AE2 EC23             (/home/strick/go/s):01990                  ldd   PE.NxFil,y       get next in line from me
0AE4 ED03             (/home/strick/go/s):01991                  std   PE.NxFil,x       save it into conflicting extension
0AE6 AF43             (/home/strick/go/s):01992         L0AC8    stx   PE.NxFil,u       save conflicting extension as next
0AE8 10AF25           (/home/strick/go/s):01993         L0ACA    sty   PE.Confl,y
0AEB 35F6             (/home/strick/go/s):01994                  puls  pc,u,y,x,b,a
                      (/home/strick/go/s):01995         
                      (/home/strick/go/s):01996                  IFGT  Level-1
0AED 8607             (/home/strick/go/s):01997         L0ACF    lda   #(EofLock!FileLock!RcdLock)      get all types of lockout flags
0AEF 3476             (/home/strick/go/s):01998         L0AD1    pshs  u,y,x,b,a
0AF1 A527             (/home/strick/go/s):01999                  bita  PE.Lock,y        anything locked?
0AF3 2709             (/home/strick/go/s):02000                  beq   L0AE0            no, skip ahead
0AF5 43               (/home/strick/go/s):02001                  coma                   invert lock bits
0AF6 A427             (/home/strick/go/s):02002                  anda  PE.Lock,y        clear 'em
0AF8 A727             (/home/strick/go/s):02003                  sta   PE.Lock,y        save 'em
0AFA 8502             (/home/strick/go/s):02004                  bita  #FileLock        is whole file locked?
0AFC 261D             (/home/strick/go/s):02005                  bne   L0AFD            yes, return
0AFE 33A4             (/home/strick/go/s):02006         L0AE0    leau  ,y
0B00 AEC810           (/home/strick/go/s):02007         L0AE2    ldx   PE.Wait,u
0B03 10ACC810         (/home/strick/go/s):02008                  cmpy  PE.Wait,u
0B07 270F             (/home/strick/go/s):02009                  beq   L0AFA
0B09 EFC810           (/home/strick/go/s):02010                  stu   PE.Wait,u
0B0C 3384             (/home/strick/go/s):02011                  leau  ,x
0B0E A6C814           (/home/strick/go/s):02012                  lda   PE.Owner,u
0B11 C601             (/home/strick/go/s):02013                  ldb   #S$Wake
0B13 103F08           (/home/strick/go/s):02014                  os9   F$Send
0B16 20E8             (/home/strick/go/s):02015                  bra   L0AE2
0B18 EFC810           (/home/strick/go/s):02016         L0AFA    stu   PE.Wait,u
0B1B 35F6             (/home/strick/go/s):02017         L0AFD    puls  pc,u,y,x,b,a
                      (/home/strick/go/s):02018                  ENDC
                      (/home/strick/go/s):02019         
0B1D 53               (/home/strick/go/s):02020         L0AFF    comb  
0B1E C6FD             (/home/strick/go/s):02021                  ldb   #E$Share
0B20                  (/home/strick/go/s):02022         L0B02    
                      (/home/strick/go/s):02023                  IFGT  Level-1
0B20 3425             (/home/strick/go/s):02024                  pshs  y,b,cc
0B22 10AEA830         (/home/strick/go/s):02025                  ldy   PD.Exten,y
0B26 8DC5             (/home/strick/go/s):02026                  bsr   L0ACF
0B28 35A5             (/home/strick/go/s):02027                  puls  pc,y,b,cc
                      (/home/strick/go/s):02028                  ELSE
                      (/home/strick/go/s):02029                  rts
                      (/home/strick/go/s):02030                  ENDC
                      (/home/strick/go/s):02031         
     0B2A             (/home/strick/go/s):02032         L0B0C    equ   *
                      (/home/strick/go/s):02033                  IFNE  H6309
                      (/home/strick/go/s):02034                  tfr   0,x
                      (/home/strick/go/s):02035                  ELSE
0B2A 8E0000           (/home/strick/go/s):02036                  ldx   #$0000
                      (/home/strick/go/s):02037                  ENDC
0B2D 200A             (/home/strick/go/s):02038                  bra   L0B1B
                      (/home/strick/go/s):02039         
0B2F EEA830           (/home/strick/go/s):02040         L0B11    ldu   PD.Exten,y
0B32 A6C815           (/home/strick/go/s):02041                  lda   PE.Req,u
0B35 A747             (/home/strick/go/s):02042                  sta   PE.Lock,u
0B37 2002             (/home/strick/go/s):02043                  bra   L0B1D
                      (/home/strick/go/s):02044         
                      (/home/strick/go/s):02045         * Entry: D=LSW of byte position
                      (/home/strick/go/s):02046         *        X=
                      (/home/strick/go/s):02047         *        Y=Path descriptor pointer
                      (/home/strick/go/s):02048         *        U=
0B39 3476             (/home/strick/go/s):02049         L0B1B    pshs  u,y,x,b,a        preserve regs
0B3B EEA830           (/home/strick/go/s):02050         L0B1D    ldu   PD.Exten,y       get pointer to path extension
0B3E A647             (/home/strick/go/s):02051                  lda   PE.Lock,u        get lockout status
0B40 A7C815           (/home/strick/go/s):02052                  sta   PE.Req,u         preserve it
0B43 A6E4             (/home/strick/go/s):02053                  lda   ,s                       get
0B45 8D76             (/home/strick/go/s):02054                  bsr   L0B9F            lock the record
0B47 2472             (/home/strick/go/s):02055                  bcc   L0B9D
0B49 DE50             (/home/strick/go/s):02056                  ldu   <D.Proc          get current process pointer
0B4B A68814           (/home/strick/go/s):02057                  lda   PE.Owner,x       get owner ID of locked segment
0B4E                  (/home/strick/go/s):02058         L0B30    
                      (/home/strick/go/s):02059                  IFGT  Level-1
0B4E 103F37           (/home/strick/go/s):02060                  os9   F$GProcP         get a pointer to it
0B51 250D             (/home/strick/go/s):02061                  bcs   L0B42            no process left, skip ahead
                      (/home/strick/go/s):02062                  ELSE
                      (/home/strick/go/s):02063                  ldy   a,x
                      (/home/strick/go/s):02064                  ENDC
0B53 A6A81E           (/home/strick/go/s):02065                  lda   P$DeadLk,y       get dominant proc ID
0B56 2708             (/home/strick/go/s):02066                  beq   L0B42            none, skip ahead
0B58 A1C4             (/home/strick/go/s):02067                  cmpa  P$ID,u           same as current?
0B5A 26F2             (/home/strick/go/s):02068                  bne   L0B30            no, try again (walks down the process tree)
0B5C C6FE             (/home/strick/go/s):02069                  ldb   #E$DeadLk        get deadlock error code
0B5E 2058             (/home/strick/go/s):02070                  bra   L0B9A            set carry & return
                      (/home/strick/go/s):02071         
0B60 A68814           (/home/strick/go/s):02072         L0B42    lda   PE.Owner,x       get owner of this segment
0B63 A7C81E           (/home/strick/go/s):02073                  sta   P$DeadLk,u       save as the dominant deadlock process
0B66 10AE64           (/home/strick/go/s):02074                  ldy   4,s              get path descriptor pointer
                      (/home/strick/go/s):02075                  IFNE  H6309
                      (/home/strick/go/s):02076                  aim   #^BufBusy,PD.SMF,y
                      (/home/strick/go/s):02077                  ELSE
0B69 A62A             (/home/strick/go/s):02078                  lda   PD.SMF,y
0B6B 84BF             (/home/strick/go/s):02079                  anda  #^BufBusy
0B6D A72A             (/home/strick/go/s):02080                  sta   PD.SMF,y
                      (/home/strick/go/s):02081                  ENDC
0B6F EEA830           (/home/strick/go/s):02082                  ldu   PD.Exten,y       get the path extension
0B72 EC8810           (/home/strick/go/s):02083                  ldd   PE.Wait,x
0B75 EF8810           (/home/strick/go/s):02084                  stu   PE.Wait,x
0B78 EDC810           (/home/strick/go/s):02085                  std   PE.Wait,u
0B7B 1700F8           (/home/strick/go/s):02086                  lbsr  L0C56
0B7E AEC812           (/home/strick/go/s):02087                  ldx   PE.TmOut,u       get timeout time to wait for release of segment
0B81 103F0A           (/home/strick/go/s):02088                  os9   F$Sleep          delay a bit
0B84 3410             (/home/strick/go/s):02089                  pshs  x                preserve time slept
0B86 30C4             (/home/strick/go/s):02090                  leax  ,u               point X to path extension
0B88 2003             (/home/strick/go/s):02091                  bra   L0B6F            skip ahead
                      (/home/strick/go/s):02092         
0B8A AE8810           (/home/strick/go/s):02093         L0B6C    ldx   PE.Wait,x
0B8D 11A38810         (/home/strick/go/s):02094         L0B6F    cmpu  PE.Wait,x
0B91 26F7             (/home/strick/go/s):02095                  bne   L0B6C
0B93 ECC810           (/home/strick/go/s):02096                  ldd   PE.Wait,u
0B96 ED8810           (/home/strick/go/s):02097                  std   PE.Wait,x
0B99 EFC810           (/home/strick/go/s):02098                  stu   PE.Wait,u
0B9C 3510             (/home/strick/go/s):02099                  puls  x                restore time slept
0B9E DE50             (/home/strick/go/s):02100                  ldu   <D.Proc
0BA0 6FC81E           (/home/strick/go/s):02101                  clr   P$DeadLk,u
0BA3 1704CF           (/home/strick/go/s):02102                  lbsr  L1053
0BA6 2510             (/home/strick/go/s):02103                  bcs   L0B9A
0BA8 3084             (/home/strick/go/s):02104                  leax  ,x               X=0?
0BAA 2683             (/home/strick/go/s):02105                  bne   L0B11            no,
0BAC EEA830           (/home/strick/go/s):02106                  ldu   PD.Exten,y       get pointer to extension
0BAF AEC812           (/home/strick/go/s):02107                  ldx   PE.TmOut,u       get timeout time
0BB2 1027FF79         (/home/strick/go/s):02108                  lbeq  L0B11            zero, go try again
0BB6 C6FC             (/home/strick/go/s):02109                  ldb   #E$Lock          get lock error code
0BB8 43               (/home/strick/go/s):02110         L0B9A    coma                   set carry
0BB9 E761             (/home/strick/go/s):02111                  stb   $01,s            save error code
0BBB 35F6             (/home/strick/go/s):02112         L0B9D    puls  pc,u,y,x,b,a
                      (/home/strick/go/s):02113         
0BBD                  (/home/strick/go/s):02114         L0B9F    
                      (/home/strick/go/s):02115                  IFNE  H6309
                      (/home/strick/go/s):02116                  tstd                   std -$02,s only to set cc.flags? 4 cycles to 1!
                      (/home/strick/go/s):02117                  ELSE
0BBD 10830000         (/home/strick/go/s):02118                  cmpd  #$0000
                      (/home/strick/go/s):02119                  ENDC
0BC1 2607             (/home/strick/go/s):02120                  bne   L0BAA
0BC3 8C0000           (/home/strick/go/s):02121                  cmpx  #$0000           the leax may be buggy
0BC6 1027FF56         (/home/strick/go/s):02122                  lbeq  L0B02
0BCA 8D16             (/home/strick/go/s):02123         L0BAA    bsr   L0BC2
0BCC 1025FF4D         (/home/strick/go/s):02124                  lbcs  L0AFF
                      (/home/strick/go/s):02125                  IFGT  Level-1
0BD0 3470             (/home/strick/go/s):02126                  pshs  u,y,x
0BD2 10AEA830         (/home/strick/go/s):02127                  ldy   PD.Exten,y
0BD6 8601             (/home/strick/go/s):02128                  lda   #$01
0BD8 17FF14           (/home/strick/go/s):02129                  lbsr  L0AD1
0BDB AA27             (/home/strick/go/s):02130                  ora   PE.Lock,y
0BDD A727             (/home/strick/go/s):02131                  sta   PE.Lock,y
0BDF 5F               (/home/strick/go/s):02132                  clrb  
0BE0 35F0             (/home/strick/go/s):02133                  puls  pc,u,y,x
                      (/home/strick/go/s):02134                  ELSE
                      (/home/strick/go/s):02135                  clrb
                      (/home/strick/go/s):02136                  rts
                      (/home/strick/go/s):02137                  ENDC
                      (/home/strick/go/s):02138         
0BE2 3466             (/home/strick/go/s):02139         L0BC2    pshs  u,y,b,a
0BE4 33A4             (/home/strick/go/s):02140                  leau  ,y
0BE6 10AEA830         (/home/strick/go/s):02141                  ldy   PD.Exten,y
0BEA 830001           (/home/strick/go/s):02142                  subd  #$0001           NOT a DECD: does't set CC.C
0BED 2402             (/home/strick/go/s):02143                  bcc   L0BD1
0BEF 301F             (/home/strick/go/s):02144                  leax  -1,x
0BF1 E34D             (/home/strick/go/s):02145         L0BD1    addd  PD.CP+2,u
0BF3 1E01             (/home/strick/go/s):02146                  exg   d,x
                      (/home/strick/go/s):02147                  IFNE  H6309
                      (/home/strick/go/s):02148                  adcd  PD.CP,u          oughta do same - GH
                      (/home/strick/go/s):02149                  ELSE
0BF5 E94C             (/home/strick/go/s):02150                  adcb  PD.CP+1,u
0BF7 A94B             (/home/strick/go/s):02151                  adca  PD.CP,u
                      (/home/strick/go/s):02152                  ENDC
0BF9 2405             (/home/strick/go/s):02153                  bcc   L0BE0
0BFB 8EFFFF           (/home/strick/go/s):02154                  ldx   #$FFFF
0BFE 1F10             (/home/strick/go/s):02155                  tfr   x,d
0C00 ED2C             (/home/strick/go/s):02156         L0BE0    std   PE.HiLck,y
0C02 AF2E             (/home/strick/go/s):02157                  stx   PE.HiLck+2,y
0C04 10A34F           (/home/strick/go/s):02158                  cmpd  PD.SIZ,u
0C07 250F             (/home/strick/go/s):02159                  bcs   L0BF8
0C09 2205             (/home/strick/go/s):02160                  bhi   L0BF0
0C0B ACC811           (/home/strick/go/s):02161                  cmpx  PD.SIZ+2,u
0C0E 2508             (/home/strick/go/s):02162                  bcs   L0BF8
     0C10             (/home/strick/go/s):02163         L0BF0    equ   *
                      (/home/strick/go/s):02164                  IFNE  H6309
                      (/home/strick/go/s):02165                  oim   #EofLock,PE.Lock,y
                      (/home/strick/go/s):02166                  ELSE
0C10 A627             (/home/strick/go/s):02167                  lda   PE.Lock,y
0C12 8A04             (/home/strick/go/s):02168                  ora   #EofLock
0C14 A727             (/home/strick/go/s):02169                  sta   PE.Lock,y
                      (/home/strick/go/s):02170                  ENDC
0C16 2009             (/home/strick/go/s):02171                  bra   L0C01
0C18 8604             (/home/strick/go/s):02172         L0BF8    lda   #EofLock
0C1A A527             (/home/strick/go/s):02173                  bita  PE.Lock,y
0C1C 2703             (/home/strick/go/s):02174                  beq   L0C01
0C1E 17FECE           (/home/strick/go/s):02175                  lbsr  L0AD1
     0C21             (/home/strick/go/s):02176         L0C01    equ   *
                      (/home/strick/go/s):02177                  IFNE  H6309
                      (/home/strick/go/s):02178                  ldq   PD.CP,u
                      (/home/strick/go/s):02179                  stq   PE.LoLck,y
                      (/home/strick/go/s):02180                  ELSE
0C21 EC4B             (/home/strick/go/s):02181                  ldd   PD.CP,u
0C23 ED28             (/home/strick/go/s):02182                  std   PE.LoLck,y
0C25 EC4D             (/home/strick/go/s):02183                  ldd   PD.CP+2,u
0C27 ED2A             (/home/strick/go/s):02184                  std   PE.LoLck+2,y
                      (/home/strick/go/s):02185                  ENDC
0C29 A645             (/home/strick/go/s):02186                  lda   PD.CPR,u
0C2B A7A814           (/home/strick/go/s):02187                  sta   PE.Owner,y
0C2E 30A4             (/home/strick/go/s):02188                  leax  ,y
0C30 10AC05           (/home/strick/go/s):02189         L0C10    cmpy  PE.Confl,x
0C33 273F             (/home/strick/go/s):02190                  beq   L0C54
0C35 AE05             (/home/strick/go/s):02191                  ldx   PE.Confl,x
0C37 E6A814           (/home/strick/go/s):02192                  ldb   PE.Owner,y
0C3A E18814           (/home/strick/go/s):02193                  cmpb  PE.Owner,x
0C3D 27F1             (/home/strick/go/s):02194                  beq   L0C10
0C3F A607             (/home/strick/go/s):02195                  lda   PE.Lock,x
0C41 27ED             (/home/strick/go/s):02196                  beq   L0C10
0C43 AA27             (/home/strick/go/s):02197                  ora   PE.Lock,y
0C45 8502             (/home/strick/go/s):02198                  bita  #FileLock        either path locked?
0C47 262A             (/home/strick/go/s):02199                  bne   L0C53            yes, skip ahead
0C49 A607             (/home/strick/go/s):02200                  lda   PE.Lock,x
0C4B A427             (/home/strick/go/s):02201                  anda  PE.Lock,y
0C4D 8504             (/home/strick/go/s):02202                  bita  #EofLock         both at eof?
0C4F 2622             (/home/strick/go/s):02203                  bne   L0C53
0C51 EC08             (/home/strick/go/s):02204                  ldd   PE.LoLck,x
0C53 10A32C           (/home/strick/go/s):02205                  cmpd  PE.HiLck,y
0C56 22D8             (/home/strick/go/s):02206                  bhi   L0C10
0C58 2509             (/home/strick/go/s):02207                  bcs   L0C43
0C5A EC0A             (/home/strick/go/s):02208                  ldd   PE.LoLck+2,x
0C5C 10A32E           (/home/strick/go/s):02209                  cmpd  PE.HiLck+2,y
0C5F 22CF             (/home/strick/go/s):02210                  bhi   L0C10
0C61 2710             (/home/strick/go/s):02211                  beq   L0C53
0C63 EC0C             (/home/strick/go/s):02212         L0C43    ldd   PE.HiLck,x
0C65 10A328           (/home/strick/go/s):02213                  cmpd  PE.LoLck,y
0C68 25C6             (/home/strick/go/s):02214                  bcs   L0C10
0C6A 2207             (/home/strick/go/s):02215                  bhi   L0C53
0C6C EC0E             (/home/strick/go/s):02216                  ldd   PE.HiLck+2,x
0C6E 10A32A           (/home/strick/go/s):02217                  cmpd  PE.LoLck+2,y
0C71 25BD             (/home/strick/go/s):02218                  bcs   L0C10
0C73 53               (/home/strick/go/s):02219         L0C53    comb  
0C74 35E6             (/home/strick/go/s):02220         L0C54    puls  pc,u,y,b,a
                      (/home/strick/go/s):02221         
0C76 3436             (/home/strick/go/s):02222         L0C56    pshs  y,x,b,a
0C78 9E50             (/home/strick/go/s):02223                  ldx   <D.Proc
0C7A A68810           (/home/strick/go/s):02224                  lda   P$IOQN,x         get I/O queue next ptr
0C7D 270D             (/home/strick/go/s):02225                  beq   L0C6C            none, exit
0C7F 6F8810           (/home/strick/go/s):02226                  clr   P$IOQN,x         set to none
0C82 C601             (/home/strick/go/s):02227                  ldb   #S$Wake
0C84 103F08           (/home/strick/go/s):02228                  os9   F$Send           wake up
                      (/home/strick/go/s):02229                  IFGT  Level-1
0C87 103F37           (/home/strick/go/s):02230                  os9   F$GProcP         get process descriptor pointer
                      (/home/strick/go/s):02231                  ELSE
                      (/home/strick/go/s):02232                  ldy   a,x
                      (/home/strick/go/s):02233                  ENDC
0C8A 6F2F             (/home/strick/go/s):02234                  clr   P$IOQP,y         clear its I/O queue previous pointer
0C8C 5F               (/home/strick/go/s):02235         L0C6C    clrb  
0C8D 35B6             (/home/strick/go/s):02236                  puls  pc,y,x,b,a
                      (/home/strick/go/s):02237         
0C8F 3450             (/home/strick/go/s):02238         L0C6F    pshs  u,x
0C91 8D5E             (/home/strick/go/s):02239         L0C71    bsr   L0CD1
0C93 260C             (/home/strick/go/s):02240                  bne   L0C81
0C95 ACA81A           (/home/strick/go/s):02241                  cmpx  PD.SSZ+1,y
0C98 254E             (/home/strick/go/s):02242                  bcs   L0CC8
0C9A 2605             (/home/strick/go/s):02243                  bne   L0C81
0C9C A6A812           (/home/strick/go/s):02244                  lda   PD.SIZ+3,y
0C9F 2747             (/home/strick/go/s):02245                  beq   L0CC8
0CA1 1704A1           (/home/strick/go/s):02246         L0C81    lbsr  RdFlDscr
0CA4 253F             (/home/strick/go/s):02247                  bcs   L0CC5
0CA6 AE2B             (/home/strick/go/s):02248                  ldx   PD.CP,y
0CA8 EE2D             (/home/strick/go/s):02249                  ldu   PD.CP+2,y        grab current position
0CAA 3450             (/home/strick/go/s):02250                  pshs  u,x              save it
                      (/home/strick/go/s):02251                  IFNE  H6309
                      (/home/strick/go/s):02252                  ldq   PD.SIZ,y         go to the end of the file
                      (/home/strick/go/s):02253                  stq   PD.CP,y
                      (/home/strick/go/s):02254                  ELSE
0CAC EC2F             (/home/strick/go/s):02255                  ldd   PD.SIZ,y
0CAE ED2B             (/home/strick/go/s):02256                  std   PD.CP,y
0CB0 ECA811           (/home/strick/go/s):02257                  ldd   PD.SIZ+2,y
0CB3 ED2D             (/home/strick/go/s):02258                  std   PD.CP+2,y
                      (/home/strick/go/s):02259                  ENDC
0CB5 17041C           (/home/strick/go/s):02260                  lbsr  L10B2            search ???
0CB8 3550             (/home/strick/go/s):02261                  puls  u,x              restore current position
0CBA AF2B             (/home/strick/go/s):02262                  stx   PD.CP,y          and save back in PD again
0CBC EF2D             (/home/strick/go/s):02263                  stu   PD.CP+2,y
0CBE 2428             (/home/strick/go/s):02264                  bcc   L0CC8
0CC0 C1D5             (/home/strick/go/s):02265                  cmpb  #E$NES           non-existing segment error?
0CC2 2621             (/home/strick/go/s):02266                  bne   L0CC5
0CC4 8D2B             (/home/strick/go/s):02267                  bsr   L0CD1
0CC6 2609             (/home/strick/go/s):02268                  bne   L0CB1
0CC8 6DA812           (/home/strick/go/s):02269                  tst   PD.SIZ+3,y
0CCB 2707             (/home/strick/go/s):02270                  beq   L0CB4
0CCD 3001             (/home/strick/go/s):02271                  leax  1,x
0CCF 2603             (/home/strick/go/s):02272                  bne   L0CB4
0CD1 8EFFFF           (/home/strick/go/s):02273         L0CB1    ldx   #$FFFF
0CD4 1F10             (/home/strick/go/s):02274         L0CB4    tfr   x,d
0CD6 4D               (/home/strick/go/s):02275                  tsta  
0CD7 2608             (/home/strick/go/s):02276                  bne   L0CC1
0CD9 E1A82E           (/home/strick/go/s):02277                  cmpb  PD.SAS,y
0CDC 2403             (/home/strick/go/s):02278                  bcc   L0CC1
0CDE E6A82E           (/home/strick/go/s):02279                  ldb   PD.SAS,y
0CE1 8D44             (/home/strick/go/s):02280         L0CC1    bsr   L0D07            go do something...
0CE3 24AC             (/home/strick/go/s):02281                  bcc   L0C71
0CE5 43               (/home/strick/go/s):02282         L0CC5    coma  
0CE6 35D0             (/home/strick/go/s):02283                  puls  pc,u,x
                      (/home/strick/go/s):02284         
0CE8 1703CF           (/home/strick/go/s):02285         L0CC8    lbsr  L1098
0CEB 25F8             (/home/strick/go/s):02286                  bcs   L0CC5
0CED 8D10             (/home/strick/go/s):02287                  bsr   L0CDF
0CEF 35D0             (/home/strick/go/s):02288                  puls  pc,u,x
                      (/home/strick/go/s):02289         
0CF1 ECA810           (/home/strick/go/s):02290         L0CD1    ldd   PD.SIZ+1,y
0CF4 A3A814           (/home/strick/go/s):02291                  subd  PD.SBL+1,y
0CF7 1F01             (/home/strick/go/s):02292                  tfr   d,x
0CF9 E62F             (/home/strick/go/s):02293                  ldb   PD.SIZ,y
0CFB E2A813           (/home/strick/go/s):02294                  sbcb  PD.SBL,y
0CFE 39               (/home/strick/go/s):02295                  rts   
                      (/home/strick/go/s):02296         
0CFF 4F               (/home/strick/go/s):02297         L0CDF    clra  
0D00 C602             (/home/strick/go/s):02298                  ldb   #$02
0D02 3450             (/home/strick/go/s):02299                  pshs  u,x
0D04 EEA830           (/home/strick/go/s):02300                  ldu   PD.Exten,y
0D07 2014             (/home/strick/go/s):02301                  bra   L0CFD
                      (/home/strick/go/s):02302         
0D09 EE41             (/home/strick/go/s):02303         L0CE9    ldu   PE.PDptr,u
0D0B AE2F             (/home/strick/go/s):02304                  ldx   PD.SIZ,y         don't do LDQ/STQ, as A and B are used below
0D0D AF4F             (/home/strick/go/s):02305                  stx   PD.SIZ,u
0D0F AEA811           (/home/strick/go/s):02306                  ldx   PD.SIZ+2,y
0D12 AFC811           (/home/strick/go/s):02307                  stx   PD.SIZ+2,u
0D15 E521             (/home/strick/go/s):02308                  bitb  PD.MOD,y
0D17 2701             (/home/strick/go/s):02309                  beq   L0CFA
0D19 4C               (/home/strick/go/s):02310                  inca  
0D1A EEC830           (/home/strick/go/s):02311         L0CFA    ldu   PD.Exten,u
0D1D EE45             (/home/strick/go/s):02312         L0CFD    ldu   PE.Confl,u
0D1F 10AC41           (/home/strick/go/s):02313                  cmpy  PE.PDptr,u
0D22 26E5             (/home/strick/go/s):02314                  bne   L0CE9
0D24 4D               (/home/strick/go/s):02315                  tsta  
0D25 35D0             (/home/strick/go/s):02316                  puls  pc,u,x
                      (/home/strick/go/s):02317         
                      (/home/strick/go/s):02318         * Update a file descriptor
0D27 3450             (/home/strick/go/s):02319         L0D07    pshs  u,x
0D29 1700AB           (/home/strick/go/s):02320                  lbsr  FatScan          search and allocate D sectors
0D2C 2540             (/home/strick/go/s):02321                  bcs   L0D4E            exit on error
0D2E 170414           (/home/strick/go/s):02322                  lbsr  RdFlDscr         read a FD from disk
0D31 253B             (/home/strick/go/s):02323                  bcs   L0D4E            exit on error
0D33 EE28             (/home/strick/go/s):02324                  ldu   PD.BUF,y         grab the buffer pointer
                      (/home/strick/go/s):02325                  IFNE  H6309
                      (/home/strick/go/s):02326                  clrd  
                      (/home/strick/go/s):02327                  tfr   d,w
                      (/home/strick/go/s):02328                  stq   FD.SIZ,u         set the file size to zero
                      (/home/strick/go/s):02329                  ELSE
0D35 4F               (/home/strick/go/s):02330                  clra  
0D36 5F               (/home/strick/go/s):02331                  clrb  
0D37 ED49             (/home/strick/go/s):02332                  std   FD.SIZ,u
0D39 ED4B             (/home/strick/go/s):02333                  std   FD.SIZ+2,u
                      (/home/strick/go/s):02334                  ENDC
0D3B 30C810           (/home/strick/go/s):02335                  leax  FD.SEG,u         point to the segment size
0D3E EC03             (/home/strick/go/s):02336                  ldd   FDSL.B,x         grab the segment size
0D40 2776             (/home/strick/go/s):02337                  beq   L0D96            exit if zero
0D42 EC28             (/home/strick/go/s):02338                  ldd   PD.BUF,y         grab the buffer pointer
0D44 4C               (/home/strick/go/s):02339                  inca                   point to the end of it
0D45 3406             (/home/strick/go/s):02340                  pshs  d                save on-stack
0D47 200D             (/home/strick/go/s):02341                  bra   L0D36            skip ahead
                      (/home/strick/go/s):02342         
0D49 5F               (/home/strick/go/s):02343         L0D29    clrb  
0D4A EC1E             (/home/strick/go/s):02344                  ldd   -$02,x           grab previous segment sector size
0D4C 271C             (/home/strick/go/s):02345                  beq   L0D4A            zero: exit
                      (/home/strick/go/s):02346         * Add in checks to see if this segment's LSN is $00000000?
0D4E E34A             (/home/strick/go/s):02347                  addd  FD.SIZ+1,u       add sector size to total file size
0D50 ED4A             (/home/strick/go/s):02348                  std   FD.SIZ+1,u
0D52 2402             (/home/strick/go/s):02349                  bcc   L0D36
0D54 6C49             (/home/strick/go/s):02350                  inc   FD.SIZ,u         increment file size if 24-bit overflow
0D56 3005             (/home/strick/go/s):02351         L0D36    leax  FDSL.S,x         go up one segment in the FD
0D58 ACE4             (/home/strick/go/s):02352                  cmpx  ,s               done yet?
0D5A 25ED             (/home/strick/go/s):02353                  bcs   L0D29            no, continue
                      (/home/strick/go/s):02354         * or do check for last segment LSN0, size 1 here?
0D5C 17028F           (/home/strick/go/s):02355                  lbsr  ClrFBits         delete a segment?
                      (/home/strick/go/s):02356                  IFNE  H6309
                      (/home/strick/go/s):02357                  clrd
                      (/home/strick/go/s):02358                  ELSE
0D5F 4F               (/home/strick/go/s):02359                  clra  
0D60 5F               (/home/strick/go/s):02360                  clrb  
                      (/home/strick/go/s):02361                  ENDC
0D61 A7A819           (/home/strick/go/s):02362                  sta   PD.SSZ,y         segment size is zero
0D64 EDA81A           (/home/strick/go/s):02363                  std   PD.SSZ+1,y
0D67 53               (/home/strick/go/s):02364                  comb  
0D68 C6D9             (/home/strick/go/s):02365                  ldb   #E$SLF           segment list full error
                      (/home/strick/go/s):02366         
0D6A 3262             (/home/strick/go/s):02367         L0D4A    leas  2,s              remove pointer to end of PD.BUF from the stack
0D6C 301B             (/home/strick/go/s):02368                  leax  -FDSL.S,x        back up a segment
0D6E 2565             (/home/strick/go/s):02369         L0D4E    bcs   L0DB3
0D70 EC1C             (/home/strick/go/s):02370                  ldd   -4,x
0D72 E31E             (/home/strick/go/s):02371                  addd  -2,x
0D74 3406             (/home/strick/go/s):02372                  pshs  b,a
0D76 E61B             (/home/strick/go/s):02373                  ldb   -5,x
0D78 C900             (/home/strick/go/s):02374                  adcb  #$00
0D7A E1A816           (/home/strick/go/s):02375                  cmpb  PD.SBP,y
0D7D 3506             (/home/strick/go/s):02376                  puls  d
0D7F 2637             (/home/strick/go/s):02377                  bne   L0D96
0D81 10A3A817         (/home/strick/go/s):02378                  cmpd  PD.SBP+1,y
0D85 2631             (/home/strick/go/s):02379                  bne   L0D96
0D87 EEA81E           (/home/strick/go/s):02380                  ldu   PD.DTB,y
0D8A EC46             (/home/strick/go/s):02381                  ldd   DD.BIT,u
0D8C EE28             (/home/strick/go/s):02382                  ldu   PD.BUF,y
0D8E 830001           (/home/strick/go/s):02383                  subd  #1
0D91 43               (/home/strick/go/s):02384                  coma  
0D92 53               (/home/strick/go/s):02385                  comb                   comd is prolly wrong reg order!
0D93 3406             (/home/strick/go/s):02386                  pshs  d
0D95 EC1B             (/home/strick/go/s):02387                  ldd   -$05,x
                      (/home/strick/go/s):02388                  IFNE  H6309
                      (/home/strick/go/s):02389                  eord  PD.SBP,y
                      (/home/strick/go/s):02390                  lsrd  
                      (/home/strick/go/s):02391                  lsrd  
                      (/home/strick/go/s):02392                  lsrd  
                      (/home/strick/go/s):02393                  andd  ,s++
                      (/home/strick/go/s):02394                  tstd  
                      (/home/strick/go/s):02395                  ELSE
0D97 A8A816           (/home/strick/go/s):02396                  eora  PD.SBP,y
0D9A E8A817           (/home/strick/go/s):02397                  eorb  PD.SBP+1,y
0D9D 44               (/home/strick/go/s):02398                  lsra
0D9E 56               (/home/strick/go/s):02399                  rorb
0D9F 44               (/home/strick/go/s):02400                  lsra
0DA0 56               (/home/strick/go/s):02401                  rorb
0DA1 44               (/home/strick/go/s):02402                  lsra
0DA2 56               (/home/strick/go/s):02403                  rorb
0DA3 A4E0             (/home/strick/go/s):02404                  anda  ,s+
0DA5 E4E0             (/home/strick/go/s):02405                  andb  ,s+
0DA7 10830000         (/home/strick/go/s):02406                  cmpd  #$0000
                      (/home/strick/go/s):02407                  ENDC
0DAB 260B             (/home/strick/go/s):02408                  bne   L0D96
0DAD EC1E             (/home/strick/go/s):02409                  ldd   -2,x
0DAF E3A81A           (/home/strick/go/s):02410                  addd  PD.SSZ+1,y
0DB2 2504             (/home/strick/go/s):02411                  bcs   L0D96
0DB4 ED1E             (/home/strick/go/s):02412                  std   -2,x
0DB6 200F             (/home/strick/go/s):02413                  bra   L0DA5
                      (/home/strick/go/s):02414         
0DB8 ECA816           (/home/strick/go/s):02415         L0D96    ldd   PD.SBP,y
0DBB ED84             (/home/strick/go/s):02416                  std   ,x
0DBD A6A818           (/home/strick/go/s):02417                  lda   PD.SBP+2,y
0DC0 A702             (/home/strick/go/s):02418                  sta   2,x
0DC2 ECA81A           (/home/strick/go/s):02419                  ldd   PD.SSZ+1,y
0DC5 ED03             (/home/strick/go/s):02420                  std   3,x
0DC7 EC4A             (/home/strick/go/s):02421         L0DA5    ldd   FD.SIZ+1,u
0DC9 E3A81A           (/home/strick/go/s):02422                  addd  PD.SSZ+1,y
0DCC ED4A             (/home/strick/go/s):02423                  std   FD.SIZ+1,u
0DCE 2402             (/home/strick/go/s):02424                  bcc   L0DB0
0DD0 6C49             (/home/strick/go/s):02425                  inc   FD.SIZ,u
                      (/home/strick/go/s):02426         
0DD2 170447           (/home/strick/go/s):02427         L0DB0    lbsr  L11FD            flush a FD sector tothe disk
0DD5 35D0             (/home/strick/go/s):02428         L0DB3    puls  pc,u,x
                      (/home/strick/go/s):02429         
                      (/home/strick/go/s):02430         * Search the allocation bitmap for a number of free sectors
                      (/home/strick/go/s):02431         * Entry: D = number of sectors to look for
                      (/home/strick/go/s):02432         *        Y = PD pointer
                      (/home/strick/go/s):02433         * 0,S  = number of clusters to allocate
                      (/home/strick/go/s):02434         * 2,S  = DD.BIT  number of sectors per cluster
                      (/home/strick/go/s):02435         * 4,S  = DD.MAP  number of bytes in the allocation bitmap
                      (/home/strick/go/s):02436         * 6,S  = V.MapSCT lowest reasonable bitmap sector number (current bitmap sect)
                      (/home/strick/go/s):02437         * 7,S  = sector number of the largest contiguous free bits found
                      (/home/strick/go/s):02438         * 8,S  = number of contiguous free bits found
                      (/home/strick/go/s):02439         * 10,s = bit offset into the sector of the found contiguous bits
                      (/home/strick/go/s):02440         * 10,s = also  DD.BIT  number of sectors per cluster
                      (/home/strick/go/s):02441         * 12,S = number of sectors to search for  (D from the calling routine)
                      (/home/strick/go/s):02442         * 16,S = PD pointer (Y from the calling routine)
0DD7 3476             (/home/strick/go/s):02443         FatScan  pshs  u,y,x,b,a
0DD9 C60C             (/home/strick/go/s):02444                  ldb   #$0C
0DDB 6FE2             (/home/strick/go/s):02445         L0DB9    clr   ,-s              reserve 12 bytes of junk on-stack
0DDD 5A               (/home/strick/go/s):02446                  decb  
0DDE 26FB             (/home/strick/go/s):02447                  bne   L0DB9
0DE0 AEA81E           (/home/strick/go/s):02448                  ldx   PD.DTB,y
0DE3 EC04             (/home/strick/go/s):02449                  ldd   DD.MAP,x         number of bytes in allocation bitmap
0DE5 ED64             (/home/strick/go/s):02450                  std   4,s
0DE7 EC06             (/home/strick/go/s):02451                  ldd   DD.BIT,x         number of sectors per cluster
0DE9 ED62             (/home/strick/go/s):02452                  std   2,s
0DEB ED6A             (/home/strick/go/s):02453                  std   10,s
0DED AE23             (/home/strick/go/s):02454                  ldx   PD.DEV,y         get pointer to device table entry
0DEF AE04             (/home/strick/go/s):02455                  ldx   V$DESC,x         point to descriptor
0DF1 308812           (/home/strick/go/s):02456                  leax  M$DTyp,x         get device type
0DF4 830001           (/home/strick/go/s):02457                  subd  #1
0DF7 EB0E             (/home/strick/go/s):02458                  addb  IT.SAS-M$DTyp,x  add in one sector allocation size
0DF9 8900             (/home/strick/go/s):02459                  adca  #0               make it 16-bit
0DFB 2002             (/home/strick/go/s):02460                  bra   L0DDD            default to greater of SAS or DD.BIT
                      (/home/strick/go/s):02461         
     0DFD             (/home/strick/go/s):02462         L0DDB    equ   *
                      (/home/strick/go/s):02463                  IFNE  H6309
                      (/home/strick/go/s):02464                  lsrd                   shift D to the right
                      (/home/strick/go/s):02465                  ELSE
0DFD 44               (/home/strick/go/s):02466                  lsra
0DFE 56               (/home/strick/go/s):02467                  rorb
                      (/home/strick/go/s):02468                  ENDC
0DFF 646A             (/home/strick/go/s):02469         L0DDD    lsr   $0A,s            shift DD.BIT to the right
0E01 666B             (/home/strick/go/s):02470                  ror   $0B,s
0E03 24F8             (/home/strick/go/s):02471                  bcc   L0DDB            loop until carry is set
0E05 EDE4             (/home/strick/go/s):02472                  std   ,s               D = number of clusters to allocate
0E07 EC62             (/home/strick/go/s):02473                  ldd   2,s              get old DD.BIT
0E09 ED6A             (/home/strick/go/s):02474                  std   $0A,s            save on-stack again
0E0B 830001           (/home/strick/go/s):02475                  subd  #$0001
0E0E E36C             (/home/strick/go/s):02476                  addd  $0C,s            add in to the number of sectors we're asked to
0E10 2407             (/home/strick/go/s):02477                  bcc   L0DF7            allocate
0E12 CCFFFF           (/home/strick/go/s):02478                  ldd   #$FFFF           if larger than 64K sectors, default to 64K
0E15 2002             (/home/strick/go/s):02479                  bra   L0DF7            skip ahead
                      (/home/strick/go/s):02480         
     0E17             (/home/strick/go/s):02481         L0DF5    equ   *
                      (/home/strick/go/s):02482                  IFNE  H6309
                      (/home/strick/go/s):02483                  lsrd                   shift number of sectors to allocate
                      (/home/strick/go/s):02484                  ELSE
0E17 44               (/home/strick/go/s):02485                  lsra
0E18 56               (/home/strick/go/s):02486                  rorb
                      (/home/strick/go/s):02487                  ENDC
0E19 646A             (/home/strick/go/s):02488         L0DF7    lsr   $0A,s
0E1B 666B             (/home/strick/go/s):02489                  ror   $0B,s
0E1D 24F8             (/home/strick/go/s):02490                  bcc   L0DF5            loop, and continue
                      (/home/strick/go/s):02491         * ATD: remove this code for HD's, to allow >2048 cluster segments???
                      (/home/strick/go/s):02492         * It may be easier to read in the FD, and COMPACT it by looking for
                      (/home/strick/go/s):02493         * LSN+SIZE=next segment LSN.  But that would take 48*(30?) clock cycles,
                      (/home/strick/go/s):02494         * which is a lot of time... but maybe not compared to F$All/F$Sch, and
                      (/home/strick/go/s):02495         * the sector read/writes...
0E1F 8108             (/home/strick/go/s):02496                  cmpa  #8               at least 256*8 bits to allocate?
0E21 2503             (/home/strick/go/s):02497                  bcs   L0E04            number of clusters is OK, skip ahead
0E23 CC0800           (/home/strick/go/s):02498                  ldd   #$0800           force one sector of clusters max. to be allocated
0E26 ED6C             (/home/strick/go/s):02499         L0E04    std   $0C,s            save as the number of clusters to allocate
0E28 17022D           (/home/strick/go/s):02500                  lbsr  L1036            make us the current user of the allocation bitmap
0E2B 102500E5         (/home/strick/go/s):02501                  lbcs  L0EF2            exit on error
0E2F AEA81E           (/home/strick/go/s):02502                  ldx   PD.DTB,y         get drive table
0E32 EC881A           (/home/strick/go/s):02503                  ldd   V.DiskID,x       and old disk ID
0E35 10A30E           (/home/strick/go/s):02504                  cmpd  DD.DSK,x         check against the current disk ID
0E38 260E             (/home/strick/go/s):02505                  bne   L0E26            if not the same, make us the current disk ID
0E3A A6881C           (/home/strick/go/s):02506                  lda   V.BMapSz,x       same allocation bitmap size?
0E3D A104             (/home/strick/go/s):02507                  cmpa  DD.MAP,x
0E3F 2607             (/home/strick/go/s):02508                  bne   L0E26            no, skip ahead
0E41 E6881D           (/home/strick/go/s):02509                  ldb   V.MapSct,x       another check
0E44 E104             (/home/strick/go/s):02510                  cmpb  DD.MAP,x
0E46 250E             (/home/strick/go/s):02511                  bcs   L0E34
                      (/home/strick/go/s):02512         
0E48 EC0E             (/home/strick/go/s):02513         L0E26    ldd   DD.DSK,x         get current disk ID
0E4A ED881A           (/home/strick/go/s):02514                  std   V.DiskID,x       make us the disk to use
0E4D A604             (/home/strick/go/s):02515                  lda   DD.MAP,x         grab number of sectors in allocation bitmap
0E4F A7881C           (/home/strick/go/s):02516                  sta   V.BMapSz,x       save for later
0E52 5F               (/home/strick/go/s):02517                  clrb  
0E53 E7881D           (/home/strick/go/s):02518                  stb   V.MapSct,x       make this zero for now
0E56 5C               (/home/strick/go/s):02519         L0E34    incb                   account for LSN0
0E57 E766             (/home/strick/go/s):02520                  stb   6,s              lowest reasonable bitmap sector number
                      (/home/strick/go/s):02521         * ATD: Is this line necessary?  All calls to L0E34 set up X already
0E59 AEA81E           (/home/strick/go/s):02522                  ldx   PD.DTB,y         get drive table pointer again
0E5C E1881E           (/home/strick/go/s):02523                  cmpb  V.ResBit,x       check B against reserved bitmap sector
0E5F 2731             (/home/strick/go/s):02524                  beq   L0E70            same, skip ahead
0E61 17024F           (/home/strick/go/s):02525                  lbsr  L1091            go read in a bitmap sector
0E64 102500AC         (/home/strick/go/s):02526                  lbcs  L0EF2
0E68 E666             (/home/strick/go/s):02527                  ldb   6,s              grab copy of V.MapSCT again
0E6A E164             (/home/strick/go/s):02528                  cmpb  4,s              check against number of sectors in allocation bitmap
0E6C 2305             (/home/strick/go/s):02529                  bls   L0E51            lower, continue
0E6E 4F               (/home/strick/go/s):02530                  clra                   if at end of the allocation bitmap,
0E6F E665             (/home/strick/go/s):02531                  ldb   5,s              don't search it all, but just to the end of the
0E71 2003             (/home/strick/go/s):02532                  bra   L0E54            last sector in the allocation bitmap
                      (/home/strick/go/s):02533         
                      (/home/strick/go/s):02534         * ATD: This the routine that we would fix to cache a compressed version
                      (/home/strick/go/s):02535         * of the allocation bitmap.  i.e. largest group of contiguous free sectors,
                      (/home/strick/go/s):02536         * where 255 == 256 by definition. At 1 byte/sector, max. 256 sectors in the
                      (/home/strick/go/s):02537         * allocation bitmap, max. 256 bytes.  The search should be a LOT faster then,
                      (/home/strick/go/s):02538         * as we'll only have to search memory and not read in all those sectors.
                      (/home/strick/go/s):02539         * If we're really daring, we could build the new FD without reading the
                      (/home/strick/go/s):02540         * allocation bitmap _at_all_, and just use a 'best-fit' algorithm on the
                      (/home/strick/go/s):02541         * cached version, and update the bitmap later.
                      (/home/strick/go/s):02542         * RBF doesn't do any other search bit calls, so this is the routine.
0E73 CC0100           (/home/strick/go/s):02543         L0E51    ldd   #$0100
0E76 AE28             (/home/strick/go/s):02544         L0E54    ldx   PD.BUF,y         where to start searching
0E78 338B             (/home/strick/go/s):02545                  leau  d,x              where to stop searching
0E7A 10AE6C           (/home/strick/go/s):02546                  ldy   $0C,s            number of bits to find
                      (/home/strick/go/s):02547         * ATD: force it to be less than 1 sector here...
                      (/home/strick/go/s):02548                  IFNE  H6309
                      (/home/strick/go/s):02549                  clrd                   at starting bit number 0
                      (/home/strick/go/s):02550                  ELSE
0E7D 4F               (/home/strick/go/s):02551                  clra  
0E7E 5F               (/home/strick/go/s):02552                  clrb  
                      (/home/strick/go/s):02553                  ENDC
0E7F 103F12           (/home/strick/go/s):02554                  os9   F$SchBit
0E82 243B             (/home/strick/go/s):02555                  bcc   L0E9D            found bits
0E84 10AC68           (/home/strick/go/s):02556                  cmpy  8,s              check number of found bits against our maximum
0E87 2309             (/home/strick/go/s):02557                  bls   L0E70            smaller, skip ahead
0E89 10AF68           (/home/strick/go/s):02558                  sty   8,s              save as new maximum
0E8C ED6A             (/home/strick/go/s):02559                  std   $0A,s            save starting bit number
0E8E A666             (/home/strick/go/s):02560                  lda   6,s              grab current sector
0E90 A767             (/home/strick/go/s):02561                  sta   7,s              save for later
0E92 10AEE810         (/home/strick/go/s):02562         L0E70    ldy   <$10,s           grab old PD pointer
0E96 E666             (/home/strick/go/s):02563                  ldb   6,s              grab current bitmap sector number
0E98 E164             (/home/strick/go/s):02564                  cmpb  4,s              check against highest sector number of bitmap
0E9A 2507             (/home/strick/go/s):02565                  bcs   L0E81            we're OK, skip ahead
0E9C 2204             (/home/strick/go/s):02566                  bhi   L0E80            we're too high, skip ahead
0E9E 6D65             (/home/strick/go/s):02567                  tst   5,s              check bytes in the sector
0EA0 2601             (/home/strick/go/s):02568                  bne   L0E81            not zero: skip ahead
0EA2 5F               (/home/strick/go/s):02569         L0E80    clrb  
0EA3 AEA81E           (/home/strick/go/s):02570         L0E81    ldx   PD.DTB,y         get drive table pointer again
0EA6 E1881D           (/home/strick/go/s):02571                  cmpb  V.MapSct,x       check against lowest reasonable bitmap sector
0EA9 26AB             (/home/strick/go/s):02572                  bne   L0E34            ifnot the same, continue
                      (/home/strick/go/s):02573         
0EAB E667             (/home/strick/go/s):02574                  ldb   7,s              grab sector number of largest block found
0EAD 2763             (/home/strick/go/s):02575                  beq   L0EF0            zero, exit with E$Full error
0EAF E166             (/home/strick/go/s):02576                  cmpb  6,s              is it the current sector?
0EB1 2705             (/home/strick/go/s):02577                  beq   L0E96            yes, skip ahead
0EB3 E766             (/home/strick/go/s):02578                  stb   6,s              make it the current sector
0EB5 1701FB           (/home/strick/go/s):02579                  lbsr  L1091            go read the sector in from disk
                      (/home/strick/go/s):02580         
0EB8 AE28             (/home/strick/go/s):02581         L0E96    ldx   PD.BUF,y         point to the sector in the buffer
0EBA EC6A             (/home/strick/go/s):02582                  ldd   $0A,s            grab starting bit number
0EBC 10AE68           (/home/strick/go/s):02583                  ldy   8,s              and number of bits to allocate
0EBF ED6A             (/home/strick/go/s):02584         L0E9D    std   $0A,s            save starting bit number
0EC1 10AF68           (/home/strick/go/s):02585                  sty   8,s              and number of bits to allocate
0EC4 103F13           (/home/strick/go/s):02586                  os9   F$AllBit         go allocate the bits
0EC7 10AEE810         (/home/strick/go/s):02587                  ldy   $10,s            grab the PD pointer again
0ECB E666             (/home/strick/go/s):02588                  ldb   $06,s            and the sector number
0ECD 1701BB           (/home/strick/go/s):02589                  lbsr  L1069            write it out to disk
0ED0 2542             (/home/strick/go/s):02590                  bcs   L0EF2            exit on error
                      (/home/strick/go/s):02591         * ATD: add check for segments left to allocate, if we've allocated
                      (/home/strick/go/s):02592         * one entire sector's worth???
                      (/home/strick/go/s):02593         * What about special-purpose code to read the allocation bitmap byte by byte
                      (/home/strick/go/s):02594         * and do it that way?  I dunno...
                      (/home/strick/go/s):02595         * Have some routine inside L0DB5 call another routine which allocates segments
                      (/home/strick/go/s):02596         * one sector at a time... have a check: got one sector?
                      (/home/strick/go/s):02597         * ATD: We'll probably have to add in allocation bitmap caching for this
                      (/home/strick/go/s):02598         * to work properly....
0ED2 AEA81E           (/home/strick/go/s):02599                  ldx   PD.DTB,y         drive table pointer
0ED5 A666             (/home/strick/go/s):02600                  lda   6,s              current sector
0ED7 4A               (/home/strick/go/s):02601                  deca                   decreemnt
0ED8 A7881D           (/home/strick/go/s):02602                  sta   V.MapSct,x       AHA! Last searched sector for later use
0EDB 5F               (/home/strick/go/s):02603                  clrb  
0EDC 48               (/home/strick/go/s):02604                  lsla                   move high bit of A into CC.C
0EDD 59               (/home/strick/go/s):02605                  rolb                   move CC.C into B
0EDE 48               (/home/strick/go/s):02606                  lsla                   etc.
0EDF 59               (/home/strick/go/s):02607                  rolb                   cannot do a ROLD, as that would be LSB, ROLA
0EE0 48               (/home/strick/go/s):02608                  lsla                   i.e. move the 3 high bits of A into low bits of B
0EE1 59               (/home/strick/go/s):02609                  rolb                   and shift A by 3
0EE2 E7A816           (/home/strick/go/s):02610                  stb   PD.SBP,y         save segment beginning physical sector number
0EE5 AA6A             (/home/strick/go/s):02611                  ora   $0A,s            OR in with the start bit number
0EE7 E66B             (/home/strick/go/s):02612                  ldb   $0B,s            grab LSB of starting bit number
0EE9 AE68             (/home/strick/go/s):02613                  ldx   8,s              and number of free sectors found
                      (/home/strick/go/s):02614         * ATD: Is this next line really necessary?
0EEB 10AEE810         (/home/strick/go/s):02615                  ldy   $10,s            get PD pointer
0EEF EDA817           (/home/strick/go/s):02616                  std   PD.SBP+1,y       save low 2 bytes of segment beginning physical SN
0EF2 AFA81A           (/home/strick/go/s):02617                  stx   PD.SSZ+1,y       and segment size in clusters
0EF5 EC62             (/home/strick/go/s):02618                  ldd   2,s              grab number of sectors per cluster
0EF7 200F             (/home/strick/go/s):02619                  bra   L0EE6
                      (/home/strick/go/s):02620         
0EF9 68A818           (/home/strick/go/s):02621         L0ED7    lsl   PD.SBP+2,y       shift physical sector numberup
0EFC 69A817           (/home/strick/go/s):02622                  rol   PD.SBP+1,y       to LSN, to account for cluster size
0EFF 69A816           (/home/strick/go/s):02623                  rol   PD.SBP,y
0F02 68A81B           (/home/strick/go/s):02624                  lsl   PD.SSZ+2,y
0F05 69A81A           (/home/strick/go/s):02625                  rol   PD.SSZ+1,y       shift segment cluster size to sector size
0F08                  (/home/strick/go/s):02626         L0EE6   
                      (/home/strick/go/s):02627                  IFNE  H6309
                      (/home/strick/go/s):02628                  lsrd  
                      (/home/strick/go/s):02629                  ELSE
0F08 44               (/home/strick/go/s):02630                  lsra
0F09 56               (/home/strick/go/s):02631                  rorb
                      (/home/strick/go/s):02632                  ENDC
0F0A 24ED             (/home/strick/go/s):02633                  bcc   L0ED7
                      (/home/strick/go/s):02634         
0F0C 5F               (/home/strick/go/s):02635                  clrb                   no errors
0F0D ECA81A           (/home/strick/go/s):02636                  ldd   PD.SSZ+1,y       number of sectors allocated
0F10 200A             (/home/strick/go/s):02637                  bra   L0EFA            and return to the user
                      (/home/strick/go/s):02638         
0F12 C6F8             (/home/strick/go/s):02639         L0EF0    ldb   #E$Full
0F14 10AEE810         (/home/strick/go/s):02640         L0EF2    ldy   $10,s            get old Y off of the stack
0F18 170177           (/home/strick/go/s):02641                  lbsr  L1070            return allocation bitmap?
0F1B 43               (/home/strick/go/s):02642                  coma  
0F1C 326E             (/home/strick/go/s):02643         L0EFA    leas  $0E,s            skip 12-byte buffer, and D
0F1E 35F0             (/home/strick/go/s):02644                  puls  pc,u,y,x
                      (/home/strick/go/s):02645         
                      (/home/strick/go/s):02646         * Set the size of a file to PD.SIZ, where PD.SIZ is SMALLER than the
                      (/home/strick/go/s):02647         * current size of the file.
0F20 4F               (/home/strick/go/s):02648         L0EFE    clra               clear the carry
                      (/home/strick/go/s):02649         * This code ensures that directories are never shrunk in size.
0F21 A621             (/home/strick/go/s):02650                  lda   PD.MOD,y         access mode
0F23 8580             (/home/strick/go/s):02651                  bita  #DIR.            directory?
0F25 266A             (/home/strick/go/s):02652                  bne   L0F6F            yes (bit set), exit immediately
                      (/home/strick/go/s):02653                  IFNE  H6309
                      (/home/strick/go/s):02654                  ldq   PD.SIZ,y         grab size of the file
                      (/home/strick/go/s):02655                  stq   PD.CP,y          make it the current position
                      (/home/strick/go/s):02656                  ELSE
0F27 EC2F             (/home/strick/go/s):02657                  ldd   PD.SIZ,y
0F29 ED2B             (/home/strick/go/s):02658                  std   PD.CP,y
0F2B ECA811           (/home/strick/go/s):02659                  ldd   PD.SIZ+2,y
0F2E ED2D             (/home/strick/go/s):02660                  std   PD.CP+2,y
                      (/home/strick/go/s):02661                  ENDC
0F30 CCFFFF           (/home/strick/go/s):02662                  ldd   #$FFFF
0F33 1F01             (/home/strick/go/s):02663                  tfr   d,x
0F35 17FC01           (/home/strick/go/s):02664                  lbsr  L0B1B
0F38 2556             (/home/strick/go/s):02665                  bcs   L0F6E
0F3A 17FDC2           (/home/strick/go/s):02666                  lbsr  L0CDF
0F3D 2652             (/home/strick/go/s):02667                  bne   L0F6F            exit
0F3F 170192           (/home/strick/go/s):02668                  lbsr  L10B2            find a segment
0F42 2404             (/home/strick/go/s):02669                  bcc   L0F26
0F44 C1D5             (/home/strick/go/s):02670                  cmpb  #E$NES           non-existing segment error
0F46 2041             (/home/strick/go/s):02671                  bra   L0F67
                      (/home/strick/go/s):02672         
0F48 ECA814           (/home/strick/go/s):02673         L0F26    ldd   PD.SBL+1,y       not quite sure what's going on here...
0F4B A32C             (/home/strick/go/s):02674                  subd  PD.CP+1,y
0F4D E3A81A           (/home/strick/go/s):02675                  addd  PD.SSZ+1,y
0F50 6D2E             (/home/strick/go/s):02676                  tst   PD.CP+3,y        on a sector boundary?
0F52 2703             (/home/strick/go/s):02677                  beq   L0F35            yes, skip ahead
                      (/home/strick/go/s):02678                  IFNE  H6309
                      (/home/strick/go/s):02679                  decd                   ok here, carry NOT used below
                      (/home/strick/go/s):02680                  ELSE
0F54 830001           (/home/strick/go/s):02681                  subd  #$0001
                      (/home/strick/go/s):02682                  ENDC
0F57 3406             (/home/strick/go/s):02683         L0F35    pshs  d
0F59 EEA81E           (/home/strick/go/s):02684                  ldu   PD.DTB,y         number of sectors per cluster
0F5C EC46             (/home/strick/go/s):02685                  ldd   DD.BIT,u
                      (/home/strick/go/s):02686                  IFNE  H6309
                      (/home/strick/go/s):02687                  decd  
                      (/home/strick/go/s):02688                  comd  
                      (/home/strick/go/s):02689                  andd  ,s++
                      (/home/strick/go/s):02690                  ELSE
0F5E 830001           (/home/strick/go/s):02691                  subd  #$0001
0F61 43               (/home/strick/go/s):02692                  coma
0F62 53               (/home/strick/go/s):02693                  comb
0F63 A4E0             (/home/strick/go/s):02694                  anda  ,s+
0F65 E4E0             (/home/strick/go/s):02695                  andb  ,s+
                      (/home/strick/go/s):02696                  ENDC
0F67 EEA81A           (/home/strick/go/s):02697                  ldu   PD.SSZ+1,y
0F6A EDA81A           (/home/strick/go/s):02698                  std   PD.SSZ+1,y
0F6D 271C             (/home/strick/go/s):02699                  beq   L0F69
0F6F 1F30             (/home/strick/go/s):02700                  tfr   u,d
0F71 A3A81A           (/home/strick/go/s):02701                  subd  PD.SSZ+1,y
0F74 3416             (/home/strick/go/s):02702                  pshs  x,b,a
0F76 E3A817           (/home/strick/go/s):02703                  addd  PD.SBP+1,y
0F79 EDA817           (/home/strick/go/s):02704                  std   PD.SBP+1,y
0F7C 2403             (/home/strick/go/s):02705                  bcc   L0F5F
0F7E 6CA816           (/home/strick/go/s):02706                  inc   PD.SBP,y
0F81 8D6B             (/home/strick/go/s):02707         L0F5F    bsr   ClrFBits         delete a segment
0F83 240D             (/home/strick/go/s):02708                  bcc   L0F70
0F85 3264             (/home/strick/go/s):02709                  leas  4,s
0F87 C1DB             (/home/strick/go/s):02710                  cmpb  #E$IBA           illegal block address
                      (/home/strick/go/s):02711         
0F89 2605             (/home/strick/go/s):02712         L0F67    bne   L0F6E
0F8B 1701B7           (/home/strick/go/s):02713         L0F69    lbsr  RdFlDscr
0F8E 240B             (/home/strick/go/s):02714                  bcc   L0F79
0F90 43               (/home/strick/go/s):02715         L0F6E    coma  
0F91 39               (/home/strick/go/s):02716         L0F6F    rts   
                      (/home/strick/go/s):02717         
0F92 1701B0           (/home/strick/go/s):02718         L0F70    lbsr  RdFlDscr
0F95 2554             (/home/strick/go/s):02719                  bcs   L0FC9
0F97 3516             (/home/strick/go/s):02720                  puls  x,b,a
0F99 ED03             (/home/strick/go/s):02721                  std   FDSL.B,x
0F9B EE28             (/home/strick/go/s):02722         L0F79    ldu   PD.BUF,y
                      (/home/strick/go/s):02723                  IFNE  H6309
                      (/home/strick/go/s):02724                  ldq   PD.SIZ,y         grab file size from the PD
                      (/home/strick/go/s):02725                  stq   FD.SIZ,u         save in the FD file size
                      (/home/strick/go/s):02726                  ELSE
0F9D EC2F             (/home/strick/go/s):02727                  ldd   PD.SIZ,y
0F9F ED49             (/home/strick/go/s):02728                  std   FD.SIZ,u
0FA1 ECA811           (/home/strick/go/s):02729                  ldd   PD.SIZ+2,y
0FA4 ED4B             (/home/strick/go/s):02730                  std   FD.SIZ+2,u
                      (/home/strick/go/s):02731                  ENDC
0FA6 1F10             (/home/strick/go/s):02732                  tfr   x,d
0FA8 5F               (/home/strick/go/s):02733                  clrb  
0FA9 4C               (/home/strick/go/s):02734                  inca  
0FAA 3005             (/home/strick/go/s):02735                  leax  FDSL.S,x         go to the next segment
0FAC 3416             (/home/strick/go/s):02736                  pshs  x,b,a
0FAE 2026             (/home/strick/go/s):02737                  bra   L0FB4
0FB0 EC1E             (/home/strick/go/s):02738         L0F8E    ldd   -2,x
0FB2 272F             (/home/strick/go/s):02739                  beq   L0FC1
0FB4 EDA81A           (/home/strick/go/s):02740                  std   PD.SSZ+1,y
0FB7 EC1B             (/home/strick/go/s):02741                  ldd   -FDSL.S,x        grab stuff from the last segment
0FB9 EDA816           (/home/strick/go/s):02742                  std   PD.SBP,y
0FBC A61D             (/home/strick/go/s):02743                  lda   -FDSL.B,x
0FBE A7A818           (/home/strick/go/s):02744                  sta   PD.SBP+2,y       save sector beginning physical sector number
0FC1 8D2B             (/home/strick/go/s):02745                  bsr   ClrFBits         delete a segment
0FC3 2526             (/home/strick/go/s):02746                  bcs   L0FC9
0FC5 AF62             (/home/strick/go/s):02747                  stx   2,s
0FC7 17017B           (/home/strick/go/s):02748                  lbsr  RdFlDscr
0FCA 251F             (/home/strick/go/s):02749                  bcs   L0FC9
0FCC AE62             (/home/strick/go/s):02750                  ldx   2,s
                      (/home/strick/go/s):02751                  IFNE  H6309
                      (/home/strick/go/s):02752                  clrd  
                      (/home/strick/go/s):02753                  ELSE
0FCE 4F               (/home/strick/go/s):02754                  clra  
0FCF 5F               (/home/strick/go/s):02755                  clrb  
                      (/home/strick/go/s):02756                  ENDC
0FD0 ED1B             (/home/strick/go/s):02757                  std   -$05,x           clear out the segment
0FD2 A71D             (/home/strick/go/s):02758                  sta   -$03,x
0FD4 ED1E             (/home/strick/go/s):02759                  std   -$02,x
0FD6 170243           (/home/strick/go/s):02760         L0FB4    lbsr  L11FD
0FD9 2510             (/home/strick/go/s):02761                  bcs   L0FC9
0FDB AE62             (/home/strick/go/s):02762                  ldx   2,s
0FDD 3005             (/home/strick/go/s):02763                  leax  FDSL.S,x         go to the next segment
0FDF ACE4             (/home/strick/go/s):02764                  cmpx  ,s
0FE1 25CD             (/home/strick/go/s):02765                  bcs   L0F8E            if not done, do another
     0FE3             (/home/strick/go/s):02766         L0FC1    equ   *
                      (/home/strick/go/s):02767                  IFNE  H6309
                      (/home/strick/go/s):02768                  clrd  
                      (/home/strick/go/s):02769                  ELSE
0FE3 4F               (/home/strick/go/s):02770                  clra  
0FE4 5F               (/home/strick/go/s):02771                  clrb  
                      (/home/strick/go/s):02772                  ENDC
0FE5 A7A819           (/home/strick/go/s):02773                  sta   PD.SSZ,y
0FE8 EDA81A           (/home/strick/go/s):02774                  std   PD.SSZ+1,y       segment size is zero
0FEB 3264             (/home/strick/go/s):02775         L0FC9    leas  4,s
0FED 39               (/home/strick/go/s):02776                  rts   
                      (/home/strick/go/s):02777         
                      (/home/strick/go/s):02778         * de-allocate a segment
0FEE 3472             (/home/strick/go/s):02779         ClrFBits pshs  u,y,x,a          get device table pointer
0FF0 AEA81E           (/home/strick/go/s):02780                  ldx   PD.DTB,y
                      (/home/strick/go/s):02781         
                      (/home/strick/go/s):02782         * ATD: Added next few lines to ENSURE that LSN0 and the allocation bitmap
                      (/home/strick/go/s):02783         * are NEVER marked as de-allocated in the allocation bitmap
                      (/home/strick/go/s):02784         *         ldd   PD.SBP,y     grab beginning segment physical LSN
                      (/home/strick/go/s):02785         *         bne   L0FD0        skip next code if too high
                      (/home/strick/go/s):02786         *         ldd   DD.MAP,x     get number of bytes in allocation bitmap
                      (/home/strick/go/s):02787         *         addd  #$01FF       add 1 for LSN0, round up a sector: A=lowest LSN
                      (/home/strick/go/s):02788         *         cmpa  PD.SBP+2,y   check LSN0 + DD.MAP against LSN to deallocate
                      (/home/strick/go/s):02789         *         blo   L0FD0        if PD.SBP is higher than LSN0 + DD.MAP, allow it
                      (/home/strick/go/s):02790         *         ldb   #E$IBA       illegal block address: can't deallocate LSN0
                      (/home/strick/go/s):02791         *         bra   L1033        or the allocation bitmap sectors from the bitmap!
                      (/home/strick/go/s):02792         
0FF3 EC06             (/home/strick/go/s):02793                  ldd   DD.BIT,x
                      (/home/strick/go/s):02794                  IFNE  H6309
                      (/home/strick/go/s):02795                  decd
                      (/home/strick/go/s):02796                  ELSE
0FF5 830001           (/home/strick/go/s):02797                  subd  #$0001
                      (/home/strick/go/s):02798                  ENDC
0FF8 E3A817           (/home/strick/go/s):02799                  addd  PD.SBP+1,y
0FFB EDA817           (/home/strick/go/s):02800                  std   PD.SBP+1,y
0FFE EC06             (/home/strick/go/s):02801                  ldd   DD.BIT,x
1000 2414             (/home/strick/go/s):02802                  bcc   L0FF4
1002 6CA816           (/home/strick/go/s):02803                  inc   PD.SBP,y
1005 200F             (/home/strick/go/s):02804                  bra   L0FF4
                      (/home/strick/go/s):02805         
1007 64A816           (/home/strick/go/s):02806         L0FE5    lsr   PD.SBP,y         convert sector number to cluster number
100A 66A817           (/home/strick/go/s):02807                  ror   PD.SBP+1,y
100D 66A818           (/home/strick/go/s):02808                  ror   PD.SBP+2,y
1010 64A81A           (/home/strick/go/s):02809                  lsr   PD.SSZ+1,y
1013 66A81B           (/home/strick/go/s):02810                  ror   PD.SSZ+2,y
     1016             (/home/strick/go/s):02811         L0FF4    equ   *
                      (/home/strick/go/s):02812                  IFNE  H6309
                      (/home/strick/go/s):02813                  lsrd  
                      (/home/strick/go/s):02814                  ELSE
1016 44               (/home/strick/go/s):02815                  lsra
1017 56               (/home/strick/go/s):02816                  rorb
                      (/home/strick/go/s):02817                  ENDC
1018 24ED             (/home/strick/go/s):02818                  bcc   L0FE5
                      (/home/strick/go/s):02819         
101A 5F               (/home/strick/go/s):02820                  clrb  
101B ECA81A           (/home/strick/go/s):02821                  ldd   PD.SSZ+1,y
101E 2736             (/home/strick/go/s):02822                  beq   L1034
1020 ECA816           (/home/strick/go/s):02823                  ldd   PD.SBP,y
                      (/home/strick/go/s):02824                  IFNE  H6309
                      (/home/strick/go/s):02825                  lsrd  
                      (/home/strick/go/s):02826                  lsrd  
                      (/home/strick/go/s):02827                  lsrd                   get cluster byte number into D
                      (/home/strick/go/s):02828                  ELSE
1023 44               (/home/strick/go/s):02829                  lsra
1024 56               (/home/strick/go/s):02830                  rorb
1025 44               (/home/strick/go/s):02831                  lsra
1026 56               (/home/strick/go/s):02832                  rorb
1027 44               (/home/strick/go/s):02833                  lsra
1028 56               (/home/strick/go/s):02834                  rorb
                      (/home/strick/go/s):02835                  ENDC
1029 1F98             (/home/strick/go/s):02836                  tfr   b,a
102B C6DB             (/home/strick/go/s):02837                  ldb   #E$IBA
102D A104             (/home/strick/go/s):02838                  cmpa  DD.MAP,x         is the LSN too high: mapped outside of the bitmap?
102F 2224             (/home/strick/go/s):02839                  bhi   L1033            yes, error out
1031 4C               (/home/strick/go/s):02840                  inca  
1032 A7E4             (/home/strick/go/s):02841                  sta   ,s
1034 8D22             (/home/strick/go/s):02842         L1012    bsr   L1036            flush the sector, and OWN the bitmap
1036 25FC             (/home/strick/go/s):02843                  bcs   L1012
1038 E6E4             (/home/strick/go/s):02844                  ldb   ,s               grab the sector number
103A 8D77             (/home/strick/go/s):02845                  bsr   L1091            go read a sector fro the allocation bitmap
103C 2517             (/home/strick/go/s):02846                  bcs   L1033
103E AE28             (/home/strick/go/s):02847                  ldx   PD.BUF,y         where to start
1040 ECA817           (/home/strick/go/s):02848                  ldd   PD.SBP+1,y       bit offset to delete
                      (/home/strick/go/s):02849         * ATD: keep deleting sectors until we're done!
1043 8407             (/home/strick/go/s):02850                  anda  #$07             make sure it's within the current sector
                      (/home/strick/go/s):02851         * ATD: fix segment sizes!
1045 10AEA81A         (/home/strick/go/s):02852                  ldy   PD.SSZ+1,y       number of clusters to deallocate
1049 103F14           (/home/strick/go/s):02853                  os9   F$DelBit         go delete them (no error possible)
104C 10AE63           (/home/strick/go/s):02854                  ldy   3,s
104F E6E4             (/home/strick/go/s):02855                  ldb   ,s               grab bitmap sector number again
1051 8D38             (/home/strick/go/s):02856                  bsr   L1069            go write it out
1053 2401             (/home/strick/go/s):02857                  bcc   L1034            xit on error
1055 43               (/home/strick/go/s):02858         L1033    coma  
1056 35F2             (/home/strick/go/s):02859         L1034    puls  pc,u,y,x,a
                      (/home/strick/go/s):02860         
1058 1701FB           (/home/strick/go/s):02861         L1036    lbsr  L1237            flush the sector to disk
105B 2008             (/home/strick/go/s):02862                  bra   L1043            skip ahead
                      (/home/strick/go/s):02863         
105D 17FC16           (/home/strick/go/s):02864         L103B    lbsr  L0C56            wakeup the process
1060 103F2B           (/home/strick/go/s):02865                  os9   F$IOQu           queue the process
1063 8D10             (/home/strick/go/s):02866                  bsr   L1053            check for process wakeup
1065 250D             (/home/strick/go/s):02867         L1043    bcs   L1052            error, return
1067 AEA81E           (/home/strick/go/s):02868                  ldx   PD.DTB,y         get drive table ptr
106A A68817           (/home/strick/go/s):02869                  lda   V.BMB,x          bitmap sector
106D 26EE             (/home/strick/go/s):02870                  bne   L103B            if set, continue
106F A625             (/home/strick/go/s):02871                  lda   PD.CPR,y         get our process number
1071 A78817           (/home/strick/go/s):02872                  sta   V.BMB,x          make us the current user of the bitmap
1074 39               (/home/strick/go/s):02873         L1052    rts   
                      (/home/strick/go/s):02874         
                      (/home/strick/go/s):02875         * Wait for process to wakeup
1075 DE50             (/home/strick/go/s):02876         L1053    ldu   <D.Proc          get current process pointer
1077 E6C819           (/home/strick/go/s):02877                  ldb   P$Signal,u       get pending signal
107A C101             (/home/strick/go/s):02878                  cmpb  #S$Wake          is it what we're looking for?
107C 2304             (/home/strick/go/s):02879                  bls   L1060            yes, skip ahead
107E C103             (/home/strick/go/s):02880                  cmpb  #S$Intrpt        is it a keyboard interrupt/
1080 2307             (/home/strick/go/s):02881                  bls   L1067            no, return error [B]=Error code
1082 4F               (/home/strick/go/s):02882         L1060    clra                   clear error status
                      (/home/strick/go/s):02883                  IFNE  H6309
                      (/home/strick/go/s):02884                  tim   #Condem,P$State,u        is process dead?
                      (/home/strick/go/s):02885                  ELSE
1083 A64C             (/home/strick/go/s):02886                  lda   P$State,u
1085 8502             (/home/strick/go/s):02887                  bita  #Condem         
                      (/home/strick/go/s):02888                  ENDC
1087 2701             (/home/strick/go/s):02889                  beq   L1068            no, skip ahead
1089 43               (/home/strick/go/s):02890         L1067    coma                   flag error
108A 39               (/home/strick/go/s):02891         L1068    rts                    return
                      (/home/strick/go/s):02892         
                      (/home/strick/go/s):02893         * Write a file allocation bitmap sector
                      (/home/strick/go/s):02894         * Entry: B=Logical sector #
108B 4F               (/home/strick/go/s):02895         L1069    clra                   clear MSB of LSW to logical sector #
108C 1F01             (/home/strick/go/s):02896                  tfr   d,x              move it to proper register
108E 5F               (/home/strick/go/s):02897                  clrb                   clear MSB of logical sector #
108F 170194           (/home/strick/go/s):02898                  lbsr  L1207            flush the sector to drive
1092 3401             (/home/strick/go/s):02899         L1070    pshs  cc               preserve error status from write
1094 AEA81E           (/home/strick/go/s):02900                  ldx   PD.DTB,y         get drive table pointer
1097 A625             (/home/strick/go/s):02901                  lda   PD.CPR,y         get the current process using it
1099 A18817           (/home/strick/go/s):02902                  cmpa  V.BMB,x          same as process using the bit-map sector?
109C 2613             (/home/strick/go/s):02903                  bne   L108F            no, return
109E 6F8817           (/home/strick/go/s):02904                  clr   V.BMB,x          clear the use flag
10A1 9E50             (/home/strick/go/s):02905                  ldx   <D.Proc          get current process pointer
10A3 A68810           (/home/strick/go/s):02906                  lda   P$IOQN,x         get next process in line for sector
10A6 2709             (/home/strick/go/s):02907                  beq   L108F            none, return
10A8 17FBCB           (/home/strick/go/s):02908                  lbsr  L0C56            wake up the process
10AB 8E0001           (/home/strick/go/s):02909                  ldx   #1               sleep for balance of tick
10AE 103F0A           (/home/strick/go/s):02910                  os9   F$Sleep
10B1 3581             (/home/strick/go/s):02911         L108F    puls  pc,cc            restore error status & return
                      (/home/strick/go/s):02912         
                      (/home/strick/go/s):02913         * Read a sector from file allocation bit map
                      (/home/strick/go/s):02914         * Entry: B=Logical sector #
10B3 4F               (/home/strick/go/s):02915         L1091    clra                   clear MSB of LSW to logical sector #
10B4 1F01             (/home/strick/go/s):02916                  tfr   d,x              move to proper register
10B6 5F               (/home/strick/go/s):02917                  clrb                   clear MSB of logical sector #
10B7 1600A2           (/home/strick/go/s):02918                  lbra  L113A            go read the sector
                      (/home/strick/go/s):02919         
                      (/home/strick/go/s):02920         * Entry: Y=Path descriptor pointer
10BA EC2C             (/home/strick/go/s):02921         L1098    ldd   PD.CP+1,y
10BC A3A814           (/home/strick/go/s):02922                  subd  PD.SBL+1,y
10BF 1F01             (/home/strick/go/s):02923                  tfr   d,x
10C1 E62B             (/home/strick/go/s):02924                  ldb   PD.CP,y
10C3 E2A813           (/home/strick/go/s):02925                  sbcb  PD.SBL,y
10C6 E1A819           (/home/strick/go/s):02926                  cmpb  PD.SSZ,y
10C9 2507             (/home/strick/go/s):02927                  bcs   L10B0
10CB 2207             (/home/strick/go/s):02928                  bhi   L10B2            yes, scan the segment list
10CD ACA81A           (/home/strick/go/s):02929                  cmpx  PD.SSZ+1,y
10D0 2402             (/home/strick/go/s):02930                  bcc   L10B2
10D2 5F               (/home/strick/go/s):02931         L10B0    clrb  
10D3 39               (/home/strick/go/s):02932         L10B1    rts   
                      (/home/strick/go/s):02933         
                      (/home/strick/go/s):02934         * Scan file segment list to get proper segment based on current byte position
                      (/home/strick/go/s):02935         * in the file.  Once found it will be placed in the path descriptor
                      (/home/strick/go/s):02936         * Entry: None
10D4 3440             (/home/strick/go/s):02937         L10B2    pshs  u                preserve
10D6 8D6D             (/home/strick/go/s):02938                  bsr   RdFlDscr         get the file descriptor
10D8 2556             (/home/strick/go/s):02939                  bcs   L110E            error, return
                      (/home/strick/go/s):02940                  IFNE  H6309            init the start point of search in path descriptor
                      (/home/strick/go/s):02941                  clrd  
                      (/home/strick/go/s):02942                  ELSE
10DA 4F               (/home/strick/go/s):02943                  clra  
10DB 5F               (/home/strick/go/s):02944                  clrb  
                      (/home/strick/go/s):02945                  ENDC
10DC EDA813           (/home/strick/go/s):02946                  std   PD.SBL,y
10DF E7A815           (/home/strick/go/s):02947                  stb   PD.SBL+2,y
10E2 EE28             (/home/strick/go/s):02948                  ldu   PD.BUF,y         get sector buffer pointer
10E4 30C810           (/home/strick/go/s):02949                  leax  FD.SEG,u         point to segment list
10E7 A628             (/home/strick/go/s):02950                  lda   PD.BUF,y         get MSB of sector buffer pointer
10E9 C6FC             (/home/strick/go/s):02951                  ldb   #$FC             get size of segment table
10EB 3406             (/home/strick/go/s):02952                  pshs  b,a              save as table end pointer
                      (/home/strick/go/s):02953         * Scan segment list for the proper segment
10ED EC03             (/home/strick/go/s):02954         L10CB    ldd   FDSL.B,x         get segment size in sectors
10EF 2721             (/home/strick/go/s):02955                  beq   L10F0            last one, exit with non existing segment error
10F1 E3A814           (/home/strick/go/s):02956                  addd  PD.SBL+1,y       add to segment start LSN
10F4 1F03             (/home/strick/go/s):02957                  tfr   d,u              copy it
10F6 E6A813           (/home/strick/go/s):02958                  ldb   PD.SBL,y
10F9 C900             (/home/strick/go/s):02959                  adcb  #0
10FB E12B             (/home/strick/go/s):02960                  cmpb  PD.CP,y          this the segment we want?
10FD 2220             (/home/strick/go/s):02961                  bhi   L10FD            yes, move the segment start & size to descriptor
10FF 2605             (/home/strick/go/s):02962                  bne   L10E4            no, save this segment & keep looking
1101 11A32C           (/home/strick/go/s):02963                  cmpu  PD.CP+1,y
1104 2219             (/home/strick/go/s):02964                  bhi   L10FD
1106 E7A813           (/home/strick/go/s):02965         L10E4    stb   PD.SBL,y
1109 EFA814           (/home/strick/go/s):02966                  stu   PD.SBL+1,y
110C 3005             (/home/strick/go/s):02967                  leax  FDSL.S,x         move to next segment
110E ACE4             (/home/strick/go/s):02968                  cmpx  ,s               done?
1110 25DB             (/home/strick/go/s):02969                  bcs   L10CB            no, keep going
                      (/home/strick/go/s):02970         
                      (/home/strick/go/s):02971         * Return Non-Existing segment error
     1112             (/home/strick/go/s):02972         L10F0    equ   *
                      (/home/strick/go/s):02973                  IFNE  H6309
                      (/home/strick/go/s):02974                  clrd
                      (/home/strick/go/s):02975                  ELSE
1112 4F               (/home/strick/go/s):02976                  clra  
1113 5F               (/home/strick/go/s):02977                  clrb  
                      (/home/strick/go/s):02978                  ENDC
1114 A7A819           (/home/strick/go/s):02979                  sta   PD.SSZ,y         zero out the segment
1117 EDA81A           (/home/strick/go/s):02980                  std   PD.SSZ+1,y
111A 53               (/home/strick/go/s):02981                  comb                   set the carry
111B C6D5             (/home/strick/go/s):02982                  ldb   #E$NES           non-existing segment
111D 200F             (/home/strick/go/s):02983                  bra   L110C            return
                      (/home/strick/go/s):02984         
                      (/home/strick/go/s):02985         * Move segment to path descriptor
111F EC84             (/home/strick/go/s):02986         L10FD    ldd   FDSL.A,x         get start physical sector #
1121 EDA816           (/home/strick/go/s):02987                  std   PD.SBP,y         put it in path descriptor
1124 A602             (/home/strick/go/s):02988                  lda   FDSL.A+2,x
1126 A7A818           (/home/strick/go/s):02989                  sta   PD.SBP+2,y
1129 EC03             (/home/strick/go/s):02990                  ldd   FDSL.B,x         get segment size
112B EDA81A           (/home/strick/go/s):02991                  std   PD.SSZ+1,y       put it in path descriptor
112E 3262             (/home/strick/go/s):02992         L110C    leas  2,s
1130 35C0             (/home/strick/go/s):02993         L110E    puls  pc,u
                      (/home/strick/go/s):02994         
                      (/home/strick/go/s):02995         * Read LSN0 from drive
                      (/home/strick/go/s):02996         * Entry: Y=Path descriptor pointer
1132 3414             (/home/strick/go/s):02997         L1110    pshs  x,b              preserve regs used
1134 17011F           (/home/strick/go/s):02998                  lbsr  L1237            flush sector buffer
1137 2508             (/home/strick/go/s):02999                  bcs   L111F            error, return
1139 5F               (/home/strick/go/s):03000                  clrb                   get LSN
113A 8E0000           (/home/strick/go/s):03001                  ldx   #$0000
113D 8D1D             (/home/strick/go/s):03002                  bsr   L113A            read the sector
113F 2402             (/home/strick/go/s):03003                  bcc   L1121            no error, return
1141 E7E4             (/home/strick/go/s):03004         L111F    stb   ,s               save error code
1143 3594             (/home/strick/go/s):03005         L1121    puls  pc,x,b           restore & return
                      (/home/strick/go/s):03006         
                      (/home/strick/go/s):03007         * Read a file descriptor from disk
                      (/home/strick/go/s):03008         * Entry: Y=Path descriptor pointer
1145                  (/home/strick/go/s):03009         RdFlDscr 
                      (/home/strick/go/s):03010                  IFNE  H6309
                      (/home/strick/go/s):03011                  tim   #FDBUF,PD.SMF,y  FD already here?
                      (/home/strick/go/s):03012                  ELSE
1145 E62A             (/home/strick/go/s):03013                  ldb   PD.SMF,y
1147 C504             (/home/strick/go/s):03014                  bitb  #FDBUF 
                      (/home/strick/go/s):03015                  ENDC
1149 2687             (/home/strick/go/s):03016                  bne   L10B0            yes, return no error
114B 170108           (/home/strick/go/s):03017                  lbsr  L1237            flush any sector here
114E 2583             (/home/strick/go/s):03018                  bcs   L10B1            error, return
                      (/home/strick/go/s):03019                  IFNE  H6309
                      (/home/strick/go/s):03020                  oim   #FDBUF,PD.SMF,y
                      (/home/strick/go/s):03021                  ELSE
1150 A62A             (/home/strick/go/s):03022                  lda   PD.SMF,y
1152 8A04             (/home/strick/go/s):03023                  ora   #FDBUF
1154 A72A             (/home/strick/go/s):03024                  sta   PD.SMF,y
                      (/home/strick/go/s):03025                  ENDC
1156 E6A834           (/home/strick/go/s):03026                  ldb   PD.FD,y          get MSB of logical sector
1159 AEA835           (/home/strick/go/s):03027                  ldx   PD.FD+1,y        get LSW of logical sector
115C 8603             (/home/strick/go/s):03028         L113A    lda   #D$READ          get read offset
                      (/home/strick/go/s):03029         * Send command to device driver
                      (/home/strick/go/s):03030         * Entry: A=Driver Command offset
                      (/home/strick/go/s):03031         *        B=MSB of logical sector #
                      (/home/strick/go/s):03032         *        X=LSW of logical sector #
                      (/home/strick/go/s):03033         *        Y=Path descriptor pointer
115E 3476             (/home/strick/go/s):03034         L113C    pshs  u,y,x,b,a        preserve it all
                      (/home/strick/go/s):03035                  IFNE  H6309
                      (/home/strick/go/s):03036                  oim   #InDriver,PD.SMF,y       flag we're in ddriver
                      (/home/strick/go/s):03037                  ELSE
1160 A62A             (/home/strick/go/s):03038                  lda   PD.SMF,y
1162 8A20             (/home/strick/go/s):03039                  ora   #InDriver
1164 A72A             (/home/strick/go/s):03040                  sta   PD.SMF,y
                      (/home/strick/go/s):03041                  ENDC
1166 9E50             (/home/strick/go/s):03042                  ldx   <D.Proc          get current process pointer
1168 A60A             (/home/strick/go/s):03043                  lda   P$Prior,x        get its priority
116A 1F89             (/home/strick/go/s):03044                  tfr   a,b              copy it
116C CB03             (/home/strick/go/s):03045                  addb  #3               add 3 to it
116E 2402             (/home/strick/go/s):03046                  bcc   L1150            didn't wrap, skip ahead
1170 C6FF             (/home/strick/go/s):03047                  ldb   #$FF             force it to max
1172 E70A             (/home/strick/go/s):03048         L1150    stb   P$Prior,x        save priority
1174 E70B             (/home/strick/go/s):03049                  stb   P$Age,x          asage too
1176 AEA830           (/home/strick/go/s):03050                  ldx   PD.Exten,y       get path extension pointer
1179 A78816           (/home/strick/go/s):03051                  sta   PE.Prior,x       save original priority there
117C EE23             (/home/strick/go/s):03052                  ldu   PD.DEV,y         get device table pointer
117E EE42             (/home/strick/go/s):03053                  ldu   V$STAT,u         get static mem pointer
1180 2006             (/home/strick/go/s):03054                  bra   L1166            go execute driver
                      (/home/strick/go/s):03055         * Wait for device
1182 17FAF1           (/home/strick/go/s):03056         L1160    lbsr  L0C56            wakeup waiting process
1185 103F2B           (/home/strick/go/s):03057                  os9   F$IOQu           queue device
                      (/home/strick/go/s):03058         * Device ready, send command
1188 A644             (/home/strick/go/s):03059         L1166    lda   V.BUSY,u         driver already busy?
118A 26F6             (/home/strick/go/s):03060                  bne   L1160            yes, queue it
118C A625             (/home/strick/go/s):03061                  lda   PD.CPR,y         get current process #
118E A744             (/home/strick/go/s):03062                  sta   V.BUSY,u         save it as busy
1190 ECE4             (/home/strick/go/s):03063                  ldd   ,s               get command & logical sector from stack
1192 AE62             (/home/strick/go/s):03064                  ldx   2,s
1194 3440             (/home/strick/go/s):03065                  pshs  u                save static mem
1196 8D72             (/home/strick/go/s):03066                  bsr   L11EB            send it to driver
1198 3540             (/home/strick/go/s):03067                  puls  u                restore static mem
119A 10AE64           (/home/strick/go/s):03068                  ldy   4,s              get path descriptor pointer
119D 3401             (/home/strick/go/s):03069                  pshs  cc               preserve driver error status
119F 2402             (/home/strick/go/s):03070                  bcc   L1181            no error, skip ahead
11A1 E762             (/home/strick/go/s):03071                  stb   2,s              save driver's error code
     11A3             (/home/strick/go/s):03072         L1181    equ   *
                      (/home/strick/go/s):03073                  IFNE  H6309
                      (/home/strick/go/s):03074                  aim   #^InDriver,PD.SMF,y      clear in driver flag
                      (/home/strick/go/s):03075                  ELSE
11A3 A62A             (/home/strick/go/s):03076                  lda   PD.SMF,y
11A5 84DF             (/home/strick/go/s):03077                  anda  #^InDriver
11A7 A72A             (/home/strick/go/s):03078                  sta   PD.SMF,y
                      (/home/strick/go/s):03079                  ENDC
11A9 6F44             (/home/strick/go/s):03080                  clr   V.BUSY,u
11AB AEA830           (/home/strick/go/s):03081                  ldx   PD.Exten,y
11AE A68816           (/home/strick/go/s):03082                  lda   PE.Prior,x
11B1 9E50             (/home/strick/go/s):03083                  ldx   <D.Proc
11B3 A70A             (/home/strick/go/s):03084                  sta   P$Prior,x
                      (/home/strick/go/s):03085         ******
                      (/home/strick/go/s):03086         * this code is in v31 only
11B5 A6E4             (/home/strick/go/s):03087                  lda   ,s               get driver error status
11B7 8501             (/home/strick/go/s):03088                  bita  #Carry           was there an error?
11B9 262F             (/home/strick/go/s):03089                  bne   L11CB            yes, return with it
11BB A661             (/home/strick/go/s):03090                  lda   1,s              get the driver command
11BD 8106             (/home/strick/go/s):03091                  cmpa  #D$WRIT          was it write sector?
11BF 2629             (/home/strick/go/s):03092                  bne   L11CB            no, return
11C1 3470             (/home/strick/go/s):03093                  pshs  u,y,x            preserve regs
11C3 10AEA830         (/home/strick/go/s):03094                  ldy   PD.Exten,y
11C7 33A4             (/home/strick/go/s):03095                  leau  ,y
11C9 AE45             (/home/strick/go/s):03096         L11A7    ldx   PE.Confl,u
11CB 10AC45           (/home/strick/go/s):03097                  cmpy  PE.Confl,u
11CE 2718             (/home/strick/go/s):03098                  beq   L11C9
11D0 3384             (/home/strick/go/s):03099                  leau  ,x
                      (/home/strick/go/s):03100         
                      (/home/strick/go/s):03101         * Check for signal on data write
11D2 A6C818           (/home/strick/go/s):03102                  lda   PE.SigID,u       anything to send signal to?
11D5 27F2             (/home/strick/go/s):03103                  beq   L11A7            no, skip to next in chain
11D7 9E50             (/home/strick/go/s):03104                  ldx   <D.Proc          get current process
11D9 A184             (/home/strick/go/s):03105                  cmpa  P$ID,x
11DB 27EC             (/home/strick/go/s):03106                  beq   L11A7
11DD 6FC818           (/home/strick/go/s):03107                  clr   PE.SigID,u
11E0 E6C817           (/home/strick/go/s):03108                  ldb   PE.SigSg,u
11E3 103F08           (/home/strick/go/s):03109                  os9   F$Send
11E6 20E1             (/home/strick/go/s):03110                  bra   L11A7
                      (/home/strick/go/s):03111         
11E8 3570             (/home/strick/go/s):03112         L11C9    puls  u,y,x
11EA A68810           (/home/strick/go/s):03113         L11CB    lda   P$IOQN,x         any process waiting?
11ED 2719             (/home/strick/go/s):03114                  beq   L11E9            no, return
11EF A621             (/home/strick/go/s):03115                  lda   $01,y
11F1 8504             (/home/strick/go/s):03116                  bita  #$04
11F3 2613             (/home/strick/go/s):03117                  bne   L11E9
11F5 AEA81E           (/home/strick/go/s):03118                  ldx   PD.DTB,y         get driver table pointer
11F8 A625             (/home/strick/go/s):03119                  lda   PD.CPR,y         get current process ID
11FA A18817           (/home/strick/go/s):03120                  cmpa  V.BMB,x          same as bitmap use process?
11FD 2709             (/home/strick/go/s):03121                  beq   L11E9            yes, return
11FF 17FA74           (/home/strick/go/s):03122                  lbsr  L0C56
1202 8E0001           (/home/strick/go/s):03123                  ldx   #1               sleep for balance of tick
1205 103F0A           (/home/strick/go/s):03124                  os9   F$Sleep
1208 35F7             (/home/strick/go/s):03125         L11E9    puls  pc,u,y,x,b,a,cc  restore & return
                      (/home/strick/go/s):03126         
                      (/home/strick/go/s):03127         * Execute device driver
                      (/home/strick/go/s):03128         * Entry: A=Driver command offset
                      (/home/strick/go/s):03129         *        B=MSB of logical sector #
                      (/home/strick/go/s):03130         *        X=LSW of logical sector #
                      (/home/strick/go/s):03131         *        Y=Path descriptor pointer
                      (/home/strick/go/s):03132         *        U=Static memory pointer
120A 3496             (/home/strick/go/s):03133         L11EB    pshs  pc,x,b,a
120C AE23             (/home/strick/go/s):03134                  ldx   PD.DEV,y
120E EC84             (/home/strick/go/s):03135                  ldd   V$DRIV,x
1210 AE84             (/home/strick/go/s):03136                  ldx   V$DRIV,x
1212 E309             (/home/strick/go/s):03137                  addd  M$Exec,x
1214 EBE4             (/home/strick/go/s):03138                  addb  ,s               
1216 8900             (/home/strick/go/s):03139                  adca  #$00
1218 ED64             (/home/strick/go/s):03140                  std   $04,s
121A 3596             (/home/strick/go/s):03141                  puls  pc,x,b,a
                      (/home/strick/go/s):03142         
                      (/home/strick/go/s):03143         * Write file descriptor to disk
                      (/home/strick/go/s):03144         * Entry: Y=Path descriptor pointer
121C E6A834           (/home/strick/go/s):03145         L11FD    ldb   PD.FD,y          get MSB of LSN
121F AEA835           (/home/strick/go/s):03146                  ldx   PD.FD+1,y        get LSW of LSn
1222 2002             (/home/strick/go/s):03147                  bra   L1207            send it to disk
                      (/home/strick/go/s):03148         
                      (/home/strick/go/s):03149         
                      (/home/strick/go/s):03150         * Flush sector buffer to disk
                      (/home/strick/go/s):03151         * Entry: Y=Path descriptor pointer
1224 8D19             (/home/strick/go/s):03152         L1205    bsr   L1220            calulate LSN
1226 8606             (/home/strick/go/s):03153         L1207    lda   #D$WRIT          get driver write offset
1228 3416             (/home/strick/go/s):03154                  pshs  x,b,a            preserve that & LSN
122A ECA81C           (/home/strick/go/s):03155                  ldd   PD.DSK,y         get disk ID of this sector
122D 2706             (/home/strick/go/s):03156                  beq   L1216            nothing, send it to driver
122F AEA81E           (/home/strick/go/s):03157                  ldx   PD.DTB,y         get drive table pointer
1232 10A30E           (/home/strick/go/s):03158                  cmpd  DD.DSK,x         match ID from drive?
1235 3516             (/home/strick/go/s):03159         L1216    puls  x,b,a            restore regs
1237 1027FF23         (/home/strick/go/s):03160                  lbeq  L113C            ID matches, send data to driver
123B 53               (/home/strick/go/s):03161                  comb                   set carry
123C C6FB             (/home/strick/go/s):03162                  ldb   #E$DIDC          get ID change error code
123E 39               (/home/strick/go/s):03163                  rts                    return
                      (/home/strick/go/s):03164         
                      (/home/strick/go/s):03165         * Calculate logical sector # of current sector in buffer
                      (/home/strick/go/s):03166         * Exit : B=MSB of logical sector #
                      (/home/strick/go/s):03167         *        X=LSW of logical sector #
123F EC2C             (/home/strick/go/s):03168         L1220    ldd   PD.CP+1,y        get current logical sector loaded
1241 A3A814           (/home/strick/go/s):03169                  subd  PD.SBL+1,y       subtract it from segment list LSN
1244 1F01             (/home/strick/go/s):03170                  tfr   d,x              copy answer
1246 E62B             (/home/strick/go/s):03171                  ldb   PD.CP,y          get MSB of byte position
1248 E2A813           (/home/strick/go/s):03172                  sbcb  PD.SBL,y         subtract it from segment start
124B 1E01             (/home/strick/go/s):03173                  exg   d,x
124D E3A817           (/home/strick/go/s):03174                  addd  PD.SBP+1,y       add in physical segment sector #
1250 1E01             (/home/strick/go/s):03175                  exg   d,x
1252 E9A816           (/home/strick/go/s):03176                  adcb  PD.SBP,y         now the MSB
1255 39               (/home/strick/go/s):03177                  rts                    return
                      (/home/strick/go/s):03178         
                      (/home/strick/go/s):03179         * Check if sector buffer needs to be flushed to disk
                      (/home/strick/go/s):03180         * Entry: Y=Path descriptor pointer
1256 5F               (/home/strick/go/s):03181         L1237    clrb                   clear carry
1257 3450             (/home/strick/go/s):03182                  pshs  u,x              preserve regs
1259 E62A             (/home/strick/go/s):03183                  ldb   PD.SMF,y         get state flags
125B C446             (/home/strick/go/s):03184                  andb  #(BufBusy!FDBUF!SINBUF)  aynything in buffer?
125D 2714             (/home/strick/go/s):03185                  beq   L1254            no, return
125F 1F98             (/home/strick/go/s):03186                  tfr   b,a              duplicate flags
1261 E82A             (/home/strick/go/s):03187                  eorb  PD.SMF,y         clear them
1263 E72A             (/home/strick/go/s):03188                  stb   PD.SMF,y         save 'em
1265 C401             (/home/strick/go/s):03189                  andb  #BUFMOD          has buffer been modified?
1267 270A             (/home/strick/go/s):03190                  beq   L1254            no, return
1269 E82A             (/home/strick/go/s):03191                  eorb  PD.SMF,y         clear that bit
126B E72A             (/home/strick/go/s):03192                  stb   PD.SMF,y         save it
126D 8502             (/home/strick/go/s):03193                  bita  #SINBUF          is there even a sector in buffer?
126F 2702             (/home/strick/go/s):03194                  beq   L1254            no, return
1271 8DB1             (/home/strick/go/s):03195                  bsr   L1205            flush the sector to drive
1273 35D0             (/home/strick/go/s):03196         L1254    puls  pc,u,x           restore & return
                      (/home/strick/go/s):03197         
1275 3450             (/home/strick/go/s):03198         L1256    pshs  u,x
1277 17FE40           (/home/strick/go/s):03199                  lbsr  L1098
127A 256D             (/home/strick/go/s):03200                  bcs   L12C6
127C 8DD8             (/home/strick/go/s):03201                  bsr   L1237
127E 2569             (/home/strick/go/s):03202                  bcs   L12C6
1280 E62B             (/home/strick/go/s):03203         L1261    ldb   PD.CP,y
1282 EE2C             (/home/strick/go/s):03204                  ldu   PD.CP+1,y
1284 30A4             (/home/strick/go/s):03205                  leax  ,y
1286 10AEA830         (/home/strick/go/s):03206                  ldy   PD.Exten,y
128A AE8830           (/home/strick/go/s):03207         L126B    ldx   PD.Exten,x
128D 10AC05           (/home/strick/go/s):03208                  cmpy  PE.Confl,x
1290 2742             (/home/strick/go/s):03209                  beq   L12B5
1292 AE05             (/home/strick/go/s):03210                  ldx   PE.Confl,x
1294 AE01             (/home/strick/go/s):03211                  ldx   PE.PDptr,x
1296 11A30C           (/home/strick/go/s):03212                  cmpu  PD.CP+1,x
1299 26EF             (/home/strick/go/s):03213                  bne   L126B
129B E10B             (/home/strick/go/s):03214                  cmpb  PD.CP,x
129D 26EB             (/home/strick/go/s):03215                  bne   L126B
129F A60A             (/home/strick/go/s):03216                  lda   PD.SMF,x
12A1 8502             (/home/strick/go/s):03217                  bita  #SINBUF
12A3 27E5             (/home/strick/go/s):03218                  beq   L126B
12A5 8520             (/home/strick/go/s):03219                  bita  #InDriver
12A7 2604             (/home/strick/go/s):03220                  bne   L128E
12A9 8540             (/home/strick/go/s):03221                  bita  #BufBusy
12AB 2712             (/home/strick/go/s):03222                  beq   L12A0
12AD A605             (/home/strick/go/s):03223         L128E    lda   PD.CPR,x
12AF 10AE21           (/home/strick/go/s):03224                  ldy   PE.PDptr,y
12B2 17F9C1           (/home/strick/go/s):03225                  lbsr  L0C56
12B5 103F2B           (/home/strick/go/s):03226                  os9   F$IOQu
12B8 17FDBA           (/home/strick/go/s):03227                  lbsr  L1053
12BB 24C3             (/home/strick/go/s):03228                  bcc   L1261
12BD 35D0             (/home/strick/go/s):03229                  puls  u,x,pc
                      (/home/strick/go/s):03230         
12BF 10AE21           (/home/strick/go/s):03231         L12A0    ldy   PE.PDptr,y
12C2 EC08             (/home/strick/go/s):03232                  ldd   PD.BUF,x
12C4 EE28             (/home/strick/go/s):03233                  ldu   PD.BUF,y
12C6 ED28             (/home/strick/go/s):03234                  std   PD.BUF,y
12C8 EF08             (/home/strick/go/s):03235                  stu   PD.BUF,x
12CA A60A             (/home/strick/go/s):03236                  lda   PD.SMF,x   \ careful, don't use oim here
12CC 8A40             (/home/strick/go/s):03237                  ora   #BufBusy   >takes state from x and
12CE A72A             (/home/strick/go/s):03238                  sta   PD.SMF,y   / stores to y, is infamous "lha" bug
12D0 6F0A             (/home/strick/go/s):03239                  clr   PD.SMF,x
12D2 35D0             (/home/strick/go/s):03240                  puls  pc,u,x
                      (/home/strick/go/s):03241         
12D4 10AE21           (/home/strick/go/s):03242         L12B5    ldy   PE.PDptr,y
12D7 17FF65           (/home/strick/go/s):03243                  lbsr  L1220
12DA 17FE7F           (/home/strick/go/s):03244                  lbsr  L113A
12DD 250A             (/home/strick/go/s):03245                  bcs   L12C6
                      (/home/strick/go/s):03246                  IFNE  H6309
                      (/home/strick/go/s):03247                  oim   #(BufBusy!SINBUF),PD.SMF,y
                      (/home/strick/go/s):03248                  ELSE
12DF 3402             (/home/strick/go/s):03249                  pshs  a
12E1 A62A             (/home/strick/go/s):03250                  lda   PD.SMF,y
12E3 8A42             (/home/strick/go/s):03251                  ora   #(BufBusy!SINBUF)
12E5 A72A             (/home/strick/go/s):03252                  sta   PD.SMF,y
12E7 3502             (/home/strick/go/s):03253                  puls  a
                      (/home/strick/go/s):03254                  ENDC
12E9 35D0             (/home/strick/go/s):03255         L12C6    puls  pc,u,x
                      (/home/strick/go/s):03256         
12EB 245E32           (/home/strick/go/s):03257                  emod  
     12EE             (/home/strick/go/s):03258         eom      equ   *
                      (/home/strick/go/s):03259                  end
