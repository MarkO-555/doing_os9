                      (/home/strick/go/s):00001         ********************************************************************
                      (/home/strick/go/s):00002         * Shellplus - Enhanced shell for NitrOS-9
                      (/home/strick/go/s):00003         *
                      (/home/strick/go/s):00004         * Modified by L. Curtis Boyle from original 2.2 disassembly
                      (/home/strick/go/s):00005         *
                      (/home/strick/go/s):00006         * $Id$
                      (/home/strick/go/s):00007         *
                      (/home/strick/go/s):00008         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/go/s):00009         * Comment
                      (/home/strick/go/s):00010         * ------------------------------------------------------------------
                      (/home/strick/go/s):00011         *  21      ????/??/??
                      (/home/strick/go/s):00012         * Original Tandy/Microware version.  
                      (/home/strick/go/s):00013         *
                      (/home/strick/go/s):00014         *  22/2    ????/??/??
                      (/home/strick/go/s):00015         * History and numerous features added.
                      (/home/strick/go/s):00016         *
                      (/home/strick/go/s):00017         *  23      2010/01/19  Boisy G. Pitre
                      (/home/strick/go/s):00018         * Added code to honor S$HUP signal and exit when received to support
                      (/home/strick/go/s):00019         * networking.
                      (/home/strick/go/s):00020         
                      (/home/strick/go/s):00021                  nam   Shell
                      (/home/strick/go/s):00022                  ttl   Enhanced shell for NitrOS-9
                      (/home/strick/go/s):00023         
                      (/home/strick/go/s):00024         * Disassembled 93/04/15 14:58:18 by Disasm v1.6 (C) 1988 by RML
                      (/home/strick/go/s):00025         * Signals: Signals 2 & 3 are assigned new keys to handle forward/backward
                      (/home/strick/go/s):00026         * command history. Signal $B (11) is the signal sent out on a key being ready
                      (/home/strick/go/s):00027         * for normal command processing
                      (/home/strick/go/s):00028         
                      (/home/strick/go/s):00029                  ifp1
                      (/home/strick/go/s):00030                  use   defsfile
                      (         defsfile):00001                   use    ../defsfile
     0002             (      ../defsfile):00001         Level    equ   2
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (            os9.d):00637         * and for bytes in the system memory map at D.SysMem.
                      (            os9.d):00638         * A value of 0 indicates an unused/unassigned block.
                      (            os9.d):00639         * In the code, block assignment often involves incrementing a value
                      (            os9.d):00640         * from 0 to 1 rather than explict use of RAMinUse.
                      (            os9.d):00641         *
     0080             (            os9.d):00642         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00643         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00644         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00645         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00646         *
                      (            os9.d):00647         * Service Dispatch Table special entries
                      (            os9.d):00648         *
     00FE             (            os9.d):00649         IOEntry        EQU       254
                      (            os9.d):00650         
                      (            os9.d):00651                        ENDC      
                      (            os9.d):00652         
                      (            os9.d):00653                        TTL       Structure Formats
                      (            os9.d):00654                        PAG       
                      (            os9.d):00655         ************************************
                      (            os9.d):00656         * Module Directory Entry Definitions
                      (            os9.d):00657         *
                      (            os9.d):00658                        ORG       0
                      (            os9.d):00659                        IFGT      Level-1
0000                  (            os9.d):00660         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00661         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00662                        ENDC      
0004                  (            os9.d):00663         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00664         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00665         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00666         
                      (            os9.d):00667         ************************************
                      (            os9.d):00668         * Module Definitions
                      (            os9.d):00669         *
                      (            os9.d):00670         * Universal Module Offsets
                      (            os9.d):00671         *
                      (            os9.d):00672                        ORG       0
0000                  (            os9.d):00673         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00674         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00675         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00676         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00677         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00678         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00679         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00680         *
                      (            os9.d):00681         * Type-Dependent Module Offsets
                      (            os9.d):00682         *
                      (            os9.d):00683         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00684         *
0009                  (            os9.d):00685         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Program Module
                      (            os9.d):00688         *
000B                  (            os9.d):00689         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Driver, Device Descriptor Module
                      (            os9.d):00692         *
000D                  (            os9.d):00693         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00694         *
                      (            os9.d):00695         * Device Descriptor Module
                      (            os9.d):00696         *
                      (            os9.d):00697                        ORG       M$IDSize
0009                  (            os9.d):00698         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00699         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00700                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00701         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00702         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00703         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00704         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00705         *
                      (            os9.d):00706         * Configuration Module Entry Offsets
                      (            os9.d):00707         *
                      (            os9.d):00708                        ORG       M$IDSize
0009                  (            os9.d):00709         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00710         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00711         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00712         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00713         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00714         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00715         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00716         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00717         
0017                  (            os9.d):00718         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00719         OSVer          RMB       1                   OS version
0019                  (            os9.d):00720         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00721         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00722         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00723         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00724         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00725         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00726                        RMB       4                   reserved for future use
                      (            os9.d):00727         
                      (            os9.d):00728                        IFGT      Level-1
                      (            os9.d):00729         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00730         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00731         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00732         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00733         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00734                        ENDC      
                      (            os9.d):00735         
                      (            os9.d):00736         * Feature1 byte definitions
     0001             (            os9.d):00737         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00738         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00739         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00740         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00741         
                      (            os9.d):00742                        PAG       
                      (            os9.d):00743         **************************
                      (            os9.d):00744         * Module Field Definitions
                      (            os9.d):00745         *
                      (            os9.d):00746         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00747         *
     0087             (            os9.d):00748         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00749         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00750         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00751         
                      (            os9.d):00752         *
                      (            os9.d):00753         * Module Type/Language Field Masks
                      (            os9.d):00754         *
     00F0             (            os9.d):00755         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00756         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00757         
                      (            os9.d):00758         *
                      (            os9.d):00759         * Module Type Values
                      (            os9.d):00760         *
     00F0             (            os9.d):00761         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00762         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00763         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00764         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00765         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00766         Data           EQU       $40                 Data Module
     0030             (            os9.d):00767         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00768         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00769         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00770         
                      (            os9.d):00771         *
                      (            os9.d):00772         * Module Language Values
                      (            os9.d):00773         *
     0001             (            os9.d):00774         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00775         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00776         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00777         CCode          EQU       4                   C I-code
     0005             (            os9.d):00778         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00779         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00780         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00781         *
                      (            os9.d):00782         * Module Attributes / Revision byte
                      (            os9.d):00783         *
                      (            os9.d):00784         * Field Masks
                      (            os9.d):00785         *
     00F0             (            os9.d):00786         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00787         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00788         *
                      (            os9.d):00789         * Attribute Flags
                      (            os9.d):00790         *
     0080             (            os9.d):00791         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00792         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00793         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00794         
                      (            os9.d):00795         ********************
                      (            os9.d):00796         * Device Type Values
                      (            os9.d):00797         *
                      (            os9.d):00798         * These values define various classes of devices, which are
                      (            os9.d):00799         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00800         * in a device's device descriptor.
                      (            os9.d):00801         *
     0000             (            os9.d):00802         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00803         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00804         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00805         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00806         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00807         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00808         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00809         
                      (            os9.d):00810         *********************
                      (            os9.d):00811         * CRC Result Constant
                      (            os9.d):00812         *
     0080             (            os9.d):00813         CRCCon1        EQU       $80
     0FE3             (            os9.d):00814         CRCCon23       EQU       $0FE3
                      (            os9.d):00815         
                      (            os9.d):00816                        TTL       Process Information
                      (            os9.d):00817                        PAG       
                      (            os9.d):00818         ********************************
                      (            os9.d):00819         * Process Descriptor Definitions
                      (            os9.d):00820         *
                      (            os9.d):00821                        IFEQ      Level-1
                      (            os9.d):00822         
                      (            os9.d):00823         * Level 1 process descriptor defs
002A                  (            os9.d):00824         DefIOSiz       EQU       12
002A                  (            os9.d):00825         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00826         
                      (            os9.d):00827                        ORG       0
002A                  (            os9.d):00828         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00829         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00830         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00831         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00832         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00833         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00834         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00835         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00836         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00837         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00838         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00839         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00840         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00841         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00842         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00843         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00844         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00845         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00846         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00847         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00848         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00849         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00850         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00851         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00852         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00853                        RMB       $40-.               unused
002A                  (            os9.d):00854         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00855         
                      (            os9.d):00856         *
                      (            os9.d):00857         * Process State Flags
                      (            os9.d):00858         *
002A                  (            os9.d):00859         SysState       EQU       %10000000
002A                  (            os9.d):00860         TimSleep       EQU       %01000000
002A                  (            os9.d):00861         TimOut         EQU       %00100000
002A                  (            os9.d):00862         ImgChg         EQU       %00010000
002A                  (            os9.d):00863         Condem         EQU       %00000010
002A                  (            os9.d):00864         Dead           EQU       %00000001
                      (            os9.d):00865         
                      (            os9.d):00866                        ELSE      
                      (            os9.d):00867         
                      (            os9.d):00868         * Level 2 process descriptor defs
     0010             (            os9.d):00869         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00870         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00871         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00872         
                      (            os9.d):00873                        ORG       0
0000                  (            os9.d):00874         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00875         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00876         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00877         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00878         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00879         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00880         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00881         P$User         RMB       2                   User Index
000A                  (            os9.d):00882         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00883         P$Age          RMB       1                   Age
000C                  (            os9.d):00884         P$State        RMB       1                   Status
000D                  (            os9.d):00885         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00886         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00887         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00888         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00889         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00890         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00891         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00892         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00893         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00894         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00895         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00896                        RMB       $20-.               unused
0020                  (            os9.d):00897         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00898         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00899         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00900         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00901         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00902         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00903         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00904         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00905         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00906         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00907         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00908         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00909         P$Alarm        RMB       6
00C9                  (            os9.d):00910                        RMB       $200-.              Local stack
     0200             (            os9.d):00911         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00912         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00913         
                      (            os9.d):00914         *
                      (            os9.d):00915         * Process State Flags
                      (            os9.d):00916         *
     0080             (            os9.d):00917         SysState       EQU       %10000000
     0040             (            os9.d):00918         TimSleep       EQU       %01000000
     0020             (            os9.d):00919         TimOut         EQU       %00100000
     0010             (            os9.d):00920         ImgChg         EQU       %00010000
     0008             (            os9.d):00921         Suspend        EQU       %00001000
     0002             (            os9.d):00922         Condem         EQU       %00000010
     0001             (            os9.d):00923         Dead           EQU       %00000001
                      (            os9.d):00924         
                      (            os9.d):00925                        ENDC      
                      (            os9.d):00926         
                      (            os9.d):00927                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00928                        PAG       
                      (            os9.d):00929         *************************
                      (            os9.d):00930         * Path Descriptor Offsets
                      (            os9.d):00931         *
                      (            os9.d):00932                        ORG       0
0000                  (            os9.d):00933         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00934         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00935         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00936         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00937         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00938         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00939         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00940         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00941         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00942         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00943                        RMB       64-.                Path options
     0040             (            os9.d):00944         PDSIZE         EQU       .
                      (            os9.d):00945         
                      (            os9.d):00946         *
                      (            os9.d):00947         * Pathlist Special Symbols
                      (            os9.d):00948         *
     002F             (            os9.d):00949         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00950         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00951         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00952         
                      (            os9.d):00953                        PAG       
                      (            os9.d):00954         ****************************
                      (            os9.d):00955         * File Manager Entry Offsets
                      (            os9.d):00956         *
                      (            os9.d):00957                        ORG       0
0000                  (            os9.d):00958         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00959         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00960         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00961         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00962         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00963         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00964         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00965         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00966         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00967         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00968         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00969         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00970         FMCLOS         RMB       3                   Close File
                      (            os9.d):00971         
                      (            os9.d):00972         *****************************
                      (            os9.d):00973         * Device Driver Entry Offsets
                      (            os9.d):00974         *
                      (            os9.d):00975                        ORG       0
0000                  (            os9.d):00976         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00977         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00978         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00979         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00980         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00981         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00982         
                      (            os9.d):00983         *********************
                      (            os9.d):00984         * Device Table Format
                      (            os9.d):00985         *
                      (            os9.d):00986                        ORG       0
0000                  (            os9.d):00987         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00988         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00989         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00990         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00991         V$USRS         RMB       1                   use count
                      (            os9.d):00992                        IFGT      Level-1
0009                  (            os9.d):00993         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00994         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00995                        ENDC      
     000D             (            os9.d):00996         DEVSIZ         EQU       .
                      (            os9.d):00997         
                      (            os9.d):00998         *******************************
                      (            os9.d):00999         * Device Static Storage Offsets
                      (            os9.d):01000         *
                      (            os9.d):01001                        ORG       0
0000                  (            os9.d):01002         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):01003         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01004         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01005         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01006         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01007         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01008         
                      (            os9.d):01009         ********************************
                      (            os9.d):01010         * Interrupt Polling Table Format
                      (            os9.d):01011         *
                      (            os9.d):01012                        ORG       0
0000                  (            os9.d):01013         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01014         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01015         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01016         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01017         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01018         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01019                        IFGT      Level-1
0009                  (            os9.d):01020         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01021                        ENDC      
     000B             (            os9.d):01022         POLSIZ         EQU       .
                      (            os9.d):01023         
                      (            os9.d):01024         ********************
                      (            os9.d):01025         * VIRQ packet format
                      (            os9.d):01026         *
                      (            os9.d):01027                        ORG       0
0000                  (            os9.d):01028         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01029         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01030         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01031         Vi.PkSz        EQU       .
                      (            os9.d):01032         
     0001             (            os9.d):01033         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01034         
                      (            os9.d):01035                        PAG       
                      (            os9.d):01036         *************************************
                      (            os9.d):01037         * Machine Characteristics Definitions
                      (            os9.d):01038         *
     0000             (            os9.d):01039         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01040         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01041         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01042         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01043                        IFNE      H6309
0005                  (            os9.d):01044         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01045         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01046         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01047         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01048         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01049         R$X            EQU       6                   X Index register
0005                  (            os9.d):01050         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01051         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01052         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01053         R$Size         EQU       14                  Total register package size
                      (            os9.d):01054                        ELSE      
     0003             (            os9.d):01055         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01056         R$X            EQU       4                   X Index register
     0006             (            os9.d):01057         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01058         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01059         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01060         R$Size         EQU       12                  Total register package size
                      (            os9.d):01061                        ENDC      
                      (            os9.d):01062         
                      (            os9.d):01063         * MD register masks
                      (            os9.d):01064         * 6309 definitions
     0080             (            os9.d):01065         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01066         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01067         
     0080             (            os9.d):01068         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01069         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01070         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01071         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01072         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01073         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01074         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01075         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01076         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01077         Sign           EQU       %10000000           sign bit
                      (            os9.d):01078         
                      (            os9.d):01079                        TTL       Error Code Definitions
                      (            os9.d):01080                        PAG       
                      (            os9.d):01081         ************************
                      (            os9.d):01082         * Error Code Definitions
                      (            os9.d):01083         *
                      (            os9.d):01084         * Basic09 Error Codes
                      (            os9.d):01085         *
                      (            os9.d):01086                        ORG       10
000A                  (            os9.d):01087         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01088         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01089         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01090         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01091         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01092         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01093         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01094         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01095         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01096         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01097         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01098         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01099         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01100         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01101         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01102         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01103         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01104         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01105         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01106         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01107         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01108         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01109         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01110         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01111         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01112         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01113         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01114         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01115         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01116         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01117         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01118         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01119         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01120         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01121         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01122         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01123         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01124         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01125         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01126         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01127         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01128         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01129         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01130         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01131         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01132         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01133         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01134         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01135         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01136         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01137         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01138         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01139         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01140         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01141         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01142         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01143         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01144         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01145         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01146         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01147         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01148         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01149         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01150         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01151         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01152         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01153         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01154         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01155         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01156         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01157         
                      (            os9.d):01158         *
                      (            os9.d):01159         * System Dependent Error Codes
                      (            os9.d):01160         *
                      (            os9.d):01161         
                      (            os9.d):01162         * Level 2 windowing error codes
                      (            os9.d):01163                        ORG       183
00B7                  (            os9.d):01164         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01165         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01166         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01167         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01168         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01169                        RMB       1                   reserved
00BD                  (            os9.d):01170         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01171         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01172         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01173         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01174         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01175         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01176         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01177         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01178         
00C5                  (            os9.d):01179         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01180         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01181         E$Alias        RMB       1
                      (            os9.d):01182         
                      (            os9.d):01183         
                      (            os9.d):01184         *
                      (            os9.d):01185         * Standard NitrOS-9 Error Codes
                      (            os9.d):01186         *
                      (            os9.d):01187                        ORG       200
00C8                  (            os9.d):01188         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01189         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01190         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01191         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01192         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01193         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01194         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01195         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01196         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01197         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01198         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01199         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01200                        RMB       1
00D5                  (            os9.d):01201         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01202         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01203         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01204         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01205         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01206         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01207         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01208         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01209         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01210                        RMB       1
00DF                  (            os9.d):01211         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01212         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01213         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01214                        RMB       1
00E2                  (            os9.d):01215         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01216         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01217         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01218         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01219         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01220         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01221         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01222         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01223         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01224         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01225         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01226         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01227         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01228         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01229                        RMB       $F0-.               reserved
00F0                  (            os9.d):01230         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01231         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01232         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01233         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01234         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01235         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01236         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01237         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01238         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01239         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01240         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01241         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01242         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01243         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01244         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01245         
                      (            os9.d):01246         
                      (            os9.d):01247                        IFGT      Level-2
                      (            os9.d):01248         ***************************
                      (            os9.d):01249         * Level 3 Defs
                      (            os9.d):01250         *
                      (            os9.d):01251         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01252         *
00FF                  (            os9.d):01253         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01254         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01255         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01256         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01257         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01258         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01259                        ENDC      
                      (            os9.d):01260         
                      (            os9.d):01261                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
     00E0             (            scf.d):00222         PARMASK        EQU       %11100000
                      (            scf.d):00223         
                      (            scf.d):00224         * PD.BAU definitions
                      (            scf.d):00225         *
                      (            scf.d):00226         * Baud rate
     0000             (            scf.d):00227         B110           EQU       %00000000
     0001             (            scf.d):00228         B300           EQU       %00000001
     0002             (            scf.d):00229         B600           EQU       %00000010
     0003             (            scf.d):00230         B1200          EQU       %00000011
     0004             (            scf.d):00231         B2400          EQU       %00000100
     0005             (            scf.d):00232         B4800          EQU       %00000101
     0006             (            scf.d):00233         B9600          EQU       %00000110
     0007             (            scf.d):00234         B19200         EQU       %00000111
     0008             (            scf.d):00235         B38400         EQU       %00001000
     0009             (            scf.d):00236         B57600         EQU       %00001001
     000A             (            scf.d):00237         B115200        EQU       %00001010
                      (            scf.d):00238         * Word size
     0000             (            scf.d):00239         WORD8          EQU       %00000000
     0020             (            scf.d):00240         WORD7          EQU       %00100000
                      (            scf.d):00241         * Stop bits
     0000             (            scf.d):00242         STOP1          EQU       %00000000
     0010             (            scf.d):00243         STOP2          EQU       %00010000
                      (            scf.d):00244         
                      (            scf.d):00245                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         ********************************
                      (           coco.d):00148         * Boot defs for NitrOS-9 Level 1
                      (           coco.d):00149         *
                      (           coco.d):00150         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00151         * system.
                      (           coco.d):00152         *
0004                  (           coco.d):00153         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE
                      (           coco.d):00156         
                      (           coco.d):00157         ******************************************
                      (           coco.d):00158         * Boot defs for NitrOS-9 Level 2 and above
                      (           coco.d):00159         *
                      (           coco.d):00160         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00161         * system.
                      (           coco.d):00162         *
     ED00             (           coco.d):00163         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (           coco.d):00164         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (           coco.d):00165         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (           coco.d):00166         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (           coco.d):00167         
                      (           coco.d):00168                        ENDC
                      (           coco.d):00169         
                      (           coco.d):00170         * On the CoCo, the boot track is all of track 34
                      (           coco.d):00171         
     0022             (           coco.d):00172         Bt.Track       EQU       34                  Boot track
     0000             (           coco.d):00173         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (           coco.d):00174         
                      (           coco.d):00175         
     1080             (           coco.d):00176         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (           coco.d):00177         
                      (           coco.d):00178         
                      (           coco.d):00179                        IFEQ      Level-1
                      (           coco.d):00180         
                      (           coco.d):00181         *************************************************
                      (           coco.d):00182         *
                      (           coco.d):00183         * NitrOS-9 Level 1 Section
                      (           coco.d):00184         *
                      (           coco.d):00185         *************************************************
                      (           coco.d):00186         
0004                  (           coco.d):00187         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00188         
                      (           coco.d):00189                        ELSE      
                      (           coco.d):00190         
                      (           coco.d):00191         *************************************************
                      (           coco.d):00192         *
                      (           coco.d):00193         * NitrOS-9 Level 2 Section
                      (           coco.d):00194         *
                      (           coco.d):00195         *************************************************
                      (           coco.d):00196         
                      (           coco.d):00197         ****************************************
                      (           coco.d):00198         * Dynamic Address Translator Definitions
                      (           coco.d):00199         *
     0008             (           coco.d):00200         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00201         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00202         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00203         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00204         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00205         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00206         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00207         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00208         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00209         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00210         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00211         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00212         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00213         IOBlock        EQU       $3F
     003F             (           coco.d):00214         ROMBlock       EQU       $3F
     007F             (           coco.d):00215         IOAddr         EQU       $7F
     0001             (           coco.d):00216         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00217         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00218         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00219         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00220         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00221         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00222         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00223         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00224         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00225         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00226         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00227         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00228         
                      (           coco.d):00229         ***************************
                      (           coco.d):00230         * Color Computer 3 Specific
                      (           coco.d):00231         *
     0001             (           coco.d):00232         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00233         
                      (           coco.d):00234         ********************
                      (           coco.d):00235         * Hardware addresses
                      (           coco.d):00236         *
     FF00             (           coco.d):00237         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00238         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00239         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00240         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00241         
     0007             (           coco.d):00242         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00243         
                      (           coco.d):00244         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (           coco.d):00245         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (           coco.d):00246         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (           coco.d):00247         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (           coco.d):00248         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (           coco.d):00249         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (           coco.d):00250         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (           coco.d):00251         * it will end up with its own block assigned for CPU address space $E000-
                      (           coco.d):00252         * $FFFF but the top of the address space is unusable by the user process:
                      (           coco.d):00253         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (           coco.d):00254         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (           coco.d):00255         * For the COCO GIME, it's always $3F.
     003F             (           coco.d):00256         KrnBlk         SET       $3F
                      (           coco.d):00257         
                      (           coco.d):00258                        ENDC
                      (           coco.d):00259                        ENDC
                      (           coco.d):00260         
                      (/home/strick/go/s):00031                  endc
                      (/home/strick/go/s):00032         
     0011             (/home/strick/go/s):00033         tylg     set   Prgrm+Objct   
     0080             (/home/strick/go/s):00034         atrv     set   ReEnt+rev
     0000             (/home/strick/go/s):00035         rev      set   $00
     0017             (/home/strick/go/s):00036         edition  set   23
                      (/home/strick/go/s):00037         
0000 87CD1B57000D1180 (/home/strick/go/s):00038                  mod   eom,name,tylg,atrv,start,size
     6500741F00
                      (/home/strick/go/s):00039         
0000.                 (/home/strick/go/s):00040         u0000    rmb   1              Path # for standard input
0001.                 (/home/strick/go/s):00041         u0001    rmb   1              Path # for standard output
0002.                 (/home/strick/go/s):00042         u0002    rmb   1              Path # for standard error
0003.                 (/home/strick/go/s):00043         u0003    rmb   1              # of 256 byte pages of data mem for frked module
0004.                 (/home/strick/go/s):00044         u0004    rmb   2              Temp ptr (current parse ptr, mem module ptr,etc)
0006.                 (/home/strick/go/s):00045         u0006    rmb   2              Size of current group
0008.                 (/home/strick/go/s):00046         u0008    rmb   2              Pointer to start of current group (past '(')
000A.                 (/home/strick/go/s):00047         u000A    rmb   2
000C.                 (/home/strick/go/s):00048         u000C    rmb   1              Current char. being processed in command parser
000D.                 (/home/strick/go/s):00049         u000D    rmb   1              # of command groups [ '()' groupings ]
000E.                 (/home/strick/go/s):00050         u000E    rmb   1              unprocessed signal # (0=none waiting)
000F.                 (/home/strick/go/s):00051         u000F    rmb   1              ??? Flag of some sort
0010.                 (/home/strick/go/s):00052         u0010    rmb   2              ??? (ptr to some module name)
0012.                 (/home/strick/go/s):00053         u0012    rmb   1              Current working DIR path #
0013.                 (/home/strick/go/s):00054         u0013    rmb   1              Flag to kill parent process (1=Kill parent)
0014.                 (/home/strick/go/s):00055         u0014    rmb   1              Flag: If set, a result must not be 0 ???
0015.                 (/home/strick/go/s):00056         u0015    rmb   1
0016.                 (/home/strick/go/s):00057         u0016    rmb   1
0017.                 (/home/strick/go/s):00058         u0017    rmb   1
0018.                 (/home/strick/go/s):00059         u0018    rmb   1              Immortal shell (0=NO)
                      (/home/strick/go/s):00060         * A clearing routine only does u0000 to u0018
0019.                 (/home/strick/go/s):00061         u0019    rmb   1
001A.                 (/home/strick/go/s):00062         u001A    rmb   2
001C.                 (/home/strick/go/s):00063         u001C    rmb   1              Shell logging on flag (0=OFF)
001D.                 (/home/strick/go/s):00064         u001D    rmb   1              Shell prompting (0=ON)
001E.                 (/home/strick/go/s):00065         u001E    rmb   1              Echo input (0=OFF)
001F.                 (/home/strick/go/s):00066         u001F    rmb   1              Variable expansion (0=ON)
0020.                 (/home/strick/go/s):00067         u0020    rmb   1              Kill shell on error (0=OFF)
0021.                 (/home/strick/go/s):00068         u0021    rmb   1              Process # to set priority on
0022.                 (/home/strick/go/s):00069         u0022    rmb   1              Priority to set (0=don't change) (ours or fork)
0023.                 (/home/strick/go/s):00070         u0023    rmb   2
0025.                 (/home/strick/go/s):00071         u0025    rmb   2              End of data mem ptr (top of stack)
0027.                 (/home/strick/go/s):00072         u0027    rmb   1
0028.                 (/home/strick/go/s):00073         u0028    rmb   1
0029.                 (/home/strick/go/s):00074         u0029    rmb   1
002A.                 (/home/strick/go/s):00075         u002A    rmb   2
002C.                 (/home/strick/go/s):00076         u002C    rmb   2
002E.                 (/home/strick/go/s):00077         u002E    rmb   1
002F.                 (/home/strick/go/s):00078         u002F    rmb   1
0030.                 (/home/strick/go/s):00079         u0030    rmb   1
0031.                 (/home/strick/go/s):00080         u0031    rmb   1
0032.                 (/home/strick/go/s):00081         u0032    rmb   2
0034.                 (/home/strick/go/s):00082         u0034    rmb   3
0037.                 (/home/strick/go/s):00083         u0037    rmb   1              Flag: 0=Data dir .PWD invalid, 1=valid
0038.                 (/home/strick/go/s):00084         u0038    rmb   1              Flag: 0=Exec dir .PXD invalid, 1=valid
0039.                 (/home/strick/go/s):00085         u0039    rmb   1
003A.                 (/home/strick/go/s):00086         u003A    rmb   1
003B.                 (/home/strick/go/s):00087         u003B    rmb   2
003D.                 (/home/strick/go/s):00088         u003D    rmb   1
003E.                 (/home/strick/go/s):00089         u003E    rmb   2
0040.                 (/home/strick/go/s):00090         u0040    rmb   2              Ptr to start of filename (vs. pathname) ('/')
                      (/home/strick/go/s):00091         * Shell prompt flag
0042.                 (/home/strick/go/s):00092         u0042    rmb   1              Current working dir path already done flag
0043.                 (/home/strick/go/s):00093         u0043    rmb   1              
0044.                 (/home/strick/go/s):00094         u0044    rmb   1
0045.                 (/home/strick/go/s):00095         u0045    rmb   1              ??? <>0 means looking for GOTO label?
0046.                 (/home/strick/go/s):00096         u0046    rmb   1              Flag: 1=GOTO label found?
0047.                 (/home/strick/go/s):00097         u0047    rmb   1              Error code from ReadLn or signal
0048.                 (/home/strick/go/s):00098         u0048    rmb   2              Ptr to 1st char after redirection symbols
004A.                 (/home/strick/go/s):00099         u004A    rmb   2              Ptr to text message
004C.                 (/home/strick/go/s):00100         u004C    rmb   2              Size of text message
004E.                 (/home/strick/go/s):00101         u004E    rmb   1
004F.                 (/home/strick/go/s):00102         u004F    rmb   1              0=no pathname in parm line, else IS pathname
0050.                 (/home/strick/go/s):00103         u0050    rmb   2
0052.                 (/home/strick/go/s):00104         u0052    rmb   2              Current expanded buffer size (max=2048)
0054.                 (/home/strick/go/s):00105         u0054    rmb   2              Ptr to current char in wildcard filename we are
                      (/home/strick/go/s):00106         *                               checking
0056.                 (/home/strick/go/s):00107         u0056    rmb   2              Ptr to current pos in expanded buffer
0058.                 (/home/strick/go/s):00108         u0058    rmb   2              Pointer to end of GOTO label name
005A.                 (/home/strick/go/s):00109         u005A    rmb   2              User ID # from F$ID call
005C.                 (/home/strick/go/s):00110         u005C    rmb   1
005D.                 (/home/strick/go/s):00111         u005D    rmb   1
005E.                 (/home/strick/go/s):00112         u005E    rmb   1              Device type: 0=SCF (keyboard),1=RBF (Scriptfile)
005F.                 (/home/strick/go/s):00113         u005F    rmb   1
0060.                 (/home/strick/go/s):00114         u0060    rmb   1              Data module linked flag: 1= Yes
0061.                 (/home/strick/go/s):00115         u0061    rmb   2              Ptr to data module name
0063.                 (/home/strick/go/s):00116         u0063    rmb   2              Ptr to intercept routines data mem
0065.                 (/home/strick/go/s):00117         u0065    rmb   2              Execution address of linked module
0067.                 (/home/strick/go/s):00118         u0067    rmb   2              Start address of module
0069.                 (/home/strick/go/s):00119         u0069    rmb   2
006B.                 (/home/strick/go/s):00120         u006B    rmb   1              Flag: 0=No module to unlink, <>0 module to unlink
006C.                 (/home/strick/go/s):00121         u006C    rmb   1
006D.                 (/home/strick/go/s):00122         u006D    rmb   1              Start of device name buffer (start with '/')
006E.                 (/home/strick/go/s):00123         u006E    rmb   71             Actual device name
00B5.                 (/home/strick/go/s):00124         u00B5    rmb   20             Start of another device name buffer ('/')
00C9.                 (/home/strick/go/s):00125         u00C9    rmb   13
00D6.                 (/home/strick/go/s):00126         u00D6    rmb   13             Standard module header info (M$ID-M$Mem)
00E3.                 (/home/strick/go/s):00127         u00E3    rmb   5              Module name string (reserves 64 chars)
00E8.                 (/home/strick/go/s):00128         u00E8    rmb   3
00EB.                 (/home/strick/go/s):00129         u00EB    rmb   4
00EF.                 (/home/strick/go/s):00130         u00EF    rmb   10             Temp buffer (many uses)
00F9.                 (/home/strick/go/s):00131         u00F9    rmb   6
00FF.                 (/home/strick/go/s):00132         u00FF    rmb   37             Place to point SP when CHAINing
0124.                 (/home/strick/go/s):00133         u0124    rmb   81             Temporary buffer (used for several things)
0175.                 (/home/strick/go/s):00134         u0175    rmb   119            Part of temp buffer for ReadLn (200 chars total)
01EC.                 (/home/strick/go/s):00135         u01EC    rmb   2              Least sig. 2 digits of process # (ASCII format)
01EE.                 (/home/strick/go/s):00136         u01EE    rmb   1
01EF.                 (/home/strick/go/s):00137         u01EF    rmb   2              Holding area for 2 digit ASCII conversions
                      (/home/strick/go/s):00138         * Shell prompt parsing flags
01F1.                 (/home/strick/go/s):00139         u01F1    rmb   1              Process ID # already done flag
01F2.                 (/home/strick/go/s):00140         u01F2    rmb   1              Standard output device name already done flag
01F3.                 (/home/strick/go/s):00141         u01F3    rmb   1              Quoting on flag in shell prompt string parsing
01F4.                 (/home/strick/go/s):00142         u01F4    rmb   1              Date already done flag
01F5.                 (/home/strick/go/s):00143         u01F5    rmb   1              Time already done flag
01F6.                 (/home/strick/go/s):00144         u01F6    rmb   1              Date OR time already done flag
01F7.                 (/home/strick/go/s):00145         u01F7    rmb   2              Size of expanded shell prompt
01F9.                 (/home/strick/go/s):00146         u01F9    rmb   25             Current shell prompt string
0212.                 (/home/strick/go/s):00147         u0212    rmb   1              Lead in Line feed for expanded shell prompt
0213.                 (/home/strick/go/s):00148         u0213    rmb   199            Expanded shell prompt
02DA.                 (/home/strick/go/s):00149         u02DA    rmb   6              Date/time packet
02E0.                 (/home/strick/go/s):00150         u02E0    rmb   8              Date string
02E8.                 (/home/strick/go/s):00151         u02E8    rmb   1              Space separating date & time (for shell init)
02E9.                 (/home/strick/go/s):00152         u02E9    rmb   9              Time string (and CR)
02F2.                 (/home/strick/go/s):00153         u02F2    rmb   131
0375.                 (/home/strick/go/s):00154         u0375    rmb   131
03F8.                 (/home/strick/go/s):00155         u03F8    rmb   29
0415.                 (/home/strick/go/s):00156         u0415    rmb   2
0417.                 (/home/strick/go/s):00157         u0417    rmb   1
0418.                 (/home/strick/go/s):00158         u0418    rmb   400            Intercept routines memory area (not used)
05A8.                 (/home/strick/go/s):00159         u05A8    rmb   810            Shell variables (user?)
08D2.                 (/home/strick/go/s):00160         u08D2    rmb   810            Shell variables (shell sub?)
0BFC.                 (/home/strick/go/s):00161         u0BFC    rmb   80
0C4C.                 (/home/strick/go/s):00162         u0C4C    rmb   81             Copy of GOTO label name
0C9D.                 (/home/strick/go/s):00163         u0C9D    rmb   32             DIR Entry buffer
0CBD.                 (/home/strick/go/s):00164         u0CBD    rmb   32             Shell logging filename (append mode '+')
0CDD.                 (/home/strick/go/s):00165         u0CDD    rmb   400            PATH=Buffer (each entry CR terminated)
0E6D.                 (/home/strick/go/s):00166         u0E6D    rmb   2048           Fully expanded filenames buffer (for wildcards)
                      (/home/strick/go/s):00167         * Actually,this next block appears to be generic buffers for various functions
166D.                 (/home/strick/go/s):00168         u166D    rmb   80             Process descriptor copies go here (512 bytes)
16BD.                 (/home/strick/go/s):00169         u16BD    rmb   1
16BE.                 (/home/strick/go/s):00170         u16BE    rmb   80
170E.                 (/home/strick/go/s):00171         u170E    rmb   238
17FC.                 (/home/strick/go/s):00172         u17FC    rmb   10
1806.                 (/home/strick/go/s):00173         u1806    rmb   2              ??? Ptr to end of shell history buffers
1808.                 (/home/strick/go/s):00174         u1808    rmb   2              Ptr to where next history entry will go
180A.                 (/home/strick/go/s):00175         u180A    rmb   2              Ptr to start of shell history buffers
180C.                 (/home/strick/go/s):00176         u180C    rmb   1              # of lines in history buffer (1-(u180C))
180D.                 (/home/strick/go/s):00177         u180D    rmb   1              Current line # in history buffer
180E.                 (/home/strick/go/s):00178         u180E    rmb   1              Original keyboard terminate char
180F.                 (/home/strick/go/s):00179         u180F    rmb   1              Original keyboard interrupt char
1810.                 (/home/strick/go/s):00180         u1810    rmb   1
1811.                 (/home/strick/go/s):00181         u1811    rmb   1              Original end of line NUL count
1812.                 (/home/strick/go/s):00182         u1812    rmb   1              Flag to indicate if we have to restore PD.OPT
1813.                 (/home/strick/go/s):00183         u1813    rmb   2
1815.                 (/home/strick/go/s):00184         u1815    rmb   808            Shell history copies start here
1B3D.                 (/home/strick/go/s):00185         u1B3D    rmb   963            Local stack space, etc.
     1F00             (/home/strick/go/s):00186         size     equ   .
     000D             (/home/strick/go/s):00187         name     equ   *
000D 5368656CEC       (/home/strick/go/s):00188         L000D    fcs   /Shell/
0012 17               (/home/strick/go/s):00189                  fcb   edition
0013 13               (/home/strick/go/s):00190         L0013    fcb   Prgrm+PCode 
0014 50617363616CD3   (/home/strick/go/s):00191                  fcs   'PascalS'
001B 25               (/home/strick/go/s):00192                  fcb   Sbrtn+CblCode
001C 52756EC3         (/home/strick/go/s):00193                  fcs   'RunC'
0020 22               (/home/strick/go/s):00194                  fcb   Sbrtn+ICode
0021 52756EC2         (/home/strick/go/s):00195         L0021    fcs   'RunB'
0025 0000000000000000 (/home/strick/go/s):00196                  fcb   $00,$00,$00,$00,$00,$00,$00,$00,$00
     00
002E 0A               (/home/strick/go/s):00197         L002E    fcb   C$LF
002F 5368656C6C2B2076 (/home/strick/go/s):00198                  fcc   'Shell+ v2.2a '
     322E326120
003C 00               (/home/strick/go/s):00199         L003C    fcb   $00 
003D 7B407C237D243A20 (/home/strick/go/s):00200         L003D    fcc   '{@|#}$:                 '
     2020202020202020
     2020202020202020
0055 2B2B2B5354415254 (/home/strick/go/s):00201         L0055    fcc   '+++START+++'
     2B2B2B
0060 0D               (/home/strick/go/s):00202                  fcb   C$CR
0061 2B2B2B454E442B2B (/home/strick/go/s):00203         L0061    fcc   '+++END+++'
     2B
006A 0D               (/home/strick/go/s):00204                  fcb   C$CR
                      (/home/strick/go/s):00205         * Intercept routine
006B D70E             (/home/strick/go/s):00206         L006B    stb   <u000E         Save signal code & return
                      (/home/strick/go/s):00207         * +++ BGP added for Hang Up
                      (/home/strick/go/s):00208         * +++ Note we are exiting even if shell is immortal!
006D C104             (/home/strick/go/s):00209                  cmpb  #S$HUP
006F 102701C8         (/home/strick/go/s):00210                  lbeq  exit
                      (/home/strick/go/s):00211         * +++
0073 3B               (/home/strick/go/s):00212                  rti
                      (/home/strick/go/s):00213         
0074 327B             (/home/strick/go/s):00214         start    leas  -5,s           Make 5 byte buffer on stack
0076 3436             (/home/strick/go/s):00215                  pshs  y,x,d          Save Top/bottom of param area, and size of area
0078 30C91815         (/home/strick/go/s):00216                  leax  >u1815,u       Pointer to start of history buffer area
007C AFC91808         (/home/strick/go/s):00217                  stx   >u1808,u       Save ptr to where next history entry goes
0080 AFC9180A         (/home/strick/go/s):00218                  stx   >u180A,u       Save ptr to start of history buffers
0084 30890328         (/home/strick/go/s):00219                  leax  >$0328,x       Setup up another pointer (end of history area?)
0088 AFC91806         (/home/strick/go/s):00220                  stx   >u1806,u       Save it
008C 6FC91812         (/home/strick/go/s):00221                  clr   >u1812,u       Clear flag that we have to restore PD.OPT
0090 6FC9180D         (/home/strick/go/s):00222                  clr   >u180D,u       Current line # of history buffer=0
0094 6FC9180C         (/home/strick/go/s):00223                  clr   >u180C,u       # lines in history buffer=0
0098 AE62             (/home/strick/go/s):00224                  ldx   2,s            Get back top of data area ptr
009A C6FF             (/home/strick/go/s):00225                  ldb   #$FF           255 bytes to clear
009C 170399           (/home/strick/go/s):00226                  lbsr  L0412          Go clear direct page
009F 10DF25           (/home/strick/go/s):00227                  sts   <u0025         Save current stack ptr
00A2 DF27             (/home/strick/go/s):00228                  stu   <u0027         Save Data mem ptr (0)
00A4 30C90418         (/home/strick/go/s):00229                  leax  >u0418,u       Point to intercept routines memory area
00A8 9F63             (/home/strick/go/s):00230                  stx   <u0063         Save a copy of it
00AA 308CBE           (/home/strick/go/s):00231                  leax  <L006B,pc      Point to intercept routine
00AD 103F09           (/home/strick/go/s):00232                  os9   F$Icpt         Setup the intercept routine
00B0 17167E           (/home/strick/go/s):00233                  lbsr  L16A6          Get user #, and make 2 digit ASCII ver. @ 1EC
00B3 17164A           (/home/strick/go/s):00234                  lbsr  L1674          Make shell logging pathname @ CBD
00B6 308C84           (/home/strick/go/s):00235                  leax  <L003D,pc      Point to default shell prompt string
00B9 170967           (/home/strick/go/s):00236                  lbsr  CmdPEq         Go create shell prompt string & prompt itself
00BC 30C905A8         (/home/strick/go/s):00237                  leax  >u05A8,u       Point to start of shell variables
00C0 CC0D14           (/home/strick/go/s):00238                  ldd   #C$CR*256+20   Carriage return (blank entries) & all 20 of them
00C3 A784             (/home/strick/go/s):00239         L009C    sta   ,x             Mark shell variable as blank
00C5 308851           (/home/strick/go/s):00240                  leax  <81,x          Point to next entry (81 bytes/entry)
00C8 5A               (/home/strick/go/s):00241                  decb                 Do until all 20 are done (user & shell sub)
00C9 26F8             (/home/strick/go/s):00242                  bne   L009C
00CB A7C90CDD         (/home/strick/go/s):00243                  sta   >u0CDD,u       Init 1st 2 entries of PATH= buffer to CR's
00CF A7C90CDE         (/home/strick/go/s):00244                  sta   >u0CDD+1,u
00D3 3516             (/home/strick/go/s):00245                  puls  x,d            Get parameter ptr & parameter size
00D5 DD06             (/home/strick/go/s):00246                  std   <u0006         Save size of parameter area
00D7 270D             (/home/strick/go/s):00247                  beq   L00BF          If no parameters, skip ahead
00D9 170365           (/home/strick/go/s):00248                  lbsr  L041B          Pre-Parse parameters passed to this shell
00DC 1025013D         (/home/strick/go/s):00249                  lbcs  L01FA          Error, go handle it
00E0 0D0C             (/home/strick/go/s):00250                  tst   <u000C         Any char being processed in parser?
00E2 10260136         (/home/strick/go/s):00251                  lbne  L01F9          Yes, skip ahead
00E6 17015F           (/home/strick/go/s):00252         L00BF    lbsr  L0225          Release any keyboard/mouse signals & get PD.OPT
00E9 0C6C             (/home/strick/go/s):00253                  inc   <u006C         ??? Set flag
00EB 10EEE1           (/home/strick/go/s):00254                  lds   ,s++           Since parameters parsed, point SP to top of mem
00EE 10DF25           (/home/strick/go/s):00255                  sts   <u0025         Save end of data mem ptr (top of stack)
00F1 DF27             (/home/strick/go/s):00256                  stu   <u0027         Save start of data mem ptr
00F3 308DFF37         (/home/strick/go/s):00257         L00CC    leax  >L002E,pc      Point to Shellplus v2.2 message
00F7 0D1D             (/home/strick/go/s):00258                  tst   <u001D         Shell prompting turned on?
00F9 2616             (/home/strick/go/s):00259                  bne   L00EA          No, skip ahead
00FB 108E000E         (/home/strick/go/s):00260                  ldy   #$000E         Length of message
00FF 8601             (/home/strick/go/s):00261                  lda   #$01           Standard out
0101 103F8A           (/home/strick/go/s):00262                  os9   I$Write        Write it
0104 1025011B         (/home/strick/go/s):00263                  lbcs  L0200          If error writing, terminate Shellplus
0108 8D17             (/home/strick/go/s):00264                  bsr   L00FB          Go create date & time strings
010A 170131           (/home/strick/go/s):00265                  lbsr  L021B          Write out date & time
010D 10250112         (/home/strick/go/s):00266                  lbcs  L0200          If error writing, terminate Shellplus
0111 4F               (/home/strick/go/s):00267         L00EA    clra
0112 975C             (/home/strick/go/s):00268                  sta   <u005C
0114 308DFF3D         (/home/strick/go/s):00269                  leax  >L0055,pc      Point to '+++START+++' for shell logging
0118 1706E1           (/home/strick/go/s):00270                  lbsr  L07E7          Go deal with logging if necessary
011B 0D1D             (/home/strick/go/s):00271                  tst   <u001D         Shell prompting turn on?
011D 2627             (/home/strick/go/s):00272                  bne   L0120          No, skip ahead
011F 2012             (/home/strick/go/s):00273                  bra   L010D          Yes, do something else first
                      (/home/strick/go/s):00274         
0121 6FC901F6         (/home/strick/go/s):00275         L00FB    clr   >u01F6,u       Clear date or time done flag
0125 170A1B           (/home/strick/go/s):00276                  lbsr  L0B3B          Create current date & time strings
0128 8620             (/home/strick/go/s):00277                  lda   #C$SPAC        Put in a space to separate date & time
012A A7C902E8         (/home/strick/go/s):00278                  sta   >u02E8,u
012E 30C902E0         (/home/strick/go/s):00279                  leax  >u02E0,u       Point to start of date buffer
0132 39               (/home/strick/go/s):00280                  rts   
                      (/home/strick/go/s):00281         
                      (/home/strick/go/s):00282         * Shell just booted goes here
0133 1708D0           (/home/strick/go/s):00283         L010D    lbsr  L09F7          Update expanded shell prompt if needed
0136 30C90212         (/home/strick/go/s):00284                  leax  >u0212,u       Point to expanded shell prompt
013A 10AEC901F7       (/home/strick/go/s):00285                  ldy   >u01F7,u       Get size of expanded shell prompt
013F 0D1D             (/home/strick/go/s):00286         L0119    tst   <u001D         Shell prompting on?
0141 2603             (/home/strick/go/s):00287                  bne   L0120          No, continue on
0143 1700FC           (/home/strick/go/s):00288                  lbsr  L021F          Print shell prompt to standard error
                      (/home/strick/go/s):00289         * Shell already booted goes here
0146 4F               (/home/strick/go/s):00290         L0120    clra
0147 30C90124         (/home/strick/go/s):00291                  leax  >u0124,u       Point to an input line of some sort
014B 0D6B             (/home/strick/go/s):00292                  tst   <u006B         Any module linked?
014D 2732             (/home/strick/go/s):00293                  beq   L015B          No, continue on
014F 109E65           (/home/strick/go/s):00294                  ldy   <u0065         Yes, get Execution address of linked module
0152 109C69           (/home/strick/go/s):00295                  cmpy  <u0069         ???
0155 102400BA         (/home/strick/go/s):00296                  lbhs  L01F0
0159 C6C8             (/home/strick/go/s):00297                  ldb   #200    LDW #200/PSHS X/TFM Y+,X+
015B 3410             (/home/strick/go/s):00298                  pshs  x              Copy temporary buffer to [<u0065]
015D A6A0             (/home/strick/go/s):00299         L0137    lda   ,y+
015F A780             (/home/strick/go/s):00300                  sta   ,x+
0161 5A               (/home/strick/go/s):00301                  decb  
0162 2710             (/home/strick/go/s):00302                  beq   L014E          Whole buffer copied, skip ahead
0164 109C69           (/home/strick/go/s):00303                  cmpy  <u0069         But don't go past here
0167 2404             (/home/strick/go/s):00304                  bhs   L0147
0169 810D             (/home/strick/go/s):00305                  cmpa  #C$CR          Also, stop on carriage return
016B 26F0             (/home/strick/go/s):00306                  bne   L0137
016D 109F65           (/home/strick/go/s):00307         L0147    sty   <u0065         Save new start address
0170 3510             (/home/strick/go/s):00308                  puls  x              Restore ptr to u0124
0172 2068             (/home/strick/go/s):00309                  bra   L01B9          Skip ahead
                      (/home/strick/go/s):00310         
0174 A6A0             (/home/strick/go/s):00311         L014E    lda   ,y+
0176 109C69           (/home/strick/go/s):00312                  cmpy  <u0069
0179 24F2             (/home/strick/go/s):00313                  bhs   L0147
017B 810D             (/home/strick/go/s):00314                  cmpa  #C$CR
017D 26F5             (/home/strick/go/s):00315                  bne   L014E
017F 20EC             (/home/strick/go/s):00316                  bra   L0147
                      (/home/strick/go/s):00317         
0181 0D5E             (/home/strick/go/s):00318         L015B    tst   <u005E         We reading from script file?
0183 261D             (/home/strick/go/s):00319                  bne   L017F          Yes, skip ahead
0185 CC001B           (/home/strick/go/s):00320                  ldd   #SS.Relea      Std input path/release keyboard+mouse signals
0188 103F8E           (/home/strick/go/s):00321                  os9   I$SetStt       Release any keyboard signals
018B 1717BA           (/home/strick/go/s):00322                  lbsr  L18DB          Go modify signals 2&3 to use up/down arrows,
                      (/home/strick/go/s):00323         *                               set up to re-enable Kybd signals
018E 0F0E             (/home/strick/go/s):00324         L016A    clr   <u000E         Clear out last signal received
0190 103F8E           (/home/strick/go/s):00325                  os9   I$SetStt       Re-set up SS.SSig
                      (/home/strick/go/s):00326         * NOTE: This BRA L0177 is required for type-ahead to work
0193 2006             (/home/strick/go/s):00327                  bra   L0177          Go check for history-related signals
                      (/home/strick/go/s):00328         
                      (/home/strick/go/s):00329         * DOESN'T SEEM TO GET BACK TO HERE WHEN ABORT BUG APPEARS
0195 8E0000           (/home/strick/go/s):00330         L0171    ldx   #$0000         Sleep until signal is received
0198 103F0A           (/home/strick/go/s):00331                  os9   F$Sleep
019B 1617E0           (/home/strick/go/s):00332         L0177    lbra  L191C          Go check for history signals (PD.QUT & PD.INT)
                      (/home/strick/go/s):00333         * Signal received is not PD.QUT or PD.INT goes here
019E C10B             (/home/strick/go/s):00334         L017B    cmpb  #$0B           Key pressed signal?
01A0 26F3             (/home/strick/go/s):00335                  bne   L0171          No, ignore signal & go to sleep again
                      (/home/strick/go/s):00336         * Keyboard input received signal goes here
01A2 30C90124         (/home/strick/go/s):00337         L017F    leax  >u0124,u       Point to temp buffer to hold line
01A6 4F               (/home/strick/go/s):00338                  clra                 Std Input
01A7 108E00C8         (/home/strick/go/s):00339                  ldy   #200           Maximum 200 char. input
01AB 1617F2           (/home/strick/go/s):00340                  lbra  L193E          Go read the rest of line as ReadLn
                      (/home/strick/go/s):00341         
                      (/home/strick/go/s):00342         * Comes here after line or signal received & processed
                      (/home/strick/go/s):00343         * NOTE: IF LINE RECEIVED, PD.QUT & PD.INT ARE BACK TO NORMAL VALUES
01AE 242C             (/home/strick/go/s):00344         L018B    bcc   L01B9          If no errors, skip ahead
01B0 C1D3             (/home/strick/go/s):00345                  cmpb  #E$EOF         <ESC> key in ReadLn?
01B2 275F             (/home/strick/go/s):00346                  beq   L01F0          Yes, skip ahead
                      (/home/strick/go/s):00347         
01B4 10DE25           (/home/strick/go/s):00348         L0191    lds   <u0025         Get top of stack ptr
01B7 DE27             (/home/strick/go/s):00349                  ldu   <u0027         Get back ptr to DP
01B9 D747             (/home/strick/go/s):00350                  stb   <u0047         Save error code
01BB 0D46             (/home/strick/go/s):00351                  tst   <u0046         GOTO label active?
01BD 2608             (/home/strick/go/s):00352                  bne   L01A4          Yes, go print error message
01BF 0D18             (/home/strick/go/s):00353                  tst   <u0018         Is this shell immortal?
01C1 2604             (/home/strick/go/s):00354                  bne   L01A4          Yes, go print error message
01C3 0D20             (/home/strick/go/s):00355                  tst   <u0020         Kill shell on error?
01C5 2656             (/home/strick/go/s):00356                  bne   L01FA          Yes, go do that
                      (/home/strick/go/s):00357         
01C7 103F0F           (/home/strick/go/s):00358         L01A4    os9   F$PErr         Print the error message
01CA 0D46             (/home/strick/go/s):00359                  tst   <u0046         GOTO label active?
01CC 1027FF63         (/home/strick/go/s):00360                  lbeq  L010D          No, go print shell prompt/process next line
01D0 0F46             (/home/strick/go/s):00361                  clr   <u0046         Clear GOTO label flag
01D2 30C90C4C         (/home/strick/go/s):00362                  leax  >u0C4C,u       Point to copy of GOTO label name
01D6 170DF7           (/home/strick/go/s):00363                  lbsr  CmdGOTO        Go process GOTO line
01D9 16FF57           (/home/strick/go/s):00364                  lbra  L010D          Go print shell prompt/process next line
                      (/home/strick/go/s):00365         
                      (/home/strick/go/s):00366         * No error received on line
01DC 108C0001         (/home/strick/go/s):00367         L01B9    cmpy  #$0001         Just 1 char read (just a CR)?
01E0 220F             (/home/strick/go/s):00368                  bhi   L01CE          No, go parse parameters
01E2 170821           (/home/strick/go/s):00369                  lbsr  L09F7          Go update date/time & expanded shell prompt
01E5 30C90213         (/home/strick/go/s):00370                  leax  >u0213,u       Point to expanded shell prompt
01E9 10AEC901F7       (/home/strick/go/s):00371                  ldy   >u01F7,u       Get size of expanded shell prompt
01EE 16FF4E           (/home/strick/go/s):00372                  lbra  L0119          Go print shell prompt & get next line from user
                      (/home/strick/go/s):00373         
                      (/home/strick/go/s):00374         * No errors-got input line, and there is something in it
01F1 17024D           (/home/strick/go/s):00375         L01CE    lbsr  L041B          Go parse parameters?
01F4 3401             (/home/strick/go/s):00376                  pshs  cc             Save flags
01F6 0D45             (/home/strick/go/s):00377                  tst   <u0045
01F8 2602             (/home/strick/go/s):00378                  bne   L01D9
01FA 0F47             (/home/strick/go/s):00379                  clr   <u0047         Clear error/signal code from ReadLn
01FC 3501             (/home/strick/go/s):00380         L01D9    puls  cc             Restore flags
01FE 1024FF31         (/home/strick/go/s):00381                  lbcc  L010D          If no error from parse, do prompts & read again
0202 5D               (/home/strick/go/s):00382                  tstb                 If a 0 error, do prompts & read again
0203 1027FF2C         (/home/strick/go/s):00383                  lbeq  L010D
0207 0D45             (/home/strick/go/s):00384                  tst   <u0045         ??? Do we care about errors?
0209 26A9             (/home/strick/go/s):00385                  bne   L0191          No, go handle error
020B D747             (/home/strick/go/s):00386                  stb   <u0047         Save error/signal code
020D 20A5             (/home/strick/go/s):00387                  bra   L0191          Go handle error
                      (/home/strick/go/s):00388         
020F 656F66           (/home/strick/go/s):00389         L01EC    fcc   'eof'
0212 0D               (/home/strick/go/s):00390                  fcb   C$CR
                      (/home/strick/go/s):00391         
                      (/home/strick/go/s):00392         * <ESC> received
0213 0D1D             (/home/strick/go/s):00393         L01F0    tst   <u001D         Shell prompting on?
0215 2605             (/home/strick/go/s):00394         L01F2    bne   L01F9          No, skip printing 'eof' to screen
0217 308CF5           (/home/strick/go/s):00395                  leax  <L01EC,pc      Point to 'eof' string
021A 8D22             (/home/strick/go/s):00396                  bsr   L021B          Write it out to std error
021C 5F               (/home/strick/go/s):00397         L01F9    clrb                 No error flag
                      (/home/strick/go/s):00398         * Possible shell error - Process
021D 9618             (/home/strick/go/s):00399         L01FA    lda   <u0018         Is this shell immortal?
021F 102609BC         (/home/strick/go/s):00400                  lbne  L0BDA          Yes, go close or dupe paths
                      (/home/strick/go/s):00401         * Shell not immortal, exit routine in here
0223 3445             (/home/strick/go/s):00402         L0200    pshs  u,b,cc         Preserve regs
0225 0D6B             (/home/strick/go/s):00403                  tst   <u006B         Shellsub module to unlink?
0227 2705             (/home/strick/go/s):00404                  beq   L020B          No, skip ahead
0229 DE67             (/home/strick/go/s):00405                  ldu   <u0067         Yes, get ptr to module
022B 103F02           (/home/strick/go/s):00406                  os9   F$UnLink       Unlink it
022E 3545             (/home/strick/go/s):00407         L020B    puls  u,b,cc         Restore U, error # & flags
                      (/home/strick/go/s):00408         * EX with no module name (or non-existant one) go here
0230 3405             (/home/strick/go/s):00409         L020D    pshs  b,cc           Save error # & flags
0232 308DFE2B         (/home/strick/go/s):00410                  leax  >L0061,pc      Point to '+++END+++' string
0236 1705C3           (/home/strick/go/s):00411                  lbsr  L07E7          Close log file if one is open, restore ID #
0239 3505             (/home/strick/go/s):00412                  puls  b,cc           Restore error # & flags
023B 103F06           (/home/strick/go/s):00413         exit     os9   F$Exit         Terminate shellplus
                      (/home/strick/go/s):00414         
023E 108E0050         (/home/strick/go/s):00415         L021B    ldy   #80            Write up to 80 chars or CR
0242 8602             (/home/strick/go/s):00416         L021F    lda   #$02           Std error path
0244 103F8C           (/home/strick/go/s):00417                  os9   I$WritLn       Write message out & return
0247 39               (/home/strick/go/s):00418                  rts   
                      (/home/strick/go/s):00419         
0248 3436             (/home/strick/go/s):00420         L0225    pshs  y,x,d          Preserve regs
024A CC001B           (/home/strick/go/s):00421                  ldd   #SS.Relea      Std In & Release keyboard & mouse signals  
024D 103F8E           (/home/strick/go/s):00422                  os9   I$SetStt 
0250 2404             (/home/strick/go/s):00423                  bcc   L0233          No error, continue
0252 8601             (/home/strick/go/s):00424                  lda   #$01           Couldn't release keyboard/mouse signals flag
0254 200D             (/home/strick/go/s):00425                  bra   L0241
                      (/home/strick/go/s):00426         
0256 30C90124         (/home/strick/go/s):00427         L0233    leax  >u0124,u       Point to buffer for current path options
025A 4F               (/home/strick/go/s):00428                  clra  
025B 5F               (/home/strick/go/s):00429                  clrb                 CHANGE TO CLRB
025C 103F8D           (/home/strick/go/s):00430                  os9   I$GetStt       Get std input path options
025F A6C90124         (/home/strick/go/s):00431                  lda   >u0124,u       Get Device type (0 (SCF) usually)
                      (/home/strick/go/s):00432         
0263 975E             (/home/strick/go/s):00433         L0241    sta   <u005E         Save device type (1=SS.Relea failed)
0265 35B6             (/home/strick/go/s):00434                  puls  pc,y,x,d       Restore regs & return
                      (/home/strick/go/s):00435         
                      (/home/strick/go/s):00436         * R= command (redirect specific paths)
0267 A684             (/home/strick/go/s):00437         CmdREq   lda   ,x             Get char from input line
0269 813C             (/home/strick/go/s):00438                  cmpa  #'<            Is it input path?
026B 2706             (/home/strick/go/s):00439                  beq   L0251          Yes, skip ahead
026D 813E             (/home/strick/go/s):00440                  cmpa  #'>            Is it an output/error path?
026F 10260961         (/home/strick/go/s):00441                  lbne  L0BCF          No, print 'WHAT?'
0273 3410             (/home/strick/go/s):00442         L0251    pshs  x              Preserve ptr to 1st redirection symbol
0275 318D017C         (/home/strick/go/s):00443                  leay  >L03CF,pc      Point to modifier symbol table
0279 1706C1           (/home/strick/go/s):00444                  lbsr  L092A          Go to command line parser
027C 10250954         (/home/strick/go/s):00445                  lbcs  L0BCF          Error, print 'WHAT?'
0280 ECA4             (/home/strick/go/s):00446                  ldd   ,y             Get table offset
0282 ADAB             (/home/strick/go/s):00447                  jsr   d,y            Call appropriate subroutine
0284 9F48             (/home/strick/go/s):00448                  stx   <u0048         Save ptr to source after redirection symbols
0286 3510             (/home/strick/go/s):00449                  puls  x              Restore ptr to redirection symbols
0288 1025090F         (/home/strick/go/s):00450                  lbcs  L0B96          If error in subroutine, close paths & return
                      (/home/strick/go/s):00451         
028C A680             (/home/strick/go/s):00452         L026A    lda   ,x+            Get 1st char again
028E 813C             (/home/strick/go/s):00453                  cmpa  #'<            Input path?
0290 27FA             (/home/strick/go/s):00454                  beq   L026A          Yes, skip to next
0292 813E             (/home/strick/go/s):00455                  cmpa  #'>            Output or Error path?
0294 27F6             (/home/strick/go/s):00456                  beq   L026A          Yes, skip to next
0296 812D             (/home/strick/go/s):00457                  cmpa  #'-            Overwrite old file?
0298 27F2             (/home/strick/go/s):00458                  beq   L026A          Yes, skip to next
029A 812B             (/home/strick/go/s):00459                  cmpa  #'+            Append to old file?
029C 27EE             (/home/strick/go/s):00460                  beq   L026A          Yes, skip to next
029E 301F             (/home/strick/go/s):00461                  leax  -1,x           Point to non-redirect char
02A0 8D23             (/home/strick/go/s):00462                  bsr   L02A3          Make name buffer, release signals,parse modifiers
02A2 5F               (/home/strick/go/s):00463                  clrb                 Start path # 0
02A3 3404             (/home/strick/go/s):00464         L0281    pshs  b              Save on stack
02A5 A6C5             (/home/strick/go/s):00465                  lda   b,u            Get special path #
02A7 2703             (/home/strick/go/s):00466                  beq   L028A          None, skip ahead
02A9 103F8F           (/home/strick/go/s):00467                  os9   I$Close        Close the path
02AC 3504             (/home/strick/go/s):00468         L028A    puls  b              Get path # back
02AE 6FC5             (/home/strick/go/s):00469                  clr   b,u            Clear out entry
02B0 5C               (/home/strick/go/s):00470                  incb                 Next path #
02B1 C103             (/home/strick/go/s):00471                  cmpb  #$03           Done the 3 standard paths yet?
02B3 25EE             (/home/strick/go/s):00472                  blo   L0281          No, keep doing until all done
02B5 9E48             (/home/strick/go/s):00473                  ldx   <u0048         Get ptr to redirected dev/file name & return
02B7 39               (/home/strick/go/s):00474                  rts   
                      (/home/strick/go/s):00475         * Z= command (immortal shell setting, but kill parent process)
02B8 0C13             (/home/strick/go/s):00476         CmdZEq   inc   <u0013         Flag we want to kill parent
                      (/home/strick/go/s):00477         * I= command (immortal shell setting)
02BA 170A1A           (/home/strick/go/s):00478         CmdIEq   lbsr  L0CD2
02BD 102508DA         (/home/strick/go/s):00479                  lbcs  L0B96
02C1 8D02             (/home/strick/go/s):00480                  bsr   L02A3
02C3 2031             (/home/strick/go/s):00481                  bra   L02D4
                      (/home/strick/go/s):00482         
                      (/home/strick/go/s):00483         * Create device name buffer @ u006D, Write NUL to std out, parse special
                      (/home/strick/go/s):00484         * chars: # @ @+hibit $ ( ), Release any keyboard/mouse signals
02C5 3410             (/home/strick/go/s):00485         L02A3    pshs  x              Prsrve ptr to file/dev name we're redirecting to
02C7 C60E             (/home/strick/go/s):00486                  ldb   #SS.DevNm      Get device name call code
02C9 30C86D           (/home/strick/go/s):00487                  leax  <u006D,u       Point to buffer for path names
02CC 862F             (/home/strick/go/s):00488                  lda   #'/            Preload '/' for device names
02CE A780             (/home/strick/go/s):00489                  sta   ,x+
02D0 4F               (/home/strick/go/s):00490                  clra                 Standard input path
02D1 103F8D           (/home/strick/go/s):00491                  os9   I$GetStt       Get the current device name
02D4 3510             (/home/strick/go/s):00492                  puls  x              Get back ptr to file/dev name for redirection
02D6 102508C1         (/home/strick/go/s):00493                  lbcs  L0B96          Error on GetStt, shut down paths & exit
02DA 108E0001         (/home/strick/go/s):00494                  ldy   #$0001         One char to write
02DE 3410             (/home/strick/go/s):00495                  pshs  x              Prsrve ptr to file/dev name we're redirecting to
02E0 308DFD58         (/home/strick/go/s):00496                  leax  >L003C,pc      Point to a NUL
02E4 8601             (/home/strick/go/s):00497                  lda   #1             Std out
02E6 103F8A           (/home/strick/go/s):00498                  os9   I$Write        Write the NUL out
02E9 3510             (/home/strick/go/s):00499                  puls  x              Restore Devname ptr
02EB 102508AC         (/home/strick/go/s):00500                  lbcs  L0B96          Error on Write, shut down paths & exit
02EF 170721           (/home/strick/go/s):00501                  lbsr  L0A04          Do normal parsing - includes #,@,$e0,$,(,)
02F2 17FF53           (/home/strick/go/s):00502                  lbsr  L0225          Release signals
02F5 39               (/home/strick/go/s):00503                  rts   
                      (/home/strick/go/s):00504         
02F6 0C18             (/home/strick/go/s):00505         L02D4    inc   <u0018         Set 'immortal shell' flag
02F8 0C19             (/home/strick/go/s):00506                  inc   <u0019         ??? (flag used by L0B96 routine)
02FA 17089E           (/home/strick/go/s):00507                  lbsr  L0B96
02FD 0F19             (/home/strick/go/s):00508                  clr   <u0019
02FF 0D13             (/home/strick/go/s):00509                  tst   <u0013         Do we want to kill the parent process?
0301 271A             (/home/strick/go/s):00510                  beq   L02FC
                      (/home/strick/go/s):00511                  IFEQ  Level-1
                      (/home/strick/go/s):00512                  ldx   <D.Proc
                      (/home/strick/go/s):00513                  ELSE
0303 103F0C           (/home/strick/go/s):00514                  os9   F$ID           Get our process ID # into A
0306 3410             (/home/strick/go/s):00515                  pshs  x              Preserve X
0308 30C9166D         (/home/strick/go/s):00516                  leax  >u166D,u       Point to process descriptor buffer
030C 103F18           (/home/strick/go/s):00517                  os9   F$GPrDsc       Get our process descriptor
                      (/home/strick/go/s):00518                  ENDC
030F A601             (/home/strick/go/s):00519                  lda   P$PID,x        Get our parents process #
                      (/home/strick/go/s):00520                  IFGT  Level-1
0311 3510             (/home/strick/go/s):00521                  puls  x              Restore X
                      (/home/strick/go/s):00522                  ENDC
0313 27B0             (/home/strick/go/s):00523                  beq   L02A3          If parent's process # is 0 (system), skip back
0315 5F               (/home/strick/go/s):00524                  clrb                 S$Kill signal code
0316 103F08           (/home/strick/go/s):00525                  os9   F$Send         Send it to parent
0319 1025FE97         (/home/strick/go/s):00526                  lbcs  L0191          If error sending signal, go to error routine
031D 5F               (/home/strick/go/s):00527         L02FC    clrb                 No error
031E D713             (/home/strick/go/s):00528                  stb   <u0013         Clear 'kill parent' flag
0320 39               (/home/strick/go/s):00529                  rts   
                      (/home/strick/go/s):00530         
                      (/home/strick/go/s):00531         * Command list
0321 086B             (/home/strick/go/s):00532         CmdList  fdb   L0B87-*
0323 AA               (/home/strick/go/s):00533                  fcs   '*'
0324 0FAC             (/home/strick/go/s):00534                  fdb   CmdW-*
0326 D7               (/home/strick/go/s):00535                  fcs   'W'
0327 06A7             (/home/strick/go/s):00536                  fdb   CmdCHD-*
0329 4348C4           (/home/strick/go/s):00537                  fcs   'CHD'
032C 069A             (/home/strick/go/s):00538                  fdb   CmdCHX-*
032E 4348D8           (/home/strick/go/s):00539                  fcs   'CHX'
0331 1445             (/home/strick/go/s):00540                  fdb   CmdCLS-*
0333 434CD3           (/home/strick/go/s):00541                  fcs   'CLS'
0336 0698             (/home/strick/go/s):00542                  fdb   CmdCHD-*
0338 43C4             (/home/strick/go/s):00543                  fcs   'CD'
033A 068C             (/home/strick/go/s):00544                  fdb   CmdCHX-*
033C 43D8             (/home/strick/go/s):00545                  fcs   'CX'
033E 065A             (/home/strick/go/s):00546                  fdb   CmdEX-*
0340 45D8             (/home/strick/go/s):00547                  fcs   'EX'
0342 1426             (/home/strick/go/s):00548                  fdb   CmdKill-*
0344 4B494CCC         (/home/strick/go/s):00549                  fcs   'KILL'
0348 06B6             (/home/strick/go/s):00550                  fdb   CmdX-*
034A D8               (/home/strick/go/s):00551                  fcs   'X'
034B 06B7             (/home/strick/go/s):00552                  fdb   CmdNX-*
034D 2DD8             (/home/strick/go/s):00553                  fcs   '-X'
034F 06D4             (/home/strick/go/s):00554                  fdb   CmdPEq-*
0351 50BD             (/home/strick/go/s):00555                  fcs   'P='
0353 0693             (/home/strick/go/s):00556                  fdb   CmdP-*
0355 D0               (/home/strick/go/s):00557                  fcs   'P'
0356 0693             (/home/strick/go/s):00558                  fdb   CmdNP-*
0358 2DD0             (/home/strick/go/s):00559                  fcs   '-P'
035A 0694             (/home/strick/go/s):00560                  fdb   CmdT-*
035C D4               (/home/strick/go/s):00561                  fcs   'T'
035D 0695             (/home/strick/go/s):00562                  fdb   CmdNT-*
035F 2DD4             (/home/strick/go/s):00563                  fcs   '-T'
0361 1447             (/home/strick/go/s):00564                  fdb   CmdSETPR-*
0363 53455450D2       (/home/strick/go/s):00565                  fcs   'SETPR'
0368 FF52             (/home/strick/go/s):00566                  fdb   CmdIEq-*
036A 49BD             (/home/strick/go/s):00567                  fcs   'I='
036C FEFB             (/home/strick/go/s):00568                  fdb   CmdREq-*
036E 52BD             (/home/strick/go/s):00569                  fcs   'R='
0370 FF48             (/home/strick/go/s):00570                  fdb   CmdZEq-*
0372 5ABD             (/home/strick/go/s):00571                  fcs   'Z='
0374 05C6             (/home/strick/go/s):00572                  fdb   CmdSEMI-*
0376 BB               (/home/strick/go/s):00573                  fcs   ';'
0377 148F             (/home/strick/go/s):00574                  fdb   CmdPWD-*
0379 2E5057C4         (/home/strick/go/s):00575                  fcs   '.PWD'
037D 149B             (/home/strick/go/s):00576                  fdb   CmdPXD-*
037F 2E5058C4         (/home/strick/go/s):00577                  fcs   '.PXD'
0383 0CA6             (/home/strick/go/s):00578                  fdb   CmdMEq-*
0385 4DBD             (/home/strick/go/s):00579                  fcs   'M='
0387 0CD3             (/home/strick/go/s):00580                  fdb   CmdVAR-*
0389 564152AE         (/home/strick/go/s):00581                  fcs   'VAR.'
038D 0669             (/home/strick/go/s):00582                  fdb   CmdV-*
038F D6               (/home/strick/go/s):00583                  fcs   'V'
0390 0669             (/home/strick/go/s):00584                  fdb   CmdNV-*
0392 2DD6             (/home/strick/go/s):00585                  fcs   '-V'
0394 0E74             (/home/strick/go/s):00586                  fdb   CmdPATHEq-*
0396 50415448BD       (/home/strick/go/s):00587                  fcs   'PATH='
039B 0E34             (/home/strick/go/s):00588                  fdb   CmdPAUSE-*
039D 50415553C5       (/home/strick/go/s):00589                  fcs   'PAUSE'
03A2 0D84             (/home/strick/go/s):00590                  fdb   CmdINC-*
03A4 494E43AE         (/home/strick/go/s):00591                  fcs   'INC.'
03A8 0D89             (/home/strick/go/s):00592                  fdb   CmdDEC-*
03AA 444543AE         (/home/strick/go/s):00593                  fcs   'DEC.'
03AE 09B9             (/home/strick/go/s):00594                  fdb   CmdIF-*
03B0 49C6             (/home/strick/go/s):00595                  fcs   'IF'
03B2 0A5C             (/home/strick/go/s):00596                  fdb   CmdTHEN-*
03B4 544845CE         (/home/strick/go/s):00597                  fcs   'THEN'
03B8 0BD4             (/home/strick/go/s):00598                  fdb   CmdELSE-*
03BA 454C53C5         (/home/strick/go/s):00599                  fcs   'ELSE'
03BE 0A50             (/home/strick/go/s):00600                  fdb   CmdTHEN-*
03C0 46C9             (/home/strick/go/s):00601                  fcs   'FI'
03C2 0A4C             (/home/strick/go/s):00602                  fdb   CmdTHEN-*
03C4 454E4449C6       (/home/strick/go/s):00603                  fcs   'ENDIF'
03C9 0B78             (/home/strick/go/s):00604                  fdb   CmdCLRIF-*
03CB 434C5249C6       (/home/strick/go/s):00605                  fcs   'CLRIF'
03D0 0C00             (/home/strick/go/s):00606                  fdb   CmdGOTO-*
03D2 474F54CF         (/home/strick/go/s):00607         L03AC    fcs   'GOTO'
03D6 0BBD             (/home/strick/go/s):00608                  fdb   CmdONERR-*
03D8 4F4E4552D2       (/home/strick/go/s):00609                  fcs   'ONERR'
03DD 0601             (/home/strick/go/s):00610                  fdb   CmdL-*
03DF CC               (/home/strick/go/s):00611                  fcs   'L'
03E0 0602             (/home/strick/go/s):00612                  fdb   CmdNL-*
03E2 2DCC             (/home/strick/go/s):00613                  fcs   '-L'
03E4 0598             (/home/strick/go/s):00614                  fdb   CmdSTARTUP-*
03E6 532E542E412E522E (/home/strick/go/s):00615                  fcs   'S.T.A.R.T.U.P'
     542E552ED0
03F3 0000             (/home/strick/go/s):00616                  fdb   $0000
03F5 12CB             (/home/strick/go/s):00617         L03CF    fdb   CmdPIPE-*
03F7 A1               (/home/strick/go/s):00618                  fcs   '!'
03F8 12C8             (/home/strick/go/s):00619                  fdb   CmdPIPE-*
03FA FC               (/home/strick/go/s):00620                  fcs   '|'
03FB 0EA4             (/home/strick/go/s):00621                  fdb   CmdSEMIC-*
03FD BB               (/home/strick/go/s):00622                  fcs   ';'
03FE 0EC4             (/home/strick/go/s):00623                  fdb   CmdAmp-*
0400 A6               (/home/strick/go/s):00624                  fcs   '&'
0401 0E97             (/home/strick/go/s):00625                  fdb   CmdCR-*
0403 8D               (/home/strick/go/s):00626                  fcb   $80+C$CR
0404 08CF             (/home/strick/go/s):00627         L03DE    fdb   CmdIOE-*
0406 3C3E3EBE         (/home/strick/go/s):00628                  fcs   '<>>>'
040A 08E0             (/home/strick/go/s):00629                  fdb   CmdIE-*
040C 3C3EBE           (/home/strick/go/s):00630                  fcs   '<>>'
040F 08CD             (/home/strick/go/s):00631                  fdb   CmdIO-*
0411 3CBE             (/home/strick/go/s):00632                  fcs   '<>'
0413 08E5             (/home/strick/go/s):00633                  fdb   CmdOE-*
0415 3E3EBE           (/home/strick/go/s):00634                  fcs   '>>>'
0418 07EE             (/home/strick/go/s):00635                  fdb   CmdErr-*
041A 3EBE             (/home/strick/go/s):00636                  fcs   '>>'
041C 07E3             (/home/strick/go/s):00637                  fdb   CmdIn-*
041E BC               (/home/strick/go/s):00638                  fcs   '<'
041F 07EE             (/home/strick/go/s):00639                  fdb   CmdOut-*
0421 BE               (/home/strick/go/s):00640                  fcs   '>'
0422 0E54             (/home/strick/go/s):00641                  fdb   CmdMem-*
0424 A3               (/home/strick/go/s):00642                  fcs   '#'
0425 0E3F             (/home/strick/go/s):00643                  fdb   CmdCaret-*
0427 DE               (/home/strick/go/s):00644                  fcs   '^'
0428 0000             (/home/strick/go/s):00645                  fdb   $0000          End of table marker
                      (/home/strick/go/s):00646         
042A 0D               (/home/strick/go/s):00647         L0404    fcb   C$CR
042B 2829             (/home/strick/go/s):00648                  fcc   '()'
042D FF               (/home/strick/go/s):00649                  fcb   $ff
042E 0D               (/home/strick/go/s):00650         L0408    fcb   C$CR
042F 2123263B3C3E5E7C (/home/strick/go/s):00651                  fcc   '!#&;<>^|'
0437 FF               (/home/strick/go/s):00652                  fcb   $ff
                      (/home/strick/go/s):00653                  
                      (/home/strick/go/s):00654         * Subroutine: Clears B bytes of memory to NUL's starting @ U
0438 3440             (/home/strick/go/s):00655         L0412    pshs  u              Clear memory
043A 6FC0             (/home/strick/go/s):00656         L0414    clr   ,u+
043C 5A               (/home/strick/go/s):00657                  decb  
043D 26FB             (/home/strick/go/s):00658         L0417    bne   L0414
043F 35C0             (/home/strick/go/s):00659         L0419    puls  pc,u
                      (/home/strick/go/s):00660         
                      (/home/strick/go/s):00661         * Pre-Parse parameters passed to this shell. Will copy from parm area to
                      (/home/strick/go/s):00662         *   buffer area at u0166D, checking for raw mode access allowability if needed
                      (/home/strick/go/s):00663         * Will also
                      (/home/strick/go/s):00664         * Entry: X=ptr to parm area
0441 C618             (/home/strick/go/s):00665         L041B    ldb   #$18           # of bytes to clear in DP
0443 8DF3             (/home/strick/go/s):00666         L041D    bsr   L0412          Go clear from <u0000 to <u0018 (immortal off)
0445 0D6C             (/home/strick/go/s):00667                  tst   <u006C         ??? (If shell is initing, it's 0)
0447 102700A9         (/home/strick/go/s):00668                  lbeq  L04CE          Shell just initializing, skip ahead
044B 31C917FC         (/home/strick/go/s):00669                  leay  >u17FC,u       Point to end of buffer marker
044F 3420             (/home/strick/go/s):00670                  pshs  y              Save ptr on stack
0451 31C9166D         (/home/strick/go/s):00671                  leay  >u166D,u       Point to buffer for process descriptor
0455 8D55             (/home/strick/go/s):00672         L042F    bsr   L0486          Copy next char (check for '@', possibly eat)
0457 810D             (/home/strick/go/s):00673                  cmpa  #C$CR          CR?
0459 2773             (/home/strick/go/s):00674                  beq   L04A8          Yes, force CR into ,y & process line from start
045B 10ACE4           (/home/strick/go/s):00675                  cmpy  ,s             At end of buffer?
045E 276E             (/home/strick/go/s):00676                  beq   L04A8          Yes, force CR, process line from start
0460 0D1F             (/home/strick/go/s):00677                  tst   <u001F         Variable expansion on?
0462 26F1             (/home/strick/go/s):00678                  bne   L042F          No, check next char
0464 8125             (/home/strick/go/s):00679                  cmpa  #'%            Is it a '%' (shell variable)?
0466 26ED             (/home/strick/go/s):00680                  bne   L042F          No, do next character
0468 313F             (/home/strick/go/s):00681                  leay  -1,y           Back up destination ptr to where '%' is
046A 3410             (/home/strick/go/s):00682                  pshs  x              Save current position in parms
046C A684             (/home/strick/go/s):00683                  lda   ,x             Get 1st char of shell variable nam
046E 812A             (/home/strick/go/s):00684                  cmpa  #'*            Shell variable for last error code received?
0470 2751             (/home/strick/go/s):00685                  beq   L049D          Yes,replace shell var with contents of shell var
0472 30C905A8         (/home/strick/go/s):00686                  leax  >u05A8,u       Point to user shell variable contents table
0476 8125             (/home/strick/go/s):00687                  cmpa  #'%            2nd '%'= shellsub variable
0478 260C             (/home/strick/go/s):00688                  bne   L0460          No, just user, go process
047A 3510             (/home/strick/go/s):00689                  puls  x              Get back parm ptr
047C 3001             (/home/strick/go/s):00690                  leax  1,x            Skip over 2nd '%'
047E A684             (/home/strick/go/s):00691                  lda   ,x             Get shellsub variable #
0480 3410             (/home/strick/go/s):00692                  pshs  x              Save parm ptr
0482 30C908D2         (/home/strick/go/s):00693                  leax  >u08D2,u       Point to shellsub variable contents table
                      (/home/strick/go/s):00694         * Entry: A=ASCII 0-9 for either shell or shellsub variable #
0486 8139             (/home/strick/go/s):00695         L0460    cmpa  #'9            ASCII numeric?
0488 220C             (/home/strick/go/s):00696                  bhi   L0470          No, skip ahead
048A 8130             (/home/strick/go/s):00697                  cmpa  #'0
048C 2508             (/home/strick/go/s):00698                  blo   L0470
048E 8030             (/home/strick/go/s):00699                  suba  #$30           Yes, bump down to binary equivalent
0490 C651             (/home/strick/go/s):00700                  ldb   #81            Point to proper variable entry within var table
0492 3D               (/home/strick/go/s):00701                  mul
0493 308B             (/home/strick/go/s):00702                  leax  d,x
0495 5C               (/home/strick/go/s):00703                  incb                 ??? Used in TSTB below
0496 8D14             (/home/strick/go/s):00704         L0470    bsr   L0486          Copy char from var table to pre-parse buffer
0498 10AC62           (/home/strick/go/s):00705                  cmpy  2,s            Hit end of pre-parse buffer?
049B 272F             (/home/strick/go/s):00706                  beq   L04A6          Yes, force CR at end of it, do full parse
049D 810D             (/home/strick/go/s):00707                  cmpa  #C$CR          End of variable?
049F 26F5             (/home/strick/go/s):00708                  bne   L0470          No, keep copying characters
04A1 313F             (/home/strick/go/s):00709                  leay  -1,y           Knock ptr back one (to where CR is)
04A3 3510             (/home/strick/go/s):00710                  puls  x              Get current parm ptr back
04A5 5D               (/home/strick/go/s):00711                  tstb                 ??? flag to skip a byte in parm or not
04A6 27AD             (/home/strick/go/s):00712                  beq   L042F          Don't skip
04A8 3001             (/home/strick/go/s):00713         L0482    leax  1,x            Skip to next byte in parm line
04AA 20A9             (/home/strick/go/s):00714                  bra   L042F          Continue pre-parse
                      (/home/strick/go/s):00715         
                      (/home/strick/go/s):00716         * Copy char from parm area to command line buffer - if '@', eat if user is
                      (/home/strick/go/s):00717         *   not super-user (#0)
                      (/home/strick/go/s):00718         * Entry: X=ptr to current pos. in original parm buffer
                      (/home/strick/go/s):00719         *        Y=ptr to current pos. in new, pre-parsed buffer
04AC A680             (/home/strick/go/s):00720         L0486    lda   ,x+            Get char from parms
04AE 8140             (/home/strick/go/s):00721                  cmpa  #'@            Raw mode request?
04B0 260E             (/home/strick/go/s):00722                  bne   L049A          Skip ahead if not (SHOULD BE BNE)
04B2 3422             (/home/strick/go/s):00723         L048C    pshs  y,a            Preserve regs
04B4 103F0C           (/home/strick/go/s):00724                  os9   F$ID           Get user ID #
04B7 108C0000         (/home/strick/go/s):00725                  cmpy  #$0000         Is it 0 (superuser)? (should be leay ,y)
04BB 3522             (/home/strick/go/s):00726                  puls  y,a            Restore regs
04BD 2701             (/home/strick/go/s):00727                  beq   L049A          Yes, allow char thru
04BF 39               (/home/strick/go/s):00728                  rts                  Otherwise eat it
                      (/home/strick/go/s):00729         
04C0 A7A0             (/home/strick/go/s):00730         L049A    sta   ,y+            Save char & return
04C2 39               (/home/strick/go/s):00731                  rts   
                      (/home/strick/go/s):00732         
                      (/home/strick/go/s):00733         * Shell variable '%* (for last error code) requested
                      (/home/strick/go/s):00734         * Put contents of shell var. into pre-parsed command line buffer
04C3 3510             (/home/strick/go/s):00735         L049D    puls  x              Get back parm ptr
04C5 17124D           (/home/strick/go/s):00736                  lbsr  L168A          Put error code into preparse buffer
04C8 3123             (/home/strick/go/s):00737                  leay  3,y            Skip over error code space we just added
04CA 20DC             (/home/strick/go/s):00738                  bra   L0482          Skip over shell varname, continue preparse
                      (/home/strick/go/s):00739         
04CC 3262             (/home/strick/go/s):00740         L04A6    leas  2,s            Eat stack
04CE 860D             (/home/strick/go/s):00741         L04A8    lda   #C$CR          Force CR as last char in buffer
04D0 A7A4             (/home/strick/go/s):00742                  sta   ,y
04D2 3520             (/home/strick/go/s):00743                  puls  y
04D4 30C9166D         (/home/strick/go/s):00744                  leax  >u166D,u       Point to start of pre-parse buffer again
04D8 201A             (/home/strick/go/s):00745         L04B2    bra   L04CE          Start real parse
                      (/home/strick/go/s):00746         
04DA 0A               (/home/strick/go/s):00747         L04B4    fcb   C$LF
04DB 457870616E646564 (/home/strick/go/s):00748                  fcc   'Expanded line too long'
     206C696E6520746F
     6F206C6F6E67
04F1 0D               (/home/strick/go/s):00749                  fcb   C$CR
04F2 2E               (/home/strick/go/s):00750         L04CC    fcc   '.'
04F3 0D               (/home/strick/go/s):00751         L04CD    fcb   C$CR
                      (/home/strick/go/s):00752         
                      (/home/strick/go/s):00753         * Parse command line buffer - already pre-parsed (user 0 RAW mode checks &
                      (/home/strick/go/s):00754         *   shell/shellsub variable expansion is already done)
                      (/home/strick/go/s):00755         * Entry: X=Ptr to pre-parsed command line buffer
04F4 A684             (/home/strick/go/s):00756         L04CE    lda   ,x             Get 1st char from parameter area
04F6 812A             (/home/strick/go/s):00757                  cmpa  #'*            Is it a comment?
04F8 270A             (/home/strick/go/s):00758                  beq   L04DE          Yes, skip ahead
04FA 813A             (/home/strick/go/s):00759                  cmpa  #':            Is it a wildcard on/off?
04FC 2602             (/home/strick/go/s):00760                  bne   L04DA          No, skip ahead
04FE 3001             (/home/strick/go/s):00761                  leax  1,x            Bump ptr past it
0500 813A             (/home/strick/go/s):00762         L04DA    cmpa  #':            Is it a wildcard off?
                      (/home/strick/go/s):00763         * FOLLOWING LINE: BEQ means wildcarding default off, BNE = on
0502 2712             (/home/strick/go/s):00764                  beq   L04F0          No, go process wildcarding
                      (/home/strick/go/s):00765         * No wildcard processing
0504 31C90E6D         (/home/strick/go/s):00766         L04DE    leay  >u0E6D,u       Point Y to expanded buffer
0508 170E8B           (/home/strick/go/s):00767                  lbsr  L1320          Copy param area to buffer area until 1st CR
050B 30C90E6D         (/home/strick/go/s):00768                  leax  >u0E6D,u       Point X to expanded (wildcard) buffer
050F 108E0800         (/home/strick/go/s):00769                  ldy   #$0800         Max. size of expanded buffer (2048 bytes)
0513 16029A           (/home/strick/go/s):00770                  lbra  L079B          Process line without wildcards
                      (/home/strick/go/s):00771         
                      (/home/strick/go/s):00772         * Wild carding processor
                      (/home/strick/go/s):00773         * Entry: X=ptr to current position in pre-parsed parm line
                      (/home/strick/go/s):00774         * 1st, set up error msg for if buffer gets full
0516 318DFFC0         (/home/strick/go/s):00775         L04F0    leay  >L04B4,pc      Point to 'Expanded line too long'
051A 109F4A           (/home/strick/go/s):00776                  sty   <u004A         Save it
051D 108E0018         (/home/strick/go/s):00777                  ldy   #$0018         Get size of text
0521 109F4C           (/home/strick/go/s):00778                  sty   <u004C         Save it too
0524 318DFFCB         (/home/strick/go/s):00779                  leay  >L04CD,pc      Point to CR
0528 109F48           (/home/strick/go/s):00780                  sty   <u0048         Save ptr
052B 10DF50           (/home/strick/go/s):00781                  sts   <u0050         Save stack ptr
052E 31C90E6D         (/home/strick/go/s):00782                  leay  >u0E6D,u       Point to fully expanded buffer (2k max)
0532 109F56           (/home/strick/go/s):00783                  sty   <u0056         Save it
0535 4F               (/home/strick/go/s):00784                  clra
0536 5F               (/home/strick/go/s):00785                  clrb
0537 9712             (/home/strick/go/s):00786                  sta   <u0012         No current working DIR path
0539 974F             (/home/strick/go/s):00787                  sta   <u004F         Flag no pathname in parm area
053B DD52             (/home/strick/go/s):00788                  std   <u0052         Expanded buffer size=0 bytes
053D 2003             (/home/strick/go/s):00789                  bra   L0520          Enter main loop for wildcards
                      (/home/strick/go/s):00790         
053F 1701D6           (/home/strick/go/s):00791         L051D    lbsr  L06FB          Special shell chars handling
0542 170218           (/home/strick/go/s):00792         L0520    lbsr  L0746          Check for special chars (wildcard or shell)
0545 24F8             (/home/strick/go/s):00793                  bcc   L051D          Special shell char process
                      (/home/strick/go/s):00794         * Wildcard char found
0547 3410             (/home/strick/go/s):00795                  pshs  x              Save current pre-parsed parm ptr
0549 8D1F             (/home/strick/go/s):00796                  bsr   L0549          Check from that point for '/' or special char
054B AEE4             (/home/strick/go/s):00797                  ldx   ,s             Get previous parm ptr back
054D 2429             (/home/strick/go/s):00798                  bcc   L0557          No '/' found, open current dir '.'
                      (/home/strick/go/s):00799         * Found '/' (part of path) - keep looking for last '/' for filename (not
                      (/home/strick/go/s):00800         *   pathname) portion
054F 8D19             (/home/strick/go/s):00801         L052D    bsr   L0549          Check for special char or '/' again
0551 2404             (/home/strick/go/s):00802                  bcc   L0535          No '/', skip ahead
0553 9F40             (/home/strick/go/s):00803                  stx   <u0040         Save latest ptr to '/' in parm line found so far
0555 20F8             (/home/strick/go/s):00804                  bra   L052D          See if any more sub-paths
                      (/home/strick/go/s):00805         
                      (/home/strick/go/s):00806         * Found one or more '/' path dividers in current parm line.
                      (/home/strick/go/s):00807         * Entry: <u0040 - contains the last '/' found
0557 0C4F             (/home/strick/go/s):00808         L0535    inc   <u004F         Flag that their IS a pathname from parm line
0559 9E40             (/home/strick/go/s):00809         L0538    ldx   <u0040         Get last level of path ptr
055B 3520             (/home/strick/go/s):00810                  puls  y              Get original parm ptr
055D 109F40           (/home/strick/go/s):00811                  sty   <u0040         Save it
0560 3410             (/home/strick/go/s):00812                  pshs  x              Save filename ptr on stack
0562 8620             (/home/strick/go/s):00813                  lda   #C$SPAC        Save space over '/' after pathname
0564 A71F             (/home/strick/go/s):00814                  sta   -1,x             (before filename)
0566 1F21             (/home/strick/go/s):00815                  tfr   y,x            Move original parm ptr to X
0568 2014             (/home/strick/go/s):00816                  bra   L055E          Open dir path
                      (/home/strick/go/s):00817         
                      (/home/strick/go/s):00818         * Parse from current position in pre-parsed parm line until shell special
                      (/home/strick/go/s):00819         *   char, or '/' found (path)
                      (/home/strick/go/s):00820         * Entry: X=ptr to current pos in pre-parsed parm line
                      (/home/strick/go/s):00821         * Exit: Carry clear if special shell char found
                      (/home/strick/go/s):00822         *       Carry set if '/' found
                      (/home/strick/go/s):00823         *       X=ptr to found char+1
056A 5F               (/home/strick/go/s):00824         L0549    clrb
056B A680             (/home/strick/go/s):00825                  lda   ,x+            Get next char
056D 170081           (/home/strick/go/s):00826                  lbsr  L05D3          See if shell special char
0570 2705             (/home/strick/go/s):00827                  beq   L0556          Yes, return
0572 812F             (/home/strick/go/s):00828                  cmpa  #'/            No, is it a slash (path start)?
0574 26F4             (/home/strick/go/s):00829                  bne   L0549          No, Keep checking for / or special char
0576 53               (/home/strick/go/s):00830                  comb
0577 39               (/home/strick/go/s):00831         L0556    rts
                      (/home/strick/go/s):00832         
                      (/home/strick/go/s):00833         * No '/' found in parm line at all
0578 0F4F             (/home/strick/go/s):00834         L0557    clr   <u004F         Flag no pathname from parm line
057A 308DFF74         (/home/strick/go/s):00835                  leax  >L04CC,pc      Point to '.'
                      (/home/strick/go/s):00836         * Entry: X=ptr to pathname to directory
                      (/home/strick/go/s):00837         *        0-1,s = Ptr to filename spec we are looking for in this directory
057E 8681             (/home/strick/go/s):00838         L055E    lda   #DIR.+READ.    Open directory in READ mode
0580 103F84           (/home/strick/go/s):00839                  os9   I$Open
0583 10250206         (/home/strick/go/s):00840                  lbcs  L0776          Error, skip ahead
0587 9712             (/home/strick/go/s):00841                  sta   <u0012         Save current DIR path
0589 3510             (/home/strick/go/s):00842                  puls  x              Get back ptr to filename (not pathname)
058B 1701CF           (/home/strick/go/s):00843                  lbsr  L0746          Check for special shell char or wildcard
058E 1024016E         (/home/strick/go/s):00844                  lbcc  L06E3          Special shell char found, ??????
0592 A680             (/home/strick/go/s):00845         L0572    lda   ,x+            Get next char from filename
0594 810D             (/home/strick/go/s):00846                  cmpa  #C$CR          End of user specified filename (CR)?
0596 10270206         (/home/strick/go/s):00847                  lbeq  L0789          Yes, close DIR and proceed
059A 812C             (/home/strick/go/s):00848                  cmpa  #',            Comma?
059C 27F4             (/home/strick/go/s):00849                  beq   L0572          Yes, skip it
059E 8120             (/home/strick/go/s):00850                  cmpa  #C$SPAC        Space?
05A0 27F0             (/home/strick/go/s):00851                  beq   L0572          Yes, skip it
05A2 301F             (/home/strick/go/s):00852                  leax  -1,x           Other char, point to it.
05A4 9F54             (/home/strick/go/s):00853                  stx   <u0054         Save ptr to it
05A6 9612             (/home/strick/go/s):00854                  lda   <u0012         Get DIR path #
05A8 3440             (/home/strick/go/s):00855                  pshs  u              Preserve u
05AA 8E0000           (/home/strick/go/s):00856                  ldx   #$0000         Skip '.' and '..' dir entries
05AD CE0040           (/home/strick/go/s):00857                  ldu   #$0040
05B0 103F88           (/home/strick/go/s):00858                  os9   I$Seek
05B3 102501D6         (/home/strick/go/s):00859                  lbcs  L0776          Error, skip ahead
05B7 3540             (/home/strick/go/s):00860                  puls  u              Restore u
05B9 30C90C9D         (/home/strick/go/s):00861         L0599    leax  >u0C9D,u       Point to dir entry buffer
05BD 3410             (/home/strick/go/s):00862                  pshs  x              Save ptr
05BF 9612             (/home/strick/go/s):00863                  lda   <u0012         Get Current dir path #
05C1 108E0020         (/home/strick/go/s):00864                  ldy   #$0020         Read 1 file entry
05C5 103F89           (/home/strick/go/s):00865                  os9   I$Read
05C8 1025010F         (/home/strick/go/s):00866                  lbcs  L06BD          Error, skip ahead
05CC 3520             (/home/strick/go/s):00867                  puls  y              Restore pointer to dir filename buffer
05CE A6A4             (/home/strick/go/s):00868                  lda   ,y             Get 1st char of entry
05D0 4D               (/home/strick/go/s):00869                  tsta                 Is it a deleted file?
05D1 27E6             (/home/strick/go/s):00870                  beq   L0599          Yes, skip it
05D3 9E54             (/home/strick/go/s):00871                  ldx   <u0054         Get ptr to current char in expanded filename bfr
05D5 8D36             (/home/strick/go/s):00872                  bsr   L05EF          Check wildcard spec against this filename
05D7 25E0             (/home/strick/go/s):00873                  bcs   L0599          No match, skip to next file in DIR
05D9 0D4F             (/home/strick/go/s):00874                  tst   <u004F         Was a pathname specified?
05DB 270B             (/home/strick/go/s):00875                  beq   L05CA          No, skip ahead
05DD 9E40             (/home/strick/go/s):00876                  ldx   <u0040         Yes,get ptr to end of pathname/start of filename
05DF 170136           (/home/strick/go/s):00877                  lbsr  L06FB          Check for wildcard stuff there
05E2 9E56             (/home/strick/go/s):00878                  ldx   <u0056         Get current pos in expanded buffer
05E4 862F             (/home/strick/go/s):00879                  lda   #'/            Save '/' there (to separate path & filename)
05E6 A71F             (/home/strick/go/s):00880                  sta   -1,x
05E8 30C90C9D         (/home/strick/go/s):00881         L05CA    leax  >u0C9D,u       Point to start of matched DIR entry filename
05EC 170129           (/home/strick/go/s):00882                  lbsr  L06FB          Copy filename over, handling quoted chars, etc.
05EF 20C8             (/home/strick/go/s):00883                  bra   L0599          On to next DIR entry
                      (/home/strick/go/s):00884         
                      (/home/strick/go/s):00885         * Check if shell 'special' char. (except wildcards & shell var)
                      (/home/strick/go/s):00886         * non-wildcard char in current byte of pre-parsed parm buffer
                      (/home/strick/go/s):00887         * Entry: X=ptr to next char in parms buffer
                      (/home/strick/go/s):00888         *        A=current char in parms buffer
                      (/home/strick/go/s):00889         * Exit: BEQ if shell special char found, BNE if just regular char
                      (/home/strick/go/s):00890         *        A=char we were checking
05F1 3410             (/home/strick/go/s):00891         L05D3    pshs  x              Save parms buffer ptr
05F3 8128             (/home/strick/go/s):00892                  cmpa  #'(            Group start char?
05F5 2714             (/home/strick/go/s):00893                  beq   L05ED          Yes, skip ahead
05F7 8129             (/home/strick/go/s):00894                  cmpa  #')            Group end char?
05F9 2710             (/home/strick/go/s):00895                  beq   L05ED          Yes, skip ahead
05FB 8120             (/home/strick/go/s):00896                  cmpa  #C$SPAC        Space?
05FD 270C             (/home/strick/go/s):00897                  beq   L05ED          Yes, skip ahead
05FF 812C             (/home/strick/go/s):00898                  cmpa  #',            Comma?
0601 2708             (/home/strick/go/s):00899                  beq   L05ED          Yes, skip ahead
0603 308DFE27         (/home/strick/go/s):00900                  leax  >L0408,pc      Table of other special chars
0607 A180             (/home/strick/go/s):00901         L05E9    cmpa  ,x+            Found match or end of table?
0609 22FC             (/home/strick/go/s):00902                  bhi   L05E9          No, keep checking (or fall through if not found)
060B 3590             (/home/strick/go/s):00903         L05ED    puls  pc,x           Exit with BEQ/BNE flag set
                      (/home/strick/go/s):00904         
                      (/home/strick/go/s):00905         * IF wildcards were detected in preparsing, filename compares happen here
                      (/home/strick/go/s):00906         * Entry: X=ptr to current char in user's pre-parse parm line
                      (/home/strick/go/s):00907         *        Y=ptr to start of current DIR entry filename
                      (/home/strick/go/s):00908         * Exit: Carry set if no match
                      (/home/strick/go/s):00909         *       Carry clear if match
060D EC80             (/home/strick/go/s):00910         L05EF    ldd   ,x+            Get 2 chars (NOTE: PTR UP BY ONLY 1!)
060F 812A             (/home/strick/go/s):00911         L05F1    cmpa  #'*            1st char a * (multi-char wildcard)?
0611 2757             (/home/strick/go/s):00912                  beq   L064C            Yes, go handle it
0613 813F             (/home/strick/go/s):00913                  cmpa  #'?            Question mark (single char wildcard)?
0615 273F             (/home/strick/go/s):00914                  beq   L0638            Yes, go handle it
0617 815B             (/home/strick/go/s):00915                  cmpa  #'[            Start of ranged wildcard?
0619 1027008C         (/home/strick/go/s):00916                  lbeq  L068B            Yes, go handle it
061D 8DD2             (/home/strick/go/s):00917                  bsr   L05D3          Not wildcard, check for special shell chars
061F 2728             (/home/strick/go/s):00918                  beq   L062B            It is a special shell char, skip ahead
0621 8D2C             (/home/strick/go/s):00919                  bsr   L0631          Just regular char, force uppercase
0623 3402             (/home/strick/go/s):00920                  pshs  a              Save char
0625 8D24             (/home/strick/go/s):00921                  bsr   L062D          Force uppercase on DIR filename char
0627 A8E0             (/home/strick/go/s):00922                  eora  ,s+            Same char as last parm char?
0629 261E             (/home/strick/go/s):00923                  bne   L062B          No, exit with carry set
062B A6A0             (/home/strick/go/s):00924         L060D    lda   ,y+            Re-get char from DIR filename
062D 2ADE             (/home/strick/go/s):00925                  bpl   L05EF          Not on last char yet, check next char from parm
062F EC84             (/home/strick/go/s):00926                  ldd   ,x             At end of DIR filename, grab 2 chars from parm
0631 8DBE             (/home/strick/go/s):00927                  bsr   L05D3          Check 1st char against special shell chars
0633 270A             (/home/strick/go/s):00928                  beq   L0621          Found one, skip ahead
0635 812A             (/home/strick/go/s):00929                  cmpa  #'*            Multi-char wildcard char?
0637 2610             (/home/strick/go/s):00930                  bne   L062B          No, no match, exit with carry set
0639 1F98             (/home/strick/go/s):00931                  tfr   b,a            1st char from parm is '*', check 2nd char for
063B 8DB4             (/home/strick/go/s):00932                  bsr   L05D3           special shell chars
063D 260A             (/home/strick/go/s):00933                  bne   L062B          None found, no match, exit with carry set
063F A63F             (/home/strick/go/s):00934         L0621    lda   -1,y           Special char, get last char from DIR filename
0641 847F             (/home/strick/go/s):00935         L0623    anda  #$7F           Strip 'end of filename' bit flag
0643 C620             (/home/strick/go/s):00936                  ldb   #C$SPAC        Space char
0645 ED3F             (/home/strick/go/s):00937                  std   -1,y           Save 'fixed' last char & space
0647 5F               (/home/strick/go/s):00938                  clrb                 Flag match
0648 39               (/home/strick/go/s):00939                  rts
                      (/home/strick/go/s):00940         
0649 53               (/home/strick/go/s):00941         L062B    comb                 Flag no match
064A 39               (/home/strick/go/s):00942                  rts
                      (/home/strick/go/s):00943         
                      (/home/strick/go/s):00944         * Force char to uppercase
064B A6A4             (/home/strick/go/s):00945         L062D    lda   ,y           Get char
064D 847F             (/home/strick/go/s):00946                  anda  #$7F         Strip hi-bit
064F 8141             (/home/strick/go/s):00947         L0631    cmpa  #'A          Need to force uppercase?
0651 2502             (/home/strick/go/s):00948                  blo   L0637        No, exit
0653 84DF             (/home/strick/go/s):00949                  anda  #$DF         Yes, force to uppercase
0655 39               (/home/strick/go/s):00950         L0637    rts
                      (/home/strick/go/s):00951         
                      (/home/strick/go/s):00952         * '?' single char wildcard found
0656 C12A             (/home/strick/go/s):00953         L0638    cmpb  #'*          Is next char a multi-char wildcard?
0658 27D1             (/home/strick/go/s):00954                  beq   L060D        Yes, process as if just '*'
065A C12C             (/home/strick/go/s):00955                  cmpb  #',          2nd char '-' or greater?
065C 22CD             (/home/strick/go/s):00956                  bhi   L060D        Yes, process normally
065E A6A0             (/home/strick/go/s):00957                  lda   ,y+          Get next char from DIR filename
0660 2AE7             (/home/strick/go/s):00958                  bpl   L062B        Not end of filename, Flag no match
0662 20DD             (/home/strick/go/s):00959                  bra   L0623        Save hibit stripped char & space, flag match
                      (/home/strick/go/s):00960         
0664 A6A0             (/home/strick/go/s):00961         L0646    lda   ,y+          Get next char from DIR filename
0666 2AFC             (/home/strick/go/s):00962                  bpl   L0646        Hunt for end of DIR filename
0668 20D7             (/home/strick/go/s):00963                  bra   L0623        Found it, fix hibit and add space to DIR entry
                      (/home/strick/go/s):00964         
                      (/home/strick/go/s):00965         * '*' multi-char wildcard found
066A A680             (/home/strick/go/s):00966         L064C    lda   ,x+          Get next char after '*' from parm buffer
066C 8D83             (/home/strick/go/s):00967                  bsr   L05D3        Check for shell special char
066E 27F4             (/home/strick/go/s):00968                  beq   L0646        Found one, check if end of DIR filename
0670 813F             (/home/strick/go/s):00969                  cmpa  #'?          Single char wildcard next?
0672 2729             (/home/strick/go/s):00970                  beq   L067F        Yes, Process
0674 815B             (/home/strick/go/s):00971                  cmpa  #'[          Start of Ranged wildcard next?
0676 2725             (/home/strick/go/s):00972                  beq   L067F        Yes, process
0678 8DD5             (/home/strick/go/s):00973                  bsr   L0631        Force char to uppercase
067A 3402             (/home/strick/go/s):00974                  pshs  a            Save it
067C 8DCD             (/home/strick/go/s):00975         L065E    bsr   L062D        Get next char from DIR filename, force uppercase
067E A8E0             (/home/strick/go/s):00976                  eora  ,s+          Same char?
0680 270A             (/home/strick/go/s):00977                  beq   L066E        Yes, possible resync after '*'
0682 327F             (/home/strick/go/s):00978         L0664    leas  -1,s         Make room on stack
0684 A6A0             (/home/strick/go/s):00979                  lda   ,y+          Re-get un-modified char from DIR filename
0686 2AF4             (/home/strick/go/s):00980                  bpl   L065E        Not end of filename, try next char
0688 3261             (/home/strick/go/s):00981                  leas  1,s          Found end of filename, eat temp stack
068A 20BD             (/home/strick/go/s):00982                  bra   L062B        Flag no match
                      (/home/strick/go/s):00983         * Above loop @ L0664/L065E uses sneaky stack stuff
                      (/home/strick/go/s):00984         
                      (/home/strick/go/s):00985         * Found possible resync char match after '*'
068C 327F             (/home/strick/go/s):00986         L066E    leas  -1,s         Make room on stack
068E 3430             (/home/strick/go/s):00987                  pshs  y,x          Preserve both DIR & parm ptrs
0690 8D99             (/home/strick/go/s):00988                  bsr   L060D        Attempt normal matching using this resync
0692 3530             (/home/strick/go/s):00989                  puls  y,x          Restore ptrs
0694 3261             (/home/strick/go/s):00990                  leas  1,s          Eat temp stack
0696 25EA             (/home/strick/go/s):00991                  bcs   L0664        No, resync did not work, look for next resync
0698 39               (/home/strick/go/s):00992                  rts                worked, exit with carry clear
                      (/home/strick/go/s):00993         
0699 A6A0             (/home/strick/go/s):00994         L067B    lda   ,y+          Get next char in DIR
069B 2BAC             (/home/strick/go/s):00995                  bmi   L062B        Last char, flag no match
                      (/home/strick/go/s):00996         * '?' found after '*' in parm buffer
069D 3430             (/home/strick/go/s):00997         L067F    pshs  y,x          Preserve both DIR and parm buffer ptrs
069F EC1F             (/home/strick/go/s):00998                  ldd   -1,x         Get previous & current parm chars
06A1 17FF6B           (/home/strick/go/s):00999                  lbsr  L05F1        Do normal sub-parsing from here
06A4 3530             (/home/strick/go/s):01000                  puls  y,x          Restore ptrs
06A6 25F1             (/home/strick/go/s):01001                  bcs   L067B        No match, go to next char in DIR and attemp resync
06A8 39               (/home/strick/go/s):01002                  rts                Matched, exit with match
                      (/home/strick/go/s):01003         
                      (/home/strick/go/s):01004         * Ranged wildcard here
                      (/home/strick/go/s):01005         * Entry: X=ptr to 1st char in parm buffer AFTER '['
06A9 EC80             (/home/strick/go/s):01006         L068B    ldd   ,x+          Get 1st 2 chars of range sub-string from parm bfr
06AB 8DA2             (/home/strick/go/s):01007                  bsr   L0631        Force uppercase on 1st char
06AD 1E98             (/home/strick/go/s):01008                  exg   b,a          Force uppercase on 2nd char
06AF 8D9E             (/home/strick/go/s):01009                  bsr   L0631
06B1 1E98             (/home/strick/go/s):01010                  exg   b,a
06B3 815D             (/home/strick/go/s):01011                  cmpa  #']          Is 1st char a close range check char?
06B5 2792             (/home/strick/go/s):01012                  beq   L062B        Yes, flag no match for '[]'
06B7 812D             (/home/strick/go/s):01013                  cmpa  #'-          Range separator char?
06B9 270A             (/home/strick/go/s):01014                  beq   L06A7        Yes, need to get end of range
                      (/home/strick/go/s):01015         * Special case for [x] - acts as if just normal char (no range or wildcard)
06BB 97EF             (/home/strick/go/s):01016                  sta   <u00EF       No, save start of range char
06BD 8D8C             (/home/strick/go/s):01017                  bsr   L062D        Get char from DIR filename, force uppercase
06BF 98EF             (/home/strick/go/s):01018                  eora  <u00EF       Match only range char?
06C1 270F             (/home/strick/go/s):01019                  beq   L06B4        Yes, skip to next char now
                      (/home/strick/go/s):01020         * Special case for [xyz] - one of these chars must match
06C3 20E4             (/home/strick/go/s):01021                  bra   L068B        No, see if more single chars to try matching
                      (/home/strick/go/s):01022         
                      (/home/strick/go/s):01023         * Actual range - need to get end of range char
                      (/home/strick/go/s):01024         * Entry: B=high char of range
                      (/home/strick/go/s):01025         *        <u00EF - current char (within range) we are checking against
06C5 0CEF             (/home/strick/go/s):01026         L06A7    inc   <u00EF       Bump up start char's ascii value
06C7 D1EF             (/home/strick/go/s):01027                  cmpb  <u00EF       Hit end of range yet?
06C9 27DE             (/home/strick/go/s):01028                  beq   L068B        Yes, try next char
06CB 17FF7D           (/home/strick/go/s):01029                  lbsr  L062D        Force char in A to uppercase
06CE 98EF             (/home/strick/go/s):01030                  eora  <u00EF       equal to current range check char?
06D0 26F3             (/home/strick/go/s):01031                  bne   L06A7        No, try next char in range
06D2 EC80             (/home/strick/go/s):01032         L06B4    ldd   ,x+          Get next 2 chars from pathname
06D4 815D             (/home/strick/go/s):01033                  cmpa  #']          End of range?
06D6 26FA             (/home/strick/go/s):01034                  bne   L06B4        No, check next char
06D8 16FF50           (/home/strick/go/s):01035                  lbra  L060D        End of range specifier, process normally
                      (/home/strick/go/s):01036         
                      (/home/strick/go/s):01037         * Error reading from current DIR
06DB C1D3             (/home/strick/go/s):01038         L06BD    cmpb  #E$EOF       End of file error?
06DD 102600AC         (/home/strick/go/s):01039                  lbne  L0776        No, fatal error, leave
06E1 9E54             (/home/strick/go/s):01040                  ldx   <u0054       Get ptr to current char in wildcard filename
06E3 A61F             (/home/strick/go/s):01041                  lda   -1,x         Get last char processed
06E5 8D48             (/home/strick/go/s):01042                  bsr   L0714        Add it to new expanded buffer
06E7 A680             (/home/strick/go/s):01043         L06C9    lda   ,x+          Get next char, inc ptr
06E9 9F54             (/home/strick/go/s):01044                  stx   <u0054       Save updated pointer
06EB 810D             (/home/strick/go/s):01045                  cmpa  #C$CR        CR?
06ED 102700AF         (/home/strick/go/s):01046                  lbeq  L0789        Yes, append CR to expanded buffer, we are done
06F1 17FEFD           (/home/strick/go/s):01047                  lbsr  L05D3        See if special shell char
06F4 26F1             (/home/strick/go/s):01048                  bne   L06C9        Just regular char, go to next one
06F6 3410             (/home/strick/go/s):01049                  pshs  x            Save current ptr to wildcard filename
06F8 9E56             (/home/strick/go/s):01050                  ldx   <u0056       Get current ptr in expanded buffer
06FA A71F             (/home/strick/go/s):01051                  sta   -1,x         Save that char overtop last char written
06FC 3510             (/home/strick/go/s):01052                  puls  x            Get wildcard ptr back
06FE 2007             (/home/strick/go/s):01053                  bra   L06EA        Close dir path, go back into loop
                      (/home/strick/go/s):01054         
                      (/home/strick/go/s):01055         * If special shell char found right after OPEN of DIR path
                      (/home/strick/go/s):01056         * Entry: X=ptr to filename (not pathname) - but with special char
0700 8D16             (/home/strick/go/s):01057         L06E3    bsr   L06FB        Process special shell char copying
0702 8D42             (/home/strick/go/s):01058                  bsr   L072F        Close DIR path
0704 16FE38           (/home/strick/go/s):01059                  lbra  L051D        More processing
                      (/home/strick/go/s):01060         
0707 8D3D             (/home/strick/go/s):01061         L06EA    bsr   L072F        Close DIR path
0709 16FE36           (/home/strick/go/s):01062                  lbra  L0520        Go back to main wildcard processing loop
                      (/home/strick/go/s):01063         
                      (/home/strick/go/s):01064         * This chunk (6EF-6F9) is for copying '\x' when x is NOT a wildcard char
070C A680             (/home/strick/go/s):01065         L06EF    lda   ,x+          Get quoted char
070E 8D40             (/home/strick/go/s):01066                  bsr   L0739        Check if it is [, * or ?
0710 2704             (/home/strick/go/s):01067                  beq   L06F9        Yes, add that char to expanded buffer by itself
0712 301E             (/home/strick/go/s):01068                  leax  -2,x         No, bump ptr back to '\'
0714 A680             (/home/strick/go/s):01069                  lda   ,x+          Get '\' char
0716 8D17             (/home/strick/go/s):01070         L06F9    bsr   L0714        Append that to output buffer
                      (/home/strick/go/s):01071         * Special shell chars found goes here
                      (/home/strick/go/s):01072         * This part copies filename from [,x] to expanded buffer, handling quoted
                      (/home/strick/go/s):01073         *   wildcard chars, and ending on CR or special shell char
0718 A680             (/home/strick/go/s):01074         L06FB    lda   ,x+          Get char
071A 815C             (/home/strick/go/s):01075                  cmpa  #'\          Backslash (for quoted char)?
071C 27EE             (/home/strick/go/s):01076                  beq   L06EF        Yes, go get quoted char
071E 810D             (/home/strick/go/s):01077                  cmpa  #C$CR        Is it the end of the filename?
0720 277E             (/home/strick/go/s):01078                  beq   L0789        Yes, append CR to expanded line, we are done
0722 8D30             (/home/strick/go/s):01079                  bsr   L073D        Is it '?' or '*'
0724 2709             (/home/strick/go/s):01080                  beq   L0714        Yes, add that char to expanded buffer
0726 17FEC8           (/home/strick/go/s):01081                  lbsr  L05D3        Check if shell special char
0729 2704             (/home/strick/go/s):01082                  beq   L0714        Yes, add to expanded buffer, return from there
072B 8D02             (/home/strick/go/s):01083                  bsr   L0714        No, add to expanded buffer, stay in this loop
072D 20E9             (/home/strick/go/s):01084                  bra   L06FB
                      (/home/strick/go/s):01085         
                      (/home/strick/go/s):01086         * Add char to expanded line buffer
                      (/home/strick/go/s):01087         * Entry: A=char to append to expanded line buffer
                      (/home/strick/go/s):01088         *        <u0056=Current position in expanded line buffer
                      (/home/strick/go/s):01089         *        <u0052=Current size of expanded line buffer
                      (/home/strick/go/s):01090         * Exit: <u0056 & <u0052 updated
072F 3412             (/home/strick/go/s):01091         L0714    pshs  x,a            Preserve regs
0731 9E56             (/home/strick/go/s):01092                  ldx   <u0056         Get current pos in expanded buffer
0733 A780             (/home/strick/go/s):01093                  sta   ,x+            Save char
0735 9F56             (/home/strick/go/s):01094                  stx   <u0056         Save updated expanded buffer ptr
0737 DC52             (/home/strick/go/s):01095                  ldd   <u0052         Get expanded buffer size
0739 C30001           (/home/strick/go/s):01096                  addd  #$0001         Increase by 1
073C 10830800         (/home/strick/go/s):01097                  cmpd  #2048          Is it full yet?
0740 2248             (/home/strick/go/s):01098                  bhi   L0773          Yes, exit with expanded line too long error
0742 DD52             (/home/strick/go/s):01099                  std   <u0052         No, save new size
0744 3592             (/home/strick/go/s):01100                  puls  pc,x,a         Restore regs & return
                      (/home/strick/go/s):01101         
                      (/home/strick/go/s):01102         * Close DIR path
0746 9612             (/home/strick/go/s):01103         L072F    lda   <u0012         Get DIR path #
0748 2705             (/home/strick/go/s):01104                  beq   L0738          If none, exit
074A 103F8F           (/home/strick/go/s):01105                  os9   I$Close        Close the path
074D 0F12             (/home/strick/go/s):01106                  clr   <u0012         Clear DIR path # to none
074F 39               (/home/strick/go/s):01107         L0738    rts
                      (/home/strick/go/s):01108         
                      (/home/strick/go/s):01109         * Wildcard checks
                      (/home/strick/go/s):01110         * Entry: A=char to check
                      (/home/strick/go/s):01111         * Exit: BEQ if any of the 3 wildcard chars, or BNE if not
0750 815B             (/home/strick/go/s):01112         L0739    cmpa  #'[            Range wildcard?
0752 2708             (/home/strick/go/s):01113                  beq   L0745
0754 813F             (/home/strick/go/s):01114         L073D    cmpa  #'?            Single char wildcard?
0756 2704             (/home/strick/go/s):01115                  beq   L0745
0758 812A             (/home/strick/go/s):01116                  cmpa  #'*            Multi-char wildcard?
075A 2700             (/home/strick/go/s):01117                  beq   L0745
075C 39               (/home/strick/go/s):01118         L0745    rts   
                      (/home/strick/go/s):01119         
                      (/home/strick/go/s):01120         * Parse for next wildcard or special shell char in pre-parsed parm line
                      (/home/strick/go/s):01121         * Entry: X=current pos in pre-parse parm line
                      (/home/strick/go/s):01122         * Exit: X=Same as entry
                      (/home/strick/go/s):01123         *   IF WILDCARD CHAR FOUND:
                      (/home/strick/go/s):01124         *       B=# chars to next wildcard/special char
                      (/home/strick/go/s):01125         *       A=special char found
                      (/home/strick/go/s):01126         *       Carry bit set
                      (/home/strick/go/s):01127         *   IF SPECIAL SHELL CHAR FOUND
                      (/home/strick/go/s):01128         *       B=0
                      (/home/strick/go/s):01129         *       Carry bit clear
                      (/home/strick/go/s):01130         *       A=special char found:  CR ( ) , space ! # & ; < > ^ |
075D 3410             (/home/strick/go/s):01131         L0746    pshs  x              Save current parm ptr
075F 2008             (/home/strick/go/s):01132                  bra   L0752          Parse for wildcard or special shell chars
                      (/home/strick/go/s):01133         
0761 A680             (/home/strick/go/s):01134         L074A    lda   ,x+            Get char from parms
0763 8DEB             (/home/strick/go/s):01135                  bsr   L0739          Do wildcard char check
0765 2702             (/home/strick/go/s):01136                  beq   L0752          If wildcard char, skip over it & continue
0767 301F             (/home/strick/go/s):01137                  leax  -1,x           not wildcard char, bump back to char after \
0769 A680             (/home/strick/go/s):01138         L0752    lda   ,x+            Get char from parms
076B 815C             (/home/strick/go/s):01139                  cmpa  #'\            Wildcard quote char (do not expand next)?
076D 27F2             (/home/strick/go/s):01140                  beq   L074A          Yes, handle it
076F 17FE7F           (/home/strick/go/s):01141                  lbsr  L05D3          No, check for other special shell chars
0772 2713             (/home/strick/go/s):01142                  beq   L0770          Found one, skip ahead
0774 8DDA             (/home/strick/go/s):01143                  bsr   L0739          Check for wildcard char
0776 26F1             (/home/strick/go/s):01144                  bne   L0752          None, skip to next char
                      (/home/strick/go/s):01145         * One of the 3 wildcard chars found, process
0778 3402             (/home/strick/go/s):01146                  pshs  a              Save char
077A 1F10             (/home/strick/go/s):01147                  tfr   x,d            Move parm ptr to D
077C A361             (/home/strick/go/s):01148                  subd  1,s            Calc distance since last wildcard/special char
077E 830001           (/home/strick/go/s):01149                  subd  #$0001         -1
0781 3502             (/home/strick/go/s):01150                  puls  a              B=distance between wild/special chars
0783 1A01             (/home/strick/go/s):01151                  orcc  #Carry         Set Carry Flag
0785 3590             (/home/strick/go/s):01152                  puls  pc,x           Exit with original parm ptr in X
                      (/home/strick/go/s):01153         
                      (/home/strick/go/s):01154         * Exit with B=0, Carry clear and A=special char found (which ends current
                      (/home/strick/go/s):01155         *   'chunk' being checked... can included CR)
0787 5F               (/home/strick/go/s):01156         L0770    clrb                 Clear carry, exit
0788 3590             (/home/strick/go/s):01157                  puls  pc,x
                      (/home/strick/go/s):01158         
                      (/home/strick/go/s):01159         * Expanded buffer full error
078A 53               (/home/strick/go/s):01160         L0773    comb
078B C6BF             (/home/strick/go/s):01161                  ldb   #E$BufSiz
078D 3405             (/home/strick/go/s):01162         L0776    pshs  b,cc           Preserve error code
078F 8DB5             (/home/strick/go/s):01163                  bsr   L072F          Close DIR path (if we had one)
0791 9E4A             (/home/strick/go/s):01164                  ldx   <u004A         Print text message (usually error msg)
0793 109E4C           (/home/strick/go/s):01165                  ldy   <u004C
0796 8602             (/home/strick/go/s):01166                  lda   #$02
0798 103F8C           (/home/strick/go/s):01167                  os9   I$WritLn
079B 3505             (/home/strick/go/s):01168                  puls  b,cc
079D 16FA14           (/home/strick/go/s):01169                  lbra  L0191          Exit with error
                      (/home/strick/go/s):01170         
07A0 860D             (/home/strick/go/s):01171         L0789    lda   #C$CR          Append CR to expanded filenames buffer
07A2 8D8B             (/home/strick/go/s):01172                  bsr   L0714
07A4 109E52           (/home/strick/go/s):01173                  ldy   <u0052         Get expanded buffer size
07A7 30C90E6D         (/home/strick/go/s):01174                  leax  >u0E6D,u       Point to start of expanded buffer
07AB 8D99             (/home/strick/go/s):01175                  bsr   L072F          Close DIR path
07AD 10DE50           (/home/strick/go/s):01176                  lds   <u0050         Get back original stack ptr
                      (/home/strick/go/s):01177         * At this point, expanded buffer is complete and ready to go (either through
                      (/home/strick/go/s):01178         *  wildcard routine, or by simply copying the original parm buffer from user)
                      (/home/strick/go/s):01179         
                      (/home/strick/go/s):01180         * Main entry point for non-wildcard filename search/match
                      (/home/strick/go/s):01181         * Entry: X=Ptr to start of expanded buffer
07B0 0D1E             (/home/strick/go/s):01182         L079B    tst   <u001E         Echo required?
07B2 2703             (/home/strick/go/s):01183                  beq   L07A2          No, skip ahead
07B4 17FA8B           (/home/strick/go/s):01184                  lbsr  L021F          Print out user entered parm line to std err
07B7 0D43             (/home/strick/go/s):01185         L07A2    tst   <u0043         2=FALSE,0=TRUE, 1=??? (check current IF status,
07B9 270A             (/home/strick/go/s):01186                  beq   L07B0            if any. If TRUE flag set, skip ahead)
07BB 1707AD           (/home/strick/go/s):01187                  lbsr  L0F69          Do checks for IF type statements
07BE 4D               (/home/strick/go/s):01188                  tsta                 Find match?
07BF 102A075C         (/home/strick/go/s):01189                  lbpl  L0F1D          Yes, process IF type statement
07C3 5F               (/home/strick/go/s):01190         L07AE    clrb                 No error & return
07C4 39               (/home/strick/go/s):01191                  rts
                      (/home/strick/go/s):01192         
                      (/home/strick/go/s):01193         * If current IF type statement has result TRUE
07C5 0D45             (/home/strick/go/s):01194         L07B0    tst   <u0045         ??? (Are we looking for a label for GOTO?)
07C7 272F             (/home/strick/go/s):01195                  beq   L07E3          No, skip ahead
07C9 A680             (/home/strick/go/s):01196                  lda   ,x+            Get char from buffer
07CB 812A             (/home/strick/go/s):01197                  cmpa  #'*            Comment line?
07CD 26F4             (/home/strick/go/s):01198                  bne   L07AE          No, exit without error
07CF 170160           (/home/strick/go/s):01199                  lbsr  L091F          Yes, get ptr to first non-space char into X
07D2 31C90124         (/home/strick/go/s):01200                  leay  >u0124,u       Point to temp buffer
07D6 170832           (/home/strick/go/s):01201                  lbsr  L100B          Copy label from X to Y
07D9 A684             (/home/strick/go/s):01202                  lda   ,x             Get 1st char of label
07DB 815C             (/home/strick/go/s):01203                  cmpa  #'\            '*\'? (Which means cancel impending GOTO)
07DD 2711             (/home/strick/go/s):01204                  beq   L07DB          Yes, cancel GOTO
07DF 30C90BFC         (/home/strick/go/s):01205                  leax  >u0BFC,u       No, point to 80 byte buffer (GOTO label holder?)
07E3 4F               (/home/strick/go/s):01206                  clra                 default char to check against=NUL
07E4 810D             (/home/strick/go/s):01207         L07CF    cmpa  #C$CR          End of label?
07E6 2708             (/home/strick/go/s):01208                  beq   L07DB          Yes, cancel GOTO search
07E8 A680             (/home/strick/go/s):01209                  lda   ,x+            Get next char from buffer
07EA A1A0             (/home/strick/go/s):01210                  cmpa  ,y+            Is it the label we are looking for?
07EC 27F6             (/home/strick/go/s):01211                  beq   L07CF          Keep checking till done
07EE 20D3             (/home/strick/go/s):01212                  bra   L07AE          No match, clear carry & return
                      (/home/strick/go/s):01213         
                      (/home/strick/go/s):01214         * Cancelling GOTO search
07F0 0F45             (/home/strick/go/s):01215         L07DB    clr   <u0045         Flag we are NOT looking for label for GOTO
07F2 5F               (/home/strick/go/s):01216                  clrb
07F3 3262             (/home/strick/go/s):01217                  leas  2,s            Eat stack
07F5 16F93B           (/home/strick/go/s):01218                  lbra  L010D          Reprint shell prompt, process from scratch
                      (/home/strick/go/s):01219         
07F8 8D02             (/home/strick/go/s):01220         L07E3    bsr   L07E7
07FA 2052             (/home/strick/go/s):01221                  bra   L083A
                      (/home/strick/go/s):01222         
07FC 3410             (/home/strick/go/s):01223         L07E7    pshs  x
07FE 0D6C             (/home/strick/go/s):01224                  tst   <u006C
0800 2744             (/home/strick/go/s):01225                  beq   L0832
0802 0D5C             (/home/strick/go/s):01226                  tst   <u005C
0804 2604             (/home/strick/go/s):01227                  bne   L07F5
0806 0D1C             (/home/strick/go/s):01228                  tst   <u001C
0808 273C             (/home/strick/go/s):01229                  beq   L0832
080A A684             (/home/strick/go/s):01230         L07F5    lda   ,x
080C 812A             (/home/strick/go/s):01231                  cmpa  #'*
080E 2736             (/home/strick/go/s):01232                  beq   L0832
                      (/home/strick/go/s):01233                  IFGT  Level-1
0810 108E0000         (/home/strick/go/s):01234                  ldy   #$0000         Force temporarily to super-user
0814 103F1C           (/home/strick/go/s):01235                  os9   F$SUser
                      (/home/strick/go/s):01236                  ENDC
0817 30C90CBD         (/home/strick/go/s):01237                  leax  >u0CBD,u
081B CC0203           (/home/strick/go/s):01238                  ldd   #$0203
081E 17045D           (/home/strick/go/s):01239                  lbsr  L0C79
0821 2523             (/home/strick/go/s):01240                  bcs   L0832
0823 17F8FB           (/home/strick/go/s):01241                  lbsr  L00FB
0826 8620             (/home/strick/go/s):01242                  lda   #$20
0828 A78811           (/home/strick/go/s):01243                  sta   <$11,x
082B 108E0012         (/home/strick/go/s):01244                  ldy   #$0012
082F 9612             (/home/strick/go/s):01245                  lda   <u0012
0831 103F8A           (/home/strick/go/s):01246                  os9   I$Write  
0834 250B             (/home/strick/go/s):01247                  bcs   L082D
0836 AEE4             (/home/strick/go/s):01248                  ldx   ,s
0838 108E0800         (/home/strick/go/s):01249                  ldy   #$0800
083C 9612             (/home/strick/go/s):01250                  lda   <u0012
083E 103F8C           (/home/strick/go/s):01251                  os9   I$WritLn 
0841 9612             (/home/strick/go/s):01252         L082D    lda   <u0012
0843 103F8F           (/home/strick/go/s):01253                  os9   I$Close  
0846                  (/home/strick/go/s):01254         L0832   
                      (/home/strick/go/s):01255                  IFGT  Level-1 
0846 109E5A           (/home/strick/go/s):01256                  ldy   <u005A         Get original user # back
0849 103F1C           (/home/strick/go/s):01257                  os9   F$SUser        Change user # to original
                      (/home/strick/go/s):01258                  ENDC
084C 3590             (/home/strick/go/s):01259                  puls  pc,x
                      (/home/strick/go/s):01260         
                      (/home/strick/go/s):01261         * Parse input line
                      (/home/strick/go/s):01262         * Entry : X=Ptr to current char in line buffer
084E 4F               (/home/strick/go/s):01263         L083A    clra
084F 9722             (/home/strick/go/s):01264                  sta   <u0022         Flag we don't change priority for forked process
0851 9703             (/home/strick/go/s):01265                  sta   <u0003         Clear out # pages of data mem for forked process
0853 970E             (/home/strick/go/s):01266                  sta   <u000E         Clear out signal code
0855 318DFAC8         (/home/strick/go/s):01267                  leay  >CmdList,pc      Point to main command list
0859 170088           (/home/strick/go/s):01268                  lbsr  L08D1          Parse keywords from list
085C 2555             (/home/strick/go/s):01269                  bcs   L08A0          Keyword found but generated error, done line
085E 810D             (/home/strick/go/s):01270                  cmpa  #C$CR          Is 1st non-keyword char a carriage return?
0860 2751             (/home/strick/go/s):01271                  beq   L08A0          Yes, done line
0862 970C             (/home/strick/go/s):01272                  sta   <u000C         Save non-keyword char
0864 8128             (/home/strick/go/s):01273                  cmpa  #'(            Is it a 'start command group' char?
0866 2626             (/home/strick/go/s):01274                  bne   L087B          No, try next
0868 318DF7A1         (/home/strick/go/s):01275                  leay  >L000D,pc      Point to 'Shell'
086C 109F04           (/home/strick/go/s):01276                  sty   <u0004         Save pointer to program to fork?
086F 3001             (/home/strick/go/s):01277                  leax  1,x            Bump ptr past '('
0871 9F08             (/home/strick/go/s):01278                  stx   <u0008         Save updated ptr
0873 0C0D             (/home/strick/go/s):01279         L0860    inc   <u000D         Bump up # of command groups
0875 318DFBB1         (/home/strick/go/s):01280         L0862    leay  >L0404,pc      Point to command group symbols to parse
0879 170080           (/home/strick/go/s):01281                  lbsr  L08E9          Hunt down EOL, or '(' or ')' (skip quoted text)
087C 8128             (/home/strick/go/s):01282                  cmpa  #'(            Another group start?
087E 27F3             (/home/strick/go/s):01283                  beq   L0860          Yes, bump up # of command groups & continue
0880 8129             (/home/strick/go/s):01284                  cmpa  #')            Group end?
0882 2627             (/home/strick/go/s):01285                  bne   L0898          No, skip ahead (to print WHAT?)
0884 0A0D             (/home/strick/go/s):01286                  dec   <u000D         Bump down # of command groups
0886 26ED             (/home/strick/go/s):01287                  bne   L0862          Still more groups, continue parsing for them
0888 860D             (/home/strick/go/s):01288                  lda   #C$CR          Append CR at end of command line
088A A71F             (/home/strick/go/s):01289                  sta   -1,x
088C 2004             (/home/strick/go/s):01290                  bra   L087F          Check for modifiers
                      (/home/strick/go/s):01291         
088E 8D26             (/home/strick/go/s):01292         L087B    bsr   L08A3          Check for valid path,  do '<>', '#', '^' if needed
0890 2521             (/home/strick/go/s):01293                  bcs   L08A0          No valid path found, skip ahead
                      (/home/strick/go/s):01294         * Found valid pathname
0892 318DFB98         (/home/strick/go/s):01295         L087F    leay  >L0408,pc      Point to modifiers table
0896 8D64             (/home/strick/go/s):01296                  bsr   L08E9          Go parse for them
0898 1F10             (/home/strick/go/s):01297                  tfr   x,d            Move ')' ptr to D for SUB
089A 9308             (/home/strick/go/s):01298                  subd  <u0008         Calculate size from 1st '(' to ')'
089C DD06             (/home/strick/go/s):01299                  std   <u0006         Save size of group (could also be pathname-modifier)
089E 301F             (/home/strick/go/s):01300                  leax  -1,x
08A0 318DFB51         (/home/strick/go/s):01301                  leay  >L03CF,pc      Point to modifier branch table
08A4 8D3E             (/home/strick/go/s):01302                  bsr   L08D1          Go execute modifier routine
08A6 250B             (/home/strick/go/s):01303                  bcs   L08A0          If error in modifier routine, exit
08A8 109E04           (/home/strick/go/s):01304                  ldy   <u0004         Get ptr to first char we started at
08AB 10260325         (/home/strick/go/s):01305         L0898    lbne  L0BCF          Not proper, print 'WHAT?'
08AF 810D             (/home/strick/go/s):01306                  cmpa  #C$CR          Last char a carriage return?
08B1 269B             (/home/strick/go/s):01307                  bne   L083A          No, start parsing again at current position
08B3 1602E5           (/home/strick/go/s):01308         L08A0    lbra  L0B96          Done processing line, continue
                      (/home/strick/go/s):01309         
                      (/home/strick/go/s):01310         * Entry: X=Ptr to text to check for valid device name (including '.' & '..')
                      (/home/strick/go/s):01311         * Exit: Carry set if not a valid device name
                      (/home/strick/go/s):01312         * Carry clear if there was
                      (/home/strick/go/s):01313         * <u0004 = Ptr to first char where we started at
                      (/home/strick/go/s):01314         * <u0008 = Ptr to end of redirection/mem size/priority setting chars (if found)
08B6 9F04             (/home/strick/go/s):01315         L08A3    stx   <u0004         Save ptr to current char in input line
08B8 8D0F             (/home/strick/go/s):01316                  bsr   L08B6          Check for valid device name
08BA 250C             (/home/strick/go/s):01317                  bcs   L08B5          None found, return
                      (/home/strick/go/s):01318         * Found valid device name
08BC 8D0B             (/home/strick/go/s):01319         L08A9    bsr   L08B6          Eat rest of valid pathlist
08BE 24FC             (/home/strick/go/s):01320                  bcc   L08A9          Keep going until we are done pathlist
08C0 318DFB40         (/home/strick/go/s):01321                  leay  >L03DE,pc      Point to Command list starting at '<>>>'
08C4 8D1E             (/home/strick/go/s):01322                  bsr   L08D1          Call any redirection, mem size or priority routines
08C6 9F08             (/home/strick/go/s):01323                  stx   <u0008         Save ptr to where we are now (end of current set)
08C8 39               (/home/strick/go/s):01324         L08B5    rts   
                      (/home/strick/go/s):01325         
08C9 103F10           (/home/strick/go/s):01326         L08B6    os9   F$PrsNam       Valid OS9 device name?
08CC 240C             (/home/strick/go/s):01327                  bcc   L08C7          Yes, point X to it & return
08CE A680             (/home/strick/go/s):01328                  lda   ,x+            Not valid, get first char
08D0 812E             (/home/strick/go/s):01329                  cmpa  #'.            Is it a period?
08D2 260A             (/home/strick/go/s):01330                  bne   L08CB          No, bad path name
08D4 A180             (/home/strick/go/s):01331                  cmpa  ,x+            Is it a double period?
08D6 2704             (/home/strick/go/s):01332                  beq   L08C9          Yes, leave src ptr pointing to name after '..'
08D8 311F             (/home/strick/go/s):01333                  leay  -1,x           If single, bump ptr to name after '.'
08DA 30A4             (/home/strick/go/s):01334         L08C7    leax  ,y             Point X to pathname in source
08DC 4F               (/home/strick/go/s):01335         L08C9    clra                 No error & return
08DD 39               (/home/strick/go/s):01336                  rts
                      (/home/strick/go/s):01337         
08DE 53               (/home/strick/go/s):01338         L08CB    comb                 Error flag
08DF 301F             (/home/strick/go/s):01339                  leax  -1,x           Bump source ptr back
08E1 C6D7             (/home/strick/go/s):01340                  ldb   #E$BPNam       Bad Path Name error & return
08E3 39               (/home/strick/go/s):01341                  rts   
                      (/home/strick/go/s):01342         * Entry: Y=ptr to command list (CmdList)
08E4 8D34             (/home/strick/go/s):01343         L08D1    bsr   L0907          Go find 1st non-space char
08E6 3420             (/home/strick/go/s):01344                  pshs  y              Save command list ptr
08E8 8D53             (/home/strick/go/s):01345                  bsr   L092A          Parse for keyword or special char
08EA 2509             (/home/strick/go/s):01346                  bcs   L08E2          If no keyword found, skip ahead
08EC ECA4             (/home/strick/go/s):01347                  ldd   ,y             Keyword found, get offset
08EE ADAB             (/home/strick/go/s):01348                  jsr   d,y            Go execute routine for command found
08F0 3520             (/home/strick/go/s):01349                  puls  y              Restore command list ptr
08F2 24F0             (/home/strick/go/s):01350                  bcc   L08D1          No error, continue parsing for keywords
08F4 39               (/home/strick/go/s):01351                  rts                  Subroutine had error, return with it
08F5 4F               (/home/strick/go/s):01352         L08E2    clra                 No error
08F6 A684             (/home/strick/go/s):01353                  lda   ,x             Get character (not in command list)
08F8 35A0             (/home/strick/go/s):01354                  puls  pc,y           Restore command list ptr & return
                      (/home/strick/go/s):01355         
                      (/home/strick/go/s):01356         * Start searching at beginning of current command list
                      (/home/strick/go/s):01357         * For looking for single character modifiers
08FA 3520             (/home/strick/go/s):01358         L08E7    puls  y
08FC 3420             (/home/strick/go/s):01359         L08E9    pshs  y              Preserve command list ptr
08FE A680             (/home/strick/go/s):01360                  lda   ,x+            Get next char from command line
0900 6DA4             (/home/strick/go/s):01361         L08ED    tst   ,y             Check current char in command list
0902 2BF6             (/home/strick/go/s):01362                  bmi   L08E7          If done list, start over at beginning
0904 8122             (/home/strick/go/s):01363                  cmpa  #'"            Is it quotes?
0906 260C             (/home/strick/go/s):01364                  bne   L0901          No, skip ahead
0908 A680             (/home/strick/go/s):01365         L08F5    lda   ,x+            Get next char from command line
090A 810D             (/home/strick/go/s):01366                  cmpa  #C$CR          EOL?
090C 270A             (/home/strick/go/s):01367                  beq   L0905          Yes, exit with A being CR
090E 8122             (/home/strick/go/s):01368                  cmpa  #'"            Is it another set of quotes?
0910 26F6             (/home/strick/go/s):01369                  bne   L08F5          No, keep looking for it (or EOL)
0912 A680             (/home/strick/go/s):01370                  lda   ,x+            Get char after 2nd quotes
0914 A1A0             (/home/strick/go/s):01371         L0901    cmpa  ,y+            Is it the current command char we are checking?
0916 26E8             (/home/strick/go/s):01372                  bne   L08ED          No, try next
0918 35A0             (/home/strick/go/s):01373         L0905    puls  pc,y           Yes, exit with A containing it
                      (/home/strick/go/s):01374         
                      (/home/strick/go/s):01375         * Entry: Y=ptr to command list
091A 3410             (/home/strick/go/s):01376         L0907    pshs  x              Preserve X
091C A680             (/home/strick/go/s):01377                  lda   ,x+            Get char from line entered by user
091E 8120             (/home/strick/go/s):01378                  cmpa  #C$SPAC        Is it a space?
0920 270E             (/home/strick/go/s):01379                  beq   L091D          Yes, skip ahead
0922 812C             (/home/strick/go/s):01380                  cmpa  #',            Is it a comma?
0924 270A             (/home/strick/go/s):01381                  beq   L091D          Yes, skip ahead
0926 308DFB04         (/home/strick/go/s):01382                  leax  >L0408,pc      Point to single character modifiers
092A A180             (/home/strick/go/s):01383         L0917    cmpa  ,x+            Found a match?
092C 22FC             (/home/strick/go/s):01384                  bhi   L0917          No, try next until list is done
092E 3590             (/home/strick/go/s):01385                  puls  pc,x           Found it, restore X to point to it & return
                      (/home/strick/go/s):01386         
0930 3262             (/home/strick/go/s):01387         L091D    leas  2,s            Eat X off the stack
0932 8620             (/home/strick/go/s):01388         L091F    lda   #C$SPAC        Get space character
0934 A180             (/home/strick/go/s):01389         L0921    cmpa  ,x+            Keep searching until non-space char is found
0936 27FC             (/home/strick/go/s):01390                  beq   L0921
0938 301F             (/home/strick/go/s):01391                  leax  -1,x           Point to 1st non-space char
                      (/home/strick/go/s):01392         * ; (1st pass) comes here
093A 1CFE             (/home/strick/go/s):01393         CmdSEMI  andcc #^Carry        No carry & return
093C 39               (/home/strick/go/s):01394                  rts   
                      (/home/strick/go/s):01395         * Command line parser
093D 3430             (/home/strick/go/s):01396         L092A    pshs  y,x            Preserve command table ptr & input line ptr
093F 3122             (/home/strick/go/s):01397                  leay  2,y            Skip first offset
0941 AEE4             (/home/strick/go/s):01398         L092E    ldx   ,s             Get input line ptr
0943 A680             (/home/strick/go/s):01399         L0930    lda   ,x+            Get char from input line
0945 1705C6           (/home/strick/go/s):01400                  lbsr  L0F0C          Convert char to uppercase if lowercases
0948 A8A0             (/home/strick/go/s):01401                  eora  ,y+            Check for a match
094A 48               (/home/strick/go/s):01402                  lsla  
094B 2617             (/home/strick/go/s):01403                  bne   L0951          No match, skip to next keyword in table
094D 24F4             (/home/strick/go/s):01404                  bcc   L0930          Keep checking until end of keyword (high bit set)
094F A63F             (/home/strick/go/s):01405                  lda   -$01,y         Get command table char again
0951 81FC             (/home/strick/go/s):01406                  cmpa  #'|+$80        '|' (with high bit set)?
0953 270C             (/home/strick/go/s):01407                  beq   L094E          Yes, exit with carry clear
0955 81DE             (/home/strick/go/s):01408                  cmpa  #'^+$80        '^' (with high bit set)?
0957 2708             (/home/strick/go/s):01409                  beq   L094E          Yes, exit with carry clear
0959 81C1             (/home/strick/go/s):01410                  cmpa  #'A+$80        Any of the other special modifiers with high bit?
095B 2504             (/home/strick/go/s):01411                  blo   L094E          Yes, exit with carry clear
095D 8DBB             (/home/strick/go/s):01412                  bsr   L0907          Eat spaces until first non-space char
095F 2503             (/home/strick/go/s):01413                  bcs   L0951          If special char (!|#,etc.), skip ahead
0961 4F               (/home/strick/go/s):01414         L094E    clra  
0962 35A6             (/home/strick/go/s):01415                  puls  pc,y,d
                      (/home/strick/go/s):01416         
0964 313F             (/home/strick/go/s):01417         L0951    leay  -1,y           Bump search ptr back
0966 A6A0             (/home/strick/go/s):01418         L0953    lda   ,y+            Get char again
0968 2AFC             (/home/strick/go/s):01419                  bpl   L0953          Keep getting them until end of keyword
096A 10AF62           (/home/strick/go/s):01420                  sty   2,s            Save ptr to next offset on stack
096D ECA1             (/home/strick/go/s):01421                  ldd   ,y++           Get offset
096F 26D0             (/home/strick/go/s):01422                  bne   L092E          If not at end of table, keep searching
0971 53               (/home/strick/go/s):01423                  comb                 End of table, command not found error
0972 35B0             (/home/strick/go/s):01424                  puls  pc,y,x
                      (/home/strick/go/s):01425         
0974 73746172747570   (/home/strick/go/s):01426         L0961    fcc   'startup'
097B 0D               (/home/strick/go/s):01427                  fcb   C$CR
                      (/home/strick/go/s):01428         
                      (/home/strick/go/s):01429         * Create child shell to run 'startup' file
097C                  (/home/strick/go/s):01430         CmdSTARTUP
097C 3470             (/home/strick/go/s):01431                  pshs  u,y,x          Preserve regs
097E 308DF68B         (/home/strick/go/s):01432                  leax  L000D,pc       Point to 'shell' (module name)
0982 338CEF           (/home/strick/go/s):01433                  leau  L0961,pc       Point to 'startup' (parameter for 'shell')
0985 108E0008         (/home/strick/go/s):01434                  ldy   #$0008         Size of 'startup<CR>'
                      (/home/strick/go/s):01435                  IFGT  Level-1
0989 CC111F           (/home/strick/go/s):01436                  ldd   #$111F         Program+Objct / 7.5K data area
                      (/home/strick/go/s):01437                  ELSE
                      (/home/strick/go/s):01438                  ldd   #$1102         Program+Objct / 512 byte data area
                      (/home/strick/go/s):01439                  ENDC
098C 103F03           (/home/strick/go/s):01440                  os9   F$Fork         Fork a shell to run the startup file
098F 2503             (/home/strick/go/s):01441                  bcs   L0983          Couldn't fork, exit
0991 103F04           (/home/strick/go/s):01442                  os9   F$Wait         Wait until 'startup' is done
0994 3570             (/home/strick/go/s):01443         L0983    puls  u,y,x          Restore regs
0996 5F               (/home/strick/go/s):01444                  clrb                 No error & return
0997 39               (/home/strick/go/s):01445                  rts   
                      (/home/strick/go/s):01446         
                      (/home/strick/go/s):01447         * EX command
0998 17FF1B           (/home/strick/go/s):01448         CmdEX    lbsr  L08A3          Go check for valid device name (module)
099B 251F             (/home/strick/go/s):01449                  bcs   L09AB          If none, exit
099D 4F               (/home/strick/go/s):01450                  clra                 Std in path
099E 8D21             (/home/strick/go/s):01451                  bsr   L09B0          Go close it
09A0 8D1E             (/home/strick/go/s):01452                  bsr   L09AF          Go close Std out
09A2 8D1C             (/home/strick/go/s):01453                  bsr   L09AF          Go close Std Err
09A4 1701E5           (/home/strick/go/s):01454                  lbsr  L0B87          Go find the end of the input line
09A7 3001             (/home/strick/go/s):01455                  leax  1,x            Bump ptr to 1 past CR
09A9 1F10             (/home/strick/go/s):01456                  tfr   x,d            Move ptr to D
09AB 9308             (/home/strick/go/s):01457                  subd  <u0008         Calculate size of current command group
09AD DD06             (/home/strick/go/s):01458                  std   <u0006         Save it
09AF 1709CE           (/home/strick/go/s):01459                  lbsr  L130A          Point to module to chain&get its parm size, etc.
09B2 32C900FF         (/home/strick/go/s):01460                  leas  >u00FF,u       Point stack to end of DP
09B6 103F05           (/home/strick/go/s):01461                  os9   F$Chain        Chain to the new program
09B9 16F861           (/home/strick/go/s):01462                  lbra  L01FA          Couldn't, go here
09BC 5F               (/home/strick/go/s):01463         L09AB    clrb                 No error
09BD 16F870           (/home/strick/go/s):01464                  lbra  L020D          Close logging file (if any) and exit ShellPlus
                      (/home/strick/go/s):01465         
09C0 4C               (/home/strick/go/s):01466         L09AF    inca                 Inc path #
09C1 3402             (/home/strick/go/s):01467         L09B0    pshs  a              Save path #
09C3 1601FB           (/home/strick/go/s):01468                  lbra  L0BBC          close path if it is open
                      (/home/strick/go/s):01469         * CHX & CX commands
09C6 0F38             (/home/strick/go/s):01470         CmdCHX   clr   <u0038
09C8 8684             (/home/strick/go/s):01471                  lda   #DIR.+EXEC.
09CA 103F86           (/home/strick/go/s):01472                  os9   I$ChgDir 
09CD 39               (/home/strick/go/s):01473                  rts   
                      (/home/strick/go/s):01474         * CHD & CD commands
09CE 8681             (/home/strick/go/s):01475         CmdCHD   lda   #DIR.+READ.    (bug fix, originally opened in UPDATE)
09D0 103F86           (/home/strick/go/s):01476                  os9   I$ChgDir       Change the directory
09D3 2508             (/home/strick/go/s):01477                  bcs   L09CE          Error, exit with it
09D5 0F37             (/home/strick/go/s):01478                  clr   <u0037         Flag .pwd entry as invalid
09D7 0D42             (/home/strick/go/s):01479                  tst   <u0042         WAS ,U
09D9 2702             (/home/strick/go/s):01480                  beq   L09CE
09DB 8D36             (/home/strick/go/s):01481                  bsr   L0A04          Go update shell expanded prompt if needed
09DD 39               (/home/strick/go/s):01482         L09CE    rts   
                      (/home/strick/go/s):01483         * L command - Logging ON
09DE 8601             (/home/strick/go/s):01484         CmdL     lda   #$01
09E0 2001             (/home/strick/go/s):01485                  bra   L09D4
                      (/home/strick/go/s):01486         * -L command - Logging OFF
09E2 4F               (/home/strick/go/s):01487         CmdNL    clra  
09E3 971C             (/home/strick/go/s):01488         L09D4    sta   <u001C
09E5 39               (/home/strick/go/s):01489                  rts   
                      (/home/strick/go/s):01490         * P command - Prompting ON
09E6 4F               (/home/strick/go/s):01491         CmdP     clra  
09E7 2002             (/home/strick/go/s):01492                  bra   L09DC
                      (/home/strick/go/s):01493         * -P command - Prompting OFF
09E9 8601             (/home/strick/go/s):01494         CmdNP    lda   #$01
09EB 971D             (/home/strick/go/s):01495         L09DC    sta   <u001D
09ED 39               (/home/strick/go/s):01496                  rts   
                      (/home/strick/go/s):01497         * T command - Echo input ON
09EE 8601             (/home/strick/go/s):01498         CmdT     lda   #$01
09F0 2001             (/home/strick/go/s):01499                  bra   L09E4
                      (/home/strick/go/s):01500         * -T command - Echo input OFF
09F2 4F               (/home/strick/go/s):01501         CmdNT    clra  
09F3 971E             (/home/strick/go/s):01502         L09E4    sta   <u001E
09F5 39               (/home/strick/go/s):01503                  rts   
                      (/home/strick/go/s):01504         * V command - Turn variable expansion ON
09F6 4F               (/home/strick/go/s):01505         CmdV     clra  
09F7 2002             (/home/strick/go/s):01506                  bra   L09EC
                      (/home/strick/go/s):01507         * -V command - Turn variable expansion OFF
09F9 8601             (/home/strick/go/s):01508         CmdNV    lda   #$01
09FB 971F             (/home/strick/go/s):01509         L09EC    sta   <u001F
09FD 39               (/home/strick/go/s):01510                  rts   
                      (/home/strick/go/s):01511         * X command - Kill Shell when error occurs ON
09FE 8601             (/home/strick/go/s):01512         CmdX     lda   #$01
0A00 2001             (/home/strick/go/s):01513                  bra   L09F4
                      (/home/strick/go/s):01514         * -X command - Kill Shell when error occurs OFF
0A02 4F               (/home/strick/go/s):01515         CmdNX    clra  
0A03 9720             (/home/strick/go/s):01516         L09F4    sta   <u0020
0A05 39               (/home/strick/go/s):01517                  rts   
                      (/home/strick/go/s):01518         
0A06 6DC901F4         (/home/strick/go/s):01519         L09F7    tst   >u01F4,u       Date already done?
0A0A 2607             (/home/strick/go/s):01520                  bne   L0A04          Yes, skip ahead
0A0C 6DC901F5         (/home/strick/go/s):01521                  tst   >u01F5,u       Time already done?
0A10 2601             (/home/strick/go/s):01522                  bne   L0A04          Yes, skip ahead
0A12 39               (/home/strick/go/s):01523                  rts                  If neither, we don't need to change prompt?
0A13 3430             (/home/strick/go/s):01524         L0A04    pshs  y,x            Preserve regs
0A15 205A             (/home/strick/go/s):01525                  bra   L0A64          Go update shell expanded prompt if needed
                      (/home/strick/go/s):01526         
                      (/home/strick/go/s):01527         * Make shell prompt string the default one
0A17 3520             (/home/strick/go/s):01528         L0A08    puls  y              Restore Y
0A19 3410             (/home/strick/go/s):01529                  pshs  x              Preserve X
0A1B 308DF61E         (/home/strick/go/s):01530                  leax  >L003D,pc      Point to default prompt string
0A1F 8D02             (/home/strick/go/s):01531                  bsr   CmdPEq         Put that into working shell prompt string
0A21 3590             (/home/strick/go/s):01532                  puls  pc,x           Restore X & return
                      (/home/strick/go/s):01533         
                      (/home/strick/go/s):01534         * P= (prompt set) command
                      (/home/strick/go/s):01535         * Make shell prompt string (default or user-specified)
                      (/home/strick/go/s):01536         * Entry: X=ptr to source of new shell prompt string
0A23 3420             (/home/strick/go/s):01537         CmdPEq   pshs  y              Preserve Y
0A25 31C901F9         (/home/strick/go/s):01538                  leay  >u01F9,u       Point to working prompt text buffer
0A29 CC0A16           (/home/strick/go/s):01539                  ldd   #C$LF*256+22   Line feed & max count for prompt string+1
0A2C A7A0             (/home/strick/go/s):01540                  sta   ,y+            Save LF as first char
0A2E 8D02             (/home/strick/go/s):01541                  bsr   L0A25          Go copy prompt string (& parse quotes)
0A30 2039             (/home/strick/go/s):01542                  bra   L0A5E          Go see if we need to override with default
                      (/home/strick/go/s):01543         
0A32 6FC901F3         (/home/strick/go/s):01544         L0A25    clr   >u01F3,u       Clear quotes in progress flag
0A36 A680             (/home/strick/go/s):01545         L0A29    lda   ,x+            Get char from default shell prompt
0A38 8122             (/home/strick/go/s):01546                  cmpa  #'"            Is it a quotes?
0A3A 2610             (/home/strick/go/s):01547                  bne   L0A3F          No, skip ahead
0A3C 3001             (/home/strick/go/s):01548                  leax  1,x            Yes, bump ptr up 2 past quotes
0A3E 6DC901F3         (/home/strick/go/s):01549                  tst   >u01F3,u       We processing quotes already?
0A42 2622             (/home/strick/go/s):01550                  bne   L0A59          Yes, we are done then
0A44 6CC901F3         (/home/strick/go/s):01551                  inc   >u01F3,u       Set processing quotes flag
0A48 301F             (/home/strick/go/s):01552                  leax  -1,x           Set ptr back to char just after quotes
0A4A 20EA             (/home/strick/go/s):01553                  bra   L0A29          Check next char
                      (/home/strick/go/s):01554                  
0A4C 810D             (/home/strick/go/s):01555         L0A3F    cmpa  #C$CR          Carriage return?
0A4E 2716             (/home/strick/go/s):01556                  beq   L0A59          Yes, we are done then
0A50 8120             (/home/strick/go/s):01557                  cmpa  #C$SPAC        Space?
0A52 2704             (/home/strick/go/s):01558                  beq   L0A4B          Yes, skip ahead
0A54 813B             (/home/strick/go/s):01559                  cmpa  #';            Semi-colon?
0A56 2606             (/home/strick/go/s):01560                  bne   L0A51          No, skip ahead
                      (/home/strick/go/s):01561         * Semi-colon or space found
0A58 6DC901F3         (/home/strick/go/s):01562         L0A4B    tst   >u01F3,u       We quoting at the moment?
0A5C 2708             (/home/strick/go/s):01563                  beq   L0A59          No, we are done
0A5E 5D               (/home/strick/go/s):01564         L0A51    tstb                 Char count down to 0?
0A5F 27D5             (/home/strick/go/s):01565                  beq   L0A29          Yes, continue parsing (but eating them)
0A61 5A               (/home/strick/go/s):01566                  decb                 Dec max char counter
0A62 A7A0             (/home/strick/go/s):01567                  sta   ,y+            Save literal char into current copy
0A64 20D0             (/home/strick/go/s):01568                  bra   L0A29          continue parsing
                      (/home/strick/go/s):01569                  
0A66 6FA4             (/home/strick/go/s):01570         L0A59    clr   ,y             Append NUL to indicate end of string
0A68 301F             (/home/strick/go/s):01571                  leax  -1,x           Bump source ptr back to last char & return
0A6A 39               (/home/strick/go/s):01572                  rts   
                      (/home/strick/go/s):01573         
0A6B C116             (/home/strick/go/s):01574         L0A5E    cmpb  #22            Did the user do a no-length prompt?
0A6D 27A8             (/home/strick/go/s):01575                  beq   L0A08          Yes, go override with default prompt
0A6F 3410             (/home/strick/go/s):01576                  pshs  x              Preserve ptr to last char of source prompt
                      (/home/strick/go/s):01577         
                      (/home/strick/go/s):01578         * Create expanded shell prompt from shell prompt string
0A71 31C901F9         (/home/strick/go/s):01579         L0A64    leay  >u01F9,u       Point to shell prompt string
0A75 30C90212         (/home/strick/go/s):01580                  leax  >u0212,u       Point to expanded prompt buffer
0A79 3410             (/home/strick/go/s):01581                  pshs  x              Preserve it a moment
0A7B 6FC901F2         (/home/strick/go/s):01582                  clr   >u01F2,u       Output device name done already = OFF
0A7F 6FC901F1         (/home/strick/go/s):01583                  clr   >u01F1,u       Process ID # done already = OFF
0A83 6FC901F4         (/home/strick/go/s):01584                  clr   >u01F4,u       Date done already = OFF
0A87 6FC901F5         (/home/strick/go/s):01585                  clr   >u01F5,u       Time done already = OFF
0A8B 6FC901F6         (/home/strick/go/s):01586                  clr   >u01F6,u       Date OR time already done once = OFF
0A8F 6FC90042         (/home/strick/go/s):01587                  clr   >u0042,u       Current working dir name done already = OFF
0A93 A6A0             (/home/strick/go/s):01588         L0A86    lda   ,y+            Get char from shell prompt string
0A95 10270098         (/home/strick/go/s):01589                  lbeq  L0B29          If end of string, exit
0A99 8123             (/home/strick/go/s):01590                  cmpa  #'#            Process ID # wanted?
0A9B 2612             (/home/strick/go/s):01591                  bne   L0AA2          No, try next
                      (/home/strick/go/s):01592         * Process ID #
0A9D 6DC901F1         (/home/strick/go/s):01593                  tst   >u01F1,u       Done it already?
0AA1 26F0             (/home/strick/go/s):01594                  bne   L0A86          Yes, skip doing it again
0AA3 6CC901F1         (/home/strick/go/s):01595                  inc   >u01F1,u       No, flag it as being done now
0AA7 ECC901EC         (/home/strick/go/s):01596                  ldd   >u01EC,u       Get process # (01-99)
0AAB ED81             (/home/strick/go/s):01597                  std   ,x++           Save in expanded prompt buffer
0AAD 20E4             (/home/strick/go/s):01598                  bra   L0A86          Continue parsing
0AAF 8140             (/home/strick/go/s):01599         L0AA2    cmpa  #'@            Standard output path device name wanted?
0AB1 2704             (/home/strick/go/s):01600                  beq   L0AAA          Yes, go do it
0AB3 81E0             (/home/strick/go/s):01601                  cmpa  #$E0           High bit version?
0AB5 261C             (/home/strick/go/s):01602                  bne   L0AC7          No, try next
                      (/home/strick/go/s):01603         * Standard output path device name
0AB7 6DC901F2         (/home/strick/go/s):01604         L0AAA    tst   >u01F2,u       Done it already?
0ABB 26D6             (/home/strick/go/s):01605                  bne   L0A86          Yes, skip doing it again
0ABD CC010E           (/home/strick/go/s):01606                  ldd   #$01*256+SS.DevNm  Standard out/get device name
0AC0 103F8D           (/home/strick/go/s):01607                  os9   I$GetStt       Get the device name
0AC3 25CE             (/home/strick/go/s):01608                  bcs   L0A86          Error, skip doing device name
0AC5 6CC901F2         (/home/strick/go/s):01609                  inc   >u01F2,u       Flag it as being done now
0AC9 A680             (/home/strick/go/s):01610         L0ABD    lda   ,x+            Get char from device name
0ACB 2AFC             (/home/strick/go/s):01611                  bpl   L0ABD          Keep looking until last char (high bit set)
0ACD 847F             (/home/strick/go/s):01612                  anda  #$7F           Mask out high bit
0ACF A71F             (/home/strick/go/s):01613                  sta   -1,x           Save the normal char
0AD1 20C0             (/home/strick/go/s):01614                  bra   L0A86          Continue parsing
0AD3 8124             (/home/strick/go/s):01615         L0AC7    cmpa  #'$            Current working directory wanted?
0AD5 2623             (/home/strick/go/s):01616                  bne   L0AF2          No, check next
                      (/home/strick/go/s):01617         * Current working directory
0AD7 0D42             (/home/strick/go/s):01618                  tst   <u0042         Done it already? (WAS ,U)
0AD9 26B8             (/home/strick/go/s):01619                  bne   L0A86          Yes, skip doing it again
0ADB 0C42             (/home/strick/go/s):01620                  inc   <u0042         Flag it as being done now (WAS ,U)
0ADD 8601             (/home/strick/go/s):01621                  lda   #$01
0ADF 973D             (/home/strick/go/s):01622                  sta   <u003D
0AE1 170D24           (/home/strick/go/s):01623                  lbsr  L176D          Go figure out current working directory
0AE4 5D               (/home/strick/go/s):01624                  tstb  
0AE5 2613             (/home/strick/go/s):01625                  bne   L0AF2
0AE7 3420             (/home/strick/go/s):01626                  pshs  y              Save prompt string ptr
0AE9 109E2A           (/home/strick/go/s):01627                  ldy   <u002A         Get pointer to current working directory
                      (/home/strick/go/s):01628         * Copy string: Y=source string ptr, X=prompt buffer ptr
0AEC A6A0             (/home/strick/go/s):01629         L0AE4    lda   ,y+            Get char
0AEE A780             (/home/strick/go/s):01630                  sta   ,x+            Save as part of shell prompt text
0AF0 810D             (/home/strick/go/s):01631                  cmpa  #C$CR          Was it the end?
0AF2 26F8             (/home/strick/go/s):01632                  bne   L0AE4          No, keep copying
0AF4 301F             (/home/strick/go/s):01633                  leax  -1,x           Bump ptr back CR
0AF6 3520             (/home/strick/go/s):01634                  puls  y              Restore source string ptr
0AF8 2099             (/home/strick/go/s):01635                  bra   L0A86          Continue parsing
                      (/home/strick/go/s):01636         
0AFA 8128             (/home/strick/go/s):01637         L0AF2    cmpa  #'(            Current Date wanted?
0AFC 2614             (/home/strick/go/s):01638                  bne   L0B0A          No, check next
                      (/home/strick/go/s):01639         * Current date
0AFE 6DC901F4         (/home/strick/go/s):01640                  tst   >u01F4,u       Done it already?
0B02 268F             (/home/strick/go/s):01641                  bne   L0A86          Yes, skip doing it again
0B04 6CC901F4         (/home/strick/go/s):01642                  inc   >u01F4,u       Flag as being done now
0B08 8D39             (/home/strick/go/s):01643                  bsr   L0B3B          Go get date & time
0B0A 3420             (/home/strick/go/s):01644                  pshs  y              Save shell prompt string ptr
0B0C 31C902E0         (/home/strick/go/s):01645                  leay  >u02E0,u       Point to date text
0B10 20DA             (/home/strick/go/s):01646                  bra   L0AE4          Copy into expanded prompt
0B12 8129             (/home/strick/go/s):01647         L0B0A    cmpa  #')            Current Time wanted?
0B14 2616             (/home/strick/go/s):01648                  bne   L0B24          No, just store the raw ASCII char
                      (/home/strick/go/s):01649         * Current time
0B16 6DC901F5         (/home/strick/go/s):01650                  tst   >u01F5,u       Done Time already?
0B1A 1026FF75         (/home/strick/go/s):01651                  lbne  L0A86          Yes, skip doing it again
0B1E 6CC901F5         (/home/strick/go/s):01652                  inc   >u01F5,u       Flag as being done now
0B22 8D1F             (/home/strick/go/s):01653                  bsr   L0B3B          Go get date & time
0B24 3420             (/home/strick/go/s):01654                  pshs  y              Save shell prompt string ptr
0B26 31C902E9         (/home/strick/go/s):01655                  leay  >u02E9,u       Point to time text
0B2A 20C0             (/home/strick/go/s):01656                  bra   L0AE4          Copy into expanded prompt
                      (/home/strick/go/s):01657         
0B2C A780             (/home/strick/go/s):01658         L0B24    sta   ,x+            Save raw character
0B2E 16FF62           (/home/strick/go/s):01659                  lbra  L0A86          Continue parsing
                      (/home/strick/go/s):01660         
0B31 A784             (/home/strick/go/s):01661         L0B29    sta   ,x             Save NUL to mark end of prompt
0B33 1F10             (/home/strick/go/s):01662                  tfr   x,d            Move End of prompt ptr to D for subtract
0B35 A3E1             (/home/strick/go/s):01663                  subd  ,s++           Subtract start of prompt ptr
0B37 EDC901F7         (/home/strick/go/s):01664                  std   >u01F7,u       Save size of expanded shell prompt
0B3B 35B0             (/home/strick/go/s):01665                  puls  pc,y,x         Restore regs & return
                      (/home/strick/go/s):01666         
                      (/home/strick/go/s):01667         * Separator table for date & time strings
0B3D 2F2F             (/home/strick/go/s):01668         L0B35    fcc   '//'
0B3F 0D               (/home/strick/go/s):01669                  fcb   C$CR
0B40 3A3A             (/home/strick/go/s):01670                  fcc   '::'
0B42 0D               (/home/strick/go/s):01671                  fcb   C$CR
                      (/home/strick/go/s):01672         
                      (/home/strick/go/s):01673         * Get current date (2E0-2E8) & time (2E9-2EF)
0B43 3430             (/home/strick/go/s):01674         L0B3B    pshs  y,x            Preserve shell prompt string & shell prompt ptrs
0B45 6DC901F6         (/home/strick/go/s):01675                  tst   >u01F6,u       Have we already been here before?
0B49 262F             (/home/strick/go/s):01676                  bne   L0B75          Yes, both date & time strings already done
0B4B 6CC901F6         (/home/strick/go/s):01677                  inc   >u01F6,u       Flag we have been here now
0B4F 30C902DA         (/home/strick/go/s):01678                  leax  >u02DA,u       Point to date/time packet buffer
0B53 103F15           (/home/strick/go/s):01679                  os9   F$Time         Get the date/time packet
0B56 31C902E0         (/home/strick/go/s):01680                  leay  >u02E0,u       Point to where date string goes
0B5A 5F               (/home/strick/go/s):01681                  clrb                 Offset into separator table to first '/'
0B5B A680             (/home/strick/go/s):01682         L0B54    lda   ,x+            Get byte from time packet
0B5D 8D1D             (/home/strick/go/s):01683                  bsr   L0B77          Convert to ASCII
0B5F 3404             (/home/strick/go/s):01684                  pshs  b              Preserve offset into separator table
0B61 ECC901EF         (/home/strick/go/s):01685                  ldd   >u01EF,u       Get ASCII version of byte
0B65 EDA1             (/home/strick/go/s):01686                  std   ,y++           Save into date/string buffers
0B67 3504             (/home/strick/go/s):01687                  puls  b              Restore offset into separator table
0B69 3420             (/home/strick/go/s):01688                  pshs  y              Preserve date/string buffer ptr
0B6B 318DFFCE         (/home/strick/go/s):01689                  leay  >L0B35,pc      Point to separator's table
0B6F A6A5             (/home/strick/go/s):01690                  lda   b,y            Get current separator
0B71 3520             (/home/strick/go/s):01691                  puls  y              Restore date/string buffer ptr
0B73 A7A0             (/home/strick/go/s):01692                  sta   ,y+            Save separator into date/string buffer
0B75 5C               (/home/strick/go/s):01693                  incb                 Point to next separator
0B76 C106             (/home/strick/go/s):01694                  cmpb  #6             On last one?
0B78 26E1             (/home/strick/go/s):01695                  bne   L0B54          No, continue converting
0B7A 35B0             (/home/strick/go/s):01696         L0B75    puls  pc,y,x         Restore prompt & buffer ptrs & return
                      (/home/strick/go/s):01697         
0B7C 3436             (/home/strick/go/s):01698         L0B77    pshs  y,x,d          Preserve regs
0B7E 318D0003         (/home/strick/go/s):01699                  leay  >L0B80,pc      Point to routine to copy ASCII digits
0B82 160BBF           (/home/strick/go/s):01700                  lbra  L16B9          Go convert byte to ASCII equivalent
                      (/home/strick/go/s):01701         
0B85 EC64             (/home/strick/go/s):01702         L0B80    ldd   $04,s          Copy 2 digit ASCII # to 1EF
0B87 EDC901EF         (/home/strick/go/s):01703                  std   >u01EF,u
0B8B 39               (/home/strick/go/s):01704                  rts   
                      (/home/strick/go/s):01705         
                      (/home/strick/go/s):01706         * Searches for CR in string pointed to by X
                      (/home/strick/go/s):01707         * '*' Comment lines come here
0B8C 860D             (/home/strick/go/s):01708         L0B87    lda   #C$CR          We want to find the CR
0B8E A180             (/home/strick/go/s):01709         L0B89    cmpa  ,x+            Found it yet?
0B90 26FC             (/home/strick/go/s):01710                  bne   L0B89          No, keep looking
0B92 A182             (/home/strick/go/s):01711                  cmpa  ,-x            Set up flags & return
0B94 39               (/home/strick/go/s):01712                  rts   
                      (/home/strick/go/s):01713         
0B95 3407             (/home/strick/go/s):01714         L0B90    pshs  d,cc           Preserve regs
0B97 8601             (/home/strick/go/s):01715                  lda   #$01           Only do std in & out (not error)
0B99 2004             (/home/strick/go/s):01716                  bra   L0B9A
                      (/home/strick/go/s):01717         
                      (/home/strick/go/s):01718         * Any errors from any of the CmdList subroutines go here
                      (/home/strick/go/s):01719         * If child process had error/status code it goes here (u005D cleared,B=Status
                      (/home/strick/go/s):01720         * code)
0B9B 3407             (/home/strick/go/s):01721         L0B96    pshs  d,cc           Preserve error code, flags & A
0B9D 8602             (/home/strick/go/s):01722                  lda   #$02           # of paths to do
0B9F 971A             (/home/strick/go/s):01723         L0B9A    sta   <u001A         Save it
0BA1 4F               (/home/strick/go/s):01724                  clra                 Start at path 0
0BA2 8D09             (/home/strick/go/s):01725         L0B9D    bsr   L0BA8          Go close (possibly dupe) paths
0BA4 4C               (/home/strick/go/s):01726                  inca                 Next path #
0BA5 911A             (/home/strick/go/s):01727                  cmpa  <u001A         Done up to last one yet?
0BA7 23F9             (/home/strick/go/s):01728                  bls   L0B9D          No, do next one
                      (/home/strick/go/s):01729         * POSSIBLY COULD BE PULS PC,D,CC
0BA9 66E0             (/home/strick/go/s):01730                  ror   ,s+            Eat CC but shift Carry bit into Carry
0BAB 3586             (/home/strick/go/s):01731                  puls  pc,d           Restore error code & A & return
                      (/home/strick/go/s):01732         
0BAD 3402             (/home/strick/go/s):01733         L0BA8    pshs  a              Save path #
0BAF 0D19             (/home/strick/go/s):01734                  tst   <u0019
0BB1 2B16             (/home/strick/go/s):01735                  bmi   L0BC4          If high bit set, close path
0BB3 260C             (/home/strick/go/s):01736                  bne   L0BBC          If 0<u0019<128, get changed path # & close
0BB5 6DC6             (/home/strick/go/s):01737                  tst   a,u            Check 'real' path # from DP
0BB7 2713             (/home/strick/go/s):01738                  beq   L0BC7          If 0, return
0BB9 103F8F           (/home/strick/go/s):01739                  os9   I$Close        Otherwise, close current path #
0BBC A6C6             (/home/strick/go/s):01740                  lda   a,u            Get 'real' path #
0BBE 103F82           (/home/strick/go/s):01741                  os9   I$Dup          Dupe it
                      (/home/strick/go/s):01742         
                      (/home/strick/go/s):01743         * Close path # on stack, if it is open
0BC1 E6E4             (/home/strick/go/s):01744         L0BBC    ldb   ,s             Get path # from stack
0BC3 A6C5             (/home/strick/go/s):01745                  lda   b,u            Get real path # from DP
0BC5 2705             (/home/strick/go/s):01746                  beq   L0BC7          If none, exit
0BC7 6FC5             (/home/strick/go/s):01747                  clr   b,u            Clear out path #
0BC9 103F8F           (/home/strick/go/s):01748         L0BC4    os9   I$Close        Close the path
0BCC 3582             (/home/strick/go/s):01749         L0BC7    puls  pc,a           Exit
                      (/home/strick/go/s):01750         
0BCE 574841543F       (/home/strick/go/s):01751         L0BC9    fcc   'WHAT?'
0BD3 0D               (/home/strick/go/s):01752                  fcb   C$CR
                      (/home/strick/go/s):01753         
0BD4 8DC5             (/home/strick/go/s):01754         L0BCF    bsr   L0B96          Close 3 std paths (possibly dupe)
0BD6 308CF5           (/home/strick/go/s):01755                  leax  <L0BC9,pc      Point to 'WHAT?'
0BD9 17F662           (/home/strick/go/s):01756                  lbsr  L021B          Write it out std err
0BDC 5F               (/home/strick/go/s):01757                  clrb  
0BDD 43               (/home/strick/go/s):01758                  coma  
0BDE 39               (/home/strick/go/s):01759                  rts   
                      (/home/strick/go/s):01760         
0BDF 0C19             (/home/strick/go/s):01761         L0BDA    inc   <u0019         ???
0BE1 8DB8             (/home/strick/go/s):01762                  bsr   L0B96          Do path closings (possibly dupings)
0BE3 86FF             (/home/strick/go/s):01763                  lda   #$FF           Set flag to just close raw paths
0BE5 9719             (/home/strick/go/s):01764                  sta   <u0019
0BE7 8DAC             (/home/strick/go/s):01765                  bsr   L0B90          Go close std in & std err
0BE9 30C86D           (/home/strick/go/s):01766                  leax  <u006D,u       Point to device name buffer
0BEC 1700F1           (/home/strick/go/s):01767                  lbsr  L0CDB
0BEF 1025F630         (/home/strick/go/s):01768                  lbcs  L0200
0BF3 8602             (/home/strick/go/s):01769                  lda   #$02
0BF5 8DB6             (/home/strick/go/s):01770                  bsr   L0BA8
0BF7 17010A           (/home/strick/go/s):01771                  lbsr  L0CFF
0BFA 0F19             (/home/strick/go/s):01772                  clr   <u0019
0BFC 16F4F4           (/home/strick/go/s):01773                  lbra  L00CC
                      (/home/strick/go/s):01774         * < processing
0BFF CC0001           (/home/strick/go/s):01775         CmdIn    ldd   #$0001
0C02 DA0F             (/home/strick/go/s):01776                  orb   <u000F
0C04 2019             (/home/strick/go/s):01777                  bra   L0C1A
                      (/home/strick/go/s):01778         * >> processing
0C06 CC020D           (/home/strick/go/s):01779         CmdErr   ldd   #$020D
0C09 E71E             (/home/strick/go/s):01780                  stb   -$02,x
0C0B 2002             (/home/strick/go/s):01781                  bra   L0C0A
                      (/home/strick/go/s):01782         * > processing
0C0D 8601             (/home/strick/go/s):01783         CmdOut   lda   #$01
0C0F C602             (/home/strick/go/s):01784         L0C0A    ldb   #$02
0C11 200C             (/home/strick/go/s):01785                  bra   L0C1A
                      (/home/strick/go/s):01786         * if from z= or i=, A=0, B=3
0C13 6DC6             (/home/strick/go/s):01787         L0C0E    tst   a,u            Test duped path?
0C15 26BD             (/home/strick/go/s):01788                  bne   L0BCF          There is one, print 'WHAT' & close paths & return
0C17 3406             (/home/strick/go/s):01789                  pshs  d              Save path # & B
0C19 0D19             (/home/strick/go/s):01790                  tst   <u0019
0C1B 2B1C             (/home/strick/go/s):01791                  bmi   L0C34
0C1D 200A             (/home/strick/go/s):01792                  bra   L0C24
                      (/home/strick/go/s):01793         
0C1F 6DC6             (/home/strick/go/s):01794         L0C1A    tst   a,u
0C21 26B1             (/home/strick/go/s):01795                  bne   L0BCF
0C23 3406             (/home/strick/go/s):01796                  pshs  d
0C25 C60D             (/home/strick/go/s):01797                  ldb   #C$CR
0C27 E71F             (/home/strick/go/s):01798                  stb   -$01,x
                      (/home/strick/go/s):01799         
0C29 103F82           (/home/strick/go/s):01800         L0C24    os9   I$Dup          Create duplicate of the standard path
0C2C 10250093         (/home/strick/go/s):01801                  lbcs  L0CBE          Couldn't create dupe, 
0C30 E6E4             (/home/strick/go/s):01802                  ldb   ,s
0C32 A7C5             (/home/strick/go/s):01803                  sta   b,u
0C34 A6E4             (/home/strick/go/s):01804                  lda   ,s
0C36 103F8F           (/home/strick/go/s):01805                  os9   I$Close  
                      (/home/strick/go/s):01806         
0C39 A661             (/home/strick/go/s):01807         L0C34    lda   1,s            Get B
0C3B 2B08             (/home/strick/go/s):01808                  bmi   L0C40
0C3D E6E4             (/home/strick/go/s):01809                  ldb   ,s
0C3F 1700C8           (/home/strick/go/s):01810                  lbsr  L0D05
0C42 4D               (/home/strick/go/s):01811                  tsta  
0C43 2A07             (/home/strick/go/s):01812                  bpl   L0C47
0C45 840F             (/home/strick/go/s):01813         L0C40    anda  #$0F
0C47 103F82           (/home/strick/go/s):01814                  os9   I$Dup    
0C4A 2077             (/home/strick/go/s):01815                  bra   L0CBE
0C4C C60B             (/home/strick/go/s):01816         L0C47    ldb   #$0B
0C4E 8502             (/home/strick/go/s):01817                  bita  #$02
0C50 262E             (/home/strick/go/s):01818                  bne   L0C7B
0C52 3402             (/home/strick/go/s):01819                  pshs  a
0C54 EC84             (/home/strick/go/s):01820                  ldd   ,x
0C56 C45F             (/home/strick/go/s):01821                  andb  #$5F
0C58 10832F57         (/home/strick/go/s):01822                  cmpd  #$2F57         Is it '/W'
0C5C 3502             (/home/strick/go/s):01823                  puls  a
0C5E 2619             (/home/strick/go/s):01824                  bne   L0C74
0C60 8A02             (/home/strick/go/s):01825                  ora   #$02
0C62 103F84           (/home/strick/go/s):01826                  os9   I$Open   
0C65 255C             (/home/strick/go/s):01827                  bcs   L0CBE
0C67 3410             (/home/strick/go/s):01828                  pshs  x
0C69 308DF3CF         (/home/strick/go/s):01829                  leax  >L003C,pc
0C6D 108E0001         (/home/strick/go/s):01830                  ldy   #$0001
0C71 4F               (/home/strick/go/s):01831                  clra  
0C72 103F8A           (/home/strick/go/s):01832                  os9   I$Write  
0C75 3510             (/home/strick/go/s):01833                  puls  x
0C77 204A             (/home/strick/go/s):01834                  bra   L0CBE
0C79 103F84           (/home/strick/go/s):01835         L0C74    os9   I$Open   
0C7C 2045             (/home/strick/go/s):01836                  bra   L0CBE
0C7E 3406             (/home/strick/go/s):01837         L0C79    pshs  d
0C80 D74E             (/home/strick/go/s):01838         L0C7B    stb   <u004E
0C82 E684             (/home/strick/go/s):01839                  ldb   ,x
0C84 C12B             (/home/strick/go/s):01840                  cmpb  #$2B
0C86 2613             (/home/strick/go/s):01841                  bne   L0C96
0C88 3001             (/home/strick/go/s):01842                  leax  $01,x
0C8A 103F84           (/home/strick/go/s):01843                  os9   I$Open   
0C8D 2527             (/home/strick/go/s):01844                  bcs   L0CB1
0C8F 3450             (/home/strick/go/s):01845                  pshs  u,x
0C91 C602             (/home/strick/go/s):01846                  ldb   #SS.Size
0C93 103F8D           (/home/strick/go/s):01847                  os9   I$GetStt 
0C96 103F88           (/home/strick/go/s):01848                  os9   I$Seek   
0C99 2012             (/home/strick/go/s):01849                  bra   L0CA8
0C9B C12D             (/home/strick/go/s):01850         L0C96    cmpb  #'-
0C9D 261F             (/home/strick/go/s):01851                  bne   L0CB9
0C9F 3001             (/home/strick/go/s):01852                  leax  1,x
0CA1 103F84           (/home/strick/go/s):01853                  os9   I$Open   
0CA4 2510             (/home/strick/go/s):01854                  bcs   L0CB1          Error opening
0CA6 3450             (/home/strick/go/s):01855                  pshs  u,x
0CA8 8E0000           (/home/strick/go/s):01856                  ldx   #$0000
0CAB 1F13             (/home/strick/go/s):01857                  tfr   x,u
0CAD C602             (/home/strick/go/s):01858         L0CA8    ldb   #SS.Size       Init size of file to 0 bytes
0CAF 103F8E           (/home/strick/go/s):01859                  os9   I$SetStt 
0CB2 3550             (/home/strick/go/s):01860                  puls  u,x
0CB4 200D             (/home/strick/go/s):01861                  bra   L0CBE
0CB6 C1D8             (/home/strick/go/s):01862         L0CB1    cmpb  #E$PNNF        Error 216 (path name not found)?
0CB8 2704             (/home/strick/go/s):01863                  beq   L0CB9          Yes, create the file
0CBA 1A01             (/home/strick/go/s):01864                  orcc  #Carry         Otherwise, set error flag
0CBC 2005             (/home/strick/go/s):01865                  bra   L0CBE
0CBE D64E             (/home/strick/go/s):01866         L0CB9    ldb   <u004E         Get file attributes
0CC0 103F83           (/home/strick/go/s):01867                  os9   I$Create 
                      (/home/strick/go/s):01868         
0CC3 9712             (/home/strick/go/s):01869         L0CBE    sta   <u0012         Save path # (or one we tried to duplicate?)
0CC5 E761             (/home/strick/go/s):01870                  stb   1,s            Save possible error code?
0CC7 8600             (/home/strick/go/s):01871                  lda   #$00           DO NOT CHANGE-NEED TO PRESERVE CARRY
0CC9 970F             (/home/strick/go/s):01872                  sta   <u000F
0CCB 3586             (/home/strick/go/s):01873                  puls  pc,d           Restore regs & return
0CCD CC0003           (/home/strick/go/s):01874         L0CC8    ldd   #$0003         Std in & ???
0CD0 16FF40           (/home/strick/go/s):01875                  lbra  L0C0E
                      (/home/strick/go/s):01876         * <>>> processing
0CD3 860D             (/home/strick/go/s):01877         CmdIOE   lda   #C$CR
0CD5 A71C             (/home/strick/go/s):01878                  sta   -$04,x
                      (/home/strick/go/s):01879         * i= & z= both come here right off the bat
0CD7 8D07             (/home/strick/go/s):01880         L0CD2    bsr   L0CDB
0CD9 2429             (/home/strick/go/s):01881                  bcc   L0CFF
0CDB 39               (/home/strick/go/s):01882         L0CD6    rts   
                      (/home/strick/go/s):01883         * <> processing
0CDC 860D             (/home/strick/go/s):01884         CmdIO    lda   #C$CR
0CDE A71E             (/home/strick/go/s):01885                  sta   -$02,x
                      (/home/strick/go/s):01886         
0CE0 8DEB             (/home/strick/go/s):01887         L0CDB    bsr   L0CC8
0CE2 25F7             (/home/strick/go/s):01888                  bcs   L0CD6
0CE4 CC0180           (/home/strick/go/s):01889                  ldd   #$0180
0CE7 16FF29           (/home/strick/go/s):01890                  lbra  L0C0E
                      (/home/strick/go/s):01891         * <>> processing
0CEA 860D             (/home/strick/go/s):01892         CmdIE    lda   #C$CR
0CEC A71D             (/home/strick/go/s):01893                  sta   -$03,x
0CEE 8DDD             (/home/strick/go/s):01894                  bsr   L0CC8
0CF0 25E9             (/home/strick/go/s):01895                  bcs   L0CD6
0CF2 CC0280           (/home/strick/go/s):01896                  ldd   #$0280
0CF5 16FF1B           (/home/strick/go/s):01897                  lbra  L0C0E
                      (/home/strick/go/s):01898         * >>> processing
0CF8 860D             (/home/strick/go/s):01899         CmdOE    lda   #C$CR
0CFA A71D             (/home/strick/go/s):01900                  sta   -$03,x
0CFC CC0102           (/home/strick/go/s):01901                  ldd   #$0102
0CFF 17FF11           (/home/strick/go/s):01902                  lbsr  L0C0E
0D02 25D7             (/home/strick/go/s):01903                  bcs   L0CD6
0D04 CC0281           (/home/strick/go/s):01904         L0CFF    ldd   #$0281
0D07 16FF09           (/home/strick/go/s):01905                  lbra  L0C0E
0D0A 3416             (/home/strick/go/s):01906         L0D05    pshs  x,d
0D0C EC81             (/home/strick/go/s):01907                  ldd   ,x++
0D0E 10832F30         (/home/strick/go/s):01908                  cmpd  #$2F30
0D12 2520             (/home/strick/go/s):01909                  bcs   L0D2F
0D14 10832F32         (/home/strick/go/s):01910                  cmpd  #$2F32
0D18 221A             (/home/strick/go/s):01911                  bhi   L0D2F
0D1A 3416             (/home/strick/go/s):01912                  pshs  x,d
0D1C 17FBFB           (/home/strick/go/s):01913                  lbsr  L0907
0D1F 3516             (/home/strick/go/s):01914                  puls  x,d
0D21 2511             (/home/strick/go/s):01915                  bcs   L0D2F
0D23 C403             (/home/strick/go/s):01916                  andb  #$03
0D25 E161             (/home/strick/go/s):01917                  cmpb  1,s
0D27 260D             (/home/strick/go/s):01918                  bne   L0D31
0D29 E6C5             (/home/strick/go/s):01919                  ldb   b,u
0D2B CA80             (/home/strick/go/s):01920         L0D26    orb   #$80
0D2D E7E4             (/home/strick/go/s):01921                  stb   ,s
0D2F 3506             (/home/strick/go/s):01922                  puls  d
0D31 3262             (/home/strick/go/s):01923                  leas  2,s
0D33 39               (/home/strick/go/s):01924                  rts   
0D34 3596             (/home/strick/go/s):01925         L0D2F    puls  pc,x,d
                      (/home/strick/go/s):01926         
0D36 6D61             (/home/strick/go/s):01927         L0D31    tst   $01,s
0D38 26F1             (/home/strick/go/s):01928                  bne   L0D26
0D3A 3410             (/home/strick/go/s):01929                  pshs  x
0D3C 1F98             (/home/strick/go/s):01930                  tfr   b,a
0D3E 30C900B5         (/home/strick/go/s):01931                  leax  >u00B5,u       Point to buffer for device name
0D42 C62F             (/home/strick/go/s):01932                  ldb   #'/            Put a slash in it
0D44 E780             (/home/strick/go/s):01933                  stb   ,x+
0D46 C60E             (/home/strick/go/s):01934                  ldb   #SS.DevNm      Get the device name
0D48 103F8D           (/home/strick/go/s):01935                  os9   I$GetStt
0D4B 2507             (/home/strick/go/s):01936                  bcs   L0D4F          Error, skip ahead
0D4D 301F             (/home/strick/go/s):01937                  leax  -1,x           Reset ptr to include '/'
0D4F 8603             (/home/strick/go/s):01938                  lda   #UPDAT.
0D51 103F84           (/home/strick/go/s):01939                  os9   I$Open   
0D54 3510             (/home/strick/go/s):01940         L0D4F    puls  x              Restore ptr to beginning (including '/')
0D56 3266             (/home/strick/go/s):01941                  leas  6,s            Eat stack
0D58 16FF68           (/home/strick/go/s):01942                  lbra  L0CBE
                      (/home/strick/go/s):01943         
0D5B 5452554520       (/home/strick/go/s):01944         L0D56    fcc   'TRUE '
0D60 0D               (/home/strick/go/s):01945         L0D5B    fcb   C$CR
0D61 46414C5345       (/home/strick/go/s):01946         L0D5C    fcc   'FALSE'
0D66 0D               (/home/strick/go/s):01947                  fcb   C$CR
                      (/home/strick/go/s):01948         
0D67 A680             (/home/strick/go/s):01949         CmdIF    lda   ,x+
0D69 815B             (/home/strick/go/s):01950                  cmpa  #'[
0D6B 2603             (/home/strick/go/s):01951                  bne   L0D6B
0D6D 1700A8           (/home/strick/go/s):01952                  lbsr  L0E15
0D70 812D             (/home/strick/go/s):01953         L0D6B    cmpa  #'-
0D72 102600CB         (/home/strick/go/s):01954                  lbne  L0E3E
0D76 E680             (/home/strick/go/s):01955                  ldb   ,x+
0D78 17009D           (/home/strick/go/s):01956                  lbsr  L0E15
0D7B 301F             (/home/strick/go/s):01957                  leax  -$01,x
0D7D 1F98             (/home/strick/go/s):01958                  tfr   b,a
0D7F 17018C           (/home/strick/go/s):01959                  lbsr  L0F0C          Convert char to uppercase if lower
0D82 8159             (/home/strick/go/s):01960                  cmpa  #'Y
0D84 263A             (/home/strick/go/s):01961                  bne   L0DBB
0D86 3410             (/home/strick/go/s):01962         L0D81    pshs  x              Preserve X
0D88 30C90124         (/home/strick/go/s):01963                  leax  >u0124,u       Point to buffer
0D8C 108E0001         (/home/strick/go/s):01964                  ldy   #$0001         Read 1 byte from error path???
0D90 8602             (/home/strick/go/s):01965                  lda   #$02
0D92 103F89           (/home/strick/go/s):01966                  os9   I$Read   
0D95 10250180         (/home/strick/go/s):01967                  lbcs  L0F17
0D99 A684             (/home/strick/go/s):01968                  lda   ,x             Get the character read
0D9B 3510             (/home/strick/go/s):01969                  puls  x
0D9D 17016E           (/home/strick/go/s):01970                  lbsr  L0F0C          Convert char to uppercase if lower
0DA0 8159             (/home/strick/go/s):01971                  cmpa  #'Y            Unless char is Y or N, re-read it
0DA2 2704             (/home/strick/go/s):01972                  beq   L0DA3
0DA4 814E             (/home/strick/go/s):01973                  cmpa  #'N
0DA6 26DE             (/home/strick/go/s):01974                  bne   L0D81
0DA8 3402             (/home/strick/go/s):01975         L0DA3    pshs  a              Preserve char on stack
0DAA 308DFFB2         (/home/strick/go/s):01976                  leax  >L0D5B,pc      Point to a Carriage return
0DAE 8602             (/home/strick/go/s):01977                  lda   #$02           Print it to std out
0DB0 108E0001         (/home/strick/go/s):01978                  ldy   #$0001
0DB4 103F8C           (/home/strick/go/s):01979                  os9   I$WritLn 
0DB7 3502             (/home/strick/go/s):01980                  puls  a              Restore char
0DB9 5F               (/home/strick/go/s):01981                  clrb  
0DBA 8159             (/home/strick/go/s):01982                  cmpa  #'Y
0DBC 273D             (/home/strick/go/s):01983                  beq   L0DF8          Print 'true' if it is a Y
0DBE 2031             (/home/strick/go/s):01984                  bra   L0DEE          Print 'false' if it is a N
                      (/home/strick/go/s):01985         
0DC0 5F               (/home/strick/go/s):01986         L0DBB    clrb  
0DC1 8146             (/home/strick/go/s):01987                  cmpa  #'F
0DC3 2720             (/home/strick/go/s):01988                  beq   L0DE0
0DC5 8145             (/home/strick/go/s):01989                  cmpa  #'E
0DC7 2604             (/home/strick/go/s):01990                  bne   L0DC8
0DC9 CA04             (/home/strick/go/s):01991                  orb   #%00000100
0DCB 2018             (/home/strick/go/s):01992                  bra   L0DE0
                      (/home/strick/go/s):01993         
0DCD 8152             (/home/strick/go/s):01994         L0DC8    cmpa  #'R
0DCF 2604             (/home/strick/go/s):01995                  bne   L0DD0
0DD1 CA01             (/home/strick/go/s):01996                  orb   #%00000001
0DD3 2010             (/home/strick/go/s):01997                  bra   L0DE0
                      (/home/strick/go/s):01998         
0DD5 8157             (/home/strick/go/s):01999         L0DD0    cmpa  #'W
0DD7 2604             (/home/strick/go/s):02000                  bne   L0DD8
0DD9 CA02             (/home/strick/go/s):02001                  orb   #%00000010
0DDB 2008             (/home/strick/go/s):02002                  bra   L0DE0
                      (/home/strick/go/s):02003         
0DDD 8144             (/home/strick/go/s):02004         L0DD8    cmpa  #'D
0DDF 10260136         (/home/strick/go/s):02005                  lbne  L0F17
0DE3 CA80             (/home/strick/go/s):02006                  orb   #%10000000
0DE5 1F98             (/home/strick/go/s):02007         L0DE0    tfr   b,a
0DE7 103F84           (/home/strick/go/s):02008                  os9   I$Open   
0DEA 2505             (/home/strick/go/s):02009                  bcs   L0DEE
0DEC 103F8F           (/home/strick/go/s):02010                  os9   I$Close  
0DEF 200A             (/home/strick/go/s):02011                  bra   L0DF8
                      (/home/strick/go/s):02012         
0DF1 8602             (/home/strick/go/s):02013         L0DEE    lda   #$02
0DF3 9743             (/home/strick/go/s):02014                  sta   <u0043
0DF5 308DFF68         (/home/strick/go/s):02015                  leax  >L0D5C,pc      Point to 'FALSE'
0DF9 2006             (/home/strick/go/s):02016                  bra   L0DFE
                      (/home/strick/go/s):02017         
0DFB 0F43             (/home/strick/go/s):02018         L0DF8    clr   <u0043
0DFD 308DFF5A         (/home/strick/go/s):02019                  leax  >L0D56,pc      Point to 'TRUE'
0E01 0D1E             (/home/strick/go/s):02020         L0DFE    tst   <u001E         Command echo on?
0E03 2709             (/home/strick/go/s):02021                  beq   CmdTHEN        No, skip ahead
0E05 108E0006         (/home/strick/go/s):02022                  ldy   #$0006         Print result of IF to std error
0E09 8602             (/home/strick/go/s):02023                  lda   #$02
0E0B 103F8C           (/home/strick/go/s):02024                  os9   I$WritLn 
0E0E 30C90124         (/home/strick/go/s):02025         CmdTHEN  leax  >u0124,u
0E12 860D             (/home/strick/go/s):02026                  lda   #C$CR
0E14 A784             (/home/strick/go/s):02027                  sta   ,x
0E16 5F               (/home/strick/go/s):02028                  clrb  
0E17 39               (/home/strick/go/s):02029                  rts   
                      (/home/strick/go/s):02030         
0E18 A680             (/home/strick/go/s):02031         L0E15    lda   ,x+
0E1A 8120             (/home/strick/go/s):02032                  cmpa  #C$SPAC
0E1C 27FA             (/home/strick/go/s):02033                  beq   L0E15
0E1E 39               (/home/strick/go/s):02034                  rts   
                      (/home/strick/go/s):02035         
0E1F 813D             (/home/strick/go/s):02036         L0E1C    cmpa  #$3D
0E21 2606             (/home/strick/go/s):02037                  bne   L0E26
0E23 965F             (/home/strick/go/s):02038                  lda   <u005F
0E25 8A01             (/home/strick/go/s):02039                  ora   #$01
0E27 2012             (/home/strick/go/s):02040                  bra   L0E38
                      (/home/strick/go/s):02041         
0E29 813C             (/home/strick/go/s):02042         L0E26    cmpa  #'<
0E2B 2606             (/home/strick/go/s):02043                  bne   L0E30
0E2D 965F             (/home/strick/go/s):02044                  lda   <u005F
0E2F 8A02             (/home/strick/go/s):02045                  ora   #$02
0E31 2008             (/home/strick/go/s):02046                  bra   L0E38
                      (/home/strick/go/s):02047         
0E33 813E             (/home/strick/go/s):02048         L0E30    cmpa  #'>
0E35 2608             (/home/strick/go/s):02049                  bne   L0E3C
                      (/home/strick/go/s):02050         * X command - Kill Shell when error occurs ON
0E37 965F             (/home/strick/go/s):02051                  lda   <u005F
0E39 8A04             (/home/strick/go/s):02052                  ora   #$04
0E3B 975F             (/home/strick/go/s):02053         L0E38    sta   <u005F
0E3D 4F               (/home/strick/go/s):02054                  clra  
0E3E 39               (/home/strick/go/s):02055                  rts   
                      (/home/strick/go/s):02056         
0E3F 43               (/home/strick/go/s):02057         L0E3C    coma  
0E40 39               (/home/strick/go/s):02058                  rts   
                      (/home/strick/go/s):02059         
0E41 812B             (/home/strick/go/s):02060         L0E3E    cmpa  #'+
0E43 2604             (/home/strick/go/s):02061                  bne   L0E46
0E45 0C15             (/home/strick/go/s):02062                  inc   <u0015
0E47 2002             (/home/strick/go/s):02063                  bra   L0E48
                      (/home/strick/go/s):02064         
0E49 301F             (/home/strick/go/s):02065         L0E46    leax  -1,x
0E4B 0F5F             (/home/strick/go/s):02066         L0E48    clr   <u005F
0E4D 3440             (/home/strick/go/s):02067                  pshs  u
0E4F 33C90124         (/home/strick/go/s):02068                  leau  >u0124,u
0E53 C6B4             (/home/strick/go/s):02069                  ldb   #180           Clear out 180 bytes @ u0124
0E55 17F5E0           (/home/strick/go/s):02070                  lbsr  L0412
0E58 3540             (/home/strick/go/s):02071                  puls  u
0E5A 31C90124         (/home/strick/go/s):02072                  leay  >u0124,u
0E5E C651             (/home/strick/go/s):02073                  ldb   #81
0E60 A680             (/home/strick/go/s):02074         L0E5D    lda   ,x+            Copy buffer up to CR or 81 chars
0E62 1700A9           (/home/strick/go/s):02075                  lbsr  L0F0C          Convert char to uppercase if lower
0E65 A7A0             (/home/strick/go/s):02076                  sta   ,y+
0E67 810D             (/home/strick/go/s):02077                  cmpa  #C$CR
0E69 102700AC         (/home/strick/go/s):02078                  lbeq  L0F17
0E6D 8DB0             (/home/strick/go/s):02079                  bsr   L0E1C
0E6F 2406             (/home/strick/go/s):02080                  bcc   L0E74
0E71 5A               (/home/strick/go/s):02081                  decb  
0E72 26EC             (/home/strick/go/s):02082                  bne   L0E5D
0E74 1600A2           (/home/strick/go/s):02083                  lbra  L0F17
                      (/home/strick/go/s):02084         
0E77 50               (/home/strick/go/s):02085         L0E74    negb  
0E78 CB51             (/home/strick/go/s):02086                  addb  #81
0E7A D716             (/home/strick/go/s):02087                  stb   <u0016
0E7C 4F               (/home/strick/go/s):02088                  clra  
0E7D A73F             (/home/strick/go/s):02089                  sta   -$01,y
0E7F A684             (/home/strick/go/s):02090                  lda   ,x
0E81 8D9C             (/home/strick/go/s):02091                  bsr   L0E1C
0E83 2502             (/home/strick/go/s):02092                  bcs   L0E84
0E85 3001             (/home/strick/go/s):02093                  leax  $01,x
0E87 31C90175         (/home/strick/go/s):02094         L0E84    leay  >u0175,u
0E8B C651             (/home/strick/go/s):02095                  ldb   #81
0E8D A680             (/home/strick/go/s):02096         L0E8A    lda   ,x+
0E8F 8D7D             (/home/strick/go/s):02097                  bsr   L0F0C          Convert char to uppercase if lower
0E91 A7A0             (/home/strick/go/s):02098                  sta   ,y+
0E93 810D             (/home/strick/go/s):02099                  cmpa  #C$CR
0E95 2705             (/home/strick/go/s):02100                  beq   L0E99
0E97 5A               (/home/strick/go/s):02101                  decb  
0E98 26F3             (/home/strick/go/s):02102                  bne   L0E8A
0E9A 207D             (/home/strick/go/s):02103                  bra   L0F17
                      (/home/strick/go/s):02104         
0E9C 50               (/home/strick/go/s):02105         L0E99    negb  
0E9D CB51             (/home/strick/go/s):02106                  addb  #$51
0E9F D717             (/home/strick/go/s):02107                  stb   <u0017
0EA1 4F               (/home/strick/go/s):02108                  clra  
0EA2 A73F             (/home/strick/go/s):02109                  sta   -$01,y
0EA4 0D15             (/home/strick/go/s):02110                  tst   <u0015
0EA6 273A             (/home/strick/go/s):02111                  beq   L0EE0
0EA8 30C9166D         (/home/strick/go/s):02112                  leax  >u166D,u
0EAC CC30B4           (/home/strick/go/s):02113                  ldd   #$30b4         Store 180 ASCII 0's into buffer
0EAF A780             (/home/strick/go/s):02114         L0EAD    sta   ,x+
0EB1 5A               (/home/strick/go/s):02115                  decb  
0EB2 26FB             (/home/strick/go/s):02116                  bne   L0EAD
0EB4 30C90124         (/home/strick/go/s):02117                  leax  >u0124,u
0EB8 D616             (/home/strick/go/s):02118                  ldb   <u0016
0EBA 3085             (/home/strick/go/s):02119                  leax  b,x
0EBC 31C916BD         (/home/strick/go/s):02120                  leay  >u16BD,u
0EC0 8D18             (/home/strick/go/s):02121                  bsr   L0ED8
0EC2 30C90175         (/home/strick/go/s):02122                  leax  >u0175,u
0EC6 D617             (/home/strick/go/s):02123                  ldb   <u0017
0EC8 3085             (/home/strick/go/s):02124                  leax  b,x
0ECA 31C9170E         (/home/strick/go/s):02125                  leay  >u170E,u
0ECE 8D0A             (/home/strick/go/s):02126                  bsr   L0ED8
0ED0 30C9166D         (/home/strick/go/s):02127                  leax  >u166D,u
0ED4 31C916BE         (/home/strick/go/s):02128                  leay  >u16BE,u
0ED8 2010             (/home/strick/go/s):02129                  bra   L0EE8
                      (/home/strick/go/s):02130         
0EDA A682             (/home/strick/go/s):02131         L0ED8    lda   ,-x
0EDC A7A2             (/home/strick/go/s):02132                  sta   ,-y
0EDE 5A               (/home/strick/go/s):02133                  decb  
0EDF 26F9             (/home/strick/go/s):02134                  bne   L0ED8
0EE1 39               (/home/strick/go/s):02135                  rts   
                      (/home/strick/go/s):02136         
0EE2 30C90124         (/home/strick/go/s):02137         L0EE0    leax  >u0124,u
0EE6 31C90175         (/home/strick/go/s):02138                  leay  >u0175,u
0EEA C650             (/home/strick/go/s):02139         L0EE8    ldb   #80
0EEC A680             (/home/strick/go/s):02140         L0EEA    lda   ,x+
0EEE A1A0             (/home/strick/go/s):02141                  cmpa  ,y+
0EF0 250B             (/home/strick/go/s):02142                  blo   L0EFB
0EF2 220F             (/home/strick/go/s):02143                  bhi   L0F01
0EF4 5A               (/home/strick/go/s):02144                  decb  
0EF5 26F5             (/home/strick/go/s):02145                  bne   L0EEA
0EF7 965F             (/home/strick/go/s):02146                  lda   <u005F
0EF9 8501             (/home/strick/go/s):02147                  bita  #$01
0EFB 200A             (/home/strick/go/s):02148                  bra   L0F05
                      (/home/strick/go/s):02149         
0EFD 965F             (/home/strick/go/s):02150         L0EFB    lda   <u005F
0EFF 8502             (/home/strick/go/s):02151                  bita  #$02
0F01 2004             (/home/strick/go/s):02152                  bra   L0F05
                      (/home/strick/go/s):02153         
0F03 965F             (/home/strick/go/s):02154         L0F01    lda   <u005F
0F05 8504             (/home/strick/go/s):02155                  bita  #$04
0F07 1026FEF0         (/home/strick/go/s):02156         L0F05    lbne  L0DF8
0F0B 16FEE3           (/home/strick/go/s):02157                  lbra  L0DEE
                      (/home/strick/go/s):02158         
                      (/home/strick/go/s):02159         * Convert char to uppercase if it is a letter
0F0E 8161             (/home/strick/go/s):02160         L0F0C    cmpa  #'a            Lower case letter?
0F10 2506             (/home/strick/go/s):02161                  blo   L0F16          No, return
0F12 817A             (/home/strick/go/s):02162                  cmpa  #'z            Check high range
0F14 2202             (/home/strick/go/s):02163                  bhi   L0F16          No, return
0F16 8020             (/home/strick/go/s):02164                  suba  #$20           Yes, convert to uppercase
0F18 39               (/home/strick/go/s):02165         L0F16    rts   
                      (/home/strick/go/s):02166         
0F19 53               (/home/strick/go/s):02167         L0F17    comb  
0F1A C601             (/home/strick/go/s):02168                  ldb   #$01
0F1C 16F295           (/home/strick/go/s):02169                  lbra  L0191
                      (/home/strick/go/s):02170         
0F1F 8103             (/home/strick/go/s):02171         L0F1D    cmpa  #$03
0F21 271E             (/home/strick/go/s):02172                  beq   CmdCLRIF
0F23 8102             (/home/strick/go/s):02173                  cmpa  #$02
0F25 2606             (/home/strick/go/s):02174                  bne   L0F2B
0F27 0A44             (/home/strick/go/s):02175                  dec   <u0044
0F29 2D16             (/home/strick/go/s):02176                  blt   CmdCLRIF
0F2B 2018             (/home/strick/go/s):02177                  bra   L0F43
                      (/home/strick/go/s):02178         
0F2D 8101             (/home/strick/go/s):02179         L0F2B    cmpa  #$01
0F2F 260C             (/home/strick/go/s):02180                  bne   L0F3B
0F31 9643             (/home/strick/go/s):02181                  lda   <u0043
0F33 8102             (/home/strick/go/s):02182                  cmpa  #$02
0F35 260E             (/home/strick/go/s):02183                  bne   L0F43
0F37 0D44             (/home/strick/go/s):02184                  tst   <u0044
0F39 2706             (/home/strick/go/s):02185                  beq   CmdCLRIF
0F3B 2008             (/home/strick/go/s):02186                  bra   L0F43
                      (/home/strick/go/s):02187         
0F3D 0C44             (/home/strick/go/s):02188         L0F3B    inc   <u0044
0F3F 2004             (/home/strick/go/s):02189                  bra   L0F43
                      (/home/strick/go/s):02190         
0F41 0F43             (/home/strick/go/s):02191         CmdCLRIF clr   <u0043
0F43 0F44             (/home/strick/go/s):02192                  clr   <u0044
0F45 5F               (/home/strick/go/s):02193         L0F43    clrb  
0F46 39               (/home/strick/go/s):02194                  rts   
                      (/home/strick/go/s):02195         
                      (/home/strick/go/s):02196         * Table: 7 bytes/entry:
                      (/home/strick/go/s):02197         * 1st 5 bytes is name, high bit set & NUL padded
                      (/home/strick/go/s):02198         * Byte 6 is # bytes actually used
0F47 49C6             (/home/strick/go/s):02199         L0F45    fcs   'IF'
0F49 0000000200       (/home/strick/go/s):02200                  fcb   0,0,0,2,0
0F4E 454C53C5         (/home/strick/go/s):02201                  fcs   'ELSE'
0F52 000401           (/home/strick/go/s):02202                  fcb   0,4,1
0F55 454E4449C6       (/home/strick/go/s):02203                  fcs   'ENDIF'
0F5A 0502             (/home/strick/go/s):02204                  fcb   5,2
0F5C 46C9             (/home/strick/go/s):02205                  fcs   'FI'
0F5E 0000000202       (/home/strick/go/s):02206                  fcb   0,0,0,2,2
0F63 434C5249C6       (/home/strick/go/s):02207                  fcs   'CLRIF'
0F68 0503             (/home/strick/go/s):02208                  fcb   5,3
0F6A FF               (/home/strick/go/s):02209                  fcb   $ff
                      (/home/strick/go/s):02210         
0F6B 318CD9           (/home/strick/go/s):02211         L0F69    leay  <L0F45,pc      Point to conditionals table
0F6E E625             (/home/strick/go/s):02212         L0F6D    ldb   5,y            Get actual length of string we are checking
0F70 103F11           (/home/strick/go/s):02213                  os9   F$CmpNam       Compare with string pointed to by X
0F73 250C             (/home/strick/go/s):02214                  bcs   L0F80          If they don't match, skip ahead
0F75 A626             (/home/strick/go/s):02215                  lda   6,y            Get conditional token(?) number
0F77 E685             (/home/strick/go/s):02216                  ldb   b,x            Get char past end of matching string
0F79 C10D             (/home/strick/go/s):02217                  cmpb  #C$CR          Is it a CR?
0F7B 271D             (/home/strick/go/s):02218                  beq   L0F8B          Yes, return
0F7D C120             (/home/strick/go/s):02219                  cmpb  #C$SPAC        Is it a space?
0F7F 2719             (/home/strick/go/s):02220                  beq   L0F8B          Yes, return
0F81 3127             (/home/strick/go/s):02221         L0F80    leay  7,y            Point to next command in table
0F83 A6A4             (/home/strick/go/s):02222                  lda   ,y             Get 1st char from this entry
0F85 81FF             (/home/strick/go/s):02223                  cmpa  #$FF           End of table marker?
0F87 2711             (/home/strick/go/s):02224                  beq   L0F8B          Yes, return
                      (/home/strick/go/s):02225         * NOTE: THIS INCA SEEMS TO BE USELESS, AS F$CMPNAM DOESN'T USE A
0F89 4C               (/home/strick/go/s):02226                  inca                 No, ???
0F8A 20E2             (/home/strick/go/s):02227                  bra   L0F6D          Process this one
                      (/home/strick/go/s):02228         
0F8C 8601             (/home/strick/go/s):02229         CmdELSE  lda   #$01
0F8E 9743             (/home/strick/go/s):02230                  sta   <u0043
0F90 16FE7B           (/home/strick/go/s):02231                  lbra  CmdTHEN
                      (/home/strick/go/s):02232         
0F93 17F984           (/home/strick/go/s):02233         CmdONERR lbsr  L0907          Go find 1st non-space char or single char modifier
0F96 2603             (/home/strick/go/s):02234                  bne   L0F9B
0F98 0F46             (/home/strick/go/s):02235                  clr   <u0046
0F9A 39               (/home/strick/go/s):02236         L0F8B    rts   
                      (/home/strick/go/s):02237         
0F9B 318DF433         (/home/strick/go/s):02238         L0F9B    leay  >L03AC,pc    Point to 'GOTO'
0F9F C604             (/home/strick/go/s):02239                  ldb   #4           4 chars to compare
0FA1 103F11           (/home/strick/go/s):02240                  os9   F$CmpNam     Does it match?
0FA4 1025FC2C         (/home/strick/go/s):02241                  lbcs  L0BCF        No, print 'WHAT?'
0FA8 3004             (/home/strick/go/s):02242                  leax  4,x          Yes, skip X past 'GOTO'
0FAA 17F985           (/home/strick/go/s):02243                  lbsr  L091F        Go find 1st non-space char past 'GOTO'
0FAD 31C90C4C         (/home/strick/go/s):02244                  leay  >u0C4C,u     Point to some sort of buffer
0FB1 A684             (/home/strick/go/s):02245                  lda   ,x           Get char from GOTO label
0FB3 812B             (/home/strick/go/s):02246                  cmpa  #'+          Is label after current pos. in script file?
0FB5 2604             (/home/strick/go/s):02247                  bne   L0FBB        No, skip ahead
0FB7 A7A0             (/home/strick/go/s):02248                  sta   ,y+          Save '+' in buffer
0FB9 3001             (/home/strick/go/s):02249                  leax  1,x          Bump up source ptr past '+'
0FBB 8D4E             (/home/strick/go/s):02250         L0FBB    bsr   L100B        Go copy label name into buffer
0FBD 0C46             (/home/strick/go/s):02251                  inc   <u0046       Set flag that a GOTO was found
0FBF A680             (/home/strick/go/s):02252         L0FBF    lda   ,x+          Get 1st char from user's label again
0FC1 318DF469         (/home/strick/go/s):02253                  leay  >L0408,pc    Point to single char modifiers table
0FC5 A1A0             (/home/strick/go/s):02254         L0FC5    cmpa  ,y+          Illegal modifier char in label name?
0FC7 22FC             (/home/strick/go/s):02255                  bhi   L0FC5        Not yet, check other modifiers
0FC9 25F4             (/home/strick/go/s):02256                  blo   L0FBF        This char ok, check rest of label name
0FCB 301F             (/home/strick/go/s):02257                  leax  -1,x         Point to last char (terminator) of label name
0FCD 9F58             (/home/strick/go/s):02258                  stx   <u0058       Save it & return
0FCF 39               (/home/strick/go/s):02259                  rts
                      (/home/strick/go/s):02260         
0FD0 A684             (/home/strick/go/s):02261         CmdGOTO  lda   ,x
0FD2 812B             (/home/strick/go/s):02262                  cmpa  #'+
0FD4 2604             (/home/strick/go/s):02263                  bne   L0FDA
0FD6 3001             (/home/strick/go/s):02264                  leax  1,x
0FD8 2021             (/home/strick/go/s):02265                  bra   L0FFB
0FDA 0D6B             (/home/strick/go/s):02266         L0FDA    tst   <u006B
0FDC 270C             (/home/strick/go/s):02267                  beq   L0FEA
0FDE 109E67           (/home/strick/go/s):02268                  ldy   <u0067
0FE1 EC29             (/home/strick/go/s):02269                  ldd   $09,y
0FE3 31AB             (/home/strick/go/s):02270                  leay  d,y
0FE5 109F65           (/home/strick/go/s):02271                  sty   <u0065
0FE8 2011             (/home/strick/go/s):02272                  bra   L0FFB
0FEA 3450             (/home/strick/go/s):02273         L0FEA    pshs  u,x
0FEC 4F               (/home/strick/go/s):02274                  clra  
0FED 8E0000           (/home/strick/go/s):02275                  ldx   #$0000         Seek to beginning
0FF0 1F13             (/home/strick/go/s):02276                  tfr   x,u
0FF2 103F88           (/home/strick/go/s):02277                  os9   I$Seek   
0FF5 3550             (/home/strick/go/s):02278                  puls  u,x
0FF7 1025F1B9         (/home/strick/go/s):02279                  lbcs  L0191
0FFB 17F934           (/home/strick/go/s):02280         L0FFB    lbsr  L091F
0FFE 31C90BFC         (/home/strick/go/s):02281                  leay  >u0BFC,u
1002 8D07             (/home/strick/go/s):02282                  bsr   L100B
1004 860D             (/home/strick/go/s):02283                  lda   #C$CR
1006 A784             (/home/strick/go/s):02284                  sta   ,x
1008 0C45             (/home/strick/go/s):02285                  inc   <u0045
100A 39               (/home/strick/go/s):02286                  rts   
                      (/home/strick/go/s):02287         
                      (/home/strick/go/s):02288         * Copy label from X to buffer @ Y, terminate at 1st illegal char with CR
                      (/home/strick/go/s):02289         * Exit: X=ptr to start of label name from user's buffer
                      (/home/strick/go/s):02290         *       Y=ptr to start of buffer entry copy of label name
100B 3430             (/home/strick/go/s):02291         L100B    pshs  y,x            Preserve buffer & source ptrs
100D C64F             (/home/strick/go/s):02292                  ldb   #79            (78 bytes to check)
100F 5A               (/home/strick/go/s):02293         L100F    decb                 Dec # chars left to check
1010 2710             (/home/strick/go/s):02294                  beq   L1022          If done max, skip ahead
1012 A680             (/home/strick/go/s):02295                  lda   ,x+            Get char for label
1014 A7A0             (/home/strick/go/s):02296                  sta   ,y+            Save in buffer
1016 8141             (/home/strick/go/s):02297                  cmpa  #'A            Is it a letter or higher?
1018 24F5             (/home/strick/go/s):02298                  bhs   L100F          Yes, continue copying
101A 8130             (/home/strick/go/s):02299                  cmpa  #'0            Is it lower than a #?
101C 2504             (/home/strick/go/s):02300                  blo   L1022          Yes, not allowed, force end of label name
101E 8139             (/home/strick/go/s):02301                  cmpa  #'9            Is it a #?
1020 23ED             (/home/strick/go/s):02302                  bls   L100F          Yes, that is fine
1022 860D             (/home/strick/go/s):02303         L1022    lda   #C$CR          All others illegal, force CR in buffer copy
1024 A73F             (/home/strick/go/s):02304                  sta   -1,y           Save it
1026 5F               (/home/strick/go/s):02305                  clrb                 No error
1027 35B0             (/home/strick/go/s):02306                  puls  pc,y,x         Restore regs & return
                      (/home/strick/go/s):02307         
                      (/home/strick/go/s):02308         * M= command (???)
1029 C60D             (/home/strick/go/s):02309         CmdMEq   ldb   #C$CR
102B E71F             (/home/strick/go/s):02310                  stb   -$01,x
102D 0D6B             (/home/strick/go/s):02311                  tst   <u006B
102F 2626             (/home/strick/go/s):02312                  bne   L1057
1031 0D6C             (/home/strick/go/s):02313                  tst   <u006C
1033 2622             (/home/strick/go/s):02314                  bne   L1057
1035 8640             (/home/strick/go/s):02315                  lda   #Data          Data module type
1037 3470             (/home/strick/go/s):02316                  pshs  u,y,x
1039 103F00           (/home/strick/go/s):02317                  os9   F$Link
103C 2517             (/home/strick/go/s):02318                  bcs   L1055
103E DF67             (/home/strick/go/s):02319                  stu   <u0067         Save start address of module
1040 109F65           (/home/strick/go/s):02320                  sty   <u0065         Save execution address of module
1043 EC42             (/home/strick/go/s):02321                  ldd   2,u
1045 D367             (/home/strick/go/s):02322                  addd  <u0067
1047 830003           (/home/strick/go/s):02323                  subd  #$0003
104A DD69             (/home/strick/go/s):02324                  std   <u0069
104C 0C6B             (/home/strick/go/s):02325                  inc   <u006B
104E 3570             (/home/strick/go/s):02326                  puls  u,y,x
1050 301F             (/home/strick/go/s):02327                  leax  -$01,x
1052 16F8C5           (/home/strick/go/s):02328                  lbra  L0907
                      (/home/strick/go/s):02329         
1055 3570             (/home/strick/go/s):02330         L1055    puls  u,y,x
1057 16FB7A           (/home/strick/go/s):02331         L1057    lbra  L0BCF
                      (/home/strick/go/s):02332         
                      (/home/strick/go/s):02333         * VAR. command
105A 31C905A8         (/home/strick/go/s):02334         CmdVAR   leay  >u05A8,u
105E A680             (/home/strick/go/s):02335                  lda   ,x+
1060 813F             (/home/strick/go/s):02336                  cmpa  #'?
1062 2765             (/home/strick/go/s):02337                  beq   L10C9
1064 813D             (/home/strick/go/s):02338                  cmpa  #'=
1066 272E             (/home/strick/go/s):02339                  beq   L1096
1068 8120             (/home/strick/go/s):02340                  cmpa  #C$SPAC
106A 2719             (/home/strick/go/s):02341                  beq   L1085
106C 813B             (/home/strick/go/s):02342                  cmpa  #';
106E 2715             (/home/strick/go/s):02343                  beq   L1085
1070 8139             (/home/strick/go/s):02344                  cmpa  #'9
1072 2211             (/home/strick/go/s):02345                  bhi   L1085
1074 8130             (/home/strick/go/s):02346                  cmpa  #'0
1076 250D             (/home/strick/go/s):02347                  bcs   L1085
1078 8030             (/home/strick/go/s):02348                  suba  #$30
107A C651             (/home/strick/go/s):02349                  ldb   #$51           Multiply by 81 (size of each VAR entry)
107C 3D               (/home/strick/go/s):02350                  mul   
107D 31AB             (/home/strick/go/s):02351                  leay  d,y
107F A680             (/home/strick/go/s):02352                  lda   ,x+
1081 813D             (/home/strick/go/s):02353                  cmpa  #'=
1083 2711             (/home/strick/go/s):02354                  beq   L1096
1085 301F             (/home/strick/go/s):02355         L1085    leax  -$01,x
1087 3410             (/home/strick/go/s):02356                  pshs  x
1089 1F21             (/home/strick/go/s):02357                  tfr   y,x
108B 108E0051         (/home/strick/go/s):02358                  ldy   #$0051
108F 8602             (/home/strick/go/s):02359                  lda   #$02
1091 103F8B           (/home/strick/go/s):02360                  os9   I$ReadLn 
1094 3590             (/home/strick/go/s):02361                  puls  pc,x
                      (/home/strick/go/s):02362         
1096 C650             (/home/strick/go/s):02363         L1096    ldb   #80
1098 17F997           (/home/strick/go/s):02364                  lbsr  L0A25
109B 860D             (/home/strick/go/s):02365                  lda   #C$CR
109D A7A4             (/home/strick/go/s):02366                  sta   ,y
109F 39               (/home/strick/go/s):02367                  rts   
                      (/home/strick/go/s):02368         
10A0 0A               (/home/strick/go/s):02369         L10A0    fcb   C$LF
10A1 5573657220566172 (/home/strick/go/s):02370                  fcc   'User Variables :'
     6961626C6573203A
10B1 0D               (/home/strick/go/s):02371                  fcb   C$CR
                      (/home/strick/go/s):02372         
10B2 0A               (/home/strick/go/s):02373         L10B2    fcb   C$LF
10B3 5368656C6C205375 (/home/strick/go/s):02374                  fcc   'Shell Sub Variables :'
     6220566172696162
     6C6573203A
10C8 0D               (/home/strick/go/s):02375                  fcb   C$CR
                      (/home/strick/go/s):02376         
10C9 3410             (/home/strick/go/s):02377         L10C9    pshs  x
10CB 5F               (/home/strick/go/s):02378                  clrb
10CC 308DFFD0         (/home/strick/go/s):02379                  leax  >L10A0,pc
10D0 8D0D             (/home/strick/go/s):02380                  bsr   L10DF
10D2 31C908D2         (/home/strick/go/s):02381                  leay  >u08D2,u
10D6 5F               (/home/strick/go/s):02382                  clrb  
10D7 308DFFD7         (/home/strick/go/s):02383                  leax  >L10B2,pc
10DB 8D02             (/home/strick/go/s):02384                  bsr   L10DF
10DD 3590             (/home/strick/go/s):02385                  puls  pc,x
                      (/home/strick/go/s):02386         
10DF 3424             (/home/strick/go/s):02387         L10DF    pshs  y,b
10E1 17F15A           (/home/strick/go/s):02388                  lbsr  L021B
10E4 3524             (/home/strick/go/s):02389                  puls  y,b
10E6 3424             (/home/strick/go/s):02390         L10E6    pshs  y,b
10E8 8651             (/home/strick/go/s):02391                  lda   #$51
10EA 3D               (/home/strick/go/s):02392                  mul   
10EB 31AB             (/home/strick/go/s):02393                  leay  d,y
10ED 30C90124         (/home/strick/go/s):02394                  leax  >u0124,u
10F1 CC5641           (/home/strick/go/s):02395                  ldd   #'V*256+'A
10F4 ED81             (/home/strick/go/s):02396                  std   ,x++
10F6 CC522E           (/home/strick/go/s):02397                  ldd   #'R*256+'.
10F9 ED81             (/home/strick/go/s):02398                  std   ,x++
10FB A6E4             (/home/strick/go/s):02399                  lda   ,s
10FD 8B30             (/home/strick/go/s):02400         L10FD    adda  #$30
10FF C63D             (/home/strick/go/s):02401                  ldb   #'=
1101 ED81             (/home/strick/go/s):02402                  std   ,x++
1103 A6A0             (/home/strick/go/s):02403         L1103    lda   ,y+
1105 A780             (/home/strick/go/s):02404                  sta   ,x+
1107 810D             (/home/strick/go/s):02405                  cmpa  #C$CR
1109 26F8             (/home/strick/go/s):02406                  bne   L1103
110B 30C90124         (/home/strick/go/s):02407                  leax  >u0124,u
110F 108E0057         (/home/strick/go/s):02408                  ldy   #$0057
1113 8601             (/home/strick/go/s):02409                  lda   #$01
1115 103F8C           (/home/strick/go/s):02410                  os9   I$WritLn 
1118 3524             (/home/strick/go/s):02411                  puls  y,b
111A 2506             (/home/strick/go/s):02412                  bcs   L1122
111C 5C               (/home/strick/go/s):02413                  incb  
111D C10A             (/home/strick/go/s):02414                  cmpb  #C$LF
111F 25C5             (/home/strick/go/s):02415                  bcs   L10E6
1121 39               (/home/strick/go/s):02416                  rts   
                      (/home/strick/go/s):02417         
1122 3520             (/home/strick/go/s):02418         L1122    puls  y
1124 3590             (/home/strick/go/s):02419                  puls  pc,x
                      (/home/strick/go/s):02420         
                      (/home/strick/go/s):02421         * INC. command (increment shell variable by 1)
1126 8D1C             (/home/strick/go/s):02422         CmdINC   bsr   L1144
1128 1025F088         (/home/strick/go/s):02423                  lbcs  L0191
112C C30001           (/home/strick/go/s):02424                  addd  #$0001
112F 2009             (/home/strick/go/s):02425                  bra   L113A
                      (/home/strick/go/s):02426         
                      (/home/strick/go/s):02427         * DEC. command (decrement shell variable by 1)
1131 8D11             (/home/strick/go/s):02428         CmdDEC   bsr   L1144
1133 1025F07D         (/home/strick/go/s):02429                  lbcs  L0191
1137 830001           (/home/strick/go/s):02430                  subd  #$0001
113A 8D6B             (/home/strick/go/s):02431         L113A    bsr   L11A7
113C 860D             (/home/strick/go/s):02432                  lda   #C$CR
113E A725             (/home/strick/go/s):02433                  sta   $05,y
1140 9E48             (/home/strick/go/s):02434                  ldx   <u0048
1142 5F               (/home/strick/go/s):02435                  clrb  
1143 39               (/home/strick/go/s):02436                  rts   
                      (/home/strick/go/s):02437         
1144 0C14             (/home/strick/go/s):02438         L1144    inc   <u0014
1146 31C905A8         (/home/strick/go/s):02439                  leay  >u05A8,u
114A A680             (/home/strick/go/s):02440                  lda   ,x+
114C 9F48             (/home/strick/go/s):02441                  stx   <u0048
114E 8130             (/home/strick/go/s):02442                  cmpa  #'0
1150 250F             (/home/strick/go/s):02443                  bcs   L1161
1152 8139             (/home/strick/go/s):02444                  cmpa  #'9
1154 220B             (/home/strick/go/s):02445                  bhi   L1161
1156 8030             (/home/strick/go/s):02446                  suba  #$30
1158 C651             (/home/strick/go/s):02447                  ldb   #81
115A 3D               (/home/strick/go/s):02448                  mul   
115B 31AB             (/home/strick/go/s):02449                  leay  d,y
115D 1F21             (/home/strick/go/s):02450                  tfr   y,x
115F 2005             (/home/strick/go/s):02451                  bra   L1166
                      (/home/strick/go/s):02452         
1161 3262             (/home/strick/go/s):02453         L1161    leas  2,s
1163 16FA6E           (/home/strick/go/s):02454                  lbra  L0BCF
                      (/home/strick/go/s):02455         
1166 3420             (/home/strick/go/s):02456         L1166    pshs  y
1168 327B             (/home/strick/go/s):02457                  leas  -$05,s
116A 1F42             (/home/strick/go/s):02458                  tfr   s,y
116C 6F23             (/home/strick/go/s):02459                  clr   $03,y
116E 6F24             (/home/strick/go/s):02460                  clr   $04,y
1170 6F22             (/home/strick/go/s):02461         L1170    clr   $02,y
1172 A680             (/home/strick/go/s):02462                  lda   ,x+
1174 8030             (/home/strick/go/s):02463                  suba  #$30
1176 8109             (/home/strick/go/s):02464                  cmpa  #$09
1178 221B             (/home/strick/go/s):02465                  bhi   L1195
117A 3402             (/home/strick/go/s):02466                  pshs  a
117C 860A             (/home/strick/go/s):02467                  lda   #10
117E E623             (/home/strick/go/s):02468                  ldb   $03,y
1180 3D               (/home/strick/go/s):02469                  mul   
1181 EDA4             (/home/strick/go/s):02470                  std   ,y
1183 A624             (/home/strick/go/s):02471                  lda   $04,y
1185 C60A             (/home/strick/go/s):02472                  ldb   #10
1187 3D               (/home/strick/go/s):02473                  mul   
1188 E321             (/home/strick/go/s):02474                  addd  $01,y
118A ED21             (/home/strick/go/s):02475                  std   $01,y
118C 4F               (/home/strick/go/s):02476                  clra  
118D 3504             (/home/strick/go/s):02477                  puls  b
118F E321             (/home/strick/go/s):02478                  addd  $01,y
1191 ED23             (/home/strick/go/s):02479                  std   $03,y
1193 20DB             (/home/strick/go/s):02480                  bra   L1170
                      (/home/strick/go/s):02481         
1195 EC23             (/home/strick/go/s):02482         L1195    ldd   3,y
1197 3265             (/home/strick/go/s):02483                  leas  5,s
1199 35A0             (/home/strick/go/s):02484                  puls  pc,y
                      (/home/strick/go/s):02485         
                      (/home/strick/go/s):02486         * 2 byte ASCII conversion table
119B 2710             (/home/strick/go/s):02487         L119B    fdb   10000
119D 03E8             (/home/strick/go/s):02488                  fdb   1000
119F 0064             (/home/strick/go/s):02489                  fdb   100
11A1 000A             (/home/strick/go/s):02490                  fdb   10
11A3 0001             (/home/strick/go/s):02491                  fdb   1
11A5 0000             (/home/strick/go/s):02492                  fdb   0
                      (/home/strick/go/s):02493         
11A7 3436             (/home/strick/go/s):02494         L11A7    pshs  y,x,d
11A9 3404             (/home/strick/go/s):02495                  pshs  b
11AB 308DFFEC         (/home/strick/go/s):02496                  leax  >L119B,pc
11AF 3406             (/home/strick/go/s):02497         L11AF    pshs  d
11B1 C62F             (/home/strick/go/s):02498                  ldb   #'/
11B3 E762             (/home/strick/go/s):02499                  stb   2,s
11B5 3506             (/home/strick/go/s):02500                  puls  d
11B7 6CE4             (/home/strick/go/s):02501         L11B7    inc   ,s
11B9 A384             (/home/strick/go/s):02502                  subd  ,x
11BB 24FA             (/home/strick/go/s):02503                  bcc   L11B7
11BD E381             (/home/strick/go/s):02504                  addd  ,x++
11BF 3406             (/home/strick/go/s):02505                  pshs  d
11C1 E662             (/home/strick/go/s):02506                  ldb   $02,s
11C3 E7A0             (/home/strick/go/s):02507                  stb   ,y+
11C5 A601             (/home/strick/go/s):02508                  lda   $01,x
11C7 3506             (/home/strick/go/s):02509                  puls  d
11C9 26E4             (/home/strick/go/s):02510                  bne   L11AF
11CB 3504             (/home/strick/go/s):02511                  puls  b
11CD 35B6             (/home/strick/go/s):02512                  puls  pc,y,x,d
                      (/home/strick/go/s):02513         
                      (/home/strick/go/s):02514         * PAUSE command - may display text message, and then waits for key press or
                      (/home/strick/go/s):02515         * mouse button
11CF 108E018A         (/home/strick/go/s):02516         CmdPAUSE ldy   #394           Write up to 394 chars of pause string
11D3 8602             (/home/strick/go/s):02517                  lda   #$02           To standard error
11D5 103F8C           (/home/strick/go/s):02518                  os9   I$WritLn 
11D8 1025EFD8         (/home/strick/go/s):02519                  lbcs  L0191
11DC 1F20             (/home/strick/go/s):02520                  tfr   y,d            Tfr # chars written to D
11DE 308B             (/home/strick/go/s):02521                  leax  d,x            Point X to next char after ones written
11E0 301F             (/home/strick/go/s):02522                  leax  -1,x           Point to last char written
11E2 3410             (/home/strick/go/s):02523                  pshs  x              Save ptr
11E4 CC021A           (/home/strick/go/s):02524                  ldd   #$02*256+SS.SSig  Std Err/Send signal when key pressed
11E7 8E000A           (/home/strick/go/s):02525                  ldx   #$000A         Signal $A is the one to send
11EA 103F8E           (/home/strick/go/s):02526                  os9   I$SetStt 
11ED 1025EFC3         (/home/strick/go/s):02527                  lbcs  L0191          Error, use main shell error handler
                      (/home/strick/go/s):02528                  IFGT  Level-1
11F1 C68A             (/home/strick/go/s):02529                  ldb   #SS.MsSig      Send signal on mouse button press
11F3 103F8E           (/home/strick/go/s):02530                  os9   I$SetStt 
11F6 1025EFBA         (/home/strick/go/s):02531                  lbcs  L0191
                      (/home/strick/go/s):02532                  ENDC
11FA 8E0000           (/home/strick/go/s):02533                  ldx   #$0000         Go to sleep until one of the 2 is received
11FD 103F0A           (/home/strick/go/s):02534                  os9   F$Sleep  
1200 C61B             (/home/strick/go/s):02535                  ldb   #SS.Relea      Signal gotten, release all signals
1202 103F8E           (/home/strick/go/s):02536                  os9   I$SetStt 
1205 5F               (/home/strick/go/s):02537                  clrb                 No error & return
1206 3590             (/home/strick/go/s):02538                  puls  pc,x
                      (/home/strick/go/s):02539         
                      (/home/strick/go/s):02540         * Parse PATH=, add paths to PATH buffer list
1208                  (/home/strick/go/s):02541         CmdPATHEq
1208 3410             (/home/strick/go/s):02542                  pshs  x              Preserve ptr to string after 'PATH='
120A A684             (/home/strick/go/s):02543                  lda   ,x             Get 1st char
120C 813F             (/home/strick/go/s):02544                  cmpa  #'?            User requesting current paths?
120E 2734             (/home/strick/go/s):02545                  beq   L1245          Yes, go do that
1210 3440             (/home/strick/go/s):02546                  pshs  u              Preserve U
1212 33C90CDD         (/home/strick/go/s):02547                  leau  >u0CDD,u       Point to PATH= buffer
1216 A680             (/home/strick/go/s):02548         L1217    lda   ,x+            Get char from user-requested path
1218 8120             (/home/strick/go/s):02549                  cmpa  #C$SPAC        Space?
121A 27FA             (/home/strick/go/s):02550                  beq   L1217          Yes, eat spaces until 1st real char found
121C A7C0             (/home/strick/go/s):02551                  sta   ,u+            No, save char
121E 318DF20C         (/home/strick/go/s):02552         L121F    leay  >L0408,pc      Point to command modifier list
1222 A1A0             (/home/strick/go/s):02553         L1223    cmpa  ,y+            Match char?
1224 22FC             (/home/strick/go/s):02554                  bhi   L1223          No, our char is higher, check next modifier
1226 270E             (/home/strick/go/s):02555                  beq   L1237          Found match, skip ahead
1228 A680             (/home/strick/go/s):02556                  lda   ,x+            No modifier found, get next char
122A A7C0             (/home/strick/go/s):02557                  sta   ,u+            Save in PATH buffer
122C 8120             (/home/strick/go/s):02558                  cmpa  #C$SPAC        Was it a space?
122E 26EE             (/home/strick/go/s):02559                  bne   L121F          No, check this char vs. modifier list
1230 860D             (/home/strick/go/s):02560                  lda   #C$CR          Yes, change to CR
1232 A75F             (/home/strick/go/s):02561                  sta   -1,u           Save CR instead (terminate 1 path entry)
1234 20E0             (/home/strick/go/s):02562                  bra   L1217          Do whole list
                      (/home/strick/go/s):02563         
                      (/home/strick/go/s):02564         * NOTE: ANY modifier (not just CR, but ! # & ; < > ^ |) stops PATH=parsing
1236 301F             (/home/strick/go/s):02565         L1237    leax  -1,x           Bump ptr back to last char from user
1238 AF62             (/home/strick/go/s):02566                  stx   2,s            Save ptr on stack over original X
123A 860D             (/home/strick/go/s):02567                  lda   #C$CR          Get CR
123C A75F             (/home/strick/go/s):02568                  sta   -1,u           Save CR as current path end
123E A7C4             (/home/strick/go/s):02569                  sta   ,u             And 1 extra for parse routines
1240 3540             (/home/strick/go/s):02570                  puls  u              Get U back
1242 3590             (/home/strick/go/s):02571                  puls  pc,x           Restore new X & return
                      (/home/strick/go/s):02572         
1244 30C90CDD         (/home/strick/go/s):02573         L1245    leax  >u0CDD,u       Point to start of PATH=buffer
1248 108E0190         (/home/strick/go/s):02574         L1249    ldy   #400           Write up to 400 chars to standard out
124C 8601             (/home/strick/go/s):02575                  lda   #$01
124E 103F8C           (/home/strick/go/s):02576                  os9   I$WritLn       Print text of one path
1251 1025EF5F         (/home/strick/go/s):02577                  lbcs  L0191          Error, go process shell error
1255 1F20             (/home/strick/go/s):02578                  tfr   y,d            Tfr # bytes written to D
1257 308B             (/home/strick/go/s):02579                  leax  d,x            Offset X to end of what was printed
1259 A684             (/home/strick/go/s):02580                  lda   ,x             Get char from there
125B 810D             (/home/strick/go/s):02581                  cmpa  #C$CR          CR (end of path list)?
125D 26E9             (/home/strick/go/s):02582                  bne   L1249          No, go write next path out
125F 3510             (/home/strick/go/s):02583                  puls  x              Restore ptr to next set of PATH=
1261 3001             (/home/strick/go/s):02584                  leax  1,x            Bump ptr up by 1 & return
1263 39               (/home/strick/go/s):02585                  rts   
                      (/home/strick/go/s):02586         
                      (/home/strick/go/s):02587         * ^ (set priority on the fly) command
1264 C60D             (/home/strick/go/s):02588         CmdCaret ldb   #C$CR          Plop a CR onto the end
1266 E71F             (/home/strick/go/s):02589                  stb   -$01,x
1268 D622             (/home/strick/go/s):02590                  ldb   <u0022         Any priority already set?
126A 1026F966         (/home/strick/go/s):02591                  lbne  L0BCF          Yes, print 'WHAT?'
126E 170515           (/home/strick/go/s):02592                  lbsr  L16EB          Go calculate binary priority into B
1271 D722             (/home/strick/go/s):02593                  stb   <u0022         Save priority to fork module with
1273 16F6A4           (/home/strick/go/s):02594                  lbra  L0907          Continue processing for modifiers
                      (/home/strick/go/s):02595         
                      (/home/strick/go/s):02596         * # (set data memory size) command
1276 C60D             (/home/strick/go/s):02597         CmdMem   ldb   #C$CR
1278 E71F             (/home/strick/go/s):02598                  stb   -1,x
127A D603             (/home/strick/go/s):02599                  ldb   <u0003       Already have a data mem size set?
127C 1026F954         (/home/strick/go/s):02600                  lbne  L0BCF        Yes, print 'WHAT?'
1280 170503           (/home/strick/go/s):02601                  lbsr  L16EB
1283 884B             (/home/strick/go/s):02602                  eora  #'K
1285 84DF             (/home/strick/go/s):02603                  anda  #$DF         Force uppercase
1287 260A             (/home/strick/go/s):02604                  bne   L1294        No 'K', just save # of 256 byte pages
1289 3001             (/home/strick/go/s):02605                  leax  1,x
128B 8604             (/home/strick/go/s):02606                  lda   #4           Multiply # of K by 4 to get # pages
128D 3D               (/home/strick/go/s):02607                  mul   
128E 4D               (/home/strick/go/s):02608                  tsta  
128F 1026F941         (/home/strick/go/s):02609                  lbne  L0BCF        Ended up too big, print 'WHAT?'
1293 D703             (/home/strick/go/s):02610         L1294    stb   <u0003       Save data mem size to use
1295 16F682           (/home/strick/go/s):02611                  lbra  L0907        Continue processing command line
                      (/home/strick/go/s):02612         
                      (/home/strick/go/s):02613         * Carriage return processing
1298 301F             (/home/strick/go/s):02614         CmdCR    leax  -1,x
129A 170236           (/home/strick/go/s):02615                  lbsr  L145D
129D 2003             (/home/strick/go/s):02616                  bra   L12A3
                      (/home/strick/go/s):02617         
                      (/home/strick/go/s):02618         * ; (separator) command (also called by others)
129F 17022D           (/home/strick/go/s):02619         CmdSEMIC lbsr  L1459
12A2 2515             (/home/strick/go/s):02620         L12A3    bcs   L12BA
12A4 17F8F4           (/home/strick/go/s):02621                  lbsr  L0B96          Go do the path stuff
12A7 0D5D             (/home/strick/go/s):02622                  tst   <u005D         Is there a module that is unlinking?
12A9 2602             (/home/strick/go/s):02623                  bne   L12AE          Yes
12AB 8D24             (/home/strick/go/s):02624                  bsr   L12D2          Go wait for child process to die (A=process #)
                      (/home/strick/go/s):02625         
12AD 250A             (/home/strick/go/s):02626         L12AE    bcs   L12BA          If child exited with status/signal code,skip
12AF 17F668           (/home/strick/go/s):02627                  lbsr  L0907          Go parse for modifiers
12B2 810D             (/home/strick/go/s):02628                  cmpa  #C$CR          Was the next non-space/comma char a CR?
12B4 2602             (/home/strick/go/s):02629                  bne   L12B9          No, skip ahead
12B6 3264             (/home/strick/go/s):02630                  leas  4,s            Yes, eat stack
12B8 5F               (/home/strick/go/s):02631         L12B9    clrb                 No error
                      (/home/strick/go/s):02632         
                      (/home/strick/go/s):02633         * Child process had a signal/status code
12B9 3401             (/home/strick/go/s):02634         L12BA    pshs  cc             Preserve error status
12BB 0F5D             (/home/strick/go/s):02635                  clr   <u005D         ???
12BD 3501             (/home/strick/go/s):02636                  puls  cc             Restore carry
12BF 16F8D9           (/home/strick/go/s):02637                  lbra  L0B96          ??? Go close some paths & return?
                      (/home/strick/go/s):02638         
                      (/home/strick/go/s):02639         * & (background operation) command
12C2 17020A           (/home/strick/go/s):02640         CmdAmp   lbsr  L1459
12C5 25F2             (/home/strick/go/s):02641                  bcs   L12BA
12C7 8DF0             (/home/strick/go/s):02642                  bsr   L12BA
12C9 C626             (/home/strick/go/s):02643                  ldb   #$26
12CB 170470           (/home/strick/go/s):02644                  lbsr  L16B3
12CE 20DD             (/home/strick/go/s):02645                  bra   L12AE
                      (/home/strick/go/s):02646         
                      (/home/strick/go/s):02647         * W command - Wait for a child to die
12D0 4F               (/home/strick/go/s):02648         CmdW     clra                 Clear process ID #
                      (/home/strick/go/s):02649         * Entered here if commands are separated with ';' (or '()' groups)
12D1 3402             (/home/strick/go/s):02650         L12D2    pshs  a              Save ID # of process?
12D3 103F04           (/home/strick/go/s):02651         L12D4    os9   F$Wait         Wait for child to die or until signal received
12D6 0D0E             (/home/strick/go/s):02652                  tst   <u000E         Signal received (which would be in SHELL)?
12D8 2711             (/home/strick/go/s):02653                  beq   L12EC          No, child was exited (or got signal), go process
                      (/home/strick/go/s):02654         * Shell was interrupted by signal while Waiting
12DA D60E             (/home/strick/go/s):02655                  ldb   <u000E         Get signal that we received
12DC C102             (/home/strick/go/s):02656                  cmpb  #S$Abort       Was it a PD.QUT (<CTRL>-<E>) (quit 'W'aiting?)
12DE 2625             (/home/strick/go/s):02657                  bne   L1304          No, skip ahead
12E0 A6E4             (/home/strick/go/s):02658                  lda   ,s             Get process #
12E2 2721             (/home/strick/go/s):02659                  beq   L1304          None, exit
12E4 103F08           (/home/strick/go/s):02660                  os9   F$Send         Send the signal to the child as well
12E7 6FE4             (/home/strick/go/s):02661                  clr   ,s             Clear process #
12E9 20E8             (/home/strick/go/s):02662                  bra   L12D4          Go Wait again (until child dies)
                      (/home/strick/go/s):02663         
                      (/home/strick/go/s):02664         * Child F$Exited or was aborted - eat should go here
                      (/home/strick/go/s):02665         * Entry: A=ID # of deceased child
                      (/home/strick/go/s):02666         *        B=Exit (error) code from child
12EB 1025008F         (/home/strick/go/s):02667         L12EC    lbcs   L1308         If F$Wait exited with error, return with it
12EF A1E4             (/home/strick/go/s):02668                  cmpa  ,s             Same process # as one we were waiting for?
12F1 2712             (/home/strick/go/s):02669                  beq   L1304          Yes, exit
12F3 6DE4             (/home/strick/go/s):02670                  tst   ,s             No, was there a specific process # we wanted?
12F5 2703             (/home/strick/go/s):02671                  beq   L12F9          No, skip ahead
                      (/home/strick/go/s):02672         * Child died, but not the one we were waiting for
12F7 5D               (/home/strick/go/s):02673                  tstb                 Was there an error status?
12F8 27D9             (/home/strick/go/s):02674                  beq   L12D4          No, ignore dead child and wait for one we wanted
                      (/home/strick/go/s):02675         * Child died with error on exit
12FA 3404             (/home/strick/go/s):02676         L12F9    pshs  b              Preserve child's exit status code
12FC 8DBB             (/home/strick/go/s):02677                  bsr   L12BA          ??? Go close & re-dupe paths?
12FE C62D             (/home/strick/go/s):02678                  ldb   #'-            Get a '-' (for a '-003' process finished msg)
1300 17043B           (/home/strick/go/s):02679                  lbsr  L16B3          Print that out
1303 3504             (/home/strick/go/s):02680                  puls  b              Get back exit status code
                      (/home/strick/go/s):02681         
1305 5D               (/home/strick/go/s):02682         L1304    tstb                 is there an Error/signal code?
1306 2776             (/home/strick/go/s):02683                  beq   L1308          No, exit
1308 C103             (/home/strick/go/s):02684                  cmpb  #S$Intrpt      Yes, is it a keyboard interrupt signal?
130A 2704             (/home/strick/go/s):02685                  beq   eatchar        Yes, eat the key
130C C102             (/home/strick/go/s):02686                  cmpb  #S$Abort       Keyboard abort signal?
130E 266D             (/home/strick/go/s):02687                  bne   errexit        No, exit with unknown error/signal code
                      (/home/strick/go/s):02688         
                      (/home/strick/go/s):02689         * At this point, child died from signal 2 or 3 (CTRL-C or CTRL-E). The corres-
                      (/home/strick/go/s):02690         *  ponding key is also sitting in this devices PD.BUF as the 1st char. We musts
                      (/home/strick/go/s):02691         * 1) Disable keyboard signal & eat the key from the buffer
                      (/home/strick/go/s):02692         * 2) Exit from here with Carry set & signal (2 or 3) in B
1310 3434             (/home/strick/go/s):02693         eatchar  pshs  b,x,y          Preserve signal code & regs used
1312 CC0001           (/home/strick/go/s):02694                  ldd   #SS.Ready      Std in, check for data ready on device
1315 103F8D           (/home/strick/go/s):02695                  os9   I$GetStt       Check it
1318 2561             (/home/strick/go/s):02696                  bcs   NotSCF         No chars waiting on device, exit with signal
131A 9618             (/home/strick/go/s):02697                  lda   <u0018         Is the shell immortal?
131C 275D             (/home/strick/go/s):02698                  beq   NotSCF         No, don't try to eat the char
131E 4F               (/home/strick/go/s):02699         eat      clra                 Standard in path
131F 32E8E0           (/home/strick/go/s):02700                  leas  -PD.OPT,s      Make 32 byte buffer for OPT's
1322 30E4             (/home/strick/go/s):02701                  leax  ,s             Point X to it
1324 5F               (/home/strick/go/s):02702                  clrb                 SS.Opt call
1325 103F8D           (/home/strick/go/s):02703                  os9   I$GetStt       Get current path options
1328 A684             (/home/strick/go/s):02704                  lda   ,x             Get device type
132A 2705             (/home/strick/go/s):02705                  beq   Eatkey         SCF (not script file) so go eat key
132C 32E820           (/home/strick/go/s):02706         NoChar   leas  PD.OPT,s       Eat temp buffer
132F 204A             (/home/strick/go/s):02707                  bra   NotSCF         Exit with signal code (script file got signal)
                      (/home/strick/go/s):02708                  
                      (/home/strick/go/s):02709         * Have to eat key: Shut echo off 1st
1331 6F04             (/home/strick/go/s):02710         Eatkey   clr   4,x            PD.EKO flag off
1333 103F8E           (/home/strick/go/s):02711                  os9   I$SetStt       Shut echo off
1336 CC001B           (/home/strick/go/s):02712                  ldd   #SS.Relea      Std In, Release keyboard/mouse signals
1339 103F8E           (/home/strick/go/s):02713                  os9   I$SetStt       Shut signals off so we don't get stuck
133C 30E2             (/home/strick/go/s):02714                  leax  ,-s            Make 1 byte buffer on stack
133E 108E0001         (/home/strick/go/s):02715                  ldy   #1             1 byte to read
1342 103F89           (/home/strick/go/s):02716                  os9   I$Read         Eat the char
1345 3261             (/home/strick/go/s):02717                  leas  1,s            eat buffer
1347 CC001A           (/home/strick/go/s):02718                  ldd   #SS.SSig       Std In, send signal on key ready
134A 8E000B           (/home/strick/go/s):02719                  ldx   #$B            Signal to send
134D 103F8E           (/home/strick/go/s):02720                  os9   I$SetStt       Turn keyboard signal on again
1350 30E4             (/home/strick/go/s):02721                  leax  ,s             Point to temp buffer again
1352 6C04             (/home/strick/go/s):02722                  inc   4,x            PD.EKO flag on
1354 4F               (/home/strick/go/s):02723                  clra                 Std In
1355 5F               (/home/strick/go/s):02724                  clrb                 Set Options
1356 103F8E           (/home/strick/go/s):02725                  os9   I$SetStt       Turn echo back on
1359 32E820           (/home/strick/go/s):02726                  leas  PD.OPT,s       Deallocate temp buffer
135C E6C9180D         (/home/strick/go/s):02727                  ldb   u180D,u        Get current history line #
1360 C101             (/home/strick/go/s):02728                  cmpb  #1             First one?
1362 2205             (/home/strick/go/s):02729                  bhi   Previous       No, B=previous one
1364 E6C9180C         (/home/strick/go/s):02730                  ldb   u180C,u        Was on first, so get last
1368 5C               (/home/strick/go/s):02731                  incb                 Adjust for dec
1369 5A               (/home/strick/go/s):02732         Previous decb                 Point to previous one
136A 1706C4           (/home/strick/go/s):02733                  lbsr  L19D3          Go get ptr to history
136D A6A4             (/home/strick/go/s):02734                  lda   ,y             Get 1st char from previous line in history
136F A784             (/home/strick/go/s):02735                  sta   ,x             Save char there
1371 CC00A0           (/home/strick/go/s):02736                  ldd   #SS.Fill       Fill keyboard buffer call to Std In
1374 108E8001         (/home/strick/go/s):02737                  ldy   #$8001         1 char long, don't append CR
1378 103F8E           (/home/strick/go/s):02738                  os9   I$SetStt       Stick that key into the keyboard buffer
137B 3534             (/home/strick/go/s):02739         NotSCF   puls  b,x,y          Restore regs (and exit status byte in B)
137D 43               (/home/strick/go/s):02740         errexit  coma                 Yes, set carry & exit
137E 3582             (/home/strick/go/s):02741         L1308    puls  pc,a
                      (/home/strick/go/s):02742         
                      (/home/strick/go/s):02743         * Level 2: If data area <4.25K, force up to 7.5K
                      (/home/strick/go/s):02744         * Exit: A=Type/language
                      (/home/strick/go/s):02745         *       X=Current source line parsing ptr (module name to chain)
                      (/home/strick/go/s):02746         *       Y=Size of parameter area
                      (/home/strick/go/s):02747         *       U=Ptr to parameter area
                      (/home/strick/go/s):02748         *       B=Size of data area
1380 8611             (/home/strick/go/s):02749         L130A    lda   #Prgrm+Objct   Module type/language
1382 D603             (/home/strick/go/s):02750                  ldb   <u0003         Get # pages of data mem needed for forked module
                      (/home/strick/go/s):02751                  IFGT  Level-1
1384 C111             (/home/strick/go/s):02752                  cmpb  #$11           Is it at least 17?
1386 2404             (/home/strick/go/s):02753                  bhs   L1316          Yes, skip ahead
1388 C61F             (/home/strick/go/s):02754                  ldb   #$1F           Otherwise, force to 7.5K minimum
138A D703             (/home/strick/go/s):02755                  stb   <u0003         Save it
                      (/home/strick/go/s):02756                  ENDC
138C 1CFE             (/home/strick/go/s):02757         L1316    andcc #^Carry        Clear carry
138E 9E04             (/home/strick/go/s):02758                  ldx   <u0004         Get mem module ptr
1390 109E06           (/home/strick/go/s):02759                  ldy   <u0006         Get size of current command group
1393 DE08             (/home/strick/go/s):02760                  ldu   <u0008         Get ptr to start of current command group
1395 39               (/home/strick/go/s):02761                  rts   
                      (/home/strick/go/s):02762         
                      (/home/strick/go/s):02763         * Copy string from X to Y until CR is hit
1396 A680             (/home/strick/go/s):02764         L1320    lda   ,x+            Get char
1398 A7A0             (/home/strick/go/s):02765                  sta   ,y+            Save it
139A 810D             (/home/strick/go/s):02766                  cmpa  #C$CR          Carriage return?
139C 26F8             (/home/strick/go/s):02767                  bne   L1320          No, keep copying
139E 39               (/home/strick/go/s):02768                  rts                  Done, return
                      (/home/strick/go/s):02769         
                      (/home/strick/go/s):02770         * Attempt load in module to execute (it's not in memory)
                      (/home/strick/go/s):02771         * Entry: X=Ptr to module name
139F 8604             (/home/strick/go/s):02772         L1329    lda   #EXEC.         1st, attempt to get it from current Exec DIR
13A1 103F84           (/home/strick/go/s):02773                  os9   I$Open         Attempt to open it
13A4 2432             (/home/strick/go/s):02774                  bcc   L1362          Found it, continue
                      (/home/strick/go/s):02775         * Possible search thru PATH= settings
13A6 0C0F             (/home/strick/go/s):02776                  inc   <u000F         ??? Set flag to indicate using PATH=
13A8 30C90CDD         (/home/strick/go/s):02777                  leax  >u0CDD,u       Point to start of PATH= list
13AC 5F               (/home/strick/go/s):02778         L1336    clrb  
13AD A684             (/home/strick/go/s):02779                  lda   ,x             Get 1st char from next PATH= line
13AF 810D             (/home/strick/go/s):02780                  cmpa  #C$CR          End of list?
13B1 10270223         (/home/strick/go/s):02781                  lbeq  L1564          Yes, ???
13B5 31C90124         (/home/strick/go/s):02782                  leay  >u0124,u       No, point to temp buffer
13B9 8DDB             (/home/strick/go/s):02783                  bsr   L1320          Copy path to temp buffer until CR
13BB 3410             (/home/strick/go/s):02784                  pshs  x              Preserve ptr to next possible path
13BD 862F             (/home/strick/go/s):02785                  lda   #'/            Add slash since we want file from this path
13BF A73F             (/home/strick/go/s):02786                  sta   -1,y           Save at end of path in temp buffer
13C1 9E04             (/home/strick/go/s):02787                  ldx   <u0004         Get ptr to module/script name we are looking for
13C3 8DD1             (/home/strick/go/s):02788                  bsr   L1320          Copy it into temp buffer up to CR
13C5 30C90124         (/home/strick/go/s):02789                  leax  >u0124,u       Point to start of full path list
13C9 8601             (/home/strick/go/s):02790                  lda   #READ.         Attempt to open file
13CB 103F84           (/home/strick/go/s):02791                  os9   I$Open   
13CE 3510             (/home/strick/go/s):02792                  puls  x              Restore ptr to next possible path
13D0 25DA             (/home/strick/go/s):02793                  bcs   L1336          Didn't find file there, try next path
13D2 30C90124         (/home/strick/go/s):02794                  leax  >u0124,u       Point to full pathlist again
13D6 9F04             (/home/strick/go/s):02795                  stx   <u0004         Replace ptr to module with full pathlist ptr
13D8 30C900D6         (/home/strick/go/s):02796         L1362    leax  >u00D6,u       Point to buffer to hold beginning of file
13DC 108E004D         (/home/strick/go/s):02797                  ldy   #77            77 bytes to read
13E0 103F89           (/home/strick/go/s):02798                  os9   I$Read         Read it in
13E3 2404             (/home/strick/go/s):02799                  bcc   L1373          No error, skip ahead
13E5 C1D3             (/home/strick/go/s):02800                  cmpb  #E$EOF         Just EOF error?
13E7 265B             (/home/strick/go/s):02801                  bne   L13CE          No, something more serious, skip ahead
13E9 0D0F             (/home/strick/go/s):02802         L1373    tst   <u000F
13EB 2604             (/home/strick/go/s):02803                  bne   L137B
13ED C604             (/home/strick/go/s):02804                  ldb   #$04
13EF D70F             (/home/strick/go/s):02805                  stb   <u000F
13F1 3402             (/home/strick/go/s):02806         L137B    pshs  a              Save path # a sec
13F3 EC84             (/home/strick/go/s):02807                  ldd   M$ID,x         Get possible module header bytes
13F5 108387CD         (/home/strick/go/s):02808                  cmpd  #M$ID12        Legit module header?
13F9 3502             (/home/strick/go/s):02809                  puls  a              Restore path #
13FB 270F             (/home/strick/go/s):02810                  beq   L1396          OS9 module, skip ahead
                      (/home/strick/go/s):02811         * Not module...possible shell script?
13FD 103F8F           (/home/strick/go/s):02812                  os9   I$Close        Not OS9 module, close file
1400 5F               (/home/strick/go/s):02813                  clrb  
1401 0A0F             (/home/strick/go/s):02814                  dec   <u000F         Dec flag
1403 102701D1         (/home/strick/go/s):02815                  lbeq  L1564          If 0, skip ahead
1407 0C0F             (/home/strick/go/s):02816                  inc   <u000F         If not, inc & skip ahead
1409 1601CC           (/home/strick/go/s):02817                  lbra  L1564
                      (/home/strick/go/s):02818         
                      (/home/strick/go/s):02819         * Seems to be OS9 module
140C 0F0F             (/home/strick/go/s):02820         L1396    clr   <u000F         Clear flag
140E 10AE04           (/home/strick/go/s):02821                  ldy   M$Name,x       Get offset to module name
1411 30C900E3         (/home/strick/go/s):02822                  leax  >u00E3,u       Point X to offset $E in module
1415 108C000D         (/home/strick/go/s):02823                  cmpy  #$000D         Does the name start at offset $D?
1419 271B             (/home/strick/go/s):02824                  beq   L13C0          Yes, skip ahead
141B 3440             (/home/strick/go/s):02825                  pshs  u              Preserve U
141D 1F23             (/home/strick/go/s):02826                  tfr   y,u            Move name offset to U
141F 8E0000           (/home/strick/go/s):02827                  ldx   #$0000         MSW of file pos=0
1422 103F88           (/home/strick/go/s):02828                  os9   I$Seek         Go seek to that spot in file
1425 3540             (/home/strick/go/s):02829                  puls  u              Restore U
1427 251B             (/home/strick/go/s):02830                  bcs   L13CE          Error seeking, go handle
1429 108E0040         (/home/strick/go/s):02831                  ldy   #64            Go read up to 64 char filename
142D 30C900E3         (/home/strick/go/s):02832                  leax  >u00E3,u       Point to spot to hold filename
1431 103F89           (/home/strick/go/s):02833                  os9   I$Read         Read it in
1434 250E             (/home/strick/go/s):02834                  bcs   L13CE          Error reading, go handle
1436 3402             (/home/strick/go/s):02835         L13C0    pshs  a              Save path #
1438 103F10           (/home/strick/go/s):02836                  os9   F$PrsNam       Parse module name
143B 3502             (/home/strick/go/s):02837                  puls  a              Restore path #
143D 2505             (/home/strick/go/s):02838                  bcs   L13CE
143F C140             (/home/strick/go/s):02839                  cmpb  #$40
1441 2255             (/home/strick/go/s):02840                  bhi   L1422
1443 5F               (/home/strick/go/s):02841                  clrb  
1444 3405             (/home/strick/go/s):02842         L13CE    pshs  b,cc         Preserve error status
1446 103F8F           (/home/strick/go/s):02843                  os9   I$Close      Close file
1449 3505             (/home/strick/go/s):02844                  puls  b,cc         Restore error status
144B 10250268         (/home/strick/go/s):02845                  lbcs  L162B        If error, exit with it (S/B L162C)
144F 30C900D6         (/home/strick/go/s):02846                  leax  >u00D6,u     Point to buffer holding 77 bytes of file
1453 A606             (/home/strick/go/s):02847                  lda   $06,x
1455 10AE0B           (/home/strick/go/s):02848                  ldy   $0B,x
1458 8140             (/home/strick/go/s):02849                  cmpa  #$40
145A 2621             (/home/strick/go/s):02850                  bne   L1407
145C 8D07             (/home/strick/go/s):02851                  bsr   L13EF
145E 10250255         (/home/strick/go/s):02852                  lbcs  L162B
1462 1600C0           (/home/strick/go/s):02853                  lbra  L14AF
1465 30C900E3         (/home/strick/go/s):02854         L13EF    leax  >u00E3,u
                      (/home/strick/go/s):02855                  IFGT  Level-1
1469 103F21           (/home/strick/go/s):02856                  os9   F$NMLink
                      (/home/strick/go/s):02857                  ELSE
                      (/home/strick/go/s):02858                  pshs  u
                      (/home/strick/go/s):02859                  os9   F$Link
                      (/home/strick/go/s):02860                  puls  u
                      (/home/strick/go/s):02861                  ENDC
146C 2408             (/home/strick/go/s):02862                  bcc   L1400
146E 9E04             (/home/strick/go/s):02863                  ldx   <u0004
                      (/home/strick/go/s):02864                  IFGT  Level-1
1470 103F22           (/home/strick/go/s):02865                  os9   F$NMLoad
                      (/home/strick/go/s):02866                  ELSE
                      (/home/strick/go/s):02867                  pshs  u
                      (/home/strick/go/s):02868                  os9   F$Load
                      (/home/strick/go/s):02869                  puls  u
                      (/home/strick/go/s):02870                  ENDC
1473 2401             (/home/strick/go/s):02871                  bcc   L1400
1475 39               (/home/strick/go/s):02872                  rts   
1476 30C900E3         (/home/strick/go/s):02873         L1400    leax  >u00E3,u
147A 9F04             (/home/strick/go/s):02874                  stx   <u0004
147C 39               (/home/strick/go/s):02875                  rts   
147D 8151             (/home/strick/go/s):02876         L1407    cmpa  #$51
147F 2608             (/home/strick/go/s):02877                  bne   L1413
1481 8DE2             (/home/strick/go/s):02878                  bsr   L13EF
1483 10250230         (/home/strick/go/s):02879                  lbcs  L162B
1487 2014             (/home/strick/go/s):02880                  bra   L1427
1489 8111             (/home/strick/go/s):02881         L1413    cmpa  #$11
148B 102600BE         (/home/strick/go/s):02882                  lbne  L14D7
148F 30C900E3         (/home/strick/go/s):02883                  leax  >u00E3,u
1493 9F10             (/home/strick/go/s):02884                  stx   <u0010
1495 1601B3           (/home/strick/go/s):02885                  lbra  L15D7
1498 17F443           (/home/strick/go/s):02886         L1422    lbsr  L08CB
149B 20A7             (/home/strick/go/s):02887                  bra   L13CE
                      (/home/strick/go/s):02888         
                      (/home/strick/go/s):02889         * Call a shellsub module
149D 4F               (/home/strick/go/s):02890         L1427    clra                 Type/language byte to wildcard:any will match
149E 9E04             (/home/strick/go/s):02891                  ldx   <u0004         Get ptr to module name
14A0 3440             (/home/strick/go/s):02892                  pshs  u              Preserve U
14A2 103F00           (/home/strick/go/s):02893                  os9   F$Link         Attempt to link it in
14A5 3540             (/home/strick/go/s):02894                  puls  u              Restore U
14A7 1025020C         (/home/strick/go/s):02895                  lbcs  L162B          If we couldn't link, Exit with error
14AB 9E04             (/home/strick/go/s):02896                  ldx   <u0004         Get ptr to module name again
                      (/home/strick/go/s):02897                  IFGT  Level-1
14AD 103F1D           (/home/strick/go/s):02898                  os9   F$UnLoad       Unlink it
                      (/home/strick/go/s):02899                  ELSE
                      (/home/strick/go/s):02900                  pshs  a,b,x,y,u
                      (/home/strick/go/s):02901                  os9   F$Link
                      (/home/strick/go/s):02902                  os9   F$Unlink
                      (/home/strick/go/s):02903                  os9   F$Unlink
                      (/home/strick/go/s):02904                  puls  a,b,x,y,u
                      (/home/strick/go/s):02905                  ENDC
14B0 10250203         (/home/strick/go/s):02906                  lbcs  L162B          If we couldn't unlink exit with error
14B4 9E08             (/home/strick/go/s):02907                  ldx   <u0008         Get ptr to current group (param ptr for shellsub)
14B6 DC06             (/home/strick/go/s):02908                  ldd   <u0006         Get size of param area for shellsub
14B8 33C908D2         (/home/strick/go/s):02909                  leau  >u08D2,u       Point to shellsub variable area
14BC ADA4             (/home/strick/go/s):02910                  jsr   ,y             Execute shellsub module
14BE 3407             (/home/strick/go/s):02911                  pshs  b,a,cc         Preserve error status & A
14C0 4F               (/home/strick/go/s):02912                  clra  
14C1 5F               (/home/strick/go/s):02913                  clrb  
14C2 DD10             (/home/strick/go/s):02914                  std   <u0010         ? (originally pointing to E3 if type $11 module)
14C4 9E04             (/home/strick/go/s):02915                  ldx   <u0004         Get shellsub module ptr
                      (/home/strick/go/s):02916                  IFGT  Level-1
14C6 103F1D           (/home/strick/go/s):02917                  os9   F$UnLoad       Unlink it
                      (/home/strick/go/s):02918                  ELSE
                      (/home/strick/go/s):02919                  pshs  a,b,x,y,u
                      (/home/strick/go/s):02920                  os9   F$Link
                      (/home/strick/go/s):02921                  os9   F$Unlink
                      (/home/strick/go/s):02922                  os9   F$Unlink
                      (/home/strick/go/s):02923                  puls  a,b,x,y,u
                      (/home/strick/go/s):02924                  ENDC
14C9 DD04             (/home/strick/go/s):02925                  std   <u0004         Clear shellsub module ptr
14CB 0C5D             (/home/strick/go/s):02926                  inc   <u005D         Set flag that we should wait for module to exit?
14CD 35F7             (/home/strick/go/s):02927                  puls  pc,u,y,x,d,cc  restore regs & return
                      (/home/strick/go/s):02928         
14CF 860D             (/home/strick/go/s):02929         L1459    lda   #C$CR
14D1 A71F             (/home/strick/go/s):02930                  sta   -1,x
14D3 0F60             (/home/strick/go/s):02931         L145D    clr   <u0060
14D5 3470             (/home/strick/go/s):02932                  pshs  u,y,x
14D7 9E04             (/home/strick/go/s):02933                  ldx   <u0004         Get ptr to name
14D9 EC84             (/home/strick/go/s):02934                  ldd   ,x             Get 2 chars of name
14DB C45F             (/home/strick/go/s):02935                  andb  #$5F           Force 2nd one to uppercase
14DD 10832F57         (/home/strick/go/s):02936                  cmpd  #$2F57         Is it a /W?
14E1 2606             (/home/strick/go/s):02937                  bne   L1473          No, check for shellsub
14E3 53               (/home/strick/go/s):02938                  comb                 Yes, exit with bad mode error
14E4 C6CB             (/home/strick/go/s):02939                  ldb   #E$BMode
14E6 1601CE           (/home/strick/go/s):02940                  lbra  L162B
                      (/home/strick/go/s):02941         
14E9 4F               (/home/strick/go/s):02942         L1473    clra                 Wildcard NMLink
                      (/home/strick/go/s):02943                  IFGT  Level-1
14EA 103F21           (/home/strick/go/s):02944                  os9   F$NMLink       Link to module
                      (/home/strick/go/s):02945                  ELSE
                      (/home/strick/go/s):02946                  pshs  u
                      (/home/strick/go/s):02947                  os9   F$Link         Link to module
                      (/home/strick/go/s):02948                  puls  u
                      (/home/strick/go/s):02949                  ENDC
14ED 1025FEAE         (/home/strick/go/s):02950                  lbcs  L1329          Error, do something
14F1 8151             (/home/strick/go/s):02951                  cmpa  #ShellSub+Objct  ShellSub module?
14F3 27A8             (/home/strick/go/s):02952                  beq   L1427          Yes, go set up for it
14F5 9E04             (/home/strick/go/s):02953                  ldx   <u0004         Get ptr to name back
                      (/home/strick/go/s):02954                  IFGT  Level-1
14F7 103F1D           (/home/strick/go/s):02955                  os9   F$UnLoad       Drop the link count back down
                      (/home/strick/go/s):02956                  ELSE
                      (/home/strick/go/s):02957                  pshs  a,b,x,y,u
                      (/home/strick/go/s):02958                  os9   F$Link
                      (/home/strick/go/s):02959                  os9   F$Unlink
                      (/home/strick/go/s):02960                  os9   F$Unlink
                      (/home/strick/go/s):02961                  puls  a,b,x,y,u
                      (/home/strick/go/s):02962                  ENDC
14FA 3420             (/home/strick/go/s):02963                  pshs  y              Save data area size
14FC 9E04             (/home/strick/go/s):02964                  ldx   <u0004         Get ptr to module name again
14FE 318DEB0B         (/home/strick/go/s):02965                  leay  >L000D,pc      Point to 'Shell'
1502 C605             (/home/strick/go/s):02966                  ldb   #$05           Size of 'Shell'
1504 103F11           (/home/strick/go/s):02967                  os9   F$CmpNam       Is the module requested Shell?
1507 3520             (/home/strick/go/s):02968                  puls  y              Restore data area size
1509 250E             (/home/strick/go/s):02969                  bcs   L14A3          Not shell, skip ahead
150B E605             (/home/strick/go/s):02970                  ldb   5,x            Get char right after 'shell'
150D C10D             (/home/strick/go/s):02971                  cmpb  #C$CR          Is 'shell' the only thing on the line?
150F 102700EE         (/home/strick/go/s):02972                  lbeq  L158D          Yes, skip ahead
1513 C120             (/home/strick/go/s):02973                  cmpb  #C$SPAC        Is it a space?
1515 102700E8         (/home/strick/go/s):02974                  lbeq  L158D          Yes, skip ahead
                      (/home/strick/go/s):02975         * Not Shell or Shellsub module
1519 8111             (/home/strick/go/s):02976         L14A3    cmpa  #Prgrm+Objct   ML program?
151B 1027012C         (/home/strick/go/s):02977                  lbeq  L15D7          Yes, skip ahead
151F 8140             (/home/strick/go/s):02978                  cmpa  #Data          Is it a data module?
1521 262A             (/home/strick/go/s):02979                  bne   L14D7          No, skip ahead
1523 0C60             (/home/strick/go/s):02980                  inc   <u0060         Set flag - data module
1525 0C60             (/home/strick/go/s):02981         L14AF    inc   <u0060         Bump it up
1527 9E04             (/home/strick/go/s):02982                  ldx   <u0004         Get ptr to module name
1529 103F10           (/home/strick/go/s):02983                  os9   F$PrsNam       Parse the name
152C 109E63           (/home/strick/go/s):02984                  ldy   <u0063         Get ptr to Intercept routines data mem ($418)
152F 312A             (/home/strick/go/s):02985                  leay  $0A,y          Bump up to $422
1531 109F08           (/home/strick/go/s):02986                  sty   <u0008         Save ptr to start of current group
1534 109F61           (/home/strick/go/s):02987                  sty   <u0061         ??? Ptr to data modules name?
1537 8E003C           (/home/strick/go/s):02988                  ldx   #60            Max size of group
153A 9F06             (/home/strick/go/s):02989                  stx   <u0006         Save it
153C 9E04             (/home/strick/go/s):02990                  ldx   <u0004         Get ptr to module name
153E A680             (/home/strick/go/s):02991         L14C8    lda   ,x+            Copy it to buffer @ $422
1540 A7A0             (/home/strick/go/s):02992                  sta   ,y+
1542 5A               (/home/strick/go/s):02993                  decb  
1543 26F9             (/home/strick/go/s):02994                  bne   L14C8
1545 860D             (/home/strick/go/s):02995                  lda   #C$CR          Append a CR to it
1547 A7A0             (/home/strick/go/s):02996                  sta   ,y+
1549 5F               (/home/strick/go/s):02997                  clrb  
154A 16008B           (/home/strick/go/s):02998                  lbra  L1564
                      (/home/strick/go/s):02999         * Not 6809 object code or data module either
154D 109F0A           (/home/strick/go/s):03000         L14D7    sty   <u000A         Save data area size
1550 308DEABF         (/home/strick/go/s):03001                  leax  >L0013,pc      Point to alternate languages table
1554 6D84             (/home/strick/go/s):03002         L14DE    tst   ,x             Is this entry active?
1556 1027015B         (/home/strick/go/s):03003                  lbeq  L1629          No, exit with non-existing module error
155A A180             (/home/strick/go/s):03004                  cmpa  ,x+            Same module type as we want?
155C 2706             (/home/strick/go/s):03005                  beq   L14EE          Yes, skip ahead
155E 6D80             (/home/strick/go/s):03006         L14E8    tst   ,x+            No, eat module name
1560 2AFC             (/home/strick/go/s):03007                  bpl   L14E8
1562 20F0             (/home/strick/go/s):03008                  bra   L14DE          Try next module
                      (/home/strick/go/s):03009         * Found run-time language match
1564 DC08             (/home/strick/go/s):03010         L14EE    ldd   <u0008         Get ptr to start of current command group
1566 9304             (/home/strick/go/s):03011                  subd  <u0004         Calculate size of whole group
1568 D306             (/home/strick/go/s):03012                  addd  <u0006         Don't include size of current group
156A DD06             (/home/strick/go/s):03013                  std   <u0006         Save remainder size
156C DC04             (/home/strick/go/s):03014                  ldd   <u0004         Get ptr to start of sub-module
156E DD08             (/home/strick/go/s):03015                  std   <u0008         Save it
1570 3430             (/home/strick/go/s):03016                  pshs  y,x            Preserve data area size & primary module ptr
1572 308DEAAB         (/home/strick/go/s):03017                  leax  >L0021,pc      Point to 'RUNB'
1576 ACE4             (/home/strick/go/s):03018                  cmpx  ,s             Is that the run-time module we want?
1578 2640             (/home/strick/go/s):03019                  bne   L1546          No, skip ahead
                      (/home/strick/go/s):03020         * RUNB needed - have to () & quote/commas between params
157A 9E08             (/home/strick/go/s):03021                  ldx   <u0008         Yes, get sub-module ptr?
157C 31C90418         (/home/strick/go/s):03022                  leay  >u0418,u       Point to before sub-module
1580 8D3D             (/home/strick/go/s):03023                  bsr   L154B          Copy buffer up to next param (or end of line)
1582 2727             (/home/strick/go/s):03024                  beq   L1535          If it was end of line, add CR & continue
1584 EC84             (/home/strick/go/s):03025                  ldd   ,x             Get 2 param chars
1586 10832822         (/home/strick/go/s):03026                  cmpd  #$2822         Is it '("' (RUNB variables ahead?)
158A 272E             (/home/strick/go/s):03027                  beq   L1546          Yes, skip ahead (we won't have to add them)
158C 8620             (/home/strick/go/s):03028                  lda   #C$SPAC        No, add ' ("'
158E A7A0             (/home/strick/go/s):03029                  sta   ,y+
1590 CC2822           (/home/strick/go/s):03030                  ldd   #$2822
1593 EDA1             (/home/strick/go/s):03031                  std   ,y++
1595 8D28             (/home/strick/go/s):03032         L151F    bsr   L154B          Copy buffer up to next param (or end of line)
1597 270B             (/home/strick/go/s):03033                  beq   L152E          If end of line, add '")' (close params)
1599 CC222C           (/home/strick/go/s):03034                  ldd   #$222C         Add '","' (Basic09 param separators
159C EDA1             (/home/strick/go/s):03035                  std   ,y++
159E 8622             (/home/strick/go/s):03036                  lda   #$22           2nd quote of above
15A0 A7A0             (/home/strick/go/s):03037                  sta   ,y+
15A2 20F1             (/home/strick/go/s):03038                  bra   L151F          Keep doing for all parameters
                      (/home/strick/go/s):03039         
15A4 CC2229           (/home/strick/go/s):03040         L152E    ldd   #$2229         Add  '")' to end parameter list
15A7 EDA1             (/home/strick/go/s):03041                  std   ,y++
15A9 860D             (/home/strick/go/s):03042                  lda   #C$CR          Add CR
15AB A7A0             (/home/strick/go/s):03043         L1535    sta   ,y+
15AD 1F20             (/home/strick/go/s):03044                  tfr   y,d            Move end of param ptr to D
15AF 31C90418         (/home/strick/go/s):03045                  leay  >u0418,u       Point to start of param
15B3 109F08           (/home/strick/go/s):03046                  sty   <u0008         Save as start ptr
15B6 9308             (/home/strick/go/s):03047                  subd  <u0008         Calculate param size
15B8 DD06             (/home/strick/go/s):03048                  std   <u0006         Save it
15BA 3530             (/home/strick/go/s):03049         L1546    puls  y,x            Restore data area size & primary module ptr
15BC 16008A           (/home/strick/go/s):03050                  lbra  L15D5
                      (/home/strick/go/s):03051         
                      (/home/strick/go/s):03052         * Copy from X to Y until either a CR or a space char is hit
                      (/home/strick/go/s):03053         * If it finds a space, it will eat them until the next non-space char is found
15BF A680             (/home/strick/go/s):03054         L154B    lda   ,x+            Get char
15C1 8120             (/home/strick/go/s):03055                  cmpa  #C$SPAC        Is it a space?
                      (/home/strick/go/s):03056         * Was L155B
15C3 2708             (/home/strick/go/s):03057                  beq   L1559          yes, skip ahead
15C5 810D             (/home/strick/go/s):03058                  cmpa  #C$CR          Is it the end of the line?
15C7 270A             (/home/strick/go/s):03059                  beq   L155F          Yes, bump ptr back to CR & exit
15C9 A7A0             (/home/strick/go/s):03060                  sta   ,y+            Save the char
15CB 20F2             (/home/strick/go/s):03061                  bra   L154B          Keep doing it
                      (/home/strick/go/s):03062         
15CD A680             (/home/strick/go/s):03063         L1559    lda   ,x+            Get char
15CF 8120             (/home/strick/go/s):03064         L155B    cmpa  #C$SPAC        Is it another space?
15D1 27FA             (/home/strick/go/s):03065                  beq   L1559          Yes, keep eating spaces
15D3 301F             (/home/strick/go/s):03066         L155F    leax  -$01,x         Bump ptr back to either non-space or CR
15D5 810D             (/home/strick/go/s):03067                  cmpa  #C$CR          Is it a CR? & return
15D7 39               (/home/strick/go/s):03068                  rts   
                      (/home/strick/go/s):03069         
                      (/home/strick/go/s):03070         * THIS CMPB / LBEQ SEEMS TO BE USELESS, AS B IS ALWAYS CLEAR COMING INTO THIS
                      (/home/strick/go/s):03071         * ROUTINE
15D8 C1CB             (/home/strick/go/s):03072         L1564    cmpb  #E$BMode
15DA 102700D9         (/home/strick/go/s):03073                  lbeq  L162B
15DE 9E06             (/home/strick/go/s):03074                  ldx   <u0006         Get size of current group
15E0 3005             (/home/strick/go/s):03075                  leax  5,x            Bump it up by 5???
15E2 9F06             (/home/strick/go/s):03076                  stx   <u0006         Save new size
15E4 0D60             (/home/strick/go/s):03077                  tst   <u0060         Data module linked?
15E6 261E             (/home/strick/go/s):03078                  bne   L1592          Yes, skip ahead
15E8 9E04             (/home/strick/go/s):03079                  ldx   <u0004         Get module name ptr
15EA EE64             (/home/strick/go/s):03080                  ldu   4,s
15EC 17F610           (/home/strick/go/s):03081                  lbsr  CmdIn          Set up paths
15EF 102500C4         (/home/strick/go/s):03082                  lbcs  L162B          If error, exit with it
15F3 2011             (/home/strick/go/s):03083                  bra   L1592          Start up shell with '-P X PATH=(current)'
                      (/home/strick/go/s):03084         
                      (/home/strick/go/s):03085         * L1581 is for sub-shells (?), L1586 for normal shells
15F5 2D50205820       (/home/strick/go/s):03086         L1581    fcc   '-P X '        Prompting off/exit on error
15FA 504154483D20     (/home/strick/go/s):03087         L1586    fcc   'PATH= '       For inheriting parent shell's paths
1600 0D               (/home/strick/go/s):03088                  fcb   C$CR
                      (/home/strick/go/s):03089         
1601 308CF6           (/home/strick/go/s):03090         L158D    leax  <L1586,pc      Point to 'path='
1604 2003             (/home/strick/go/s):03091                  bra   L1595          Skip ahead
                      (/home/strick/go/s):03092         
1606 308CEC           (/home/strick/go/s):03093         L1592    leax  <L1581,pc      Point to '-p x '
1609 31C9166D         (/home/strick/go/s):03094         L1595    leay  >u166D,u       Point to about-to-be merged buffer
160D 17FD86           (/home/strick/go/s):03095                  lbsr  L1320          Copy up until CR
1610 313F             (/home/strick/go/s):03096                  leay  -1,y           Point to CR
1612 30C90CDD         (/home/strick/go/s):03097                  leax  >u0CDD,u       Point to copy of current path=
                      (/home/strick/go/s):03098         * Copy all paths to buffer, changing <CR> separated ones with Spaces
1616 A684             (/home/strick/go/s):03099         L15A2    lda   ,x             Get char
1618 810D             (/home/strick/go/s):03100                  cmpa  #C$CR          CR?
161A 2709             (/home/strick/go/s):03101                  beq   L15B1          Yes, don't copy this buffer
161C 17FD77           (/home/strick/go/s):03102                  lbsr  L1320          Copy up until CR
161F 8620             (/home/strick/go/s):03103                  lda   #C$SPAC        Replace CR with Space
1621 A73F             (/home/strick/go/s):03104                  sta   -1,y
1623 20F1             (/home/strick/go/s):03105                  bra   L15A2          Continue copying CR marked blocks until done
1625 863B             (/home/strick/go/s):03106         L15B1    lda   #';            Replace final CR with ; (command separator)
1627 A73F             (/home/strick/go/s):03107                  sta   -1,y
1629 0D60             (/home/strick/go/s):03108                  tst   <u0060
162B 2705             (/home/strick/go/s):03109                  beq   L15BE
162D CC4D3D           (/home/strick/go/s):03110                  ldd   #'M*256+'=     If flag set, append 'M='
1630 EDA1             (/home/strick/go/s):03111                  std   ,y++
1632 9E08             (/home/strick/go/s):03112         L15BE    ldx   <u0008         Get ptr to start of current group
1634 17FD5F           (/home/strick/go/s):03113                  lbsr  L1320          Copy up until CR
1637 30C9166D         (/home/strick/go/s):03114                  leax  >u166D,u       Point to merged buffer again
163B 9F08             (/home/strick/go/s):03115                  stx   <u0008         Make it the new current group start
163D 1F20             (/home/strick/go/s):03116                  tfr   y,d            Move end buffer ptr to D
163F 3410             (/home/strick/go/s):03117                  pshs  x              Push merged buffer ptr for SUBD
1641 A3E1             (/home/strick/go/s):03118                  subd  ,s++           Calculate size of merged buffer
1643 DD06             (/home/strick/go/s):03119                  std   <u0006         Save merged buffer size
1645 308DE9C4         (/home/strick/go/s):03120                  leax  >L000D,pc      Point to 'shell'
                      (/home/strick/go/s):03121         
1649 9F04             (/home/strick/go/s):03122         L15D5    stx   <u0004         Save ptr to module name to fork
164B 9E04             (/home/strick/go/s):03123         L15D7    ldx   <u0004         Get ptr to module name to fork
164D 8611             (/home/strick/go/s):03124                  lda   #Prgrm+Objct
                      (/home/strick/go/s):03125                  IFGT  Level-1
164F 103F21           (/home/strick/go/s):03126                  os9   F$NMLink       Get memory requirement stuff from it
                      (/home/strick/go/s):03127                  ELSE
                      (/home/strick/go/s):03128                  pshs  u
                      (/home/strick/go/s):03129                  os9   F$Link         Get memory requirement stuff from it
                      (/home/strick/go/s):03130                  tfr   u,y
                      (/home/strick/go/s):03131                  puls  u
                      (/home/strick/go/s):03132                  ENDC
1652 2405             (/home/strick/go/s):03133                  bcc   L15E5          Got it, continue
                      (/home/strick/go/s):03134                  IFGT  Level-1
1654 103F22           (/home/strick/go/s):03135                  os9   F$NMLoad       Couldn't get, try loading it
                      (/home/strick/go/s):03136                  ELSE
                      (/home/strick/go/s):03137                  pshs  u
                      (/home/strick/go/s):03138                  os9   F$Load         Couldn't get, try loading it
                      (/home/strick/go/s):03139                  tfr   u,y
                      (/home/strick/go/s):03140                  puls  u
                      (/home/strick/go/s):03141                  ENDC
1657 255E             (/home/strick/go/s):03142                  bcs   L162B          Still couldn't get, can't fork
1659                  (/home/strick/go/s):03143         L15E5    
                      (/home/strick/go/s):03144                  IFEQ  Level-1
                      (/home/strick/go/s):03145                  ldy   M$Mem,y
                      (/home/strick/go/s):03146                  ENDC
1659 0D03             (/home/strick/go/s):03147                  tst   <u0003         Memory size specified?
165B 2609             (/home/strick/go/s):03148                  bne   L15F2          Yes, skip ahead
165D 1F20             (/home/strick/go/s):03149                  tfr   y,d            No, tfr modules mem size to D
165F D30A             (/home/strick/go/s):03150                  addd  <u000A         ??? Add to something
1661 C300FF           (/home/strick/go/s):03151                  addd  #$00FF         Round up to nearest page
1664 9703             (/home/strick/go/s):03152                  sta   <u0003         Save # of pages need for data mem
1666 6FE2             (/home/strick/go/s):03153         L15F2    clr  ,-s             Clear byte on stack to store original priority
1668 D622             (/home/strick/go/s):03154                  ldb   <u0022         Get priority we want to set new program at
166A 2713             (/home/strick/go/s):03155                  beq   DnePrior       0=Use inherited priority, skip ahead
                      (/home/strick/go/s):03156                  IFEQ  Level-1
                      (/home/strick/go/s):03157                  ldx   <D.Proc
                      (/home/strick/go/s):03158                  ELSE
166C 30C9166D         (/home/strick/go/s):03159                  leax  >u166D,u       Point to place to hold Process descriptor
1670 103F0C           (/home/strick/go/s):03160                  os9   F$ID           Get our process #
1673 103F18           (/home/strick/go/s):03161                  os9   F$GPrDsc       Get our process descriptor
                      (/home/strick/go/s):03162                  ENDC
1676 E60A             (/home/strick/go/s):03163                  ldb   P$Prior,x      Get our priority
1678 E7E4             (/home/strick/go/s):03164                  stb   ,s             Save it
167A D622             (/home/strick/go/s):03165                  ldb   <u0022         Get priority for new process
167C 103F0D           (/home/strick/go/s):03166                  os9   F$SPrior       Set our priority so child will inherit it
167F 17FCFE           (/home/strick/go/s):03167         DnePrior lbsr  L130A          Go setup Fork entry registers
1682 103F03           (/home/strick/go/s):03168                  os9   F$Fork         Create the new process
1685 3407             (/home/strick/go/s):03169                  pshs  d,cc           Preserve error (if any) & new process #
1687 E663             (/home/strick/go/s):03170                  ldb   3,s            Get original priority back
1689 2706             (/home/strick/go/s):03171                  beq   L1609          Priority didn't change, ignore it
168B 103F0C           (/home/strick/go/s):03172                  os9   F$ID           Get our process # into A
168E 103F0D           (/home/strick/go/s):03173                  os9   F$SPrior       Reset our priority back to normal
1691 8611             (/home/strick/go/s):03174         L1609    lda   #Prgrm+Objct   Std 6809 module
1693 9E10             (/home/strick/go/s):03175                  ldx   <u0010         Get ptr to some other module name (?)
1695 2602             (/home/strick/go/s):03176                  bne   L1611          There is one, unlink it instead
1697 9E04             (/home/strick/go/s):03177                  ldx   <u0004         Get ptr to command name
1699                  (/home/strick/go/s):03178         L1611    
                      (/home/strick/go/s):03179                  IFGT  Level-1
1699 103F1D           (/home/strick/go/s):03180                  os9   F$UnLoad       Bump link count down back to normal?
                      (/home/strick/go/s):03181                  ELSE
                      (/home/strick/go/s):03182                  pshs  a,b,x,y,u
                      (/home/strick/go/s):03183                  os9   F$Link
                      (/home/strick/go/s):03184                  os9   F$Unlink
                      (/home/strick/go/s):03185                  os9   F$Unlink
                      (/home/strick/go/s):03186                  puls  a,b,x,y,u
                      (/home/strick/go/s):03187                  ENDC
169C 4F               (/home/strick/go/s):03188                  clra  
169D 5F               (/home/strick/go/s):03189                  clrb  
169E DD10             (/home/strick/go/s):03190                  std   <u0010         Zero out other module name ptr
16A0 DD04             (/home/strick/go/s):03191                  std   <u0004         Clear out ptr to main command name
16A2 9660             (/home/strick/go/s):03192                  lda   <u0060         Check if data module needs to be unlinked too
16A4 8101             (/home/strick/go/s):03193                  cmpa  #$01           Just 1 link to it?
16A6 2607             (/home/strick/go/s):03194                  bne   L1627          No, skip ahead
16A8 8640             (/home/strick/go/s):03195                  lda   #Data          Data module
16AA 9E61             (/home/strick/go/s):03196                  ldx   <u0061         Get ptr to name of data module
                      (/home/strick/go/s):03197                  IFGT  Level-1
16AC 103F1D           (/home/strick/go/s):03198                  os9   F$UnLoad       Bump link count down back to normal
                      (/home/strick/go/s):03199                  ELSE
                      (/home/strick/go/s):03200                  pshs  a,b,x,y,u
                      (/home/strick/go/s):03201                  os9   F$Link
                      (/home/strick/go/s):03202                  os9   F$Unlink
                      (/home/strick/go/s):03203                  os9   F$Unlink
                      (/home/strick/go/s):03204                  puls  a,b,x,y,u
                      (/home/strick/go/s):03205                  ENDC
16AF 3507             (/home/strick/go/s):03206         L1627    puls  cc,d           Get back F$FORK error/process #
16B1 3261             (/home/strick/go/s):03207                  leas  1,s            Eat priority byte
16B3 35F0             (/home/strick/go/s):03208                  puls  pc,u,y,x       Restore regs & return
                      (/home/strick/go/s):03209         
16B5 C6EA             (/home/strick/go/s):03210         L1629    ldb   #E$NEMod       Non-existing module error
16B7 43               (/home/strick/go/s):03211         L162B    coma  
16B8 35F0             (/home/strick/go/s):03212                  puls  pc,u,y,x
                      (/home/strick/go/s):03213         
16BA 2F70697065       (/home/strick/go/s):03214         L162E    fcc   '/pipe'
16BF 0D               (/home/strick/go/s):03215                  fcb   C$CR
                      (/home/strick/go/s):03216         
16C0 3410             (/home/strick/go/s):03217         CmdPIPE  pshs  x
16C2 308CF5           (/home/strick/go/s):03218                  leax  <L162E,pc      Point to '/pipe'
16C5 CC0103           (/home/strick/go/s):03219                  ldd   #$0103
16C8 17F548           (/home/strick/go/s):03220                  lbsr  L0C0E
16CB 3510             (/home/strick/go/s):03221                  puls  x
16CD 255A             (/home/strick/go/s):03222                  bcs   L169E
16CF 17FDFD           (/home/strick/go/s):03223                  lbsr  L1459
16D2 2555             (/home/strick/go/s):03224                  bcs   L169E
16D4 A6C4             (/home/strick/go/s):03225                  lda   ,u
16D6 2607             (/home/strick/go/s):03226                  bne   L1653
16D8 103F82           (/home/strick/go/s):03227                  os9   I$Dup    
16DB 254C             (/home/strick/go/s):03228                  bcs   L169E
16DD A7C4             (/home/strick/go/s):03229                  sta   ,u
16DF 4F               (/home/strick/go/s):03230         L1653    clra  
16E0 103F8F           (/home/strick/go/s):03231                  os9   I$Close  
16E3 8601             (/home/strick/go/s):03232                  lda   #$01
16E5 103F82           (/home/strick/go/s):03233                  os9   I$Dup    
16E8 8601             (/home/strick/go/s):03234                  lda   #$01
16EA 17F4C0           (/home/strick/go/s):03235                  lbsr  L0BA8
16ED 8602             (/home/strick/go/s):03236                  lda   #$02
16EF 16F4BB           (/home/strick/go/s):03237                  lbra  L0BA8
                      (/home/strick/go/s):03238         
                      (/home/strick/go/s):03239         * Filename for shell log-append mode because of leading '+'
16F2 2B2F64642F6C6F67 (/home/strick/go/s):03240         L1666    fcc   '+/dd/log/uxxx'
     2F75787878
16FF 0D               (/home/strick/go/s):03241                  fcb   C$CR
                      (/home/strick/go/s):03242         
                      (/home/strick/go/s):03243         * Make shell logging filename @ u0CBD,u
1700 308CEF           (/home/strick/go/s):03244         L1674    leax  <L1666,pc      Point to log name string (append mode)
1703 31C90CBD         (/home/strick/go/s):03245                  leay  >u0CBD,u       Point to buffer to hold shell log name
1707 17FC8C           (/home/strick/go/s):03246                  lbsr  L1320          Copy name to buffer
170A 313C             (/home/strick/go/s):03247                  leay  -4,y           Point to where 1st digit will go
170C 965B             (/home/strick/go/s):03248                  lda   <u005A+1       Get LSB of user #?
170E 3436             (/home/strick/go/s):03249                  pshs  y,x,d          Preserve regs
1710 318C0B           (/home/strick/go/s):03250                  leay  <L1693,pc      Point to routine
1713 202F             (/home/strick/go/s):03251                  bra   L16B9          Go convert digits & append to logname
                      (/home/strick/go/s):03252         
1715 9647             (/home/strick/go/s):03253         L168A    lda   <u0047
1717 3436             (/home/strick/go/s):03254                  pshs  y,x,d
1719 318C02           (/home/strick/go/s):03255                  leay  <L1693,pc
171C 2026             (/home/strick/go/s):03256                  bra   L16B9
                      (/home/strick/go/s):03257         
171E 10AE6B           (/home/strick/go/s):03258         L1693    ldy   $0B,s          Get ptr to where shell log # goes
1721 EC63             (/home/strick/go/s):03259                  ldd   $03,s          Get 1st 2 digits of #
1723 EDA1             (/home/strick/go/s):03260                  std   ,y++           Save in shell log pathname
1725 A665             (/home/strick/go/s):03261                  lda   $05,s          Get last digit
1727 A7A4             (/home/strick/go/s):03262                  sta   ,y             Save it too
1729 39               (/home/strick/go/s):03263         L169E    rts   
                      (/home/strick/go/s):03264         
172A EC64             (/home/strick/go/s):03265         L169F    ldd   4,s            Get last 2 digits of process # (ASCII)
172C EDC901EC         (/home/strick/go/s):03266                  std   >u01EC,u       Save it & return
1730 39               (/home/strick/go/s):03267                  rts   
                      (/home/strick/go/s):03268         
1731 3436             (/home/strick/go/s):03269         L16A6    pshs  y,x,d          Preserve End of parm ctr & others
1733 103F0C           (/home/strick/go/s):03270                  os9   F$ID           Get user's ID #
1736 109F5A           (/home/strick/go/s):03271                  sty   <u005A         Save it
1739 318CEE           (/home/strick/go/s):03272                  leay  <L169F,pc      Point to routine
173C 2006             (/home/strick/go/s):03273                  bra   L16B9
                      (/home/strick/go/s):03274         
                      (/home/strick/go/s):03275         * Set up to write out process # when forked?
173E 3436             (/home/strick/go/s):03276         L16B3    pshs  y,x,d
1740 318DEAFA         (/home/strick/go/s):03277                  leay  >L021B,pc
                      (/home/strick/go/s):03278         
                      (/home/strick/go/s):03279         * Entry: A=Process ID #
                      (/home/strick/go/s):03280         * Exit: L01EC=2 lower digits of process # in ASCII format
                      (/home/strick/go/s):03281         
1744 3434             (/home/strick/go/s):03282         L16B9    pshs  y,x,b          Preserve regs
1746 3061             (/home/strick/go/s):03283                  leax  1,s            Point X to X value on stack
1748 C62F             (/home/strick/go/s):03284                  ldb   #$2F           Init B to start @ '0' in loop
174A 5C               (/home/strick/go/s):03285         L16BF    incb                 Bump ASCII # up
174B 8064             (/home/strick/go/s):03286                  suba  #100           Start with 100's digit
174D 24FB             (/home/strick/go/s):03287                  bhs   L16BF          More left, keep going
174F E780             (/home/strick/go/s):03288                  stb   ,x+            Save digit
1751 C63A             (/home/strick/go/s):03289                  ldb   #$3A           Init so loop starts @ ASCII '9'
1753 5A               (/home/strick/go/s):03290         L16C8    decb                 Bump ASCII # down
1754 8B0A             (/home/strick/go/s):03291                  adda  #10            Do 10's digit
1756 24FB             (/home/strick/go/s):03292                  bhs   L16C8          Still more, keep going
1758 E780             (/home/strick/go/s):03293                  stb   ,x+            Save 10's digit
175A 8B30             (/home/strick/go/s):03294                  adda  #$30           Bump 1's digit up to ASCII equivalent
175C C60D             (/home/strick/go/s):03295                  ldb   #C$CR          Add carriage return
175E ED84             (/home/strick/go/s):03296                  std   ,x             Save overtop Y on the stack
1760 30E4             (/home/strick/go/s):03297                  leax  ,s             Point X to B on stack
1762 ADA4             (/home/strick/go/s):03298                  jsr   ,y             
1764 3265             (/home/strick/go/s):03299                  leas  5,s            Eat stack
1766 35B6             (/home/strick/go/s):03300                  puls  pc,y,x,d       Restore other regs & return
                      (/home/strick/go/s):03301         
                      (/home/strick/go/s):03302         * KILL command
1768 8D1C             (/home/strick/go/s):03303         CmdKill  bsr   L16EB          Go get process # to kill
176A C102             (/home/strick/go/s):03304                  cmpb  #2             Trying to kill the system process or 1st shell?
176C 2337             (/home/strick/go/s):03305                  bls   L170A          Yes, print 'WHAT?' & ignore it
176E 1F98             (/home/strick/go/s):03306                  tfr   b,a            Move process # to proper reg
1770 5F               (/home/strick/go/s):03307         L16E5    clrb                 S$Kill signal
1771 103F08           (/home/strick/go/s):03308                  os9   F$Send         Send it to the process & return
1774 39               (/home/strick/go/s):03309                  rts   
                      (/home/strick/go/s):03310         
                      (/home/strick/go/s):03311         * Clear Screen by writing $0C to stdout
1775 0C               (/home/strick/go/s):03312         ClrByte  fcb   $0C
     0001             (/home/strick/go/s):03313         ClrLen   equ   *-ClrByte
                      (/home/strick/go/s):03314         
1776                  (/home/strick/go/s):03315         CmdCLS
1776 3410             (/home/strick/go/s):03316                  pshs  x
1778 8601             (/home/strick/go/s):03317                  lda   #$01
177A 308CF8           (/home/strick/go/s):03318                  leax  ClrByte,pcr
177D 108E0001         (/home/strick/go/s):03319                  ldy   #ClrLen
1781 103F8A           (/home/strick/go/s):03320                  os9   I$Write
1784 3590             (/home/strick/go/s):03321                  puls  x,pc
                      (/home/strick/go/s):03322         
                      (/home/strick/go/s):03323         * Set priority - subroutine to calculate binary version of #
                      (/home/strick/go/s):03324         * (used for both process # & priority values)
1786 5F               (/home/strick/go/s):03325         L16EB    clrb                 Initialize # for loop
1787 A680             (/home/strick/go/s):03326         L16EC    lda   ,x+            This loop will calculate the binary version
1789 8030             (/home/strick/go/s):03327                  suba  #$30           Of the ASCII # pointed to by X
178B 8109             (/home/strick/go/s):03328                  cmpa  #9
178D 2209             (/home/strick/go/s):03329                  bhi   L16FD
178F 3402             (/home/strick/go/s):03330                  pshs  a
1791 860A             (/home/strick/go/s):03331                  lda   #10            
1793 3D               (/home/strick/go/s):03332                  mul
1794 EBE0             (/home/strick/go/s):03333                  addb  ,s+
1796 24EF             (/home/strick/go/s):03334                  bcc   L16EC          Keep going until overflows past 255
1798 A682             (/home/strick/go/s):03335         L16FD    lda   ,-x            Get last char done
179A 2507             (/home/strick/go/s):03336                  bcs   L1708          If #>255, eat RTS & exit with error
179C 0D14             (/home/strick/go/s):03337                  tst   <u0014         If flag is set, return
179E 2689             (/home/strick/go/s):03338                  bne   L169E
17A0 5D               (/home/strick/go/s):03339                  tstb                 Otherwise, check if # is 0
17A1 2686             (/home/strick/go/s):03340                  bne   L169E          No, return
17A3 3262             (/home/strick/go/s):03341         L1708    leas  2,s            Yes, eat RTS address & exit with error
17A5 16F42C           (/home/strick/go/s):03342         L170A    lbra  L0BCF          Print 'WHAT?'
                      (/home/strick/go/s):03343         * SETPR routine
17A8 8DDC             (/home/strick/go/s):03344         CmdSETPR    bsr   L16EB          Go calculate process #
17AA D721             (/home/strick/go/s):03345                  stb   <u0021         Save it
17AC 17F16B           (/home/strick/go/s):03346                  lbsr  L0907          Find next field (after commas/spaces)
17AF 8DD5             (/home/strick/go/s):03347                  bsr   L16EB          Go calculate priority (into B)
17B1 9621             (/home/strick/go/s):03348                  lda   <u0021         Get process #
17B3 103F0D           (/home/strick/go/s):03349                  os9   F$SPrior       Set it's priority & return
17B6 39               (/home/strick/go/s):03350                  rts   
                      (/home/strick/go/s):03351         
17B7 7077643A20626164 (/home/strick/go/s):03352         L171C    fcc   'pwd: bad name in path'
     206E616D6520696E
     2070617468
17CC 0D               (/home/strick/go/s):03353                  fcb   C$CR
17CD 2E2E2E2E2E2E2E2E (/home/strick/go/s):03354         L1732    fcc   '.......................................'
     2E2E2E2E2E2E2E2E
     2E2E2E2E2E2E2E2E
     2E2E2E2E2E2E2E2E
     2E2E2E2E2E2E2E
17F4 2E               (/home/strick/go/s):03355         L1759    fcc   '.'
17F5 0D               (/home/strick/go/s):03356                  fcb   C$CR
17F6 7077643A20726561 (/home/strick/go/s):03357         L175B    fcc   'pwd: read error'
     64206572726F72
1805 0D               (/home/strick/go/s):03358                  fcb   C$CR
                      (/home/strick/go/s):03359                  
1806 0F3D             (/home/strick/go/s):03360         CmdPWD   clr   <u003D
1808 3430             (/home/strick/go/s):03361         L176D    pshs  y,x
180A 31C902F2         (/home/strick/go/s):03362                  leay  >u02F2,u
180E 8681             (/home/strick/go/s):03363                  lda   #$81
1810 0D37             (/home/strick/go/s):03364                  tst   <u0037
1812 2716             (/home/strick/go/s):03365                  beq   L178F
1814 9E39             (/home/strick/go/s):03366                  ldx   <u0039
1816 2079             (/home/strick/go/s):03367                  bra   L17F7
                      (/home/strick/go/s):03368         * .PXD command
1818 0F3D             (/home/strick/go/s):03369         CmdPXD   clr   <u003D
181A 3430             (/home/strick/go/s):03370                  pshs  y,x
181C 31C90375         (/home/strick/go/s):03371                  leay  >u0375,u
1820 8685             (/home/strick/go/s):03372                  lda   #$85
1822 0D38             (/home/strick/go/s):03373                  tst   <u0038
1824 2704             (/home/strick/go/s):03374                  beq   L178F
1826 9E3B             (/home/strick/go/s):03375                  ldx   <u003B
1828 2067             (/home/strick/go/s):03376                  bra   L17F7
182A 9729             (/home/strick/go/s):03377         L178F    sta   <u0029
182C 109F3E           (/home/strick/go/s):03378                  sty   <u003E
182F 30A90080         (/home/strick/go/s):03379         L1794    leax  >$0080,y
1833 860D             (/home/strick/go/s):03380                  lda   #C$CR
1835 A784             (/home/strick/go/s):03381                  sta   ,x
1837 9F2A             (/home/strick/go/s):03382                  stx   <u002A
1839 308CB8           (/home/strick/go/s):03383                  leax  <L1759,pc
183C 9F40             (/home/strick/go/s):03384                  stx   <u0040
183E 8D5B             (/home/strick/go/s):03385                  bsr   L1801
1840 170093           (/home/strick/go/s):03386                  lbsr  L183C
1843 DC2C             (/home/strick/go/s):03387         L17A9    ldd   <u002C
1845 DD32             (/home/strick/go/s):03388                  std   <u0032
1847 962E             (/home/strick/go/s):03389                  lda   <u002E
1849 9734             (/home/strick/go/s):03390                  sta   <u0034
184B 8D75             (/home/strick/go/s):03391                  bsr   L1828
184D 271E             (/home/strick/go/s):03392                  beq   L17D3
184F 9612             (/home/strick/go/s):03393                  lda   <u0012
1851 103F8F           (/home/strick/go/s):03394                  os9   I$Close  
1854 102500CE         (/home/strick/go/s):03395                  lbcs  L188C
1858 9E40             (/home/strick/go/s):03396                  ldx   <u0040
185A 301F             (/home/strick/go/s):03397                  leax  -$01,x
185C 9F40             (/home/strick/go/s):03398                  stx   <u0040
185E 8D3B             (/home/strick/go/s):03399                  bsr   L1801
1860 8D74             (/home/strick/go/s):03400                  bsr   L183C
1862 8D4D             (/home/strick/go/s):03401                  bsr   L1817
1864 30C903F8         (/home/strick/go/s):03402                  leax  >u03F8,u
1868 170088           (/home/strick/go/s):03403                  lbsr  L1859
186B 20D6             (/home/strick/go/s):03404                  bra   L17A9
186D 9612             (/home/strick/go/s):03405         L17D3    lda   <u0012
186F C60E             (/home/strick/go/s):03406                  ldb   #SS.DevNm
1871 30C900B5         (/home/strick/go/s):03407                  leax  >u00B5,u
1875 103F8D           (/home/strick/go/s):03408                  os9   I$GetStt       Get device name
1878 8D79             (/home/strick/go/s):03409                  bsr   L1859
187A 9612             (/home/strick/go/s):03410         L17E0    lda   <u0012
187C 103F8F           (/home/strick/go/s):03411                  os9   I$Close  
187F 9E2A             (/home/strick/go/s):03412                  ldx   <u002A
1881 9629             (/home/strick/go/s):03413                  lda   <u0029
1883 8504             (/home/strick/go/s):03414                  bita  #$04
1885 2606             (/home/strick/go/s):03415                  bne   L17F3
1887 0C37             (/home/strick/go/s):03416                  inc   <u0037
1889 9F39             (/home/strick/go/s):03417                  stx   <u0039
188B 2004             (/home/strick/go/s):03418                  bra   L17F7
188D 0C38             (/home/strick/go/s):03419         L17F3    inc   <u0038
188F 9F3B             (/home/strick/go/s):03420                  stx   <u003B
1891 108E0083         (/home/strick/go/s):03421         L17F7    ldy   #$0083
1895 8601             (/home/strick/go/s):03422                  lda   #$01
1897 5F               (/home/strick/go/s):03423                  clrb  
1898 16009E           (/home/strick/go/s):03424                  lbra  L18A0
189B 9629             (/home/strick/go/s):03425         L1801    lda   <u0029
189D 103F84           (/home/strick/go/s):03426                  os9   I$Open   
18A0 9712             (/home/strick/go/s):03427                  sta   <u0012
18A2 39               (/home/strick/go/s):03428                  rts   
18A3 9612             (/home/strick/go/s):03429         L1809    lda   <u0012
18A5 30C903F8         (/home/strick/go/s):03430                  leax  >u03F8,u
18A9 108E0020         (/home/strick/go/s):03431                  ldy   #$0020
18AD 103F89           (/home/strick/go/s):03432                  os9   I$Read   
18B0 39               (/home/strick/go/s):03433                  rts   
18B1 8DF0             (/home/strick/go/s):03434         L1817    bsr   L1809
18B3 257B             (/home/strick/go/s):03435                  bcs   L1896
18B5 30C90415         (/home/strick/go/s):03436                  leax  >u0415,u
18B9 31C90032         (/home/strick/go/s):03437                  leay  >u0032,u
18BD 8D0B             (/home/strick/go/s):03438                  bsr   L1830
18BF 26F0             (/home/strick/go/s):03439                  bne   L1817
18C1 39               (/home/strick/go/s):03440                  rts   
18C2 30C9002C         (/home/strick/go/s):03441         L1828    leax  >u002C,u
18C6 31C9002F         (/home/strick/go/s):03442                  leay  >u002F,u
18CA EC81             (/home/strick/go/s):03443         L1830    ldd   ,x++
18CC 10A3A1           (/home/strick/go/s):03444                  cmpd  ,y++
18CF 2604             (/home/strick/go/s):03445                  bne   L183B
18D1 A684             (/home/strick/go/s):03446                  lda   ,x
18D3 A1A4             (/home/strick/go/s):03447                  cmpa  ,y
18D5 39               (/home/strick/go/s):03448         L183B    rts   
18D6 8DCB             (/home/strick/go/s):03449         L183C    bsr   L1809
18D8 ECC90415         (/home/strick/go/s):03450                  ldd   >u0415,u
18DC DD2F             (/home/strick/go/s):03451                  std   <u002F
18DE A6C90417         (/home/strick/go/s):03452                  lda   >u0417,u
18E2 9731             (/home/strick/go/s):03453                  sta   <u0031
18E4 8DBD             (/home/strick/go/s):03454                  bsr   L1809
18E6 ECC90415         (/home/strick/go/s):03455                  ldd   >u0415,u
18EA DD2C             (/home/strick/go/s):03456                  std   <u002C
18EC A6C90417         (/home/strick/go/s):03457                  lda   >u0417,u
18F0 972E             (/home/strick/go/s):03458                  sta   <u002E
18F2 39               (/home/strick/go/s):03459                  rts   
18F3 103F10           (/home/strick/go/s):03460         L1859    os9   F$PrsNam 
18F6 2532             (/home/strick/go/s):03461                  bcs   L1890
18F8 9E2A             (/home/strick/go/s):03462                  ldx   <u002A
18FA 3404             (/home/strick/go/s):03463                  pshs  b
18FC 5C               (/home/strick/go/s):03464                  incb  
18FD 4F               (/home/strick/go/s):03465                  clra  
18FE DD32             (/home/strick/go/s):03466                  std   <u0032
1900 1F10             (/home/strick/go/s):03467                  tfr   x,d
1902 9332             (/home/strick/go/s):03468                  subd  <u0032
1904 10933E           (/home/strick/go/s):03469                  cmpd  <u003E
1907 2312             (/home/strick/go/s):03470                  bls   L1881
1909 3504             (/home/strick/go/s):03471                  puls  b
190B A6A2             (/home/strick/go/s):03472         L1871    lda   ,-y
190D 847F             (/home/strick/go/s):03473                  anda  #$7F
190F A782             (/home/strick/go/s):03474                  sta   ,-x
1911 5A               (/home/strick/go/s):03475                  decb  
1912 26F7             (/home/strick/go/s):03476                  bne   L1871
1914 862F             (/home/strick/go/s):03477                  lda   #$2F
1916 A782             (/home/strick/go/s):03478                  sta   ,-x
1918 9F2A             (/home/strick/go/s):03479                  stx   <u002A
191A 39               (/home/strick/go/s):03480                  rts   
                      (/home/strick/go/s):03481         
191B 862A             (/home/strick/go/s):03482         L1881    lda   #'*
191D A782             (/home/strick/go/s):03483                  sta   ,-x
191F 9F2A             (/home/strick/go/s):03484                  stx   <u002A
1921 3263             (/home/strick/go/s):03485                  leas  3,s
1923 16FF54           (/home/strick/go/s):03486                  lbra  L17E0
                      (/home/strick/go/s):03487         
1926 3405             (/home/strick/go/s):03488         L188C    pshs  b,cc
1928 201A             (/home/strick/go/s):03489                  bra   L18AB
                      (/home/strick/go/s):03490         
192A 308DFE89         (/home/strick/go/s):03491         L1890    leax  >L171C,pc
192E 2004             (/home/strick/go/s):03492                  bra   L189A
                      (/home/strick/go/s):03493         
1930 308DFEC2         (/home/strick/go/s):03494         L1896    leax  >L175B,pc
1934 3262             (/home/strick/go/s):03495         L189A    leas  $02,s
1936 CC02FF           (/home/strick/go/s):03496                  ldd   #$02FF
1939 9F2A             (/home/strick/go/s):03497         L18A0    stx   <u002A
193B 3405             (/home/strick/go/s):03498                  pshs  b,cc
193D 0D3D             (/home/strick/go/s):03499                  tst   <u003D
193F 2603             (/home/strick/go/s):03500                  bne   L18AB
1941 103F8C           (/home/strick/go/s):03501                  os9   I$WritLn 
1944 3505             (/home/strick/go/s):03502         L18AB    puls  b,cc
1946 35B0             (/home/strick/go/s):03503                  puls  y,x,pc
                      (/home/strick/go/s):03504         
1948 30C90124         (/home/strick/go/s):03505         L18DB    leax  >u0124,u       Point to PD.OPT work copy area
194C 5F               (/home/strick/go/s):03506                  clrb                 Change to CLRB
194D 103F8D           (/home/strick/go/s):03507                  os9   I$GetStt       Get current PD.OPT settings
1950 6D84             (/home/strick/go/s):03508                  tst   ,x             Check device type
1952 2624             (/home/strick/go/s):03509                  bne   L1914          If not SCF, don't bother changing stuff
1954 6CC91812         (/home/strick/go/s):03510                  inc   >u1812,u       Set flag that we are changing key defs
1958 EC8810           (/home/strick/go/s):03511                  ldd   <$10,x         Get PD.INT & PD.QUT chars (<CTRL>-<C> & <E>)
195B A7C9180F         (/home/strick/go/s):03512                  sta   >u180F,u       Save copy of PD.INT
195F E7C9180E         (/home/strick/go/s):03513                  stb   >u180E,u       Save copy of PD.QUT
1963 CC0A0C           (/home/strick/go/s):03514                  ldd   #$0A0C         Reload with up & down arrows
1966 ED8810           (/home/strick/go/s):03515                  std   <$10,x         Save 'em
1969 A606             (/home/strick/go/s):03516                  lda   $06,x          Get PD.NUL count (normally 0)
196B A7C91811         (/home/strick/go/s):03517                  sta   >u1811,u       Save copy
196F 8605             (/home/strick/go/s):03518                  lda   #$05           Replace with 5
1971 A706             (/home/strick/go/s):03519                  sta   $06,x
1973 4F               (/home/strick/go/s):03520                  clra  
1974 5F               (/home/strick/go/s):03521                  clrb                 Reset path options to new settings
1975 103F8E           (/home/strick/go/s):03522                  os9   I$SetStt       Do SS.OPT Setstat
                      (/home/strick/go/s):03523         
                      (/home/strick/go/s):03524         * Non-SCF devices go here (ex. a script file would be RBF)
1978 C61A             (/home/strick/go/s):03525         L1914    ldb   #SS.SSig       Send signal on data ready
197A 8E000B           (/home/strick/go/s):03526                  ldx   #$000B         Signal code to send is $B
197D 39               (/home/strick/go/s):03527                  rts                  Do SetStt, clear <E signal copy, and go to L191C
                      (/home/strick/go/s):03528         
                      (/home/strick/go/s):03529         * X still is $B from L1914
                      (/home/strick/go/s):03530         * Called when F$Sleep @ L0171 is interrupted by keyboard/mouse signal
197E D60E             (/home/strick/go/s):03531         L191C    ldb   <u000E         Get Signal code
1980 0F0E             (/home/strick/go/s):03532                  clr   <u000E         Clear memory copy of signal code
1982 C102             (/home/strick/go/s):03533                  cmpb  #S$Abort       Keyboard abort signal (<CTRL>-<E>)?
1984 2604             (/home/strick/go/s):03534                  bne   L1928          No, check next
1986 8D0C             (/home/strick/go/s):03535                  bsr   L1932          Write CR out if no history yet
1988 203F             (/home/strick/go/s):03536                  bra   L1967          Go backwards in history
                      (/home/strick/go/s):03537         
198A C103             (/home/strick/go/s):03538         L1928    cmpb  #S$Intrpt      Keyboard interrupt signal (<CTRL>-<C>)?
198C 1026E80E         (/home/strick/go/s):03539                  lbne  L017B          No check for $B signal (ignore rest)
1990 8D02             (/home/strick/go/s):03540                  bsr   L1932          Write CR out if no history yet
1992 205F             (/home/strick/go/s):03541                  bra   L1991          Go forwards in history
                      (/home/strick/go/s):03542         
                      (/home/strick/go/s):03543         * Keyboard abort or Keyboard interrupt signal
1994 6DC9180D         (/home/strick/go/s):03544         L1932    tst   >u180D,u       Any history entries yet?
1998 2605             (/home/strick/go/s):03545                  bne   L193D          Yes, exit
199A 8D1F             (/home/strick/go/s):03546                  bsr   L1959          Otherwise, put CR into the buffer
199C 103F8C           (/home/strick/go/s):03547                  os9   I$WritLn       Write it out to standard out
199F 39               (/home/strick/go/s):03548         L193D    rts   
                      (/home/strick/go/s):03549         
19A0 103F8B           (/home/strick/go/s):03550         L193E    os9   I$ReadLn       Read in line
19A3 240B             (/home/strick/go/s):03551                  bcc   L194E          No error, skip ahead
                      (/home/strick/go/s):03552         * NOTE: WHEN THE ABORT A SUB-FORKED PROGRAM BUG OCCURS, THE ABOVE READLN
                      (/home/strick/go/s):03553         * EXITS WITH CARRY SET & B=0 (ERROR 0)
19A5 C102             (/home/strick/go/s):03554                  cmpb  #$02           Go backward in history buffer signal?
19A7 2720             (/home/strick/go/s):03555                  beq   L1967          Yes, go process
19A9 C103             (/home/strick/go/s):03556                  cmpb  #$03           Go forward in history buffer signal?
19AB 2746             (/home/strick/go/s):03557                  beq   L1991          Yes, go process
19AD 160158           (/home/strick/go/s):03558                  lbra  L1AAA          Go to parse routine with unknown error in B
19B0 108C0001         (/home/strick/go/s):03559         L194E    cmpy  #$0001         Just 1 char. read?
19B4 10270149         (/home/strick/go/s):03560                  lbeq  L1AA3          Yes, go do normal parsing (no error)
19B8 1600DA           (/home/strick/go/s):03561                  lbra  L1A37          Otherwise, change chars <$0D to spaces
                      (/home/strick/go/s):03562         
                      (/home/strick/go/s):03563         * Change A to be standard output???
19BB 860D             (/home/strick/go/s):03564         L1959    lda   #C$CR          Carriage return
19BD 30C90124         (/home/strick/go/s):03565                  leax  >u0124,u       ??? Point to a buffer
19C1 A784             (/home/strick/go/s):03566                  sta   ,x             Save CR there
19C3 4F               (/home/strick/go/s):03567                  clra                 Prepare to write the CR out to standard input
19C4 108E0001         (/home/strick/go/s):03568                  ldy   #$0001
19C8 39               (/home/strick/go/s):03569                  rts   
                      (/home/strick/go/s):03570         * PD.QUT (redefined to be go back 1 in history buffer)
19C9 6DC9180C         (/home/strick/go/s):03571         L1967    tst   >u180C,u       Any lines in history buffer?
19CD 2605             (/home/strick/go/s):03572                  bne   L1972          Yes, go move between them
19CF 8DEA             (/home/strick/go/s):03573                  bsr   L1959          Otherwise, put CR into buffer
19D1 16012D           (/home/strick/go/s):03574                  lbra  L1AA3          Go to normal command parse routine (no error)
                      (/home/strick/go/s):03575         
19D4 E6C9180D         (/home/strick/go/s):03576         L1972    ldb   >u180D,u       Get 'current' history buffer entry #
19D8 C101             (/home/strick/go/s):03577                  cmpb  #$01           On the first one?
19DA 230D             (/home/strick/go/s):03578                  bls   L1987          Yes, go wrap to end
19DC E1C9180C         (/home/strick/go/s):03579                  cmpb  >u180C,u       Somehow point past last one?
19E0 2207             (/home/strick/go/s):03580                  bhi   L1987          Yes, bump back to last one
19E2 5A               (/home/strick/go/s):03581                  decb                 Bump to previous one
19E3 E7C9180D         (/home/strick/go/s):03582                  stb   >u180D,u       Save it as 'current' history entry #
19E7 202C             (/home/strick/go/s):03583                  bra   L19B3
                      (/home/strick/go/s):03584         
19E9 E6C9180C         (/home/strick/go/s):03585         L1987    ldb   >u180C,u       Get highest history entry #
19ED E7C9180D         (/home/strick/go/s):03586                  stb   >u180D,u       Make it the current
19F1 2022             (/home/strick/go/s):03587                  bra   L19B3
                      (/home/strick/go/s):03588         
                      (/home/strick/go/s):03589         * PD.INT (redefined to be go forward 1 in history buffer)
19F3 6DC9180C         (/home/strick/go/s):03590         L1991    tst   >u180C,u       Any lines in history buffer?
19F7 2605             (/home/strick/go/s):03591                  bne   L199C          Yes, go move between them
19F9 8DC0             (/home/strick/go/s):03592                  bsr   L1959          Otherwise, put CR into buffer
19FB 160103           (/home/strick/go/s):03593                  lbra  L1AA3          Go to normal command parse routine (no error)
                      (/home/strick/go/s):03594         
19FE E6C9180D         (/home/strick/go/s):03595         L199C    ldb   >u180D,u       Get current history entry #
1A02 E1C9180C         (/home/strick/go/s):03596                  cmpb  >u180C,u       Higher or same as last one?
1A06 2407             (/home/strick/go/s):03597                  bhs   L19AD          Yes, wrap to beginning
1A08 5C               (/home/strick/go/s):03598                  incb                 Bump to next one
1A09 E7C9180D         (/home/strick/go/s):03599                  stb   >u180D,u       Save it as 'current' history entry #
1A0D 2006             (/home/strick/go/s):03600                  bra   L19B3
                      (/home/strick/go/s):03601         
1A0F C601             (/home/strick/go/s):03602         L19AD    ldb   #$01           Set history entry # to 1st one
1A11 E7C9180D         (/home/strick/go/s):03603                  stb   >u180D,u       Save as 'current' entry #
1A15 8D1A             (/home/strick/go/s):03604         L19B3    bsr   L19D3          Go get ptr to history entry buffer we want
1A17 10AFC91813       (/home/strick/go/s):03605                  sty   >u1813,u       Save 'current' history buffer ptr
1A1C 30C90213         (/home/strick/go/s):03606                  leax  >u0213,u       Point to expanded shell prompt
1A20 10AEC901F7       (/home/strick/go/s):03607                  ldy   >u01F7,u       Get size of expanded shell prompt
1A25 8602             (/home/strick/go/s):03608                  lda   #$02           Std Err
1A27 103F8C           (/home/strick/go/s):03609                  os9   I$WritLn       Write out shell prompt 
1A2A 8D1C             (/home/strick/go/s):03610                  bsr   L19EA          Go Pre-load Read buffer with history entry
1A2C 243E             (/home/strick/go/s):03611                  bcc   L1A0E          No error, continue
1A2E 1600D7           (/home/strick/go/s):03612                  lbra  L1AAA          Normal parse with error
                      (/home/strick/go/s):03613         
                      (/home/strick/go/s):03614         * Find history entry # we want
                      (/home/strick/go/s):03615         * Entry: B=history entry # (1-xx)
                      (/home/strick/go/s):03616         * Exit: Y=Ptr to history buffer entry we wanted
1A31 10AEC9180A       (/home/strick/go/s):03617         L19D3    ldy   >u180A,u       Get ptr to start of history buffers
1A36 5A               (/home/strick/go/s):03618         L19D8    decb                 Bump down counter to find entry we want
1A37 270E             (/home/strick/go/s):03619                  beq   L19E9          Found it, skip ahead
1A39 6DA0             (/home/strick/go/s):03620         L19DB    tst   ,y+            Wrong one, search for end of one we are checking
1A3B 2705             (/home/strick/go/s):03621                  beq   L19E4          Found it, skip ahead
1A3D 1700B5           (/home/strick/go/s):03622                  lbsr  L1A97          Wrap buffer ptr if we hit end of all history
1A40 20F7             (/home/strick/go/s):03623                  bra   L19DB          Keep searching for end of current entry
                      (/home/strick/go/s):03624         
1A42 1700B0           (/home/strick/go/s):03625         L19E4    lbsr  L1A97          Wrap buffer ptr if we hit end of all history
1A45 20EF             (/home/strick/go/s):03626                  bra   L19D8          Go into next entry in history buffers
                      (/home/strick/go/s):03627         
1A47 39               (/home/strick/go/s):03628         L19E9    rts                  Found it, leave
                      (/home/strick/go/s):03629         
1A48 30C90124         (/home/strick/go/s):03630         L19EA    leax  >u0124,u       Point to temp buffer
1A4C 10AEC91813       (/home/strick/go/s):03631                  ldy   >u1813,u       Get ptr to current history buffer
1A51 5F               (/home/strick/go/s):03632                  clrb                 Set counter to 0 (size of buffer)
1A52 A6A0             (/home/strick/go/s):03633         L19F4    lda   ,y+            Get char from history buffer
1A54 2708             (/home/strick/go/s):03634                  beq   L1A00          Found end, continue
1A56 A780             (/home/strick/go/s):03635                  sta   ,x+            Put it in temp buffer
1A58 5C               (/home/strick/go/s):03636                  incb                 Bump up size counter
1A59 170099           (/home/strick/go/s):03637                  lbsr  L1A97          Wrap buffer ptr if we hit end of all history
1A5C 20F4             (/home/strick/go/s):03638                  bra   L19F4          Continue copying into temp buffer
1A5E 4F               (/home/strick/go/s):03639         L1A00    clra                 D=Size of history buffer
1A5F 5A               (/home/strick/go/s):03640                  decb  
1A60 1F02             (/home/strick/go/s):03641                  tfr   d,y            Move to proper register
1A62 30C90124         (/home/strick/go/s):03642                  leax  >u0124,u       Point to buffer history copy
1A66 C6A0             (/home/strick/go/s):03643                  ldb   #SS.Fill       Fill it with current selected history command
1A68 103F8E           (/home/strick/go/s):03644                  os9   I$SetStt 
1A6B 39               (/home/strick/go/s):03645                  rts   
                      (/home/strick/go/s):03646         
                      (/home/strick/go/s):03647         * Successfull SS.Fill of history buffer goes here
1A6C 8601             (/home/strick/go/s):03648         L1A0E    lda   #$01           Write copy of history buffer to std out
1A6E 103F8A           (/home/strick/go/s):03649                  os9   I$Write  
1A71 30C90124         (/home/strick/go/s):03650                  leax  >u0124,u       Point to current history buffer again
1A75 1F20             (/home/strick/go/s):03651                  tfr   y,d            Transfer # bytes written to D
1A77 8608             (/home/strick/go/s):03652                  lda   #C$BSP         Backspace char
1A79 A780             (/home/strick/go/s):03653         L1A1B    sta   ,x+            Fill buffer with backspaces
1A7B 5A               (/home/strick/go/s):03654                  decb  
1A7C 26FB             (/home/strick/go/s):03655                  bne   L1A1B
1A7E 30C90124         (/home/strick/go/s):03656                  leax  >u0124,u       Write them to reset cursor to start of line
1A82 8601             (/home/strick/go/s):03657                  lda   #$01
1A84 103F8A           (/home/strick/go/s):03658                  os9   I$Write  
1A87 CC001B           (/home/strick/go/s):03659                  ldd   #SS.Relea      Eat keyboard signal (SS.Fill cleared it out of
1A8A 103F8E           (/home/strick/go/s):03660                  os9   I$SetStt         the read buffer already)
1A8D C61A             (/home/strick/go/s):03661                  ldb   #SS.SSig       Setup for re-enabling it
1A8F 8E000B           (/home/strick/go/s):03662                  ldx   #$000B         Signal Code to send on keypress=$B
1A92 16E6F9           (/home/strick/go/s):03663                  lbra  L016A          Go re-enable signal send on keyboard/mouse input
                      (/home/strick/go/s):03664         
                      (/home/strick/go/s):03665         * Put new entry into history buffers, adjusting # used, etc.)
                      (/home/strick/go/s):03666         * Entry: Y=# bytes read in ReadLn <>1
1A95 3420             (/home/strick/go/s):03667         L1A37    pshs  y              Preserve # bytes read
1A97 1F20             (/home/strick/go/s):03668                  tfr   y,d            Move to D reg
1A99 10AEC91808       (/home/strick/go/s):03669                  ldy   >u1808,u       Get ptr to where next history entry will go
1A9E 30C90124         (/home/strick/go/s):03670                  leax  >u0124,u       Point to line entered by user
1AA2 A680             (/home/strick/go/s):03671         L1A44    lda   ,x+            Get char
1AA4 810D             (/home/strick/go/s):03672                  cmpa  #C$CR          Control char <$0d?
1AA6 2402             (/home/strick/go/s):03673                  bhs   L1A4C          No, save the character
1AA8 8620             (/home/strick/go/s):03674                  lda   #C$SPAC        Replace with space char if it is
1AAA A7A0             (/home/strick/go/s):03675         L1A4C    sta   ,y+            Save char into history buffer
1AAC 8D47             (/home/strick/go/s):03676                  bsr   L1A97          Wrap to beginning if we hit end
1AAE 10ACC9180A       (/home/strick/go/s):03677                  cmpy  >u180A,u       Point to entry #1?
1AB3 2602             (/home/strick/go/s):03678                  bne   L1A59          No, continue
1AB5 8D22             (/home/strick/go/s):03679                  bsr   L1A7B          Yes, make new #1 entry & drop # of entries
1AB7 5A               (/home/strick/go/s):03680         L1A59    decb                 Drop # bytes left in new entry
1AB8 26E8             (/home/strick/go/s):03681                  bne   L1A44          Not done, continue
1ABA 6FA0             (/home/strick/go/s):03682                  clr   ,y+            mark end with NUL
1ABC 8D37             (/home/strick/go/s):03683                  bsr   L1A97          Wrap to beginning if at end
1ABE 10ACC9180A       (/home/strick/go/s):03684                  cmpy  >u180A,u       Pointing to entry #1?
1AC3 2602             (/home/strick/go/s):03685                  bne   L1A69          No, skip ahead
1AC5 8D12             (/home/strick/go/s):03686                  bsr   L1A7B          Yes, make new #1 entry & drop # of entries
1AC7 6CC9180C         (/home/strick/go/s):03687         L1A69    inc   >u180C,u       Increase # of entries
1ACB 10AFC91808       (/home/strick/go/s):03688                  sty   >u1808,u       Save ptr to where next history entry will go
1AD0 3520             (/home/strick/go/s):03689                  puls  y              Restore # bytes read
1AD2 4F               (/home/strick/go/s):03690                  clra                 Point to temp buffer again
1AD3 30C90124         (/home/strick/go/s):03691                  leax  >u0124,u
1AD7 2028             (/home/strick/go/s):03692                  bra   L1AA3          Normal parse, no error
                      (/home/strick/go/s):03693         
                      (/home/strick/go/s):03694         * Reset ptr to new 1st entry in history buffer
1AD9 3420             (/home/strick/go/s):03695         L1A7B    pshs  y              Preserve current location in history buffer
1ADB 10AEC9180A       (/home/strick/go/s):03696                  ldy   >u180A,u       Point to start of 1st entry
1AE0 6DA0             (/home/strick/go/s):03697         L1A82    tst   ,y+            End of current entry?
1AE2 2704             (/home/strick/go/s):03698                  beq   L1A8A          Yes, skip ahead
1AE4 8D0F             (/home/strick/go/s):03699                  bsr   L1A97          No, wrap if we need to
1AE6 20F8             (/home/strick/go/s):03700                  bra   L1A82          Keep going until we find end
1AE8 8D0B             (/home/strick/go/s):03701         L1A8A    bsr   L1A97          Wrap if we need to
1AEA 6AC9180C         (/home/strick/go/s):03702                  dec   >u180C,u       Dec # lines in history buffer
1AEE 10AFC9180A       (/home/strick/go/s):03703                  sty   >u180A,u       Save new 'start of history' ptr
1AF3 35A0             (/home/strick/go/s):03704                  puls  pc,y           Restore current location & return
                      (/home/strick/go/s):03705         * If we are at end of history buffers, wrap to beginning (raw, has nothing to
                      (/home/strick/go/s):03706         *   do with entry #'s)
1AF5 10ACC91806       (/home/strick/go/s):03707         L1A97    cmpy  >u1806,u       Are we at end of buffer for history entries?
1AFA 2604             (/home/strick/go/s):03708                  bne   L1AA2          No, continue on
1AFC 31C91815         (/home/strick/go/s):03709                  leay  >u1815,u       Yes, reset to beginning of history buffers
1B00 39               (/home/strick/go/s):03710         L1AA2    rts   
                      (/home/strick/go/s):03711         
1B01 8D0C             (/home/strick/go/s):03712         L1AA3    bsr   L1AB1          Reset std paths to normal <CTRL>-<E>/<C> settings
1B03 1CFE             (/home/strick/go/s):03713                  andcc #^Carry        No error
1B05 16E6A6           (/home/strick/go/s):03714                  lbra  L018B          Normal command processing
                      (/home/strick/go/s):03715         
1B08 8D05             (/home/strick/go/s):03716         L1AAA    bsr   L1AB1          Reset std paths to normal <CTRL>-<E>/<C> settings
1B0A 1A01             (/home/strick/go/s):03717                  orcc  #Carry         Error
1B0C 16E69F           (/home/strick/go/s):03718                  lbra  L018B          Normal command processing
                      (/home/strick/go/s):03719         
                      (/home/strick/go/s):03720         * Reset all 3 standard paths' NUL counts/Keyboard Interrupt/Terminate settings
1B0F 3416             (/home/strick/go/s):03721         L1AB1    pshs  x,d            Preserve regs
1B11 6DC91812         (/home/strick/go/s):03722                  tst   >u1812,u       Check flag
1B15 271C             (/home/strick/go/s):03723                  beq   L1AD6          If 0 skip ahead
1B17 32E8E0           (/home/strick/go/s):03724                  leas  <-PD.OPT,s     Make 32 byte buffer on stack
1B1A 30E4             (/home/strick/go/s):03725                  leax  ,s             Point X to buffer
1B1C 5F               (/home/strick/go/s):03726                  clrb                 CHANGE TO CLRB
1B1D 4F               (/home/strick/go/s):03727                  clra                 Standard input path
1B1E 8D15             (/home/strick/go/s):03728                  bsr   L1AD8          Restore NUL counts, Keyboard Intrpt/Terminate
1B20 8601             (/home/strick/go/s):03729                  lda   #$01           Do same for Standard output path
1B22 8D11             (/home/strick/go/s):03730                  bsr   L1AD8
1B24 8602             (/home/strick/go/s):03731                  lda   #$02           Do same for Standard Error path
1B26 8D0D             (/home/strick/go/s):03732                  bsr   L1AD8
1B28 32E820           (/home/strick/go/s):03733                  leas  <PD.OPT,s      Eat stack buffer
1B2B 6FC91812         (/home/strick/go/s):03734                  clr   >u1812,u       Reset PD.OPT flags to 0
1B2F 6FC9180D         (/home/strick/go/s):03735                  clr   >u180D,u
1B33 3596             (/home/strick/go/s):03736         L1AD6    puls  pc,x,d         Restore regs & return
                      (/home/strick/go/s):03737         
                      (/home/strick/go/s):03738         * Restore path options to preserved Keyboard terminate/interrupt & end of
                      (/home/strick/go/s):03739         * line NUL counts
1B35 3402             (/home/strick/go/s):03740         L1AD8    pshs  a              Preserve path #
1B37 103F8D           (/home/strick/go/s):03741                  os9   I$GetStt       Get current PD.OPT settings
1B3A A6C9180E         (/home/strick/go/s):03742                  lda   >u180E,u       Get copy of Keyboard terminate char
1B3E A78811           (/home/strick/go/s):03743                  sta   <PD.QUT-PD.OPT,x  Save into buffered copy
1B41 A6C9180F         (/home/strick/go/s):03744                  lda   >u180F,u       Get copy of Keyboard interrupt char
1B45 A78810           (/home/strick/go/s):03745                  sta   <PD.INT-PD.OPT,x  Save into buffered copy
1B48 A6C91811         (/home/strick/go/s):03746                  lda   >u1811,u       Get copy of end of line NUL count
1B4C A706             (/home/strick/go/s):03747                  sta   $6,x           Save into buffered copy
1B4E 3502             (/home/strick/go/s):03748                  puls  a              Get path # back
1B50 103F8E           (/home/strick/go/s):03749                  os9   I$SetStt       Reset path options with restored values & return
1B53 39               (/home/strick/go/s):03750                  rts   
                      (/home/strick/go/s):03751         
1B54 F7A3C4           (/home/strick/go/s):03752                  emod
     1B57             (/home/strick/go/s):03753         eom      equ   *
                      (/home/strick/go/s):03754                  end
