                      (/home/strick/go/s):00001         ********************************************************************
                      (/home/strick/go/s):00002         * IOMan - NitrOS-9 Level 2 I/O Manager module
                      (/home/strick/go/s):00003         *
                      (/home/strick/go/s):00004         * $Id$
                      (/home/strick/go/s):00005         *
                      (/home/strick/go/s):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/go/s):00007         * Comment
                      (/home/strick/go/s):00008         * ------------------------------------------------------------------
                      (/home/strick/go/s):00009         *          ????/??/??  ???
                      (/home/strick/go/s):00010         * NitrOS-9 2.00 distribution.
                      (/home/strick/go/s):00011         *
                      (/home/strick/go/s):00012         *  13      2002/04/30  Boisy G. Pitre
                      (/home/strick/go/s):00013         * Fixed a long-standing bug in IOMan where the I$Detach routine would
                      (/home/strick/go/s):00014         * deallocate the V$STAT area.  This is because the V$USRS offset on the
                      (/home/strick/go/s):00015         * stack, where the temporary device table entry was being built, contained
                      (/home/strick/go/s):00016         * zero.  I$Detach wouldn't bother to do a lookup to see if it should
                      (/home/strick/go/s):00017         * release the memory if this value was zero, so we now force I$Detach to
                      (/home/strick/go/s):00018         * do the lookup no matter the V$USRS value.
                      (/home/strick/go/s):00019         *
                      (/home/strick/go/s):00020         *  13r2    2002/12/31  Boisy G. Pitre
                      (/home/strick/go/s):00021         * Made more source changes, found discrepancy in value of POLSIZ in
                      (/home/strick/go/s):00022         * certain areas, fixed. Also added 6809 conditional code for future
                      (/home/strick/go/s):00023         * integration into OS-9 Level Two.
                      (/home/strick/go/s):00024         *
                      (/home/strick/go/s):00025         *  13r3    2003/03/04  Boisy G. Pitre
                      (/home/strick/go/s):00026         * Conditionalized out Level 3 code.
                      (/home/strick/go/s):00027         *
                      (/home/strick/go/s):00028         *  13r4    2003/04/09  Boisy G. Pitre
                      (/home/strick/go/s):00029         * Fixed bug where wrong address was being put in V$STAT when driver's
                      (/home/strick/go/s):00030         * INIT routine was called.
                      (/home/strick/go/s):00031         *
                      (/home/strick/go/s):00032         *  13r5    2004/07/12  Boisy G. Pitre
                      (/home/strick/go/s):00033         * Fixed bug where device descriptor wasn't being unlinked when V$USRS > 0
                      (/home/strick/go/s):00034         * due to the value in X not being loaded.
                      (/home/strick/go/s):00035         
                      (/home/strick/go/s):00036                  nam   IOMan
                      (/home/strick/go/s):00037                  ttl   NitrOS-9 Level 2 I/O Manager module
                      (/home/strick/go/s):00038         
                      (/home/strick/go/s):00039         * Disassembled 02/04/29 23:10:07 by Disasm v1.6 (C) 1988 by RML
                      (/home/strick/go/s):00040         
                      (/home/strick/go/s):00041                  IFP1
                      (/home/strick/go/s):00042                  use   defsfile
                      (         defsfile):00001                  use   ../defsfile
     0002             (      ../defsfile):00001         Level    equ   2
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (            os9.d):00637         * and for bytes in the system memory map at D.SysMem.
                      (            os9.d):00638         * A value of 0 indicates an unused/unassigned block.
                      (            os9.d):00639         * In the code, block assignment often involves incrementing a value
                      (            os9.d):00640         * from 0 to 1 rather than explict use of RAMinUse.
                      (            os9.d):00641         *
     0080             (            os9.d):00642         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00643         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00644         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00645         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00646         *
                      (            os9.d):00647         * Service Dispatch Table special entries
                      (            os9.d):00648         *
     00FE             (            os9.d):00649         IOEntry        EQU       254
                      (            os9.d):00650         
                      (            os9.d):00651                        ENDC      
                      (            os9.d):00652         
                      (            os9.d):00653                        TTL       Structure Formats
                      (            os9.d):00654                        PAG       
                      (            os9.d):00655         ************************************
                      (            os9.d):00656         * Module Directory Entry Definitions
                      (            os9.d):00657         *
                      (            os9.d):00658                        ORG       0
                      (            os9.d):00659                        IFGT      Level-1
0000                  (            os9.d):00660         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00661         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00662                        ENDC      
0004                  (            os9.d):00663         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00664         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00665         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00666         
                      (            os9.d):00667         ************************************
                      (            os9.d):00668         * Module Definitions
                      (            os9.d):00669         *
                      (            os9.d):00670         * Universal Module Offsets
                      (            os9.d):00671         *
                      (            os9.d):00672                        ORG       0
0000                  (            os9.d):00673         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00674         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00675         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00676         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00677         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00678         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00679         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00680         *
                      (            os9.d):00681         * Type-Dependent Module Offsets
                      (            os9.d):00682         *
                      (            os9.d):00683         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00684         *
0009                  (            os9.d):00685         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Program Module
                      (            os9.d):00688         *
000B                  (            os9.d):00689         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Driver, Device Descriptor Module
                      (            os9.d):00692         *
000D                  (            os9.d):00693         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00694         *
                      (            os9.d):00695         * Device Descriptor Module
                      (            os9.d):00696         *
                      (            os9.d):00697                        ORG       M$IDSize
0009                  (            os9.d):00698         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00699         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00700                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00701         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00702         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00703         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00704         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00705         *
                      (            os9.d):00706         * Configuration Module Entry Offsets
                      (            os9.d):00707         *
                      (            os9.d):00708                        ORG       M$IDSize
0009                  (            os9.d):00709         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00710         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00711         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00712         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00713         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00714         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00715         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00716         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00717         
0017                  (            os9.d):00718         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00719         OSVer          RMB       1                   OS version
0019                  (            os9.d):00720         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00721         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00722         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00723         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00724         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00725         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00726                        RMB       4                   reserved for future use
                      (            os9.d):00727         
                      (            os9.d):00728                        IFGT      Level-1
                      (            os9.d):00729         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00730         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00731         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00732         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00733         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00734                        ENDC      
                      (            os9.d):00735         
                      (            os9.d):00736         * Feature1 byte definitions
     0001             (            os9.d):00737         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00738         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00739         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00740         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00741         
                      (            os9.d):00742                        PAG       
                      (            os9.d):00743         **************************
                      (            os9.d):00744         * Module Field Definitions
                      (            os9.d):00745         *
                      (            os9.d):00746         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00747         *
     0087             (            os9.d):00748         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00749         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00750         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00751         
                      (            os9.d):00752         *
                      (            os9.d):00753         * Module Type/Language Field Masks
                      (            os9.d):00754         *
     00F0             (            os9.d):00755         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00756         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00757         
                      (            os9.d):00758         *
                      (            os9.d):00759         * Module Type Values
                      (            os9.d):00760         *
     00F0             (            os9.d):00761         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00762         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00763         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00764         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00765         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00766         Data           EQU       $40                 Data Module
     0030             (            os9.d):00767         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00768         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00769         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00770         
                      (            os9.d):00771         *
                      (            os9.d):00772         * Module Language Values
                      (            os9.d):00773         *
     0001             (            os9.d):00774         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00775         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00776         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00777         CCode          EQU       4                   C I-code
     0005             (            os9.d):00778         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00779         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00780         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00781         *
                      (            os9.d):00782         * Module Attributes / Revision byte
                      (            os9.d):00783         *
                      (            os9.d):00784         * Field Masks
                      (            os9.d):00785         *
     00F0             (            os9.d):00786         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00787         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00788         *
                      (            os9.d):00789         * Attribute Flags
                      (            os9.d):00790         *
     0080             (            os9.d):00791         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00792         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00793         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00794         
                      (            os9.d):00795         ********************
                      (            os9.d):00796         * Device Type Values
                      (            os9.d):00797         *
                      (            os9.d):00798         * These values define various classes of devices, which are
                      (            os9.d):00799         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00800         * in a device's device descriptor.
                      (            os9.d):00801         *
     0000             (            os9.d):00802         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00803         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00804         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00805         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00806         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00807         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00808         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00809         
                      (            os9.d):00810         *********************
                      (            os9.d):00811         * CRC Result Constant
                      (            os9.d):00812         *
     0080             (            os9.d):00813         CRCCon1        EQU       $80
     0FE3             (            os9.d):00814         CRCCon23       EQU       $0FE3
                      (            os9.d):00815         
                      (            os9.d):00816                        TTL       Process Information
                      (            os9.d):00817                        PAG       
                      (            os9.d):00818         ********************************
                      (            os9.d):00819         * Process Descriptor Definitions
                      (            os9.d):00820         *
                      (            os9.d):00821                        IFEQ      Level-1
                      (            os9.d):00822         
                      (            os9.d):00823         * Level 1 process descriptor defs
002A                  (            os9.d):00824         DefIOSiz       EQU       12
002A                  (            os9.d):00825         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00826         
                      (            os9.d):00827                        ORG       0
002A                  (            os9.d):00828         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00829         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00830         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00831         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00832         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00833         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00834         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00835         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00836         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00837         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00838         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00839         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00840         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00841         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00842         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00843         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00844         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00845         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00846         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00847         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00848         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00849         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00850         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00851         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00852         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00853                        RMB       $40-.               unused
002A                  (            os9.d):00854         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00855         
                      (            os9.d):00856         *
                      (            os9.d):00857         * Process State Flags
                      (            os9.d):00858         *
002A                  (            os9.d):00859         SysState       EQU       %10000000
002A                  (            os9.d):00860         TimSleep       EQU       %01000000
002A                  (            os9.d):00861         TimOut         EQU       %00100000
002A                  (            os9.d):00862         ImgChg         EQU       %00010000
002A                  (            os9.d):00863         Condem         EQU       %00000010
002A                  (            os9.d):00864         Dead           EQU       %00000001
                      (            os9.d):00865         
                      (            os9.d):00866                        ELSE      
                      (            os9.d):00867         
                      (            os9.d):00868         * Level 2 process descriptor defs
     0010             (            os9.d):00869         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00870         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00871         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00872         
                      (            os9.d):00873                        ORG       0
0000                  (            os9.d):00874         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00875         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00876         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00877         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00878         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00879         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00880         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00881         P$User         RMB       2                   User Index
000A                  (            os9.d):00882         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00883         P$Age          RMB       1                   Age
000C                  (            os9.d):00884         P$State        RMB       1                   Status
000D                  (            os9.d):00885         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00886         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00887         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00888         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00889         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00890         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00891         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00892         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00893         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00894         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00895         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00896                        RMB       $20-.               unused
0020                  (            os9.d):00897         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00898         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00899         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00900         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00901         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00902         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00903         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00904         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00905         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00906         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00907         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00908         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00909         P$Alarm        RMB       6
00C9                  (            os9.d):00910                        RMB       $200-.              Local stack
     0200             (            os9.d):00911         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00912         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00913         
                      (            os9.d):00914         *
                      (            os9.d):00915         * Process State Flags
                      (            os9.d):00916         *
     0080             (            os9.d):00917         SysState       EQU       %10000000
     0040             (            os9.d):00918         TimSleep       EQU       %01000000
     0020             (            os9.d):00919         TimOut         EQU       %00100000
     0010             (            os9.d):00920         ImgChg         EQU       %00010000
     0008             (            os9.d):00921         Suspend        EQU       %00001000
     0002             (            os9.d):00922         Condem         EQU       %00000010
     0001             (            os9.d):00923         Dead           EQU       %00000001
                      (            os9.d):00924         
                      (            os9.d):00925                        ENDC      
                      (            os9.d):00926         
                      (            os9.d):00927                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00928                        PAG       
                      (            os9.d):00929         *************************
                      (            os9.d):00930         * Path Descriptor Offsets
                      (            os9.d):00931         *
                      (            os9.d):00932                        ORG       0
0000                  (            os9.d):00933         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00934         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00935         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00936         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00937         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00938         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00939         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00940         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00941         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00942         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00943                        RMB       64-.                Path options
     0040             (            os9.d):00944         PDSIZE         EQU       .
                      (            os9.d):00945         
                      (            os9.d):00946         *
                      (            os9.d):00947         * Pathlist Special Symbols
                      (            os9.d):00948         *
     002F             (            os9.d):00949         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00950         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00951         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00952         
                      (            os9.d):00953                        PAG       
                      (            os9.d):00954         ****************************
                      (            os9.d):00955         * File Manager Entry Offsets
                      (            os9.d):00956         *
                      (            os9.d):00957                        ORG       0
0000                  (            os9.d):00958         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00959         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00960         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00961         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00962         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00963         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00964         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00965         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00966         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00967         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00968         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00969         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00970         FMCLOS         RMB       3                   Close File
                      (            os9.d):00971         
                      (            os9.d):00972         *****************************
                      (            os9.d):00973         * Device Driver Entry Offsets
                      (            os9.d):00974         *
                      (            os9.d):00975                        ORG       0
0000                  (            os9.d):00976         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00977         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00978         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00979         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00980         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00981         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00982         
                      (            os9.d):00983         *********************
                      (            os9.d):00984         * Device Table Format
                      (            os9.d):00985         *
                      (            os9.d):00986                        ORG       0
0000                  (            os9.d):00987         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00988         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00989         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00990         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00991         V$USRS         RMB       1                   use count
                      (            os9.d):00992                        IFGT      Level-1
0009                  (            os9.d):00993         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00994         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00995                        ENDC      
     000D             (            os9.d):00996         DEVSIZ         EQU       .
                      (            os9.d):00997         
                      (            os9.d):00998         *******************************
                      (            os9.d):00999         * Device Static Storage Offsets
                      (            os9.d):01000         *
                      (            os9.d):01001                        ORG       0
0000                  (            os9.d):01002         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):01003         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01004         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01005         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01006         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01007         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01008         
                      (            os9.d):01009         ********************************
                      (            os9.d):01010         * Interrupt Polling Table Format
                      (            os9.d):01011         *
                      (            os9.d):01012                        ORG       0
0000                  (            os9.d):01013         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01014         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01015         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01016         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01017         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01018         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01019                        IFGT      Level-1
0009                  (            os9.d):01020         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01021                        ENDC      
     000B             (            os9.d):01022         POLSIZ         EQU       .
                      (            os9.d):01023         
                      (            os9.d):01024         ********************
                      (            os9.d):01025         * VIRQ packet format
                      (            os9.d):01026         *
                      (            os9.d):01027                        ORG       0
0000                  (            os9.d):01028         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01029         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01030         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01031         Vi.PkSz        EQU       .
                      (            os9.d):01032         
     0001             (            os9.d):01033         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01034         
                      (            os9.d):01035                        PAG       
                      (            os9.d):01036         *************************************
                      (            os9.d):01037         * Machine Characteristics Definitions
                      (            os9.d):01038         *
     0000             (            os9.d):01039         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01040         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01041         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01042         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01043                        IFNE      H6309
0005                  (            os9.d):01044         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01045         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01046         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01047         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01048         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01049         R$X            EQU       6                   X Index register
0005                  (            os9.d):01050         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01051         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01052         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01053         R$Size         EQU       14                  Total register package size
                      (            os9.d):01054                        ELSE      
     0003             (            os9.d):01055         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01056         R$X            EQU       4                   X Index register
     0006             (            os9.d):01057         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01058         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01059         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01060         R$Size         EQU       12                  Total register package size
                      (            os9.d):01061                        ENDC      
                      (            os9.d):01062         
                      (            os9.d):01063         * MD register masks
                      (            os9.d):01064         * 6309 definitions
     0080             (            os9.d):01065         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01066         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01067         
     0080             (            os9.d):01068         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01069         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01070         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01071         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01072         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01073         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01074         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01075         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01076         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01077         Sign           EQU       %10000000           sign bit
                      (            os9.d):01078         
                      (            os9.d):01079                        TTL       Error Code Definitions
                      (            os9.d):01080                        PAG       
                      (            os9.d):01081         ************************
                      (            os9.d):01082         * Error Code Definitions
                      (            os9.d):01083         *
                      (            os9.d):01084         * Basic09 Error Codes
                      (            os9.d):01085         *
                      (            os9.d):01086                        ORG       10
000A                  (            os9.d):01087         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01088         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01089         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01090         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01091         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01092         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01093         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01094         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01095         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01096         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01097         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01098         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01099         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01100         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01101         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01102         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01103         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01104         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01105         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01106         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01107         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01108         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01109         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01110         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01111         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01112         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01113         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01114         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01115         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01116         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01117         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01118         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01119         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01120         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01121         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01122         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01123         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01124         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01125         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01126         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01127         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01128         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01129         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01130         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01131         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01132         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01133         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01134         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01135         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01136         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01137         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01138         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01139         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01140         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01141         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01142         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01143         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01144         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01145         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01146         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01147         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01148         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01149         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01150         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01151         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01152         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01153         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01154         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01155         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01156         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01157         
                      (            os9.d):01158         *
                      (            os9.d):01159         * System Dependent Error Codes
                      (            os9.d):01160         *
                      (            os9.d):01161         
                      (            os9.d):01162         * Level 2 windowing error codes
                      (            os9.d):01163                        ORG       183
00B7                  (            os9.d):01164         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01165         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01166         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01167         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01168         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01169                        RMB       1                   reserved
00BD                  (            os9.d):01170         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01171         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01172         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01173         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01174         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01175         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01176         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01177         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01178         
00C5                  (            os9.d):01179         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01180         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01181         E$Alias        RMB       1
                      (            os9.d):01182         
                      (            os9.d):01183         
                      (            os9.d):01184         *
                      (            os9.d):01185         * Standard NitrOS-9 Error Codes
                      (            os9.d):01186         *
                      (            os9.d):01187                        ORG       200
00C8                  (            os9.d):01188         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01189         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01190         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01191         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01192         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01193         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01194         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01195         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01196         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01197         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01198         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01199         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01200                        RMB       1
00D5                  (            os9.d):01201         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01202         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01203         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01204         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01205         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01206         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01207         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01208         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01209         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01210                        RMB       1
00DF                  (            os9.d):01211         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01212         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01213         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01214                        RMB       1
00E2                  (            os9.d):01215         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01216         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01217         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01218         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01219         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01220         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01221         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01222         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01223         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01224         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01225         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01226         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01227         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01228         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01229                        RMB       $F0-.               reserved
00F0                  (            os9.d):01230         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01231         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01232         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01233         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01234         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01235         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01236         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01237         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01238         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01239         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01240         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01241         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01242         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01243         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01244         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01245         
                      (            os9.d):01246         
                      (            os9.d):01247                        IFGT      Level-2
                      (            os9.d):01248         ***************************
                      (            os9.d):01249         * Level 3 Defs
                      (            os9.d):01250         *
                      (            os9.d):01251         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01252         *
00FF                  (            os9.d):01253         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01254         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01255         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01256         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01257         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01258         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01259                        ENDC      
                      (            os9.d):01260         
                      (            os9.d):01261                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
     00E0             (            scf.d):00222         PARMASK        EQU       %11100000
                      (            scf.d):00223         
                      (            scf.d):00224         * PD.BAU definitions
                      (            scf.d):00225         *
                      (            scf.d):00226         * Baud rate
     0000             (            scf.d):00227         B110           EQU       %00000000
     0001             (            scf.d):00228         B300           EQU       %00000001
     0002             (            scf.d):00229         B600           EQU       %00000010
     0003             (            scf.d):00230         B1200          EQU       %00000011
     0004             (            scf.d):00231         B2400          EQU       %00000100
     0005             (            scf.d):00232         B4800          EQU       %00000101
     0006             (            scf.d):00233         B9600          EQU       %00000110
     0007             (            scf.d):00234         B19200         EQU       %00000111
     0008             (            scf.d):00235         B38400         EQU       %00001000
     0009             (            scf.d):00236         B57600         EQU       %00001001
     000A             (            scf.d):00237         B115200        EQU       %00001010
                      (            scf.d):00238         * Word size
     0000             (            scf.d):00239         WORD8          EQU       %00000000
     0020             (            scf.d):00240         WORD7          EQU       %00100000
                      (            scf.d):00241         * Stop bits
     0000             (            scf.d):00242         STOP1          EQU       %00000000
     0010             (            scf.d):00243         STOP2          EQU       %00010000
                      (            scf.d):00244         
                      (            scf.d):00245                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         ********************************
                      (           coco.d):00148         * Boot defs for NitrOS-9 Level 1
                      (           coco.d):00149         *
                      (           coco.d):00150         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00151         * system.
                      (           coco.d):00152         *
0004                  (           coco.d):00153         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE
                      (           coco.d):00156         
                      (           coco.d):00157         ******************************************
                      (           coco.d):00158         * Boot defs for NitrOS-9 Level 2 and above
                      (           coco.d):00159         *
                      (           coco.d):00160         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00161         * system.
                      (           coco.d):00162         *
     ED00             (           coco.d):00163         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (           coco.d):00164         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (           coco.d):00165         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (           coco.d):00166         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (           coco.d):00167         
                      (           coco.d):00168                        ENDC
                      (           coco.d):00169         
                      (           coco.d):00170         * On the CoCo, the boot track is all of track 34
                      (           coco.d):00171         
     0022             (           coco.d):00172         Bt.Track       EQU       34                  Boot track
     0000             (           coco.d):00173         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (           coco.d):00174         
                      (           coco.d):00175         
     1080             (           coco.d):00176         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (           coco.d):00177         
                      (           coco.d):00178         
                      (           coco.d):00179                        IFEQ      Level-1
                      (           coco.d):00180         
                      (           coco.d):00181         *************************************************
                      (           coco.d):00182         *
                      (           coco.d):00183         * NitrOS-9 Level 1 Section
                      (           coco.d):00184         *
                      (           coco.d):00185         *************************************************
                      (           coco.d):00186         
0004                  (           coco.d):00187         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00188         
                      (           coco.d):00189                        ELSE      
                      (           coco.d):00190         
                      (           coco.d):00191         *************************************************
                      (           coco.d):00192         *
                      (           coco.d):00193         * NitrOS-9 Level 2 Section
                      (           coco.d):00194         *
                      (           coco.d):00195         *************************************************
                      (           coco.d):00196         
                      (           coco.d):00197         ****************************************
                      (           coco.d):00198         * Dynamic Address Translator Definitions
                      (           coco.d):00199         *
     0008             (           coco.d):00200         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00201         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00202         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00203         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00204         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00205         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00206         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00207         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00208         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00209         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00210         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00211         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00212         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00213         IOBlock        EQU       $3F
     003F             (           coco.d):00214         ROMBlock       EQU       $3F
     007F             (           coco.d):00215         IOAddr         EQU       $7F
     0001             (           coco.d):00216         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00217         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00218         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00219         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00220         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00221         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00222         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00223         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00224         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00225         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00226         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00227         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00228         
                      (           coco.d):00229         ***************************
                      (           coco.d):00230         * Color Computer 3 Specific
                      (           coco.d):00231         *
     0001             (           coco.d):00232         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00233         
                      (           coco.d):00234         ********************
                      (           coco.d):00235         * Hardware addresses
                      (           coco.d):00236         *
     FF00             (           coco.d):00237         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00238         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00239         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00240         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00241         
     0007             (           coco.d):00242         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00243         
                      (           coco.d):00244         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (           coco.d):00245         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (           coco.d):00246         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (           coco.d):00247         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (           coco.d):00248         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (           coco.d):00249         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (           coco.d):00250         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (           coco.d):00251         * it will end up with its own block assigned for CPU address space $E000-
                      (           coco.d):00252         * $FFFF but the top of the address space is unusable by the user process:
                      (           coco.d):00253         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (           coco.d):00254         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (           coco.d):00255         * For the COCO GIME, it's always $3F.
     003F             (           coco.d):00256         KrnBlk         SET       $3F
                      (           coco.d):00257         
                      (           coco.d):00258                        ENDC
                      (           coco.d):00259                        ENDC
                      (           coco.d):00260         
                      (/home/strick/go/s):00043                  ENDC
                      (/home/strick/go/s):00044         
     00C1             (/home/strick/go/s):00045         tylg     set   Systm+Objct
     0085             (/home/strick/go/s):00046         atrv     set   ReEnt+rev
     0005             (/home/strick/go/s):00047         rev      set   $05
     000D             (/home/strick/go/s):00048         edition  set   13
                      (/home/strick/go/s):00049         
0000 87CD091A000DC185 (/home/strick/go/s):00050                  mod   eom,name,tylg,atrv,start,size
     EF00130000
                      (/home/strick/go/s):00051         
0000.                 (/home/strick/go/s):00052         u0000    rmb   0
     0000             (/home/strick/go/s):00053         size     equ   .
                      (/home/strick/go/s):00054         
000D 494F4D61EE       (/home/strick/go/s):00055         name     fcs   /IOMan/
0012 0D               (/home/strick/go/s):00056                  fcb   edition
                      (/home/strick/go/s):00057         
0013 9E24             (/home/strick/go/s):00058         start    ldx   <D.Init                  get pointer to init module
0015 A60D             (/home/strick/go/s):00059                  lda   DevCnt,x                 get number of entries in device table
0017 C60D             (/home/strick/go/s):00060                  ldb   #DEVSIZ                  get size of each entry
0019 3D               (/home/strick/go/s):00061                  mul                            calculate size needed for device table
001A 3406             (/home/strick/go/s):00062                  pshs  d                        preserve it
001C A60C             (/home/strick/go/s):00063                  lda   PollCnt,x                get number of entries in polling table
001E C60B             (/home/strick/go/s):00064                  ldb   #POLSIZ                  get size of each entry
0020 3D               (/home/strick/go/s):00065                  mul                            calculate size needed for polling table
0021 3406             (/home/strick/go/s):00066                  pshs  d                        preserve it
                      (/home/strick/go/s):00067                  IFNE  H6309
                      (/home/strick/go/s):00068                  asld
                      (/home/strick/go/s):00069                  ELSE
0023 58               (/home/strick/go/s):00070                  lslb                           multiply by 2
0024 49               (/home/strick/go/s):00071                  rola
                      (/home/strick/go/s):00072                  ENDC
0025 E362             (/home/strick/go/s):00073                  addd  $02,s                    add to size of device table
0027 103F28           (/home/strick/go/s):00074                  os9   F$SRqMem                 allocate memory
002A 2534             (/home/strick/go/s):00075                  bcs   Crash                    branch if error
                      (/home/strick/go/s):00076         * clear allocated mem
002C 30C4             (/home/strick/go/s):00077                  leax  ,u                       point to memory
                      (/home/strick/go/s):00078                  IFNE  H6309
                      (/home/strick/go/s):00079                  leay  <TheZero,pcr
                      (/home/strick/go/s):00080                  tfr   d,w
                      (/home/strick/go/s):00081                  tfm   y,x+
                      (/home/strick/go/s):00082                  ELSE
002E 6F80             (/home/strick/go/s):00083         ClrLoop  clr   ,x+                      clear a byte
0030 830001           (/home/strick/go/s):00084                  subd  #$0001                   done?
0033 26F9             (/home/strick/go/s):00085                  bne   ClrLoop                  no, keep going
                      (/home/strick/go/s):00086                  ENDC
0035 DF80             (/home/strick/go/s):00087                  stu   <D.DevTbl                save pointer to device table
                      (/home/strick/go/s):00088                  IFNE  H6309
                      (/home/strick/go/s):00089                  puls  x,d
                      (/home/strick/go/s):00090                  addr  u,x
                      (/home/strick/go/s):00091                  stx   <D.PolTbl
                      (/home/strick/go/s):00092                  addr  d,x
                      (/home/strick/go/s):00093                  stx   <D.CLTb
                      (/home/strick/go/s):00094                  ELSE
0037 ECE1             (/home/strick/go/s):00095                  ldd   ,s++                     get pointer to device table
0039 DDB0             (/home/strick/go/s):00096                  std   <D.CLTb                  save to globals temporarily
003B ECE1             (/home/strick/go/s):00097                  ldd   ,s++                     get size of device table
003D 30CB             (/home/strick/go/s):00098                  leax  d,u                      point x to the end of device table
003F 9F82             (/home/strick/go/s):00099                  stx   <D.PolTbl                save to globals
0041 DCB0             (/home/strick/go/s):00100                  ldd   <D.CLTb                  get VIRQ table size
0043 308B             (/home/strick/go/s):00101                  leax  d,x                      add it to end of device table
0045 9FB0             (/home/strick/go/s):00102                  stx   <D.CLTb                  and save VIRQ table address
                      (/home/strick/go/s):00103                  ENDC
0047 9E88             (/home/strick/go/s):00104                  ldx   <D.PthDBT                get address of path desc table
0049 103F30           (/home/strick/go/s):00105                  os9   F$All64                  split it into 64 byte chunks
004C 2512             (/home/strick/go/s):00106                  bcs   Crash                    branch if error
004E 9F88             (/home/strick/go/s):00107                  stx   <D.PthDBT                save pointer back
0050 103F31           (/home/strick/go/s):00108                  os9   F$Ret64
0053 308D057D         (/home/strick/go/s):00109                  leax  >IRQPoll,pcr             point to polling routine
0057 9F26             (/home/strick/go/s):00110                  stx   <D.Poll                  save the vector address
0059 318C06           (/home/strick/go/s):00111                  leay  <IOCalls,pcr             point to service vector table
005C 103F32           (/home/strick/go/s):00112                  os9   F$SSvc                   set up calls
005F 39               (/home/strick/go/s):00113                  rts                            and return to system
                      (/home/strick/go/s):00114         
                      (/home/strick/go/s):00115         ******************************
                      (/home/strick/go/s):00116         *
                      (/home/strick/go/s):00117         * Fatal error Crash the system
                      (/home/strick/go/s):00118         *
0060                  (/home/strick/go/s):00119         Crash
                      (/home/strick/go/s):00120                  IFGT  Level-1
0060 0E6B             (/home/strick/go/s):00121                  jmp   <D.Crash
                      (/home/strick/go/s):00122                  ELSE
                      (/home/strick/go/s):00123                  jmp   [>$FFFE]
                      (/home/strick/go/s):00124                  ENDC
                      (/home/strick/go/s):00125         
                      (/home/strick/go/s):00126         ******************************
                      (/home/strick/go/s):00127         *
                      (/home/strick/go/s):00128         * System service routine vector table
                      (/home/strick/go/s):00129         *
0062 7F               (/home/strick/go/s):00130         IOCalls  fcb   $7F
0063 0084             (/home/strick/go/s):00131                  fdb   UsrIO-*-2
0065 01               (/home/strick/go/s):00132                  fcb   F$Load
0066 05E8             (/home/strick/go/s):00133                  fdb   FLoad-*-2
                      (/home/strick/go/s):00134                  IFGT  Level-1
0068 81               (/home/strick/go/s):00135                  fcb   I$Detach
0069 0612             (/home/strick/go/s):00136                  fdb   IDetach0-*-2
                      (/home/strick/go/s):00137                  ENDC
006B 0F               (/home/strick/go/s):00138                  fcb   F$PErr
006C 07DD             (/home/strick/go/s):00139                  fdb   FPErr-*-2
006E AB               (/home/strick/go/s):00140                  fcb   F$IOQu+$80
006F 0822             (/home/strick/go/s):00141                  fdb   FIOQu-*-2
0071 FF               (/home/strick/go/s):00142                  fcb   $FF
0072 007A             (/home/strick/go/s):00143                  fdb   SysIO-*-2
0074 AA               (/home/strick/go/s):00144                  fcb   F$IRQ+$80
0075 04DD             (/home/strick/go/s):00145                  fdb   FIRQ-*-2
0077 B3               (/home/strick/go/s):00146                  fcb   F$IODel+$80
0078 0007             (/home/strick/go/s):00147                  fdb   FIODel-*-2
                      (/home/strick/go/s):00148                  IFGT  Level-1
007A 21               (/home/strick/go/s):00149                  fcb   F$NMLink
007B 0598             (/home/strick/go/s):00150                  fdb   FNMLink-*-2
007D 22               (/home/strick/go/s):00151                  fcb   F$NMLoad
007E 0576             (/home/strick/go/s):00152                  fdb   FNMLoad-*-2
                      (/home/strick/go/s):00153                  ENDC
0080 80               (/home/strick/go/s):00154                  fcb   $80
                      (/home/strick/go/s):00155         
                      (/home/strick/go/s):00156         ******************************
                      (/home/strick/go/s):00157         *
                      (/home/strick/go/s):00158         * Check device status service call?
                      (/home/strick/go/s):00159         *
                      (/home/strick/go/s):00160         * Entry: U = Callers register stack pointer
                      (/home/strick/go/s):00161         *
0081 AE44             (/home/strick/go/s):00162         FIODel   ldx   R$X,u                    get address of module
0083 DE24             (/home/strick/go/s):00163                  ldu   <D.Init                  get pointer to init module
0085 E64D             (/home/strick/go/s):00164                  ldb   DevCnt,u                 get device count
0087 DE80             (/home/strick/go/s):00165                  ldu   <D.DevTbl                get pointer to device table
0089 10AE44           (/home/strick/go/s):00166         L0086    ldy   V$DESC,u                 descriptor exists?
008C 270C             (/home/strick/go/s):00167                  beq   L0097                    no, move to next device
008E AC44             (/home/strick/go/s):00168                  cmpx  V$DESC,u                 device match?
0090 270F             (/home/strick/go/s):00169                  beq   L009E                    no, move to next device
0092 ACC4             (/home/strick/go/s):00170                  cmpx  V$DRIV,u                 driver match?
0094 270B             (/home/strick/go/s):00171                  beq   L009E                    yes, return module busy
0096 AC46             (/home/strick/go/s):00172                  cmpx  V$FMGR,u                 fmgr match?
0098 2707             (/home/strick/go/s):00173                  beq   L009E                    yes, return module busy
009A 334D             (/home/strick/go/s):00174         L0097    leau  DEVSIZ,u                 move to next dev entry
009C 5A               (/home/strick/go/s):00175                  decb                           done them all?
009D 26EA             (/home/strick/go/s):00176                  bne   L0086                    no, keep going
009F 5F               (/home/strick/go/s):00177                  clrb                           clear carry
00A0 39               (/home/strick/go/s):00178         L009D    rts                            and return
00A1 53               (/home/strick/go/s):00179         L009E    comb                           else set carry
00A2 C6D1             (/home/strick/go/s):00180                  ldb   #E$ModBsy                submit error
00A4 39               (/home/strick/go/s):00181                  rts                            and return
                      (/home/strick/go/s):00182         
                      (/home/strick/go/s):00183                  IFNE  H6309
00A5                  (/home/strick/go/s):00184         TheZero  fcb   $00
                      (/home/strick/go/s):00185                  ENDC
                      (/home/strick/go/s):00186         
00A5 005F             (/home/strick/go/s):00187         UsrIODis fdb   IAttach-UsrIODis
00A7 0196             (/home/strick/go/s):00188                  fdb   IDetach-UsrIODis
00A9 0212             (/home/strick/go/s):00189                  fdb   UIDup-UsrIODis
00AB 0249             (/home/strick/go/s):00190                  fdb   IUsrCall-UsrIODis
00AD 0249             (/home/strick/go/s):00191                  fdb   IUsrCall-UsrIODis
00AF 0272             (/home/strick/go/s):00192                  fdb   IMakDir-UsrIODis
00B1 028F             (/home/strick/go/s):00193                  fdb   IChgDir-UsrIODis
00B3 02C5             (/home/strick/go/s):00194                  fdb   IDelete-UsrIODis
00B5 0354             (/home/strick/go/s):00195                  fdb   UISeek-UsrIODis
00B7 0373             (/home/strick/go/s):00196                  fdb   UIRead-UsrIODis
00B9 0378             (/home/strick/go/s):00197                  fdb   UIWrite-UsrIODis
00BB 0373             (/home/strick/go/s):00198                  fdb   UIRead-UsrIODis
00BD 0378             (/home/strick/go/s):00199                  fdb   UIWrite-UsrIODis
00BF 0421             (/home/strick/go/s):00200                  fdb   UIGetStt-UsrIODis
00C1 0354             (/home/strick/go/s):00201                  fdb   UISeek-UsrIODis
00C3 0486             (/home/strick/go/s):00202                  fdb   UIClose-UsrIODis
00C5 02CB             (/home/strick/go/s):00203                  fdb   IDeletX-UsrIODis
                      (/home/strick/go/s):00204         
00C7 003D             (/home/strick/go/s):00205         SysIODis fdb   IAttach-SysIODis
00C9 0174             (/home/strick/go/s):00206                  fdb   IDetach-SysIODis
00CB 0207             (/home/strick/go/s):00207                  fdb   SIDup-SysIODis
00CD 023A             (/home/strick/go/s):00208                  fdb   ISysCall-SysIODis
00CF 023A             (/home/strick/go/s):00209                  fdb   ISysCall-SysIODis
00D1 0250             (/home/strick/go/s):00210                  fdb   IMakDir-SysIODis
00D3 026D             (/home/strick/go/s):00211                  fdb   IChgDir-SysIODis
00D5 02A3             (/home/strick/go/s):00212                  fdb   IDelete-SysIODis
00D7 0337             (/home/strick/go/s):00213                  fdb   SISeek-SysIODis
00D9 037D             (/home/strick/go/s):00214                  fdb   SIRead-SysIODis
00DB 035B             (/home/strick/go/s):00215                  fdb   SIWrite-SysIODis
00DD 037D             (/home/strick/go/s):00216                  fdb   SIRead-SysIODis
00DF 035B             (/home/strick/go/s):00217                  fdb   SIWrite-SysIODis
00E1 0407             (/home/strick/go/s):00218                  fdb   SIGetStt-SysIODis
00E3 0337             (/home/strick/go/s):00219                  fdb   SISeek-SysIODis
00E5 0476             (/home/strick/go/s):00220                  fdb   SIClose-SysIODis
00E7 02A9             (/home/strick/go/s):00221                  fdb   IDeletX-SysIODis
                      (/home/strick/go/s):00222         
                      (/home/strick/go/s):00223         
                      (/home/strick/go/s):00224         * Entry to User and System I/O dispatch table
                      (/home/strick/go/s):00225         * B = I/O system call code
00E9 308CB9           (/home/strick/go/s):00226         UsrIO    leax  <UsrIODis,pcr
00EC 2003             (/home/strick/go/s):00227                  bra   IODsptch
00EE 308CD6           (/home/strick/go/s):00228         SysIO    leax  <SysIODis,pcr
00F1 C120             (/home/strick/go/s):00229         IODsptch cmpb  #I$DeletX-$70            compare with last I/O call
00F3 220B             (/home/strick/go/s):00230                  bhi   L00F9                 branch if greater
                      (/home/strick/go/s):00231                  IFNE  H6309
                      (/home/strick/go/s):00232                  ldw   b,x
                      (/home/strick/go/s):00233                  lsrb
                      (/home/strick/go/s):00234                  jmp   w,x
                      (/home/strick/go/s):00235                  ELSE
00F5 3406             (/home/strick/go/s):00236                  pshs  d
00F7 EC85             (/home/strick/go/s):00237                  ldd   b,x
00F9 308B             (/home/strick/go/s):00238                  leax  d,x
00FB 3506             (/home/strick/go/s):00239                  puls  d
00FD 54               (/home/strick/go/s):00240                  lsrb
00FE 6E84             (/home/strick/go/s):00241                  jmp   ,x
                      (/home/strick/go/s):00242                  ENDC
                      (/home/strick/go/s):00243         
                      (/home/strick/go/s):00244         ******************************
                      (/home/strick/go/s):00245         *
                      (/home/strick/go/s):00246         * Unknown service code error handler
                      (/home/strick/go/s):00247         *
0100 53               (/home/strick/go/s):00248         L00F9    comb
0101 C6D0             (/home/strick/go/s):00249                  ldb   #E$UnkSvc
0103 39               (/home/strick/go/s):00250                  rts
                      (/home/strick/go/s):00251         
     0000             (/home/strick/go/s):00252         VDRIV    equ   $00        \
     0002             (/home/strick/go/s):00253         VSTAT    equ   $02        |
     0004             (/home/strick/go/s):00254         VDESC    equ   $04        |--- Temporary device table entry
     0006             (/home/strick/go/s):00255         VFMGR    equ   $06        |
     0008             (/home/strick/go/s):00256         VUSRS    equ   $08        /
     0009             (/home/strick/go/s):00257         DRVENT   equ   $09
     000B             (/home/strick/go/s):00258         FMENT    equ   $0B
     000D             (/home/strick/go/s):00259         AMODE    equ   $0D
     000E             (/home/strick/go/s):00260         HWPG     equ   $0E
     000F             (/home/strick/go/s):00261         HWPORT   equ   $0F
     0011             (/home/strick/go/s):00262         CURDTE   equ   $11
     0013             (/home/strick/go/s):00263         DATBYT1  equ   $13
     0015             (/home/strick/go/s):00264         DATBYT2  equ   $15
     0017             (/home/strick/go/s):00265         ODPROC   equ   $17
     0019             (/home/strick/go/s):00266         CALLREGS equ   $19
     001A             (/home/strick/go/s):00267         RETERR   equ   $1A
     001B             (/home/strick/go/s):00268         EOSTACK  equ   $1B
                      (/home/strick/go/s):00269         
                      (/home/strick/go/s):00270         * Entry: U=module header pointer
     0104             (/home/strick/go/s):00271         IAttach  equ   *
                      (/home/strick/go/s):00272                  IFNE  H6309
                      (/home/strick/go/s):00273                  ldw   #EOSTACK                 get stack count
                      (/home/strick/go/s):00274                  leas  <-EOSTACK,s              make stack
                      (/home/strick/go/s):00275                  leax  <TheZero,pcr             point at zero
                      (/home/strick/go/s):00276                  tfr   s,y                      move S to Y
                      (/home/strick/go/s):00277                  tfm   x,y+                     and transfer 0 to stack
                      (/home/strick/go/s):00278                  ELSE
0104 C61A             (/home/strick/go/s):00279                  ldb   #EOSTACK-1               get stack count - 1
0106 6FE2             (/home/strick/go/s):00280         IALoop   clr   ,-s                      clear each byte
0108 5A               (/home/strick/go/s):00281                  decb                           decrement
0109 2AFB             (/home/strick/go/s):00282                  bpl   IALoop                   and branch until = 0
                      (/home/strick/go/s):00283                  ENDC
010B EFE819           (/home/strick/go/s):00284                  stu   <CALLREGS,s              save caller regs
010E A641             (/home/strick/go/s):00285                  lda   R$A,u                    access mode
0110 A76D             (/home/strick/go/s):00286                  sta   AMODE,s                  save on stack
                      (/home/strick/go/s):00287                  IFGT  Level-1
0112 9E50             (/home/strick/go/s):00288                  ldx   <D.Proc                  get curr proc desc
0114 AFE817           (/home/strick/go/s):00289                  stx   <ODPROC,s                save on stack
0117 318840           (/home/strick/go/s):00290                  leay  <P$DATImg,x              point to DAT img of curr proc
011A 9E4A             (/home/strick/go/s):00291                  ldx   <D.SysPrc                get sys proc
011C 9F50             (/home/strick/go/s):00292                  stx   <D.Proc                  make sys proc current proc
                      (/home/strick/go/s):00293                  ENDC
011E AE44             (/home/strick/go/s):00294                  ldx   R$X,u                    get caller's X
0120 86F0             (/home/strick/go/s):00295                  lda   #Devic+0                 link to device desc
                      (/home/strick/go/s):00296                  IFGT  Level-1
0122 103F34           (/home/strick/go/s):00297                  os9   F$SLink                  link to it
                      (/home/strick/go/s):00298                  ELSE
                      (/home/strick/go/s):00299                  os9   F$Link                   link to it
                      (/home/strick/go/s):00300                  ENDC
0125 252B             (/home/strick/go/s):00301                  bcs   L0155                    branch if error
0127 EF64             (/home/strick/go/s):00302                  stu   VDESC,s                  save dev desc ptr
0129 10AEE819         (/home/strick/go/s):00303                  ldy   <CALLREGS,s              get caller regs
012D AF24             (/home/strick/go/s):00304                  stx   R$X,y                    save updated X
012F A64E             (/home/strick/go/s):00305                  lda   M$Port,u                 get hw page
0131 A76E             (/home/strick/go/s):00306                  sta   HWPG,s                   save onto stack
0133 EC4F             (/home/strick/go/s):00307                  ldd   M$Port+1,u               get hw addr
0135 ED6F             (/home/strick/go/s):00308                  std   HWPORT,s                 save onto stack
                      (/home/strick/go/s):00309                  IFNE  H6309
                      (/home/strick/go/s):00310                  ldx   M$PDev,u                 get driver name ptr
                      (/home/strick/go/s):00311                  addr  u,x                      add U to X
                      (/home/strick/go/s):00312                  ELSE
0137 EC4B             (/home/strick/go/s):00313                  ldd   M$PDev,u                 get driver name ptr
0139 30CB             (/home/strick/go/s):00314                  leax  d,u                      add D to U and put in X
                      (/home/strick/go/s):00315                  ENDC
013B 86E0             (/home/strick/go/s):00316                  lda   #Drivr+0                 driver
013D 103F00           (/home/strick/go/s):00317                  os9   F$Link                   link to driver
0140 2510             (/home/strick/go/s):00318                  bcs   L0155                    branch if error
0142 EFE4             (/home/strick/go/s):00319                  stu   VDRIV,s                  else save addr save on stack
0144 10AF69           (/home/strick/go/s):00320                  sty   DRVENT,s                 save entry point on stack
0147 EE64             (/home/strick/go/s):00321                  ldu   VDESC,s                  get desc ptr
                      (/home/strick/go/s):00322                  IFNE  H6309
                      (/home/strick/go/s):00323                  ldx   M$FMgr,u                 get fm name
                      (/home/strick/go/s):00324                  addr  u,x                      add U to X
                      (/home/strick/go/s):00325                  ELSE
0149 EC49             (/home/strick/go/s):00326                  ldd   M$FMgr,u                 get fm name
014B 30CB             (/home/strick/go/s):00327                  leax  d,u                      add D to U and put in X
                      (/home/strick/go/s):00328                  ENDC
014D 86D0             (/home/strick/go/s):00329                  lda   #FlMgr+0                 link to fm
014F 103F00           (/home/strick/go/s):00330                  os9   F$Link                   link to it!
0152                  (/home/strick/go/s):00331         L0155
                      (/home/strick/go/s):00332                  IFGT  Level-1
0152 AEE817           (/home/strick/go/s):00333                  ldx   <ODPROC,s                get caller's proc desc
0155 9F50             (/home/strick/go/s):00334                  stx   <D.Proc                  restore orig proc desc
                      (/home/strick/go/s):00335                  ENDC
0157 240E             (/home/strick/go/s):00336                  bcc   L016A                    branch if not error
                      (/home/strick/go/s):00337         * Error on attach, so detach
0159 E7E81A           (/home/strick/go/s):00338         L015C    stb   <RETERR,s                save off error code
015C 33E4             (/home/strick/go/s):00339                  leau  VDRIV,s                  point U to device table entry
015E 103F81           (/home/strick/go/s):00340                  os9   I$Detach                 detach
0161 32E81A           (/home/strick/go/s):00341                  leas  <RETERR,s                adjust stack
0164 53               (/home/strick/go/s):00342                  comb                           set carry
0165 3584             (/home/strick/go/s):00343                  puls  pc,b                     exit
0167 EF66             (/home/strick/go/s):00344         L016A    stu   VFMGR,s                  save off fm module ptr
0169 10AF6B           (/home/strick/go/s):00345                  sty   FMENT,s                  save off fm entry point
016C 9E24             (/home/strick/go/s):00346                  ldx   <D.Init                  get D.Init
016E E60D             (/home/strick/go/s):00347                  ldb   DevCnt,x                 get device entry count
                      (/home/strick/go/s):00348                  IFNE  H6309
                      (/home/strick/go/s):00349                  tfr   b,f
                      (/home/strick/go/s):00350                  ELSE
0170 1F98             (/home/strick/go/s):00351                  tfr   b,a
                      (/home/strick/go/s):00352                  ENDC
0172 DE80             (/home/strick/go/s):00353                  ldu   <D.DevTbl                get device table pointer
0174 AE44             (/home/strick/go/s):00354         L0177    ldx   V$DESC,u                 get dev desc ptr
0176 273E             (/home/strick/go/s):00355                  beq   L01B4                    branch if empty
0178 AC64             (/home/strick/go/s):00356                  cmpx  VDESC,s                  same as dev desc being attached?
017A 261A             (/home/strick/go/s):00357                  bne   L0196                    branch if not
017C AE42             (/home/strick/go/s):00358                  ldx   V$STAT,u                 get driver static
017E 2611             (/home/strick/go/s):00359                  bne   L0191                    branch if zero
                      (/home/strick/go/s):00360                  IFNE  H6309
                      (/home/strick/go/s):00361                  lde   V$USRS,u                 get user count
                      (/home/strick/go/s):00362                  beq   L0177                    branch if zero
                      (/home/strick/go/s):00363                  ELSE
0180 3402             (/home/strick/go/s):00364                  pshs  a                        save off A
0182 A648             (/home/strick/go/s):00365                  lda   V$USRS,u                 get user count
0184 2707             (/home/strick/go/s):00366                  beq   L0188                    branch if zero
                      (/home/strick/go/s):00367                  ENDC
0186 3444             (/home/strick/go/s):00368                  pshs  u,b
0188 170708           (/home/strick/go/s):00369                  lbsr  FIOQu2                   call F$IOQu directly
018B 3544             (/home/strick/go/s):00370                  puls  u,b
                      (/home/strick/go/s):00371                  IFEQ  H6309
018D 3502             (/home/strick/go/s):00372         L0188    puls  a                        pull A from stack
                      (/home/strick/go/s):00373                  ENDC
018F 20E3             (/home/strick/go/s):00374                  bra   L0177
0191 EFE811           (/home/strick/go/s):00375         L0191    stu   <CURDTE,s                save current dev table ptr
0194 AE44             (/home/strick/go/s):00376                  ldx   V$DESC,u                 get dev desc ptr
0196 10AE0F           (/home/strick/go/s):00377         L0196    ldy   M$Port+1,x               get hw addr
0199 10AC6F           (/home/strick/go/s):00378                  cmpy  HWPORT,s                 same as dev entry on stack?
019C 2618             (/home/strick/go/s):00379                  bne   L01B4                    branch if not
                      (/home/strick/go/s):00380                  IFNE  H6309
                      (/home/strick/go/s):00381                  lde   M$Port,x                 get hw port
                      (/home/strick/go/s):00382                  cmpe  HWPG,s                   same as dev entry on stack?
                      (/home/strick/go/s):00383                  ELSE
019E 10AE0E           (/home/strick/go/s):00384                  ldy   M$Port,x                 get hw port
01A1 10AC6E           (/home/strick/go/s):00385                  cmpy  HWPG,s                   same as dev entry on stack?
                      (/home/strick/go/s):00386                  ENDC
01A4 2610             (/home/strick/go/s):00387                  bne   L01B4                    branch if not
01A6 AEC4             (/home/strick/go/s):00388                  ldx   V$DRIV,u                 get driver ptr
01A8 ACE4             (/home/strick/go/s):00389                  cmpx  VDRIV,s                  same as dev entry on stack?
01AA 260A             (/home/strick/go/s):00390                  bne   L01B4                    branch if not
                      (/home/strick/go/s):00391         * A match between device table entries has occurred
01AC AE42             (/home/strick/go/s):00392                  ldx   V$STAT,u                 get driver static
01AE AF62             (/home/strick/go/s):00393                  stx   VSTAT,s                  save off in our statics
01B0 6D48             (/home/strick/go/s):00394                  tst   V$USRS,u                 any users for this device
01B2 2702             (/home/strick/go/s):00395                  beq   L01B4                    branch if not
                      (/home/strick/go/s):00396                  IFEQ  H6309
01B4 A76E             (/home/strick/go/s):00397                  sta   HWPG,s
                      (/home/strick/go/s):00398                  ENDC
01B6 334D             (/home/strick/go/s):00399         L01B4    leau  DEVSIZ,u                 advance to the next device entry
01B8 5A               (/home/strick/go/s):00400                  decb
01B9 26B9             (/home/strick/go/s):00401                  bne   L0177
01BB EEE811           (/home/strick/go/s):00402                  ldu   <CURDTE,s                get curr dev entry ptr
01BE 10260054         (/home/strick/go/s):00403                  lbne  L0264                    branch if not zero
01C2 DE80             (/home/strick/go/s):00404                  ldu   <D.DevTbl
                      (/home/strick/go/s):00405                  IFNE  H6309
                      (/home/strick/go/s):00406                  tfr   f,a
                      (/home/strick/go/s):00407                  ENDC
01C4 AE44             (/home/strick/go/s):00408         L01C4    ldx   V$DESC,u                 get desc ptr
01C6 2715             (/home/strick/go/s):00409                  beq   L01DD                    branch if zero
01C8 334D             (/home/strick/go/s):00410                  leau  DEVSIZ,u                 move to next dev table entry
01CA 4A               (/home/strick/go/s):00411                  deca
01CB 26F7             (/home/strick/go/s):00412                  bne   L01C4
01CD C6CC             (/home/strick/go/s):00413                  ldb   #E$DevOvf                dev table overflow
01CF 2088             (/home/strick/go/s):00414                  bra   L015C
                      (/home/strick/go/s):00415         
01D1                  (/home/strick/go/s):00416         L01D1
                      (/home/strick/go/s):00417                  IFNE  H6309
                      (/home/strick/go/s):00418                  lsrd                           /2
                      (/home/strick/go/s):00419                  lsrd                           /4
                      (/home/strick/go/s):00420                  lsrd                           /8
                      (/home/strick/go/s):00421                  lsrd                           /16
                      (/home/strick/go/s):00422                  lsrd                           /32
                      (/home/strick/go/s):00423                  ELSE
01D1 44               (/home/strick/go/s):00424                  lsra
01D2 56               (/home/strick/go/s):00425                  rorb                           /2
01D3 44               (/home/strick/go/s):00426                  lsra
01D4 56               (/home/strick/go/s):00427                  rorb                           /4
01D5 44               (/home/strick/go/s):00428                  lsra
01D6 56               (/home/strick/go/s):00429                  rorb                           /8
01D7 44               (/home/strick/go/s):00430                  lsra
01D8 56               (/home/strick/go/s):00431                  rorb                           /16
01D9 44               (/home/strick/go/s):00432                  lsra
01DA 56               (/home/strick/go/s):00433                  rorb                           /32
                      (/home/strick/go/s):00434                  ENDC
01DB 4F               (/home/strick/go/s):00435                  clra
01DC 39               (/home/strick/go/s):00436                  rts
                      (/home/strick/go/s):00437         
01DD AE62             (/home/strick/go/s):00438         L01DD    ldx   VSTAT,s          get static storage off stack
01DF 262C             (/home/strick/go/s):00439                  bne   L0259            branch if already alloced
01E1 EFE811           (/home/strick/go/s):00440                  stu   <CURDTE,s        else store off ptr to dev table entry
01E4 AEE4             (/home/strick/go/s):00441                  ldx   VDRIV,s          get ptr to driver
01E6 EC0B             (/home/strick/go/s):00442                  ldd   M$Mem,x          get driver storage req
01E8 103F28           (/home/strick/go/s):00443                  os9   F$SRqMem         allocate memory
01EB 1025FF6A         (/home/strick/go/s):00444                  lbcs  L015C            branch if error
01EF EF62             (/home/strick/go/s):00445                  stu   VSTAT,s          save newly alloc'ed driver static storage ptr
                      (/home/strick/go/s):00446                  IFNE  H6309
                      (/home/strick/go/s):00447                  leay  VSTAT+1,s  point to zero byte
                      (/home/strick/go/s):00448                  tfr   d,w        tfr count to w counter
                      (/home/strick/go/s):00449                  tfm   y,u+       clear driver static storage
                      (/home/strick/go/s):00450                  ELSE
01F1 6FC0             (/home/strick/go/s):00451         Loop2    clr   ,u+              clear newly alloc'ed mem
01F3 830001           (/home/strick/go/s):00452                  subd  #$0001
01F6 22F9             (/home/strick/go/s):00453                  bhi   Loop2
                      (/home/strick/go/s):00454                  ENDC
                      (/home/strick/go/s):00455         * Code here appears to be for Level III?
                      (/home/strick/go/s):00456                  IFGT  Level-2
                      (/home/strick/go/s):00457                  ldd   HWPG,s     get hwpage and upper addr
                      (/home/strick/go/s):00458                  bsr   L01D1
                      (/home/strick/go/s):00459                  std   <DATBYT2,s     save off
                      (/home/strick/go/s):00460                  ldu   #$0000
                      (/home/strick/go/s):00461                  tfr   u,y
                      (/home/strick/go/s):00462                  stu   <DATBYT1,s
                      (/home/strick/go/s):00463                  ldx   <D.SysDAT  get system mem map ptr
01F8                  (/home/strick/go/s):00464         L0209    ldd   ,x++
                      (/home/strick/go/s):00465                  cmpd  <DATBYT2,s
                      (/home/strick/go/s):00466                  beq   L023B
                      (/home/strick/go/s):00467                  cmpd  #DAT.Free
                      (/home/strick/go/s):00468                  bne   L021D
                      (/home/strick/go/s):00469                  sty   <DATBYT1,s
                      (/home/strick/go/s):00470                  leau  -$02,x
01F8                  (/home/strick/go/s):00471         L021D    leay  >$2000,y
                      (/home/strick/go/s):00472                  bne   L0209
                      (/home/strick/go/s):00473                  ldb   #E$NoRAM
                      (/home/strick/go/s):00474                  IFNE  H6309
                      (/home/strick/go/s):00475                  cmpr  0,u
                      (/home/strick/go/s):00476                  ELSE
                      (/home/strick/go/s):00477                  cmpu  #$0000
                      (/home/strick/go/s):00478                  ENDC
                      (/home/strick/go/s):00479                  lbeq  L015C
                      (/home/strick/go/s):00480                  ldd   <DATBYT2,s
                      (/home/strick/go/s):00481                  std   ,u
                      (/home/strick/go/s):00482                  ldx   <D.SysPrc
                      (/home/strick/go/s):00483                  IFNE  H6309
                      (/home/strick/go/s):00484                  oim   #ImgChg,P$State,x
                      (/home/strick/go/s):00485                  ELSE
                      (/home/strick/go/s):00486                  lda   P$State,x
                      (/home/strick/go/s):00487                  ora   #ImgChg
                      (/home/strick/go/s):00488                  sta   P$State,x
                      (/home/strick/go/s):00489                  ENDC
                      (/home/strick/go/s):00490                  os9   F$ID
                      (/home/strick/go/s):00491                  bra   L023F
01F8                  (/home/strick/go/s):00492         L023B    sty   <DATBYT1,s
                      (/home/strick/go/s):00493                  ENDC
01F8 EC6F             (/home/strick/go/s):00494         L023F    ldd   HWPORT,s
                      (/home/strick/go/s):00495                  IFGT  Level-2
                      (/home/strick/go/s):00496                  anda  #$1F
                      (/home/strick/go/s):00497                  addd  <DATBYT1,s
                      (/home/strick/go/s):00498                  ENDC
01FA EE62             (/home/strick/go/s):00499                  ldu   VSTAT,s          load U with static storage of drvr
01FC 6FC4             (/home/strick/go/s):00500                  clr   V.PAGE,u         clear page byte
01FE ED41             (/home/strick/go/s):00501                  std   V.PORT,u         save port address
0200 10AE64           (/home/strick/go/s):00502                  ldy   VDESC,s          load Y with desc ptr
0203 ADF809           (/home/strick/go/s):00503                  jsr   [<DRVENT,s]      call driver init routine
0206 1025FF4F         (/home/strick/go/s):00504                  lbcs  L015C            branch if error
020A EEE811           (/home/strick/go/s):00505                  ldu   <CURDTE,s
020D                  (/home/strick/go/s):00506         L0259
                      (/home/strick/go/s):00507                  IFNE  H6309
                      (/home/strick/go/s):00508                  ldw   #DEVSIZ
                      (/home/strick/go/s):00509                  tfr   s,x
                      (/home/strick/go/s):00510                  tfm   x+,u+
                      (/home/strick/go/s):00511                  leau  -DEVSIZ,u
                      (/home/strick/go/s):00512                  ELSE
020D C60C             (/home/strick/go/s):00513                  ldb   #DEVSIZ-1        size of device table - 1
020F A6E5             (/home/strick/go/s):00514         LilLoop  lda   b,s              get from src
0211 A7C5             (/home/strick/go/s):00515                  sta   b,u              save in dest
0213 5A               (/home/strick/go/s):00516                  decb
0214 2AF9             (/home/strick/go/s):00517                  bpl   LilLoop
                      (/home/strick/go/s):00518                  ENDC
                      (/home/strick/go/s):00519         * Here, U points to Device Table
0216 AE44             (/home/strick/go/s):00520         L0264    ldx   V$DESC,u         get desc ptr in X
0218 E607             (/home/strick/go/s):00521                  ldb   M$Revs,x         get revs
021A A66D             (/home/strick/go/s):00522                  lda   AMODE,s          get access mode byte passed in A
021C A40D             (/home/strick/go/s):00523                  anda  M$Mode,x         and with MODE byte in desc.
021E AEC4             (/home/strick/go/s):00524                  ldx   V$DRIV,u         X points to driver module
0220 A40D             (/home/strick/go/s):00525                  anda  M$Mode,x         AND with mode byte in driver
0222 A16D             (/home/strick/go/s):00526                  cmpa  AMODE,s          same as passed mode?
0224 2705             (/home/strick/go/s):00527                  beq   L0279            if so, ok
0226 C6CB             (/home/strick/go/s):00528                  ldb   #E$BMode         else bad mode
0228 16FF2E           (/home/strick/go/s):00529                  lbra  L015C            and return
022B 6C48             (/home/strick/go/s):00530         L0279    inc   V$USRS,u         else inc user count
022D 2602             (/home/strick/go/s):00531                  bne   L027F            if not zero, continue
022F 6A48             (/home/strick/go/s):00532                  dec   V$USRS,u         else bump back to 255
0231 AEE819           (/home/strick/go/s):00533         L027F    ldx   <CALLREGS,s
0234 EF08             (/home/strick/go/s):00534                  stu   R$U,x
0236 32E81B           (/home/strick/go/s):00535                  leas  <EOSTACK,s
0239 5F               (/home/strick/go/s):00536                  clrb
023A 39               (/home/strick/go/s):00537                  rts
                      (/home/strick/go/s):00538         
023B EE48             (/home/strick/go/s):00539         IDetach  ldu   R$U,u
023D AE44             (/home/strick/go/s):00540                  ldx   V$DESC,u         this was incorrectly commented out in 13r4!!
                      (/home/strick/go/s):00541         *** BUG FIX
                      (/home/strick/go/s):00542         * The following two lines fix a long-standing bug in IOMan where
                      (/home/strick/go/s):00543         * the I$Detach routine would deallocate the V$STAT area.  This is
                      (/home/strick/go/s):00544         * because the V$USRS offset on the stack, where the temporary
                      (/home/strick/go/s):00545         * device table entry was being built, contained 0.  I$Detach wouldn't
                      (/home/strick/go/s):00546         * bother to do a lookup to see if it should release the memory if
                      (/home/strick/go/s):00547         * this value was zero, so here force I$Detach to do the lookup no
                      (/home/strick/go/s):00548         * matter the V$USRS value
                      (/home/strick/go/s):00549         * BGP 04/30/2002
023F 6D48             (/home/strick/go/s):00550                  tst   V$USRS,u
0241 270E             (/home/strick/go/s):00551                  beq   IDetach2
                      (/home/strick/go/s):00552         *** BUG FIX
0243 86FF             (/home/strick/go/s):00553         L0297    lda   #$FF
0245 A148             (/home/strick/go/s):00554                  cmpa  V$USRS,u
0247 10270067         (/home/strick/go/s):00555                  lbeq  L0351
024B 6A48             (/home/strick/go/s):00556                  dec   V$USRS,u
024D 10260043         (/home/strick/go/s):00557                  lbne  L0335
0251                  (/home/strick/go/s):00558         IDetach2
0251 9E24             (/home/strick/go/s):00559                  ldx   <D.Init
0253 E60D             (/home/strick/go/s):00560                  ldb   DevCnt,x
0255 3444             (/home/strick/go/s):00561                  pshs  u,b
0257 AE42             (/home/strick/go/s):00562                  ldx   V$STAT,u
0259 6F42             (/home/strick/go/s):00563                  clr   V$STAT,u
025B 6F43             (/home/strick/go/s):00564                  clr   V$STAT+1,u
025D 109E80           (/home/strick/go/s):00565                  ldy   <D.DevTbl
0260 AC22             (/home/strick/go/s):00566         L02B4    cmpx  V$STAT,y
0262 2726             (/home/strick/go/s):00567                  beq   L032B
0264 312D             (/home/strick/go/s):00568                  leay  DEVSIZ,y
0266 5A               (/home/strick/go/s):00569                  decb
0267 26F7             (/home/strick/go/s):00570                  bne   L02B4
0269 109E50           (/home/strick/go/s):00571                  ldy   <D.Proc
026C E6A4             (/home/strick/go/s):00572                  ldb   P$ID,y
026E E748             (/home/strick/go/s):00573                  stb   V$USRS,u
0270 10AE44           (/home/strick/go/s):00574                  ldy   V$DESC,u
                      (/home/strick/go/s):00575                  IFGT  LEVEL-1
0273 EE49             (/home/strick/go/s):00576                  ldu   V$DRIVEX,u
0275 1E13             (/home/strick/go/s):00577                  exg   x,u
0277 3440             (/home/strick/go/s):00578                  pshs  u
0279 AD0F             (/home/strick/go/s):00579                  jsr   $0F,x
027B 3540             (/home/strick/go/s):00580                  puls  u
                      (/home/strick/go/s):00581                  ELSE
                      (/home/strick/go/s):00582                  ldu   V$DRIV,u
                      (/home/strick/go/s):00583                  exg   x,u                     X pts to driver, U pts to static
                      (/home/strick/go/s):00584                  ldd   M$Exec,x
                      (/home/strick/go/s):00585                  leax  d,x
                      (/home/strick/go/s):00586                  pshs  u
                      (/home/strick/go/s):00587                  jsr   $0F,x
                      (/home/strick/go/s):00588                  puls  u
                      (/home/strick/go/s):00589                  ENDC
027D AE61             (/home/strick/go/s):00590                  ldx   $01,s            get ptr to dev table
027F AE84             (/home/strick/go/s):00591                  ldx   V$DRIV,x         load X with driver addr
0281 EC0B             (/home/strick/go/s):00592                  ldd   M$Mem,x          get static storage size
0283 C300FF           (/home/strick/go/s):00593                  addd  #$00FF           round up one page
0286 5F               (/home/strick/go/s):00594                  clrb                   clear lo byte
0287 103F29           (/home/strick/go/s):00595                  os9   F$SRtMem         return mem
                      (/home/strick/go/s):00596         
                      (/home/strick/go/s):00597         * Code here appears to be for Level III?
                      (/home/strick/go/s):00598                  IFGT  Level-2
                      (/home/strick/go/s):00599                  ldx   $01,s            get old U on stack
                      (/home/strick/go/s):00600                  ldx   V$DESC,x
                      (/home/strick/go/s):00601                  ldd   M$Port,x
                      (/home/strick/go/s):00602                  beq   L032B
                      (/home/strick/go/s):00603                  lbsr  L01D1
                      (/home/strick/go/s):00604                  cmpb  #$3F
                      (/home/strick/go/s):00605                  beq   L032B
                      (/home/strick/go/s):00606                  tfr   d,y
                      (/home/strick/go/s):00607                  IFNE  H6309
                      (/home/strick/go/s):00608                  ldf   ,s
                      (/home/strick/go/s):00609                  ENDC
                      (/home/strick/go/s):00610                  ldu   <D.DevTbl
028A                  (/home/strick/go/s):00611         L02F4    cmpu  $01,s
                      (/home/strick/go/s):00612                  beq   L0309
                      (/home/strick/go/s):00613                  ldx   V$DESC,u
                      (/home/strick/go/s):00614                  beq   L0309
                      (/home/strick/go/s):00615                  ldd   M$Port,x
                      (/home/strick/go/s):00616                  beq   L0309
                      (/home/strick/go/s):00617                  lbsr  L01D1
                      (/home/strick/go/s):00618                  IFNE  H6309
                      (/home/strick/go/s):00619                  cmpr  y,d
                      (/home/strick/go/s):00620                  ELSE
                      (/home/strick/go/s):00621                  pshs  y
                      (/home/strick/go/s):00622                  cmpd  ,s++
                      (/home/strick/go/s):00623                  ENDC
                      (/home/strick/go/s):00624                  beq   L032B
028A                  (/home/strick/go/s):00625         L0309    leau  DEVSIZ,u
                      (/home/strick/go/s):00626                  IFNE  H6309
                      (/home/strick/go/s):00627                  decf
                      (/home/strick/go/s):00628                  ELSE
                      (/home/strick/go/s):00629                  dec   ,s
                      (/home/strick/go/s):00630                  ENDC
                      (/home/strick/go/s):00631                  bne   L02F4
                      (/home/strick/go/s):00632                  ldx   <D.SysPrc
                      (/home/strick/go/s):00633                  ldu   <D.SysDAT
                      (/home/strick/go/s):00634                  IFNE  H6309
                      (/home/strick/go/s):00635                  ldf   #$08
                      (/home/strick/go/s):00636                  ELSE
                      (/home/strick/go/s):00637                  ldb   #$08
                      (/home/strick/go/s):00638                  pshs  b
                      (/home/strick/go/s):00639                  ENDC
028A                  (/home/strick/go/s):00640         L0316    ldd   ,u++
                      (/home/strick/go/s):00641                  IFNE  H6309
                      (/home/strick/go/s):00642                  cmpr  y,d
                      (/home/strick/go/s):00643                  ELSE
                      (/home/strick/go/s):00644                  pshs  y
                      (/home/strick/go/s):00645                  cmpd  ,s++
                      (/home/strick/go/s):00646                  ENDC
                      (/home/strick/go/s):00647                  beq   L0323
                      (/home/strick/go/s):00648                  IFNE  H6309
                      (/home/strick/go/s):00649                  decf
                      (/home/strick/go/s):00650                  ELSE
                      (/home/strick/go/s):00651                  dec   ,s
                      (/home/strick/go/s):00652                  ENDC
                      (/home/strick/go/s):00653                  bne   L0316
                      (/home/strick/go/s):00654                  IFEQ  H6309
                      (/home/strick/go/s):00655                  leas  1,s
                      (/home/strick/go/s):00656                  ENDC
                      (/home/strick/go/s):00657                  bra   L032B
028A                  (/home/strick/go/s):00658         L0323
                      (/home/strick/go/s):00659                  IFEQ  H6309
                      (/home/strick/go/s):00660                  leas  1,s
                      (/home/strick/go/s):00661                  ENDC
                      (/home/strick/go/s):00662                  ldd   #DAT.Free
                      (/home/strick/go/s):00663                  std   -$02,u
                      (/home/strick/go/s):00664                  IFNE  H6309
                      (/home/strick/go/s):00665                  oim   #ImgChg,P$State,x
                      (/home/strick/go/s):00666                  ELSE
                      (/home/strick/go/s):00667                  lda   P$State,x
                      (/home/strick/go/s):00668                  ora   #ImgChg
                      (/home/strick/go/s):00669                  sta   P$State,x
                      (/home/strick/go/s):00670                  ENDC
                      (/home/strick/go/s):00671                  ENDC
                      (/home/strick/go/s):00672         
028A 3544             (/home/strick/go/s):00673         L032B    puls  u,b
028C AE44             (/home/strick/go/s):00674                  ldx   V$DESC,u         get descriptor in X
028E 6F44             (/home/strick/go/s):00675                  clr   V$DESC,u         clear out descriptor
0290 6F45             (/home/strick/go/s):00676                  clr   V$DESC+1,u
0292 6F48             (/home/strick/go/s):00677                  clr   V$USRS,u         and users
0294                  (/home/strick/go/s):00678         L0335
                      (/home/strick/go/s):00679                  IFGT  Level-1
                      (/home/strick/go/s):00680                  IFNE  H6309
                      (/home/strick/go/s):00681                  ldw   <D.Proc
                      (/home/strick/go/s):00682                  ELSE
0294 DC50             (/home/strick/go/s):00683                  ldd   <D.Proc          get curr process
0296 3406             (/home/strick/go/s):00684                  pshs  d                save it
                      (/home/strick/go/s):00685                  ENDC
0298 DC4A             (/home/strick/go/s):00686                  ldd   <D.SysPrc        make system the current process
029A DD50             (/home/strick/go/s):00687                  std   <D.Proc
                      (/home/strick/go/s):00688                  ENDC
029C 10AEC4           (/home/strick/go/s):00689                  ldy   V$DRIV,u         get file manager module address
029F EE46             (/home/strick/go/s):00690                  ldu   V$FMGR,u         get driver module address
02A1 103F02           (/home/strick/go/s):00691                  os9   F$UnLink         unlink file manager
02A4 33A4             (/home/strick/go/s):00692                  leau  ,y               point to driver
02A6 103F02           (/home/strick/go/s):00693                  os9   F$UnLink         unlink driver
02A9 3384             (/home/strick/go/s):00694                  leau  ,x               point to descriptor
02AB 103F02           (/home/strick/go/s):00695                  os9   F$UnLink         unlink it
                      (/home/strick/go/s):00696                  IFGT  Level-1
                      (/home/strick/go/s):00697                  IFNE  H6309
                      (/home/strick/go/s):00698                  stw   <D.Proc
                      (/home/strick/go/s):00699                  ELSE
02AE 3506             (/home/strick/go/s):00700                  puls  d                restore current process
02B0 DD50             (/home/strick/go/s):00701                  std   <D.Proc
                      (/home/strick/go/s):00702                  ENDC
                      (/home/strick/go/s):00703                  ENDC
02B2 17024A           (/home/strick/go/s):00704         L0351    lbsr  L0595
02B5 5F               (/home/strick/go/s):00705                  clrb
02B6 39               (/home/strick/go/s):00706                  rts
                      (/home/strick/go/s):00707         
                      (/home/strick/go/s):00708         * User State I$Dup
02B7 8D1F             (/home/strick/go/s):00709         UIDup    bsr   LocFrPth         look for a free path
02B9 251C             (/home/strick/go/s):00710                  bcs   L0376            branch if error
02BB 3412             (/home/strick/go/s):00711                  pshs  x,a              else save off
02BD A641             (/home/strick/go/s):00712                  lda   R$A,u            get path to dup
02BF A686             (/home/strick/go/s):00713                  lda   a,x              point to path to dup
02C1 8D0D             (/home/strick/go/s):00714                  bsr   L036F
02C3 2507             (/home/strick/go/s):00715                  bcs   L036B
02C5 3514             (/home/strick/go/s):00716                  puls  x,b
02C7 E741             (/home/strick/go/s):00717                  stb   R$A,u            save off new path to caller's A
02C9 A785             (/home/strick/go/s):00718                  sta   b,x
02CB 39               (/home/strick/go/s):00719                  rts
02CC 3592             (/home/strick/go/s):00720         L036B    puls  pc,x,a
                      (/home/strick/go/s):00721         
                      (/home/strick/go/s):00722         * System State I$Dup
02CE A641             (/home/strick/go/s):00723         SIDup    lda   R$A,u
02D0 170157           (/home/strick/go/s):00724         L036F    lbsr  GetPDesc         find path descriptor
02D3 2502             (/home/strick/go/s):00725                  bcs   L0376            exit if error
02D5 6C22             (/home/strick/go/s):00726                  inc   PD.CNT,y         else increment path descriptor
02D7 39               (/home/strick/go/s):00727         L0376    rts
                      (/home/strick/go/s):00728         
                      (/home/strick/go/s):00729         * Find next free path position in current proc
                      (/home/strick/go/s):00730         * Exit: X = Ptr to proc's path table
                      (/home/strick/go/s):00731         *       A = Free path number (valid if carry clear)
                      (/home/strick/go/s):00732         *
02D8 9E50             (/home/strick/go/s):00733         LocFrPth ldx   <D.Proc          get ptr to current proc desc
02DA 308830           (/home/strick/go/s):00734                  leax  <P$Path,x        point X to proc's path table
02DD 4F               (/home/strick/go/s):00735                  clra                   start from 0
02DE 6D86             (/home/strick/go/s):00736         L037D    tst   a,x              this path free?
02E0 2709             (/home/strick/go/s):00737                  beq   L038A            branch if so...
02E2 4C               (/home/strick/go/s):00738                  inca                   ...else try next path
02E3 8110             (/home/strick/go/s):00739                  cmpa  #Numpaths        are we at the end?
02E5 25F7             (/home/strick/go/s):00740                  bcs   L037D            branch if not
02E7 53               (/home/strick/go/s):00741                  comb                   else path table is full
02E8 C6C8             (/home/strick/go/s):00742                  ldb   #E$PthFul
02EA 39               (/home/strick/go/s):00743                  rts
02EB 1CFE             (/home/strick/go/s):00744         L038A    andcc  #^Carry
02ED 39               (/home/strick/go/s):00745                  rts
                      (/home/strick/go/s):00746         
02EE 8DE8             (/home/strick/go/s):00747         IUsrCall bsr   LocFrPth
02F0 250E             (/home/strick/go/s):00748                  bcs   L039F
02F2 3452             (/home/strick/go/s):00749                  pshs  u,x,a
02F4 8D0B             (/home/strick/go/s):00750                  bsr   ISysCall
02F6 3552             (/home/strick/go/s):00751                  puls  u,x,a
02F8 2506             (/home/strick/go/s):00752                  bcs   L039F
02FA E641             (/home/strick/go/s):00753                  ldb   R$A,u
02FC E786             (/home/strick/go/s):00754                  stb   a,x
02FE A741             (/home/strick/go/s):00755                  sta   R$A,u
0300 39               (/home/strick/go/s):00756         L039F    rts
                      (/home/strick/go/s):00757         
0301 3404             (/home/strick/go/s):00758         ISysCall pshs  b
0303 E641             (/home/strick/go/s):00759                  ldb   R$A,u
0305 8D71             (/home/strick/go/s):00760                  bsr   AllcPDsc
0307 250C             (/home/strick/go/s):00761                  bcs   L03B4
0309 3504             (/home/strick/go/s):00762                  puls  b
030B 17017B           (/home/strick/go/s):00763                  lbsr  CallFMgr
030E 2514             (/home/strick/go/s):00764                  bcs   L03C3
0310 A6A4             (/home/strick/go/s):00765                  lda   PD.PD,y
0312 A741             (/home/strick/go/s):00766                  sta   R$A,u
0314 39               (/home/strick/go/s):00767                  rts
0315 3582             (/home/strick/go/s):00768         L03B4    puls  pc,a
                      (/home/strick/go/s):00769         
                      (/home/strick/go/s):00770         * Make Directory
0317 3404             (/home/strick/go/s):00771         IMakDir  pshs  b
0319 C682             (/home/strick/go/s):00772                  ldb   #DIR.+WRITE.
031B 8D5B             (/home/strick/go/s):00773         L03BA    bsr   AllcPDsc
031D 25F6             (/home/strick/go/s):00774                  bcs   L03B4
031F 3504             (/home/strick/go/s):00775                  puls  b
0321 170165           (/home/strick/go/s):00776                  lbsr  CallFMgr
0324 3405             (/home/strick/go/s):00777         L03C3    pshs  b,cc
0326 EE23             (/home/strick/go/s):00778                  ldu   PD.DEV,y
0328 103F81           (/home/strick/go/s):00779                  os9   I$Detach
032B A6A4             (/home/strick/go/s):00780                  lda   PD.PD,y
032D 9E88             (/home/strick/go/s):00781                  ldx   <D.PthDBT
032F 103F31           (/home/strick/go/s):00782                  os9   F$Ret64
0332 3585             (/home/strick/go/s):00783                  puls  pc,b,cc
                      (/home/strick/go/s):00784         
                      (/home/strick/go/s):00785         * Change Directory
0334 3404             (/home/strick/go/s):00786         IChgDir  pshs  b
0336 E641             (/home/strick/go/s):00787                  ldb   R$A,u
0338 CA80             (/home/strick/go/s):00788                  orb   #DIR.
033A 8D3C             (/home/strick/go/s):00789                  bsr   AllcPDsc
033C 25D7             (/home/strick/go/s):00790                  bcs   L03B4
033E 3504             (/home/strick/go/s):00791                  puls  b
0340 170146           (/home/strick/go/s):00792                  lbsr  CallFMgr
0343 25DF             (/home/strick/go/s):00793                  bcs   L03C3
0345 DE50             (/home/strick/go/s):00794                  ldu   <D.Proc
                      (/home/strick/go/s):00795                  IFNE  H6309
                      (/home/strick/go/s):00796                  tim   #PWRIT.+PREAD.+UPDAT.,PD.MOD,y
                      (/home/strick/go/s):00797                  ELSE
0347 E621             (/home/strick/go/s):00798                  ldb   PD.MOD,y
0349 C51B             (/home/strick/go/s):00799                  bitb  #PWRIT.+PREAD.+UPDAT.
                      (/home/strick/go/s):00800                  ENDC
034B 270B             (/home/strick/go/s):00801                  beq   IChgExec
034D AE23             (/home/strick/go/s):00802                  ldx   PD.DEV,y
034F AFC820           (/home/strick/go/s):00803                  stx   <P$DIO,u
0352 6C08             (/home/strick/go/s):00804                  inc   V$USRS,x
0354 2602             (/home/strick/go/s):00805                  bne   IChgExec
0356 6A08             (/home/strick/go/s):00806                  dec   V$USRS,x
0358                  (/home/strick/go/s):00807         IChgExec
                      (/home/strick/go/s):00808                  IFNE  H6309
                      (/home/strick/go/s):00809                  tim   #PEXEC.+EXEC.,PD.MOD,y
                      (/home/strick/go/s):00810                  ELSE
0358 C524             (/home/strick/go/s):00811                  bitb  #PEXEC.+EXEC.
                      (/home/strick/go/s):00812                  ENDC
035A 270B             (/home/strick/go/s):00813                  beq   L0406
035C AE23             (/home/strick/go/s):00814                  ldx   PD.DEV,y
035E AFC826           (/home/strick/go/s):00815                  stx   <P$DIO+6,u
0361 6C08             (/home/strick/go/s):00816                  inc   V$USRS,x
0363 2602             (/home/strick/go/s):00817                  bne   L0406
0365 6A08             (/home/strick/go/s):00818                  dec   V$USRS,x
0367 5F               (/home/strick/go/s):00819         L0406    clrb
0368 20BA             (/home/strick/go/s):00820                  bra   L03C3
                      (/home/strick/go/s):00821         
036A 3404             (/home/strick/go/s):00822         IDelete  pshs  b
036C C602             (/home/strick/go/s):00823                  ldb   #WRITE.
036E 20AB             (/home/strick/go/s):00824                  bra   L03BA
                      (/home/strick/go/s):00825         
0370 C607             (/home/strick/go/s):00826         IDeletX  ldb   #7               Delete offset in file manager
0372 3404             (/home/strick/go/s):00827                  pshs  b
0374 E641             (/home/strick/go/s):00828                  ldb   R$A,u
0376 20A3             (/home/strick/go/s):00829                  bra   L03BA
                      (/home/strick/go/s):00830         
                      (/home/strick/go/s):00831         * Allocate path descriptor
                      (/home/strick/go/s):00832         * Entry:
                      (/home/strick/go/s):00833         *    B = mode
0378                  (/home/strick/go/s):00834         AllcPDsc
0378 9E50             (/home/strick/go/s):00835                  ldx   <D.Proc          get pointer to curr proc in X
037A 3450             (/home/strick/go/s):00836                  pshs  u,x              save U/X
037C 9E88             (/home/strick/go/s):00837                  ldx   <D.PthDBT        get ptr to path desc base table
037E 103F30           (/home/strick/go/s):00838                  os9   F$All64          allocate 64 byte page
0381 2561             (/home/strick/go/s):00839                  bcs   L0484            branch if error
0383 6C22             (/home/strick/go/s):00840                  inc   PD.CNT,y         set path count
0385 E721             (/home/strick/go/s):00841                  stb   PD.MOD,y         save mode byte
                      (/home/strick/go/s):00842                  IFGT  Level-1
0387 9E50             (/home/strick/go/s):00843                  ldx   <D.Proc          get curr proc desc
0389 E606             (/home/strick/go/s):00844                  ldb   P$Task,x         get task #
                      (/home/strick/go/s):00845                  ENDC
038B AE44             (/home/strick/go/s):00846                  ldx   R$X,u            X points to pathlist
038D                  (/home/strick/go/s):00847         L042C
                      (/home/strick/go/s):00848                  IFGT  Level-1
038D 103F49           (/home/strick/go/s):00849                  os9   F$LDABX          get byte at X
0390 3001             (/home/strick/go/s):00850                  leax  1,x              move to next
                      (/home/strick/go/s):00851                  ELSE
                      (/home/strick/go/s):00852                  lda   ,x+
                      (/home/strick/go/s):00853                  ENDC
0392 8120             (/home/strick/go/s):00854                  cmpa  #C$SPAC          space?
0394 27F7             (/home/strick/go/s):00855                  beq   L042C            continue if so
0396 301F             (/home/strick/go/s):00856                  leax  -1,x             else back up
0398 AF44             (/home/strick/go/s):00857                  stx   R$X,u            save updated pointer
039A 812F             (/home/strick/go/s):00858                  cmpa  #PDELIM          leading slash?
039C 271C             (/home/strick/go/s):00859                  beq   L0459            yep...
039E 9E50             (/home/strick/go/s):00860                  ldx   <D.Proc          else get curr proc
                      (/home/strick/go/s):00861                  IFNE  H6309
                      (/home/strick/go/s):00862                  tim   #EXEC.,PD.MOD,y
                      (/home/strick/go/s):00863                  ELSE
03A0 E621             (/home/strick/go/s):00864                  ldb   PD.MOD,y         get mode byte
03A2 C504             (/home/strick/go/s):00865                  bitb  #EXEC.           exec. dir relative?
                      (/home/strick/go/s):00866                  ENDC
03A4 2705             (/home/strick/go/s):00867                  beq   L0449            nope...
03A6 AE8826           (/home/strick/go/s):00868                  ldx   <P$DIO+6,x       else get dev entry for exec path
03A9 2003             (/home/strick/go/s):00869                  bra   L044C            and branch
03AB AE8820           (/home/strick/go/s):00870         L0449    ldx   <P$DIO,x         get dev entry for data path
03AE 2739             (/home/strick/go/s):00871         L044C    beq   L0489            branch if empty
                      (/home/strick/go/s):00872                  IFGT  Level-1
03B0 DC4A             (/home/strick/go/s):00873                  ldd   <D.SysPrc        get system proc ptr
03B2 DD50             (/home/strick/go/s):00874                  std   <D.Proc          get curr proc
                      (/home/strick/go/s):00875                  ENDC
03B4 AE04             (/home/strick/go/s):00876                  ldx   V$DESC,x         get descriptor pointer
03B6 EC04             (/home/strick/go/s):00877                  ldd   M$Name,x         get name offset
                      (/home/strick/go/s):00878                  IFNE  H6309
                      (/home/strick/go/s):00879                  addr  d,x
                      (/home/strick/go/s):00880                  ELSE
03B8 308B             (/home/strick/go/s):00881                  leax  d,x              point X to name in descriptor
                      (/home/strick/go/s):00882                  ENDC
03BA 3420             (/home/strick/go/s):00883         L0459    pshs  y                save off path desc ptr in Y
03BC 103F10           (/home/strick/go/s):00884                  os9   F$PrsNam         parse it
03BF 3520             (/home/strick/go/s):00885                  puls  y                restore path desc ptr
03C1 2526             (/home/strick/go/s):00886                  bcs   L0489            branch if error
03C3 A621             (/home/strick/go/s):00887                  lda   PD.MOD,y         get mode byte
03C5 103F80           (/home/strick/go/s):00888                  os9   I$Attach         attach to device
03C8 EF23             (/home/strick/go/s):00889                  stu   PD.DEV,y         save dev tbl entry
03CA 251F             (/home/strick/go/s):00890                  bcs   L048B            branch if error
03CC AE44             (/home/strick/go/s):00891                  ldx   V$DESC,u         else get descriptor pointer
                      (/home/strick/go/s):00892         * copy options from dev desc to path desc
03CE 308811           (/home/strick/go/s):00893                  leax  <M$Opt,x         point to opts in desc
                      (/home/strick/go/s):00894                  IFNE  H6309
                      (/home/strick/go/s):00895                  ldf   ,x+
                      (/home/strick/go/s):00896                  leau  <PD.OPT,y
                      (/home/strick/go/s):00897                  cmpf  #PD.OPT
                      (/home/strick/go/s):00898                  bcs   L047E
                      (/home/strick/go/s):00899                  ldf   #$20
03D1                  (/home/strick/go/s):00900         L047E    clre
                      (/home/strick/go/s):00901                  tfm   x+,u+
                      (/home/strick/go/s):00902                  ELSE
03D1 E680             (/home/strick/go/s):00903                  ldb   ,x+              get options count
03D3 33A820           (/home/strick/go/s):00904                  leau  <PD.OPT,y
03D6 C120             (/home/strick/go/s):00905                  cmpb  #PD.OPT
03D8 2306             (/home/strick/go/s):00906                  bls   L03E5
03DA C61F             (/home/strick/go/s):00907                  ldb   #PD.OPT-1
03DC A680             (/home/strick/go/s):00908         KeepLoop lda   ,x+
03DE A7C0             (/home/strick/go/s):00909                  sta   ,u+
03E0 5A               (/home/strick/go/s):00910         L03E5    decb
03E1 2AF9             (/home/strick/go/s):00911                  bpl   KeepLoop
                      (/home/strick/go/s):00912                  ENDC
03E3 5F               (/home/strick/go/s):00913                  clrb
03E4 3550             (/home/strick/go/s):00914         L0484    puls  u,x
                      (/home/strick/go/s):00915                  IFGT  Level-1
03E6 9F50             (/home/strick/go/s):00916                  stx   <D.Proc
                      (/home/strick/go/s):00917                  ENDC
03E8 39               (/home/strick/go/s):00918                  rts
                      (/home/strick/go/s):00919         
03E9 C6D7             (/home/strick/go/s):00920         L0489    ldb   #E$BPNam
03EB 3404             (/home/strick/go/s):00921         L048B    pshs  b
03ED A6A4             (/home/strick/go/s):00922                  lda   ,y
03EF 9E88             (/home/strick/go/s):00923                  ldx   <D.PthDBT
03F1 103F31           (/home/strick/go/s):00924                  os9   F$Ret64
03F4 3504             (/home/strick/go/s):00925                  puls  b
03F6 43               (/home/strick/go/s):00926                  coma
03F7 20EB             (/home/strick/go/s):00927                  bra   L0484
                      (/home/strick/go/s):00928         
03F9 8D37             (/home/strick/go/s):00929         UISeek   bsr   S2UPath          get user path #
03FB 2403             (/home/strick/go/s):00930                  bcc   GtPDClFM         get PD, call FM
03FD 39               (/home/strick/go/s):00931                  rts
                      (/home/strick/go/s):00932         
03FE A641             (/home/strick/go/s):00933         SISeek   lda   R$A,u
0400 8D28             (/home/strick/go/s):00934         GtPDClFM bsr   GetPDesc
                      (/home/strick/go/s):00935                  IFNE  H6309
                      (/home/strick/go/s):00936                  bcc   CallFMgr
                      (/home/strick/go/s):00937                  ELSE
0402 10240083         (/home/strick/go/s):00938                  lbcc  CallFMgr
                      (/home/strick/go/s):00939                  ENDC
0406 39               (/home/strick/go/s):00940                  rts
                      (/home/strick/go/s):00941         
0407 C6F4             (/home/strick/go/s):00942         L04A5    ldb   #E$Read
                      (/home/strick/go/s):00943                  IFNE  H6309
                      (/home/strick/go/s):00944                  tim   #WRITE.,,s
                      (/home/strick/go/s):00945                  ELSE
0409 A6E4             (/home/strick/go/s):00946                  lda   ,s
040B 8502             (/home/strick/go/s):00947                  bita  #WRITE.
                      (/home/strick/go/s):00948                  ENDC
040D 2706             (/home/strick/go/s):00949                  beq   L04B2
040F C6F5             (/home/strick/go/s):00950                  ldb   #E$Write
0411 2002             (/home/strick/go/s):00951                  bra   L04B2
                      (/home/strick/go/s):00952         
0413 C6CB             (/home/strick/go/s):00953         L04B0    ldb   #E$BMode
0415 63E0             (/home/strick/go/s):00954         L04B2    com   ,s+
0417 39               (/home/strick/go/s):00955                  rts
                      (/home/strick/go/s):00956         
0418 8D18             (/home/strick/go/s):00957         UIRead   bsr   S2UPath          get user path #
041A 242A             (/home/strick/go/s):00958                  bcc   L04E3
041C 39               (/home/strick/go/s):00959                  rts
                      (/home/strick/go/s):00960         
041D 8D13             (/home/strick/go/s):00961         UIWrite  bsr   S2UPath
041F 2403             (/home/strick/go/s):00962                  bcc   L04C1
0421 39               (/home/strick/go/s):00963                  rts
                      (/home/strick/go/s):00964         
0422 A641             (/home/strick/go/s):00965         SIWrite  lda   R$A,u
0424 3404             (/home/strick/go/s):00966         L04C1    pshs  b
0426 C602             (/home/strick/go/s):00967                  ldb   #WRITE.
0428 2020             (/home/strick/go/s):00968                  bra   L04E7
                      (/home/strick/go/s):00969         
                      (/home/strick/go/s):00970         * get path descriptor
                      (/home/strick/go/s):00971         * Passed:    A = path number
                      (/home/strick/go/s):00972         * Returned:  Y = address of path desc for path num
042A 9E88             (/home/strick/go/s):00973         GetPDesc ldx   <D.PthDBT
042C 103F2F           (/home/strick/go/s):00974                  os9   F$Find64
042F 250F             (/home/strick/go/s):00975                  bcs   L04DD
0431 39               (/home/strick/go/s):00976                  rts
                      (/home/strick/go/s):00977         
                      (/home/strick/go/s):00978         * System to User Path routine
                      (/home/strick/go/s):00979         *
                      (/home/strick/go/s):00980         * Returns:
                      (/home/strick/go/s):00981         *   A = user path #
                      (/home/strick/go/s):00982         *   X = path table in path desc. of current proc.
0432 A641             (/home/strick/go/s):00983         S2UPath  lda   R$A,u
0434 8110             (/home/strick/go/s):00984                  cmpa  #Numpaths
0436 2408             (/home/strick/go/s):00985                  bcc   L04DD            illegal path number
0438 9E50             (/home/strick/go/s):00986                  ldx   <D.Proc
043A 8B30             (/home/strick/go/s):00987                  adda  #P$PATH
043C A686             (/home/strick/go/s):00988                  lda   a,x
043E 2603             (/home/strick/go/s):00989                  bne   L04E0
0440 53               (/home/strick/go/s):00990         L04DD    comb
0441 C6C9             (/home/strick/go/s):00991                  ldb   #E$BPNum
0443 39               (/home/strick/go/s):00992         L04E0    rts
                      (/home/strick/go/s):00993         
0444 A641             (/home/strick/go/s):00994         SIRead   lda   R$A,u            get user path
0446 3404             (/home/strick/go/s):00995         L04E3    pshs  b
0448 C605             (/home/strick/go/s):00996                  ldb   #EXEC.+READ.
044A 8DDE             (/home/strick/go/s):00997         L04E7    bsr   GetPDesc         get path descriptor from path in A
044C 25C7             (/home/strick/go/s):00998                  bcs   L04B2            branch if error
044E E521             (/home/strick/go/s):00999                  bitb  PD.MOD,y         test bits against mode in path desc
0450 27C1             (/home/strick/go/s):01000                  beq   L04B0            branch if no corresponding bits
0452 EC46             (/home/strick/go/s):01001                  ldd   R$Y,u            else get count from user
0454 2731             (/home/strick/go/s):01002                  beq   L051C            branch if zero count
0456 E344             (/home/strick/go/s):01003                  addd  R$X,u            else update buffer pointer with size
0458 25AD             (/home/strick/go/s):01004                  bcs   L04A5            branch if carry set
                      (/home/strick/go/s):01005                  IFGT  Level-1
                      (/home/strick/go/s):01006                  IFNE  H6309
                      (/home/strick/go/s):01007                  decd
                      (/home/strick/go/s):01008                  ELSE
045A 830001           (/home/strick/go/s):01009                  subd  #$0001           subtract 1 from count
                      (/home/strick/go/s):01010                  ENDC
045D 44               (/home/strick/go/s):01011                  lsra                   / 2
045E 44               (/home/strick/go/s):01012                  lsra                   / 4
045F 44               (/home/strick/go/s):01013                  lsra                   / 8
0460 44               (/home/strick/go/s):01014                  lsra                   / 16
0461 44               (/home/strick/go/s):01015                  lsra                   / 32
0462 E644             (/home/strick/go/s):01016                  ldb   R$X,u            get address of buffer to hold read data
0464 54               (/home/strick/go/s):01017                  lsrb
0465 54               (/home/strick/go/s):01018                  lsrb
0466 54               (/home/strick/go/s):01019                  lsrb
0467 54               (/home/strick/go/s):01020                  lsrb
0468 9E50             (/home/strick/go/s):01021                  ldx   <D.Proc
046A 308840           (/home/strick/go/s):01022                  leax  <P$DATImg,x
046D 3A               (/home/strick/go/s):01023                  abx
046E 54               (/home/strick/go/s):01024                  lsrb
                      (/home/strick/go/s):01025                  IFNE  H6309
                      (/home/strick/go/s):01026                  subr  b,a
                      (/home/strick/go/s):01027                  tfr   a,e
                      (/home/strick/go/s):01028                  ELSE
046F 3404             (/home/strick/go/s):01029                  pshs  b
0471 A0E4             (/home/strick/go/s):01030                  suba  ,s
0473 A7E4             (/home/strick/go/s):01031                  sta   ,s
                      (/home/strick/go/s):01032                  ENDC
0475 EC81             (/home/strick/go/s):01033         L0510    ldd   ,x++
0477 1083333E         (/home/strick/go/s):01034                  cmpd  #DAT.Free
                      (/home/strick/go/s):01035                  IFNE  H6309
                      (/home/strick/go/s):01036                  beq   L04A5
                      (/home/strick/go/s):01037                  dece
                      (/home/strick/go/s):01038                  ELSE
047B 2604             (/home/strick/go/s):01039                  bne   L051X
047D 3502             (/home/strick/go/s):01040                  puls  a
047F 2086             (/home/strick/go/s):01041                  bra   L04A5
0481 6AE4             (/home/strick/go/s):01042         L051X    dec   ,s
                      (/home/strick/go/s):01043                  ENDC
0483 2AF0             (/home/strick/go/s):01044                  bpl   L0510
                      (/home/strick/go/s):01045                  IFEQ  H6309
0485 3502             (/home/strick/go/s):01046                  puls  a
                      (/home/strick/go/s):01047                  ENDC
                      (/home/strick/go/s):01048                  ENDC
0487 3504             (/home/strick/go/s):01049         L051C    puls  b
                      (/home/strick/go/s):01050         
     0489             (/home/strick/go/s):01051         CallFMgr equ   *
0489 C003             (/home/strick/go/s):01052                  subb  #$03
048B 3470             (/home/strick/go/s):01053                  pshs  u,y,x
048D 9E50             (/home/strick/go/s):01054                  ldx   <D.Proc
048F                  (/home/strick/go/s):01055         L0524
                      (/home/strick/go/s):01056                  IFNE  H6309
                      (/home/strick/go/s):01057                  lde   $05,y
                      (/home/strick/go/s):01058                  ELSE
048F 6D25             (/home/strick/go/s):01059                  tst   PD.CPR,y
                      (/home/strick/go/s):01060                  ENDC
0491 2622             (/home/strick/go/s):01061                  bne   L054B
0493 A684             (/home/strick/go/s):01062                  lda   P$ID,x
0495 A725             (/home/strick/go/s):01063                  sta   PD.CPR,y
0497 EF26             (/home/strick/go/s):01064                  stu   PD.RGS,y
0499 AE23             (/home/strick/go/s):01065                  ldx   PD.DEV,y
                      (/home/strick/go/s):01066                  IFGT  Level-1
049B AE0B             (/home/strick/go/s):01067                  ldx   V$FMGREX,x       get file manager address
                      (/home/strick/go/s):01068                  ELSE
                      (/home/strick/go/s):01069                  ldx   V$FMGR,x
                      (/home/strick/go/s):01070                  ldd   M$Exec,x
                      (/home/strick/go/s):01071                  leax  d,x
                      (/home/strick/go/s):01072                  ENDC
049D 8603             (/home/strick/go/s):01073                  lda   #$03             length of lbra instruction
049F 3D               (/home/strick/go/s):01074                  mul
04A0 AD85             (/home/strick/go/s):01075                  jsr   b,x              enter jump table at point computed from B
04A2 3405             (/home/strick/go/s):01076         L0538    pshs  b,cc             preserve return status (C,B) from call
04A4 8D59             (/home/strick/go/s):01077                  bsr   L0595
04A6 10AE64           (/home/strick/go/s):01078                  ldy   $04,s            get Y off stack
04A9 9E50             (/home/strick/go/s):01079                  ldx   <D.Proc
04AB A684             (/home/strick/go/s):01080                  lda   P$ID,x
04AD A125             (/home/strick/go/s):01081                  cmpa  PD.CPR,y
04AF 2602             (/home/strick/go/s):01082                  bne   L0549            clean up and return
04B1 6F25             (/home/strick/go/s):01083                  clr   PD.CPR,y         path descriptor of currrent process
04B3 35F5             (/home/strick/go/s):01084         L0549    puls  pc,u,y,x,b,cc    return.. with return status in C, B.
04B5 3474             (/home/strick/go/s):01085         L054B    pshs  u,y,x,b
04B7 1703D9           (/home/strick/go/s):01086                  lbsr  FIOQu2
04BA 3574             (/home/strick/go/s):01087                  puls  u,y,x,b
04BC 43               (/home/strick/go/s):01088                  coma
04BD A68819           (/home/strick/go/s):01089                  lda   <P$Signal,x
04C0 27CD             (/home/strick/go/s):01090                  beq   L0524
04C2 1F89             (/home/strick/go/s):01091                  tfr   a,b
04C4 20DC             (/home/strick/go/s):01092                  bra   L0538            go back
                      (/home/strick/go/s):01093         
04C6 17FF69           (/home/strick/go/s):01094         UIGetStt lbsr  S2UPath          get usr path #
04C9 9E50             (/home/strick/go/s):01095                  ldx   <D.Proc
04CB 2405             (/home/strick/go/s):01096                  bcc   L0568
04CD 39               (/home/strick/go/s):01097                  rts
                      (/home/strick/go/s):01098         
04CE A641             (/home/strick/go/s):01099         SIGetStt lda   R$A,u
                      (/home/strick/go/s):01100                  IFGT  Level-1
04D0 9E4A             (/home/strick/go/s):01101                  ldx   <D.SysPrc
                      (/home/strick/go/s):01102                  ENDC
04D2 3416             (/home/strick/go/s):01103         L0568    pshs  x,b,a
04D4 A642             (/home/strick/go/s):01104                  lda   R$B,u            get func code
04D6 A761             (/home/strick/go/s):01105                  sta   $01,s            place on stack in B
04D8 3502             (/home/strick/go/s):01106                  puls  a                get path off stack
04DA 17FF23           (/home/strick/go/s):01107                  lbsr  GtPDClFM
04DD 3512             (/home/strick/go/s):01108                  puls  x,a              get func code in A, sys proc in X
04DF 3465             (/home/strick/go/s):01109                  pshs  u,y,b,cc
04E1 4D               (/home/strick/go/s):01110                  tsta                   SS.Opt?
04E2 2706             (/home/strick/go/s):01111                  beq   SSOpt
04E4 810E             (/home/strick/go/s):01112                  cmpa  #SS.DevNm        Get device name?
04E6 2731             (/home/strick/go/s):01113                  beq   SSDevNm
04E8 35E5             (/home/strick/go/s):01114                  puls  pc,u,y,b,cc
                      (/home/strick/go/s):01115         
     04EA             (/home/strick/go/s):01116         SSOpt    equ   *
                      (/home/strick/go/s):01117                  IFGT  Level-1
04EA 96D0             (/home/strick/go/s):01118                  lda   <D.SysTsk
04EC E606             (/home/strick/go/s):01119                  ldb   P$Task,x
                      (/home/strick/go/s):01120                  ENDC
04EE 30A820           (/home/strick/go/s):01121                  leax  <PD.OPT,y
04F1 108E0020         (/home/strick/go/s):01122         SSCopy   ldy   #PD.OPT
04F5 EE44             (/home/strick/go/s):01123                  ldu   R$X,u
                      (/home/strick/go/s):01124                  IFGT  Level-1
04F7 103F38           (/home/strick/go/s):01125                  os9   F$Move
                      (/home/strick/go/s):01126                  ELSE
04FA                  (/home/strick/go/s):01127         Looper   lda   ,x+
                      (/home/strick/go/s):01128                  sta   ,u+
                      (/home/strick/go/s):01129                  decb
                      (/home/strick/go/s):01130                  bne   Looper
                      (/home/strick/go/s):01131                  ENDC
04FA 3262             (/home/strick/go/s):01132                  leas  $2,s
04FC 5F               (/home/strick/go/s):01133                  clrb
04FD 35E0             (/home/strick/go/s):01134                  puls  pc,u,y
                      (/home/strick/go/s):01135         
04FF 3420             (/home/strick/go/s):01136         L0595    pshs  y
0501 109E50           (/home/strick/go/s):01137                  ldy   <D.Proc          get current process
0504 A6A810           (/home/strick/go/s):01138                  lda   <P$IOQN,y        get ID of next process in I/O queue
0507 270D             (/home/strick/go/s):01139                  beq   L05AC            branch if none
0509 6FA810           (/home/strick/go/s):01140                  clr   <P$IOQN,y        else clear it
050C C601             (/home/strick/go/s):01141                  ldb   #S$Wake          get wake signal
050E 103F08           (/home/strick/go/s):01142                  os9   F$Send           wake up process ID in A with signal in B
                      (/home/strick/go/s):01143                  IFGT  Level-1
0511 103F37           (/home/strick/go/s):01144                  os9   F$GProcP
                      (/home/strick/go/s):01145                  ELSE
                      (/home/strick/go/s):01146                  ldx   <D.PrcDBT
                      (/home/strick/go/s):01147                  os9   F$Find64
                      (/home/strick/go/s):01148                  ENDC
0514 6F2F             (/home/strick/go/s):01149                  clr   P$IOQP,y
0516 5F               (/home/strick/go/s):01150         L05AC    clrb
0517 35A0             (/home/strick/go/s):01151                  puls  pc,y
                      (/home/strick/go/s):01152         
0519                  (/home/strick/go/s):01153         SSDevNm
                      (/home/strick/go/s):01154                  IFGT  Level-1
0519 96D0             (/home/strick/go/s):01155                  lda   <D.SysTsk
051B E606             (/home/strick/go/s):01156                  ldb   P$Task,x
                      (/home/strick/go/s):01157                  ENDC
                      (/home/strick/go/s):01158                  IFEQ  H6309
051D 3406             (/home/strick/go/s):01159                  pshs  d
                      (/home/strick/go/s):01160                  ENDC
051F AE23             (/home/strick/go/s):01161                  ldx   PD.DEV,y
0521 AE04             (/home/strick/go/s):01162                  ldx   V$DESC,x
                      (/home/strick/go/s):01163                  IFNE  H6309
                      (/home/strick/go/s):01164                  ldw   M$Name,x
                      (/home/strick/go/s):01165                  addr  w,x
                      (/home/strick/go/s):01166                  ELSE
0523 EC04             (/home/strick/go/s):01167                  ldd   M$Name,x
0525 308B             (/home/strick/go/s):01168                  leax  d,x
0527 3506             (/home/strick/go/s):01169                  puls  d
                      (/home/strick/go/s):01170                  ENDC
0529 20C6             (/home/strick/go/s):01171                  bra   SSCopy
                      (/home/strick/go/s):01172         
052B 17FF04           (/home/strick/go/s):01173         UIClose  lbsr  S2UPath          get user path #
052E 250C             (/home/strick/go/s):01174                  bcs   L05CE
                      (/home/strick/go/s):01175                  IFNE  H6309
                      (/home/strick/go/s):01176                  lde   R$A,u
                      (/home/strick/go/s):01177                  adde  #$30
                      (/home/strick/go/s):01178                  clr   e,x              zero path entry
                      (/home/strick/go/s):01179                  ELSE
0530 3404             (/home/strick/go/s):01180                  pshs  b
0532 E641             (/home/strick/go/s):01181                  ldb   R$A,u
0534 CB30             (/home/strick/go/s):01182                  addb  #P$PATH
0536 6F85             (/home/strick/go/s):01183                  clr   b,x
0538 3504             (/home/strick/go/s):01184                  puls  b
                      (/home/strick/go/s):01185                  ENDC
053A 2003             (/home/strick/go/s):01186                  bra   L05D1
053C 39               (/home/strick/go/s):01187         L05CE    rts
                      (/home/strick/go/s):01188         
053D A641             (/home/strick/go/s):01189         SIClose  lda   R$A,u
053F 17FEE8           (/home/strick/go/s):01190         L05D1    lbsr  GetPDesc
0542 25F8             (/home/strick/go/s):01191                  bcs   L05CE
0544 6A22             (/home/strick/go/s):01192                  dec   PD.CNT,y
0546 6D25             (/home/strick/go/s):01193                  tst   PD.CPR,y
0548 2603             (/home/strick/go/s):01194                  bne   L05DF
054A 17FF3C           (/home/strick/go/s):01195                  lbsr  CallFMgr
054D 6D22             (/home/strick/go/s):01196         L05DF    tst   PD.CNT,y
054F 26EB             (/home/strick/go/s):01197                  bne   L05CE
0551 16FDD0           (/home/strick/go/s):01198                  lbra  L03C3
                      (/home/strick/go/s):01199         
0554 AE44             (/home/strick/go/s):01200         FIRQ     ldx   R$X,u     get ptr to IRQ packet
0556 E684             (/home/strick/go/s):01201                  ldb   ,x        B = flip byte
0558 AE01             (/home/strick/go/s):01202                  ldx   $01,x     X = mask/priority
055A 4F               (/home/strick/go/s):01203                  clra
055B 3401             (/home/strick/go/s):01204                  pshs  cc
055D 3414             (/home/strick/go/s):01205                  pshs  x,b
055F 9E24             (/home/strick/go/s):01206                  ldx   <D.Init
0561 E60C             (/home/strick/go/s):01207                  ldb   PollCnt,x
0563 9E82             (/home/strick/go/s):01208                  ldx   <D.PolTbl
0565 10AE44           (/home/strick/go/s):01209                  ldy   R$X,u
0568 2739             (/home/strick/go/s):01210                  beq   L0634
056A 6D61             (/home/strick/go/s):01211                  tst   $01,s     test mask byte
056C 2760             (/home/strick/go/s):01212                  beq   L0662
056E 5A               (/home/strick/go/s):01213                  decb            dec poll table count
056F 860B             (/home/strick/go/s):01214                  lda   #POLSIZ
0571 3D               (/home/strick/go/s):01215                  mul
                      (/home/strick/go/s):01216                  IFNE  H6309
                      (/home/strick/go/s):01217                  addr  d,x
                      (/home/strick/go/s):01218                  ELSE
0572 308B             (/home/strick/go/s):01219                  leax  d,x        point to last entry in table
                      (/home/strick/go/s):01220                  ENDC
0574 A603             (/home/strick/go/s):01221                  lda   Q$MASK,x
0576 2656             (/home/strick/go/s):01222                  bne   L0662
0578 1A50             (/home/strick/go/s):01223                  orcc  #IntMasks
057A E662             (/home/strick/go/s):01224         L060D    ldb   $02,s      get priority byte
057C E11D             (/home/strick/go/s):01225                  cmpb  -(POLSIZ-Q$PRTY),x compare with prev entry's prior
057E 250D             (/home/strick/go/s):01226                  bcs   L0620
0580 C60B             (/home/strick/go/s):01227                  ldb   #POLSIZ
0582 A682             (/home/strick/go/s):01228         L0615    lda   ,-x
0584 A70B             (/home/strick/go/s):01229                  sta   POLSIZ,x
0586 5A               (/home/strick/go/s):01230                  decb
0587 26F9             (/home/strick/go/s):01231                  bne   L0615
0589 9C82             (/home/strick/go/s):01232                  cmpx  <D.PolTbl
058B 22ED             (/home/strick/go/s):01233                  bhi   L060D
058D EC41             (/home/strick/go/s):01234         L0620    ldd   R$D,u      get dev stat reg
058F ED84             (/home/strick/go/s):01235                  std   Q$POLL,x   save it
0591 ECE1             (/home/strick/go/s):01236                  ldd   ,s++       get flip/mask
0593 ED02             (/home/strick/go/s):01237                  std   Q$FLIP,x   save it
0595 E6E0             (/home/strick/go/s):01238                  ldb   ,s+        get priority
0597 E708             (/home/strick/go/s):01239                  stb   Q$PRTY,x
                      (/home/strick/go/s):01240                  IFNE  H6309
                      (/home/strick/go/s):01241                  ldq   R$Y,u
                      (/home/strick/go/s):01242                  stq   Q$SERV,x
                      (/home/strick/go/s):01243                  ELSE
0599 EC46             (/home/strick/go/s):01244                  ldd   R$Y,u      get IRQ svc addr
059B ED04             (/home/strick/go/s):01245                  std   Q$SERV,x   save
059D EC48             (/home/strick/go/s):01246                  ldd   R$U,u      get IRQ svc mem ptr
059F ED06             (/home/strick/go/s):01247                  std   Q$STAT,x   save
                      (/home/strick/go/s):01248                  ENDC
05A1 3581             (/home/strick/go/s):01249                  puls  pc,cc
                      (/home/strick/go/s):01250         * Remove the ISR
05A3 3264             (/home/strick/go/s):01251         L0634    leas  $04,s      clean stack
05A5 10AE48           (/home/strick/go/s):01252                  ldy   R$U,u
05A8 10AC06           (/home/strick/go/s):01253         L0639    cmpy  Q$STAT,x
05AB 2707             (/home/strick/go/s):01254                  beq   L0645
05AD 300B             (/home/strick/go/s):01255                  leax  POLSIZ,x
05AF 5A               (/home/strick/go/s):01256                  decb
05B0 26F6             (/home/strick/go/s):01257                  bne   L0639
05B2 5F               (/home/strick/go/s):01258                  clrb
05B3 39               (/home/strick/go/s):01259                  rts
                      (/home/strick/go/s):01260                  IFNE  H6309
05B4                  (/home/strick/go/s):01261         L0645    orcc  #IntMasks
                      (/home/strick/go/s):01262                  decb
                      (/home/strick/go/s):01263                  beq   L0654
                      (/home/strick/go/s):01264                  lda   #POLSIZ
                      (/home/strick/go/s):01265                  mul
                      (/home/strick/go/s):01266                  tfr   d,w
                      (/home/strick/go/s):01267                  leay  POLSIZ,x
                      (/home/strick/go/s):01268                  tfm   y+,x+
05B4                  (/home/strick/go/s):01269         L0654    ldw   #POLSIZ
                      (/home/strick/go/s):01270                  clr   ,-s
                      (/home/strick/go/s):01271                  tfm   s,x+
                      (/home/strick/go/s):01272                  leas  $01,s
                      (/home/strick/go/s):01273                  andcc  #^IntMasks
                      (/home/strick/go/s):01274                  rts
                      (/home/strick/go/s):01275                  ELSE
05B4 3405             (/home/strick/go/s):01276         L0645    pshs  b,cc
05B6 1A50             (/home/strick/go/s):01277                  orcc  #IntMasks
05B8 2007             (/home/strick/go/s):01278                  bra   L0565
                      (/home/strick/go/s):01279         
                      (/home/strick/go/s):01280         * Move prev poll entry up one
05BA E60B             (/home/strick/go/s):01281         L055E    ldb   POLSIZ,x
05BC E780             (/home/strick/go/s):01282                  stb   ,x+
05BE 4A               (/home/strick/go/s):01283                  deca
05BF 26F9             (/home/strick/go/s):01284                  bne   L055E
05C1 860B             (/home/strick/go/s):01285         L0565    lda   #POLSIZ
05C3 6A61             (/home/strick/go/s):01286                  dec   1,s        dec count
05C5 26F3             (/home/strick/go/s):01287                  bne   L055E
05C7 6F80             (/home/strick/go/s):01288         L056B    clr   ,x+
05C9 4A               (/home/strick/go/s):01289                  deca
05CA 26FB             (/home/strick/go/s):01290                  bne   L056B
05CC 3583             (/home/strick/go/s):01291                  puls  pc,a,cc
                      (/home/strick/go/s):01292                  ENDC
                      (/home/strick/go/s):01293         
05CE 3264             (/home/strick/go/s):01294         L0662    leas  $04,s
05D0 53               (/home/strick/go/s):01295         L0664    comb
05D1 C6CA             (/home/strick/go/s):01296                  ldb   #E$Poll
05D3 39               (/home/strick/go/s):01297                  rts
                      (/home/strick/go/s):01298         
                      (/home/strick/go/s):01299         ***************************
                      (/home/strick/go/s):01300         *
                      (/home/strick/go/s):01301         * Device polling routine
                      (/home/strick/go/s):01302         *
                      (/home/strick/go/s):01303         * Entry: None
                      (/home/strick/go/s):01304         *
                      (/home/strick/go/s):01305         
05D4 109E82           (/home/strick/go/s):01306         IRQPoll  ldy   <D.PolTbl        get pointer to polling table
05D7 9E24             (/home/strick/go/s):01307                  ldx   <D.Init          get pointer to init module
05D9 E60C             (/home/strick/go/s):01308                  ldb   PollCnt,x        get number of entries in table
05DB A6B4             (/home/strick/go/s):01309         L066F    lda   [Q$POLL,y]       get device's status register
05DD A822             (/home/strick/go/s):01310                  eora  Q$FLIP,y         flip it
05DF A523             (/home/strick/go/s):01311                  bita  Q$MASK,y         origin of IRQ?
05E1 2607             (/home/strick/go/s):01312                  bne   L067E            yes, branch
05E3 312B             (/home/strick/go/s):01313         L0677    leay  POLSIZ,y         else move to next entry
05E5 5A               (/home/strick/go/s):01314                  decb                   done?
05E6 26F3             (/home/strick/go/s):01315                  bne   L066F            no, get next one
05E8 20E6             (/home/strick/go/s):01316                  bra   L0664            else branch
05EA EE26             (/home/strick/go/s):01317         L067E    ldu   Q$STAT,y         get device static storage
05EC 3424             (/home/strick/go/s):01318                  pshs  y,b              preserve device # & poll address
05EE ADB804           (/home/strick/go/s):01319                  jsr   [<Q$SERV,y]      execute service routine
05F1 3524             (/home/strick/go/s):01320                  puls  y,b              restore device # & poll address
05F3 25EE             (/home/strick/go/s):01321                  bcs   L0677            go to next device if error
05F5 39               (/home/strick/go/s):01322                  rts                    return
                      (/home/strick/go/s):01323         
                      (/home/strick/go/s):01324                  IFGT  Level-1
05F6 3440             (/home/strick/go/s):01325         FNMLoad  pshs  u                save caller's regs ptr
05F8 AE44             (/home/strick/go/s):01326                  ldx   R$X,u
05FA 17009A           (/home/strick/go/s):01327                  lbsr  LoadMod          allocate proc desc
05FD 254F             (/home/strick/go/s):01328                  bcs   L06E2
05FF 10AEE4           (/home/strick/go/s):01329                  ldy   ,s               put caller's regs ptr in Y
0602 AF24             (/home/strick/go/s):01330                  stx   R$X,y
0604 10AEC4           (/home/strick/go/s):01331                  ldy   ,u
0607 AE44             (/home/strick/go/s):01332                  ldx   $04,u
0609 CC0006           (/home/strick/go/s):01333                  ldd   #$0006
060C 103F48           (/home/strick/go/s):01334                  os9   F$LDDDXY
060F 31C4             (/home/strick/go/s):01335                  leay  ,u
0611 3540             (/home/strick/go/s):01336                  puls  u
0613 2016             (/home/strick/go/s):01337                  bra   L06BF
                      (/home/strick/go/s):01338         
0615 9E50             (/home/strick/go/s):01339         FNMLink  ldx   <D.Proc
0617 318840           (/home/strick/go/s):01340                  leay  <P$DATImg,x
061A 3440             (/home/strick/go/s):01341                  pshs  u
061C AE44             (/home/strick/go/s):01342                  ldx   R$X,u
061E A641             (/home/strick/go/s):01343                  lda   R$A,u
0620 103F4E           (/home/strick/go/s):01344                  os9   F$FModul
0623 2529             (/home/strick/go/s):01345                  bcs   L06E2
0625 31C4             (/home/strick/go/s):01346                  leay  ,u
0627 3540             (/home/strick/go/s):01347                  puls  u
0629 AF44             (/home/strick/go/s):01348                  stx   R$X,u
062B ED41             (/home/strick/go/s):01349         L06BF    std   R$A,u
062D AE26             (/home/strick/go/s):01350                  ldx   MD$Link,y        get link count
062F 2704             (/home/strick/go/s):01351                  beq   L06C9
0631 C580             (/home/strick/go/s):01352                  bitb  #ReEnt           reentrant?
0633 2716             (/home/strick/go/s):01353                  beq   L06DF            branch if so
0635 3001             (/home/strick/go/s):01354         L06C9    leax  1,x              increment module link count
0637 2702             (/home/strick/go/s):01355                  beq   L06CF            branch if zero
0639 AF26             (/home/strick/go/s):01356                  stx   MD$Link,y        else save new link count
063B AE24             (/home/strick/go/s):01357         L06CF    ldx   MD$MPtr,y        get module pointer in X
063D 10AEA4           (/home/strick/go/s):01358                  ldy   MD$MPDAT,y        get module DAT image ptr
0640 CC000B           (/home/strick/go/s):01359                  ldd   #$000B
0643 103F48           (/home/strick/go/s):01360                  os9   F$LDDDXY
0646 2502             (/home/strick/go/s):01361                  bcs   L06DE
0648 ED46             (/home/strick/go/s):01362                  std   R$Y,u
064A 39               (/home/strick/go/s):01363         L06DE    rts
064B 53               (/home/strick/go/s):01364         L06DF    comb
064C C6D1             (/home/strick/go/s):01365                  ldb   #E$ModBsy
064E 35C0             (/home/strick/go/s):01366         L06E2    puls  pc,u
                      (/home/strick/go/s):01367                  ENDC
                      (/home/strick/go/s):01368         
0650                  (/home/strick/go/s):01369         FLoad
                      (/home/strick/go/s):01370                  IFGT  Level-1
0650 3440             (/home/strick/go/s):01371                  pshs  u                place caller's reg ptr on stack
0652 AE44             (/home/strick/go/s):01372                  ldx   R$X,u            get pathname to load
0654 8D41             (/home/strick/go/s):01373                  bsr   LoadMod          allocate a process descriptor
0656 2523             (/home/strick/go/s):01374                  bcs   L070F            exit if error
0658 3520             (/home/strick/go/s):01375                  puls  y                get caller's reg ptr in Y
065A 3420             (/home/strick/go/s):01376         L06EE    pshs  y                preserve y
065C AF24             (/home/strick/go/s):01377                  stx   R$X,y            save updated pathlist
065E 10AEC4           (/home/strick/go/s):01378                  ldy   ,u               get DAT image pointer
0661 AE44             (/home/strick/go/s):01379                  ldx   $04,u            get offset within DAT image
0663 CC0006           (/home/strick/go/s):01380                  ldd   #$0006           get offset to the offset
0666 103F48           (/home/strick/go/s):01381                  os9   F$LDDDXY         get language & type
0669 AEE4             (/home/strick/go/s):01382                  ldx   ,s               get caller's reg ptr in X
066B ED01             (/home/strick/go/s):01383                  std   R$D,x            update language/type codes
066D 30C4             (/home/strick/go/s):01384                  leax  ,u
066F 103F4D           (/home/strick/go/s):01385                  os9   F$ELink
0672 2507             (/home/strick/go/s):01386                  bcs   L070F
0674 AEE4             (/home/strick/go/s):01387                  ldx   ,s               get caller's reg ptr in X
0676 10AF06           (/home/strick/go/s):01388                  sty   R$Y,x
0679 EF08             (/home/strick/go/s):01389                  stu   R$U,x
067B 35C0             (/home/strick/go/s):01390         L070F    puls  pc,u
                      (/home/strick/go/s):01391                  ELSE
                      (/home/strick/go/s):01392                  pshs  u
                      (/home/strick/go/s):01393                  ldx   R$X,u
                      (/home/strick/go/s):01394                  bsr   L05BC
                      (/home/strick/go/s):01395                  bcs   L05BA
                      (/home/strick/go/s):01396                  inc   $02,u                   increment link count
                      (/home/strick/go/s):01397                  ldy   ,u                      get mod header addr
                      (/home/strick/go/s):01398                  ldu   ,s                      get caller regs
                      (/home/strick/go/s):01399                  stx   R$X,u
                      (/home/strick/go/s):01400                  sty   R$U,u
                      (/home/strick/go/s):01401                  lda   M$Type,y
                      (/home/strick/go/s):01402                  ldb   M$Revs,y
                      (/home/strick/go/s):01403                  std   R$D,u
                      (/home/strick/go/s):01404                  ldd   M$Exec,y
                      (/home/strick/go/s):01405                  leax  d,y
                      (/home/strick/go/s):01406                  stx   R$Y,u
067D                  (/home/strick/go/s):01407         L05BA    puls  pc,u
                      (/home/strick/go/s):01408                  ENDC
                      (/home/strick/go/s):01409         
                      (/home/strick/go/s):01410                  IFGT  Level-1
067D 3440             (/home/strick/go/s):01411         IDetach0 pshs  u          save off regs ptr
067F AE44             (/home/strick/go/s):01412                  ldx   R$X,u      get ptr to device name
0681 8D14             (/home/strick/go/s):01413                  bsr   LoadMod
0683 2510             (/home/strick/go/s):01414                  bcs   L0729
0685 3520             (/home/strick/go/s):01415                  puls  y
0687 DC50             (/home/strick/go/s):01416                  ldd   <D.Proc
0689 3426             (/home/strick/go/s):01417                  pshs  y,b,a
068B EC28             (/home/strick/go/s):01418                  ldd   R$U,y
068D DD50             (/home/strick/go/s):01419                  std   <D.Proc
068F 8DC9             (/home/strick/go/s):01420                  bsr   L06EE
0691 3510             (/home/strick/go/s):01421                  puls  x
0693 9F50             (/home/strick/go/s):01422                  stx   <D.Proc
0695 35C0             (/home/strick/go/s):01423         L0729    puls  pc,u
                      (/home/strick/go/s):01424                  ENDC
                      (/home/strick/go/s):01425         
                      (/home/strick/go/s):01426         * Load module from file
                      (/home/strick/go/s):01427         * Entry: X = pathlist to file containing module(s)
                      (/home/strick/go/s):01428         * A fake process descriptor is created, then the file is
                      (/home/strick/go/s):01429         * opened and validated into memory.
                      (/home/strick/go/s):01430         
0697                  (/home/strick/go/s):01431         LoadMod
                      (/home/strick/go/s):01432                  IFGT  Level-1
0697 103F4B           (/home/strick/go/s):01433                  os9   F$AllPrc   allocate proc desc
069A 2401             (/home/strick/go/s):01434                  bcc   L0731
069C 39               (/home/strick/go/s):01435                  rts
069D 31C4             (/home/strick/go/s):01436         L0731    leay  ,u         point Y at new alloced mem
069F CE0000           (/home/strick/go/s):01437                  ldu   #$0000
06A2 3476             (/home/strick/go/s):01438                  pshs  u,y,x,b,a
06A4 32E8EF           (/home/strick/go/s):01439                  leas  <-$11,s    make a stack
06A7 6F67             (/home/strick/go/s):01440                  clr   $07,s
06A9 EFE4             (/home/strick/go/s):01441                  stu   ,s         save $0000
06AB EF62             (/home/strick/go/s):01442                  stu   $02,s      save $0000
06AD DE50             (/home/strick/go/s):01443                  ldu   <D.Proc    get proc desc ptr
06AF EF64             (/home/strick/go/s):01444                  stu   $04,s      save onto stack
06B1 6F66             (/home/strick/go/s):01445                  clr   $06,s
06B3 A64A             (/home/strick/go/s):01446                  lda   P$Prior,u  get priority
06B5 A72A             (/home/strick/go/s):01447                  sta   P$Prior,y  save
06B7 A72B             (/home/strick/go/s):01448                  sta   P$Age,y    and save as age
06B9 8604             (/home/strick/go/s):01449                  lda   #EXEC.     from exec dir
06BB 103F84           (/home/strick/go/s):01450                  os9   I$Open     open it
06BE 1025008C         (/home/strick/go/s):01451                  lbcs  L07E1      branch if error
06C2 A766             (/home/strick/go/s):01452                  sta   $06,s      else save path
06C4 AFE813           (/home/strick/go/s):01453                  stx   <$13,s     put updated pathlist in X on stack
06C7 AEE815           (/home/strick/go/s):01454                  ldx   <$15,s     get proc desc in Y on stack
06CA 103F3F           (/home/strick/go/s):01455                  os9   F$AllTsk   allocate task
06CD 257F             (/home/strick/go/s):01456                  bcs   L07E1
06CF 9F50             (/home/strick/go/s):01457                  stx   <D.Proc    save off X into curr proc
06D1 AEE815           (/home/strick/go/s):01458         L0765    ldx   <$15,s     get proc desc in Y on stack
06D4 A60A             (/home/strick/go/s):01459                  lda   P$Prior,x  get priority
06D6 8B08             (/home/strick/go/s):01460                  adda  #$08       add eight
06D8 2402             (/home/strick/go/s):01461                  bcc   L0770      branch if not overflow
06DA 86FF             (/home/strick/go/s):01462                  lda   #$FF       else load highest
06DC A70A             (/home/strick/go/s):01463         L0770    sta   P$Prior,x  save back
06DE A70B             (/home/strick/go/s):01464                  sta   P$Age,x    and age
06E0 CC0009           (/home/strick/go/s):01465                  ldd   #$0009
06E3 AE62             (/home/strick/go/s):01466                  ldx   $02,s
06E5 1700EB           (/home/strick/go/s):01467                  lbsr  L0866
06E8 2564             (/home/strick/go/s):01468                  bcs   L07E1
06EA EEE815           (/home/strick/go/s):01469                  ldu   <$15,s     get proc desc in Y on stack
06ED A646             (/home/strick/go/s):01470                  lda   P$Task,u
06EF D6D0             (/home/strick/go/s):01471                  ldb   <D.SysTsk
06F1 3368             (/home/strick/go/s):01472                  leau  $08,s
06F3 3410             (/home/strick/go/s):01473                  pshs  x
06F5 AE64             (/home/strick/go/s):01474                  ldx   $04,s
06F7 103F38           (/home/strick/go/s):01475                  os9   F$Move
06FA 3510             (/home/strick/go/s):01476                  puls  x
06FC ECC4             (/home/strick/go/s):01477                  ldd   M$ID,u
06FE 108387CD         (/home/strick/go/s):01478                  cmpd  #M$ID12
0702 2648             (/home/strick/go/s):01479                  bne   L07DF
0704 EC42             (/home/strick/go/s):01480                  ldd   M$Size,u
0706 830009           (/home/strick/go/s):01481                  subd  #M$IDSize
0709 1700C7           (/home/strick/go/s):01482                  lbsr  L0866
070C 2540             (/home/strick/go/s):01483                  bcs   L07E1
070E AE64             (/home/strick/go/s):01484                  ldx   $04,s
0710 A60A             (/home/strick/go/s):01485                  lda   P$Prior,x
0712 10AEE815         (/home/strick/go/s):01486                  ldy   <$15,s     get proc desc ptr
0716 A72A             (/home/strick/go/s):01487                  sta   P$Prior,y
0718 A72B             (/home/strick/go/s):01488                  sta   P$Age,y
071A 31A840           (/home/strick/go/s):01489                  leay  <P$DATImg,y
071D 1F20             (/home/strick/go/s):01490                  tfr   y,d
071F AE62             (/home/strick/go/s):01491                  ldx   $02,s
0721 103F2E           (/home/strick/go/s):01492                  os9   F$VModul
0724 2406             (/home/strick/go/s):01493                  bcc   L07C0
0726 C1E7             (/home/strick/go/s):01494                  cmpb  #E$KwnMod
0728 2708             (/home/strick/go/s):01495                  beq   L07C6
072A 2022             (/home/strick/go/s):01496                  bra   L07E1
072C EC62             (/home/strick/go/s):01497         L07C0    ldd   $02,s
072E E36A             (/home/strick/go/s):01498                  addd  $0A,s
0730 ED62             (/home/strick/go/s):01499                  std   $02,s
                      (/home/strick/go/s):01500         * U = mod dir entry
0732 ECE817           (/home/strick/go/s):01501         L07C6    ldd   <$17,s
0735 269A             (/home/strick/go/s):01502                  bne   L0765
0737 EC44             (/home/strick/go/s):01503                  ldd   MD$MPtr,u
0739 EDE811           (/home/strick/go/s):01504                  std   <$11,s
073C ECD4             (/home/strick/go/s):01505                  ldd   [MD$MPDAT,u]
073E EDE817           (/home/strick/go/s):01506                  std   <$17,s
0741 EC46             (/home/strick/go/s):01507                  ldd   MD$Link,u
                      (/home/strick/go/s):01508                  IFNE  H6309
                      (/home/strick/go/s):01509                  incd
                      (/home/strick/go/s):01510                  ELSE
0743 C30001           (/home/strick/go/s):01511                  addd  #$0001
                      (/home/strick/go/s):01512                  ENDC
0746 2789             (/home/strick/go/s):01513                  beq   L0765
0748 ED46             (/home/strick/go/s):01514                  std   MD$Link,u
074A 2085             (/home/strick/go/s):01515                  bra   L0765
074C C6CD             (/home/strick/go/s):01516         L07DF    ldb   #E$BMID
074E E767             (/home/strick/go/s):01517         L07E1    stb   $07,s
0750 EC64             (/home/strick/go/s):01518                  ldd   $04,s
0752 2702             (/home/strick/go/s):01519                  beq   L07E9
0754 DD50             (/home/strick/go/s):01520                  std   <D.Proc
0756 A666             (/home/strick/go/s):01521         L07E9    lda   $06,s
0758 2703             (/home/strick/go/s):01522                  beq   L07F0
075A 103F8F           (/home/strick/go/s):01523                  os9   I$Close    close path to file
075D EC62             (/home/strick/go/s):01524         L07F0    ldd   $02,s
075F C31FFF           (/home/strick/go/s):01525                  addd  #$1FFF
0762 44               (/home/strick/go/s):01526                  lsra
0763 44               (/home/strick/go/s):01527                  lsra
0764 44               (/home/strick/go/s):01528                  lsra
0765 44               (/home/strick/go/s):01529                  lsra
0766 44               (/home/strick/go/s):01530                  lsra
0767 A762             (/home/strick/go/s):01531                  sta   $02,s
0769 E6E4             (/home/strick/go/s):01532                  ldb   ,s
076B 271D             (/home/strick/go/s):01533                  beq   L081D
076D 54               (/home/strick/go/s):01534                  lsrb
076E 54               (/home/strick/go/s):01535                  lsrb
076F 54               (/home/strick/go/s):01536                  lsrb
0770 54               (/home/strick/go/s):01537                  lsrb
0771 54               (/home/strick/go/s):01538                  lsrb
0772 E062             (/home/strick/go/s):01539                  subb  $02,s
0774 2714             (/home/strick/go/s):01540                  beq   L081D
0776 AEE815           (/home/strick/go/s):01541                  ldx   <$15,s
0779 308840           (/home/strick/go/s):01542                  leax  <P$DATImg,x
077C 48               (/home/strick/go/s):01543                  lsla
077D 3086             (/home/strick/go/s):01544                  leax  a,x
077F 3001             (/home/strick/go/s):01545                  leax  $01,x
0781 DE40             (/home/strick/go/s):01546                  ldu   <D.BlkMap
0783 A681             (/home/strick/go/s):01547         L0816    lda   ,x++
0785 6FC6             (/home/strick/go/s):01548                  clr   a,u
0787 5A               (/home/strick/go/s):01549                  decb
0788 26F9             (/home/strick/go/s):01550                  bne   L0816
078A AEE815           (/home/strick/go/s):01551         L081D    ldx   <$15,s
078D A684             (/home/strick/go/s):01552                  lda   P$ID,x
078F 103F4C           (/home/strick/go/s):01553                  os9   F$DelPrc
0792 ECE817           (/home/strick/go/s):01554                  ldd   <$17,s
0795 2608             (/home/strick/go/s):01555                  bne   L0832
0797 E667             (/home/strick/go/s):01556                  ldb   $07,s
0799 E7E812           (/home/strick/go/s):01557                  stb   <$12,s
079C 53               (/home/strick/go/s):01558                  comb
079D 202F             (/home/strick/go/s):01559                  bra   L0861
079F DE44             (/home/strick/go/s):01560         L0832    ldu   <D.ModDir
07A1 AEE811           (/home/strick/go/s):01561                  ldx   <$11,s
07A4 ECE817           (/home/strick/go/s):01562                  ldd   <$17,s
07A7 3358             (/home/strick/go/s):01563                  leau  -MD$ESize,u
07A9 3348             (/home/strick/go/s):01564         L083C    leau  MD$ESize,u
07AB 119358           (/home/strick/go/s):01565                  cmpu  <D.ModEnd
07AE 2508             (/home/strick/go/s):01566                  bcs   L084B
07B0 53               (/home/strick/go/s):01567                  comb
07B1 C6DD             (/home/strick/go/s):01568                  ldb   #E$MNF
07B3 E7E812           (/home/strick/go/s):01569                  stb   <$12,s
07B6 2016             (/home/strick/go/s):01570                  bra   L0861
07B8 AC44             (/home/strick/go/s):01571         L084B    cmpx  MD$MPtr,u
07BA 26ED             (/home/strick/go/s):01572                  bne   L083C
07BC 10A3D4           (/home/strick/go/s):01573                  cmpd  [MD$MPDAT,u]
07BF 26E8             (/home/strick/go/s):01574                  bne   L083C
07C1 EC46             (/home/strick/go/s):01575                  ldd   MD$Link,u
07C3 2705             (/home/strick/go/s):01576                  beq   L085D
07C5 830001           (/home/strick/go/s):01577                  subd  #$0001
07C8 ED46             (/home/strick/go/s):01578                  std   MD$Link,u
07CA EFE817           (/home/strick/go/s):01579         L085D    stu   <$17,s
07CD 5F               (/home/strick/go/s):01580                  clrb
07CE 32E811           (/home/strick/go/s):01581         L0861    leas  <$11,s
07D1 35F6             (/home/strick/go/s):01582                  puls  pc,u,y,x,b,a
                      (/home/strick/go/s):01583         
07D3 3436             (/home/strick/go/s):01584         L0866    pshs  y,x,b,a
07D5 E362             (/home/strick/go/s):01585                  addd  $02,s
07D7 ED64             (/home/strick/go/s):01586                  std   $04,s
07D9 10A368           (/home/strick/go/s):01587                  cmpd  $08,s
07DC 2354             (/home/strick/go/s):01588                  bls   L08C2
07DE C31FFF           (/home/strick/go/s):01589                  addd  #$1FFF
07E1 44               (/home/strick/go/s):01590                  lsra
07E2 44               (/home/strick/go/s):01591                  lsra
07E3 44               (/home/strick/go/s):01592                  lsra
07E4 44               (/home/strick/go/s):01593                  lsra
07E5 44               (/home/strick/go/s):01594                  lsra
07E6 8107             (/home/strick/go/s):01595                  cmpa  #$07
07E8 2229             (/home/strick/go/s):01596                  bhi   L08A4
07EA E668             (/home/strick/go/s):01597                  ldb   $08,s
07EC 54               (/home/strick/go/s):01598                  lsrb
07ED 54               (/home/strick/go/s):01599                  lsrb
07EE 54               (/home/strick/go/s):01600                  lsrb
07EF 54               (/home/strick/go/s):01601                  lsrb
07F0 54               (/home/strick/go/s):01602                  lsrb
                      (/home/strick/go/s):01603                  IFNE  H6309
                      (/home/strick/go/s):01604                  subr  b,a
                      (/home/strick/go/s):01605                  lslb
                      (/home/strick/go/s):01606                  exg   b,a
                      (/home/strick/go/s):01607                  ELSE
07F1 3404             (/home/strick/go/s):01608                  pshs  b
07F3 1E98             (/home/strick/go/s):01609                  exg   b,a
07F5 E0E0             (/home/strick/go/s):01610                  subb  ,s+
07F7 48               (/home/strick/go/s):01611                  lsla
                      (/home/strick/go/s):01612                  ENDC
07F8 EEE81D           (/home/strick/go/s):01613                  ldu   <$1D,s
07FB 33C840           (/home/strick/go/s):01614                  leau  <P$DATImg,u
07FE 33C6             (/home/strick/go/s):01615                  leau  a,u
0800 4F               (/home/strick/go/s):01616                  clra
                      (/home/strick/go/s):01617                  IFNE  H6309
                      (/home/strick/go/s):01618                  tfr   b,f
                      (/home/strick/go/s):01619                  ELSE
0801 1F01             (/home/strick/go/s):01620                  tfr   d,x
                      (/home/strick/go/s):01621                  ENDC
0803 109E40           (/home/strick/go/s):01622                  ldy   <D.BlkMap
0806 5F               (/home/strick/go/s):01623                  clrb
0807 6DA0             (/home/strick/go/s):01624         L0899    tst   ,y+
0809 270D             (/home/strick/go/s):01625                  beq   L08A9
     080B             (/home/strick/go/s):01626         L089D    equ   *
                      (/home/strick/go/s):01627                  IFNE  H6309
                      (/home/strick/go/s):01628                  incd
                      (/home/strick/go/s):01629                  ELSE
080B C30001           (/home/strick/go/s):01630                  addd  #$0001
                      (/home/strick/go/s):01631                  ENDC
080E 109C42           (/home/strick/go/s):01632                  cmpy  <D.BlkMap+2
0811 26F4             (/home/strick/go/s):01633                  bne   L0899
0813 53               (/home/strick/go/s):01634         L08A4    comb
0814 C6CF             (/home/strick/go/s):01635                  ldb   #E$MemFul
0816 2024             (/home/strick/go/s):01636                  bra   L08CC
0818 6C3F             (/home/strick/go/s):01637         L08A9    inc   -$01,y
081A EDC1             (/home/strick/go/s):01638                  std   ,u++
                      (/home/strick/go/s):01639                  IFNE  H6309
                      (/home/strick/go/s):01640                  lde   $08,s
                      (/home/strick/go/s):01641                  adde  #$20
                      (/home/strick/go/s):01642                  ste   $08,s
                      (/home/strick/go/s):01643                  decf
                      (/home/strick/go/s):01644                  ELSE
081C 3402             (/home/strick/go/s):01645                  pshs  a
081E A669             (/home/strick/go/s):01646                  lda   $09,s
0820 8B20             (/home/strick/go/s):01647                  adda  #$20
0822 A769             (/home/strick/go/s):01648                  sta   $09,s
0824 3502             (/home/strick/go/s):01649                  puls  a
0826 301F             (/home/strick/go/s):01650                  leax  -1,x
                      (/home/strick/go/s):01651                  ENDC
0828 26E1             (/home/strick/go/s):01652                  bne   L089D
082A AEE81D           (/home/strick/go/s):01653                  ldx   <$1D,s
082D 103F41           (/home/strick/go/s):01654                  os9   F$SetTsk
0830 250A             (/home/strick/go/s):01655                  bcs   L08CC
0832 A66E             (/home/strick/go/s):01656         L08C2    lda   $0E,s
0834 AE62             (/home/strick/go/s):01657                  ldx   $02,s
0836 10AEE4           (/home/strick/go/s):01658                  ldy   ,s
0839 103F89           (/home/strick/go/s):01659                  os9   I$Read
083C 3264             (/home/strick/go/s):01660         L08CC    leas  $04,s
083E 3590             (/home/strick/go/s):01661                  puls  pc,x
                      (/home/strick/go/s):01662                  ELSE
0840                  (/home/strick/go/s):01663         L05BC    lda   #EXEC.
                      (/home/strick/go/s):01664                  os9   I$Open
                      (/home/strick/go/s):01665                  bcs   L0632
                      (/home/strick/go/s):01666                  leas  -$0A,s                  make room on stack
                      (/home/strick/go/s):01667                  ldu   #$0000
                      (/home/strick/go/s):01668                  pshs  u,y,x
                      (/home/strick/go/s):01669                  sta   6,s                     save path
0840                  (/home/strick/go/s):01670         L05CC    ldd   4,s                     get U (caller regs) from stack
                      (/home/strick/go/s):01671                  bne   L05D2
                      (/home/strick/go/s):01672                  stu   4,s
0840                  (/home/strick/go/s):01673         L05D2    lda   6,s                     get path
                      (/home/strick/go/s):01674                  leax  7,s                     point to place on stack
                      (/home/strick/go/s):01675                  ldy   #M$IDSize               read M$IDSize bytes
                      (/home/strick/go/s):01676                  os9   I$Read
                      (/home/strick/go/s):01677                  bcs   L061E
                      (/home/strick/go/s):01678                  ldd   ,x
                      (/home/strick/go/s):01679                  cmpd  #M$ID12
                      (/home/strick/go/s):01680                  bne   L061C
                      (/home/strick/go/s):01681                  ldd   $09,s                   get module size
                      (/home/strick/go/s):01682                  os9   F$SRqMem                allocate mem
                      (/home/strick/go/s):01683                  bcs   L061E
                      (/home/strick/go/s):01684                  ldb   #M$IDSize
0840                  (/home/strick/go/s):01685         L05F0    lda   ,x+                     copy over first M$IDSize bytes
                      (/home/strick/go/s):01686                  sta   ,u+
                      (/home/strick/go/s):01687                  decb
                      (/home/strick/go/s):01688                  bne   L05F0
                      (/home/strick/go/s):01689                  lda   $06,s                   get path
                      (/home/strick/go/s):01690                  leax  ,u                      point X at updated U
                      (/home/strick/go/s):01691                  ldu   $09,s                   get module size
                      (/home/strick/go/s):01692                  leay  -M$IDSize,u             subtract count
                      (/home/strick/go/s):01693                  os9   I$Read
                      (/home/strick/go/s):01694                  leax  -M$IDSize,x
                      (/home/strick/go/s):01695                  bcs   L060B
                      (/home/strick/go/s):01696                  os9   F$VModul                validate module
                      (/home/strick/go/s):01697                  bcc   L05CC
0840                  (/home/strick/go/s):01698         L060B    pshs  u,b
                      (/home/strick/go/s):01699                  leau  ,x                      point U at memory allocated
                      (/home/strick/go/s):01700                  ldd   M$Size,x
                      (/home/strick/go/s):01701                  os9   F$SRtMem                return mem
                      (/home/strick/go/s):01702                  puls  u,b
                      (/home/strick/go/s):01703                  cmpb  #E$KwnMod
                      (/home/strick/go/s):01704                  beq   L05CC
                      (/home/strick/go/s):01705                  bra   L061E
0840                  (/home/strick/go/s):01706         L061C    ldb   #E$BMID
0840                  (/home/strick/go/s):01707         L061E    puls  u,y,x
                      (/home/strick/go/s):01708                  lda   ,s                      get path
                      (/home/strick/go/s):01709                  stb   ,s                      save error code
                      (/home/strick/go/s):01710                  os9   I$Close                 close path
                      (/home/strick/go/s):01711                  ldb   ,s
                      (/home/strick/go/s):01712                  leas  $0A,s                   clear up stack
                      (/home/strick/go/s):01713                  cmpu  #$0000
                      (/home/strick/go/s):01714                  bne   L0632
                      (/home/strick/go/s):01715                  coma
0840                  (/home/strick/go/s):01716         L0632    rts
                      (/home/strick/go/s):01717                  ENDC
                      (/home/strick/go/s):01718         
                      (/home/strick/go/s):01719         ********************************
                      (/home/strick/go/s):01720         *
                      (/home/strick/go/s):01721         * F$PErr System call entry point
                      (/home/strick/go/s):01722         *
                      (/home/strick/go/s):01723         * Entry: U = Register stack pointer
                      (/home/strick/go/s):01724         *
                      (/home/strick/go/s):01725         
0840 4552524F522023   (/home/strick/go/s):01726         ErrHead  fcc   /ERROR #/
     0007             (/home/strick/go/s):01727         ErrNum   equ   *-ErrHead
0847 2F3A30           (/home/strick/go/s):01728                  fcb   $2F,$3A,$30
084A 0D               (/home/strick/go/s):01729                  fcb   C$CR
     000B             (/home/strick/go/s):01730         ErrMessL equ   *-ErrHead
                      (/home/strick/go/s):01731         
084B 9E50             (/home/strick/go/s):01732         FPErr    ldx   <D.Proc          get current process pointer
084D A68832           (/home/strick/go/s):01733                  lda   <P$PATH+2,x      get stderr path
0850 2740             (/home/strick/go/s):01734                  beq   L0922            return if not there
0852 3275             (/home/strick/go/s):01735                  leas  -ErrMessL,s      make room on stack
                      (/home/strick/go/s):01736         * copy error message to stack
0854 308CE9           (/home/strick/go/s):01737                  leax  <ErrHead,pcr     point to error text
0857 31E4             (/home/strick/go/s):01738                  leay  ,s               point to buffer
0859 A680             (/home/strick/go/s):01739         L08E9    lda   ,x+              get a byte
085B A7A0             (/home/strick/go/s):01740                  sta   ,y+              store a byte
085D 810D             (/home/strick/go/s):01741                  cmpa  #C$CR            done?
085F 26F8             (/home/strick/go/s):01742                  bne   L08E9            no, keep going
0861 E642             (/home/strick/go/s):01743                  ldb   R$B,u            get error #
                      (/home/strick/go/s):01744         * Convert error code to decimal
0863 6C67             (/home/strick/go/s):01745         L08F3    inc   ErrNum+0,s
0865 C064             (/home/strick/go/s):01746                  subb  #$64
0867 24FA             (/home/strick/go/s):01747                  bcc   L08F3
0869 6A68             (/home/strick/go/s):01748         L08F9    dec   ErrNum+1,s
086B CB0A             (/home/strick/go/s):01749                  addb  #$0A
086D 24FA             (/home/strick/go/s):01750                  bcc   L08F9
086F CB30             (/home/strick/go/s):01751                  addb  #$30
0871 E769             (/home/strick/go/s):01752                  stb   ErrNum+2,s
                      (/home/strick/go/s):01753                  IFGT  Level-1
0873 9E50             (/home/strick/go/s):01754                  ldx   <D.Proc          get current process pointer
0875 EE04             (/home/strick/go/s):01755                  ldu   P$SP,x           get the stack pointer
0877 3355             (/home/strick/go/s):01756                  leau  -ErrMessL,u      put a buffer on it
0879 96D0             (/home/strick/go/s):01757                  lda   <D.SysTsk        get system task number
087B E606             (/home/strick/go/s):01758                  ldb   P$Task,x         get task number of process
087D 30E4             (/home/strick/go/s):01759                  leax  ,s               point to error text
087F 108E000B         (/home/strick/go/s):01760                  ldy   #ErrMessL        get length of text
0883 103F38           (/home/strick/go/s):01761         L0913    os9   F$Move           move it to the process
0886 30C4             (/home/strick/go/s):01762                  leax  ,u               point to the moved text
0888 DE50             (/home/strick/go/s):01763                  ldu   <D.Proc          get process pointer
088A A6C832           (/home/strick/go/s):01764                  lda   <P$PATH+2,u      get path number
088D 103F8C           (/home/strick/go/s):01765                  os9   I$WritLn         write the text
0890 326B             (/home/strick/go/s):01766                  leas  ErrMessL,s       purge the buffer
                      (/home/strick/go/s):01767                  ELSE
                      (/home/strick/go/s):01768                  ldx   <D.Proc
                      (/home/strick/go/s):01769                  leax  ,s                      point to error message
                      (/home/strick/go/s):01770                  ldu   <D.Proc
                      (/home/strick/go/s):01771                  lda   <P$PATH+2,u
                      (/home/strick/go/s):01772                  os9   I$WritLn                write message
                      (/home/strick/go/s):01773                  leas  ErrMessL,s              fix up stack
                      (/home/strick/go/s):01774                  ENDC
0892 39               (/home/strick/go/s):01775         L0922    rts                    return
                      (/home/strick/go/s):01776         
0893                  (/home/strick/go/s):01777         FIOQu
                      (/home/strick/go/s):01778                  IFNE  H6309
                      (/home/strick/go/s):01779                  lde   R$A,u
                      (/home/strick/go/s):01780                  ENDC
0893                  (/home/strick/go/s):01781         FIOQu2
0893 109E50           (/home/strick/go/s):01782                  ldy   <D.Proc
                      (/home/strick/go/s):01783                  IFNE  H6309
                      (/home/strick/go/s):01784                  clrf
                      (/home/strick/go/s):01785                  ENDC
0896 A6A810           (/home/strick/go/s):01786         L092B    lda   <P$IOQN,y
0899 271C             (/home/strick/go/s):01787                  beq   L094F
                      (/home/strick/go/s):01788                  IFNE  H6309
                      (/home/strick/go/s):01789                  cmpr  e,a
                      (/home/strick/go/s):01790                  ELSE
089B A141             (/home/strick/go/s):01791                  cmpa  R$A,u
                      (/home/strick/go/s):01792                  ENDC
089D 2613             (/home/strick/go/s):01793                  bne   L094A
                      (/home/strick/go/s):01794                  IFNE  H6309
                      (/home/strick/go/s):01795                  stf   <P$IOQN,y
                      (/home/strick/go/s):01796                  ELSE
089F 6FA810           (/home/strick/go/s):01797                  clr   <P$IOQN,y
                      (/home/strick/go/s):01798                  ENDC
                      (/home/strick/go/s):01799                  IFGT  Level-1
08A2 103F37           (/home/strick/go/s):01800                  os9   F$GProcP
                      (/home/strick/go/s):01801                  ELSE
                      (/home/strick/go/s):01802                  ldx   <D.PrcDBT
                      (/home/strick/go/s):01803                  os9   F$Find64
                      (/home/strick/go/s):01804                  ENDC
08A5 25EB             (/home/strick/go/s):01805                  bcs   L0922
                      (/home/strick/go/s):01806                  IFNE  H6309
                      (/home/strick/go/s):01807                  stf   P$IOQP,y
                      (/home/strick/go/s):01808                  ELSE
08A7 6F2F             (/home/strick/go/s):01809                  clr   P$IOQP,y
                      (/home/strick/go/s):01810                  ENDC
08A9 C601             (/home/strick/go/s):01811                  ldb   #S$Wake
08AB 103F08           (/home/strick/go/s):01812                  os9   F$Send
08AE DE50             (/home/strick/go/s):01813                  ldu   <D.Proc
08B0 200E             (/home/strick/go/s):01814                  bra   L0958
08B2                  (/home/strick/go/s):01815         L094A
                      (/home/strick/go/s):01816                  IFGT  Level-1
08B2 103F37           (/home/strick/go/s):01817                  os9   F$GProcP
                      (/home/strick/go/s):01818                  ELSE
                      (/home/strick/go/s):01819                  ldx   <D.PrcDBT
                      (/home/strick/go/s):01820                  os9   F$Find64
                      (/home/strick/go/s):01821                  ENDC
08B5 24DF             (/home/strick/go/s):01822                  bcc   L092B
08B7                  (/home/strick/go/s):01823         L094F
                      (/home/strick/go/s):01824                  IFNE  H6309
                      (/home/strick/go/s):01825                  tfr   e,a
                      (/home/strick/go/s):01826                  ELSE
08B7 A641             (/home/strick/go/s):01827                  lda   R$A,u
                      (/home/strick/go/s):01828                  ENDC
08B9 DE50             (/home/strick/go/s):01829                  ldu   <D.Proc
                      (/home/strick/go/s):01830                  IFGT  Level-1
08BB 103F37           (/home/strick/go/s):01831                  os9   F$GProcP
                      (/home/strick/go/s):01832                  ELSE
                      (/home/strick/go/s):01833                  ldx   <D.PrcDBT
                      (/home/strick/go/s):01834                  os9   F$Find64
                      (/home/strick/go/s):01835                  ENDC
08BE 2556             (/home/strick/go/s):01836                  bcs   L09B1
08C0 30A4             (/home/strick/go/s):01837         L0958    leax  ,y
08C2 A6A810           (/home/strick/go/s):01838                  lda   <P$IOQN,y
08C5 271A             (/home/strick/go/s):01839                  beq   L097A
                      (/home/strick/go/s):01840                  IFGT  Level-1
08C7 103F37           (/home/strick/go/s):01841                  os9   F$GProcP
                      (/home/strick/go/s):01842                  ELSE
                      (/home/strick/go/s):01843                  ldx   <D.PrcDBT
                      (/home/strick/go/s):01844                  os9   F$Find64
                      (/home/strick/go/s):01845                  ENDC
08CA 254A             (/home/strick/go/s):01846                  bcs   L09B1
08CC E64B             (/home/strick/go/s):01847                  ldb   P$Age,u
08CE E12B             (/home/strick/go/s):01848                  cmpb  P$Age,y          FYI, was cmpd, bug in OS-9 Level Two from Tandy
08D0 23EE             (/home/strick/go/s):01849                  bls   L0958
08D2 E6C4             (/home/strick/go/s):01850                  ldb   ,u
08D4 E78810           (/home/strick/go/s):01851                  stb   <P$IOQN,x
08D7 E684             (/home/strick/go/s):01852                  ldb   ,x
08D9 E74F             (/home/strick/go/s):01853                  stb   P$IOQP,u
                      (/home/strick/go/s):01854                  IFNE  H6309
                      (/home/strick/go/s):01855                  stf   P$IOQP,y
                      (/home/strick/go/s):01856                  ELSE
08DB 6F2F             (/home/strick/go/s):01857                  clr   P$IOQP,y
                      (/home/strick/go/s):01858                  ENDC
08DD 1E23             (/home/strick/go/s):01859                  exg   y,u
08DF 20DF             (/home/strick/go/s):01860                  bra   L0958
08E1 A6C4             (/home/strick/go/s):01861         L097A    lda   ,u
08E3 A7A810           (/home/strick/go/s):01862                  sta   <P$IOQN,y
08E6 A6A4             (/home/strick/go/s):01863                  lda   ,y
08E8 A74F             (/home/strick/go/s):01864                  sta   P$IOQP,u
08EA 8E0000           (/home/strick/go/s):01865                  ldx   #$0000
08ED 103F0A           (/home/strick/go/s):01866                  os9   F$Sleep
08F0 DE50             (/home/strick/go/s):01867                  ldu   <D.Proc
08F2 A64F             (/home/strick/go/s):01868                  lda   P$IOQP,u
08F4 2720             (/home/strick/go/s):01869                  beq   L09B1
                      (/home/strick/go/s):01870                  IFGT  Level-1
08F6 103F37           (/home/strick/go/s):01871                  os9   F$GProcP
                      (/home/strick/go/s):01872                  ELSE
                      (/home/strick/go/s):01873                  ldx   <D.PrcDBT
                      (/home/strick/go/s):01874                  os9   F$Find64
                      (/home/strick/go/s):01875                  ENDC
08F9 2519             (/home/strick/go/s):01876                  bcs   L09AE
08FB A6A810           (/home/strick/go/s):01877                  lda   <P$IOQN,y
08FE 2714             (/home/strick/go/s):01878                  beq   L09AE
0900 A6C810           (/home/strick/go/s):01879                  lda   <P$IOQN,u
0903 A7A810           (/home/strick/go/s):01880                  sta   <P$IOQN,y
0906 270C             (/home/strick/go/s):01881                  beq   L09AE
                      (/home/strick/go/s):01882                  IFNE  H6309
                      (/home/strick/go/s):01883                  stf   <P$IOQN,u
                      (/home/strick/go/s):01884                  ELSE
0908 6FC810           (/home/strick/go/s):01885                  clr   <P$IOQN,u
                      (/home/strick/go/s):01886                  ENDC
                      (/home/strick/go/s):01887                  IFGT  Level-1
090B 103F37           (/home/strick/go/s):01888                  os9   F$GProcP
                      (/home/strick/go/s):01889                  ELSE
                      (/home/strick/go/s):01890                  ldx   <D.PrcDBT
                      (/home/strick/go/s):01891                  os9   F$Find64
                      (/home/strick/go/s):01892                  ENDC
090E 2504             (/home/strick/go/s):01893                  bcs   L09AE
0910 A64F             (/home/strick/go/s):01894                  lda   P$IOQP,u
0912 A72F             (/home/strick/go/s):01895                  sta   P$IOQP,y
0914                  (/home/strick/go/s):01896         L09AE
                      (/home/strick/go/s):01897                  IFNE  H6309
                      (/home/strick/go/s):01898                  stf   P$IOQP,u
                      (/home/strick/go/s):01899                  ELSE
0914 6F4F             (/home/strick/go/s):01900                  clr   P$IOQP,u
                      (/home/strick/go/s):01901                  ENDC
0916 39               (/home/strick/go/s):01902         L09B1    rts
                      (/home/strick/go/s):01903         
0917 FB10BD           (/home/strick/go/s):01904                  emod
     091A             (/home/strick/go/s):01905         eom      equ   *
                      (/home/strick/go/s):01906                  end
