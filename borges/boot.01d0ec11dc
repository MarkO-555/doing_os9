                      (    boot_1773.asm):00001         ********************************************************************
                      (    boot_1773.asm):00002         * Boot - WD1773 Boot module
                      (    boot_1773.asm):00003         *
                      (    boot_1773.asm):00004         * $Id$
                      (    boot_1773.asm):00005         *
                      (    boot_1773.asm):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (    boot_1773.asm):00007         * Comment
                      (    boot_1773.asm):00008         * ------------------------------------------------------------------
                      (    boot_1773.asm):00009         *   4      1985/??/??   
                      (    boot_1773.asm):00010         * Original Tandy distribution version.
                      (    boot_1773.asm):00011         *
                      (    boot_1773.asm):00012         *   6      1998/10/12  Boisy G. Pitre
                      (    boot_1773.asm):00013         * Obtained from L2 Upgrade archive, has 6ms step rate and disk timeout
                      (    boot_1773.asm):00014         * changes.
                      (    boot_1773.asm):00015         *
                      (    boot_1773.asm):00016         *   6r2    2003/05/18  Boisy G. Pitre
                      (    boot_1773.asm):00017         * Added '.' output for each sector for OS-9 L2 and NitrOS9 for
                      (    boot_1773.asm):00018         * Mark Marlette (a special request :).
                      (    boot_1773.asm):00019         *
                      (    boot_1773.asm):00020         *   6r3    2003/08/31  Robert Gault
                      (    boot_1773.asm):00021         * Put BLOB-stop code in place, changed orb #$30 to orb #$28
                      (    boot_1773.asm):00022         *
                      (    boot_1773.asm):00023         *   6r4    2004/02/17  Rodney Hamilton
                      (    boot_1773.asm):00024         * Minor optimizations, improvements in source comments
                      (    boot_1773.asm):00025         *
                      (    boot_1773.asm):00026         *   7      2005/10/10  Boisy G. Pitre
                      (    boot_1773.asm):00027         * Added fragmented bootfile support
                      (    boot_1773.asm):00028         *
                      (    boot_1773.asm):00029         *   7      2005/10/13  Robert Gault
                      (    boot_1773.asm):00030         * Changed timing loops for H6309L2 so that code shortened enough to
                      (    boot_1773.asm):00031         * fit within the $1D0 boundary.
                      (    boot_1773.asm):00032         *
                      (    boot_1773.asm):00033         *   8      2006/03/03  Boisy G. Pitre
                      (    boot_1773.asm):00034         * Drive motors now turned off before returning to kernel.
                      (    boot_1773.asm):00035         *
                      (    boot_1773.asm):00036         *   9      2006/05/05  Boisy G. Pitre
                      (    boot_1773.asm):00037         * Fixed bug where single sided booting was broken
                      (    boot_1773.asm):00038         *
                      (    boot_1773.asm):00039         *          2006/06/04  Boisy G. Pitre
                      (    boot_1773.asm):00040         * Removed hard-coded value of #18 when adding back sectors per track and replaced
                      (    boot_1773.asm):00041         * with the appropriate value: ddtks,u
                      (    boot_1773.asm):00042         
                      (    boot_1773.asm):00043                  nam   Boot
                      (    boot_1773.asm):00044                  ttl   WD1773 Boot module
                      (    boot_1773.asm):00045         
                      (    boot_1773.asm):00046                  IFP1
                      (    boot_1773.asm):00047                  use   defsfile
     0002             (         defsfile):00001         Level equ 2
     0001             (         defsfile):00002         H6309 equ 1
     0050             (         defsfile):00003         Width equ 80
     0001             (         defsfile):00004         RTCDsto4 equ 1
     0000             (         defsfile):00005         ROM equ 0
     0001             (         defsfile):00006         DD equ 1
     0000             (         defsfile):00007         DNum equ 0
                      (         defsfile):00008         
     0011             (         defsfile):00009         D.IRQTmp equ $0011        [strick yak adds]
     005E             (         defsfile):00010         D.BtBug equ $005E         [strick yak adds]
     0001             (         defsfile):00011         FMT.SIDE EQU   %00000001  Single Sided=0, Double Sided=1  [strick yak adds]
                      (         defsfile):00012         
                      (         defsfile):00013          use /dd/defs/os9defs
                      ( /dd/defs/os9defs):00001          opt -l
                      ( /dd/defs/os9defs):00002          ttl OS-9 System Symbol Definitions
                      ( /dd/defs/os9defs):00003         
                      ( /dd/defs/os9defs):00004         ***************
                      ( /dd/defs/os9defs):00005         * Edition History
                      ( /dd/defs/os9defs):00006         
                      ( /dd/defs/os9defs):00007         *   Date    Changes Made
                      ( /dd/defs/os9defs):00008         * -------- ----------------------------------------------
                      ( /dd/defs/os9defs):00009         * 83/03/01 Six new Status codes added: SS.BlkRd - SS.ELog
                      ( /dd/defs/os9defs):00010         * 83/03/08 New status code added: SS.SSig
                      ( /dd/defs/os9defs):00011         * 83/04/21 added new F$ call for 7 day clock function
                      ( /dd/defs/os9defs):00012         *          for com-trol level II.
                      ( /dd/defs/os9defs):00013         * 83/05/04 F$GCMDir service request added for NCM  by  WGP
                      ( /dd/defs/os9defs):00014         * 83/06/29 Added ProtFlag to init module offsets
                      ( /dd/defs/os9defs):00015         * 83/10/12 Added SS.AlfaS for coco  MGH
                      ( /dd/defs/os9defs):00016         * 83/10/28 Added SS.Break for ACIA Break command RES
                      ( /dd/defs/os9defs):00017         * 83/11/19 Added SS.RsBit to reserve (not allocate in) bitmap sector
                      ( /dd/defs/os9defs):00018         * 84/02/17 Added reserved status codes for Hoshi and Gimix
                      ( /dd/defs/os9defs):00019         * 84/03/07 Added SS.Cursr and SS.ScSiz for Coco MGH
                      ( /dd/defs/os9defs):00020         *          Added New signal code S$Window .. coco future MGH
                      ( /dd/defs/os9defs):00021         * 84/04/11 Addes SS.Sound for COCO                       MGH
                      ( /dd/defs/os9defs):00022         * 84/06/05 Added label SS.SetMF to Gimix Reserved byte   MGH
                      ( /dd/defs/os9defs):00023         * 85/03/04 Changed SS.Sound to SS.KySns                  MGH
                      ( /dd/defs/os9defs):00024         * 85/04/28 Added SS.ComSt Communication Set (Parity,Baud)MGH
                      ( /dd/defs/os9defs):00025         * 85/05/02 Added F$VIRQ for Virtual IRQ                  TAH
                      ( /dd/defs/os9defs):00026         * 85/05/30 Added SS.Open,SS.Close,SS.HngUP               MGH
                      ( /dd/defs/os9defs):00027         * 85/06/01 Added E$HangUp error for CDC Lost             MGH
                      ( /dd/defs/os9defs):00028         * 85/06/03 Added DT.NFM device type                      DJN
                      ( /dd/defs/os9defs):00029         * 85/06/20 Added SS.AAGBf, SS.SLGBf                      MGH
                      ( /dd/defs/os9defs):00030         
                      ( /dd/defs/os9defs):00031          pag
                      ( /dd/defs/os9defs):00032         ************************************************************
                      ( /dd/defs/os9defs):00033         *
                      ( /dd/defs/os9defs):00034         *     System Service Request Code Definitions
                      ( /dd/defs/os9defs):00035         *
                      ( /dd/defs/os9defs):00036          ORG 0
0000                  ( /dd/defs/os9defs):00037         F$Link rmb 1 Link to Module
0001                  ( /dd/defs/os9defs):00038         F$Load rmb 1 Load Module from File
0002                  ( /dd/defs/os9defs):00039         F$UnLink rmb 1 Unlink Module
0003                  ( /dd/defs/os9defs):00040         F$Fork rmb 1 Start New Process
0004                  ( /dd/defs/os9defs):00041         F$Wait rmb 1 Wait for Child Process to Die
0005                  ( /dd/defs/os9defs):00042         F$Chain rmb 1 Chain Process to New Module
0006                  ( /dd/defs/os9defs):00043         F$Exit rmb 1 Terminate Process
0007                  ( /dd/defs/os9defs):00044         F$Mem rmb 1 Set Memory Size
0008                  ( /dd/defs/os9defs):00045         F$Send rmb 1 Send Signal to Process
0009                  ( /dd/defs/os9defs):00046         F$Icpt rmb 1 Set Signal Intercept
000A                  ( /dd/defs/os9defs):00047         F$Sleep rmb 1 Suspend Process
000B                  ( /dd/defs/os9defs):00048         F$SSpd rmb 1 Suspend Process
000C                  ( /dd/defs/os9defs):00049         F$ID rmb 1 Return Process ID
000D                  ( /dd/defs/os9defs):00050         F$SPrior rmb 1 Set Process Priority
000E                  ( /dd/defs/os9defs):00051         F$SSWI rmb 1 Set Software Interrupt
000F                  ( /dd/defs/os9defs):00052         F$PErr rmb 1 Print Error
0010                  ( /dd/defs/os9defs):00053         F$PrsNam rmb 1 Parse Pathlist Name
0011                  ( /dd/defs/os9defs):00054         F$CmpNam rmb 1 Compare Two Names
0012                  ( /dd/defs/os9defs):00055         F$SchBit rmb 1 Search Bit Map
0013                  ( /dd/defs/os9defs):00056         F$AllBit rmb 1 Allocate in Bit Map
0014                  ( /dd/defs/os9defs):00057         F$DelBit rmb 1 Deallocate in Bit Map
0015                  ( /dd/defs/os9defs):00058         F$Time rmb 1 Get Current Time
0016                  ( /dd/defs/os9defs):00059         F$STime rmb 1 Set Current Time
0017                  ( /dd/defs/os9defs):00060         F$CRC rmb 1 Generate CRC
0018                  ( /dd/defs/os9defs):00061         F$GPrDsc rmb 1 get Process Descriptor copy
0019                  ( /dd/defs/os9defs):00062         F$GBlkMp rmb 1 get System Block Map copy
001A                  ( /dd/defs/os9defs):00063         F$GModDr rmb 1 get Module Directory copy
001B                  ( /dd/defs/os9defs):00064         F$CpyMem rmb 1 Copy External Memory
001C                  ( /dd/defs/os9defs):00065         F$SUser rmb 1 Set User ID number
001D                  ( /dd/defs/os9defs):00066         F$UnLoad rmb 1 Unlink Module by name
                      ( /dd/defs/os9defs):00067         *F$Ctime rmb 1 Com-Trol clock read
                      ( /dd/defs/os9defs):00068         *F$Cstime rmb 1 Com-Trol set time
                      ( /dd/defs/os9defs):00069         *F$CTswi2 rmb 1 Com-Trol double postbyte swi2
001E                  ( /dd/defs/os9defs):00070          rmb 3 reserved - see above
                      ( /dd/defs/os9defs):00071          ORG $27 Beginning of System Reserved Calls
0027                  ( /dd/defs/os9defs):00072         F$VIRQ rmb 1 Install/Delete Virtual IRQ
0028                  ( /dd/defs/os9defs):00073         F$SRqMem rmb 1 System Memory Request
0029                  ( /dd/defs/os9defs):00074         F$SRtMem rmb 1 System Memory Return
002A                  ( /dd/defs/os9defs):00075         F$IRQ rmb 1 Enter IRQ Polling Table
002B                  ( /dd/defs/os9defs):00076         F$IOQu rmb 1 Enter I/O Queue
002C                  ( /dd/defs/os9defs):00077         F$AProc rmb 1 Enter Active Process Queue
002D                  ( /dd/defs/os9defs):00078         F$NProc rmb 1 Start Next Process
002E                  ( /dd/defs/os9defs):00079         F$VModul rmb 1 Validate Module
002F                  ( /dd/defs/os9defs):00080         F$Find64 rmb 1 Find Process/Path Descriptor
0030                  ( /dd/defs/os9defs):00081         F$All64 rmb 1 Allocate Process/Path Descriptor
0031                  ( /dd/defs/os9defs):00082         F$Ret64 rmb 1 Return Process/Path Descriptor
0032                  ( /dd/defs/os9defs):00083         F$SSvc rmb 1 Service Request Table Initialization
0033                  ( /dd/defs/os9defs):00084         F$IODel rmb 1 Delete I/O Module
0034                  ( /dd/defs/os9defs):00085         F$SLink rmb 1 System Link
0035                  ( /dd/defs/os9defs):00086         F$Boot rmb 1 Bootstrap System
0036                  ( /dd/defs/os9defs):00087         F$BtMem rmb 1 Bootstrap Memory Request
0037                  ( /dd/defs/os9defs):00088         F$GProcP rmb 1 Get Process ptr
0038                  ( /dd/defs/os9defs):00089         F$Move rmb 1 Move Data (low bound first)
0039                  ( /dd/defs/os9defs):00090         F$AllRAM rmb 1 Allocate RAM blocks
003A                  ( /dd/defs/os9defs):00091         F$AllImg rmb 1 Allocate Image RAM blocks
003B                  ( /dd/defs/os9defs):00092         F$DelImg rmb 1 Deallocate Image RAM blocks
003C                  ( /dd/defs/os9defs):00093         F$SetImg rmb 1 Set Process DAT Image
003D                  ( /dd/defs/os9defs):00094         F$FreeLB rmb 1 Get Free Low Block
003E                  ( /dd/defs/os9defs):00095         F$FreeHB rmb 1 Get Free High Block
003F                  ( /dd/defs/os9defs):00096         F$AllTsk rmb 1 Allocate Process Task number
0040                  ( /dd/defs/os9defs):00097         F$DelTsk rmb 1 Deallocate Process Task number
0041                  ( /dd/defs/os9defs):00098         F$SetTsk rmb 1 Set Process Task DAT registers
0042                  ( /dd/defs/os9defs):00099         F$ResTsk rmb 1 Reserve Task number
0043                  ( /dd/defs/os9defs):00100         F$RelTsk rmb 1 Release Task number
0044                  ( /dd/defs/os9defs):00101         F$DATLog rmb 1 Convert DAT Block/Offset to Logical
                      ( /dd/defs/os9defs):00102         ***** With non-contiguous modules this system call will become obsolete
0045                  ( /dd/defs/os9defs):00103         F$DATTmp rmb 1 Make temporary DAT image
                      ( /dd/defs/os9defs):00104         *****
0046                  ( /dd/defs/os9defs):00105         F$LDAXY rmb 1 Load A [X,[Y]]
0047                  ( /dd/defs/os9defs):00106         F$LDAXYP rmb 1 Load A [X+,[Y]]
0048                  ( /dd/defs/os9defs):00107         F$LDDDXY rmb 1 Load D [D+X,[Y]]
0049                  ( /dd/defs/os9defs):00108         F$LDABX rmb 1 Load A from 0,X in task B
004A                  ( /dd/defs/os9defs):00109         F$STABX rmb 1 Store A at 0,X in task B
004B                  ( /dd/defs/os9defs):00110         F$AllPrc rmb 1 Allocate Process Descriptor
004C                  ( /dd/defs/os9defs):00111         F$DelPrc rmb 1 Deallocate Process Descriptor
004D                  ( /dd/defs/os9defs):00112         F$ELink rmb 1 Link using Module Directory Entry
004E                  ( /dd/defs/os9defs):00113         F$FModul rmb 1 Find Module Directory Entry
004F                  ( /dd/defs/os9defs):00114         F$MapBlk rmb 1 Map Specific Block
0050                  ( /dd/defs/os9defs):00115         F$ClrBlk rmb 1 Clear Specific Block
0051                  ( /dd/defs/os9defs):00116         F$DelRAM rmb 1 Deallocate RAM blocks
0052                  ( /dd/defs/os9defs):00117         F$GCMDir rmb 1 Pack module directory
                      ( /dd/defs/os9defs):00118          pag
                      ( /dd/defs/os9defs):00119         ************************************************************
                      ( /dd/defs/os9defs):00120         *
                      ( /dd/defs/os9defs):00121         *     I/O Service Request Code Definitions
                      ( /dd/defs/os9defs):00122         *
                      ( /dd/defs/os9defs):00123          ORG $80
0080                  ( /dd/defs/os9defs):00124         I$Attach rmb 1 Attach I/O Device
0081                  ( /dd/defs/os9defs):00125         I$Detach rmb 1 Detach I/O Device
0082                  ( /dd/defs/os9defs):00126         I$Dup rmb 1 Duplicate Path
0083                  ( /dd/defs/os9defs):00127         I$Create rmb 1 Create New File
0084                  ( /dd/defs/os9defs):00128         I$Open rmb 1 Open Existing File
0085                  ( /dd/defs/os9defs):00129         I$MakDir rmb 1 Make Directory File
0086                  ( /dd/defs/os9defs):00130         I$ChgDir rmb 1 Change Default Directory
0087                  ( /dd/defs/os9defs):00131         I$Delete rmb 1 Delete File
0088                  ( /dd/defs/os9defs):00132         I$Seek rmb 1 Change Current Position
0089                  ( /dd/defs/os9defs):00133         I$Read rmb 1 Read Data
008A                  ( /dd/defs/os9defs):00134         I$Write rmb 1 Write Data
008B                  ( /dd/defs/os9defs):00135         I$ReadLn rmb 1 Read Line of ASCII Data
008C                  ( /dd/defs/os9defs):00136         I$WritLn rmb 1 Write Line of ASCII Data
008D                  ( /dd/defs/os9defs):00137         I$GetStt rmb 1 Get Path Status
008E                  ( /dd/defs/os9defs):00138         I$SetStt rmb 1 Set Path Status
008F                  ( /dd/defs/os9defs):00139         I$Close rmb 1 Close Path
0090                  ( /dd/defs/os9defs):00140         I$DeletX rmb 1 Delete from current exec dir
                      ( /dd/defs/os9defs):00141         
                      ( /dd/defs/os9defs):00142          pag
                      ( /dd/defs/os9defs):00143         ************************************************************
                      ( /dd/defs/os9defs):00144         *
                      ( /dd/defs/os9defs):00145         *     Signal Codes
                      ( /dd/defs/os9defs):00146         *
                      ( /dd/defs/os9defs):00147          ORG 0
0000                  ( /dd/defs/os9defs):00148         S$Kill rmb 1 Non-Interceptable Abort
0001                  ( /dd/defs/os9defs):00149         S$Wake rmb 1 Wake-up Sleeping Process
0002                  ( /dd/defs/os9defs):00150         S$Abort rmb 1 Keyboard Abort
0003                  ( /dd/defs/os9defs):00151         S$Intrpt rmb 1 Keyboard Interrupt
0004                  ( /dd/defs/os9defs):00152         S$Window rmb 1 Window Change
                      ( /dd/defs/os9defs):00153         
                      ( /dd/defs/os9defs):00154         
                      ( /dd/defs/os9defs):00155         ************************************************************
                      ( /dd/defs/os9defs):00156         *
                      ( /dd/defs/os9defs):00157         *     Status Codes for GetStat/PutStat
                      ( /dd/defs/os9defs):00158         *
                      ( /dd/defs/os9defs):00159          ORG 0
0000                  ( /dd/defs/os9defs):00160         SS.Opt rmb 1 Read/Write PD Options
0001                  ( /dd/defs/os9defs):00161         SS.Ready rmb 1 Check for Device Ready
0002                  ( /dd/defs/os9defs):00162         SS.Size rmb 1 Read/Write File Size
0003                  ( /dd/defs/os9defs):00163         SS.Reset rmb 1 Device Restore
0004                  ( /dd/defs/os9defs):00164         SS.WTrk rmb 1 Device Write Track
0005                  ( /dd/defs/os9defs):00165         SS.Pos rmb 1 Get File Current Position
0006                  ( /dd/defs/os9defs):00166         SS.EOF rmb 1 Test for End of File
0007                  ( /dd/defs/os9defs):00167         SS.Link rmb 1 Link to Status routines
0008                  ( /dd/defs/os9defs):00168         SS.ULink rmb 1 Unlink Status routines
0009                  ( /dd/defs/os9defs):00169         SS.Feed rmb 1 issue form feed
000A                  ( /dd/defs/os9defs):00170         SS.Frz rmb 1 Freeze DD. information
000B                  ( /dd/defs/os9defs):00171         SS.SPT rmb 1 Set DD.TKS to given value
000C                  ( /dd/defs/os9defs):00172         SS.SQD rmb 1 Sequence down hard disk
000D                  ( /dd/defs/os9defs):00173         SS.DCmd rmb 1 Send direct command to disk
000E                  ( /dd/defs/os9defs):00174         SS.DevNm rmb 1 Return Device name (32-bytes at [X])
000F                  ( /dd/defs/os9defs):00175         SS.FD rmb 1 Return File Descriptor (Y-bytes at [X])
0010                  ( /dd/defs/os9defs):00176         SS.Ticks rmb 1 Set Lockout honor duration
0011                  ( /dd/defs/os9defs):00177         SS.Lock rmb 1 Lock/Release record
0012                  ( /dd/defs/os9defs):00178         SS.DStat rmb 1 Return Display Status (CoCo)
0013                  ( /dd/defs/os9defs):00179         SS.Joy rmb 1 Return Joystick Value (CoCo)
0014                  ( /dd/defs/os9defs):00180         SS.BlkRd rmb 1 Block Read
0015                  ( /dd/defs/os9defs):00181         SS.BlkWr rmb 1 Block Write
0016                  ( /dd/defs/os9defs):00182         SS.Reten rmb 1 Retension cycle
0017                  ( /dd/defs/os9defs):00183         SS.WFM rmb 1 Write File Mark
0018                  ( /dd/defs/os9defs):00184         SS.RFM rmb 1 Read past File Mark
0019                  ( /dd/defs/os9defs):00185         SS.ELog rmb 1 Read Error Log
001A                  ( /dd/defs/os9defs):00186         SS.SSig rmb 1 Send signal on data ready
001B                  ( /dd/defs/os9defs):00187         SS.Relea rmb 1 Release device
001C                  ( /dd/defs/os9defs):00188         SS.AlfaS rmb 1 Return Alfa Display Status (CoCo)
001D                  ( /dd/defs/os9defs):00189         SS.Break rmb 1 Send break signal out acia
001E                  ( /dd/defs/os9defs):00190         SS.RsBit rmb 1 Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  ( /dd/defs/os9defs):00191          rmb 1 reserved
0020                  ( /dd/defs/os9defs):00192          rmb 4 reserve $20-$23 for Japanese version (Hoshi)
0024                  ( /dd/defs/os9defs):00193         SS.SetMF rmb 1 reserve $24 for Gimix G68 (Flex compatability?)
0025                  ( /dd/defs/os9defs):00194         SS.Cursr rmb 1 Cursor information for COCO
0026                  ( /dd/defs/os9defs):00195         SS.ScSiz rmb 1 Return screen size for COCO
0027                  ( /dd/defs/os9defs):00196         SS.KySns rmb 1 Getstat/Putstat for COCO keyboard
0028                  ( /dd/defs/os9defs):00197         SS.ComSt rmb 1 Getstat/Putstat for Baud/Parity
0029                  ( /dd/defs/os9defs):00198         SS.Open rmb 1 Putstat to tell driver a path was opened
002A                  ( /dd/defs/os9defs):00199         SS.Close rmb 1 Putstat to tell driver a path was closed
002B                  ( /dd/defs/os9defs):00200         SS.HngUp rmb 1 Putstat to tell driver to hangup phone
                      ( /dd/defs/os9defs):00201         * System Specific and User defined codes above $80
                      ( /dd/defs/os9defs):00202          org 80 
0050                  ( /dd/defs/os9defs):00203         SS.AAGBf rmb 1 Putstat to Allocate Additional Graphic Buffer
0051                  ( /dd/defs/os9defs):00204         SS.SLGBf rmb 1 Putstat to Select a different Graphic Buffer
                      ( /dd/defs/os9defs):00205         
                      ( /dd/defs/os9defs):00206          ttl Direct Page Definitions
                      ( /dd/defs/os9defs):00207          page
                      ( /dd/defs/os9defs):00208         ************************************************************
                      ( /dd/defs/os9defs):00209         *
                      ( /dd/defs/os9defs):00210         *     Direct Page Variable Definitions
                      ( /dd/defs/os9defs):00211         *
                      ( /dd/defs/os9defs):00212          org $20 reserve first 32 bytes
0020                  ( /dd/defs/os9defs):00213         D.FMBM rmb 4 Free memory bit map pointers
0024                  ( /dd/defs/os9defs):00214         D.MLIM rmb 2 Memory limit
0026                  ( /dd/defs/os9defs):00215         D.ModDir rmb 4 Module directory
002A                  ( /dd/defs/os9defs):00216         D.Init rmb 2 Rom base address
002C                  ( /dd/defs/os9defs):00217         D.SWI3 rmb 2 Swi3 vector
002E                  ( /dd/defs/os9defs):00218         D.SWI2 rmb 2 Swi2 vector
0030                  ( /dd/defs/os9defs):00219         D.FIRQ rmb 2 Firq vector
0032                  ( /dd/defs/os9defs):00220         D.IRQ rmb 2 Irq vector
0034                  ( /dd/defs/os9defs):00221         D.SWI rmb 2 Swi vector
0036                  ( /dd/defs/os9defs):00222         D.NMI rmb 2 Nmi vector
0038                  ( /dd/defs/os9defs):00223         D.SvcIRQ rmb 2 Interrupt service entry
003A                  ( /dd/defs/os9defs):00224         D.Poll rmb 2 Interrupt polling routine
003C                  ( /dd/defs/os9defs):00225         D.UsrIRQ rmb 2 User irq routine
003E                  ( /dd/defs/os9defs):00226         D.SysIRQ rmb 2 System irq routine
0040                  ( /dd/defs/os9defs):00227         D.UsrSvc rmb 2 User service request routine
0042                  ( /dd/defs/os9defs):00228         D.SysSvc rmb 2 System service request routine
0044                  ( /dd/defs/os9defs):00229         D.UsrDis rmb 2 User service request dispatch table
0046                  ( /dd/defs/os9defs):00230         D.SysDis rmb 2 System service reuest dispatch table
0048                  ( /dd/defs/os9defs):00231         D.Slice rmb 1 Process time slice count
0049                  ( /dd/defs/os9defs):00232         D.PrcDBT rmb 2 Process descriptor block address
004B                  ( /dd/defs/os9defs):00233         D.Proc rmb 2 Process descriptor address
004D                  ( /dd/defs/os9defs):00234         D.AProcQ rmb 2 Active process queue
004F                  ( /dd/defs/os9defs):00235         D.WProcQ rmb 2 Waiting process queue
0051                  ( /dd/defs/os9defs):00236         D.SProcQ rmb 2 Sleeping process queue
     0053             ( /dd/defs/os9defs):00237         D.Time equ . Time
0053                  ( /dd/defs/os9defs):00238         D.Year rmb 1
0054                  ( /dd/defs/os9defs):00239         D.Month rmb 1
0055                  ( /dd/defs/os9defs):00240         D.Day rmb 1
0056                  ( /dd/defs/os9defs):00241         D.Hour rmb 1
0057                  ( /dd/defs/os9defs):00242         D.Min rmb 1
0058                  ( /dd/defs/os9defs):00243         D.Sec rmb 1
0059                  ( /dd/defs/os9defs):00244         D.Tick rmb 1
005A                  ( /dd/defs/os9defs):00245         D.TSec rmb 1 Ticks / second
005B                  ( /dd/defs/os9defs):00246         D.TSlice rmb 1 Ticks / time-slice
005C                  ( /dd/defs/os9defs):00247         D.IOML rmb 2 I/O mgr free memory low bound
005E                  ( /dd/defs/os9defs):00248         D.IOMH rmb 2 I/O mgr free memory hi  bound
0060                  ( /dd/defs/os9defs):00249         D.DevTbl rmb 2 Device driver table addr
0062                  ( /dd/defs/os9defs):00250         D.PolTbl rmb 2 Irq polling table addr
0064                  ( /dd/defs/os9defs):00251         D.PthDBT rmb 2 Path descriptor block table addr
0066                  ( /dd/defs/os9defs):00252         D.BTLO rmb 2 Bootstrap low address
0068                  ( /dd/defs/os9defs):00253         D.BTHI rmb 2 Bootstrap hi address
006A                  ( /dd/defs/os9defs):00254         D.DMAReq rmb 1 DMA in use flag
                      ( /dd/defs/os9defs):00255         
006B                  ( /dd/defs/os9defs):00256         D.AltIRQ rmb 2 Alternate IRQ vector (CC)
006D                  ( /dd/defs/os9defs):00257         D.KbdSta rmb 2 Keyboard scanner static storage (CC)
006F                  ( /dd/defs/os9defs):00258         D.DskTmr rmb 2 Disk Motor Timer (CC)
0071                  ( /dd/defs/os9defs):00259         D.CBStrt rmb 16 reserved for CC warmstart ($71)
0081                  ( /dd/defs/os9defs):00260         D.Clock rmb 2 Address of Clock Tick Routine (CC)
                      ( /dd/defs/os9defs):00261         
0083                  ( /dd/defs/os9defs):00262         D.Boot rmb 1 Bootstrap attempted flag
0084                  ( /dd/defs/os9defs):00263         D.URtoSs rmb 2 address of user to system routine (VIRQ)
0086                  ( /dd/defs/os9defs):00264         D.CLTB rmb 2 Pointer to clock interrupt table (VIRQ)
                      ( /dd/defs/os9defs):00265         
                      ( /dd/defs/os9defs):00266         * TABLE SIZES
                      ( /dd/defs/os9defs):00267         
     0020             ( /dd/defs/os9defs):00268         BMAPSZ equ 32 BIT MAP SIZE
     0002             ( /dd/defs/os9defs):00269         SVCTNM equ 2 NUMBER OF SERVICE REQUEST TABLES
     006E             ( /dd/defs/os9defs):00270         SVCTSZ equ (256-BMAPSZ)/SVCTNM-2 SERVICE REQUEST TABLE SIZE
                      ( /dd/defs/os9defs):00271         
                      ( /dd/defs/os9defs):00272         
                      ( /dd/defs/os9defs):00273          ttl Structure Formats
                      ( /dd/defs/os9defs):00274          pag
                      ( /dd/defs/os9defs):00275         ************************************************************
                      ( /dd/defs/os9defs):00276         *
                      ( /dd/defs/os9defs):00277         *     Module Definitions
                      ( /dd/defs/os9defs):00278         *
                      ( /dd/defs/os9defs):00279         *     Universal Module Offsets
                      ( /dd/defs/os9defs):00280         *
                      ( /dd/defs/os9defs):00281          ORG 0
0000                  ( /dd/defs/os9defs):00282         M$ID rmb 2 ID Code
0002                  ( /dd/defs/os9defs):00283         M$Size rmb 2 Module Size
0004                  ( /dd/defs/os9defs):00284         M$Name rmb 2 Module Name
0006                  ( /dd/defs/os9defs):00285         M$Type rmb 1 Type / Language
0007                  ( /dd/defs/os9defs):00286         M$Revs rmb 1 Attributes / Revision Level
0008                  ( /dd/defs/os9defs):00287         M$Parity rmb 1 Header Parity
     0009             ( /dd/defs/os9defs):00288         M$IDSize equ . Module ID Size
                      ( /dd/defs/os9defs):00289         *
                      ( /dd/defs/os9defs):00290         *     Type-Dependent Module Offsets
                      ( /dd/defs/os9defs):00291         *
                      ( /dd/defs/os9defs):00292         *   System, File Manager, Device Driver, Program Module
                      ( /dd/defs/os9defs):00293         *
0009                  ( /dd/defs/os9defs):00294         M$Exec rmb 2 Execution Entry Offset
                      ( /dd/defs/os9defs):00295         *
                      ( /dd/defs/os9defs):00296         *   Device Driver, Program Module
                      ( /dd/defs/os9defs):00297         *
000B                  ( /dd/defs/os9defs):00298         M$Mem rmb 2 Stack Requirement
                      ( /dd/defs/os9defs):00299         *
                      ( /dd/defs/os9defs):00300         *   Device Driver, Device Descriptor Module
                      ( /dd/defs/os9defs):00301         *
000D                  ( /dd/defs/os9defs):00302         M$Mode rmb 1 Device Driver Mode Capabilities
                      ( /dd/defs/os9defs):00303         *
                      ( /dd/defs/os9defs):00304         *   Device Descriptor Module
                      ( /dd/defs/os9defs):00305         *
                      ( /dd/defs/os9defs):00306          ORG M$IDSize
0009                  ( /dd/defs/os9defs):00307         M$FMgr rmb 2 File Manager Name Offset
000B                  ( /dd/defs/os9defs):00308         M$PDev rmb 2 Device Driver Name Offset
000D                  ( /dd/defs/os9defs):00309          rmb 1 M$Mode (defined above)
000E                  ( /dd/defs/os9defs):00310         M$Port rmb 3 Port Address
0011                  ( /dd/defs/os9defs):00311         M$Opt rmb 1 Device Default Options
0012                  ( /dd/defs/os9defs):00312         M$DTyp rmb 1 Device Type
                      ( /dd/defs/os9defs):00313         *
                      ( /dd/defs/os9defs):00314         *   Configuration Module Entry Offsets
                      ( /dd/defs/os9defs):00315         *
                      ( /dd/defs/os9defs):00316          ORG M$IDSize
0009                  ( /dd/defs/os9defs):00317         MaxMem rmb 3 Maximum Free Memory
000C                  ( /dd/defs/os9defs):00318         PollCnt rmb 1 Entries in Interrupt Polling Table
000D                  ( /dd/defs/os9defs):00319         DevCnt rmb 1 Entries in Device Table
000E                  ( /dd/defs/os9defs):00320         InitStr rmb 2 Initial Module Name
0010                  ( /dd/defs/os9defs):00321         SysStr rmb 2 System Device Name
0012                  ( /dd/defs/os9defs):00322         StdStr rmb 2 Standard I/O Pathlist
0014                  ( /dd/defs/os9defs):00323         BootStr rmb 2 Bootstrap Module name
0016                  ( /dd/defs/os9defs):00324         ProtFlag rmb 1 Write protect enable flag
                      ( /dd/defs/os9defs):00325          pag
                      ( /dd/defs/os9defs):00326         ************************************************************
                      ( /dd/defs/os9defs):00327         *
                      ( /dd/defs/os9defs):00328         *     Module Field Definitions
                      ( /dd/defs/os9defs):00329         *
                      ( /dd/defs/os9defs):00330         *   ID Field
                      ( /dd/defs/os9defs):00331         *
     0087             ( /dd/defs/os9defs):00332         M$ID1 equ $87 Module ID code byte one
     00CD             ( /dd/defs/os9defs):00333         M$ID2 equ $CD Module ID code byte two
     87CD             ( /dd/defs/os9defs):00334         M$ID12 equ M$ID1*256+M$ID2
                      ( /dd/defs/os9defs):00335         *
                      ( /dd/defs/os9defs):00336         *   Module Type / Language byte
                      ( /dd/defs/os9defs):00337         *
                      ( /dd/defs/os9defs):00338         *   Field Masks
                      ( /dd/defs/os9defs):00339         *
     00F0             ( /dd/defs/os9defs):00340         TypeMask equ %11110000 Type Field
     000F             ( /dd/defs/os9defs):00341         LangMask equ %00001111 Language Field
                      ( /dd/defs/os9defs):00342         *
                      ( /dd/defs/os9defs):00343         *   Type Values
                      ( /dd/defs/os9defs):00344         *
     00F0             ( /dd/defs/os9defs):00345         Devic equ $F0 Device Descriptor Module
     00E0             ( /dd/defs/os9defs):00346         Drivr equ $E0 Physical Device Driver
     00D0             ( /dd/defs/os9defs):00347         FlMgr equ $D0 File Manager
     00C0             ( /dd/defs/os9defs):00348         Systm equ $C0 System Module
     0040             ( /dd/defs/os9defs):00349         Data equ $40 Data Module
     0030             ( /dd/defs/os9defs):00350         Multi equ $30 Multi-Module
     0020             ( /dd/defs/os9defs):00351         Sbrtn equ $20 Subroutine Module
     0010             ( /dd/defs/os9defs):00352         Prgrm equ $10 Program Module
                      ( /dd/defs/os9defs):00353         *
                      ( /dd/defs/os9defs):00354         *   Language Values
                      ( /dd/defs/os9defs):00355         *
     0001             ( /dd/defs/os9defs):00356         Objct equ 1 6809 Object Code Module
     0002             ( /dd/defs/os9defs):00357         ICode equ 2 Basic09 I-code
     0003             ( /dd/defs/os9defs):00358         PCode equ 3 Pascal P-code
     0004             ( /dd/defs/os9defs):00359         CCode equ 4 C I-code
     0005             ( /dd/defs/os9defs):00360         CblCode equ 5 Cobol I-code
     0006             ( /dd/defs/os9defs):00361         FrtnCode equ 6 Fortran I-code
                      ( /dd/defs/os9defs):00362         *
                      ( /dd/defs/os9defs):00363         *   Module Attributes / Revision byte
                      ( /dd/defs/os9defs):00364         *
                      ( /dd/defs/os9defs):00365         *   Field Masks
                      ( /dd/defs/os9defs):00366         *
     00F0             ( /dd/defs/os9defs):00367         AttrMask equ %11110000 Attributes Field
     000F             ( /dd/defs/os9defs):00368         RevsMask equ %00001111 Revision Level Field
                      ( /dd/defs/os9defs):00369         *
                      ( /dd/defs/os9defs):00370         *   Attribute Flags
                      ( /dd/defs/os9defs):00371         *
     0080             ( /dd/defs/os9defs):00372         ReEnt equ %10000000 Re-Entrant Module
     0040             ( /dd/defs/os9defs):00373         Modprot equ %01000000 Gimix Module protection bit
                      ( /dd/defs/os9defs):00374         *                     0=protected, 1=write enable
                      ( /dd/defs/os9defs):00375         
                      ( /dd/defs/os9defs):00376         *
                      ( /dd/defs/os9defs):00377         *   Device Type Values
                      ( /dd/defs/os9defs):00378         *
     0000             ( /dd/defs/os9defs):00379         DT.SCF equ 0 Sequential Character File Type
     0001             ( /dd/defs/os9defs):00380         DT.RBF equ 1 Random Block File Type
     0002             ( /dd/defs/os9defs):00381         DT.Pipe equ 2 Pipe File Type
     0003             ( /dd/defs/os9defs):00382         DT.NFM equ 3 Network File Manager Type
                      ( /dd/defs/os9defs):00383         *
                      ( /dd/defs/os9defs):00384         *   CRC Result Constant
                      ( /dd/defs/os9defs):00385         *
     0080             ( /dd/defs/os9defs):00386         CRCCon1 equ $80
     0FE3             ( /dd/defs/os9defs):00387         CRCCon23 equ $0FE3
                      ( /dd/defs/os9defs):00388          page
                      ( /dd/defs/os9defs):00389         ************************************************************
                      ( /dd/defs/os9defs):00390         *
                      ( /dd/defs/os9defs):00391         *     Process Descriptor Definitions
                      ( /dd/defs/os9defs):00392         *
     000C             ( /dd/defs/os9defs):00393         DefIOSiz equ 12
     0010             ( /dd/defs/os9defs):00394         NumPaths equ 16 Number of Local Paths
                      ( /dd/defs/os9defs):00395         
                      ( /dd/defs/os9defs):00396          ORG 0
0000                  ( /dd/defs/os9defs):00397         P$ID rmb 1 Process ID
0001                  ( /dd/defs/os9defs):00398         P$PID rmb 1 Parent's ID
0002                  ( /dd/defs/os9defs):00399         P$SID rmb 1 Sibling's ID
0003                  ( /dd/defs/os9defs):00400         P$CID rmb 1 Child's ID
0004                  ( /dd/defs/os9defs):00401         P$SP rmb 2 Stack ptr
0006                  ( /dd/defs/os9defs):00402         P$CHAP rmb 1 process chapter number
0007                  ( /dd/defs/os9defs):00403         P$ADDR rmb 1 user address beginning page number
0008                  ( /dd/defs/os9defs):00404         P$PagCnt rmb 1 Memory Page Count
0009                  ( /dd/defs/os9defs):00405         P$User rmb 2 User Index
000B                  ( /dd/defs/os9defs):00406         P$Prior rmb 1 Priority
000C                  ( /dd/defs/os9defs):00407         P$Age rmb 1 Age
000D                  ( /dd/defs/os9defs):00408         P$State rmb 1 Status
000E                  ( /dd/defs/os9defs):00409         P$Queue rmb 2 Queue Link (Process ptr)
0010                  ( /dd/defs/os9defs):00410         P$IOQP rmb 1 Previous I/O Queue Link (Process ID)
0011                  ( /dd/defs/os9defs):00411         P$IOQN rmb 1 Next     I/O Queue Link (Process ID)
0012                  ( /dd/defs/os9defs):00412         P$PModul rmb 2 Primary Module
0014                  ( /dd/defs/os9defs):00413         P$SWI rmb 2 SWI Entry Point
0016                  ( /dd/defs/os9defs):00414         P$SWI2 rmb 2 SWI2 Entry Point
0018                  ( /dd/defs/os9defs):00415         P$SWI3 rmb 2 SWI3 Entry Point
001A                  ( /dd/defs/os9defs):00416         P$DIO rmb DefIOSiz default I/O ptrs
0026                  ( /dd/defs/os9defs):00417         P$PATH rmb NumPaths I/O path table
0036                  ( /dd/defs/os9defs):00418         P$Signal rmb 1 Signal Code
0037                  ( /dd/defs/os9defs):00419         P$SigVec rmb 2 Signal Intercept Vector
0039                  ( /dd/defs/os9defs):00420         P$SigDat rmb 2 Signal Intercept Data Address
003B                  ( /dd/defs/os9defs):00421         P$NIO rmb 4 additional dio pointers for net
003F                  ( /dd/defs/os9defs):00422          rmb $40-. unused
     0040             ( /dd/defs/os9defs):00423         P$Size equ . Size of Process Descriptor
                      ( /dd/defs/os9defs):00424         
                      ( /dd/defs/os9defs):00425         ************************
                      ( /dd/defs/os9defs):00426         *   Process State Flags
                      ( /dd/defs/os9defs):00427         *
     0080             ( /dd/defs/os9defs):00428         SysState equ %10000000
     0040             ( /dd/defs/os9defs):00429         TimSleep equ %01000000
     0020             ( /dd/defs/os9defs):00430         TimOut equ %00100000
     0010             ( /dd/defs/os9defs):00431         ImgChg equ %00010000
     0002             ( /dd/defs/os9defs):00432         Condem equ %00000010
     0001             ( /dd/defs/os9defs):00433         Dead equ %00000001
                      ( /dd/defs/os9defs):00434          page
                      ( /dd/defs/os9defs):00435         ************************************************************
                      ( /dd/defs/os9defs):00436         *
                      ( /dd/defs/os9defs):00437         *     Path Descriptor Offsets
                      ( /dd/defs/os9defs):00438         *
                      ( /dd/defs/os9defs):00439          ORG 0
0000                  ( /dd/defs/os9defs):00440         PD.PD rmb 1 Path Number
0001                  ( /dd/defs/os9defs):00441         PD.MOD rmb 1 Mode (Read/Write/Update)
0002                  ( /dd/defs/os9defs):00442         PD.CNT rmb 1 Number of Open Images
0003                  ( /dd/defs/os9defs):00443         PD.DEV rmb 2 Device Table Entry Address
0005                  ( /dd/defs/os9defs):00444         PD.CPR rmb 1 Current Process
0006                  ( /dd/defs/os9defs):00445         PD.RGS rmb 2 Caller's Register Stack
0008                  ( /dd/defs/os9defs):00446         PD.BUF rmb 2 Buffer Address
000A                  ( /dd/defs/os9defs):00447         PD.FST rmb 32-. File Manager's Storage
     0020             ( /dd/defs/os9defs):00448         PD.OPT equ . PD GetSts(0) Options
0020                  ( /dd/defs/os9defs):00449         PD.DTP rmb 1 Device Type
0021                  ( /dd/defs/os9defs):00450          rmb 64-. Path options
     0040             ( /dd/defs/os9defs):00451         PDSIZE equ .
                      ( /dd/defs/os9defs):00452         
                      ( /dd/defs/os9defs):00453         
                      ( /dd/defs/os9defs):00454         *
                      ( /dd/defs/os9defs):00455         *  Pathlist Special Symbols
                      ( /dd/defs/os9defs):00456         *
     002F             ( /dd/defs/os9defs):00457         PDELIM equ '/ Pathlist Name Separator
     002E             ( /dd/defs/os9defs):00458         PDIR equ '. Directory
     0040             ( /dd/defs/os9defs):00459         PENTIR equ '@ Entire Device
                      ( /dd/defs/os9defs):00460         
                      ( /dd/defs/os9defs):00461         
                      ( /dd/defs/os9defs):00462         ************************************************************
                      ( /dd/defs/os9defs):00463         *
                      ( /dd/defs/os9defs):00464         *      File Access Modes
                      ( /dd/defs/os9defs):00465         *
     0001             ( /dd/defs/os9defs):00466         READ. equ %00000001
     0002             ( /dd/defs/os9defs):00467         WRITE. equ %00000010
     0003             ( /dd/defs/os9defs):00468         UPDAT. equ READ.+WRITE.
     0004             ( /dd/defs/os9defs):00469         EXEC. equ %00000100
     0008             ( /dd/defs/os9defs):00470         PREAD. equ %00001000
     0010             ( /dd/defs/os9defs):00471         PWRIT. equ %00010000
     0020             ( /dd/defs/os9defs):00472         PEXEC. equ %00100000
     0040             ( /dd/defs/os9defs):00473         SHARE. equ %01000000
     0080             ( /dd/defs/os9defs):00474         DIR. equ %10000000
                      ( /dd/defs/os9defs):00475         
                      ( /dd/defs/os9defs):00476          page
                      ( /dd/defs/os9defs):00477         ************************************************************
                      ( /dd/defs/os9defs):00478         *
                      ( /dd/defs/os9defs):00479         *     File Manager Entry Offsets
                      ( /dd/defs/os9defs):00480         *
                      ( /dd/defs/os9defs):00481          ORG 0
0000                  ( /dd/defs/os9defs):00482         FMCREA rmb 3 Create (Open New) File
0003                  ( /dd/defs/os9defs):00483         FMOPEN rmb 3 Open File
0006                  ( /dd/defs/os9defs):00484         FMMDIR rmb 3 Make Directory
0009                  ( /dd/defs/os9defs):00485         FMCDIR rmb 3 Change Directory
000C                  ( /dd/defs/os9defs):00486         FMDLET rmb 3 Delete File
000F                  ( /dd/defs/os9defs):00487         FMSEEK rmb 3 Position File
0012                  ( /dd/defs/os9defs):00488         FMREAD rmb 3 Read from File
0015                  ( /dd/defs/os9defs):00489         FMWRIT rmb 3 Write to File
0018                  ( /dd/defs/os9defs):00490         FMGSTA rmb 3 Get File Status
001B                  ( /dd/defs/os9defs):00491         FMSSTA rmb 3 Set File Status
001E                  ( /dd/defs/os9defs):00492         FMCLOS rmb 3 Close File
                      ( /dd/defs/os9defs):00493         
                      ( /dd/defs/os9defs):00494         
                      ( /dd/defs/os9defs):00495         
                      ( /dd/defs/os9defs):00496         ************************************************************
                      ( /dd/defs/os9defs):00497         *
                      ( /dd/defs/os9defs):00498         *     Device Driver Entry Offsets
                      ( /dd/defs/os9defs):00499         *
                      ( /dd/defs/os9defs):00500          ORG 0
0000                  ( /dd/defs/os9defs):00501         D$INIT rmb 3 Device Initialization
0003                  ( /dd/defs/os9defs):00502         D$READ rmb 3 Read from Device
0006                  ( /dd/defs/os9defs):00503         D$WRIT rmb 3 Write to Device
0009                  ( /dd/defs/os9defs):00504         D$GSTA rmb 3 Get Device Status
000C                  ( /dd/defs/os9defs):00505         D$PSTA rmb 3 Put Device Status
000F                  ( /dd/defs/os9defs):00506         D$TERM rmb 3 Device Termination
                      ( /dd/defs/os9defs):00507          page
                      ( /dd/defs/os9defs):00508         ************************************************************
                      ( /dd/defs/os9defs):00509         *
                      ( /dd/defs/os9defs):00510         *     Device Table Format
                      ( /dd/defs/os9defs):00511         *
                      ( /dd/defs/os9defs):00512          ORG 0
0000                  ( /dd/defs/os9defs):00513         V$DRIV rmb 2 Device Driver module
0002                  ( /dd/defs/os9defs):00514         V$STAT rmb 2 Device Driver Static storage
0004                  ( /dd/defs/os9defs):00515         V$DESC rmb 2 Device Descriptor module
0006                  ( /dd/defs/os9defs):00516         V$FMGR rmb 2 File Manager module
0008                  ( /dd/defs/os9defs):00517         V$USRS rmb 1 use count
     0009             ( /dd/defs/os9defs):00518         DEVSIZ equ .
                      ( /dd/defs/os9defs):00519         
                      ( /dd/defs/os9defs):00520         
                      ( /dd/defs/os9defs):00521         
                      ( /dd/defs/os9defs):00522         ************************************************************
                      ( /dd/defs/os9defs):00523         *
                      ( /dd/defs/os9defs):00524         *     Device Static Storage Offsets
                      ( /dd/defs/os9defs):00525         *
                      ( /dd/defs/os9defs):00526          ORG 0
0000                  ( /dd/defs/os9defs):00527         V.PAGE rmb 1 Port Extended Address
0001                  ( /dd/defs/os9defs):00528         V.PORT rmb 2 Device 'Base' Port Address
0003                  ( /dd/defs/os9defs):00529         V.LPRC rmb 1 Last Active Process ID
0004                  ( /dd/defs/os9defs):00530         V.BUSY rmb 1 Active Process ID (0=UnBusy)
0005                  ( /dd/defs/os9defs):00531         V.WAKE rmb 1 Active PD if Driver MUST Wake-up
     0006             ( /dd/defs/os9defs):00532         V.USER equ . Driver Allocation Origin
                      ( /dd/defs/os9defs):00533         
                      ( /dd/defs/os9defs):00534         
                      ( /dd/defs/os9defs):00535         
                      ( /dd/defs/os9defs):00536         ************************************************************
                      ( /dd/defs/os9defs):00537         *
                      ( /dd/defs/os9defs):00538         *     Interrupt Polling Table Format
                      ( /dd/defs/os9defs):00539         *
                      ( /dd/defs/os9defs):00540          ORG 0
0000                  ( /dd/defs/os9defs):00541         Q$POLL rmb 2 Absolute Polling Address
0002                  ( /dd/defs/os9defs):00542         Q$FLIP rmb 1 Flip (EOR) Byte ..normally Zero
0003                  ( /dd/defs/os9defs):00543         Q$MASK rmb 1 Polling Mask (after Flip)
0004                  ( /dd/defs/os9defs):00544         Q$SERV rmb 2 Absolute Service routine Address
0006                  ( /dd/defs/os9defs):00545         Q$STAT rmb 2 Static Storage Address
0008                  ( /dd/defs/os9defs):00546         Q$PRTY rmb 1 Priority (Low Numbers=Top Priority)
     0009             ( /dd/defs/os9defs):00547         POLSIZ equ .
                      ( /dd/defs/os9defs):00548         
                      ( /dd/defs/os9defs):00549         
                      ( /dd/defs/os9defs):00550         
                      ( /dd/defs/os9defs):00551         ***********************************************************
                      ( /dd/defs/os9defs):00552         *
                      ( /dd/defs/os9defs):00553         *     VIRQ packet format
                      ( /dd/defs/os9defs):00554         *
                      ( /dd/defs/os9defs):00555          ORG 0
0000                  ( /dd/defs/os9defs):00556         Vi.Cnt rmb 2 count down counter
0002                  ( /dd/defs/os9defs):00557         Vi.Rst rmb 2 reset value for counter
0004                  ( /dd/defs/os9defs):00558         Vi.Stat rmb 1 status byte
                      ( /dd/defs/os9defs):00559         
     0001             ( /dd/defs/os9defs):00560         Vi.IFlag equ %00000001 status byte virq flag
                      ( /dd/defs/os9defs):00561         
                      ( /dd/defs/os9defs):00562         
                      ( /dd/defs/os9defs):00563          pag
                      ( /dd/defs/os9defs):00564         ************************************************************
                      ( /dd/defs/os9defs):00565         *
                      ( /dd/defs/os9defs):00566         *   Machine Characteristics Definitions
                      ( /dd/defs/os9defs):00567         *
     0000             ( /dd/defs/os9defs):00568         R$CC equ 0 Condition Codes register
     0001             ( /dd/defs/os9defs):00569         R$A equ 1 A Accumulator
     0002             ( /dd/defs/os9defs):00570         R$B equ 2 B Accumulator
     0001             ( /dd/defs/os9defs):00571         R$D equ R$A Combined A:B Accumulator
     0003             ( /dd/defs/os9defs):00572         R$DP equ 3 Direct Page register
     0004             ( /dd/defs/os9defs):00573         R$X equ 4 X Index register
     0006             ( /dd/defs/os9defs):00574         R$Y equ 6 Y Index register
     0008             ( /dd/defs/os9defs):00575         R$U equ 8 User Stack register
     000A             ( /dd/defs/os9defs):00576         R$PC equ 10 Program Counter register
     000C             ( /dd/defs/os9defs):00577         R$Size equ 12 Total register package size
                      ( /dd/defs/os9defs):00578         
     0080             ( /dd/defs/os9defs):00579         Entire equ %10000000 Full Register Stack flag
     0040             ( /dd/defs/os9defs):00580         FIRQMask equ %01000000 Fast-Interrupt Mask bit
     0020             ( /dd/defs/os9defs):00581         HalfCrry equ %00100000 Half Carry flag
     0010             ( /dd/defs/os9defs):00582         IRQMask equ %00010000 Interrupt Mask bit
     0008             ( /dd/defs/os9defs):00583         Negative equ %00001000 Negative flag
     0004             ( /dd/defs/os9defs):00584         Zero equ %00000100 Zero flag
     0002             ( /dd/defs/os9defs):00585         TwosOvfl equ %00000010 Two's Comp Overflow flag
     0001             ( /dd/defs/os9defs):00586         Carry equ %00000001 Carry bit
     0050             ( /dd/defs/os9defs):00587         IntMasks equ IRQMask+FIRQMask
     0080             ( /dd/defs/os9defs):00588         Sign equ %10000000 sign bit
                      ( /dd/defs/os9defs):00589         
     0001             ( /dd/defs/os9defs):00590         true equ 1 useful name
     0000             ( /dd/defs/os9defs):00591         false equ 0 useful name
                      ( /dd/defs/os9defs):00592         
                      ( /dd/defs/os9defs):00593         
                      ( /dd/defs/os9defs):00594          ttl Error Code Definitions
                      ( /dd/defs/os9defs):00595           pag
                      ( /dd/defs/os9defs):00596         ************************************************************
                      ( /dd/defs/os9defs):00597         *
                      ( /dd/defs/os9defs):00598         *     Error Code Definitions
                      ( /dd/defs/os9defs):00599         *
                      ( /dd/defs/os9defs):00600          org 200
00C8                  ( /dd/defs/os9defs):00601         E$PthFul rmb 1 Path Table full
00C9                  ( /dd/defs/os9defs):00602         E$BPNum rmb 1 Bad Path Number
00CA                  ( /dd/defs/os9defs):00603         E$Poll rmb 1 Polling Table Full
00CB                  ( /dd/defs/os9defs):00604         E$BMode rmb 1 Bad Mode
00CC                  ( /dd/defs/os9defs):00605         E$DevOvf rmb 1 Device Table Overflow
00CD                  ( /dd/defs/os9defs):00606         E$BMID rmb 1 Bad Module ID
00CE                  ( /dd/defs/os9defs):00607         E$DirFul rmb 1 Module Directory Full
00CF                  ( /dd/defs/os9defs):00608         E$MemFul rmb 1 Process Memory Full
00D0                  ( /dd/defs/os9defs):00609         E$UnkSvc rmb 1 Unknown Service Code
00D1                  ( /dd/defs/os9defs):00610         E$ModBsy rmb 1 Module Busy
00D2                  ( /dd/defs/os9defs):00611         E$BPAddr rmb 1 Bad Page Address
00D3                  ( /dd/defs/os9defs):00612         E$EOF rmb 1 End of File
00D4                  ( /dd/defs/os9defs):00613          rmb 1
00D5                  ( /dd/defs/os9defs):00614         E$NES rmb 1 Non-Existing Segment
00D6                  ( /dd/defs/os9defs):00615         E$FNA rmb 1 File Not Accesible
00D7                  ( /dd/defs/os9defs):00616         E$BPNam rmb 1 Bad Path Name
00D8                  ( /dd/defs/os9defs):00617         E$PNNF rmb 1 Path Name Not Found
00D9                  ( /dd/defs/os9defs):00618         E$SLF rmb 1 Segment List Full
00DA                  ( /dd/defs/os9defs):00619         E$CEF rmb 1 Creating Existing File
00DB                  ( /dd/defs/os9defs):00620         E$IBA rmb 1 Illegal Block Address
00DC                  ( /dd/defs/os9defs):00621         E$HangUp rmb 1 Carrier Detect Lost
00DD                  ( /dd/defs/os9defs):00622         E$MNF rmb 1 Module Not Found
00DE                  ( /dd/defs/os9defs):00623          rmb 1
00DF                  ( /dd/defs/os9defs):00624         E$DelSP rmb 1 Deleting Stack Pointer memory
00E0                  ( /dd/defs/os9defs):00625         E$IPrcID rmb 1 Illegal Process ID
00E1                  ( /dd/defs/os9defs):00626          rmb 1
00E2                  ( /dd/defs/os9defs):00627         E$NoChld rmb 1 No Children
00E3                  ( /dd/defs/os9defs):00628         E$ISWI rmb 1 Illegal SWI code
00E4                  ( /dd/defs/os9defs):00629         E$PrcAbt rmb 1 Process Aborted
00E5                  ( /dd/defs/os9defs):00630         E$PrcFul rmb 1 Process Table Full
00E6                  ( /dd/defs/os9defs):00631         E$IForkP rmb 1 Illegal Fork Parameter
00E7                  ( /dd/defs/os9defs):00632         E$KwnMod rmb 1 Known Module
00E8                  ( /dd/defs/os9defs):00633         E$BMCRC rmb 1 Bad Module CRC
00E9                  ( /dd/defs/os9defs):00634         E$USigP rmb 1 Unprocessed Signal Pending
00EA                  ( /dd/defs/os9defs):00635         E$NEMod rmb 1 Non Existing Module
                      ( /dd/defs/os9defs):00636         
00EB                  ( /dd/defs/os9defs):00637         E$BNam rmb 1 Bad Name
00EC                  ( /dd/defs/os9defs):00638         E$BMHP rmb 1 (bad module header parity)
00ED                  ( /dd/defs/os9defs):00639         E$NoRam rmb 1 No Ram Available
00EE                  ( /dd/defs/os9defs):00640         E$BPrcID rmb 1 Bad Process ID
00EF                  ( /dd/defs/os9defs):00641         E$NoTask rmb 1 No available Task number
                      ( /dd/defs/os9defs):00642         
                      ( /dd/defs/os9defs):00643          rmb $F0-. reserved
                      ( /dd/defs/os9defs):00644         
00F0                  ( /dd/defs/os9defs):00645         E$Unit rmb 1 Illegal Unit (drive)
00F1                  ( /dd/defs/os9defs):00646         E$Sect rmb 1 Bad SECTor number
00F2                  ( /dd/defs/os9defs):00647         E$WP   rmb 1 Write Protect
00F3                  ( /dd/defs/os9defs):00648         E$CRC  rmb 1 Bad Check Sum
00F4                  ( /dd/defs/os9defs):00649         E$Read rmb 1 Read Error
00F5                  ( /dd/defs/os9defs):00650         E$Write rmb 1 Write Error
00F6                  ( /dd/defs/os9defs):00651         E$NotRdy rmb 1 Device Not Ready
00F7                  ( /dd/defs/os9defs):00652         E$Seek rmb 1 Seek Error
00F8                  ( /dd/defs/os9defs):00653         E$Full rmb 1 Media Full
00F9                  ( /dd/defs/os9defs):00654         E$BTyp rmb 1 Bad Type (incompatable) media
00FA                  ( /dd/defs/os9defs):00655         E$DevBsy rmb 1 Device Busy
00FB                  ( /dd/defs/os9defs):00656         E$DIDC rmb 1 Disk ID Change
00FC                  ( /dd/defs/os9defs):00657         E$Lock rmb 1 Record is busy (locked out)
00FD                  ( /dd/defs/os9defs):00658         E$Share rmb 1 Non-sharable file busy
00FE                  ( /dd/defs/os9defs):00659         E$DeadLk rmb 1 I/O Deadlock error
                      ( /dd/defs/os9defs):00660         
                      ( /dd/defs/os9defs):00661          opt l
                      ( /dd/defs/os9defs):00662         
                      (         defsfile):00014          use /dd/defs/rbfdefs
                      ( /dd/defs/rbfdefs):00001          opt -l
                      ( /dd/defs/rbfdefs):00002          ttl Random Block File Manager Definitions
                      ( /dd/defs/rbfdefs):00003         
                      ( /dd/defs/rbfdefs):00004         ***************
                      ( /dd/defs/rbfdefs):00005         * Modification History
                      ( /dd/defs/rbfdefs):00006         
                      ( /dd/defs/rbfdefs):00007         * 82/07/13   PD.Exten added to path descriptor              rfd
                      ( /dd/defs/rbfdefs):00008         * 82/07/13   PE entries defined                             rfd
                      ( /dd/defs/rbfdefs):00009         * 82/07/15   V.FileHd inserted in drive static              rfd
                      ( /dd/defs/rbfdefs):00010         * 82/09/10   Level One/ Level two cond added                WGP
                      ( /dd/defs/rbfdefs):00011         * 82/09/17   Record Lock cond added                         WGP
                      ( /dd/defs/rbfdefs):00012         * 82/09/17   PD.SLE renamed to PD.Creat                     rfd
                      ( /dd/defs/rbfdefs):00013         * 82/09/17   V.DiskID, V.BMapSz, V.MapSct added for smart
                      ( /dd/defs/rbfdefs):00014         *               multi-sector bitmap searching by            rfd
                      ( /dd/defs/rbfdefs):00015         * 82/09/20   reserved areas added in static storage.
                      ( /dd/defs/rbfdefs):00016         * 83/06/07   Added InDriver flag in PD.SMF.                 rfd
                      ( /dd/defs/rbfdefs):00017         * 83/06/13   Added PE.Req tmp save for PE.Lock              rfd
                      ( /dd/defs/rbfdefs):00018         * 83/08/08   reserved PD.SToff for Japanese                 rfd
                      ( /dd/defs/rbfdefs):00019         * 83/11/19   Added V.ResBit in drive tables.                rfd
                      ( /dd/defs/rbfdefs):00020         * 83/12/12   Added PE.Prior to save process priority.       rfd
                      ( /dd/defs/rbfdefs):00021         * 83/12/13   Added BufBusy bit in state flag (PD.SMF)       rfd
                      ( /dd/defs/rbfdefs):00022         
                      ( /dd/defs/rbfdefs):00023          pag
                      ( /dd/defs/rbfdefs):00024         ************************************************************
                      ( /dd/defs/rbfdefs):00025         *
                      ( /dd/defs/rbfdefs):00026         *  Random Block Path Descriptor Format
                      ( /dd/defs/rbfdefs):00027         *
                      ( /dd/defs/rbfdefs):00028          org PD.FST
000A                  ( /dd/defs/rbfdefs):00029         PD.SMF rmb 1 State flags
000B                  ( /dd/defs/rbfdefs):00030         PD.CP rmb 4 Current logical byte position
000F                  ( /dd/defs/rbfdefs):00031         PD.SIZ rmb 4 File size
0013                  ( /dd/defs/rbfdefs):00032         PD.SBL rmb 3 Segment beginning lsn
0016                  ( /dd/defs/rbfdefs):00033         PD.SBP rmb 3 Segment beginning psn
0019                  ( /dd/defs/rbfdefs):00034         PD.SSZ rmb 3 Segment size
001C                  ( /dd/defs/rbfdefs):00035         PD.DSK rmb 2 Disk id
001E                  ( /dd/defs/rbfdefs):00036         PD.DTB rmb 2 Drive table ptr
                      ( /dd/defs/rbfdefs):00037          org PD.OPT
0020                  ( /dd/defs/rbfdefs):00038          rmb 1 Device type
0021                  ( /dd/defs/rbfdefs):00039         PD.DRV rmb 1 Drive number
0022                  ( /dd/defs/rbfdefs):00040         PD.STP rmb 1 Step rate
0023                  ( /dd/defs/rbfdefs):00041         PD.TYP rmb 1 Disk device type (5" 8" other)
0024                  ( /dd/defs/rbfdefs):00042         PD.DNS rmb 1 Density capability
0025                  ( /dd/defs/rbfdefs):00043         PD.CYL rmb 2 Number of cylinders
0027                  ( /dd/defs/rbfdefs):00044         PD.SID rmb 1 Number of surfaces
0028                  ( /dd/defs/rbfdefs):00045         PD.VFY rmb 1 0=verify disk writes
0029                  ( /dd/defs/rbfdefs):00046         PD.SCT rmb 2 Default sectors/track
002B                  ( /dd/defs/rbfdefs):00047         PD.T0S rmb 2 Default sectors/track tr00,s0
002D                  ( /dd/defs/rbfdefs):00048         PD.ILV rmb 1 Sector interleave offset
002E                  ( /dd/defs/rbfdefs):00049         PD.SAS rmb 1 Segment allocation size
002F                  ( /dd/defs/rbfdefs):00050         PD.TFM rmb 1 DMA Transfer Mode
0030                  ( /dd/defs/rbfdefs):00051         PD.Exten rmb 2 Path Extension (PE) for record locking
0032                  ( /dd/defs/rbfdefs):00052         PD.SToff rmb 1 Sector/Track offsets (for "foreign" disk formats)
0033                  ( /dd/defs/rbfdefs):00053         PD.ATT rmb 1 File attributes
0034                  ( /dd/defs/rbfdefs):00054         PD.FD rmb 3 File descriptor psn
0037                  ( /dd/defs/rbfdefs):00055         PD.DFD rmb 3 Directory file descriptor psn
003A                  ( /dd/defs/rbfdefs):00056         PD.DCP rmb 4 File directory entry ptr
003E                  ( /dd/defs/rbfdefs):00057         PD.DVT rmb 2 User readable dev tbl ptr
                      ( /dd/defs/rbfdefs):00058         
                      ( /dd/defs/rbfdefs):00059         * State Flags
     0001             ( /dd/defs/rbfdefs):00060         BUFMOD equ $01 Buffer modified
     0002             ( /dd/defs/rbfdefs):00061         SINBUF equ $02 Sector in buffer
     0004             ( /dd/defs/rbfdefs):00062         FDBUF equ  $04 File descriptor in buffer
                      ( /dd/defs/rbfdefs):00063         *EOFSEC equ $08 End of file sector
                      ( /dd/defs/rbfdefs):00064         *EOF equ $10 End of file
     0020             ( /dd/defs/rbfdefs):00065         InDriver equ $20 Currently in Disk Driver, or queued
     0040             ( /dd/defs/rbfdefs):00066         BufBusy equ $40 Buffer is currently busy
                      ( /dd/defs/rbfdefs):00067         
                      ( /dd/defs/rbfdefs):00068         *
                      ( /dd/defs/rbfdefs):00069         * Device Descriptor Format
                      ( /dd/defs/rbfdefs):00070         *
                      ( /dd/defs/rbfdefs):00071         
                      ( /dd/defs/rbfdefs):00072          org 0
0000                  ( /dd/defs/rbfdefs):00073         DD.TOT rmb 3 Total number of sectors
0003                  ( /dd/defs/rbfdefs):00074         DD.TKS rmb 1 Track size in sectors
0004                  ( /dd/defs/rbfdefs):00075         DD.MAP rmb 2 Number of bytes in allocation bit map
0006                  ( /dd/defs/rbfdefs):00076         DD.BIT rmb 2 Number of sectors/bit
0008                  ( /dd/defs/rbfdefs):00077         DD.DIR rmb 3 Address of root directory fd
000B                  ( /dd/defs/rbfdefs):00078         DD.OWN rmb 2 Owner
000D                  ( /dd/defs/rbfdefs):00079         DD.ATT rmb 1 Attributes
000E                  ( /dd/defs/rbfdefs):00080         DD.DSK rmb 2 Disk id
0010                  ( /dd/defs/rbfdefs):00081         DD.FMT rmb 1 Disk format; density/sides
0011                  ( /dd/defs/rbfdefs):00082         DD.SPT rmb 2 Sectors/track
0013                  ( /dd/defs/rbfdefs):00083         DD.RES rmb 2 Reserved for future use
     0015             ( /dd/defs/rbfdefs):00084         DD.SIZ equ . Device descriptor minimum size
0015                  ( /dd/defs/rbfdefs):00085         DD.BT rmb 3 System bootstrap sector
0018                  ( /dd/defs/rbfdefs):00086         DD.BSZ rmb 2 Size of system bootstrap
001A                  ( /dd/defs/rbfdefs):00087         DD.DAT rmb 5 Creation date
001F                  ( /dd/defs/rbfdefs):00088         DD.NAM rmb 32 Volume name
003F                  ( /dd/defs/rbfdefs):00089         DD.OPT rmb 32 option area
                      ( /dd/defs/rbfdefs):00090         
                      ( /dd/defs/rbfdefs):00091         
                      ( /dd/defs/rbfdefs):00092         *
                      ( /dd/defs/rbfdefs):00093         * File Descriptor Format
                      ( /dd/defs/rbfdefs):00094         *
                      ( /dd/defs/rbfdefs):00095         
                      ( /dd/defs/rbfdefs):00096          org 0
0000                  ( /dd/defs/rbfdefs):00097         FD.ATT rmb 1 Attributes
0001                  ( /dd/defs/rbfdefs):00098         FD.OWN rmb 2 Owner
0003                  ( /dd/defs/rbfdefs):00099         FD.DAT rmb 5 Date last modified
0008                  ( /dd/defs/rbfdefs):00100         FD.LNK rmb 1 Link count
0009                  ( /dd/defs/rbfdefs):00101         FD.SIZ rmb 4 File size
000D                  ( /dd/defs/rbfdefs):00102         FD.Creat rmb 3 Segment list extension
     0010             ( /dd/defs/rbfdefs):00103         FD.SEG equ . Beginning of segment list
                      ( /dd/defs/rbfdefs):00104         
                      ( /dd/defs/rbfdefs):00105         * Segment List Entry Format
                      ( /dd/defs/rbfdefs):00106          org 0
0000                  ( /dd/defs/rbfdefs):00107         FDSL.A rmb 3 Segment beginning physical sector number
0003                  ( /dd/defs/rbfdefs):00108         FDSL.B rmb 2 Segment size
     0005             ( /dd/defs/rbfdefs):00109         FDSL.S equ . Segment list entry size
                      ( /dd/defs/rbfdefs):00110         
     00FB             ( /dd/defs/rbfdefs):00111         FD.LS1 equ FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             ( /dd/defs/rbfdefs):00112         FD.LS2 equ (256/FDSL.S-1)*FDSL.S
                      ( /dd/defs/rbfdefs):00113         
     0010             ( /dd/defs/rbfdefs):00114         MINSEC set 16
                      ( /dd/defs/rbfdefs):00115         
                      ( /dd/defs/rbfdefs):00116         
                      ( /dd/defs/rbfdefs):00117         
                      ( /dd/defs/rbfdefs):00118         *
                      ( /dd/defs/rbfdefs):00119         * Directory Entry Format
                      ( /dd/defs/rbfdefs):00120         *
                      ( /dd/defs/rbfdefs):00121         
                      ( /dd/defs/rbfdefs):00122          org 0
0000                  ( /dd/defs/rbfdefs):00123         DIR.NM rmb 29 File name
001D                  ( /dd/defs/rbfdefs):00124         DIR.FD rmb 3 File descriptor physical sector number
     0020             ( /dd/defs/rbfdefs):00125         DIR.SZ equ . Diectory record size
                      ( /dd/defs/rbfdefs):00126         
                      ( /dd/defs/rbfdefs):00127         
                      ( /dd/defs/rbfdefs):00128         ****************
                      ( /dd/defs/rbfdefs):00129         *
                      ( /dd/defs/rbfdefs):00130         *  Static Storage
                      ( /dd/defs/rbfdefs):00131         *
                      ( /dd/defs/rbfdefs):00132         *
                      ( /dd/defs/rbfdefs):00133         * Overall Disk Static Storage
                      ( /dd/defs/rbfdefs):00134         *
                      ( /dd/defs/rbfdefs):00135         *  Note:  This does Not reserve Any memory for Drive Tables
                      ( /dd/defs/rbfdefs):00136         *         Each Driver is responsible for reserving sufficient
                      ( /dd/defs/rbfdefs):00137         *         memory for the appropriate number of tables.
                      ( /dd/defs/rbfdefs):00138         *
                      ( /dd/defs/rbfdefs):00139          org V.USER Reserve required
0006                  ( /dd/defs/rbfdefs):00140         V.NDRV rmb 1 Number of drives
0007                  ( /dd/defs/rbfdefs):00141          rmb 8 reserved
     000F             ( /dd/defs/rbfdefs):00142         DRVBEG equ . Beginning of drive tables
                      ( /dd/defs/rbfdefs):00143         *
                      ( /dd/defs/rbfdefs):00144         * Global Storage For Disk Drive Tables
                      ( /dd/defs/rbfdefs):00145         * Each Table Contains The First 'DD.Siz' Bytes
                      ( /dd/defs/rbfdefs):00146         * From Sector 0, And The Current Track, Stepping Rate,
                      ( /dd/defs/rbfdefs):00147         * Bit-Map Use Flag, And Disk Type
                      ( /dd/defs/rbfdefs):00148         *
                      ( /dd/defs/rbfdefs):00149          org 0
0000                  ( /dd/defs/rbfdefs):00150          rmb DD.SIZ Device descriptor, sector 0
0015                  ( /dd/defs/rbfdefs):00151         V.TRAK rmb 2 Current track
0017                  ( /dd/defs/rbfdefs):00152         V.BMB rmb 1 Bit-map use flag
0018                  ( /dd/defs/rbfdefs):00153         V.FileHd rmb 2 open file list for this drive
001A                  ( /dd/defs/rbfdefs):00154         V.DiskID rmb 2 Disk ID
001C                  ( /dd/defs/rbfdefs):00155         V.BMapSz rmb 1 Bitmap Size
001D                  ( /dd/defs/rbfdefs):00156         V.MapSct rmb 1 lowest reasonable bitmap sector
001E                  ( /dd/defs/rbfdefs):00157         V.ResBit rmb 1 reserved bitmap sector (for compaction)
001F                  ( /dd/defs/rbfdefs):00158          rmb 7 reserved
     0026             ( /dd/defs/rbfdefs):00159         DRVMEM equ .
                      ( /dd/defs/rbfdefs):00160         
                      ( /dd/defs/rbfdefs):00161          opt l
                      (         defsfile):00015          use /dd/defs/scfdefs
                      ( /dd/defs/scfdefs):00001          opt -l
                      ( /dd/defs/scfdefs):00002          nam OS9ScfDefs
                      ( /dd/defs/scfdefs):00003          ttl Sequential File Manager (SCF) Definitions
                      ( /dd/defs/scfdefs):00004         
                      ( /dd/defs/scfdefs):00005         ******************
                      ( /dd/defs/scfdefs):00006         * Edition History
                      ( /dd/defs/scfdefs):00007         
                      ( /dd/defs/scfdefs):00008         *   Date    Changes Made                                        by
                      ( /dd/defs/scfdefs):00009         * -------- ---------------------------------------------------- ---
                      ( /dd/defs/scfdefs):00010         * 84/01/11 Added V.KANJI, V.KBUF, V.MODADR for new kanji input
                      ( /dd/defs/scfdefs):00011         *          process.                                             Y.O
                      ( /dd/defs/scfdefs):00012         * 85/04/20 Added V.PDLHd Path Descriptor List Head              MGH
                      ( /dd/defs/scfdefs):00013         * 85/04/21 Added PD.PLP and PD.PST for modem handling           MGH
                      ( /dd/defs/scfdefs):00014         *
                      ( /dd/defs/scfdefs):00015         
                      ( /dd/defs/scfdefs):00016          pag
                      ( /dd/defs/scfdefs):00017         ************************************************************
                      ( /dd/defs/scfdefs):00018         *
                      ( /dd/defs/scfdefs):00019         *     Static storage requirements
                      ( /dd/defs/scfdefs):00020         *
                      ( /dd/defs/scfdefs):00021         *   SCF Devices must reserve this space for SCF
                      ( /dd/defs/scfdefs):00022         
                      ( /dd/defs/scfdefs):00023          org V.USER
0006                  ( /dd/defs/scfdefs):00024         V.TYPE rmb 1 Device type or parity
0007                  ( /dd/defs/scfdefs):00025         V.LINE rmb 1 Lines left until end of page
0008                  ( /dd/defs/scfdefs):00026         V.PAUS rmb 1 Immediate Pause request
0009                  ( /dd/defs/scfdefs):00027         V.DEV2 rmb 2 Attached device's static
000B                  ( /dd/defs/scfdefs):00028         V.INTR rmb 1 Interrupt char
000C                  ( /dd/defs/scfdefs):00029         V.QUIT rmb 1 Quit char
000D                  ( /dd/defs/scfdefs):00030         V.PCHR rmb 1 Pause char
000E                  ( /dd/defs/scfdefs):00031         V.ERR rmb 1 Accumulated errors
000F                  ( /dd/defs/scfdefs):00032         V.XON rmb 1 X-On char
0010                  ( /dd/defs/scfdefs):00033         V.XOFF rmb 1 X-Off char
0011                  ( /dd/defs/scfdefs):00034         V.KANJI rmb 1 Kanji mode flag
0012                  ( /dd/defs/scfdefs):00035         V.KBUF rmb 2 Kana - Kanji convert routine work address
0014                  ( /dd/defs/scfdefs):00036         V.MODADR rmb 2 Kana - Kanji convert module address
0016                  ( /dd/defs/scfdefs):00037         V.PDLHd rmb 2 Open path descriptor list head pointer
0018                  ( /dd/defs/scfdefs):00038         V.RSV rmb 5 Reserve bytes for future expansion
     001D             ( /dd/defs/scfdefs):00039         V.SCF equ . Total SCF manager static overhead
                      ( /dd/defs/scfdefs):00040         
                      ( /dd/defs/scfdefs):00041         ************************************************************
                      ( /dd/defs/scfdefs):00042         *
                      ( /dd/defs/scfdefs):00043         *     Character definitions
                      ( /dd/defs/scfdefs):00044         *
                      ( /dd/defs/scfdefs):00045         
     0000             ( /dd/defs/scfdefs):00046         C$NULL set 0 Null char
     0001             ( /dd/defs/scfdefs):00047         C$RPET set $01 (ctl A - SOH) Repeat last input line
     0003             ( /dd/defs/scfdefs):00048         C$INTR set $03 (ctl C - ETX) Keyboard interrupt
     0004             ( /dd/defs/scfdefs):00049         C$RPRT set $04 (ctl D - EOT) Reprint current input line
     0005             ( /dd/defs/scfdefs):00050         C$QUIT set $05 (ctl E - ENQ) Keyboard Abort
     0007             ( /dd/defs/scfdefs):00051         C$BELL set $07 (ctl G - BEL) Line overflow warning
     0008             ( /dd/defs/scfdefs):00052         C$BSP set $08 (ctl H - BS ) Back space
     0005             ( /dd/defs/scfdefs):00053         C$EL set $05 Erase Line
     000A             ( /dd/defs/scfdefs):00054         C$LF set $0A Line feed
     000B             ( /dd/defs/scfdefs):00055         C$HOME set $0B Home position Code
     0015             ( /dd/defs/scfdefs):00056         C$Clsgr set $15 Graphic screen clear (use FM-11)
     0016             ( /dd/defs/scfdefs):00057         C$Clsall set $16 Graphic & character clear (use FM-11)
     000D             ( /dd/defs/scfdefs):00058         C$CR set $0D Carriage return
     000C             ( /dd/defs/scfdefs):00059         C$FORM set $0C (ctl L - FF ) Form Feed ... screen clear
     000F             ( /dd/defs/scfdefs):00060         C$SI set $0F Shift IN Code
     000E             ( /dd/defs/scfdefs):00061         C$SO set $0E Shift OUT Code
     0011             ( /dd/defs/scfdefs):00062         C$XON  set $11 (ctl Q - DC1) Transmit Enable
     0013             ( /dd/defs/scfdefs):00063         C$XOFF set $13 (ctl S - DC3) Transmit Disable
     0017             ( /dd/defs/scfdefs):00064         C$PAUS set $17 (ctl W - ETB) Pause character
     0018             ( /dd/defs/scfdefs):00065         C$DEL set $18 (ctl X - CAN) Delete line
     001B             ( /dd/defs/scfdefs):00066         C$EOF set $1B (ctl [ - ESC) END of file
     001C             ( /dd/defs/scfdefs):00067         C$RGT set $1C Cursor right
     001D             ( /dd/defs/scfdefs):00068         C$LFT set $1D Cursor left
     001E             ( /dd/defs/scfdefs):00069         C$UP set $1E Cursor up
     001F             ( /dd/defs/scfdefs):00070         C$DWN set $1F Cursor down
     0020             ( /dd/defs/scfdefs):00071         C$SPAC set $20 Space
     002E             ( /dd/defs/scfdefs):00072         C$PERD set '.
     002C             ( /dd/defs/scfdefs):00073         C$COMA set ',
                      ( /dd/defs/scfdefs):00074         
                      ( /dd/defs/scfdefs):00075          pag
                      ( /dd/defs/scfdefs):00076         ************************************************************
                      ( /dd/defs/scfdefs):00077         *
                      ( /dd/defs/scfdefs):00078         *     FILE DESCRIPTOR OFFSETS
                      ( /dd/defs/scfdefs):00079         *
                      ( /dd/defs/scfdefs):00080         
                      ( /dd/defs/scfdefs):00081          org PD.FST
000A                  ( /dd/defs/scfdefs):00082         PD.DV2 rmb 2 OUTPUT DEV TBL PTR
000C                  ( /dd/defs/scfdefs):00083         PD.RAW rmb 1 READ/WRITE OR RDLIN/WRLIN MODE
000D                  ( /dd/defs/scfdefs):00084         PD.MAX rmb 2 READLINE HIGH BYTE COUNT
000F                  ( /dd/defs/scfdefs):00085         PD.MIN rmb 1 DEVICES ARE "MINE" IF CLEAR
0010                  ( /dd/defs/scfdefs):00086         PD.STS rmb 2 Status routine module addr
0012                  ( /dd/defs/scfdefs):00087         PD.STM rmb 2 Reserved for Status routine
                      ( /dd/defs/scfdefs):00088          org PD.OPT
0020                  ( /dd/defs/scfdefs):00089          rmb 1 DEVICE TYPE
0021                  ( /dd/defs/scfdefs):00090         PD.UPC rmb 1 CASE   (0=BOTH, 1=UPPER ONLY)
0022                  ( /dd/defs/scfdefs):00091         PD.BSO rmb 1 BACKSP (0=BSE, 1=BSE,SP,BSE)
0023                  ( /dd/defs/scfdefs):00092         PD.DLO rmb 1 DELETE (0=BSE OVER LINE, 1=CRLF)
0024                  ( /dd/defs/scfdefs):00093         PD.EKO rmb 1 ECHO   (0=NO ECHO)
0025                  ( /dd/defs/scfdefs):00094         PD.ALF rmb 1 AUTOLF (0=NO AUTO LF)
0026                  ( /dd/defs/scfdefs):00095         PD.NUL rmb 1 END of LINE NULL COUNT
0027                  ( /dd/defs/scfdefs):00096         PD.PAU rmb 1 PAUSE  (0=NO END of PAGE PAUSE)
0028                  ( /dd/defs/scfdefs):00097         PD.PAG rmb 1 LINES PER PAGE
0029                  ( /dd/defs/scfdefs):00098         PD.BSP rmb 1 BACKSPACE charACTER
002A                  ( /dd/defs/scfdefs):00099         PD.DEL rmb 1 DELETE LINE charACTER
002B                  ( /dd/defs/scfdefs):00100         PD.EOR rmb 1 END of RECORD char (READ ONLY)
002C                  ( /dd/defs/scfdefs):00101         PD.EOF rmb 1 END of FILE char
002D                  ( /dd/defs/scfdefs):00102         PD.RPR rmb 1 REPRINT LINE char
002E                  ( /dd/defs/scfdefs):00103         PD.DUP rmb 1 DUP LAST LINE char
002F                  ( /dd/defs/scfdefs):00104         PD.PSC rmb 1 PAUSE char
0030                  ( /dd/defs/scfdefs):00105         PD.INT rmb 1 KBD INTR char (ctl c)
0031                  ( /dd/defs/scfdefs):00106         PD.QUT rmb 1 KBD QUIT char (ctl q)
0032                  ( /dd/defs/scfdefs):00107         PD.BSE rmb 1 BACKSPACE ECHO charACTER
0033                  ( /dd/defs/scfdefs):00108         PD.OVF rmb 1 LINE OVERFLOW char (BELL)
0034                  ( /dd/defs/scfdefs):00109         PD.PAR rmb 1 PARITY CODE
0035                  ( /dd/defs/scfdefs):00110         PD.BAU rmb 1 ACIA BAUD RATE (Color Computer)
0036                  ( /dd/defs/scfdefs):00111         PD.D2P rmb 2 OFFSET of DEV2 name
0038                  ( /dd/defs/scfdefs):00112         PD.XON rmb 1 ACIA X-ON char
0039                  ( /dd/defs/scfdefs):00113         PD.XOFF rmb 1 ACIA X-OFF char
     001A             ( /dd/defs/scfdefs):00114         OPTCNT equ .-PD.OPT Total user settable options
003A                  ( /dd/defs/scfdefs):00115         PD.ERR rmb 1 Most recent I/O error status
003B                  ( /dd/defs/scfdefs):00116         PD.TBL rmb 2 Device Table addr (copy)
                      ( /dd/defs/scfdefs):00117         
                      ( /dd/defs/scfdefs):00118         ************************************************************
                      ( /dd/defs/scfdefs):00119         *
                      ( /dd/defs/scfdefs):00120         *     Color code
                      ( /dd/defs/scfdefs):00121         *
                      ( /dd/defs/scfdefs):00122         
                      ( /dd/defs/scfdefs):00123          org 0
0000                  ( /dd/defs/scfdefs):00124         Black. rmb 1
0001                  ( /dd/defs/scfdefs):00125         Blue. rmb 1
0002                  ( /dd/defs/scfdefs):00126         Red. rmb 1
0003                  ( /dd/defs/scfdefs):00127         Magenta. rmb 1
0004                  ( /dd/defs/scfdefs):00128         Green. rmb 1
0005                  ( /dd/defs/scfdefs):00129         Cyan. rmb 1
0006                  ( /dd/defs/scfdefs):00130         Yellow. rmb 1
0007                  ( /dd/defs/scfdefs):00131         White. rmb 1
                      ( /dd/defs/scfdefs):00132         
                      ( /dd/defs/scfdefs):00133          opt l
                      (         defsfile):00016          use /dd/defs/vtiodefs_cc3
                      (/dd/defs/vtiodefs):00001                        IFNE      VTIODEFS-1
     0001             (/dd/defs/vtiodefs):00002         VTIODEFS       SET       1
                      (/dd/defs/vtiodefs):00003         
                      (/dd/defs/vtiodefs):00004         ********************************************************************
                      (/dd/defs/vtiodefs):00005         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/vtiodefs):00006         *
                      (/dd/defs/vtiodefs):00007         * $Id: vtiodefs_cc3,v 1.2 2006/03/14 12:20:57 boisy Exp $
                      (/dd/defs/vtiodefs):00008         *
                      (/dd/defs/vtiodefs):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/vtiodefs):00010         * Comment
                      (/dd/defs/vtiodefs):00011         * ------------------------------------------------------------------
                      (/dd/defs/vtiodefs):00012         *          2004/07/18  Boisy G. Pitre
                      (/dd/defs/vtiodefs):00013         * Started from systype
                      (/dd/defs/vtiodefs):00014         
                      (/dd/defs/vtiodefs):00015                        NAM       VTIODefs
                      (/dd/defs/vtiodefs):00016                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/vtiodefs):00017         
                      (/dd/defs/vtiodefs):00018         ****************
                      (/dd/defs/vtiodefs):00019         * Window Devices
                      (/dd/defs/vtiodefs):00020         *
                      (/dd/defs/vtiodefs):00021                        ORG       $FF9F
FF9F                  (/dd/defs/vtiodefs):00022         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (/dd/defs/vtiodefs):00023         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (/dd/defs/vtiodefs):00024         A.W1           RMB       1                   $FFA1
FFA2                  (/dd/defs/vtiodefs):00025         A.W2           RMB       1                   $FFA2
FFA3                  (/dd/defs/vtiodefs):00026         A.W3           RMB       1                   $FFA3
FFA4                  (/dd/defs/vtiodefs):00027         A.W4           RMB       1                   $FFA4
FFA5                  (/dd/defs/vtiodefs):00028         A.W5           RMB       1                   $FFA5
FFA6                  (/dd/defs/vtiodefs):00029         A.W6           RMB       1                   $FFA6
FFA7                  (/dd/defs/vtiodefs):00030         A.W7           RMB       1                   $FFA7
FFA8                  (/dd/defs/vtiodefs):00031         A.W8           RMB       1                   $FFA8
FFA9                  (/dd/defs/vtiodefs):00032         A.W9           RMB       1                   $FFA9
FFAA                  (/dd/defs/vtiodefs):00033         A.W10          RMB       1                   $FFAA
FFAB                  (/dd/defs/vtiodefs):00034         A.W11          RMB       1                   $FFAB
FFAC                  (/dd/defs/vtiodefs):00035         A.W12          RMB       1                   $FFAC
FFAD                  (/dd/defs/vtiodefs):00036         A.W13          RMB       1                   $FFAD
FFAE                  (/dd/defs/vtiodefs):00037         A.W14          RMB       1                   $FFAE
FFAF                  (/dd/defs/vtiodefs):00038         A.W15          RMB       1                   $FFAF
                      (/dd/defs/vtiodefs):00039         
                      (/dd/defs/vtiodefs):00040         **********************************
                      (/dd/defs/vtiodefs):00041         * Pointer Device Packet Definition
                      (/dd/defs/vtiodefs):00042         *
                      (/dd/defs/vtiodefs):00043                        ORG       0
0000                  (/dd/defs/vtiodefs):00044         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (/dd/defs/vtiodefs):00045         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (/dd/defs/vtiodefs):00046         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (/dd/defs/vtiodefs):00047                        RMB       2                   reserved
0005                  (/dd/defs/vtiodefs):00048         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (/dd/defs/vtiodefs):00049         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (/dd/defs/vtiodefs):00050         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (/dd/defs/vtiodefs):00051         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (/dd/defs/vtiodefs):00052         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (/dd/defs/vtiodefs):00053         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (/dd/defs/vtiodefs):00054         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (/dd/defs/vtiodefs):00055         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (/dd/defs/vtiodefs):00056         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (/dd/defs/vtiodefs):00057         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (/dd/defs/vtiodefs):00058                        RMB       2                   Reserved
0012                  (/dd/defs/vtiodefs):00059         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (/dd/defs/vtiodefs):00060         Pt.BDY         RMB       2                   Button down Y value
0016                  (/dd/defs/vtiodefs):00061         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (/dd/defs/vtiodefs):00062         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (/dd/defs/vtiodefs):00063         Pt.AcX         RMB       2                   Actual X Value
001A                  (/dd/defs/vtiodefs):00064         Pt.AcY         RMB       2                   Actual Y Value
001C                  (/dd/defs/vtiodefs):00065         Pt.WRX         RMB       2                   Window Relative X
001E                  (/dd/defs/vtiodefs):00066         Pt.WRY         RMB       2                   Window Relative Y
     0020             (/dd/defs/vtiodefs):00067         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (/dd/defs/vtiodefs):00068         
                      (/dd/defs/vtiodefs):00069         **************************
                      (/dd/defs/vtiodefs):00070         * window regions for mouse
                      (/dd/defs/vtiodefs):00071         *
     0000             (/dd/defs/vtiodefs):00072         WR.Cntnt       EQU       0                   content region
     0001             (/dd/defs/vtiodefs):00073         WR.Cntrl       EQU       1                   control region
     0002             (/dd/defs/vtiodefs):00074         WR.OfWin       EQU       2                   off window
                      (/dd/defs/vtiodefs):00075         
                      (/dd/defs/vtiodefs):00076         *************************************
                      (/dd/defs/vtiodefs):00077         * Standard system get/put buffer defs
                      (/dd/defs/vtiodefs):00078         *
                      (/dd/defs/vtiodefs):00079         *
                      (/dd/defs/vtiodefs):00080         * system group numbers
                      (/dd/defs/vtiodefs):00081         *
                      (/dd/defs/vtiodefs):00082                        ORG       200
00C8                  (/dd/defs/vtiodefs):00083         Grp.Fnt        RMB       1                   font group
00C9                  (/dd/defs/vtiodefs):00084         Grp.Clip       RMB       1                   clipboard group
00CA                  (/dd/defs/vtiodefs):00085         Grp.Ptr        RMB       1                   pointer group
00CB                  (/dd/defs/vtiodefs):00086         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (/dd/defs/vtiodefs):00087         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (/dd/defs/vtiodefs):00088         Grp.Pat6       RMB       1                   pattern group 16 color
                      (/dd/defs/vtiodefs):00089         *
                      (/dd/defs/vtiodefs):00090         * font buffer numbers
                      (/dd/defs/vtiodefs):00091         *
                      (/dd/defs/vtiodefs):00092                        ORG       1
0001                  (/dd/defs/vtiodefs):00093         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (/dd/defs/vtiodefs):00094         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (/dd/defs/vtiodefs):00095         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (/dd/defs/vtiodefs):00096         *
                      (/dd/defs/vtiodefs):00097         * pattern buffer numbers
                      (/dd/defs/vtiodefs):00098         *
                      (/dd/defs/vtiodefs):00099                        ORG       1
0001                  (/dd/defs/vtiodefs):00100         Pat.Dot        RMB       1
0002                  (/dd/defs/vtiodefs):00101         Pat.Vrt        RMB       1
0003                  (/dd/defs/vtiodefs):00102         Pat.Hrz        RMB       1
0004                  (/dd/defs/vtiodefs):00103         Pat.XHtc       RMB       1
0005                  (/dd/defs/vtiodefs):00104         Pat.LSnt       RMB       1
0006                  (/dd/defs/vtiodefs):00105         Pat.RSnt       RMB       1
0007                  (/dd/defs/vtiodefs):00106         Pat.SDot       RMB       1
0008                  (/dd/defs/vtiodefs):00107         Pat.BDot       RMB       1
                      (/dd/defs/vtiodefs):00108         *
                      (/dd/defs/vtiodefs):00109         * pointer buffer numbers
                      (/dd/defs/vtiodefs):00110         *
                      (/dd/defs/vtiodefs):00111                        ORG       1
0001                  (/dd/defs/vtiodefs):00112         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (/dd/defs/vtiodefs):00113         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (/dd/defs/vtiodefs):00114         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (/dd/defs/vtiodefs):00115         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (/dd/defs/vtiodefs):00116         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (/dd/defs/vtiodefs):00117         Ptr.Txt        RMB       1                   Text pointer
0007                  (/dd/defs/vtiodefs):00118         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (/dd/defs/vtiodefs):00119         
                      (/dd/defs/vtiodefs):00120         **********************
                      (/dd/defs/vtiodefs):00121         * KeyDrv Entry Points
                      (/dd/defs/vtiodefs):00122                        ORG       0
0000                  (/dd/defs/vtiodefs):00123         K$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/vtiodefs):00124         K$Term         RMB       3                   joystick termination
0006                  (/dd/defs/vtiodefs):00125         K$FnKey        RMB       3                   get function key states
0009                  (/dd/defs/vtiodefs):00126         K$RdKey        RMB       3                   get key states
                      (/dd/defs/vtiodefs):00127         
                      (/dd/defs/vtiodefs):00128         **********************
                      (/dd/defs/vtiodefs):00129         * JoyDrv Entry Points
                      (/dd/defs/vtiodefs):00130                        ORG       0
0000                  (/dd/defs/vtiodefs):00131         J$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/vtiodefs):00132         J$Term         RMB       3                   joystick termination
0006                  (/dd/defs/vtiodefs):00133         J$MsBtn        RMB       3                   get mouse button states
0009                  (/dd/defs/vtiodefs):00134         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (/dd/defs/vtiodefs):00135         J$JyBtn        RMB       3                   get joystick button states
000F                  (/dd/defs/vtiodefs):00136         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/vtiodefs):00137         
                      (/dd/defs/vtiodefs):00138         **********************
                      (/dd/defs/vtiodefs):00139         * SndDrv Entry Points
                      (/dd/defs/vtiodefs):00140                        ORG       0
0000                  (/dd/defs/vtiodefs):00141         S$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/vtiodefs):00142         S$GetStt       RMB       3                   joystick termination
0006                  (/dd/defs/vtiodefs):00143         S$SetStt       RMB       3                   joystick termination
0009                  (/dd/defs/vtiodefs):00144         S$Term         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/vtiodefs):00145         
                      (/dd/defs/vtiodefs):00146         ********************************
                      (/dd/defs/vtiodefs):00147         * Window/Menu Bar Data Structure
                      (/dd/defs/vtiodefs):00148         *
                      (/dd/defs/vtiodefs):00149         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (/dd/defs/vtiodefs):00150         * for use in the high level windowing package.
                      (/dd/defs/vtiodefs):00151         *
     000A             (/dd/defs/vtiodefs):00152         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (/dd/defs/vtiodefs):00153         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (/dd/defs/vtiodefs):00154         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (/dd/defs/vtiodefs):00155         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (/dd/defs/vtiodefs):00156         *
                      (/dd/defs/vtiodefs):00157         * Menu Item Descriptor : (MN.ITEMS)
                      (/dd/defs/vtiodefs):00158         * one required for each item within the menu
                      (/dd/defs/vtiodefs):00159         *
                      (/dd/defs/vtiodefs):00160                        ORG       0
0000                  (/dd/defs/vtiodefs):00161         MI.TTL         RMB       MXTTLEN             item name
000F                  (/dd/defs/vtiodefs):00162         MI.ENBL        RMB       1                   enable flag
0010                  (/dd/defs/vtiodefs):00163         MI.RES         RMB       5                   reserved bytes
     0015             (/dd/defs/vtiodefs):00164         MI.SIZ         EQU       .                   size of menu item descriptor
                      (/dd/defs/vtiodefs):00165         *
                      (/dd/defs/vtiodefs):00166         * Menu Descriptor :
                      (/dd/defs/vtiodefs):00167         * one for each menu on the manu bar
                      (/dd/defs/vtiodefs):00168         * each is pointed to by MB.MPTR below
                      (/dd/defs/vtiodefs):00169         *
                      (/dd/defs/vtiodefs):00170                        ORG       0
0000                  (/dd/defs/vtiodefs):00171         MN.TTL         RMB       MXTTLEN             menu title
000F                  (/dd/defs/vtiodefs):00172         MN.ID          RMB       1                   menu id number (1-255)
0010                  (/dd/defs/vtiodefs):00173         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (/dd/defs/vtiodefs):00174         MN.NITS        RMB       1                   number of items in menu
0012                  (/dd/defs/vtiodefs):00175         MN.ENBL        RMB       1                   enable flag
0013                  (/dd/defs/vtiodefs):00176         MN.RES         RMB       2                   reserved bytes
0015                  (/dd/defs/vtiodefs):00177         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (/dd/defs/vtiodefs):00178         MN.SIZ         EQU       .                   size of menu descriptor
                      (/dd/defs/vtiodefs):00179         *
                      (/dd/defs/vtiodefs):00180         * Window Descriptor:
                      (/dd/defs/vtiodefs):00181         * one required for each application in a framed window
                      (/dd/defs/vtiodefs):00182         *
                      (/dd/defs/vtiodefs):00183                        ORG       0
0000                  (/dd/defs/vtiodefs):00184         WN.TTL         RMB       20                  title of window for title bar
0014                  (/dd/defs/vtiodefs):00185         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (/dd/defs/vtiodefs):00186         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (/dd/defs/vtiodefs):00187         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (/dd/defs/vtiodefs):00188         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (/dd/defs/vtiodefs):00189         WN.RES         RMB       7                   reserved bytes
0020                  (/dd/defs/vtiodefs):00190         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (/dd/defs/vtiodefs):00191         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (/dd/defs/vtiodefs):00192         
                      (/dd/defs/vtiodefs):00193         *************************
                      (/dd/defs/vtiodefs):00194         * Window Type Definitions
                      (/dd/defs/vtiodefs):00195         *
                      (/dd/defs/vtiodefs):00196         * To be used in setting up the border of the window in
                      (/dd/defs/vtiodefs):00197         * the SS.WnSel SETSTAT
                      (/dd/defs/vtiodefs):00198         *
                      (/dd/defs/vtiodefs):00199                        ORG       0
0000                  (/dd/defs/vtiodefs):00200         WT.NBox        RMB       1                   No Box
0001                  (/dd/defs/vtiodefs):00201         WT.FWin        RMB       1                   Framed Window
0002                  (/dd/defs/vtiodefs):00202         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (/dd/defs/vtiodefs):00203         WT.SBox        RMB       1                   Shadowed Box
0004                  (/dd/defs/vtiodefs):00204         WT.DBox        RMB       1                   Double Box
0005                  (/dd/defs/vtiodefs):00205         WT.PBox        RMB       1                   Plain Box
                      (/dd/defs/vtiodefs):00206         
                      (/dd/defs/vtiodefs):00207         *************************************
                      (/dd/defs/vtiodefs):00208         * Pre-Defined Menu IDs for the system
                      (/dd/defs/vtiodefs):00209         *
                      (/dd/defs/vtiodefs):00210                        ORG       1
0001                  (/dd/defs/vtiodefs):00211         MId.Mov        RMB       1                   move box
0002                  (/dd/defs/vtiodefs):00212         MId.Cls        RMB       1                   close box
0003                  (/dd/defs/vtiodefs):00213         MId.Grw        RMB       1                   grow box
0004                  (/dd/defs/vtiodefs):00214         MId.SUp        RMB       1                   scroll up
0005                  (/dd/defs/vtiodefs):00215         MId.SDn        RMB       1                   scroll down
0006                  (/dd/defs/vtiodefs):00216         MId.SRt        RMB       1                   scroll right
0007                  (/dd/defs/vtiodefs):00217         MId.SLt        RMB       1                   scroll left
0008                  (/dd/defs/vtiodefs):00218         MId.Chr        RMB       1                   character was depressed
                      (/dd/defs/vtiodefs):00219                        ORG       20
0014                  (/dd/defs/vtiodefs):00220         MId.Tdy        RMB       1                   Tandy menu
0015                  (/dd/defs/vtiodefs):00221         MId.Fil        RMB       1                   Files Menu
0016                  (/dd/defs/vtiodefs):00222         MId.Edt        RMB       1                   Edit Menu
0017                  (/dd/defs/vtiodefs):00223         MId.Sty        RMB       1                   Styles menu
0018                  (/dd/defs/vtiodefs):00224         MId.Fnt        RMB       1                   Font menu
                      (/dd/defs/vtiodefs):00225         
                      (/dd/defs/vtiodefs):00226         
                      (/dd/defs/vtiodefs):00227         ******************************************************************************
                      (/dd/defs/vtiodefs):00228         ******************************************************************************
                      (/dd/defs/vtiodefs):00229         **                                                                          **
                      (/dd/defs/vtiodefs):00230         ** NitrOS-9 Windowing system Global data definitions                        **
                      (/dd/defs/vtiodefs):00231         **                                                                          **
                      (/dd/defs/vtiodefs):00232         ******************************************************************************
                      (/dd/defs/vtiodefs):00233         ******************************************************************************
                      (/dd/defs/vtiodefs):00234         **                                                                          **
                      (/dd/defs/vtiodefs):00235         ** System memory block 0 layout:                                            **
                      (/dd/defs/vtiodefs):00236         **                                                                          **
                      (/dd/defs/vtiodefs):00237         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (/dd/defs/vtiodefs):00238         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (/dd/defs/vtiodefs):00239         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (/dd/defs/vtiodefs):00240         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (/dd/defs/vtiodefs):00241         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (/dd/defs/vtiodefs):00242         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (/dd/defs/vtiodefs):00243         ** $0010-$001F : unused (User definable)                                    **
                      (/dd/defs/vtiodefs):00244         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (/dd/defs/vtiodefs):00245         ** $0100-$011F : Task usage table                                           **
                      (/dd/defs/vtiodefs):00246         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (/dd/defs/vtiodefs):00247         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (/dd/defs/vtiodefs):00248         ** $0300-$03FF : system's system call dispatch table                        **
                      (/dd/defs/vtiodefs):00249         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (/dd/defs/vtiodefs):00250         ** $0500-$05FF : process descriptor pointer table                           **
                      (/dd/defs/vtiodefs):00251         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (/dd/defs/vtiodefs):00252         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (/dd/defs/vtiodefs):00253         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (/dd/defs/vtiodefs):00254         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (/dd/defs/vtiodefs):00255         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (/dd/defs/vtiodefs):00256         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (/dd/defs/vtiodefs):00257         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (/dd/defs/vtiodefs):00258         ** $1248-$127F : ????                                                       **
                      (/dd/defs/vtiodefs):00259         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (/dd/defs/vtiodefs):00260         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (/dd/defs/vtiodefs):00261         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (/dd/defs/vtiodefs):00262         **                                                                          **
                      (/dd/defs/vtiodefs):00263         ******************************************************************************
                      (/dd/defs/vtiodefs):00264         ******************************************************************************
                      (/dd/defs/vtiodefs):00265         
                      (/dd/defs/vtiodefs):00266         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (/dd/defs/vtiodefs):00267         MaxLines       EQU       25                  Max. Y coord text value
     0000             (/dd/defs/vtiodefs):00268         Meg            SET       false               "true" if 1 or 2 meg machine
                      (/dd/defs/vtiodefs):00269         
     0000             (/dd/defs/vtiodefs):00270         COMP           EQU       0                   composite monitor
     0001             (/dd/defs/vtiodefs):00271         RGB            EQU       1                   RGB Analog monitor 
     0002             (/dd/defs/vtiodefs):00272         MONO           EQU       2                   monochrome monitor
                      (/dd/defs/vtiodefs):00273         
     0001             (/dd/defs/vtiodefs):00274         Monitor        SET       RGB
                      (/dd/defs/vtiodefs):00275         
                      (/dd/defs/vtiodefs):00276         * Global definitions
     0001             (/dd/defs/vtiodefs):00277         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (/dd/defs/vtiodefs):00278         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (/dd/defs/vtiodefs):00279         CapsLck        EQU       %00000100           Capslock enabled
     0280             (/dd/defs/vtiodefs):00280         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (/dd/defs/vtiodefs):00281                        IFEQ      MaxLines-25
     00C6             (/dd/defs/vtiodefs):00282         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/vtiodefs):00283                        ELSE      
0019                  (/dd/defs/vtiodefs):00284         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/vtiodefs):00285                        ENDC      
                      (/dd/defs/vtiodefs):00286         
                      (/dd/defs/vtiodefs):00287         *****************************************************************************
                      (/dd/defs/vtiodefs):00288         * Static memory area for each window (VTIO/TC9IO)
                      (/dd/defs/vtiodefs):00289         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (/dd/defs/vtiodefs):00290         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (/dd/defs/vtiodefs):00291         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (/dd/defs/vtiodefs):00292         * May have to have smaller limit for text to gfx screens, as it will run much
                      (/dd/defs/vtiodefs):00293         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (/dd/defs/vtiodefs):00294         *
                      (/dd/defs/vtiodefs):00295         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (/dd/defs/vtiodefs):00296         * V.SCF is to be resolved properly in pass 1!!
                      (/dd/defs/vtiodefs):00297                        ORG       V.SCF
001D                  (/dd/defs/vtiodefs):00298         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (/dd/defs/vtiodefs):00299         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (/dd/defs/vtiodefs):00300         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (/dd/defs/vtiodefs):00301         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (/dd/defs/vtiodefs):00302         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (/dd/defs/vtiodefs):00303         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (/dd/defs/vtiodefs):00304         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (/dd/defs/vtiodefs):00305         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (/dd/defs/vtiodefs):00306         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (/dd/defs/vtiodefs):00307         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (/dd/defs/vtiodefs):00308         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (/dd/defs/vtiodefs):00309         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (/dd/defs/vtiodefs):00310                        RMB       1                   unused                                       $2A
002B                  (/dd/defs/vtiodefs):00311         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (/dd/defs/vtiodefs):00312         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (/dd/defs/vtiodefs):00313         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (/dd/defs/vtiodefs):00314         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (/dd/defs/vtiodefs):00315         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (/dd/defs/vtiodefs):00316         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (/dd/defs/vtiodefs):00317         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (/dd/defs/vtiodefs):00318         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (/dd/defs/vtiodefs):00319         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (/dd/defs/vtiodefs):00320         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (/dd/defs/vtiodefs):00321         CC3Parm        RMB       128-.               global parameter area
0080                  (/dd/defs/vtiodefs):00322         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (/dd/defs/vtiodefs):00323         CC3DSiz        EQU       .
                      (/dd/defs/vtiodefs):00324         
                      (/dd/defs/vtiodefs):00325         *****************************************************************************
                      (/dd/defs/vtiodefs):00326         * GrfInt/WindInt global memory area
                      (/dd/defs/vtiodefs):00327         * This area sits in system block 0 from $1000 to $10ff
     1000             (/dd/defs/vtiodefs):00328         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (/dd/defs/vtiodefs):00329                        ORG       0
0000                  (/dd/defs/vtiodefs):00330         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (/dd/defs/vtiodefs):00331         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (/dd/defs/vtiodefs):00332         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (/dd/defs/vtiodefs):00333         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (/dd/defs/vtiodefs):00334         *g0003    rmb   2          NEW: UNUSED
0005                  (/dd/defs/vtiodefs):00335         g0005          RMB       2                   Temp save in Windint RG
0007                  (/dd/defs/vtiodefs):00336         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (/dd/defs/vtiodefs):00337         G.MonTyp       RMB       1                   monitor type
     000A             (/dd/defs/vtiodefs):00338         g000A          EQU       .                   Old label for compatibility
000A                  (/dd/defs/vtiodefs):00339         G.CrDvFl       RMB       1                   Are we current device flag (only set when all
                      (/dd/defs/vtiodefs):00340         *                           Parms have been moved to Dev Mem)
                      (/dd/defs/vtiodefs):00341         *                           0=We are not on our device
                      (/dd/defs/vtiodefs):00342         *                           1=We are the current device
                      (/dd/defs/vtiodefs):00343         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (/dd/defs/vtiodefs):00344         *                            whether or not to update GIME regs themselves
                      (/dd/defs/vtiodefs):00345         *                            If not current device, they don't.)
000B                  (/dd/defs/vtiodefs):00346         G.WinType      RMB       1                   current device's V.TYPE
000C                  (/dd/defs/vtiodefs):00347         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (/dd/defs/vtiodefs):00348         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (/dd/defs/vtiodefs):00349         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (/dd/defs/vtiodefs):00350         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (/dd/defs/vtiodefs):00351         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (/dd/defs/vtiodefs):00352         G.BelVec       RMB       2                   BELL routine vector
0019                  (/dd/defs/vtiodefs):00353         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (/dd/defs/vtiodefs):00354         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (/dd/defs/vtiodefs):00355         G.BelTnF       RMB       1                   BELL tone flag
001D                  (/dd/defs/vtiodefs):00356         g001D          RMB       3
0020                  (/dd/defs/vtiodefs):00357         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (/dd/defs/vtiodefs):00358         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (/dd/defs/vtiodefs):00359         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (/dd/defs/vtiodefs):00360         *                           00000010 : VDGInt found
                      (/dd/defs/vtiodefs):00361         *                           10000000 : GrfDrv found
0025                  (/dd/defs/vtiodefs):00362         g0025          RMB       1
0026                  (/dd/defs/vtiodefs):00363         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (/dd/defs/vtiodefs):00364         *         IFEQ  TC9-true
                      (/dd/defs/vtiodefs):00365         *CurLght  rmb   1          current keyboard light settings
                      (/dd/defs/vtiodefs):00366         *         ELSE  
0027                  (/dd/defs/vtiodefs):00367         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (/dd/defs/vtiodefs):00368         *         ENDC  
0028                  (/dd/defs/vtiodefs):00369         G.LKeyCd       RMB       1                   last keyboard code
0029                  (/dd/defs/vtiodefs):00370         G.KyRept       RMB       1                   key repeat counter
                      (/dd/defs/vtiodefs):00371         * A secondary 3 key table (same format as g002D below)
002A                  (/dd/defs/vtiodefs):00372         G.2Key1        RMB       1                   $2A
002B                  (/dd/defs/vtiodefs):00373         G.2Key2        RMB       1                   $2B
002C                  (/dd/defs/vtiodefs):00374         G.2Key3        RMB       1
                      (/dd/defs/vtiodefs):00375         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (/dd/defs/vtiodefs):00376         * than 3 are hit, the last key is overwritten with the very last key down that
                      (/dd/defs/vtiodefs):00377         * was checked. Format for all three is the same as the PIA column/row byte @
                      (/dd/defs/vtiodefs):00378         * KeyFlag below.
002D                  (/dd/defs/vtiodefs):00379         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (/dd/defs/vtiodefs):00380         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (/dd/defs/vtiodefs):00381         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (/dd/defs/vtiodefs):00382         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (/dd/defs/vtiodefs):00383         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (/dd/defs/vtiodefs):00384         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (/dd/defs/vtiodefs):00385         *                           %00000111-Column # (Output, 0-7)
                      (/dd/defs/vtiodefs):00386         *                           %00111000-Row # (Input, 0-6)
0033                  (/dd/defs/vtiodefs):00387         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (/dd/defs/vtiodefs):00388         G.KySns        RMB       1                   key sense byte
0035                  (/dd/defs/vtiodefs):00389         G.KySame       RMB       1                   same key flag
0036                  (/dd/defs/vtiodefs):00390         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (/dd/defs/vtiodefs):00391                        RMB       1
0038                  (/dd/defs/vtiodefs):00392         g0038          RMB       1                   grfdrv initialized flag
0039                  (/dd/defs/vtiodefs):00393                        RMB       2
003B                  (/dd/defs/vtiodefs):00394         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (/dd/defs/vtiodefs):00395         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (/dd/defs/vtiodefs):00396         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (/dd/defs/vtiodefs):00397         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (/dd/defs/vtiodefs):00398         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (/dd/defs/vtiodefs):00399         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (/dd/defs/vtiodefs):00400         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (/dd/defs/vtiodefs):00401         *         IFEQ  TC9-true
                      (/dd/defs/vtiodefs):00402         *KeyParm  rmb   1          keyboard command parameter byte
                      (/dd/defs/vtiodefs):00403         *         ELSE  
0063                  (/dd/defs/vtiodefs):00404         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (/dd/defs/vtiodefs):00405         *         ENDC  
0064                  (/dd/defs/vtiodefs):00406         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (/dd/defs/vtiodefs):00407         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (/dd/defs/vtiodefs):00408         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (/dd/defs/vtiodefs):00409         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (/dd/defs/vtiodefs):00410         G.CoTble       RMB       6                   co-module table ($68)
006E                  (/dd/defs/vtiodefs):00411         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (/dd/defs/vtiodefs):00412         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (/dd/defs/vtiodefs):00413         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (/dd/defs/vtiodefs):00414         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (/dd/defs/vtiodefs):00415         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (/dd/defs/vtiodefs):00416         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (/dd/defs/vtiodefs):00417         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (/dd/defs/vtiodefs):00418         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (/dd/defs/vtiodefs):00419         g00BD          RMB       1                   Current screen type for work window table
00BE                  (/dd/defs/vtiodefs):00420         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (/dd/defs/vtiodefs):00421         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (/dd/defs/vtiodefs):00422         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (/dd/defs/vtiodefs):00423         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (/dd/defs/vtiodefs):00424         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (/dd/defs/vtiodefs):00425         G.MsSig        RMB       1                   mouse signal flag
00C7                  (/dd/defs/vtiodefs):00426         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (/dd/defs/vtiodefs):00427         g00D7          RMB       9
00E0                  (/dd/defs/vtiodefs):00428         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (/dd/defs/vtiodefs):00429         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (/dd/defs/vtiodefs):00430         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (/dd/defs/vtiodefs):00431         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (/dd/defs/vtiodefs):00432         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (/dd/defs/vtiodefs):00433         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (/dd/defs/vtiodefs):00434         
                      (/dd/defs/vtiodefs):00435         *****************************************************************************
                      (/dd/defs/vtiodefs):00436         * GrfDrv global memory data definitions
                      (/dd/defs/vtiodefs):00437         * This area sits in system block 0 from $1100 to $119E
     1100             (/dd/defs/vtiodefs):00438         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (/dd/defs/vtiodefs):00439                        ORG       0
0000                  (/dd/defs/vtiodefs):00440         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (/dd/defs/vtiodefs):00441         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (/dd/defs/vtiodefs):00442         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (/dd/defs/vtiodefs):00443         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (/dd/defs/vtiodefs):00444         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (/dd/defs/vtiodefs):00445         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (/dd/defs/vtiodefs):00446         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (/dd/defs/vtiodefs):00447         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (/dd/defs/vtiodefs):00448         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (/dd/defs/vtiodefs):00449         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (/dd/defs/vtiodefs):00450         *                             overlay width has been copied
000B                  (/dd/defs/vtiodefs):00451         gr000B         RMB       1
000C                  (/dd/defs/vtiodefs):00452         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (/dd/defs/vtiodefs):00453         gr000E         RMB       1
000F                  (/dd/defs/vtiodefs):00454         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (/dd/defs/vtiodefs):00455         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (/dd/defs/vtiodefs):00456         gr0012         RMB       6
0018                  (/dd/defs/vtiodefs):00457         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (/dd/defs/vtiodefs):00458         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (/dd/defs/vtiodefs):00459         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (/dd/defs/vtiodefs):00460         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (/dd/defs/vtiodefs):00461         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (/dd/defs/vtiodefs):00462         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (/dd/defs/vtiodefs):00463         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (/dd/defs/vtiodefs):00464         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (/dd/defs/vtiodefs):00465         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (/dd/defs/vtiodefs):00466         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (/dd/defs/vtiodefs):00467         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (/dd/defs/vtiodefs):00468         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (/dd/defs/vtiodefs):00469         gr002C         RMB       2
002E                  (/dd/defs/vtiodefs):00470         gr002E         RMB       2                   current window table entry
0030                  (/dd/defs/vtiodefs):00471         gr0030         RMB       2                   current screen table ptr
0032                  (/dd/defs/vtiodefs):00472         gr0032         RMB       1                   Last block # we used for buffers
0033                  (/dd/defs/vtiodefs):00473         gr0033         RMB       2                   Last offset we used for buffers
0035                  (/dd/defs/vtiodefs):00474         gr0035         RMB       1                   group
0036                  (/dd/defs/vtiodefs):00475         gr0036         RMB       2                   offset
0038                  (/dd/defs/vtiodefs):00476         gr0038         RMB       1                   group returned (new)
0039                  (/dd/defs/vtiodefs):00477         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (/dd/defs/vtiodefs):00478         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (/dd/defs/vtiodefs):00479         gr003B         RMB       2                   end of vars ptr?
003D                  (/dd/defs/vtiodefs):00480         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (/dd/defs/vtiodefs):00481         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (/dd/defs/vtiodefs):00482         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (/dd/defs/vtiodefs):00483         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (/dd/defs/vtiodefs):00484         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (/dd/defs/vtiodefs):00485         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (/dd/defs/vtiodefs):00486         gr0047         RMB       2                   'Working' X coordinate
0049                  (/dd/defs/vtiodefs):00487         gr0049         RMB       2                   'Working' Y coordinate
004B                  (/dd/defs/vtiodefs):00488         gr004B         RMB       2                   current X
004D                  (/dd/defs/vtiodefs):00489         gr004D         RMB       2                   current Y
004F                  (/dd/defs/vtiodefs):00490         gr004F         RMB       2                   X Size (in bytes)
0051                  (/dd/defs/vtiodefs):00491         gr0051         RMB       2                   Y Size (in bytes)
0053                  (/dd/defs/vtiodefs):00492         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (/dd/defs/vtiodefs):00493         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (/dd/defs/vtiodefs):00494         gr0057         RMB       1                   group
0058                  (/dd/defs/vtiodefs):00495         gr0058         RMB       1                   buffer #
0059                  (/dd/defs/vtiodefs):00496         gr0059         RMB       1                   save switch for overlay
005A                  (/dd/defs/vtiodefs):00497         gr005A         RMB       1                   PRN
005B                  (/dd/defs/vtiodefs):00498         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (/dd/defs/vtiodefs):00499         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (/dd/defs/vtiodefs):00500         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (/dd/defs/vtiodefs):00501         Gr.STYMk       RMB       1                   STY marker
0061                  (/dd/defs/vtiodefs):00502         gr0061         RMB       1                   foreground RGB data
0062                  (/dd/defs/vtiodefs):00503         gr0062         RMB       1                   background RGB data
0063                  (/dd/defs/vtiodefs):00504         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (/dd/defs/vtiodefs):00505         gr0064         RMB       2                   PSet vector
0066                  (/dd/defs/vtiodefs):00506         gr0066         RMB       2                   pset offset
0068                  (/dd/defs/vtiodefs):00507         gr0068         RMB       2                   LSet vector
006A                  (/dd/defs/vtiodefs):00508         gr006A         RMB       2                   max X co-ordinate
006C                  (/dd/defs/vtiodefs):00509         gr006C         RMB       2                   max Y co-ordinate
006E                  (/dd/defs/vtiodefs):00510         gr006E         RMB       2                   X pixel count
0070                  (/dd/defs/vtiodefs):00511         gr0070         RMB       2                   Y pixel count
0072                  (/dd/defs/vtiodefs):00512         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (/dd/defs/vtiodefs):00513         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (/dd/defs/vtiodefs):00514         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (/dd/defs/vtiodefs):00515         gr0077         RMB       2                   Vector for right direction FFill
0079                  (/dd/defs/vtiodefs):00516         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (/dd/defs/vtiodefs):00517         gr007A         RMB       2                   Vector for left direction FFill
007C                  (/dd/defs/vtiodefs):00518         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (/dd/defs/vtiodefs):00519         gr007D         RMB       1                   buffer block #
007E                  (/dd/defs/vtiodefs):00520         gr007E         RMB       2                   buffer offset #
0080                  (/dd/defs/vtiodefs):00521         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (/dd/defs/vtiodefs):00522         gr0082         RMB       3                   3 byte extended screen address
0085                  (/dd/defs/vtiodefs):00523         gr0085         RMB       2                   temp
0087                  (/dd/defs/vtiodefs):00524         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (/dd/defs/vtiodefs):00525         gr0097         RMB       1                   temp
0098                  (/dd/defs/vtiodefs):00526         gr0098         RMB       1                   temp
                      (/dd/defs/vtiodefs):00527         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (/dd/defs/vtiodefs):00528         gr0099         RMB       2                   temp
                      (/dd/defs/vtiodefs):00529         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (/dd/defs/vtiodefs):00530         gr009B         RMB       1                   counter temp
009C                  (/dd/defs/vtiodefs):00531         gr009C         RMB       1
009D                  (/dd/defs/vtiodefs):00532         gr009D         RMB       2                   offset to buffer in block
009F                  (/dd/defs/vtiodefs):00533         gr009F         RMB       1
00A0                  (/dd/defs/vtiodefs):00534         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (/dd/defs/vtiodefs):00535         gr00A1         RMB       2                   vector routine for (changes lots)
                      (/dd/defs/vtiodefs):00536         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (/dd/defs/vtiodefs):00537         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (/dd/defs/vtiodefs):00538         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (/dd/defs/vtiodefs):00539         gr00A7         RMB       2
00A9                  (/dd/defs/vtiodefs):00540         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (/dd/defs/vtiodefs):00541         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (/dd/defs/vtiodefs):00542         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (/dd/defs/vtiodefs):00543         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (/dd/defs/vtiodefs):00544         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (/dd/defs/vtiodefs):00545         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (/dd/defs/vtiodefs):00546         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (/dd/defs/vtiodefs):00547         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (/dd/defs/vtiodefs):00548         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (/dd/defs/vtiodefs):00549         gr00B5         RMB       1                   regW for grfdrv
00B6                  (/dd/defs/vtiodefs):00550         gr00B6         RMB       1
00B7                  (/dd/defs/vtiodefs):00551         gr00B7         RMB       2
00B9                  (/dd/defs/vtiodefs):00552         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (/dd/defs/vtiodefs):00553         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (/dd/defs/vtiodefs):00554         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (/dd/defs/vtiodefs):00555         gr00BF         RMB       256-.
                      (/dd/defs/vtiodefs):00556         * GPLoad buffer - $1200 in system block 0
0100                  (/dd/defs/vtiodefs):00557         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (/dd/defs/vtiodefs):00558         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (/dd/defs/vtiodefs):00559         
                      (/dd/defs/vtiodefs):00560         *****************************************************************************
                      (/dd/defs/vtiodefs):00561         * Window table entry structure
                      (/dd/defs/vtiodefs):00562         * These tables sit in system block 0 and there is 1 for every window init'd
                      (/dd/defs/vtiodefs):00563         * including any overlay windows.
     0020             (/dd/defs/vtiodefs):00564         MaxWind        EQU       32                  maximum allowable window tables
     1290             (/dd/defs/vtiodefs):00565         WinBase        EQU       $1290               base address to start of window tables
                      (/dd/defs/vtiodefs):00566                        ORG       -$10
FFF0                  (/dd/defs/vtiodefs):00567         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (/dd/defs/vtiodefs):00568         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (/dd/defs/vtiodefs):00569         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (/dd/defs/vtiodefs):00570         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (/dd/defs/vtiodefs):00571         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (/dd/defs/vtiodefs):00572         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (/dd/defs/vtiodefs):00573         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (/dd/defs/vtiodefs):00574         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (/dd/defs/vtiodefs):00575         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (/dd/defs/vtiodefs):00576         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (/dd/defs/vtiodefs):00577         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (/dd/defs/vtiodefs):00578         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (/dd/defs/vtiodefs):00579         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (/dd/defs/vtiodefs):00580         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (/dd/defs/vtiodefs):00581         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (/dd/defs/vtiodefs):00582         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (/dd/defs/vtiodefs):00583         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (/dd/defs/vtiodefs):00584         Wt.Back        RMB       1                   background palette #                         $07
0008                  (/dd/defs/vtiodefs):00585         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (/dd/defs/vtiodefs):00586         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (/dd/defs/vtiodefs):00587         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (/dd/defs/vtiodefs):00588         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (/dd/defs/vtiodefs):00589         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (/dd/defs/vtiodefs):00590         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (/dd/defs/vtiodefs):00591         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (/dd/defs/vtiodefs):00592         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (/dd/defs/vtiodefs):00593         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (/dd/defs/vtiodefs):00594         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (/dd/defs/vtiodefs):00595         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (/dd/defs/vtiodefs):00596         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (/dd/defs/vtiodefs):00597         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (/dd/defs/vtiodefs):00598         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (/dd/defs/vtiodefs):00599         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (/dd/defs/vtiodefs):00600         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (/dd/defs/vtiodefs):00601         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (/dd/defs/vtiodefs):00602         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (/dd/defs/vtiodefs):00603         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (/dd/defs/vtiodefs):00604         * NOTE: The following default settings are what the window was initialized
                      (/dd/defs/vtiodefs):00605         *       with, and thus are the MAXIMUM start/size the window can handle
                      (/dd/defs/vtiodefs):00606         *       until it is restarted (DWEnd & DWSet)
                      (/dd/defs/vtiodefs):00607         *       They also appear to be used in WindInt to determine the coords &
                      (/dd/defs/vtiodefs):00608         *       sizes for control+content regions
0026                  (/dd/defs/vtiodefs):00609         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (/dd/defs/vtiodefs):00610         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (/dd/defs/vtiodefs):00611         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (/dd/defs/vtiodefs):00612         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (/dd/defs/vtiodefs):00613         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (/dd/defs/vtiodefs):00614         Wt.Siz         EQU       .+$10
                      (/dd/defs/vtiodefs):00615         
                      (/dd/defs/vtiodefs):00616         *****************************************************************************
                      (/dd/defs/vtiodefs):00617         * Screen table entrys
                      (/dd/defs/vtiodefs):00618         * These tables sit in system block 0 base=$1A80
                      (/dd/defs/vtiodefs):00619         
     0010             (/dd/defs/vtiodefs):00620         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (/dd/defs/vtiodefs):00621         STblBse        EQU       $1A80               base address of screen tables
                      (/dd/defs/vtiodefs):00622                        ORG       0
0000                  (/dd/defs/vtiodefs):00623         St.Sty         RMB       1                   Screen type                         $00
0001                  (/dd/defs/vtiodefs):00624         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (/dd/defs/vtiodefs):00625         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (/dd/defs/vtiodefs):00626         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (/dd/defs/vtiodefs):00627         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (/dd/defs/vtiodefs):00628         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (/dd/defs/vtiodefs):00629         St.Back        RMB       1                   Background palette register #       $07
0008                  (/dd/defs/vtiodefs):00630         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (/dd/defs/vtiodefs):00631         St.Res         RMB       7                   UNUSED???                           $09
                      (/dd/defs/vtiodefs):00632         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (/dd/defs/vtiodefs):00633         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (/dd/defs/vtiodefs):00634         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (/dd/defs/vtiodefs):00635         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (/dd/defs/vtiodefs):00636         St.Pals        RMB       16                  Palette register contents           $10
     0020             (/dd/defs/vtiodefs):00637         St.Siz         EQU       .
                      (/dd/defs/vtiodefs):00638         
                      (/dd/defs/vtiodefs):00639         *****************************************************************************
                      (/dd/defs/vtiodefs):00640         * Graphics buffer tables
                      (/dd/defs/vtiodefs):00641         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (/dd/defs/vtiodefs):00642         * data.
                      (/dd/defs/vtiodefs):00643                        ORG       0
0000                  (/dd/defs/vtiodefs):00644         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (/dd/defs/vtiodefs):00645         Grf.Off        RMB       2                   back block header offset            $01
0003                  (/dd/defs/vtiodefs):00646         Grf.Grp        RMB       1                   group #                             $03
0004                  (/dd/defs/vtiodefs):00647         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (/dd/defs/vtiodefs):00648         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (/dd/defs/vtiodefs):00649         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (/dd/defs/vtiodefs):00650         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (/dd/defs/vtiodefs):00651         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (/dd/defs/vtiodefs):00652         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (/dd/defs/vtiodefs):00653         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (/dd/defs/vtiodefs):00654         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (/dd/defs/vtiodefs):00655         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (/dd/defs/vtiodefs):00656         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (/dd/defs/vtiodefs):00657         Grf.Siz        EQU       .                   $20
                      (/dd/defs/vtiodefs):00658         
                      (/dd/defs/vtiodefs):00659         *****************************************************************************
                      (/dd/defs/vtiodefs):00660         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (/dd/defs/vtiodefs):00661         * $1075-$0176
                      (/dd/defs/vtiodefs):00662         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (/dd/defs/vtiodefs):00663                        ORG       0
0000                  (/dd/defs/vtiodefs):00664         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (/dd/defs/vtiodefs):00665         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (/dd/defs/vtiodefs):00666         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (/dd/defs/vtiodefs):00667         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (/dd/defs/vtiodefs):00668         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (/dd/defs/vtiodefs):00669         Gt.BClr        RMB       1                   Background color                               $08
0009                  (/dd/defs/vtiodefs):00670         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (/dd/defs/vtiodefs):00671         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (/dd/defs/vtiodefs):00672         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (/dd/defs/vtiodefs):00673         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (/dd/defs/vtiodefs):00674         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (/dd/defs/vtiodefs):00675         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (/dd/defs/vtiodefs):00676         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (/dd/defs/vtiodefs):00677         GTabSz         EQU       .
                      (/dd/defs/vtiodefs):00678         
                      (/dd/defs/vtiodefs):00679         *****************************************************************************
                      (/dd/defs/vtiodefs):00680         * This table is located in the graphics table memory and is offset from
                      (/dd/defs/vtiodefs):00681         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (/dd/defs/vtiodefs):00682         * WindInt.
                      (/dd/defs/vtiodefs):00683         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (/dd/defs/vtiodefs):00684         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (/dd/defs/vtiodefs):00685         *  COMBINATION EVERY TIME
                      (/dd/defs/vtiodefs):00686                        ORG       $0240
0240                  (/dd/defs/vtiodefs):00687                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (/dd/defs/vtiodefs):00688                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (/dd/defs/vtiodefs):00689                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (/dd/defs/vtiodefs):00690                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (/dd/defs/vtiodefs):00691         
                      (/dd/defs/vtiodefs):00692         *****************************************************************************
                      (/dd/defs/vtiodefs):00693         * WindInt menu handling table entry definition
                      (/dd/defs/vtiodefs):00694                        ORG       0
0000                  (/dd/defs/vtiodefs):00695         MnuXNum        RMB       1                   menu #
0001                  (/dd/defs/vtiodefs):00696         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (/dd/defs/vtiodefs):00697         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (/dd/defs/vtiodefs):00698                        RMB       1                   unused?
     0004             (/dd/defs/vtiodefs):00699         MnuHSiz        EQU       .
                      (/dd/defs/vtiodefs):00700         
                      (/dd/defs/vtiodefs):00701         *****************************************************************************
                      (/dd/defs/vtiodefs):00702         * Character binary switches
     0080             (/dd/defs/vtiodefs):00703         TChr           EQU       %10000000           transparent characters
     0040             (/dd/defs/vtiodefs):00704         Under          EQU       %01000000           underline characters
     0020             (/dd/defs/vtiodefs):00705         Bold           EQU       %00100000           bold characters
     0010             (/dd/defs/vtiodefs):00706         Prop           EQU       %00010000           proportional spacing of characters
     0008             (/dd/defs/vtiodefs):00707         Scale          EQU       %00001000           automatic window scaling
     0004             (/dd/defs/vtiodefs):00708         Invers         EQU       %00000100           inverse characters
     0002             (/dd/defs/vtiodefs):00709         NoCurs         EQU       %00000010           no cursor display
     0001             (/dd/defs/vtiodefs):00710         Protect        EQU       %00000001           device window protection
                      (/dd/defs/vtiodefs):00711         
                      (/dd/defs/vtiodefs):00712         *****************************************************************************
                      (/dd/defs/vtiodefs):00713         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (/dd/defs/vtiodefs):00714         Current        EQU       $ff                 Current screen
                      (/dd/defs/vtiodefs):00715         *         equ   1          640x200x2
                      (/dd/defs/vtiodefs):00716         *         equ   2          320x200x4
                      (/dd/defs/vtiodefs):00717         *         equ   3          640x200x4
                      (/dd/defs/vtiodefs):00718         *         equ   4          320x200x16
                      (/dd/defs/vtiodefs):00719         *         equ   $85        80 column text
                      (/dd/defs/vtiodefs):00720         *         equ   $86        40 column text
                      (/dd/defs/vtiodefs):00721         
                      (/dd/defs/vtiodefs):00722         *************************************
                      (/dd/defs/vtiodefs):00723         * Window default palette color codes
                      (/dd/defs/vtiodefs):00724         *
                      (/dd/defs/vtiodefs):00725         *strickyak*                ORG       0
                      (/dd/defs/vtiodefs):00726         *strickyak* White.         RMB       1
                      (/dd/defs/vtiodefs):00727         *strickyak* Blue.          RMB       1
                      (/dd/defs/vtiodefs):00728         *strickyak* Black.         RMB       1
                      (/dd/defs/vtiodefs):00729         *strickyak* Green.         RMB       1
                      (/dd/defs/vtiodefs):00730         *strickyak* Red.           RMB       1
                      (/dd/defs/vtiodefs):00731         *strickyak* Yellow.        RMB       1
                      (/dd/defs/vtiodefs):00732         *strickyak* Magenta.       RMB       1
                      (/dd/defs/vtiodefs):00733         *strickyak* Cyan.          RMB       1
                      (/dd/defs/vtiodefs):00734         
                      (/dd/defs/vtiodefs):00735                        ENDC      
                      (/dd/defs/vtiodefs):00736         
                      (         defsfile):00017          use /dd/defs/systype
                      ( /dd/defs/systype):00001          opt -l
                      ( /dd/defs/systype):00002          ttl System Type Definitions
                      ( /dd/defs/systype):00003          page
                      ( /dd/defs/systype):00004         ************************************
                      ( /dd/defs/systype):00005         *
                      ( /dd/defs/systype):00006         *     CPU Type Definitions
                      ( /dd/defs/systype):00007         *
                      ( /dd/defs/systype):00008          org 10
000A                  ( /dd/defs/systype):00009         Color rmb 1
                      ( /dd/defs/systype):00010         
                      ( /dd/defs/systype):00011         ************************************
                      ( /dd/defs/systype):00012         *
                      ( /dd/defs/systype):00013         *    Power Line Frequency Definitions
                      ( /dd/defs/systype):00014         *
     0001             ( /dd/defs/systype):00015         Hz50 equ 1 Assemble clock for 50 hz power
     0002             ( /dd/defs/systype):00016         Hz60 equ 2 Assemble clock for 60 hz power
     0002             ( /dd/defs/systype):00017         PwrLnFrq set Hz60 Set to Appropriate freq
                      ( /dd/defs/systype):00018         
                      ( /dd/defs/systype):00019         
                      ( /dd/defs/systype):00020         ************************************
                      ( /dd/defs/systype):00021         * ACIA type set up
                      ( /dd/defs/systype):00022         *
                      ( /dd/defs/systype):00023          org 1
0001                  ( /dd/defs/systype):00024         ACIA6850 rmb 1 MC6850 acia.
0002                  ( /dd/defs/systype):00025         ACIA6551 rmb 1 SY6551 acia.
0003                  ( /dd/defs/systype):00026         ACIA2661 rmb 1 SC2661 acia.
     0002             ( /dd/defs/systype):00027         ACIATYPE set ACIA6551
                      ( /dd/defs/systype):00028         
                      ( /dd/defs/systype):00029         
                      ( /dd/defs/systype):00030         ************************************
                      ( /dd/defs/systype):00031         * Specific System definitions
                      ( /dd/defs/systype):00032         *
     000A             ( /dd/defs/systype):00033         CPUType set Color
     0000             ( /dd/defs/systype):00034         ClocType set 0
     FF40             ( /dd/defs/systype):00035         DPort set $FF40 Disk controller address
     0002             ( /dd/defs/systype):00036         ACIAType set ACIA6551
     FF68             ( /dd/defs/systype):00037         A.AciaP set $FF68 6551 ACIAPak Address
     FF6C             ( /dd/defs/systype):00038         A.ModP set $FF6C Modem Pak Address
                      ( /dd/defs/systype):00039         
                      ( /dd/defs/systype):00040          opt l
                      (         defsfile):00018          use /dd/defs/releasedefs
                      (/dd/defs/released):00001         * Release defsfile for all versions of NitrOS-9
                      (/dd/defs/released):00002         *
                      (/dd/defs/released):00003         *
                      (/dd/defs/released):00004         * NitrOS-9 Version equates
     0003             (/dd/defs/released):00005         NOS9Vrsn  equ   3
     0002             (/dd/defs/released):00006         NOS9Major equ   2
     0001             (/dd/defs/released):00007         NOS9Minor equ   1
                      (    boot_1773.asm):00048                  ENDC
                      (    boot_1773.asm):00049         
                      (    boot_1773.asm):00050         * FDC Control Register bits at $FF40
     0080             (    boot_1773.asm):00051         HALTENA  equ   %10000000
     0040             (    boot_1773.asm):00052         SIDESEL  equ   %01000000        DRVSEL3 if no DS drives
     0020             (    boot_1773.asm):00053         DDEN     equ   %00100000
     0010             (    boot_1773.asm):00054         READY    equ   %00010000        READY for Tandy WD1773-based controllers
     0008             (    boot_1773.asm):00055         MOTON    equ   %00001000
     0004             (    boot_1773.asm):00056         DRVSEL2  equ   %00000100
     0002             (    boot_1773.asm):00057         DRVSEL1  equ   %00000010
     0001             (    boot_1773.asm):00058         DRVSEL0  equ   %00000001
                      (    boot_1773.asm):00059         
                      (    boot_1773.asm):00060         * Default Boot is from drive 0
     0001             (    boot_1773.asm):00061         BootDr   set DRVSEL0
                      (    boot_1773.asm):00062                  IFEQ  DNum-1
0004                  (    boot_1773.asm):00063         BootDr   set DRVSEL1            Alternate boot from drive 1
                      (    boot_1773.asm):00064                  ENDC
                      (    boot_1773.asm):00065                  IFEQ  DNum-2
0004                  (    boot_1773.asm):00066         BootDr   set DRVSEL2            Alternate boot from drive 2
                      (    boot_1773.asm):00067                  ENDC
                      (    boot_1773.asm):00068                  IFEQ  DNum-3
0004                  (    boot_1773.asm):00069         BootDr   set SIDESEL            Alternate boot from drive 3
                      (    boot_1773.asm):00070                  ENDC
                      (    boot_1773.asm):00071         
                      (    boot_1773.asm):00072         * WD17x3 DPort offsets
     0000             (    boot_1773.asm):00073         CONTROL  equ   0
     0008             (    boot_1773.asm):00074         CMDREG   equ   8+0              write-only
     0008             (    boot_1773.asm):00075         STATREG  equ   CMDREG           read-only
     0009             (    boot_1773.asm):00076         TRACKREG equ   8+1
     000A             (    boot_1773.asm):00077         SECTREG  equ   8+2
     000B             (    boot_1773.asm):00078         DATAREG  equ   8+3
                      (    boot_1773.asm):00079         
                      (    boot_1773.asm):00080         * Sector Size
     0100             (    boot_1773.asm):00081         SECTSIZE equ   256
                      (    boot_1773.asm):00082         
                      (    boot_1773.asm):00083         * Step Rates:
                      (    boot_1773.asm):00084         *       $00  = 6ms
                      (    boot_1773.asm):00085         *       $01  = 12ms
                      (    boot_1773.asm):00086         *       $02  = 20ms
                      (    boot_1773.asm):00087         *       $03  = 30ms
                      (    boot_1773.asm):00088                  IFNDEF STEP
     0000             (    boot_1773.asm):00089         STEP     set   $00
                      (    boot_1773.asm):00090                  ENDC
                      (    boot_1773.asm):00091         
     00C1             (    boot_1773.asm):00092         tylg     set   Systm+Objct
     0080             (    boot_1773.asm):00093         atrv     set   ReEnt+rev
     0000             (    boot_1773.asm):00094         rev      set   $00
     0009             (    boot_1773.asm):00095         edition  set   9
                      (    boot_1773.asm):00096         
0000 87CD01D0000DC180 (    boot_1773.asm):00097                  mod   eom,name,tylg,atrv,start,size
     28003B000F
                      (    boot_1773.asm):00098         
                      (    boot_1773.asm):00099         * NOTE: these are U-stack offsets, not DP
0000.                 (    boot_1773.asm):00100         seglist  rmb   2                                                pointer to segment list
0002.                 (    boot_1773.asm):00101         blockloc rmb   2                       pointer to memory requested
0004.                 (    boot_1773.asm):00102         blockimg rmb   2                       duplicate of the above
0006.                 (    boot_1773.asm):00103         bootsize rmb   2                       size in bytes
0008.                 (    boot_1773.asm):00104         LSN0Ptr  rmb   2                In memory LSN0 pointer
000A.                 (    boot_1773.asm):00105         drvsel   rmb   1
000B.                 (    boot_1773.asm):00106         currtrak rmb   1
                      (    boot_1773.asm):00107         * Note, for optimization purposes, the following two variables
                      (    boot_1773.asm):00108         * should be adjacent!!
000C.                 (    boot_1773.asm):00109         ddtks    rmb   1                no. of sectors per track
000D.                 (    boot_1773.asm):00110         ddfmt    rmb   1
000E.                 (    boot_1773.asm):00111         side     rmb   1                side 2 flag
     000F             (    boot_1773.asm):00112         size     equ   .
                      (    boot_1773.asm):00113         
000D 426F6FF4         (    boot_1773.asm):00114         name     fcs   /Boot/
0011 09               (    boot_1773.asm):00115                  fcb   edition
                      (    boot_1773.asm):00116         
                      (    boot_1773.asm):00117         * Common booter-required defines
     0000             (    boot_1773.asm):00118         LSN24BIT equ   0
     0001             (    boot_1773.asm):00119         FLOPPY   equ   1
                      (    boot_1773.asm):00120         
                      (    boot_1773.asm):00121         * HWInit - Initialize the device
                      (    boot_1773.asm):00122         *   Entry: Y = hardware address
                      (    boot_1773.asm):00123         *   Exit:  Carry Clear = OK, Set = Error
                      (    boot_1773.asm):00124         *          B = error (Carry Set)
0012                  (    boot_1773.asm):00125         HWInit
0012 86D0             (    boot_1773.asm):00126                  lda   #%11010000               ($D0) Force Interrupt (stops any command in progress)
0014 A728             (    boot_1773.asm):00127                  sta   CMDREG,y                 write command to command register
0016 170184           (    boot_1773.asm):00128                  lbsr  Delay2                   delay 54~
0019 A628             (    boot_1773.asm):00129                  lda   STATREG,y                clear status register
001B 86FF             (    boot_1773.asm):00130                  lda   #$FF
001D A74B             (    boot_1773.asm):00131                  sta   currtrak,u               set current track to 255
001F 308D0107         (    boot_1773.asm):00132                  leax  >NMIRtn,pcr              point to NMI routine
                      (    boot_1773.asm):00133                  IFGT  Level-1
0023 9F36             (    boot_1773.asm):00134                  stx   <D.NMI                   save address
                      (    boot_1773.asm):00135                  ELSE
                      (    boot_1773.asm):00136                  stx   >D.XNMI+1                save address
                      (    boot_1773.asm):00137                  lda   #$7E
                      (    boot_1773.asm):00138                  sta   >D.XNMI
                      (    boot_1773.asm):00139                  ENDC
0025 8608             (    boot_1773.asm):00140                  lda   #MOTON                   turn on drive motor
0027 AA8D01A1         (    boot_1773.asm):00141                  ora   WhichDrv,pcr
002B A7A4             (    boot_1773.asm):00142                  sta   CONTROL,y
                      (    boot_1773.asm):00143         * MOTOR ON spin-up delay loop (~307 mSec)
                      (    boot_1773.asm):00144                  IFGT  Level-1
                      (    boot_1773.asm):00145                  IFNE  H6309
002D CCF000           (    boot_1773.asm):00146                  ldd   #$F000        3 cycles
                      (    boot_1773.asm):00147                  ELSE
                      (    boot_1773.asm):00148                  ldd   #50000
                      (    boot_1773.asm):00149                  ENDC 
                      (    boot_1773.asm):00150                  ELSE
                      (    boot_1773.asm):00151                  ldd   #25000 
                      (    boot_1773.asm):00152                  ENDC
                      (    boot_1773.asm):00153         *         IFNE  H6309
                      (    boot_1773.asm):00154         *         nop
                      (    boot_1773.asm):00155         *         ENDC
0030 12               (    boot_1773.asm):00156         L003A    nop             1 cycles
0031 12               (    boot_1773.asm):00157                  nop             1 cycles
                      (    boot_1773.asm):00158         *         IFNE  H6309
                      (    boot_1773.asm):00159         *         nop
                      (    boot_1773.asm):00160         *         nop
                      (    boot_1773.asm):00161         *         nop
                      (    boot_1773.asm):00162         *         ENDC
0032 830001           (    boot_1773.asm):00163                  subd  #$0001    4 cycles
0035 26F9             (    boot_1773.asm):00164                  bne   L003A     3 cycles
                      (    boot_1773.asm):00165         * HWTerm - Terminate the device
                      (    boot_1773.asm):00166         *   Entry: Y = hardware address
                      (    boot_1773.asm):00167         *   Exit:  Carry Clear = OK, Set = Error
                      (    boot_1773.asm):00168         *          B = error (Carry Set)
0037 5F               (    boot_1773.asm):00169         HWTerm   clrb
0038 E7A4             (    boot_1773.asm):00170                  stb   CONTROL,y        turn off all drive motors (BGP)
003A 39               (    boot_1773.asm):00171                  rts
                      (    boot_1773.asm):00172         
                      (    boot_1773.asm):00173         
                      (    boot_1773.asm):00174                  use   boot_common.asm
                      (  boot_common.asm):00001         ********************************************************************
                      (  boot_common.asm):00002         * Boot Common - Common code for NitrOS-9 booters
                      (  boot_common.asm):00003         *
                      (  boot_common.asm):00004         * $Id$
                      (  boot_common.asm):00005         *
                      (  boot_common.asm):00006         * This common file is not a stand-alone module, but is 'used' by boot module
                      (  boot_common.asm):00007         * source files to bring in support for booting from RBF file systems that have
                      (  boot_common.asm):00008         * either standard or new-style fragmented bootfiles.
                      (  boot_common.asm):00009         *
                      (  boot_common.asm):00010         * This code uses several static variables which are expected to be defined in
                      (  boot_common.asm):00011         * the main boot source code.  See a booter like boot_1773.asm for an example on
                      (  boot_common.asm):00012         * how to write a booter which uses this code.
                      (  boot_common.asm):00013         *
                      (  boot_common.asm):00014         * Important Notes:
                      (  boot_common.asm):00015         * For certain devices, only the lower 16 bits of DD.BT are used.  This special
                      (  boot_common.asm):00016         * case allows us to save some code by ignoring the loading LSN bits 23-16 in
                      (  boot_common.asm):00017         * DD.BT and FDSL.A.  Booters for such devices (floppy, RAMPak) should have the
                      (  boot_common.asm):00018         * following line in their code to take advantage of this optimization:
                      (  boot_common.asm):00019         *
                      (  boot_common.asm):00020         * LSN24BIT equ 0
                      (  boot_common.asm):00021         *
                      (  boot_common.asm):00022         * Floppy booters require the acquistion of DD.TKS and DD.FMT from LSN0 to make
                      (  boot_common.asm):00023         * certain decisions about the boot process.  In most cases, non-floppy booters
                      (  boot_common.asm):00024         * do not need these values.  Hence, floppy booters should have this line in their
                      (  boot_common.asm):00025         * source code file:
                      (  boot_common.asm):00026         *
                      (  boot_common.asm):00027         * FLOPPY equ 1
                      (  boot_common.asm):00028         *
                      (  boot_common.asm):00029         * Edt/Rev  YYYY/MM/DD  Modified by
                      (  boot_common.asm):00030         * Comment
                      (  boot_common.asm):00031         * ------------------------------------------------------------------
                      (  boot_common.asm):00032         *          2005/10/14  Boisy G. Pitre
                      (  boot_common.asm):00033         * Created as a stand-alone file.
                      (  boot_common.asm):00034         *
                      (  boot_common.asm):00035         *          2005/10/16  Boisy G. Pitre
                      (  boot_common.asm):00036         * Further optimizations made
                      (  boot_common.asm):00037         *
                      (  boot_common.asm):00038         *          2006/01/04  P.Harvey-Smith.
                      (  boot_common.asm):00039         * Added pointer to loaded LSN0 to data passed to hardware dependent section.
                      (  boot_common.asm):00040         *
                      (  boot_common.asm):00041         *          2007/08/23  Boisy G. Pitre
                      (  boot_common.asm):00042         * Added 'subd #$00FF' to counteract earlier 'addd #$00FF'.  We need to undo
                      (  boot_common.asm):00043         * to give F$SRqMem the right amount of memory to allocate.
                      (  boot_common.asm):00044         *
                      (  boot_common.asm):00045         *          2007/08/24  Boisy G. Pitre
                      (  boot_common.asm):00046         * We no longer use F$SRqMem to get the 256 byte buffer for LSN0, but
                      (  boot_common.asm):00047         * instead allocate the memory temporarily off the stack.  This gives us
                      (  boot_common.asm):00048         * two system ram pages that were not available before, and also prevents
                      (  boot_common.asm):00049         * a needless system call.
                      (  boot_common.asm):00050         * Note: For Level 1, we actually use the page above the stack at $500-$5FF
                      (  boot_common.asm):00051         * to hold LSN0 during the bootfile acquisition process. This is because the
                      (  boot_common.asm):00052         * system stack is only 256 bytes and we are using more than that.  Since
                      (  boot_common.asm):00053         * the module directory table is at $400-$4FF, we must do this; otherwise, we
                      (  boot_common.asm):00054         * would overwrite the bottom portion of the module directory table and corrupt
                      (  boot_common.asm):00055         * it (it's already setup by krn before boot is called!)
                      (  boot_common.asm):00056                                  
003B 1A50             (  boot_common.asm):00057         start    orcc  #IntMasks  ensure IRQs are off (necessary?)
                      (  boot_common.asm):00058         * allocate memory on stack for vars and sector buffer
                      (  boot_common.asm):00059                          IFEQ  Level-1
                      (  boot_common.asm):00060         * Level 1: stack is only 256 bytes and its bottom runs against moddir ptrs... so cheat and use free page just above stack
                      (  boot_common.asm):00061         * for 256 byte disk buffer
                      (  boot_common.asm):00062                          leas  -size,s   
                      (  boot_common.asm):00063                  tfr   s,u        get pointer to data area
                      (  boot_common.asm):00064                  ldx   #$500
                      (  boot_common.asm):00065                          ELSE
003D 32E9FEF1         (  boot_common.asm):00066                          leas  -size-256,s   
0041 1F43             (  boot_common.asm):00067                  tfr   s,u        get pointer to data area
0043 304F             (  boot_common.asm):00068                  leax  size,u     point U to 256 byte sector buffer
                      (  boot_common.asm):00069                          ENDC
0045 3440             (  boot_common.asm):00070                  pshs  u          save pointer to data area
0047 AF42             (  boot_common.asm):00071                  stx   blockloc,u
                      (  boot_common.asm):00072                                  
                      (  boot_common.asm):00073         * Initialize Hardware
0049 10AE8D017C       (  boot_common.asm):00074                  ldy   Address,pcr                              get hardware address
004E 17FFC1           (  boot_common.asm):00075                  lbsr  HWInit
                      (  boot_common.asm):00076         
                      (  boot_common.asm):00077         * Read LSN0
                      (  boot_common.asm):00078                  IFNE  LSN24BIT
                      (  boot_common.asm):00079                  clrb             MSB sector
                      (  boot_common.asm):00080                  ENDC
0051 8E0000           (  boot_common.asm):00081                  ldx   #0         LSW sector
0054 170087           (  boot_common.asm):00082                  lbsr  HWRead     read LSN 0
0057 252D             (  boot_common.asm):00083                  bcs   error      branch if error
                      (  boot_common.asm):00084                                  
                      (  boot_common.asm):00085                  IFGT  Level-1   
0059 8630             (  boot_common.asm):00086                  lda   #'0        --- loaded in LSN0'
005B 9D5E             (  boot_common.asm):00087                  jsr   <D.BtBug   ---
                      (  boot_common.asm):00088                  ENDC            
                      (  boot_common.asm):00089                 
005D AF48             (  boot_common.asm):00090                      stx   LSN0Ptr,u    Save LSN0 pointer
                      (  boot_common.asm):00091         * Pull relevant values from LSN0
                      (  boot_common.asm):00092                  IFNE  FLOPPY
005F A603             (  boot_common.asm):00093                  lda   DD.TKS,x   number of tracks on this disk
0061 E68810           (  boot_common.asm):00094                  ldb   DD.FMT,x   disk format byte
0064 ED4C             (  boot_common.asm):00095                  std   ddtks,u    TAKE NOTE!  ASSUMES ADJACENT VARS!
                      (  boot_common.asm):00096                  ENDC
0066 EC8818           (  boot_common.asm):00097                  ldd   DD.BSZ,x   os9boot size in bytes
0069 2720             (  boot_common.asm):00098                  beq   FragBoot   if zero, do frag boot
006B ED46             (  boot_common.asm):00099                  std   bootsize,u
                      (  boot_common.asm):00100         * Old style boot -- make a fake FD segment right from LSN0!
006D 308815           (  boot_common.asm):00101                  leax  DD.BT,x  
0070 C300FF           (  boot_common.asm):00102                  addd  #$00FF     round up to next page
                      (  boot_common.asm):00103         * Important note: We are making an assumption that the upper 8 bits of the
                      (  boot_common.asm):00104         * FDSL.B field will always be zero.  That is a safe assumption, since an
                      (  boot_common.asm):00105         * FDSL.B value of $00FF would mean the file is 65280 bytes.  A bootfile
                      (  boot_common.asm):00106         * under NitrOS-9 cannot be this large, and therefore this assumption
                      (  boot_common.asm):00107         * is safe.
0073 A704             (  boot_common.asm):00108                  sta   FDSL.B+1,x save file size
                      (  boot_common.asm):00109                  IFNE  LSN24BIT
                      (  boot_common.asm):00110                  clr   FDSL.S,x   make next segment entry 0
                      (  boot_common.asm):00111                  ENDC
0075 6F06             (  boot_common.asm):00112                  clr   FDSL.S+1,x
0077 6F07             (  boot_common.asm):00113                  clr   FDSL.S+2,x
0079 8300FF           (  boot_common.asm):00114                  subd  #$00FF     undo previous add #$00FF
007C 201D             (  boot_common.asm):00115                  bra   GrabBootMem
                      (  boot_common.asm):00116                                  
007E 17FFB6           (  boot_common.asm):00117         Back2Krn lbsr  HWTerm     call HW termination routine
0081 AE44             (  boot_common.asm):00118                  ldx   blockimg,u pointer to start of os9boot in memory
0083 5F               (  boot_common.asm):00119                  clrb             clear carry
0084 EC46             (  boot_common.asm):00120                  ldd   bootsize,u
0086                  (  boot_common.asm):00121         error
                      (  boot_common.asm):00122                  IFEQ  Level-1
                      (  boot_common.asm):00123                  leas  2+size,s                 reset the stack    same as PULS U
                      (  boot_common.asm):00124                          ELSE
0086 32E90111         (  boot_common.asm):00125                  leas  2+size+256,s   reset the stack    same as PULS U
                      (  boot_common.asm):00126                          ENDC
008A 39               (  boot_common.asm):00127                  rts              return to kernel
                      (  boot_common.asm):00128         
                      (  boot_common.asm):00129         
                      (  boot_common.asm):00130         * NEW! Fragmented boot support!
                      (  boot_common.asm):00131         *FragBoot ldb   bootloc,u  MSB fd sector location
                      (  boot_common.asm):00132         *         ldx   bootloc+1,u LSW fd sector location
008B E68815           (  boot_common.asm):00133         FragBoot ldb   DD.BT,x    MSB fd sector location
008E AE8816           (  boot_common.asm):00134                  ldx   DD.BT+1,x  LSW fd sector location
0091 17004A           (  boot_common.asm):00135                  lbsr  HWRead     get fd sector
0094 EC0B             (  boot_common.asm):00136                  ldd   FD.SIZ+2,x get file size (we skip first two bytes)
0096 ED46             (  boot_common.asm):00137                  std   bootsize,u
0098 308810           (  boot_common.asm):00138                  leax  FD.SEG,x   point to segment table
                      (  boot_common.asm):00139                                  
009B                  (  boot_common.asm):00140         GrabBootMem                 
                      (  boot_common.asm):00141                  IFGT  Level-1   
009B 103F36           (  boot_common.asm):00142                  os9   F$BtMem   
                      (  boot_common.asm):00143                  ELSE            
                      (  boot_common.asm):00144                  os9   F$SRqMem  
                      (  boot_common.asm):00145                  ENDC            
009E 25E6             (  boot_common.asm):00146                  bcs   error
                      (  boot_common.asm):00147         * Save off alloced mem from F$SRqMem into blockloc,u and restore
                      (  boot_common.asm):00148         * the statics pointer in U
00A0 1F30             (  boot_common.asm):00149                  tfr   u,d        save pointer to requested memory
00A2 EEE4             (  boot_common.asm):00150                  ldu   ,s         recover pointer to data stack
00A4 ED42             (  boot_common.asm):00151                  std   blockloc,u
00A6 ED44             (  boot_common.asm):00152                  std   blockimg,u
                      (  boot_common.asm):00153                                  
                      (  boot_common.asm):00154         * Get os9boot into memory
00A8 AFC4             (  boot_common.asm):00155         BootLoop stx   seglist,u  update segment list
                      (  boot_common.asm):00156                  IFNE  LSN24BIT
                      (  boot_common.asm):00157                  ldb   FDSL.A,x   MSB sector location
                      (  boot_common.asm):00158                  ENDC
00AA AE01             (  boot_common.asm):00159         BL2      ldx   FDSL.A+1,x LSW sector location
                      (  boot_common.asm):00160                  IFNE  LSN24BIT
                      (  boot_common.asm):00161                  bne   BL3       
                      (  boot_common.asm):00162                  tstb            
                      (  boot_common.asm):00163                  ENDC
00AC 27D0             (  boot_common.asm):00164                  beq   Back2Krn  
00AE 17002D           (  boot_common.asm):00165         BL3      lbsr  HWRead    
00B1 6C42             (  boot_common.asm):00166                  inc   blockloc,u point to next input sector in mem
                      (  boot_common.asm):00167                                  
                      (  boot_common.asm):00168                  IFGT  Level-1   
00B3 862E             (  boot_common.asm):00169                  lda   #'.        show .'
00B5 9D5E             (  boot_common.asm):00170                  jsr   <D.BtBug  
                      (  boot_common.asm):00171                  ENDC            
                      (  boot_common.asm):00172                                  
00B7 AEC4             (  boot_common.asm):00173                  ldx   seglist,u  get pointer to segment list
00B9 6A04             (  boot_common.asm):00174                  dec   FDSL.B+1,x get segment size
00BB 2709             (  boot_common.asm):00175                  beq   NextSeg    if <=0, get next segment
                      (  boot_common.asm):00176                                  
00BD EC01             (  boot_common.asm):00177                  ldd   FDSL.A+1,x update sector location by one
00BF C30001           (  boot_common.asm):00178                  addd  #1        
00C2 ED01             (  boot_common.asm):00179                  std   FDSL.A+1,x
                      (  boot_common.asm):00180                  IFNE  LSN24BIT
                      (  boot_common.asm):00181                  ldb   FDSL.A,x  
                      (  boot_common.asm):00182                  adcb  #0        
                      (  boot_common.asm):00183                  stb   FDSL.A,x  
                      (  boot_common.asm):00184                  ENDC
00C4 20E4             (  boot_common.asm):00185                  bra   BL2       
                      (  boot_common.asm):00186                                  
00C6 3005             (  boot_common.asm):00187         NextSeg  leax  FDSL.S,x   advance to next segment entry
00C8 20DE             (  boot_common.asm):00188                  bra   BootLoop  
                      (    boot_1773.asm):00175                                  
                      (    boot_1773.asm):00176         
00CA 8628             (    boot_1773.asm):00177         DoDDns   lda   #DDEN+MOTON              double density enable and motor on
00CC AA8D00FC         (    boot_1773.asm):00178                  ora   WhichDrv,pcr             OR in selected drive
00D0 A74A             (    boot_1773.asm):00179                  sta   drvsel,u                 save drive selection byte
00D2 6F4B             (    boot_1773.asm):00180                  clr   currtrak,u               clear current track
00D4 8605             (    boot_1773.asm):00181                  lda   #$05
00D6 17009C           (    boot_1773.asm):00182                  lbsr  SetTrak                  Set the track to the head we want
00D9 C600             (    boot_1773.asm):00183                  ldb   #0+STEP                  RESTORE cmd
00DB 1600B4           (    boot_1773.asm):00184                  lbra  Talk2FDC                 send command and wait for it to complete
                      (    boot_1773.asm):00185         
                      (    boot_1773.asm):00186         * HWRead - Read a 256 byte sector from the device
                      (    boot_1773.asm):00187         *   Entry: Y = hardware address
                      (    boot_1773.asm):00188         *          B = bits 23-16 of LSN
                      (    boot_1773.asm):00189         *          X = bits 15-0  of LSN
                      (    boot_1773.asm):00190         *                  blockloc,u = ptr to 256 byte sector
                      (    boot_1773.asm):00191         *   Exit:  X = ptr to data (i.e. ptr in blockloc,u)
00DE 8691             (    boot_1773.asm):00192         HWRead   lda   #$91
00E0 8D0E             (    boot_1773.asm):00193                  bsr   L00DF            else branch subroutine
00E2 2503             (    boot_1773.asm):00194                  bcs   HWRRts           branch if error
00E4 AE42             (    boot_1773.asm):00195                  ldx   blockloc,u       get buffer pointer in X for caller
00E6 5F               (    boot_1773.asm):00196                  clrb
00E7 39               (    boot_1773.asm):00197         HWRRts   rts
                      (    boot_1773.asm):00198         
00E8 2406             (    boot_1773.asm):00199         L00D7    bcc   L00DF
00EA 3416             (    boot_1773.asm):00200                  pshs  x,b,a
00EC 8DDC             (    boot_1773.asm):00201                  bsr   DoDDns
00EE 3516             (    boot_1773.asm):00202                  puls  x,b,a
00F0 3416             (    boot_1773.asm):00203         L00DF    pshs  x,b,a            save LSN, command
00F2 8D07             (    boot_1773.asm):00204                  bsr   ReadSect
00F4 3516             (    boot_1773.asm):00205                  puls  x,b,a            restore LSN, command
00F6 24EF             (    boot_1773.asm):00206                  bcc   HWRRts           branch if OK
00F8 44               (    boot_1773.asm):00207                  lsra
00F9 26ED             (    boot_1773.asm):00208                  bne   L00D7
00FB 8D3B             (    boot_1773.asm):00209         ReadSect bsr   Seek2Sect        seek to the sector stored in X
00FD 25E8             (    boot_1773.asm):00210                  bcs   HWRRts           if error, return to caller
00FF AE42             (    boot_1773.asm):00211                  ldx   blockloc,u       get address of buffer to fill
0101 1A50             (    boot_1773.asm):00212                  orcc  #IntMasks        mask interrupts
0103 3410             (    boot_1773.asm):00213                  pshs  x                        save X
0105 8EFFFF           (    boot_1773.asm):00214                  ldx   #$FFFF
0108 C680             (    boot_1773.asm):00215                  ldb   #%10000000       ($80) READ SECTOR command
010A E728             (    boot_1773.asm):00216                  stb   CMDREG,y         write to command register
010C E64A             (    boot_1773.asm):00217                  ldb   drvsel,u         (DDEN+MOTORON+BootDr)
                      (    boot_1773.asm):00218         * NOTE: The 1773 FDC multiplexes the write precomp enable and ready
                      (    boot_1773.asm):00219         * signals on the ENP/RDY pin, so the READY bit must always be ON for
                      (    boot_1773.asm):00220         * read and seek commands.  (from the FD502 FDC Service Manual)
010E CA30             (    boot_1773.asm):00221                  orb   #DDEN+READY      set DDEN+READY bits ($30)
0110 6D4E             (    boot_1773.asm):00222                  tst   side,u           are we on side 2?
0112 2702             (    boot_1773.asm):00223                  beq   L0107
0114 CA40             (    boot_1773.asm):00224                  orb   #SIDESEL         set side 2 bit
0116 E7A4             (    boot_1773.asm):00225         L0107    stb   CONTROL,y
0118 170082           (    boot_1773.asm):00226                  lbsr  Delay2           delay 54~
011B CA80             (    boot_1773.asm):00227                  orb   #HALTENA         HALT enable ($80)
                      (    boot_1773.asm):00228         *         lda   #%00000010      RESTORE cmd ($02)
                      (    boot_1773.asm):00229         *L0111    bita  >DPort+STATREG
                      (    boot_1773.asm):00230         *         bne   L0123
                      (    boot_1773.asm):00231         *         leay  -$01,y
                      (    boot_1773.asm):00232         *         bne   L0111
                      (    boot_1773.asm):00233         *         lda   drvsel,u
                      (    boot_1773.asm):00234         *         sta   >DPort+CONTROL
                      (    boot_1773.asm):00235         *         puls  y
                      (    boot_1773.asm):00236         *         bra   L0138
011D E7A4             (    boot_1773.asm):00237                  stb   CONTROL,y
011F 12               (    boot_1773.asm):00238                  nop
0120 12               (    boot_1773.asm):00239                  nop
                      (    boot_1773.asm):00240         *         bra   L0123
                      (    boot_1773.asm):00241         
0121 AEE4             (    boot_1773.asm):00242                  ldx   ,s                       get X saved earlier
                      (    boot_1773.asm):00243         * Sector READ Loop
0123 A62B             (    boot_1773.asm):00244         L0123    lda   DATAREG,y        read from WD DATA register
0125 A780             (    boot_1773.asm):00245                  sta   ,x+
                      (    boot_1773.asm):00246         *         stb   >DPort+CONTROL
0127 12               (    boot_1773.asm):00247                  nop
0128 20F9             (    boot_1773.asm):00248                  bra   L0123
                      (    boot_1773.asm):00249         * RVH NOTE: This ONLY works for double density boot disks!  The Tandy
                      (    boot_1773.asm):00250         * controllers internally gate HALT enable with the DDEN bit, which
                      (    boot_1773.asm):00251         * means that reading a single-density boot disk will not generate the
                      (    boot_1773.asm):00252         * NMI signal needed to exit the read loop!  Single-density disks must
                      (    boot_1773.asm):00253         * use a polled I/O loop instead.
012A 326C             (    boot_1773.asm):00254         NMIRtn   leas  R$Size,s         adjust stack
012C 3510             (    boot_1773.asm):00255                  puls  x
012E E628             (    boot_1773.asm):00256                  ldb   STATREG,y        read WD STATUS register
0130 C59C             (    boot_1773.asm):00257                  bitb  #$9C                     any errors?
                      (    boot_1773.asm):00258         *         bitb  #$04            LOST DATA bit set?
0132 2703             (    boot_1773.asm):00259                  beq   r@                       branch if not
                      (    boot_1773.asm):00260         *         beq   ChkErr          branch if not
0134 53               (    boot_1773.asm):00261         L0138    comb                           else we will return error
0135 C6F4             (    boot_1773.asm):00262                  ldb   #E$Read
0137 39               (    boot_1773.asm):00263         r@       rts
                      (    boot_1773.asm):00264         
0138                  (    boot_1773.asm):00265         Seek2Sect
0138 8608             (    boot_1773.asm):00266                  lda   #MOTON           permit alternate drives
013A AA8D008E         (    boot_1773.asm):00267                  ora   WhichDrv,pcr             permit alternate drives
013E A74A             (    boot_1773.asm):00268                  sta   drvsel,u         save byte to static mem
0140 6F4E             (    boot_1773.asm):00269                  clr   side,u           start on side 1
0142 1F10             (    boot_1773.asm):00270                  tfr   x,d                      move LSN into D
0144 10830000         (    boot_1773.asm):00271                  cmpd  #$0000           zero?
0148 2728             (    boot_1773.asm):00272                  beq   L016C            branch if so
014A 6FE2             (    boot_1773.asm):00273                  clr   ,-s                      else clear space on stack
014C 3402             (    boot_1773.asm):00274                  pshs  a
014E A64D             (    boot_1773.asm):00275                  lda   ddfmt,u
0150 8501             (    boot_1773.asm):00276                  bita  #FMT.SIDE        double sided disk?
0152 3502             (    boot_1773.asm):00277                  puls  a
0154 2712             (    boot_1773.asm):00278                  beq   SnglSid          branch if not
0156 2006             (    boot_1773.asm):00279                  bra   DblSid
                      (    boot_1773.asm):00280         * Double-sided code
0158 634E             (    boot_1773.asm):00281         L0152    com   side,u           flag side 2
015A 2602             (    boot_1773.asm):00282                  bne   DblSid
015C 6CE4             (    boot_1773.asm):00283                  inc   ,s
015E E04C             (    boot_1773.asm):00284         DblSid   subb  ddtks,u          
0160 8200             (    boot_1773.asm):00285                  sbca  #$00
0162 24F4             (    boot_1773.asm):00286                  bcc   L0152
0164 2008             (    boot_1773.asm):00287                  bra   L0168
0166 6CE4             (    boot_1773.asm):00288         L0160    inc   ,s
0168 E04C             (    boot_1773.asm):00289         SnglSid  subb  ddtks,u          subtract sectors per track from B
016A 8200             (    boot_1773.asm):00290                  sbca  #$00
016C 24F8             (    boot_1773.asm):00291                  bcc   L0160
016E EB4C             (    boot_1773.asm):00292         L0168    addb  ddtks,u          add sectors per track
0170 3502             (    boot_1773.asm):00293                  puls  a                get current track indicator off of stack
0172 5C               (    boot_1773.asm):00294         L016C    incb
0173 E72A             (    boot_1773.asm):00295                  stb   SECTREG,y        save in sector register
0175 E64B             (    boot_1773.asm):00296         SetTrak  ldb   currtrak,u       get current track in B
0177 E729             (    boot_1773.asm):00297                  stb   TRACKREG,y       save in track register
0179 A14B             (    boot_1773.asm):00298                  cmpa  currtrak,u       same as A?
017B 2713             (    boot_1773.asm):00299                  beq   rtsok            branch if so
017D A74B             (    boot_1773.asm):00300                  sta   currtrak,u
017F A72B             (    boot_1773.asm):00301                  sta   DATAREG,y
0181 C610             (    boot_1773.asm):00302                  ldb   #$10+STEP        SEEK command
0183 8D0D             (    boot_1773.asm):00303                  bsr   Talk2FDC         send command to controller
0185 3410             (    boot_1773.asm):00304                  pshs  x
                      (    boot_1773.asm):00305         * Seek Delay
0187 8E222E           (    boot_1773.asm):00306                  ldx   #$222E           delay ~39 mSec (78mS L1)
018A 301F             (    boot_1773.asm):00307         SeekDly  leax  -$01,x
018C 26FC             (    boot_1773.asm):00308                  bne   SeekDly
018E 3510             (    boot_1773.asm):00309                  puls  x
0190 5F               (    boot_1773.asm):00310         rtsok    clrb
0191 39               (    boot_1773.asm):00311                  rts
                      (    boot_1773.asm):00312         
                      (    boot_1773.asm):00313         *ChkErr   bitb  #$98            evaluate WD status (READY, RNF, CRC err)
                      (    boot_1773.asm):00314         *         bne   L0138
                      (    boot_1773.asm):00315         *         clrb
                      (    boot_1773.asm):00316         *         rts
                      (    boot_1773.asm):00317         
0192 8D07             (    boot_1773.asm):00318         Talk2FDC bsr   DoCMD            issue FDC cmd, wait 54~
0194 E628             (    boot_1773.asm):00319         FDCLoop  ldb   STATREG,y        get status
0196 C501             (    boot_1773.asm):00320                  bitb  #$01                     still BUSY?
0198 26FA             (    boot_1773.asm):00321                  bne   FDCLoop          loop until command completes
019A 39               (    boot_1773.asm):00322                  rts
                      (    boot_1773.asm):00323         
                      (    boot_1773.asm):00324         * Issue command and wait 54 clocks
                      (    boot_1773.asm):00325         * Controller requires a min delay of 14uS (DD) or 28uS (SD)
                      (    boot_1773.asm):00326         * following a command write before status register is valid
019B 8D08             (    boot_1773.asm):00327         DoCMD    bsr   SelNSend
                      (    boot_1773.asm):00328         * Delay branches
                      (    boot_1773.asm):00329         * 54 clock delay including bsr (=30uS/L2,60us/L1)
                      (    boot_1773.asm):00330         * H6309 code changed to reduce code size, RG
                      (    boot_1773.asm):00331                  IFEQ  H6309
019D                  (    boot_1773.asm):00332         Delay2  
                      (    boot_1773.asm):00333                  lbsr  Delay3
019D                  (    boot_1773.asm):00334         Delay3 
                      (    boot_1773.asm):00335                  lbsr  Delay4
019D                  (    boot_1773.asm):00336         Delay4 
                      (    boot_1773.asm):00337                  ELSE
019D 8605             (    boot_1773.asm):00338         Delay2   lda   #5       3 cycles
019F 1E88             (    boot_1773.asm):00339         Delay3   exg   a,a      5 cycles  | 10*5
01A1 4A               (    boot_1773.asm):00340                  deca           2 cycles  |
01A2 26FB             (    boot_1773.asm):00341                  bne   Delay3   3 cycles  |
                      (    boot_1773.asm):00342                  ENDC
01A4 39               (    boot_1773.asm):00343                  rts
                      (    boot_1773.asm):00344         
                      (    boot_1773.asm):00345         * Select And Send
                      (    boot_1773.asm):00346         * Entry: B = command byte
01A5 A64A             (    boot_1773.asm):00347         SelNSend lda   drvsel,u
01A7 A7A4             (    boot_1773.asm):00348                  sta   CONTROL,y
01A9 E728             (    boot_1773.asm):00349                  stb   CMDREG,y
01AB 39               (    boot_1773.asm):00350                  rts
                      (    boot_1773.asm):00351         
                      (    boot_1773.asm):00352                  IFGT  Level-1
                      (    boot_1773.asm):00353         * Filler to get $1D0
01AC 3939393939393939 (    boot_1773.asm):00354         Filler   fill  $39,$1D0-3-2-1-*
     3939393939393939
     3939393939393939
     393939393939
                      (    boot_1773.asm):00355                  ENDC
                      (    boot_1773.asm):00356         
01CA FF40             (    boot_1773.asm):00357         Address  fdb   DPort
01CC 01               (    boot_1773.asm):00358         WhichDrv fcb   BootDr
                      (    boot_1773.asm):00359         
01CD EC11DC           (    boot_1773.asm):00360                  emod
     01D0             (    boot_1773.asm):00361         eom      equ   *
                      (    boot_1773.asm):00362                  end
