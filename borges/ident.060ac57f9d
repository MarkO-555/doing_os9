                      (/dd/sourcecode/as):00001         ********************************************************************
                      (/dd/sourcecode/as):00002         * Ident - Show module information
                      (/dd/sourcecode/as):00003         *
                      (/dd/sourcecode/as):00004         * $Id$
                      (/dd/sourcecode/as):00005         *
                      (/dd/sourcecode/as):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/sourcecode/as):00007         * Comment
                      (/dd/sourcecode/as):00008         * ------------------------------------------------------------------
                      (/dd/sourcecode/as):00009         *   7      ????/??/??
                      (/dd/sourcecode/as):00010         * From Tandy OS-9 Level One VR 02.00.00.
                      (/dd/sourcecode/as):00011         *
                      (/dd/sourcecode/as):00012         
                      (/dd/sourcecode/as):00013         *   8      2003/04/11  Boisy G. Pitre
                      (/dd/sourcecode/as):00014         * Now reports modules with a lang of Obj6309.
                      (/dd/sourcecode/as):00015         *
                      (/dd/sourcecode/as):00016         *   8r1    2005/03/07  Boisy G. Pitre
                      (/dd/sourcecode/as):00017         * Fixed so that an unsupported language shows ????
                      (/dd/sourcecode/as):00018         *   9      2018/11/18  L. Curtis Boyle
                      (/dd/sourcecode/as):00019         * Fixed so filenames with '-' in them work (can't start a filename with
                      (/dd/sourcecode/as):00020         *   that, though), and optimized/shrunk it a bit.
                      (/dd/sourcecode/as):00021         
                      (/dd/sourcecode/as):00022                  nam   Ident
                      (/dd/sourcecode/as):00023                  ttl   Show module information
                      (/dd/sourcecode/as):00024         
                      (/dd/sourcecode/as):00025         * Disassembled 98/09/20 15:54:44 by Disasm v1.6 (C) 1988 by RML
                      (/dd/sourcecode/as):00026         
                      (/dd/sourcecode/as):00027                  ifp1
                      (/dd/sourcecode/as):00028         *         use   defsfile
                      (/dd/sourcecode/as):00029                  use    /dd/defs/os9.d    Hack until defsfiles made fully native
                      (   /dd/defs/os9.d):00001         ********************************************************************
                      (   /dd/defs/os9.d):00002         * os9.d - NitrOS-9 System Definitions
                      (   /dd/defs/os9.d):00003         *
                      (   /dd/defs/os9.d):00004         * $Id$
                      (   /dd/defs/os9.d):00005         *
                      (   /dd/defs/os9.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/os9.d):00007         * Comment
                      (   /dd/defs/os9.d):00008         * ------------------------------------------------------------------
                      (   /dd/defs/os9.d):00009         *          1985/08/29  KMZ
                      (   /dd/defs/os9.d):00010         * Fixed DT.SBF/NFM values to 3/4
                      (   /dd/defs/os9.d):00011         *
                      (   /dd/defs/os9.d):00012         *          1985/09/01  KMZ
                      (   /dd/defs/os9.d):00013         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (   /dd/defs/os9.d):00014         *
                      (   /dd/defs/os9.d):00015         *          1985/09/03  KMZ/Robert F. Doggett
                      (   /dd/defs/os9.d):00016         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (   /dd/defs/os9.d):00017         * 68000 compatability.
                      (   /dd/defs/os9.d):00018         *
                      (   /dd/defs/os9.d):00019         *          1986/04/15  Mark G. Hawkins
                      (   /dd/defs/os9.d):00020         * F$AlHRAM System call added for COCO.
                      (   /dd/defs/os9.d):00021         *
                      (   /dd/defs/os9.d):00022         *          1986/09/08  Mark G. Hawkins
                      (   /dd/defs/os9.d):00023         * F$Alarm for COCO Clock Module.
                      (   /dd/defs/os9.d):00024         *
                      (   /dd/defs/os9.d):00025         *          1986/09/17  Mark G. Hawkins
                      (   /dd/defs/os9.d):00026         * SS.Tone For COCO.
                      (   /dd/defs/os9.d):00027         *
                      (   /dd/defs/os9.d):00028         *          1986/09/23  Mark G. Hawkins
                      (   /dd/defs/os9.d):00029         * Added F$NMLink and F$NMLoad for COCO.
                      (   /dd/defs/os9.d):00030         *
                      (   /dd/defs/os9.d):00031         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00032         * Added Reserved User $70 to $7f in sytem calls.
                      (   /dd/defs/os9.d):00033         *
                      (   /dd/defs/os9.d):00034         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00035         * Created Color Computer 3 Version of OS9Defs.
                      (   /dd/defs/os9.d):00036         *
                      (   /dd/defs/os9.d):00037         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00038         * Consoldated Level 1/Level 2 os9defs.
                      (   /dd/defs/os9.d):00039         *
                      (   /dd/defs/os9.d):00040         *          2002/04/04  Boisy G. Pitre
                      (   /dd/defs/os9.d):00041         * Consoldated Level 2/Level 2 V3 os9defs.
                      (   /dd/defs/os9.d):00042         *
                      (   /dd/defs/os9.d):00043         *          2002/04/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00044         * Added NitrOS-9 definitions.
                      (   /dd/defs/os9.d):00045         *
                      (   /dd/defs/os9.d):00046         *          2003/05/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00047         * Added WD1002 sys vars to Level One section.
                      (   /dd/defs/os9.d):00048         *
                      (   /dd/defs/os9.d):00049         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/os9.d):00050         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (   /dd/defs/os9.d):00051         * changed the sizes from 2 to 3 bytes.
                      (   /dd/defs/os9.d):00052         * DT.NFM is now the same for both Level One and Level Two.
                      (   /dd/defs/os9.d):00053         * Added DT.CDFM type for future CD-ROM file manager
                      (   /dd/defs/os9.d):00054         *
                      (   /dd/defs/os9.d):00055         *          2003/11/05  Robert Gault
                      (   /dd/defs/os9.d):00056         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (   /dd/defs/os9.d):00057         *
                      (   /dd/defs/os9.d):00058         *              2005/11/02  P.Harvey-Smith
                      (   /dd/defs/os9.d):00059         * Added definitions for boot areas on Dragon computers.
                      (   /dd/defs/os9.d):00060         *
                      (   /dd/defs/os9.d):00061         *              2006/03/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00062         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (   /dd/defs/os9.d):00063         
                      (   /dd/defs/os9.d):00064                        NAM       os9.d
                      (   /dd/defs/os9.d):00065                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (   /dd/defs/os9.d):00066         
                      (   /dd/defs/os9.d):00067         * Common definitions
     0001             (   /dd/defs/os9.d):00068         true           EQU       1                   useful name
     0000             (   /dd/defs/os9.d):00069         false          EQU       0                   useful name
                      (   /dd/defs/os9.d):00070         
                      (   /dd/defs/os9.d):00071                        PAG       
                      (   /dd/defs/os9.d):00072         *****************************************
                      (   /dd/defs/os9.d):00073         * System Service Request Code Definitions
                      (   /dd/defs/os9.d):00074         *
                      (   /dd/defs/os9.d):00075                        ORG       0
0000                  (   /dd/defs/os9.d):00076         F$Link         RMB       1                   Link to Module
0001                  (   /dd/defs/os9.d):00077         F$Load         RMB       1                   Load Module from File
0002                  (   /dd/defs/os9.d):00078         F$UnLink       RMB       1                   Unlink Module
0003                  (   /dd/defs/os9.d):00079         F$Fork         RMB       1                   Start New Process
0004                  (   /dd/defs/os9.d):00080         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (   /dd/defs/os9.d):00081         F$Chain        RMB       1                   Chain Process to New Module
0006                  (   /dd/defs/os9.d):00082         F$Exit         RMB       1                   Terminate Process
0007                  (   /dd/defs/os9.d):00083         F$Mem          RMB       1                   Set Memory Size
0008                  (   /dd/defs/os9.d):00084         F$Send         RMB       1                   Send Signal to Process
0009                  (   /dd/defs/os9.d):00085         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (   /dd/defs/os9.d):00086         F$Sleep        RMB       1                   Suspend Process
000B                  (   /dd/defs/os9.d):00087         F$SSpd         RMB       1                   Suspend Process
000C                  (   /dd/defs/os9.d):00088         F$ID           RMB       1                   Return Process ID
000D                  (   /dd/defs/os9.d):00089         F$SPrior       RMB       1                   Set Process Priority
000E                  (   /dd/defs/os9.d):00090         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (   /dd/defs/os9.d):00091         F$PErr         RMB       1                   Print Error
0010                  (   /dd/defs/os9.d):00092         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (   /dd/defs/os9.d):00093         F$CmpNam       RMB       1                   Compare Two Names
0012                  (   /dd/defs/os9.d):00094         F$SchBit       RMB       1                   Search Bit Map
0013                  (   /dd/defs/os9.d):00095         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (   /dd/defs/os9.d):00096         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (   /dd/defs/os9.d):00097         F$Time         RMB       1                   Get Current Time
0016                  (   /dd/defs/os9.d):00098         F$STime        RMB       1                   Set Current Time
0017                  (   /dd/defs/os9.d):00099         F$CRC          RMB       1                   Generate CRC ($17)
                      (   /dd/defs/os9.d):00100         
                      (   /dd/defs/os9.d):00101         
                      (   /dd/defs/os9.d):00102         * NitrOS-9 Level 2 system calls
0018                  (   /dd/defs/os9.d):00103         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (   /dd/defs/os9.d):00104         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (   /dd/defs/os9.d):00105         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (   /dd/defs/os9.d):00106         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (   /dd/defs/os9.d):00107         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (   /dd/defs/os9.d):00108         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (   /dd/defs/os9.d):00109         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (   /dd/defs/os9.d):00110                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (   /dd/defs/os9.d):00111         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (   /dd/defs/os9.d):00112         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (   /dd/defs/os9.d):00113         
                      (   /dd/defs/os9.d):00114         
                      (   /dd/defs/os9.d):00115         * NitrOS-9 Level 1 system call padding
                      (   /dd/defs/os9.d):00116         
                      (   /dd/defs/os9.d):00117         
0023                  (   /dd/defs/os9.d):00118         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (   /dd/defs/os9.d):00119         
                      (   /dd/defs/os9.d):00120         
                      (   /dd/defs/os9.d):00121                        ORG       $25
0025                  (   /dd/defs/os9.d):00122         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (   /dd/defs/os9.d):00123         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (   /dd/defs/os9.d):00124         
                      (   /dd/defs/os9.d):00125         
                      (   /dd/defs/os9.d):00126                        ORG       $27                 Beginning of System Reserved Calls
                      (   /dd/defs/os9.d):00127         * NitrOS-9 common system calls
0027                  (   /dd/defs/os9.d):00128         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (   /dd/defs/os9.d):00129         F$SRqMem       RMB       1                   System Memory Request
0029                  (   /dd/defs/os9.d):00130         F$SRtMem       RMB       1                   System Memory Return
002A                  (   /dd/defs/os9.d):00131         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (   /dd/defs/os9.d):00132         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (   /dd/defs/os9.d):00133         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (   /dd/defs/os9.d):00134         F$NProc        RMB       1                   Start Next Process
002E                  (   /dd/defs/os9.d):00135         F$VModul       RMB       1                   Validate Module
002F                  (   /dd/defs/os9.d):00136         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (   /dd/defs/os9.d):00137         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (   /dd/defs/os9.d):00138         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (   /dd/defs/os9.d):00139         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (   /dd/defs/os9.d):00140         F$IODel        RMB       1                   Delete I/O Module
                      (   /dd/defs/os9.d):00141         
                      (   /dd/defs/os9.d):00142         
0034                  (   /dd/defs/os9.d):00143         F$SLink        RMB       1                   System Link
0035                  (   /dd/defs/os9.d):00144         F$Boot         RMB       1                   Bootstrap System
0036                  (   /dd/defs/os9.d):00145         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (   /dd/defs/os9.d):00146         F$GProcP       RMB       1                   Get Process ptr
0038                  (   /dd/defs/os9.d):00147         F$Move         RMB       1                   Move Data (low bound first)
0039                  (   /dd/defs/os9.d):00148         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (   /dd/defs/os9.d):00149         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (   /dd/defs/os9.d):00150         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (   /dd/defs/os9.d):00151         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (   /dd/defs/os9.d):00152         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (   /dd/defs/os9.d):00153         F$FreeHB       RMB       1                   Get Free High Block
003F                  (   /dd/defs/os9.d):00154         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (   /dd/defs/os9.d):00155         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (   /dd/defs/os9.d):00156         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (   /dd/defs/os9.d):00157         F$ResTsk       RMB       1                   Reserve Task number
0043                  (   /dd/defs/os9.d):00158         F$RelTsk       RMB       1                   Release Task number
0044                  (   /dd/defs/os9.d):00159         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (   /dd/defs/os9.d):00160         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (   /dd/defs/os9.d):00161         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (   /dd/defs/os9.d):00162         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (   /dd/defs/os9.d):00163         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (   /dd/defs/os9.d):00164         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (   /dd/defs/os9.d):00165         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (   /dd/defs/os9.d):00166         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (   /dd/defs/os9.d):00167         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (   /dd/defs/os9.d):00168         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (   /dd/defs/os9.d):00169         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (   /dd/defs/os9.d):00170         F$MapBlk       RMB       1                   Map Specific Block
0050                  (   /dd/defs/os9.d):00171         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (   /dd/defs/os9.d):00172         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (   /dd/defs/os9.d):00173         F$GCMDir       RMB       1                   Pack module directory
0053                  (   /dd/defs/os9.d):00174         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (   /dd/defs/os9.d):00175         
                      (   /dd/defs/os9.d):00176         * Alan DeKok additions
0054                  (   /dd/defs/os9.d):00177         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (   /dd/defs/os9.d):00178         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (   /dd/defs/os9.d):00179         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (   /dd/defs/os9.d):00180         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (   /dd/defs/os9.d):00181         
                      (   /dd/defs/os9.d):00182         
                      (   /dd/defs/os9.d):00183         *
                      (   /dd/defs/os9.d):00184         * Numbers $70 through $7F are reserved for user definitions
                      (   /dd/defs/os9.d):00185         *
                      (   /dd/defs/os9.d):00186                        ORG       $70
                      (   /dd/defs/os9.d):00187         
                      (   /dd/defs/os9.d):00188         
                      (   /dd/defs/os9.d):00189         
                      (   /dd/defs/os9.d):00190         
0070                  (   /dd/defs/os9.d):00191         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (   /dd/defs/os9.d):00192         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (   /dd/defs/os9.d):00193         
0072                  (   /dd/defs/os9.d):00194                        RMB       $80-.               Reserved for user definitions
                      (   /dd/defs/os9.d):00195         
                      (   /dd/defs/os9.d):00196                        PAG       
                      (   /dd/defs/os9.d):00197         **************************************
                      (   /dd/defs/os9.d):00198         * I/O Service Request Code Definitions
                      (   /dd/defs/os9.d):00199         *
                      (   /dd/defs/os9.d):00200                        ORG       $80
0080                  (   /dd/defs/os9.d):00201         I$Attach       RMB       1                   Attach I/O Device
0081                  (   /dd/defs/os9.d):00202         I$Detach       RMB       1                   Detach I/O Device
0082                  (   /dd/defs/os9.d):00203         I$Dup          RMB       1                   Duplicate Path
0083                  (   /dd/defs/os9.d):00204         I$Create       RMB       1                   Create New File
0084                  (   /dd/defs/os9.d):00205         I$Open         RMB       1                   Open Existing File
0085                  (   /dd/defs/os9.d):00206         I$MakDir       RMB       1                   Make Directory File
0086                  (   /dd/defs/os9.d):00207         I$ChgDir       RMB       1                   Change Default Directory
0087                  (   /dd/defs/os9.d):00208         I$Delete       RMB       1                   Delete File
0088                  (   /dd/defs/os9.d):00209         I$Seek         RMB       1                   Change Current Position
0089                  (   /dd/defs/os9.d):00210         I$Read         RMB       1                   Read Data
008A                  (   /dd/defs/os9.d):00211         I$Write        RMB       1                   Write Data
008B                  (   /dd/defs/os9.d):00212         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (   /dd/defs/os9.d):00213         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (   /dd/defs/os9.d):00214         I$GetStt       RMB       1                   Get Path Status
008E                  (   /dd/defs/os9.d):00215         I$SetStt       RMB       1                   Set Path Status
008F                  (   /dd/defs/os9.d):00216         I$Close        RMB       1                   Close Path
0090                  (   /dd/defs/os9.d):00217         I$DeletX       RMB       1                   Delete from current exec dir
                      (   /dd/defs/os9.d):00218         
                      (   /dd/defs/os9.d):00219         *******************
                      (   /dd/defs/os9.d):00220         * File Access Modes
                      (   /dd/defs/os9.d):00221         *
     0001             (   /dd/defs/os9.d):00222         READ.          EQU       %00000001
     0002             (   /dd/defs/os9.d):00223         WRITE.         EQU       %00000010
     0003             (   /dd/defs/os9.d):00224         UPDAT.         EQU       READ.+WRITE.
     0004             (   /dd/defs/os9.d):00225         EXEC.          EQU       %00000100
     0008             (   /dd/defs/os9.d):00226         PREAD.         EQU       %00001000
     0010             (   /dd/defs/os9.d):00227         PWRIT.         EQU       %00010000
     0020             (   /dd/defs/os9.d):00228         PEXEC.         EQU       %00100000
     0040             (   /dd/defs/os9.d):00229         SHARE.         EQU       %01000000
     0080             (   /dd/defs/os9.d):00230         DIR.           EQU       %10000000
     0020             (   /dd/defs/os9.d):00231         ISIZ.          EQU       %00100000
                      (   /dd/defs/os9.d):00232         
                      (   /dd/defs/os9.d):00233         **************
                      (   /dd/defs/os9.d):00234         * Signal Codes
                      (   /dd/defs/os9.d):00235         *
                      (   /dd/defs/os9.d):00236                        ORG       0
0000                  (   /dd/defs/os9.d):00237         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (   /dd/defs/os9.d):00238         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (   /dd/defs/os9.d):00239         S$Abort        RMB       1                   Keyboard Abort
0003                  (   /dd/defs/os9.d):00240         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (   /dd/defs/os9.d):00241         S$Window       RMB       1                   Window Change
     0004             (   /dd/defs/os9.d):00242         S$HUP          EQU       S$Window            Hang Up
0005                  (   /dd/defs/os9.d):00243         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (   /dd/defs/os9.d):00244         
                      (   /dd/defs/os9.d):00245                        PAG       
                      (   /dd/defs/os9.d):00246         **********************************
                      (   /dd/defs/os9.d):00247         * Status Codes for GetStat/GetStat
                      (   /dd/defs/os9.d):00248         *
                      (   /dd/defs/os9.d):00249                        ORG       0
0000                  (   /dd/defs/os9.d):00250         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (   /dd/defs/os9.d):00251         SS.Ready       RMB       1                   Check for Device Ready
0002                  (   /dd/defs/os9.d):00252         SS.Size        RMB       1                   Read/Write File Size
0003                  (   /dd/defs/os9.d):00253         SS.Reset       RMB       1                   Device Restore
0004                  (   /dd/defs/os9.d):00254         SS.WTrk        RMB       1                   Device Write Track
0005                  (   /dd/defs/os9.d):00255         SS.Pos         RMB       1                   Get File Current Position
0006                  (   /dd/defs/os9.d):00256         SS.EOF         RMB       1                   Test for End of File
0007                  (   /dd/defs/os9.d):00257         SS.Link        RMB       1                   Link to Status routines
0008                  (   /dd/defs/os9.d):00258         SS.ULink       RMB       1                   Unlink Status routines
0009                  (   /dd/defs/os9.d):00259         SS.Feed        RMB       1                   Issue form feed
000A                  (   /dd/defs/os9.d):00260         SS.Frz         RMB       1                   Freeze DD. information
000B                  (   /dd/defs/os9.d):00261         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (   /dd/defs/os9.d):00262         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (   /dd/defs/os9.d):00263         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (   /dd/defs/os9.d):00264         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (   /dd/defs/os9.d):00265         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (   /dd/defs/os9.d):00266         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (   /dd/defs/os9.d):00267         SS.Lock        RMB       1                   Lock/Release record
0012                  (   /dd/defs/os9.d):00268         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (   /dd/defs/os9.d):00269         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (   /dd/defs/os9.d):00270         SS.BlkRd       RMB       1                   Block Read
0015                  (   /dd/defs/os9.d):00271         SS.BlkWr       RMB       1                   Block Write
0016                  (   /dd/defs/os9.d):00272         SS.Reten       RMB       1                   Retension cycle
0017                  (   /dd/defs/os9.d):00273         SS.WFM         RMB       1                   Write File Mark
0018                  (   /dd/defs/os9.d):00274         SS.RFM         RMB       1                   Read past File Mark
0019                  (   /dd/defs/os9.d):00275         SS.ELog        RMB       1                   Read Error Log
001A                  (   /dd/defs/os9.d):00276         SS.SSig        RMB       1                   Send signal on data ready
001B                  (   /dd/defs/os9.d):00277         SS.Relea       RMB       1                   Release device
001C                  (   /dd/defs/os9.d):00278         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (   /dd/defs/os9.d):00279         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (   /dd/defs/os9.d):00280         SS.Break       RMB       1                   Send break signal out acia
001E                  (   /dd/defs/os9.d):00281         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (   /dd/defs/os9.d):00282                        RMB       1                   Reserved
     0020             (   /dd/defs/os9.d):00283         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (   /dd/defs/os9.d):00284         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (   /dd/defs/os9.d):00285                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (   /dd/defs/os9.d):00286         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (   /dd/defs/os9.d):00287         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (   /dd/defs/os9.d):00288         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (   /dd/defs/os9.d):00289         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (   /dd/defs/os9.d):00290         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (   /dd/defs/os9.d):00291         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (   /dd/defs/os9.d):00292         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (   /dd/defs/os9.d):00293         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (   /dd/defs/os9.d):00294         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (   /dd/defs/os9.d):00295         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (   /dd/defs/os9.d):00296         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (   /dd/defs/os9.d):00297         
                      (   /dd/defs/os9.d):00298         * System Specific and User defined codes above $80
                      (   /dd/defs/os9.d):00299                        ORG       $80
0080                  (   /dd/defs/os9.d):00300         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (   /dd/defs/os9.d):00301         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (   /dd/defs/os9.d):00302         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (   /dd/defs/os9.d):00303         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (   /dd/defs/os9.d):00304         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (   /dd/defs/os9.d):00305         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (   /dd/defs/os9.d):00306         
                      (   /dd/defs/os9.d):00307         *               IFGT      Level-1
                      (   /dd/defs/os9.d):00308         * Level 2 Windowing
0086                  (   /dd/defs/os9.d):00309         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (   /dd/defs/os9.d):00310         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (   /dd/defs/os9.d):00311         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (   /dd/defs/os9.d):00312         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (   /dd/defs/os9.d):00313         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (   /dd/defs/os9.d):00314         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (   /dd/defs/os9.d):00315         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (   /dd/defs/os9.d):00316         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (   /dd/defs/os9.d):00317         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (   /dd/defs/os9.d):00318         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (   /dd/defs/os9.d):00319                        RMB       1                   Reserved
0091                  (   /dd/defs/os9.d):00320         SS.Palet       RMB       1                   Return palette information
0092                  (   /dd/defs/os9.d):00321         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (   /dd/defs/os9.d):00322         SS.ScTyp       RMB       1                   Get screen type information
0094                  (   /dd/defs/os9.d):00323         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (   /dd/defs/os9.d):00324         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (   /dd/defs/os9.d):00325         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (   /dd/defs/os9.d):00326         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (   /dd/defs/os9.d):00327         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (   /dd/defs/os9.d):00328         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (   /dd/defs/os9.d):00329         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (   /dd/defs/os9.d):00330         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (   /dd/defs/os9.d):00331         
                      (   /dd/defs/os9.d):00332         * sc6551 defined
     0099             (   /dd/defs/os9.d):00333         SS.CDSta       EQU       SS.GIP2
     009A             (   /dd/defs/os9.d):00334         SS.CDSig       EQU       SS.AnPal
     009B             (   /dd/defs/os9.d):00335         SS.CDRel       EQU       SS.FndBf
                      (   /dd/defs/os9.d):00336         * These are wide open in Level 1
                      (   /dd/defs/os9.d):00337         
                      (   /dd/defs/os9.d):00338         * sc6551 defined
                      (   /dd/defs/os9.d):00339         
                      (   /dd/defs/os9.d):00340                        ORG       $A0
                      (   /dd/defs/os9.d):00341         *
                      (   /dd/defs/os9.d):00342         * New Default SCF input buffer Set status call
00A0                  (   /dd/defs/os9.d):00343         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (   /dd/defs/os9.d):00344         SS.Hist        RMB       1                   Enable command-line history easily
                      (   /dd/defs/os9.d):00345         
                      (   /dd/defs/os9.d):00346         
                      (   /dd/defs/os9.d):00347                        ORG       $B0
                      (   /dd/defs/os9.d):00348         *
                      (   /dd/defs/os9.d):00349         * New WDDisk get/set status calls
00B0                  (   /dd/defs/os9.d):00350         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (   /dd/defs/os9.d):00351         
                      (   /dd/defs/os9.d):00352         *
                      (   /dd/defs/os9.d):00353         
                      (   /dd/defs/os9.d):00354         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (   /dd/defs/os9.d):00355         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (   /dd/defs/os9.d):00356         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (   /dd/defs/os9.d):00357         
     0081             (   /dd/defs/os9.d):00358         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (   /dd/defs/os9.d):00359         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (   /dd/defs/os9.d):00360         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (   /dd/defs/os9.d):00361         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (   /dd/defs/os9.d):00362         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (   /dd/defs/os9.d):00363         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (   /dd/defs/os9.d):00364         
                      (   /dd/defs/os9.d):00365         * SDisk 3 Definition Equates
     0080             (   /dd/defs/os9.d):00366         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (   /dd/defs/os9.d):00367         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (   /dd/defs/os9.d):00368         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (   /dd/defs/os9.d):00369         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (   /dd/defs/os9.d):00370         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (   /dd/defs/os9.d):00371         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (   /dd/defs/os9.d):00372         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (   /dd/defs/os9.d):00373         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (   /dd/defs/os9.d):00374         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return ($86)
                      (   /dd/defs/os9.d):00375         
                      (   /dd/defs/os9.d):00376         
                      (   /dd/defs/os9.d):00377                        TTL       Direct Page Definitions
                      (   /dd/defs/os9.d):00378                        PAG       
                      (   /dd/defs/os9.d):00379         
                      (   /dd/defs/os9.d):00380         **********************************
                      (   /dd/defs/os9.d):00381         * Direct Page Variable Definitions
                      (   /dd/defs/os9.d):00382         *
                      (   /dd/defs/os9.d):00383                        ORG       $00
0000                  (   /dd/defs/os9.d):00384         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (   /dd/defs/os9.d):00385         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (   /dd/defs/os9.d):00386         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (   /dd/defs/os9.d):00387                        RMB       5
0009                  (   /dd/defs/os9.d):00388         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (   /dd/defs/os9.d):00389         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (   /dd/defs/os9.d):00390         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (   /dd/defs/os9.d):00391         D.DWStat       RMB       2                   DriveWire statics page
0010                  (   /dd/defs/os9.d):00392         D.DWSrvID      RMB       1                   DriveWire server ID
                      (   /dd/defs/os9.d):00393         
                      (   /dd/defs/os9.d):00394                        ORG       $20
                      (   /dd/defs/os9.d):00395         
                      (   /dd/defs/os9.d):00396         
                      (   /dd/defs/os9.d):00397         * Level 1 DP vars
                      (   /dd/defs/os9.d):00398         
                      (   /dd/defs/os9.d):00399         *D.XSWI3        RMB       3
                      (   /dd/defs/os9.d):00400         *D.XSWI2        RMB       3
                      (   /dd/defs/os9.d):00401         *D.XFIRQ        RMB       3
                      (   /dd/defs/os9.d):00402         *D.XIRQ         RMB       3
                      (   /dd/defs/os9.d):00403         *D.XSWI         RMB       3
                      (   /dd/defs/os9.d):00404         *D.XNMI         RMB       3
                      (   /dd/defs/os9.d):00405         
                      (   /dd/defs/os9.d):00406         
                      (   /dd/defs/os9.d):00407         * Table Sizes
                      (   /dd/defs/os9.d):00408         
                      (   /dd/defs/os9.d):00409         
                      (   /dd/defs/os9.d):00410         * Level 2 DP vars
0020                  (   /dd/defs/os9.d):00411         D.Tasks        RMB       2                   Task User Table
0022                  (   /dd/defs/os9.d):00412         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (   /dd/defs/os9.d):00413         D.Init         RMB       2                   Initialization Module ptr
0026                  (   /dd/defs/os9.d):00414         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (   /dd/defs/os9.d):00415         D.Time         EQU       .                   System Time
0028                  (   /dd/defs/os9.d):00416         D.Year         RMB       1
0029                  (   /dd/defs/os9.d):00417         D.Month        RMB       1
002A                  (   /dd/defs/os9.d):00418         D.Day          RMB       1
002B                  (   /dd/defs/os9.d):00419         D.Hour         RMB       1
002C                  (   /dd/defs/os9.d):00420         D.Min          RMB       1
002D                  (   /dd/defs/os9.d):00421         D.Sec          RMB       1
002E                  (   /dd/defs/os9.d):00422         D.Tick         RMB       1
002F                  (   /dd/defs/os9.d):00423         D.Slice        RMB       1                   current slice remaining
0030                  (   /dd/defs/os9.d):00424         D.TSlice       RMB       1                   Ticks per Slice
0031                  (   /dd/defs/os9.d):00425         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (   /dd/defs/os9.d):00426         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (   /dd/defs/os9.d):00427         D.ErrCod       RMB       1                   Reset Error Code
0034                  (   /dd/defs/os9.d):00428         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (   /dd/defs/os9.d):00429         D.TkCnt        RMB       1                   Tick Counter
0036                  (   /dd/defs/os9.d):00430         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (   /dd/defs/os9.d):00431         D.BtSz         RMB       2                   Size of Boot
                      (   /dd/defs/os9.d):00432         
003A                  (   /dd/defs/os9.d):00433                        RMB       1                   Currently unused in NitrOS-9/6809
                      (   /dd/defs/os9.d):00434         
003B                  (   /dd/defs/os9.d):00435         D.CRC          RMB       1                   CRC checking mode flag
                      (   /dd/defs/os9.d):00436         
003C                  (   /dd/defs/os9.d):00437         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (   /dd/defs/os9.d):00438         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (   /dd/defs/os9.d):00439         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (   /dd/defs/os9.d):00440         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (   /dd/defs/os9.d):00441         
                      (   /dd/defs/os9.d):00442                        ORG       $40
0040                  (   /dd/defs/os9.d):00443         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (   /dd/defs/os9.d):00444         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (   /dd/defs/os9.d):00445         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (   /dd/defs/os9.d):00446         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (   /dd/defs/os9.d):00447         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (   /dd/defs/os9.d):00448         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (   /dd/defs/os9.d):00449         D.Proc         RMB       2                   Current Process ptr
0052                  (   /dd/defs/os9.d):00450         D.AProcQ       RMB       2                   Active Process Queue
0054                  (   /dd/defs/os9.d):00451         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (   /dd/defs/os9.d):00452         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (   /dd/defs/os9.d):00453         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (   /dd/defs/os9.d):00454         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (   /dd/defs/os9.d):00455         D.CldRes       RMB       2                   Cold Restart vector
005E                  (   /dd/defs/os9.d):00456         D.BtBug        RMB       3                   Boot debug information
0061                  (   /dd/defs/os9.d):00457         D.Pipe         RMB       2
                      (   /dd/defs/os9.d):00458         
                      (   /dd/defs/os9.d):00459                        ORG       $6B
006B                  (   /dd/defs/os9.d):00460         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (   /dd/defs/os9.d):00461         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (   /dd/defs/os9.d):00462         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (   /dd/defs/os9.d):00463         
                      (   /dd/defs/os9.d):00464                        ORG       $80
0080                  (   /dd/defs/os9.d):00465         D.DevTbl       RMB       2                   I/O Device Table
0082                  (   /dd/defs/os9.d):00466         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (   /dd/defs/os9.d):00467                        RMB       4                   reserved
0088                  (   /dd/defs/os9.d):00468         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (   /dd/defs/os9.d):00469         D.DMAReq       RMB       1                   DMA Request flag
                      (   /dd/defs/os9.d):00470         
                      (   /dd/defs/os9.d):00471         ********
                      (   /dd/defs/os9.d):00472         * CoCo 3 STUFF COMES NEXT
                      (   /dd/defs/os9.d):00473         * This area is used for the CoCo Hardware Registers
                      (   /dd/defs/os9.d):00474         *
                      (   /dd/defs/os9.d):00475                        ORG       $90
0090                  (   /dd/defs/os9.d):00476         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (   /dd/defs/os9.d):00477         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (   /dd/defs/os9.d):00478         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (   /dd/defs/os9.d):00479         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (   /dd/defs/os9.d):00480         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (   /dd/defs/os9.d):00481         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (   /dd/defs/os9.d):00482         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (   /dd/defs/os9.d):00483         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (   /dd/defs/os9.d):00484         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (   /dd/defs/os9.d):00485         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (   /dd/defs/os9.d):00486         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (   /dd/defs/os9.d):00487         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (   /dd/defs/os9.d):00488         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (   /dd/defs/os9.d):00489         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (   /dd/defs/os9.d):00490         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (   /dd/defs/os9.d):00491         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (   /dd/defs/os9.d):00492         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (   /dd/defs/os9.d):00493         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (   /dd/defs/os9.d):00494         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (   /dd/defs/os9.d):00495         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (   /dd/defs/os9.d):00496         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (   /dd/defs/os9.d):00497         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (   /dd/defs/os9.d):00498         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (   /dd/defs/os9.d):00499         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (   /dd/defs/os9.d):00500         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (   /dd/defs/os9.d):00501         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (   /dd/defs/os9.d):00502         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (   /dd/defs/os9.d):00503         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (   /dd/defs/os9.d):00504         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (   /dd/defs/os9.d):00505         D.Clock2       RMB       2                   CC Clock2 entry address
                      (   /dd/defs/os9.d):00506                        ORG       $C0
00C0                  (   /dd/defs/os9.d):00507         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (   /dd/defs/os9.d):00508         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (   /dd/defs/os9.d):00509         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (   /dd/defs/os9.d):00510         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (   /dd/defs/os9.d):00511         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (   /dd/defs/os9.d):00512         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (   /dd/defs/os9.d):00513         D.SysStk       RMB       2                   System stack
00CE                  (   /dd/defs/os9.d):00514         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (   /dd/defs/os9.d):00515         D.SysTsk       RMB       1                   System Task number
                      (   /dd/defs/os9.d):00516                        ORG       $E0
00E0                  (   /dd/defs/os9.d):00517         D.Clock        RMB       2
00E2                  (   /dd/defs/os9.d):00518         D.XSWI3        RMB       2
00E4                  (   /dd/defs/os9.d):00519         D.XSWI2        RMB       2
00E6                  (   /dd/defs/os9.d):00520         D.XFIRQ        RMB       2
00E8                  (   /dd/defs/os9.d):00521         D.XIRQ         RMB       2
00EA                  (   /dd/defs/os9.d):00522         D.XSWI         RMB       2
00EC                  (   /dd/defs/os9.d):00523         D.XNMI         RMB       2
00EE                  (   /dd/defs/os9.d):00524         D.ErrRst       RMB       2
00F0                  (   /dd/defs/os9.d):00525         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (   /dd/defs/os9.d):00526         D.SWI3         RMB       2
00F4                  (   /dd/defs/os9.d):00527         D.SWI2         RMB       2
00F6                  (   /dd/defs/os9.d):00528         D.FIRQ         RMB       2
00F8                  (   /dd/defs/os9.d):00529         D.IRQ          RMB       2
00FA                  (   /dd/defs/os9.d):00530         D.SWI          RMB       2
00FC                  (   /dd/defs/os9.d):00531         D.NMI          RMB       2
                      (   /dd/defs/os9.d):00532         
                      (   /dd/defs/os9.d):00533         *************************
                      (   /dd/defs/os9.d):00534         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (   /dd/defs/os9.d):00535         * and for bytes in the system memory map at D.SysMem.
                      (   /dd/defs/os9.d):00536         * A value of 0 indicates an unused/unassigned block.
                      (   /dd/defs/os9.d):00537         * In the code, block assignment often involves incrementing a value
                      (   /dd/defs/os9.d):00538         * from 0 to 1 rather than explict use of RAMinUse.
                      (   /dd/defs/os9.d):00539         *
     0080             (   /dd/defs/os9.d):00540         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (   /dd/defs/os9.d):00541         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (   /dd/defs/os9.d):00542         ModBlock       EQU       %00000010           Module in Block
     0001             (   /dd/defs/os9.d):00543         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (   /dd/defs/os9.d):00544         *
                      (   /dd/defs/os9.d):00545         * Service Dispatch Table special entries
                      (   /dd/defs/os9.d):00546         *
     00FE             (   /dd/defs/os9.d):00547         IOEntry        EQU       254
                      (   /dd/defs/os9.d):00548         
                      (   /dd/defs/os9.d):00549         
                      (   /dd/defs/os9.d):00550                        TTL       Structure Formats
                      (   /dd/defs/os9.d):00551                        PAG       
                      (   /dd/defs/os9.d):00552         ************************************
                      (   /dd/defs/os9.d):00553         * Module Directory Entry Definitions
                      (   /dd/defs/os9.d):00554         *
                      (   /dd/defs/os9.d):00555                        ORG       0
0000                  (   /dd/defs/os9.d):00556         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (   /dd/defs/os9.d):00557         MD$MBSiz       RMB       2                   Memory Block size
0004                  (   /dd/defs/os9.d):00558         MD$MPtr        RMB       2                   Module ptr
0006                  (   /dd/defs/os9.d):00559         MD$Link        RMB       2                   Module Link count
     0008             (   /dd/defs/os9.d):00560         MD$ESize       EQU       .                   Module Directory Entry size
                      (   /dd/defs/os9.d):00561         
                      (   /dd/defs/os9.d):00562         ************************************
                      (   /dd/defs/os9.d):00563         * Module Definitions
                      (   /dd/defs/os9.d):00564         *
                      (   /dd/defs/os9.d):00565         * Universal Module Offsets
                      (   /dd/defs/os9.d):00566         *
                      (   /dd/defs/os9.d):00567                        ORG       0
0000                  (   /dd/defs/os9.d):00568         M$ID           RMB       2                   ID Code
0002                  (   /dd/defs/os9.d):00569         M$Size         RMB       2                   Module Size
0004                  (   /dd/defs/os9.d):00570         M$Name         RMB       2                   Module Name
0006                  (   /dd/defs/os9.d):00571         M$Type         RMB       1                   Type / Language
0007                  (   /dd/defs/os9.d):00572         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (   /dd/defs/os9.d):00573         M$Parity       RMB       1                   Header Parity
     0009             (   /dd/defs/os9.d):00574         M$IDSize       EQU       .                   Module ID Size
                      (   /dd/defs/os9.d):00575         *
                      (   /dd/defs/os9.d):00576         * Type-Dependent Module Offsets
                      (   /dd/defs/os9.d):00577         *
                      (   /dd/defs/os9.d):00578         * System, File Manager, Device Driver, Program Module
                      (   /dd/defs/os9.d):00579         *
0009                  (   /dd/defs/os9.d):00580         M$Exec         RMB       2                   Execution Entry Offset
                      (   /dd/defs/os9.d):00581         *
                      (   /dd/defs/os9.d):00582         * Device Driver, Program Module
                      (   /dd/defs/os9.d):00583         *
000B                  (   /dd/defs/os9.d):00584         M$Mem          RMB       2                   Stack Requirement
                      (   /dd/defs/os9.d):00585         *
                      (   /dd/defs/os9.d):00586         * Device Driver, Device Descriptor Module
                      (   /dd/defs/os9.d):00587         *
000D                  (   /dd/defs/os9.d):00588         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (   /dd/defs/os9.d):00589         *
                      (   /dd/defs/os9.d):00590         * Device Descriptor Module
                      (   /dd/defs/os9.d):00591         *
                      (   /dd/defs/os9.d):00592                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00593         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (   /dd/defs/os9.d):00594         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (   /dd/defs/os9.d):00595                        RMB       1                   M$Mode (defined above)
000E                  (   /dd/defs/os9.d):00596         M$Port         RMB       3                   Port Address
0011                  (   /dd/defs/os9.d):00597         M$Opt          RMB       1                   Device Default Options
0012                  (   /dd/defs/os9.d):00598         M$DTyp         RMB       1                   Device Type
     0012             (   /dd/defs/os9.d):00599         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (   /dd/defs/os9.d):00600         *
                      (   /dd/defs/os9.d):00601         * Configuration Module Entry Offsets
                      (   /dd/defs/os9.d):00602         *
                      (   /dd/defs/os9.d):00603                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00604         MaxMem         RMB       3                   Maximum Free Memory
000C                  (   /dd/defs/os9.d):00605         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (   /dd/defs/os9.d):00606         DevCnt         RMB       1                   Entries in Device Table
000E                  (   /dd/defs/os9.d):00607         InitStr        RMB       2                   Initial Module Name
0010                  (   /dd/defs/os9.d):00608         SysStr         RMB       2                   System Device Name
0012                  (   /dd/defs/os9.d):00609         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (   /dd/defs/os9.d):00610         BootStr        RMB       2                   Bootstrap Module name
0016                  (   /dd/defs/os9.d):00611         ProtFlag       RMB       1                   Write protect enable flag
                      (   /dd/defs/os9.d):00612         
0017                  (   /dd/defs/os9.d):00613         OSLevel        RMB       1                   OS level
0018                  (   /dd/defs/os9.d):00614         OSVer          RMB       1                   OS version
0019                  (   /dd/defs/os9.d):00615         OSMajor        RMB       1                   OS major
001A                  (   /dd/defs/os9.d):00616         OSMinor        RMB       1                   OS minor
001B                  (   /dd/defs/os9.d):00617         Feature1       RMB       1                   feature byte 1
001C                  (   /dd/defs/os9.d):00618         Feature2       RMB       1                   feature byte 2
001D                  (   /dd/defs/os9.d):00619         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (   /dd/defs/os9.d):00620         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (   /dd/defs/os9.d):00621                        RMB       4                   reserved for future use
                      (   /dd/defs/os9.d):00622         
                      (   /dd/defs/os9.d):00623         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (   /dd/defs/os9.d):00624         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (   /dd/defs/os9.d):00625         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (   /dd/defs/os9.d):00626         KeyRptS        RMB       1                   Key repeat start constant
0029                  (   /dd/defs/os9.d):00627         KeyRptD        RMB       1                   Key repeat delay constant
                      (   /dd/defs/os9.d):00628         
                      (   /dd/defs/os9.d):00629         * Feature1 byte definitions
     0001             (   /dd/defs/os9.d):00630         CRCOn          EQU       %00000001           CRC checking on
     0000             (   /dd/defs/os9.d):00631         CRCOff         EQU       %00000000           CRC checking off
     0000             (   /dd/defs/os9.d):00632         Proc6809       EQU       %00000000           6809 procesor
     0002             (   /dd/defs/os9.d):00633         Proc6309       EQU       %00000010           6309 procesor
                      (   /dd/defs/os9.d):00634         
                      (   /dd/defs/os9.d):00635                        PAG       
                      (   /dd/defs/os9.d):00636         **************************
                      (   /dd/defs/os9.d):00637         * Module Field Definitions
                      (   /dd/defs/os9.d):00638         *
                      (   /dd/defs/os9.d):00639         * ID Field - First two bytes of a NitrOS-9 module
                      (   /dd/defs/os9.d):00640         *
     0087             (   /dd/defs/os9.d):00641         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (   /dd/defs/os9.d):00642         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (   /dd/defs/os9.d):00643         M$ID12         EQU       M$ID1*256+M$ID2
                      (   /dd/defs/os9.d):00644         
                      (   /dd/defs/os9.d):00645         *
                      (   /dd/defs/os9.d):00646         * Module Type/Language Field Masks
                      (   /dd/defs/os9.d):00647         *
     00F0             (   /dd/defs/os9.d):00648         TypeMask       EQU       %11110000           Type Field
     000F             (   /dd/defs/os9.d):00649         LangMask       EQU       %00001111           Language Field
                      (   /dd/defs/os9.d):00650         
                      (   /dd/defs/os9.d):00651         *
                      (   /dd/defs/os9.d):00652         * Module Type Values
                      (   /dd/defs/os9.d):00653         *
     00F0             (   /dd/defs/os9.d):00654         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (   /dd/defs/os9.d):00655         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (   /dd/defs/os9.d):00656         FlMgr          EQU       $D0                 File Manager
     00C0             (   /dd/defs/os9.d):00657         Systm          EQU       $C0                 System Module
     0050             (   /dd/defs/os9.d):00658         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (   /dd/defs/os9.d):00659         Data           EQU       $40                 Data Module
     0030             (   /dd/defs/os9.d):00660         Multi          EQU       $30                 Multi-Module
     0020             (   /dd/defs/os9.d):00661         Sbrtn          EQU       $20                 Subroutine Module
     0010             (   /dd/defs/os9.d):00662         Prgrm          EQU       $10                 Program Module
                      (   /dd/defs/os9.d):00663         
                      (   /dd/defs/os9.d):00664         *
                      (   /dd/defs/os9.d):00665         * Module Language Values
                      (   /dd/defs/os9.d):00666         *
     0001             (   /dd/defs/os9.d):00667         Objct          EQU       1                   6809 Object Code Module
     0002             (   /dd/defs/os9.d):00668         ICode          EQU       2                   Basic09 I-code
     0003             (   /dd/defs/os9.d):00669         PCode          EQU       3                   Pascal P-code
     0004             (   /dd/defs/os9.d):00670         CCode          EQU       4                   C I-code
     0005             (   /dd/defs/os9.d):00671         CblCode        EQU       5                   Cobol I-code
     0006             (   /dd/defs/os9.d):00672         FrtnCode       EQU       6                   Fortran I-code
     0007             (   /dd/defs/os9.d):00673         Obj6309        EQU       7                   6309 object code
                      (   /dd/defs/os9.d):00674         *
                      (   /dd/defs/os9.d):00675         * Module Attributes / Revision byte
                      (   /dd/defs/os9.d):00676         *
                      (   /dd/defs/os9.d):00677         * Field Masks
                      (   /dd/defs/os9.d):00678         *
     00F0             (   /dd/defs/os9.d):00679         AttrMask       EQU       %11110000           Attributes Field
     000F             (   /dd/defs/os9.d):00680         RevsMask       EQU       %00001111           Revision Level Field
                      (   /dd/defs/os9.d):00681         *
                      (   /dd/defs/os9.d):00682         * Attribute Flags
                      (   /dd/defs/os9.d):00683         *
     0080             (   /dd/defs/os9.d):00684         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (   /dd/defs/os9.d):00685         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (   /dd/defs/os9.d):00686         ModNat         EQU       %00100000           6309 native mode attribute
                      (   /dd/defs/os9.d):00687         
                      (   /dd/defs/os9.d):00688         ********************
                      (   /dd/defs/os9.d):00689         * Device Type Values
                      (   /dd/defs/os9.d):00690         *
                      (   /dd/defs/os9.d):00691         * These values define various classes of devices, which are
                      (   /dd/defs/os9.d):00692         * managed by a file manager module.  The Device Type is embedded
                      (   /dd/defs/os9.d):00693         * in a device's device descriptor.
                      (   /dd/defs/os9.d):00694         *
     0000             (   /dd/defs/os9.d):00695         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (   /dd/defs/os9.d):00696         DT.RBF         EQU       1                   Random Block File Manager
     0002             (   /dd/defs/os9.d):00697         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (   /dd/defs/os9.d):00698         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (   /dd/defs/os9.d):00699         DT.NFM         EQU       4                   Network File Manager
     0005             (   /dd/defs/os9.d):00700         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (   /dd/defs/os9.d):00701         DT.RFM                  EQU             6                                       Remote File Manager
                      (   /dd/defs/os9.d):00702         
                      (   /dd/defs/os9.d):00703         *********************
                      (   /dd/defs/os9.d):00704         * CRC Result Constant
                      (   /dd/defs/os9.d):00705         *
     0080             (   /dd/defs/os9.d):00706         CRCCon1        EQU       $80
     0FE3             (   /dd/defs/os9.d):00707         CRCCon23       EQU       $0FE3
                      (   /dd/defs/os9.d):00708         
                      (   /dd/defs/os9.d):00709                        TTL       Process Information
                      (   /dd/defs/os9.d):00710                        PAG       
                      (   /dd/defs/os9.d):00711         ********************************
                      (   /dd/defs/os9.d):00712         * Process Descriptor Definitions
                      (   /dd/defs/os9.d):00713         *
                      (   /dd/defs/os9.d):00714         
                      (   /dd/defs/os9.d):00715         * Level 1 process descriptor defs
                      (   /dd/defs/os9.d):00716         
                      (   /dd/defs/os9.d):00717         
                      (   /dd/defs/os9.d):00718         *
                      (   /dd/defs/os9.d):00719         * Process State Flags
                      (   /dd/defs/os9.d):00720         *
                      (   /dd/defs/os9.d):00721         
                      (   /dd/defs/os9.d):00722         
                      (   /dd/defs/os9.d):00723         * Level 2 process descriptor defs
     0010             (   /dd/defs/os9.d):00724         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (   /dd/defs/os9.d):00725         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (   /dd/defs/os9.d):00726         NumPaths       EQU       16                  Number of Local Paths
                      (   /dd/defs/os9.d):00727         
                      (   /dd/defs/os9.d):00728                        ORG       0
0000                  (   /dd/defs/os9.d):00729         P$ID           RMB       1                   Process ID
0001                  (   /dd/defs/os9.d):00730         P$PID          RMB       1                   Parent's ID
0002                  (   /dd/defs/os9.d):00731         P$SID          RMB       1                   Sibling's ID
0003                  (   /dd/defs/os9.d):00732         P$CID          RMB       1                   Child's ID
0004                  (   /dd/defs/os9.d):00733         P$SP           RMB       2                   Stack ptr
0006                  (   /dd/defs/os9.d):00734         P$Task         RMB       1                   Task Number
0007                  (   /dd/defs/os9.d):00735         P$PagCnt       RMB       1                   Memory Page Count
0008                  (   /dd/defs/os9.d):00736         P$User         RMB       2                   User Index
000A                  (   /dd/defs/os9.d):00737         P$Prior        RMB       1                   Priority
000B                  (   /dd/defs/os9.d):00738         P$Age          RMB       1                   Age
000C                  (   /dd/defs/os9.d):00739         P$State        RMB       1                   Status
000D                  (   /dd/defs/os9.d):00740         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (   /dd/defs/os9.d):00741         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (   /dd/defs/os9.d):00742         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (   /dd/defs/os9.d):00743         P$PModul       RMB       2                   Primary Module
0013                  (   /dd/defs/os9.d):00744         P$SWI          RMB       2                   SWI Entry Point
0015                  (   /dd/defs/os9.d):00745         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (   /dd/defs/os9.d):00746         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (   /dd/defs/os9.d):00747         P$Signal       RMB       1                   Signal Code
001A                  (   /dd/defs/os9.d):00748         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (   /dd/defs/os9.d):00749         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (   /dd/defs/os9.d):00750         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (   /dd/defs/os9.d):00751                        RMB       $20-.               unused
0020                  (   /dd/defs/os9.d):00752         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (   /dd/defs/os9.d):00753         P$Path         RMB       NumPaths            I/O Path Table
0040                  (   /dd/defs/os9.d):00754         P$DATImg       RMB       64                  DAT Image
0080                  (   /dd/defs/os9.d):00755         P$Links        RMB       32                  Block Link counts
00A0                  (   /dd/defs/os9.d):00756         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (   /dd/defs/os9.d):00757         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (   /dd/defs/os9.d):00758         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (   /dd/defs/os9.d):00759         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (   /dd/defs/os9.d):00760         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (   /dd/defs/os9.d):00761         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (   /dd/defs/os9.d):00762         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (   /dd/defs/os9.d):00763         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (   /dd/defs/os9.d):00764         P$Alarm        RMB       6
00C9                  (   /dd/defs/os9.d):00765                        RMB       $200-.              Local stack
     0200             (   /dd/defs/os9.d):00766         P$Stack        EQU       .                   Top of Stack
     0200             (   /dd/defs/os9.d):00767         P$Size         EQU       .                   Size of Process Descriptor
                      (   /dd/defs/os9.d):00768         
                      (   /dd/defs/os9.d):00769         *
                      (   /dd/defs/os9.d):00770         * Process State Flags
                      (   /dd/defs/os9.d):00771         *
     0080             (   /dd/defs/os9.d):00772         SysState       EQU       %10000000
     0040             (   /dd/defs/os9.d):00773         TimSleep       EQU       %01000000
     0020             (   /dd/defs/os9.d):00774         TimOut         EQU       %00100000
     0010             (   /dd/defs/os9.d):00775         ImgChg         EQU       %00010000
     0008             (   /dd/defs/os9.d):00776         Suspend        EQU       %00001000
     0002             (   /dd/defs/os9.d):00777         Condem         EQU       %00000010
     0001             (   /dd/defs/os9.d):00778         Dead           EQU       %00000001
                      (   /dd/defs/os9.d):00779         
                      (   /dd/defs/os9.d):00780         
                      (   /dd/defs/os9.d):00781                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (   /dd/defs/os9.d):00782                        PAG       
                      (   /dd/defs/os9.d):00783         *************************
                      (   /dd/defs/os9.d):00784         * Path Descriptor Offsets
                      (   /dd/defs/os9.d):00785         *
                      (   /dd/defs/os9.d):00786                        ORG       0
0000                  (   /dd/defs/os9.d):00787         PD.PD          RMB       1                   Path Number
0001                  (   /dd/defs/os9.d):00788         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (   /dd/defs/os9.d):00789         PD.CNT         RMB       1                   Number of Open Images
0003                  (   /dd/defs/os9.d):00790         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (   /dd/defs/os9.d):00791         PD.CPR         RMB       1                   Current Process
0006                  (   /dd/defs/os9.d):00792         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (   /dd/defs/os9.d):00793         PD.BUF         RMB       2                   Buffer Address
000A                  (   /dd/defs/os9.d):00794         PD.FST         RMB       32-.                File Manager's Storage
     0020             (   /dd/defs/os9.d):00795         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (   /dd/defs/os9.d):00796         PD.DTP         RMB       1                   Device Type
0021                  (   /dd/defs/os9.d):00797                        RMB       64-.                Path options
     0040             (   /dd/defs/os9.d):00798         PDSIZE         EQU       .
                      (   /dd/defs/os9.d):00799         
                      (   /dd/defs/os9.d):00800         *
                      (   /dd/defs/os9.d):00801         * Pathlist Special Symbols
                      (   /dd/defs/os9.d):00802         *
     002F             (   /dd/defs/os9.d):00803         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (   /dd/defs/os9.d):00804         PDIR           EQU       '.                  Directory
     0040             (   /dd/defs/os9.d):00805         PENTIR         EQU       '@                  Entire Device
                      (   /dd/defs/os9.d):00806         
                      (   /dd/defs/os9.d):00807                        PAG       
                      (   /dd/defs/os9.d):00808         ****************************
                      (   /dd/defs/os9.d):00809         * File Manager Entry Offsets
                      (   /dd/defs/os9.d):00810         *
                      (   /dd/defs/os9.d):00811                        ORG       0
0000                  (   /dd/defs/os9.d):00812         FMCREA         RMB       3                   Create (Open New) File
0003                  (   /dd/defs/os9.d):00813         FMOPEN         RMB       3                   Open File
0006                  (   /dd/defs/os9.d):00814         FMMDIR         RMB       3                   Make Directory
0009                  (   /dd/defs/os9.d):00815         FMCDIR         RMB       3                   Change Directory
000C                  (   /dd/defs/os9.d):00816         FMDLET         RMB       3                   Delete File
000F                  (   /dd/defs/os9.d):00817         FMSEEK         RMB       3                   Position File
0012                  (   /dd/defs/os9.d):00818         FMREAD         RMB       3                   Read from File
0015                  (   /dd/defs/os9.d):00819         FMWRIT         RMB       3                   Write to File
0018                  (   /dd/defs/os9.d):00820         FMRDLN         RMB       3                   ReadLn
001B                  (   /dd/defs/os9.d):00821         FMWRLN         RMB       3                   WritLn
001E                  (   /dd/defs/os9.d):00822         FMGSTA         RMB       3                   Get File Status
0021                  (   /dd/defs/os9.d):00823         FMSSTA         RMB       3                   Set File Status
0024                  (   /dd/defs/os9.d):00824         FMCLOS         RMB       3                   Close File
                      (   /dd/defs/os9.d):00825         
                      (   /dd/defs/os9.d):00826         *****************************
                      (   /dd/defs/os9.d):00827         * Device Driver Entry Offsets
                      (   /dd/defs/os9.d):00828         *
                      (   /dd/defs/os9.d):00829                        ORG       0
0000                  (   /dd/defs/os9.d):00830         D$INIT         RMB       3                   Device Initialization
0003                  (   /dd/defs/os9.d):00831         D$READ         RMB       3                   Read from Device
0006                  (   /dd/defs/os9.d):00832         D$WRIT         RMB       3                   Write to Device
0009                  (   /dd/defs/os9.d):00833         D$GSTA         RMB       3                   Get Device Status
000C                  (   /dd/defs/os9.d):00834         D$PSTA         RMB       3                   Put Device Status
000F                  (   /dd/defs/os9.d):00835         D$TERM         RMB       3                   Device Termination
                      (   /dd/defs/os9.d):00836         
                      (   /dd/defs/os9.d):00837         *********************
                      (   /dd/defs/os9.d):00838         * Device Table Format
                      (   /dd/defs/os9.d):00839         *
                      (   /dd/defs/os9.d):00840                        ORG       0
0000                  (   /dd/defs/os9.d):00841         V$DRIV         RMB       2                   Device Driver module
0002                  (   /dd/defs/os9.d):00842         V$STAT         RMB       2                   Device Driver Static storage
0004                  (   /dd/defs/os9.d):00843         V$DESC         RMB       2                   Device Descriptor module
0006                  (   /dd/defs/os9.d):00844         V$FMGR         RMB       2                   File Manager module
0008                  (   /dd/defs/os9.d):00845         V$USRS         RMB       1                   use count
0009                  (   /dd/defs/os9.d):00846         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (   /dd/defs/os9.d):00847         V$FMGREX       RMB       2                   File Manager execution address
     000D             (   /dd/defs/os9.d):00848         DEVSIZ         EQU       .
                      (   /dd/defs/os9.d):00849         
                      (   /dd/defs/os9.d):00850         *******************************
                      (   /dd/defs/os9.d):00851         * Device Static Storage Offsets
                      (   /dd/defs/os9.d):00852         *
                      (   /dd/defs/os9.d):00853                        ORG       0
0000                  (   /dd/defs/os9.d):00854         V.PAGE         RMB       1                   Port Extended Address
0001                  (   /dd/defs/os9.d):00855         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (   /dd/defs/os9.d):00856         V.LPRC         RMB       1                   Last Active Process ID
0004                  (   /dd/defs/os9.d):00857         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (   /dd/defs/os9.d):00858         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (   /dd/defs/os9.d):00859         V.USER         EQU       .                   Driver Allocation Origin
                      (   /dd/defs/os9.d):00860         
                      (   /dd/defs/os9.d):00861         ********************************
                      (   /dd/defs/os9.d):00862         * Interrupt Polling Table Format
                      (   /dd/defs/os9.d):00863         *
                      (   /dd/defs/os9.d):00864                        ORG       0
0000                  (   /dd/defs/os9.d):00865         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (   /dd/defs/os9.d):00866         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (   /dd/defs/os9.d):00867         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (   /dd/defs/os9.d):00868         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (   /dd/defs/os9.d):00869         Q$STAT         RMB       2                   Static Storage Address
0008                  (   /dd/defs/os9.d):00870         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
0009                  (   /dd/defs/os9.d):00871         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
     000B             (   /dd/defs/os9.d):00872         POLSIZ         EQU       .
                      (   /dd/defs/os9.d):00873         
                      (   /dd/defs/os9.d):00874         ********************
                      (   /dd/defs/os9.d):00875         * VIRQ packet format
                      (   /dd/defs/os9.d):00876         *
                      (   /dd/defs/os9.d):00877                        ORG       0
0000                  (   /dd/defs/os9.d):00878         Vi.Cnt         RMB       2                   count down counter
0002                  (   /dd/defs/os9.d):00879         Vi.Rst         RMB       2                   reset value for counter
0004                  (   /dd/defs/os9.d):00880         Vi.Stat        RMB       1                   status byte
     0005             (   /dd/defs/os9.d):00881         Vi.PkSz        EQU       .
                      (   /dd/defs/os9.d):00882         
     0001             (   /dd/defs/os9.d):00883         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (   /dd/defs/os9.d):00884         
                      (   /dd/defs/os9.d):00885                        PAG       
                      (   /dd/defs/os9.d):00886         *************************************
                      (   /dd/defs/os9.d):00887         * Machine Characteristics Definitions
                      (   /dd/defs/os9.d):00888         *
     0000             (   /dd/defs/os9.d):00889         R$CC           EQU       0                   Condition Codes register
     0001             (   /dd/defs/os9.d):00890         R$A            EQU       1                   A Accumulator
     0002             (   /dd/defs/os9.d):00891         R$B            EQU       2                   B Accumulator
     0001             (   /dd/defs/os9.d):00892         R$D            EQU       R$A                 Combined A:B Accumulator
                      (   /dd/defs/os9.d):00893                        IFNE      H6309
0005                  (   /dd/defs/os9.d):00894         R$E            EQU       3
0005                  (   /dd/defs/os9.d):00895         R$F            EQU       4
0005                  (   /dd/defs/os9.d):00896         R$W            EQU       R$E
0005                  (   /dd/defs/os9.d):00897         R$Q            EQU       R$A
0005                  (   /dd/defs/os9.d):00898         R$DP           EQU       5
0005                  (   /dd/defs/os9.d):00899         R$X            EQU       6
0005                  (   /dd/defs/os9.d):00900         R$Y            EQU       8
0005                  (   /dd/defs/os9.d):00901         R$U            EQU       10
0005                  (   /dd/defs/os9.d):00902         R$PC           EQU       12
0005                  (   /dd/defs/os9.d):00903         R$Size         EQU       14
                      (   /dd/defs/os9.d):00904                        ELSE
     0003             (   /dd/defs/os9.d):00905         R$DP           EQU       3                   Direct Page register
     0004             (   /dd/defs/os9.d):00906         R$X            EQU       4                   X Index register
     0006             (   /dd/defs/os9.d):00907         R$Y            EQU       6                   Y Index register
     0008             (   /dd/defs/os9.d):00908         R$U            EQU       8                   User Stack register
     000A             (   /dd/defs/os9.d):00909         R$PC           EQU       10                  Program Counter register
     000C             (   /dd/defs/os9.d):00910         R$Size         EQU       12                  Total register package size
                      (   /dd/defs/os9.d):00911                        ENDC
                      (   /dd/defs/os9.d):00912         
                      (   /dd/defs/os9.d):00913         * MD register masks
                      (   /dd/defs/os9.d):00914         * 6309 definitions
     0080             (   /dd/defs/os9.d):00915         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (   /dd/defs/os9.d):00916         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (   /dd/defs/os9.d):00917         
     0080             (   /dd/defs/os9.d):00918         Entire         EQU       %10000000           Full Register Stack flag
     0040             (   /dd/defs/os9.d):00919         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (   /dd/defs/os9.d):00920         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (   /dd/defs/os9.d):00921         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (   /dd/defs/os9.d):00922         Negative       EQU       %00001000           Negative flag
     0004             (   /dd/defs/os9.d):00923         Zero           EQU       %00000100           Zero flag
     0002             (   /dd/defs/os9.d):00924         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (   /dd/defs/os9.d):00925         Carry          EQU       %00000001           Carry bit
     0050             (   /dd/defs/os9.d):00926         IntMasks       EQU       IRQMask+FIRQMask
     0080             (   /dd/defs/os9.d):00927         Sign           EQU       %10000000           sign bit
                      (   /dd/defs/os9.d):00928         
                      (   /dd/defs/os9.d):00929                        TTL       Error Code Definitions
                      (   /dd/defs/os9.d):00930                        PAG       
                      (   /dd/defs/os9.d):00931         ************************
                      (   /dd/defs/os9.d):00932         * Error Code Definitions
                      (   /dd/defs/os9.d):00933         *
                      (   /dd/defs/os9.d):00934         * Basic09 Error Codes
                      (   /dd/defs/os9.d):00935         *
                      (   /dd/defs/os9.d):00936                        ORG       10
000A                  (   /dd/defs/os9.d):00937         E$UnkSym       RMB       1                   Unknown symbol
000B                  (   /dd/defs/os9.d):00938         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (   /dd/defs/os9.d):00939         E$IllStC       RMB       1                   Illegal statement construction
000D                  (   /dd/defs/os9.d):00940         E$ICOvf        RMB       1                   I-code overflow
000E                  (   /dd/defs/os9.d):00941         E$IChRef       RMB       1                   Illegal channel reference
000F                  (   /dd/defs/os9.d):00942         E$IllMod       RMB       1                   Illegal mode
0010                  (   /dd/defs/os9.d):00943         E$IllNum       RMB       1                   Illegal number
0011                  (   /dd/defs/os9.d):00944         E$IllPrf       RMB       1                   Illegal prefix
0012                  (   /dd/defs/os9.d):00945         E$IllOpd       RMB       1                   Illegal operand
0013                  (   /dd/defs/os9.d):00946         E$IllOpr       RMB       1                   Illegal operator
0014                  (   /dd/defs/os9.d):00947         E$IllRFN       RMB       1                   Illegal record field name
0015                  (   /dd/defs/os9.d):00948         E$IllDim       RMB       1                   Illegal dimension
0016                  (   /dd/defs/os9.d):00949         E$IllLit       RMB       1                   Illegal literal
0017                  (   /dd/defs/os9.d):00950         E$IllRet       RMB       1                   Illegal relational
0018                  (   /dd/defs/os9.d):00951         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (   /dd/defs/os9.d):00952         E$DimLrg       RMB       1                   Dimension too large
001A                  (   /dd/defs/os9.d):00953         E$LinLrg       RMB       1                   Line number too large
001B                  (   /dd/defs/os9.d):00954         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (   /dd/defs/os9.d):00955         E$NoPath       RMB       1                   Missing path number
001D                  (   /dd/defs/os9.d):00956         E$NoComa       RMB       1                   Missing coma
001E                  (   /dd/defs/os9.d):00957         E$NoDim        RMB       1                   Missing dimension
001F                  (   /dd/defs/os9.d):00958         E$NoDO         RMB       1                   Missing DO statement
0020                  (   /dd/defs/os9.d):00959         E$MFull        RMB       1                   Memory full
0021                  (   /dd/defs/os9.d):00960         E$NoGoto       RMB       1                   Missing GOTO
0022                  (   /dd/defs/os9.d):00961         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (   /dd/defs/os9.d):00962         E$NoLRef       RMB       1                   Missing line reference
0024                  (   /dd/defs/os9.d):00963         E$NoOprd       RMB       1                   Missing operand
0025                  (   /dd/defs/os9.d):00964         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (   /dd/defs/os9.d):00965         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (   /dd/defs/os9.d):00966         E$NoTO         RMB       1                   Missing TO statement
0028                  (   /dd/defs/os9.d):00967         E$NoVRef       RMB       1                   Missing variable reference
0029                  (   /dd/defs/os9.d):00968         E$EndQou       RMB       1                   Missing end quote
002A                  (   /dd/defs/os9.d):00969         E$SubLrg       RMB       1                   Too many subscripts
002B                  (   /dd/defs/os9.d):00970         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (   /dd/defs/os9.d):00971         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (   /dd/defs/os9.d):00972         E$DivZer       RMB       1                   Divice by zero
002E                  (   /dd/defs/os9.d):00973         E$TypMis       RMB       1                   Operand type mismatch
002F                  (   /dd/defs/os9.d):00974         E$StrOvf       RMB       1                   String stack overflow
0030                  (   /dd/defs/os9.d):00975         E$NoRout       RMB       1                   Unimplemented routine
0031                  (   /dd/defs/os9.d):00976         E$UndVar       RMB       1                   Undefined variable
0032                  (   /dd/defs/os9.d):00977         E$FltOvf       RMB       1                   Floating Overflow
0033                  (   /dd/defs/os9.d):00978         E$LnComp       RMB       1                   Line with compiler error
0034                  (   /dd/defs/os9.d):00979         E$ValRng       RMB       1                   Value out of range for destination
0035                  (   /dd/defs/os9.d):00980         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (   /dd/defs/os9.d):00981         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (   /dd/defs/os9.d):00982         E$SubRng       RMB       1                   Subscript out of range
0038                  (   /dd/defs/os9.d):00983         E$ParmEr       RMB       1                   Paraemter error
0039                  (   /dd/defs/os9.d):00984         E$SysOvf       RMB       1                   System stack overflow
003A                  (   /dd/defs/os9.d):00985         E$IOMism       RMB       1                   I/O type mismatch
003B                  (   /dd/defs/os9.d):00986         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (   /dd/defs/os9.d):00987         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (   /dd/defs/os9.d):00988         E$IllInp       RMB       1                   Illegal input format
003E                  (   /dd/defs/os9.d):00989         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (   /dd/defs/os9.d):00990         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (   /dd/defs/os9.d):00991         E$IllPNm       RMB       1                   Illegal path number
0041                  (   /dd/defs/os9.d):00992         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (   /dd/defs/os9.d):00993         E$NonRcO       RMB       1                   Non-record type operand
0043                  (   /dd/defs/os9.d):00994         E$IllA         RMB       1                   Illegal argument
0044                  (   /dd/defs/os9.d):00995         E$IllCnt       RMB       1                   Illegal control structure
0045                  (   /dd/defs/os9.d):00996         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (   /dd/defs/os9.d):00997         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (   /dd/defs/os9.d):00998         E$IllExp       RMB       1                   Illegal expression type
0048                  (   /dd/defs/os9.d):00999         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (   /dd/defs/os9.d):01000         E$ArrOvf       RMB       1                   Array size overflow
004A                  (   /dd/defs/os9.d):01001         E$UndLin       RMB       1                   Undefined line number
004B                  (   /dd/defs/os9.d):01002         E$MltLin       RMB       1                   Multiply defined line number
004C                  (   /dd/defs/os9.d):01003         E$MltVar       RMB       1                   Multiply defined variable
004D                  (   /dd/defs/os9.d):01004         E$IllIVr       RMB       1                   Illegal input variable
004E                  (   /dd/defs/os9.d):01005         E$SeekRg       RMB       1                   Seek out of range
004F                  (   /dd/defs/os9.d):01006         E$NoData       RMB       1                   Missing data statement
                      (   /dd/defs/os9.d):01007         
                      (   /dd/defs/os9.d):01008         *
                      (   /dd/defs/os9.d):01009         * System Dependent Error Codes
                      (   /dd/defs/os9.d):01010         *
                      (   /dd/defs/os9.d):01011         
                      (   /dd/defs/os9.d):01012         * Level 2 windowing error codes
                      (   /dd/defs/os9.d):01013                        ORG       183
00B7                  (   /dd/defs/os9.d):01014         E$IWTyp        RMB       1                   Illegal window type
00B8                  (   /dd/defs/os9.d):01015         E$WADef        RMB       1                   Window already defined
00B9                  (   /dd/defs/os9.d):01016         E$NFont        RMB       1                   Font not found
00BA                  (   /dd/defs/os9.d):01017         E$StkOvf       RMB       1                   Stack overflow
00BB                  (   /dd/defs/os9.d):01018         E$IllArg       RMB       1                   Illegal argument
00BC                  (   /dd/defs/os9.d):01019                        RMB       1                   reserved
00BD                  (   /dd/defs/os9.d):01020         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (   /dd/defs/os9.d):01021         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (   /dd/defs/os9.d):01022         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (   /dd/defs/os9.d):01023         E$IllCmd       RMB       1                   Illegal command
00C1                  (   /dd/defs/os9.d):01024         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (   /dd/defs/os9.d):01025         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (   /dd/defs/os9.d):01026         E$IWDef        RMB       1                   Illegal window definition
00C4                  (   /dd/defs/os9.d):01027         E$WUndef       RMB       1                   Window undefined
                      (   /dd/defs/os9.d):01028         
00C5                  (   /dd/defs/os9.d):01029         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (   /dd/defs/os9.d):01030         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (   /dd/defs/os9.d):01031         E$Alias        RMB       1
                      (   /dd/defs/os9.d):01032         
                      (   /dd/defs/os9.d):01033         
                      (   /dd/defs/os9.d):01034         *
                      (   /dd/defs/os9.d):01035         * Standard NitrOS-9 Error Codes
                      (   /dd/defs/os9.d):01036         *
                      (   /dd/defs/os9.d):01037                        ORG       200
00C8                  (   /dd/defs/os9.d):01038         E$PthFul       RMB       1                   Path Table full
00C9                  (   /dd/defs/os9.d):01039         E$BPNum        RMB       1                   Bad Path Number
00CA                  (   /dd/defs/os9.d):01040         E$Poll         RMB       1                   Polling Table Full
00CB                  (   /dd/defs/os9.d):01041         E$BMode        RMB       1                   Bad Mode
00CC                  (   /dd/defs/os9.d):01042         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (   /dd/defs/os9.d):01043         E$BMID         RMB       1                   Bad Module ID
00CE                  (   /dd/defs/os9.d):01044         E$DirFul       RMB       1                   Module Directory Full
00CF                  (   /dd/defs/os9.d):01045         E$MemFul       RMB       1                   Process Memory Full
00D0                  (   /dd/defs/os9.d):01046         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (   /dd/defs/os9.d):01047         E$ModBsy       RMB       1                   Module Busy
00D2                  (   /dd/defs/os9.d):01048         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (   /dd/defs/os9.d):01049         E$EOF          RMB       1                   End of File
00D4                  (   /dd/defs/os9.d):01050                        RMB       1
00D5                  (   /dd/defs/os9.d):01051         E$NES          RMB       1                   Non-Existing Segment
00D6                  (   /dd/defs/os9.d):01052         E$FNA          RMB       1                   File Not Accesible
00D7                  (   /dd/defs/os9.d):01053         E$BPNam        RMB       1                   Bad Path Name
00D8                  (   /dd/defs/os9.d):01054         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (   /dd/defs/os9.d):01055         E$SLF          RMB       1                   Segment List Full
00DA                  (   /dd/defs/os9.d):01056         E$CEF          RMB       1                   Creating Existing File
00DB                  (   /dd/defs/os9.d):01057         E$IBA          RMB       1                   Illegal Block Address
00DC                  (   /dd/defs/os9.d):01058         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (   /dd/defs/os9.d):01059         E$MNF          RMB       1                   Module Not Found
00DE                  (   /dd/defs/os9.d):01060                        RMB       1
00DF                  (   /dd/defs/os9.d):01061         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (   /dd/defs/os9.d):01062         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (   /dd/defs/os9.d):01063         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (   /dd/defs/os9.d):01064                        RMB       1
00E2                  (   /dd/defs/os9.d):01065         E$NoChld       RMB       1                   No Children
00E3                  (   /dd/defs/os9.d):01066         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (   /dd/defs/os9.d):01067         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (   /dd/defs/os9.d):01068         E$PrcFul       RMB       1                   Process Table Full
00E6                  (   /dd/defs/os9.d):01069         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (   /dd/defs/os9.d):01070         E$KwnMod       RMB       1                   Known Module
00E8                  (   /dd/defs/os9.d):01071         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (   /dd/defs/os9.d):01072         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (   /dd/defs/os9.d):01073         E$NEMod        RMB       1                   Non Existing Module
00EB                  (   /dd/defs/os9.d):01074         E$BNam         RMB       1                   Bad Name
00EC                  (   /dd/defs/os9.d):01075         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (   /dd/defs/os9.d):01076         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (   /dd/defs/os9.d):01077         E$DNE          RMB       1                   Directory not empty
00EF                  (   /dd/defs/os9.d):01078         E$NoTask       RMB       1                   No available Task number
                      (   /dd/defs/os9.d):01079                        RMB       $F0-.               reserved
00F0                  (   /dd/defs/os9.d):01080         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (   /dd/defs/os9.d):01081         E$Sect         RMB       1                   Bad Sector number
00F2                  (   /dd/defs/os9.d):01082         E$WP           RMB       1                   Write Protect
00F3                  (   /dd/defs/os9.d):01083         E$CRC          RMB       1                   Bad Check Sum
00F4                  (   /dd/defs/os9.d):01084         E$Read         RMB       1                   Read Error
00F5                  (   /dd/defs/os9.d):01085         E$Write        RMB       1                   Write Error
00F6                  (   /dd/defs/os9.d):01086         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (   /dd/defs/os9.d):01087         E$Seek         RMB       1                   Seek Error
00F8                  (   /dd/defs/os9.d):01088         E$Full         RMB       1                   Media Full
00F9                  (   /dd/defs/os9.d):01089         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (   /dd/defs/os9.d):01090         E$DevBsy       RMB       1                   Device Busy
00FB                  (   /dd/defs/os9.d):01091         E$DIDC         RMB       1                   Disk ID Change
00FC                  (   /dd/defs/os9.d):01092         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (   /dd/defs/os9.d):01093         E$Share        RMB       1                   Non-sharable file busy
00FE                  (   /dd/defs/os9.d):01094         E$DeadLk       RMB       1                   I/O Deadlock error
                      (   /dd/defs/os9.d):01095         
                      (   /dd/defs/os9.d):01096         
                      (   /dd/defs/os9.d):01097         ***************************
                      (   /dd/defs/os9.d):01098         * Level 3 Defs
                      (   /dd/defs/os9.d):01099         *
                      (   /dd/defs/os9.d):01100         * These definitions apply to NitrOS-9 Level 3
                      (   /dd/defs/os9.d):01101         *
                      (   /dd/defs/os9.d):01102         
                      (/dd/sourcecode/as):00030                  use    /dd/defs/scf.d
                      (   /dd/defs/scf.d):00001         ********************************************************************
                      (   /dd/defs/scf.d):00002         * scf.d - Sequential Character File Manager Definitions
                      (   /dd/defs/scf.d):00003         *
                      (   /dd/defs/scf.d):00004         * $Id$
                      (   /dd/defs/scf.d):00005         *
                      (   /dd/defs/scf.d):00006         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (   /dd/defs/scf.d):00007         * that define the logical structure of a serial device.
                      (   /dd/defs/scf.d):00008         *
                      (   /dd/defs/scf.d):00009         * The data structures in this file give SCF its 'personality' and are used
                      (   /dd/defs/scf.d):00010         * by SCF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/scf.d):00011         *
                      (   /dd/defs/scf.d):00012         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/scf.d):00013         * Comment
                      (   /dd/defs/scf.d):00014         * ------------------------------------------------------------------
                      (   /dd/defs/scf.d):00015         *          1984/01/11  YO
                      (   /dd/defs/scf.d):00016         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (   /dd/defs/scf.d):00017         *
                      (   /dd/defs/scf.d):00018         *          1985/04/20  Mark G. Hawkins
                      (   /dd/defs/scf.d):00019         * Added V.PDLHd Path Descriptor List Head.
                      (   /dd/defs/scf.d):00020         *
                      (   /dd/defs/scf.d):00021         *          1985/04/21  Mark G. Hawkins
                      (   /dd/defs/scf.d):00022         * Added PD.PLP and PD.PST for modem handling.
                      (   /dd/defs/scf.d):00023         *
                      (   /dd/defs/scf.d):00024         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/scf.d):00025         * Updated with Dev Desc info.
                      (   /dd/defs/scf.d):00026         *
                      (   /dd/defs/scf.d):00027         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/scf.d):00028         * Consolidated L1/L2 scfdefs.
                      (   /dd/defs/scf.d):00029         *
                      (   /dd/defs/scf.d):00030         *          2003/01/21  Boisy G. Pitre
                      (   /dd/defs/scf.d):00031         * Added symbolics for enhanced SCF line editing.
                      (   /dd/defs/scf.d):00032         *
                      (   /dd/defs/scf.d):00033         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/scf.d):00034         * Updated comments for clarity.
                      (   /dd/defs/scf.d):00035         *
                      (   /dd/defs/scf.d):00036         *          2004/05/17  Boisy G. Pitre
                      (   /dd/defs/scf.d):00037         * Added higher baud rates.
                      (   /dd/defs/scf.d):00038         
                      (   /dd/defs/scf.d):00039                        NAM       scf.d
                      (   /dd/defs/scf.d):00040                        TTL       Sequential File Manager Definitions
                      (   /dd/defs/scf.d):00041         
                      (   /dd/defs/scf.d):00042                        PAG
                      (   /dd/defs/scf.d):00043         *******************************
                      (   /dd/defs/scf.d):00044         * SCF Device Descriptor Offsets
                      (   /dd/defs/scf.d):00045         *
                      (   /dd/defs/scf.d):00046         * These definitions are for SCF device descriptors.
                      (   /dd/defs/scf.d):00047         
                      (   /dd/defs/scf.d):00048                        ORG       M$DTyp
0012                  (   /dd/defs/scf.d):00049         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (   /dd/defs/scf.d):00050         IT.UPC         RMB       1                   Uppercase flag
0014                  (   /dd/defs/scf.d):00051         IT.BSO         RMB       1                   Backspace behavior
0015                  (   /dd/defs/scf.d):00052         IT.DLO         RMB       1                   Delete behavior
0016                  (   /dd/defs/scf.d):00053         IT.EKO         RMB       1                   Echo flag
0017                  (   /dd/defs/scf.d):00054         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (   /dd/defs/scf.d):00055         IT.NUL         RMB       1                   End-of-line null count
0019                  (   /dd/defs/scf.d):00056         IT.PAU         RMB       1                   Page pause flag
001A                  (   /dd/defs/scf.d):00057         IT.PAG         RMB       1                   Number of lines per page
001B                  (   /dd/defs/scf.d):00058         IT.BSP         RMB       1                   Backspace character
001C                  (   /dd/defs/scf.d):00059         IT.DEL         RMB       1                   Delete-line character
001D                  (   /dd/defs/scf.d):00060         IT.EOR         RMB       1                   End-of-record character
001E                  (   /dd/defs/scf.d):00061         IT.EOF         RMB       1                   End-of-file character
001F                  (   /dd/defs/scf.d):00062         IT.RPR         RMB       1                   Reprint-line character
0020                  (   /dd/defs/scf.d):00063         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (   /dd/defs/scf.d):00064         IT.PSC         RMB       1                   Pause character
0022                  (   /dd/defs/scf.d):00065         IT.INT         RMB       1                   Interrupt character
0023                  (   /dd/defs/scf.d):00066         IT.QUT         RMB       1                   Quit character
0024                  (   /dd/defs/scf.d):00067         IT.BSE         RMB       1                   Backspace echo character
0025                  (   /dd/defs/scf.d):00068         IT.OVF         RMB       1                   Bell character
0026                  (   /dd/defs/scf.d):00069         IT.PAR         RMB       1                   Parity
0027                  (   /dd/defs/scf.d):00070         IT.BAU         RMB       1                   Baud rate
0028                  (   /dd/defs/scf.d):00071         IT.D2P         RMB       2                   Attached device name string offset
002A                  (   /dd/defs/scf.d):00072         IT.XON         RMB       1                   X-ON character
002B                  (   /dd/defs/scf.d):00073         IT.XOFF        RMB       1                   X-OFF character
002C                  (   /dd/defs/scf.d):00074         IT.COL         RMB       1                   Number of columns for display
002D                  (   /dd/defs/scf.d):00075         IT.ROW         RMB       1                   Number of rows for display
002E                  (   /dd/defs/scf.d):00076         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (   /dd/defs/scf.d):00077         
                      (   /dd/defs/scf.d):00078         * Window Descriptor Additions
                      (   /dd/defs/scf.d):00079         * For CoCo window, where IT.PAR = $80
                      (   /dd/defs/scf.d):00080                        ORG       IT.ROW+1
002E                  (   /dd/defs/scf.d):00081         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (   /dd/defs/scf.d):00082         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (   /dd/defs/scf.d):00083         IT.STY         RMB       1                   Screen type default
0031                  (   /dd/defs/scf.d):00084         IT.CPX         RMB       1                   Column start default
0032                  (   /dd/defs/scf.d):00085         IT.CPY         RMB       1                   Row start default
0033                  (   /dd/defs/scf.d):00086         IT.FGC         RMB       1                   Foreground color default
0034                  (   /dd/defs/scf.d):00087         IT.BGC         RMB       1                   Background color default
0035                  (   /dd/defs/scf.d):00088         IT.BDC         RMB       1                   Border color default
                      (   /dd/defs/scf.d):00089         
                      (   /dd/defs/scf.d):00090         
                      (   /dd/defs/scf.d):00091                        PAG
                      (   /dd/defs/scf.d):00092         ********************
                      (   /dd/defs/scf.d):00093         * SCF Static Storage
                      (   /dd/defs/scf.d):00094         *
                      (   /dd/defs/scf.d):00095         * SCF devices must reserve this space for SCF
                      (   /dd/defs/scf.d):00096         *
                      (   /dd/defs/scf.d):00097                        ORG       V.USER
0006                  (   /dd/defs/scf.d):00098         V.TYPE         RMB       1                   Device type or parity
0007                  (   /dd/defs/scf.d):00099         V.LINE         RMB       1                   Lines left until end of page
0008                  (   /dd/defs/scf.d):00100         V.PAUS         RMB       1                   Immediate Pause request
0009                  (   /dd/defs/scf.d):00101         V.DEV2         RMB       2                   Attached device's static
000B                  (   /dd/defs/scf.d):00102         V.INTR         RMB       1                   Interrupt char
000C                  (   /dd/defs/scf.d):00103         V.QUIT         RMB       1                   Quit char
000D                  (   /dd/defs/scf.d):00104         V.PCHR         RMB       1                   Pause char
000E                  (   /dd/defs/scf.d):00105         V.ERR          RMB       1                   Accumulated errors
000F                  (   /dd/defs/scf.d):00106         V.XON          RMB       1                   X-On char
0010                  (   /dd/defs/scf.d):00107         V.XOFF         RMB       1                   X-Off char
0011                  (   /dd/defs/scf.d):00108         V.KANJI        RMB       1                   Kanji mode flag
0012                  (   /dd/defs/scf.d):00109         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (   /dd/defs/scf.d):00110         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (   /dd/defs/scf.d):00111         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (   /dd/defs/scf.d):00112         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (   /dd/defs/scf.d):00113         V.SCF          EQU       .                   Total SCF manager static overhead
                      (   /dd/defs/scf.d):00114         
                      (   /dd/defs/scf.d):00115         
                      (   /dd/defs/scf.d):00116                        PAG
                      (   /dd/defs/scf.d):00117         ***********************
                      (   /dd/defs/scf.d):00118         * Character Definitions
                      (   /dd/defs/scf.d):00119         *
     0000             (   /dd/defs/scf.d):00120         C$NULL         SET       0                   Null char
     0001             (   /dd/defs/scf.d):00121         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (   /dd/defs/scf.d):00122         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (   /dd/defs/scf.d):00123         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (   /dd/defs/scf.d):00124         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (   /dd/defs/scf.d):00125         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (   /dd/defs/scf.d):00126         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (   /dd/defs/scf.d):00127         C$RARR         SET       $09                 Right Arrow
     0005             (   /dd/defs/scf.d):00128         C$EL           SET       $05                 Erase Line
     000A             (   /dd/defs/scf.d):00129         C$LF           SET       $0A                 Line feed
     000B             (   /dd/defs/scf.d):00130         C$HOME         SET       $0B                 Home position Code
     0015             (   /dd/defs/scf.d):00131         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (   /dd/defs/scf.d):00132         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (   /dd/defs/scf.d):00133         C$CR           SET       $0D                 Carriage return
     000C             (   /dd/defs/scf.d):00134         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (   /dd/defs/scf.d):00135         C$SI           SET       $0F                 Shift IN Code
     000E             (   /dd/defs/scf.d):00136         C$SO           SET       $0E                 Shift OUT Code
     0010             (   /dd/defs/scf.d):00137         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (   /dd/defs/scf.d):00138         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (   /dd/defs/scf.d):00139         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (   /dd/defs/scf.d):00140         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (   /dd/defs/scf.d):00141         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (   /dd/defs/scf.d):00142         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (   /dd/defs/scf.d):00143         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (   /dd/defs/scf.d):00144         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (   /dd/defs/scf.d):00145         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (   /dd/defs/scf.d):00146         C$RGT          SET       $1C                 Cursor right
     001D             (   /dd/defs/scf.d):00147         C$LFT          SET       $1D                 Cursor left
     001E             (   /dd/defs/scf.d):00148         C$UP           SET       $1E                 Cursor up
     001F             (   /dd/defs/scf.d):00149         C$DWN          SET       $1F                 Cursor down
     0020             (   /dd/defs/scf.d):00150         C$SPAC         SET       $20                 Space
     002E             (   /dd/defs/scf.d):00151         C$PERD         SET       '.
     002C             (   /dd/defs/scf.d):00152         C$COMA         SET       ',
                      (   /dd/defs/scf.d):00153         
                      (   /dd/defs/scf.d):00154         
                      (   /dd/defs/scf.d):00155                        PAG
                      (   /dd/defs/scf.d):00156         *********************************************
                      (   /dd/defs/scf.d):00157         * Sequential Character Path Descriptor Format
                      (   /dd/defs/scf.d):00158         *
                      (   /dd/defs/scf.d):00159         * A path descriptor is created for every new path that is open
                      (   /dd/defs/scf.d):00160         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/scf.d):00161         * descriptors track state information of a path.
                      (   /dd/defs/scf.d):00162         *
                      (   /dd/defs/scf.d):00163                        ORG       PD.FST
000A                  (   /dd/defs/scf.d):00164         PD.DV2         RMB       2                   Output device table pointer
000C                  (   /dd/defs/scf.d):00165         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (   /dd/defs/scf.d):00166         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (   /dd/defs/scf.d):00167         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (   /dd/defs/scf.d):00168         PD.STS         RMB       2                   Status routine module addr
0012                  (   /dd/defs/scf.d):00169         PD.STM         RMB       2                   Reserved for status routine
                      (   /dd/defs/scf.d):00170                        ORG       PD.OPT
0020                  (   /dd/defs/scf.d):00171                        RMB       1                   Device type
0021                  (   /dd/defs/scf.d):00172         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (   /dd/defs/scf.d):00173         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (   /dd/defs/scf.d):00174         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (   /dd/defs/scf.d):00175         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (   /dd/defs/scf.d):00176         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (   /dd/defs/scf.d):00177         PD.NUL         RMB       1                   End of Line null count
0027                  (   /dd/defs/scf.d):00178         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (   /dd/defs/scf.d):00179         PD.PAG         RMB       1                   Lines per page
0029                  (   /dd/defs/scf.d):00180         PD.BSP         RMB       1                   Backspace character
002A                  (   /dd/defs/scf.d):00181         PD.DEL         RMB       1                   Delete Line character
002B                  (   /dd/defs/scf.d):00182         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (   /dd/defs/scf.d):00183         PD.EOF         RMB       1                   End of File character
002D                  (   /dd/defs/scf.d):00184         PD.RPR         RMB       1                   Repront Line character
002E                  (   /dd/defs/scf.d):00185         PD.DUP         RMB       1                   Dup Last Line character
002F                  (   /dd/defs/scf.d):00186         PD.PSC         RMB       1                   Pause character
0030                  (   /dd/defs/scf.d):00187         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (   /dd/defs/scf.d):00188         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (   /dd/defs/scf.d):00189         PD.BSE         RMB       1                   Backspace echo character
0033                  (   /dd/defs/scf.d):00190         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (   /dd/defs/scf.d):00191         PD.PAR         RMB       1                   Parity code
0035                  (   /dd/defs/scf.d):00192         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (   /dd/defs/scf.d):00193         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (   /dd/defs/scf.d):00194         PD.XON         RMB       1                   ACIA X-ON character
0039                  (   /dd/defs/scf.d):00195         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (   /dd/defs/scf.d):00196         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (   /dd/defs/scf.d):00197         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (   /dd/defs/scf.d):00198         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (   /dd/defs/scf.d):00199         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (   /dd/defs/scf.d):00200         PD.PST         RMB       1                   Current path status
                      (   /dd/defs/scf.d):00201         
                      (   /dd/defs/scf.d):00202         
                      (   /dd/defs/scf.d):00203         * PD.PST values Path Descriptor Status byte
                      (   /dd/defs/scf.d):00204         *
     0001             (   /dd/defs/scf.d):00205         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (   /dd/defs/scf.d):00206         
                      (   /dd/defs/scf.d):00207         
                      (   /dd/defs/scf.d):00208         * PD.PAR definitions
                      (   /dd/defs/scf.d):00209         *
                      (   /dd/defs/scf.d):00210         * Parity
     0000             (   /dd/defs/scf.d):00211         PARNONE        EQU       %00000000
     0020             (   /dd/defs/scf.d):00212         PARODD         EQU       %00100000
     0060             (   /dd/defs/scf.d):00213         PAREVEN        EQU       %01100000
     00A0             (   /dd/defs/scf.d):00214         PARMARK        EQU       %10100000
     00E0             (   /dd/defs/scf.d):00215         PARSPACE       EQU       %11100000
     00E0             (   /dd/defs/scf.d):00216         PARMASK        EQU       %11100000
                      (   /dd/defs/scf.d):00217         
                      (   /dd/defs/scf.d):00218         * PD.BAU definitions
                      (   /dd/defs/scf.d):00219         *
                      (   /dd/defs/scf.d):00220         * Baud rate
     0000             (   /dd/defs/scf.d):00221         B110           EQU       %00000000
     0001             (   /dd/defs/scf.d):00222         B300           EQU       %00000001
     0002             (   /dd/defs/scf.d):00223         B600           EQU       %00000010
     0003             (   /dd/defs/scf.d):00224         B1200          EQU       %00000011
     0004             (   /dd/defs/scf.d):00225         B2400          EQU       %00000100
     0005             (   /dd/defs/scf.d):00226         B4800          EQU       %00000101
     0006             (   /dd/defs/scf.d):00227         B9600          EQU       %00000110
     0007             (   /dd/defs/scf.d):00228         B19200         EQU       %00000111
     0008             (   /dd/defs/scf.d):00229         B38400         EQU       %00001000
     0009             (   /dd/defs/scf.d):00230         B57600         EQU       %00001001
     000A             (   /dd/defs/scf.d):00231         B115200        EQU       %00001010
                      (   /dd/defs/scf.d):00232         * Word size
     0000             (   /dd/defs/scf.d):00233         WORD8          EQU       %00000000
     0020             (   /dd/defs/scf.d):00234         WORD7          EQU       %00100000
                      (   /dd/defs/scf.d):00235         * Stop bits
     0000             (   /dd/defs/scf.d):00236         STOP1          EQU       %00000000
     0010             (   /dd/defs/scf.d):00237         STOP2          EQU       %00010000
                      (   /dd/defs/scf.d):00238         
                      (/dd/sourcecode/as):00031                  endc
                      (/dd/sourcecode/as):00032         
     0000             (/dd/sourcecode/as):00033         DOHELP   set   0
                      (/dd/sourcecode/as):00034         
     0011             (/dd/sourcecode/as):00035         tylg     set   Prgrm+Objct   
     0081             (/dd/sourcecode/as):00036         atrv     set   ReEnt+rev
     0001             (/dd/sourcecode/as):00037         rev      set   $01
     0009             (/dd/sourcecode/as):00038         edition  set   9
                      (/dd/sourcecode/as):00039         
0000 87CD060A000D1181 (/dd/sourcecode/as):00040                  mod   eom,name,tylg,atrv,start,size
     240170099E
                      (/dd/sourcecode/as):00041         
                      (/dd/sourcecode/as):00042                  org   0
0000.                 (/dd/sourcecode/as):00043         u0000    rmb   2              Current position to append to in output buffer @ u0022
0002.                 (/dd/sourcecode/as):00044         u0002    rmb   1
0003.                 (/dd/sourcecode/as):00045         u0003    rmb   1
0004.                 (/dd/sourcecode/as):00046         u0004    rmb   2              # of active bytes in read buffer
0006.                 (/dd/sourcecode/as):00047         u0006    rmb   2              Ptr to buffer to read a chunk of a file into
0008.                 (/dd/sourcecode/as):00048         u0008    rmb   2              Read buffer size (defaults to 2K if not specified with #xxK)
000A.                 (/dd/sourcecode/as):00049         dolink   rmb   1
000B.                 (/dd/sourcecode/as):00050         short    rmb   1
000C.                 (/dd/sourcecode/as):00051         modvfy   rmb   1              Flag whether we are verifying CRC
000D.                 (/dd/sourcecode/as):00052         fperm    rmb   1
000E.                 (/dd/sourcecode/as):00053         modptr   rmb   2              Ptr to where module is mapped in our memory
0010.                 (/dd/sourcecode/as):00054         u0010    rmb   2              I think a copy of the 3 byte CRC goes here
0012.                 (/dd/sourcecode/as):00055         u0012    rmb   1
0013.                 (/dd/sourcecode/as):00056         u0013    rmb   1              Byte 1 of CRC that we are working on to verify
0014.                 (/dd/sourcecode/as):00057         u0014    rmb   1              Byte 2 of CRC that we are working on to verify
0015.                 (/dd/sourcecode/as):00058         u0015    rmb   1              Byte 3 of CRC that we are working on to verify
0016.                 (/dd/sourcecode/as):00059         u0016    rmb   1              Edition # of module
0017.                 (/dd/sourcecode/as):00060         u0017    rmb   1
0018.                 (/dd/sourcecode/as):00061         u0018    rmb   1
0019.                 (/dd/sourcecode/as):00062         path     rmb   1              Path # (if IDENTing from file)
001A.                 (/dd/sourcecode/as):00063         mtype    rmb   1              Copy of Module Type/Language
001B.                 (/dd/sourcecode/as):00064         u001B    rmb   1              Copy of attribute/revision level
001C.                 (/dd/sourcecode/as):00065         u001C    rmb   2              Size of module we are currently working on
001E.                 (/dd/sourcecode/as):00066         OrgPrmPt rmb   2              Original parameter ptr
0020.                 (/dd/sourcecode/as):00067         u001E    rmb   2              MSW of file ptr
0022.                 (/dd/sourcecode/as):00068         u0020    rmb   2              LSW of file ptr
0024.                 (/dd/sourcecode/as):00069         u0022    rmb   66             Output line buffer
0066.                 (/dd/sourcecode/as):00070         u0064    rmb   14
0074.                 (/dd/sourcecode/as):00071         u0072    rmb   14             Buffer for module (if read from file)
0082.                 (/dd/sourcecode/as):00072         u0080    rmb   33             Buffer for name of module (if read from file)
00A3.                 (/dd/sourcecode/as):00073         u00A1    rmb   71
00EA.                 (/dd/sourcecode/as):00074         u00E8    rmb   180
019E.                 (/dd/sourcecode/as):00075         u019C    rmb   2048           Read buffer (2k) for file chunks for calculating CRC
     099E             (/dd/sourcecode/as):00076         size     equ   .
                      (/dd/sourcecode/as):00077         
000D 4964656EF4       (/dd/sourcecode/as):00078         name     fcs   /Ident/
0012 09               (/dd/sourcecode/as):00079                  fcb   edition
                      (/dd/sourcecode/as):00080         
                      (/dd/sourcecode/as):00081                  IFNE  DOHELP
0013                  (/dd/sourcecode/as):00082         HelpMsg  fcb   C$LF
                      (/dd/sourcecode/as):00083                  fcc   "Use: Ident [-opts] <path> [-opts]"
                      (/dd/sourcecode/as):00084                  fcb   C$LF
                      (/dd/sourcecode/as):00085                  fcc   "  -m = module in memory"
                      (/dd/sourcecode/as):00086                  fcb   C$LF
                      (/dd/sourcecode/as):00087                  fcc   "  -s = short form"
                      (/dd/sourcecode/as):00088                  fcb   C$LF
                      (/dd/sourcecode/as):00089                  fcc   "  -v = don't verify CRC"
                      (/dd/sourcecode/as):00090                  fcb   C$LF
                      (/dd/sourcecode/as):00091                  fcc   "  -x = file in exec dir"
                      (/dd/sourcecode/as):00092                  fcb   C$CR
                      (/dd/sourcecode/as):00093                  ENDC
                      (/dd/sourcecode/as):00094         
0013 4865616465722066 (/dd/sourcecode/as):00095         M_Hdr    fcs   "Header for: "
     6F723AA0
001F 4D6F64756C652073 (/dd/sourcecode/as):00096         M_MSiz   fcs   "Module size:"
     697A65BA
002B 4D6F64756C652043 (/dd/sourcecode/as):00097         M_MCRC   fcs   "Module CRC: "
     52433AA0
0037 4864722070617269 (/dd/sourcecode/as):00098         M_HdrP   fcs   "Hdr parity: "
     74793AA0
0043 457865632E206F66 (/dd/sourcecode/as):00099         M_ExOff  fcs   "Exec. off:  "
     663A20A0
004F 446174612053697A (/dd/sourcecode/as):00100         M_DatSz  fcs   "Data Size:  "
     653A20A0
005B 54792F4C61204174 (/dd/sourcecode/as):00101         M_TLAR   fcs   "Ty/La At/Rv:"
     2F5276BA
0067 45646974696F6E3A (/dd/sourcecode/as):00102         M_Edtn   fcs   "Edition:    "
     202020A0
0073 6D6F64AC         (/dd/sourcecode/as):00103         M_Mod    fcs   "mod,"
0077 72652D656EAC     (/dd/sourcecode/as):00104         M_ReEn   fcs   "re-en,"
007D 6E6F6E2D736872AC (/dd/sourcecode/as):00105         M_NonShr fcs   "non-shr,"
0085 522FCF           (/dd/sourcecode/as):00106         M_RO     fcs   "R/O"
0088 522FD7           (/dd/sourcecode/as):00107         M_RW     fcs   "R/W"
008B 28476F6F64A9     (/dd/sourcecode/as):00108         M_Good   fcs   "(Good)"
0091 2842616429       (/dd/sourcecode/as):00109         M_Bad    fcc   "(Bad)"
0096 87               (/dd/sourcecode/as):00110                  fcb   $80+C$BELL 
                      (/dd/sourcecode/as):00111         
0097 10               (/dd/sourcecode/as):00112         TypeTbl  fcb   T_BAD-TypeTbl
0098 1C               (/dd/sourcecode/as):00113                  fcb   T_PR-TypeTbl
0099 20               (/dd/sourcecode/as):00114                  fcb   T_SU-TypeTbl
009A 24               (/dd/sourcecode/as):00115                  fcb   T_MU-TypeTbl
009B 29               (/dd/sourcecode/as):00116                  fcb   T_DA-TypeTbl
009C 2D               (/dd/sourcecode/as):00117                  fcb   T_U5-TypeTbl
009D 32               (/dd/sourcecode/as):00118                  fcb   T_U6-TypeTbl
009E 37               (/dd/sourcecode/as):00119                  fcb   T_U7-TypeTbl
009F 3C               (/dd/sourcecode/as):00120                  fcb   T_U8-TypeTbl
00A0 41               (/dd/sourcecode/as):00121                  fcb   T_U9-TypeTbl
00A1 46               (/dd/sourcecode/as):00122                  fcb   T_UA-TypeTbl
00A2 4B               (/dd/sourcecode/as):00123                  fcb   T_UB-TypeTbl
00A3 50               (/dd/sourcecode/as):00124                  fcb   T_SY-TypeTbl
00A4 56               (/dd/sourcecode/as):00125                  fcb   T_FM-TypeTbl
00A5 5E               (/dd/sourcecode/as):00126                  fcb   T_DRV-TypeTbl
00A6 65               (/dd/sourcecode/as):00127                  fcb   T_DSC-TypeTbl
00A7 6261642074797065 (/dd/sourcecode/as):00128         T_BAD    fcs   "bad type for"
     20666FF2
00B3 50726FE7         (/dd/sourcecode/as):00129         T_PR     fcs   "Prog"
00B7 537562F2         (/dd/sourcecode/as):00130         T_SU     fcs   "Subr"
00BB 4D756C74E9       (/dd/sourcecode/as):00131         T_MU     fcs   "Multi"
00C0 446174E1         (/dd/sourcecode/as):00132         T_DA     fcs   "Data"
00C4 55737220B5       (/dd/sourcecode/as):00133         T_U5     fcs   "Usr 5"
00C9 55737220B6       (/dd/sourcecode/as):00134         T_U6     fcs   "Usr 6"
00CE 55737220B7       (/dd/sourcecode/as):00135         T_U7     fcs   "Usr 7"
00D3 55737220B8       (/dd/sourcecode/as):00136         T_U8     fcs   "Usr 8"
00D8 55737220B9       (/dd/sourcecode/as):00137         T_U9     fcs   "Usr 9"
00DD 55737220C1       (/dd/sourcecode/as):00138         T_UA     fcs   "Usr A"
00E2 55737220C2       (/dd/sourcecode/as):00139         T_UB     fcs   "Usr B"
00E7 5379737465ED     (/dd/sourcecode/as):00140         T_SY     fcs   "System"
00ED 46696C65204D61EE (/dd/sourcecode/as):00141         T_FM     fcs   "File Man"
00F5 446576204476F2   (/dd/sourcecode/as):00142         T_DRV    fcs   "Dev Dvr"
00FC 446576204473E3   (/dd/sourcecode/as):00143         T_DSC    fcs   "Dev Dsc"
                      (/dd/sourcecode/as):00144         
0103 10               (/dd/sourcecode/as):00145         LangTbl  fcb   L_DA-LangTbl
0104 15               (/dd/sourcecode/as):00146                  fcb   L_68-LangTbl
0105 1E               (/dd/sourcecode/as):00147                  fcb   L_B09-LangTbl
0106 2D               (/dd/sourcecode/as):00148                  fcb   L_PSC-LangTbl
0107 3B               (/dd/sourcecode/as):00149                  fcb   L_C-LangTbl
0108 44               (/dd/sourcecode/as):00150                  fcb   L_COB-LangTbl
0109 51               (/dd/sourcecode/as):00151                  fcb   L_FOR-LangTbl
010A 60               (/dd/sourcecode/as):00152                  fcb   L_63-LangTbl
010B 69               (/dd/sourcecode/as):00153                  fcb   L_BAD-LangTbl
010C 69               (/dd/sourcecode/as):00154                  fcb   L_BAD-LangTbl
010D 69               (/dd/sourcecode/as):00155                  fcb   L_BAD-LangTbl
010E 69               (/dd/sourcecode/as):00156                  fcb   L_BAD-LangTbl
010F 69               (/dd/sourcecode/as):00157                  fcb   L_BAD-LangTbl
0110 69               (/dd/sourcecode/as):00158                  fcb   L_BAD-LangTbl
0111 69               (/dd/sourcecode/as):00159                  fcb   L_BAD-LangTbl
0112 69               (/dd/sourcecode/as):00160                  fcb   L_BAD-LangTbl
0113 44617461AC       (/dd/sourcecode/as):00161         L_DA     fcs   "Data,"
0118 36383039206F626A (/dd/sourcecode/as):00162         L_68     fcs   "6809 obj,"
     AC
0121 4241534943303920 (/dd/sourcecode/as):00163         L_B09    fcs   "BASIC09 I-code,"
     492D636F6465AC
0130 50415343414C2050 (/dd/sourcecode/as):00164         L_PSC    fcs   "PASCAL P-code,"
     2D636F6465AC
013E 4320492D636F6465 (/dd/sourcecode/as):00165         L_C      fcs   "C I-code,"
     AC
0147 434F424F4C20492D (/dd/sourcecode/as):00166         L_COB    fcs   "COBOL I-code,"
     636F6465AC
0154 464F525452414E20 (/dd/sourcecode/as):00167         L_FOR    fcs   "FORTRAN I-code,"
     492D636F6465AC
0163 36333039206F626A (/dd/sourcecode/as):00168         L_63     fcs   "6309 obj,"
     AC
016C 3F3F3FBF         (/dd/sourcecode/as):00169         L_BAD    fcs   "????"
                      (/dd/sourcecode/as):00170         
0170 32C9019E         (/dd/sourcecode/as):00171         start    leas  >u019C,u       Point to where we will read file chunks to
0174 10DF06           (/dd/sourcecode/as):00172                  sts   <u0006         Save it
0177 9F1E             (/dd/sourcecode/as):00173                  stx   <OrgPrmPt      Save original parm ptr
0179 1F20             (/dd/sourcecode/as):00174                  tfr   y,d            Move top of memory (highest address of data area) ptr to D
017B 9306             (/dd/sourcecode/as):00175                  subd  <u0006         Subtract start of read buffer ptr
017D DD08             (/dd/sourcecode/as):00176                  std   <u0008         Save read buffer size
017F 31C824           (/dd/sourcecode/as):00177                  leay  <u0022,u       Point to start of output line buffer
0182 109F00           (/dd/sourcecode/as):00178                  sty   <u0000         Save it as current position in output line buffer
0185 CC0000           (/dd/sourcecode/as):00179                  ldd   #$0000         ??? Init filename ptr to 0
0188 DD02             (/dd/sourcecode/as):00180                  std   <u0002
018A DD04             (/dd/sourcecode/as):00181                  std   <u0004         Init # of bytes in read buffer to 0
018C DD0A             (/dd/sourcecode/as):00182                  std   <dolink        Clear dolink & short (not in memory, not short form) flags
018E 970C             (/dd/sourcecode/as):00183                  sta   <modvfy
0190 9718             (/dd/sourcecode/as):00184                  sta   <u0018         Init flag (for binary to ascii decimal conversion)
0192 8601             (/dd/sourcecode/as):00185                  lda   #READ.         Default to read for current data directory
0194 970D             (/dd/sourcecode/as):00186                  sta   <fperm
                      (/dd/sourcecode/as):00187         * Parse loop. Only checks for a single file/module name or option flags
0196 A680             (/dd/sourcecode/as):00188         L0263    lda   ,x+            Get parameter byte
0198 8120             (/dd/sourcecode/as):00189         L0265    cmpa  #C$SPAC        Eat spaces
019A 27FA             (/dd/sourcecode/as):00190                  beq   L0263
019C 812C             (/dd/sourcecode/as):00191                  cmpa  #C$COMA        Eat commas
019E 27F6             (/dd/sourcecode/as):00192                  beq   L0263
01A0 810D             (/dd/sourcecode/as):00193                  cmpa  #C$CR          End of params; skip ahead
01A2 275A             (/dd/sourcecode/as):00194                  beq   L02BB
01A4 812D             (/dd/sourcecode/as):00195                  cmpa  #'-            Is it a '-'?
01A6 2709             (/dd/sourcecode/as):00196                  beq   IsItParm       Yes, process option (after making sure it is one)
01A8 109E02           (/dd/sourcecode/as):00197         NotParm  ldy   <u0002         Should be a filename, get current filename ptr
01AB 26E9             (/dd/sourcecode/as):00198                  bne   L0263          If already non-0, keep processing chars looking for option or end
01AD 9F02             (/dd/sourcecode/as):00199                  stx   <u0002         Set ptr to start of filename
01AF 20E5             (/dd/sourcecode/as):00200                  bra   L0263          Continue parsing
                      (/dd/sourcecode/as):00201         
                      (/dd/sourcecode/as):00202         * '-' detected in parameter - figure out options
01B1 3410             (/dd/sourcecode/as):00203         IsItParm pshs  x              Save current option ptr
01B3 301F             (/dd/sourcecode/as):00204                  leax  -1,x           Bump ptr back to see if '-' is first char in parameters
01B5 9C1E             (/dd/sourcecode/as):00205                  cmpx  <OrgPrmPt      Is it first position?
01B7 3510             (/dd/sourcecode/as):00206                  puls  x              Restore current ptr (does not change flags from cmpx)
01B9 2706             (/dd/sourcecode/as):00207                  beq   L027E          Is first position, so has to be parm
01BB A61E             (/dd/sourcecode/as):00208                  lda   -2,x           No, get char before the dash
01BD 8120             (/dd/sourcecode/as):00209                  cmpa  #C$SPAC        Is it a space (so start of parameter)?
01BF 26E7             (/dd/sourcecode/as):00210                  bne   NotParm        No, part of filename, continue parsing
01C1 A680             (/dd/sourcecode/as):00211         L027E    lda   ,x+            Get next parameter byte
01C3 812D             (/dd/sourcecode/as):00212                  cmpa  #'-            Is it also a dash?
01C5 27FA             (/dd/sourcecode/as):00213                  beq   L027E          yes, keep eating extra dashes (why?)
01C7 8130             (/dd/sourcecode/as):00214                  cmpa  #'0            Is char below ASCII 0?
01C9 25CD             (/dd/sourcecode/as):00215                  blo   L0265          Yes, start reparsing
01CB 884D             (/dd/sourcecode/as):00216                  eora  #'M            Is it M or m (module in memory)?
01CD 84DF             (/dd/sourcecode/as):00217                  anda  #$DF
01CF 2604             (/dd/sourcecode/as):00218                  bne   L0292          No, check next option
01D1 0C0A             (/dd/sourcecode/as):00219                  inc   <dolink        Flag we are checking in memory
01D3 20EC             (/dd/sourcecode/as):00220                  bra   L027E          Check for more parameters
                      (/dd/sourcecode/as):00221         
01D5 A61F             (/dd/sourcecode/as):00222         L0292    lda   -1,x           Get parameter byte back
01D7 8853             (/dd/sourcecode/as):00223                  eora  #'S            Is it S or s (Short form)?
01D9 84DF             (/dd/sourcecode/as):00224                  anda  #$DF
01DB 2604             (/dd/sourcecode/as):00225                  bne   L029E          No, try next
01DD 0C0B             (/dd/sourcecode/as):00226                  inc   <short         Flag short form
01DF 20E0             (/dd/sourcecode/as):00227                  bra   L027E          Check for more parameters
                      (/dd/sourcecode/as):00228         
01E1 A61F             (/dd/sourcecode/as):00229         L029E    lda   -1,x           Get parameter byte back
01E3 8856             (/dd/sourcecode/as):00230                  eora  #'V            Is it V or v (don't verify CRC)?
01E5 84DF             (/dd/sourcecode/as):00231                  anda  #$DF
01E7 2604             (/dd/sourcecode/as):00232                  bne   L02AA          No, try next
01E9 0C0C             (/dd/sourcecode/as):00233                  inc   <modvfy        Yes, flag that we are NOT checking CRC
01EB 20D4             (/dd/sourcecode/as):00234                  bra   L027E          Check for more parameters
                      (/dd/sourcecode/as):00235         
01ED A61F             (/dd/sourcecode/as):00236         L02AA    lda   -1,x           Get parameter byte back
01EF 8858             (/dd/sourcecode/as):00237                  eora  #'X            Is it X or x (file is in execution dir)?
01F1 84DF             (/dd/sourcecode/as):00238                  anda  #$DF
01F3 2606             (/dd/sourcecode/as):00239                  bne   L02B8          Unknown option; show help (if enabled)
01F5 8605             (/dd/sourcecode/as):00240                  lda   #EXEC.+READ.   Flag that it is in execution directory
01F7 970D             (/dd/sourcecode/as):00241                  sta   <fperm
01F9 20C6             (/dd/sourcecode/as):00242                  bra   L027E          Check for more parameters
                      (/dd/sourcecode/as):00243         
01FB 16011E           (/dd/sourcecode/as):00244         L02B8    lbra  ShowHelp       Show help (if enabled)
                      (/dd/sourcecode/as):00245         
01FE 9E02             (/dd/sourcecode/as):00246         L02BB    ldx   <u0002         Get filename ptr
0200 10270118         (/dd/sourcecode/as):00247                  lbeq  ShowHelp       If none, show help (if enabled)
0204 301F             (/dd/sourcecode/as):00248                  leax  -1,x           Bump ptr back 1 char before file/module name
0206 0D0A             (/dd/sourcecode/as):00249                  tst   <dolink        Are we checking module in memory?
0208 2767             (/dd/sourcecode/as):00250                  beq   L0314          No, skip ahead
020A 3440             (/dd/sourcecode/as):00251                  pshs  u              Yes, save data mem ptr
020C 4F               (/dd/sourcecode/as):00252                  clra  
020D 103F00           (/dd/sourcecode/as):00253                  os9   F$Link         Link module into our memory space
0210 10250109         (/dd/sourcecode/as):00254                  lbcs  L03D2          Error; exit with it
0214 DF0E             (/dd/sourcecode/as):00255                  stu   <modptr        Save ptr to module header
0216 ECC4             (/dd/sourcecode/as):00256                  ldd   M$ID,u         See if legit module with ID sync bytes
0218 108387CD         (/dd/sourcecode/as):00257                  cmpd  #M$ID12
021C 272A             (/dd/sourcecode/as):00258                  beq   L02EB          Yes, continue
021E 3540             (/dd/sourcecode/as):00259                  puls  u              No, restore data mem ptr
0220 318C0A           (/dd/sourcecode/as):00260         L02DD    leay  <M_MInc,pcr    Display 'Module Header is Incorrect'
0223 170309           (/dd/sourcecode/as):00261                  lbsr  AddStrng       Add to output buffer
0226 17031C           (/dd/sourcecode/as):00262                  lbsr  WritLBuf       Print to screen
0229 5F               (/dd/sourcecode/as):00263                  clrb  
022A 1600F0           (/dd/sourcecode/as):00264                  lbra  L03D2          Exit without error
                      (/dd/sourcecode/as):00265         
022D 4D6F64756C652068 (/dd/sourcecode/as):00266         M_MInc   fcs   "Module header is incorrect!"
     6561646572206973
     20696E636F727265
     6374A1
                      (/dd/sourcecode/as):00267         
                      (/dd/sourcecode/as):00268         * Entry: U=ptr to where module we are identing is in our process space
0248 EC42             (/dd/sourcecode/as):00269         L02EB    ldd   M$Size,u       Get module size
024A 830003           (/dd/sourcecode/as):00270                  subd  #3             Subtract 3 (CRC bytes?)
024D 30CB             (/dd/sourcecode/as):00271                  leax  d,u            Point X to start of 3 byte CRC of module
024F 3540             (/dd/sourcecode/as):00272                  puls  u              Get back data mem ptr
0251 31C810           (/dd/sourcecode/as):00273                  leay  <u0010,u       Point to spot to hold copy of CRC
0254 3440             (/dd/sourcecode/as):00274                  pshs  u              save data mem ptr again
0256 8603             (/dd/sourcecode/as):00275                  lda   #3             Copy 3 byte CRC from module to our temp area
0258 E680             (/dd/sourcecode/as):00276         L02FB    ldb   ,x+
025A E7A0             (/dd/sourcecode/as):00277                  stb   ,y+
025C 4A               (/dd/sourcecode/as):00278                  deca  
025D 26F9             (/dd/sourcecode/as):00279                  bne   L02FB
025F 3540             (/dd/sourcecode/as):00280                  puls  u              Get back data mem ptr
0261 1700BC           (/dd/sourcecode/as):00281                  lbsr  L03D5          ? I think go print things
0264 DE0E             (/dd/sourcecode/as):00282                  ldu   <modptr        Get module ptr
0266 103F02           (/dd/sourcecode/as):00283                  os9   F$UnLink       Unlink module from our process space
0269 102500B0         (/dd/sourcecode/as):00284                  lbcs  L03D2          If error, exit with it
                      (/dd/sourcecode/as):00285         * 6809/6309 - remove clrb and lbra to clrb/ os9 F$Exit (around L03D2)
026D 5F               (/dd/sourcecode/as):00286                  clrb                 
026E 1600AC           (/dd/sourcecode/as):00287                  lbra  L03D2          No error, exit cleanly
                      (/dd/sourcecode/as):00288                  
                      (/dd/sourcecode/as):00289         * Module not in memory, need to get from file
0271 8680             (/dd/sourcecode/as):00290         L0314    lda   #$80
0273 97A3             (/dd/sourcecode/as):00291                  sta   <u00A1
0275 960D             (/dd/sourcecode/as):00292                  lda   <fperm         Get file permissions (READ=data directory, EXEC+READ=execution directory)
0277 103F84           (/dd/sourcecode/as):00293                  os9   I$Open         Open the file
027A 1025009F         (/dd/sourcecode/as):00294                  lbcs  L03D2          If an error, exit with it
027E 9719             (/dd/sourcecode/as):00295                  sta   <path          Save file path
0280 CC0000           (/dd/sourcecode/as):00296                  ldd   #$0000         Init some vars
0283 DD20             (/dd/sourcecode/as):00297                  std   <u001E         Set seek ptr to 0000:0000
0285 DD22             (/dd/sourcecode/as):00298                  std   <u0020
0287 DD1C             (/dd/sourcecode/as):00299                  std   <u001C         Init size of module to 0
0289 DC22             (/dd/sourcecode/as):00300         L032C    ldd   <u0020         Get LSW of file seek ptr
028B D31C             (/dd/sourcecode/as):00301                  addd  <u001C         Add to size of module
028D DD22             (/dd/sourcecode/as):00302                  std   <u0020         Save that back
028F 2407             (/dd/sourcecode/as):00303                  bcc   L033B          Didn't overflow into 2nd word, skip ahead
0291 DC20             (/dd/sourcecode/as):00304                  ldd   <u001E         Get MSW of file seek ptr
0293 C30001           (/dd/sourcecode/as):00305                  addd  #$0001         Bump it up by 1
0296 DD20             (/dd/sourcecode/as):00306                  std   <u001E         Save it back
0298 3440             (/dd/sourcecode/as):00307         L033B    pshs  u              Save data mem ptr
029A 9E20             (/dd/sourcecode/as):00308                  ldx   <u001E         Get X:U (seek position in file)
029C DE22             (/dd/sourcecode/as):00309                  ldu   <u0020
029E 9619             (/dd/sourcecode/as):00310                  lda   <path          Get path
02A0 103F88           (/dd/sourcecode/as):00311                  os9   I$Seek         Seek to new position
02A3 2578             (/dd/sourcecode/as):00312                  bcs   L03D2          Error, exit with it
02A5 3540             (/dd/sourcecode/as):00313                  puls  u              Get data mem ptr back
02A7 30C874           (/dd/sourcecode/as):00314                  leax  <u0072,u       Point to buffer to read into from file
02AA 9F0E             (/dd/sourcecode/as):00315                  stx   <modptr        Save it
02AC 108E000E         (/dd/sourcecode/as):00316                  ldy   #M$Port        Get $E bytes from file
02B0 103F89           (/dd/sourcecode/as):00317                  os9   I$Read         Read them in
02B3 2406             (/dd/sourcecode/as):00318                  bcc   L0360          No error, continue
02B5 C1D3             (/dd/sourcecode/as):00319                  cmpb  #E$EOF         End of file?
02B7 2664             (/dd/sourcecode/as):00320                  bne   L03D2          No, exit with error
02B9 2061             (/dd/sourcecode/as):00321                  bra   L03C1          Yes, exit without error
                      (/dd/sourcecode/as):00322                  
                      (/dd/sourcecode/as):00323         * Entry: X=ptr to start of file block we just read in
02BB EC84             (/dd/sourcecode/as):00324         L0360    ldd   ,x             Get M$ID module header bytes
02BD 108387CD         (/dd/sourcecode/as):00325                  cmpd  #M$ID12        Legit module header?
02C1 1026FF5B         (/dd/sourcecode/as):00326                  lbne  L02DD          No, exit with Module Header incorrect error
02C5 3450             (/dd/sourcecode/as):00327                  pshs  u,x            Save regs
02C7 EC02             (/dd/sourcecode/as):00328                  ldd   M$Size,x       Get module size
02C9 DD1C             (/dd/sourcecode/as):00329                  std   <u001C         Save copy
02CB D322             (/dd/sourcecode/as):00330                  addd  <u0020         Add that to LSW of seek ptr
02CD 1F03             (/dd/sourcecode/as):00331                  tfr   d,u            Move to U
02CF 335D             (/dd/sourcecode/as):00332                  leau  -3,u           Subtract 3 (note: this does not affect CC flags from ADDD above)
02D1 9E20             (/dd/sourcecode/as):00333                  ldx   <u001E         Get MSW of seek ptr
02D3 2402             (/dd/sourcecode/as):00334                  bcc   L037C          No carry, leave MSW alone
02D5 3001             (/dd/sourcecode/as):00335                  leax  1,x            We had a carry, bump up MSW
02D7 9619             (/dd/sourcecode/as):00336         L037C    lda   <path          Seek to new position in file
02D9 103F88           (/dd/sourcecode/as):00337                  os9   I$Seek   
02DC 253F             (/dd/sourcecode/as):00338                  bcs   L03D2          If error, exit with it
02DE 3550             (/dd/sourcecode/as):00339                  puls  u,x            restore regs
02E0 30C810           (/dd/sourcecode/as):00340                  leax  <u0010,u       Point to buffer to hold CRC
02E3 108E0003         (/dd/sourcecode/as):00341                  ldy   #3             24 bit CRC
02E7 9619             (/dd/sourcecode/as):00342                  lda   <path 
02E9 103F89           (/dd/sourcecode/as):00343                  os9   I$Read         Read in module CRC
02EC 252F             (/dd/sourcecode/as):00344                  bcs   L03D2          Error, exit with it
02EE 3450             (/dd/sourcecode/as):00345                  pshs  u,x            Got it, preserve regs
02F0 109E0E           (/dd/sourcecode/as):00346                  ldy   <modptr        Get ptr to module hdr
02F3 EC24             (/dd/sourcecode/as):00347                  ldd   M$Name,y       Get ptr to Name of module
02F5 D322             (/dd/sourcecode/as):00348                  addd  <u0020         Add to LSW of seek ptr
02F7 1F03             (/dd/sourcecode/as):00349                  tfr   d,u            Move result to U
02F9 9E20             (/dd/sourcecode/as):00350                  ldx   <u001E         Get MSW of seek ptr
02FB 2402             (/dd/sourcecode/as):00351                  bcc   L03A4          Didn't overflow, done seek ptr calc
02FD 3001             (/dd/sourcecode/as):00352                  leax  1,x            Did overflow, bump of MSW
02FF 9619             (/dd/sourcecode/as):00353         L03A4    lda   <path          Seek to where module name is
0301 103F88           (/dd/sourcecode/as):00354                  os9   I$Seek
0304 2517             (/dd/sourcecode/as):00355                  bcs   L03D2          Error;exit with it
0306 3550             (/dd/sourcecode/as):00356                  puls  u,x            Restore regs
0308 30C90082         (/dd/sourcecode/as):00357                  leax  >u0080,u       Point to buffer to hold name of module (from file)
030C 108E0021         (/dd/sourcecode/as):00358                  ldy   #$0021         Read 33 bytes from start of name in module
0310 9619             (/dd/sourcecode/as):00359                  lda   <path 
0312 103F89           (/dd/sourcecode/as):00360                  os9   I$Read   
0315 2506             (/dd/sourcecode/as):00361                  bcs   L03D2          Error;exit with it
0317 8D07             (/dd/sourcecode/as):00362                  bsr   L03D5
0319 16FF6D           (/dd/sourcecode/as):00363                  lbra  L032C
                      (/dd/sourcecode/as):00364         
     031C             (/dd/sourcecode/as):00365         ShowHelp equ   *
                      (/dd/sourcecode/as):00366                IFNE  DOHELP
                      (/dd/sourcecode/as):00367                  lda   #$01           Print Help screen to Std Out
                      (/dd/sourcecode/as):00368                  leax  >HelpMsg,pcr
                      (/dd/sourcecode/as):00369                  ldy   #$00BA
                      (/dd/sourcecode/as):00370                  os9   I$WritLn 
                      (/dd/sourcecode/as):00371                ENDC
031C 5F               (/dd/sourcecode/as):00372         L03C1    clrb                 Exit w/o error
031D 103F06           (/dd/sourcecode/as):00373         L03D2    os9   F$Exit
                      (/dd/sourcecode/as):00374         
0320 0D0B             (/dd/sourcecode/as):00375         L03D5    tst   <short         Is the short form display flag set?
0322 10260123         (/dd/sourcecode/as):00376                  lbne  L0502          Yes, skip ahead
                      (/dd/sourcecode/as):00377         * Long form IDENT
0326 17021C           (/dd/sourcecode/as):00378                  lbsr  WritLBuf       No, write out current line buffer to screen
0329 318DFCE6         (/dd/sourcecode/as):00379                  leay  >M_Hdr,pcr     Point to 'Header for:'
032D 1701FF           (/dd/sourcecode/as):00380                  lbsr  AddStrng       Add to output buffer
0330 1700FD           (/dd/sourcecode/as):00381                  lbsr  AddMName       Add module name to output buffer
0333 17020F           (/dd/sourcecode/as):00382                  lbsr  WritLBuf       Write line buffer to screen
0336 318DFCE5         (/dd/sourcecode/as):00383                  leay  >M_MSiz,pcr    Point to 'Module size'
033A 1701F2           (/dd/sourcecode/as):00384                  lbsr  AddStrng       Add to output buffer
033D 109E0E           (/dd/sourcecode/as):00385                  ldy   <modptr        Get ptr to module
0340 EC22             (/dd/sourcecode/as):00386                  ldd   M$Size,y       Get module size from header
0342 1701D0           (/dd/sourcecode/as):00387                  lbsr  L05D2          Add both hex and decimal versions of size to output buffer
0345 318DFCE2         (/dd/sourcecode/as):00388                  leay  >M_MCRC,pcr    Add 'Module CRC:' to output buffer
0349 1701E3           (/dd/sourcecode/as):00389                  lbsr  AddStrng       Add to output buffer
034C 17013A           (/dd/sourcecode/as):00390                  lbsr  L0543          Add 24 bit CRC (in hex format) for output buffer
034F 0D0C             (/dd/sourcecode/as):00391                  tst   <modvfy        Are we also verifying the CRC?
0351 2613             (/dd/sourcecode/as):00392                  bne   L041E          No, write the output buffer as is, to the screen
0353 170142           (/dd/sourcecode/as):00393                  lbsr  L0553          Yes, verify CRC first
0356 4D               (/dd/sourcecode/as):00394                  tsta                 Verified?
0357 2706             (/dd/sourcecode/as):00395                  beq   L0417          Yes, append '(Good)' to output buffer
0359 318DFD34         (/dd/sourcecode/as):00396                  leay  >M_Bad,pcr     No, append '(Bad)' to output buffer
035D 2004             (/dd/sourcecode/as):00397                  bra   L041B
                      (/dd/sourcecode/as):00398         
035F 318DFD28         (/dd/sourcecode/as):00399         L0417    leay  >M_Good,pcr    Point to '(Good)'
0363 1701C9           (/dd/sourcecode/as):00400         L041B    lbsr  AddStrng       Add to output buffer
0366 1701DC           (/dd/sourcecode/as):00401         L041E    lbsr  WritLBuf       Write line buffer to screen
0369 318DFCCA         (/dd/sourcecode/as):00402                  leay  >M_HdrP,pcr    Point to 'Hdr parity:'
036D 1701BF           (/dd/sourcecode/as):00403                  lbsr  AddStrng       Add to output buffer
0370 109E0E           (/dd/sourcecode/as):00404                  ldy   <modptr        Get module ptr
0373 E628             (/dd/sourcecode/as):00405                  ldb   M$Parity,y     Get parity
0375 1701ED           (/dd/sourcecode/as):00406                  lbsr  L0633          Append parity to output buffer in hex format
0378 1701CA           (/dd/sourcecode/as):00407                  lbsr  WritLBuf       Write line buffer to screen
037B 109E0E           (/dd/sourcecode/as):00408                  ldy   <modptr        Get module ptr back
037E E626             (/dd/sourcecode/as):00409                  ldb   M$Type,y       Get type/language byte
0380 D71A             (/dd/sourcecode/as):00410                  stb   <mtype         Save copy
0382 C4F0             (/dd/sourcecode/as):00411                  andb  #TypeMask      Keep just type 
0384 C1E0             (/dd/sourcecode/as):00412                  cmpb  #Drivr         Driver module?
0386 2704             (/dd/sourcecode/as):00413                  beq   L0444          Yes, skip ahead
0388 C110             (/dd/sourcecode/as):00414                  cmpb  #Prgrm         Program module?
038A 261E             (/dd/sourcecode/as):00415                  bne   L0462          No, skip ahead
                      (/dd/sourcecode/as):00416         * Only driver and program modules get Exec offset & Data size reported
038C 318DFCB3         (/dd/sourcecode/as):00417         L0444    leay  >M_ExOff,pcr   Point to 'Exec. off:'
0390 17019C           (/dd/sourcecode/as):00418                  lbsr  AddStrng       Add to output buffer
0393 109E0E           (/dd/sourcecode/as):00419                  ldy   <modptr        Get ptr to module
0396 EC29             (/dd/sourcecode/as):00420                  ldd   M$Exec,y       Get Execution offset
0398 17017A           (/dd/sourcecode/as):00421                  lbsr  L05D2          Add both hex and decimal versions of Execution offset to output buffer
039B 318DFCB0         (/dd/sourcecode/as):00422                  leay  >M_DatSz,pcr   Point to 'Data Size:'
039F 17018D           (/dd/sourcecode/as):00423                  lbsr  AddStrng       Add to output buffer
03A2 109E0E           (/dd/sourcecode/as):00424                  ldy   <modptr        Get module ptr again
03A5 EC2B             (/dd/sourcecode/as):00425                  ldd   M$Mem,y        Get data memory size
03A7 17016B           (/dd/sourcecode/as):00426                  lbsr  L05D2          Add both hex and decimal versions of Data mem size to output buffer
03AA 318DFCB9         (/dd/sourcecode/as):00427         L0462    leay  >M_Edtn,pcr    Point to 'Edition:'
03AE 17017E           (/dd/sourcecode/as):00428                  lbsr  AddStrng       Add to output buffer
03B1 D616             (/dd/sourcecode/as):00429                  ldb   <u0016         Get the edition #
03B3 3404             (/dd/sourcecode/as):00430                  pshs  b              Save it
03B5 1701AD           (/dd/sourcecode/as):00431                  lbsr  L0633          Append edition # to output buffer in hex format
03B8 C605             (/dd/sourcecode/as):00432                  ldb   #5             Add 5 spaces to output buffer
03BA 1701BC           (/dd/sourcecode/as):00433                  lbsr  L0654
03BD 3504             (/dd/sourcecode/as):00434                  puls  b              D=Edition #
03BF 4F               (/dd/sourcecode/as):00435                  clra  
03C0 1701AC           (/dd/sourcecode/as):00436                  lbsr  L0649          Append edition # to output buffer in decimal format
03C3 17017F           (/dd/sourcecode/as):00437                  lbsr  WritLBuf       Write line buffer to screen
03C6 318DFC91         (/dd/sourcecode/as):00438                  leay  >M_TLAR,pcr    Point to 'Ty/La At/Rv:'
03CA 170162           (/dd/sourcecode/as):00439                  lbsr  AddStrng       Add to output buffer
03CD D61A             (/dd/sourcecode/as):00440                  ldb   <mtype         Get type/language byte back
03CF 170193           (/dd/sourcecode/as):00441                  lbsr  L0633          Append type/lanugage to output buffer in hex format
03D2 109E0E           (/dd/sourcecode/as):00442                  ldy   <modptr        Get module ptr back
03D5 E627             (/dd/sourcecode/as):00443                  ldb   M$Revs,y       Get attribute/revision level
03D7 D71B             (/dd/sourcecode/as):00444                  stb   <u001B         Save copy
03D9 170189           (/dd/sourcecode/as):00445                  lbsr  L0633          Append it in hex format to output buffer
03DC 170166           (/dd/sourcecode/as):00446                  lbsr  WritLBuf       Write line buffer to screen
03DF D61A             (/dd/sourcecode/as):00447                  ldb   <mtype         Get language/type back
03E1 54               (/dd/sourcecode/as):00448                  lsrb                 B=Type nibble only
03E2 54               (/dd/sourcecode/as):00449                  lsrb  
03E3 54               (/dd/sourcecode/as):00450                  lsrb  
03E4 54               (/dd/sourcecode/as):00451                  lsrb  
03E5 308DFCAE         (/dd/sourcecode/as):00452                  leax  >TypeTbl,pcr   Point to table of type names
03E9 A685             (/dd/sourcecode/as):00453                  lda   b,x            Get offset to actual text
03EB 3186             (/dd/sourcecode/as):00454                  leay  a,x            Point to type string
03ED 17013F           (/dd/sourcecode/as):00455                  lbsr  AddStrng       Add to output buffer
03F0 318DFC7F         (/dd/sourcecode/as):00456                  leay  >M_Mod,pcr     Point to 'mod,'
03F4 170138           (/dd/sourcecode/as):00457                  lbsr  AddStrng       Add to output buffer
03F7 D61A             (/dd/sourcecode/as):00458                  ldb   <mtype         Get type back
03F9 C40F             (/dd/sourcecode/as):00459                  andb  #LangMask      B=language nibble only
03FB 308DFD04         (/dd/sourcecode/as):00460                  leax  >LangTbl,pcr   Point to table of language names
03FF A685             (/dd/sourcecode/as):00461                  lda   b,x            Get offset to actual text
0401 3186             (/dd/sourcecode/as):00462                  leay  a,x            Point to language string
0403 170129           (/dd/sourcecode/as):00463                  lbsr  AddStrng       Add to output buffer
0406 D61B             (/dd/sourcecode/as):00464                  ldb   <u001B         Get copy of attribute/revision level
0408 C580             (/dd/sourcecode/as):00465                  bitb  #ReEnt         Is re-entrant bit set?
040A 2709             (/dd/sourcecode/as):00466                  beq   L04CD          No, show as non shareable
040C 318DFC67         (/dd/sourcecode/as):00467                  leay  >M_ReEn,pcr    Point to 're-en,'
0410 17011C           (/dd/sourcecode/as):00468                  lbsr  AddStrng       Add to output buffer
0413 2007             (/dd/sourcecode/as):00469                  bra   L04D4          Check next attribute
                      (/dd/sourcecode/as):00470         
0415 318DFC64         (/dd/sourcecode/as):00471         L04CD    leay  >M_NonShr,pcr  Point to 'non-shr,'
0419 170113           (/dd/sourcecode/as):00472                  lbsr  AddStrng       Add to output buffer
041C C540             (/dd/sourcecode/as):00473         L04D4    bitb  #ModProt       Is Write enable bit set?
041E 2706             (/dd/sourcecode/as):00474                  beq   L04DE          No, show as Read Only
0420 318DFC64         (/dd/sourcecode/as):00475                  leay  >M_RW,pcr      Yes, point to 'R/W'
                      (/dd/sourcecode/as):00476         * 6809/6309 - could replace bra with FCB $8C (cmpx immed) to save 1 byte
0424 2004             (/dd/sourcecode/as):00477                  bra   L04E2
                      (/dd/sourcecode/as):00478         
0426 318DFC5B         (/dd/sourcecode/as):00479         L04DE    leay  >M_RO,pcr      Point to 'R/O'
042A 170102           (/dd/sourcecode/as):00480         L04E2    lbsr  AddStrng       Add to output buffer
042D 160115           (/dd/sourcecode/as):00481                  lbra  WritLBuf       Write line buffer to screen
                      (/dd/sourcecode/as):00482         
                      (/dd/sourcecode/as):00483         * Add module name to output buffer, load <u0016 with edition #
0430 0D0A             (/dd/sourcecode/as):00484         AddMName tst   <dolink        Are we checking module in memory?
0432 2709             (/dd/sourcecode/as):00485                  beq   L04F6          No, from file, skip ahead
0434 109E0E           (/dd/sourcecode/as):00486                  ldy   <modptr        Get ptr to module
0437 EC24             (/dd/sourcecode/as):00487                  ldd   M$Name,y       Get offset to name of module
0439 31AB             (/dd/sourcecode/as):00488                  leay  d,y            Point to start of name
043B 2004             (/dd/sourcecode/as):00489                  bra   L04FA
                      (/dd/sourcecode/as):00490         
043D 31C90082         (/dd/sourcecode/as):00491         L04F6    leay  >u0080,u       module in file; point to buffer with name of module
0441 1700EB           (/dd/sourcecode/as):00492         L04FA    lbsr  AddStrng       Add to output buffer
0444 A6A4             (/dd/sourcecode/as):00493                  lda   ,y             Get byte after module name (Edition #)
0446 9716             (/dd/sourcecode/as):00494                  sta   <u0016         Save it
0448 39               (/dd/sourcecode/as):00495                  rts
                      (/dd/sourcecode/as):00496         
                      (/dd/sourcecode/as):00497         * Short form IDENT
0449 C606             (/dd/sourcecode/as):00498         L0502    ldb   #6             Add 6 spaces to output buffer
044B 17012B           (/dd/sourcecode/as):00499                  lbsr  L0654
044E 109E0E           (/dd/sourcecode/as):00500                  ldy   <modptr        Get ptr to module in memory
0451 E626             (/dd/sourcecode/as):00501                  ldb   M$Type,y       Get type byte
0453 17010F           (/dd/sourcecode/as):00502                  lbsr  L0633          Append hex version of type to output buffer
0456 8D31             (/dd/sourcecode/as):00503                  bsr   L0543          Add 24 bit CRC (in hex format) for output buffer
0458 0D0C             (/dd/sourcecode/as):00504                  tst   <modvfy        Are we actually verifying CRC?
045A 2704             (/dd/sourcecode/as):00505                  beq   L0519          Yes, skip ahead
045C 8620             (/dd/sourcecode/as):00506                  lda   #C$SPAC        No, append a space to output buffer
045E 2007             (/dd/sourcecode/as):00507                  bra   L0520
                      (/dd/sourcecode/as):00508         
0460 8D36             (/dd/sourcecode/as):00509         L0519    bsr   L0553          Verify the CRC
0462 4D               (/dd/sourcecode/as):00510                  tsta                 Verified?
0463 2602             (/dd/sourcecode/as):00511                  bne   L0520          No, append '?' to output buffer
0465 862E             (/dd/sourcecode/as):00512                  lda   #C$PERD        Yes, add a period to output buffer
0467 1700D1           (/dd/sourcecode/as):00513         L0520    lbsr  AppA2Buf
046A 17011E           (/dd/sourcecode/as):00514                  lbsr  L0666          Add space to output buffer
046D 8DC1             (/dd/sourcecode/as):00515                  bsr   AddMName       Add module name to output buffer
046F 9E00             (/dd/sourcecode/as):00516                  ldx   <u0000         Get ptr to current position in line output buffer
0471 3410             (/dd/sourcecode/as):00517                  pshs  x              Save it on the stack
0473 30C824           (/dd/sourcecode/as):00518                  leax  <u0022,u       Point to start of line output buffer
0476 9F00             (/dd/sourcecode/as):00519                  stx   <u0000         Save it as current start position
0478 D616             (/dd/sourcecode/as):00520                  ldb   <u0016         Get edition #
047A 0C18             (/dd/sourcecode/as):00521                  inc   <u0018         Set flag
047C 4F               (/dd/sourcecode/as):00522                  clra                 D=edition #
047D 170136           (/dd/sourcecode/as):00523                  lbsr  AppndDec       Append '#' and edition # in decimal format
0480 0F18             (/dd/sourcecode/as):00524                  clr   <u0018         Clear flag
0482 3510             (/dd/sourcecode/as):00525                  puls  x              Get current position in output buffer back
0484 9F00             (/dd/sourcecode/as):00526                  stx   <u0000         Save it as current position
0486 1600BC           (/dd/sourcecode/as):00527                  lbra  WritLBuf       Write line buffer to screen & return from there
                      (/dd/sourcecode/as):00528         
0489 8624             (/dd/sourcecode/as):00529         L0543    lda   #'$            Add dollar sign to output buffer
048B 1700AD           (/dd/sourcecode/as):00530                  lbsr  AppA2Buf
048E DC10             (/dd/sourcecode/as):00531                  ldd   <u0010         Get first 2 bytes of CRC
0490 170100           (/dd/sourcecode/as):00532                  lbsr  App16Hex       Add hex version of that to output buffer
0493 D612             (/dd/sourcecode/as):00533                  ldb   <u0012         Get last byte of CRC
0495 1600F1           (/dd/sourcecode/as):00534                  lbra  L0664          Add hex version of that to output buffer
                      (/dd/sourcecode/as):00535         
0498 CCFFFF           (/dd/sourcecode/as):00536         L0553    ldd   #$FFFF         Pre Init 24 byte CRC to $FFFFFF (in order to calculate)
049B DD13             (/dd/sourcecode/as):00537                  std   <u0013
049D D715             (/dd/sourcecode/as):00538                  stb   <u0015
049F 3470             (/dd/sourcecode/as):00539                  pshs  u,y,x          Save regs
04A1 33C813           (/dd/sourcecode/as):00540                  leau  <u0013,u       Point to start of working CRC
04A4 0D0A             (/dd/sourcecode/as):00541                  tst   <dolink        Module in memory?
04A6 270E             (/dd/sourcecode/as):00542                  beq   L0571          No, go do it from file
                      (/dd/sourcecode/as):00543         * Verify CRC for module in memory
04A8 9E0E             (/dd/sourcecode/as):00544                  ldx   <modptr        Yes, get module ptr
04AA 10AE02           (/dd/sourcecode/as):00545                  ldy   M$Size,x       Get size of module
04AD 103F17           (/dd/sourcecode/as):00546                  os9   F$CRC          Calculate CRC of module
04B0 1025FE69         (/dd/sourcecode/as):00547                  lbcs  L03D2          Error; exit with it
04B4 201B             (/dd/sourcecode/as):00548                  bra   L058C
                      (/dd/sourcecode/as):00549         
                      (/dd/sourcecode/as):00550         * Verify CRC for module in file
04B6 3450             (/dd/sourcecode/as):00551         L0571    pshs  u,x            Save regs
04B8 9E20             (/dd/sourcecode/as):00552                  ldx   <u001E         Get MSW of file ptr
04BA DE22             (/dd/sourcecode/as):00553                  ldu   <u0020         Get LSW of file ptr
04BC 9619             (/dd/sourcecode/as):00554                  lda   <path          Get path to file
04BE 103F88           (/dd/sourcecode/as):00555                  os9   I$Seek         Do the seek
04C1 3550             (/dd/sourcecode/as):00556                  puls  u,x            Get regs back
04C3 1025FE56         (/dd/sourcecode/as):00557                  lbcs  L03D2          If error seeking, exit with it
04C7 DC1C             (/dd/sourcecode/as):00558                  ldd   <u001C         Get size of module we are reading
04C9 3406             (/dd/sourcecode/as):00559                  pshs  d              Save it for a sec
04CB 8D35             (/dd/sourcecode/as):00560                  bsr   L05BF          Go verify CRC
04CD 3506             (/dd/sourcecode/as):00561                  puls  d              Restore size
04CF DD1C             (/dd/sourcecode/as):00562                  std   <u001C         And save it back
04D1 3570             (/dd/sourcecode/as):00563         L058C    puls  u,y,x          Restore regs
04D3 9613             (/dd/sourcecode/as):00564                  lda   <u0013         Get byte 1 of calculated CRC
04D5 8180             (/dd/sourcecode/as):00565                  cmpa  #CRCCon1       Match 1st byte of CRC result constant?
04D7 2608             (/dd/sourcecode/as):00566                  bne   L059E          No, exit with A='?'
04D9 DC14             (/dd/sourcecode/as):00567                  ldd   <u0014         Get bytes 2-3 of calculated CRC
04DB 10830FE3         (/dd/sourcecode/as):00568                  cmpd  #CRCCon23      Match bytes 2-3 of CRC result constant?
04DF 2703             (/dd/sourcecode/as):00569                  beq   L05A1          CRC is good, exit with A=0
                      (/dd/sourcecode/as):00570         
04E1 863F             (/dd/sourcecode/as):00571         L059E    lda   #'?            CRC doesn't match, exit with A=$3f (question mark)
04E3 39               (/dd/sourcecode/as):00572                  rts
                      (/dd/sourcecode/as):00573         
04E4 4F               (/dd/sourcecode/as):00574         L05A1    clra                 A=0 (CRC matched)
04E5 39               (/dd/sourcecode/as):00575                  rts   
                      (/dd/sourcecode/as):00576         
04E6 9619             (/dd/sourcecode/as):00577         L05A3    lda   <path          Get path to file
04E8 9E06             (/dd/sourcecode/as):00578                  ldx   <u0006         Get ptr to read buffer to read a file chunk into
04EA 109E08           (/dd/sourcecode/as):00579                  ldy   <u0008         Get size of read buffer (default=2K)
04ED 109C1C           (/dd/sourcecode/as):00580                  cmpy  <u001C         Will entire module fit?
04F0 2303             (/dd/sourcecode/as):00581                  bls   L05B2          Yes, go read it
04F2 109E1C           (/dd/sourcecode/as):00582                  ldy   <u001C         No, read just max buffer size
04F5 103F89           (/dd/sourcecode/as):00583         L05B2    os9   I$Read         Read it in
04F8 109F04           (/dd/sourcecode/as):00584                  sty   <u0004         Save # of bytes we actually read
04FB 39               (/dd/sourcecode/as):00585                  rts
                      (/dd/sourcecode/as):00586         
04FC 8DE8             (/dd/sourcecode/as):00587         L05B9    bsr   L05A3          Go read in either whole module (if it fits) or our read buffer size
04FE 1025FE1B         (/dd/sourcecode/as):00588                  lbcs  L03D2          Error, exit with it
                      (/dd/sourcecode/as):00589         * Verify CRC from file
                      (/dd/sourcecode/as):00590         * Entry: X=ptr to start of buffer of module data we are calculating CRC from
                      (/dd/sourcecode/as):00591         *        U=ptr to 3 bytes for CRC accumulator
0502 109E04           (/dd/sourcecode/as):00592         L05BF    ldy   <u0004         Get # of active bytes currently in read buffer
0505 27F5             (/dd/sourcecode/as):00593                  beq   L05B9          None, go read some in
0507 103F17           (/dd/sourcecode/as):00594                  os9   F$CRC          Calculate CRC
050A DC1C             (/dd/sourcecode/as):00595                  ldd   <u001C         Get max buffer size
050C 9304             (/dd/sourcecode/as):00596                  subd  <u0004         Subtract # of bytes we actually have in read buffer
050E DD1C             (/dd/sourcecode/as):00597                  std   <u001C         Save new size
0510 26EA             (/dd/sourcecode/as):00598                  bne   L05B9          Still more, keep reading chunks of the file
0512 DD04             (/dd/sourcecode/as):00599                  std   <u0004         Done, reset # of active bytes to 0 & return
0514 39               (/dd/sourcecode/as):00600                  rts
                      (/dd/sourcecode/as):00601         
                      (/dd/sourcecode/as):00602         * Add Hex and decimal versions of number in D to output buffer
                      (/dd/sourcecode/as):00603         * Entry: D=16 bit number
0515 3406             (/dd/sourcecode/as):00604         L05D2    pshs  d              Save number
0517 8D42             (/dd/sourcecode/as):00605                  bsr   L0628          Append '$' and hex version of D to output buffer
0519 C603             (/dd/sourcecode/as):00606                  ldb   #3             Add 3 spaces to output buffer
051B 8D5C             (/dd/sourcecode/as):00607                  bsr   L0654
051D 3506             (/dd/sourcecode/as):00608                  puls  d              Get back 16 bit number
051F 8D4E             (/dd/sourcecode/as):00609                  bsr   L0649          Append number in D to output buffer in decimal format
0521 2022             (/dd/sourcecode/as):00610                  bra   WritLBuf       Write line buffer to screen
                      (/dd/sourcecode/as):00611                  
0523 8624             (/dd/sourcecode/as):00612         L05E9    lda   #'$            Add dollar sign to output buffer
0525 8D14             (/dd/sourcecode/as):00613                  bsr   AppA2Buf
0527 8D7E             (/dd/sourcecode/as):00614                  bsr   L0682          Add hex digit in lower nibble of B to output buffer
0529 C602             (/dd/sourcecode/as):00615                  ldb   #2             Add 2 spaces to output buffer
052B 8D4C             (/dd/sourcecode/as):00616                  bsr   L0654
052D 3586             (/dd/sourcecode/as):00617                  puls  pc,d
                      (/dd/sourcecode/as):00618         
                      (/dd/sourcecode/as):00619         * Append hi bit terminated string to output buffer (and add one space)
                      (/dd/sourcecode/as):00620         * Entry: Y=ptr to hardcoded text string
052F A6A4             (/dd/sourcecode/as):00621         AddStrng lda   ,y             Get char from string
0531 847F             (/dd/sourcecode/as):00622                  anda  #$7F           Mask off high bit
0533 8D06             (/dd/sourcecode/as):00623                  bsr   AppA2Buf       Append char to output line buffer
0535 A6A0             (/dd/sourcecode/as):00624                  lda   ,y+            Get char again
0537 2AF6             (/dd/sourcecode/as):00625                  bpl   AddStrng       No high bit set; continue appending chars from string
0539 8620             (/dd/sourcecode/as):00626         L0606    lda   #C$SPAC        High bit set, so end of string; append space & return
                      (/dd/sourcecode/as):00627         * Append char in A reg to output buffer, update output buffer ptr @ <u0000
053B 3410             (/dd/sourcecode/as):00628         AppA2Buf pshs  x              Save X
053D 9E00             (/dd/sourcecode/as):00629                  ldx   <u0000         Get ptr
053F A780             (/dd/sourcecode/as):00630                  sta   ,x+            Save char in output buffer & bump ptr up
0541 9F00             (/dd/sourcecode/as):00631                  stx   <u0000         Save new ptr
0543 3590             (/dd/sourcecode/as):00632                  puls  pc,x           Restore and X & return
                      (/dd/sourcecode/as):00633         
                      (/dd/sourcecode/as):00634         * Write current line buffer out to screen, and reset output line buffer ptr
                      (/dd/sourcecode/as):00635         * Entry: X=ptr to buffer we read into
                      (/dd/sourcecode/as):00636         *        Y=# of bytes read
0545 3432             (/dd/sourcecode/as):00637         WritLBuf pshs  y,x,a          Save regs
0547 860D             (/dd/sourcecode/as):00638                  lda   #C$CR          Append CR to output buffer
0549 8DF0             (/dd/sourcecode/as):00639                  bsr   AppA2Buf
054B 30C824           (/dd/sourcecode/as):00640                  leax  <u0022,u       Point to start of output buffer
054E 9F00             (/dd/sourcecode/as):00641                  stx   <u0000         Reset current output buffer ptr to start (and X points to start of string we just built)
0550 108E0050         (/dd/sourcecode/as):00642                  ldy   #80            Max 80 bytes to write
0554 8601             (/dd/sourcecode/as):00643                  lda   #$01           to Std out
0556 103F8C           (/dd/sourcecode/as):00644                  os9   I$WritLn       Write the line out
0559 35B2             (/dd/sourcecode/as):00645                  puls  pc,y,x,a       Restore regs and return
                      (/dd/sourcecode/as):00646         
                      (/dd/sourcecode/as):00647         * Add '$' and 4 digit hex version of contents of D register to output buffer
                      (/dd/sourcecode/as):00648         * Entry: D=16 bit #
055B 3402             (/dd/sourcecode/as):00649         L0628    pshs  a              Save high byte for a second
055D 8624             (/dd/sourcecode/as):00650                  lda   #'$            Add dollar sign to output buffer
055F 8DDA             (/dd/sourcecode/as):00651                  bsr   AppA2Buf
0561 3502             (/dd/sourcecode/as):00652                  puls  a              Restore D
0563 2020             (/dd/sourcecode/as):00653                  bra   L0660          Add hex version of D to output buffer
                      (/dd/sourcecode/as):00654         
                      (/dd/sourcecode/as):00655         * Add '$x' where x is a single hex digit from B register
0565 3402             (/dd/sourcecode/as):00656         L0633    pshs  a
0567 8624             (/dd/sourcecode/as):00657                  lda   #'$            Add dollar sign to output buffer
0569 8DD0             (/dd/sourcecode/as):00658                  bsr   AppA2Buf
056B 3502             (/dd/sourcecode/as):00659                  puls  a
056D 201A             (/dd/sourcecode/as):00660                  bra   L0664          Add 2 digit hex value in B to output buffer
                      (/dd/sourcecode/as):00661                  
                      (/dd/sourcecode/as):00662         * NOTE: NO LABEL TO HERE IN SOURCE
                      (/dd/sourcecode/as):00663         * Entry: B=single nibble value to convert to single Hex char
                      (/dd/sourcecode/as):00664         *         pshs  a
                      (/dd/sourcecode/as):00665         *         lda   #'$            Add dollar sign to output buffer
                      (/dd/sourcecode/as):00666         *         bsr   AppA2Buf
                      (/dd/sourcecode/as):00667         *         puls  a
                      (/dd/sourcecode/as):00668         * 6809/6309 - change to BSR L0682, remove RTS
                      (/dd/sourcecode/as):00669         *         bra   L0682          Add ASCII version of hex value in B to output buffer (single nibble)
                      (/dd/sourcecode/as):00670                  
                      (/dd/sourcecode/as):00671         
                      (/dd/sourcecode/as):00672         * Append '#'  and decimal version of 16 bit number in D
                      (/dd/sourcecode/as):00673         * Entry: D=16 bit number
056F 3402             (/dd/sourcecode/as):00674         L0649    pshs  a
0571 8623             (/dd/sourcecode/as):00675                  lda   #'#            Add number sign to output buffer
0573 8DC6             (/dd/sourcecode/as):00676                  bsr   AppA2Buf
0575 3502             (/dd/sourcecode/as):00677                  puls  a              Restore D
                      (/dd/sourcecode/as):00678         * 6809/6309 - change to BSR AppndDec, remove RTS
0577 203D             (/dd/sourcecode/as):00679                  bra   AppndDec       Append decimal version of D to output buffer
                      (/dd/sourcecode/as):00680         
                      (/dd/sourcecode/as):00681         * Add B spaces to output buffer
                      (/dd/sourcecode/as):00682         * Entry: B=# of spaces to add to output buffer
0579 3406             (/dd/sourcecode/as):00683         L0654    pshs  d              Save D
057B 5D               (/dd/sourcecode/as):00684         L0656    tstb                 Done adding spaces?
057C 2F05             (/dd/sourcecode/as):00685                  ble   L065E          Yes, restore D & return
057E 8DB9             (/dd/sourcecode/as):00686                  bsr   L0606          No, add a space to the output buffer
0580 5A               (/dd/sourcecode/as):00687                  decb                 Dec counter
0581 20F8             (/dd/sourcecode/as):00688                  bra   L0656          Keep adding spaces until done
                      (/dd/sourcecode/as):00689         
0583 3586             (/dd/sourcecode/as):00690         L065E    puls  pc,d
                      (/dd/sourcecode/as):00691         
                      (/dd/sourcecode/as):00692         * Entry: D=16 bit number
0585 8D0C             (/dd/sourcecode/as):00693         L0660    bsr   App16Hex       Append 4 digit hex version of D to output buffer
0587 2002             (/dd/sourcecode/as):00694                  bra   L0666          Add space to output buffer and return (could shrink by change to CMPX # opcode)
                      (/dd/sourcecode/as):00695         
                      (/dd/sourcecode/as):00696         * Entry: B=8 bit value to append to output buffer in hex format (2 digits)
0589 8D0E             (/dd/sourcecode/as):00697         L0664    bsr   App8Hex        Add B to output buffer in 2 digit hex format
058B 3402             (/dd/sourcecode/as):00698         L0666    pshs  a
058D 8620             (/dd/sourcecode/as):00699                  lda   #C$SPAC        Add space to output buffer
058F 8DAA             (/dd/sourcecode/as):00700                  bsr   AppA2Buf
0591 3582             (/dd/sourcecode/as):00701                  puls  pc,a
                      (/dd/sourcecode/as):00702         
                      (/dd/sourcecode/as):00703         * App16Hex - Append 16 bit number to output buffer in hex format
                      (/dd/sourcecode/as):00704         * Entry: D=16 bit number
0593 1E89             (/dd/sourcecode/as):00705         App16Hex exg   a,b            Swap high/low bytes of 16 bit number
0595 8D02             (/dd/sourcecode/as):00706                  bsr   App8Hex        Append hex version of high byte to output buffer
0597 1F89             (/dd/sourcecode/as):00707                  tfr   a,b            Finish up by appending hex version of low byte to output buffer
                      (/dd/sourcecode/as):00708         * Entry point to append 8 bit number to output buffer in hex format
                      (/dd/sourcecode/as):00709         * Entry: B=8 bit number
0599 3404             (/dd/sourcecode/as):00710         App8Hex  pshs  b              Save byte
059B C4F0             (/dd/sourcecode/as):00711                  andb  #$F0           Keep high nibble only
059D 54               (/dd/sourcecode/as):00712                  lsrb                 Shift to low nibble
059E 54               (/dd/sourcecode/as):00713                  lsrb  
059F 54               (/dd/sourcecode/as):00714                  lsrb  
05A0 54               (/dd/sourcecode/as):00715                  lsrb  
05A1 8D04             (/dd/sourcecode/as):00716                  bsr   L0682          Add hex digit version of high nibble to output buffer
05A3 3504             (/dd/sourcecode/as):00717                  puls  b              Get original full byte value back
05A5 C40F             (/dd/sourcecode/as):00718                  andb  #$0F           Low nibble only
05A7 C109             (/dd/sourcecode/as):00719         L0682    cmpb  #9             If 0-9, ASCII-fy it
05A9 2302             (/dd/sourcecode/as):00720                  bls   L0688
05AB CB07             (/dd/sourcecode/as):00721                  addb  #$07           If A-F, adjust it up first
05AD CB30             (/dd/sourcecode/as):00722         L0688    addb  #$30           Convert nibble to ASCII
05AF 1E89             (/dd/sourcecode/as):00723                  exg   a,b            Swap regs for subroutine
05B1 8D88             (/dd/sourcecode/as):00724                  bsr   AppA2Buf       Add hex digit to output buffer
05B3 1E89             (/dd/sourcecode/as):00725                  exg   a,b            Swap regs back & return
05B5 39               (/dd/sourcecode/as):00726         L06DE    rts
                      (/dd/sourcecode/as):00727         
                      (/dd/sourcecode/as):00728         * Append decimal version of D to output buffer (up to 5 digits as needed)
                      (/dd/sourcecode/as):00729         * Entry: D=16 bit number
05B6 3464             (/dd/sourcecode/as):00730         AppndDec pshs  u,y,b
05B8 338C2C           (/dd/sourcecode/as):00731                  leau  <L06C3,pcr     Point to powers of 10 table
05BB 0F17             (/dd/sourcecode/as):00732                  clr   <u0017
05BD 108E0005         (/dd/sourcecode/as):00733                  ldy   #5             Number of powers of 10 to go through
05C1 6FE4             (/dd/sourcecode/as):00734         L069D    clr   ,s             Clear digit
05C3 A3C4             (/dd/sourcecode/as):00735         L069F    subd  ,u             Subtract current power of 10
05C5 2504             (/dd/sourcecode/as):00736                  bcs   L06A7          Done as many for current power that we can, go to next lower power
05C7 6CE4             (/dd/sourcecode/as):00737                  inc   ,s             Add 1 to current digit
05C9 20F8             (/dd/sourcecode/as):00738                  bra   L069F          Keep doing current power of 10
                      (/dd/sourcecode/as):00739         
05CB E3C1             (/dd/sourcecode/as):00740         L06A7    addd  ,u++           Add power of 10 back (we went negative), and bump u to next lower 10^
05CD 3404             (/dd/sourcecode/as):00741                  pshs  b              Save LSB for a second
05CF E661             (/dd/sourcecode/as):00742                  ldb   1,s            Get original LSB
05D1 1E89             (/dd/sourcecode/as):00743                  exg   a,b            Swap for routine
05D3 8D1C             (/dd/sourcecode/as):00744                  bsr   L06CD          Call it
05D5 1E89             (/dd/sourcecode/as):00745                  exg   a,b            Swap back
05D7 3504             (/dd/sourcecode/as):00746                  puls  b              Restore LSB
05D9 108C0002         (/dd/sourcecode/as):00747                  cmpy  #2             Down to 1's or 10's?
05DD 2E02             (/dd/sourcecode/as):00748                  bgt   L06BD          No, go to next power of 10
05DF 0C17             (/dd/sourcecode/as):00749                  inc   <u0017         Yes, Bump up ??? 1st
05E1 313F             (/dd/sourcecode/as):00750         L06BD    leay  -1,y           Dec # of powers of 10 left to do
05E3 26DC             (/dd/sourcecode/as):00751                  bne   L069D          Keep going of more to do
05E5 35E4             (/dd/sourcecode/as):00752                  puls  pc,u,y,b
                      (/dd/sourcecode/as):00753         
05E7 271003E80064000A (/dd/sourcecode/as):00754         L06C3    fdb   10000,1000,100,10,1  Decimal powers of 10 table
     0001
                      (/dd/sourcecode/as):00755         
05F1 4D               (/dd/sourcecode/as):00756         L06CD    tsta                 A=0?
05F2 2702             (/dd/sourcecode/as):00757                  beq   L06D2          Yes, leave u0017 alone
05F4 9717             (/dd/sourcecode/as):00758                  sta   <u0017         No, save it
05F6 0D17             (/dd/sourcecode/as):00759         L06D2    tst   <u0017         Is the value<>0
05F8 2608             (/dd/sourcecode/as):00760                  bne   L06DF          Yes, add decimal version of A to output buffer
05FA 0D18             (/dd/sourcecode/as):00761                  tst   <u0018         If u00018=0, exit subroutine
05FC 27B7             (/dd/sourcecode/as):00762                  beq   L06DE
05FE 8620             (/dd/sourcecode/as):00763                  lda   #C$SPAC        Add space to output buffer & return
0600 2002             (/dd/sourcecode/as):00764                  bra   L06E1    
                      (/dd/sourcecode/as):00765         
                      (/dd/sourcecode/as):00766         * Add space to output buffer
0602 8B30             (/dd/sourcecode/as):00767         L06DF    adda  #$30           Convert binary digit to ASCII digit
0604 16FF34           (/dd/sourcecode/as):00768         L06E1    lbra  AppA2Buf       Add to output buffer
                      (/dd/sourcecode/as):00769         
0607 C57F9D           (/dd/sourcecode/as):00770                  emod
     060A             (/dd/sourcecode/as):00771         eom      equ   *
                      (/dd/sourcecode/as):00772                  end
